fn[0m sum_to_n ::[0m .FunctionPath[0m ([0m _1 :[0m usize[0m [0m ,[0m .ParameterList[0m )[0m ->[0m usize[0m [0m {[0m debug[0m n =>[0m _1 ;[0m [0m .DebugList[0m let[0m mut[0m _0 :[0m usize[0m [0m ;[0m [0m let[0m mut[0m _2 :[0m usize[0m [0m ;[0m [0m let[0m mut[0m _4 :[0m bool[0m [0m ;[0m [0m let[0m mut[0m _5 :[0m usize[0m [0m ;[0m [0m let[0m mut[0m _6 :[0m usize[0m [0m ;[0m [0m let[0m mut[0m _7 :[0m usize[0m [0m ;[0m [0m .BindingList[0m scope[0m 1 {[0m debug[0m sum =>[0m _2 ;[0m [0m .DebugList[0m let[0m mut[0m _3 :[0m usize[0m [0m ;[0m [0m .BindingList[0m scope[0m 2 {[0m debug[0m counter =>[0m _3 ;[0m [0m .DebugList[0m .BindingList[0m .ScopeList[0m }[0m [0m .ScopeList[0m }[0m [0m .ScopeList[0m bb0 [0m :[0m {[0m _2 =[0m const[0m 0_usize ;[0m [0m _3 =[0m _1 ;[0m [0m .Statements[0m goto[0m ->[0m bb1 [0m ;[0m }[0m [0m bb1 [0m :[0m {[0m _5 =[0m _3 ;[0m [0m _4 =[0m Gt ([0m move[0m _5 ,[0m const[0m 0_usize )[0m ;[0m [0m .Statements[0m switchInt[0m ([0m move[0m _4 )[0m ->[0m [[0m 0 :[0m bb3 [0m ,[0m .SwitchTargets[0m ,[0m otherwise[0m :[0m bb2 [0m ][0m ;[0m }[0m [0m bb2 [0m :[0m {[0m _6 =[0m _3 ;[0m [0m _2 =[0m Add ([0m _2 ,[0m move[0m _6 )[0m ;[0m [0m _7 =[0m _3 ;[0m [0m _3 =[0m Sub ([0m move[0m _7 ,[0m const[0m 1_usize )[0m ;[0m [0m .Statements[0m goto[0m ->[0m bb1 [0m ;[0m }[0m [0m bb3 [0m :[0m {[0m _0 =[0m _2 ;[0m [0m .Statements[0m return[0m ;[0m }[0m [0m .BasicBlockList[0m }[0m [0m fn[0m test_sum_to_n ::[0m .FunctionPath[0m ([0m .ParameterList[0m )[0m ->[0m ([0m )[0m {[0m .DebugList[0m let[0m mut[0m _0 :[0m ([0m )[0m ;[0m [0m let[0m [0m _1 :[0m usize[0m [0m ;[0m [0m let[0m mut[0m _4 :[0m usize[0m [0m ;[0m [0m let[0m mut[0m _5 :[0m bool[0m [0m ;[0m [0m let[0m mut[0m _6 :[0m ![0m ;[0m [0m .BindingList[0m scope[0m 1 {[0m debug[0m n =>[0m _1 ;[0m [0m .DebugList[0m let[0m [0m _2 :[0m usize[0m [0m ;[0m [0m .BindingList[0m scope[0m 2 {[0m debug[0m golden =>[0m _2 ;[0m [0m .DebugList[0m let[0m [0m _3 :[0m bool[0m [0m ;[0m [0m .BindingList[0m scope[0m 3 {[0m debug[0m sucess =>[0m _3 ;[0m [0m .DebugList[0m .BindingList[0m .ScopeList[0m }[0m [0m .ScopeList[0m }[0m [0m .ScopeList[0m }[0m [0m .ScopeList[0m bb0 [0m :[0m {[0m _1 =[0m const[0m 10_usize ;[0m [0m _2 =[0m const[0m 55_usize ;[0m [0m .Statements[0m _4 =[0m sum_to_n ::[0m .ExpressionPathList[0m ([0m _1 ,[0m .OperandList[0m )[0m ->[0m bb1 [0m ;[0m }[0m [0m bb1 [0m :[0m {[0m _3 =[0m Eq ([0m move[0m _4 ,[0m _2 )[0m ;[0m [0m _5 =[0m Not ([0m _3 )[0m ;[0m [0m .Statements[0m switchInt[0m ([0m move[0m _5 )[0m ->[0m [[0m 0 :[0m bb3 [0m ,[0m .SwitchTargets[0m ,[0m otherwise[0m :[0m bb2 [0m ][0m ;[0m }[0m [0m bb2 [0m :[0m {[0m .Statements[0m _6 =[0m core ::[0m panicking ::[0m panic ::[0m .ExpressionPathList[0m ([0m const[0m "assertion failed: sucess" ,[0m .OperandList[0m )[0m ;[0m }[0m [0m bb3 [0m :[0m {[0m .Statements[0m return[0m ;[0m }[0m [0m .BasicBlockList[0m }[0m [0m fn[0m main ::[0m .FunctionPath[0m ([0m .ParameterList[0m )[0m ->[0m ([0m )[0m {[0m .DebugList[0m let[0m mut[0m _0 :[0m ([0m )[0m ;[0m [0m let[0m [0m _1 :[0m ([0m )[0m ;[0m [0m .BindingList[0m .ScopeList[0m bb0 [0m :[0m {[0m .Statements[0m _1 =[0m test_sum_to_n ::[0m .ExpressionPathList[0m ([0m .OperandList[0m )[0m ->[0m bb1 [0m ;[0m }[0m [0m bb1 [0m :[0m {[0m .Statements[0m return[0m ;[0m }[0m [0m .BasicBlockList[0m }[0m [0m .Mir[0m
