// MIR for `main` after runtime-optimized

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at main.rs:17:11: 17:11
    let _1: Foo;                         // in scope 0 at main.rs:18:9: 18:10
    let mut _2: isize;                   // in scope 0 at main.rs:20:9: 20:18
    let mut _4: bool;                    // in scope 0 at main.rs:20:22: 20:38
    let mut _5: bool;                    // in scope 0 at main.rs:20:30: 20:37
    let mut _6: i32;                     // in scope 0 at main.rs:20:30: 20:31
    let mut _7: !;                       // in scope 0 at main.rs:20:22: 20:38
    let mut _8: !;                       // in scope 0 at main.rs:21:26: 21:40
    let mut _9: Foo;                     // in scope 0 at main.rs:23:11: 23:14
    let mut _10: isize;                  // in scope 0 at main.rs:24:9: 24:18
    let mut _11: !;                      // in scope 0 at main.rs:24:22: 24:36
    let mut _14: bool;                   // in scope 0 at main.rs:26:13: 26:42
    let mut _15: bool;                   // in scope 0 at main.rs:26:21: 26:41
    let mut _16: i32;                    // in scope 0 at main.rs:26:21: 26:22
    let mut _17: bool;                   // in scope 0 at main.rs:26:32: 26:41
    let mut _18: f64;                    // in scope 0 at main.rs:26:32: 26:33
    let mut _19: !;                      // in scope 0 at main.rs:26:13: 26:42
    let mut _20: bool;                   // in scope 0 at main.rs:27:13: 27:29
    let mut _21: bool;                   // in scope 0 at main.rs:27:21: 27:28
    let mut _22: i32;                    // in scope 0 at main.rs:27:21: 27:22
    let mut _23: !;                      // in scope 0 at main.rs:27:13: 27:29
    scope 1 {
        debug x => _1;                   // in scope 1 at main.rs:18:9: 18:10
        let _3: i32;                     // in scope 1 at main.rs:20:16: 20:17
        let _12: i32;                    // in scope 1 at main.rs:25:18: 25:19
        let _13: f64;                    // in scope 1 at main.rs:25:21: 25:22
        scope 2 {
            debug x => _3;               // in scope 2 at main.rs:20:16: 20:17
        }
        scope 3 {
            debug x => _12;              // in scope 3 at main.rs:25:18: 25:19
            debug y => _13;              // in scope 3 at main.rs:25:21: 25:22
        }
    }

    bb0: {
        _1 = a() -> bb1;                 // scope 0 at main.rs:18:13: 18:16
                                         // mir::Constant
                                         // + span: main.rs:18:13: 18:14
                                         // + literal: Const { ty: fn() -> Foo {a}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = discriminant(_1);           // scope 1 at main.rs:19:11: 19:12
        switchInt(move _2) -> [0: bb4, 1: bb2, otherwise: bb3]; // scope 1 at main.rs:19:5: 19:12
    }

    bb2: {
        _8 = core::panicking::panic(const "assertion failed: false"); // scope 1 at main.rs:21:26: 21:40
                                         // mir::Constant
                                         // + span: main.rs:21:26: 21:40
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        unreachable;                     // scope 1 at main.rs:19:11: 19:12
    }

    bb4: {
        _3 = ((_1 as A).0: i32);         // scope 1 at main.rs:20:16: 20:17
        _6 = _3;                         // scope 2 at main.rs:20:30: 20:31
        _5 = Eq(move _6, const 10_i32);  // scope 2 at main.rs:20:30: 20:37
        _4 = Not(move _5);               // scope 2 at main.rs:20:22: 20:38
        switchInt(move _4) -> [0: bb6, otherwise: bb5]; // scope 2 at main.rs:20:22: 20:38
    }

    bb5: {
        _7 = core::panicking::panic(const "assertion failed: x == 10"); // scope 2 at main.rs:20:22: 20:38
                                         // mir::Constant
                                         // + span: main.rs:20:22: 20:38
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        _9 = b() -> bb7;                 // scope 1 at main.rs:23:11: 23:14
                                         // mir::Constant
                                         // + span: main.rs:23:11: 23:12
                                         // + literal: Const { ty: fn() -> Foo {b}, val: Value(<ZST>) }
    }

    bb7: {
        _10 = discriminant(_9);          // scope 1 at main.rs:23:11: 23:14
        switchInt(move _10) -> [0: bb10, 1: bb8, otherwise: bb9]; // scope 1 at main.rs:23:5: 23:14
    }

    bb8: {
        _12 = ((_9 as B).0: i32);        // scope 1 at main.rs:25:18: 25:19
        _13 = ((_9 as B).1: f64);        // scope 1 at main.rs:25:21: 25:22
        _16 = _12;                       // scope 3 at main.rs:26:21: 26:22
        switchInt(move _16) -> [30: bb12, otherwise: bb11]; // scope 3 at main.rs:26:21: 26:41
    }

    bb9: {
        unreachable;                     // scope 1 at main.rs:23:11: 23:14
    }

    bb10: {
        _11 = core::panicking::panic(const "assertion failed: false"); // scope 1 at main.rs:24:22: 24:36
                                         // mir::Constant
                                         // + span: main.rs:24:22: 24:36
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb11: {
        _15 = const false;               // scope 3 at main.rs:26:21: 26:41
        goto -> bb13;                    // scope 3 at main.rs:26:21: 26:41
    }

    bb12: {
        _18 = _13;                       // scope 3 at main.rs:26:32: 26:33
        _17 = Eq(move _18, const 60f64); // scope 3 at main.rs:26:32: 26:41
        _15 = move _17;                  // scope 3 at main.rs:26:21: 26:41
        goto -> bb13;                    // scope 3 at main.rs:26:21: 26:41
    }

    bb13: {
        _14 = Not(move _15);             // scope 3 at main.rs:26:13: 26:42
        switchInt(move _14) -> [0: bb15, otherwise: bb14]; // scope 3 at main.rs:26:13: 26:42
    }

    bb14: {
        _19 = core::panicking::panic(const "assertion failed: x == 30 && y == 60.0"); // scope 3 at main.rs:26:13: 26:42
                                         // mir::Constant
                                         // + span: main.rs:26:13: 26:42
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        _22 = _12;                       // scope 3 at main.rs:27:21: 27:22
        _21 = Eq(move _22, const 31_i32); // scope 3 at main.rs:27:21: 27:28
        _20 = Not(move _21);             // scope 3 at main.rs:27:13: 27:29
        switchInt(move _20) -> [0: bb17, otherwise: bb16]; // scope 3 at main.rs:27:13: 27:29
    }

    bb16: {
        _23 = core::panicking::panic(const "assertion failed: x == 31"); // scope 3 at main.rs:27:13: 27:29
                                         // mir::Constant
                                         // + span: main.rs:27:13: 27:29
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb17: {
        return;                          // scope 0 at main.rs:30:2: 30:2
    }
}
