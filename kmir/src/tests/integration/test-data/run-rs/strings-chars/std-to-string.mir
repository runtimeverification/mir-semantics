// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::string::String;
    let _2: &str;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: &std::string::String;
    let mut _6: &&str;
    let _7: &str;
    let mut _8: !;
    scope 1 {
        debug a => _1;
    }

    bb0: {
        _2 = const "abcd";
        _1 = <str as ToString>::to_string(_2) -> bb1;
    }

    bb1: {
        _5 = &_1;
        _7 = const "abcd";
        _6 = &_7;
        _4 = <String as PartialEq<&str>>::eq(move _5, move _6) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _3 = Not(move _4);
        switchInt(move _3) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _8 = core::panicking::panic(const "assertion failed: a == \\\"abcd\\\"") -> bb6;
    }

    bb4: {
        drop(_1) -> bb5;
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_1) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }
}
