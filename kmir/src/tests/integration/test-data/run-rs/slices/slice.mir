// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: [i32; 4];
    let _3: &[i32];
    let mut _4: &[i32; 4];
    let mut _5: std::ops::Range<usize>;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: &&[i32];
    let mut _9: &[i32; 2];
    let _10: [i32; 2];
    let mut _11: !;
    scope 1 {
        debug a => _1;
        let _2: &[i32];
        scope 2 {
            debug b => _2;
        }
    }

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32];
        _4 = &_1;
        _5 = std::ops::Range::<usize> { start: const 1_usize, end: const 3_usize };
        _3 = <[i32; 4] as Index<std::ops::Range<usize>>>::index(move _4, move _5) -> bb1;
    }

    bb1: {
        _2 = _3;
        _8 = &_2;
        _10 = [const 2_i32, const 3_i32];
        _9 = &_10;
        _7 = <&[i32] as PartialEq<[i32; 2]>>::eq(move _8, move _9) -> bb2;
    }

    bb2: {
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _11 = core::panicking::panic(const "assertion failed: b == [2, 3]");
    }

    bb4: {
        return;
    }
}
