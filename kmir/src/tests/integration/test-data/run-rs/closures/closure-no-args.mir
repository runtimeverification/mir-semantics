// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: [closure@closures/closure.rs:2:15: 2:24];
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: u32;
    let mut _5: &[closure@closures/closure.rs:2:15: 2:24];
    let mut _6: !;
    scope 1 {
        debug sum => const ZeroSized: [closure@closures/closure.rs:2:15: 2:24];
    }

    bb0: {
        _5 = &_1;
        _4 = <[closure@closures/closure.rs:2:15: 2:24] as Fn<()>>::call(move _5, const ()) -> bb1;
    }

    bb1: {
        _3 = Eq(move _4, const 42_u32);
        _2 = Not(move _3);
        switchInt(move _2) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _6 = core::panicking::panic(const "assertion failed: sum() == 42");
    }

    bb3: {
        return;
    }
}

fn main::{closure#0}(_1: &[closure@closures/closure.rs:2:15: 2:24]) -> u32 {
    let mut _0: u32;

    bb0: {
        _0 = const 42_u32;
        return;
    }
}
