// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test_binop(_1: i32, _2: i32) -> () {
    debug x => _1;
    debug y => _2;
    let mut _0: ();
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: i32;
    let mut _6: !;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: i32;
    let mut _10: !;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: i32;
    let mut _14: i32;
    let mut _15: !;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: i32;
    let mut _19: !;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: i32;
    let mut _23: !;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: i32;
    let mut _27: i32;
    let mut _28: !;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: i32;
    let mut _32: !;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: i32;
    let mut _36: i32;
    let mut _37: !;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: i32;
    let mut _41: i32;
    let mut _42: !;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: i32;
    let mut _46: i32;
    let mut _47: i32;
    let mut _48: !;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: i32;
    let mut _52: !;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: i32;
    let mut _56: !;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: i32;
    let mut _60: !;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: i32;
    let mut _64: !;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: i32;
    let mut _68: !;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: i32;
    let mut _72: !;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: i32;
    let mut _76: !;
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: i32;
    let mut _80: !;
    let mut _81: bool;
    let mut _82: bool;
    let mut _83: i32;
    let mut _84: !;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: i32;
    let mut _88: !;
    let mut _89: bool;
    let mut _90: bool;
    let mut _91: i32;
    let mut _92: !;
    let mut _93: bool;
    let mut _94: bool;
    let mut _95: i32;
    let mut _96: !;
    let mut _97: bool;
    let mut _98: bool;
    let mut _99: i32;
    let mut _100: i32;
    let mut _101: !;
    let mut _102: bool;
    let mut _103: bool;
    let mut _104: i32;
    let mut _105: !;
    let mut _106: bool;
    let mut _107: bool;
    let mut _108: i32;
    let mut _109: !;
    let mut _110: bool;
    let mut _111: bool;
    let mut _112: i32;
    let mut _113: i32;
    let mut _114: !;

    bb0: {
        _5 = Add(_1, _2);
        _4 = Eq(move _5, const 52_i32);
        _3 = Not(move _4);
        switchInt(move _3) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _6 = core::panicking::panic(const "assertion failed: x + y == 52");
    }

    bb2: {
        _9 = Add(_1, _2);
        _8 = Eq(const 52_i32, move _9);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _10 = core::panicking::panic(const "assertion failed: 52 == x + y");
    }

    bb4: {
        _13 = Add(_1, _2);
        _14 = Add(_2, _1);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _15 = core::panicking::panic(const "assertion failed: x + y == y + x");
    }

    bb6: {
        _18 = Sub(_1, _2);
        _17 = Eq(move _18, const 32_i32);
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _19 = core::panicking::panic(const "assertion failed: x - y == 32");
    }

    bb8: {
        _22 = Sub(_2, _1);
        _21 = Eq(move _22, const -32_i32);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _23 = core::panicking::panic(const "assertion failed: y - x == -32");
    }

    bb10: {
        _26 = Sub(_2, _1);
        _27 = Sub(_1, _2);
        _25 = Ne(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _28 = core::panicking::panic(const "assertion failed: y - x != x - y");
    }

    bb12: {
        _31 = Mul(_1, _2);
        _30 = Eq(move _31, const 420_i32);
        _29 = Not(move _30);
        switchInt(move _29) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _32 = core::panicking::panic(const "assertion failed: x * y == 420");
    }

    bb14: {
        _36 = Neg(_2);
        _35 = Mul(_1, move _36);
        _34 = Eq(move _35, const -420_i32);
        _33 = Not(move _34);
        switchInt(move _33) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _37 = core::panicking::panic(const "assertion failed: x * -y == -420");
    }

    bb16: {
        _41 = Neg(_1);
        _40 = Mul(move _41, _2);
        _39 = Eq(move _40, const -420_i32);
        _38 = Not(move _39);
        switchInt(move _38) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _42 = core::panicking::panic(const "assertion failed: -x * y == -420");
    }

    bb18: {
        _46 = Neg(_1);
        _47 = Neg(_2);
        _45 = Mul(move _46, move _47);
        _44 = Eq(move _45, const 420_i32);
        _43 = Not(move _44);
        switchInt(move _43) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _48 = core::panicking::panic(const "assertion failed: -x * -y == 420");
    }

    bb20: {
        _51 = BitXor(const 1_i32, const 2_i32);
        _50 = Eq(move _51, const 3_i32);
        _49 = Not(move _50);
        switchInt(move _49) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _52 = core::panicking::panic(const "assertion failed: 1 ^ 2 == 3");
    }

    bb22: {
        _55 = BitXor(const 1_i32, const 3_i32);
        _54 = Eq(move _55, const 2_i32);
        _53 = Not(move _54);
        switchInt(move _53) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _56 = core::panicking::panic(const "assertion failed: 1 ^ 3 == 2");
    }

    bb24: {
        _59 = BitOr(const 1_i32, const 2_i32);
        _58 = Eq(move _59, const 3_i32);
        _57 = Not(move _58);
        switchInt(move _57) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _60 = core::panicking::panic(const "assertion failed: 1 | 2 == 3");
    }

    bb26: {
        _63 = BitOr(const 1_i32, const 3_i32);
        _62 = Eq(move _63, const 3_i32);
        _61 = Not(move _62);
        switchInt(move _61) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _64 = core::panicking::panic(const "assertion failed: 1 | 3 == 3");
    }

    bb28: {
        _67 = BitAnd(const 1_i32, const 2_i32);
        _66 = Eq(move _67, const 0_i32);
        _65 = Not(move _66);
        switchInt(move _65) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _68 = core::panicking::panic(const "assertion failed: 1 & 2 == 0");
    }

    bb30: {
        _71 = BitAnd(const 1_i32, const 3_i32);
        _70 = Eq(move _71, const 1_i32);
        _69 = Not(move _70);
        switchInt(move _69) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _72 = core::panicking::panic(const "assertion failed: 1 & 3 == 1");
    }

    bb32: {
        _75 = Shl(const 2_i32, const 1_i32);
        _74 = Eq(move _75, const 4_i32);
        _73 = Not(move _74);
        switchInt(move _73) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        _76 = core::panicking::panic(const "assertion failed: 2 << 1 == 4");
    }

    bb34: {
        _79 = Shr(const 2_i32, const 1_i32);
        _78 = Eq(move _79, const 1_i32);
        _77 = Not(move _78);
        switchInt(move _77) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _80 = core::panicking::panic(const "assertion failed: 2 >> 1 == 1");
    }

    bb36: {
        _83 = Shr(const 3_i32, const 1_i32);
        _82 = Eq(move _83, const 1_i32);
        _81 = Not(move _82);
        switchInt(move _81) -> [0: bb38, otherwise: bb37];
    }

    bb37: {
        _84 = core::panicking::panic(const "assertion failed: 3 >> 1 == 1");
    }

    bb38: {
        _87 = Shr(const 1_i32, const 1_i32);
        _86 = Eq(move _87, const 0_i32);
        _85 = Not(move _86);
        switchInt(move _85) -> [0: bb40, otherwise: bb39];
    }

    bb39: {
        _88 = core::panicking::panic(const "assertion failed: 1 >> 1 == 0");
    }

    bb40: {
        _91 = Add(_1, _2);
        _90 = Lt(_1, move _91);
        _89 = Not(move _90);
        switchInt(move _89) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _92 = core::panicking::panic(const "assertion failed: x < x + y");
    }

    bb42: {
        _95 = Add(_1, _2);
        _94 = Le(_1, move _95);
        _93 = Not(move _94);
        switchInt(move _93) -> [0: bb44, otherwise: bb43];
    }

    bb43: {
        _96 = core::panicking::panic(const "assertion failed: x <= x + y");
    }

    bb44: {
        _100 = Add(_1, _2);
        _99 = Sub(move _100, _2);
        _98 = Le(_1, move _99);
        _97 = Not(move _98);
        switchInt(move _97) -> [0: bb46, otherwise: bb45];
    }

    bb45: {
        _101 = core::panicking::panic(const "assertion failed: x <= x + y - y");
    }

    bb46: {
        _104 = Add(_1, _2);
        _103 = Gt(move _104, _1);
        _102 = Not(move _103);
        switchInt(move _102) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _105 = core::panicking::panic(const "assertion failed: x + y > x");
    }

    bb48: {
        _108 = Add(_1, _2);
        _107 = Ge(move _108, _1);
        _106 = Not(move _107);
        switchInt(move _106) -> [0: bb50, otherwise: bb49];
    }

    bb49: {
        _109 = core::panicking::panic(const "assertion failed: x + y >= x");
    }

    bb50: {
        _113 = Add(_1, _2);
        _112 = Sub(move _113, _2);
        _111 = Ge(move _112, _1);
        _110 = Not(move _111);
        switchInt(move _110) -> [0: bb52, otherwise: bb51];
    }

    bb51: {
        _114 = core::panicking::panic(const "assertion failed: x + y - y >= x");
    }

    bb52: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: i32;
    let _3: ();
    scope 1 {
        debug x => _1;
        let _2: i32;
        scope 2 {
            debug y => _2;
        }
    }

    bb0: {
        _1 = const 42_i32;
        _2 = const 10_i32;
        _3 = test_binop(_1, _2) -> bb1;
    }

    bb1: {
        return;
    }
}
