// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: i32;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: !;

    bb0: {
        _4 = Eq(const 10_i32, const 0_i32);
        assert(!move _4, "attempt to divide `{}` by zero", const 420_i32) -> bb1;
    }

    bb1: {
        _5 = Eq(const 10_i32, const -1_i32);
        _6 = Eq(const 420_i32, const i32::MIN);
        _7 = BitAnd(move _5, move _6);
        assert(!move _7, "attempt to compute `{} / {}`, which would overflow", const 420_i32, const 10_i32) -> bb2;
    }

    bb2: {
        _3 = Div(const 420_i32, const 10_i32);
        _2 = Eq(move _3, const 42_i32);
        _1 = Not(move _2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _8 = core::panicking::panic(const "assertion failed: 420 / 10 == 42");
    }

    bb4: {
        return;
    }
}
