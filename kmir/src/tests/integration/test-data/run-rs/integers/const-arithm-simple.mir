// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test(_1: usize, _2: usize) -> bool {
    debug x => _1;
    debug y => _2;
    let mut _0: bool;

    bb0: {
        _0 = Gt(_1, _2);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: usize;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: !;
    scope 1 {
        debug x => _1;
        let _2: usize;
        scope 2 {
            debug y => _2;
            let _3: bool;
            scope 3 {
                debug z => _3;
            }
        }
    }

    bb0: {
        _1 = const 42_usize;
        _2 = const 0_usize;
        _3 = test(_1, _2) -> bb1;
    }

    bb1: {
        _5 = _3;
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _6 = core::panicking::panic(const "assertion failed: z");
    }

    bb3: {
        return;
    }
}
