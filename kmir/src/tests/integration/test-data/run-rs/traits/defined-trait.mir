// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at traits/defined-trait.rs:10:1: 10:27>::summarise(_1: &Container) -> String {
    debug self => _1;
    let mut _0: std::string::String;
    let _2: &str;

    bb0: {
        _2 = const "The number is zero or more!";
        _0 = <str as ToString>::to_string(_2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Container;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: &std::string::String;
    let _5: std::string::String;
    let mut _6: &Container;
    let mut _7: &&str;
    let _8: &str;
    let mut _9: !;
    scope 1 {
        debug con => _1;
    }

    bb0: {
        _1 = Container { number: const 42_u32 };
        _6 = &_1;
        _5 = <Container as Summary>::summarise(move _6) -> bb1;
    }

    bb1: {
        _4 = &_5;
        _8 = const "The number is zero or more!";
        _7 = &_8;
        _3 = <String as PartialEq<&str>>::eq(move _4, move _7) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _2 = Not(move _3);
        drop(_5) -> bb3;
    }

    bb3: {
        switchInt(move _2) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _9 = core::panicking::panic(const "assertion failed: con.summarise() == \\\"The number is zero or more!\\\"");
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_5) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }
}
