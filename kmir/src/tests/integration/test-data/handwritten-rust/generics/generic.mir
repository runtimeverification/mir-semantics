// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn index_slice(_1: &[T], _2: usize) -> &T {
    debug slice => _1;
    debug index => _2;
    let mut _0: &T;
    let mut _3: usize;
    let mut _4: bool;

    bb0: {
        _3 = Len((*_1));
        _4 = Lt(_2, _3);
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> bb1;
    }

    bb1: {
        _0 = &(*_1)[_2];
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: [i32; 5];
    let _4: &i32;
    let _5: &[i32];
    let _6: &[i32];
    let mut _7: &[i32; 5];
    let _9: &char;
    let _10: &[char];
    let _11: &[char];
    let mut _12: &[char; 5];
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: i32;
    let mut _16: !;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: char;
    let mut _20: !;
    scope 1 {
        debug numbers => _1;
        let _2: [char; 5];
        scope 2 {
            debug letters => _2;
            let _3: &i32;
            scope 3 {
                debug middle_number => _3;
                let _8: &char;
                scope 4 {
                    debug middle_letter => _8;
                }
            }
        }
    }

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32];
        _2 = [const 'a', const 'b', const 'c', const 'd', const 'e'];
        _7 = &_1;
        _6 = <[i32; 5] as Index<RangeFull>>::index(move _7, const RangeFull) -> bb1;
    }

    bb1: {
        _5 = _6;
        _4 = index_slice::<i32>(_5, const 2_usize) -> bb2;
    }

    bb2: {
        _3 = _4;
        _12 = &_2;
        _11 = <[char; 5] as Index<RangeFull>>::index(move _12, const RangeFull) -> bb3;
    }

    bb3: {
        _10 = _11;
        _9 = index_slice::<char>(_10, const 2_usize) -> bb4;
    }

    bb4: {
        _8 = _9;
        _15 = (*_3);
        _14 = Eq(move _15, const 3_i32);
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _16 = core::panicking::panic(const "assertion failed: *middle_number == 3");
    }

    bb6: {
        _19 = (*_8);
        _18 = Eq(move _19, const 'c');
        _17 = Not(move _18);
        switchInt(move _17) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _20 = core::panicking::panic(const "assertion failed: *middle_letter == \\'c\\'");
    }

    bb8: {
        return;
    }
}
