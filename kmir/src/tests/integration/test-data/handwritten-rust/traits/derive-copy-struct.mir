// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at traits/derive-copy-struct.rs:1:16: 1:21>::clone(_1: &Container) -> Container {
    debug self => _1;
    let mut _0: Container;
    scope 1 {
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn take_first_container(_1: &[Container]) -> Container {
    debug containers => _1;
    let mut _0: Container;
    let _2: usize;
    let mut _3: usize;
    let mut _4: bool;

    bb0: {
        _2 = const 0_usize;
        _3 = Len((*_1));
        _4 = Lt(_2, _3);
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> bb1;
    }

    bb1: {
        _0 = (*_1)[_2];
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Container;
    let _5: &[Container];
    let _6: &[Container];
    let mut _7: &[Container; 2];
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: u32;
    let mut _11: !;
    scope 1 {
        debug con1 => _1;
        let _2: Container;
        scope 2 {
            debug con2 => _2;
            let _3: [Container; 2];
            scope 3 {
                debug cons => _3;
                let _4: Container;
                scope 4 {
                    debug first => _4;
                }
            }
        }
    }

    bb0: {
        _1 = Container { number: const 42_u32 };
        _2 = Container { number: const 24_u32 };
        _3 = [_1, _2];
        _7 = &_3;
        _6 = <[Container; 2] as Index<RangeFull>>::index(move _7, const RangeFull) -> bb1;
    }

    bb1: {
        _5 = _6;
        _4 = take_first_container(_5) -> bb2;
    }

    bb2: {
        _10 = (_4.0: u32);
        _9 = Eq(move _10, const 42_u32);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _11 = core::panicking::panic(const "assertion failed: first.number == 42");
    }

    bb4: {
        return;
    }
}
