// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn sum_to_n(_1: usize) -> usize {
    debug n => _1;                       // in scope 0 at test-sum-to-n.rs:1:13: 1:14
    let mut _0: usize;                   // return place in scope 0 at test-sum-to-n.rs:2:9: 2:16
    let mut _3: bool;                    // in scope 0 at test-sum-to-n.rs:5:11: 5:22
    let mut _4: usize;                   // in scope 0 at test-sum-to-n.rs:5:11: 5:18
    let mut _5: usize;                   // in scope 0 at test-sum-to-n.rs:6:14: 6:21
    let mut _6: usize;                   // in scope 0 at test-sum-to-n.rs:7:17: 7:24
    scope 1 {
        debug sum => _0;                 // in scope 1 at test-sum-to-n.rs:2:9: 2:16
        let mut _2: usize;               // in scope 1 at test-sum-to-n.rs:3:9: 3:20
        scope 2 {
            debug counter => _2;         // in scope 2 at test-sum-to-n.rs:3:9: 3:20
        }
    }

    bb0: {
        _0 = const 0_usize;              // scope 0 at test-sum-to-n.rs:2:19: 2:20
        _2 = _1;                         // scope 1 at test-sum-to-n.rs:3:23: 3:24
        goto -> bb1;                     // scope 2 at test-sum-to-n.rs:5:5: 8:6
    }

    bb1: {
        _4 = _2;                         // scope 2 at test-sum-to-n.rs:5:11: 5:18
        _3 = Gt(move _4, const 0_usize); // scope 2 at test-sum-to-n.rs:5:11: 5:22
        switchInt(move _3) -> [0: bb3, otherwise: bb2]; // scope 2 at test-sum-to-n.rs:5:11: 5:22
    }

    bb2: {
        _5 = _2;                         // scope 2 at test-sum-to-n.rs:6:14: 6:21
        _0 = Add(_0, move _5);           // scope 2 at test-sum-to-n.rs:6:7: 6:21
        _6 = _2;                         // scope 2 at test-sum-to-n.rs:7:17: 7:24
        _2 = Sub(move _6, const 1_usize); // scope 2 at test-sum-to-n.rs:7:7: 7:28
        goto -> bb1;                     // scope 2 at test-sum-to-n.rs:5:5: 8:6
    }

    bb3: {
        return;                          // scope 0 at test-sum-to-n.rs:10:2: 10:2
    }
}

fn test_sum_to_n() -> () {
    let mut _0: ();                      // return place in scope 0 at test-sum-to-n.rs:12:23: 12:25
    let _1: usize;                       // in scope 0 at test-sum-to-n.rs:13:9: 13:10
    let mut _4: usize;                   // in scope 0 at test-sum-to-n.rs:15:18: 15:29
    let mut _5: usize;                   // in scope 0 at test-sum-to-n.rs:15:27: 15:28
    let mut _6: usize;                   // in scope 0 at test-sum-to-n.rs:15:33: 15:39
    let mut _7: bool;                    // in scope 0 at test-sum-to-n.rs:16:5: 16:20
    let mut _8: bool;                    // in scope 0 at test-sum-to-n.rs:16:13: 16:19
    let mut _9: !;                       // in scope 0 at test-sum-to-n.rs:16:5: 16:20
    scope 1 {
        debug n => _1;                   // in scope 1 at test-sum-to-n.rs:13:9: 13:10
        let _2: usize;                   // in scope 1 at test-sum-to-n.rs:14:9: 14:15
        scope 2 {
            debug golden => _2;          // in scope 2 at test-sum-to-n.rs:14:9: 14:15
            let _3: bool;                // in scope 2 at test-sum-to-n.rs:15:9: 15:15
            scope 3 {
                debug sucess => _3;      // in scope 3 at test-sum-to-n.rs:15:9: 15:15
            }
        }
    }

    bb0: {
        _1 = const 10_usize;             // scope 0 at test-sum-to-n.rs:13:13: 13:15
        _2 = const 55_usize;             // scope 1 at test-sum-to-n.rs:14:18: 14:20
        _5 = const 10_usize;             // scope 2 at test-sum-to-n.rs:15:27: 15:28
        _4 = sum_to_n(move _5) -> bb1;   // scope 2 at test-sum-to-n.rs:15:18: 15:29
                                         // mir::Constant
                                         // + span: test-sum-to-n.rs:15:18: 15:26
                                         // + literal: Const { ty: fn(usize) -> usize {sum_to_n}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = _2;                         // scope 2 at test-sum-to-n.rs:15:33: 15:39
        _3 = Eq(move _4, move _6);       // scope 2 at test-sum-to-n.rs:15:18: 15:39
        _8 = _3;                         // scope 3 at test-sum-to-n.rs:16:13: 16:19
        _7 = Not(move _8);               // scope 3 at test-sum-to-n.rs:16:5: 16:20
        switchInt(move _7) -> [0: bb3, otherwise: bb2]; // scope 3 at test-sum-to-n.rs:16:5: 16:20
    }

    bb2: {
        _9 = core::panicking::panic(const "assertion failed: sucess"); // scope 3 at test-sum-to-n.rs:16:5: 16:20
                                         // mir::Constant
                                         // + span: test-sum-to-n.rs:16:5: 16:20
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        return;                          // scope 0 at test-sum-to-n.rs:17:2: 17:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at test-sum-to-n.rs:20:11: 20:11
    let _1: ();                          // in scope 0 at test-sum-to-n.rs:21:3: 21:18

    bb0: {
        _1 = test_sum_to_n() -> bb1;     // scope 0 at test-sum-to-n.rs:21:3: 21:18
                                         // mir::Constant
                                         // + span: test-sum-to-n.rs:21:3: 21:16
                                         // + literal: Const { ty: fn() {test_sum_to_n}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at test-sum-to-n.rs:23:2: 23:2
    }
}
