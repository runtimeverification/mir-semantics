// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: [closure@closures/closure-args.rs:2:15: 2:28];
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: i32;
    let mut _5: &[closure@closures/closure-args.rs:2:15: 2:28];
    let mut _6: (i32, i32);
    let mut _7: !;
    scope 1 {
        debug sum => const ZeroSized: [closure@closures/closure-args.rs:2:15: 2:28];
    }

    bb0: {
        _5 = &_1;
        _6 = (const 20_i32, const 22_i32);
        _4 = <[closure@closures/closure-args.rs:2:15: 2:28] as Fn<(i32, i32)>>::call(move _5, move _6) -> bb1;
    }

    bb1: {
        _3 = Eq(move _4, const 42_i32);
        _2 = Not(move _3);
        switchInt(move _2) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _7 = core::panicking::panic(const "assertion failed: sum(20, 22) == 42");
    }

    bb3: {
        return;
    }
}

fn main::{closure#0}(_1: &[closure@closures/closure-args.rs:2:15: 2:28], _2: i32, _3: i32) -> i32 {
    debug x => _2;
    debug y => _3;
    let mut _0: i32;

    bb0: {
        _0 = Add(_2, _3);
        return;
    }
}
