<kmir>
  <k>
    #EndProgram ~> .K
  </k>
  <retVal>
    noReturn
  </retVal>
  <currentFunc>
    ty ( -2 )
  </currentFunc>
  <currentFrame>
    <currentBody>
      ListItem ( basicBlock (... statements: statement (... kind: statementKindAssign (... place: place (... local: local ( 3 ) , projection: .ProjectionElems ) , rvalue: rvalueDiscriminant ( place (... local: local ( 1 ) , projection: .ProjectionElems ) ) ) , span: span ( 6 ) )  .Statements , terminator: terminator (... kind: terminatorKindSwitchInt (... discr: operandMove ( place (... local: local ( 3 ) , projection: .ProjectionElems ) ) , targets: switchTargets (... branches: branch ( 0 , basicBlockIdx ( 16 ) )  branch ( 1 , basicBlockIdx ( 3 ) )  branch ( 2 , basicBlockIdx ( 1 ) )  .Branches , otherwise: basicBlockIdx ( 17 ) ) ) , span: span ( 5 ) ) ) )
      ListItem ( basicBlock (... statements: statement (... kind: statementKindAssign (... place: place (... local: local ( 2 ) , projection: .ProjectionElems ) , rvalue: rvalueDiscriminant ( place (... local: local ( 1 ) , projection: projectionElemDowncast ( variantIdx ( 2 ) )  projectionElemField ( fieldIdx ( 1 ) , ty ( 2 ) )  .ProjectionElems ) ) ) , span: span ( 6 ) )  .Statements , terminator: terminator (... kind: terminatorKindSwitchInt (... discr: operandMove ( place (... local: local ( 2 ) , projection: .ProjectionElems ) ) , targets: switchTargets (... branches: branch ( 1 , basicBlockIdx ( 2 ) )  branch ( 0 , basicBlockIdx ( 16 ) )  .Branches , otherwise: basicBlockIdx ( 17 ) ) ) , span: span ( 5 ) ) ) )
      ListItem ( basicBlock (... statements: statement (... kind: statementKindAssign (... place: place (... local: local ( 15 ) , projection: .ProjectionElems ) , rvalue: rvalueUse ( operandCopy ( place (... local: local ( 1 ) , projection: projectionElemDowncast ( variantIdx ( 2 ) )  projectionElemField ( fieldIdx ( 0 ) , ty ( 1 ) )  .ProjectionElems ) ) ) ) , span: span ( 9 ) )  statement (... kind: statementKindAssign (... place: place (... local: local ( 16 ) , projection: .ProjectionElems ) , rvalue: rvalueUse ( operandCopy ( place (... local: local ( 1 ) , projection: projectionElemDowncast ( variantIdx ( 2 ) )  projectionElemField ( fieldIdx ( 1 ) , ty ( 2 ) )  projectionElemDowncast ( variantIdx ( 1 ) )  projectionElemField ( fieldIdx ( 0 ) , ty ( 1 ) )  .ProjectionElems ) ) ) ) , span: span ( 10 ) )  .Statements , terminator: terminator (... kind: terminatorKindCall (... func: operandConstant ( constOperand (... span: span ( 7 ) , userTy: someUserTypeAnnotationIndex ( userTypeAnnotationIndex ( 0 ) ) , const: mirConst (... kind: constantKindZeroSized , ty: ty ( 3 ) , id: mirConstId ( 0 ) ) ) ) , args: operandCopy ( place (... local: local ( 15 ) , projection: .ProjectionElems ) )  .Operands , destination: place (... local: local ( 19 ) , projection: .ProjectionElems ) , target: someBasicBlockIdx ( basicBlockIdx ( 10 ) ) , unwind: unwindActionContinue ) , span: span ( 8 ) ) ) )
      ListItem ( basicBlock (... statements: statement (... kind: statementKindAssign (... place: place (... local: local ( 4 ) , projection: .ProjectionElems ) , rvalue: rvalueUse ( operandCopy ( place (... local: local ( 1 ) , projection: projectionElemDowncast ( variantIdx ( 1 ) )  projectionElemField ( fieldIdx ( 0 ) , ty ( 4 ) )  projectionElemField ( fieldIdx ( 0 ) , ty ( 5 ) )  .ProjectionElems ) ) ) ) , span: span ( 12 ) )  statement (... kind: statementKindAssign (... place: place (... local: local ( 5 ) , projection: .ProjectionElems ) , rvalue: rvalueUse ( operandCopy ( place (... local: local ( 1 ) , projection: projectionElemDowncast ( variantIdx ( 1 ) )  projectionElemField ( fieldIdx ( 0 ) , ty ( 4 ) )  projectionElemField ( fieldIdx ( 1 ) , ty ( 5 ) )  .ProjectionElems ) ) ) ) , span: span ( 13 ) )  statement (... kind: statementKindAssign (... place: place (... local: local ( 6 ) , projection: .ProjectionElems ) , rvalue: rvalueBinaryOp ( binOpGe , operandCopy ( place (... local: local ( 4 ) , projection: .ProjectionElems ) ) , operandCopy ( place (... local: local ( 5 ) , projection: .ProjectionElems ) ) ) ) , span: span ( 11 ) )  .Statements , terminator: terminator (... kind: terminatorKindSwitchInt (... discr: operandMove ( place (... local: local ( 6 ) , projection: .ProjectionElems ) ) , targets: switchTargets (... branches: branch ( 0 , basicBlockIdx ( 7 ) )  .Branches , otherwise: basicBlockIdx ( 4 ) ) ) , span: span ( 11 ) ) ) )
      ListItem ( basicBlock (... statements: statement (... kind: statementKindAssign (... place: place (... local: local ( 9 ) , projection: .ProjectionElems ) , rvalue: rvalueCheckedBinaryOp ( binOpSub , operandCopy ( place (... local: local ( 4 ) , projection: .ProjectionElems ) ) , operandCopy ( place (... local: local ( 5 ) , projection: .ProjectionElems ) ) ) ) , span: span ( 14 ) )  .Statements , terminator: terminator (... kind: assert (... cond: operandMove ( place (... local: local ( 9 ) , projection: projectionElemField ( fieldIdx ( 1 ) , ty ( 6 ) )  .ProjectionElems ) ) , expected: false , msg: assertMessageOverflow ( binOpSub , operandCopy ( place (... local: local ( 4 ) , projection: .ProjectionElems ) ) , operandCopy ( place (... local: local ( 5 ) , projection: .ProjectionElems ) ) ) , target: basicBlockIdx ( 5 ) , unwind: unwindActionContinue ) , span: span ( 14 ) ) ) )
      ListItem ( basicBlock (... statements: statement (... kind: statementKindAssign (... place: place (... local: local ( 8 ) , projection: .ProjectionElems ) , rvalue: rvalueUse ( operandMove ( place (... local: local ( 9 ) , projection: projectionElemField ( fieldIdx ( 0 ) , ty ( 5 ) )  .ProjectionElems ) ) ) ) , span: span ( 14 ) )  statement (... kind: statementKindAssign (... place: place (... local: local ( 7 ) , projection: .ProjectionElems ) , rvalue: rvalueBinaryOp ( binOpGe , operandMove ( place (... local: local ( 8 ) , projection: .ProjectionElems ) ) , operandConstant ( constOperand (... span: span ( 16 ) , userTy: noUserTypeAnnotationIndex , const: mirConst (... kind: constantKindAllocated ( allocation (... bytes: b"\x00\x00\x00\x00" , provenance: provenanceMap (... ptrs: .ProvenanceMapEntries ) , align: align ( 4 ) , mutability: mutabilityMut ) ) , ty: ty ( 5 ) , id: mirConstId ( 1 ) ) ) ) ) ) , span: span ( 15 ) )  .Statements , terminator: terminator (... kind: terminatorKindSwitchInt (... discr: operandMove ( place (... local: local ( 7 ) , projection: .ProjectionElems ) ) , targets: switchTargets (... branches: branch ( 0 , basicBlockIdx ( 6 ) )  .Branches , otherwise: basicBlockIdx ( 16 ) ) ) , span: span ( 15 ) ) ) )
      ListItem ( basicBlock (... statements: .Statements , terminator: terminator (... kind: terminatorKindCall (... func: operandConstant ( constOperand (... span: span ( 17 ) , userTy: noUserTypeAnnotationIndex , const: mirConst (... kind: constantKindZeroSized , ty: ty ( 7 ) , id: mirConstId ( 2 ) ) ) ) , args: operandConstant ( constOperand (... span: span ( 18 ) , userTy: noUserTypeAnnotationIndex , const: mirConst (... kind: constantKindAllocated ( allocation (... bytes: b"\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00\x00\x00\x00\x00" , provenance: provenanceMap (... ptrs: provenanceMapEntry (... offset: 0 , allocId: allocId ( 0 ) )  .ProvenanceMapEntries ) , align: align ( 8 ) , mutability: mutabilityMut ) ) , ty: ty ( 8 ) , id: mirConstId ( 3 ) ) ) )  .Operands , destination: place (... local: local ( 10 ) , projection: .ProjectionElems ) , target: noBasicBlockIdx , unwind: unwindActionContinue ) , span: span ( 17 ) ) ) )
      ListItem ( basicBlock (... statements: statement (... kind: statementKindAssign (... place: place (... local: local ( 13 ) , projection: .ProjectionElems ) , rvalue: rvalueCheckedBinaryOp ( binOpSub , operandCopy ( place (... local: local ( 5 ) , projection: .ProjectionElems ) ) , operandCopy ( place (... local: local ( 4 ) , projection: .ProjectionElems ) ) ) ) , span: span ( 19 ) )  .Statements , terminator: terminator (... kind: assert (... cond: operandMove ( place (... local: local ( 13 ) , projection: projectionElemField ( fieldIdx ( 1 ) , ty ( 6 ) )  .ProjectionElems ) ) , expected: false , msg: assertMessageOverflow ( binOpSub , operandCopy ( place (... local: local ( 5 ) , projection: .ProjectionElems ) ) , operandCopy ( place (... local: local ( 4 ) , projection: .ProjectionElems ) ) ) , target: basicBlockIdx ( 8 ) , unwind: unwindActionContinue ) , span: span ( 19 ) ) ) )
      ListItem ( basicBlock (... statements: statement (... kind: statementKindAssign (... place: place (... local: local ( 12 ) , projection: .ProjectionElems ) , rvalue: rvalueUse ( operandMove ( place (... local: local ( 13 ) , projection: projectionElemField ( fieldIdx ( 0 ) , ty ( 5 ) )  .ProjectionElems ) ) ) ) , span: span ( 19 ) )  statement (... kind: statementKindAssign (... place: place (... local: local ( 11 ) , projection: .ProjectionElems ) , rvalue: rvalueBinaryOp ( binOpGe , operandMove ( place (... local: local ( 12 ) , projection: .ProjectionElems ) ) , operandConstant ( constOperand (... span: span ( 21 ) , userTy: noUserTypeAnnotationIndex , const: mirConst (... kind: constantKindAllocated ( allocation (... bytes: b"\x00\x00\x00\x00" , provenance: provenanceMap (... ptrs: .ProvenanceMapEntries ) , align: align ( 4 ) , mutability: mutabilityMut ) ) , ty: ty ( 5 ) , id: mirConstId ( 1 ) ) ) ) ) ) , span: span ( 20 ) )  .Statements , terminator: terminator (... kind: terminatorKindSwitchInt (... discr: operandMove ( place (... local: local ( 11 ) , projection: .ProjectionElems ) ) , targets: switchTargets (... branches: branch ( 0 , basicBlockIdx ( 9 ) )  .Branches , otherwise: basicBlockIdx ( 16 ) ) ) , span: span ( 20 ) ) ) )
      ListItem ( basicBlock (... statements: .Statements , terminator: terminator (... kind: terminatorKindCall (... func: operandConstant ( constOperand (... span: span ( 22 ) , userTy: noUserTypeAnnotationIndex , const: mirConst (... kind: constantKindZeroSized , ty: ty ( 7 ) , id: mirConstId ( 2 ) ) ) ) , args: operandConstant ( constOperand (... span: span ( 18 ) , userTy: noUserTypeAnnotationIndex , const: mirConst (... kind: constantKindAllocated ( allocation (... bytes: b"\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00\x00\x00\x00\x00" , provenance: provenanceMap (... ptrs: provenanceMapEntry (... offset: 0 , allocId: allocId ( 1 ) )  .ProvenanceMapEntries ) , align: align ( 8 ) , mutability: mutabilityMut ) ) , ty: ty ( 8 ) , id: mirConstId ( 4 ) ) ) )  .Operands , destination: place (... local: local ( 14 ) , projection: .ProjectionElems ) , target: noBasicBlockIdx , unwind: unwindActionContinue ) , span: span ( 22 ) ) ) )
      ListItem ( basicBlock (... statements: .Statements , terminator: terminator (... kind: terminatorKindCall (... func: operandConstant ( constOperand (... span: span ( 23 ) , userTy: someUserTypeAnnotationIndex ( userTypeAnnotationIndex ( 1 ) ) , const: mirConst (... kind: constantKindZeroSized , ty: ty ( 3 ) , id: mirConstId ( 0 ) ) ) ) , args: operandCopy ( place (... local: local ( 16 ) , projection: .ProjectionElems ) )  .Operands , destination: place (... local: local ( 20 ) , projection: .ProjectionElems ) , target: someBasicBlockIdx ( basicBlockIdx ( 11 ) ) , unwind: unwindActionContinue ) , span: span ( 24 ) ) ) )
      ListItem ( basicBlock (... statements: statement (... kind: statementKindAssign (... place: place (... local: local ( 21 ) , projection: .ProjectionElems ) , rvalue: rvalueCheckedBinaryOp ( binOpAdd , operandCopy ( place (... local: local ( 19 ) , projection: .ProjectionElems ) ) , operandCopy ( place (... local: local ( 20 ) , projection: .ProjectionElems ) ) ) ) , span: span ( 25 ) )  .Statements , terminator: terminator (... kind: assert (... cond: operandMove ( place (... local: local ( 21 ) , projection: projectionElemField ( fieldIdx ( 1 ) , ty ( 6 ) )  .ProjectionElems ) ) , expected: false , msg: assertMessageOverflow ( binOpAdd , operandMove ( place (... local: local ( 19 ) , projection: .ProjectionElems ) ) , operandMove ( place (... local: local ( 20 ) , projection: .ProjectionElems ) ) ) , target: basicBlockIdx ( 12 ) , unwind: unwindActionContinue ) , span: span ( 25 ) ) ) )
      ListItem ( basicBlock (... statements: statement (... kind: statementKindAssign (... place: place (... local: local ( 18 ) , projection: .ProjectionElems ) , rvalue: rvalueUse ( operandMove ( place (... local: local ( 21 ) , projection: projectionElemField ( fieldIdx ( 0 ) , ty ( 0 ) )  .ProjectionElems ) ) ) ) , span: span ( 25 ) )  statement (... kind: statementKindAssign (... place: place (... local: local ( 24 ) , projection: .ProjectionElems ) , rvalue: rvalueCheckedBinaryOp ( binOpAdd , operandCopy ( place (... local: local ( 15 ) , projection: .ProjectionElems ) ) , operandCopy ( place (... local: local ( 16 ) , projection: .ProjectionElems ) ) ) ) , span: span ( 26 ) )  .Statements , terminator: terminator (... kind: assert (... cond: operandMove ( place (... local: local ( 24 ) , projection: projectionElemField ( fieldIdx ( 1 ) , ty ( 6 ) )  .ProjectionElems ) ) , expected: false , msg: assertMessageOverflow ( binOpAdd , operandCopy ( place (... local: local ( 15 ) , projection: .ProjectionElems ) ) , operandCopy ( place (... local: local ( 16 ) , projection: .ProjectionElems ) ) ) , target: basicBlockIdx ( 13 ) , unwind: unwindActionContinue ) , span: span ( 26 ) ) ) )
      ListItem ( basicBlock (... statements: statement (... kind: statementKindAssign (... place: place (... local: local ( 23 ) , projection: .ProjectionElems ) , rvalue: rvalueUse ( operandMove ( place (... local: local ( 24 ) , projection: projectionElemField ( fieldIdx ( 0 ) , ty ( 1 ) )  .ProjectionElems ) ) ) ) , span: span ( 26 ) )  .Statements , terminator: terminator (... kind: terminatorKindCall (... func: operandConstant ( constOperand (... span: span ( 27 ) , userTy: someUserTypeAnnotationIndex ( userTypeAnnotationIndex ( 2 ) ) , const: mirConst (... kind: constantKindZeroSized , ty: ty ( 3 ) , id: mirConstId ( 0 ) ) ) ) , args: operandMove ( place (... local: local ( 23 ) , projection: .ProjectionElems ) )  .Operands , destination: place (... local: local ( 22 ) , projection: .ProjectionElems ) , target: someBasicBlockIdx ( basicBlockIdx ( 14 ) ) , unwind: unwindActionContinue ) , span: span ( 28 ) ) ) )
      ListItem ( basicBlock (... statements: statement (... kind: statementKindAssign (... place: place (... local: local ( 17 ) , projection: .ProjectionElems ) , rvalue: rvalueBinaryOp ( binOpGe , operandMove ( place (... local: local ( 18 ) , projection: .ProjectionElems ) ) , operandMove ( place (... local: local ( 22 ) , projection: .ProjectionElems ) ) ) ) , span: span ( 29 ) )  .Statements , terminator: terminator (... kind: terminatorKindSwitchInt (... discr: operandMove ( place (... local: local ( 17 ) , projection: .ProjectionElems ) ) , targets: switchTargets (... branches: branch ( 0 , basicBlockIdx ( 15 ) )  .Branches , otherwise: basicBlockIdx ( 16 ) ) ) , span: span ( 29 ) ) ) )
      ListItem ( basicBlock (... statements: .Statements , terminator: terminator (... kind: terminatorKindCall (... func: operandConstant ( constOperand (... span: span ( 30 ) , userTy: noUserTypeAnnotationIndex , const: mirConst (... kind: constantKindZeroSized , ty: ty ( 7 ) , id: mirConstId ( 2 ) ) ) ) , args: operandConstant ( constOperand (... span: span ( 18 ) , userTy: noUserTypeAnnotationIndex , const: mirConst (... kind: constantKindAllocated ( allocation (... bytes: b"\x00\x00\x00\x00\x00\x00\x00\x00A\x00\x00\x00\x00\x00\x00\x00" , provenance: provenanceMap (... ptrs: provenanceMapEntry (... offset: 0 , allocId: allocId ( 2 ) )  .ProvenanceMapEntries ) , align: align ( 8 ) , mutability: mutabilityMut ) ) , ty: ty ( 8 ) , id: mirConstId ( 5 ) ) ) )  .Operands , destination: place (... local: local ( 25 ) , projection: .ProjectionElems ) , target: noBasicBlockIdx , unwind: unwindActionContinue ) , span: span ( 30 ) ) ) )
      ListItem ( basicBlock (... statements: .Statements , terminator: terminator (... kind: terminatorKindReturn , span: span ( 31 ) ) ) )
      ListItem ( basicBlock (... statements: .Statements , terminator: terminator (... kind: terminatorKindUnreachable , span: span ( 32 ) ) ) )
    </currentBody>
    <caller>
      ty ( -1 )
    </caller>
    <dest>
      place (... local: local ( 0 ) , projection: .ProjectionElems )
    </dest>
    <target>
      noBasicBlockIdx
    </target>
    <unwind>
      unwindActionContinue
    </unwind>
    <locals>
      ListItem ( newLocal ( ty ( 9 ) , mutabilityMut ) )
      ListItem ( typedValue ( Aggregate ( variantIdx ( 0 ) , .List ) , ty ( 10 ) , mutabilityNot ) )
      ListItem ( newLocal ( ty ( 11 ) , mutabilityMut ) )
      ListItem ( typedValue ( Moved , ty ( 11 ) , mutabilityMut ) )
      ListItem ( newLocal ( ty ( 5 ) , mutabilityNot ) )
      ListItem ( newLocal ( ty ( 5 ) , mutabilityNot ) )
      ListItem ( newLocal ( ty ( 6 ) , mutabilityMut ) )
      ListItem ( newLocal ( ty ( 6 ) , mutabilityMut ) )
      ListItem ( newLocal ( ty ( 5 ) , mutabilityMut ) )
      ListItem ( newLocal ( ty ( 12 ) , mutabilityMut ) )
      ListItem ( newLocal ( ty ( 13 ) , mutabilityMut ) )
      ListItem ( newLocal ( ty ( 6 ) , mutabilityMut ) )
      ListItem ( newLocal ( ty ( 5 ) , mutabilityMut ) )
      ListItem ( newLocal ( ty ( 12 ) , mutabilityMut ) )
      ListItem ( newLocal ( ty ( 13 ) , mutabilityMut ) )
      ListItem ( newLocal ( ty ( 1 ) , mutabilityNot ) )
      ListItem ( newLocal ( ty ( 1 ) , mutabilityNot ) )
      ListItem ( newLocal ( ty ( 6 ) , mutabilityMut ) )
      ListItem ( newLocal ( ty ( 0 ) , mutabilityMut ) )
      ListItem ( newLocal ( ty ( 0 ) , mutabilityMut ) )
      ListItem ( newLocal ( ty ( 0 ) , mutabilityMut ) )
      ListItem ( newLocal ( ty ( 14 ) , mutabilityMut ) )
      ListItem ( newLocal ( ty ( 0 ) , mutabilityMut ) )
      ListItem ( newLocal ( ty ( 1 ) , mutabilityMut ) )
      ListItem ( newLocal ( ty ( 15 ) , mutabilityMut ) )
      ListItem ( newLocal ( ty ( 13 ) , mutabilityMut ) )
    </locals>
  </currentFrame>
  <stack>
    ListItem ( StackFrame ( ty ( -1 ) , place (... local: local ( -1 ) , projection: .ProjectionElems ) , noBasicBlockIdx , unwindActionUnreachable , ListItem ( newLocal ( ty ( 0 ) , mutabilityNot ) )
    ListItem ( typedValue ( Aggregate ( variantIdx ( 0 ) , .List ) , ty ( 10 ) , mutabilityNot ) ) ) )
  </stack>
</kmir>