  <kmir>
    <k>
      #ProgramError ( AssertError ( assertMessageMisalignedPointerDereference (... required: operandCopy ( place (... local: local ( 6 ) , projection: .ProjectionElems ) ) , found: operandCopy ( place (... local: local ( 5 ) , projection: .ProjectionElems ) ) ) ) ) ~> #execBlockIdx ( basicBlockIdx ( 1 ) ) ~> .K
    </k>
    <retVal>
      noReturn
    </retVal>
    <currentFunc>
      ty ( 32 )
    </currentFunc>
    <currentFrame>
      <currentBody>
        ListItem ( basicBlock (... statements: statement (... kind: statementKindAssign (... place: place (... local: local ( 3 ) , projection: .ProjectionElems ) , rvalue: rvalueAddressOf ( mutabilityNot , place (... local: local ( 1 ) , projection: projectionElemDeref  .ProjectionElems ) ) ) , span: span ( 51 ) )  statement (... kind: statementKindAssign (... place: place (... local: local ( 2 ) , projection: .ProjectionElems ) , rvalue: rvalueCast ( castKindPtrToPtr , operandMove ( place (... local: local ( 3 ) , projection: .ProjectionElems ) ) , ty ( 25 ) ) ) , span: span ( 52 ) )  statement (... kind: statementKindAssign (... place: place (... local: local ( 4 ) , projection: .ProjectionElems ) , rvalue: rvalueCast ( castKindPtrToPtr , operandCopy ( place (... local: local ( 2 ) , projection: .ProjectionElems ) ) , ty ( 26 ) ) ) , span: span ( 50 ) )  statement (... kind: statementKindAssign (... place: place (... local: local ( 5 ) , projection: .ProjectionElems ) , rvalue: rvalueCast ( castKindTransmute , operandCopy ( place (... local: local ( 4 ) , projection: .ProjectionElems ) ) , ty ( 27 ) ) ) , span: span ( 50 ) )  statement (... kind: statementKindAssign (... place: place (... local: local ( 6 ) , projection: .ProjectionElems ) , rvalue: rvalueNullaryOp ( nullOpAlignOf , ty ( 28 ) ) ) , span: span ( 50 ) )  statement (... kind: statementKindAssign (... place: place (... local: local ( 7 ) , projection: .ProjectionElems ) , rvalue: rvalueBinaryOp ( binOpSub , operandCopy ( place (... local: local ( 6 ) , projection: .ProjectionElems ) ) , operandConstant ( constOperand (... span: span ( 50 ) , userTy: noUserTypeAnnotationIndex , const: mirConst (... kind: constantKindAllocated ( allocation (... bytes: b"\x01\x00\x00\x00\x00\x00\x00\x00" , provenance: provenanceMap (... ptrs: .ProvenanceMapEntries ) , align: align ( 8 ) , mutability: mutabilityMut ) ) , ty: ty ( 27 ) , id: mirConstId ( 9 ) ) ) ) ) ) , span: span ( 50 ) )  statement (... kind: statementKindAssign (... place: place (... local: local ( 8 ) , projection: .ProjectionElems ) , rvalue: rvalueBinaryOp ( binOpBitAnd , operandCopy ( place (... local: local ( 5 ) , projection: .ProjectionElems ) ) , operandCopy ( place (... local: local ( 7 ) , projection: .ProjectionElems ) ) ) ) , span: span ( 50 ) )  statement (... kind: statementKindAssign (... place: place (... local: local ( 9 ) , projection: .ProjectionElems ) , rvalue: rvalueBinaryOp ( binOpEq , operandCopy ( place (... local: local ( 8 ) , projection: .ProjectionElems ) ) , operandConstant ( constOperand (... span: span ( 50 ) , userTy: noUserTypeAnnotationIndex , const: mirConst (... kind: constantKindAllocated ( allocation (... bytes: b"\x00\x00\x00\x00\x00\x00\x00\x00" , provenance: provenanceMap (... ptrs: .ProvenanceMapEntries ) , align: align ( 8 ) , mutability: mutabilityMut ) ) , ty: ty ( 27 ) , id: mirConstId ( 10 ) ) ) ) ) ) , span: span ( 50 ) )  .Statements , terminator: terminator (... kind: assert (... cond: operandCopy ( place (... local: local ( 9 ) , projection: .ProjectionElems ) ) , expected: true , msg: assertMessageMisalignedPointerDereference (... required: operandCopy ( place (... local: local ( 6 ) , projection: .ProjectionElems ) ) , found: operandCopy ( place (... local: local ( 5 ) , projection: .ProjectionElems ) ) ) , target: basicBlockIdx ( 1 ) , unwind: unwindActionUnreachable ) , span: span ( 50 ) ) ) )
        ListItem ( basicBlock (... statements: statement (... kind: statementKindAssign (... place: place (... local: local ( 0 ) , projection: .ProjectionElems ) , rvalue: rvalueUse ( operandCopy ( place (... local: local ( 2 ) , projection: projectionElemDeref  .ProjectionElems ) ) ) ) , span: span ( 50 ) )  .Statements , terminator: terminator (... kind: terminatorKindReturn , span: span ( 53 ) ) ) )
      </currentBody>
      <caller>
        ty ( -1 )
      </caller>
      <dest>
        place (... local: local ( 2 ) , projection: .ProjectionElems )
      </dest>
      <target>
        someBasicBlockIdx ( basicBlockIdx ( 1 ) )
      </target>
      <unwind>
        unwindActionContinue
      </unwind>
      <locals>
        ListItem ( newLocal ( ty ( 28 ) , mutabilityMut ) )
        ListItem ( typedValue ( Reference ( 1 , place (... local: local ( 1 ) , projection: .ProjectionElems ) , mutabilityNot , metadata ( noMetadataSize , 0 , noMetadataSize ) ) , ty ( 29 ) , mutabilityNot ) )
        ListItem ( typedValue ( thunk ( #cast ( PtrLocal ( 1 , place (... local: local ( 1 ) , projection: .ProjectionElems ) , mutabilityNot , metadata ( noMetadataSize , 0 , noMetadataSize ) ) , castKindPtrToPtr , ty ( 30 ) , ty ( 25 ) ) ) , ty ( 25 ) , mutabilityMut ) )
        ListItem ( typedValue ( Moved , ty ( 30 ) , mutabilityMut ) )
        ListItem ( typedValue ( thunk ( #cast ( thunk ( #cast ( PtrLocal ( 1 , place (... local: local ( 1 ) , projection: .ProjectionElems ) , mutabilityNot , metadata ( noMetadataSize , 0 , noMetadataSize ) ) , castKindPtrToPtr , ty ( 30 ) , ty ( 25 ) ) ) , castKindPtrToPtr , ty ( 25 ) , ty ( 26 ) ) ) , ty ( 26 ) , mutabilityMut ) )
        ListItem ( typedValue ( thunk ( #cast ( thunk ( #cast ( thunk ( #cast ( PtrLocal ( 1 , place (... local: local ( 1 ) , projection: .ProjectionElems ) , mutabilityNot , metadata ( noMetadataSize , 0 , noMetadataSize ) ) , castKindPtrToPtr , ty ( 30 ) , ty ( 25 ) ) ) , castKindPtrToPtr , ty ( 25 ) , ty ( 26 ) ) ) , castKindTransmute , ty ( 26 ) , ty ( 27 ) ) ) , ty ( 27 ) , mutabilityMut ) )
        ListItem ( typedValue ( Integer ( 8 , 64 , false ) , ty ( 27 ) , mutabilityMut ) )
        ListItem ( typedValue ( Integer ( 7 , 64 , false ) , ty ( 27 ) , mutabilityMut ) )
        ListItem ( typedValue ( thunk ( #applyBinOp ( binOpBitAnd , thunk ( #cast ( thunk ( #cast ( thunk ( #cast ( PtrLocal ( 1 , place (... local: local ( 1 ) , projection: .ProjectionElems ) , mutabilityNot , metadata ( noMetadataSize , 0 , noMetadataSize ) ) , castKindPtrToPtr , ty ( 30 ) , ty ( 25 ) ) ) , castKindPtrToPtr , ty ( 25 ) , ty ( 26 ) ) ) , castKindTransmute , ty ( 26 ) , ty ( 27 ) ) ) , Integer ( 7 , 64 , false ) , false ) ) , ty ( 27 ) , mutabilityMut ) )
        ListItem ( typedValue ( thunk ( #applyBinOp ( binOpEq , thunk ( #applyBinOp ( binOpBitAnd , thunk ( #cast ( thunk ( #cast ( thunk ( #cast ( PtrLocal ( 1 , place (... local: local ( 1 ) , projection: .ProjectionElems ) , mutabilityNot , metadata ( noMetadataSize , 0 , noMetadataSize ) ) , castKindPtrToPtr , ty ( 30 ) , ty ( 25 ) ) ) , castKindPtrToPtr , ty ( 25 ) , ty ( 26 ) ) ) , castKindTransmute , ty ( 26 ) , ty ( 27 ) ) ) , Integer ( 7 , 64 , false ) , false ) ) , Integer ( 0 , 64 , false ) , false ) ) , ty ( 31 ) , mutabilityMut ) )
      </locals>
    </currentFrame>
    <stack>
      ListItem ( StackFrame ( ty ( -1 ) , place (... local: local ( 0 ) , projection: .ProjectionElems ) , noBasicBlockIdx , unwindActionContinue , ListItem ( newLocal ( ty ( 1 ) , mutabilityMut ) )
      ListItem ( typedValue ( Aggregate ( variantIdx ( 0 ) , ListItem ( Integer ( 7 , 64 , true ) )
      ListItem ( Integer ( 1 , 8 , true ) ) ) , ty ( 35 ) , mutabilityNot ) )
      ListItem ( newLocal ( ty ( 28 ) , mutabilityMut ) )
      ListItem ( typedValue ( Reference ( 0 , place (... local: local ( 1 ) , projection: .ProjectionElems ) , mutabilityNot , metadata ( noMetadataSize , 0 , noMetadataSize ) ) , ty ( 29 ) , mutabilityNot ) )
      ListItem ( newLocal ( ty ( 36 ) , mutabilityMut ) ) ) )
      ListItem ( StackFrame ( ty ( -1 ) , place (... local: local ( -1 ) , projection: .ProjectionElems ) , noBasicBlockIdx , unwindActionUnreachable , .List ) )
    </stack>
  </kmir>
#Or
  <kmir>
    <k>
      #traverseProjection ( toLocal ( 2 ) , thunk ( #cast ( PtrLocal ( 1 , place (... local: local ( 1 ) , projection: .ProjectionElems ) , mutabilityNot , metadata ( noMetadataSize , 0 , noMetadataSize ) ) , castKindPtrToPtr , ty ( 30 ) , ty ( 25 ) ) ) , projectionElemDeref  .ProjectionElems , .Contexts ) ~> #readProjection ( false ) ~> #freezer#setLocalValue(_,_)_RT-DATA_KItem_Place_Evaluation1_ ( place (... local: local ( 0 ) , projection: .ProjectionElems ) ~> .K ) ~> #execStmts ( .Statements ) ~> #execTerminator ( terminator (... kind: terminatorKindReturn , span: span ( 53 ) ) ) ~> .K
    </k>
    <retVal>
      noReturn
    </retVal>
    <currentFunc>
      ty ( 32 )
    </currentFunc>
    <currentFrame>
      <currentBody>
        ListItem ( basicBlock (... statements: statement (... kind: statementKindAssign (... place: place (... local: local ( 3 ) , projection: .ProjectionElems ) , rvalue: rvalueAddressOf ( mutabilityNot , place (... local: local ( 1 ) , projection: projectionElemDeref  .ProjectionElems ) ) ) , span: span ( 51 ) )  statement (... kind: statementKindAssign (... place: place (... local: local ( 2 ) , projection: .ProjectionElems ) , rvalue: rvalueCast ( castKindPtrToPtr , operandMove ( place (... local: local ( 3 ) , projection: .ProjectionElems ) ) , ty ( 25 ) ) ) , span: span ( 52 ) )  statement (... kind: statementKindAssign (... place: place (... local: local ( 4 ) , projection: .ProjectionElems ) , rvalue: rvalueCast ( castKindPtrToPtr , operandCopy ( place (... local: local ( 2 ) , projection: .ProjectionElems ) ) , ty ( 26 ) ) ) , span: span ( 50 ) )  statement (... kind: statementKindAssign (... place: place (... local: local ( 5 ) , projection: .ProjectionElems ) , rvalue: rvalueCast ( castKindTransmute , operandCopy ( place (... local: local ( 4 ) , projection: .ProjectionElems ) ) , ty ( 27 ) ) ) , span: span ( 50 ) )  statement (... kind: statementKindAssign (... place: place (... local: local ( 6 ) , projection: .ProjectionElems ) , rvalue: rvalueNullaryOp ( nullOpAlignOf , ty ( 28 ) ) ) , span: span ( 50 ) )  statement (... kind: statementKindAssign (... place: place (... local: local ( 7 ) , projection: .ProjectionElems ) , rvalue: rvalueBinaryOp ( binOpSub , operandCopy ( place (... local: local ( 6 ) , projection: .ProjectionElems ) ) , operandConstant ( constOperand (... span: span ( 50 ) , userTy: noUserTypeAnnotationIndex , const: mirConst (... kind: constantKindAllocated ( allocation (... bytes: b"\x01\x00\x00\x00\x00\x00\x00\x00" , provenance: provenanceMap (... ptrs: .ProvenanceMapEntries ) , align: align ( 8 ) , mutability: mutabilityMut ) ) , ty: ty ( 27 ) , id: mirConstId ( 9 ) ) ) ) ) ) , span: span ( 50 ) )  statement (... kind: statementKindAssign (... place: place (... local: local ( 8 ) , projection: .ProjectionElems ) , rvalue: rvalueBinaryOp ( binOpBitAnd , operandCopy ( place (... local: local ( 5 ) , projection: .ProjectionElems ) ) , operandCopy ( place (... local: local ( 7 ) , projection: .ProjectionElems ) ) ) ) , span: span ( 50 ) )  statement (... kind: statementKindAssign (... place: place (... local: local ( 9 ) , projection: .ProjectionElems ) , rvalue: rvalueBinaryOp ( binOpEq , operandCopy ( place (... local: local ( 8 ) , projection: .ProjectionElems ) ) , operandConstant ( constOperand (... span: span ( 50 ) , userTy: noUserTypeAnnotationIndex , const: mirConst (... kind: constantKindAllocated ( allocation (... bytes: b"\x00\x00\x00\x00\x00\x00\x00\x00" , provenance: provenanceMap (... ptrs: .ProvenanceMapEntries ) , align: align ( 8 ) , mutability: mutabilityMut ) ) , ty: ty ( 27 ) , id: mirConstId ( 10 ) ) ) ) ) ) , span: span ( 50 ) )  .Statements , terminator: terminator (... kind: assert (... cond: operandCopy ( place (... local: local ( 9 ) , projection: .ProjectionElems ) ) , expected: true , msg: assertMessageMisalignedPointerDereference (... required: operandCopy ( place (... local: local ( 6 ) , projection: .ProjectionElems ) ) , found: operandCopy ( place (... local: local ( 5 ) , projection: .ProjectionElems ) ) ) , target: basicBlockIdx ( 1 ) , unwind: unwindActionUnreachable ) , span: span ( 50 ) ) ) )
        ListItem ( basicBlock (... statements: statement (... kind: statementKindAssign (... place: place (... local: local ( 0 ) , projection: .ProjectionElems ) , rvalue: rvalueUse ( operandCopy ( place (... local: local ( 2 ) , projection: projectionElemDeref  .ProjectionElems ) ) ) ) , span: span ( 50 ) )  .Statements , terminator: terminator (... kind: terminatorKindReturn , span: span ( 53 ) ) ) )
      </currentBody>
      <caller>
        ty ( -1 )
      </caller>
      <dest>
        place (... local: local ( 2 ) , projection: .ProjectionElems )
      </dest>
      <target>
        someBasicBlockIdx ( basicBlockIdx ( 1 ) )
      </target>
      <unwind>
        unwindActionContinue
      </unwind>
      <locals>
        ListItem ( newLocal ( ty ( 28 ) , mutabilityMut ) )
        ListItem ( typedValue ( Reference ( 1 , place (... local: local ( 1 ) , projection: .ProjectionElems ) , mutabilityNot , metadata ( noMetadataSize , 0 , noMetadataSize ) ) , ty ( 29 ) , mutabilityNot ) )
        ListItem ( typedValue ( thunk ( #cast ( PtrLocal ( 1 , place (... local: local ( 1 ) , projection: .ProjectionElems ) , mutabilityNot , metadata ( noMetadataSize , 0 , noMetadataSize ) ) , castKindPtrToPtr , ty ( 30 ) , ty ( 25 ) ) ) , ty ( 25 ) , mutabilityMut ) )
        ListItem ( typedValue ( Moved , ty ( 30 ) , mutabilityMut ) )
        ListItem ( typedValue ( thunk ( #cast ( thunk ( #cast ( PtrLocal ( 1 , place (... local: local ( 1 ) , projection: .ProjectionElems ) , mutabilityNot , metadata ( noMetadataSize , 0 , noMetadataSize ) ) , castKindPtrToPtr , ty ( 30 ) , ty ( 25 ) ) ) , castKindPtrToPtr , ty ( 25 ) , ty ( 26 ) ) ) , ty ( 26 ) , mutabilityMut ) )
        ListItem ( typedValue ( thunk ( #cast ( thunk ( #cast ( thunk ( #cast ( PtrLocal ( 1 , place (... local: local ( 1 ) , projection: .ProjectionElems ) , mutabilityNot , metadata ( noMetadataSize , 0 , noMetadataSize ) ) , castKindPtrToPtr , ty ( 30 ) , ty ( 25 ) ) ) , castKindPtrToPtr , ty ( 25 ) , ty ( 26 ) ) ) , castKindTransmute , ty ( 26 ) , ty ( 27 ) ) ) , ty ( 27 ) , mutabilityMut ) )
        ListItem ( typedValue ( Integer ( 8 , 64 , false ) , ty ( 27 ) , mutabilityMut ) )
        ListItem ( typedValue ( Integer ( 7 , 64 , false ) , ty ( 27 ) , mutabilityMut ) )
        ListItem ( typedValue ( thunk ( #applyBinOp ( binOpBitAnd , thunk ( #cast ( thunk ( #cast ( thunk ( #cast ( PtrLocal ( 1 , place (... local: local ( 1 ) , projection: .ProjectionElems ) , mutabilityNot , metadata ( noMetadataSize , 0 , noMetadataSize ) ) , castKindPtrToPtr , ty ( 30 ) , ty ( 25 ) ) ) , castKindPtrToPtr , ty ( 25 ) , ty ( 26 ) ) ) , castKindTransmute , ty ( 26 ) , ty ( 27 ) ) ) , Integer ( 7 , 64 , false ) , false ) ) , ty ( 27 ) , mutabilityMut ) )
        ListItem ( typedValue ( thunk ( #applyBinOp ( binOpEq , thunk ( #applyBinOp ( binOpBitAnd , thunk ( #cast ( thunk ( #cast ( thunk ( #cast ( PtrLocal ( 1 , place (... local: local ( 1 ) , projection: .ProjectionElems ) , mutabilityNot , metadata ( noMetadataSize , 0 , noMetadataSize ) ) , castKindPtrToPtr , ty ( 30 ) , ty ( 25 ) ) ) , castKindPtrToPtr , ty ( 25 ) , ty ( 26 ) ) ) , castKindTransmute , ty ( 26 ) , ty ( 27 ) ) ) , Integer ( 7 , 64 , false ) , false ) ) , Integer ( 0 , 64 , false ) , false ) ) , ty ( 31 ) , mutabilityMut ) )
      </locals>
    </currentFrame>
    <stack>
      ListItem ( StackFrame ( ty ( -1 ) , place (... local: local ( 0 ) , projection: .ProjectionElems ) , noBasicBlockIdx , unwindActionContinue , ListItem ( newLocal ( ty ( 1 ) , mutabilityMut ) )
      ListItem ( typedValue ( Aggregate ( variantIdx ( 0 ) , ListItem ( Integer ( 7 , 64 , true ) )
      ListItem ( Integer ( 1 , 8 , true ) ) ) , ty ( 35 ) , mutabilityNot ) )
      ListItem ( newLocal ( ty ( 28 ) , mutabilityMut ) )
      ListItem ( typedValue ( Reference ( 0 , place (... local: local ( 1 ) , projection: .ProjectionElems ) , mutabilityNot , metadata ( noMetadataSize , 0 , noMetadataSize ) ) , ty ( 29 ) , mutabilityNot ) )
      ListItem ( newLocal ( ty ( 36 ) , mutabilityMut ) ) ) )
      ListItem ( StackFrame ( ty ( -1 ) , place (... local: local ( -1 ) , projection: .ProjectionElems ) , noBasicBlockIdx , unwindActionUnreachable , .List ) )
    </stack>
  </kmir>