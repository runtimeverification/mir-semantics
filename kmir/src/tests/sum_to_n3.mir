// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: i32;
    let mut _3: bool;
    let mut _4: i32;
    let mut _5: i32;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: i32;
    let mut _9: !;
    scope 1 {
        debug sum => _1;
        let mut _2: i32;
        scope 2 {
            debug i => _2;
        }
    }

    bb0: {
        _1 = const 0_i32;
        _2 = const 0_i32;
        goto -> bb1;
    }

    bb1: {
        _4 = _2;
        _3 = Le(move _4, const 5_i32);
        switchInt(move _3) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _5 = _2;
        _1 = Add(_1, move _5);
        _2 = Add(_2, const 1_i32);
        goto -> bb1;
    }

    bb3: {
        _8 = _1;
        _7 = Eq(move _8, const 15_i32);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _9 = core::panicking::panic(const "assertion failed: sum == 15");
    }

    bb5: {
        return;
    }
}
