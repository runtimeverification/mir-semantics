// MIR for `add` after runtime-optimized

fn add() -> i32 {
    let mut _0: i32;
    let _1: i32;
    let mut _3: i32;
    let mut _4: i32;
    let mut _5: (i32, bool);
    scope 1 {
        debug x => _1;
        let _2: i32;
        scope 2 {
            debug y => _2;
        }
    }

    bb0: {
        StorageLive(_1);
        _1 = const 1_i32;
        StorageLive(_2);
        _2 = const 2_i32;
        StorageLive(_3);
        _3 = _1;
        StorageLive(_4);
        _4 = _2;
        _5 = CheckedAdd(_3, _4);
        assert(!move (_5.1: bool), "attempt to compute `{} + {}`, which would overflow", move _3, move _4) -> bb1;
    }

    bb1: {
        _0 = move (_5.0: i32);
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}
