// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn add() -> i32 {
    let mut _0: i32;                     // return place in scope 0 at add.rs:1:13: 1:16
    let _1: i32;                         // in scope 0 at add.rs:2:9: 2:10
    scope 1 {
        debug x => _1;                   // in scope 1 at add.rs:2:9: 2:10
        let _2: i32;                     // in scope 1 at add.rs:3:9: 3:10
        scope 2 {
            debug y => _2;               // in scope 2 at add.rs:3:9: 3:10
        }
    }

    bb0: {
        _1 = const 1_i32;                // scope 0 at add.rs:2:13: 2:14
        _2 = const 2_i32;                // scope 1 at add.rs:3:13: 3:14
        _0 = const 3_i32;                // scope 2 at add.rs:4:5: 4:10
        return;                          // scope 0 at add.rs:5:2: 5:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at add.rs:7:15: 7:15
    let mut _1: bool;                    // in scope 0 at add.rs:8:5: 8:24
    let mut _2: bool;                    // in scope 0 at add.rs:8:13: 8:23
    let mut _3: i32;                     // in scope 0 at add.rs:8:13: 8:18
    let mut _4: !;                       // in scope 0 at add.rs:8:5: 8:24

    bb0: {
        _3 = add() -> bb1;               // scope 0 at add.rs:8:13: 8:18
                                         // mir::Constant
                                         // + span: add.rs:8:13: 8:16
                                         // + literal: Const { ty: fn() -> i32 {add}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const 3_i32);   // scope 0 at add.rs:8:13: 8:23
        _1 = Not(move _2);               // scope 0 at add.rs:8:5: 8:24
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at add.rs:8:5: 8:24
    }

    bb2: {
        _4 = core::panicking::panic(const "assertion failed: add() == 3"); // scope 0 at add.rs:8:5: 8:24
                                         // mir::Constant
                                         // + span: add.rs:8:5: 8:24
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        return;                          // scope 0 at add.rs:10:2: 10:2
    }
}
