// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn add() -> i32 {
    let mut _0: i32;
    let _1: i32;
    scope 1 {
        debug x => _1;
        let _2: i32;
        scope 2 {
            debug y => _2;
        }
    }

    bb0: {
        _1 = const 1_i32;
        _2 = const 2_i32;
        _0 = Add(_1, _2);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: i32;
    let mut _4: !;

    bb0: {
        _3 = add() -> bb1;
    }

    bb1: {
        _2 = Eq(move _3, const 3_i32);
        _1 = Not(move _2);
        switchInt(move _1) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _4 = core::panicking::panic(const "assertion failed: add() == 3");
    }

    bb3: {
        return;
    }
}
