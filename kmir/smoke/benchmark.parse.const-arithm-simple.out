fn test :: .FunctionPath ( _1 : usize  , _2 : usize  , .ParameterList ) -> bool  { debug x => _1 ;  debug y => _2 ;  .DebugList let mut _0 : bool  ;  .BindingList .ScopeList bb0  : { _0 = Gt ( _1 , _2 ) ;  .Statements return ; }  .BasicBlockList }  fn main :: .FunctionPath ( .ParameterList ) -> ( ) { .DebugList let mut _0 : ( ) ;  let  _1 : usize  ;  let mut _4 : bool  ;  let mut _5 : bool  ;  let mut _6 : ! ;  .BindingList scope 1 { debug x => _1 ;  .DebugList let  _2 : usize  ;  .BindingList scope 2 { debug y => _2 ;  .DebugList let  _3 : bool  ;  .BindingList scope 3 { debug z => _3 ;  .DebugList .BindingList .ScopeList }  .ScopeList }  .ScopeList }  .ScopeList bb0  : { _1 = const 42_usize ;  _2 = const 0_usize ;  .Statements _3 = test :: .ExpressionPathList ( _1 , _2 , .ArgumentList ) -> bb1  ; }  bb1  : { _5 = _3 ;  _4 = Not ( move _5 ) ;  .Statements switchInt ( move _4 ) -> [ 0 : bb3  , .SwitchTargets , otherwise : bb2  ] ; }  bb2  : { .Statements _6 = core :: panicking :: panic :: .ExpressionPathList ( const "assertion failed: z" , .ArgumentList ) ; }  bb3  : { .Statements return ; }  .BasicBlockList }  .Mir

