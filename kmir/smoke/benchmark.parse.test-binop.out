fn test_binop :: .FunctionPath ( _1 : usize  , _2 : usize  , .ParameterList ) -> ( ) { debug x => _1 ;  debug y => _2 ;  .DebugList let mut _0 : ( ) ;  let mut _3 : bool  ;  let mut _4 : bool  ;  let mut _5 : usize  ;  let mut _6 : ! ;  let mut _7 : bool  ;  let mut _8 : bool  ;  let mut _9 : usize  ;  let mut _10 : ! ;  let mut _11 : bool  ;  let mut _12 : bool  ;  let mut _13 : usize  ;  let mut _14 : usize  ;  let mut _15 : ! ;  let mut _16 : bool  ;  let mut _17 : bool  ;  let mut _18 : usize  ;  let mut _19 : ! ;  let mut _20 : bool  ;  let mut _21 : bool  ;  let mut _22 : usize  ;  let mut _23 : ! ;  .BindingList .ScopeList bb0  : { _5 = Add ( _1 , _2 ) ;  _4 = Gt ( move _5 , _1 ) ;  _3 = Not ( move _4 ) ;  .Statements switchInt ( move _3 ) -> [ 0 : bb2  , .SwitchTargets , otherwise : bb1  ] ; }  bb1  : { .Statements _6 = core :: panicking :: panic :: .ExpressionPathList ( const "assertion failed: x + y > x" , .ArgumentList ) ; }  bb2  : { _9 = Add ( _1 , _2 ) ;  _8 = Eq ( move _9 , const 52_usize ) ;  _7 = Not ( move _8 ) ;  .Statements switchInt ( move _7 ) -> [ 0 : bb4  , .SwitchTargets , otherwise : bb3  ] ; }  bb3  : { .Statements _10 = core :: panicking :: panic :: .ExpressionPathList ( const "assertion failed: x + y == 52" , .ArgumentList ) ; }  bb4  : { _13 = Add ( _1 , _2 ) ;  _14 = Add ( _2 , _1 ) ;  _12 = Eq ( move _13 , move _14 ) ;  _11 = Not ( move _12 ) ;  .Statements switchInt ( move _11 ) -> [ 0 : bb6  , .SwitchTargets , otherwise : bb5  ] ; }  bb5  : { .Statements _15 = core :: panicking :: panic :: .ExpressionPathList ( const "assertion failed: x + y == y + x" , .ArgumentList ) ; }  bb6  : { _18 = Add ( _1 , _2 ) ;  _17 = Eq ( move _18 , const 52_usize ) ;  _16 = Not ( move _17 ) ;  .Statements switchInt ( move _16 ) -> [ 0 : bb8  , .SwitchTargets , otherwise : bb7  ] ; }  bb7  : { .Statements _19 = core :: panicking :: panic :: .ExpressionPathList ( const "assertion failed: x + y == 52" , .ArgumentList ) ; }  bb8  : { _22 = Sub ( _1 , _2 ) ;  _21 = Eq ( move _22 , const 32_usize ) ;  _20 = Not ( move _21 ) ;  .Statements switchInt ( move _20 ) -> [ 0 : bb10  , .SwitchTargets , otherwise : bb9  ] ; }  bb9  : { .Statements _23 = core :: panicking :: panic :: .ExpressionPathList ( const "assertion failed: x - y == 32" , .ArgumentList ) ; }  bb10  : { .Statements return ; }  .BasicBlockList }  fn main :: .FunctionPath ( .ParameterList ) -> ( ) { .DebugList let mut _0 : ( ) ;  let  _1 : usize  ;  let  _3 : ( ) ;  .BindingList scope 1 { debug x => _1 ;  .DebugList let  _2 : usize  ;  .BindingList scope 2 { debug y => _2 ;  .DebugList .BindingList .ScopeList }  .ScopeList }  .ScopeList bb0  : { _1 = const 42_usize ;  _2 = const 10_usize ;  .Statements _3 = test_binop :: .ExpressionPathList ( _1 , _2 , .ArgumentList ) -> bb1  ; }  bb1  : { .Statements return ; }  .BasicBlockList }  .Mir

