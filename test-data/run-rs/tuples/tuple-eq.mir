// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: (i32, i32);
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: &(i32, i32);
    let mut _5: &(i32, i32);
    let _6: (i32, i32);
    let mut _7: !;
    scope 1 {
        debug tup => _1;
    }

    bb0: {
        _1 = (const 42_i32, const 99_i32);
        _4 = &_1;
        _6 = (const 42_i32, const 99_i32);
        _5 = &_6;
        _3 = <(i32, i32) as PartialEq>::eq(move _4, move _5) -> bb1;
    }

    bb1: {
        _2 = Not(move _3);
        switchInt(move _2) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _7 = core::panicking::panic(const "assertion failed: tup == (42, 99)");
    }

    bb3: {
        return;
    }
}
