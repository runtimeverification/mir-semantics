// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn sum_to_n(_1: usize) -> usize {
    debug n => _1;
    let mut _0: usize;
    let mut _2: usize;
    let mut _4: bool;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: usize;
    scope 1 {
        debug sum => _2;
        let mut _3: usize;
        scope 2 {
            debug counter => _3;
        }
    }

    bb0: {
        _2 = const 0_usize;
        _3 = _1;
        goto -> bb1;
    }

    bb1: {
        _5 = _3;
        _4 = Gt(move _5, const 0_usize);
        switchInt(move _4) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _6 = _3;
        _2 = Add(_2, move _6);
        _7 = _3;
        _3 = Sub(move _7, const 1_usize);
        goto -> bb1;
    }

    bb3: {
        _0 = _2;
        return;
    }
}

fn test_sum_to_n() -> () {
    let mut _0: ();
    let _1: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: !;
    scope 1 {
        debug n => _1;
        let _2: usize;
        scope 2 {
            debug golden => _2;
            let _3: bool;
            scope 3 {
                debug sucess => _3;
            }
        }
    }

    bb0: {
        _1 = const 10_usize;
        _2 = const 55_usize;
        _4 = sum_to_n(_1) -> bb1;
    }

    bb1: {
        _3 = Eq(move _4, _2);
        _5 = Not(_3);
        switchInt(move _5) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _6 = core::panicking::panic(const "assertion failed: sucess");
    }

    bb3: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();

    bb0: {
        _1 = test_sum_to_n() -> bb1;
    }

    bb1: {
        return;
    }
}
