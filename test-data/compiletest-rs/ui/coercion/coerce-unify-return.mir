// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/coercion/coerce-unify-return.rs:8:1: 8:9>::foo(_1: Foo, _2: T) -> Option<T> {
    debug self => const Foo;
    debug x => _2;
    let mut _0: std::option::Option<T>;

    bb0: {
        _0 = Option::<T>::Some(move _2);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: std::option::Option<fn()>;
    let mut _2: fn();
    let mut _3: std::option::Option<fn()>;
    let mut _4: fn();
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                }
            }
        }
    }

    bb0: {
        _2 = main as fn() (Pointer(ReifyFnPointer));
        _1 = Foo::foo::<fn()>(const Foo, move _2) -> bb1;
    }

    bb1: {
        _4 = main as fn() (Pointer(ReifyFnPointer));
        _3 = Foo::foo::<fn()>(const Foo, move _4) -> bb2;
    }

    bb2: {
        return;
    }
}
