// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn sum(_1: &[isize]) -> isize {
    debug x => _1;
    let mut _0: isize;
    let mut _2: isize;
    let mut _3: std::slice::Iter<'_, isize>;
    let mut _5: std::option::Option<&isize>;
    let mut _6: &mut std::slice::Iter<'_, isize>;
    let mut _7: isize;
    let mut _9: isize;
    scope 1 {
        debug sum => _2;
        let mut _4: std::slice::Iter<'_, isize>;
        scope 2 {
            debug iter => _4;
            let _8: &isize;
            scope 3 {
                debug y => _8;
            }
        }
    }

    bb0: {
        _2 = const 0_isize;
        _3 = <&[isize] as IntoIterator>::into_iter(_1) -> bb1;
    }

    bb1: {
        _4 = move _3;
        goto -> bb2;
    }

    bb2: {
        _6 = &mut _4;
        _5 = <std::slice::Iter<'_, isize> as Iterator>::next(_6) -> bb3;
    }

    bb3: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        _8 = ((_5 as Some).0: &isize);
        _9 = (*_8);
        _2 = Add(_2, move _9);
        goto -> bb2;
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _0 = _2;
        return;
    }
}

fn sum_mut(_1: &mut [isize]) -> isize {
    debug y => _1;
    let mut _0: isize;
    let mut _2: &[isize];

    bb0: {
        _2 = &(*_1);
        _0 = sum(move _2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn sum_imm(_1: &[isize]) -> isize {
    debug y => _1;
    let mut _0: isize;

    bb0: {
        _0 = sum(_1) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
