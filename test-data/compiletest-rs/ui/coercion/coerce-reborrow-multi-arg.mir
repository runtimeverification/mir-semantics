// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test(_1: T, _2: T) -> () {
    debug _a => _1;
    debug _b => _2;
    let mut _0: ();

    bb0: {
        drop(_2) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_1) -> bb2;
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: &i32;
    let _3: i32;
    let _4: &i32;
    let _5: i32;
    let _6: ();
    let mut _7: &i32;
    let _8: i32;
    let mut _9: &i32;
    let _10: &mut i32;
    let mut _11: i32;
    let _12: ();
    let mut _13: &i32;
    let _14: &mut i32;
    let mut _15: i32;
    let _16: &i32;
    let _17: i32;
    let _18: ();
    let mut _19: &i32;
    let _20: &mut i32;
    let mut _21: i32;
    let mut _22: &i32;
    let _23: &mut i32;
    let mut _24: i32;

    bb0: {
        _3 = const 7_i32;
        _2 = &_3;
        _5 = const 7_i32;
        _4 = &_5;
        _1 = test::<&i32>(move _2, _4) -> bb1;
    }

    bb1: {
        _8 = const 7_i32;
        _7 = &_8;
        _11 = const 7_i32;
        _10 = &mut _11;
        _9 = &(*_10);
        _6 = test::<&i32>(move _7, move _9) -> bb2;
    }

    bb2: {
        _15 = const 7_i32;
        _14 = &mut _15;
        _13 = &(*_14);
        _17 = const 7_i32;
        _16 = &_17;
        _12 = test::<&i32>(move _13, _16) -> bb3;
    }

    bb3: {
        _21 = const 7_i32;
        _20 = &mut _21;
        _19 = &(*_20);
        _24 = const 7_i32;
        _23 = &mut _24;
        _22 = &(*_23);
        _18 = test::<&i32>(move _19, move _22) -> bb4;
    }

    bb4: {
        return;
    }
}
