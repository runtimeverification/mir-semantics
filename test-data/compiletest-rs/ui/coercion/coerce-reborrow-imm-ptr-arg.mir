// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn negate(_1: &isize) -> isize {
    debug x => _1;
    let mut _0: isize;
    let mut _2: isize;

    bb0: {
        _2 = (*_1);
        _0 = Neg(move _2);
        return;
    }
}

fn negate_mut(_1: &mut isize) -> isize {
    debug y => _1;
    let mut _0: isize;
    let mut _2: &isize;

    bb0: {
        _2 = &(*_1);
        _0 = negate(move _2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn negate_imm(_1: &isize) -> isize {
    debug y => _1;
    let mut _0: isize;

    bb0: {
        _0 = negate(_1) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
