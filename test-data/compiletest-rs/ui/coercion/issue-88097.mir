// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn peculiar() -> impl Fn(u8) -> u8 {
    let mut _0: impl Fn(u8) -> u8;

    bb0: {
        return;
    }
}

fn peculiar::{closure#0}(_1: &[closure@ui/coercion/issue-88097.rs:8:12: 8:15], _2: u8) -> u8 {
    debug x => _2;
    let mut _0: u8;

    bb0: {
        _0 = Add(_2, const 1_u8);
        return;
    }
}

fn peculiar2() -> impl Fn(u8) -> u8 {
    let mut _0: impl Fn(u8) -> u8;

    bb0: {
        return;
    }
}

fn peculiar2::{closure#0}(_1: &[closure@ui/coercion/issue-88097.rs:12:12: 12:15], _2: u8) -> u8 {
    debug x => _2;
    let mut _0: u8;

    bb0: {
        _0 = Add(_2, const 1_u8);
        return;
    }
}

fn peculiar3() -> impl Fn(u8) -> u8 {
    let mut _0: impl Fn(u8) -> u8;
    scope 1 {
        debug f => const ZeroSized: [closure@ui/coercion/issue-88097.rs:16:13: 16:16];
    }

    bb0: {
        return;
    }
}

fn peculiar3::{closure#0}(_1: &[closure@ui/coercion/issue-88097.rs:16:13: 16:16], _2: u8) -> u8 {
    debug x => _2;
    let mut _0: u8;

    bb0: {
        _0 = Add(_2, const 1_u8);
        return;
    }
}

fn peculiar4() -> impl Fn(u8) -> u8 {
    let mut _0: impl Fn(u8) -> u8;
    scope 1 {
        debug f => const ZeroSized: [closure@ui/coercion/issue-88097.rs:21:13: 21:16];
    }

    bb0: {
        return;
    }
}

fn peculiar4::{closure#0}(_1: &[closure@ui/coercion/issue-88097.rs:21:13: 21:16], _2: u8) -> u8 {
    debug x => _2;
    let mut _0: u8;

    bb0: {
        _0 = Add(_2, const 1_u8);
        return;
    }
}

fn peculiar5() -> impl Fn(u8) -> u8 {
    let mut _0: impl Fn(u8) -> u8;
    let mut _1: bool;
    scope 1 {
        debug f => const ZeroSized: [closure@ui/coercion/issue-88097.rs:26:13: 26:16];
        scope 2 {
            debug g => const ZeroSized: [closure@ui/coercion/issue-88097.rs:27:13: 27:16];
        }
    }

    bb0: {
        _1 = const true;
        switchInt(move _1) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _0 = const ZeroSized: [closure@ui/coercion/issue-88097.rs:26:13: 26:16] as fn(u8) -> u8 (Pointer(ClosureFnPointer(Normal)));
        goto -> bb3;
    }

    bb2: {
        _0 = const ZeroSized: [closure@ui/coercion/issue-88097.rs:27:13: 27:16] as fn(u8) -> u8 (Pointer(ClosureFnPointer(Normal)));
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn peculiar5::{closure#0}(_1: &[closure@ui/coercion/issue-88097.rs:26:13: 26:16], _2: u8) -> u8 {
    debug x => _2;
    let mut _0: u8;

    bb0: {
        _0 = Add(_2, const 1_u8);
        return;
    }
}

fn peculiar5::{closure#1}(_1: &[closure@ui/coercion/issue-88097.rs:27:13: 27:16], _2: u8) -> u8 {
    debug x => _2;
    let mut _0: u8;

    bb0: {
        _0 = Add(_2, const 2_u8);
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
