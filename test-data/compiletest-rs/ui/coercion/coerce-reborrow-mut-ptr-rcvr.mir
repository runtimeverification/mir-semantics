// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/coercion/coerce-reborrow-mut-ptr-rcvr.rs:8:1: 8:17>::talk(_1: &mut SpeechMaker) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        ((*_1).0: usize) = Add(((*_1).0: usize), const 1_usize);
        return;
    }
}

fn give_a_few_speeches(_1: &mut SpeechMaker) -> () {
    debug speaker => _1;
    let mut _0: ();
    let _2: ();
    let _3: ();
    let _4: ();

    bb0: {
        _2 = SpeechMaker::talk(_1) -> bb1;
    }

    bb1: {
        _3 = SpeechMaker::talk(_1) -> bb2;
    }

    bb2: {
        _4 = SpeechMaker::talk(_1) -> bb3;
    }

    bb3: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: SpeechMaker;
    let _2: ();
    let mut _3: &mut SpeechMaker;
    scope 1 {
        debug lincoln => _1;
    }

    bb0: {
        _1 = SpeechMaker { speeches: const 22_usize };
        _3 = &mut _1;
        _2 = give_a_few_speeches(_3) -> bb1;
    }

    bb1: {
        return;
    }
}
