// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn FieldElement::valid_integer_try_from(_1: N) -> Result<<Self as FieldElement>::Integer, ()> {
    debug i => _1;
    let mut _0: std::result::Result<<Self as FieldElement>::Integer, ()>;
    let mut _2: std::result::Result<<Self as FieldElement>::Integer, <<Self as FieldElement>::Integer as std::convert::TryFrom<N>>::Error>;

    bb0: {
        _2 = <<Self as FieldElement>::Integer as TryFrom<N>>::try_from(move _1) -> bb1;
    }

    bb1: {
        _0 = Result::<<Self as FieldElement>::Integer, <<Self as FieldElement>::Integer as TryFrom<N>>::Error>::map_err::<(), [closure@ui/coercion/issue-101066.rs:12:44: 12:47]>(move _2, const ZeroSized: [closure@ui/coercion/issue-101066.rs:12:44: 12:47]) -> bb2;
    }

    bb2: {
        return;
    }
}

fn FieldElement::valid_integer_try_from::{closure#0}(_1: [closure@ui/coercion/issue-101066.rs:12:44: 12:47], _2: <<Self as FieldElement>::Integer as TryFrom<N>>::Error) -> () {
    let mut _0: ();

    bb0: {
        drop(_2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
