// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn bar(_1: &mut [usize]) -> () {
    debug v => _1;
    let mut _0: ();
    let _2: ();
    let _3: ();
    let _4: ();

    bb0: {
        _2 = core::slice::<impl [usize]>::reverse(_1) -> bb1;
    }

    bb1: {
        _3 = core::slice::<impl [usize]>::reverse(_1) -> bb2;
    }

    bb2: {
        _4 = core::slice::<impl [usize]>::reverse(_1) -> bb3;
    }

    bb3: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: std::vec::Vec<usize>;
    let mut _2: std::boxed::Box<[usize]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[usize; 4]>;
    let _7: ();
    let mut _8: &mut [usize];
    let mut _9: &mut [usize];
    let mut _10: &mut std::vec::Vec<usize>;
    let mut _11: (&std::vec::Vec<usize>, &[usize; 4]);
    let mut _12: &std::vec::Vec<usize>;
    let mut _13: &[usize; 4];
    let _14: [usize; 4];
    let mut _17: bool;
    let mut _18: bool;
    let _20: !;
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _22: *const [usize; 4];
    let mut _23: *const ();
    let mut _24: usize;
    let mut _25: usize;
    let mut _26: usize;
    let mut _27: usize;
    let mut _28: bool;
    scope 1 {
        debug the_vec => _1;
        let _15: &std::vec::Vec<usize>;
        let _16: &[usize; 4];
        scope 3 {
            debug left_val => _15;
            debug right_val => _16;
            let _19: core::panicking::AssertKind;
            scope 4 {
                debug kind => _19;
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _3 = SizeOf([usize; 4]);
        _4 = AlignOf([usize; 4]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> bb1;
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [usize; 4]);
        _22 = (((_6.0: std::ptr::Unique<[usize; 4]>).0: std::ptr::NonNull<[usize; 4]>).0: *const [usize; 4]);
        _23 = _22 as *const () (PtrToPtr);
        _24 = _23 as usize (Transmute);
        _25 = AlignOf(usize);
        _26 = Sub(_25, const 1_usize);
        _27 = BitAnd(_24, _26);
        _28 = Eq(_27, const 0_usize);
        assert(_28, "misaligned pointer dereference: address must be a multiple of {} but is {}", _25, _24) -> [success: bb11, unwind unreachable];
    }

    bb2: {
        _10 = &mut _1;
        _9 = <Vec<usize> as DerefMut>::deref_mut(_10) -> [return: bb3, unwind: bb9];
    }

    bb3: {
        _8 = _9;
        _7 = bar(move _8) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        _12 = &_1;
        _14 = [const 100_usize, const 3_usize, const 2_usize, const 1_usize];
        _13 = &_14;
        _11 = (move _12, move _13);
        _15 = (_11.0: &std::vec::Vec<usize>);
        _16 = (_11.1: &[usize; 4]);
        _18 = <Vec<usize> as PartialEq<[usize; 4]>>::eq(_15, _16) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        _17 = Not(move _18);
        switchInt(move _17) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _19 = core::panicking::AssertKind::Eq;
        _21 = Option::<Arguments<'_>>::None;
        _20 = core::panicking::assert_failed::<Vec<usize>, [usize; 4]>(move _19, _15, _16, move _21) -> bb9;
    }

    bb7: {
        drop(_1) -> bb8;
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_1) -> [return: bb10, unwind terminate];
    }

    bb10 (cleanup): {
        resume;
    }

    bb11: {
        (*_22) = [const 1_usize, const 2_usize, const 3_usize, const 100_usize];
        _2 = move _6 as std::boxed::Box<[usize]> (Pointer(Unsize));
        _1 = slice::<impl [usize]>::into_vec::<std::alloc::Global>(move _2) -> bb2;
    }
}
