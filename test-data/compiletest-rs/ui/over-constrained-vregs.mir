// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: usize;
    let mut _2: bool;
    let mut _3: usize;
    let mut _4: usize;
    let _5: ();
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str];
    let _8: &[&str; 2];
    let _9: [&str; 2];
    let mut _10: &[core::fmt::rt::Argument<'_>];
    let _11: &[core::fmt::rt::Argument<'_>; 1];
    let _12: [core::fmt::rt::Argument<'_>; 1];
    let mut _13: core::fmt::rt::Argument<'_>;
    let _14: &usize;
    scope 1 {
        debug b => _1;
    }

    bb0: {
        _1 = const 1_usize;
        goto -> bb1;
    }

    bb1: {
        _3 = _1;
        _4 = std::mem::size_of::<usize>() -> bb2;
    }

    bb2: {
        _2 = Lt(move _3, move _4);
        switchInt(move _2) -> [0: bb6, otherwise: bb3];
    }

    bb3: {
        _1 = Shl(_1, const 1_usize);
        _9 = [const "", const "\n"];
        _8 = &_9;
        _7 = _8 as &[&str] (Pointer(Unsize));
        _14 = &_1;
        _13 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_14) -> bb4;
    }

    bb4: {
        _12 = [move _13];
        _11 = &_12;
        _10 = _11 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _6 = Arguments::<'_>::new_v1(move _7, move _10) -> bb5;
    }

    bb5: {
        _5 = _print(move _6) -> bb1;
    }

    bb6: {
        return;
    }
}
