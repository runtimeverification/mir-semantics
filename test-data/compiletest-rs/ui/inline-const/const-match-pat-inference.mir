// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: u64;
    let mut _2: bool;
    let mut _3: bool;

    bb0: {
        _1 = const 1_u64;
        switchInt(_1) -> [0: bb4, 1: bb4, otherwise: bb1];
    }

    bb1: {
        _2 = Le(const 1_u64, _1);
        switchInt(move _2) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _3 = Le(_1, const u64::MAX);
        switchInt(move _3) -> [0: bb3, otherwise: bb4];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        return;
    }
}

main::{constant#0}: u64 = {
    let mut _0: u64;
    let mut _1: (u64, bool);

    bb0: {
        _1 = CheckedAdd(const 0_u64, const 1_u64);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const 0_u64, const 1_u64) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: u64);
        return;
    }
}

main::{constant#1}: u64 = {
    let mut _0: u64;
    let mut _1: (u64, bool);

    bb0: {
        _1 = CheckedSub(const 2_u64, const 1_u64);
        assert(!move (_1.1: bool), "attempt to compute `{} - {}`, which would overflow", const 2_u64, const 1_u64) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: u64);
        return;
    }
}

main::{constant#2}: u64 = {
    let mut _0: u64;

    bb0: {
        _0 = const _;
        return;
    }
}
