// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: u32;
    scope 1 {
        debug x => _1;
    }

    bb0: {
        _1 = const 3_u32;
        return;
    }
}

const N: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const 10_u32;
        return;
    }
}

main::{constant#0}: u32 = {
    let mut _0: u32;
    let mut _1: (u32, bool);

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: u32);
        return;
    }
}

main::{constant#1}: u32 = {
    let mut _0: u32;
    let mut _1: (u32, bool);

    bb0: {
        _1 = CheckedSub(const _, const 1_u32);
        assert(!move (_1.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, const 1_u32) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: u32);
        return;
    }
}

main::{constant#2}: u32 = {
    let mut _0: u32;
    let mut _1: (u32, bool);

    bb0: {
        _1 = CheckedSub(const _, const 1_u32);
        assert(!move (_1.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, const 1_u32) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: u32);
        return;
    }
}

main::{constant#3}: u32 = {
    let mut _0: u32;
    let mut _1: (u32, bool);

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: u32);
        return;
    }
}

main::{constant#4}: u32 = {
    let mut _0: u32;
    let mut _1: (u32, bool);

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: u32);
        return;
    }
}

main::{constant#5}: u32 = {
    let mut _0: u32;
    let mut _1: (u32, bool);

    bb0: {
        _1 = CheckedSub(const _, const 1_u32);
        assert(!move (_1.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, const 1_u32) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: u32);
        return;
    }
}

main::{constant#6}: u32 = {
    let mut _0: u32;
    let mut _1: (u32, bool);

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: u32);
        return;
    }
}
