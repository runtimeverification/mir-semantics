// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> usize {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

foo::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        ConstEvalCounter;
        _0 = std::mem::size_of::<T>() -> bb1;
    }

    bb1: {
        return;
    }
}

fn bar() -> usize {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

bar::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedAdd(const N, const 1_usize);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const N, const 1_usize) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: usize;
    let _2: usize;

    bb0: {
        _1 = foo::<i32>() -> bb1;
    }

    bb1: {
        _2 = bar::<1>() -> bb2;
    }

    bb2: {
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}
