// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/lazy-type-alias-impl-trait/nested.rs:9:1: 9:25>::prepare_resize(_1: RawTableInner<A>) -> ScopeGuard<RawTableInner<A>, impl for<'a> FnMut(&'a mut RawTableInner<A>)> {
    debug self => _1;
    let mut _0: ScopeGuard<RawTableInner<A>, impl for<'a> FnMut(&'a mut RawTableInner<A>)>;

    bb0: {
        _0 = ScopeGuard::<RawTableInner<A>, [closure@ui/lazy-type-alias-impl-trait/nested.rs:13:30: 13:42]> { dropfn: const ZeroSized: [closure@ui/lazy-type-alias-impl-trait/nested.rs:13:30: 13:42], value: move _1 };
        return;
    }
}

fn <impl at ui/lazy-type-alias-impl-trait/nested.rs:9:1: 9:25>::prepare_resize::{closure#0}(_1: &mut [closure@ui/lazy-type-alias-impl-trait/nested.rs:13:30: 13:42], _2: &mut RawTableInner<A>) -> () {
    debug self_ => _2;
    let mut _0: ();

    bb0: {
        return;
    }
}
