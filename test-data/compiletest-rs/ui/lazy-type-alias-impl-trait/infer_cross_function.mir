// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/lazy-type-alias-impl-trait/infer_cross_function.rs:18:1: 18:37>::find_dwarf_unit(_1: &Context<R>, _2: u64) -> Option<&Unit<R>> {
    debug self => _1;
    debug probe => _2;
    let mut _0: std::option::Option<&Unit<R>>;
    let _3: impl std::iter::Iterator<Item = &ResUnit<R>>;
    scope 1 {
        debug x => const ZeroSized: impl Iterator<Item = &ResUnit<R>>;
    }

    bb0: {
        _3 = Context::<R>::find_units(_1, _2) -> bb1;
    }

    bb1: {
        _0 = Option::<&Unit<R>>::None;
        return;
    }
}

fn <impl at ui/lazy-type-alias-impl-trait/infer_cross_function.rs:18:1: 18:37>::find_units(_1: &Context<R>, _2: u64) -> impl Iterator<Item = &ResUnit<R>> {
    debug self => _1;
    debug probe => _2;
    let mut _0: impl std::iter::Iterator<Item = &ResUnit<R>>;

    bb0: {
        _0 = std::iter::empty::<&ResUnit<R>>() -> bb1;
    }

    bb1: {
        return;
    }
}

fn Unit(_1: R) -> Unit<R> {
    let mut _0: Unit<R>;

    bb0: {
        _0 = Unit::<R>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Unit(_1: R) -> Unit<R> {
    let mut _0: Unit<R>;

    bb0: {
        _0 = Unit::<R>(move _1);
        return;
    }
}

fn ResDwarf(_1: R) -> ResDwarf<R> {
    let mut _0: ResDwarf<R>;

    bb0: {
        _0 = ResDwarf::<R>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn ResDwarf(_1: R) -> ResDwarf<R> {
    let mut _0: ResDwarf<R>;

    bb0: {
        _0 = ResDwarf::<R>(move _1);
        return;
    }
}

fn ResUnit(_1: R) -> ResUnit<R> {
    let mut _0: ResUnit<R>;

    bb0: {
        _0 = ResUnit::<R>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn ResUnit(_1: R) -> ResUnit<R> {
    let mut _0: ResUnit<R>;

    bb0: {
        _0 = ResUnit::<R>(move _1);
        return;
    }
}
