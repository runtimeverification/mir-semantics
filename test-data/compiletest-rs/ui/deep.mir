// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f(_1: isize) -> isize {
    debug x => _1;
    let mut _0: isize;
    let _2: isize;
    let mut _3: isize;
    let mut _4: isize;
    scope 1 {
        debug y => _2;
    }

    bb0: {
        switchInt(move _1) -> [1: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const 1_isize;
        goto -> bb4;
    }

    bb2: {
        _4 = Sub(_1, const 1_isize);
        _3 = f(move _4) -> bb3;
    }

    bb3: {
        _2 = Add(const 1_isize, move _3);
        _0 = _2;
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&isize, &isize);
    let mut _2: &isize;
    let _3: isize;
    let mut _4: &isize;
    let _5: isize;
    let _6: &isize;
    let _7: &isize;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: isize;
    let mut _11: isize;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }

    bb0: {
        _3 = f(const 5000_isize) -> bb1;
    }

    bb1: {
        _2 = &_3;
        _5 = const 5000_isize;
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &isize);
        _7 = (_1.1: &isize);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<isize, isize>(move _12, _6, _7, move _14);
    }

    bb3: {
        return;
    }
}
