// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn get(_1: &Vec<VarValue<K>>, _2: &K) -> &Option<V> {
    debug table => _1;
    debug key => _2;
    let mut _0: &std::option::Option<V>;
    let _3: &std::option::Option<V>;
    let mut _4: &VarValue<K>;
    let mut _5: usize;
    let mut _6: isize;
    let _7: &K;
    let _8: &std::option::Option<V>;
    let _9: &std::option::Option<V>;
    scope 1 {
        debug k => _7;
    }
    scope 2 {
        debug v => _9;
    }

    bb0: {
        _5 = <K as UnifyKey>::to_index(_2) -> bb1;
    }

    bb1: {
        _4 = <Vec<VarValue<K>> as Index<usize>>::index(_1, move _5) -> bb2;
    }

    bb2: {
        _6 = discriminant((*_4));
        switchInt(move _6) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _9 = &(((*_4) as Root).0: std::option::Option<V>);
        _3 = _9;
        goto -> bb7;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = &(((*_4) as Redirect).0: K);
        _8 = get::<K, V>(_1, _7) -> bb6;
    }

    bb6: {
        _3 = _8;
        goto -> bb7;
    }

    bb7: {
        _0 = _3;
        return;
    }
}

fn <impl at ui/associated-types/associated-types-enum-field-numbered.rs:24:1: 24:24>::to_index(_1: &usize) -> usize {
    debug self => _1;
    let mut _0: usize;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<VarValue<usize>>;
    let mut _2: std::boxed::Box<[VarValue<usize>]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[VarValue<usize>; 4]>;
    let mut _7: VarValue<usize>;
    let mut _8: VarValue<usize>;
    let mut _9: VarValue<usize>;
    let mut _10: std::option::Option<char>;
    let mut _11: VarValue<usize>;
    let mut _12: (&&std::option::Option<char>, &&std::option::Option<char>);
    let mut _13: &&std::option::Option<char>;
    let _14: &std::option::Option<char>;
    let _15: &std::vec::Vec<VarValue<usize>>;
    let _16: &usize;
    let _17: usize;
    let mut _18: &&std::option::Option<char>;
    let _19: &std::option::Option<char>;
    let _20: std::option::Option<char>;
    let mut _23: bool;
    let mut _24: bool;
    let _26: !;
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _28: *const [VarValue<usize>; 4];
    let mut _29: *const ();
    let mut _30: usize;
    let mut _31: usize;
    let mut _32: usize;
    let mut _33: usize;
    let mut _34: bool;
    scope 1 {
        debug table => _1;
        let _21: &&std::option::Option<char>;
        let _22: &&std::option::Option<char>;
        scope 3 {
            debug left_val => _21;
            debug right_val => _22;
            let _25: core::panicking::AssertKind;
            scope 4 {
                debug kind => _25;
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _3 = SizeOf([VarValue<usize>; 4]);
        _4 = AlignOf([VarValue<usize>; 4]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> bb1;
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [VarValue<usize>; 4]);
        _7 = VarValue::<usize>::Redirect(const 1_usize);
        _8 = VarValue::<usize>::Redirect(const 3_usize);
        _10 = Option::<char>::Some(const 'x');
        _9 = VarValue::<usize>::Root(move _10, const 0_usize);
        _11 = VarValue::<usize>::Redirect(const 2_usize);
        _28 = (((_6.0: std::ptr::Unique<[VarValue<usize>; 4]>).0: std::ptr::NonNull<[VarValue<usize>; 4]>).0: *const [VarValue<usize>; 4]);
        _29 = _28 as *const () (PtrToPtr);
        _30 = _29 as usize (Transmute);
        _31 = AlignOf(VarValue<usize>);
        _32 = Sub(_31, const 1_usize);
        _33 = BitAnd(_30, _32);
        _34 = Eq(_33, const 0_usize);
        assert(_34, "misaligned pointer dereference: address must be a multiple of {} but is {}", _31, _30) -> [success: bb10, unwind unreachable];
    }

    bb2: {
        _15 = &_1;
        _17 = const 0_usize;
        _16 = &_17;
        _14 = get::<usize, char>(_15, _16) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        _13 = &_14;
        _20 = Option::<char>::Some(const 'x');
        _19 = &_20;
        _18 = &_19;
        _12 = (move _13, move _18);
        _21 = (_12.0: &&std::option::Option<char>);
        _22 = (_12.1: &&std::option::Option<char>);
        _24 = <&Option<char> as PartialEq>::eq(_21, _22) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _25 = core::panicking::AssertKind::Eq;
        _27 = Option::<Arguments<'_>>::None;
        _26 = core::panicking::assert_failed::<&Option<char>, &Option<char>>(move _25, _21, _22, move _27) -> bb8;
    }

    bb6: {
        drop(_1) -> bb7;
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_1) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        resume;
    }

    bb10: {
        (*_28) = [move _7, move _8, move _9, move _11];
        _2 = move _6 as std::boxed::Box<[VarValue<usize>]> (Pointer(Unsize));
        _1 = slice::<impl [VarValue<usize>]>::into_vec::<std::alloc::Global>(move _2) -> bb2;
    }
}

fn VarValue::Redirect(_1: K) -> VarValue<K> {
    let mut _0: VarValue<K>;

    bb0: {
        _0 = VarValue::<K>::Redirect(move _1);
        return;
    }
}

// MIR FOR CTFE
fn VarValue::Redirect(_1: K) -> VarValue<K> {
    let mut _0: VarValue<K>;

    bb0: {
        _0 = VarValue::<K>::Redirect(move _1);
        return;
    }
}

fn VarValue::Root(_1: <K as UnifyKey>::Value, _2: usize) -> VarValue<K> {
    let mut _0: VarValue<K>;

    bb0: {
        _0 = VarValue::<K>::Root(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn VarValue::Root(_1: <K as UnifyKey>::Value, _2: usize) -> VarValue<K> {
    let mut _0: VarValue<K>;

    bb0: {
        _0 = VarValue::<K>::Root(move _1, move _2);
        return;
    }
}
