// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn get_int(_1: &T) -> i32 {
    debug x => _1;
    let mut _0: i32;

    bb0: {
        _0 = <T as SomeTrait>::get(_1) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/associated-types/object-method-numbering.rs:16:1: 16:23>::get(_1: &i32) -> i32 {
    debug self => _1;
    let mut _0: i32;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: i32;
    let _3: &i32;
    let mut _5: (&i32, &i32);
    let mut _6: &i32;
    let mut _7: &i32;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: i32;
    let mut _13: i32;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _2: &dyn SomeTrait<SomeType = i32>;
        scope 2 {
            debug x1 => _2;
            let _4: i32;
            scope 3 {
                debug y => _4;
                let _8: &i32;
                let _9: &i32;
                scope 4 {
                    debug left_val => _8;
                    debug right_val => _9;
                    let _14: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _14;
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const 22_i32;
        _3 = &_1;
        _2 = _3 as &dyn SomeTrait<SomeType = i32> (Pointer(Unsize));
        _4 = get_int::<dyn SomeTrait<SomeType = i32>>(_2) -> bb1;
    }

    bb1: {
        _6 = &_1;
        _7 = &_4;
        _5 = (move _6, move _7);
        _8 = (_5.0: &i32);
        _9 = (_5.1: &i32);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<i32, i32>(move _14, _8, _9, move _16);
    }

    bb3: {
        return;
    }
}
