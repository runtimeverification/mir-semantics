// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/associated-types/issue-47139-1.rs:30:1: 30:33>::values(_1: Option<T>) -> <T as Insertable>::Values {
    debug self => _1;
    let mut _0: <T as Insertable>::Values;
    let mut _2: std::option::Option<<T as Insertable>::Values>;

    bb0: {
        _2 = Option::<T>::map::<<T as Insertable>::Values, fn(T) -> <T as Insertable>::Values {<T as Insertable>::values}>(move _1, <T as Insertable>::values) -> bb1;
    }

    bb1: {
        _0 = Option::<<T as Insertable>::Values>::unwrap_or_default(move _2) -> bb2;
    }

    bb2: {
        return;
    }
}

fn <impl at ui/associated-types/issue-47139-1.rs:42:1: 42:41>::values(_1: &Option<T>) -> <Option<&T> as Insertable>::Values {
    debug self => _1;
    let mut _0: <std::option::Option<&T> as Insertable>::Values;
    let mut _2: std::option::Option<&T>;

    bb0: {
        _2 = Option::<T>::as_ref(_1) -> bb1;
    }

    bb1: {
        _0 = <Option<&T> as Insertable>::values(move _2) -> bb2;
    }

    bb2: {
        return;
    }
}

fn <impl at ui/associated-types/issue-47139-1.rs:53:1: 53:35>::values(_1: &[T]) -> &[T] {
    debug self => _1;
    let mut _0: &[T];

    bb0: {
        _0 = _1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
