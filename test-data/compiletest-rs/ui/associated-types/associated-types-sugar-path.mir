// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/associated-types/associated-types-sugar-path.rs:14:1: 14:19>::boo(_1: &isize) -> usize {
    debug self => _1;
    let mut _0: usize;

    bb0: {
        _0 = const 5_usize;
        return;
    }
}

fn bar(_1: T, _2: <T as Foo>::A) -> <T as Foo>::A {
    debug a => _1;
    debug x => _2;
    let mut _0: <T as Foo>::A;
    let mut _3: <T as Foo>::A;
    let mut _4: &T;
    scope 1 {
    }

    bb0: {
        _4 = &_1;
        _3 = <T as Foo>::boo(move _4) -> [return: bb1, unwind: bb4];
    }

    bb1: {
        drop(_3) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        _0 = move _2;
        drop(_1) -> bb3;
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_2) -> [return: bb5, unwind terminate];
    }

    bb5 (cleanup): {
        drop(_1) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn C::g(_1: &Self) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/associated-types/associated-types-sugar-path.rs:33:1: 33:24>::f() -> () {
    let mut _0: ();
    let _1: <T as Foo>::A;
    let mut _2: !;
    scope 1 {
        debug x => _1;
    }

    bb0: {
        _2 = begin_panic::<&str>(const "explicit panic");
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: usize;
    scope 1 {
        debug z => _1;
    }

    bb0: {
        _1 = bar::<isize>(const 2_isize, const 4_usize) -> bb1;
    }

    bb1: {
        return;
    }
}

fn B(_1: X) -> B<X> {
    let mut _0: B<X>;

    bb0: {
        _0 = B::<X>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn B(_1: X) -> B<X> {
    let mut _0: B<X>;

    bb0: {
        _0 = B::<X>(move _1);
        return;
    }
}
