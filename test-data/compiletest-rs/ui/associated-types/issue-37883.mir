// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn Translation::powf(_1: &Self, _2: <E as EuclideanSpace>::Real) -> <E as EuclideanSpace>::Coordinates {
    debug self => _1;
    debug n => _2;
    let mut _0: <E as EuclideanSpace>::Coordinates;
    let mut _3: <E as EuclideanSpace>::Coordinates;
    let mut _4: <E as EuclideanSpace>::Real;
    let mut _5: bool;

    bb0: {
        _5 = const false;
        _5 = const true;
        _3 = <Self as Translation<E>>::to_vector(_1) -> [return: bb1, unwind: bb5];
    }

    bb1: {
        _5 = const false;
        _4 = move _2;
        _0 = <<E as EuclideanSpace>::Coordinates as Mul<<E as EuclideanSpace>::Real>>::mul(move _3, move _4) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        resume;
    }

    bb4 (cleanup): {
        drop(_2) -> [return: bb3, unwind terminate];
    }

    bb5 (cleanup): {
        switchInt(_5) -> [0: bb3, otherwise: bb4];
    }
}
