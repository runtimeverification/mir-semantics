// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/associated-types/associated-types-normalize-in-bounds-ufcs.rs:22:1: 22:26>::split2(_1: &[T], _2: P) -> Splits<'_, T, P> {
    debug self => _1;
    debug pred => _2;
    let mut _0: Splits<'_, T, P>;

    bb0: {
        goto -> bb1;
    }

    bb1: {
        goto -> bb1;
    }
}

fn <impl at ui/associated-types/associated-types-normalize-in-bounds-ufcs.rs:22:1: 22:26>::splitn2(_1: &[T], _2: u32, _3: P) -> SplitsN<Splits<'_, T, P>> {
    debug self => _1;
    debug n => _2;
    debug pred => _3;
    let mut _0: SplitsN<Splits<'_, T, P>>;
    let _4: Splits<'_, T, P>;

    bb0: {
        _4 = <[T] as SliceExt2>::split2::<P>(_1, move _3) -> bb1;
    }

    bb1: {
        goto -> bb1;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn Splits(_1: PhantomData<(&T, P)>) -> Splits<'_, T, P> {
    let mut _0: Splits<'_, T, P>;

    bb0: {
        _0 = Splits::<'_, T, P>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Splits(_1: PhantomData<(&T, P)>) -> Splits<'_, T, P> {
    let mut _0: Splits<'_, T, P>;

    bb0: {
        _0 = Splits::<'_, T, P>(move _1);
        return;
    }
}

fn SplitsN(_1: PhantomData<I>) -> SplitsN<I> {
    let mut _0: SplitsN<I>;

    bb0: {
        _0 = SplitsN::<I>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn SplitsN(_1: PhantomData<I>) -> SplitsN<I> {
    let mut _0: SplitsN<I>;

    bb0: {
        _0 = SplitsN::<I>(move _1);
        return;
    }
}
