// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: ();
    let mut _3: (&f32, &f32);
    let mut _4: &f32;
    let mut _5: &f32;
    let _6: f32;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: f32;
    let mut _12: f32;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: ();
    let mut _18: (&i32, &i32);
    let mut _19: &i32;
    let mut _20: &i32;
    let _21: i32;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: i32;
    let mut _27: i32;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        let _2: f32;
        scope 2 {
            debug r => _2;
            let _7: &f32;
            let _8: &f32;
            scope 3 {
                debug left_val => _7;
                debug right_val => _8;
                let _13: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _13;
                }
            }
            scope 5 {
                let _17: i32;
                scope 6 {
                    debug r => _17;
                    let _22: &i32;
                    let _23: &i32;
                    scope 7 {
                        debug left_val => _22;
                        debug right_val => _23;
                        let _28: core::panicking::AssertKind;
                        scope 8 {
                            debug kind => _28;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = overload2::<(), i32, bool>(const 42_i32, const true) -> bb1;
    }

    bb1: {
        _2 = overload2::<f32, &str, f32>(const "Hello world", const 13f32) -> bb2;
    }

    bb2: {
        _4 = &_2;
        _6 = const 13f32;
        _5 = &_6;
        _3 = (move _4, move _5);
        _7 = (_3.0: &f32);
        _8 = (_3.1: &f32);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<f32, f32>(move _13, _7, _8, move _15);
    }

    bb4: {
        _16 = overload3::<(), i32, bool, f32>(const 42_i32, const true, const 42.5f32) -> bb5;
    }

    bb5: {
        _17 = overload3::<i32, &str, f32, i32>(const "Hello world", const 13f32, const 42_i32) -> bb6;
    }

    bb6: {
        _19 = &_17;
        _21 = const 42_i32;
        _20 = &_21;
        _18 = (move _19, move _20);
        _22 = (_18.0: &i32);
        _23 = (_18.1: &i32);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<i32, i32>(move _28, _22, _23, move _30);
    }

    bb8: {
        return;
    }
}

fn overload::<impl at ui/associated-types/issue-54182-1.rs:45:5: 45:34>::overload(_1: (i32, bool)) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: i32;
    let _3: bool;
    let _4: ();
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let _7: &[&str; 2];
    let _8: [&str; 2];
    let mut _9: &[core::fmt::rt::Argument<'_>];
    let _10: &[core::fmt::rt::Argument<'_>; 1];
    let _11: [core::fmt::rt::Argument<'_>; 1];
    let mut _12: core::fmt::rt::Argument<'_>;
    let _13: &(i32, bool);
    let _14: (i32, bool);
    scope 1 {
        debug a => _2;
        debug b => _3;
    }

    bb0: {
        _2 = (_1.0: i32);
        _3 = (_1.1: bool);
        _8 = [const "i32 and bool ", const "\n"];
        _7 = &_8;
        _6 = _7 as &[&str] (Pointer(Unsize));
        _14 = (_2, _3);
        _13 = &_14;
        _12 = core::fmt::rt::Argument::<'_>::new_debug::<(i32, bool)>(_13) -> bb1;
    }

    bb1: {
        _11 = [move _12];
        _10 = &_11;
        _9 = _10 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _5 = Arguments::<'_>::new_v1(move _6, move _9) -> bb2;
    }

    bb2: {
        _4 = _print(move _5) -> bb3;
    }

    bb3: {
        return;
    }
}

fn overload::<impl at ui/associated-types/issue-54182-1.rs:56:5: 56:41>::overload(_1: (&str, f32)) -> f32 {
    debug self => _1;
    let mut _0: f32;
    let _2: &str;
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let _6: &[&str; 2];
    let _7: [&str; 2];
    let mut _8: &[core::fmt::rt::Argument<'_>];
    let _9: &[core::fmt::rt::Argument<'_>; 1];
    let _10: [core::fmt::rt::Argument<'_>; 1];
    let mut _11: core::fmt::rt::Argument<'_>;
    let _12: &(&str, f32);
    let _13: (&str, f32);
    scope 1 {
        debug a => _2;
        debug b => _0;
    }

    bb0: {
        _2 = (_1.0: &str);
        _0 = (_1.1: f32);
        _7 = [const "&str and f32 ", const "\n"];
        _6 = &_7;
        _5 = _6 as &[&str] (Pointer(Unsize));
        _13 = (_2, _0);
        _12 = &_13;
        _11 = core::fmt::rt::Argument::<'_>::new_debug::<(&str, f32)>(_12) -> bb1;
    }

    bb1: {
        _10 = [move _11];
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> bb2;
    }

    bb2: {
        _3 = _print(move _4) -> bb3;
    }

    bb3: {
        return;
    }
}

fn overload::<impl at ui/associated-types/issue-54182-1.rs:66:5: 66:39>::overload(_1: (i32, bool, f32)) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: i32;
    let _3: bool;
    let _4: f32;
    let _5: ();
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str];
    let _8: &[&str; 2];
    let _9: [&str; 2];
    let mut _10: &[core::fmt::rt::Argument<'_>];
    let _11: &[core::fmt::rt::Argument<'_>; 1];
    let _12: [core::fmt::rt::Argument<'_>; 1];
    let mut _13: core::fmt::rt::Argument<'_>;
    let _14: &(i32, bool, f32);
    let _15: (i32, bool, f32);
    scope 1 {
        debug a => _2;
        debug b => _3;
        debug c => _4;
    }

    bb0: {
        _2 = (_1.0: i32);
        _3 = (_1.1: bool);
        _4 = (_1.2: f32);
        _9 = [const "i32 and bool and f32 ", const "\n"];
        _8 = &_9;
        _7 = _8 as &[&str] (Pointer(Unsize));
        _15 = (_2, _3, _4);
        _14 = &_15;
        _13 = core::fmt::rt::Argument::<'_>::new_debug::<(i32, bool, f32)>(_14) -> bb1;
    }

    bb1: {
        _12 = [move _13];
        _11 = &_12;
        _10 = _11 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _6 = Arguments::<'_>::new_v1(move _7, move _10) -> bb2;
    }

    bb2: {
        _5 = _print(move _6) -> bb3;
    }

    bb3: {
        return;
    }
}

fn overload::<impl at ui/associated-types/issue-54182-1.rs:73:5: 73:46>::overload(_1: (&str, f32, i32)) -> i32 {
    debug self => _1;
    let mut _0: i32;
    let _2: &str;
    let _3: f32;
    let _4: ();
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let _7: &[&str; 2];
    let _8: [&str; 2];
    let mut _9: &[core::fmt::rt::Argument<'_>];
    let _10: &[core::fmt::rt::Argument<'_>; 1];
    let _11: [core::fmt::rt::Argument<'_>; 1];
    let mut _12: core::fmt::rt::Argument<'_>;
    let _13: &(&str, f32, i32);
    let _14: (&str, f32, i32);
    scope 1 {
        debug a => _2;
        debug b => _3;
        debug c => _0;
    }

    bb0: {
        _2 = (_1.0: &str);
        _3 = (_1.1: f32);
        _0 = (_1.2: i32);
        _8 = [const "&str and f32 and i32: ", const "\n"];
        _7 = &_8;
        _6 = _7 as &[&str] (Pointer(Unsize));
        _14 = (_2, _3, _0);
        _13 = &_14;
        _12 = core::fmt::rt::Argument::<'_>::new_debug::<(&str, f32, i32)>(_13) -> bb1;
    }

    bb1: {
        _11 = [move _12];
        _10 = &_11;
        _9 = _10 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _5 = Arguments::<'_>::new_v1(move _6, move _9) -> bb2;
    }

    bb2: {
        _4 = _print(move _5) -> bb3;
    }

    bb3: {
        return;
    }
}

fn overload2(_1: A, _2: B) -> R {
    debug a => _1;
    debug b => _2;
    let mut _0: R;
    let mut _3: (A, B);

    bb0: {
        _3 = (move _1, move _2);
        _0 = <(A, B) as Overload>::overload(move _3) -> bb1;
    }

    bb1: {
        return;
    }
}

fn overload3(_1: A, _2: B, _3: C) -> R {
    debug a => _1;
    debug b => _2;
    debug c => _3;
    let mut _0: R;
    let mut _4: (A, B, C);

    bb0: {
        _4 = (move _1, move _2, move _3);
        _0 = <(A, B, C) as Overload>::overload(move _4) -> bb1;
    }

    bb1: {
        return;
    }
}
