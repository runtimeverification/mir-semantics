// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn UnifyKey::dummy(_1: &Self) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn foo(_1: &Node<K>) -> Option<V> {
    debug node => _1;
    let mut _0: std::option::Option<V>;
    let mut _2: &std::option::Option<V>;

    bb0: {
        _2 = &((*_1).1: std::option::Option<V>);
        _0 = <Option<V> as Clone>::clone(move _2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Node<i32>;
    let mut _2: std::option::Option<u32>;
    let mut _3: (&std::option::Option<u32>, &std::option::Option<u32>);
    let mut _4: &std::option::Option<u32>;
    let _5: std::option::Option<u32>;
    let _6: &Node<i32>;
    let mut _7: &std::option::Option<u32>;
    let _8: std::option::Option<u32>;
    let mut _11: bool;
    let mut _12: bool;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: std::option::Option<i32>;
    let mut _18: (&std::option::Option<i32>, &std::option::Option<i32>);
    let mut _19: &std::option::Option<i32>;
    let _20: std::option::Option<i32>;
    let _21: &Node<u32>;
    let mut _22: &std::option::Option<i32>;
    let _23: std::option::Option<i32>;
    let mut _26: bool;
    let mut _27: bool;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug node => _1;
        let _9: &std::option::Option<u32>;
        let _10: &std::option::Option<u32>;
        let _16: Node<u32>;
        scope 2 {
            debug left_val => _9;
            debug right_val => _10;
            let _13: core::panicking::AssertKind;
            scope 3 {
                debug kind => _13;
            }
        }
        scope 4 {
            debug node => _16;
            let _24: &std::option::Option<i32>;
            let _25: &std::option::Option<i32>;
            scope 5 {
                debug left_val => _24;
                debug right_val => _25;
                let _28: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _28;
                }
            }
        }
    }

    bb0: {
        _2 = Option::<u32>::Some(const 22_u32);
        _1 = Node::<i32> { key: const 1_i32, value: move _2 };
        _6 = &_1;
        _5 = foo::<i32, u32>(_6) -> bb1;
    }

    bb1: {
        _4 = &_5;
        _8 = Option::<u32>::Some(const 22_u32);
        _7 = &_8;
        _3 = (move _4, move _7);
        _9 = (_3.0: &std::option::Option<u32>);
        _10 = (_3.1: &std::option::Option<u32>);
        _12 = <Option<u32> as PartialEq>::eq(_9, _10) -> bb2;
    }

    bb2: {
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<Option<u32>, Option<u32>>(move _13, _9, _10, move _15);
    }

    bb4: {
        _17 = Option::<i32>::Some(const 22_i32);
        _16 = Node::<u32> { key: const 1_u32, value: move _17 };
        _21 = &_16;
        _20 = foo::<u32, i32>(_21) -> bb5;
    }

    bb5: {
        _19 = &_20;
        _23 = Option::<i32>::Some(const 22_i32);
        _22 = &_23;
        _18 = (move _19, move _22);
        _24 = (_18.0: &std::option::Option<i32>);
        _25 = (_18.1: &std::option::Option<i32>);
        _27 = <Option<i32> as PartialEq>::eq(_24, _25) -> bb6;
    }

    bb6: {
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<Option<i32>, Option<i32>>(move _28, _24, _25, move _30);
    }

    bb8: {
        return;
    }
}
