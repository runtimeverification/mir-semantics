// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn foo(_1: &str) -> () {
    debug s => _1;
    let mut _0: ();
    let _2: B<'_, ()>;
    let _3: &str;
    let mut _4: &B<'_, ()>;
    scope 1 {
        debug b => _2;
    }

    bb0: {
        _2 = B::<'_, ()>::new(_1, const ()) -> bb1;
    }

    bb1: {
        _4 = &_2;
        _3 = B::<'_, ()>::get_short(move _4) -> bb2;
    }

    bb2: {
        return;
    }
}

fn <impl at ui/associated-types/issue-21726.rs:21:1: 21:28>::into_ref(_1: (), _2: &str) -> &str {
    debug self => const ();
    debug s => _2;
    let mut _0: &str;

    bb0: {
        _0 = _2;
        return;
    }
}

fn <impl at ui/associated-types/issue-21726.rs:30:1: 30:34>::new(_1: &str, _2: P) -> B<'_, P> {
    debug s => _1;
    debug i => _2;
    let mut _0: B<'_, P>;
    let mut _3: <P as IntoRef<'_>>::T;

    bb0: {
        _3 = <P as IntoRef<'_>>::into_ref(move _2, _1) -> bb1;
    }

    bb1: {
        _0 = B::<'_, P>(move _3);
        return;
    }
}

fn <impl at ui/associated-types/issue-21726.rs:30:1: 30:34>::get_short(_1: &B<'_, P>) -> <P as IntoRef<'_>>::T {
    debug self => _1;
    let mut _0: <P as IntoRef<'_>>::T;
    let mut _2: &<P as IntoRef<'_>>::T;

    bb0: {
        _2 = &((*_1).0: <P as IntoRef<'_>>::T);
        _0 = <<P as IntoRef<'_>>::T as Clone>::clone(move _2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn B(_1: <P as IntoRef<'_>>::T) -> B<'_, P> {
    let mut _0: B<'_, P>;

    bb0: {
        _0 = B::<'_, P>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn B(_1: <P as IntoRef<'_>>::T) -> B<'_, P> {
    let mut _0: B<'_, P>;

    bb0: {
        _0 = B::<'_, P>(move _1);
        return;
    }
}
