// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/associated-types/associated-types-issue-20220.rs:14:1: 14:33>::into_iter_x(_1: Vec<T>) -> std::vec::IntoIter<T> {
    debug self => _1;
    let mut _0: std::vec::IntoIter<T>;

    bb0: {
        _0 = <Vec<T> as IntoIterator>::into_iter(move _1) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<usize>;
    let mut _2: std::boxed::Box<[usize]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[usize; 3]>;
    let mut _7: std::iter::Enumerate<std::vec::IntoIter<usize>>;
    let mut _8: std::iter::Enumerate<std::vec::IntoIter<usize>>;
    let mut _9: std::vec::IntoIter<usize>;
    let mut _10: std::vec::Vec<usize>;
    let mut _12: std::option::Option<(usize, usize)>;
    let mut _13: &mut std::iter::Enumerate<std::vec::IntoIter<usize>>;
    let mut _14: isize;
    let mut _17: (&usize, &usize);
    let mut _18: &usize;
    let _19: usize;
    let mut _20: &usize;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: usize;
    let mut _26: usize;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _30: *const [usize; 3];
    let mut _31: *const ();
    let mut _32: usize;
    let mut _33: usize;
    let mut _34: usize;
    let mut _35: usize;
    let mut _36: bool;
    scope 1 {
        debug vec => _1;
        let mut _11: std::iter::Enumerate<std::vec::IntoIter<usize>>;
        scope 3 {
            debug iter => _11;
            let _15: usize;
            let _16: usize;
            scope 4 {
                debug i => _15;
                debug e => _16;
                let _21: &usize;
                let _22: &usize;
                scope 5 {
                    debug left_val => _21;
                    debug right_val => _22;
                    let _27: core::panicking::AssertKind;
                    scope 6 {
                        debug kind => _27;
                    }
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _3 = SizeOf([usize; 3]);
        _4 = AlignOf([usize; 3]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> bb1;
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [usize; 3]);
        _30 = (((_6.0: std::ptr::Unique<[usize; 3]>).0: std::ptr::NonNull<[usize; 3]>).0: *const [usize; 3]);
        _31 = _30 as *const () (PtrToPtr);
        _32 = _31 as usize (Transmute);
        _33 = AlignOf(usize);
        _34 = Sub(_33, const 1_usize);
        _35 = BitAnd(_32, _34);
        _36 = Eq(_35, const 0_usize);
        assert(_36, "misaligned pointer dereference: address must be a multiple of {} but is {}", _33, _32) -> [success: bb15, unwind unreachable];
    }

    bb2: {
        _10 = move _1;
        _9 = <Vec<usize> as IntoIterator>::into_iter(move _10) -> bb3;
    }

    bb3: {
        _8 = <std::vec::IntoIter<usize> as Iterator>::enumerate(move _9) -> bb4;
    }

    bb4: {
        _7 = <Enumerate<std::vec::IntoIter<usize>> as IntoIterator>::into_iter(move _8) -> bb5;
    }

    bb5: {
        _11 = move _7;
        goto -> bb6;
    }

    bb6: {
        _13 = &mut _11;
        _12 = <Enumerate<std::vec::IntoIter<usize>> as Iterator>::next(_13) -> [return: bb7, unwind: bb13];
    }

    bb7: {
        _14 = discriminant(_12);
        switchInt(move _14) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _15 = (((_12 as Some).0: (usize, usize)).0: usize);
        _16 = (((_12 as Some).0: (usize, usize)).1: usize);
        _19 = Add(_15, const 1_usize);
        _18 = &_19;
        _20 = &_16;
        _17 = (move _18, move _20);
        _21 = (_17.0: &usize);
        _22 = (_17.1: &usize);
        _25 = (*_21);
        _26 = (*_22);
        _24 = Eq(move _25, move _26);
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb6, otherwise: bb11];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        drop(_11) -> bb12;
    }

    bb11: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<usize, usize>(move _27, _21, _22, move _29) -> bb13;
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        drop(_11) -> [return: bb14, unwind terminate];
    }

    bb14 (cleanup): {
        resume;
    }

    bb15: {
        (*_30) = [const 1_usize, const 2_usize, const 3_usize];
        _2 = move _6 as std::boxed::Box<[usize]> (Pointer(Unsize));
        _1 = slice::<impl [usize]>::into_vec::<std::alloc::Global>(move _2) -> bb2;
    }
}
