// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Int::dummy(_1: &Self) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:22:1: 22:33>::non_zero(_1: i32) -> bool {
    debug self => _1;
    let mut _0: bool;

    bb0: {
        _0 = Ne(_1, const 0_i32);
        return;
    }
}

fn <impl at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:23:1: 23:33>::non_zero(_1: i64) -> bool {
    debug self => _1;
    let mut _0: bool;

    bb0: {
        _0 = Ne(_1, const 0_i64);
        return;
    }
}

fn <impl at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:24:1: 24:33>::non_zero(_1: u32) -> bool {
    debug self => _1;
    let mut _0: bool;

    bb0: {
        _0 = Ne(_1, const 0_u32);
        return;
    }
}

fn <impl at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:25:1: 25:33>::non_zero(_1: u64) -> bool {
    debug self => _1;
    let mut _0: bool;

    bb0: {
        _0 = Ne(_1, const 0_u64);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: !;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: !;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: !;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: !;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: !;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: !;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: !;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: !;

    bb0: {
        _2 = <i32 as NonZero>::non_zero(const 22_i32) -> bb1;
    }

    bb1: {
        _1 = Not(move _2);
        switchInt(move _1) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _3 = core::panicking::panic(const "assertion failed: NonZero::non_zero(22_i32)");
    }

    bb3: {
        _5 = <i64 as NonZero>::non_zero(const 22_i64) -> bb4;
    }

    bb4: {
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _6 = core::panicking::panic(const "assertion failed: NonZero::non_zero(22_i64)");
    }

    bb6: {
        _8 = <u32 as NonZero>::non_zero(const 22_u32) -> bb7;
    }

    bb7: {
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _9 = core::panicking::panic(const "assertion failed: NonZero::non_zero(22_u32)");
    }

    bb9: {
        _11 = <u64 as NonZero>::non_zero(const 22_u64) -> bb10;
    }

    bb10: {
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _12 = core::panicking::panic(const "assertion failed: NonZero::non_zero(22_u64)");
    }

    bb12: {
        _15 = <i32 as NonZero>::non_zero(const 0_i32) -> bb13;
    }

    bb13: {
        _14 = Not(move _15);
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _16 = core::panicking::panic(const "assertion failed: !NonZero::non_zero(0_i32)");
    }

    bb15: {
        _19 = <i64 as NonZero>::non_zero(const 0_i64) -> bb16;
    }

    bb16: {
        _18 = Not(move _19);
        _17 = Not(move _18);
        switchInt(move _17) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _20 = core::panicking::panic(const "assertion failed: !NonZero::non_zero(0_i64)");
    }

    bb18: {
        _23 = <u32 as NonZero>::non_zero(const 0_u32) -> bb19;
    }

    bb19: {
        _22 = Not(move _23);
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _24 = core::panicking::panic(const "assertion failed: !NonZero::non_zero(0_u32)");
    }

    bb21: {
        _27 = <u64 as NonZero>::non_zero(const 0_u64) -> bb22;
    }

    bb22: {
        _26 = Not(move _27);
        _25 = Not(move _26);
        switchInt(move _25) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _28 = core::panicking::panic(const "assertion failed: !NonZero::non_zero(0_u64)");
    }

    bb24: {
        return;
    }
}
