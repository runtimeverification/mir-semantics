// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Foo::dummy(_1: &Self) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Thing<isize>;
    let mut _2: (&isize, &isize);
    let mut _3: &isize;
    let _4: isize;
    let mut _5: isize;
    let mut _6: &isize;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: isize;
    let mut _12: isize;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug thing => _1;
        let _7: &isize;
        let _8: &isize;
        scope 2 {
            debug left_val => _7;
            debug right_val => _8;
            let _13: core::panicking::AssertKind;
            scope 3 {
                debug kind => _13;
            }
        }
    }

    bb0: {
        _1 = Thing::<isize> { a: const 1_isize, b: const 2_isize };
        _5 = (_1.0: isize);
        _4 = Add(move _5, const 1_isize);
        _3 = &_4;
        _6 = &(_1.1: isize);
        _2 = (move _3, move _6);
        _7 = (_2.0: &isize);
        _8 = (_2.1: &isize);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<isize, isize>(move _13, _7, _8, move _15);
    }

    bb2: {
        return;
    }
}
