// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (&std::string::String, &&str);
    let mut _2: &std::string::String;
    let _3: std::string::String;
    let mut _4: &u32;
    let _5: u32;
    let mut _6: &&str;
    let _7: &str;
    let _8: &std::string::String;
    let _9: &&str;
    let mut _10: bool;
    let mut _11: bool;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&std::string::String, &&str);
    let mut _16: &std::string::String;
    let _17: std::string::String;
    let mut _18: &bool;
    let _19: bool;
    let mut _20: &&str;
    let _21: &str;
    let _22: &std::string::String;
    let _23: &&str;
    let mut _24: bool;
    let mut _25: bool;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _8;
        debug right_val => _9;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }
    scope 3 {
        debug left_val => _22;
        debug right_val => _23;
        let _26: core::panicking::AssertKind;
        scope 4 {
            debug kind => _26;
        }
    }

    bb0: {
        _5 = <u32 as Default>::default() -> bb1;
    }

    bb1: {
        _4 = &_5;
        _3 = <u32 as ToString>::to_string(move _4) -> bb2;
    }

    bb2: {
        _2 = &_3;
        _7 = const "0";
        _6 = &_7;
        _1 = (move _2, move _6);
        _8 = (_1.0: &std::string::String);
        _9 = (_1.1: &&str);
        _11 = <String as PartialEq<&str>>::eq(_8, _9) -> [return: bb3, unwind: bb14];
    }

    bb3: {
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<String, &str>(move _12, _8, _9, move _14) -> bb14;
    }

    bb5: {
        drop(_3) -> bb6;
    }

    bb6: {
        _19 = <bool as Default>::default() -> bb7;
    }

    bb7: {
        _18 = &_19;
        _17 = <bool as ToString>::to_string(move _18) -> bb8;
    }

    bb8: {
        _16 = &_17;
        _21 = const "false";
        _20 = &_21;
        _15 = (move _16, move _20);
        _22 = (_15.0: &std::string::String);
        _23 = (_15.1: &&str);
        _25 = <String as PartialEq<&str>>::eq(_22, _23) -> [return: bb9, unwind: bb13];
    }

    bb9: {
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<String, &str>(move _26, _22, _23, move _28) -> bb13;
    }

    bb11: {
        drop(_17) -> bb12;
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        drop(_17) -> [return: bb15, unwind terminate];
    }

    bb14 (cleanup): {
        drop(_3) -> [return: bb15, unwind terminate];
    }

    bb15 (cleanup): {
        resume;
    }
}
