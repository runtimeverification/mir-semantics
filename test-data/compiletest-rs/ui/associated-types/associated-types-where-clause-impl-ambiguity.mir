// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn IteratorExt::by_ref(_1: &mut Self) -> ByRef<'_, Self> {
    debug self => _1;
    let mut _0: ByRef<'_, Self>;

    bb0: {
        _0 = ByRef::<'_, Self>(_1);
        return;
    }
}

fn <impl at ui/associated-types/associated-types-where-clause-impl-ambiguity.rs:32:1: 32:41>::next(_1: &mut ByRef<'_, I>) -> Option<A> {
    debug self => _1;
    let mut _0: std::option::Option<A>;
    let mut _2: &mut I;

    bb0: {
        _2 = deref_copy ((*_1).0: &mut I);
        _0 = <I as Iterator>::next(_2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn is_iterator_of(_1: &I) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn test(_1: I) -> () {
    debug it => _1;
    let mut _0: ();
    let _2: ();
    let _3: &ByRef<'_, I>;
    let _4: ByRef<'_, I>;
    let mut _5: &mut I;

    bb0: {
        _5 = &mut _1;
        _4 = <I as IteratorExt>::by_ref(move _5) -> [return: bb1, unwind: bb4];
    }

    bb1: {
        _3 = &_4;
        _2 = is_iterator_of::<A, ByRef<'_, I>>(_3) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_1) -> bb3;
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_1) -> [return: bb5, unwind terminate];
    }

    bb5 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn ByRef(_1: &mut I) -> ByRef<'_, I> {
    let mut _0: ByRef<'_, I>;

    bb0: {
        _0 = ByRef::<'_, I>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn ByRef(_1: &mut I) -> ByRef<'_, I> {
    let mut _0: ByRef<'_, I>;

    bb0: {
        _0 = ByRef::<'_, I>(move _1);
        return;
    }
}
