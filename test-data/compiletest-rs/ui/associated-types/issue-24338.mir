// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn DictLike::get(_1: <Self as DictLike<'_>>::ItemsIterator) -> () {
    debug c => _1;
    let mut _0: ();
    let _2: <Self as DictLike<'_>>::ItemsIterator;

    bb0: {
        _2 = <<Self as DictLike<'_>>::ItemsIterator as IntoIterator>::into_iter(move _1) -> bb1;
    }

    bb1: {
        drop(_2) -> bb2;
    }

    bb2: {
        return;
    }
}

fn DictLike2::get(_1: &Self) -> () {
    debug self => _1;
    let mut _0: ();
    let mut _2: <Self as DictLike2<'_>>::ItemsIterator;
    let mut _3: <Self as DictLike2<'_>>::ItemsIterator;
    let mut _4: <Self as DictLike2<'_>>::ItemsIterator;
    let mut _5: std::option::Option<u8>;
    let mut _6: &mut <Self as DictLike2<'_>>::ItemsIterator;
    let mut _7: isize;
    scope 1 {
        debug iter => _4;
    }

    bb0: {
        _3 = <Self as DictLike2<'_>>::items(_1) -> bb1;
    }

    bb1: {
        _2 = <<Self as DictLike2<'_>>::ItemsIterator as IntoIterator>::into_iter(move _3) -> bb2;
    }

    bb2: {
        _4 = move _2;
        goto -> bb3;
    }

    bb3: {
        _6 = &mut _4;
        _5 = <<Self as DictLike2<'_>>::ItemsIterator as Iterator>::next(_6) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb6, 1: bb3, otherwise: bb5];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        drop(_4) -> bb7;
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_4) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
