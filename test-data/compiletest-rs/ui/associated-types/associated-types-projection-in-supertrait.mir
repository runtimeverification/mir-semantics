// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn A::dummy(_1: &Self) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/associated-types/associated-types-projection-in-supertrait.rs:33:1: 33:18>::foo(_1: &Y, _2: i32) -> String {
    debug self => _1;
    debug t => _2;
    let mut _0: std::string::String;
    let _3: std::string::String;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let _6: &[&str; 1];
    let _7: [&str; 1];
    let mut _8: &[core::fmt::rt::Argument<'_>];
    let _9: &[core::fmt::rt::Argument<'_>; 1];
    let _10: [core::fmt::rt::Argument<'_>; 1];
    let mut _11: core::fmt::rt::Argument<'_>;
    let _12: &i32;
    scope 1 {
        debug res => _3;
    }

    bb0: {
        _7 = [const "First "];
        _6 = &_7;
        _5 = _6 as &[&str] (Pointer(Unsize));
        _12 = &_2;
        _11 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_12) -> bb1;
    }

    bb1: {
        _10 = [move _11];
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> bb2;
    }

    bb2: {
        _3 = format(move _4) -> bb3;
    }

    bb3: {
        _0 = move _3;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Y;
    let mut _2: (&std::string::String, &std::string::String);
    let mut _3: &std::string::String;
    let _4: std::string::String;
    let mut _5: &Y;
    let mut _6: &std::string::String;
    let _7: std::string::String;
    let mut _9: std::fmt::Arguments<'_>;
    let mut _10: &[&str];
    let _11: &[&str; 1];
    let _12: [&str; 1];
    let mut _15: bool;
    let mut _16: bool;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug y => const Y;
        let _8: std::string::String;
        let _13: &std::string::String;
        let _14: &std::string::String;
        scope 2 {
            debug res => _8;
        }
        scope 3 {
            debug left_val => _13;
            debug right_val => _14;
            let _17: core::panicking::AssertKind;
            scope 4 {
                debug kind => _17;
            }
        }
    }

    bb0: {
        _5 = &_1;
        _4 = <Y as B<i32>>::foo(move _5, const 5_i32) -> bb1;
    }

    bb1: {
        _3 = &_4;
        _12 = [const "First 5"];
        _11 = &_12;
        _10 = _11 as &[&str] (Pointer(Unsize));
        _9 = Arguments::<'_>::new_const(move _10) -> [return: bb2, unwind: bb10];
    }

    bb2: {
        _8 = format(move _9) -> [return: bb3, unwind: bb10];
    }

    bb3: {
        _7 = move _8;
        _6 = &_7;
        _2 = (move _3, move _6);
        _13 = (_2.0: &std::string::String);
        _14 = (_2.1: &std::string::String);
        _16 = <String as PartialEq>::eq(_13, _14) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        _15 = Not(move _16);
        switchInt(move _15) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<String, String>(move _17, _13, _14, move _19) -> bb9;
    }

    bb6: {
        drop(_7) -> [return: bb7, unwind: bb10];
    }

    bb7: {
        drop(_4) -> bb8;
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_7) -> [return: bb10, unwind terminate];
    }

    bb10 (cleanup): {
        drop(_4) -> [return: bb11, unwind terminate];
    }

    bb11 (cleanup): {
        resume;
    }
}
