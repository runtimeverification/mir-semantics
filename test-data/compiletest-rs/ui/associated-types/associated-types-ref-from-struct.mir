// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/associated-types/associated-types-ref-from-struct.rs:17:1: 17:27>::new(_1: T, _2: <T as Test>::V) -> TesterPair<T> {
    debug tester => _1;
    debug value => _2;
    let mut _0: TesterPair<T>;

    bb0: {
        _0 = TesterPair::<T> { tester: move _1, value: move _2 };
        return;
    }
}

fn <impl at ui/associated-types/associated-types-ref-from-struct.rs:17:1: 17:27>::test(_1: &TesterPair<T>) -> bool {
    debug self => _1;
    let mut _0: bool;
    let mut _2: &T;
    let _3: &<T as Test>::V;

    bb0: {
        _2 = &((*_1).0: T);
        _3 = &((*_1).1: <T as Test>::V);
        _0 = <T as Test>::test(move _2, _3) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/associated-types/associated-types-ref-from-struct.rs:28:1: 28:20>::test(_1: &EqU32, _2: &u32) -> bool {
    debug self => _1;
    debug value => _2;
    let mut _0: bool;
    let mut _3: u32;
    let mut _4: u32;

    bb0: {
        _3 = ((*_1).0: u32);
        _4 = (*_2);
        _0 = Eq(move _3, move _4);
        return;
    }
}

fn <impl at ui/associated-types/associated-types-ref-from-struct.rs:37:1: 37:20>::test(_1: &EqI32, _2: &i32) -> bool {
    debug self => _1;
    debug value => _2;
    let mut _0: bool;
    let mut _3: i32;
    let mut _4: i32;

    bb0: {
        _3 = ((*_1).0: i32);
        _4 = (*_2);
        _0 = Eq(move _3, move _4);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: TesterPair<EqU32>;
    let mut _2: EqU32;
    let _3: bool;
    let mut _4: &TesterPair<EqU32>;
    let mut _6: EqI32;
    let _7: bool;
    let mut _8: &TesterPair<EqI32>;
    scope 1 {
        debug tester => _1;
        let _5: TesterPair<EqI32>;
        scope 2 {
            debug tester => _5;
        }
    }

    bb0: {
        _2 = EqU32(const 22_u32);
        _1 = TesterPair::<EqU32>::new(move _2, const 23_u32) -> bb1;
    }

    bb1: {
        _4 = &_1;
        _3 = TesterPair::<EqU32>::test(move _4) -> bb2;
    }

    bb2: {
        _6 = EqI32(const 22_i32);
        _5 = TesterPair::<EqI32>::new(move _6, const 23_i32) -> bb3;
    }

    bb3: {
        _8 = &_5;
        _7 = TesterPair::<EqI32>::test(move _8) -> bb4;
    }

    bb4: {
        return;
    }
}

fn EqU32(_1: u32) -> EqU32 {
    let mut _0: EqU32;

    bb0: {
        _0 = EqU32(move _1);
        return;
    }
}

// MIR FOR CTFE
fn EqU32(_1: u32) -> EqU32 {
    let mut _0: EqU32;

    bb0: {
        _0 = EqU32(move _1);
        return;
    }
}

fn EqI32(_1: i32) -> EqI32 {
    let mut _0: EqI32;

    bb0: {
        _0 = EqI32(move _1);
        return;
    }
}

// MIR FOR CTFE
fn EqI32(_1: i32) -> EqI32 {
    let mut _0: EqI32;

    bb0: {
        _0 = EqI32(move _1);
        return;
    }
}
