// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
<impl at ui/associated-types/issue-88856.rs:13:1: 13:43>::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: bool;

    bb0: {
        _1 = Eq(const 2_usize, const 0_usize);
        assert(!move _1, "attempt to divide `{}` by zero", const N) -> bb1;
    }

    bb1: {
        _0 = Div(const N, const 2_usize);
        return;
    }
}

<impl at ui/associated-types/issue-88856.rs:13:1: 13:43>::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn <impl at ui/associated-types/issue-88856.rs:13:1: 13:43>::func(_1: TraitImpl<N>) -> TraitImpl<N> {
    debug self => _1;
    let mut _0: TraitImpl<N>;

    bb0: {
        _0 = move _1;
        return;
    }
}

fn sample(_1: P, _2: Convert) -> i32 {
    debug p => _1;
    debug f => _2;
    let mut _0: i32;
    let mut _3: &Convert;
    let mut _4: (<P as Trait>::R,);
    let mut _5: <P as Trait>::R;

    bb0: {
        _3 = &_2;
        _5 = <P as Trait>::func(move _1) -> [return: bb1, unwind: bb4];
    }

    bb1: {
        _4 = (move _5,);
        _0 = <Convert as Fn<(<P as Trait>::R,)>>::call(move _3, move _4) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_2) -> bb3;
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_2) -> [return: bb5, unwind terminate];
    }

    bb5 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: TraitImpl<10>;
    let _2: i32;
    scope 1 {
        debug t => _1;
    }

    bb0: {
        _1 = TraitImpl::<10>(const 4_i32);
        _2 = sample::<TraitImpl<10>, [closure@ui/associated-types/issue-88856.rs:31:14: 31:17]>(move _1, const ZeroSized: [closure@ui/associated-types/issue-88856.rs:31:14: 31:17]) -> bb1;
    }

    bb1: {
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 10_usize;
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/associated-types/issue-88856.rs:31:14: 31:17], _2: TraitImpl<10>) -> i32 {
    debug x => _2;
    let mut _0: i32;

    bb0: {
        _0 = (_2.0: i32);
        return;
    }
}

fn TraitImpl(_1: i32) -> TraitImpl<N> {
    let mut _0: TraitImpl<N>;

    bb0: {
        _0 = TraitImpl::<N>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn TraitImpl(_1: i32) -> TraitImpl<N> {
    let mut _0: TraitImpl<N>;

    bb0: {
        _0 = TraitImpl::<N>(move _1);
        return;
    }
}
