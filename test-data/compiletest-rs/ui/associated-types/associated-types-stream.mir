// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/associated-types/associated-types-stream.rs:13:1: 13:19>::car(_1: &()) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/associated-types/associated-types-stream.rs:13:1: 13:19>::cdr(_1: ()) -> () {
    debug self => const ();
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/associated-types/associated-types-stream.rs:20:1: 20:28>::car(_1: &(T, U)) -> T {
    debug self => _1;
    let mut _0: T;
    let mut _2: &T;

    bb0: {
        _2 = &((*_1).0: T);
        _0 = <T as Clone>::clone(move _2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/associated-types/associated-types-stream.rs:20:1: 20:28>::cdr(_1: (T, U)) -> U {
    debug self => _1;
    let mut _0: U;

    bb0: {
        _0 = move (_1.1: U);
        drop((_1.0: T)) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: (i32, (i32, (i32, ())));
    let mut _2: (i32, (i32, ()));
    let mut _3: (i32, ());
    let mut _4: (&i32, &i32);
    let mut _5: &i32;
    let _6: i32;
    let mut _7: &(i32, (i32, (i32, ())));
    let mut _8: &i32;
    let _9: i32;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: i32;
    let mut _15: i32;
    let _17: !;
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _20: (i32, (i32, (i32, ())));
    let mut _21: (&i32, &i32);
    let mut _22: &i32;
    let _23: i32;
    let mut _24: &(i32, (i32, ()));
    let mut _25: &i32;
    let _26: i32;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: i32;
    let mut _32: i32;
    let _34: !;
    let mut _35: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _37: (i32, (i32, ()));
    let mut _38: (&i32, &i32);
    let mut _39: &i32;
    let _40: i32;
    let mut _41: &(i32, ());
    let mut _42: &i32;
    let _43: i32;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: i32;
    let mut _49: i32;
    let _51: !;
    let mut _52: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug p => _1;
        let _10: &i32;
        let _11: &i32;
        let _19: (i32, (i32, ()));
        scope 2 {
            debug left_val => _10;
            debug right_val => _11;
            let _16: core::panicking::AssertKind;
            scope 3 {
                debug kind => _16;
            }
        }
        scope 4 {
            debug p => _19;
            let _27: &i32;
            let _28: &i32;
            let _36: (i32, ());
            scope 5 {
                debug left_val => _27;
                debug right_val => _28;
                let _33: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _33;
                }
            }
            scope 7 {
                debug p => _36;
                let _44: &i32;
                let _45: &i32;
                scope 8 {
                    debug left_val => _44;
                    debug right_val => _45;
                    let _50: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _50;
                    }
                }
            }
        }
    }

    bb0: {
        _3 = (const 66_i32, const ());
        _2 = (const 44_i32, move _3);
        _1 = (const 22_i32, move _2);
        _7 = &_1;
        _6 = <(i32, (i32, (i32, ()))) as Stream>::car(move _7) -> bb1;
    }

    bb1: {
        _5 = &_6;
        _9 = const 22_i32;
        _8 = &_9;
        _4 = (move _5, move _8);
        _10 = (_4.0: &i32);
        _11 = (_4.1: &i32);
        _14 = (*_10);
        _15 = (*_11);
        _13 = Eq(move _14, move _15);
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _16 = core::panicking::AssertKind::Eq;
        _18 = Option::<Arguments<'_>>::None;
        _17 = core::panicking::assert_failed::<i32, i32>(move _16, _10, _11, move _18);
    }

    bb3: {
        _20 = _1;
        _19 = <(i32, (i32, (i32, ()))) as Stream>::cdr(move _20) -> bb4;
    }

    bb4: {
        _24 = &_19;
        _23 = <(i32, (i32, ())) as Stream>::car(move _24) -> bb5;
    }

    bb5: {
        _22 = &_23;
        _26 = const 44_i32;
        _25 = &_26;
        _21 = (move _22, move _25);
        _27 = (_21.0: &i32);
        _28 = (_21.1: &i32);
        _31 = (*_27);
        _32 = (*_28);
        _30 = Eq(move _31, move _32);
        _29 = Not(move _30);
        switchInt(move _29) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _33 = core::panicking::AssertKind::Eq;
        _35 = Option::<Arguments<'_>>::None;
        _34 = core::panicking::assert_failed::<i32, i32>(move _33, _27, _28, move _35);
    }

    bb7: {
        _37 = _19;
        _36 = <(i32, (i32, ())) as Stream>::cdr(move _37) -> bb8;
    }

    bb8: {
        _41 = &_36;
        _40 = <(i32, ()) as Stream>::car(move _41) -> bb9;
    }

    bb9: {
        _39 = &_40;
        _43 = const 66_i32;
        _42 = &_43;
        _38 = (move _39, move _42);
        _44 = (_38.0: &i32);
        _45 = (_38.1: &i32);
        _48 = (*_44);
        _49 = (*_45);
        _47 = Eq(move _48, move _49);
        _46 = Not(move _47);
        switchInt(move _46) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _50 = core::panicking::AssertKind::Eq;
        _52 = Option::<Arguments<'_>>::None;
        _51 = core::panicking::assert_failed::<i32, i32>(move _50, _44, _45, move _52);
    }

    bb11: {
        return;
    }
}
