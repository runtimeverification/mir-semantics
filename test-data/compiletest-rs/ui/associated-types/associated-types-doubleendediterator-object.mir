// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn pairwise_sub(_1: Box<dyn DoubleEndedIterator<Item = isize>>) -> isize {
    debug t => _1;
    let mut _0: isize;
    let mut _2: isize;
    let mut _4: &mut std::boxed::Box<dyn std::iter::DoubleEndedIterator<Item = isize>>;
    let mut _6: &mut std::boxed::Box<dyn std::iter::DoubleEndedIterator<Item = isize>>;
    let mut _7: (std::option::Option<isize>, std::option::Option<isize>);
    let mut _8: std::option::Option<isize>;
    let mut _9: std::option::Option<isize>;
    let mut _10: isize;
    let mut _11: isize;
    let mut _14: isize;
    scope 1 {
        debug result => _2;
        let _3: std::option::Option<isize>;
        scope 2 {
            debug front => _3;
            let _5: std::option::Option<isize>;
            scope 3 {
                debug back => _5;
                let _12: isize;
                let _13: isize;
                scope 4 {
                    debug f => _12;
                    debug b => _13;
                }
            }
        }
    }

    bb0: {
        _2 = const 0_isize;
        goto -> bb1;
    }

    bb1: {
        _4 = &mut _1;
        _3 = <Box<dyn DoubleEndedIterator<Item = isize>> as Iterator>::next(move _4) -> [return: bb2, unwind: bb8];
    }

    bb2: {
        _6 = &mut _1;
        _5 = <Box<dyn DoubleEndedIterator<Item = isize>> as DoubleEndedIterator>::next_back(move _6) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        _8 = _3;
        _9 = _5;
        _7 = (move _8, move _9);
        _11 = discriminant((_7.0: std::option::Option<isize>));
        switchInt(move _11) -> [1: bb5, otherwise: bb4];
    }

    bb4: {
        _0 = _2;
        drop(_1) -> bb7;
    }

    bb5: {
        _10 = discriminant((_7.1: std::option::Option<isize>));
        switchInt(move _10) -> [1: bb6, otherwise: bb4];
    }

    bb6: {
        _12 = (((_7.0: std::option::Option<isize>) as Some).0: isize);
        _13 = (((_7.1: std::option::Option<isize>) as Some).0: isize);
        _14 = Sub(_13, _12);
        _2 = Add(_2, move _14);
        goto -> bb1;
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_1) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<isize>;
    let mut _2: std::boxed::Box<[isize]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[isize; 6]>;
    let mut _8: std::boxed::Box<dyn std::iter::DoubleEndedIterator<Item = isize>>;
    let mut _9: std::boxed::Box<std::vec::IntoIter<isize>>;
    let mut _10: std::vec::IntoIter<isize>;
    let mut _11: std::vec::Vec<isize>;
    let mut _12: (&isize, &isize);
    let mut _13: &isize;
    let mut _14: &isize;
    let _15: isize;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: isize;
    let mut _21: isize;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: *const [isize; 6];
    let mut _26: *const ();
    let mut _27: usize;
    let mut _28: usize;
    let mut _29: usize;
    let mut _30: usize;
    let mut _31: bool;
    scope 1 {
        debug v => _1;
        let _7: isize;
        scope 3 {
            debug r => _7;
            let _16: &isize;
            let _17: &isize;
            scope 4 {
                debug left_val => _16;
                debug right_val => _17;
                let _22: core::panicking::AssertKind;
                scope 5 {
                    debug kind => _22;
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _3 = SizeOf([isize; 6]);
        _4 = AlignOf([isize; 6]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> bb1;
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [isize; 6]);
        _25 = (((_6.0: std::ptr::Unique<[isize; 6]>).0: std::ptr::NonNull<[isize; 6]>).0: *const [isize; 6]);
        _26 = _25 as *const () (PtrToPtr);
        _27 = _26 as usize (Transmute);
        _28 = AlignOf(isize);
        _29 = Sub(_28, const 1_usize);
        _30 = BitAnd(_27, _29);
        _31 = Eq(_30, const 0_usize);
        assert(_31, "misaligned pointer dereference: address must be a multiple of {} but is {}", _28, _27) -> [success: bb8, unwind unreachable];
    }

    bb2: {
        _11 = move _1;
        _10 = <Vec<isize> as IntoIterator>::into_iter(move _11) -> bb3;
    }

    bb3: {
        _9 = Box::<std::vec::IntoIter<isize>>::new(move _10) -> bb4;
    }

    bb4: {
        _8 = move _9 as std::boxed::Box<dyn std::iter::DoubleEndedIterator<Item = isize>> (Pointer(Unsize));
        _7 = pairwise_sub(move _8) -> bb5;
    }

    bb5: {
        _13 = &_7;
        _15 = const 9_isize;
        _14 = &_15;
        _12 = (move _13, move _14);
        _16 = (_12.0: &isize);
        _17 = (_12.1: &isize);
        _20 = (*_16);
        _21 = (*_17);
        _19 = Eq(move _20, move _21);
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<isize, isize>(move _22, _16, _17, move _24);
    }

    bb7: {
        return;
    }

    bb8: {
        (*_25) = [const 1_isize, const 2_isize, const 3_isize, const 4_isize, const 5_isize, const 6_isize];
        _2 = move _6 as std::boxed::Box<[isize]> (Pointer(Unsize));
        _1 = slice::<impl [isize]>::into_vec::<std::alloc::Global>(move _2) -> bb2;
    }
}
