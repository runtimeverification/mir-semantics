// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/associated-types/associated-types-eq-obj.rs:13:1: 13:18>::boo(_1: &char) -> Bar {
    debug self => _1;
    let mut _0: Bar;

    bb0: {
        return;
    }
}

fn baz(_1: &dyn Foo<A = Bar>) -> Bar {
    debug x => _1;
    let mut _0: Bar;

    bb0: {
        _0 = <dyn Foo<A = Bar> as Foo>::boo(_1) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: char;
    let _2: Bar;
    let mut _3: &dyn Foo<A = Bar>;
    let _4: &char;
    scope 1 {
        debug a => _1;
    }

    bb0: {
        _1 = const 'a';
        _4 = &_1;
        _3 = _4 as &dyn Foo<A = Bar> (Pointer(Unsize));
        _2 = baz(move _3) -> bb1;
    }

    bb1: {
        return;
    }
}
