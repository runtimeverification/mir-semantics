// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Subscriber::dummy(_1: &Self) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/associated-types/associated-types-projection-in-object-type.rs:33:1: 33:40>::subscribe(_1: &mut MyStruct<'_>, _2: Box<dyn Subscriber<Input = u64>>) -> () {
    debug self => _1;
    debug t => _2;
    let mut _0: ();

    bb0: {
        drop(((*_1).0: std::boxed::Box<dyn Subscriber<Input = u64>>)) -> [return: bb1, unwind: bb2];
    }

    bb1: {
        ((*_1).0: std::boxed::Box<dyn Subscriber<Input = u64>>) = move _2;
        return;
    }

    bb2 (cleanup): {
        ((*_1).0: std::boxed::Box<dyn Subscriber<Input = u64>>) = move _2;
        resume;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
