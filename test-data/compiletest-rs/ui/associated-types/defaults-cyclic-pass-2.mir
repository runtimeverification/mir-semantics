// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/associated-types/defaults-cyclic-pass-2.rs:15:1: 15:15>::f() -> () {
    let mut _0: ();
    let mut _1: std::boxed::Box<u8>;
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        _1 = Box::<u8>::new(const 0_u8) -> bb1;
    }

    bb1: {
        drop(_1) -> bb2;
    }

    bb2: {
        return;
    }
}

fn <impl at ui/associated-types/defaults-cyclic-pass-2.rs:25:1: 25:19>::f() -> () {
    let mut _0: ();
    let mut _1: std::vec::Vec<()>;
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        _1 = Vec::<()>::new() -> bb1;
    }

    bb1: {
        drop(_1) -> bb2;
    }

    bb2: {
        return;
    }
}

fn <impl at ui/associated-types/defaults-cyclic-pass-2.rs:35:1: 35:15>::f() -> () {
    let mut _0: ();
    let mut _1: std::vec::Vec<()>;
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        _1 = Vec::<()>::new() -> bb1;
    }

    bb1: {
        drop(_1) -> bb2;
    }

    bb2: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: std::boxed::Box<u8>;
    let mut _2: std::vec::Vec<()>;
    let mut _3: std::vec::Vec<()>;
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                    scope 5 {
                        scope 6 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = Box::<u8>::new(const 0_u8) -> bb1;
    }

    bb1: {
        drop(_1) -> bb2;
    }

    bb2: {
        _2 = Vec::<()>::new() -> bb3;
    }

    bb3: {
        drop(_2) -> bb4;
    }

    bb4: {
        _3 = Vec::<()>::new() -> bb5;
    }

    bb5: {
        drop(_3) -> bb6;
    }

    bb6: {
        return;
    }
}
