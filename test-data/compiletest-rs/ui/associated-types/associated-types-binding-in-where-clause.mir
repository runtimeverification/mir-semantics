// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/associated-types/associated-types-binding-in-where-clause.rs:11:10: 11:19>::eq(_1: &Bar, _2: &Bar) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;

    bb0: {
        _0 = const true;
        return;
    }
}

fn <impl at ui/associated-types/associated-types-binding-in-where-clause.rs:14:1: 14:19>::boo(_1: &isize) -> usize {
    debug self => _1;
    let mut _0: usize;

    bb0: {
        _0 = const 42_usize;
        return;
    }
}

fn <impl at ui/associated-types/associated-types-binding-in-where-clause.rs:19:1: 19:18>::boo(_1: &char) -> Bar {
    debug self => _1;
    let mut _0: Bar;

    bb0: {
        return;
    }
}

fn foo_bar(_1: I) -> Bar {
    debug x => _1;
    let mut _0: Bar;
    let mut _2: &I;

    bb0: {
        _2 = &_1;
        _0 = <I as Foo>::boo(move _2) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_1) -> bb2;
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn foo_uint(_1: I) -> usize {
    debug x => _1;
    let mut _0: usize;
    let mut _2: &I;

    bb0: {
        _2 = &_1;
        _0 = <I as Foo>::boo(move _2) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_1) -> bb2;
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: isize;
    let _2: usize;
    let _4: Bar;
    scope 1 {
        debug a => _1;
        let _3: char;
        scope 2 {
            debug a => _3;
        }
    }

    bb0: {
        _1 = const 42_isize;
        _2 = foo_uint::<isize>(_1) -> bb1;
    }

    bb1: {
        _3 = const 'a';
        _4 = foo_bar::<char>(_3) -> bb2;
    }

    bb2: {
        return;
    }
}
