// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn call_f(_1: F) -> () {
    debug f => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: &mut F;

    bb0: {
        _3 = &mut _1;
        _2 = <F as FnMut<()>>::call_mut(move _3, const ()) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_1) -> bb2;
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn f() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let _4: &[&str; 1];
    let _5: [&str; 1];

    bb0: {
        _5 = [const "hello\n"];
        _4 = &_5;
        _3 = _4 as &[&str] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_const(move _3) -> bb1;
    }

    bb1: {
        _1 = _print(move _2) -> bb2;
    }

    bb2: {
        return;
    }
}

fn call_g(_1: G, _2: String, _3: String) -> String {
    debug g => _1;
    debug x => _2;
    debug y => _3;
    let mut _0: std::string::String;
    let mut _4: &mut G;
    let mut _5: (std::string::String, std::string::String);

    bb0: {
        _4 = &mut _1;
        _5 = (move _2, move _3);
        _0 = <G as FnMut<(String, String)>>::call_mut(move _4, move _5) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_1) -> bb2;
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn g(_1: String, _2: String) -> String {
    debug x => _1;
    debug y => _2;
    let mut _0: std::string::String;
    let _3: ();
    let mut _4: &mut std::string::String;
    let mut _5: &str;
    let _6: &str;
    let _7: &std::string::String;
    let mut _8: bool;

    bb0: {
        _8 = const false;
        _8 = const true;
        _4 = &mut _1;
        _7 = &_2;
        _6 = <String as Deref>::deref(_7) -> [return: bb1, unwind: bb4];
    }

    bb1: {
        _5 = _6;
        _3 = String::push_str(move _4, move _5) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        _8 = const false;
        _0 = move _1;
        drop(_2) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate];
    }

    bb5 (cleanup): {
        resume;
    }

    bb6 (cleanup): {
        drop(_1) -> [return: bb5, unwind terminate];
    }

    bb7 (cleanup): {
        switchInt(_8) -> [0: bb5, otherwise: bb6];
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: (&std::string::String, &&str);
    let mut _3: &std::string::String;
    let _4: std::string::String;
    let mut _5: std::string::String;
    let _6: &str;
    let mut _7: std::string::String;
    let _8: &str;
    let mut _9: &&str;
    let _10: &str;
    let _11: &std::string::String;
    let _12: &&str;
    let mut _13: bool;
    let mut _14: bool;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: bool;
    scope 1 {
        debug left_val => _11;
        debug right_val => _12;
        let _15: core::panicking::AssertKind;
        scope 2 {
            debug kind => _15;
        }
    }

    bb0: {
        _18 = const false;
        _1 = call_f::<fn() {f}>(f) -> bb1;
    }

    bb1: {
        _6 = const "foo";
        _18 = const true;
        _5 = <str as ToString>::to_string(_6) -> bb2;
    }

    bb2: {
        _8 = const "bar";
        _7 = <str as ToString>::to_string(_8) -> [return: bb3, unwind: bb12];
    }

    bb3: {
        _18 = const false;
        _4 = call_g::<fn(String, String) -> String {g}>(g, move _5, move _7) -> [return: bb4, unwind: bb12];
    }

    bb4: {
        _18 = const false;
        _3 = &_4;
        _10 = const "foobar";
        _9 = &_10;
        _2 = (move _3, move _9);
        _11 = (_2.0: &std::string::String);
        _12 = (_2.1: &&str);
        _14 = <String as PartialEq<&str>>::eq(_11, _12) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<String, &str>(move _15, _11, _12, move _17) -> bb9;
    }

    bb7: {
        drop(_4) -> bb8;
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_4) -> [return: bb10, unwind terminate];
    }

    bb10 (cleanup): {
        resume;
    }

    bb11 (cleanup): {
        drop(_5) -> [return: bb10, unwind terminate];
    }

    bb12 (cleanup): {
        switchInt(_18) -> [0: bb10, otherwise: bb11];
    }
}
