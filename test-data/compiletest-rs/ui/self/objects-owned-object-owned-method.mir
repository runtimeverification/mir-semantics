// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/self/objects-owned-object-owned-method.rs:14:1: 14:28>::foo(_1: Box<BarStruct>) -> usize {
    debug self => _1;
    let mut _0: usize;
    let mut _2: *const BarStruct;
    let mut _3: *const ();
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;

    bb0: {
        _2 = (((_1.0: std::ptr::Unique<BarStruct>).0: std::ptr::NonNull<BarStruct>).0: *const BarStruct);
        _3 = _2 as *const () (PtrToPtr);
        _4 = _3 as usize (Transmute);
        _5 = AlignOf(BarStruct);
        _6 = Sub(_5, const 1_usize);
        _7 = BitAnd(_4, _6);
        _8 = Eq(_7, const 0_usize);
        assert(_8, "misaligned pointer dereference: address must be a multiple of {} but is {}", _5, _4) -> [success: bb2, unwind unreachable];
    }

    bb1: {
        return;
    }

    bb2: {
        _0 = ((*_2).0: usize);
        drop(_1) -> bb1;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: std::boxed::Box<dyn FooTrait>;
    let mut _2: std::boxed::Box<BarStruct>;
    let mut _3: BarStruct;
    let mut _4: (&usize, &usize);
    let mut _5: &usize;
    let _6: usize;
    let mut _7: &usize;
    let _8: usize;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: usize;
    let mut _14: usize;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug foo => _1;
        let _9: &usize;
        let _10: &usize;
        scope 2 {
            debug left_val => _9;
            debug right_val => _10;
            let _15: core::panicking::AssertKind;
            scope 3 {
                debug kind => _15;
            }
        }
    }

    bb0: {
        _3 = BarStruct { x: const 22_usize };
        _2 = Box::<BarStruct>::new(move _3) -> bb1;
    }

    bb1: {
        _1 = move _2 as std::boxed::Box<dyn FooTrait> (Pointer(Unsize));
        _6 = const 22_usize;
        _5 = &_6;
        _8 = <dyn FooTrait as FooTrait>::foo(move _1) -> bb2;
    }

    bb2: {
        _7 = &_8;
        _4 = (move _5, move _7);
        _9 = (_4.0: &usize);
        _10 = (_4.1: &usize);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<usize, usize>(move _15, _9, _10, move _17);
    }

    bb4: {
        return;
    }
}
