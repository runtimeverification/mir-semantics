// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/self/object-safety-sized-self-generic-method.rs:16:1: 16:26>::tick(_1: &mut CCounter) -> u32 {
    debug self => _1;
    let mut _0: u32;

    bb0: {
        ((*_1).0: u32) = Add(((*_1).0: u32), const 1_u32);
        _0 = ((*_1).0: u32);
        return;
    }
}

fn <impl at ui/self/object-safety-sized-self-generic-method.rs:16:1: 16:26>::with(_1: &CCounter, _2: F) -> () {
    debug self => _1;
    debug f => _2;
    let mut _0: ();
    let _3: ();
    let mut _4: (u32,);
    let mut _5: u32;

    bb0: {
        _5 = ((*_1).0: u32);
        _4 = (move _5,);
        _3 = <F as FnOnce<(u32,)>>::call_once(move _2, move _4) -> bb1;
    }

    bb1: {
        return;
    }
}

fn tick1(_1: &mut C) -> () {
    debug c => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: &mut dyn Counter;
    let _4: ();
    let mut _5: &C;

    bb0: {
        _3 = _1 as &mut dyn Counter (Pointer(Unsize));
        _2 = tick2(move _3) -> bb1;
    }

    bb1: {
        _5 = &(*_1);
        _4 = <C as Counter>::with::<[closure@ui/self/object-safety-sized-self-generic-method.rs:23:12: 23:15]>(move _5, const ZeroSized: [closure@ui/self/object-safety-sized-self-generic-method.rs:23:12: 23:15]) -> bb2;
    }

    bb2: {
        return;
    }
}

fn tick1::{closure#0}(_1: [closure@ui/self/object-safety-sized-self-generic-method.rs:23:12: 23:15], _2: u32) -> () {
    debug i => _2;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn tick2(_1: &mut dyn Counter) -> () {
    debug c => _1;
    let mut _0: ();
    let _2: ();

    bb0: {
        _2 = tick3::<dyn Counter>(_1) -> bb1;
    }

    bb1: {
        return;
    }
}

fn tick3(_1: &mut C) -> () {
    debug c => _1;
    let mut _0: ();
    let _2: u32;
    let _3: u32;

    bb0: {
        _2 = <C as Counter>::tick(_1) -> bb1;
    }

    bb1: {
        _3 = <C as Counter>::tick(_1) -> bb2;
    }

    bb2: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: CCounter;
    let _2: ();
    let mut _3: &mut CCounter;
    let mut _4: (&u32, &u32);
    let mut _5: &u32;
    let _6: u32;
    let mut _7: &mut CCounter;
    let mut _8: &u32;
    let _9: u32;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: u32;
    let mut _15: u32;
    let _17: !;
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug c => _1;
        let _10: &u32;
        let _11: &u32;
        scope 2 {
            debug left_val => _10;
            debug right_val => _11;
            let _16: core::panicking::AssertKind;
            scope 3 {
                debug kind => _16;
            }
        }
    }

    bb0: {
        _1 = CCounter { c: const 0_u32 };
        _3 = &mut _1;
        _2 = tick1::<CCounter>(_3) -> bb1;
    }

    bb1: {
        _7 = &mut _1;
        _6 = <CCounter as Counter>::tick(move _7) -> bb2;
    }

    bb2: {
        _5 = &_6;
        _9 = const 3_u32;
        _8 = &_9;
        _4 = (move _5, move _8);
        _10 = (_4.0: &u32);
        _11 = (_4.1: &u32);
        _14 = (*_10);
        _15 = (*_11);
        _13 = Eq(move _14, move _15);
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _16 = core::panicking::AssertKind::Eq;
        _18 = Option::<Arguments<'_>>::None;
        _17 = core::panicking::assert_failed::<u32, u32>(move _16, _10, _11, move _18);
    }

    bb4: {
        return;
    }
}
