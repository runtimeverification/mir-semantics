// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: std::string::String;
    let _2: &str;
    let mut _5: bool;
    let mut _6: i32;
    let _7: ();
    let mut _8: std::fmt::Arguments<'_>;
    let mut _9: &[&str];
    let _10: &[&str; 2];
    let _11: [&str; 2];
    let mut _12: &[core::fmt::rt::Argument<'_>];
    let _13: &[core::fmt::rt::Argument<'_>; 1];
    let _14: [core::fmt::rt::Argument<'_>; 1];
    let mut _15: core::fmt::rt::Argument<'_>;
    let _16: &usize;
    let _17: usize;
    let mut _18: &std::string::String;
    let mut _19: (&usize, &usize);
    let mut _20: &usize;
    let _21: usize;
    let mut _22: &std::string::String;
    let mut _23: &usize;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: usize;
    let mut _29: usize;
    let _31: !;
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _33: std::string::String;
    let mut _35: std::fmt::Arguments<'_>;
    let mut _36: &[&str];
    let _37: &[&str; 2];
    let _38: [&str; 2];
    let mut _39: &[core::fmt::rt::Argument<'_>];
    let _40: &[core::fmt::rt::Argument<'_>; 2];
    let _41: [core::fmt::rt::Argument<'_>; 2];
    let mut _42: core::fmt::rt::Argument<'_>;
    let _43: &std::string::String;
    let mut _44: core::fmt::rt::Argument<'_>;
    let _45: &std::string::String;
    scope 1 {
        debug a => _1;
        let mut _3: i32;
        scope 2 {
            debug i => _3;
            let mut _4: usize;
            scope 3 {
                debug expected_len => _4;
                let _24: &usize;
                let _25: &usize;
                let _34: std::string::String;
                scope 4 {
                    debug left_val => _24;
                    debug right_val => _25;
                    let _30: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _30;
                    }
                }
                scope 6 {
                    debug res => _34;
                }
            }
        }
    }

    bb0: {
        _2 = const "A";
        _1 = <str as ToString>::to_string(_2) -> bb1;
    }

    bb1: {
        _3 = const 20_i32;
        _4 = const 1_usize;
        goto -> bb2;
    }

    bb2: {
        _6 = _3;
        _5 = Gt(move _6, const 0_i32);
        switchInt(move _5) -> [0: bb17, otherwise: bb3];
    }

    bb3: {
        _11 = [const "", const "\n"];
        _10 = &_11;
        _9 = _10 as &[&str] (Pointer(Unsize));
        _18 = &_1;
        _17 = String::len(move _18) -> [return: bb4, unwind: bb19];
    }

    bb4: {
        _16 = &_17;
        _15 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_16) -> [return: bb5, unwind: bb19];
    }

    bb5: {
        _14 = [move _15];
        _13 = &_14;
        _12 = _13 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _8 = Arguments::<'_>::new_v1(move _9, move _12) -> [return: bb6, unwind: bb19];
    }

    bb6: {
        _7 = _print(move _8) -> [return: bb7, unwind: bb19];
    }

    bb7: {
        _22 = &_1;
        _21 = String::len(move _22) -> [return: bb8, unwind: bb19];
    }

    bb8: {
        _20 = &_21;
        _23 = &_4;
        _19 = (move _20, move _23);
        _24 = (_19.0: &usize);
        _25 = (_19.1: &usize);
        _28 = (*_24);
        _29 = (*_25);
        _27 = Eq(move _28, move _29);
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _30 = core::panicking::AssertKind::Eq;
        _32 = Option::<Arguments<'_>>::None;
        _31 = core::panicking::assert_failed::<usize, usize>(move _30, _24, _25, move _32) -> bb19;
    }

    bb10: {
        _38 = [const "", const ""];
        _37 = &_38;
        _36 = _37 as &[&str] (Pointer(Unsize));
        _43 = &_1;
        _42 = core::fmt::rt::Argument::<'_>::new_display::<String>(_43) -> [return: bb11, unwind: bb19];
    }

    bb11: {
        _45 = &_1;
        _44 = core::fmt::rt::Argument::<'_>::new_display::<String>(_45) -> [return: bb12, unwind: bb19];
    }

    bb12: {
        _41 = [move _42, move _44];
        _40 = &_41;
        _39 = _40 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _35 = Arguments::<'_>::new_v1(move _36, move _39) -> [return: bb13, unwind: bb19];
    }

    bb13: {
        _34 = format(move _35) -> [return: bb14, unwind: bb19];
    }

    bb14: {
        _33 = move _34;
        drop(_1) -> [return: bb15, unwind: bb16];
    }

    bb15: {
        _1 = move _33;
        _3 = Sub(_3, const 1_i32);
        _4 = Mul(_4, const 2_usize);
        goto -> bb2;
    }

    bb16 (cleanup): {
        _1 = move _33;
        goto -> bb19;
    }

    bb17: {
        drop(_1) -> bb18;
    }

    bb18: {
        return;
    }

    bb19 (cleanup): {
        drop(_1) -> [return: bb20, unwind terminate];
    }

    bb20 (cleanup): {
        resume;
    }
}
