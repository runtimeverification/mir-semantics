// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: std::boxed::Box<i32>;
    let mut _2: std::boxed::Box<i32>;
    let mut _3: (&i32, &i32);
    let mut _4: &i32;
    let mut _5: &i32;
    let _6: i32;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: i32;
    let mut _12: i32;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: std::rc::Rc<i32>;
    let mut _18: (&i32, &i32);
    let mut _19: &i32;
    let _20: &i32;
    let mut _21: &std::rc::Rc<i32>;
    let mut _22: &i32;
    let _23: i32;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: i32;
    let mut _29: i32;
    let _31: !;
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _33: *const i32;
    scope 1 {
        debug x => _1;
        let _7: &i32;
        let _8: &i32;
        let mut _16: std::rc::Rc<i32>;
        let mut _34: *const ();
        let mut _35: usize;
        let mut _36: usize;
        let mut _37: usize;
        let mut _38: usize;
        let mut _39: bool;
        scope 2 {
            debug left_val => _7;
            debug right_val => _8;
            let _13: core::panicking::AssertKind;
            scope 3 {
                debug kind => _13;
            }
        }
        scope 4 {
            debug x => _16;
            let _24: &i32;
            let _25: &i32;
            scope 5 {
                debug left_val => _24;
                debug right_val => _25;
                let _30: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _30;
                }
            }
        }
    }

    bb0: {
        _1 = Box::<i32>::new(const 3_i32) -> bb1;
    }

    bb1: {
        _2 = move _1;
        _1 = move _2;
        _33 = (((_1.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32);
        _34 = _33 as *const () (PtrToPtr);
        _35 = _34 as usize (Transmute);
        _36 = AlignOf(i32);
        _37 = Sub(_36, const 1_usize);
        _38 = BitAnd(_35, _37);
        _39 = Eq(_38, const 0_usize);
        assert(_39, "misaligned pointer dereference: address must be a multiple of {} but is {}", _36, _35) -> [success: bb13, unwind unreachable];
    }

    bb2: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<i32, i32>(move _13, _7, _8, move _15) -> bb11;
    }

    bb3: {
        _16 = Rc::<i32>::new(const 3_i32) -> [return: bb4, unwind: bb11];
    }

    bb4: {
        _17 = move _16;
        _16 = move _17;
        _21 = &_16;
        _20 = <Rc<i32> as Deref>::deref(move _21) -> [return: bb5, unwind: bb10];
    }

    bb5: {
        _19 = _20;
        _23 = const 3_i32;
        _22 = &_23;
        _18 = (move _19, move _22);
        _24 = (_18.0: &i32);
        _25 = (_18.1: &i32);
        _28 = (*_24);
        _29 = (*_25);
        _27 = Eq(move _28, move _29);
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _30 = core::panicking::AssertKind::Eq;
        _32 = Option::<Arguments<'_>>::None;
        _31 = core::panicking::assert_failed::<i32, i32>(move _30, _24, _25, move _32) -> bb10;
    }

    bb7: {
        drop(_16) -> [return: bb8, unwind: bb11];
    }

    bb8: {
        drop(_1) -> bb9;
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_16) -> [return: bb11, unwind terminate];
    }

    bb11 (cleanup): {
        drop(_1) -> [return: bb12, unwind terminate];
    }

    bb12 (cleanup): {
        resume;
    }

    bb13: {
        _4 = &(*_33);
        _6 = const 3_i32;
        _5 = &_6;
        _3 = (move _4, move _5);
        _7 = (_3.0: &i32);
        _8 = (_3.1: &i32);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb3, otherwise: bb2];
    }
}
