// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/self/arbitrary_self_types_nested.rs:10:10: 10:17>::default() -> Ty {
    let mut _0: Ty;

    bb0: {
        return;
    }
}

const TRAIT_MAGIC: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const 42_u32;
        return;
    }
}

const INHERENT_MAGIC: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const 1995_u32;
        return;
    }
}

fn <impl at ui/self/arbitrary_self_types_nested.rs:20:1: 20:18>::receive_trait(_1: &Arc<Rc<Box<Ty>>>) -> u32 {
    debug self => _1;
    let mut _0: u32;

    bb0: {
        _0 = const _;
        return;
    }
}

fn <impl at ui/self/arbitrary_self_types_nested.rs:26:1: 26:8>::receive_inherent(_1: &Arc<Rc<Box<Ty>>>) -> u32 {
    debug self => _1;
    let mut _0: u32;

    bb0: {
        _0 = const _;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::sync::Arc<std::rc::Rc<std::boxed::Box<Ty>>>;
    let mut _2: (&u32, &u32);
    let mut _3: &u32;
    let _4: u32;
    let mut _5: &u32;
    let _6: u32;
    let mut _7: &std::sync::Arc<std::rc::Rc<std::boxed::Box<Ty>>>;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: u32;
    let mut _13: u32;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&u32, &u32);
    let mut _18: &u32;
    let _19: u32;
    let mut _20: &u32;
    let _21: u32;
    let mut _22: &std::sync::Arc<std::rc::Rc<std::boxed::Box<Ty>>>;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: u32;
    let mut _28: u32;
    let _30: !;
    let mut _31: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug ty => _1;
        let _8: &u32;
        let _9: &u32;
        let _23: &u32;
        let _24: &u32;
        scope 2 {
            debug left_val => _8;
            debug right_val => _9;
            let _14: core::panicking::AssertKind;
            scope 3 {
                debug kind => _14;
            }
        }
        scope 4 {
            debug left_val => _23;
            debug right_val => _24;
            let _29: core::panicking::AssertKind;
            scope 5 {
                debug kind => _29;
            }
        }
    }

    bb0: {
        _1 = <Arc<Rc<Box<Ty>>> as Default>::default() -> bb1;
    }

    bb1: {
        _4 = const _;
        _3 = &_4;
        _7 = &_1;
        _6 = <Ty as Trait>::receive_trait(move _7) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        _5 = &_6;
        _2 = (move _3, move _5);
        _8 = (_2.0: &u32);
        _9 = (_2.1: &u32);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<u32, u32>(move _14, _8, _9, move _16) -> bb9;
    }

    bb4: {
        _19 = const _;
        _18 = &_19;
        _22 = &_1;
        _21 = Ty::receive_inherent(move _22) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        _20 = &_21;
        _17 = (move _18, move _20);
        _23 = (_17.0: &u32);
        _24 = (_17.1: &u32);
        _27 = (*_23);
        _28 = (*_24);
        _26 = Eq(move _27, move _28);
        _25 = Not(move _26);
        switchInt(move _25) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _29 = core::panicking::AssertKind::Eq;
        _31 = Option::<Arguments<'_>>::None;
        _30 = core::panicking::assert_failed::<u32, u32>(move _29, _23, _24, move _31) -> bb9;
    }

    bb7: {
        drop(_1) -> bb8;
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_1) -> [return: bb10, unwind terminate];
    }

    bb10 (cleanup): {
        resume;
    }
}
