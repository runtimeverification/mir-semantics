// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/self/explicit-self-generic.rs:4:16: 4:21>::clone(_1: &LM) -> LM {
    debug self => _1;
    let mut _0: LM;
    scope 1 {
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn linear_map() -> HashMap<K, V> {
    let mut _0: HashMap<K, V>;
    let mut _1: LM;
    let mut _2: std::vec::Vec<(K, V)>;

    bb0: {
        _1 = LM { resize_at: const 32_usize, size: const 0_usize };
        _2 = Vec::<(K, V)>::new() -> bb1;
    }

    bb1: {
        _0 = HashMap::<K, V>::HashMap_(move _1, move _2);
        return;
    }
}

fn <impl at ui/self/explicit-self-generic.rs:17:1: 17:23>::len(_1: &mut HashMap<K, V>) -> usize {
    debug self => _1;
    let mut _0: usize;
    let _2: &LM;
    scope 1 {
        debug l => _2;
    }

    bb0: {
        _2 = &(((*_1) as HashMap_).0: LM);
        _0 = ((*_2).1: usize);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: std::boxed::Box<HashMap<(), ()>>;
    let mut _2: HashMap<(), ()>;
    let mut _3: (&usize, &usize);
    let mut _4: &usize;
    let _5: usize;
    let mut _6: &mut HashMap<(), ()>;
    let mut _7: &usize;
    let _8: usize;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: usize;
    let mut _14: usize;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: *const HashMap<(), ()>;
    scope 1 {
        debug m => _1;
        let _9: &usize;
        let _10: &usize;
        let mut _19: *const ();
        let mut _20: usize;
        let mut _21: usize;
        let mut _22: usize;
        let mut _23: usize;
        let mut _24: bool;
        scope 2 {
            debug left_val => _9;
            debug right_val => _10;
            let _15: core::panicking::AssertKind;
            scope 3 {
                debug kind => _15;
            }
        }
    }

    bb0: {
        _2 = linear_map::<(), ()>() -> bb1;
    }

    bb1: {
        _1 = Box::<HashMap<(), ()>>::new(move _2) -> bb2;
    }

    bb2: {
        _18 = (((_1.0: std::ptr::Unique<HashMap<(), ()>>).0: std::ptr::NonNull<HashMap<(), ()>>).0: *const HashMap<(), ()>);
        _19 = _18 as *const () (PtrToPtr);
        _20 = _19 as usize (Transmute);
        _21 = AlignOf(HashMap<(), ()>);
        _22 = Sub(_21, const 1_usize);
        _23 = BitAnd(_20, _22);
        _24 = Eq(_23, const 0_usize);
        assert(_24, "misaligned pointer dereference: address must be a multiple of {} but is {}", _21, _20) -> [success: bb9, unwind unreachable];
    }

    bb3: {
        _4 = &_5;
        _8 = const 0_usize;
        _7 = &_8;
        _3 = (move _4, move _7);
        _9 = (_3.0: &usize);
        _10 = (_3.1: &usize);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<usize, usize>(move _15, _9, _10, move _17) -> bb7;
    }

    bb5: {
        drop(_1) -> bb6;
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_1) -> [return: bb8, unwind terminate];
    }

    bb8 (cleanup): {
        resume;
    }

    bb9: {
        _6 = &mut (*_18);
        _5 = HashMap::<(), ()>::len(move _6) -> [return: bb3, unwind: bb7];
    }
}

fn HashMap::HashMap_(_1: LM, _2: Vec<(K, V)>) -> HashMap<K, V> {
    let mut _0: HashMap<K, V>;

    bb0: {
        _0 = HashMap::<K, V>::HashMap_(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn HashMap::HashMap_(_1: LM, _2: Vec<(K, V)>) -> HashMap<K, V> {
    let mut _0: HashMap<K, V>;

    bb0: {
        _0 = HashMap::<K, V>::HashMap_(move _1, move _2);
        return;
    }
}
