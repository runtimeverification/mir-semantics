// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Foo::complicated(_1: *const *const Self) -> i64 {
    debug self => _1;
    let mut _0: i64;
    let mut _2: *const Self;
    let mut _3: *const ();
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;

    bb0: {
        _3 = _1 as *const () (PtrToPtr);
        _4 = _3 as usize (Transmute);
        _5 = AlignOf(*const Self);
        _6 = Sub(_5, const 1_usize);
        _7 = BitAnd(_4, _6);
        _8 = Eq(_7, const 0_usize);
        assert(_8, "misaligned pointer dereference: address must be a multiple of {} but is {}", _5, _4) -> [success: bb2, unwind unreachable];
    }

    bb1: {
        return;
    }

    bb2: {
        _2 = (*_1);
        _0 = <Self as Foo>::bar(move _2) -> bb1;
    }
}

fn <impl at ui/self/arbitrary_self_types_raw_pointer_trait.rs:16:1: 16:17>::foo(_1: *const i32) -> &str {
    debug self => _1;
    let mut _0: &str;

    bb0: {
        _0 = const "I'm an i32!";
        return;
    }
}

fn <impl at ui/self/arbitrary_self_types_raw_pointer_trait.rs:16:1: 16:17>::bar(_1: *const i32) -> i64 {
    debug self => _1;
    let mut _0: i64;
    let mut _2: i32;
    let mut _3: *const ();
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;

    bb0: {
        _3 = _1 as *const () (PtrToPtr);
        _4 = _3 as usize (Transmute);
        _5 = AlignOf(i32);
        _6 = Sub(_5, const 1_usize);
        _7 = BitAnd(_4, _6);
        _8 = Eq(_7, const 0_usize);
        assert(_8, "misaligned pointer dereference: address must be a multiple of {} but is {}", _5, _4) -> [success: bb1, unwind unreachable];
    }

    bb1: {
        _2 = (*_1);
        _0 = move _2 as i64 (IntToInt);
        return;
    }
}

fn <impl at ui/self/arbitrary_self_types_raw_pointer_trait.rs:26:1: 26:17>::foo(_1: *const u32) -> &str {
    debug self => _1;
    let mut _0: &str;

    bb0: {
        _0 = const "I'm a u32!";
        return;
    }
}

fn <impl at ui/self/arbitrary_self_types_raw_pointer_trait.rs:26:1: 26:17>::bar(_1: *const u32) -> i64 {
    debug self => _1;
    let mut _0: i64;
    let mut _2: u32;
    let mut _3: *const ();
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;

    bb0: {
        _3 = _1 as *const () (PtrToPtr);
        _4 = _3 as usize (Transmute);
        _5 = AlignOf(u32);
        _6 = Sub(_5, const 1_usize);
        _7 = BitAnd(_4, _6);
        _8 = Eq(_7, const 0_usize);
        assert(_8, "misaligned pointer dereference: address must be a multiple of {} but is {}", _5, _4) -> [success: bb1, unwind unreachable];
    }

    bb1: {
        _2 = (*_1);
        _0 = move _2 as i64 (IntToInt);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: *const dyn Foo;
    let mut _2: *const i32;
    let mut _3: *const dyn Foo;
    let mut _4: *const u32;
    let mut _5: (&&str, &&str);
    let mut _6: &&str;
    let _7: &str;
    let mut _8: &&str;
    let _9: &str;
    let mut _12: bool;
    let mut _13: bool;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&&str, &&str);
    let mut _18: &&str;
    let _19: &str;
    let mut _20: &&str;
    let _21: &str;
    let mut _24: bool;
    let mut _25: bool;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let _31: &i32;
    let mut _32: (&&str, &&str);
    let mut _33: &&str;
    let _34: &str;
    let mut _35: &&str;
    let _36: &str;
    let mut _37: *const i32;
    let mut _40: bool;
    let mut _41: bool;
    let _43: !;
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _45: (&i64, &i64);
    let mut _46: &i64;
    let _47: i64;
    let mut _48: &i64;
    let _49: i64;
    let mut _50: *const i32;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: i64;
    let mut _56: i64;
    let _58: !;
    let mut _59: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _60: (&i64, &i64);
    let mut _61: &i64;
    let _62: i64;
    let mut _63: &i64;
    let _64: i64;
    let mut _65: *const *const i32;
    let _66: &*const i32;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: i64;
    let mut _72: i64;
    let _74: !;
    let mut _75: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _76: *const dyn Foo;
    let mut _77: *const i32;
    let mut _78: (&&str, &&str);
    let mut _79: &&str;
    let _80: &str;
    let mut _81: &&str;
    let _82: &str;
    let mut _85: bool;
    let mut _86: bool;
    let _88: !;
    let mut _89: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _90: (&i64, &i64);
    let mut _91: &i64;
    let _92: i64;
    let mut _93: &i64;
    let _94: i64;
    let mut _97: bool;
    let mut _98: bool;
    let mut _99: i64;
    let mut _100: i64;
    let _102: !;
    let mut _103: std::option::Option<std::fmt::Arguments<'_>>;
    let _106: &u32;
    let mut _107: (&&str, &&str);
    let mut _108: &&str;
    let _109: &str;
    let mut _110: &&str;
    let _111: &str;
    let mut _112: *const u32;
    let mut _115: bool;
    let mut _116: bool;
    let _118: !;
    let mut _119: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _120: (&i64, &i64);
    let mut _121: &i64;
    let _122: i64;
    let mut _123: &i64;
    let _124: i64;
    let mut _125: *const u32;
    let mut _128: bool;
    let mut _129: bool;
    let mut _130: i64;
    let mut _131: i64;
    let _133: !;
    let mut _134: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _135: (&i64, &i64);
    let mut _136: &i64;
    let _137: i64;
    let mut _138: &i64;
    let _139: i64;
    let mut _140: *const *const u32;
    let _141: &*const u32;
    let mut _144: bool;
    let mut _145: bool;
    let mut _146: i64;
    let mut _147: i64;
    let _149: !;
    let mut _150: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _151: *const dyn Foo;
    let mut _152: *const u32;
    let mut _153: (&&str, &&str);
    let mut _154: &&str;
    let _155: &str;
    let mut _156: &&str;
    let _157: &str;
    let mut _160: bool;
    let mut _161: bool;
    let _163: !;
    let mut _164: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _165: (&i64, &i64);
    let mut _166: &i64;
    let _167: i64;
    let mut _168: &i64;
    let _169: i64;
    let mut _172: bool;
    let mut _173: bool;
    let mut _174: i64;
    let mut _175: i64;
    let _177: !;
    let mut _178: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug null_i32 => _1;
        scope 2 {
            debug null_u32 => _3;
            let _10: &&str;
            let _11: &&str;
            let _22: &&str;
            let _23: &&str;
            let _29: i32;
            scope 3 {
                debug left_val => _10;
                debug right_val => _11;
                let _14: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _14;
                }
            }
            scope 5 {
                debug left_val => _22;
                debug right_val => _23;
                let _26: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _26;
                }
            }
            scope 7 {
                debug valid_i32 => _29;
                let _30: *const i32;
                scope 8 {
                    debug valid_i32_thin => _30;
                    let _38: &&str;
                    let _39: &&str;
                    let _51: &i64;
                    let _52: &i64;
                    let _67: &i64;
                    let _68: &i64;
                    scope 9 {
                        debug left_val => _38;
                        debug right_val => _39;
                        let _42: core::panicking::AssertKind;
                        scope 10 {
                            debug kind => _42;
                        }
                    }
                    scope 11 {
                    }
                    scope 12 {
                        debug left_val => _51;
                        debug right_val => _52;
                        let _57: core::panicking::AssertKind;
                        scope 13 {
                            debug kind => _57;
                        }
                    }
                    scope 14 {
                    }
                    scope 15 {
                        debug left_val => _67;
                        debug right_val => _68;
                        let _73: core::panicking::AssertKind;
                        scope 16 {
                            debug kind => _73;
                        }
                    }
                    scope 17 {
                        debug valid_i32_fat => _76;
                        let _83: &&str;
                        let _84: &&str;
                        let _95: &i64;
                        let _96: &i64;
                        let _104: u32;
                        scope 18 {
                            debug left_val => _83;
                            debug right_val => _84;
                            let _87: core::panicking::AssertKind;
                            scope 19 {
                                debug kind => _87;
                            }
                        }
                        scope 20 {
                        }
                        scope 21 {
                            debug left_val => _95;
                            debug right_val => _96;
                            let _101: core::panicking::AssertKind;
                            scope 22 {
                                debug kind => _101;
                            }
                        }
                        scope 23 {
                            debug valid_u32 => _104;
                            let _105: *const u32;
                            scope 24 {
                                debug valid_u32_thin => _105;
                                let _113: &&str;
                                let _114: &&str;
                                let _126: &i64;
                                let _127: &i64;
                                let _142: &i64;
                                let _143: &i64;
                                scope 25 {
                                    debug left_val => _113;
                                    debug right_val => _114;
                                    let _117: core::panicking::AssertKind;
                                    scope 26 {
                                        debug kind => _117;
                                    }
                                }
                                scope 27 {
                                }
                                scope 28 {
                                    debug left_val => _126;
                                    debug right_val => _127;
                                    let _132: core::panicking::AssertKind;
                                    scope 29 {
                                        debug kind => _132;
                                    }
                                }
                                scope 30 {
                                }
                                scope 31 {
                                    debug left_val => _142;
                                    debug right_val => _143;
                                    let _148: core::panicking::AssertKind;
                                    scope 32 {
                                        debug kind => _148;
                                    }
                                }
                                scope 33 {
                                    debug valid_u32_fat => _151;
                                    let _158: &&str;
                                    let _159: &&str;
                                    let _170: &i64;
                                    let _171: &i64;
                                    scope 34 {
                                        debug left_val => _158;
                                        debug right_val => _159;
                                        let _162: core::panicking::AssertKind;
                                        scope 35 {
                                            debug kind => _162;
                                        }
                                    }
                                    scope 36 {
                                    }
                                    scope 37 {
                                        debug left_val => _170;
                                        debug right_val => _171;
                                        let _176: core::panicking::AssertKind;
                                        scope 38 {
                                            debug kind => _176;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = null::<i32>() -> bb1;
    }

    bb1: {
        _1 = move _2 as *const dyn Foo (Pointer(Unsize));
        _4 = null::<u32>() -> bb2;
    }

    bb2: {
        _3 = move _4 as *const dyn Foo (Pointer(Unsize));
        _7 = const "I'm an i32!";
        _6 = &_7;
        _9 = <dyn Foo as Foo>::foo(_1) -> bb3;
    }

    bb3: {
        _8 = &_9;
        _5 = (move _6, move _8);
        _10 = (_5.0: &&str);
        _11 = (_5.1: &&str);
        _13 = <&str as PartialEq>::eq(_10, _11) -> bb4;
    }

    bb4: {
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<&str, &str>(move _14, _10, _11, move _16);
    }

    bb6: {
        _19 = const "I'm a u32!";
        _18 = &_19;
        _21 = <dyn Foo as Foo>::foo(_3) -> bb7;
    }

    bb7: {
        _20 = &_21;
        _17 = (move _18, move _20);
        _22 = (_17.0: &&str);
        _23 = (_17.1: &&str);
        _25 = <&str as PartialEq>::eq(_22, _23) -> bb8;
    }

    bb8: {
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<&str, &str>(move _26, _22, _23, move _28);
    }

    bb10: {
        _29 = const 5_i32;
        _31 = &_29;
        _30 = &raw const (*_31);
        _34 = const "I'm an i32!";
        _33 = &_34;
        _37 = _30;
        _36 = <i32 as Foo>::foo(move _37) -> bb11;
    }

    bb11: {
        _35 = &_36;
        _32 = (move _33, move _35);
        _38 = (_32.0: &&str);
        _39 = (_32.1: &&str);
        _41 = <&str as PartialEq>::eq(_38, _39) -> bb12;
    }

    bb12: {
        _40 = Not(move _41);
        switchInt(move _40) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _42 = core::panicking::AssertKind::Eq;
        _44 = Option::<Arguments<'_>>::None;
        _43 = core::panicking::assert_failed::<&str, &str>(move _42, _38, _39, move _44);
    }

    bb14: {
        _47 = const 5_i64;
        _46 = &_47;
        _50 = _30;
        _49 = <i32 as Foo>::bar(move _50) -> bb15;
    }

    bb15: {
        _48 = &_49;
        _45 = (move _46, move _48);
        _51 = (_45.0: &i64);
        _52 = (_45.1: &i64);
        _55 = (*_51);
        _56 = (*_52);
        _54 = Eq(move _55, move _56);
        _53 = Not(move _54);
        switchInt(move _53) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _57 = core::panicking::AssertKind::Eq;
        _59 = Option::<Arguments<'_>>::None;
        _58 = core::panicking::assert_failed::<i64, i64>(move _57, _51, _52, move _59);
    }

    bb17: {
        _62 = const 5_i64;
        _61 = &_62;
        _66 = &_30;
        _65 = &raw const (*_66);
        _64 = <i32 as Foo>::complicated(move _65) -> bb18;
    }

    bb18: {
        _63 = &_64;
        _60 = (move _61, move _63);
        _67 = (_60.0: &i64);
        _68 = (_60.1: &i64);
        _71 = (*_67);
        _72 = (*_68);
        _70 = Eq(move _71, move _72);
        _69 = Not(move _70);
        switchInt(move _69) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _73 = core::panicking::AssertKind::Eq;
        _75 = Option::<Arguments<'_>>::None;
        _74 = core::panicking::assert_failed::<i64, i64>(move _73, _67, _68, move _75);
    }

    bb20: {
        _77 = _30;
        _76 = move _77 as *const dyn Foo (Pointer(Unsize));
        _80 = const "I'm an i32!";
        _79 = &_80;
        _82 = <dyn Foo as Foo>::foo(_76) -> bb21;
    }

    bb21: {
        _81 = &_82;
        _78 = (move _79, move _81);
        _83 = (_78.0: &&str);
        _84 = (_78.1: &&str);
        _86 = <&str as PartialEq>::eq(_83, _84) -> bb22;
    }

    bb22: {
        _85 = Not(move _86);
        switchInt(move _85) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _87 = core::panicking::AssertKind::Eq;
        _89 = Option::<Arguments<'_>>::None;
        _88 = core::panicking::assert_failed::<&str, &str>(move _87, _83, _84, move _89);
    }

    bb24: {
        _92 = const 5_i64;
        _91 = &_92;
        _94 = <dyn Foo as Foo>::bar(_76) -> bb25;
    }

    bb25: {
        _93 = &_94;
        _90 = (move _91, move _93);
        _95 = (_90.0: &i64);
        _96 = (_90.1: &i64);
        _99 = (*_95);
        _100 = (*_96);
        _98 = Eq(move _99, move _100);
        _97 = Not(move _98);
        switchInt(move _97) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _101 = core::panicking::AssertKind::Eq;
        _103 = Option::<Arguments<'_>>::None;
        _102 = core::panicking::assert_failed::<i64, i64>(move _101, _95, _96, move _103);
    }

    bb27: {
        _104 = const 18_u32;
        _106 = &_104;
        _105 = &raw const (*_106);
        _109 = const "I'm a u32!";
        _108 = &_109;
        _112 = _105;
        _111 = <u32 as Foo>::foo(move _112) -> bb28;
    }

    bb28: {
        _110 = &_111;
        _107 = (move _108, move _110);
        _113 = (_107.0: &&str);
        _114 = (_107.1: &&str);
        _116 = <&str as PartialEq>::eq(_113, _114) -> bb29;
    }

    bb29: {
        _115 = Not(move _116);
        switchInt(move _115) -> [0: bb31, otherwise: bb30];
    }

    bb30: {
        _117 = core::panicking::AssertKind::Eq;
        _119 = Option::<Arguments<'_>>::None;
        _118 = core::panicking::assert_failed::<&str, &str>(move _117, _113, _114, move _119);
    }

    bb31: {
        _122 = const 18_i64;
        _121 = &_122;
        _125 = _105;
        _124 = <u32 as Foo>::bar(move _125) -> bb32;
    }

    bb32: {
        _123 = &_124;
        _120 = (move _121, move _123);
        _126 = (_120.0: &i64);
        _127 = (_120.1: &i64);
        _130 = (*_126);
        _131 = (*_127);
        _129 = Eq(move _130, move _131);
        _128 = Not(move _129);
        switchInt(move _128) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        _132 = core::panicking::AssertKind::Eq;
        _134 = Option::<Arguments<'_>>::None;
        _133 = core::panicking::assert_failed::<i64, i64>(move _132, _126, _127, move _134);
    }

    bb34: {
        _137 = const 18_i64;
        _136 = &_137;
        _141 = &_105;
        _140 = &raw const (*_141);
        _139 = <u32 as Foo>::complicated(move _140) -> bb35;
    }

    bb35: {
        _138 = &_139;
        _135 = (move _136, move _138);
        _142 = (_135.0: &i64);
        _143 = (_135.1: &i64);
        _146 = (*_142);
        _147 = (*_143);
        _145 = Eq(move _146, move _147);
        _144 = Not(move _145);
        switchInt(move _144) -> [0: bb37, otherwise: bb36];
    }

    bb36: {
        _148 = core::panicking::AssertKind::Eq;
        _150 = Option::<Arguments<'_>>::None;
        _149 = core::panicking::assert_failed::<i64, i64>(move _148, _142, _143, move _150);
    }

    bb37: {
        _152 = _105;
        _151 = move _152 as *const dyn Foo (Pointer(Unsize));
        _155 = const "I'm a u32!";
        _154 = &_155;
        _157 = <dyn Foo as Foo>::foo(_151) -> bb38;
    }

    bb38: {
        _156 = &_157;
        _153 = (move _154, move _156);
        _158 = (_153.0: &&str);
        _159 = (_153.1: &&str);
        _161 = <&str as PartialEq>::eq(_158, _159) -> bb39;
    }

    bb39: {
        _160 = Not(move _161);
        switchInt(move _160) -> [0: bb41, otherwise: bb40];
    }

    bb40: {
        _162 = core::panicking::AssertKind::Eq;
        _164 = Option::<Arguments<'_>>::None;
        _163 = core::panicking::assert_failed::<&str, &str>(move _162, _158, _159, move _164);
    }

    bb41: {
        _167 = const 18_i64;
        _166 = &_167;
        _169 = <dyn Foo as Foo>::bar(_151) -> bb42;
    }

    bb42: {
        _168 = &_169;
        _165 = (move _166, move _168);
        _170 = (_165.0: &i64);
        _171 = (_165.1: &i64);
        _174 = (*_170);
        _175 = (*_171);
        _173 = Eq(move _174, move _175);
        _172 = Not(move _173);
        switchInt(move _172) -> [0: bb44, otherwise: bb43];
    }

    bb43: {
        _176 = core::panicking::AssertKind::Eq;
        _178 = Option::<Arguments<'_>>::None;
        _177 = core::panicking::assert_failed::<i64, i64>(move _176, _170, _171, move _178);
    }

    bb44: {
        return;
    }
}
