// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static tau: f64 = {
    let mut _0: f64;

    bb0: {
        _0 = Mul(const 2f64, const 3.1415926535897931f64);
        return;
    }
}

fn compute_area(_1: &shape) -> f64 {
    debug shape => _1;
    let mut _0: f64;
    let mut _2: isize;
    let _3: f64;
    let mut _4: f64;
    let mut _5: f64;
    let mut _6: f64;
    let mut _7: &f64;
    let _8: &Size;
    let mut _9: f64;
    let mut _10: f64;
    scope 1 {
        debug radius => _3;
    }
    scope 2 {
        debug size => _8;
    }

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _8 = &(((*_1) as rectangle).1: Size);
        _9 = ((*_8).0: f64);
        _10 = ((*_8).1: f64);
        _0 = Mul(move _9, move _10);
        goto -> bb4;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _3 = (((*_1) as circle).1: f64);
        _7 = const {alloc1: &f64};
        _6 = (*_7);
        _5 = Mul(const 0.5f64, move _6);
        _4 = Mul(move _5, _3);
        _0 = Mul(move _4, _3);
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

alloc1 (static: tau, size: 8, align: 8) {
    18 2d 44 54 fb 21 19 40                         â”‚ .-DT.!.@
}

fn <impl at ui/self/explicit-self.rs:23:1: 23:11>::select(_1: &shape, _2: f64, _3: &T, _4: &T) -> &T {
    debug self => _1;
    debug threshold => _2;
    debug a => _3;
    debug b => _4;
    let mut _0: &T;
    let mut _5: bool;
    let mut _6: f64;

    bb0: {
        _6 = compute_area(_1) -> bb1;
    }

    bb1: {
        _5 = Gt(move _6, _2);
        switchInt(move _5) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _0 = _3;
        goto -> bb4;
    }

    bb3: {
        _0 = _4;
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

fn select_based_on_unit_circle(_1: f64, _2: &T, _3: &T) -> &T {
    debug threshold => _1;
    debug a => _2;
    debug b => _3;
    let mut _0: &T;
    let _4: &shape;
    let _5: shape;
    let mut _6: Point;
    let _7: &T;
    scope 1 {
        debug shape => _4;
    }

    bb0: {
        _6 = Point { x: const 0f64, y: const 0f64 };
        _5 = shape::circle(move _6, const 1f64);
        _4 = &_5;
        _7 = shape::select::<T>(_4, _1, _2, _3) -> bb1;
    }

    bb1: {
        _0 = _7;
        return;
    }
}

fn <impl at ui/self/explicit-self.rs:38:10: 38:15>::clone(_1: &thing) -> thing {
    debug self => _1;
    let mut _0: thing;
    let mut _2: A;
    let _3: &A;

    bb0: {
        _3 = &((*_1).0: A);
        _2 = <A as Clone>::clone(_3) -> bb1;
    }

    bb1: {
        _0 = thing { x: move _2 };
        return;
    }
}

fn <impl at ui/self/explicit-self.rs:43:10: 43:15>::clone(_1: &A) -> A {
    debug self => _1;
    let mut _0: A;
    let mut _2: isize;
    let _3: &isize;

    bb0: {
        _3 = &((*_1).0: isize);
        _2 = (*_3);
        _0 = A { a: move _2 };
        return;
    }
}

fn thing(_1: A) -> thing {
    debug x => _1;
    let mut _0: thing;

    bb0: {
        _0 = thing { x: move _1 };
        return;
    }
}

fn <impl at ui/self/explicit-self.rs:54:1: 54:11>::bar(_1: Box<thing>) -> isize {
    debug self => _1;
    let mut _0: isize;
    let mut _2: *const thing;
    let mut _3: *const ();
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;

    bb0: {
        _2 = (((_1.0: std::ptr::Unique<thing>).0: std::ptr::NonNull<thing>).0: *const thing);
        _3 = _2 as *const () (PtrToPtr);
        _4 = _3 as usize (Transmute);
        _5 = AlignOf(thing);
        _6 = Sub(_5, const 1_usize);
        _7 = BitAnd(_4, _6);
        _8 = Eq(_7, const 0_usize);
        assert(_8, "misaligned pointer dereference: address must be a multiple of {} but is {}", _5, _4) -> [success: bb2, unwind unreachable];
    }

    bb1: {
        return;
    }

    bb2: {
        _0 = (((*_2).0: A).0: isize);
        drop(_1) -> bb1;
    }
}

fn <impl at ui/self/explicit-self.rs:54:1: 54:11>::quux(_1: &thing) -> isize {
    debug self => _1;
    let mut _0: isize;

    bb0: {
        _0 = (((*_1).0: A).0: isize);
        return;
    }
}

fn <impl at ui/self/explicit-self.rs:54:1: 54:11>::baz(_1: &thing) -> &A {
    debug self => _1;
    let mut _0: &A;

    bb0: {
        _0 = &((*_1).0: A);
        return;
    }
}

fn <impl at ui/self/explicit-self.rs:54:1: 54:11>::spam(_1: thing) -> isize {
    debug self => _1;
    let mut _0: isize;

    bb0: {
        _0 = ((_1.0: A).0: isize);
        return;
    }
}

fn <impl at ui/self/explicit-self.rs:62:1: 62:19>::f(_1: &thing) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::boxed::Box<thing>;
    let mut _2: thing;
    let mut _3: A;
    let mut _4: (&isize, &isize);
    let mut _5: &isize;
    let _6: isize;
    let mut _7: std::boxed::Box<thing>;
    let mut _8: &std::boxed::Box<thing>;
    let mut _9: &isize;
    let _10: isize;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: isize;
    let mut _16: isize;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _20: (&isize, &isize);
    let mut _21: &isize;
    let _22: isize;
    let mut _23: &thing;
    let mut _24: &isize;
    let _25: isize;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: isize;
    let mut _31: isize;
    let _33: !;
    let mut _34: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _36: A;
    let mut _37: (&isize, &isize);
    let mut _38: &isize;
    let _39: isize;
    let mut _40: thing;
    let mut _41: &isize;
    let _42: isize;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: isize;
    let mut _48: isize;
    let _50: !;
    let mut _51: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _52: *const thing;
    scope 1 {
        debug y => _1;
        let _11: &isize;
        let _12: &isize;
        let _26: &isize;
        let _27: &isize;
        let _35: thing;
        let mut _53: *const ();
        let mut _54: usize;
        let mut _55: usize;
        let mut _56: usize;
        let mut _57: usize;
        let mut _58: bool;
        scope 2 {
            debug left_val => _11;
            debug right_val => _12;
            let _17: core::panicking::AssertKind;
            scope 3 {
                debug kind => _17;
            }
        }
        scope 4 {
            debug left_val => _26;
            debug right_val => _27;
            let _32: core::panicking::AssertKind;
            scope 5 {
                debug kind => _32;
            }
        }
        scope 6 {
            debug z => _35;
            let _43: &isize;
            let _44: &isize;
            scope 7 {
                debug left_val => _43;
                debug right_val => _44;
                let _49: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _49;
                }
            }
        }
    }

    bb0: {
        _3 = A { a: const 10_isize };
        _2 = thing(move _3) -> bb1;
    }

    bb1: {
        _1 = Box::<thing>::new(move _2) -> bb2;
    }

    bb2: {
        _8 = &_1;
        _7 = <Box<thing> as Clone>::clone(move _8) -> [return: bb3, unwind: bb15];
    }

    bb3: {
        _6 = thing::bar(move _7) -> [return: bb4, unwind: bb15];
    }

    bb4: {
        _5 = &_6;
        _10 = const 10_isize;
        _9 = &_10;
        _4 = (move _5, move _9);
        _11 = (_4.0: &isize);
        _12 = (_4.1: &isize);
        _15 = (*_11);
        _16 = (*_12);
        _14 = Eq(move _15, move _16);
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<isize, isize>(move _17, _11, _12, move _19) -> bb15;
    }

    bb6: {
        _52 = (((_1.0: std::ptr::Unique<thing>).0: std::ptr::NonNull<thing>).0: *const thing);
        _53 = _52 as *const () (PtrToPtr);
        _54 = _53 as usize (Transmute);
        _55 = AlignOf(thing);
        _56 = Sub(_55, const 1_usize);
        _57 = BitAnd(_54, _56);
        _58 = Eq(_57, const 0_usize);
        assert(_58, "misaligned pointer dereference: address must be a multiple of {} but is {}", _55, _54) -> [success: bb17, unwind unreachable];
    }

    bb7: {
        _21 = &_22;
        _25 = const 10_isize;
        _24 = &_25;
        _20 = (move _21, move _24);
        _26 = (_20.0: &isize);
        _27 = (_20.1: &isize);
        _30 = (*_26);
        _31 = (*_27);
        _29 = Eq(move _30, move _31);
        _28 = Not(move _29);
        switchInt(move _28) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _32 = core::panicking::AssertKind::Eq;
        _34 = Option::<Arguments<'_>>::None;
        _33 = core::panicking::assert_failed::<isize, isize>(move _32, _26, _27, move _34) -> bb15;
    }

    bb9: {
        _36 = A { a: const 11_isize };
        _35 = thing(move _36) -> [return: bb10, unwind: bb15];
    }

    bb10: {
        _40 = move _35;
        _39 = thing::spam(move _40) -> [return: bb11, unwind: bb15];
    }

    bb11: {
        _38 = &_39;
        _42 = const 11_isize;
        _41 = &_42;
        _37 = (move _38, move _41);
        _43 = (_37.0: &isize);
        _44 = (_37.1: &isize);
        _47 = (*_43);
        _48 = (*_44);
        _46 = Eq(move _47, move _48);
        _45 = Not(move _46);
        switchInt(move _45) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _49 = core::panicking::AssertKind::Eq;
        _51 = Option::<Arguments<'_>>::None;
        _50 = core::panicking::assert_failed::<isize, isize>(move _49, _43, _44, move _51) -> bb15;
    }

    bb13: {
        drop(_1) -> bb14;
    }

    bb14: {
        return;
    }

    bb15 (cleanup): {
        drop(_1) -> [return: bb16, unwind terminate];
    }

    bb16 (cleanup): {
        resume;
    }

    bb17: {
        _23 = &(*_52);
        _22 = thing::quux(move _23) -> [return: bb7, unwind: bb15];
    }
}

fn shape::circle(_1: Point, _2: f64) -> shape {
    let mut _0: shape;

    bb0: {
        _0 = shape::circle(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn shape::circle(_1: Point, _2: f64) -> shape {
    let mut _0: shape;

    bb0: {
        _0 = shape::circle(move _1, move _2);
        return;
    }
}

fn shape::rectangle(_1: Point, _2: Size) -> shape {
    let mut _0: shape;

    bb0: {
        _0 = shape::rectangle(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn shape::rectangle(_1: Point, _2: Size) -> shape {
    let mut _0: shape;

    bb0: {
        _0 = shape::rectangle(move _1, move _2);
        return;
    }
}
