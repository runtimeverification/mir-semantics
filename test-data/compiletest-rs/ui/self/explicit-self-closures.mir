// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/self/explicit-self-closures.rs:11:1: 11:9>::set_many(_1: &mut Box, _2: &[usize]) -> () {
    debug self => _1;
    debug xs => _2;
    let mut _0: ();
    let mut _3: std::slice::Iter<'_, usize>;
    let mut _4: std::slice::Iter<'_, usize>;
    let mut _5: std::option::Option<&usize>;
    let mut _6: &mut std::slice::Iter<'_, usize>;
    let mut _7: isize;
    let mut _9: usize;
    scope 1 {
        debug iter => _4;
        let _8: &usize;
        scope 2 {
            debug x => _8;
        }
    }

    bb0: {
        _3 = <&[usize] as IntoIterator>::into_iter(_2) -> bb1;
    }

    bb1: {
        _4 = move _3;
        goto -> bb2;
    }

    bb2: {
        _6 = &mut _4;
        _5 = <std::slice::Iter<'_, usize> as Iterator>::next(_6) -> bb3;
    }

    bb3: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        _8 = ((_5 as Some).0: &usize);
        _9 = (*_8);
        ((*_1).0: usize) = move _9;
        goto -> bb2;
    }

    bb5: {
        unreachable;
    }

    bb6: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
