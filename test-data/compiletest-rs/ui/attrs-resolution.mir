// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: FooEnum;
    scope 1 {
        debug foo_enum_bar => _1;
        let _2: i32;
        let _3: FooStruct;
        scope 2 {
            debug x => _2;
        }
        scope 3 {
            debug foo_struct => _3;
            let _4: i32;
            let _5: FooStruct;
            scope 4 {
                debug bar => _4;
            }
            scope 5 {
                debug _another_foo_strunct => _5;
            }
        }
    }

    bb0: {
        _1 = FooEnum::Bar(const 1_i32);
        _2 = ((_1 as Bar).0: i32);
        _3 = FooStruct { bar: const 1_i32 };
        _4 = (_3.0: i32);
        _5 = FooStruct { bar: const 1_i32 };
        return;
    }
}

fn FooEnum::Bar(_1: i32) -> FooEnum {
    let mut _0: FooEnum;

    bb0: {
        _0 = FooEnum::Bar(move _1);
        return;
    }
}

// MIR FOR CTFE
fn FooEnum::Bar(_1: i32) -> FooEnum {
    let mut _0: FooEnum;

    bb0: {
        _0 = FooEnum::Bar(move _1);
        return;
    }
}
