// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::string::String;
    let _2: &str;
    let mut _3: (&u8, &u8);
    let mut _4: &u8;
    let _5: &[u8];
    let mut _6: &std::string::String;
    let _7: usize;
    let mut _8: usize;
    let mut _9: bool;
    let mut _10: &u8;
    let _11: u8;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: u8;
    let mut _17: u8;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug s => _1;
        let _12: &u8;
        let _13: &u8;
        scope 2 {
            debug left_val => _12;
            debug right_val => _13;
            let _18: core::panicking::AssertKind;
            scope 3 {
                debug kind => _18;
            }
        }
    }

    bb0: {
        _2 = const "hello";
        _1 = <str as ToString>::to_string(_2) -> bb1;
    }

    bb1: {
        _6 = &_1;
        _5 = String::as_bytes(move _6) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _7 = const 5_usize;
        _8 = Len((*_5));
        _9 = Lt(_7, _8);
        assert(move _9, "index out of bounds: the length is {} but the index is {}", move _8, _7) -> [success: bb3, unwind: bb7];
    }

    bb3: {
        _4 = &(*_5)[_7];
        _11 = const 0_u8;
        _10 = &_11;
        _3 = (move _4, move _10);
        _12 = (_3.0: &u8);
        _13 = (_3.1: &u8);
        _16 = (*_12);
        _17 = (*_13);
        _15 = Eq(move _16, move _17);
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<u8, u8>(move _18, _12, _13, move _20) -> bb7;
    }

    bb5: {
        drop(_1) -> bb6;
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_1) -> [return: bb8, unwind terminate];
    }

    bb8 (cleanup): {
        resume;
    }
}
