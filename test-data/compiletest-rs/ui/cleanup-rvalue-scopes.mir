// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static mut FLAGS: u64 = {
    let mut _0: u64;

    bb0: {
        _0 = const 0_u64;
        return;
    }
}

fn AddFlags(_1: u64) -> AddFlags {
    debug bits => _1;
    let mut _0: AddFlags;

    bb0: {
        _0 = AddFlags { bits: _1 };
        return;
    }
}

fn arg(_1: u64, _2: &AddFlags) -> () {
    debug exp => _1;
    debug _x => _2;
    let mut _0: ();
    let _3: ();

    bb0: {
        _3 = check_flags(_1) -> bb1;
    }

    bb1: {
        return;
    }
}

fn pass(_1: T) -> T {
    debug v => _1;
    let mut _0: T;

    bb0: {
        _0 = move _1;
        return;
    }
}

fn check_flags(_1: u64) -> () {
    debug exp => _1;
    let mut _0: ();
    let mut _3: *mut u64;
    let mut _4: *mut u64;
    let _5: ();
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str];
    let _8: &[&str; 3];
    let _9: [&str; 3];
    let mut _10: &[core::fmt::rt::Argument<'_>];
    let _11: &[core::fmt::rt::Argument<'_>; 2];
    let _12: [core::fmt::rt::Argument<'_>; 2];
    let mut _13: core::fmt::rt::Argument<'_>;
    let _14: &u64;
    let mut _15: core::fmt::rt::Argument<'_>;
    let _16: &u64;
    let mut _17: (&u64, &u64);
    let mut _18: &u64;
    let mut _19: &u64;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: u64;
    let mut _25: u64;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        let _2: u64;
        let mut _35: *const ();
        let mut _36: usize;
        let mut _37: usize;
        let mut _38: usize;
        let mut _39: usize;
        let mut _40: bool;
        scope 2 {
            debug x => _2;
            let _20: &u64;
            let _21: &u64;
            let mut _29: *const ();
            let mut _30: usize;
            let mut _31: usize;
            let mut _32: usize;
            let mut _33: usize;
            let mut _34: bool;
            scope 3 {
                debug left_val => _20;
                debug right_val => _21;
                let _26: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _26;
                }
            }
        }
    }

    bb0: {
        _3 = const {alloc1: *mut u64};
        _35 = _3 as *const () (PtrToPtr);
        _36 = _35 as usize (Transmute);
        _37 = AlignOf(u64);
        _38 = Sub(_37, const 1_usize);
        _39 = BitAnd(_36, _38);
        _40 = Eq(_39, const 0_usize);
        assert(_40, "misaligned pointer dereference: address must be a multiple of {} but is {}", _37, _36) -> [success: bb8, unwind unreachable];
    }

    bb1: {
        _16 = &_1;
        _15 = core::fmt::rt::Argument::<'_>::new_display::<u64>(_16) -> bb2;
    }

    bb2: {
        _12 = [move _13, move _15];
        _11 = &_12;
        _10 = _11 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _6 = Arguments::<'_>::new_v1(move _7, move _10) -> bb3;
    }

    bb3: {
        _5 = _print(move _6) -> bb4;
    }

    bb4: {
        _18 = &_2;
        _19 = &_1;
        _17 = (move _18, move _19);
        _20 = (_17.0: &u64);
        _21 = (_17.1: &u64);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<u64, u64>(move _26, _20, _21, move _28);
    }

    bb6: {
        return;
    }

    bb7: {
        (*_4) = const 0_u64;
        _9 = [const "flags ", const ", expected ", const "\n"];
        _8 = &_9;
        _7 = _8 as &[&str] (Pointer(Unsize));
        _14 = &_2;
        _13 = core::fmt::rt::Argument::<'_>::new_display::<u64>(_14) -> bb1;
    }

    bb8: {
        _2 = (*_3);
        _4 = const {alloc1: *mut u64};
        _29 = _4 as *const () (PtrToPtr);
        _30 = _29 as usize (Transmute);
        _31 = AlignOf(u64);
        _32 = Sub(_31, const 1_usize);
        _33 = BitAnd(_30, _32);
        _34 = Eq(_33, const 0_usize);
        assert(_34, "misaligned pointer dereference: address must be a multiple of {} but is {}", _31, _30) -> [success: bb7, unwind unreachable];
    }
}

alloc1 (static: FLAGS, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn <impl at ui/cleanup-rvalue-scopes.rs:39:1: 39:14>::check_flags(_1: &AddFlags, _2: u64) -> &AddFlags {
    debug self => _1;
    debug exp => _2;
    let mut _0: &AddFlags;
    let _3: ();

    bb0: {
        _3 = check_flags(_2) -> bb1;
    }

    bb1: {
        _0 = _1;
        return;
    }
}

fn <impl at ui/cleanup-rvalue-scopes.rs:39:1: 39:14>::bits(_1: &AddFlags) -> u64 {
    debug self => _1;
    let mut _0: u64;

    bb0: {
        _0 = ((*_1).0: u64);
        return;
    }
}

fn <impl at ui/cleanup-rvalue-scopes.rs:50:1: 50:23>::drop(_1: &mut AddFlags) -> () {
    debug self => _1;
    let mut _0: ();
    let mut _2: u64;
    let mut _3: *mut u64;
    let mut _4: u64;
    let mut _5: *mut u64;
    scope 1 {
        let mut _6: *const ();
        let mut _7: usize;
        let mut _8: usize;
        let mut _9: usize;
        let mut _10: usize;
        let mut _11: bool;
        let mut _12: *const ();
        let mut _13: usize;
        let mut _14: usize;
        let mut _15: usize;
        let mut _16: usize;
        let mut _17: bool;
    }

    bb0: {
        _3 = const {alloc1: *mut u64};
        _12 = _3 as *const () (PtrToPtr);
        _13 = _12 as usize (Transmute);
        _14 = AlignOf(u64);
        _15 = Sub(_14, const 1_usize);
        _16 = BitAnd(_13, _15);
        _17 = Eq(_16, const 0_usize);
        assert(_17, "misaligned pointer dereference: address must be a multiple of {} but is {}", _14, _13) -> [success: bb2, unwind unreachable];
    }

    bb1: {
        (*_5) = Add(move _2, move _4);
        return;
    }

    bb2: {
        _2 = (*_3);
        _4 = ((*_1).0: u64);
        _5 = const {alloc1: *mut u64};
        _6 = _5 as *const () (PtrToPtr);
        _7 = _6 as usize (Transmute);
        _8 = AlignOf(u64);
        _9 = Sub(_8, const 1_usize);
        _10 = BitAnd(_7, _9);
        _11 = Eq(_10, const 0_usize);
        assert(_11, "misaligned pointer dereference: address must be a multiple of {} but is {}", _8, _7) -> [success: bb1, unwind unreachable];
    }
}

alloc1 (static: FLAGS, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let _4: &[&str; 1];
    let _5: [&str; 1];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 0];
    let _8: [core::fmt::rt::Argument<'_>; 0];
    let _9: AddFlags;
    let _10: ();
    let _11: ();
    let _12: ();
    let mut _13: std::fmt::Arguments<'_>;
    let mut _14: &[&str];
    let _15: &[&str; 1];
    let _16: [&str; 1];
    let mut _17: &[core::fmt::rt::Argument<'_>];
    let _18: &[core::fmt::rt::Argument<'_>; 0];
    let _19: [core::fmt::rt::Argument<'_>; 0];
    let _20: &AddFlags;
    let _21: AddFlags;
    let _22: ();
    let _23: ();
    let _24: ();
    let mut _25: std::fmt::Arguments<'_>;
    let mut _26: &[&str];
    let _27: &[&str; 1];
    let _28: [&str; 1];
    let mut _29: &[core::fmt::rt::Argument<'_>];
    let _30: &[core::fmt::rt::Argument<'_>; 0];
    let _31: [core::fmt::rt::Argument<'_>; 0];
    let _32: &&AddFlags;
    let _33: &AddFlags;
    let _34: AddFlags;
    let _35: ();
    let _36: ();
    let _37: ();
    let mut _38: std::fmt::Arguments<'_>;
    let mut _39: &[&str];
    let _40: &[&str; 1];
    let _41: [&str; 1];
    let mut _42: &[core::fmt::rt::Argument<'_>];
    let _43: &[core::fmt::rt::Argument<'_>; 0];
    let _44: [core::fmt::rt::Argument<'_>; 0];
    let _45: Box<AddFlags>;
    let mut _46: AddFlags;
    let _47: ();
    let _48: ();
    let _49: ();
    let mut _50: std::fmt::Arguments<'_>;
    let mut _51: &[&str];
    let _52: &[&str; 1];
    let _53: [&str; 1];
    let mut _54: &[core::fmt::rt::Argument<'_>];
    let _55: &[core::fmt::rt::Argument<'_>; 0];
    let _56: [core::fmt::rt::Argument<'_>; 0];
    let _57: Box<&AddFlags>;
    let mut _58: &AddFlags;
    let _59: AddFlags;
    let _60: ();
    let _61: ();
    let _62: ();
    let mut _63: std::fmt::Arguments<'_>;
    let mut _64: &[&str];
    let _65: &[&str; 1];
    let _66: [&str; 1];
    let mut _67: &[core::fmt::rt::Argument<'_>];
    let _68: &[core::fmt::rt::Argument<'_>; 0];
    let _69: [core::fmt::rt::Argument<'_>; 0];
    let _70: Box<&AddFlags>;
    let mut _71: &AddFlags;
    let _72: AddFlags;
    let _73: ();
    let _74: ();
    let _75: ();
    let mut _76: std::fmt::Arguments<'_>;
    let mut _77: &[&str];
    let _78: &[&str; 1];
    let _79: [&str; 1];
    let mut _80: &[core::fmt::rt::Argument<'_>];
    let _81: &[core::fmt::rt::Argument<'_>; 0];
    let _82: [core::fmt::rt::Argument<'_>; 0];
    let _83: AddFlags;
    let mut _84: AddFlags;
    let _85: ();
    let _86: ();
    let _87: ();
    let mut _88: std::fmt::Arguments<'_>;
    let mut _89: &[&str];
    let _90: &[&str; 1];
    let _91: [&str; 1];
    let mut _92: &[core::fmt::rt::Argument<'_>];
    let _93: &[core::fmt::rt::Argument<'_>; 0];
    let _94: [core::fmt::rt::Argument<'_>; 0];
    let _95: &AddFlags;
    let mut _96: AddFlags;
    let _97: ();
    let _98: ();
    let _99: ();
    let mut _100: std::fmt::Arguments<'_>;
    let mut _101: &[&str];
    let _102: &[&str; 1];
    let _103: [&str; 1];
    let mut _104: &[core::fmt::rt::Argument<'_>];
    let _105: &[core::fmt::rt::Argument<'_>; 0];
    let _106: [core::fmt::rt::Argument<'_>; 0];
    let _107: &u64;
    let mut _108: AddFlags;
    let _109: ();
    let _110: ();
    let _111: ();
    let mut _112: std::fmt::Arguments<'_>;
    let mut _113: &[&str];
    let _114: &[&str; 1];
    let _115: [&str; 1];
    let mut _116: &[core::fmt::rt::Argument<'_>];
    let _117: &[core::fmt::rt::Argument<'_>; 0];
    let _118: [core::fmt::rt::Argument<'_>; 0];
    let _119: u64;
    let mut _120: &AddFlags;
    let _121: AddFlags;
    let _122: ();
    let _123: ();
    let _124: ();
    let mut _125: std::fmt::Arguments<'_>;
    let mut _126: &[&str];
    let _127: &[&str; 1];
    let _128: [&str; 1];
    let mut _129: &[core::fmt::rt::Argument<'_>];
    let _130: &[core::fmt::rt::Argument<'_>; 0];
    let _131: [core::fmt::rt::Argument<'_>; 0];
    let _132: &i32;
    let mut _133: (AddFlags, i32);
    let mut _134: AddFlags;
    let _135: ();
    let _136: ();
    let _137: ();
    let mut _138: std::fmt::Arguments<'_>;
    let mut _139: &[&str];
    let _140: &[&str; 1];
    let _141: [&str; 1];
    let mut _142: &[core::fmt::rt::Argument<'_>];
    let _143: &[core::fmt::rt::Argument<'_>; 0];
    let _144: [core::fmt::rt::Argument<'_>; 0];
    let _145: &AddFlags;
    let mut _146: std::boxed::Box<AddFlags>;
    let mut _147: AddFlags;
    let _148: ();
    let _149: ();
    let _150: ();
    let mut _151: std::fmt::Arguments<'_>;
    let mut _152: &[&str];
    let _153: &[&str; 1];
    let _154: [&str; 1];
    let mut _155: &[core::fmt::rt::Argument<'_>];
    let _156: &[core::fmt::rt::Argument<'_>; 0];
    let _157: [core::fmt::rt::Argument<'_>; 0];
    let _158: AddFlags;
    let mut _159: std::boxed::Box<AddFlags>;
    let mut _160: AddFlags;
    let _161: ();
    let _162: ();
    let _163: ();
    let mut _164: std::fmt::Arguments<'_>;
    let mut _165: &[&str];
    let _166: &[&str; 1];
    let _167: [&str; 1];
    let mut _168: &[core::fmt::rt::Argument<'_>];
    let _169: &[core::fmt::rt::Argument<'_>; 0];
    let _170: [core::fmt::rt::Argument<'_>; 0];
    let _171: ();
    let _172: AddFlags;
    let _173: ();
    let _174: ();
    let _175: ();
    let mut _176: std::fmt::Arguments<'_>;
    let mut _177: &[&str];
    let _178: &[&str; 1];
    let _179: [&str; 1];
    let mut _180: &[core::fmt::rt::Argument<'_>];
    let _181: &[core::fmt::rt::Argument<'_>; 0];
    let _182: [core::fmt::rt::Argument<'_>; 0];
    let _183: Box<AddFlags>;
    let mut _184: AddFlags;
    let _185: ();
    let _186: ();
    let _187: ();
    let mut _188: std::fmt::Arguments<'_>;
    let mut _189: &[&str];
    let _190: &[&str; 1];
    let _191: [&str; 1];
    let mut _192: &[core::fmt::rt::Argument<'_>];
    let _193: &[core::fmt::rt::Argument<'_>; 0];
    let _194: [core::fmt::rt::Argument<'_>; 0];
    let _195: [AddFlags; 1];
    let mut _196: AddFlags;
    let _197: usize;
    let mut _198: usize;
    let mut _199: bool;
    let _200: ();
    let _201: ();
    let _202: ();
    let mut _203: std::fmt::Arguments<'_>;
    let mut _204: &[&str];
    let _205: &[&str; 1];
    let _206: [&str; 1];
    let mut _207: &[core::fmt::rt::Argument<'_>];
    let _208: &[core::fmt::rt::Argument<'_>; 0];
    let _209: [core::fmt::rt::Argument<'_>; 0];
    let mut _210: AddFlags;
    let _211: ();
    let _212: ();
    let _213: ();
    let mut _214: std::fmt::Arguments<'_>;
    let mut _215: &[&str];
    let _216: &[&str; 1];
    let _217: [&str; 1];
    let mut _218: &[core::fmt::rt::Argument<'_>];
    let _219: &[core::fmt::rt::Argument<'_>; 0];
    let _220: [core::fmt::rt::Argument<'_>; 0];
    let mut _221: (AddFlags, i32);
    let mut _222: AddFlags;
    let _223: ();
    let _224: ();
    let _225: ();
    let mut _226: std::fmt::Arguments<'_>;
    let mut _227: &[&str];
    let _228: &[&str; 1];
    let _229: [&str; 1];
    let mut _230: &[core::fmt::rt::Argument<'_>];
    let _231: &[core::fmt::rt::Argument<'_>; 0];
    let _232: [core::fmt::rt::Argument<'_>; 0];
    let _233: &();
    let mut _234: ();
    let _235: &AddFlags;
    let _236: AddFlags;
    let _237: ();
    let _238: ();
    let _239: ();
    let mut _240: std::fmt::Arguments<'_>;
    let mut _241: &[&str];
    let _242: &[&str; 1];
    let _243: [&str; 1];
    let mut _244: &[core::fmt::rt::Argument<'_>];
    let _245: &[core::fmt::rt::Argument<'_>; 0];
    let _246: [core::fmt::rt::Argument<'_>; 0];
    let _247: &u64;
    let mut _248: u64;
    let mut _249: &AddFlags;
    let _250: &AddFlags;
    let mut _251: &AddFlags;
    let _252: AddFlags;
    let _253: ();
    let _254: ();
    let _255: ();
    let mut _256: std::fmt::Arguments<'_>;
    let mut _257: &[&str];
    let _258: &[&str; 1];
    let _259: [&str; 1];
    let mut _260: &[core::fmt::rt::Argument<'_>];
    let _261: &[core::fmt::rt::Argument<'_>; 0];
    let _262: [core::fmt::rt::Argument<'_>; 0];
    let _263: u64;
    let mut _264: AddFlags;
    let _265: ();
    let _266: ();
    let mut _267: &mut std::boxed::Box<AddFlags>;
    let mut _268: ();
    let mut _269: *const AddFlags;
    let mut _270: *const AddFlags;
    let mut _271: *const ();
    let mut _272: usize;
    let mut _273: usize;
    let mut _274: usize;
    let mut _275: usize;
    let mut _276: bool;
    let mut _277: *const ();
    let mut _278: usize;
    let mut _279: usize;
    let mut _280: usize;
    let mut _281: usize;
    let mut _282: bool;
    scope 1 {
        debug _x => _9;
    }
    scope 2 {
        debug _x => _20;
    }
    scope 3 {
        debug _x => _32;
    }
    scope 4 {
        debug _x => _45;
    }
    scope 5 {
        debug _x => _57;
    }
    scope 6 {
        debug _x => _70;
    }
    scope 7 {
        debug _x => _83;
    }
    scope 8 {
        debug _x => _95;
    }
    scope 9 {
        debug _x => _107;
    }
    scope 10 {
        debug bits => _119;
    }
    scope 11 {
        debug _y => _132;
    }
    scope 12 {
        debug _x => _145;
    }
    scope 13 {
        debug _x => _158;
    }
    scope 14 {
    }
    scope 15 {
    }
    scope 16 {
    }
    scope 17 {
    }
    scope 18 {
    }
    scope 19 {
        debug _x => _233;
    }
    scope 20 {
        debug _x => _247;
    }
    scope 21 {
        debug bits => _263;
    }

    bb0: {
        _5 = [const "end_of_block({ let _x = AddFlags(1) ; })\n"];
        _4 = &_5;
        _3 = _4 as &[&str] (Pointer(Unsize));
        _8 = core::fmt::rt::Argument::<'_>::none() -> bb1;
    }

    bb1: {
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_v1(move _3, move _6) -> bb2;
    }

    bb2: {
        _1 = _print(move _2) -> bb3;
    }

    bb3: {
        _9 = AddFlags(const 1_u64) -> bb4;
    }

    bb4: {
        _10 = check_flags(const 0_u64) -> [return: bb5, unwind: bb173];
    }

    bb5: {
        drop(_9) -> bb6;
    }

    bb6: {
        _11 = check_flags(const 1_u64) -> bb7;
    }

    bb7: {
        _16 = [const "end_of_block({ let _x = &AddFlags(1) ; })\n"];
        _15 = &_16;
        _14 = _15 as &[&str] (Pointer(Unsize));
        _19 = core::fmt::rt::Argument::<'_>::none() -> bb8;
    }

    bb8: {
        _18 = &_19;
        _17 = _18 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _13 = Arguments::<'_>::new_v1(move _14, move _17) -> bb9;
    }

    bb9: {
        _12 = _print(move _13) -> bb10;
    }

    bb10: {
        _21 = AddFlags(const 1_u64) -> bb11;
    }

    bb11: {
        _20 = &_21;
        _22 = check_flags(const 0_u64) -> [return: bb12, unwind: bb172];
    }

    bb12: {
        drop(_21) -> bb13;
    }

    bb13: {
        _23 = check_flags(const 1_u64) -> bb14;
    }

    bb14: {
        _28 = [const "end_of_block({ let _x = &&AddFlags(1) ; })\n"];
        _27 = &_28;
        _26 = _27 as &[&str] (Pointer(Unsize));
        _31 = core::fmt::rt::Argument::<'_>::none() -> bb15;
    }

    bb15: {
        _30 = &_31;
        _29 = _30 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _25 = Arguments::<'_>::new_v1(move _26, move _29) -> bb16;
    }

    bb16: {
        _24 = _print(move _25) -> bb17;
    }

    bb17: {
        _34 = AddFlags(const 1_u64) -> bb18;
    }

    bb18: {
        _33 = &_34;
        _32 = &_33;
        _35 = check_flags(const 0_u64) -> [return: bb19, unwind: bb171];
    }

    bb19: {
        drop(_34) -> bb20;
    }

    bb20: {
        _36 = check_flags(const 1_u64) -> bb21;
    }

    bb21: {
        _41 = [const "end_of_block({ let _x = Box { f: AddFlags(1) } ; })\n"];
        _40 = &_41;
        _39 = _40 as &[&str] (Pointer(Unsize));
        _44 = core::fmt::rt::Argument::<'_>::none() -> bb22;
    }

    bb22: {
        _43 = &_44;
        _42 = _43 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _38 = Arguments::<'_>::new_v1(move _39, move _42) -> bb23;
    }

    bb23: {
        _37 = _print(move _38) -> bb24;
    }

    bb24: {
        _46 = AddFlags(const 1_u64) -> bb25;
    }

    bb25: {
        _45 = Box::<AddFlags> { f: move _46 };
        _47 = check_flags(const 0_u64) -> [return: bb26, unwind: bb170];
    }

    bb26: {
        drop(_45) -> bb27;
    }

    bb27: {
        _48 = check_flags(const 1_u64) -> bb28;
    }

    bb28: {
        _53 = [const "end_of_block({ let _x = Box { f: &AddFlags(1) } ; })\n"];
        _52 = &_53;
        _51 = _52 as &[&str] (Pointer(Unsize));
        _56 = core::fmt::rt::Argument::<'_>::none() -> bb29;
    }

    bb29: {
        _55 = &_56;
        _54 = _55 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _50 = Arguments::<'_>::new_v1(move _51, move _54) -> bb30;
    }

    bb30: {
        _49 = _print(move _50) -> bb31;
    }

    bb31: {
        _59 = AddFlags(const 1_u64) -> bb32;
    }

    bb32: {
        _58 = &_59;
        _57 = Box::<&AddFlags> { f: move _58 };
        _60 = check_flags(const 0_u64) -> [return: bb33, unwind: bb169];
    }

    bb33: {
        drop(_59) -> bb34;
    }

    bb34: {
        _61 = check_flags(const 1_u64) -> bb35;
    }

    bb35: {
        _66 = [const "end_of_block({ let _x = Box { f: &AddFlags(1) } ; })\n"];
        _65 = &_66;
        _64 = _65 as &[&str] (Pointer(Unsize));
        _69 = core::fmt::rt::Argument::<'_>::none() -> bb36;
    }

    bb36: {
        _68 = &_69;
        _67 = _68 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _63 = Arguments::<'_>::new_v1(move _64, move _67) -> bb37;
    }

    bb37: {
        _62 = _print(move _63) -> bb38;
    }

    bb38: {
        _72 = AddFlags(const 1_u64) -> bb39;
    }

    bb39: {
        _71 = &_72;
        _70 = Box::<&AddFlags> { f: move _71 };
        _73 = check_flags(const 0_u64) -> [return: bb40, unwind: bb168];
    }

    bb40: {
        drop(_72) -> bb41;
    }

    bb41: {
        _74 = check_flags(const 1_u64) -> bb42;
    }

    bb42: {
        _79 = [const "end_of_block({ let _x = pass(AddFlags(1)) ; })\n"];
        _78 = &_79;
        _77 = _78 as &[&str] (Pointer(Unsize));
        _82 = core::fmt::rt::Argument::<'_>::none() -> bb43;
    }

    bb43: {
        _81 = &_82;
        _80 = _81 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _76 = Arguments::<'_>::new_v1(move _77, move _80) -> bb44;
    }

    bb44: {
        _75 = _print(move _76) -> bb45;
    }

    bb45: {
        _84 = AddFlags(const 1_u64) -> bb46;
    }

    bb46: {
        _83 = pass::<AddFlags>(move _84) -> bb47;
    }

    bb47: {
        _85 = check_flags(const 0_u64) -> [return: bb48, unwind: bb167];
    }

    bb48: {
        drop(_83) -> bb49;
    }

    bb49: {
        _86 = check_flags(const 1_u64) -> bb50;
    }

    bb50: {
        _91 = [const "end_of_block({ let ref _x = AddFlags(1) ; })\n"];
        _90 = &_91;
        _89 = _90 as &[&str] (Pointer(Unsize));
        _94 = core::fmt::rt::Argument::<'_>::none() -> bb51;
    }

    bb51: {
        _93 = &_94;
        _92 = _93 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _88 = Arguments::<'_>::new_v1(move _89, move _92) -> bb52;
    }

    bb52: {
        _87 = _print(move _88) -> bb53;
    }

    bb53: {
        _96 = AddFlags(const 1_u64) -> bb54;
    }

    bb54: {
        _95 = &_96;
        _97 = check_flags(const 0_u64) -> [return: bb55, unwind: bb166];
    }

    bb55: {
        drop(_96) -> bb56;
    }

    bb56: {
        _98 = check_flags(const 1_u64) -> bb57;
    }

    bb57: {
        _103 = [const "end_of_block({ let AddFlags { bits: ref _x } = AddFlags(1) ; })\n"];
        _102 = &_103;
        _101 = _102 as &[&str] (Pointer(Unsize));
        _106 = core::fmt::rt::Argument::<'_>::none() -> bb58;
    }

    bb58: {
        _105 = &_106;
        _104 = _105 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _100 = Arguments::<'_>::new_v1(move _101, move _104) -> bb59;
    }

    bb59: {
        _99 = _print(move _100) -> bb60;
    }

    bb60: {
        _108 = AddFlags(const 1_u64) -> bb61;
    }

    bb61: {
        _107 = &(_108.0: u64);
        _109 = check_flags(const 0_u64) -> [return: bb62, unwind: bb165];
    }

    bb62: {
        drop(_108) -> bb63;
    }

    bb63: {
        _110 = check_flags(const 1_u64) -> bb64;
    }

    bb64: {
        _115 = [const "end_of_block({ let &AddFlags { bits } = &AddFlags(1) ; })\n"];
        _114 = &_115;
        _113 = _114 as &[&str] (Pointer(Unsize));
        _118 = core::fmt::rt::Argument::<'_>::none() -> bb65;
    }

    bb65: {
        _117 = &_118;
        _116 = _117 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _112 = Arguments::<'_>::new_v1(move _113, move _116) -> bb66;
    }

    bb66: {
        _111 = _print(move _112) -> bb67;
    }

    bb67: {
        _121 = AddFlags(const 1_u64) -> bb68;
    }

    bb68: {
        _120 = &_121;
        _119 = ((*_120).0: u64);
        _122 = check_flags(const 0_u64) -> [return: bb69, unwind: bb164];
    }

    bb69: {
        drop(_121) -> bb70;
    }

    bb70: {
        _123 = check_flags(const 1_u64) -> bb71;
    }

    bb71: {
        _128 = [const "end_of_block({ let (_, ref _y) = (AddFlags(1), 22) ; })\n"];
        _127 = &_128;
        _126 = _127 as &[&str] (Pointer(Unsize));
        _131 = core::fmt::rt::Argument::<'_>::none() -> bb72;
    }

    bb72: {
        _130 = &_131;
        _129 = _130 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _125 = Arguments::<'_>::new_v1(move _126, move _129) -> bb73;
    }

    bb73: {
        _124 = _print(move _125) -> bb74;
    }

    bb74: {
        _134 = AddFlags(const 1_u64) -> bb75;
    }

    bb75: {
        _133 = (move _134, const 22_i32);
        _132 = &(_133.1: i32);
        _135 = check_flags(const 0_u64) -> [return: bb76, unwind: bb163];
    }

    bb76: {
        drop(_133) -> bb77;
    }

    bb77: {
        _136 = check_flags(const 1_u64) -> bb78;
    }

    bb78: {
        _141 = [const "end_of_block({ let box ref _x = std::boxed::Box::new(AddFlags(1)) ; })\n"];
        _140 = &_141;
        _139 = _140 as &[&str] (Pointer(Unsize));
        _144 = core::fmt::rt::Argument::<'_>::none() -> bb79;
    }

    bb79: {
        _143 = &_144;
        _142 = _143 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _138 = Arguments::<'_>::new_v1(move _139, move _142) -> bb80;
    }

    bb80: {
        _137 = _print(move _138) -> bb81;
    }

    bb81: {
        _147 = AddFlags(const 1_u64) -> bb82;
    }

    bb82: {
        _146 = std::boxed::Box::<AddFlags>::new(move _147) -> bb83;
    }

    bb83: {
        _269 = (((_146.0: std::ptr::Unique<AddFlags>).0: std::ptr::NonNull<AddFlags>).0: *const AddFlags);
        _277 = _269 as *const () (PtrToPtr);
        _278 = _277 as usize (Transmute);
        _279 = AlignOf(AddFlags);
        _280 = Sub(_279, const 1_usize);
        _281 = BitAnd(_278, _280);
        _282 = Eq(_281, const 0_usize);
        assert(_282, "misaligned pointer dereference: address must be a multiple of {} but is {}", _279, _278) -> [success: bb177, unwind unreachable];
    }

    bb84: {
        drop(_146) -> bb85;
    }

    bb85: {
        _149 = check_flags(const 1_u64) -> bb86;
    }

    bb86: {
        _154 = [const "end_of_block({ let box _x = std::boxed::Box::new(AddFlags(1)) ; })\n"];
        _153 = &_154;
        _152 = _153 as &[&str] (Pointer(Unsize));
        _157 = core::fmt::rt::Argument::<'_>::none() -> bb87;
    }

    bb87: {
        _156 = &_157;
        _155 = _156 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _151 = Arguments::<'_>::new_v1(move _152, move _155) -> bb88;
    }

    bb88: {
        _150 = _print(move _151) -> bb89;
    }

    bb89: {
        _160 = AddFlags(const 1_u64) -> bb90;
    }

    bb90: {
        _159 = std::boxed::Box::<AddFlags>::new(move _160) -> bb91;
    }

    bb91: {
        _270 = (((_159.0: std::ptr::Unique<AddFlags>).0: std::ptr::NonNull<AddFlags>).0: *const AddFlags);
        _271 = _270 as *const () (PtrToPtr);
        _272 = _271 as usize (Transmute);
        _273 = AlignOf(AddFlags);
        _274 = Sub(_273, const 1_usize);
        _275 = BitAnd(_272, _274);
        _276 = Eq(_275, const 0_usize);
        assert(_276, "misaligned pointer dereference: address must be a multiple of {} but is {}", _273, _272) -> [success: bb176, unwind unreachable];
    }

    bb92: {
        drop(_158) -> bb93;
    }

    bb93: {
        _162 = check_flags(const 1_u64) -> bb94;
    }

    bb94: {
        _167 = [const "end_of_block({ let _ = { { check_flags(0); &AddFlags(1) } } ; })\n"];
        _166 = &_167;
        _165 = _166 as &[&str] (Pointer(Unsize));
        _170 = core::fmt::rt::Argument::<'_>::none() -> bb95;
    }

    bb95: {
        _169 = &_170;
        _168 = _169 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _164 = Arguments::<'_>::new_v1(move _165, move _168) -> bb96;
    }

    bb96: {
        _163 = _print(move _164) -> bb97;
    }

    bb97: {
        _171 = check_flags(const 0_u64) -> bb98;
    }

    bb98: {
        _172 = AddFlags(const 1_u64) -> bb99;
    }

    bb99: {
        _173 = check_flags(const 0_u64) -> [return: bb100, unwind: bb160];
    }

    bb100: {
        drop(_172) -> bb101;
    }

    bb101: {
        _174 = check_flags(const 1_u64) -> bb102;
    }

    bb102: {
        _179 = [const "end_of_block({ let _ = &((Box { f: AddFlags(1) }).f) ; })\n"];
        _178 = &_179;
        _177 = _178 as &[&str] (Pointer(Unsize));
        _182 = core::fmt::rt::Argument::<'_>::none() -> bb103;
    }

    bb103: {
        _181 = &_182;
        _180 = _181 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _176 = Arguments::<'_>::new_v1(move _177, move _180) -> bb104;
    }

    bb104: {
        _175 = _print(move _176) -> bb105;
    }

    bb105: {
        _184 = AddFlags(const 1_u64) -> bb106;
    }

    bb106: {
        _183 = Box::<AddFlags> { f: move _184 };
        _185 = check_flags(const 0_u64) -> [return: bb107, unwind: bb159];
    }

    bb107: {
        drop(_183) -> bb108;
    }

    bb108: {
        _186 = check_flags(const 1_u64) -> bb109;
    }

    bb109: {
        _191 = [const "end_of_block({ let _ = &(([AddFlags(1)])[0]) ; })\n"];
        _190 = &_191;
        _189 = _190 as &[&str] (Pointer(Unsize));
        _194 = core::fmt::rt::Argument::<'_>::none() -> bb110;
    }

    bb110: {
        _193 = &_194;
        _192 = _193 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _188 = Arguments::<'_>::new_v1(move _189, move _192) -> bb111;
    }

    bb111: {
        _187 = _print(move _188) -> bb112;
    }

    bb112: {
        _196 = AddFlags(const 1_u64) -> bb113;
    }

    bb113: {
        _195 = [move _196];
        _197 = const 0_usize;
        _198 = const 1_usize;
        _199 = Lt(_197, _198);
        assert(move _199, "index out of bounds: the length is {} but the index is {}", move _198, _197) -> [success: bb114, unwind: bb158];
    }

    bb114: {
        _200 = check_flags(const 0_u64) -> [return: bb115, unwind: bb158];
    }

    bb115: {
        drop(_195) -> bb116;
    }

    bb116: {
        _201 = check_flags(const 1_u64) -> bb117;
    }

    bb117: {
        _206 = [const "end_of_stmt(AddFlags(1))\n"];
        _205 = &_206;
        _204 = _205 as &[&str] (Pointer(Unsize));
        _209 = core::fmt::rt::Argument::<'_>::none() -> bb118;
    }

    bb118: {
        _208 = &_209;
        _207 = _208 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _203 = Arguments::<'_>::new_v1(move _204, move _207) -> bb119;
    }

    bb119: {
        _202 = _print(move _203) -> bb120;
    }

    bb120: {
        _210 = AddFlags(const 1_u64) -> bb121;
    }

    bb121: {
        drop(_210) -> bb122;
    }

    bb122: {
        _211 = check_flags(const 1_u64) -> bb123;
    }

    bb123: {
        _212 = check_flags(const 0_u64) -> bb124;
    }

    bb124: {
        _217 = [const "end_of_stmt((AddFlags(1), 22))\n"];
        _216 = &_217;
        _215 = _216 as &[&str] (Pointer(Unsize));
        _220 = core::fmt::rt::Argument::<'_>::none() -> bb125;
    }

    bb125: {
        _219 = &_220;
        _218 = _219 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _214 = Arguments::<'_>::new_v1(move _215, move _218) -> bb126;
    }

    bb126: {
        _213 = _print(move _214) -> bb127;
    }

    bb127: {
        _222 = AddFlags(const 1_u64) -> bb128;
    }

    bb128: {
        _221 = (move _222, const 22_i32);
        drop(_221) -> bb129;
    }

    bb129: {
        _223 = check_flags(const 1_u64) -> bb130;
    }

    bb130: {
        _224 = check_flags(const 0_u64) -> bb131;
    }

    bb131: {
        _229 = [const "end_of_stmt(arg(0, &AddFlags(1)))\n"];
        _228 = &_229;
        _227 = _228 as &[&str] (Pointer(Unsize));
        _232 = core::fmt::rt::Argument::<'_>::none() -> bb132;
    }

    bb132: {
        _231 = &_232;
        _230 = _231 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _226 = Arguments::<'_>::new_v1(move _227, move _230) -> bb133;
    }

    bb133: {
        _225 = _print(move _226) -> bb134;
    }

    bb134: {
        _236 = AddFlags(const 1_u64) -> bb135;
    }

    bb135: {
        _235 = &_236;
        _234 = arg(const 0_u64, _235) -> [return: bb136, unwind: bb157];
    }

    bb136: {
        _233 = &_234;
        drop(_236) -> bb137;
    }

    bb137: {
        _237 = check_flags(const 1_u64) -> bb138;
    }

    bb138: {
        _238 = check_flags(const 0_u64) -> bb139;
    }

    bb139: {
        _243 = [const "end_of_stmt(AddFlags(1).check_flags(0).bits())\n"];
        _242 = &_243;
        _241 = _242 as &[&str] (Pointer(Unsize));
        _246 = core::fmt::rt::Argument::<'_>::none() -> bb140;
    }

    bb140: {
        _245 = &_246;
        _244 = _245 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _240 = Arguments::<'_>::new_v1(move _241, move _244) -> bb141;
    }

    bb141: {
        _239 = _print(move _240) -> bb142;
    }

    bb142: {
        _252 = AddFlags(const 1_u64) -> bb143;
    }

    bb143: {
        _251 = &_252;
        _250 = AddFlags::check_flags(move _251, const 0_u64) -> [return: bb144, unwind: bb156];
    }

    bb144: {
        _249 = _250;
        _248 = AddFlags::bits(move _249) -> [return: bb145, unwind: bb156];
    }

    bb145: {
        _247 = &_248;
        drop(_252) -> bb146;
    }

    bb146: {
        _253 = check_flags(const 1_u64) -> bb147;
    }

    bb147: {
        _254 = check_flags(const 0_u64) -> bb148;
    }

    bb148: {
        _259 = [const "end_of_stmt(AddFlags(1))\n"];
        _258 = &_259;
        _257 = _258 as &[&str] (Pointer(Unsize));
        _262 = core::fmt::rt::Argument::<'_>::none() -> bb149;
    }

    bb149: {
        _261 = &_262;
        _260 = _261 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _256 = Arguments::<'_>::new_v1(move _257, move _260) -> bb150;
    }

    bb150: {
        _255 = _print(move _256) -> bb151;
    }

    bb151: {
        _264 = AddFlags(const 1_u64) -> bb152;
    }

    bb152: {
        _263 = (_264.0: u64);
        drop(_264) -> bb153;
    }

    bb153: {
        _265 = check_flags(const 1_u64) -> bb154;
    }

    bb154: {
        _266 = check_flags(const 0_u64) -> bb155;
    }

    bb155: {
        return;
    }

    bb156 (cleanup): {
        drop(_252) -> [return: bb174, unwind terminate];
    }

    bb157 (cleanup): {
        drop(_236) -> [return: bb174, unwind terminate];
    }

    bb158 (cleanup): {
        drop(_195) -> [return: bb174, unwind terminate];
    }

    bb159 (cleanup): {
        drop(_183) -> [return: bb174, unwind terminate];
    }

    bb160 (cleanup): {
        drop(_172) -> [return: bb174, unwind terminate];
    }

    bb161 (cleanup): {
        drop(_158) -> [return: bb174, unwind terminate];
    }

    bb162 (cleanup): {
        drop(_146) -> [return: bb174, unwind terminate];
    }

    bb163 (cleanup): {
        drop(_133) -> [return: bb174, unwind terminate];
    }

    bb164 (cleanup): {
        drop(_121) -> [return: bb174, unwind terminate];
    }

    bb165 (cleanup): {
        drop(_108) -> [return: bb174, unwind terminate];
    }

    bb166 (cleanup): {
        drop(_96) -> [return: bb174, unwind terminate];
    }

    bb167 (cleanup): {
        drop(_83) -> [return: bb174, unwind terminate];
    }

    bb168 (cleanup): {
        drop(_72) -> [return: bb174, unwind terminate];
    }

    bb169 (cleanup): {
        drop(_59) -> [return: bb174, unwind terminate];
    }

    bb170 (cleanup): {
        drop(_45) -> [return: bb174, unwind terminate];
    }

    bb171 (cleanup): {
        drop(_34) -> [return: bb174, unwind terminate];
    }

    bb172 (cleanup): {
        drop(_21) -> [return: bb174, unwind terminate];
    }

    bb173 (cleanup): {
        drop(_9) -> [return: bb174, unwind terminate];
    }

    bb174 (cleanup): {
        resume;
    }

    bb175: {
        _161 = check_flags(const 0_u64) -> [return: bb92, unwind: bb161];
    }

    bb176: {
        _158 = move (*_270);
        _267 = &mut _159;
        _268 = <std::boxed::Box<AddFlags> as Drop>::drop(move _267) -> [return: bb175, unwind: bb161];
    }

    bb177: {
        _145 = &(*_269);
        _148 = check_flags(const 0_u64) -> [return: bb84, unwind: bb162];
    }
}
