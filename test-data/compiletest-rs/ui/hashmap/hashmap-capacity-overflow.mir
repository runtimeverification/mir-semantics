// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: usize;
    let mut _2: usize;
    let mut _3: bool;
    let mut _5: usize;
    let _6: std::option::Option<u64>;
    let mut _7: &mut std::collections::HashMap<u64, u64>;
    scope 1 {
        debug threshold => _1;
        let mut _4: std::collections::HashMap<u64, u64>;
        scope 2 {
            debug h => _4;
        }
    }

    bb0: {
        _2 = std::mem::size_of::<(u64, u64, u64)>() -> bb1;
    }

    bb1: {
        _3 = Eq(_2, const 0_usize);
        assert(!move _3, "attempt to divide `{}` by zero", const _) -> bb2;
    }

    bb2: {
        _1 = Div(const _, move _2);
        _5 = Add(_1, const 100_usize);
        _4 = HashMap::<u64, u64>::with_capacity(move _5) -> bb3;
    }

    bb3: {
        _7 = &mut _4;
        _6 = HashMap::<u64, u64>::insert(move _7, const 0_u64, const 0_u64) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_4) -> bb5;
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_4) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }
}
