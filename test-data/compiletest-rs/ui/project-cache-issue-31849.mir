// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/project-cache-issue-31849.rs:9:1: 9:50>::upcast(_1: (S1, S2)) -> (T1, T2) {
    debug self => _1;
    let mut _0: (T1, T2);
    let mut _2: T1;
    let mut _3: S1;
    let mut _4: T2;
    let mut _5: S2;
    let mut _6: bool;

    bb0: {
        _6 = const false;
        _6 = const true;
        _3 = move (_1.0: S1);
        _2 = <S1 as Upcast<T1>>::upcast(move _3) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _6 = const false;
        _5 = move (_1.1: S2);
        _4 = <S2 as Upcast<T2>>::upcast(move _5) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        _0 = (move _2, move _4);
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }

    bb5 (cleanup): {
        drop((_1.1: S2)) -> [return: bb4, unwind terminate];
    }

    bb6 (cleanup): {
        switchInt(_6) -> [0: bb4, otherwise: bb5];
    }
}

fn <impl at ui/project-cache-issue-31849.rs:16:1: 16:23>::upcast(_1: ()) -> () {
    debug self => const ();
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/project-cache-issue-31849.rs:26:1: 26:31>::to_static(_1: (T, U)) -> (<T as ToStatic>::Static, <U as ToStatic>::Static) {
    debug self => _1;
    let mut _0: (<T as ToStatic>::Static, <U as ToStatic>::Static);
    let mut _2: <T as ToStatic>::Static;
    let mut _3: T;
    let mut _4: <U as ToStatic>::Static;
    let mut _5: U;
    let mut _6: bool;

    bb0: {
        _6 = const false;
        _6 = const true;
        _3 = move (_1.0: T);
        _2 = <T as ToStatic>::to_static(move _3) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _6 = const false;
        _5 = move (_1.1: U);
        _4 = <U as ToStatic>::to_static(move _5) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        _0 = (move _2, move _4);
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }

    bb5 (cleanup): {
        drop((_1.1: U)) -> [return: bb4, unwind terminate];
    }

    bb6 (cleanup): {
        switchInt(_6) -> [0: bb4, otherwise: bb5];
    }
}

fn <impl at ui/project-cache-issue-31849.rs:34:1: 34:21>::to_static(_1: ()) -> () {
    debug self => const ();
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/project-cache-issue-31849.rs:46:1: 46:29>::build(_1: &(S, T)) -> (<S as Factory>::Output, <T as Factory>::Output) {
    debug self => _1;
    let mut _0: (<S as Factory>::Output, <T as Factory>::Output);
    let mut _2: <S as Factory>::Output;
    let mut _3: <<S as Factory>::Output as ToStatic>::Static;
    let mut _4: <S as Factory>::Output;
    let mut _5: &S;
    let mut _6: <T as Factory>::Output;
    let mut _7: &T;

    bb0: {
        _5 = &((*_1).0: S);
        _4 = <S as Factory>::build(move _5) -> bb1;
    }

    bb1: {
        _3 = <<S as Factory>::Output as ToStatic>::to_static(move _4) -> bb2;
    }

    bb2: {
        _2 = <<<S as Factory>::Output as ToStatic>::Static as Upcast<<S as Factory>::Output>>::upcast(move _3) -> bb3;
    }

    bb3: {
        _7 = &((*_1).1: T);
        _6 = <T as Factory>::build(move _7) -> [return: bb4, unwind: bb5];
    }

    bb4: {
        _0 = (move _2, move _6);
        return;
    }

    bb5 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn <impl at ui/project-cache-issue-31849.rs:56:1: 56:20>::build(_1: &()) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ((((((((((), ()), ()), ()), ()), ()), ()), ()), ()), ());
    let _2: ((((((((((), ()), ()), ()), ()), ()), ()), ()), ()), ());
    let mut _3: &((((((((((), ()), ()), ()), ()), ()), ()), ()), ()), ());
    scope 1 {
        debug it => const ((((((((((), ()), ()), ()), ()), ()), ()), ()), ()), ());
    }

    bb0: {
        _3 = &_1;
        _2 = <((((((((((), ()), ()), ()), ()), ()), ()), ()), ()), ()) as Factory>::build(move _3) -> bb1;
    }

    bb1: {
        return;
    }
}
