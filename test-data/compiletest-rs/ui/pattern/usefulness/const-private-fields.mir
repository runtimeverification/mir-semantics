// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn inner::<impl at ui/pattern/usefulness/const-private-fields.rs:7:14: 7:23>::eq(_1: &inner::PrivateField, _2: &inner::PrivateField) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: bool;

    bb0: {
        _4 = ((*_1).0: bool);
        _5 = ((*_2).0: bool);
        _3 = Eq(move _4, move _5);
        switchInt(move _3) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _7 = ((*_1).1: bool);
        _8 = ((*_2).1: bool);
        _6 = Eq(move _7, move _8);
        _0 = move _6;
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn inner::<impl at ui/pattern/usefulness/const-private-fields.rs:7:25: 7:27>::assert_receiver_is_total_eq(_1: &inner::PrivateField) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

const inner::FOO: inner::PrivateField = {
    let mut _0: inner::PrivateField;

    bb0: {
        _0 = inner::PrivateField { x: const true, y: const true };
        return;
    }
}

const inner::BAR: inner::PrivateField = {
    let mut _0: inner::PrivateField;

    bb0: {
        _0 = inner::PrivateField { x: const true, y: const false };
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
