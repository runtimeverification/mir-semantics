// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: &[i32];
    let mut _2: &[i32];
    let _3: &[i32; 1];
    let _4: [i32; 1];
    let mut _5: (&&[i32], &&[i32]);
    let mut _6: &&[i32];
    let mut _7: &&[i32];
    let _8: &[i32];
    let _9: &[i32; 1];
    let _10: [i32; 1];
    let mut _13: bool;
    let mut _14: bool;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _19: &str;
    let mut _20: (&&str, &&str);
    let mut _21: &&str;
    let mut _22: &&str;
    let _23: &str;
    let mut _26: bool;
    let mut _27: bool;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: &str;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: !;
    let mut _36: !;
    scope 1 {
        debug a => _1;
        let _11: &&[i32];
        let _12: &&[i32];
        let _18: &str;
        scope 2 {
            debug left_val => _11;
            debug right_val => _12;
            let _15: core::panicking::AssertKind;
            scope 3 {
                debug kind => _15;
            }
        }
        scope 4 {
            debug a => _18;
            let _24: &&str;
            let _25: &&str;
            let _35: &&str;
            scope 5 {
                debug left_val => _24;
                debug right_val => _25;
                let _28: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _28;
                }
            }
            scope 7 {
                debug _x => _35;
            }
        }
    }

    bb0: {
        _4 = [const 0_i32];
        _3 = &_4;
        _2 = _3 as &[i32] (Pointer(Unsize));
        _1 = _2;
        _6 = &_1;
        _10 = [const 0_i32];
        _9 = &_10;
        _8 = _9 as &[i32] (Pointer(Unsize));
        _7 = &_8;
        _5 = (move _6, move _7);
        _11 = (_5.0: &&[i32]);
        _12 = (_5.1: &&[i32]);
        _14 = <&[i32] as PartialEq>::eq(_11, _12) -> bb1;
    }

    bb1: {
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<&[i32], &[i32]>(move _15, _11, _12, move _17);
    }

    bb3: {
        _19 = const "hello";
        _18 = _19;
        _21 = &_18;
        _23 = const "hello";
        _22 = &_23;
        _20 = (move _21, move _22);
        _24 = (_20.0: &&str);
        _25 = (_20.1: &&str);
        _27 = <&str as PartialEq>::eq(_24, _25) -> bb4;
    }

    bb4: {
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<&str, &str>(move _28, _24, _25, move _30);
    }

    bb6: {
        _31 = const "foo";
        _32 = <str as PartialEq>::eq(_31, const "fool") -> bb7;
    }

    bb7: {
        switchInt(move _32) -> [0: bb8, otherwise: bb11];
    }

    bb8: {
        _33 = <str as PartialEq>::eq(_31, const "foo") -> bb9;
    }

    bb9: {
        switchInt(move _33) -> [0: bb10, otherwise: bb12];
    }

    bb10: {
        _35 = &_31;
        _36 = core::panicking::panic(const "internal error: entered unreachable code");
    }

    bb11: {
        _34 = core::panicking::panic(const "internal error: entered unreachable code");
    }

    bb12: {
        return;
    }
}
