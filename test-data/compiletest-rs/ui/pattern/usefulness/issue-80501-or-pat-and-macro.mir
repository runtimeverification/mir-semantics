// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn _foo(_1: ApplicationTy) -> () {
    debug ty => _1;
    let mut _0: ();
    let mut _2: isize;
    let mut _3: isize;

    bb0: {
        _2 = discriminant((_1.0: TypeCtor));
        switchInt(move _2) -> [0: bb2, 1: bb2, otherwise: bb1];
    }

    bb1: {
        unreachable;
    }

    bb2: {
        _3 = discriminant((_1.0: TypeCtor));
        switchInt(move _3) -> [0: bb3, 1: bb3, otherwise: bb1];
    }

    bb3: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn ApplicationTy(_1: TypeCtor) -> ApplicationTy {
    let mut _0: ApplicationTy;

    bb0: {
        _0 = ApplicationTy(move _1);
        return;
    }
}

// MIR FOR CTFE
fn ApplicationTy(_1: TypeCtor) -> ApplicationTy {
    let mut _0: ApplicationTy;

    bb0: {
        _0 = ApplicationTy(move _1);
        return;
    }
}
