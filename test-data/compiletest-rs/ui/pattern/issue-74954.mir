// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: std::option::Option<&[u8; 7]>;
    let mut _2: isize;
    let _4: ();
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let _7: &[&str; 2];
    let _8: [&str; 2];
    let mut _9: &[core::fmt::rt::Argument<'_>];
    let _10: &[core::fmt::rt::Argument<'_>; 1];
    let _11: [core::fmt::rt::Argument<'_>; 1];
    let mut _12: core::fmt::rt::Argument<'_>;
    let _13: &&[u8; 6];
    let mut _14: &[u8; 7];
    let mut _15: &[u8; 7];
    scope 1 {
        debug filename => _3;
        let _3: &[u8; 6];
    }

    bb0: {
        _1 = Option::<&[u8; 7]>::Some(const b"@abc123");
        _2 = discriminant(_1);
        switchInt(move _2) -> [1: bb1, otherwise: bb5];
    }

    bb1: {
        _14 = deref_copy ((_1 as Some).0: &[u8; 7]);
        switchInt((*_14)[0 of 7]) -> [64: bb2, otherwise: bb5];
    }

    bb2: {
        _15 = deref_copy ((_1 as Some).0: &[u8; 7]);
        _3 = &(*_15)[1..7];
        _8 = [const "filename ", const "\n"];
        _7 = &_8;
        _6 = _7 as &[&str] (Pointer(Unsize));
        _13 = &_3;
        _12 = core::fmt::rt::Argument::<'_>::new_debug::<&[u8; 6]>(_13) -> bb3;
    }

    bb3: {
        _11 = [move _12];
        _10 = &_11;
        _9 = _10 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _5 = Arguments::<'_>::new_v1(move _6, move _9) -> bb4;
    }

    bb4: {
        _4 = _print(move _5) -> bb5;
    }

    bb5: {
        return;
    }
}

alloc1 (size: 7, align: 1) {
    40 61 62 63 31 32 33                            â”‚ @abc123
}
