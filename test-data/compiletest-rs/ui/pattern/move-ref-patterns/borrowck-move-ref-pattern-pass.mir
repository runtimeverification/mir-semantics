// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn slice() -> () {
    let mut _0: ();
    let mut _1: [U; 8];
    scope 1 {
        debug arr => const [U, U, U, U, U, U, U, U];
        let _2: &U;
        let _3: &U;
        scope 2 {
            debug _x0 => _2;
            debug _x1 => const U;
            debug _x3 => const U;
            debug _x6 => _3;
            debug _x7 => const U;
            let _4: &mut U;
            let _5: &U;
            let _6: &mut U;
            scope 3 {
                debug _x0 => _4;
                debug _x2 => _5;
                debug _x4 => const U;
                debug _x5 => _6;
                debug _x6 => const U;
                scope 4 {
                    debug _x2 => const U;
                    debug _x5 => const U;
                    let _7: &U;
                    scope 5 {
                        debug _x0 => _7;
                        scope 6 {
                            debug _x0 => const U;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = &_1[0 of 8];
        _3 = &_1[6 of 8];
        _4 = &mut _1[0 of 8];
        _5 = &_1[2 of 8];
        _6 = &mut _1[5 of 8];
        _7 = &_1[0 of 8];
        return;
    }
}

fn tuple() -> () {
    let mut _0: ();
    let mut _1: (U, U, U, U, U);
    let _6: ();
    let _7: ();
    scope 1 {
        debug tup => const (U, U, U, U, U);
        let _2: &U;
        let _3: &U;
        scope 2 {
            debug _x0 => _2;
            debug _x1 => const U;
            debug _x2 => _3;
            let _4: &mut U;
            let _5: &U;
            scope 3 {
                debug _x0 => _4;
                debug _x3 => _5;
                debug _x4 => const U;
                scope 4 {
                    debug _x3 => const U;
                    scope 5 {
                        debug _x0 => const U;
                    }
                }
            }
        }
    }

    bb0: {
        _2 = &(_1.0: U);
        _3 = &(_1.2: U);
        _4 = &mut (_1.0: U);
        _5 = &(_1.3: U);
        _6 = std::mem::drop::<&U>(_3) -> bb1;
    }

    bb1: {
        _7 = std::mem::drop::<U>(const U) -> bb2;
    }

    bb2: {
        return;
    }
}
