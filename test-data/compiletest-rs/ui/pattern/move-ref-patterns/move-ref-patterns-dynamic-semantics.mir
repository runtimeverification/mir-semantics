// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:16:1: 16:16>::drop(_1: &mut X) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: &mut std::vec::Vec<usize>;
    let mut _4: &mut std::vec::Vec<usize>;
    let mut _5: &mut std::cell::RefMut<'_, std::vec::Vec<usize>>;
    let mut _6: std::cell::RefMut<'_, std::vec::Vec<usize>>;
    let mut _7: &std::cell::RefCell<std::vec::Vec<usize>>;
    let _8: &std::cell::RefCell<std::vec::Vec<usize>>;
    let mut _9: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<usize>>>;
    let mut _10: usize;
    let mut _11: std::boxed::Box<usize>;
    let mut _12: *const usize;
    let mut _13: *const ();
    let mut _14: usize;
    let mut _15: usize;
    let mut _16: usize;
    let mut _17: usize;
    let mut _18: bool;

    bb0: {
        _9 = &((*_1).1: std::rc::Rc<std::cell::RefCell<std::vec::Vec<usize>>>);
        _8 = <Rc<RefCell<Vec<usize>>> as Deref>::deref(move _9) -> bb1;
    }

    bb1: {
        _7 = _8;
        _6 = RefCell::<Vec<usize>>::borrow_mut(move _7) -> bb2;
    }

    bb2: {
        _5 = &mut _6;
        _4 = <RefMut<'_, Vec<usize>> as DerefMut>::deref_mut(move _5) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _3 = _4;
        _11 = deref_copy ((*_1).0: std::boxed::Box<usize>);
        _12 = (((_11.0: std::ptr::Unique<usize>).0: std::ptr::NonNull<usize>).0: *const usize);
        _13 = _12 as *const () (PtrToPtr);
        _14 = _13 as usize (Transmute);
        _15 = AlignOf(usize);
        _16 = Sub(_15, const 1_usize);
        _17 = BitAnd(_14, _16);
        _18 = Eq(_17, const 0_usize);
        assert(_18, "misaligned pointer dereference: address must be a multiple of {} but is {}", _15, _14) -> [success: bb8, unwind unreachable];
    }

    bb4: {
        drop(_6) -> bb5;
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_6) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }

    bb8: {
        _10 = (*_12);
        _2 = Vec::<usize>::push(move _3, move _10) -> [return: bb4, unwind: bb6];
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::rc::Rc<std::cell::RefCell<std::vec::Vec<usize>>>;
    let mut _3: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<usize>>>;
    let mut _6: X;
    let mut _7: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21];
    let mut _8: (usize,);
    let mut _9: X;
    let mut _10: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21];
    let mut _11: (usize,);
    let _12: ();
    let mut _13: isize;
    let mut _16: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:21: 31:45];
    let mut _17: (&X, usize, &X, usize);
    let _18: &X;
    let mut _19: !;
    let mut _21: X;
    let mut _22: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21];
    let mut _23: (usize,);
    let mut _24: X;
    let mut _25: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21];
    let mut _26: (usize,);
    let _27: ();
    let mut _28: isize;
    let mut _31: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:21: 31:45];
    let mut _32: (&X, usize, &X, usize);
    let _33: &X;
    let mut _34: !;
    let _35: ();
    let mut _36: DoubleOption<X, X>;
    let mut _37: X;
    let mut _38: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21];
    let mut _39: (usize,);
    let mut _40: X;
    let mut _41: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21];
    let mut _42: (usize,);
    let mut _43: isize;
    let mut _46: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:21: 31:45];
    let mut _47: (&X, usize, &X, usize);
    let _48: &X;
    let mut _49: !;
    let _50: ();
    let mut _51: DoubleOption<X, X>;
    let mut _52: X;
    let mut _53: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21];
    let mut _54: (usize,);
    let mut _55: X;
    let mut _56: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21];
    let mut _57: (usize,);
    let mut _58: isize;
    let mut _61: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:21: 31:45];
    let mut _62: (&X, usize, &X, usize);
    let _63: &X;
    let mut _64: !;
    let mut _67: (X, X);
    let mut _68: X;
    let mut _69: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21];
    let mut _70: (usize,);
    let mut _71: X;
    let mut _72: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21];
    let mut _73: (usize,);
    let mut _76: (X, X);
    let mut _77: X;
    let mut _78: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21];
    let mut _79: (usize,);
    let mut _80: X;
    let mut _81: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21];
    let mut _82: (usize,);
    let _83: ();
    let mut _84: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:21: 31:45];
    let mut _85: (&X, usize, &X, usize);
    let _86: &X;
    let _87: ();
    let mut _88: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:21: 31:45];
    let mut _89: (&X, usize, &X, usize);
    let _90: &X;
    let _91: ();
    let mut _92: [X; 6];
    let mut _93: X;
    let mut _94: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21];
    let mut _95: (usize,);
    let mut _96: X;
    let mut _97: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21];
    let mut _98: (usize,);
    let mut _99: X;
    let mut _100: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21];
    let mut _101: (usize,);
    let mut _102: X;
    let mut _103: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21];
    let mut _104: (usize,);
    let mut _105: X;
    let mut _106: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21];
    let mut _107: (usize,);
    let mut _108: X;
    let mut _109: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21];
    let mut _110: (usize,);
    let _112: ();
    let mut _113: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:69:19: 69:59];
    let mut _114: ((X, X, X, X),);
    let mut _115: (X, X, X, X);
    let mut _116: X;
    let mut _117: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21];
    let mut _118: (usize,);
    let mut _119: X;
    let mut _120: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21];
    let mut _121: (usize,);
    let mut _122: X;
    let mut _123: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21];
    let mut _124: (usize,);
    let mut _125: X;
    let mut _126: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21];
    let mut _127: (usize,);
    let mut _129: (&&std::vec::Vec<usize>, &&[usize; 22]);
    let mut _130: &&std::vec::Vec<usize>;
    let _131: &std::vec::Vec<usize>;
    let _132: &std::vec::Vec<usize>;
    let mut _133: &std::cell::Ref<'_, std::vec::Vec<usize>>;
    let _134: std::cell::Ref<'_, std::vec::Vec<usize>>;
    let mut _135: &std::cell::RefCell<std::vec::Vec<usize>>;
    let _136: &std::cell::RefCell<std::vec::Vec<usize>>;
    let mut _137: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<usize>>>;
    let mut _138: &&[usize; 22];
    let _139: &[usize; 22];
    let mut _142: bool;
    let mut _143: bool;
    let _145: !;
    let mut _146: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _147: isize;
    let mut _148: isize;
    let mut _149: isize;
    let mut _150: isize;
    let mut _151: isize;
    let mut _152: isize;
    let mut _153: isize;
    let mut _154: isize;
    scope 1 {
        debug d => _1;
        let _2: [closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21];
        let _128: [usize; 22];
        scope 2 {
            debug mk => _2;
            let _4: [closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:21: 31:45];
            scope 3 {
                debug check => const ZeroSized: [closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:21: 31:45];
                let _5: DoubleOption<X, X>;
                scope 4 {
                    debug x => _5;
                    let _14: &X;
                    let _15: X;
                    let _20: DoubleOption<X, X>;
                    scope 5 {
                        debug a => _14;
                        debug b => _15;
                    }
                    scope 6 {
                        debug x => _20;
                        let _29: X;
                        let _30: &X;
                        let _44: &X;
                        let _45: X;
                        let _59: X;
                        let _60: &X;
                        let _65: X;
                        let _66: &X;
                        let _111: [closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:69:19: 69:59];
                        scope 7 {
                            debug a => _29;
                            debug b => _30;
                        }
                        scope 8 {
                            debug a => _44;
                            debug b => _45;
                        }
                        scope 9 {
                            debug a => _59;
                            debug b => _60;
                        }
                        scope 10 {
                            debug a => _65;
                            debug b => _66;
                            let _74: &X;
                            let _75: X;
                            scope 11 {
                                debug c => _74;
                                debug d => _75;
                            }
                        }
                        scope 12 {
                            debug lam => const ZeroSized: [closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:69:19: 69:59];
                        }
                    }
                }
            }
        }
        scope 13 {
            debug expected => _128;
            let _140: &&std::vec::Vec<usize>;
            let _141: &&[usize; 22];
            scope 14 {
                debug left_val => _140;
                debug right_val => _141;
                let _144: core::panicking::AssertKind;
                scope 15 {
                    debug kind => _144;
                }
            }
        }
    }

    bb0: {
        _1 = <Rc<RefCell<Vec<usize>>> as Default>::default() -> bb1;
    }

    bb1: {
        _3 = &_1;
        _2 = [closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] { d: move _3 };
        _7 = &_2;
        _8 = (const 1_usize,);
        _6 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call(move _7, move _8) -> [return: bb2, unwind: bb76];
    }

    bb2: {
        _10 = &_2;
        _11 = (const 2_usize,);
        _9 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call(move _10, move _11) -> [return: bb3, unwind: bb75];
    }

    bb3: {
        _5 = DoubleOption::<X, X>::Some2(move _6, move _9);
        _13 = discriminant(_5);
        switchInt(move _13) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        _19 = begin_panic::<&str>(const "explicit panic") -> bb97;
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _14 = &((_5 as Some2).0: X);
        _15 = move ((_5 as Some2).1: X);
        _16 = &_4;
        _18 = &_15;
        _17 = (_14, const 1_usize, _18, const 2_usize);
        _12 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:21: 31:45] as Fn<(&X, usize, &X, usize)>>::call(move _16, move _17) -> [return: bb7, unwind: bb74];
    }

    bb7: {
        drop(_15) -> [return: bb8, unwind: bb97];
    }

    bb8: {
        _22 = &_2;
        _23 = (const 3_usize,);
        _21 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call(move _22, move _23) -> [return: bb9, unwind: bb97];
    }

    bb9: {
        _25 = &_2;
        _26 = (const 4_usize,);
        _24 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call(move _25, move _26) -> [return: bb10, unwind: bb73];
    }

    bb10: {
        _20 = DoubleOption::<X, X>::Some2(move _21, move _24);
        _28 = discriminant(_20);
        switchInt(move _28) -> [0: bb12, 1: bb11, otherwise: bb5];
    }

    bb11: {
        _34 = begin_panic::<&str>(const "explicit panic") -> bb95;
    }

    bb12: {
        _29 = move ((_20 as Some2).0: X);
        _30 = &((_20 as Some2).1: X);
        _31 = &_4;
        _33 = &_29;
        _32 = (_33, const 3_usize, _30, const 4_usize);
        _27 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:21: 31:45] as Fn<(&X, usize, &X, usize)>>::call(move _31, move _32) -> [return: bb13, unwind: bb72];
    }

    bb13: {
        drop(_29) -> [return: bb14, unwind: bb95];
    }

    bb14: {
        _38 = &_2;
        _39 = (const 5_usize,);
        _37 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call(move _38, move _39) -> [return: bb15, unwind: bb95];
    }

    bb15: {
        _41 = &_2;
        _42 = (const 6_usize,);
        _40 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call(move _41, move _42) -> [return: bb16, unwind: bb71];
    }

    bb16: {
        _36 = DoubleOption::<X, X>::Some2(move _37, move _40);
        _43 = discriminant(_36);
        switchInt(move _43) -> [0: bb18, 1: bb17, otherwise: bb5];
    }

    bb17: {
        _49 = begin_panic::<&str>(const "explicit panic") -> bb93;
    }

    bb18: {
        _44 = &((_36 as Some2).0: X);
        _45 = move ((_36 as Some2).1: X);
        _46 = &_4;
        _48 = &_45;
        _47 = (_44, const 5_usize, _48, const 6_usize);
        _35 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:21: 31:45] as Fn<(&X, usize, &X, usize)>>::call(move _46, move _47) -> [return: bb19, unwind: bb70];
    }

    bb19: {
        drop(_45) -> [return: bb20, unwind: bb93];
    }

    bb20: {
        _147 = discriminant(_36);
        switchInt(move _147) -> [0: bb79, otherwise: bb78];
    }

    bb21: {
        _56 = &_2;
        _57 = (const 8_usize,);
        _55 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call(move _56, move _57) -> [return: bb22, unwind: bb69];
    }

    bb22: {
        _51 = DoubleOption::<X, X>::Some2(move _52, move _55);
        _58 = discriminant(_51);
        switchInt(move _58) -> [0: bb24, 1: bb23, otherwise: bb5];
    }

    bb23: {
        _64 = begin_panic::<&str>(const "explicit panic") -> bb91;
    }

    bb24: {
        _59 = move ((_51 as Some2).0: X);
        _60 = &((_51 as Some2).1: X);
        _61 = &_4;
        _63 = &_59;
        _62 = (_63, const 7_usize, _60, const 8_usize);
        _50 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:21: 31:45] as Fn<(&X, usize, &X, usize)>>::call(move _61, move _62) -> [return: bb25, unwind: bb68];
    }

    bb25: {
        drop(_59) -> [return: bb26, unwind: bb91];
    }

    bb26: {
        _148 = discriminant(_51);
        switchInt(move _148) -> [0: bb81, otherwise: bb80];
    }

    bb27: {
        _72 = &_2;
        _73 = (const 10_usize,);
        _71 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call(move _72, move _73) -> [return: bb28, unwind: bb67];
    }

    bb28: {
        _67 = (move _68, move _71);
        _65 = move (_67.0: X);
        _66 = &(_67.1: X);
        _78 = &_2;
        _79 = (const 11_usize,);
        _77 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call(move _78, move _79) -> [return: bb29, unwind: bb66];
    }

    bb29: {
        _81 = &_2;
        _82 = (const 12_usize,);
        _80 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call(move _81, move _82) -> [return: bb30, unwind: bb65];
    }

    bb30: {
        _76 = (move _77, move _80);
        _74 = &(_76.0: X);
        _75 = move (_76.1: X);
        _84 = &_4;
        _86 = &_65;
        _85 = (_86, const 9_usize, _66, const 10_usize);
        _83 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:21: 31:45] as Fn<(&X, usize, &X, usize)>>::call(move _84, move _85) -> [return: bb31, unwind: bb64];
    }

    bb31: {
        _88 = &_4;
        _90 = &_75;
        _89 = (_74, const 11_usize, _90, const 12_usize);
        _87 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:21: 31:45] as Fn<(&X, usize, &X, usize)>>::call(move _88, move _89) -> [return: bb32, unwind: bb64];
    }

    bb32: {
        drop(_75) -> [return: bb33, unwind: bb88];
    }

    bb33: {
        drop((_76.0: X)) -> [return: bb82, unwind: bb66];
    }

    bb34: {
        drop((_67.1: X)) -> [return: bb83, unwind: bb95];
    }

    bb35: {
        _97 = &_2;
        _98 = (const 14_usize,);
        _96 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call(move _97, move _98) -> [return: bb36, unwind: bb63];
    }

    bb36: {
        _100 = &_2;
        _101 = (const 15_usize,);
        _99 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call(move _100, move _101) -> [return: bb37, unwind: bb62];
    }

    bb37: {
        _103 = &_2;
        _104 = (const 16_usize,);
        _102 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call(move _103, move _104) -> [return: bb38, unwind: bb61];
    }

    bb38: {
        _106 = &_2;
        _107 = (const 17_usize,);
        _105 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call(move _106, move _107) -> [return: bb39, unwind: bb60];
    }

    bb39: {
        _109 = &_2;
        _110 = (const 18_usize,);
        _108 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call(move _109, move _110) -> [return: bb40, unwind: bb59];
    }

    bb40: {
        _92 = [move _93, move _96, move _99, move _102, move _105, move _108];
        _91 = fun(move _92) -> [return: bb41, unwind: bb95];
    }

    bb41: {
        _113 = &_111;
        _117 = &_2;
        _118 = (const 19_usize,);
        _116 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call(move _117, move _118) -> [return: bb42, unwind: bb95];
    }

    bb42: {
        _120 = &_2;
        _121 = (const 20_usize,);
        _119 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call(move _120, move _121) -> [return: bb43, unwind: bb58];
    }

    bb43: {
        _123 = &_2;
        _124 = (const 21_usize,);
        _122 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call(move _123, move _124) -> [return: bb44, unwind: bb57];
    }

    bb44: {
        _126 = &_2;
        _127 = (const 22_usize,);
        _125 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call(move _126, move _127) -> [return: bb45, unwind: bb56];
    }

    bb45: {
        _115 = (move _116, move _119, move _122, move _125);
        _114 = (move _115,);
        _112 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:69:19: 69:59] as Fn<((X, X, X, X),)>>::call(move _113, move _114) -> [return: bb46, unwind: bb95];
    }

    bb46: {
        _149 = discriminant(_20);
        switchInt(move _149) -> [0: bb85, otherwise: bb84];
    }

    bb47: {
        _135 = _136;
        _134 = RefCell::<Vec<usize>>::borrow(move _135) -> [return: bb48, unwind: bb76];
    }

    bb48: {
        _133 = &_134;
        _132 = <Ref<'_, Vec<usize>> as Deref>::deref(move _133) -> [return: bb49, unwind: bb55];
    }

    bb49: {
        _131 = _132;
        _130 = &_131;
        _139 = &_128;
        _138 = &_139;
        _129 = (move _130, move _138);
        _140 = (_129.0: &&std::vec::Vec<usize>);
        _141 = (_129.1: &&[usize; 22]);
        _143 = <&Vec<usize> as PartialEq<&[usize; 22]>>::eq(_140, _141) -> [return: bb50, unwind: bb55];
    }

    bb50: {
        _142 = Not(move _143);
        switchInt(move _142) -> [0: bb52, otherwise: bb51];
    }

    bb51: {
        _144 = core::panicking::AssertKind::Eq;
        _146 = Option::<Arguments<'_>>::None;
        _145 = core::panicking::assert_failed::<&Vec<usize>, &[usize; 22]>(move _144, _140, _141, move _146) -> bb55;
    }

    bb52: {
        drop(_134) -> [return: bb53, unwind: bb76];
    }

    bb53: {
        drop(_1) -> bb54;
    }

    bb54: {
        return;
    }

    bb55 (cleanup): {
        drop(_134) -> [return: bb76, unwind terminate];
    }

    bb56 (cleanup): {
        drop(_122) -> [return: bb57, unwind terminate];
    }

    bb57 (cleanup): {
        drop(_119) -> [return: bb58, unwind terminate];
    }

    bb58 (cleanup): {
        drop(_116) -> [return: bb95, unwind terminate];
    }

    bb59 (cleanup): {
        drop(_105) -> [return: bb60, unwind terminate];
    }

    bb60 (cleanup): {
        drop(_102) -> [return: bb61, unwind terminate];
    }

    bb61 (cleanup): {
        drop(_99) -> [return: bb62, unwind terminate];
    }

    bb62 (cleanup): {
        drop(_96) -> [return: bb63, unwind terminate];
    }

    bb63 (cleanup): {
        drop(_93) -> [return: bb95, unwind terminate];
    }

    bb64 (cleanup): {
        drop(_75) -> [return: bb88, unwind terminate];
    }

    bb65 (cleanup): {
        drop(_77) -> [return: bb66, unwind terminate];
    }

    bb66 (cleanup): {
        drop(_65) -> [return: bb89, unwind terminate];
    }

    bb67 (cleanup): {
        drop(_68) -> [return: bb95, unwind terminate];
    }

    bb68 (cleanup): {
        drop(_59) -> [return: bb91, unwind terminate];
    }

    bb69 (cleanup): {
        drop(_52) -> [return: bb95, unwind terminate];
    }

    bb70 (cleanup): {
        drop(_45) -> [return: bb93, unwind terminate];
    }

    bb71 (cleanup): {
        drop(_37) -> [return: bb95, unwind terminate];
    }

    bb72 (cleanup): {
        drop(_29) -> [return: bb95, unwind terminate];
    }

    bb73 (cleanup): {
        drop(_21) -> [return: bb97, unwind terminate];
    }

    bb74 (cleanup): {
        drop(_15) -> [return: bb97, unwind terminate];
    }

    bb75 (cleanup): {
        drop(_6) -> [return: bb76, unwind terminate];
    }

    bb76 (cleanup): {
        drop(_1) -> [return: bb77, unwind terminate];
    }

    bb77 (cleanup): {
        resume;
    }

    bb78: {
        _53 = &_2;
        _54 = (const 7_usize,);
        _52 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call(move _53, move _54) -> [return: bb21, unwind: bb95];
    }

    bb79: {
        drop(((_36 as Some2).0: X)) -> [return: bb78, unwind: bb95];
    }

    bb80: {
        _69 = &_2;
        _70 = (const 9_usize,);
        _68 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call(move _69, move _70) -> [return: bb27, unwind: bb95];
    }

    bb81: {
        drop(((_51 as Some2).1: X)) -> [return: bb80, unwind: bb95];
    }

    bb82: {
        drop(_65) -> [return: bb34, unwind: bb89];
    }

    bb83: {
        _94 = &_2;
        _95 = (const 13_usize,);
        _93 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call(move _94, move _95) -> [return: bb35, unwind: bb95];
    }

    bb84: {
        _150 = discriminant(_5);
        switchInt(move _150) -> [0: bb87, otherwise: bb86];
    }

    bb85: {
        drop(((_20 as Some2).1: X)) -> [return: bb84, unwind: bb97];
    }

    bb86: {
        _128 = [const 2_usize, const 3_usize, const 6_usize, const 5_usize, const 7_usize, const 8_usize, const 12_usize, const 11_usize, const 9_usize, const 10_usize, const 18_usize, const 13_usize, const 14_usize, const 15_usize, const 16_usize, const 17_usize, const 21_usize, const 19_usize, const 20_usize, const 22_usize, const 4_usize, const 1_usize];
        _137 = &_1;
        _136 = <Rc<RefCell<Vec<usize>>> as Deref>::deref(move _137) -> [return: bb47, unwind: bb76];
    }

    bb87: {
        drop(((_5 as Some2).0: X)) -> [return: bb86, unwind: bb76];
    }

    bb88 (cleanup): {
        drop((_76.0: X)) -> [return: bb66, unwind terminate];
    }

    bb89 (cleanup): {
        drop((_67.1: X)) -> [return: bb95, unwind terminate];
    }

    bb90 (cleanup): {
        drop(((_51 as Some2).1: X)) -> [return: bb95, unwind terminate];
    }

    bb91 (cleanup): {
        _151 = discriminant(_51);
        switchInt(move _151) -> [0: bb90, otherwise: bb95];
    }

    bb92 (cleanup): {
        drop(((_36 as Some2).0: X)) -> [return: bb95, unwind terminate];
    }

    bb93 (cleanup): {
        _152 = discriminant(_36);
        switchInt(move _152) -> [0: bb92, otherwise: bb95];
    }

    bb94 (cleanup): {
        drop(((_20 as Some2).1: X)) -> [return: bb97, unwind terminate];
    }

    bb95 (cleanup): {
        _153 = discriminant(_20);
        switchInt(move _153) -> [0: bb94, otherwise: bb97];
    }

    bb96 (cleanup): {
        drop(((_5 as Some2).0: X)) -> [return: bb76, unwind terminate];
    }

    bb97 (cleanup): {
        _154 = discriminant(_5);
        switchInt(move _154) -> [0: bb96, otherwise: bb76];
    }
}

fn main::{closure#0}(_1: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21], _2: usize) -> X {
    debug v => _2;
    debug d => (*((*_1).0: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<usize>>>));
    let mut _0: X;
    let mut _3: std::boxed::Box<usize>;
    let mut _4: std::rc::Rc<std::cell::RefCell<std::vec::Vec<usize>>>;
    let mut _5: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<usize>>>;

    bb0: {
        _3 = Box::<usize>::new(_2) -> bb1;
    }

    bb1: {
        _5 = deref_copy ((*_1).0: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<usize>>>);
        _4 = <Rc<RefCell<Vec<usize>>> as Clone>::clone(_5) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        _0 = X { x: move _3, d: move _4 };
        return;
    }

    bb3 (cleanup): {
        drop(_3) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn main::{closure#1}(_1: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:21: 31:45], _2: &X, _3: usize, _4: &X, _5: usize) -> () {
    debug a1 => _2;
    debug a2 => _3;
    debug b1 => _4;
    debug b2 => _5;
    let mut _0: ();
    let mut _6: (&usize, &usize);
    let mut _7: &usize;
    let mut _8: &usize;
    let _9: &usize;
    let _10: &usize;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: usize;
    let mut _14: usize;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: (&usize, &usize);
    let mut _19: &usize;
    let mut _20: &usize;
    let _21: &usize;
    let _22: &usize;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: usize;
    let mut _26: usize;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _30: std::boxed::Box<usize>;
    let mut _31: std::boxed::Box<usize>;
    let mut _32: *const usize;
    let mut _33: *const usize;
    let mut _34: *const ();
    let mut _35: usize;
    let mut _36: usize;
    let mut _37: usize;
    let mut _38: usize;
    let mut _39: bool;
    let mut _40: *const ();
    let mut _41: usize;
    let mut _42: usize;
    let mut _43: usize;
    let mut _44: usize;
    let mut _45: bool;
    scope 1 {
        debug left_val => _9;
        debug right_val => _10;
        let _15: core::panicking::AssertKind;
        scope 2 {
            debug kind => _15;
        }
    }
    scope 3 {
        debug left_val => _21;
        debug right_val => _22;
        let _27: core::panicking::AssertKind;
        scope 4 {
            debug kind => _27;
        }
    }

    bb0: {
        _30 = deref_copy ((*_2).0: std::boxed::Box<usize>);
        _32 = (((_30.0: std::ptr::Unique<usize>).0: std::ptr::NonNull<usize>).0: *const usize);
        _40 = _32 as *const () (PtrToPtr);
        _41 = _40 as usize (Transmute);
        _42 = AlignOf(usize);
        _43 = Sub(_42, const 1_usize);
        _44 = BitAnd(_41, _43);
        _45 = Eq(_44, const 0_usize);
        assert(_45, "misaligned pointer dereference: address must be a multiple of {} but is {}", _42, _41) -> [success: bb6, unwind unreachable];
    }

    bb1: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<usize, usize>(move _15, _9, _10, move _17);
    }

    bb2: {
        _31 = deref_copy ((*_4).0: std::boxed::Box<usize>);
        _33 = (((_31.0: std::ptr::Unique<usize>).0: std::ptr::NonNull<usize>).0: *const usize);
        _34 = _33 as *const () (PtrToPtr);
        _35 = _34 as usize (Transmute);
        _36 = AlignOf(usize);
        _37 = Sub(_36, const 1_usize);
        _38 = BitAnd(_35, _37);
        _39 = Eq(_38, const 0_usize);
        assert(_39, "misaligned pointer dereference: address must be a multiple of {} but is {}", _36, _35) -> [success: bb5, unwind unreachable];
    }

    bb3: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<usize, usize>(move _27, _21, _22, move _29);
    }

    bb4: {
        return;
    }

    bb5: {
        _19 = &(*_33);
        _20 = &_5;
        _18 = (move _19, move _20);
        _21 = (_18.0: &usize);
        _22 = (_18.1: &usize);
        _25 = (*_21);
        _26 = (*_22);
        _24 = Eq(move _25, move _26);
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb4, otherwise: bb3];
    }

    bb6: {
        _7 = &(*_32);
        _8 = &_3;
        _6 = (move _7, move _8);
        _9 = (_6.0: &usize);
        _10 = (_6.1: &usize);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb2, otherwise: bb1];
    }
}

fn fun(_1: [X; 6]) -> () {
    let mut _0: ();
    let _2: X;
    let _3: &mut X;
    let _4: &[X; 2];
    let _5: &X;
    let _6: X;
    let mut _7: (&usize, &usize);
    let mut _8: &usize;
    let mut _9: &usize;
    let _10: usize;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: usize;
    let mut _16: usize;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _20: (&usize, &usize);
    let mut _21: &usize;
    let mut _22: &usize;
    let _23: usize;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: usize;
    let mut _29: usize;
    let _31: !;
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _33: (&&[usize; 2], &&[usize; 2]);
    let mut _34: &&[usize; 2];
    let _35: &[usize; 2];
    let _36: [usize; 2];
    let mut _37: usize;
    let _38: usize;
    let mut _39: usize;
    let mut _40: bool;
    let mut _41: usize;
    let _42: usize;
    let mut _43: usize;
    let mut _44: bool;
    let mut _45: &&[usize; 2];
    let _46: &[usize; 2];
    let _47: [usize; 2];
    let mut _50: bool;
    let mut _51: bool;
    let _53: !;
    let mut _54: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _55: (&usize, &usize);
    let mut _56: &usize;
    let mut _57: &usize;
    let _58: usize;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: usize;
    let mut _64: usize;
    let _66: !;
    let mut _67: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _68: (&usize, &usize);
    let mut _69: &usize;
    let mut _70: &usize;
    let _71: usize;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: usize;
    let mut _77: usize;
    let _79: !;
    let mut _80: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _81: std::boxed::Box<usize>;
    let mut _82: std::boxed::Box<usize>;
    let mut _83: std::boxed::Box<usize>;
    let mut _84: std::boxed::Box<usize>;
    let mut _85: std::boxed::Box<usize>;
    let mut _86: std::boxed::Box<usize>;
    let mut _87: *const usize;
    let mut _88: *const usize;
    let mut _89: *const usize;
    let mut _90: *const usize;
    let mut _91: *const usize;
    let mut _92: *const usize;
    scope 1 {
        debug a => _2;
        debug b => _3;
        debug xs => _4;
        debug c => _5;
        debug d => _6;
        let _11: &usize;
        let _12: &usize;
        let _24: &usize;
        let _25: &usize;
        let _48: &&[usize; 2];
        let _49: &&[usize; 2];
        let _59: &usize;
        let _60: &usize;
        let _72: &usize;
        let _73: &usize;
        let mut _93: *const ();
        let mut _94: usize;
        let mut _95: usize;
        let mut _96: usize;
        let mut _97: usize;
        let mut _98: bool;
        let mut _99: *const ();
        let mut _100: usize;
        let mut _101: usize;
        let mut _102: usize;
        let mut _103: usize;
        let mut _104: bool;
        let mut _105: *const ();
        let mut _106: usize;
        let mut _107: usize;
        let mut _108: usize;
        let mut _109: usize;
        let mut _110: bool;
        let mut _111: *const ();
        let mut _112: usize;
        let mut _113: usize;
        let mut _114: usize;
        let mut _115: usize;
        let mut _116: bool;
        let mut _117: *const ();
        let mut _118: usize;
        let mut _119: usize;
        let mut _120: usize;
        let mut _121: usize;
        let mut _122: bool;
        let mut _123: *const ();
        let mut _124: usize;
        let mut _125: usize;
        let mut _126: usize;
        let mut _127: usize;
        let mut _128: bool;
        scope 2 {
            debug left_val => _11;
            debug right_val => _12;
            let _17: core::panicking::AssertKind;
            scope 3 {
                debug kind => _17;
            }
        }
        scope 4 {
            debug left_val => _24;
            debug right_val => _25;
            let _30: core::panicking::AssertKind;
            scope 5 {
                debug kind => _30;
            }
        }
        scope 6 {
            debug left_val => _48;
            debug right_val => _49;
            let _52: core::panicking::AssertKind;
            scope 7 {
                debug kind => _52;
            }
        }
        scope 8 {
            debug left_val => _59;
            debug right_val => _60;
            let _65: core::panicking::AssertKind;
            scope 9 {
                debug kind => _65;
            }
        }
        scope 10 {
            debug left_val => _72;
            debug right_val => _73;
            let _78: core::panicking::AssertKind;
            scope 11 {
                debug kind => _78;
            }
        }
    }

    bb0: {
        _2 = move _1[0 of 6];
        _3 = &mut _1[1 of 6];
        _4 = &_1[2..4];
        _6 = move _1[5 of 6];
        _5 = &_1[4 of 6];
        _81 = deref_copy (_2.0: std::boxed::Box<usize>);
        _87 = (((_81.0: std::ptr::Unique<usize>).0: std::ptr::NonNull<usize>).0: *const usize);
        _123 = _87 as *const () (PtrToPtr);
        _124 = _123 as usize (Transmute);
        _125 = AlignOf(usize);
        _126 = Sub(_125, const 1_usize);
        _127 = BitAnd(_124, _126);
        _128 = Eq(_127, const 0_usize);
        assert(_128, "misaligned pointer dereference: address must be a multiple of {} but is {}", _125, _124) -> [success: bb26, unwind unreachable];
    }

    bb1: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<usize, usize>(move _17, _11, _12, move _19) -> bb16;
    }

    bb2: {
        _82 = deref_copy ((*_3).0: std::boxed::Box<usize>);
        _88 = (((_82.0: std::ptr::Unique<usize>).0: std::ptr::NonNull<usize>).0: *const usize);
        _117 = _88 as *const () (PtrToPtr);
        _118 = _117 as usize (Transmute);
        _119 = AlignOf(usize);
        _120 = Sub(_119, const 1_usize);
        _121 = BitAnd(_118, _120);
        _122 = Eq(_121, const 0_usize);
        assert(_122, "misaligned pointer dereference: address must be a multiple of {} but is {}", _119, _118) -> [success: bb25, unwind unreachable];
    }

    bb3: {
        _30 = core::panicking::AssertKind::Eq;
        _32 = Option::<Arguments<'_>>::None;
        _31 = core::panicking::assert_failed::<usize, usize>(move _30, _24, _25, move _32) -> bb16;
    }

    bb4: {
        _38 = const 0_usize;
        _39 = const 2_usize;
        _40 = Lt(_38, _39);
        assert(move _40, "index out of bounds: the length is {} but the index is {}", move _39, _38) -> [success: bb5, unwind: bb16];
    }

    bb5: {
        _83 = deref_copy ((*_4)[_38].0: std::boxed::Box<usize>);
        _89 = (((_83.0: std::ptr::Unique<usize>).0: std::ptr::NonNull<usize>).0: *const usize);
        _111 = _89 as *const () (PtrToPtr);
        _112 = _111 as usize (Transmute);
        _113 = AlignOf(usize);
        _114 = Sub(_113, const 1_usize);
        _115 = BitAnd(_112, _114);
        _116 = Eq(_115, const 0_usize);
        assert(_116, "misaligned pointer dereference: address must be a multiple of {} but is {}", _113, _112) -> [success: bb24, unwind unreachable];
    }

    bb6: {
        _84 = deref_copy ((*_4)[_42].0: std::boxed::Box<usize>);
        _90 = (((_84.0: std::ptr::Unique<usize>).0: std::ptr::NonNull<usize>).0: *const usize);
        _105 = _90 as *const () (PtrToPtr);
        _106 = _105 as usize (Transmute);
        _107 = AlignOf(usize);
        _108 = Sub(_107, const 1_usize);
        _109 = BitAnd(_106, _108);
        _110 = Eq(_109, const 0_usize);
        assert(_110, "misaligned pointer dereference: address must be a multiple of {} but is {}", _107, _106) -> [success: bb23, unwind unreachable];
    }

    bb7: {
        _50 = Not(move _51);
        switchInt(move _50) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _52 = core::panicking::AssertKind::Eq;
        _54 = Option::<Arguments<'_>>::None;
        _53 = core::panicking::assert_failed::<&[usize; 2], &[usize; 2]>(move _52, _48, _49, move _54) -> bb16;
    }

    bb9: {
        _85 = deref_copy ((*_5).0: std::boxed::Box<usize>);
        _91 = (((_85.0: std::ptr::Unique<usize>).0: std::ptr::NonNull<usize>).0: *const usize);
        _99 = _91 as *const () (PtrToPtr);
        _100 = _99 as usize (Transmute);
        _101 = AlignOf(usize);
        _102 = Sub(_101, const 1_usize);
        _103 = BitAnd(_100, _102);
        _104 = Eq(_103, const 0_usize);
        assert(_104, "misaligned pointer dereference: address must be a multiple of {} but is {}", _101, _100) -> [success: bb22, unwind unreachable];
    }

    bb10: {
        _65 = core::panicking::AssertKind::Eq;
        _67 = Option::<Arguments<'_>>::None;
        _66 = core::panicking::assert_failed::<usize, usize>(move _65, _59, _60, move _67) -> bb16;
    }

    bb11: {
        _86 = deref_copy (_6.0: std::boxed::Box<usize>);
        _92 = (((_86.0: std::ptr::Unique<usize>).0: std::ptr::NonNull<usize>).0: *const usize);
        _93 = _92 as *const () (PtrToPtr);
        _94 = _93 as usize (Transmute);
        _95 = AlignOf(usize);
        _96 = Sub(_95, const 1_usize);
        _97 = BitAnd(_94, _96);
        _98 = Eq(_97, const 0_usize);
        assert(_98, "misaligned pointer dereference: address must be a multiple of {} but is {}", _95, _94) -> [success: bb21, unwind unreachable];
    }

    bb12: {
        _78 = core::panicking::AssertKind::Eq;
        _80 = Option::<Arguments<'_>>::None;
        _79 = core::panicking::assert_failed::<usize, usize>(move _78, _72, _73, move _80) -> bb16;
    }

    bb13: {
        drop(_6) -> [return: bb14, unwind: bb17];
    }

    bb14: {
        drop(_2) -> [return: bb15, unwind: bb20];
    }

    bb15: {
        drop(_1[1..5]) -> bb19;
    }

    bb16 (cleanup): {
        drop(_6) -> [return: bb17, unwind terminate];
    }

    bb17 (cleanup): {
        drop(_2) -> [return: bb20, unwind terminate];
    }

    bb18 (cleanup): {
        resume;
    }

    bb19: {
        return;
    }

    bb20 (cleanup): {
        drop(_1[1..5]) -> [return: bb18, unwind terminate];
    }

    bb21: {
        _69 = &(*_92);
        _71 = const 18_usize;
        _70 = &_71;
        _68 = (move _69, move _70);
        _72 = (_68.0: &usize);
        _73 = (_68.1: &usize);
        _76 = (*_72);
        _77 = (*_73);
        _75 = Eq(move _76, move _77);
        _74 = Not(move _75);
        switchInt(move _74) -> [0: bb13, otherwise: bb12];
    }

    bb22: {
        _56 = &(*_91);
        _58 = const 17_usize;
        _57 = &_58;
        _55 = (move _56, move _57);
        _59 = (_55.0: &usize);
        _60 = (_55.1: &usize);
        _63 = (*_59);
        _64 = (*_60);
        _62 = Eq(move _63, move _64);
        _61 = Not(move _62);
        switchInt(move _61) -> [0: bb11, otherwise: bb10];
    }

    bb23: {
        _41 = (*_90);
        _36 = [move _37, move _41];
        _35 = &_36;
        _34 = &_35;
        _47 = [const 15_usize, const 16_usize];
        _46 = &_47;
        _45 = &_46;
        _33 = (move _34, move _45);
        _48 = (_33.0: &&[usize; 2]);
        _49 = (_33.1: &&[usize; 2]);
        _51 = <&[usize; 2] as PartialEq>::eq(_48, _49) -> [return: bb7, unwind: bb16];
    }

    bb24: {
        _37 = (*_89);
        _42 = const 1_usize;
        _43 = const 2_usize;
        _44 = Lt(_42, _43);
        assert(move _44, "index out of bounds: the length is {} but the index is {}", move _43, _42) -> [success: bb6, unwind: bb16];
    }

    bb25: {
        _21 = &(*_88);
        _23 = const 14_usize;
        _22 = &_23;
        _20 = (move _21, move _22);
        _24 = (_20.0: &usize);
        _25 = (_20.1: &usize);
        _28 = (*_24);
        _29 = (*_25);
        _27 = Eq(move _28, move _29);
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb4, otherwise: bb3];
    }

    bb26: {
        _8 = &(*_87);
        _10 = const 13_usize;
        _9 = &_10;
        _7 = (move _8, move _9);
        _11 = (_7.0: &usize);
        _12 = (_7.1: &usize);
        _15 = (*_11);
        _16 = (*_12);
        _14 = Eq(move _15, move _16);
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb2, otherwise: bb1];
    }
}

fun::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 6_usize;
        return;
    }
}

fn main::{closure#2}(_1: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:69:19: 69:59], _2: (X, X, X, X)) -> () {
    let mut _0: ();
    let _3: X;
    let _4: &X;
    let _5: X;
    let _6: &mut X;
    let mut _7: (&usize, &usize);
    let mut _8: &usize;
    let mut _9: &usize;
    let _10: usize;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: usize;
    let mut _16: usize;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _20: (&usize, &usize);
    let mut _21: &usize;
    let mut _22: &usize;
    let _23: usize;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: usize;
    let mut _29: usize;
    let _31: !;
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _33: (&usize, &usize);
    let mut _34: &usize;
    let mut _35: &usize;
    let _36: usize;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: usize;
    let mut _42: usize;
    let _44: !;
    let mut _45: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _46: (&usize, &usize);
    let mut _47: &usize;
    let mut _48: &usize;
    let _49: usize;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: usize;
    let mut _55: usize;
    let _57: !;
    let mut _58: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _59: std::boxed::Box<usize>;
    let mut _60: std::boxed::Box<usize>;
    let mut _61: std::boxed::Box<usize>;
    let mut _62: std::boxed::Box<usize>;
    let mut _63: *const usize;
    let mut _64: *const usize;
    let mut _65: *const usize;
    let mut _66: *const usize;
    scope 1 {
        debug a => _3;
        debug b => _4;
        debug c => _5;
        debug d => _6;
        let _11: &usize;
        let _12: &usize;
        let _24: &usize;
        let _25: &usize;
        let _37: &usize;
        let _38: &usize;
        let _50: &usize;
        let _51: &usize;
        let mut _67: *const ();
        let mut _68: usize;
        let mut _69: usize;
        let mut _70: usize;
        let mut _71: usize;
        let mut _72: bool;
        let mut _73: *const ();
        let mut _74: usize;
        let mut _75: usize;
        let mut _76: usize;
        let mut _77: usize;
        let mut _78: bool;
        let mut _79: *const ();
        let mut _80: usize;
        let mut _81: usize;
        let mut _82: usize;
        let mut _83: usize;
        let mut _84: bool;
        let mut _85: *const ();
        let mut _86: usize;
        let mut _87: usize;
        let mut _88: usize;
        let mut _89: usize;
        let mut _90: bool;
        scope 2 {
            debug left_val => _11;
            debug right_val => _12;
            let _17: core::panicking::AssertKind;
            scope 3 {
                debug kind => _17;
            }
        }
        scope 4 {
            debug left_val => _24;
            debug right_val => _25;
            let _30: core::panicking::AssertKind;
            scope 5 {
                debug kind => _30;
            }
        }
        scope 6 {
            debug left_val => _37;
            debug right_val => _38;
            let _43: core::panicking::AssertKind;
            scope 7 {
                debug kind => _43;
            }
        }
        scope 8 {
            debug left_val => _50;
            debug right_val => _51;
            let _56: core::panicking::AssertKind;
            scope 9 {
                debug kind => _56;
            }
        }
    }

    bb0: {
        _3 = move (_2.0: X);
        _4 = &(_2.1: X);
        _5 = move (_2.2: X);
        _6 = &mut (_2.3: X);
        _59 = deref_copy (_3.0: std::boxed::Box<usize>);
        _63 = (((_59.0: std::ptr::Unique<usize>).0: std::ptr::NonNull<usize>).0: *const usize);
        _85 = _63 as *const () (PtrToPtr);
        _86 = _85 as usize (Transmute);
        _87 = AlignOf(usize);
        _88 = Sub(_87, const 1_usize);
        _89 = BitAnd(_86, _88);
        _90 = Eq(_89, const 0_usize);
        assert(_90, "misaligned pointer dereference: address must be a multiple of {} but is {}", _87, _86) -> [success: bb22, unwind unreachable];
    }

    bb1: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<usize, usize>(move _17, _11, _12, move _19) -> bb11;
    }

    bb2: {
        _60 = deref_copy ((*_4).0: std::boxed::Box<usize>);
        _64 = (((_60.0: std::ptr::Unique<usize>).0: std::ptr::NonNull<usize>).0: *const usize);
        _79 = _64 as *const () (PtrToPtr);
        _80 = _79 as usize (Transmute);
        _81 = AlignOf(usize);
        _82 = Sub(_81, const 1_usize);
        _83 = BitAnd(_80, _82);
        _84 = Eq(_83, const 0_usize);
        assert(_84, "misaligned pointer dereference: address must be a multiple of {} but is {}", _81, _80) -> [success: bb21, unwind unreachable];
    }

    bb3: {
        _30 = core::panicking::AssertKind::Eq;
        _32 = Option::<Arguments<'_>>::None;
        _31 = core::panicking::assert_failed::<usize, usize>(move _30, _24, _25, move _32) -> bb11;
    }

    bb4: {
        _61 = deref_copy (_5.0: std::boxed::Box<usize>);
        _65 = (((_61.0: std::ptr::Unique<usize>).0: std::ptr::NonNull<usize>).0: *const usize);
        _73 = _65 as *const () (PtrToPtr);
        _74 = _73 as usize (Transmute);
        _75 = AlignOf(usize);
        _76 = Sub(_75, const 1_usize);
        _77 = BitAnd(_74, _76);
        _78 = Eq(_77, const 0_usize);
        assert(_78, "misaligned pointer dereference: address must be a multiple of {} but is {}", _75, _74) -> [success: bb20, unwind unreachable];
    }

    bb5: {
        _43 = core::panicking::AssertKind::Eq;
        _45 = Option::<Arguments<'_>>::None;
        _44 = core::panicking::assert_failed::<usize, usize>(move _43, _37, _38, move _45) -> bb11;
    }

    bb6: {
        _62 = deref_copy ((*_6).0: std::boxed::Box<usize>);
        _66 = (((_62.0: std::ptr::Unique<usize>).0: std::ptr::NonNull<usize>).0: *const usize);
        _67 = _66 as *const () (PtrToPtr);
        _68 = _67 as usize (Transmute);
        _69 = AlignOf(usize);
        _70 = Sub(_69, const 1_usize);
        _71 = BitAnd(_68, _70);
        _72 = Eq(_71, const 0_usize);
        assert(_72, "misaligned pointer dereference: address must be a multiple of {} but is {}", _69, _68) -> [success: bb19, unwind unreachable];
    }

    bb7: {
        _56 = core::panicking::AssertKind::Eq;
        _58 = Option::<Arguments<'_>>::None;
        _57 = core::panicking::assert_failed::<usize, usize>(move _56, _50, _51, move _58) -> bb11;
    }

    bb8: {
        drop(_5) -> [return: bb9, unwind: bb12];
    }

    bb9: {
        drop(_3) -> [return: bb10, unwind: bb18];
    }

    bb10: {
        drop((_2.1: X)) -> [return: bb16, unwind: bb15];
    }

    bb11 (cleanup): {
        drop(_5) -> [return: bb12, unwind terminate];
    }

    bb12 (cleanup): {
        drop(_3) -> [return: bb18, unwind terminate];
    }

    bb13 (cleanup): {
        resume;
    }

    bb14: {
        return;
    }

    bb15 (cleanup): {
        drop((_2.3: X)) -> [return: bb13, unwind terminate];
    }

    bb16: {
        drop((_2.3: X)) -> bb14;
    }

    bb17 (cleanup): {
        drop((_2.3: X)) -> [return: bb13, unwind terminate];
    }

    bb18 (cleanup): {
        drop((_2.1: X)) -> [return: bb17, unwind terminate];
    }

    bb19: {
        _47 = &(*_66);
        _49 = const 22_usize;
        _48 = &_49;
        _46 = (move _47, move _48);
        _50 = (_46.0: &usize);
        _51 = (_46.1: &usize);
        _54 = (*_50);
        _55 = (*_51);
        _53 = Eq(move _54, move _55);
        _52 = Not(move _53);
        switchInt(move _52) -> [0: bb8, otherwise: bb7];
    }

    bb20: {
        _34 = &(*_65);
        _36 = const 21_usize;
        _35 = &_36;
        _33 = (move _34, move _35);
        _37 = (_33.0: &usize);
        _38 = (_33.1: &usize);
        _41 = (*_37);
        _42 = (*_38);
        _40 = Eq(move _41, move _42);
        _39 = Not(move _40);
        switchInt(move _39) -> [0: bb6, otherwise: bb5];
    }

    bb21: {
        _21 = &(*_64);
        _23 = const 20_usize;
        _22 = &_23;
        _20 = (move _21, move _22);
        _24 = (_20.0: &usize);
        _25 = (_20.1: &usize);
        _28 = (*_24);
        _29 = (*_25);
        _27 = Eq(move _28, move _29);
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb4, otherwise: bb3];
    }

    bb22: {
        _8 = &(*_63);
        _10 = const 19_usize;
        _9 = &_10;
        _7 = (move _8, move _9);
        _11 = (_7.0: &usize);
        _12 = (_7.1: &usize);
        _15 = (*_11);
        _16 = (*_12);
        _14 = Eq(move _15, move _16);
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb2, otherwise: bb1];
    }
}

fn DoubleOption::Some2(_1: T, _2: U) -> DoubleOption<T, U> {
    let mut _0: DoubleOption<T, U>;

    bb0: {
        _0 = DoubleOption::<T, U>::Some2(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn DoubleOption::Some2(_1: T, _2: U) -> DoubleOption<T, U> {
    let mut _0: DoubleOption<T, U>;

    bb0: {
        _0 = DoubleOption::<T, U>::Some2(move _1, move _2);
        return;
    }
}
