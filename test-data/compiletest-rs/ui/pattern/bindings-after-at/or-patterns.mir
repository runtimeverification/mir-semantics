// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/pattern/bindings-after-at/or-patterns.rs:6:10: 6:15>::fmt(_1: &MatchArm, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &usize;
    let _5: &str;
    let mut _6: &dyn std::fmt::Debug;
    let _7: &&usize;
    let _8: &str;
    scope 1 {
        debug __self_0 => _4;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _8 = const "Wild";
        _0 = Formatter::<'_>::write_str(_2, _8) -> bb4;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as Arm).0: usize);
        _5 = const "Arm";
        _7 = &_4;
        _6 = _7 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _5, move _6) -> bb4;
    }

    bb4: {
        return;
    }
}

fn <impl at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26>::eq(_1: &MatchArm, _2: &MatchArm) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: (&MatchArm, &MatchArm);
    let mut _8: isize;
    let mut _9: isize;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: &MatchArm;
    let mut _15: &MatchArm;
    let mut _16: &MatchArm;
    let mut _17: &MatchArm;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
            let _10: &usize;
            let _11: &usize;
            scope 3 {
                debug __self_0 => _10;
                debug __arg1_0 => _11;
            }
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _5 = Eq(_3, _4);
        switchInt(move _5) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _7 = (_1, _2);
        _14 = deref_copy (_7.0: &MatchArm);
        _9 = discriminant((*_14));
        switchInt(move _9) -> [0: bb4, otherwise: bb5];
    }

    bb3: {
        return;
    }

    bb4: {
        _15 = deref_copy (_7.1: &MatchArm);
        _8 = discriminant((*_15));
        switchInt(move _8) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _6 = const true;
        goto -> bb7;
    }

    bb6: {
        _16 = deref_copy (_7.0: &MatchArm);
        _10 = &(((*_16) as Arm).0: usize);
        _17 = deref_copy (_7.1: &MatchArm);
        _11 = &(((*_17) as Arm).0: usize);
        _12 = (*_10);
        _13 = (*_11);
        _6 = Eq(move _12, move _13);
        goto -> bb7;
    }

    bb7: {
        _0 = move _6;
        goto -> bb3;
    }
}

fn <impl at ui/pattern/bindings-after-at/or-patterns.rs:12:10: 12:15>::fmt(_1: &Test, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: &str;
    let mut _4: isize;
    let _5: &str;
    let _6: &str;
    let _7: &str;
    let _8: &str;

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb5, 3: bb1, otherwise: bb2];
    }

    bb1: {
        _8 = const "Qux";
        _3 = _8;
        goto -> bb6;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = const "Foo";
        _3 = _5;
        goto -> bb6;
    }

    bb4: {
        _6 = const "Bar";
        _3 = _6;
        goto -> bb6;
    }

    bb5: {
        _7 = const "Baz";
        _3 = _7;
        goto -> bb6;
    }

    bb6: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> bb7;
    }

    bb7: {
        return;
    }
}

fn <impl at ui/pattern/bindings-after-at/or-patterns.rs:12:17: 12:22>::clone(_1: &Test) -> Test {
    debug self => _1;
    let mut _0: Test;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn <impl at ui/pattern/bindings-after-at/or-patterns.rs:12:30: 12:39>::eq(_1: &Test, _2: &Test) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _0 = Eq(_3, _4);
        return;
    }
}

fn test(_1: Option<Test>) -> MatchArm {
    debug foo => _1;
    let mut _0: MatchArm;
    let mut _2: isize;
    let mut _3: isize;
    let _4: std::option::Option<Test>;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: &std::option::Option<Test>;
    let mut _9: &std::option::Option<Test>;
    let _10: std::option::Option<Test>;
    let mut _11: Test;
    let mut _12: bool;
    let mut _13: &std::option::Option<Test>;
    let mut _14: &std::option::Option<Test>;
    let _15: std::option::Option<Test>;
    let mut _16: Test;
    let mut _17: !;
    scope 1 {
        debug bar => _4;
    }

    bb0: {
        _3 = discriminant(_1);
        switchInt(move _3) -> [1: bb2, otherwise: bb1];
    }

    bb1: {
        _0 = MatchArm::Wild;
        goto -> bb14;
    }

    bb2: {
        _2 = discriminant(((_1 as Some).0: Test));
        switchInt(move _2) -> [0: bb4, 1: bb5, otherwise: bb13];
    }

    bb3: {
        _8 = &_4;
        _11 = Test::Foo;
        _10 = Option::<Test>::Some(move _11);
        _9 = &_10;
        _7 = <Option<Test> as PartialEq>::eq(move _8, move _9) -> bb9;
    }

    bb4: {
        _4 = _1;
        goto -> bb3;
    }

    bb5: {
        _4 = _1;
        goto -> bb3;
    }

    bb6: {
        _6 = const true;
        goto -> bb8;
    }

    bb7: {
        _13 = &_4;
        _16 = Test::Bar;
        _15 = Option::<Test>::Some(move _16);
        _14 = &_15;
        _12 = <Option<Test> as PartialEq>::eq(move _13, move _14) -> bb10;
    }

    bb8: {
        _5 = Not(move _6);
        switchInt(move _5) -> [0: bb12, otherwise: bb11];
    }

    bb9: {
        switchInt(move _7) -> [0: bb7, otherwise: bb6];
    }

    bb10: {
        _6 = move _12;
        goto -> bb8;
    }

    bb11: {
        _17 = core::panicking::panic(const "assertion failed: bar == Some(Test::Foo) || bar == Some(Test::Bar)");
    }

    bb12: {
        _0 = MatchArm::Arm(const 0_usize);
        goto -> bb14;
    }

    bb13: {
        _0 = MatchArm::Arm(const 1_usize);
        goto -> bb14;
    }

    bb14: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&MatchArm, &MatchArm);
    let mut _2: &MatchArm;
    let _3: MatchArm;
    let mut _4: std::option::Option<Test>;
    let mut _5: Test;
    let mut _6: &MatchArm;
    let _7: MatchArm;
    let _8: &MatchArm;
    let _9: &MatchArm;
    let mut _10: bool;
    let mut _11: bool;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&MatchArm, &MatchArm);
    let mut _16: &MatchArm;
    let _17: MatchArm;
    let mut _18: std::option::Option<Test>;
    let mut _19: Test;
    let mut _20: &MatchArm;
    let _21: MatchArm;
    let _22: &MatchArm;
    let _23: &MatchArm;
    let mut _24: bool;
    let mut _25: bool;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: (&MatchArm, &MatchArm);
    let mut _30: &MatchArm;
    let _31: MatchArm;
    let mut _32: std::option::Option<Test>;
    let mut _33: Test;
    let mut _34: &MatchArm;
    let _35: MatchArm;
    let _36: &MatchArm;
    let _37: &MatchArm;
    let mut _38: bool;
    let mut _39: bool;
    let _41: !;
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _43: (&MatchArm, &MatchArm);
    let mut _44: &MatchArm;
    let _45: MatchArm;
    let mut _46: std::option::Option<Test>;
    let mut _47: Test;
    let mut _48: &MatchArm;
    let _49: MatchArm;
    let _50: &MatchArm;
    let _51: &MatchArm;
    let mut _52: bool;
    let mut _53: bool;
    let _55: !;
    let mut _56: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _57: (&MatchArm, &MatchArm);
    let mut _58: &MatchArm;
    let _59: MatchArm;
    let mut _60: std::option::Option<Test>;
    let mut _61: &MatchArm;
    let _62: MatchArm;
    let _63: &MatchArm;
    let _64: &MatchArm;
    let mut _65: bool;
    let mut _66: bool;
    let _68: !;
    let mut _69: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _8;
        debug right_val => _9;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }
    scope 3 {
        debug left_val => _22;
        debug right_val => _23;
        let _26: core::panicking::AssertKind;
        scope 4 {
            debug kind => _26;
        }
    }
    scope 5 {
        debug left_val => _36;
        debug right_val => _37;
        let _40: core::panicking::AssertKind;
        scope 6 {
            debug kind => _40;
        }
    }
    scope 7 {
        debug left_val => _50;
        debug right_val => _51;
        let _54: core::panicking::AssertKind;
        scope 8 {
            debug kind => _54;
        }
    }
    scope 9 {
        debug left_val => _63;
        debug right_val => _64;
        let _67: core::panicking::AssertKind;
        scope 10 {
            debug kind => _67;
        }
    }

    bb0: {
        _5 = Test::Foo;
        _4 = Option::<Test>::Some(move _5);
        _3 = test(move _4) -> bb1;
    }

    bb1: {
        _2 = &_3;
        _7 = MatchArm::Arm(const 0_usize);
        _6 = &_7;
        _1 = (move _2, move _6);
        _8 = (_1.0: &MatchArm);
        _9 = (_1.1: &MatchArm);
        _11 = <MatchArm as PartialEq>::eq(_8, _9) -> bb2;
    }

    bb2: {
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _12, _8, _9, move _14);
    }

    bb4: {
        _19 = Test::Bar;
        _18 = Option::<Test>::Some(move _19);
        _17 = test(move _18) -> bb5;
    }

    bb5: {
        _16 = &_17;
        _21 = MatchArm::Arm(const 0_usize);
        _20 = &_21;
        _15 = (move _16, move _20);
        _22 = (_15.0: &MatchArm);
        _23 = (_15.1: &MatchArm);
        _25 = <MatchArm as PartialEq>::eq(_22, _23) -> bb6;
    }

    bb6: {
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _26, _22, _23, move _28);
    }

    bb8: {
        _33 = Test::Baz;
        _32 = Option::<Test>::Some(move _33);
        _31 = test(move _32) -> bb9;
    }

    bb9: {
        _30 = &_31;
        _35 = MatchArm::Arm(const 1_usize);
        _34 = &_35;
        _29 = (move _30, move _34);
        _36 = (_29.0: &MatchArm);
        _37 = (_29.1: &MatchArm);
        _39 = <MatchArm as PartialEq>::eq(_36, _37) -> bb10;
    }

    bb10: {
        _38 = Not(move _39);
        switchInt(move _38) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _40 = core::panicking::AssertKind::Eq;
        _42 = Option::<Arguments<'_>>::None;
        _41 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _40, _36, _37, move _42);
    }

    bb12: {
        _47 = Test::Qux;
        _46 = Option::<Test>::Some(move _47);
        _45 = test(move _46) -> bb13;
    }

    bb13: {
        _44 = &_45;
        _49 = MatchArm::Arm(const 1_usize);
        _48 = &_49;
        _43 = (move _44, move _48);
        _50 = (_43.0: &MatchArm);
        _51 = (_43.1: &MatchArm);
        _53 = <MatchArm as PartialEq>::eq(_50, _51) -> bb14;
    }

    bb14: {
        _52 = Not(move _53);
        switchInt(move _52) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _54 = core::panicking::AssertKind::Eq;
        _56 = Option::<Arguments<'_>>::None;
        _55 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _54, _50, _51, move _56);
    }

    bb16: {
        _60 = Option::<Test>::None;
        _59 = test(move _60) -> bb17;
    }

    bb17: {
        _58 = &_59;
        _62 = MatchArm::Wild;
        _61 = &_62;
        _57 = (move _58, move _61);
        _63 = (_57.0: &MatchArm);
        _64 = (_57.1: &MatchArm);
        _66 = <MatchArm as PartialEq>::eq(_63, _64) -> bb18;
    }

    bb18: {
        _65 = Not(move _66);
        switchInt(move _65) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _67 = core::panicking::AssertKind::Eq;
        _69 = Option::<Arguments<'_>>::None;
        _68 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _67, _63, _64, move _69);
    }

    bb20: {
        return;
    }
}

fn MatchArm::Arm(_1: usize) -> MatchArm {
    let mut _0: MatchArm;

    bb0: {
        _0 = MatchArm::Arm(move _1);
        return;
    }
}

// MIR FOR CTFE
fn MatchArm::Arm(_1: usize) -> MatchArm {
    let mut _0: MatchArm;

    bb0: {
        _0 = MatchArm::Arm(move _1);
        return;
    }
}
