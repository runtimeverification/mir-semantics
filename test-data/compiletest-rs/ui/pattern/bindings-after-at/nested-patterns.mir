// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: A;
    let _2: &A;
    let _3: &u8;
    let mut _4: (&u8, &u8);
    let mut _5: &u8;
    let mut _6: &u8;
    let _7: u8;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: u8;
    let mut _13: u8;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&u8, &u8);
    let mut _18: &u8;
    let _19: u8;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: u8;
    let mut _25: u8;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let _29: &u8;
    let mut _30: !;
    scope 1 {
        debug x => _2;
        debug a => _3;
        let _8: &u8;
        let _9: &u8;
        let _20: &u8;
        let _21: &u8;
        scope 2 {
            debug left_val => _8;
            debug right_val => _9;
            let _14: core::panicking::AssertKind;
            scope 3 {
                debug kind => _14;
            }
        }
        scope 4 {
            debug left_val => _20;
            debug right_val => _21;
            let _26: core::panicking::AssertKind;
            scope 5 {
                debug kind => _26;
            }
        }
    }
    scope 6 {
        debug _b => _29;
    }

    bb0: {
        _1 = A { a: const 10_u8, b: const 20_u8 };
        switchInt((_1.1: u8)) -> [20: bb2, otherwise: bb1];
    }

    bb1: {
        _29 = &(_1.1: u8);
        _30 = begin_panic::<&str>(const "explicit panic");
    }

    bb2: {
        _3 = &(_1.0: u8);
        _2 = &_1;
        _5 = &((*_2).0: u8);
        _7 = const 10_u8;
        _6 = &_7;
        _4 = (move _5, move _6);
        _8 = (_4.0: &u8);
        _9 = (_4.1: &u8);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<u8, u8>(move _14, _8, _9, move _16);
    }

    bb4: {
        _19 = const 10_u8;
        _18 = &_19;
        _17 = (_3, move _18);
        _20 = (_17.0: &u8);
        _21 = (_17.1: &u8);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<u8, u8>(move _26, _20, _21, move _28);
    }

    bb6: {
        return;
    }
}
