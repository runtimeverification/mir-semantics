// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/pattern/bindings-after-at/borrowck-pat-by-copy-bindings-in-at.rs:7:16: 7:21>::clone(_1: &C) -> C {
    debug self => _1;
    let mut _0: C;

    bb0: {
        return;
    }
}

fn mk_c() -> C {
    let mut _0: C;

    bb0: {
        return;
    }
}

fn <impl at ui/pattern/bindings-after-at/borrowck-pat-by-copy-bindings-in-at.rs:12:16: 12:21>::clone(_1: &P<A, B>) -> P<A, B> {
    debug self => _1;
    let mut _0: P<A, B>;
    let mut _2: A;
    let _3: &A;
    let mut _4: B;
    let _5: &B;

    bb0: {
        _3 = &((*_1).0: A);
        _2 = <A as Clone>::clone(_3) -> bb1;
    }

    bb1: {
        _5 = &((*_1).1: B);
        _4 = <B as Clone>::clone(_5) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        _0 = P::<A, B>(move _2, move _4);
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: C;
    let mut _2: C;
    let mut _3: C;
    let mut _4: C;
    let mut _5: &(C, C);
    let _6: (C, C);
    let mut _7: &(C, &P<C, C>);
    let _8: (C, &P<C, C>);
    let mut _9: C;
    let mut _10: &P<C, C>;
    let _11: P<C, C>;
    let mut _12: E<C, C>;
    let mut _13: isize;
    let _14: ();
    let _15: ();
    let mut _16: E<E<&C, &C>, &E<&C, &C>>;
    let mut _17: &E<&C, &C>;
    let _18: E<&C, &C>;
    let mut _19: &C;
    let _20: C;
    let mut _21: isize;
    let mut _22: isize;
    let mut _23: isize;
    let _24: ();
    let _25: ();
    let mut _26: std::result::Result<C, C>;
    let mut _27: C;
    let mut _28: isize;
    let mut _30: &E<&C, &C>;
    scope 1 {
        debug a => const C;
        debug b => const C;
        debug c => const C;
        debug d => const C;
        scope 2 {
            debug a => const (C, C);
            debug b => const C;
            debug c => const C;
            scope 3 {
                debug a => const P::<C, P<C, C>>(C, P::<C, C>(C, C));
                debug b => const C;
                debug c => const C;
                debug d => const C;
                scope 4 {
                    debug a => const [C, C];
                    debug b => const C;
                    debug c => const C;
                    scope 5 {
                        debug a => const [C, C, C];
                        debug b => const C;
                        debug c => const C;
                        scope 6 {
                            debug a => const [C, C, C];
                            debug b => const C;
                            debug mid => const [C];
                            debug c => const C;
                            scope 7 {
                                debug a => _5;
                                debug b => const C;
                                debug c => const C;
                                scope 8 {
                                    debug a => _7;
                                    debug b => const C;
                                    debug c => const C;
                                    debug d => const C;
                                    let _29: &C;
                                    scope 9 {
                                        debug a => const C;
                                        scope 10 {
                                            debug a => const C;
                                        }
                                    }
                                    scope 11 {
                                        debug a => const C;
                                        scope 12 {
                                            debug a => const C;
                                        }
                                    }
                                    scope 13 {
                                        debug a => _29;
                                        debug b => const C;
                                        scope 14 {
                                            scope 15 {
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = mk_c() -> bb1;
    }

    bb1: {
        _2 = mk_c() -> bb2;
    }

    bb2: {
        _3 = mk_c() -> bb3;
    }

    bb3: {
        _4 = mk_c() -> bb4;
    }

    bb4: {
        _5 = &_6;
        _9 = mk_c() -> bb5;
    }

    bb5: {
        _10 = &_11;
        _8 = (const C, move _10);
        _7 = &_8;
        _12 = E::<C, C>::L(const C);
        _13 = discriminant(_12);
        switchInt(move _13) -> [0: bb7, 1: bb7, otherwise: bb6];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _14 = std::mem::drop::<C>(const C) -> bb8;
    }

    bb8: {
        _15 = std::mem::drop::<C>(const C) -> bb9;
    }

    bb9: {
        _20 = mk_c() -> bb10;
    }

    bb10: {
        _19 = &_20;
        _18 = E::<&C, &C>::L(move _19);
        _17 = &_18;
        _16 = E::<E<&C, &C>, &E<&C, &C>>::R(move _17);
        _23 = discriminant(_16);
        switchInt(move _23) -> [0: bb11, 1: bb12, otherwise: bb6];
    }

    bb11: {
        _21 = discriminant(((_16 as L).0: E<&C, &C>));
        switchInt(move _21) -> [0: bb13, 1: bb13, otherwise: bb6];
    }

    bb12: {
        _30 = deref_copy ((_16 as R).0: &E<&C, &C>);
        _22 = discriminant((*_30));
        switchInt(move _22) -> [0: bb13, 1: bb13, otherwise: bb6];
    }

    bb13: {
        _24 = std::mem::drop::<C>(const C) -> bb14;
    }

    bb14: {
        _25 = std::mem::drop::<C>(const C) -> bb15;
    }

    bb15: {
        _27 = mk_c() -> bb16;
    }

    bb16: {
        _26 = Result::<C, C>::Ok(const C);
        _28 = discriminant(_26);
        switchInt(move _28) -> [0: bb19, 1: bb17, otherwise: bb6];
    }

    bb17: {
        _29 = &((_26 as Err).0: C);
        goto -> bb18;
    }

    bb18: {
        return;
    }

    bb19: {
        _29 = &((_26 as Ok).0: C);
        goto -> bb18;
    }
}

fn foo(_1: [C; 3]) -> () {
    let mut _0: ();
    scope 1 {
        debug a => const [C, C, C];
        debug b => const C;
        debug mid => const [C];
        debug c => const C;
    }

    bb0: {
        return;
    }
}

foo::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

fn P(_1: A, _2: B) -> P<A, B> {
    let mut _0: P<A, B>;

    bb0: {
        _0 = P::<A, B>(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn P(_1: A, _2: B) -> P<A, B> {
    let mut _0: P<A, B>;

    bb0: {
        _0 = P::<A, B>(move _1, move _2);
        return;
    }
}

fn E::L(_1: A) -> E<A, B> {
    let mut _0: E<A, B>;

    bb0: {
        _0 = E::<A, B>::L(move _1);
        return;
    }
}

// MIR FOR CTFE
fn E::L(_1: A) -> E<A, B> {
    let mut _0: E<A, B>;

    bb0: {
        _0 = E::<A, B>::L(move _1);
        return;
    }
}

fn E::R(_1: B) -> E<A, B> {
    let mut _0: E<A, B>;

    bb0: {
        _0 = E::<A, B>::R(move _1);
        return;
    }
}

// MIR FOR CTFE
fn E::R(_1: B) -> E<A, B> {
    let mut _0: E<A, B>;

    bb0: {
        _0 = E::<A, B>::R(move _1);
        return;
    }
}
