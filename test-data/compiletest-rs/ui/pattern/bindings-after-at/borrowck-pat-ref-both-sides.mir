// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: &main::U;
    let _2: &main::U;
    let mut _3: main::U;
    let mut _6: main::U;
    let mut _11: (main::U, [main::U; 2]);
    let mut _12: main::U;
    let mut _13: main::U;
    let mut _14: main::U;
    let mut _18: &(main::U, [main::U; 2]);
    let _19: (main::U, [main::U; 2]);
    let mut _20: main::U;
    let mut _21: main::U;
    let mut _22: main::U;
    let mut _25: &main::U;
    let _26: main::U;
    let mut _27: std::result::Result<main::U, main::U>;
    let mut _28: main::U;
    let mut _29: isize;
    scope 1 {
        debug a => _1;
        debug b => _2;
        scope 2 {
            scope 3 {
                let _4: &main::U;
                let _5: &main::U;
                scope 4 {
                    debug a => _4;
                    debug b => _5;
                    scope 5 {
                        scope 6 {
                            let _7: &(main::U, [main::U; 2]);
                            let _8: &main::U;
                            let _9: &main::U;
                            let _10: &main::U;
                            scope 7 {
                                debug a => _7;
                                debug b => _8;
                                debug c => _9;
                                debug d => _10;
                                scope 8 {
                                    scope 9 {
                                        scope 10 {
                                            scope 11 {
                                                let _15: &main::U;
                                                let _16: &main::U;
                                                let _17: &main::U;
                                                scope 12 {
                                                    debug a => _18;
                                                    debug b => _15;
                                                    debug c => _16;
                                                    debug d => _17;
                                                    scope 13 {
                                                        scope 14 {
                                                            scope 15 {
                                                                scope 16 {
                                                                    let _23: &&main::U;
                                                                    let _24: &main::U;
                                                                    scope 17 {
                                                                        debug a => _23;
                                                                        debug b => _24;
                                                                        scope 18 {
                                                                            scope 19 {
                                                                                let _30: &std::result::Result<main::U, main::U>;
                                                                                let _31: &main::U;
                                                                                scope 20 {
                                                                                    debug a => _30;
                                                                                    debug b => _31;
                                                                                    scope 21 {
                                                                                        scope 22 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = &_3;
        _1 = &_3;
        _6 = u() -> bb1;
    }

    bb1: {
        _5 = &_6;
        _4 = &_6;
        _12 = u() -> bb2;
    }

    bb2: {
        _13 = u() -> bb3;
    }

    bb3: {
        _14 = u() -> bb4;
    }

    bb4: {
        _9 = &(_11.1: [main::U; 2])[0 of 2];
        _10 = &(_11.1: [main::U; 2])[1 of 2];
        _8 = &(_11.0: main::U);
        _7 = &_11;
        _20 = u() -> bb5;
    }

    bb5: {
        _21 = u() -> bb6;
    }

    bb6: {
        _22 = u() -> bb7;
    }

    bb7: {
        _18 = &_19;
        _16 = &((*_18).1: [main::U; 2])[0 of 2];
        _17 = &((*_18).1: [main::U; 2])[1 of 2];
        _15 = &((*_18).0: main::U);
        _26 = u() -> bb8;
    }

    bb8: {
        _25 = &_26;
        _24 = _25;
        _23 = &_25;
        _28 = u() -> bb9;
    }

    bb9: {
        _27 = Result::<U, U>::Ok(const U);
        _29 = discriminant(_27);
        switchInt(move _29) -> [0: bb13, 1: bb10, otherwise: bb11];
    }

    bb10: {
        _30 = &_27;
        _31 = &((_27 as Err).0: main::U);
        goto -> bb12;
    }

    bb11: {
        unreachable;
    }

    bb12: {
        return;
    }

    bb13: {
        _30 = &_27;
        _31 = &((_27 as Ok).0: main::U);
        goto -> bb12;
    }
}

fn u() -> U {
    let mut _0: main::U;

    bb0: {
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

fn f1(_1: (U, [U; 4])) -> () {
    let mut _0: ();
    let _2: &(main::U, [main::U; 4]);
    let _3: &main::U;
    let _4: &main::U;
    let _5: &[main::U; 2];
    let _6: &main::U;
    scope 1 {
        debug a => _2;
        debug b => _3;
        debug c => _4;
        debug mid => _5;
        debug d => _6;
    }

    bb0: {
        _4 = &(_1.1: [main::U; 4])[0 of 4];
        _5 = &(_1.1: [main::U; 4])[1..3];
        _6 = &(_1.1: [main::U; 4])[3 of 4];
        _3 = &(_1.0: main::U);
        _2 = &_1;
        return;
    }
}

f1::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}
