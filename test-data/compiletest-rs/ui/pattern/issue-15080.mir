// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: &[i32];
    let _2: &[i32; 4];
    let _3: [i32; 4];
    let mut _5: &[i32];
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: bool;
    let _17: ();
    let mut _18: &mut std::vec::Vec<i32>;
    let _21: ();
    let mut _22: &mut std::vec::Vec<i32>;
    let mut _23: (&std::vec::Vec<i32>, &[i32; 2]);
    let mut _24: &std::vec::Vec<i32>;
    let mut _25: &[i32; 2];
    let _26: [i32; 2];
    let mut _29: bool;
    let mut _30: bool;
    let _32: !;
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let mut _4: std::vec::Vec<i32>;
        scope 2 {
            debug result => _4;
            let _15: i32;
            let _16: &[i32];
            let _19: i32;
            let _20: &[i32];
            let _27: &std::vec::Vec<i32>;
            let _28: &[i32; 2];
            scope 3 {
                debug n => _15;
                debug rest => _16;
            }
            scope 4 {
                debug n => _19;
                debug rest => _20;
            }
            scope 5 {
                debug left_val => _27;
                debug right_val => _28;
                let _31: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _31;
                }
            }
        }
    }

    bb0: {
        _3 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32];
        _2 = &_3;
        _1 = _2 as &[i32] (Pointer(Unsize));
        _4 = Vec::<i32>::new() -> bb1;
    }

    bb1: {
        _12 = Len((*_1));
        _13 = const 3_usize;
        _14 = Ge(move _12, move _13);
        switchInt(move _14) -> [0: bb4, otherwise: bb2];
    }

    bb2: {
        switchInt((*_1)[0 of 3]) -> [1: bb3, otherwise: bb4];
    }

    bb3: {
        switchInt((*_1)[2 of 3]) -> [3: bb8, otherwise: bb4];
    }

    bb4: {
        _9 = Len((*_1));
        _10 = const 1_usize;
        _11 = Ge(move _9, move _10);
        switchInt(move _11) -> [0: bb5, otherwise: bb10];
    }

    bb5: {
        _6 = Len((*_1));
        _7 = const 0_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _24 = &_4;
        _26 = [const 2_i32, const 4_i32];
        _25 = &_26;
        _23 = (move _24, move _25);
        _27 = (_23.0: &std::vec::Vec<i32>);
        _28 = (_23.1: &[i32; 2]);
        _30 = <Vec<i32> as PartialEq<[i32; 2]>>::eq(_27, _28) -> [return: bb13, unwind: bb17];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        _15 = (*_1)[1 of 3];
        _16 = &(*_1)[3:];
        _18 = &mut _4;
        _17 = Vec::<i32>::push(move _18, _15) -> [return: bb9, unwind: bb17];
    }

    bb9: {
        _5 = _16;
        goto -> bb12;
    }

    bb10: {
        _19 = (*_1)[0 of 1];
        _20 = &(*_1)[1:];
        _22 = &mut _4;
        _21 = Vec::<i32>::push(move _22, _19) -> [return: bb11, unwind: bb17];
    }

    bb11: {
        _5 = _20;
        goto -> bb12;
    }

    bb12: {
        _1 = move _5;
        goto -> bb1;
    }

    bb13: {
        _29 = Not(move _30);
        switchInt(move _29) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _31 = core::panicking::AssertKind::Eq;
        _33 = Option::<Arguments<'_>>::None;
        _32 = core::panicking::assert_failed::<Vec<i32>, [i32; 2]>(move _31, _27, _28, move _33) -> bb17;
    }

    bb15: {
        drop(_4) -> bb16;
    }

    bb16: {
        return;
    }

    bb17 (cleanup): {
        drop(_4) -> [return: bb18, unwind terminate];
    }

    bb18 (cleanup): {
        resume;
    }
}
