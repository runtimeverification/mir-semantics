// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn mka() -> A {
    let mut _0: A;
    let mut _1: !;

    bb0: {
        _1 = begin_panic::<&str>(const "explicit panic");
    }
}

fn mkb() -> B {
    let mut _0: B;
    let mut _1: !;

    bb0: {
        _1 = begin_panic::<&str>(const "explicit panic");
    }
}

fn test() -> () {
    let mut _0: ();
    let _1: isize;
    let mut _2: A;
    let mut _4: A;
    let mut _8: B;
    let mut _9: A;
    let mut _11: std::option::Option<A>;
    let mut _12: A;
    let mut _13: isize;
    scope 1 {
        debug foo => _1;
        let _3: isize;
        scope 2 {
            debug foo => _3;
            let _5: isize;
            let _6: isize;
            let _7: isize;
            scope 3 {
                debug a => _5;
                debug b => _6;
                debug c => _7;
                let _10: isize;
                let _14: isize;
                scope 4 {
                    debug _foo => _10;
                }
                scope 5 {
                    debug _foo => _14;
                }
            }
        }
    }

    bb0: {
        _2 = mka() -> bb1;
    }

    bb1: {
        _1 = (_2.0: isize);
        _4 = mka() -> bb2;
    }

    bb2: {
        _3 = (_4.0: isize);
        _8 = mkb() -> bb3;
    }

    bb3: {
        _5 = (_8.0: isize);
        _6 = (_8.1: isize);
        _7 = (_8.2: isize);
        _9 = mka() -> bb4;
    }

    bb4: {
        _10 = (_9.0: isize);
        _12 = mka() -> bb5;
    }

    bb5: {
        _11 = Option::<A>::Some(move _12);
        _13 = discriminant(_11);
        switchInt(move _13) -> [0: bb8, 1: bb7, otherwise: bb6];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _14 = (((_11 as Some).0: A).0: isize);
        goto -> bb8;
    }

    bb8: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: bool;

    bb0: {
        _1 = const false;
        switchInt(move _1) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _0 = test() -> bb2;
    }

    bb2: {
        return;
    }
}
