// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: Foo;
    let mut _3: (&isize, &isize);
    let mut _4: &isize;
    let mut _5: &isize;
    let _6: isize;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: isize;
    let mut _12: isize;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: (&isize, &isize);
    let mut _19: &isize;
    let mut _20: &isize;
    let _21: isize;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: isize;
    let mut _27: isize;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug vbar => _1;
        let _2: isize;
        scope 2 {
            debug num => _2;
            let _7: &isize;
            let _8: &isize;
            let _16: SBar;
            scope 3 {
                debug left_val => _7;
                debug right_val => _8;
                let _13: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _13;
                }
            }
            scope 5 {
                debug sbar => _16;
                let _17: isize;
                scope 6 {
                    debug num => _17;
                    let _22: &isize;
                    let _23: &isize;
                    scope 7 {
                        debug left_val => _22;
                        debug right_val => _23;
                        let _28: core::panicking::AssertKind;
                        scope 8 {
                            debug kind => _28;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = Foo::VBar { num: const 1_isize };
        _2 = ((_1 as VBar).0: isize);
        _4 = &_2;
        _6 = const 1_isize;
        _5 = &_6;
        _3 = (move _4, move _5);
        _7 = (_3.0: &isize);
        _8 = (_3.1: &isize);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<isize, isize>(move _13, _7, _8, move _15);
    }

    bb2: {
        _16 = SBar { num: const 2_isize };
        _17 = (_16.0: isize);
        _19 = &_17;
        _21 = const 2_isize;
        _20 = &_21;
        _18 = (move _19, move _20);
        _22 = (_18.0: &isize);
        _23 = (_18.1: &isize);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<isize, isize>(move _28, _22, _23, move _30);
    }

    bb4: {
        return;
    }
}
