// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: Foo;
    let mut _2: isize;
    let mut _3: !;
    let mut _4: bool;
    let mut _5: !;
    let mut _6: bool;
    let mut _7: !;
    let _8: isize;
    let mut _9: !;
    let mut _10: Foo;
    let mut _11: isize;
    let mut _12: bool;
    let mut _13: !;
    let mut _14: bool;
    let mut _15: !;
    let _16: isize;
    let mut _17: !;
    let mut _18: !;
    let mut _19: Foo;
    let mut _20: isize;
    let mut _21: !;
    let mut _22: bool;
    let mut _23: !;
    let mut _24: bool;
    let mut _25: !;
    let _26: isize;
    let mut _27: (&isize, &isize);
    let mut _28: &isize;
    let mut _29: &isize;
    let _30: isize;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: isize;
    let mut _36: isize;
    let _38: !;
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _40: !;
    let mut _41: Other;
    let mut _42: Foo;
    let mut _43: isize;
    let mut _44: isize;
    let mut _45: isize;
    scope 1 {
        debug _n => _8;
    }
    scope 2 {
        debug _n => _16;
    }
    scope 3 {
        debug n => _26;
        let _31: &isize;
        let _32: &isize;
        scope 4 {
            debug left_val => _31;
            debug right_val => _32;
            let _37: core::panicking::AssertKind;
            scope 5 {
                debug kind => _37;
            }
        }
    }

    bb0: {
        _1 = Foo::Baz;
        _2 = discriminant(_1);
        switchInt(move _2) -> [0: bb1, 1: bb2, otherwise: bb3];
    }

    bb1: {
        switchInt(((_1 as Bar).0: isize)) -> [3: bb4, otherwise: bb5];
    }

    bb2: {
        _10 = Foo::Bar(const 3_isize);
        _11 = discriminant(_10);
        switchInt(move _11) -> [0: bb10, 1: bb11, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _3 = begin_panic::<&str>(const "explicit panic");
    }

    bb5: {
        _4 = const false;
        switchInt(move _4) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _5 = begin_panic::<&str>(const "explicit panic");
    }

    bb7: {
        _6 = const false;
        switchInt(move _6) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _7 = begin_panic::<&str>(const "explicit panic");
    }

    bb9: {
        _8 = ((_1 as Bar).0: isize);
        _9 = begin_panic::<&str>(const "explicit panic");
    }

    bb10: {
        switchInt(((_10 as Bar).0: isize)) -> [3: bb12, otherwise: bb13];
    }

    bb11: {
        _18 = begin_panic::<&str>(const "explicit panic");
    }

    bb12: {
        _19 = Foo::Bar(const 4_isize);
        _20 = discriminant(_19);
        switchInt(move _20) -> [0: bb18, 1: bb19, otherwise: bb3];
    }

    bb13: {
        _12 = const false;
        switchInt(move _12) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _13 = begin_panic::<&str>(const "explicit panic");
    }

    bb15: {
        _14 = const false;
        switchInt(move _14) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _15 = begin_panic::<&str>(const "explicit panic");
    }

    bb17: {
        _16 = ((_10 as Bar).0: isize);
        _17 = begin_panic::<&str>(const "explicit panic");
    }

    bb18: {
        switchInt(((_19 as Bar).0: isize)) -> [3: bb20, otherwise: bb21];
    }

    bb19: {
        _40 = begin_panic::<&str>(const "explicit panic");
    }

    bb20: {
        _21 = begin_panic::<&str>(const "explicit panic");
    }

    bb21: {
        _22 = const false;
        switchInt(move _22) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        _23 = begin_panic::<&str>(const "explicit panic");
    }

    bb23: {
        _24 = const false;
        switchInt(move _24) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _25 = begin_panic::<&str>(const "explicit panic");
    }

    bb25: {
        _26 = ((_19 as Bar).0: isize);
        _28 = &_26;
        _30 = const 4_isize;
        _29 = &_30;
        _27 = (move _28, move _29);
        _31 = (_27.0: &isize);
        _32 = (_27.1: &isize);
        _35 = (*_31);
        _36 = (*_32);
        _34 = Eq(move _35, move _36);
        _33 = Not(move _34);
        switchInt(move _33) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _37 = core::panicking::AssertKind::Eq;
        _39 = Option::<Arguments<'_>>::None;
        _38 = core::panicking::assert_failed::<isize, isize>(move _37, _31, _32, move _39);
    }

    bb27: {
        _42 = Foo::Baz;
        _41 = Other::Other1(move _42);
        _45 = discriminant(_41);
        switchInt(move _45) -> [0: bb28, 1: bb29, otherwise: bb3];
    }

    bb28: {
        _43 = discriminant(((_41 as Other1).0: Foo));
        switchInt(move _43) -> [0: bb30, 1: bb30, otherwise: bb3];
    }

    bb29: {
        _44 = discriminant(((_41 as Other2).0: Foo));
        switchInt(move _44) -> [0: bb30, 1: bb30, otherwise: bb3];
    }

    bb30: {
        return;
    }
}

fn Foo::Bar(_1: isize) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::Bar(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo::Bar(_1: isize) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::Bar(move _1);
        return;
    }
}

fn Other::Other1(_1: Foo) -> Other {
    let mut _0: Other;

    bb0: {
        _0 = Other::Other1(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Other::Other1(_1: Foo) -> Other {
    let mut _0: Other;

    bb0: {
        _0 = Other::Other1(move _1);
        return;
    }
}

fn Other::Other2(_1: Foo, _2: Foo) -> Other {
    let mut _0: Other;

    bb0: {
        _0 = Other::Other2(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn Other::Other2(_1: Foo, _2: Foo) -> Other {
    let mut _0: Other;

    bb0: {
        _0 = Other::Other2(move _1, move _2);
        return;
    }
}
