// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _3: (&i32, &i32);
    let mut _4: &i32;
    let _5: i32;
    let mut _6: &i32;
    let _7: i32;
    let mut _8: (i32, i32);
    let mut _9: bool;
    let mut _10: bool;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: i32;
    let mut _16: i32;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _20: (&i32, &i32);
    let mut _21: &i32;
    let _22: i32;
    let mut _23: &i32;
    let _24: i32;
    let mut _25: ((i32, i32),);
    let mut _26: (i32, i32);
    let mut _27: bool;
    let mut _28: bool;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: i32;
    let mut _34: i32;
    let _36: !;
    let mut _37: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _2: i32;
        scope 2 {
            debug y => _2;
            let _11: &i32;
            let _12: &i32;
            let _29: &i32;
            let _30: &i32;
            scope 3 {
                debug left_val => _11;
                debug right_val => _12;
                let _17: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _17;
                }
            }
            scope 5 {
                debug left_val => _29;
                debug right_val => _30;
                let _35: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _35;
                }
            }
        }
    }

    bb0: {
        _1 = const 1_i32;
        _2 = const 2_i32;
        _5 = const 3_i32;
        _4 = &_5;
        _8 = (_1, _2);
        switchInt((_8.0: i32)) -> [1: bb1, 2: bb3, otherwise: bb2];
    }

    bb1: {
        switchInt((_8.1: i32)) -> [1: bb7, otherwise: bb2];
    }

    bb2: {
        _9 = Le(const 1_i32, (_8.0: i32));
        switchInt(move _9) -> [0: bb6, otherwise: bb4];
    }

    bb3: {
        switchInt((_8.1: i32)) -> [2: bb8, otherwise: bb2];
    }

    bb4: {
        _10 = Le((_8.0: i32), const 2_i32);
        switchInt(move _10) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        switchInt((_8.1: i32)) -> [2: bb9, otherwise: bb6];
    }

    bb6: {
        _7 = const 4_i32;
        goto -> bb10;
    }

    bb7: {
        _7 = const 1_i32;
        goto -> bb10;
    }

    bb8: {
        _7 = const 2_i32;
        goto -> bb10;
    }

    bb9: {
        _7 = const 3_i32;
        goto -> bb10;
    }

    bb10: {
        _6 = &_7;
        _3 = (move _4, move _6);
        _11 = (_3.0: &i32);
        _12 = (_3.1: &i32);
        _15 = (*_11);
        _16 = (*_12);
        _14 = Eq(move _15, move _16);
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<i32, i32>(move _17, _11, _12, move _19);
    }

    bb12: {
        _22 = const 3_i32;
        _21 = &_22;
        _26 = (_1, _2);
        _25 = (move _26,);
        switchInt(((_25.0: (i32, i32)).0: i32)) -> [1: bb13, 2: bb15, otherwise: bb14];
    }

    bb13: {
        switchInt(((_25.0: (i32, i32)).1: i32)) -> [1: bb19, otherwise: bb14];
    }

    bb14: {
        _27 = Le(const 1_i32, ((_25.0: (i32, i32)).0: i32));
        switchInt(move _27) -> [0: bb18, otherwise: bb16];
    }

    bb15: {
        switchInt(((_25.0: (i32, i32)).1: i32)) -> [2: bb20, otherwise: bb14];
    }

    bb16: {
        _28 = Le(((_25.0: (i32, i32)).0: i32), const 2_i32);
        switchInt(move _28) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        switchInt(((_25.0: (i32, i32)).1: i32)) -> [2: bb21, otherwise: bb18];
    }

    bb18: {
        _24 = const 4_i32;
        goto -> bb22;
    }

    bb19: {
        _24 = const 1_i32;
        goto -> bb22;
    }

    bb20: {
        _24 = const 2_i32;
        goto -> bb22;
    }

    bb21: {
        _24 = const 3_i32;
        goto -> bb22;
    }

    bb22: {
        _23 = &_24;
        _20 = (move _21, move _23);
        _29 = (_20.0: &i32);
        _30 = (_20.1: &i32);
        _33 = (*_29);
        _34 = (*_30);
        _32 = Eq(move _33, move _34);
        _31 = Not(move _32);
        switchInt(move _31) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _35 = core::panicking::AssertKind::Eq;
        _37 = Option::<Arguments<'_>>::None;
        _36 = core::panicking::assert_failed::<i32, i32>(move _35, _29, _30, move _37);
    }

    bb24: {
        return;
    }
}
