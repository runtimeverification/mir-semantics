// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let _4: &[&str; 1];
    let _5: [&str; 1];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 0];
    let _8: [core::fmt::rt::Argument<'_>; 0];
    let mut _9: (&i32, &i32);
    let mut _10: &i32;
    let _11: i32;
    let mut _12: &i32;
    let _13: i32;
    let _14: &i32;
    let _15: &i32;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: i32;
    let mut _19: i32;
    let _21: !;
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _23: (&i32, &i32);
    let mut _24: &i32;
    let _25: i32;
    let mut _26: &i32;
    let _27: i32;
    let _28: &i32;
    let _29: &i32;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: i32;
    let mut _33: i32;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _37: (&i32, &i32);
    let mut _38: &i32;
    let _39: i32;
    let mut _40: &i32;
    let _41: i32;
    let _42: &i32;
    let _43: &i32;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: i32;
    let mut _47: i32;
    let _49: !;
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>;
    let _51: i32;
    let mut _52: (&i32, &i32);
    let mut _53: &i32;
    let _54: i32;
    let mut _55: &i32;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: i32;
    let mut _61: i32;
    let _63: !;
    let mut _64: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _65: (&&str, &&str);
    let mut _66: &&str;
    let _67: &str;
    let mut _68: &&str;
    let _69: &str;
    let mut _72: bool;
    let mut _73: bool;
    let _75: !;
    let mut _76: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _77: (&i32, &i32);
    let mut _78: &i32;
    let _79: i32;
    let mut _80: &i32;
    let _81: i32;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: i32;
    let mut _87: i32;
    let _89: !;
    let mut _90: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _91: (&i32, &i32);
    let mut _92: &i32;
    let _93: i32;
    let mut _94: &i32;
    let _95: i32;
    let mut _98: bool;
    let mut _99: bool;
    let mut _100: i32;
    let mut _101: i32;
    let _103: !;
    let mut _104: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _14;
        debug right_val => _15;
        let _20: core::panicking::AssertKind;
        scope 2 {
            debug kind => _20;
        }
    }
    scope 3 {
        debug left_val => _28;
        debug right_val => _29;
        let _34: core::panicking::AssertKind;
        scope 4 {
            debug kind => _34;
        }
    }
    scope 5 {
        debug left_val => _42;
        debug right_val => _43;
        let _48: core::panicking::AssertKind;
        scope 6 {
            debug kind => _48;
        }
    }
    scope 7 {
        debug match => _51;
        let _56: &i32;
        let _57: &i32;
        let _70: &&str;
        let _71: &&str;
        let _82: &i32;
        let _83: &i32;
        let _96: &i32;
        let _97: &i32;
        scope 8 {
            debug left_val => _56;
            debug right_val => _57;
            let _62: core::panicking::AssertKind;
            scope 9 {
                debug kind => _62;
            }
        }
        scope 10 {
            debug left_val => _70;
            debug right_val => _71;
            let _74: core::panicking::AssertKind;
            scope 11 {
                debug kind => _74;
            }
        }
        scope 12 {
            debug left_val => _82;
            debug right_val => _83;
            let _88: core::panicking::AssertKind;
            scope 13 {
                debug kind => _88;
            }
        }
        scope 14 {
            debug left_val => _96;
            debug right_val => _97;
            let _102: core::panicking::AssertKind;
            scope 15 {
                debug kind => _102;
            }
        }
    }

    bb0: {
        _5 = [const "1\n"];
        _4 = &_5;
        _3 = _4 as &[&str] (Pointer(Unsize));
        _8 = core::fmt::rt::Argument::<'_>::none() -> bb1;
    }

    bb1: {
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_v1(move _3, move _6) -> bb2;
    }

    bb2: {
        _1 = _print(move _2) -> bb3;
    }

    bb3: {
        _11 = const 2_i32;
        _10 = &_11;
        _13 = const 2_i32;
        _12 = &_13;
        _9 = (move _10, move _12);
        _14 = (_9.0: &i32);
        _15 = (_9.1: &i32);
        _18 = (*_14);
        _19 = (*_15);
        _17 = Eq(move _18, move _19);
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _20 = core::panicking::AssertKind::Eq;
        _22 = Option::<Arguments<'_>>::None;
        _21 = core::panicking::assert_failed::<i32, i32>(move _20, _14, _15, move _22);
    }

    bb5: {
        _25 = const 3_i32;
        _24 = &_25;
        _27 = const 3_i32;
        _26 = &_27;
        _23 = (move _24, move _26);
        _28 = (_23.0: &i32);
        _29 = (_23.1: &i32);
        _32 = (*_28);
        _33 = (*_29);
        _31 = Eq(move _32, move _33);
        _30 = Not(move _31);
        switchInt(move _30) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = core::panicking::assert_failed::<i32, i32>(move _34, _28, _29, move _36);
    }

    bb7: {
        _39 = const 4_i32;
        _38 = &_39;
        _41 = const 4_i32;
        _40 = &_41;
        _37 = (move _38, move _40);
        _42 = (_37.0: &i32);
        _43 = (_37.1: &i32);
        _46 = (*_42);
        _47 = (*_43);
        _45 = Eq(move _46, move _47);
        _44 = Not(move _45);
        switchInt(move _44) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _48 = core::panicking::AssertKind::Eq;
        _50 = Option::<Arguments<'_>>::None;
        _49 = core::panicking::assert_failed::<i32, i32>(move _48, _42, _43, move _50);
    }

    bb9: {
        _51 = const 5_i32;
        _54 = const 5_i32;
        _53 = &_54;
        _55 = &_51;
        _52 = (move _53, move _55);
        _56 = (_52.0: &i32);
        _57 = (_52.1: &i32);
        _60 = (*_56);
        _61 = (*_57);
        _59 = Eq(move _60, move _61);
        _58 = Not(move _59);
        switchInt(move _58) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _62 = core::panicking::AssertKind::Eq;
        _64 = Option::<Arguments<'_>>::None;
        _63 = core::panicking::assert_failed::<i32, i32>(move _62, _56, _57, move _64);
    }

    bb11: {
        _67 = const "r#struct";
        _66 = &_67;
        _69 = const "r#struct";
        _68 = &_69;
        _65 = (move _66, move _68);
        _70 = (_65.0: &&str);
        _71 = (_65.1: &&str);
        _73 = <&str as PartialEq>::eq(_70, _71) -> bb12;
    }

    bb12: {
        _72 = Not(move _73);
        switchInt(move _72) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _74 = core::panicking::AssertKind::Eq;
        _76 = Option::<Arguments<'_>>::None;
        _75 = core::panicking::assert_failed::<&str, &str>(move _74, _70, _71, move _76);
    }

    bb14: {
        _79 = const 6_i32;
        _78 = &_79;
        _81 = const 6_i32;
        _80 = &_81;
        _77 = (move _78, move _80);
        _82 = (_77.0: &i32);
        _83 = (_77.1: &i32);
        _86 = (*_82);
        _87 = (*_83);
        _85 = Eq(move _86, move _87);
        _84 = Not(move _85);
        switchInt(move _84) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _88 = core::panicking::AssertKind::Eq;
        _90 = Option::<Arguments<'_>>::None;
        _89 = core::panicking::assert_failed::<i32, i32>(move _88, _82, _83, move _90);
    }

    bb16: {
        _93 = const 7_i32;
        _92 = &_93;
        _95 = const 7_i32;
        _94 = &_95;
        _91 = (move _92, move _94);
        _96 = (_91.0: &i32);
        _97 = (_91.1: &i32);
        _100 = (*_96);
        _101 = (*_97);
        _99 = Eq(move _100, move _101);
        _98 = Not(move _99);
        switchInt(move _98) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _102 = core::panicking::AssertKind::Eq;
        _104 = Option::<Arguments<'_>>::None;
        _103 = core::panicking::assert_failed::<i32, i32>(move _102, _96, _97, move _104);
    }

    bb18: {
        return;
    }
}
