// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn r#fn(_1: u32) -> u32 {
    debug match => _1;
    let mut _0: u32;

    bb0: {
        _0 = _1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _2: (&i32, &i32);
    let mut _3: &i32;
    let _4: i32;
    let mut _5: &i32;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: i32;
    let mut _11: i32;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&i32, &i32);
    let mut _17: &i32;
    let _18: i32;
    let mut _19: &i32;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: i32;
    let mut _25: i32;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _30: (&i32, &i32);
    let mut _31: &i32;
    let _32: i32;
    let mut _33: &i32;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: i32;
    let mut _39: i32;
    let _41: !;
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _43: (&u32, &u32);
    let mut _44: &u32;
    let _45: u32;
    let mut _46: &u32;
    let _47: u32;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: u32;
    let mut _53: u32;
    let _55: !;
    let mut _56: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _58: (&bool, &bool);
    let mut _59: &bool;
    let mut _60: &bool;
    let _61: bool;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let _69: !;
    let mut _70: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug struct => _1;
        let _6: &i32;
        let _7: &i32;
        let _15: i32;
        scope 2 {
            debug left_val => _6;
            debug right_val => _7;
            let _12: core::panicking::AssertKind;
            scope 3 {
                debug kind => _12;
            }
        }
        scope 4 {
            debug foo => _15;
            let _20: &i32;
            let _21: &i32;
            let _29: i32;
            scope 5 {
                debug left_val => _20;
                debug right_val => _21;
                let _26: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _26;
                }
            }
            scope 7 {
                debug bar => _29;
                let _34: &i32;
                let _35: &i32;
                let _48: &u32;
                let _49: &u32;
                let _57: bool;
                scope 8 {
                    debug left_val => _34;
                    debug right_val => _35;
                    let _40: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _40;
                    }
                }
                scope 10 {
                    debug left_val => _48;
                    debug right_val => _49;
                    let _54: core::panicking::AssertKind;
                    scope 11 {
                        debug kind => _54;
                    }
                }
                scope 12 {
                    debug true => _57;
                    let _62: &bool;
                    let _63: &bool;
                    scope 13 {
                        debug left_val => _62;
                        debug right_val => _63;
                        let _68: core::panicking::AssertKind;
                        scope 14 {
                            debug kind => _68;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const 1_i32;
        _4 = const 1_i32;
        _3 = &_4;
        _5 = &_1;
        _2 = (move _3, move _5);
        _6 = (_2.0: &i32);
        _7 = (_2.1: &i32);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<i32, i32>(move _12, _6, _7, move _14);
    }

    bb2: {
        _15 = const 2_i32;
        _18 = const 2_i32;
        _17 = &_18;
        _19 = &_15;
        _16 = (move _17, move _19);
        _20 = (_16.0: &i32);
        _21 = (_16.1: &i32);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<i32, i32>(move _26, _20, _21, move _28);
    }

    bb4: {
        _29 = const 3_i32;
        _32 = const 3_i32;
        _31 = &_32;
        _33 = &_29;
        _30 = (move _31, move _33);
        _34 = (_30.0: &i32);
        _35 = (_30.1: &i32);
        _38 = (*_34);
        _39 = (*_35);
        _37 = Eq(move _38, move _39);
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _40 = core::panicking::AssertKind::Eq;
        _42 = Option::<Arguments<'_>>::None;
        _41 = core::panicking::assert_failed::<i32, i32>(move _40, _34, _35, move _42);
    }

    bb6: {
        _45 = const 4_u32;
        _44 = &_45;
        _47 = r#fn(const 4_u32) -> bb7;
    }

    bb7: {
        _46 = &_47;
        _43 = (move _44, move _46);
        _48 = (_43.0: &u32);
        _49 = (_43.1: &u32);
        _52 = (*_48);
        _53 = (*_49);
        _51 = Eq(move _52, move _53);
        _50 = Not(move _51);
        switchInt(move _50) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _54 = core::panicking::AssertKind::Eq;
        _56 = Option::<Arguments<'_>>::None;
        _55 = core::panicking::assert_failed::<u32, u32>(move _54, _48, _49, move _56);
    }

    bb9: {
        _57 = const false;
        _59 = &_57;
        _61 = const false;
        _60 = &_61;
        _58 = (move _59, move _60);
        _62 = (_58.0: &bool);
        _63 = (_58.1: &bool);
        _66 = (*_62);
        _67 = (*_63);
        _65 = Eq(move _66, move _67);
        _64 = Not(move _65);
        switchInt(move _64) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _68 = core::panicking::AssertKind::Eq;
        _70 = Option::<Arguments<'_>>::None;
        _69 = core::panicking::assert_failed::<bool, bool>(move _68, _62, _63, move _70);
    }

    bb11: {
        return;
    }
}
