// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/rfcs/rfc-2151-raw-identifiers/attr.rs:9:12: 9:19>::fmt(_1: &Test2, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&u32;
    let _6: &u32;

    bb0: {
        _3 = const "Test2";
        _6 = &((*_1).0: u32);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let mut _2: &usize;
    let _3: usize;
    let mut _4: &usize;
    let _5: usize;
    let _6: &usize;
    let _7: &usize;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: usize;
    let mut _11: usize;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&&str, &std::string::String);
    let mut _16: &&str;
    let _17: &str;
    let mut _18: &std::string::String;
    let _19: std::string::String;
    let _20: std::string::String;
    let mut _21: std::fmt::Arguments<'_>;
    let mut _22: &[&str];
    let _23: &[&str; 1];
    let _24: [&str; 1];
    let mut _25: &[core::fmt::rt::Argument<'_>];
    let _26: &[core::fmt::rt::Argument<'_>; 1];
    let _27: [core::fmt::rt::Argument<'_>; 1];
    let mut _28: core::fmt::rt::Argument<'_>;
    let _29: &Test2;
    let _30: Test2;
    let _31: &&str;
    let _32: &std::string::String;
    let mut _33: bool;
    let mut _34: bool;
    let _36: !;
    let mut _37: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }
    scope 3 {
        debug res => _20;
    }
    scope 4 {
        debug left_val => _31;
        debug right_val => _32;
        let _35: core::panicking::AssertKind;
        scope 5 {
            debug kind => _35;
        }
    }

    bb0: {
        _3 = std::mem::size_of::<Test>() -> bb1;
    }

    bb1: {
        _2 = &_3;
        _5 = const 9_usize;
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &usize);
        _7 = (_1.1: &usize);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<usize, usize>(move _12, _6, _7, move _14);
    }

    bb3: {
        _17 = const "Test2(123)";
        _16 = &_17;
        _24 = [const ""];
        _23 = &_24;
        _22 = _23 as &[&str] (Pointer(Unsize));
        _30 = Test2(const 123_u32);
        _29 = &_30;
        _28 = core::fmt::rt::Argument::<'_>::new_debug::<Test2>(_29) -> bb4;
    }

    bb4: {
        _27 = [move _28];
        _26 = &_27;
        _25 = _26 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _21 = Arguments::<'_>::new_v1(move _22, move _25) -> bb5;
    }

    bb5: {
        _20 = format(move _21) -> bb6;
    }

    bb6: {
        _19 = move _20;
        _18 = &_19;
        _15 = (move _16, move _18);
        _31 = (_15.0: &&str);
        _32 = (_15.1: &std::string::String);
        _34 = <&str as PartialEq<String>>::eq(_31, _32) -> [return: bb7, unwind: bb11];
    }

    bb7: {
        _33 = Not(move _34);
        switchInt(move _33) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _35 = core::panicking::AssertKind::Eq;
        _37 = Option::<Arguments<'_>>::None;
        _36 = core::panicking::assert_failed::<&str, String>(move _35, _31, _32, move _37) -> bb11;
    }

    bb9: {
        drop(_19) -> bb10;
    }

    bb10: {
        return;
    }

    bb11 (cleanup): {
        drop(_19) -> [return: bb12, unwind terminate];
    }

    bb12 (cleanup): {
        resume;
    }
}

fn Test2(_1: u32) -> Test2 {
    let mut _0: Test2;

    bb0: {
        _0 = Test2(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Test2(_1: u32) -> Test2 {
    let mut _0: Test2;

    bb0: {
        _0 = Test2(move _1);
        return;
    }
}
