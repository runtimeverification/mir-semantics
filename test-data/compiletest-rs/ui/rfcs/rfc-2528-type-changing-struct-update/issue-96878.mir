// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/rfcs/rfc-2528-type-changing-struct-update/issue-96878.rs:9:10: 9:17>::default() -> NonGeneric {
    let mut _0: NonGeneric;
    let mut _1: usize;

    bb0: {
        _1 = <usize as Default>::default() -> bb1;
    }

    bb1: {
        _0 = NonGeneric { field1: move _1 };
        return;
    }
}

fn <impl at ui/rfcs/rfc-2528-type-changing-struct-update/issue-96878.rs:14:10: 14:17>::default() -> Generic<T, U> {
    let mut _0: Generic<T, U>;
    let mut _1: T;
    let mut _2: U;

    bb0: {
        _1 = <T as Default>::default() -> bb1;
    }

    bb1: {
        _2 = <U as Default>::default() -> [return: bb2, unwind: bb3];
    }

    bb2: {
        _0 = Generic::<T, U> { field1: move _1, field2: move _2 };
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

MoreGeneric::field1::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

<impl at ui/rfcs/rfc-2528-type-changing-struct-update/issue-96878.rs:20:10: 20:17>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn <impl at ui/rfcs/rfc-2528-type-changing-struct-update/issue-96878.rs:20:10: 20:17>::default() -> MoreGeneric<'_, N> {
    let mut _0: MoreGeneric<'_, N>;
    let mut _1: std::marker::PhantomData<[u32; N]>;
    let mut _2: std::borrow::Cow<'_, str>;

    bb0: {
        _1 = <PhantomData<[u32; N]> as Default>::default() -> bb1;
    }

    bb1: {
        _2 = <Cow<'_, str> as Default>::default() -> bb2;
    }

    bb2: {
        _0 = MoreGeneric::<'_, N> { field1: const ZeroSized: PhantomData<[u32; N]>, field2: move _2 };
        return;
    }
}

<impl at ui/rfcs/rfc-2528-type-changing-struct-update/issue-96878.rs:20:10: 20:17>::default::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: NonGeneric;
    let mut _2: NonGeneric;
    let mut _4: Generic<i32, f32>;
    let mut _6: MoreGeneric<'_, 12>;
    scope 1 {
        debug default1 => _1;
        let _3: Generic<i32, f32>;
        scope 2 {
            debug default2 => _3;
            let _5: MoreGeneric<'_, 12>;
            scope 3 {
                debug default3 => _5;
            }
        }
    }

    bb0: {
        _2 = <NonGeneric as Default>::default() -> bb1;
    }

    bb1: {
        _1 = NonGeneric { field1: (_2.0: usize) };
        _4 = <Generic<i32, f32> as Default>::default() -> bb2;
    }

    bb2: {
        _3 = Generic::<i32, f32> { field1: (_4.0: i32), field2: (_4.1: f32) };
        _6 = <MoreGeneric<'_, 12> as Default>::default() -> bb3;
    }

    bb3: {
        _5 = MoreGeneric::<'_, 12> { field1: const PhantomData::<[u32; 12]>, field2: move (_6.1: std::borrow::Cow<'_, str>) };
        drop(_5) -> bb4;
    }

    bb4: {
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 12_usize;
        return;
    }
}
