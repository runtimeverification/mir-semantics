// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: Foo<usize, dyn std::any::Any, dyn std::any::Any>;
    let mut _2: std::boxed::Box<dyn std::any::Any>;
    let mut _3: std::boxed::Box<B>;
    let mut _4: Foo<i32, B, dyn std::any::Any>;
    let mut _5: std::boxed::Box<B>;
    let mut _6: std::boxed::Box<dyn std::any::Any>;
    let mut _7: std::boxed::Box<C>;
    scope 1 {
        debug y => _1;
    }

    bb0: {
        _3 = Box::<B>::new(const B) -> bb1;
    }

    bb1: {
        _2 = move _3 as std::boxed::Box<dyn std::any::Any> (Pointer(Unsize));
        _5 = Box::<B>::new(const B) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _7 = Box::<C>::new(const C) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        _6 = move _7 as std::boxed::Box<dyn std::any::Any> (Pointer(Unsize));
        _4 = Foo::<i32, B, dyn Any> { a: const 0_i32, b: move _5, c: move _6 };
        _1 = Foo::<usize, dyn Any, dyn Any> { a: const 0_usize, b: move _2, c: move (_4.2: std::boxed::Box<dyn std::any::Any>) };
        drop((_4.1: std::boxed::Box<B>)) -> [return: bb9, unwind: bb8];
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_5) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }

    bb8 (cleanup): {
        drop(_1) -> [return: bb7, unwind terminate];
    }

    bb9: {
        drop(_1) -> bb4;
    }
}
