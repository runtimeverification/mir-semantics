// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::boxed::Box<Foo>;
    let mut _3: &std::boxed::Box<Foo>;
    let mut _4: &&&std::boxed::Box<Foo>;
    let _5: &&std::boxed::Box<Foo>;
    let _6: &std::boxed::Box<Foo>;
    let mut _8: std::boxed::Box<Foo>;
    let mut _9: &&std::boxed::Box<Foo>;
    let mut _10: &std::boxed::Box<Foo>;
    let mut _11: std::boxed::Box<Foo>;
    let mut _12: *const Foo;
    let mut _13: *const Foo;
    scope 1 {
        debug b => _1;
        let _2: &Foo;
        let mut _20: *const ();
        let mut _21: usize;
        let mut _22: usize;
        let mut _23: usize;
        let mut _24: usize;
        let mut _25: bool;
        scope 2 {
            debug f => _2;
            scope 3 {
                let _7: &Foo;
                let mut _14: *const ();
                let mut _15: usize;
                let mut _16: usize;
                let mut _17: usize;
                let mut _18: usize;
                let mut _19: bool;
                scope 4 {
                    debug f => _7;
                    scope 5 {
                    }
                }
            }
        }
    }

    bb0: {
        _1 = Box::<Foo>::new(const Foo {{  }}) -> bb1;
    }

    bb1: {
        _3 = &_1;
        _8 = deref_copy (*_3);
        _12 = (((_8.0: std::ptr::Unique<Foo>).0: std::ptr::NonNull<Foo>).0: *const Foo);
        _20 = _12 as *const () (PtrToPtr);
        _21 = _20 as usize (Transmute);
        _22 = AlignOf(Foo);
        _23 = Sub(_22, const 1_usize);
        _24 = BitAnd(_21, _23);
        _25 = Eq(_24, const 0_usize);
        assert(_25, "misaligned pointer dereference: address must be a multiple of {} but is {}", _22, _21) -> [success: bb4, unwind unreachable];
    }

    bb2: {
        return;
    }

    bb3: {
        _7 = &(*_13);
        drop(_1) -> bb2;
    }

    bb4: {
        _2 = &(*_12);
        _6 = &_1;
        _5 = &_6;
        _4 = &_5;
        _9 = deref_copy (*_4);
        _10 = deref_copy (*_9);
        _11 = deref_copy (*_10);
        _13 = (((_11.0: std::ptr::Unique<Foo>).0: std::ptr::NonNull<Foo>).0: *const Foo);
        _14 = _13 as *const () (PtrToPtr);
        _15 = _14 as usize (Transmute);
        _16 = AlignOf(Foo);
        _17 = Sub(_16, const 1_usize);
        _18 = BitAnd(_15, _17);
        _19 = Eq(_18, const 0_usize);
        assert(_19, "misaligned pointer dereference: address must be a multiple of {} but is {}", _16, _15) -> [success: bb3, unwind unreachable];
    }
}
