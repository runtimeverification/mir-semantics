// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const CONST_REF: &[u8; 3] = {
    let mut _0: &[u8; 3];

    bb0: {
        _0 = const b"foo";
        return;
    }
}

alloc1 (size: 3, align: 1) {
    66 6f 6f                                        │ foo
}

CONST_REF::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

const Foo::CONST_REF_DEFAULT: &[u8; 3] = {
    let mut _0: &[u8; 3];

    bb0: {
        _0 = const b"bar";
        return;
    }
}

alloc2 (size: 3, align: 1) {
    62 61 72                                        │ bar
}

Foo::CONST_REF_DEFAULT::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

Foo::CONST_REF::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

const <impl at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:9:1: 9:17>::CONST_REF: &[u8; 3] = {
    let mut _0: &[u8; 3];

    bb0: {
        _0 = const b"jjj";
        return;
    }
}

alloc3 (size: 3, align: 1) {
    6a 6a 6a                                        │ jjj
}

<impl at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:9:1: 9:17>::CONST_REF::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

const <impl at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:13:1: 13:17>::CONST_REF_DEFAULT: &[u8; 3] = {
    let mut _0: &[u8; 3];

    bb0: {
        _0 = const b"ggg";
        return;
    }
}

alloc4 (size: 3, align: 1) {
    67 67 67                                        │ ggg
}

<impl at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:13:1: 13:17>::CONST_REF_DEFAULT::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

const <impl at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:13:1: 13:17>::CONST_REF: &[u8; 3] = {
    let mut _0: &[u8; 3];

    bb0: {
        _0 = const b"fff";
        return;
    }
}

alloc5 (size: 3, align: 1) {
    66 66 66                                        │ fff
}

<impl at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:13:1: 13:17>::CONST_REF::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

fn const_ref() -> bool {
    let mut _0: bool;
    let _1: &[u8; 3];
    let mut _2: u8;
    scope 1 {
        debug f => _1;
    }

    bb0: {
        _1 = const b"foo";
        switchInt((*_1)[0 of 3]) -> [102: bb1, otherwise: bb3];
    }

    bb1: {
        switchInt((*_1)[1 of 3]) -> [111: bb2, otherwise: bb3];
    }

    bb2: {
        StorageLive(_2);
        _2 = (*_1)[2 of 3];
        _0 = Eq(_2, const 111_u8);
        StorageDead(_2);
        goto -> bb4;
    }

    bb3: {
        _0 = const false;
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

alloc7 (size: 3, align: 1) {
    66 6f 6f                                        │ foo
}

fn associated_const_ref() -> bool {
    let mut _0: bool;
    let mut _1: (&[u8; 3], &[u8; 3], &[u8; 3], &[u8; 3]);
    let mut _2: &[u8; 3];
    let mut _3: &[u8; 3];
    let mut _4: &[u8; 3];
    let mut _5: &[u8; 3];
    let mut _6: &[u8; 3];
    let mut _7: &[u8; 3];
    let mut _8: &[u8; 3];
    let mut _9: &[u8; 3];
    let mut _10: &[u8; 3];
    let mut _11: &[u8; 3];
    let mut _12: &[u8; 3];
    let mut _13: &[u8; 3];
    let mut _14: u8;

    bb0: {
        _1 = (const b"bar", const b"jjj", const b"ggg", const b"fff");
        _2 = deref_copy (_1.0: &[u8; 3]);
        switchInt((*_2)[0 of 3]) -> [98: bb1, otherwise: bb12];
    }

    bb1: {
        _3 = deref_copy (_1.0: &[u8; 3]);
        switchInt((*_3)[1 of 3]) -> [97: bb2, otherwise: bb12];
    }

    bb2: {
        _4 = deref_copy (_1.0: &[u8; 3]);
        switchInt((*_4)[2 of 3]) -> [114: bb3, otherwise: bb12];
    }

    bb3: {
        _5 = deref_copy (_1.1: &[u8; 3]);
        switchInt((*_5)[0 of 3]) -> [106: bb4, otherwise: bb12];
    }

    bb4: {
        _6 = deref_copy (_1.1: &[u8; 3]);
        switchInt((*_6)[1 of 3]) -> [106: bb5, otherwise: bb12];
    }

    bb5: {
        _7 = deref_copy (_1.1: &[u8; 3]);
        switchInt((*_7)[2 of 3]) -> [106: bb6, otherwise: bb12];
    }

    bb6: {
        _8 = deref_copy (_1.2: &[u8; 3]);
        switchInt((*_8)[0 of 3]) -> [103: bb7, otherwise: bb12];
    }

    bb7: {
        _9 = deref_copy (_1.2: &[u8; 3]);
        switchInt((*_9)[1 of 3]) -> [103: bb8, otherwise: bb12];
    }

    bb8: {
        _10 = deref_copy (_1.2: &[u8; 3]);
        switchInt((*_10)[2 of 3]) -> [103: bb9, otherwise: bb12];
    }

    bb9: {
        _11 = deref_copy (_1.3: &[u8; 3]);
        switchInt((*_11)[0 of 3]) -> [102: bb10, otherwise: bb12];
    }

    bb10: {
        _12 = deref_copy (_1.3: &[u8; 3]);
        switchInt((*_12)[1 of 3]) -> [102: bb11, otherwise: bb12];
    }

    bb11: {
        _13 = deref_copy (_1.3: &[u8; 3]);
        StorageLive(_14);
        _14 = (*_13)[2 of 3];
        _0 = Eq(_14, const 102_u8);
        StorageDead(_14);
        goto -> bb13;
    }

    bb12: {
        _0 = const false;
        goto -> bb13;
    }

    bb13: {
        return;
    }
}

alloc19 (size: 3, align: 1) {
    66 66 66                                        │ fff
}

alloc18 (size: 3, align: 1) {
    67 67 67                                        │ ggg
}

alloc17 (size: 3, align: 1) {
    6a 6a 6a                                        │ jjj
}

alloc16 (size: 3, align: 1) {
    62 61 72                                        │ bar
}

fn main() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: !;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: !;

    bb0: {
        _2 = const_ref() -> bb1;
    }

    bb1: {
        _1 = Not(move _2);
        switchInt(move _1) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _3 = core::panicking::panic(const "assertion failed: const_ref()");
    }

    bb3: {
        _5 = associated_const_ref() -> bb4;
    }

    bb4: {
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _6 = core::panicking::panic(const "assertion failed: associated_const_ref()");
    }

    bb6: {
        return;
    }
}
