// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _2: &&&&i32;
    let _3: &&&i32;
    let _4: &&i32;
    let _5: &i32;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: !;
    let mut _11: !;
    let mut _12: &&&i32;
    let mut _13: &&i32;
    let mut _14: &i32;
    let mut _15: &&&i32;
    let mut _16: &&i32;
    let mut _17: &i32;
    let mut _18: &&&i32;
    let mut _19: &&i32;
    let mut _20: &i32;
    let mut _21: &&&i32;
    let mut _22: &&i32;
    let mut _23: &i32;
    scope 1 {
        debug i => _1;
    }

    bb0: {
        _1 = const 5_i32;
        _5 = &_1;
        _4 = &_5;
        _3 = &_4;
        _2 = &_3;
        _12 = deref_copy (*_2);
        _13 = deref_copy (*_12);
        _14 = deref_copy (*_13);
        _8 = Le(const 1_i32, (*_14));
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _15 = deref_copy (*_2);
        _16 = deref_copy (*_15);
        _17 = deref_copy (*_16);
        _9 = Le((*_17), const 3_i32);
        switchInt(move _9) -> [0: bb2, otherwise: bb5];
    }

    bb2: {
        _18 = deref_copy (*_2);
        _19 = deref_copy (*_18);
        _20 = deref_copy (*_19);
        _6 = Le(const 4_i32, (*_20));
        switchInt(move _6) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _21 = deref_copy (*_2);
        _22 = deref_copy (*_21);
        _23 = deref_copy (*_22);
        _7 = Le((*_23), const 8_i32);
        switchInt(move _7) -> [0: bb4, otherwise: bb6];
    }

    bb4: {
        _11 = begin_panic::<&str>(const "explicit panic");
    }

    bb5: {
        _10 = begin_panic::<&str>(const "explicit panic");
    }

    bb6: {
        return;
    }
}
