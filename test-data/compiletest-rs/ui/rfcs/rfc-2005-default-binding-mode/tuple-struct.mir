// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: Foo;
    let mut _2: std::option::Option<i8>;
    let mut _3: std::vec::Vec<i32>;
    let mut _4: std::boxed::Box<[i32]>;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: *mut u8;
    let mut _8: std::boxed::Box<[i32; 2]>;
    let mut _9: &Foo;
    let mut _10: isize;
    let mut _11: isize;
    let mut _12: !;
    let mut _13: !;
    let mut _16: (&usize, &usize);
    let mut _17: &usize;
    let _18: usize;
    let mut _19: &usize;
    let _20: usize;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: usize;
    let mut _26: usize;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _30: (&i8, &i8);
    let mut _31: &i8;
    let _32: i8;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: i8;
    let mut _38: i8;
    let _40: !;
    let mut _41: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _42: *const [i32; 2];
    let mut _43: *const ();
    let mut _44: usize;
    let mut _45: usize;
    let mut _46: usize;
    let mut _47: usize;
    let mut _48: bool;
    scope 1 {
        debug foo => _1;
        let _14: &i8;
        let _15: &std::vec::Vec<i32>;
        scope 3 {
            debug n => _14;
            debug v => _15;
            let _21: &usize;
            let _22: &usize;
            let _33: &i8;
            let _34: &i8;
            scope 4 {
                debug left_val => _21;
                debug right_val => _22;
                let _27: core::panicking::AssertKind;
                scope 5 {
                    debug kind => _27;
                }
            }
            scope 6 {
                debug left_val => _33;
                debug right_val => _34;
                let _39: core::panicking::AssertKind;
                scope 7 {
                    debug kind => _39;
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _2 = Option::<i8>::Some(const 1_i8);
        _5 = SizeOf([i32; 2]);
        _6 = AlignOf([i32; 2]);
        _7 = alloc::alloc::exchange_malloc(move _5, move _6) -> bb1;
    }

    bb1: {
        _8 = ShallowInitBox(move _7, [i32; 2]);
        _42 = (((_8.0: std::ptr::Unique<[i32; 2]>).0: std::ptr::NonNull<[i32; 2]>).0: *const [i32; 2]);
        _43 = _42 as *const () (PtrToPtr);
        _44 = _43 as usize (Transmute);
        _45 = AlignOf(i32);
        _46 = Sub(_45, const 1_usize);
        _47 = BitAnd(_44, _46);
        _48 = Eq(_47, const 0_usize);
        assert(_48, "misaligned pointer dereference: address must be a multiple of {} but is {}", _45, _44) -> [success: bb16, unwind unreachable];
    }

    bb2: {
        _1 = Foo::Bar(move _2, const (), const (), move _3);
        _9 = &_1;
        _11 = discriminant((*_9));
        switchInt(move _11) -> [0: bb3, 1: bb6, otherwise: bb5];
    }

    bb3: {
        _10 = discriminant((((*_9) as Bar).0: std::option::Option<i8>));
        switchInt(move _10) -> [0: bb7, 1: bb4, otherwise: bb5];
    }

    bb4: {
        _15 = &(((*_9) as Bar).3: std::vec::Vec<i32>);
        _14 = &(((((*_9) as Bar).0: std::option::Option<i8>) as Some).0: i8);
        _18 = Vec::<i32>::len(_15) -> [return: bb8, unwind: bb14];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _12 = begin_panic::<&str>(const "explicit panic") -> bb14;
    }

    bb7: {
        _13 = begin_panic::<&str>(const "explicit panic") -> bb14;
    }

    bb8: {
        _17 = &_18;
        _20 = const 2_usize;
        _19 = &_20;
        _16 = (move _17, move _19);
        _21 = (_16.0: &usize);
        _22 = (_16.1: &usize);
        _25 = (*_21);
        _26 = (*_22);
        _24 = Eq(move _25, move _26);
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<usize, usize>(move _27, _21, _22, move _29) -> bb14;
    }

    bb10: {
        _32 = const 1_i8;
        _31 = &_32;
        _30 = (_14, move _31);
        _33 = (_30.0: &i8);
        _34 = (_30.1: &i8);
        _37 = (*_33);
        _38 = (*_34);
        _36 = Eq(move _37, move _38);
        _35 = Not(move _36);
        switchInt(move _35) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _39 = core::panicking::AssertKind::Eq;
        _41 = Option::<Arguments<'_>>::None;
        _40 = core::panicking::assert_failed::<i8, i8>(move _39, _33, _34, move _41) -> bb14;
    }

    bb12: {
        drop(_1) -> bb13;
    }

    bb13: {
        return;
    }

    bb14 (cleanup): {
        drop(_1) -> [return: bb15, unwind terminate];
    }

    bb15 (cleanup): {
        resume;
    }

    bb16: {
        (*_42) = [const 2_i32, const 3_i32];
        _4 = move _8 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _3 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _4) -> bb2;
    }
}

fn Foo::Bar(_1: Option<i8>, _2: (), _3: (), _4: Vec<i32>) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::Bar(move _1, move _2, move _3, move _4);
        return;
    }
}

// MIR FOR CTFE
fn Foo::Bar(_1: Option<i8>, _2: (), _3: (), _4: Vec<i32>) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::Bar(move _1, move _2, move _3, move _4);
        return;
    }
}
