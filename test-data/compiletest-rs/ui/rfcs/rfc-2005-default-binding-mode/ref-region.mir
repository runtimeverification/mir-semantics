// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: &&Option<u32>) -> &u32 {
    debug x => _1;
    let mut _0: &u32;
    let mut _2: isize;
    let mut _3: !;
    let mut _4: &std::option::Option<u32>;
    let mut _5: &std::option::Option<u32>;
    scope 1 {
        debug x => _1;
        scope 2 {
            debug r => _0;
            scope 3 {
            }
        }
    }

    bb0: {
        _4 = deref_copy (*_1);
        _2 = discriminant((*_4));
        switchInt(move _2) -> [0: bb1, 1: bb3, otherwise: bb2];
    }

    bb1: {
        _3 = begin_panic::<&str>(const "explicit panic");
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = deref_copy (*_1);
        _0 = &(((*_5) as Some).0: u32);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::option::Option<u32>;
    let _2: &u32;
    let _3: &&std::option::Option<u32>;
    let _4: &std::option::Option<u32>;
    scope 1 {
        debug x => _1;
    }

    bb0: {
        _1 = Option::<u32>::Some(const 5_u32);
        _4 = &_1;
        _3 = &_4;
        _2 = foo(_3) -> bb1;
    }

    bb1: {
        return;
    }
}
