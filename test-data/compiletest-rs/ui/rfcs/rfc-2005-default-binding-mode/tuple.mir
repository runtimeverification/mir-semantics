// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: (std::option::Option<i32>, (), (), std::vec::Vec<i32>);
    let mut _2: std::option::Option<i32>;
    let mut _3: std::vec::Vec<i32>;
    let mut _4: std::boxed::Box<[i32]>;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: *mut u8;
    let mut _8: std::boxed::Box<[i32; 2]>;
    let mut _9: &(std::option::Option<i32>, (), (), std::vec::Vec<i32>);
    let mut _10: isize;
    let mut _13: (&usize, &usize);
    let mut _14: &usize;
    let _15: usize;
    let mut _16: &usize;
    let _17: usize;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: usize;
    let mut _23: usize;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _27: (&i32, &i32);
    let mut _28: &i32;
    let _29: i32;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: i32;
    let mut _35: i32;
    let _37: !;
    let mut _38: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _39: !;
    let mut _40: *const [i32; 2];
    let mut _41: *const ();
    let mut _42: usize;
    let mut _43: usize;
    let mut _44: usize;
    let mut _45: usize;
    let mut _46: bool;
    scope 1 {
        debug foo => _1;
        let _11: &i32;
        let _12: &std::vec::Vec<i32>;
        scope 3 {
            debug n => _11;
            debug v => _12;
            let _18: &usize;
            let _19: &usize;
            let _30: &i32;
            let _31: &i32;
            scope 4 {
                debug left_val => _18;
                debug right_val => _19;
                let _24: core::panicking::AssertKind;
                scope 5 {
                    debug kind => _24;
                }
            }
            scope 6 {
                debug left_val => _30;
                debug right_val => _31;
                let _36: core::panicking::AssertKind;
                scope 7 {
                    debug kind => _36;
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _2 = Option::<i32>::Some(const 1_i32);
        _5 = SizeOf([i32; 2]);
        _6 = AlignOf([i32; 2]);
        _7 = alloc::alloc::exchange_malloc(move _5, move _6) -> bb1;
    }

    bb1: {
        _8 = ShallowInitBox(move _7, [i32; 2]);
        _40 = (((_8.0: std::ptr::Unique<[i32; 2]>).0: std::ptr::NonNull<[i32; 2]>).0: *const [i32; 2]);
        _41 = _40 as *const () (PtrToPtr);
        _42 = _41 as usize (Transmute);
        _43 = AlignOf(i32);
        _44 = Sub(_43, const 1_usize);
        _45 = BitAnd(_42, _44);
        _46 = Eq(_45, const 0_usize);
        assert(_46, "misaligned pointer dereference: address must be a multiple of {} but is {}", _43, _42) -> [success: bb14, unwind unreachable];
    }

    bb2: {
        _1 = (move _2, const (), const (), move _3);
        _9 = &_1;
        _10 = discriminant(((*_9).0: std::option::Option<i32>));
        switchInt(move _10) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _39 = begin_panic::<&str>(const "explicit panic") -> bb12;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _12 = &((*_9).3: std::vec::Vec<i32>);
        _11 = &((((*_9).0: std::option::Option<i32>) as Some).0: i32);
        _15 = Vec::<i32>::len(_12) -> [return: bb6, unwind: bb12];
    }

    bb6: {
        _14 = &_15;
        _17 = const 2_usize;
        _16 = &_17;
        _13 = (move _14, move _16);
        _18 = (_13.0: &usize);
        _19 = (_13.1: &usize);
        _22 = (*_18);
        _23 = (*_19);
        _21 = Eq(move _22, move _23);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<usize, usize>(move _24, _18, _19, move _26) -> bb12;
    }

    bb8: {
        _29 = const 1_i32;
        _28 = &_29;
        _27 = (_11, move _28);
        _30 = (_27.0: &i32);
        _31 = (_27.1: &i32);
        _34 = (*_30);
        _35 = (*_31);
        _33 = Eq(move _34, move _35);
        _32 = Not(move _33);
        switchInt(move _32) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _36 = core::panicking::AssertKind::Eq;
        _38 = Option::<Arguments<'_>>::None;
        _37 = core::panicking::assert_failed::<i32, i32>(move _36, _30, _31, move _38) -> bb12;
    }

    bb10: {
        drop(_1) -> bb11;
    }

    bb11: {
        return;
    }

    bb12 (cleanup): {
        drop(_1) -> [return: bb13, unwind terminate];
    }

    bb13 (cleanup): {
        resume;
    }

    bb14: {
        (*_40) = [const 2_i32, const 3_i32];
        _4 = move _8 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _3 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _4) -> bb2;
    }
}
