// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn i_live_in_more_text() -> &str {
    let mut _0: &str;

    bb0: {
        _0 = const "knock knock";
        return;
    }
}

static magic: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 42_usize;
        return;
    }
}

static mut frobulator: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3735928559_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: *mut usize;
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 4];
    let _6: [&str; 4];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 3];
    let _9: [core::fmt::rt::Argument<'_>; 3];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &&str;
    let _12: &str;
    let mut _13: core::fmt::rt::Argument<'_>;
    let _14: &usize;
    let mut _15: core::fmt::rt::Argument<'_>;
    let _16: &usize;
    let _17: *mut usize;
    scope 1 {
        let mut _18: *const ();
        let mut _19: usize;
        let mut _20: usize;
        let mut _21: usize;
        let mut _22: usize;
        let mut _23: bool;
        let mut _24: *const ();
        let mut _25: usize;
        let mut _26: usize;
        let mut _27: usize;
        let mut _28: usize;
        let mut _29: bool;
    }

    bb0: {
        _1 = const {alloc1: *mut usize};
        _24 = _1 as *const () (PtrToPtr);
        _25 = _24 as usize (Transmute);
        _26 = AlignOf(usize);
        _27 = Sub(_26, const 1_usize);
        _28 = BitAnd(_25, _27);
        _29 = Eq(_28, const 0_usize);
        assert(_29, "misaligned pointer dereference: address must be a multiple of {} but is {}", _26, _25) -> [success: bb8, unwind unreachable];
    }

    bb1: {
        _11 = &_12;
        _10 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_11) -> bb2;
    }

    bb2: {
        _14 = const {alloc2: &usize};
        _13 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_14) -> bb3;
    }

    bb3: {
        _17 = const {alloc1: *mut usize};
        _18 = _17 as *const () (PtrToPtr);
        _19 = _18 as usize (Transmute);
        _20 = AlignOf(usize);
        _21 = Sub(_20, const 1_usize);
        _22 = BitAnd(_19, _21);
        _23 = Eq(_22, const 0_usize);
        assert(_23, "misaligned pointer dereference: address must be a multiple of {} but is {}", _20, _19) -> [success: bb7, unwind unreachable];
    }

    bb4: {
        _9 = [move _10, move _13, move _15];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb5;
    }

    bb5: {
        _2 = _print(move _3) -> bb6;
    }

    bb6: {
        return;
    }

    bb7: {
        _16 = &(*_17);
        _15 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_16) -> bb4;
    }

    bb8: {
        (*_1) = const 305419896_usize;
        _6 = [const "", const " ", const " ", const "\n"];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _12 = i_live_in_more_text() -> bb1;
    }
}

alloc2 (static: magic, size: 8, align: 8) {
    2a 00 00 00 00 00 00 00                         │ *.......
}

alloc1 (static: frobulator, size: 8, align: 8) {
    ef be ad de 00 00 00 00                         │ ........
}
