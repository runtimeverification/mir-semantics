// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let mut _2: &usize;
    let _3: usize;
    let mut _4: usize;
    let mut _5: &usize;
    let _6: usize;
    let _7: &usize;
    let _8: &usize;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: usize;
    let mut _12: usize;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&usize, &usize);
    let mut _17: &usize;
    let _18: usize;
    let mut _19: usize;
    let mut _20: &usize;
    let _21: usize;
    let _22: &usize;
    let _23: &usize;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: usize;
    let mut _27: usize;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&usize, &usize);
    let mut _32: &usize;
    let _33: usize;
    let mut _34: usize;
    let mut _35: bool;
    let mut _36: &usize;
    let _37: usize;
    let _38: &usize;
    let _39: &usize;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: usize;
    let mut _43: usize;
    let _45: !;
    let mut _46: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _47: (&usize, &usize);
    let mut _48: &usize;
    let _49: usize;
    let mut _50: usize;
    let mut _51: &usize;
    let _52: usize;
    let _53: &usize;
    let _54: &usize;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: usize;
    let mut _58: usize;
    let _60: !;
    let mut _61: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _62: (&usize, &usize);
    let mut _63: &usize;
    let _64: usize;
    let mut _65: usize;
    let mut _66: &usize;
    let _67: usize;
    let _68: &usize;
    let _69: &usize;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: usize;
    let mut _73: usize;
    let _75: !;
    let mut _76: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _7;
        debug right_val => _8;
        let _13: core::panicking::AssertKind;
        scope 2 {
            debug kind => _13;
        }
    }
    scope 3 {
        debug left_val => _22;
        debug right_val => _23;
        let _28: core::panicking::AssertKind;
        scope 4 {
            debug kind => _28;
        }
    }
    scope 5 {
        debug left_val => _38;
        debug right_val => _39;
        let _44: core::panicking::AssertKind;
        scope 6 {
            debug kind => _44;
        }
    }
    scope 7 {
        debug left_val => _53;
        debug right_val => _54;
        let _59: core::panicking::AssertKind;
        scope 8 {
            debug kind => _59;
        }
    }
    scope 9 {
        debug left_val => _68;
        debug right_val => _69;
        let _74: core::panicking::AssertKind;
        scope 10 {
            debug kind => _74;
        }
    }

    bb0: {
        _4 = const 3_usize;
        _3 = Mul(move _4, const 3_usize);
        _2 = &_3;
        _6 = const 9_usize;
        _5 = &_6;
        _1 = (move _2, move _5);
        _7 = (_1.0: &usize);
        _8 = (_1.1: &usize);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<usize, usize>(move _13, _7, _8, move _15);
    }

    bb2: {
        _19 = const 3_usize;
        _18 = Mul(move _19, const 3_usize);
        _17 = &_18;
        _21 = const 9_usize;
        _20 = &_21;
        _16 = (move _17, move _20);
        _22 = (_16.0: &usize);
        _23 = (_16.1: &usize);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<usize, usize>(move _28, _22, _23, move _30);
    }

    bb4: {
        _34 = const 3_usize;
        _35 = Eq(const 3_usize, const 0_usize);
        assert(!move _35, "attempt to divide `{}` by zero", _34) -> bb5;
    }

    bb5: {
        _33 = Div(move _34, const 3_usize);
        _32 = &_33;
        _37 = const 1_usize;
        _36 = &_37;
        _31 = (move _32, move _36);
        _38 = (_31.0: &usize);
        _39 = (_31.1: &usize);
        _42 = (*_38);
        _43 = (*_39);
        _41 = Eq(move _42, move _43);
        _40 = Not(move _41);
        switchInt(move _40) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _44 = core::panicking::AssertKind::Eq;
        _46 = Option::<Arguments<'_>>::None;
        _45 = core::panicking::assert_failed::<usize, usize>(move _44, _38, _39, move _46);
    }

    bb7: {
        _50 = const 3_usize;
        _49 = Add(move _50, const 3_usize);
        _48 = &_49;
        _52 = const 6_usize;
        _51 = &_52;
        _47 = (move _48, move _51);
        _53 = (_47.0: &usize);
        _54 = (_47.1: &usize);
        _57 = (*_53);
        _58 = (*_54);
        _56 = Eq(move _57, move _58);
        _55 = Not(move _56);
        switchInt(move _55) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _59 = core::panicking::AssertKind::Eq;
        _61 = Option::<Arguments<'_>>::None;
        _60 = core::panicking::assert_failed::<usize, usize>(move _59, _53, _54, move _61);
    }

    bb9: {
        _65 = const 3_usize;
        _64 = Add(move _65, const 3_usize);
        _63 = &_64;
        _67 = const 6_usize;
        _66 = &_67;
        _62 = (move _63, move _66);
        _68 = (_62.0: &usize);
        _69 = (_62.1: &usize);
        _72 = (*_68);
        _73 = (*_69);
        _71 = Eq(move _72, move _73);
        _70 = Not(move _71);
        switchInt(move _70) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _74 = core::panicking::AssertKind::Eq;
        _76 = Option::<Arguments<'_>>::None;
        _75 = core::panicking::assert_failed::<usize, usize>(move _74, _68, _69, move _76);
    }

    bb11: {
        return;
    }
}
