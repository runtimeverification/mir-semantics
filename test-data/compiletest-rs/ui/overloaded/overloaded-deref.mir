// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/overloaded/overloaded-deref.rs:6:10: 6:19>::eq(_1: &Point, _2: &Point) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: isize;
    let mut _5: isize;
    let mut _6: bool;
    let mut _7: isize;
    let mut _8: isize;

    bb0: {
        _4 = ((*_1).0: isize);
        _5 = ((*_2).0: isize);
        _3 = Eq(move _4, move _5);
        switchInt(move _3) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _7 = ((*_1).1: isize);
        _8 = ((*_2).1: isize);
        _6 = Eq(move _7, move _8);
        _0 = move _6;
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn <impl at ui/overloaded/overloaded-deref.rs:6:21: 6:26>::fmt(_1: &Point, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &isize;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&isize;
    let _10: &isize;

    bb0: {
        _3 = const "Point";
        _4 = const "x";
        _6 = &((*_1).0: isize);
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize));
        _7 = const "y";
        _10 = &((*_1).1: isize);
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&i32, &i32);
    let mut _2: &i32;
    let _3: &i32;
    let mut _4: &std::rc::Rc<i32>;
    let _5: std::rc::Rc<i32>;
    let mut _6: &i32;
    let _7: i32;
    let _8: &i32;
    let _9: &i32;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: i32;
    let mut _13: i32;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&i32, &i32);
    let mut _18: &i32;
    let _19: &std::boxed::Box<std::boxed::Box<i32>>;
    let mut _20: &std::rc::Rc<std::boxed::Box<std::boxed::Box<i32>>>;
    let _21: std::rc::Rc<std::boxed::Box<std::boxed::Box<i32>>>;
    let mut _22: std::boxed::Box<std::boxed::Box<i32>>;
    let mut _23: std::boxed::Box<i32>;
    let mut _24: &i32;
    let _25: i32;
    let _26: &i32;
    let _27: &i32;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: i32;
    let mut _31: i32;
    let _33: !;
    let mut _34: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _35: (&Point, &Point);
    let mut _36: &Point;
    let _37: &Point;
    let mut _38: &std::rc::Rc<Point>;
    let _39: std::rc::Rc<Point>;
    let mut _40: Point;
    let mut _41: &Point;
    let _42: Point;
    let _43: &Point;
    let _44: &Point;
    let mut _45: bool;
    let mut _46: bool;
    let _48: !;
    let mut _49: std::option::Option<std::fmt::Arguments<'_>>;
    let _50: std::rc::Rc<std::cell::RefCell<i32>>;
    let mut _51: std::cell::RefCell<i32>;
    let mut _53: &i32;
    let mut _54: &std::cell::Ref<'_, i32>;
    let _55: std::cell::Ref<'_, i32>;
    let mut _56: &std::cell::RefCell<i32>;
    let _57: &std::cell::RefCell<i32>;
    let mut _58: &std::rc::Rc<std::cell::RefCell<i32>>;
    let mut _59: &mut i32;
    let mut _60: &mut std::cell::RefMut<'_, i32>;
    let mut _61: std::cell::RefMut<'_, i32>;
    let mut _62: &std::cell::RefCell<i32>;
    let _63: &std::cell::RefCell<i32>;
    let mut _64: &std::rc::Rc<std::cell::RefCell<i32>>;
    let mut _65: (&(i32, i32), &(i32, i32));
    let mut _66: &(i32, i32);
    let _67: (i32, i32);
    let mut _68: i32;
    let mut _69: &i32;
    let mut _70: &std::cell::Ref<'_, i32>;
    let _71: std::cell::Ref<'_, i32>;
    let mut _72: &std::cell::RefCell<i32>;
    let _73: &std::cell::RefCell<i32>;
    let mut _74: &std::rc::Rc<std::cell::RefCell<i32>>;
    let mut _75: &(i32, i32);
    let _76: (i32, i32);
    let mut _79: bool;
    let mut _80: bool;
    let _82: !;
    let mut _83: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _85: std::string::String;
    let _86: &str;
    let mut _87: (&std::string::String, &std::string::String);
    let mut _88: &std::string::String;
    let _89: &std::string::String;
    let mut _90: &std::rc::Rc<std::string::String>;
    let mut _91: &std::string::String;
    let _92: std::string::String;
    let _93: &str;
    let mut _96: bool;
    let mut _97: bool;
    let _99: !;
    let mut _100: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _101: (&std::string::String, &&str);
    let mut _102: &std::string::String;
    let _103: &std::string::String;
    let mut _104: &std::rc::Rc<std::string::String>;
    let mut _105: &&str;
    let _106: &str;
    let mut _109: bool;
    let mut _110: bool;
    let _112: !;
    let mut _113: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _115: std::cell::RefCell<std::string::String>;
    let mut _116: std::string::String;
    let _117: ();
    let mut _118: &mut std::string::String;
    let mut _119: &mut std::string::String;
    let mut _120: &mut std::cell::RefMut<'_, std::string::String>;
    let mut _121: std::cell::RefMut<'_, std::string::String>;
    let mut _122: &std::cell::RefCell<std::string::String>;
    let _123: &std::cell::RefCell<std::string::String>;
    let mut _124: &std::rc::Rc<std::cell::RefCell<std::string::String>>;
    let _125: &str;
    let mut _126: (&std::string::String, &&str);
    let mut _127: &std::string::String;
    let _128: &std::string::String;
    let mut _129: &std::cell::Ref<'_, std::string::String>;
    let _130: std::cell::Ref<'_, std::string::String>;
    let mut _131: &std::cell::RefCell<std::string::String>;
    let _132: &std::cell::RefCell<std::string::String>;
    let mut _133: &std::rc::Rc<std::cell::RefCell<std::string::String>>;
    let mut _134: &&str;
    let _135: &str;
    let mut _138: bool;
    let mut _139: bool;
    let _141: !;
    let mut _142: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _143: (&std::string::String, &&str);
    let mut _144: &std::string::String;
    let _145: &std::string::String;
    let mut _146: &std::cell::RefMut<'_, std::string::String>;
    let _147: std::cell::RefMut<'_, std::string::String>;
    let mut _148: &std::cell::RefCell<std::string::String>;
    let _149: &std::cell::RefCell<std::string::String>;
    let mut _150: &std::rc::Rc<std::cell::RefCell<std::string::String>>;
    let mut _151: &&str;
    let _152: &str;
    let mut _155: bool;
    let mut _156: bool;
    let _158: !;
    let mut _159: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _161: std::cell::RefCell<Point>;
    let mut _162: Point;
    let mut _163: &mut Point;
    let mut _164: &mut std::cell::RefMut<'_, Point>;
    let mut _165: std::cell::RefMut<'_, Point>;
    let mut _166: &std::cell::RefCell<Point>;
    let _167: &std::cell::RefCell<Point>;
    let mut _168: &std::rc::Rc<std::cell::RefCell<Point>>;
    let mut _169: &mut Point;
    let mut _170: &mut std::cell::RefMut<'_, Point>;
    let mut _171: std::cell::RefMut<'_, Point>;
    let mut _172: &std::cell::RefCell<Point>;
    let _173: &std::cell::RefCell<Point>;
    let mut _174: &std::rc::Rc<std::cell::RefCell<Point>>;
    let mut _175: (&Point, &Point);
    let mut _176: &Point;
    let _177: &Point;
    let mut _178: &std::cell::Ref<'_, Point>;
    let _179: std::cell::Ref<'_, Point>;
    let mut _180: &std::cell::RefCell<Point>;
    let _181: &std::cell::RefCell<Point>;
    let mut _182: &std::rc::Rc<std::cell::RefCell<Point>>;
    let mut _183: &Point;
    let _184: Point;
    let mut _187: bool;
    let mut _188: bool;
    let _190: !;
    let mut _191: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _193: std::cell::RefCell<std::vec::Vec<i32>>;
    let mut _194: std::vec::Vec<i32>;
    let mut _195: std::boxed::Box<[i32]>;
    let mut _196: usize;
    let mut _197: usize;
    let mut _198: *mut u8;
    let mut _199: std::boxed::Box<[i32; 3]>;
    let mut _200: &mut i32;
    let mut _201: &mut std::vec::Vec<i32>;
    let mut _202: &mut std::vec::Vec<i32>;
    let mut _203: &mut std::cell::RefMut<'_, std::vec::Vec<i32>>;
    let mut _204: std::cell::RefMut<'_, std::vec::Vec<i32>>;
    let mut _205: &std::cell::RefCell<std::vec::Vec<i32>>;
    let _206: &std::cell::RefCell<std::vec::Vec<i32>>;
    let mut _207: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<i32>>>;
    let mut _208: &mut i32;
    let mut _209: &mut std::vec::Vec<i32>;
    let mut _210: &mut std::vec::Vec<i32>;
    let mut _211: &mut std::cell::RefMut<'_, std::vec::Vec<i32>>;
    let mut _212: std::cell::RefMut<'_, std::vec::Vec<i32>>;
    let mut _213: &std::cell::RefCell<std::vec::Vec<i32>>;
    let _214: &std::cell::RefCell<std::vec::Vec<i32>>;
    let mut _215: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<i32>>>;
    let mut _216: (&(i32, i32, i32), &(i32, i32, i32));
    let mut _217: &(i32, i32, i32);
    let _218: (i32, i32, i32);
    let mut _219: i32;
    let mut _220: &i32;
    let mut _221: &std::vec::Vec<i32>;
    let _222: &std::vec::Vec<i32>;
    let mut _223: &std::cell::Ref<'_, std::vec::Vec<i32>>;
    let _224: std::cell::Ref<'_, std::vec::Vec<i32>>;
    let mut _225: &std::cell::RefCell<std::vec::Vec<i32>>;
    let _226: &std::cell::RefCell<std::vec::Vec<i32>>;
    let mut _227: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<i32>>>;
    let mut _228: i32;
    let mut _229: &i32;
    let mut _230: &std::vec::Vec<i32>;
    let _231: &std::vec::Vec<i32>;
    let mut _232: &std::cell::Ref<'_, std::vec::Vec<i32>>;
    let _233: std::cell::Ref<'_, std::vec::Vec<i32>>;
    let mut _234: &std::cell::RefCell<std::vec::Vec<i32>>;
    let _235: &std::cell::RefCell<std::vec::Vec<i32>>;
    let mut _236: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<i32>>>;
    let mut _237: i32;
    let mut _238: &i32;
    let mut _239: &std::vec::Vec<i32>;
    let _240: &std::vec::Vec<i32>;
    let mut _241: &std::cell::Ref<'_, std::vec::Vec<i32>>;
    let _242: std::cell::Ref<'_, std::vec::Vec<i32>>;
    let mut _243: &std::cell::RefCell<std::vec::Vec<i32>>;
    let _244: &std::cell::RefCell<std::vec::Vec<i32>>;
    let mut _245: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<i32>>>;
    let mut _246: &(i32, i32, i32);
    let _247: (i32, i32, i32);
    let mut _250: bool;
    let mut _251: bool;
    let _253: !;
    let mut _254: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _255: std::boxed::Box<std::boxed::Box<i32>>;
    let mut _256: std::boxed::Box<i32>;
    let mut _257: *const std::boxed::Box<i32>;
    let mut _258: *const i32;
    let mut _259: *const [i32; 3];
    let mut _266: *const ();
    let mut _267: usize;
    let mut _268: usize;
    let mut _269: usize;
    let mut _270: usize;
    let mut _271: bool;
    let mut _272: *const ();
    let mut _273: usize;
    let mut _274: usize;
    let mut _275: usize;
    let mut _276: usize;
    let mut _277: bool;
    scope 1 {
        debug left_val => _8;
        debug right_val => _9;
        let _14: core::panicking::AssertKind;
        scope 2 {
            debug kind => _14;
        }
    }
    scope 3 {
        debug left_val => _26;
        debug right_val => _27;
        let _32: core::panicking::AssertKind;
        scope 4 {
            debug kind => _32;
        }
    }
    scope 5 {
        debug left_val => _43;
        debug right_val => _44;
        let _47: core::panicking::AssertKind;
        scope 6 {
            debug kind => _47;
        }
    }
    scope 7 {
        debug i => _50;
        let _52: i32;
        scope 8 {
            debug i_value => _52;
            let _77: &(i32, i32);
            let _78: &(i32, i32);
            let _84: std::rc::Rc<std::string::String>;
            scope 9 {
                debug left_val => _77;
                debug right_val => _78;
                let _81: core::panicking::AssertKind;
                scope 10 {
                    debug kind => _81;
                }
            }
            scope 11 {
                debug s => _84;
                let _94: &std::string::String;
                let _95: &std::string::String;
                let _107: &std::string::String;
                let _108: &&str;
                let _114: std::rc::Rc<std::cell::RefCell<std::string::String>>;
                scope 12 {
                    debug left_val => _94;
                    debug right_val => _95;
                    let _98: core::panicking::AssertKind;
                    scope 13 {
                        debug kind => _98;
                    }
                }
                scope 14 {
                    debug left_val => _107;
                    debug right_val => _108;
                    let _111: core::panicking::AssertKind;
                    scope 15 {
                        debug kind => _111;
                    }
                }
                scope 16 {
                    debug mut_s => _114;
                    let _136: &std::string::String;
                    let _137: &&str;
                    let _153: &std::string::String;
                    let _154: &&str;
                    let _160: std::rc::Rc<std::cell::RefCell<Point>>;
                    scope 17 {
                        debug left_val => _136;
                        debug right_val => _137;
                        let _140: core::panicking::AssertKind;
                        scope 18 {
                            debug kind => _140;
                        }
                    }
                    scope 19 {
                        debug left_val => _153;
                        debug right_val => _154;
                        let _157: core::panicking::AssertKind;
                        scope 20 {
                            debug kind => _157;
                        }
                    }
                    scope 21 {
                        debug p => _160;
                        let _185: &Point;
                        let _186: &Point;
                        let _192: std::rc::Rc<std::cell::RefCell<std::vec::Vec<i32>>>;
                        let mut _260: *const ();
                        let mut _261: usize;
                        let mut _262: usize;
                        let mut _263: usize;
                        let mut _264: usize;
                        let mut _265: bool;
                        scope 22 {
                            debug left_val => _185;
                            debug right_val => _186;
                            let _189: core::panicking::AssertKind;
                            scope 23 {
                                debug kind => _189;
                            }
                        }
                        scope 24 {
                            debug v => _192;
                            let _248: &(i32, i32, i32);
                            let _249: &(i32, i32, i32);
                            scope 26 {
                                debug left_val => _248;
                                debug right_val => _249;
                                let _252: core::panicking::AssertKind;
                                scope 27 {
                                    debug kind => _252;
                                }
                            }
                        }
                        scope 25 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _5 = Rc::<i32>::new(const 5_i32) -> bb1;
    }

    bb1: {
        _4 = &_5;
        _3 = <Rc<i32> as Deref>::deref(move _4) -> [return: bb2, unwind: bb146];
    }

    bb2: {
        _2 = _3;
        _7 = const 5_i32;
        _6 = &_7;
        _1 = (move _2, move _6);
        _8 = (_1.0: &i32);
        _9 = (_1.1: &i32);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<i32, i32>(move _14, _8, _9, move _16) -> bb146;
    }

    bb4: {
        drop(_5) -> bb5;
    }

    bb5: {
        _23 = Box::<i32>::new(const 5_i32) -> bb6;
    }

    bb6: {
        _22 = Box::<Box<i32>>::new(move _23) -> bb7;
    }

    bb7: {
        _21 = Rc::<Box<Box<i32>>>::new(move _22) -> bb8;
    }

    bb8: {
        _20 = &_21;
        _19 = <Rc<Box<Box<i32>>> as Deref>::deref(move _20) -> [return: bb9, unwind: bb145];
    }

    bb9: {
        _255 = deref_copy (*_19);
        _257 = (((_255.0: std::ptr::Unique<std::boxed::Box<i32>>).0: std::ptr::NonNull<std::boxed::Box<i32>>).0: *const std::boxed::Box<i32>);
        _272 = _257 as *const () (PtrToPtr);
        _273 = _272 as usize (Transmute);
        _274 = AlignOf(std::boxed::Box<i32>);
        _275 = Sub(_274, const 1_usize);
        _276 = BitAnd(_273, _275);
        _277 = Eq(_276, const 0_usize);
        assert(_277, "misaligned pointer dereference: address must be a multiple of {} but is {}", _274, _273) -> [success: bb150, unwind unreachable];
    }

    bb10: {
        _32 = core::panicking::AssertKind::Eq;
        _34 = Option::<Arguments<'_>>::None;
        _33 = core::panicking::assert_failed::<i32, i32>(move _32, _26, _27, move _34) -> bb145;
    }

    bb11: {
        drop(_21) -> bb12;
    }

    bb12: {
        _40 = Point { x: const 2_isize, y: const 4_isize };
        _39 = Rc::<Point>::new(move _40) -> bb13;
    }

    bb13: {
        _38 = &_39;
        _37 = <Rc<Point> as Deref>::deref(move _38) -> [return: bb14, unwind: bb144];
    }

    bb14: {
        _36 = _37;
        _42 = Point { x: const 2_isize, y: const 4_isize };
        _41 = &_42;
        _35 = (move _36, move _41);
        _43 = (_35.0: &Point);
        _44 = (_35.1: &Point);
        _46 = <Point as PartialEq>::eq(_43, _44) -> [return: bb15, unwind: bb144];
    }

    bb15: {
        _45 = Not(move _46);
        switchInt(move _45) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _47 = core::panicking::AssertKind::Eq;
        _49 = Option::<Arguments<'_>>::None;
        _48 = core::panicking::assert_failed::<Point, Point>(move _47, _43, _44, move _49) -> bb144;
    }

    bb17: {
        drop(_39) -> bb18;
    }

    bb18: {
        _51 = RefCell::<i32>::new(const 2_i32) -> bb19;
    }

    bb19: {
        _50 = Rc::<RefCell<i32>>::new(move _51) -> bb20;
    }

    bb20: {
        _58 = &_50;
        _57 = <Rc<RefCell<i32>> as Deref>::deref(move _58) -> [return: bb21, unwind: bb143];
    }

    bb21: {
        _56 = _57;
        _55 = RefCell::<i32>::borrow(move _56) -> [return: bb22, unwind: bb143];
    }

    bb22: {
        _54 = &_55;
        _53 = <Ref<'_, i32> as Deref>::deref(move _54) -> [return: bb23, unwind: bb142];
    }

    bb23: {
        _52 = (*_53);
        drop(_55) -> [return: bb24, unwind: bb143];
    }

    bb24: {
        _64 = &_50;
        _63 = <Rc<RefCell<i32>> as Deref>::deref(move _64) -> [return: bb25, unwind: bb143];
    }

    bb25: {
        _62 = _63;
        _61 = RefCell::<i32>::borrow_mut(move _62) -> [return: bb26, unwind: bb143];
    }

    bb26: {
        _60 = &mut _61;
        _59 = <RefMut<'_, i32> as DerefMut>::deref_mut(move _60) -> [return: bb27, unwind: bb141];
    }

    bb27: {
        (*_59) = const 5_i32;
        drop(_61) -> [return: bb28, unwind: bb143];
    }

    bb28: {
        _74 = &_50;
        _73 = <Rc<RefCell<i32>> as Deref>::deref(move _74) -> [return: bb29, unwind: bb143];
    }

    bb29: {
        _72 = _73;
        _71 = RefCell::<i32>::borrow(move _72) -> [return: bb30, unwind: bb143];
    }

    bb30: {
        _70 = &_71;
        _69 = <Ref<'_, i32> as Deref>::deref(move _70) -> [return: bb31, unwind: bb140];
    }

    bb31: {
        _68 = (*_69);
        _67 = (_52, move _68);
        _66 = &_67;
        _76 = (const 2_i32, const 5_i32);
        _75 = &_76;
        _65 = (move _66, move _75);
        _77 = (_65.0: &(i32, i32));
        _78 = (_65.1: &(i32, i32));
        _80 = <(i32, i32) as PartialEq>::eq(_77, _78) -> [return: bb32, unwind: bb140];
    }

    bb32: {
        _79 = Not(move _80);
        switchInt(move _79) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        _81 = core::panicking::AssertKind::Eq;
        _83 = Option::<Arguments<'_>>::None;
        _82 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _81, _77, _78, move _83) -> bb140;
    }

    bb34: {
        drop(_71) -> [return: bb35, unwind: bb143];
    }

    bb35: {
        _86 = const "foo";
        _85 = <str as ToString>::to_string(_86) -> [return: bb36, unwind: bb143];
    }

    bb36: {
        _84 = Rc::<String>::new(move _85) -> [return: bb37, unwind: bb143];
    }

    bb37: {
        _90 = &_84;
        _89 = <Rc<String> as Deref>::deref(move _90) -> [return: bb38, unwind: bb139];
    }

    bb38: {
        _88 = _89;
        _93 = const "foo";
        _92 = <str as ToString>::to_string(_93) -> [return: bb39, unwind: bb139];
    }

    bb39: {
        _91 = &_92;
        _87 = (move _88, move _91);
        _94 = (_87.0: &std::string::String);
        _95 = (_87.1: &std::string::String);
        _97 = <String as PartialEq>::eq(_94, _95) -> [return: bb40, unwind: bb138];
    }

    bb40: {
        _96 = Not(move _97);
        switchInt(move _96) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _98 = core::panicking::AssertKind::Eq;
        _100 = Option::<Arguments<'_>>::None;
        _99 = core::panicking::assert_failed::<String, String>(move _98, _94, _95, move _100) -> bb138;
    }

    bb42: {
        drop(_92) -> [return: bb43, unwind: bb139];
    }

    bb43: {
        _104 = &_84;
        _103 = <Rc<String> as Deref>::deref(move _104) -> [return: bb44, unwind: bb139];
    }

    bb44: {
        _102 = _103;
        _106 = const "foo";
        _105 = &_106;
        _101 = (move _102, move _105);
        _107 = (_101.0: &std::string::String);
        _108 = (_101.1: &&str);
        _110 = <String as PartialEq<&str>>::eq(_107, _108) -> [return: bb45, unwind: bb139];
    }

    bb45: {
        _109 = Not(move _110);
        switchInt(move _109) -> [0: bb47, otherwise: bb46];
    }

    bb46: {
        _111 = core::panicking::AssertKind::Eq;
        _113 = Option::<Arguments<'_>>::None;
        _112 = core::panicking::assert_failed::<String, &str>(move _111, _107, _108, move _113) -> bb139;
    }

    bb47: {
        _116 = <String as From<&str>>::from(const "foo") -> [return: bb48, unwind: bb139];
    }

    bb48: {
        _115 = RefCell::<String>::new(move _116) -> [return: bb49, unwind: bb139];
    }

    bb49: {
        _114 = Rc::<RefCell<String>>::new(move _115) -> [return: bb50, unwind: bb139];
    }

    bb50: {
        _124 = &_114;
        _123 = <Rc<RefCell<String>> as Deref>::deref(move _124) -> [return: bb51, unwind: bb137];
    }

    bb51: {
        _122 = _123;
        _121 = RefCell::<String>::borrow_mut(move _122) -> [return: bb52, unwind: bb137];
    }

    bb52: {
        _120 = &mut _121;
        _119 = <RefMut<'_, String> as DerefMut>::deref_mut(move _120) -> [return: bb53, unwind: bb136];
    }

    bb53: {
        _118 = _119;
        _125 = const "bar";
        _117 = String::push_str(move _118, _125) -> [return: bb54, unwind: bb136];
    }

    bb54: {
        drop(_121) -> [return: bb55, unwind: bb137];
    }

    bb55: {
        _133 = &_114;
        _132 = <Rc<RefCell<String>> as Deref>::deref(move _133) -> [return: bb56, unwind: bb137];
    }

    bb56: {
        _131 = _132;
        _130 = RefCell::<String>::borrow(move _131) -> [return: bb57, unwind: bb137];
    }

    bb57: {
        _129 = &_130;
        _128 = <Ref<'_, String> as Deref>::deref(move _129) -> [return: bb58, unwind: bb135];
    }

    bb58: {
        _127 = _128;
        _135 = const "foobar";
        _134 = &_135;
        _126 = (move _127, move _134);
        _136 = (_126.0: &std::string::String);
        _137 = (_126.1: &&str);
        _139 = <String as PartialEq<&str>>::eq(_136, _137) -> [return: bb59, unwind: bb135];
    }

    bb59: {
        _138 = Not(move _139);
        switchInt(move _138) -> [0: bb61, otherwise: bb60];
    }

    bb60: {
        _140 = core::panicking::AssertKind::Eq;
        _142 = Option::<Arguments<'_>>::None;
        _141 = core::panicking::assert_failed::<String, &str>(move _140, _136, _137, move _142) -> bb135;
    }

    bb61: {
        drop(_130) -> [return: bb62, unwind: bb137];
    }

    bb62: {
        _150 = &_114;
        _149 = <Rc<RefCell<String>> as Deref>::deref(move _150) -> [return: bb63, unwind: bb137];
    }

    bb63: {
        _148 = _149;
        _147 = RefCell::<String>::borrow_mut(move _148) -> [return: bb64, unwind: bb137];
    }

    bb64: {
        _146 = &_147;
        _145 = <RefMut<'_, String> as Deref>::deref(move _146) -> [return: bb65, unwind: bb134];
    }

    bb65: {
        _144 = _145;
        _152 = const "foobar";
        _151 = &_152;
        _143 = (move _144, move _151);
        _153 = (_143.0: &std::string::String);
        _154 = (_143.1: &&str);
        _156 = <String as PartialEq<&str>>::eq(_153, _154) -> [return: bb66, unwind: bb134];
    }

    bb66: {
        _155 = Not(move _156);
        switchInt(move _155) -> [0: bb68, otherwise: bb67];
    }

    bb67: {
        _157 = core::panicking::AssertKind::Eq;
        _159 = Option::<Arguments<'_>>::None;
        _158 = core::panicking::assert_failed::<String, &str>(move _157, _153, _154, move _159) -> bb134;
    }

    bb68: {
        drop(_147) -> [return: bb69, unwind: bb137];
    }

    bb69: {
        _162 = Point { x: const 1_isize, y: const 2_isize };
        _161 = RefCell::<Point>::new(move _162) -> [return: bb70, unwind: bb137];
    }

    bb70: {
        _160 = Rc::<RefCell<Point>>::new(move _161) -> [return: bb71, unwind: bb137];
    }

    bb71: {
        _168 = &_160;
        _167 = <Rc<RefCell<Point>> as Deref>::deref(move _168) -> [return: bb72, unwind: bb133];
    }

    bb72: {
        _166 = _167;
        _165 = RefCell::<Point>::borrow_mut(move _166) -> [return: bb73, unwind: bb133];
    }

    bb73: {
        _164 = &mut _165;
        _163 = <RefMut<'_, Point> as DerefMut>::deref_mut(move _164) -> [return: bb74, unwind: bb132];
    }

    bb74: {
        ((*_163).0: isize) = const 3_isize;
        drop(_165) -> [return: bb75, unwind: bb133];
    }

    bb75: {
        _174 = &_160;
        _173 = <Rc<RefCell<Point>> as Deref>::deref(move _174) -> [return: bb76, unwind: bb133];
    }

    bb76: {
        _172 = _173;
        _171 = RefCell::<Point>::borrow_mut(move _172) -> [return: bb77, unwind: bb133];
    }

    bb77: {
        _170 = &mut _171;
        _169 = <RefMut<'_, Point> as DerefMut>::deref_mut(move _170) -> [return: bb78, unwind: bb131];
    }

    bb78: {
        ((*_169).1: isize) = Add(((*_169).1: isize), const 3_isize);
        drop(_171) -> [return: bb79, unwind: bb133];
    }

    bb79: {
        _182 = &_160;
        _181 = <Rc<RefCell<Point>> as Deref>::deref(move _182) -> [return: bb80, unwind: bb133];
    }

    bb80: {
        _180 = _181;
        _179 = RefCell::<Point>::borrow(move _180) -> [return: bb81, unwind: bb133];
    }

    bb81: {
        _178 = &_179;
        _177 = <Ref<'_, Point> as Deref>::deref(move _178) -> [return: bb82, unwind: bb130];
    }

    bb82: {
        _176 = _177;
        _184 = Point { x: const 3_isize, y: const 5_isize };
        _183 = &_184;
        _175 = (move _176, move _183);
        _185 = (_175.0: &Point);
        _186 = (_175.1: &Point);
        _188 = <Point as PartialEq>::eq(_185, _186) -> [return: bb83, unwind: bb130];
    }

    bb83: {
        _187 = Not(move _188);
        switchInt(move _187) -> [0: bb85, otherwise: bb84];
    }

    bb84: {
        _189 = core::panicking::AssertKind::Eq;
        _191 = Option::<Arguments<'_>>::None;
        _190 = core::panicking::assert_failed::<Point, Point>(move _189, _185, _186, move _191) -> bb130;
    }

    bb85: {
        drop(_179) -> [return: bb86, unwind: bb133];
    }

    bb86: {
        _196 = SizeOf([i32; 3]);
        _197 = AlignOf([i32; 3]);
        _198 = alloc::alloc::exchange_malloc(move _196, move _197) -> [return: bb87, unwind: bb133];
    }

    bb87: {
        _199 = ShallowInitBox(move _198, [i32; 3]);
        _259 = (((_199.0: std::ptr::Unique<[i32; 3]>).0: std::ptr::NonNull<[i32; 3]>).0: *const [i32; 3]);
        _260 = _259 as *const () (PtrToPtr);
        _261 = _260 as usize (Transmute);
        _262 = AlignOf(i32);
        _263 = Sub(_262, const 1_usize);
        _264 = BitAnd(_261, _263);
        _265 = Eq(_264, const 0_usize);
        assert(_265, "misaligned pointer dereference: address must be a multiple of {} but is {}", _262, _261) -> [success: bb148, unwind unreachable];
    }

    bb88: {
        _193 = RefCell::<Vec<i32>>::new(move _194) -> [return: bb89, unwind: bb133];
    }

    bb89: {
        _192 = Rc::<RefCell<Vec<i32>>>::new(move _193) -> [return: bb90, unwind: bb133];
    }

    bb90: {
        _207 = &_192;
        _206 = <Rc<RefCell<Vec<i32>>> as Deref>::deref(move _207) -> [return: bb91, unwind: bb129];
    }

    bb91: {
        _205 = _206;
        _204 = RefCell::<Vec<i32>>::borrow_mut(move _205) -> [return: bb92, unwind: bb129];
    }

    bb92: {
        _203 = &mut _204;
        _202 = <RefMut<'_, Vec<i32>> as DerefMut>::deref_mut(move _203) -> [return: bb93, unwind: bb128];
    }

    bb93: {
        _201 = _202;
        _200 = <Vec<i32> as IndexMut<usize>>::index_mut(move _201, const 0_usize) -> [return: bb94, unwind: bb128];
    }

    bb94: {
        (*_200) = const 3_i32;
        drop(_204) -> [return: bb95, unwind: bb129];
    }

    bb95: {
        _215 = &_192;
        _214 = <Rc<RefCell<Vec<i32>>> as Deref>::deref(move _215) -> [return: bb96, unwind: bb129];
    }

    bb96: {
        _213 = _214;
        _212 = RefCell::<Vec<i32>>::borrow_mut(move _213) -> [return: bb97, unwind: bb129];
    }

    bb97: {
        _211 = &mut _212;
        _210 = <RefMut<'_, Vec<i32>> as DerefMut>::deref_mut(move _211) -> [return: bb98, unwind: bb127];
    }

    bb98: {
        _209 = _210;
        _208 = <Vec<i32> as IndexMut<usize>>::index_mut(move _209, const 1_usize) -> [return: bb99, unwind: bb127];
    }

    bb99: {
        (*_208) = Add((*_208), const 3_i32);
        drop(_212) -> [return: bb100, unwind: bb129];
    }

    bb100: {
        _227 = &_192;
        _226 = <Rc<RefCell<Vec<i32>>> as Deref>::deref(move _227) -> [return: bb101, unwind: bb129];
    }

    bb101: {
        _225 = _226;
        _224 = RefCell::<Vec<i32>>::borrow(move _225) -> [return: bb102, unwind: bb129];
    }

    bb102: {
        _223 = &_224;
        _222 = <Ref<'_, Vec<i32>> as Deref>::deref(move _223) -> [return: bb103, unwind: bb126];
    }

    bb103: {
        _221 = _222;
        _220 = <Vec<i32> as Index<usize>>::index(move _221, const 0_usize) -> [return: bb104, unwind: bb126];
    }

    bb104: {
        _219 = (*_220);
        _236 = &_192;
        _235 = <Rc<RefCell<Vec<i32>>> as Deref>::deref(move _236) -> [return: bb105, unwind: bb126];
    }

    bb105: {
        _234 = _235;
        _233 = RefCell::<Vec<i32>>::borrow(move _234) -> [return: bb106, unwind: bb126];
    }

    bb106: {
        _232 = &_233;
        _231 = <Ref<'_, Vec<i32>> as Deref>::deref(move _232) -> [return: bb107, unwind: bb125];
    }

    bb107: {
        _230 = _231;
        _229 = <Vec<i32> as Index<usize>>::index(move _230, const 1_usize) -> [return: bb108, unwind: bb125];
    }

    bb108: {
        _228 = (*_229);
        _245 = &_192;
        _244 = <Rc<RefCell<Vec<i32>>> as Deref>::deref(move _245) -> [return: bb109, unwind: bb125];
    }

    bb109: {
        _243 = _244;
        _242 = RefCell::<Vec<i32>>::borrow(move _243) -> [return: bb110, unwind: bb125];
    }

    bb110: {
        _241 = &_242;
        _240 = <Ref<'_, Vec<i32>> as Deref>::deref(move _241) -> [return: bb111, unwind: bb124];
    }

    bb111: {
        _239 = _240;
        _238 = <Vec<i32> as Index<usize>>::index(move _239, const 2_usize) -> [return: bb112, unwind: bb124];
    }

    bb112: {
        _237 = (*_238);
        _218 = (move _219, move _228, move _237);
        _217 = &_218;
        _247 = (const 3_i32, const 5_i32, const 3_i32);
        _246 = &_247;
        _216 = (move _217, move _246);
        _248 = (_216.0: &(i32, i32, i32));
        _249 = (_216.1: &(i32, i32, i32));
        _251 = <(i32, i32, i32) as PartialEq>::eq(_248, _249) -> [return: bb113, unwind: bb124];
    }

    bb113: {
        _250 = Not(move _251);
        switchInt(move _250) -> [0: bb115, otherwise: bb114];
    }

    bb114: {
        _252 = core::panicking::AssertKind::Eq;
        _254 = Option::<Arguments<'_>>::None;
        _253 = core::panicking::assert_failed::<(i32, i32, i32), (i32, i32, i32)>(move _252, _248, _249, move _254) -> bb124;
    }

    bb115: {
        drop(_242) -> [return: bb116, unwind: bb125];
    }

    bb116: {
        drop(_233) -> [return: bb117, unwind: bb126];
    }

    bb117: {
        drop(_224) -> [return: bb118, unwind: bb129];
    }

    bb118: {
        drop(_192) -> [return: bb119, unwind: bb133];
    }

    bb119: {
        drop(_160) -> [return: bb120, unwind: bb137];
    }

    bb120: {
        drop(_114) -> [return: bb121, unwind: bb139];
    }

    bb121: {
        drop(_84) -> [return: bb122, unwind: bb143];
    }

    bb122: {
        drop(_50) -> bb123;
    }

    bb123: {
        return;
    }

    bb124 (cleanup): {
        drop(_242) -> [return: bb125, unwind terminate];
    }

    bb125 (cleanup): {
        drop(_233) -> [return: bb126, unwind terminate];
    }

    bb126 (cleanup): {
        drop(_224) -> [return: bb129, unwind terminate];
    }

    bb127 (cleanup): {
        drop(_212) -> [return: bb129, unwind terminate];
    }

    bb128 (cleanup): {
        drop(_204) -> [return: bb129, unwind terminate];
    }

    bb129 (cleanup): {
        drop(_192) -> [return: bb133, unwind terminate];
    }

    bb130 (cleanup): {
        drop(_179) -> [return: bb133, unwind terminate];
    }

    bb131 (cleanup): {
        drop(_171) -> [return: bb133, unwind terminate];
    }

    bb132 (cleanup): {
        drop(_165) -> [return: bb133, unwind terminate];
    }

    bb133 (cleanup): {
        drop(_160) -> [return: bb137, unwind terminate];
    }

    bb134 (cleanup): {
        drop(_147) -> [return: bb137, unwind terminate];
    }

    bb135 (cleanup): {
        drop(_130) -> [return: bb137, unwind terminate];
    }

    bb136 (cleanup): {
        drop(_121) -> [return: bb137, unwind terminate];
    }

    bb137 (cleanup): {
        drop(_114) -> [return: bb139, unwind terminate];
    }

    bb138 (cleanup): {
        drop(_92) -> [return: bb139, unwind terminate];
    }

    bb139 (cleanup): {
        drop(_84) -> [return: bb143, unwind terminate];
    }

    bb140 (cleanup): {
        drop(_71) -> [return: bb143, unwind terminate];
    }

    bb141 (cleanup): {
        drop(_61) -> [return: bb143, unwind terminate];
    }

    bb142 (cleanup): {
        drop(_55) -> [return: bb143, unwind terminate];
    }

    bb143 (cleanup): {
        drop(_50) -> [return: bb147, unwind terminate];
    }

    bb144 (cleanup): {
        drop(_39) -> [return: bb147, unwind terminate];
    }

    bb145 (cleanup): {
        drop(_21) -> [return: bb147, unwind terminate];
    }

    bb146 (cleanup): {
        drop(_5) -> [return: bb147, unwind terminate];
    }

    bb147 (cleanup): {
        resume;
    }

    bb148: {
        (*_259) = [const 1_i32, const 2_i32, const 3_i32];
        _195 = move _199 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _194 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _195) -> [return: bb88, unwind: bb133];
    }

    bb149: {
        _18 = &(*_258);
        _25 = const 5_i32;
        _24 = &_25;
        _17 = (move _18, move _24);
        _26 = (_17.0: &i32);
        _27 = (_17.1: &i32);
        _30 = (*_26);
        _31 = (*_27);
        _29 = Eq(move _30, move _31);
        _28 = Not(move _29);
        switchInt(move _28) -> [0: bb11, otherwise: bb10];
    }

    bb150: {
        _256 = deref_copy (*_257);
        _258 = (((_256.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32);
        _266 = _258 as *const () (PtrToPtr);
        _267 = _266 as usize (Transmute);
        _268 = AlignOf(i32);
        _269 = Sub(_268, const 1_usize);
        _270 = BitAnd(_267, _269);
        _271 = Eq(_270, const 0_usize);
        assert(_271, "misaligned pointer dereference: address must be a multiple of {} but is {}", _268, _267) -> [success: bb149, unwind unreachable];
    }
}
