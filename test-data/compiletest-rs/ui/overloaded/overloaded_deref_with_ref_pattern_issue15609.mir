// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::cell::RefCell<main::S>;
    let mut _2: main::S;
    let mut _3: main::E;
    let mut _5: &std::cell::RefCell<main::S>;
    let mut _6: &mut main::S;
    let mut _7: &mut std::cell::RefMut<'_, main::S>;
    let mut _8: isize;
    let mut _12: &std::cell::RefCell<i32>;
    let mut _14: &mut i32;
    let mut _15: &mut std::cell::RefMut<'_, i32>;
    scope 1 {
        debug x => _1;
        let mut _4: std::cell::RefMut<'_, main::S>;
        scope 2 {
            debug b => _4;
            let _9: &mut u32;
            let _10: std::cell::RefCell<i32>;
            scope 3 {
                debug n => _9;
            }
            scope 4 {
                debug x => _10;
                let mut _11: std::cell::RefMut<'_, i32>;
                scope 5 {
                    debug y => _11;
                    let _13: &mut i32;
                    scope 6 {
                        debug z => _13;
                    }
                }
            }
        }
    }

    bb0: {
        _3 = E::Foo(const 0_u32);
        _2 = S { node: move _3 };
        _1 = RefCell::<S>::new(move _2) -> bb1;
    }

    bb1: {
        _5 = &_1;
        _4 = RefCell::<S>::borrow_mut(move _5) -> bb2;
    }

    bb2: {
        _7 = &mut _4;
        _6 = <RefMut<'_, S> as DerefMut>::deref_mut(move _7) -> [return: bb3, unwind: bb12];
    }

    bb3: {
        _8 = discriminant(((*_6).0: main::E));
        switchInt(move _8) -> [0: bb4, otherwise: bb5];
    }

    bb4: {
        _9 = &mut ((((*_6).0: main::E) as Foo).0: u32);
        (*_9) = Add((*_9), const 1_u32);
        goto -> bb5;
    }

    bb5: {
        _10 = RefCell::<i32>::new(const 0_i32) -> [return: bb6, unwind: bb12];
    }

    bb6: {
        _12 = &_10;
        _11 = RefCell::<i32>::borrow_mut(move _12) -> [return: bb7, unwind: bb12];
    }

    bb7: {
        _15 = &mut _11;
        _14 = <RefMut<'_, i32> as DerefMut>::deref_mut(move _15) -> [return: bb8, unwind: bb11];
    }

    bb8: {
        _13 = _14;
        drop(_11) -> [return: bb9, unwind: bb12];
    }

    bb9: {
        drop(_4) -> bb10;
    }

    bb10: {
        return;
    }

    bb11 (cleanup): {
        drop(_11) -> [return: bb12, unwind terminate];
    }

    bb12 (cleanup): {
        drop(_4) -> [return: bb13, unwind terminate];
    }

    bb13 (cleanup): {
        resume;
    }
}

fn foo(_1: &mut RefCell<Option<String>>) -> () {
    debug a => _1;
    let mut _0: ();
    let mut _2: &mut std::option::Option<std::string::String>;
    let mut _3: &mut std::cell::RefMut<'_, std::option::Option<std::string::String>>;
    let mut _4: std::cell::RefMut<'_, std::option::Option<std::string::String>>;
    let mut _5: &std::cell::RefCell<std::option::Option<std::string::String>>;
    let mut _6: isize;
    scope 1 {
        debug s => _7;
        let _7: &mut std::string::String;
    }

    bb0: {
        _5 = &(*_1);
        _4 = RefCell::<Option<String>>::borrow_mut(move _5) -> bb1;
    }

    bb1: {
        _3 = &mut _4;
        _2 = <RefMut<'_, Option<String>> as DerefMut>::deref_mut(move _3) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _6 = discriminant((*_2));
        switchInt(move _6) -> [1: bb3, otherwise: bb4];
    }

    bb3: {
        _7 = &mut (((*_2) as Some).0: std::string::String);
        _0 = String::push(_7, const 'a') -> [return: bb8, unwind: bb6];
    }

    bb4: {
        drop(_4) -> bb5;
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_4) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }

    bb8: {
        goto -> bb4;
    }
}

fn E::Foo(_1: u32) -> E {
    let mut _0: main::E;

    bb0: {
        _0 = E::Foo(move _1);
        return;
    }
}

// MIR FOR CTFE
fn E::Foo(_1: u32) -> E {
    let mut _0: main::E;

    bb0: {
        _0 = E::Foo(move _1);
        return;
    }
}
