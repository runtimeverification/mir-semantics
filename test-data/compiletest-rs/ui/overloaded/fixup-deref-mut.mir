// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/overloaded/fixup-deref-mut.rs:13:1: 13:25>::deref(_1: &Own<T>) -> &T {
    debug self => _1;
    let mut _0: &T;
    let mut _2: *mut T;
    scope 1 {
        let mut _3: *const ();
        let mut _4: usize;
        let mut _5: usize;
        let mut _6: usize;
        let mut _7: usize;
        let mut _8: bool;
    }

    bb0: {
        _2 = deref_copy ((*_1).0: *mut T);
        _3 = _2 as *const () (PtrToPtr);
        _4 = _3 as usize (Transmute);
        _5 = AlignOf(T);
        _6 = Sub(_5, const 1_usize);
        _7 = BitAnd(_4, _6);
        _8 = Eq(_7, const 0_usize);
        assert(_8, "misaligned pointer dereference: address must be a multiple of {} but is {}", _5, _4) -> [success: bb1, unwind unreachable];
    }

    bb1: {
        _0 = &(*_2);
        return;
    }
}

fn <impl at ui/overloaded/fixup-deref-mut.rs:21:1: 21:28>::deref_mut(_1: &mut Own<T>) -> &mut T {
    debug self => _1;
    let mut _0: &mut T;
    let mut _2: *mut T;
    scope 1 {
        let mut _3: *const ();
        let mut _4: usize;
        let mut _5: usize;
        let mut _6: usize;
        let mut _7: usize;
        let mut _8: bool;
    }

    bb0: {
        _2 = deref_copy ((*_1).0: *mut T);
        _3 = _2 as *const () (PtrToPtr);
        _4 = _3 as usize (Transmute);
        _5 = AlignOf(T);
        _6 = Sub(_5, const 1_usize);
        _7 = BitAnd(_4, _6);
        _8 = Eq(_7, const 0_usize);
        assert(_8, "misaligned pointer dereference: address must be a multiple of {} but is {}", _5, _4) -> [success: bb1, unwind unreachable];
    }

    bb1: {
        _0 = &mut (*_2);
        return;
    }
}

fn <impl at ui/overloaded/fixup-deref-mut.rs:32:1: 32:11>::get(_1: &mut Point) -> (isize, isize) {
    debug self => _1;
    let mut _0: (isize, isize);
    let mut _2: isize;
    let mut _3: isize;

    bb0: {
        _2 = ((*_1).0: isize);
        _3 = ((*_1).1: isize);
        _0 = (move _2, move _3);
        return;
    }
}

fn test0(_1: Own<Point>) -> () {
    debug x => _1;
    let mut _0: ();
    let mut _2: (isize, isize);
    let mut _3: &mut Point;
    let mut _4: &mut Point;
    let mut _5: &mut Own<Point>;
    scope 1 {
    }

    bb0: {
        _5 = &mut _1;
        _4 = <Own<Point> as DerefMut>::deref_mut(move _5) -> bb1;
    }

    bb1: {
        _3 = _4;
        _2 = Point::get(move _3) -> bb2;
    }

    bb2: {
        return;
    }
}

fn test1(_1: Own<Own<Own<Point>>>) -> () {
    debug x => _1;
    let mut _0: ();
    let mut _2: (isize, isize);
    let mut _3: &mut Point;
    let mut _4: &mut Point;
    let mut _5: &mut Own<Point>;
    let mut _6: &mut Own<Point>;
    let mut _7: &mut Own<Own<Point>>;
    let mut _8: &mut Own<Own<Point>>;
    let mut _9: &mut Own<Own<Own<Point>>>;
    scope 1 {
    }

    bb0: {
        _9 = &mut _1;
        _8 = <Own<Own<Own<Point>>> as DerefMut>::deref_mut(move _9) -> bb1;
    }

    bb1: {
        _7 = _8;
        _6 = <Own<Own<Point>> as DerefMut>::deref_mut(move _7) -> bb2;
    }

    bb2: {
        _5 = _6;
        _4 = <Own<Point> as DerefMut>::deref_mut(move _5) -> bb3;
    }

    bb3: {
        _3 = _4;
        _2 = Point::get(move _3) -> bb4;
    }

    bb4: {
        return;
    }
}

fn test2(_1: Own<Own<Own<Point>>>) -> () {
    debug x => _1;
    let mut _0: ();
    let mut _2: (isize, isize);
    let mut _3: &mut Point;
    let mut _4: &mut Point;
    let mut _5: &mut Own<Point>;
    let mut _6: &mut Own<Point>;
    let mut _7: &mut Own<Own<Point>>;
    let mut _8: &mut Own<Own<Point>>;
    let mut _9: &mut Own<Own<Own<Point>>>;
    scope 1 {
    }

    bb0: {
        _9 = &mut _1;
        _8 = <Own<Own<Own<Point>>> as DerefMut>::deref_mut(move _9) -> bb1;
    }

    bb1: {
        _7 = _8;
        _6 = <Own<Own<Point>> as DerefMut>::deref_mut(move _7) -> bb2;
    }

    bb2: {
        _5 = _6;
        _4 = <Own<Point> as DerefMut>::deref_mut(move _5) -> bb3;
    }

    bb3: {
        _3 = _4;
        _2 = Point::get(move _3) -> bb4;
    }

    bb4: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
