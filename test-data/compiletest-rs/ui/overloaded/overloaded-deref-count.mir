// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/overloaded/overloaded-deref-count.rs:13:1: 13:24>::new(_1: T) -> DerefCounter<T> {
    debug value => _1;
    let mut _0: DerefCounter<T>;
    let mut _2: std::cell::Cell<usize>;
    let mut _3: T;

    bb0: {
        _2 = Cell::<usize>::new(const 0_usize) -> [return: bb1, unwind: bb2];
    }

    bb1: {
        _3 = move _1;
        _0 = DerefCounter::<T> { count_imm: move _2, count_mut: const 0_usize, value: move _3 };
        return;
    }

    bb2 (cleanup): {
        drop(_1) -> [return: bb3, unwind terminate];
    }

    bb3 (cleanup): {
        resume;
    }
}

fn <impl at ui/overloaded/overloaded-deref-count.rs:13:1: 13:24>::counts(_1: &DerefCounter<T>) -> (usize, usize) {
    debug self => _1;
    let mut _0: (usize, usize);
    let mut _2: usize;
    let mut _3: &std::cell::Cell<usize>;
    let mut _4: usize;

    bb0: {
        _3 = &((*_1).0: std::cell::Cell<usize>);
        _2 = Cell::<usize>::get(move _3) -> bb1;
    }

    bb1: {
        _4 = ((*_1).1: usize);
        _0 = (move _2, move _4);
        return;
    }
}

fn <impl at ui/overloaded/overloaded-deref-count.rs:27:1: 27:34>::deref(_1: &DerefCounter<T>) -> &T {
    debug self => _1;
    let mut _0: &T;
    let _2: ();
    let mut _3: &std::cell::Cell<usize>;
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: &std::cell::Cell<usize>;

    bb0: {
        _3 = &((*_1).0: std::cell::Cell<usize>);
        _6 = &((*_1).0: std::cell::Cell<usize>);
        _5 = Cell::<usize>::get(move _6) -> bb1;
    }

    bb1: {
        _4 = Add(move _5, const 1_usize);
        _2 = Cell::<usize>::set(move _3, move _4) -> bb2;
    }

    bb2: {
        _0 = &((*_1).2: T);
        return;
    }
}

fn <impl at ui/overloaded/overloaded-deref-count.rs:36:1: 36:37>::deref_mut(_1: &mut DerefCounter<T>) -> &mut T {
    debug self => _1;
    let mut _0: &mut T;

    bb0: {
        ((*_1).1: usize) = Add(((*_1).1: usize), const 1_usize);
        _0 = &mut ((*_1).2: T);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: DerefCounter<i32>;
    let mut _3: std::vec::Vec<i32>;
    let mut _4: &i32;
    let mut _5: &DerefCounter<i32>;
    let mut _6: (&(usize, usize), &(usize, usize));
    let mut _7: &(usize, usize);
    let _8: (usize, usize);
    let mut _9: &DerefCounter<i32>;
    let mut _10: &(usize, usize);
    let _11: (usize, usize);
    let mut _14: bool;
    let mut _15: bool;
    let _17: !;
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>;
    let _19: &i32;
    let mut _20: &DerefCounter<i32>;
    let _21: &std::vec::Vec<i32>;
    let mut _22: &DerefCounter<std::vec::Vec<i32>>;
    let mut _23: (&(usize, usize), &(usize, usize));
    let mut _24: &(usize, usize);
    let _25: (usize, usize);
    let mut _26: &DerefCounter<i32>;
    let mut _27: &(usize, usize);
    let _28: (usize, usize);
    let mut _31: bool;
    let mut _32: bool;
    let _34: !;
    let mut _35: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _36: (&(usize, usize), &(usize, usize));
    let mut _37: &(usize, usize);
    let _38: (usize, usize);
    let mut _39: &DerefCounter<std::vec::Vec<i32>>;
    let mut _40: &(usize, usize);
    let _41: (usize, usize);
    let mut _44: bool;
    let mut _45: bool;
    let _47: !;
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _49: &mut i32;
    let mut _50: &mut DerefCounter<i32>;
    let mut _51: &mut std::vec::Vec<i32>;
    let mut _52: &mut DerefCounter<std::vec::Vec<i32>>;
    let mut _53: (&(usize, usize), &(usize, usize));
    let mut _54: &(usize, usize);
    let _55: (usize, usize);
    let mut _56: &DerefCounter<i32>;
    let mut _57: &(usize, usize);
    let _58: (usize, usize);
    let mut _61: bool;
    let mut _62: bool;
    let _64: !;
    let mut _65: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _66: (&(usize, usize), &(usize, usize));
    let mut _67: &(usize, usize);
    let _68: (usize, usize);
    let mut _69: &DerefCounter<std::vec::Vec<i32>>;
    let mut _70: &(usize, usize);
    let _71: (usize, usize);
    let mut _74: bool;
    let mut _75: bool;
    let _77: !;
    let mut _78: std::option::Option<std::fmt::Arguments<'_>>;
    let _80: ();
    let mut _81: &mut std::vec::Vec<i32>;
    let mut _82: &mut i32;
    let mut _83: &mut DerefCounter<i32>;
    let mut _84: std::vec::Vec<i32>;
    let mut _85: &mut std::vec::Vec<i32>;
    let mut _86: &mut DerefCounter<std::vec::Vec<i32>>;
    let mut _87: (&(usize, usize), &(usize, usize));
    let mut _88: &(usize, usize);
    let _89: (usize, usize);
    let mut _90: &DerefCounter<i32>;
    let mut _91: &(usize, usize);
    let _92: (usize, usize);
    let mut _95: bool;
    let mut _96: bool;
    let _98: !;
    let mut _99: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _100: (&(usize, usize), &(usize, usize));
    let mut _101: &(usize, usize);
    let _102: (usize, usize);
    let mut _103: &DerefCounter<std::vec::Vec<i32>>;
    let mut _104: &(usize, usize);
    let _105: (usize, usize);
    let mut _108: bool;
    let mut _109: bool;
    let _111: !;
    let mut _112: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _113: &mut i32;
    let mut _114: &mut DerefCounter<i32>;
    let mut _115: (&(usize, usize), &(usize, usize));
    let mut _116: &(usize, usize);
    let _117: (usize, usize);
    let mut _118: &DerefCounter<i32>;
    let mut _119: &(usize, usize);
    let _120: (usize, usize);
    let mut _123: bool;
    let mut _124: bool;
    let _126: !;
    let mut _127: std::option::Option<std::fmt::Arguments<'_>>;
    let _128: std::string::String;
    let mut _129: &i32;
    let _130: &i32;
    let mut _131: &DerefCounter<i32>;
    let mut _132: (&(usize, usize), &(usize, usize));
    let mut _133: &(usize, usize);
    let _134: (usize, usize);
    let mut _135: &DerefCounter<i32>;
    let mut _136: &(usize, usize);
    let _137: (usize, usize);
    let mut _140: bool;
    let mut _141: bool;
    let _143: !;
    let mut _144: std::option::Option<std::fmt::Arguments<'_>>;
    let _145: ();
    let mut _146: &mut std::vec::Vec<i32>;
    let mut _147: &mut std::vec::Vec<i32>;
    let mut _148: &mut DerefCounter<std::vec::Vec<i32>>;
    let mut _149: (&(usize, usize), &(usize, usize));
    let mut _150: &(usize, usize);
    let _151: (usize, usize);
    let mut _152: &DerefCounter<std::vec::Vec<i32>>;
    let mut _153: &(usize, usize);
    let _154: (usize, usize);
    let mut _157: bool;
    let mut _158: bool;
    let _160: !;
    let mut _161: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _162: (&i32, &i32);
    let mut _163: &i32;
    let _164: &i32;
    let mut _165: &DerefCounter<i32>;
    let mut _166: &i32;
    let _167: i32;
    let mut _170: bool;
    let mut _171: bool;
    let mut _172: i32;
    let mut _173: i32;
    let _175: !;
    let mut _176: std::option::Option<std::fmt::Arguments<'_>>;
    let _178: &[i32; 2];
    let _179: [i32; 2];
    let mut _180: (&std::vec::Vec<i32>, &&[i32]);
    let mut _181: &std::vec::Vec<i32>;
    let _182: &std::vec::Vec<i32>;
    let mut _183: &DerefCounter<std::vec::Vec<i32>>;
    let mut _184: &&[i32];
    let mut _187: bool;
    let mut _188: bool;
    let _190: !;
    let mut _191: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _192: bool;
    let mut _193: bool;
    scope 1 {
        debug n => _1;
        let mut _2: DerefCounter<std::vec::Vec<i32>>;
        scope 2 {
            debug v => _2;
            scope 3 {
                let _12: &(usize, usize);
                let _13: &(usize, usize);
                scope 4 {
                    debug left_val => _12;
                    debug right_val => _13;
                    let _16: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _16;
                    }
                }
                scope 6 {
                    let _29: &(usize, usize);
                    let _30: &(usize, usize);
                    let _42: &(usize, usize);
                    let _43: &(usize, usize);
                    scope 7 {
                        debug left_val => _29;
                        debug right_val => _30;
                        let _33: core::panicking::AssertKind;
                        scope 8 {
                            debug kind => _33;
                        }
                    }
                    scope 9 {
                        debug left_val => _42;
                        debug right_val => _43;
                        let _46: core::panicking::AssertKind;
                        scope 10 {
                            debug kind => _46;
                        }
                    }
                    scope 11 {
                        let _59: &(usize, usize);
                        let _60: &(usize, usize);
                        let _72: &(usize, usize);
                        let _73: &(usize, usize);
                        let mut _79: std::vec::Vec<i32>;
                        scope 12 {
                            debug left_val => _59;
                            debug right_val => _60;
                            let _63: core::panicking::AssertKind;
                            scope 13 {
                                debug kind => _63;
                            }
                        }
                        scope 14 {
                            debug left_val => _72;
                            debug right_val => _73;
                            let _76: core::panicking::AssertKind;
                            scope 15 {
                                debug kind => _76;
                            }
                        }
                        scope 16 {
                            debug v2 => _79;
                            let _93: &(usize, usize);
                            let _94: &(usize, usize);
                            let _106: &(usize, usize);
                            let _107: &(usize, usize);
                            let _121: &(usize, usize);
                            let _122: &(usize, usize);
                            let _138: &(usize, usize);
                            let _139: &(usize, usize);
                            let _155: &(usize, usize);
                            let _156: &(usize, usize);
                            let _168: &i32;
                            let _169: &i32;
                            let _177: &[i32];
                            scope 17 {
                                debug left_val => _93;
                                debug right_val => _94;
                                let _97: core::panicking::AssertKind;
                                scope 18 {
                                    debug kind => _97;
                                }
                            }
                            scope 19 {
                                debug left_val => _106;
                                debug right_val => _107;
                                let _110: core::panicking::AssertKind;
                                scope 20 {
                                    debug kind => _110;
                                }
                            }
                            scope 21 {
                                debug left_val => _121;
                                debug right_val => _122;
                                let _125: core::panicking::AssertKind;
                                scope 22 {
                                    debug kind => _125;
                                }
                            }
                            scope 23 {
                                debug left_val => _138;
                                debug right_val => _139;
                                let _142: core::panicking::AssertKind;
                                scope 24 {
                                    debug kind => _142;
                                }
                            }
                            scope 25 {
                                debug left_val => _155;
                                debug right_val => _156;
                                let _159: core::panicking::AssertKind;
                                scope 26 {
                                    debug kind => _159;
                                }
                            }
                            scope 27 {
                                debug left_val => _168;
                                debug right_val => _169;
                                let _174: core::panicking::AssertKind;
                                scope 28 {
                                    debug kind => _174;
                                }
                            }
                            scope 29 {
                                debug expected => _177;
                                let _185: &std::vec::Vec<i32>;
                                let _186: &&[i32];
                                scope 30 {
                                    debug left_val => _185;
                                    debug right_val => _186;
                                    let _189: core::panicking::AssertKind;
                                    scope 31 {
                                        debug kind => _189;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _193 = const false;
        _192 = const false;
        _1 = DerefCounter::<i32>::new(const 0_i32) -> bb1;
    }

    bb1: {
        _3 = Vec::<i32>::new() -> bb2;
    }

    bb2: {
        _2 = DerefCounter::<Vec<i32>>::new(move _3) -> bb3;
    }

    bb3: {
        _5 = &_1;
        _4 = <DerefCounter<i32> as Deref>::deref(move _5) -> [return: bb4, unwind: bb69];
    }

    bb4: {
        _9 = &_1;
        _8 = DerefCounter::<i32>::counts(move _9) -> [return: bb5, unwind: bb69];
    }

    bb5: {
        _7 = &_8;
        _11 = (const 1_usize, const 0_usize);
        _10 = &_11;
        _6 = (move _7, move _10);
        _12 = (_6.0: &(usize, usize));
        _13 = (_6.1: &(usize, usize));
        _15 = <(usize, usize) as PartialEq>::eq(_12, _13) -> [return: bb6, unwind: bb69];
    }

    bb6: {
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _16 = core::panicking::AssertKind::Eq;
        _18 = Option::<Arguments<'_>>::None;
        _17 = core::panicking::assert_failed::<(usize, usize), (usize, usize)>(move _16, _12, _13, move _18) -> bb69;
    }

    bb8: {
        _20 = &_1;
        _19 = <DerefCounter<i32> as Deref>::deref(move _20) -> [return: bb9, unwind: bb69];
    }

    bb9: {
        _22 = &_2;
        _21 = <DerefCounter<Vec<i32>> as Deref>::deref(move _22) -> [return: bb10, unwind: bb69];
    }

    bb10: {
        _26 = &_1;
        _25 = DerefCounter::<i32>::counts(move _26) -> [return: bb11, unwind: bb69];
    }

    bb11: {
        _24 = &_25;
        _28 = (const 2_usize, const 0_usize);
        _27 = &_28;
        _23 = (move _24, move _27);
        _29 = (_23.0: &(usize, usize));
        _30 = (_23.1: &(usize, usize));
        _32 = <(usize, usize) as PartialEq>::eq(_29, _30) -> [return: bb12, unwind: bb69];
    }

    bb12: {
        _31 = Not(move _32);
        switchInt(move _31) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _33 = core::panicking::AssertKind::Eq;
        _35 = Option::<Arguments<'_>>::None;
        _34 = core::panicking::assert_failed::<(usize, usize), (usize, usize)>(move _33, _29, _30, move _35) -> bb69;
    }

    bb14: {
        _39 = &_2;
        _38 = DerefCounter::<Vec<i32>>::counts(move _39) -> [return: bb15, unwind: bb69];
    }

    bb15: {
        _37 = &_38;
        _41 = (const 1_usize, const 0_usize);
        _40 = &_41;
        _36 = (move _37, move _40);
        _42 = (_36.0: &(usize, usize));
        _43 = (_36.1: &(usize, usize));
        _45 = <(usize, usize) as PartialEq>::eq(_42, _43) -> [return: bb16, unwind: bb69];
    }

    bb16: {
        _44 = Not(move _45);
        switchInt(move _44) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _46 = core::panicking::AssertKind::Eq;
        _48 = Option::<Arguments<'_>>::None;
        _47 = core::panicking::assert_failed::<(usize, usize), (usize, usize)>(move _46, _42, _43, move _48) -> bb69;
    }

    bb18: {
        _50 = &mut _1;
        _49 = <DerefCounter<i32> as DerefMut>::deref_mut(move _50) -> [return: bb19, unwind: bb69];
    }

    bb19: {
        _52 = &mut _2;
        _51 = <DerefCounter<Vec<i32>> as DerefMut>::deref_mut(move _52) -> [return: bb20, unwind: bb69];
    }

    bb20: {
        _56 = &_1;
        _55 = DerefCounter::<i32>::counts(move _56) -> [return: bb21, unwind: bb69];
    }

    bb21: {
        _54 = &_55;
        _58 = (const 2_usize, const 1_usize);
        _57 = &_58;
        _53 = (move _54, move _57);
        _59 = (_53.0: &(usize, usize));
        _60 = (_53.1: &(usize, usize));
        _62 = <(usize, usize) as PartialEq>::eq(_59, _60) -> [return: bb22, unwind: bb69];
    }

    bb22: {
        _61 = Not(move _62);
        switchInt(move _61) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _63 = core::panicking::AssertKind::Eq;
        _65 = Option::<Arguments<'_>>::None;
        _64 = core::panicking::assert_failed::<(usize, usize), (usize, usize)>(move _63, _59, _60, move _65) -> bb69;
    }

    bb24: {
        _69 = &_2;
        _68 = DerefCounter::<Vec<i32>>::counts(move _69) -> [return: bb25, unwind: bb69];
    }

    bb25: {
        _67 = &_68;
        _71 = (const 1_usize, const 1_usize);
        _70 = &_71;
        _66 = (move _67, move _70);
        _72 = (_66.0: &(usize, usize));
        _73 = (_66.1: &(usize, usize));
        _75 = <(usize, usize) as PartialEq>::eq(_72, _73) -> [return: bb26, unwind: bb69];
    }

    bb26: {
        _74 = Not(move _75);
        switchInt(move _74) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _76 = core::panicking::AssertKind::Eq;
        _78 = Option::<Arguments<'_>>::None;
        _77 = core::panicking::assert_failed::<(usize, usize), (usize, usize)>(move _76, _72, _73, move _78) -> bb69;
    }

    bb28: {
        _79 = Vec::<i32>::new() -> [return: bb29, unwind: bb69];
    }

    bb29: {
        _193 = const true;
        _81 = &mut _79;
        _80 = Vec::<i32>::push(move _81, const 1_i32) -> [return: bb30, unwind: bb74];
    }

    bb30: {
        _83 = &mut _1;
        _82 = <DerefCounter<i32> as DerefMut>::deref_mut(move _83) -> [return: bb31, unwind: bb74];
    }

    bb31: {
        (*_82) = const 5_i32;
        _193 = const false;
        _192 = const true;
        _84 = move _79;
        _86 = &mut _2;
        _85 = <DerefCounter<Vec<i32>> as DerefMut>::deref_mut(move _86) -> [return: bb32, unwind: bb72];
    }

    bb32: {
        drop((*_85)) -> [return: bb33, unwind: bb34];
    }

    bb33: {
        _192 = const false;
        (*_85) = move _84;
        _192 = const false;
        _90 = &_1;
        _89 = DerefCounter::<i32>::counts(move _90) -> [return: bb35, unwind: bb74];
    }

    bb34 (cleanup): {
        _192 = const false;
        (*_85) = move _84;
        goto -> bb72;
    }

    bb35: {
        _88 = &_89;
        _92 = (const 2_usize, const 2_usize);
        _91 = &_92;
        _87 = (move _88, move _91);
        _93 = (_87.0: &(usize, usize));
        _94 = (_87.1: &(usize, usize));
        _96 = <(usize, usize) as PartialEq>::eq(_93, _94) -> [return: bb36, unwind: bb74];
    }

    bb36: {
        _95 = Not(move _96);
        switchInt(move _95) -> [0: bb38, otherwise: bb37];
    }

    bb37: {
        _97 = core::panicking::AssertKind::Eq;
        _99 = Option::<Arguments<'_>>::None;
        _98 = core::panicking::assert_failed::<(usize, usize), (usize, usize)>(move _97, _93, _94, move _99) -> bb74;
    }

    bb38: {
        _103 = &_2;
        _102 = DerefCounter::<Vec<i32>>::counts(move _103) -> [return: bb39, unwind: bb74];
    }

    bb39: {
        _101 = &_102;
        _105 = (const 1_usize, const 2_usize);
        _104 = &_105;
        _100 = (move _101, move _104);
        _106 = (_100.0: &(usize, usize));
        _107 = (_100.1: &(usize, usize));
        _109 = <(usize, usize) as PartialEq>::eq(_106, _107) -> [return: bb40, unwind: bb74];
    }

    bb40: {
        _108 = Not(move _109);
        switchInt(move _108) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _110 = core::panicking::AssertKind::Eq;
        _112 = Option::<Arguments<'_>>::None;
        _111 = core::panicking::assert_failed::<(usize, usize), (usize, usize)>(move _110, _106, _107, move _112) -> bb74;
    }

    bb42: {
        _114 = &mut _1;
        _113 = <DerefCounter<i32> as DerefMut>::deref_mut(move _114) -> [return: bb43, unwind: bb74];
    }

    bb43: {
        (*_113) = Sub((*_113), const 3_i32);
        _118 = &_1;
        _117 = DerefCounter::<i32>::counts(move _118) -> [return: bb44, unwind: bb74];
    }

    bb44: {
        _116 = &_117;
        _120 = (const 2_usize, const 3_usize);
        _119 = &_120;
        _115 = (move _116, move _119);
        _121 = (_115.0: &(usize, usize));
        _122 = (_115.1: &(usize, usize));
        _124 = <(usize, usize) as PartialEq>::eq(_121, _122) -> [return: bb45, unwind: bb74];
    }

    bb45: {
        _123 = Not(move _124);
        switchInt(move _123) -> [0: bb47, otherwise: bb46];
    }

    bb46: {
        _125 = core::panicking::AssertKind::Eq;
        _127 = Option::<Arguments<'_>>::None;
        _126 = core::panicking::assert_failed::<(usize, usize), (usize, usize)>(move _125, _121, _122, move _127) -> bb74;
    }

    bb47: {
        _131 = &_1;
        _130 = <DerefCounter<i32> as Deref>::deref(move _131) -> [return: bb48, unwind: bb74];
    }

    bb48: {
        _129 = _130;
        _128 = <i32 as ToString>::to_string(move _129) -> [return: bb49, unwind: bb74];
    }

    bb49: {
        drop(_128) -> [return: bb50, unwind: bb74];
    }

    bb50: {
        _135 = &_1;
        _134 = DerefCounter::<i32>::counts(move _135) -> [return: bb51, unwind: bb74];
    }

    bb51: {
        _133 = &_134;
        _137 = (const 3_usize, const 3_usize);
        _136 = &_137;
        _132 = (move _133, move _136);
        _138 = (_132.0: &(usize, usize));
        _139 = (_132.1: &(usize, usize));
        _141 = <(usize, usize) as PartialEq>::eq(_138, _139) -> [return: bb52, unwind: bb74];
    }

    bb52: {
        _140 = Not(move _141);
        switchInt(move _140) -> [0: bb54, otherwise: bb53];
    }

    bb53: {
        _142 = core::panicking::AssertKind::Eq;
        _144 = Option::<Arguments<'_>>::None;
        _143 = core::panicking::assert_failed::<(usize, usize), (usize, usize)>(move _142, _138, _139, move _144) -> bb74;
    }

    bb54: {
        _148 = &mut _2;
        _147 = <DerefCounter<Vec<i32>> as DerefMut>::deref_mut(move _148) -> [return: bb55, unwind: bb74];
    }

    bb55: {
        _146 = _147;
        _145 = Vec::<i32>::push(move _146, const 2_i32) -> [return: bb56, unwind: bb74];
    }

    bb56: {
        _152 = &_2;
        _151 = DerefCounter::<Vec<i32>>::counts(move _152) -> [return: bb57, unwind: bb74];
    }

    bb57: {
        _150 = &_151;
        _154 = (const 1_usize, const 3_usize);
        _153 = &_154;
        _149 = (move _150, move _153);
        _155 = (_149.0: &(usize, usize));
        _156 = (_149.1: &(usize, usize));
        _158 = <(usize, usize) as PartialEq>::eq(_155, _156) -> [return: bb58, unwind: bb74];
    }

    bb58: {
        _157 = Not(move _158);
        switchInt(move _157) -> [0: bb60, otherwise: bb59];
    }

    bb59: {
        _159 = core::panicking::AssertKind::Eq;
        _161 = Option::<Arguments<'_>>::None;
        _160 = core::panicking::assert_failed::<(usize, usize), (usize, usize)>(move _159, _155, _156, move _161) -> bb74;
    }

    bb60: {
        _165 = &_1;
        _164 = <DerefCounter<i32> as Deref>::deref(move _165) -> [return: bb61, unwind: bb74];
    }

    bb61: {
        _163 = _164;
        _167 = const 2_i32;
        _166 = &_167;
        _162 = (move _163, move _166);
        _168 = (_162.0: &i32);
        _169 = (_162.1: &i32);
        _172 = (*_168);
        _173 = (*_169);
        _171 = Eq(move _172, move _173);
        _170 = Not(move _171);
        switchInt(move _170) -> [0: bb63, otherwise: bb62];
    }

    bb62: {
        _174 = core::panicking::AssertKind::Eq;
        _176 = Option::<Arguments<'_>>::None;
        _175 = core::panicking::assert_failed::<i32, i32>(move _174, _168, _169, move _176) -> bb74;
    }

    bb63: {
        _179 = [const 1_i32, const 2_i32];
        _178 = &_179;
        _177 = _178 as &[i32] (Pointer(Unsize));
        _183 = &_2;
        _182 = <DerefCounter<Vec<i32>> as Deref>::deref(move _183) -> [return: bb64, unwind: bb74];
    }

    bb64: {
        _181 = _182;
        _184 = &_177;
        _180 = (move _181, move _184);
        _185 = (_180.0: &std::vec::Vec<i32>);
        _186 = (_180.1: &&[i32]);
        _188 = <Vec<i32> as PartialEq<&[i32]>>::eq(_185, _186) -> [return: bb65, unwind: bb74];
    }

    bb65: {
        _187 = Not(move _188);
        switchInt(move _187) -> [0: bb67, otherwise: bb66];
    }

    bb66: {
        _189 = core::panicking::AssertKind::Eq;
        _191 = Option::<Arguments<'_>>::None;
        _190 = core::panicking::assert_failed::<Vec<i32>, &[i32]>(move _189, _185, _186, move _191) -> bb74;
    }

    bb67: {
        _193 = const false;
        drop(_2) -> bb68;
    }

    bb68: {
        return;
    }

    bb69 (cleanup): {
        drop(_2) -> [return: bb70, unwind terminate];
    }

    bb70 (cleanup): {
        resume;
    }

    bb71 (cleanup): {
        drop(_84) -> [return: bb74, unwind terminate];
    }

    bb72 (cleanup): {
        switchInt(_192) -> [0: bb74, otherwise: bb71];
    }

    bb73 (cleanup): {
        drop(_79) -> [return: bb69, unwind terminate];
    }

    bb74 (cleanup): {
        switchInt(_193) -> [0: bb69, otherwise: bb73];
    }
}
