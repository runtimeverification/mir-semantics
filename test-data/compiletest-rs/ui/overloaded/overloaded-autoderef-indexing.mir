// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/overloaded/overloaded-autoderef-indexing.rs:9:1: 9:40>::deref(_1: &DerefArray<'_, T>) -> &&[T] {
    debug self => _1;
    let mut _0: &&[T];

    bb0: {
        _0 = &((*_1).0: &[T]);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: &[i32; 3];
    let _2: [i32; 3];
    let mut _3: (&i32, &i32);
    let mut _4: &i32;
    let _5: &&[i32];
    let mut _6: &DerefArray<'_, i32>;
    let _7: DerefArray<'_, i32>;
    let mut _8: &[i32];
    let _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _12: &i32;
    let _13: i32;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: i32;
    let mut _19: i32;
    let _21: !;
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _23: &[i32];
    let mut _24: &[i32];
    scope 1 {
        debug a => _1;
        let _14: &i32;
        let _15: &i32;
        scope 2 {
            debug left_val => _14;
            debug right_val => _15;
            let _20: core::panicking::AssertKind;
            scope 3 {
                debug kind => _20;
            }
        }
    }

    bb0: {
        _2 = [const 1_i32, const 2_i32, const 3_i32];
        _1 = &_2;
        _8 = _1 as &[i32] (Pointer(Unsize));
        _7 = DerefArray::<'_, i32> { inner: move _8 };
        _6 = &_7;
        _5 = <DerefArray<'_, i32> as Deref>::deref(move _6) -> bb1;
    }

    bb1: {
        _9 = const 1_usize;
        _23 = deref_copy (*_5);
        _10 = Len((*_23));
        _11 = Lt(_9, _10);
        assert(move _11, "index out of bounds: the length is {} but the index is {}", move _10, _9) -> bb2;
    }

    bb2: {
        _24 = deref_copy (*_5);
        _4 = &(*_24)[_9];
        _13 = const 2_i32;
        _12 = &_13;
        _3 = (move _4, move _12);
        _14 = (_3.0: &i32);
        _15 = (_3.1: &i32);
        _18 = (*_14);
        _19 = (*_15);
        _17 = Eq(move _18, move _19);
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _20 = core::panicking::AssertKind::Eq;
        _22 = Option::<Arguments<'_>>::None;
        _21 = core::panicking::assert_failed::<i32, i32>(move _20, _14, _15, move _22);
    }

    bb4: {
        return;
    }
}
