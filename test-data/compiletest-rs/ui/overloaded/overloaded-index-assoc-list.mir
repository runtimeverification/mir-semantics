// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/overloaded/overloaded-index-assoc-list.rs:10:10: 10:15>::clone(_1: &AssociationPair<K, V>) -> AssociationPair<K, V> {
    debug self => _1;
    let mut _0: AssociationPair<K, V>;
    let mut _2: K;
    let _3: &K;
    let mut _4: V;
    let _5: &V;

    bb0: {
        _3 = &((*_1).0: K);
        _2 = <K as Clone>::clone(_3) -> bb1;
    }

    bb1: {
        _5 = &((*_1).1: V);
        _4 = <V as Clone>::clone(_5) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        _0 = AssociationPair::<K, V> { key: move _2, value: move _4 };
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn <impl at ui/overloaded/overloaded-index-assoc-list.rs:16:1: 16:31>::push(_1: &mut AssociationList<K, V>, _2: K, _3: V) -> () {
    debug self => _1;
    debug key => _2;
    debug value => _3;
    let mut _0: ();
    let _4: ();
    let mut _5: &mut std::vec::Vec<AssociationPair<K, V>>;
    let mut _6: AssociationPair<K, V>;

    bb0: {
        _5 = &mut ((*_1).0: std::vec::Vec<AssociationPair<K, V>>);
        _6 = AssociationPair::<K, V> { key: move _2, value: move _3 };
        _4 = Vec::<AssociationPair<K, V>>::push(move _5, move _6) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/overloaded/overloaded-index-assoc-list.rs:22:1: 22:88>::index(_1: &AssociationList<K, V>, _2: &K) -> &V {
    debug self => _1;
    debug index => _2;
    let mut _0: &V;
    let mut _3: std::slice::Iter<'_, AssociationPair<K, V>>;
    let mut _4: &std::vec::Vec<AssociationPair<K, V>>;
    let mut _5: std::slice::Iter<'_, AssociationPair<K, V>>;
    let mut _6: std::option::Option<&AssociationPair<K, V>>;
    let mut _7: &mut std::slice::Iter<'_, AssociationPair<K, V>>;
    let mut _8: isize;
    let mut _10: bool;
    let mut _11: &K;
    let mut _12: &K;
    let _13: !;
    let mut _14: std::fmt::Arguments<'_>;
    let mut _15: &[&str];
    let _16: &[&str; 1];
    let _17: [&str; 1];
    let mut _18: &[core::fmt::rt::Argument<'_>];
    let _19: &[core::fmt::rt::Argument<'_>; 1];
    let _20: [core::fmt::rt::Argument<'_>; 1];
    let mut _21: core::fmt::rt::Argument<'_>;
    let _22: &&K;
    scope 1 {
        debug iter => _5;
        let _9: &AssociationPair<K, V>;
        scope 2 {
            debug pair => _9;
        }
    }

    bb0: {
        _4 = &((*_1).0: std::vec::Vec<AssociationPair<K, V>>);
        _3 = <&Vec<AssociationPair<K, V>> as IntoIterator>::into_iter(move _4) -> bb1;
    }

    bb1: {
        _5 = move _3;
        goto -> bb2;
    }

    bb2: {
        _7 = &mut _5;
        _6 = <std::slice::Iter<'_, AssociationPair<K, V>> as Iterator>::next(_7) -> bb3;
    }

    bb3: {
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        _9 = ((_6 as Some).0: &AssociationPair<K, V>);
        _11 = &((*_9).0: K);
        _12 = _2;
        _10 = <K as PartialEq>::eq(move _11, move _12) -> bb7;
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _17 = [const "No value found for key: "];
        _16 = &_17;
        _15 = _16 as &[&str] (Pointer(Unsize));
        _22 = &_2;
        _21 = core::fmt::rt::Argument::<'_>::new_debug::<&K>(_22) -> bb9;
    }

    bb7: {
        switchInt(move _10) -> [0: bb2, otherwise: bb8];
    }

    bb8: {
        _0 = &((*_9).1: V);
        return;
    }

    bb9: {
        _20 = [move _21];
        _19 = &_20;
        _18 = _19 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _14 = Arguments::<'_>::new_v1(move _15, move _18) -> bb10;
    }

    bb10: {
        _13 = panic_fmt(move _14);
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::string::String;
    let _2: &str;
    let _4: &str;
    let mut _6: std::vec::Vec<AssociationPair<std::string::String, i32>>;
    let _7: ();
    let mut _8: &mut AssociationList<std::string::String, i32>;
    let mut _9: std::string::String;
    let mut _10: &std::string::String;
    let _11: ();
    let mut _12: &mut AssociationList<std::string::String, i32>;
    let mut _13: std::string::String;
    let mut _14: &std::string::String;
    let mut _15: (&i32, &i32);
    let mut _16: &i32;
    let _17: &i32;
    let mut _18: &AssociationList<std::string::String, i32>;
    let _19: &std::string::String;
    let mut _20: &i32;
    let _21: i32;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: i32;
    let mut _27: i32;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&i32, &i32);
    let mut _32: &i32;
    let _33: &i32;
    let mut _34: &AssociationList<std::string::String, i32>;
    let _35: &std::string::String;
    let mut _36: &i32;
    let _37: i32;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: i32;
    let mut _43: i32;
    let _45: !;
    let mut _46: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _47: (&i32, &i32);
    let mut _48: &i32;
    let _49: &i32;
    let mut _50: &AssociationList<std::string::String, i32>;
    let _51: &std::string::String;
    let mut _52: &i32;
    let _53: i32;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: i32;
    let mut _59: i32;
    let _61: !;
    let mut _62: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _63: (&i32, &i32);
    let mut _64: &i32;
    let _65: &i32;
    let mut _66: &AssociationList<std::string::String, i32>;
    let _67: &std::string::String;
    let mut _68: &i32;
    let _69: i32;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: i32;
    let mut _75: i32;
    let _77: !;
    let mut _78: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug foo => _1;
        let _3: std::string::String;
        scope 2 {
            debug bar => _3;
            let mut _5: AssociationList<std::string::String, i32>;
            scope 3 {
                debug list => _5;
                let _22: &i32;
                let _23: &i32;
                let _38: &i32;
                let _39: &i32;
                let _54: &i32;
                let _55: &i32;
                let _70: &i32;
                let _71: &i32;
                scope 4 {
                    debug left_val => _22;
                    debug right_val => _23;
                    let _28: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _28;
                    }
                }
                scope 6 {
                    debug left_val => _38;
                    debug right_val => _39;
                    let _44: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _44;
                    }
                }
                scope 8 {
                    debug left_val => _54;
                    debug right_val => _55;
                    let _60: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _60;
                    }
                }
                scope 10 {
                    debug left_val => _70;
                    debug right_val => _71;
                    let _76: core::panicking::AssertKind;
                    scope 11 {
                        debug kind => _76;
                    }
                }
            }
        }
    }

    bb0: {
        _2 = const "foo";
        _1 = <str as ToString>::to_string(_2) -> bb1;
    }

    bb1: {
        _4 = const "bar";
        _3 = <str as ToString>::to_string(_4) -> [return: bb2, unwind: bb25];
    }

    bb2: {
        _6 = Vec::<AssociationPair<String, i32>>::new() -> [return: bb3, unwind: bb24];
    }

    bb3: {
        _5 = AssociationList::<String, i32> { pairs: move _6 };
        _8 = &mut _5;
        _10 = &_1;
        _9 = <String as Clone>::clone(move _10) -> [return: bb4, unwind: bb23];
    }

    bb4: {
        _7 = AssociationList::<String, i32>::push(move _8, move _9, const 22_i32) -> [return: bb5, unwind: bb23];
    }

    bb5: {
        _12 = &mut _5;
        _14 = &_3;
        _13 = <String as Clone>::clone(move _14) -> [return: bb6, unwind: bb23];
    }

    bb6: {
        _11 = AssociationList::<String, i32>::push(move _12, move _13, const 44_i32) -> [return: bb7, unwind: bb23];
    }

    bb7: {
        _18 = &_5;
        _19 = &_1;
        _17 = <AssociationList<String, i32> as Index<&String>>::index(move _18, _19) -> [return: bb8, unwind: bb23];
    }

    bb8: {
        _16 = _17;
        _21 = const 22_i32;
        _20 = &_21;
        _15 = (move _16, move _20);
        _22 = (_15.0: &i32);
        _23 = (_15.1: &i32);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<i32, i32>(move _28, _22, _23, move _30) -> bb23;
    }

    bb10: {
        _34 = &_5;
        _35 = &_3;
        _33 = <AssociationList<String, i32> as Index<&String>>::index(move _34, _35) -> [return: bb11, unwind: bb23];
    }

    bb11: {
        _32 = _33;
        _37 = const 44_i32;
        _36 = &_37;
        _31 = (move _32, move _36);
        _38 = (_31.0: &i32);
        _39 = (_31.1: &i32);
        _42 = (*_38);
        _43 = (*_39);
        _41 = Eq(move _42, move _43);
        _40 = Not(move _41);
        switchInt(move _40) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _44 = core::panicking::AssertKind::Eq;
        _46 = Option::<Arguments<'_>>::None;
        _45 = core::panicking::assert_failed::<i32, i32>(move _44, _38, _39, move _46) -> bb23;
    }

    bb13: {
        _50 = &_5;
        _51 = &_1;
        _49 = <AssociationList<String, i32> as Index<&String>>::index(move _50, _51) -> [return: bb14, unwind: bb23];
    }

    bb14: {
        _48 = _49;
        _53 = const 22_i32;
        _52 = &_53;
        _47 = (move _48, move _52);
        _54 = (_47.0: &i32);
        _55 = (_47.1: &i32);
        _58 = (*_54);
        _59 = (*_55);
        _57 = Eq(move _58, move _59);
        _56 = Not(move _57);
        switchInt(move _56) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _60 = core::panicking::AssertKind::Eq;
        _62 = Option::<Arguments<'_>>::None;
        _61 = core::panicking::assert_failed::<i32, i32>(move _60, _54, _55, move _62) -> bb23;
    }

    bb16: {
        _66 = &_5;
        _67 = &_3;
        _65 = <AssociationList<String, i32> as Index<&String>>::index(move _66, _67) -> [return: bb17, unwind: bb23];
    }

    bb17: {
        _64 = _65;
        _69 = const 44_i32;
        _68 = &_69;
        _63 = (move _64, move _68);
        _70 = (_63.0: &i32);
        _71 = (_63.1: &i32);
        _74 = (*_70);
        _75 = (*_71);
        _73 = Eq(move _74, move _75);
        _72 = Not(move _73);
        switchInt(move _72) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _76 = core::panicking::AssertKind::Eq;
        _78 = Option::<Arguments<'_>>::None;
        _77 = core::panicking::assert_failed::<i32, i32>(move _76, _70, _71, move _78) -> bb23;
    }

    bb19: {
        drop(_5) -> [return: bb20, unwind: bb24];
    }

    bb20: {
        drop(_3) -> [return: bb21, unwind: bb25];
    }

    bb21: {
        drop(_1) -> bb22;
    }

    bb22: {
        return;
    }

    bb23 (cleanup): {
        drop(_5) -> [return: bb24, unwind terminate];
    }

    bb24 (cleanup): {
        drop(_3) -> [return: bb25, unwind terminate];
    }

    bb25 (cleanup): {
        drop(_1) -> [return: bb26, unwind terminate];
    }

    bb26 (cleanup): {
        resume;
    }
}
