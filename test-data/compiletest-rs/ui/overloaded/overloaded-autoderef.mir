// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/overloaded/overloaded-autoderef.rs:8:10: 8:19>::eq(_1: &Point, _2: &Point) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: isize;
    let mut _5: isize;
    let mut _6: bool;
    let mut _7: isize;
    let mut _8: isize;

    bb0: {
        _4 = ((*_1).0: isize);
        _5 = ((*_2).0: isize);
        _3 = Eq(move _4, move _5);
        switchInt(move _3) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _7 = ((*_1).1: isize);
        _8 = ((*_2).1: isize);
        _6 = Eq(move _7, move _8);
        _0 = move _6;
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn <impl at ui/overloaded/overloaded-autoderef.rs:8:21: 8:26>::fmt(_1: &Point, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &isize;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&isize;
    let _10: &isize;

    bb0: {
        _3 = const "Point";
        _4 = const "x";
        _6 = &((*_1).0: isize);
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize));
        _7 = const "y";
        _10 = &((*_1).1: isize);
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::boxed::Box<usize>;
    let mut _3: Point;
    let mut _4: (&isize, &isize);
    let mut _5: &isize;
    let _6: &Point;
    let mut _7: &std::rc::Rc<Point>;
    let mut _8: &isize;
    let _9: isize;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: isize;
    let mut _15: isize;
    let _17: !;
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _19: (&isize, &isize);
    let mut _20: &isize;
    let _21: &Point;
    let mut _22: &std::rc::Rc<Point>;
    let mut _23: &isize;
    let _24: isize;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: isize;
    let mut _30: isize;
    let _32: !;
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _35: std::cell::RefCell<i32>;
    let mut _37: &i32;
    let mut _38: &std::cell::Ref<'_, i32>;
    let _39: std::cell::Ref<'_, i32>;
    let mut _40: &std::cell::RefCell<i32>;
    let _41: &std::cell::RefCell<i32>;
    let mut _42: &std::rc::Rc<std::cell::RefCell<i32>>;
    let mut _43: &mut i32;
    let mut _44: &mut std::cell::RefMut<'_, i32>;
    let mut _45: std::cell::RefMut<'_, i32>;
    let mut _46: &std::cell::RefCell<i32>;
    let _47: &std::cell::RefCell<i32>;
    let mut _48: &std::rc::Rc<std::cell::RefCell<i32>>;
    let mut _49: (&(i32, i32), &(i32, i32));
    let mut _50: &(i32, i32);
    let _51: (i32, i32);
    let mut _52: i32;
    let mut _53: &i32;
    let mut _54: &std::cell::Ref<'_, i32>;
    let _55: std::cell::Ref<'_, i32>;
    let mut _56: &std::cell::RefCell<i32>;
    let _57: &std::cell::RefCell<i32>;
    let mut _58: &std::rc::Rc<std::cell::RefCell<i32>>;
    let mut _59: &(i32, i32);
    let _60: (i32, i32);
    let mut _63: bool;
    let mut _64: bool;
    let _66: !;
    let mut _67: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _69: std::string::String;
    let _70: &str;
    let mut _71: (&&str, &&str);
    let mut _72: &&str;
    let _73: &str;
    let _74: &str;
    let mut _75: &std::string::String;
    let _76: &std::string::String;
    let mut _77: &std::rc::Rc<std::string::String>;
    let mut _78: &&str;
    let _79: &str;
    let mut _82: bool;
    let mut _83: bool;
    let _85: !;
    let mut _86: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _88: std::cell::RefCell<std::string::String>;
    let mut _89: std::string::String;
    let _90: ();
    let mut _91: &mut std::string::String;
    let mut _92: &mut std::string::String;
    let mut _93: &mut std::cell::RefMut<'_, std::string::String>;
    let mut _94: std::cell::RefMut<'_, std::string::String>;
    let mut _95: &std::cell::RefCell<std::string::String>;
    let _96: &std::cell::RefCell<std::string::String>;
    let mut _97: &std::rc::Rc<std::cell::RefCell<std::string::String>>;
    let _98: &str;
    let mut _99: (&&str, &&str);
    let mut _100: &&str;
    let _101: &str;
    let _102: &str;
    let mut _103: &std::string::String;
    let _104: &std::string::String;
    let mut _105: &std::cell::Ref<'_, std::string::String>;
    let _106: std::cell::Ref<'_, std::string::String>;
    let mut _107: &std::cell::RefCell<std::string::String>;
    let _108: &std::cell::RefCell<std::string::String>;
    let mut _109: &std::rc::Rc<std::cell::RefCell<std::string::String>>;
    let mut _110: &&str;
    let _111: &str;
    let mut _114: bool;
    let mut _115: bool;
    let _117: !;
    let mut _118: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _119: (&&str, &&str);
    let mut _120: &&str;
    let _121: &str;
    let _122: &str;
    let mut _123: &std::string::String;
    let _124: &std::string::String;
    let mut _125: &std::cell::RefMut<'_, std::string::String>;
    let _126: std::cell::RefMut<'_, std::string::String>;
    let mut _127: &std::cell::RefCell<std::string::String>;
    let _128: &std::cell::RefCell<std::string::String>;
    let mut _129: &std::rc::Rc<std::cell::RefCell<std::string::String>>;
    let mut _130: &&str;
    let _131: &str;
    let mut _134: bool;
    let mut _135: bool;
    let _137: !;
    let mut _138: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _140: std::cell::RefCell<Point>;
    let mut _141: Point;
    let mut _142: &mut Point;
    let mut _143: &mut std::cell::RefMut<'_, Point>;
    let mut _144: std::cell::RefMut<'_, Point>;
    let mut _145: &std::cell::RefCell<Point>;
    let _146: &std::cell::RefCell<Point>;
    let mut _147: &std::rc::Rc<std::cell::RefCell<Point>>;
    let mut _148: &mut Point;
    let mut _149: &mut std::cell::RefMut<'_, Point>;
    let mut _150: std::cell::RefMut<'_, Point>;
    let mut _151: &std::cell::RefCell<Point>;
    let _152: &std::cell::RefCell<Point>;
    let mut _153: &std::rc::Rc<std::cell::RefCell<Point>>;
    let mut _154: (&Point, &Point);
    let mut _155: &Point;
    let _156: &Point;
    let mut _157: &std::cell::Ref<'_, Point>;
    let _158: std::cell::Ref<'_, Point>;
    let mut _159: &std::cell::RefCell<Point>;
    let _160: &std::cell::RefCell<Point>;
    let mut _161: &std::rc::Rc<std::cell::RefCell<Point>>;
    let mut _162: &Point;
    let _163: Point;
    let mut _166: bool;
    let mut _167: bool;
    let _169: !;
    let mut _170: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _172: std::cell::RefCell<[i32; 3]>;
    let mut _173: [i32; 3];
    let mut _174: &mut [i32; 3];
    let mut _175: &mut std::cell::RefMut<'_, [i32; 3]>;
    let mut _176: std::cell::RefMut<'_, [i32; 3]>;
    let mut _177: &std::cell::RefCell<[i32; 3]>;
    let _178: &std::cell::RefCell<[i32; 3]>;
    let mut _179: &std::rc::Rc<std::cell::RefCell<[i32; 3]>>;
    let _180: usize;
    let mut _181: usize;
    let mut _182: bool;
    let mut _183: &mut [i32; 3];
    let mut _184: &mut std::cell::RefMut<'_, [i32; 3]>;
    let mut _185: std::cell::RefMut<'_, [i32; 3]>;
    let mut _186: &std::cell::RefCell<[i32; 3]>;
    let _187: &std::cell::RefCell<[i32; 3]>;
    let mut _188: &std::rc::Rc<std::cell::RefCell<[i32; 3]>>;
    let _189: usize;
    let mut _190: usize;
    let mut _191: bool;
    let mut _192: (&(i32, i32, i32), &(i32, i32, i32));
    let mut _193: &(i32, i32, i32);
    let _194: (i32, i32, i32);
    let mut _195: i32;
    let mut _196: &[i32; 3];
    let mut _197: &std::cell::Ref<'_, [i32; 3]>;
    let _198: std::cell::Ref<'_, [i32; 3]>;
    let mut _199: &std::cell::RefCell<[i32; 3]>;
    let _200: &std::cell::RefCell<[i32; 3]>;
    let mut _201: &std::rc::Rc<std::cell::RefCell<[i32; 3]>>;
    let _202: usize;
    let mut _203: usize;
    let mut _204: bool;
    let mut _205: i32;
    let mut _206: &[i32; 3];
    let mut _207: &std::cell::Ref<'_, [i32; 3]>;
    let _208: std::cell::Ref<'_, [i32; 3]>;
    let mut _209: &std::cell::RefCell<[i32; 3]>;
    let _210: &std::cell::RefCell<[i32; 3]>;
    let mut _211: &std::rc::Rc<std::cell::RefCell<[i32; 3]>>;
    let _212: usize;
    let mut _213: usize;
    let mut _214: bool;
    let mut _215: i32;
    let mut _216: &[i32; 3];
    let mut _217: &std::cell::Ref<'_, [i32; 3]>;
    let _218: std::cell::Ref<'_, [i32; 3]>;
    let mut _219: &std::cell::RefCell<[i32; 3]>;
    let _220: &std::cell::RefCell<[i32; 3]>;
    let mut _221: &std::rc::Rc<std::cell::RefCell<[i32; 3]>>;
    let _222: usize;
    let mut _223: usize;
    let mut _224: bool;
    let mut _225: &(i32, i32, i32);
    let _226: (i32, i32, i32);
    let mut _229: bool;
    let mut _230: bool;
    let _232: !;
    let mut _233: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug box_5 => _1;
        let _2: std::rc::Rc<Point>;
        scope 2 {
            debug point => _2;
            let _10: &isize;
            let _11: &isize;
            let _25: &isize;
            let _26: &isize;
            let _34: std::rc::Rc<std::cell::RefCell<i32>>;
            scope 3 {
                debug left_val => _10;
                debug right_val => _11;
                let _16: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _16;
                }
            }
            scope 5 {
                debug left_val => _25;
                debug right_val => _26;
                let _31: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _31;
                }
            }
            scope 7 {
                debug i => _34;
                let _36: i32;
                scope 8 {
                    debug i_value => _36;
                    let _61: &(i32, i32);
                    let _62: &(i32, i32);
                    let _68: std::rc::Rc<std::string::String>;
                    scope 9 {
                        debug left_val => _61;
                        debug right_val => _62;
                        let _65: core::panicking::AssertKind;
                        scope 10 {
                            debug kind => _65;
                        }
                    }
                    scope 11 {
                        debug s => _68;
                        let _80: &&str;
                        let _81: &&str;
                        let _87: std::rc::Rc<std::cell::RefCell<std::string::String>>;
                        scope 12 {
                            debug left_val => _80;
                            debug right_val => _81;
                            let _84: core::panicking::AssertKind;
                            scope 13 {
                                debug kind => _84;
                            }
                        }
                        scope 14 {
                            debug mut_s => _87;
                            let _112: &&str;
                            let _113: &&str;
                            let _132: &&str;
                            let _133: &&str;
                            let _139: std::rc::Rc<std::cell::RefCell<Point>>;
                            scope 15 {
                                debug left_val => _112;
                                debug right_val => _113;
                                let _116: core::panicking::AssertKind;
                                scope 16 {
                                    debug kind => _116;
                                }
                            }
                            scope 17 {
                                debug left_val => _132;
                                debug right_val => _133;
                                let _136: core::panicking::AssertKind;
                                scope 18 {
                                    debug kind => _136;
                                }
                            }
                            scope 19 {
                                debug p => _139;
                                let _164: &Point;
                                let _165: &Point;
                                let _171: std::rc::Rc<std::cell::RefCell<[i32; 3]>>;
                                scope 20 {
                                    debug left_val => _164;
                                    debug right_val => _165;
                                    let _168: core::panicking::AssertKind;
                                    scope 21 {
                                        debug kind => _168;
                                    }
                                }
                                scope 22 {
                                    debug v => _171;
                                    let _227: &(i32, i32, i32);
                                    let _228: &(i32, i32, i32);
                                    scope 23 {
                                        debug left_val => _227;
                                        debug right_val => _228;
                                        let _231: core::panicking::AssertKind;
                                        scope 24 {
                                            debug kind => _231;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = Box::<usize>::new(const 5_usize) -> bb1;
    }

    bb1: {
        _3 = Point { x: const 2_isize, y: const 4_isize };
        _2 = Rc::<Point>::new(move _3) -> [return: bb2, unwind: bb131];
    }

    bb2: {
        _7 = &_2;
        _6 = <Rc<Point> as Deref>::deref(move _7) -> [return: bb3, unwind: bb130];
    }

    bb3: {
        _5 = &((*_6).0: isize);
        _9 = const 2_isize;
        _8 = &_9;
        _4 = (move _5, move _8);
        _10 = (_4.0: &isize);
        _11 = (_4.1: &isize);
        _14 = (*_10);
        _15 = (*_11);
        _13 = Eq(move _14, move _15);
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _16 = core::panicking::AssertKind::Eq;
        _18 = Option::<Arguments<'_>>::None;
        _17 = core::panicking::assert_failed::<isize, isize>(move _16, _10, _11, move _18) -> bb130;
    }

    bb5: {
        _22 = &_2;
        _21 = <Rc<Point> as Deref>::deref(move _22) -> [return: bb6, unwind: bb130];
    }

    bb6: {
        _20 = &((*_21).1: isize);
        _24 = const 4_isize;
        _23 = &_24;
        _19 = (move _20, move _23);
        _25 = (_19.0: &isize);
        _26 = (_19.1: &isize);
        _29 = (*_25);
        _30 = (*_26);
        _28 = Eq(move _29, move _30);
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _31 = core::panicking::AssertKind::Eq;
        _33 = Option::<Arguments<'_>>::None;
        _32 = core::panicking::assert_failed::<isize, isize>(move _31, _25, _26, move _33) -> bb130;
    }

    bb8: {
        _35 = RefCell::<i32>::new(const 2_i32) -> [return: bb9, unwind: bb130];
    }

    bb9: {
        _34 = Rc::<RefCell<i32>>::new(move _35) -> [return: bb10, unwind: bb130];
    }

    bb10: {
        _42 = &_34;
        _41 = <Rc<RefCell<i32>> as Deref>::deref(move _42) -> [return: bb11, unwind: bb129];
    }

    bb11: {
        _40 = _41;
        _39 = RefCell::<i32>::borrow(move _40) -> [return: bb12, unwind: bb129];
    }

    bb12: {
        _38 = &_39;
        _37 = <Ref<'_, i32> as Deref>::deref(move _38) -> [return: bb13, unwind: bb128];
    }

    bb13: {
        _36 = (*_37);
        drop(_39) -> [return: bb14, unwind: bb129];
    }

    bb14: {
        _48 = &_34;
        _47 = <Rc<RefCell<i32>> as Deref>::deref(move _48) -> [return: bb15, unwind: bb129];
    }

    bb15: {
        _46 = _47;
        _45 = RefCell::<i32>::borrow_mut(move _46) -> [return: bb16, unwind: bb129];
    }

    bb16: {
        _44 = &mut _45;
        _43 = <RefMut<'_, i32> as DerefMut>::deref_mut(move _44) -> [return: bb17, unwind: bb127];
    }

    bb17: {
        (*_43) = const 5_i32;
        drop(_45) -> [return: bb18, unwind: bb129];
    }

    bb18: {
        _58 = &_34;
        _57 = <Rc<RefCell<i32>> as Deref>::deref(move _58) -> [return: bb19, unwind: bb129];
    }

    bb19: {
        _56 = _57;
        _55 = RefCell::<i32>::borrow(move _56) -> [return: bb20, unwind: bb129];
    }

    bb20: {
        _54 = &_55;
        _53 = <Ref<'_, i32> as Deref>::deref(move _54) -> [return: bb21, unwind: bb126];
    }

    bb21: {
        _52 = (*_53);
        _51 = (_36, move _52);
        _50 = &_51;
        _60 = (const 2_i32, const 5_i32);
        _59 = &_60;
        _49 = (move _50, move _59);
        _61 = (_49.0: &(i32, i32));
        _62 = (_49.1: &(i32, i32));
        _64 = <(i32, i32) as PartialEq>::eq(_61, _62) -> [return: bb22, unwind: bb126];
    }

    bb22: {
        _63 = Not(move _64);
        switchInt(move _63) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _65 = core::panicking::AssertKind::Eq;
        _67 = Option::<Arguments<'_>>::None;
        _66 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _65, _61, _62, move _67) -> bb126;
    }

    bb24: {
        drop(_55) -> [return: bb25, unwind: bb129];
    }

    bb25: {
        _70 = const "foo";
        _69 = <str as ToString>::to_string(_70) -> [return: bb26, unwind: bb129];
    }

    bb26: {
        _68 = Rc::<String>::new(move _69) -> [return: bb27, unwind: bb129];
    }

    bb27: {
        _77 = &_68;
        _76 = <Rc<String> as Deref>::deref(move _77) -> [return: bb28, unwind: bb125];
    }

    bb28: {
        _75 = _76;
        _74 = <String as Deref>::deref(move _75) -> [return: bb29, unwind: bb125];
    }

    bb29: {
        _73 = _74;
        _72 = &_73;
        _79 = const "foo";
        _78 = &_79;
        _71 = (move _72, move _78);
        _80 = (_71.0: &&str);
        _81 = (_71.1: &&str);
        _83 = <&str as PartialEq>::eq(_80, _81) -> [return: bb30, unwind: bb125];
    }

    bb30: {
        _82 = Not(move _83);
        switchInt(move _82) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _84 = core::panicking::AssertKind::Eq;
        _86 = Option::<Arguments<'_>>::None;
        _85 = core::panicking::assert_failed::<&str, &str>(move _84, _80, _81, move _86) -> bb125;
    }

    bb32: {
        _89 = <String as From<&str>>::from(const "foo") -> [return: bb33, unwind: bb125];
    }

    bb33: {
        _88 = RefCell::<String>::new(move _89) -> [return: bb34, unwind: bb125];
    }

    bb34: {
        _87 = Rc::<RefCell<String>>::new(move _88) -> [return: bb35, unwind: bb125];
    }

    bb35: {
        _97 = &_87;
        _96 = <Rc<RefCell<String>> as Deref>::deref(move _97) -> [return: bb36, unwind: bb124];
    }

    bb36: {
        _95 = _96;
        _94 = RefCell::<String>::borrow_mut(move _95) -> [return: bb37, unwind: bb124];
    }

    bb37: {
        _93 = &mut _94;
        _92 = <RefMut<'_, String> as DerefMut>::deref_mut(move _93) -> [return: bb38, unwind: bb123];
    }

    bb38: {
        _91 = _92;
        _98 = const "bar";
        _90 = String::push_str(move _91, _98) -> [return: bb39, unwind: bb123];
    }

    bb39: {
        drop(_94) -> [return: bb40, unwind: bb124];
    }

    bb40: {
        _109 = &_87;
        _108 = <Rc<RefCell<String>> as Deref>::deref(move _109) -> [return: bb41, unwind: bb124];
    }

    bb41: {
        _107 = _108;
        _106 = RefCell::<String>::borrow(move _107) -> [return: bb42, unwind: bb124];
    }

    bb42: {
        _105 = &_106;
        _104 = <Ref<'_, String> as Deref>::deref(move _105) -> [return: bb43, unwind: bb122];
    }

    bb43: {
        _103 = _104;
        _102 = <String as Deref>::deref(move _103) -> [return: bb44, unwind: bb122];
    }

    bb44: {
        _101 = _102;
        _100 = &_101;
        _111 = const "foobar";
        _110 = &_111;
        _99 = (move _100, move _110);
        _112 = (_99.0: &&str);
        _113 = (_99.1: &&str);
        _115 = <&str as PartialEq>::eq(_112, _113) -> [return: bb45, unwind: bb122];
    }

    bb45: {
        _114 = Not(move _115);
        switchInt(move _114) -> [0: bb47, otherwise: bb46];
    }

    bb46: {
        _116 = core::panicking::AssertKind::Eq;
        _118 = Option::<Arguments<'_>>::None;
        _117 = core::panicking::assert_failed::<&str, &str>(move _116, _112, _113, move _118) -> bb122;
    }

    bb47: {
        drop(_106) -> [return: bb48, unwind: bb124];
    }

    bb48: {
        _129 = &_87;
        _128 = <Rc<RefCell<String>> as Deref>::deref(move _129) -> [return: bb49, unwind: bb124];
    }

    bb49: {
        _127 = _128;
        _126 = RefCell::<String>::borrow_mut(move _127) -> [return: bb50, unwind: bb124];
    }

    bb50: {
        _125 = &_126;
        _124 = <RefMut<'_, String> as Deref>::deref(move _125) -> [return: bb51, unwind: bb121];
    }

    bb51: {
        _123 = _124;
        _122 = <String as Deref>::deref(move _123) -> [return: bb52, unwind: bb121];
    }

    bb52: {
        _121 = _122;
        _120 = &_121;
        _131 = const "foobar";
        _130 = &_131;
        _119 = (move _120, move _130);
        _132 = (_119.0: &&str);
        _133 = (_119.1: &&str);
        _135 = <&str as PartialEq>::eq(_132, _133) -> [return: bb53, unwind: bb121];
    }

    bb53: {
        _134 = Not(move _135);
        switchInt(move _134) -> [0: bb55, otherwise: bb54];
    }

    bb54: {
        _136 = core::panicking::AssertKind::Eq;
        _138 = Option::<Arguments<'_>>::None;
        _137 = core::panicking::assert_failed::<&str, &str>(move _136, _132, _133, move _138) -> bb121;
    }

    bb55: {
        drop(_126) -> [return: bb56, unwind: bb124];
    }

    bb56: {
        _141 = Point { x: const 1_isize, y: const 2_isize };
        _140 = RefCell::<Point>::new(move _141) -> [return: bb57, unwind: bb124];
    }

    bb57: {
        _139 = Rc::<RefCell<Point>>::new(move _140) -> [return: bb58, unwind: bb124];
    }

    bb58: {
        _147 = &_139;
        _146 = <Rc<RefCell<Point>> as Deref>::deref(move _147) -> [return: bb59, unwind: bb120];
    }

    bb59: {
        _145 = _146;
        _144 = RefCell::<Point>::borrow_mut(move _145) -> [return: bb60, unwind: bb120];
    }

    bb60: {
        _143 = &mut _144;
        _142 = <RefMut<'_, Point> as DerefMut>::deref_mut(move _143) -> [return: bb61, unwind: bb119];
    }

    bb61: {
        ((*_142).0: isize) = const 3_isize;
        drop(_144) -> [return: bb62, unwind: bb120];
    }

    bb62: {
        _153 = &_139;
        _152 = <Rc<RefCell<Point>> as Deref>::deref(move _153) -> [return: bb63, unwind: bb120];
    }

    bb63: {
        _151 = _152;
        _150 = RefCell::<Point>::borrow_mut(move _151) -> [return: bb64, unwind: bb120];
    }

    bb64: {
        _149 = &mut _150;
        _148 = <RefMut<'_, Point> as DerefMut>::deref_mut(move _149) -> [return: bb65, unwind: bb118];
    }

    bb65: {
        ((*_148).1: isize) = Add(((*_148).1: isize), const 3_isize);
        drop(_150) -> [return: bb66, unwind: bb120];
    }

    bb66: {
        _161 = &_139;
        _160 = <Rc<RefCell<Point>> as Deref>::deref(move _161) -> [return: bb67, unwind: bb120];
    }

    bb67: {
        _159 = _160;
        _158 = RefCell::<Point>::borrow(move _159) -> [return: bb68, unwind: bb120];
    }

    bb68: {
        _157 = &_158;
        _156 = <Ref<'_, Point> as Deref>::deref(move _157) -> [return: bb69, unwind: bb117];
    }

    bb69: {
        _155 = _156;
        _163 = Point { x: const 3_isize, y: const 5_isize };
        _162 = &_163;
        _154 = (move _155, move _162);
        _164 = (_154.0: &Point);
        _165 = (_154.1: &Point);
        _167 = <Point as PartialEq>::eq(_164, _165) -> [return: bb70, unwind: bb117];
    }

    bb70: {
        _166 = Not(move _167);
        switchInt(move _166) -> [0: bb72, otherwise: bb71];
    }

    bb71: {
        _168 = core::panicking::AssertKind::Eq;
        _170 = Option::<Arguments<'_>>::None;
        _169 = core::panicking::assert_failed::<Point, Point>(move _168, _164, _165, move _170) -> bb117;
    }

    bb72: {
        drop(_158) -> [return: bb73, unwind: bb120];
    }

    bb73: {
        _173 = [const 1_i32, const 2_i32, const 3_i32];
        _172 = RefCell::<[i32; 3]>::new(move _173) -> [return: bb74, unwind: bb120];
    }

    bb74: {
        _171 = Rc::<RefCell<[i32; 3]>>::new(move _172) -> [return: bb75, unwind: bb120];
    }

    bb75: {
        _179 = &_171;
        _178 = <Rc<RefCell<[i32; 3]>> as Deref>::deref(move _179) -> [return: bb76, unwind: bb116];
    }

    bb76: {
        _177 = _178;
        _176 = RefCell::<[i32; 3]>::borrow_mut(move _177) -> [return: bb77, unwind: bb116];
    }

    bb77: {
        _175 = &mut _176;
        _174 = <RefMut<'_, [i32; 3]> as DerefMut>::deref_mut(move _175) -> [return: bb78, unwind: bb115];
    }

    bb78: {
        _180 = const 0_usize;
        _181 = const 3_usize;
        _182 = Lt(_180, _181);
        assert(move _182, "index out of bounds: the length is {} but the index is {}", move _181, _180) -> [success: bb79, unwind: bb115];
    }

    bb79: {
        (*_174)[_180] = const 3_i32;
        drop(_176) -> [return: bb80, unwind: bb116];
    }

    bb80: {
        _188 = &_171;
        _187 = <Rc<RefCell<[i32; 3]>> as Deref>::deref(move _188) -> [return: bb81, unwind: bb116];
    }

    bb81: {
        _186 = _187;
        _185 = RefCell::<[i32; 3]>::borrow_mut(move _186) -> [return: bb82, unwind: bb116];
    }

    bb82: {
        _184 = &mut _185;
        _183 = <RefMut<'_, [i32; 3]> as DerefMut>::deref_mut(move _184) -> [return: bb83, unwind: bb114];
    }

    bb83: {
        _189 = const 1_usize;
        _190 = const 3_usize;
        _191 = Lt(_189, _190);
        assert(move _191, "index out of bounds: the length is {} but the index is {}", move _190, _189) -> [success: bb84, unwind: bb114];
    }

    bb84: {
        (*_183)[_189] = Add((*_183)[_189], const 3_i32);
        drop(_185) -> [return: bb85, unwind: bb116];
    }

    bb85: {
        _201 = &_171;
        _200 = <Rc<RefCell<[i32; 3]>> as Deref>::deref(move _201) -> [return: bb86, unwind: bb116];
    }

    bb86: {
        _199 = _200;
        _198 = RefCell::<[i32; 3]>::borrow(move _199) -> [return: bb87, unwind: bb116];
    }

    bb87: {
        _197 = &_198;
        _196 = <Ref<'_, [i32; 3]> as Deref>::deref(move _197) -> [return: bb88, unwind: bb113];
    }

    bb88: {
        _202 = const 0_usize;
        _203 = const 3_usize;
        _204 = Lt(_202, _203);
        assert(move _204, "index out of bounds: the length is {} but the index is {}", move _203, _202) -> [success: bb89, unwind: bb113];
    }

    bb89: {
        _195 = (*_196)[_202];
        _211 = &_171;
        _210 = <Rc<RefCell<[i32; 3]>> as Deref>::deref(move _211) -> [return: bb90, unwind: bb113];
    }

    bb90: {
        _209 = _210;
        _208 = RefCell::<[i32; 3]>::borrow(move _209) -> [return: bb91, unwind: bb113];
    }

    bb91: {
        _207 = &_208;
        _206 = <Ref<'_, [i32; 3]> as Deref>::deref(move _207) -> [return: bb92, unwind: bb112];
    }

    bb92: {
        _212 = const 1_usize;
        _213 = const 3_usize;
        _214 = Lt(_212, _213);
        assert(move _214, "index out of bounds: the length is {} but the index is {}", move _213, _212) -> [success: bb93, unwind: bb112];
    }

    bb93: {
        _205 = (*_206)[_212];
        _221 = &_171;
        _220 = <Rc<RefCell<[i32; 3]>> as Deref>::deref(move _221) -> [return: bb94, unwind: bb112];
    }

    bb94: {
        _219 = _220;
        _218 = RefCell::<[i32; 3]>::borrow(move _219) -> [return: bb95, unwind: bb112];
    }

    bb95: {
        _217 = &_218;
        _216 = <Ref<'_, [i32; 3]> as Deref>::deref(move _217) -> [return: bb96, unwind: bb111];
    }

    bb96: {
        _222 = const 2_usize;
        _223 = const 3_usize;
        _224 = Lt(_222, _223);
        assert(move _224, "index out of bounds: the length is {} but the index is {}", move _223, _222) -> [success: bb97, unwind: bb111];
    }

    bb97: {
        _215 = (*_216)[_222];
        _194 = (move _195, move _205, move _215);
        _193 = &_194;
        _226 = (const 3_i32, const 5_i32, const 3_i32);
        _225 = &_226;
        _192 = (move _193, move _225);
        _227 = (_192.0: &(i32, i32, i32));
        _228 = (_192.1: &(i32, i32, i32));
        _230 = <(i32, i32, i32) as PartialEq>::eq(_227, _228) -> [return: bb98, unwind: bb111];
    }

    bb98: {
        _229 = Not(move _230);
        switchInt(move _229) -> [0: bb100, otherwise: bb99];
    }

    bb99: {
        _231 = core::panicking::AssertKind::Eq;
        _233 = Option::<Arguments<'_>>::None;
        _232 = core::panicking::assert_failed::<(i32, i32, i32), (i32, i32, i32)>(move _231, _227, _228, move _233) -> bb111;
    }

    bb100: {
        drop(_218) -> [return: bb101, unwind: bb112];
    }

    bb101: {
        drop(_208) -> [return: bb102, unwind: bb113];
    }

    bb102: {
        drop(_198) -> [return: bb103, unwind: bb116];
    }

    bb103: {
        drop(_171) -> [return: bb104, unwind: bb120];
    }

    bb104: {
        drop(_139) -> [return: bb105, unwind: bb124];
    }

    bb105: {
        drop(_87) -> [return: bb106, unwind: bb125];
    }

    bb106: {
        drop(_68) -> [return: bb107, unwind: bb129];
    }

    bb107: {
        drop(_34) -> [return: bb108, unwind: bb130];
    }

    bb108: {
        drop(_2) -> [return: bb109, unwind: bb131];
    }

    bb109: {
        drop(_1) -> bb110;
    }

    bb110: {
        return;
    }

    bb111 (cleanup): {
        drop(_218) -> [return: bb112, unwind terminate];
    }

    bb112 (cleanup): {
        drop(_208) -> [return: bb113, unwind terminate];
    }

    bb113 (cleanup): {
        drop(_198) -> [return: bb116, unwind terminate];
    }

    bb114 (cleanup): {
        drop(_185) -> [return: bb116, unwind terminate];
    }

    bb115 (cleanup): {
        drop(_176) -> [return: bb116, unwind terminate];
    }

    bb116 (cleanup): {
        drop(_171) -> [return: bb120, unwind terminate];
    }

    bb117 (cleanup): {
        drop(_158) -> [return: bb120, unwind terminate];
    }

    bb118 (cleanup): {
        drop(_150) -> [return: bb120, unwind terminate];
    }

    bb119 (cleanup): {
        drop(_144) -> [return: bb120, unwind terminate];
    }

    bb120 (cleanup): {
        drop(_139) -> [return: bb124, unwind terminate];
    }

    bb121 (cleanup): {
        drop(_126) -> [return: bb124, unwind terminate];
    }

    bb122 (cleanup): {
        drop(_106) -> [return: bb124, unwind terminate];
    }

    bb123 (cleanup): {
        drop(_94) -> [return: bb124, unwind terminate];
    }

    bb124 (cleanup): {
        drop(_87) -> [return: bb125, unwind terminate];
    }

    bb125 (cleanup): {
        drop(_68) -> [return: bb129, unwind terminate];
    }

    bb126 (cleanup): {
        drop(_55) -> [return: bb129, unwind terminate];
    }

    bb127 (cleanup): {
        drop(_45) -> [return: bb129, unwind terminate];
    }

    bb128 (cleanup): {
        drop(_39) -> [return: bb129, unwind terminate];
    }

    bb129 (cleanup): {
        drop(_34) -> [return: bb130, unwind terminate];
    }

    bb130 (cleanup): {
        drop(_2) -> [return: bb131, unwind terminate];
    }

    bb131 (cleanup): {
        drop(_1) -> [return: bb132, unwind terminate];
    }

    bb132 (cleanup): {
        resume;
    }
}
