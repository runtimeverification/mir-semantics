// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/overloaded/overloaded-index-in-field.rs:16:1: 16:26>::index(_1: &Foo, _2: isize) -> &isize {
    debug self => _1;
    debug z => _2;
    let mut _0: &isize;
    let _3: &isize;
    let _4: &isize;

    bb0: {
        switchInt(move _2) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _3 = &((*_1).0: isize);
        _0 = _3;
        goto -> bb3;
    }

    bb2: {
        _4 = &((*_1).1: isize);
        _0 = _4;
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn <impl at ui/overloaded/overloaded-index-in-field.rs:34:1: 34:19>::get(_1: isize) -> isize {
    debug self => _1;
    let mut _0: isize;

    bb0: {
        _0 = _1;
        return;
    }
}

fn <impl at ui/overloaded/overloaded-index-in-field.rs:34:1: 34:19>::get_from_ref(_1: &isize) -> isize {
    debug self => _1;
    let mut _0: isize;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn <impl at ui/overloaded/overloaded-index-in-field.rs:34:1: 34:19>::inc(_1: &mut isize) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        (*_1) = Add((*_1), const 1_isize);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Bar;
    let mut _2: Foo;
    let mut _3: (&isize, &isize);
    let mut _4: &isize;
    let _5: isize;
    let mut _6: isize;
    let mut _7: &isize;
    let mut _8: &Foo;
    let mut _9: &isize;
    let _10: isize;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: isize;
    let mut _16: isize;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug f => _1;
        let _11: &isize;
        let _12: &isize;
        scope 2 {
            debug left_val => _11;
            debug right_val => _12;
            let _17: core::panicking::AssertKind;
            scope 3 {
                debug kind => _17;
            }
        }
    }

    bb0: {
        _2 = Foo { x: const 1_isize, y: const 2_isize };
        _1 = Bar { foo: move _2 };
        _8 = &(_1.0: Foo);
        _7 = <Foo as Index<isize>>::index(move _8, const 1_isize) -> bb1;
    }

    bb1: {
        _6 = (*_7);
        _5 = <isize as Int>::get(move _6) -> bb2;
    }

    bb2: {
        _4 = &_5;
        _10 = const 2_isize;
        _9 = &_10;
        _3 = (move _4, move _9);
        _11 = (_3.0: &isize);
        _12 = (_3.1: &isize);
        _15 = (*_11);
        _16 = (*_12);
        _14 = Eq(move _15, move _16);
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<isize, isize>(move _17, _11, _12, move _19);
    }

    bb4: {
        return;
    }
}
