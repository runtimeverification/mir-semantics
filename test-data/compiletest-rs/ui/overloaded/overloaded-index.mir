// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/overloaded/overloaded-index.rs:9:1: 9:26>::index(_1: &Foo, _2: isize) -> &isize {
    debug self => _1;
    debug z => _2;
    let mut _0: &isize;
    let _3: &isize;
    let _4: &isize;

    bb0: {
        switchInt(move _2) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _3 = &((*_1).0: isize);
        _0 = _3;
        goto -> bb3;
    }

    bb2: {
        _4 = &((*_1).1: isize);
        _0 = _4;
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn <impl at ui/overloaded/overloaded-index.rs:21:1: 21:29>::index_mut(_1: &mut Foo, _2: isize) -> &mut isize {
    debug self => _1;
    debug z => _2;
    let mut _0: &mut isize;
    let mut _3: &mut isize;
    let mut _4: &mut isize;
    let mut _5: &mut isize;

    bb0: {
        switchInt(move _2) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _4 = &mut ((*_1).0: isize);
        _3 = _4;
        goto -> bb3;
    }

    bb2: {
        _5 = &mut ((*_1).1: isize);
        _3 = _5;
        goto -> bb3;
    }

    bb3: {
        _0 = _3;
        return;
    }
}

fn <impl at ui/overloaded/overloaded-index.rs:37:1: 37:19>::get(_1: isize) -> isize {
    debug self => _1;
    let mut _0: isize;

    bb0: {
        _0 = _1;
        return;
    }
}

fn <impl at ui/overloaded/overloaded-index.rs:37:1: 37:19>::get_from_ref(_1: &isize) -> isize {
    debug self => _1;
    let mut _0: isize;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn <impl at ui/overloaded/overloaded-index.rs:37:1: 37:19>::inc(_1: &mut isize) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        (*_1) = Add((*_1), const 1_isize);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: Foo;
    let mut _2: (&isize, &isize);
    let mut _3: &isize;
    let _4: &isize;
    let mut _5: &Foo;
    let mut _6: &isize;
    let _7: isize;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: isize;
    let mut _13: isize;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: &mut isize;
    let mut _18: &mut Foo;
    let mut _19: (&isize, &isize);
    let mut _20: &isize;
    let _21: &isize;
    let mut _22: &Foo;
    let mut _23: &isize;
    let _24: isize;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: isize;
    let mut _30: isize;
    let _32: !;
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _35: &mut isize;
    let mut _36: &mut Foo;
    let _38: &isize;
    let mut _39: &Foo;
    let mut _40: (&isize, &isize);
    let mut _41: &isize;
    let _42: isize;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: isize;
    let mut _48: isize;
    let _50: !;
    let mut _51: std::option::Option<std::fmt::Arguments<'_>>;
    let _52: ();
    let mut _53: &mut isize;
    let mut _54: &mut isize;
    let mut _55: &mut Foo;
    let mut _56: (&isize, &isize);
    let mut _57: &isize;
    let _58: isize;
    let mut _59: isize;
    let mut _60: &isize;
    let mut _61: &Foo;
    let mut _62: &isize;
    let _63: isize;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: isize;
    let mut _69: isize;
    let _71: !;
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _73: (&isize, &isize);
    let mut _74: &isize;
    let _75: isize;
    let mut _76: &isize;
    let _77: &isize;
    let mut _78: &Foo;
    let mut _79: &isize;
    let _80: isize;
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: isize;
    let mut _86: isize;
    let _88: !;
    let mut _89: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug f => _1;
        let _8: &isize;
        let _9: &isize;
        let _25: &isize;
        let _26: &isize;
        let _34: &mut isize;
        let _37: &isize;
        let _64: &isize;
        let _65: &isize;
        let _81: &isize;
        let _82: &isize;
        scope 2 {
            debug left_val => _8;
            debug right_val => _9;
            let _14: core::panicking::AssertKind;
            scope 3 {
                debug kind => _14;
            }
        }
        scope 4 {
            debug left_val => _25;
            debug right_val => _26;
            let _31: core::panicking::AssertKind;
            scope 5 {
                debug kind => _31;
            }
        }
        scope 6 {
            debug p => _34;
        }
        scope 7 {
            debug p => _37;
            let _43: &isize;
            let _44: &isize;
            scope 8 {
                debug left_val => _43;
                debug right_val => _44;
                let _49: core::panicking::AssertKind;
                scope 9 {
                    debug kind => _49;
                }
            }
        }
        scope 10 {
            debug left_val => _64;
            debug right_val => _65;
            let _70: core::panicking::AssertKind;
            scope 11 {
                debug kind => _70;
            }
        }
        scope 12 {
            debug left_val => _81;
            debug right_val => _82;
            let _87: core::panicking::AssertKind;
            scope 13 {
                debug kind => _87;
            }
        }
    }

    bb0: {
        _1 = Foo { x: const 1_isize, y: const 2_isize };
        _5 = &_1;
        _4 = <Foo as Index<isize>>::index(move _5, const 1_isize) -> bb1;
    }

    bb1: {
        _3 = _4;
        _7 = const 2_isize;
        _6 = &_7;
        _2 = (move _3, move _6);
        _8 = (_2.0: &isize);
        _9 = (_2.1: &isize);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<isize, isize>(move _14, _8, _9, move _16);
    }

    bb3: {
        _18 = &mut _1;
        _17 = <Foo as IndexMut<isize>>::index_mut(move _18, const 0_isize) -> bb4;
    }

    bb4: {
        (*_17) = const 3_isize;
        _22 = &_1;
        _21 = <Foo as Index<isize>>::index(move _22, const 0_isize) -> bb5;
    }

    bb5: {
        _20 = _21;
        _24 = const 3_isize;
        _23 = &_24;
        _19 = (move _20, move _23);
        _25 = (_19.0: &isize);
        _26 = (_19.1: &isize);
        _29 = (*_25);
        _30 = (*_26);
        _28 = Eq(move _29, move _30);
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _31 = core::panicking::AssertKind::Eq;
        _33 = Option::<Arguments<'_>>::None;
        _32 = core::panicking::assert_failed::<isize, isize>(move _31, _25, _26, move _33);
    }

    bb7: {
        _36 = &mut _1;
        _35 = <Foo as IndexMut<isize>>::index_mut(move _36, const 1_isize) -> bb8;
    }

    bb8: {
        _34 = _35;
        (*_34) = const 4_isize;
        _39 = &_1;
        _38 = <Foo as Index<isize>>::index(move _39, const 1_isize) -> bb9;
    }

    bb9: {
        _37 = _38;
        _42 = const 4_isize;
        _41 = &_42;
        _40 = (_37, move _41);
        _43 = (_40.0: &isize);
        _44 = (_40.1: &isize);
        _47 = (*_43);
        _48 = (*_44);
        _46 = Eq(move _47, move _48);
        _45 = Not(move _46);
        switchInt(move _45) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _49 = core::panicking::AssertKind::Eq;
        _51 = Option::<Arguments<'_>>::None;
        _50 = core::panicking::assert_failed::<isize, isize>(move _49, _43, _44, move _51);
    }

    bb11: {
        _55 = &mut _1;
        _54 = <Foo as IndexMut<isize>>::index_mut(move _55, const 1_isize) -> bb12;
    }

    bb12: {
        _53 = _54;
        _52 = <isize as Int>::inc(move _53) -> bb13;
    }

    bb13: {
        _61 = &_1;
        _60 = <Foo as Index<isize>>::index(move _61, const 1_isize) -> bb14;
    }

    bb14: {
        _59 = (*_60);
        _58 = <isize as Int>::get(move _59) -> bb15;
    }

    bb15: {
        _57 = &_58;
        _63 = const 5_isize;
        _62 = &_63;
        _56 = (move _57, move _62);
        _64 = (_56.0: &isize);
        _65 = (_56.1: &isize);
        _68 = (*_64);
        _69 = (*_65);
        _67 = Eq(move _68, move _69);
        _66 = Not(move _67);
        switchInt(move _66) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _70 = core::panicking::AssertKind::Eq;
        _72 = Option::<Arguments<'_>>::None;
        _71 = core::panicking::assert_failed::<isize, isize>(move _70, _64, _65, move _72);
    }

    bb17: {
        _78 = &_1;
        _77 = <Foo as Index<isize>>::index(move _78, const 1_isize) -> bb18;
    }

    bb18: {
        _76 = _77;
        _75 = <isize as Int>::get_from_ref(move _76) -> bb19;
    }

    bb19: {
        _74 = &_75;
        _80 = const 5_isize;
        _79 = &_80;
        _73 = (move _74, move _79);
        _81 = (_73.0: &isize);
        _82 = (_73.1: &isize);
        _85 = (*_81);
        _86 = (*_82);
        _84 = Eq(move _85, move _86);
        _83 = Not(move _84);
        switchInt(move _83) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _87 = core::panicking::AssertKind::Eq;
        _89 = Option::<Arguments<'_>>::None;
        _88 = core::panicking::assert_failed::<isize, isize>(move _87, _81, _82, move _89);
    }

    bb21: {
        return;
    }
}
