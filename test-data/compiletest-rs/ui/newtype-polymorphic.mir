// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/newtype-polymorphic.rs:6:10: 6:15>::clone(_1: &myvec<X>) -> myvec<X> {
    debug self => _1;
    let mut _0: myvec<X>;
    let mut _2: std::vec::Vec<X>;
    let _3: &std::vec::Vec<X>;

    bb0: {
        _3 = &((*_1).0: std::vec::Vec<X>);
        _2 = <Vec<X> as Clone>::clone(_3) -> bb1;
    }

    bb1: {
        _0 = myvec::<X>(move _2);
        return;
    }
}

fn myvec_deref(_1: myvec<X>) -> Vec<X> {
    debug mv => _1;
    let mut _0: std::vec::Vec<X>;
    let _2: std::vec::Vec<X>;
    let mut _3: &std::vec::Vec<X>;
    scope 1 {
        debug v => _2;
    }

    bb0: {
        _2 = move (_1.0: std::vec::Vec<X>);
        _3 = &_2;
        _0 = <Vec<X> as Clone>::clone(move _3) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_2) -> bb2;
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn myvec_elt(_1: myvec<X>) -> X {
    debug mv => _1;
    let mut _0: X;
    let _2: std::vec::Vec<X>;
    let mut _3: std::option::Option<X>;
    let mut _4: &mut std::vec::IntoIter<X>;
    let mut _5: std::vec::IntoIter<X>;
    scope 1 {
        debug v => _2;
    }

    bb0: {
        _2 = move (_1.0: std::vec::Vec<X>);
        _5 = <Vec<X> as IntoIterator>::into_iter(move _2) -> bb1;
    }

    bb1: {
        _4 = &mut _5;
        _3 = <std::vec::IntoIter<X> as Iterator>::next(move _4) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _0 = Option::<X>::unwrap(move _3) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        drop(_5) -> bb4;
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_5) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: myvec<i32>;
    let mut _2: std::vec::Vec<i32>;
    let mut _3: std::boxed::Box<[i32]>;
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: *mut u8;
    let mut _7: std::boxed::Box<[i32; 3]>;
    let mut _9: &myvec<i32>;
    let mut _11: myvec<i32>;
    let mut _12: (&i32, &i32);
    let mut _13: &i32;
    let _14: &i32;
    let mut _15: &std::vec::Vec<i32>;
    let mut _16: &i32;
    let _17: i32;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: i32;
    let mut _23: i32;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _27: (&i32, &i32);
    let mut _28: &i32;
    let _29: i32;
    let mut _30: myvec<i32>;
    let mut _31: &myvec<i32>;
    let mut _32: &i32;
    let _33: i32;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: i32;
    let mut _39: i32;
    let _41: !;
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _44: (&i32, &i32);
    let mut _45: &i32;
    let _46: &i32;
    let mut _47: &std::vec::Vec<i32>;
    let mut _48: &i32;
    let _49: i32;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: i32;
    let mut _55: i32;
    let _57: !;
    let mut _58: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _59: bool;
    let mut _60: *const [i32; 3];
    let mut _61: *const ();
    let mut _62: usize;
    let mut _63: usize;
    let mut _64: usize;
    let mut _65: usize;
    let mut _66: bool;
    scope 1 {
        debug mv => _1;
        let _8: myvec<i32>;
        scope 3 {
            debug mv_clone => _8;
            let _10: std::vec::Vec<i32>;
            scope 4 {
                debug mv_clone => _10;
                let _18: &i32;
                let _19: &i32;
                let _34: &i32;
                let _35: &i32;
                let _43: std::vec::Vec<i32>;
                scope 5 {
                    debug left_val => _18;
                    debug right_val => _19;
                    let _24: core::panicking::AssertKind;
                    scope 6 {
                        debug kind => _24;
                    }
                }
                scope 7 {
                    debug left_val => _34;
                    debug right_val => _35;
                    let _40: core::panicking::AssertKind;
                    scope 8 {
                        debug kind => _40;
                    }
                }
                scope 9 {
                    debug v => _43;
                    let _50: &i32;
                    let _51: &i32;
                    scope 10 {
                        debug left_val => _50;
                        debug right_val => _51;
                        let _56: core::panicking::AssertKind;
                        scope 11 {
                            debug kind => _56;
                        }
                    }
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _59 = const false;
        _4 = SizeOf([i32; 3]);
        _5 = AlignOf([i32; 3]);
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> bb1;
    }

    bb1: {
        _7 = ShallowInitBox(move _6, [i32; 3]);
        _60 = (((_7.0: std::ptr::Unique<[i32; 3]>).0: std::ptr::NonNull<[i32; 3]>).0: *const [i32; 3]);
        _61 = _60 as *const () (PtrToPtr);
        _62 = _61 as usize (Transmute);
        _63 = AlignOf(i32);
        _64 = Sub(_63, const 1_usize);
        _65 = BitAnd(_62, _64);
        _66 = Eq(_65, const 0_usize);
        assert(_66, "misaligned pointer dereference: address must be a multiple of {} but is {}", _63, _62) -> [success: bb22, unwind unreachable];
    }

    bb2: {
        _59 = const true;
        _1 = myvec::<i32>(move _2);
        _9 = &_1;
        _8 = <myvec<i32> as Clone>::clone(move _9) -> [return: bb3, unwind: bb21];
    }

    bb3: {
        _11 = move _8;
        _10 = myvec_deref::<i32>(move _11) -> [return: bb4, unwind: bb21];
    }

    bb4: {
        _15 = &_10;
        _14 = <Vec<i32> as Index<usize>>::index(move _15, const 1_usize) -> [return: bb5, unwind: bb18];
    }

    bb5: {
        _13 = _14;
        _17 = const 2_i32;
        _16 = &_17;
        _12 = (move _13, move _16);
        _18 = (_12.0: &i32);
        _19 = (_12.1: &i32);
        _22 = (*_18);
        _23 = (*_19);
        _21 = Eq(move _22, move _23);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<i32, i32>(move _24, _18, _19, move _26) -> bb18;
    }

    bb7: {
        _31 = &_1;
        _30 = <myvec<i32> as Clone>::clone(move _31) -> [return: bb8, unwind: bb18];
    }

    bb8: {
        _29 = myvec_elt::<i32>(move _30) -> [return: bb9, unwind: bb18];
    }

    bb9: {
        _28 = &_29;
        _33 = const 1_i32;
        _32 = &_33;
        _27 = (move _28, move _32);
        _34 = (_27.0: &i32);
        _35 = (_27.1: &i32);
        _38 = (*_34);
        _39 = (*_35);
        _37 = Eq(move _38, move _39);
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _40 = core::panicking::AssertKind::Eq;
        _42 = Option::<Arguments<'_>>::None;
        _41 = core::panicking::assert_failed::<i32, i32>(move _40, _34, _35, move _42) -> bb18;
    }

    bb11: {
        _59 = const false;
        _43 = move (_1.0: std::vec::Vec<i32>);
        _47 = &_43;
        _46 = <Vec<i32> as Index<usize>>::index(move _47, const 2_usize) -> [return: bb12, unwind: bb17];
    }

    bb12: {
        _45 = _46;
        _49 = const 3_i32;
        _48 = &_49;
        _44 = (move _45, move _48);
        _50 = (_44.0: &i32);
        _51 = (_44.1: &i32);
        _54 = (*_50);
        _55 = (*_51);
        _53 = Eq(move _54, move _55);
        _52 = Not(move _53);
        switchInt(move _52) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _56 = core::panicking::AssertKind::Eq;
        _58 = Option::<Arguments<'_>>::None;
        _57 = core::panicking::assert_failed::<i32, i32>(move _56, _50, _51, move _58) -> bb17;
    }

    bb14: {
        drop(_43) -> [return: bb15, unwind: bb18];
    }

    bb15: {
        drop(_10) -> [return: bb16, unwind: bb21];
    }

    bb16: {
        _59 = const false;
        return;
    }

    bb17 (cleanup): {
        drop(_43) -> [return: bb18, unwind terminate];
    }

    bb18 (cleanup): {
        drop(_10) -> [return: bb21, unwind terminate];
    }

    bb19 (cleanup): {
        resume;
    }

    bb20 (cleanup): {
        drop((_1.0: std::vec::Vec<i32>)) -> [return: bb19, unwind terminate];
    }

    bb21 (cleanup): {
        switchInt(_59) -> [0: bb19, otherwise: bb20];
    }

    bb22: {
        (*_60) = [const 1_i32, const 2_i32, const 3_i32];
        _3 = move _7 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _2 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _3) -> bb2;
    }
}

fn myvec(_1: Vec<X>) -> myvec<X> {
    let mut _0: myvec<X>;

    bb0: {
        _0 = myvec::<X>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn myvec(_1: Vec<X>) -> myvec<X> {
    let mut _0: myvec<X>;

    bb0: {
        _0 = myvec::<X>(move _1);
        return;
    }
}
