// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> isize {
    let mut _0: isize;

    bb0: {
        _0 = const 42_isize;
        return;
    }
}

fn return_range_to() -> RangeToInclusive<i32> {
    let mut _0: std::ops::RangeToInclusive<i32>;

    bb0: {
        _0 = RangeToInclusive::<i32> { end: const 1_i32 };
        return;
    }
}

fn <impl at ui/range_inclusive.rs:13:10: 13:15>::fmt(_1: &P, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&u8;
    let _6: &u8;

    bb0: {
        _3 = const "P";
        _6 = &((*_1).0: u8);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: usize;
    let mut _2: std::ops::RangeInclusive<usize>;
    let mut _3: std::ops::RangeInclusive<usize>;
    let mut _5: std::option::Option<usize>;
    let mut _6: &mut std::ops::RangeInclusive<usize>;
    let mut _7: isize;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: !;
    let mut _14: (&usize, &usize);
    let mut _15: &usize;
    let mut _16: &usize;
    let _17: usize;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: usize;
    let mut _23: usize;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: std::ops::RangeInclusive<usize>;
    let mut _30: std::ops::RangeInclusive<usize>;
    let mut _32: std::option::Option<usize>;
    let mut _33: &mut std::ops::RangeInclusive<usize>;
    let mut _34: isize;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: !;
    let mut _41: (&usize, &usize);
    let mut _42: &usize;
    let mut _43: &usize;
    let _44: usize;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: usize;
    let mut _50: usize;
    let _52: !;
    let mut _53: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _55: std::iter::StepBy<std::ops::RangeInclusive<usize>>;
    let mut _56: std::iter::StepBy<std::ops::RangeInclusive<usize>>;
    let mut _57: std::ops::RangeInclusive<usize>;
    let mut _59: std::option::Option<usize>;
    let mut _60: &mut std::iter::StepBy<std::ops::RangeInclusive<usize>>;
    let mut _61: isize;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: usize;
    let mut _70: bool;
    let mut _71: !;
    let mut _72: (&usize, &usize);
    let mut _73: &usize;
    let mut _74: &usize;
    let _75: usize;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: usize;
    let mut _81: usize;
    let _83: !;
    let mut _84: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _85: std::ops::RangeInclusive<usize>;
    let mut _86: usize;
    let mut _87: usize;
    let mut _88: std::ops::RangeInclusive<isize>;
    let mut _89: isize;
    let mut _90: std::ops::RangeInclusive<&i32>;
    let mut _91: &i32;
    let _92: i32;
    let _93: &i32;
    let _94: i32;
    let _96: i32;
    let mut _98: std::ops::RangeInclusive<&i32>;
    let _99: &i32;
    let mut _101: std::ops::RangeInclusive<i32>;
    let _102: &[i32];
    let _103: &[i32];
    let mut _104: &std::vec::Vec<i32>;
    let mut _107: (&&[i32], &&[i32; 4]);
    let mut _108: &&[i32];
    let _109: &[i32];
    let _110: &[i32];
    let mut _111: &std::vec::Vec<i32>;
    let mut _112: std::ops::RangeInclusive<usize>;
    let mut _113: &&[i32; 4];
    let _114: &[i32; 4];
    let _115: [i32; 4];
    let mut _118: bool;
    let mut _119: bool;
    let _121: !;
    let mut _122: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _123: (&&[i32], &&[i32; 7]);
    let mut _124: &&[i32];
    let _125: &[i32];
    let _126: &[i32];
    let mut _127: &std::vec::Vec<i32>;
    let mut _128: std::ops::RangeToInclusive<usize>;
    let mut _129: &&[i32; 7];
    let _130: &[i32; 7];
    let _131: [i32; 7];
    let mut _134: bool;
    let mut _135: bool;
    let _137: !;
    let mut _138: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _139: (&&[i32], &&[i32; 4]);
    let mut _140: &&[i32];
    let _141: &[i32];
    let _142: &[i32];
    let mut _143: std::ops::RangeInclusive<usize>;
    let mut _144: &&[i32; 4];
    let _145: &[i32; 4];
    let _146: [i32; 4];
    let mut _149: bool;
    let mut _150: bool;
    let _152: !;
    let mut _153: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _154: (&&[i32], &&[i32; 7]);
    let mut _155: &&[i32];
    let _156: &[i32];
    let _157: &[i32];
    let mut _158: std::ops::RangeToInclusive<usize>;
    let mut _159: &&[i32; 7];
    let _160: &[i32; 7];
    let _161: [i32; 7];
    let mut _164: bool;
    let mut _165: bool;
    let _167: !;
    let mut _168: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _169: (&&str, &&str);
    let mut _170: &&str;
    let _171: &str;
    let _172: &str;
    let mut _173: &std::string::String;
    let mut _174: std::ops::RangeInclusive<usize>;
    let mut _175: &&str;
    let _176: &str;
    let mut _179: bool;
    let mut _180: bool;
    let _182: !;
    let mut _183: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _184: (&&str, &&str);
    let mut _185: &&str;
    let _186: &str;
    let _187: &str;
    let mut _188: &std::string::String;
    let mut _189: std::ops::RangeToInclusive<usize>;
    let mut _190: &&str;
    let _191: &str;
    let mut _194: bool;
    let mut _195: bool;
    let _197: !;
    let mut _198: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _199: (&&str, &&str);
    let mut _200: &&str;
    let _201: &str;
    let _202: &str;
    let mut _203: std::ops::RangeInclusive<usize>;
    let mut _204: &&str;
    let _205: &str;
    let mut _208: bool;
    let mut _209: bool;
    let _211: !;
    let mut _212: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _213: (&&str, &&str);
    let mut _214: &&str;
    let _215: &str;
    let _216: &str;
    let mut _217: std::ops::RangeToInclusive<usize>;
    let mut _218: &&str;
    let _219: &str;
    let mut _222: bool;
    let mut _223: bool;
    let _225: !;
    let mut _226: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _229: (&(usize, std::option::Option<usize>), &(usize, std::option::Option<usize>));
    let mut _230: &(usize, std::option::Option<usize>);
    let _231: (usize, std::option::Option<usize>);
    let mut _232: &std::ops::RangeInclusive<u8>;
    let mut _233: &(usize, std::option::Option<usize>);
    let _234: (usize, std::option::Option<usize>);
    let mut _235: std::option::Option<usize>;
    let mut _238: bool;
    let mut _239: bool;
    let _241: !;
    let mut _242: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _243: (&(usize, std::option::Option<usize>), &(usize, std::option::Option<usize>));
    let mut _244: &(usize, std::option::Option<usize>);
    let _245: (usize, std::option::Option<usize>);
    let mut _246: &std::ops::RangeInclusive<u8>;
    let mut _247: &(usize, std::option::Option<usize>);
    let _248: (usize, std::option::Option<usize>);
    let mut _249: std::option::Option<usize>;
    let mut _252: bool;
    let mut _253: bool;
    let _255: !;
    let mut _256: std::option::Option<std::fmt::Arguments<'_>>;
    let _257: std::option::Option<u8>;
    let mut _258: &mut std::ops::RangeInclusive<u8>;
    let _259: std::option::Option<u8>;
    let mut _260: &mut std::ops::RangeInclusive<u8>;
    let mut _261: (&(usize, std::option::Option<usize>), &(usize, std::option::Option<usize>));
    let mut _262: &(usize, std::option::Option<usize>);
    let _263: (usize, std::option::Option<usize>);
    let mut _264: &std::ops::RangeInclusive<u8>;
    let mut _265: &(usize, std::option::Option<usize>);
    let _266: (usize, std::option::Option<usize>);
    let mut _267: std::option::Option<usize>;
    let mut _270: bool;
    let mut _271: bool;
    let _273: !;
    let mut _274: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _275: (&(usize, std::option::Option<usize>), &(usize, std::option::Option<usize>));
    let mut _276: &(usize, std::option::Option<usize>);
    let _277: (usize, std::option::Option<usize>);
    let mut _278: &std::ops::RangeInclusive<u8>;
    let mut _279: &(usize, std::option::Option<usize>);
    let _280: (usize, std::option::Option<usize>);
    let mut _281: std::option::Option<usize>;
    let mut _284: bool;
    let mut _285: bool;
    let _287: !;
    let mut _288: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _289: bool;
    let mut _290: bool;
    let mut _291: &std::ops::RangeInclusive<u8>;
    let mut _292: !;
    let mut _293: (&usize, &usize);
    let mut _294: &usize;
    let _295: usize;
    let mut _296: &std::ops::RangeInclusive<u8>;
    let mut _297: &usize;
    let _298: usize;
    let mut _301: bool;
    let mut _302: bool;
    let mut _303: usize;
    let mut _304: usize;
    let _306: !;
    let mut _307: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _308: (&usize, &usize);
    let mut _309: &usize;
    let _310: usize;
    let mut _311: &std::ops::RangeInclusive<u8>;
    let mut _312: &usize;
    let _313: usize;
    let mut _316: bool;
    let mut _317: bool;
    let mut _318: usize;
    let mut _319: usize;
    let _321: !;
    let mut _322: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _323: (&std::option::Option<u8>, &std::option::Option<u8>);
    let mut _324: &std::option::Option<u8>;
    let _325: std::option::Option<u8>;
    let mut _326: &mut std::ops::RangeInclusive<u8>;
    let mut _327: &std::option::Option<u8>;
    let _328: std::option::Option<u8>;
    let mut _331: bool;
    let mut _332: bool;
    let _334: !;
    let mut _335: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _336: (&std::option::Option<u8>, &std::option::Option<u8>);
    let mut _337: &std::option::Option<u8>;
    let _338: std::option::Option<u8>;
    let mut _339: &mut std::ops::RangeInclusive<u8>;
    let mut _340: &std::option::Option<u8>;
    let _341: std::option::Option<u8>;
    let mut _344: bool;
    let mut _345: bool;
    let _347: !;
    let mut _348: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _349: (&std::option::Option<u8>, &std::option::Option<u8>);
    let mut _350: &std::option::Option<u8>;
    let _351: std::option::Option<u8>;
    let mut _352: &mut std::ops::RangeInclusive<u8>;
    let mut _353: &std::option::Option<u8>;
    let _354: std::option::Option<u8>;
    let mut _357: bool;
    let mut _358: bool;
    let _360: !;
    let mut _361: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _362: (&std::option::Option<u8>, &std::option::Option<u8>);
    let mut _363: &std::option::Option<u8>;
    let _364: std::option::Option<u8>;
    let mut _365: &mut std::ops::RangeInclusive<u8>;
    let mut _366: &std::option::Option<u8>;
    let _367: std::option::Option<u8>;
    let mut _370: bool;
    let mut _371: bool;
    let _373: !;
    let mut _374: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _375: (&std::option::Option<u8>, &std::option::Option<u8>);
    let mut _376: &std::option::Option<u8>;
    let _377: std::option::Option<u8>;
    let mut _378: &mut std::ops::RangeInclusive<u8>;
    let mut _379: &std::option::Option<u8>;
    let _380: std::option::Option<u8>;
    let mut _383: bool;
    let mut _384: bool;
    let _386: !;
    let mut _387: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _388: (&std::option::Option<u8>, &std::option::Option<u8>);
    let mut _389: &std::option::Option<u8>;
    let _390: std::option::Option<u8>;
    let mut _391: &mut std::ops::RangeInclusive<u8>;
    let mut _392: &std::option::Option<u8>;
    let _393: std::option::Option<u8>;
    let mut _396: bool;
    let mut _397: bool;
    let _399: !;
    let mut _400: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _401: std::ops::RangeInclusive<u8>;
    let mut _402: std::ops::RangeInclusive<u8>;
    let mut _404: std::option::Option<u8>;
    let mut _405: &mut std::ops::RangeInclusive<u8>;
    let mut _406: isize;
    let mut _408: (&std::option::Option<u8>, &std::option::Option<u8>);
    let mut _409: &std::option::Option<u8>;
    let _410: std::option::Option<u8>;
    let mut _411: &mut std::ops::RangeInclusive<u8>;
    let mut _412: &std::option::Option<u8>;
    let _413: std::option::Option<u8>;
    let mut _416: bool;
    let mut _417: bool;
    let _419: !;
    let mut _420: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _421: bool;
    let mut _422: bool;
    let mut _423: &std::ops::RangeInclusive<u8>;
    let mut _424: !;
    let mut _426: (&std::option::Option<i32>, &std::option::Option<i32>);
    let mut _427: &std::option::Option<i32>;
    let _428: std::option::Option<i32>;
    let mut _429: &mut std::ops::RangeInclusive<i32>;
    let mut _430: &std::option::Option<i32>;
    let _431: std::option::Option<i32>;
    let mut _434: bool;
    let mut _435: bool;
    let _437: !;
    let mut _438: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _439: bool;
    let mut _440: bool;
    let mut _441: &std::ops::RangeInclusive<i32>;
    let mut _442: !;
    let mut _444: (&std::option::Option<u8>, &std::option::Option<u8>);
    let mut _445: &std::option::Option<u8>;
    let _446: std::option::Option<u8>;
    let mut _447: &mut std::ops::RangeInclusive<u8>;
    let mut _448: &std::option::Option<u8>;
    let _449: std::option::Option<u8>;
    let mut _452: bool;
    let mut _453: bool;
    let _455: !;
    let mut _456: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _457: (&std::option::Option<u8>, &std::option::Option<u8>);
    let mut _458: &std::option::Option<u8>;
    let _459: std::option::Option<u8>;
    let mut _460: &mut std::ops::RangeInclusive<u8>;
    let mut _461: &std::option::Option<u8>;
    let _462: std::option::Option<u8>;
    let mut _465: bool;
    let mut _466: bool;
    let _468: !;
    let mut _469: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _470: bool;
    let mut _471: bool;
    let mut _472: &std::ops::RangeInclusive<u8>;
    let mut _473: !;
    let mut _475: (&std::option::Option<u8>, &std::option::Option<u8>);
    let mut _476: &std::option::Option<u8>;
    let _477: std::option::Option<u8>;
    let mut _478: &mut std::ops::RangeInclusive<u8>;
    let mut _479: &std::option::Option<u8>;
    let _480: std::option::Option<u8>;
    let mut _483: bool;
    let mut _484: bool;
    let _486: !;
    let mut _487: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _488: (&std::option::Option<u8>, &std::option::Option<u8>);
    let mut _489: &std::option::Option<u8>;
    let _490: std::option::Option<u8>;
    let mut _491: &mut std::ops::RangeInclusive<u8>;
    let mut _492: &std::option::Option<u8>;
    let _493: std::option::Option<u8>;
    let mut _496: bool;
    let mut _497: bool;
    let _499: !;
    let mut _500: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _501: bool;
    let mut _502: bool;
    let mut _503: &std::ops::RangeInclusive<u8>;
    let mut _504: !;
    let mut _506: (&std::option::Option<i32>, &std::option::Option<i32>);
    let mut _507: &std::option::Option<i32>;
    let _508: std::option::Option<i32>;
    let mut _509: &mut std::ops::RangeInclusive<i32>;
    let mut _510: &std::option::Option<i32>;
    let _511: std::option::Option<i32>;
    let mut _514: bool;
    let mut _515: bool;
    let _517: !;
    let mut _518: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _519: bool;
    let mut _520: bool;
    let mut _521: &std::ops::RangeInclusive<i32>;
    let mut _522: !;
    let mut _523: (&std::string::String, &&str);
    let mut _524: &std::string::String;
    let _525: std::string::String;
    let mut _527: std::fmt::Arguments<'_>;
    let mut _528: &[&str];
    let _529: &[&str; 1];
    let _530: [&str; 1];
    let mut _531: &[core::fmt::rt::Argument<'_>];
    let _532: &[core::fmt::rt::Argument<'_>; 1];
    let _533: [core::fmt::rt::Argument<'_>; 1];
    let mut _534: core::fmt::rt::Argument<'_>;
    let _535: &std::ops::RangeInclusive<i32>;
    let _536: std::ops::RangeInclusive<i32>;
    let mut _537: &&str;
    let _538: &str;
    let mut _541: bool;
    let mut _542: bool;
    let _544: !;
    let mut _545: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _546: (&std::string::String, &&str);
    let mut _547: &std::string::String;
    let _548: std::string::String;
    let mut _550: std::fmt::Arguments<'_>;
    let mut _551: &[&str];
    let _552: &[&str; 1];
    let _553: [&str; 1];
    let mut _554: &[core::fmt::rt::Argument<'_>];
    let _555: &[core::fmt::rt::Argument<'_>; 1];
    let _556: [core::fmt::rt::Argument<'_>; 1];
    let mut _557: core::fmt::rt::Argument<'_>;
    let _558: &std::ops::RangeToInclusive<i32>;
    let _559: std::ops::RangeToInclusive<i32>;
    let mut _560: &&str;
    let _561: &str;
    let mut _564: bool;
    let mut _565: bool;
    let _567: !;
    let mut _568: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _569: (&std::string::String, &&str);
    let mut _570: &std::string::String;
    let _571: std::string::String;
    let mut _573: std::fmt::Arguments<'_>;
    let mut _574: &[&str];
    let _575: &[&str; 1];
    let _576: [&str; 1];
    let mut _577: &[core::fmt::rt::Argument<'_>];
    let _578: &[core::fmt::rt::Argument<'_>; 1];
    let _579: [core::fmt::rt::Argument<'_>; 1];
    let mut _580: core::fmt::rt::Argument<'_>;
    let _581: &std::ops::RangeInclusive<i32>;
    let _582: std::ops::RangeInclusive<i32>;
    let mut _583: &&str;
    let _584: &str;
    let mut _587: bool;
    let mut _588: bool;
    let _590: !;
    let mut _591: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _592: (&std::string::String, &&str);
    let mut _593: &std::string::String;
    let _594: std::string::String;
    let mut _596: std::fmt::Arguments<'_>;
    let mut _597: &[&str];
    let _598: &[&str; 1];
    let _599: [&str; 1];
    let mut _600: &[core::fmt::rt::Argument<'_>];
    let _601: &[core::fmt::rt::Argument<'_>; 1];
    let _602: [core::fmt::rt::Argument<'_>; 1];
    let mut _603: core::fmt::rt::Argument<'_>;
    let _604: &std::ops::RangeInclusive<P>;
    let _605: std::ops::RangeInclusive<P>;
    let mut _606: P;
    let mut _607: P;
    let mut _608: &&str;
    let _609: &str;
    let mut _612: bool;
    let mut _613: bool;
    let _615: !;
    let mut _616: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug count => _1;
        let mut _4: std::ops::RangeInclusive<usize>;
        let _18: &usize;
        let _19: &usize;
        let mut _27: usize;
        scope 2 {
            debug iter => _4;
            let _8: usize;
            scope 3 {
                debug i => _8;
            }
        }
        scope 4 {
            debug left_val => _18;
            debug right_val => _19;
            let _24: core::panicking::AssertKind;
            scope 5 {
                debug kind => _24;
            }
        }
        scope 6 {
            debug count => _27;
            let _28: std::ops::RangeInclusive<usize>;
            scope 7 {
                debug range => _28;
                let mut _31: std::ops::RangeInclusive<usize>;
                let _45: &usize;
                let _46: &usize;
                let mut _54: usize;
                scope 8 {
                    debug iter => _31;
                    let _35: usize;
                    scope 9 {
                        debug i => _35;
                    }
                }
                scope 10 {
                    debug left_val => _45;
                    debug right_val => _46;
                    let _51: core::panicking::AssertKind;
                    scope 11 {
                        debug kind => _51;
                    }
                }
                scope 12 {
                    debug count => _54;
                    let mut _58: std::iter::StepBy<std::ops::RangeInclusive<usize>>;
                    let _76: &usize;
                    let _77: &usize;
                    scope 13 {
                        debug iter => _58;
                        let _62: usize;
                        scope 14 {
                            debug i => _62;
                        }
                    }
                    scope 15 {
                        debug left_val => _76;
                        debug right_val => _77;
                        let _82: core::panicking::AssertKind;
                        scope 16 {
                            debug kind => _82;
                        }
                    }
                    scope 17 {
                        scope 18 {
                            scope 19 {
                                scope 20 {
                                    let _95: &i32;
                                    scope 21 {
                                        debug x => _95;
                                        let _97: i32;
                                        let _100: std::vec::Vec<i32>;
                                        scope 22 {
                                            debug y => _97;
                                            scope 23 {
                                            }
                                        }
                                        scope 24 {
                                            debug vec => _100;
                                            scope 25 {
                                                debug slice => _102;
                                                let _105: std::string::String;
                                                scope 26 {
                                                    debug string => _105;
                                                    let _106: &str;
                                                    scope 27 {
                                                        debug stir => _106;
                                                        let _116: &&[i32];
                                                        let _117: &&[i32; 4];
                                                        let _132: &&[i32];
                                                        let _133: &&[i32; 7];
                                                        let _147: &&[i32];
                                                        let _148: &&[i32; 4];
                                                        let _162: &&[i32];
                                                        let _163: &&[i32; 7];
                                                        let _177: &&str;
                                                        let _178: &&str;
                                                        let _192: &&str;
                                                        let _193: &&str;
                                                        let _206: &&str;
                                                        let _207: &&str;
                                                        let _220: &&str;
                                                        let _221: &&str;
                                                        let mut _227: std::ops::RangeInclusive<u8>;
                                                        scope 28 {
                                                            debug left_val => _116;
                                                            debug right_val => _117;
                                                            let _120: core::panicking::AssertKind;
                                                            scope 29 {
                                                                debug kind => _120;
                                                            }
                                                        }
                                                        scope 30 {
                                                            debug left_val => _132;
                                                            debug right_val => _133;
                                                            let _136: core::panicking::AssertKind;
                                                            scope 31 {
                                                                debug kind => _136;
                                                            }
                                                        }
                                                        scope 32 {
                                                            debug left_val => _147;
                                                            debug right_val => _148;
                                                            let _151: core::panicking::AssertKind;
                                                            scope 33 {
                                                                debug kind => _151;
                                                            }
                                                        }
                                                        scope 34 {
                                                            debug left_val => _162;
                                                            debug right_val => _163;
                                                            let _166: core::panicking::AssertKind;
                                                            scope 35 {
                                                                debug kind => _166;
                                                            }
                                                        }
                                                        scope 36 {
                                                            debug left_val => _177;
                                                            debug right_val => _178;
                                                            let _181: core::panicking::AssertKind;
                                                            scope 37 {
                                                                debug kind => _181;
                                                            }
                                                        }
                                                        scope 38 {
                                                            debug left_val => _192;
                                                            debug right_val => _193;
                                                            let _196: core::panicking::AssertKind;
                                                            scope 39 {
                                                                debug kind => _196;
                                                            }
                                                        }
                                                        scope 40 {
                                                            debug left_val => _206;
                                                            debug right_val => _207;
                                                            let _210: core::panicking::AssertKind;
                                                            scope 41 {
                                                                debug kind => _210;
                                                            }
                                                        }
                                                        scope 42 {
                                                            debug left_val => _220;
                                                            debug right_val => _221;
                                                            let _224: core::panicking::AssertKind;
                                                            scope 43 {
                                                                debug kind => _224;
                                                            }
                                                        }
                                                        scope 44 {
                                                            debug long => _227;
                                                            let mut _228: std::ops::RangeInclusive<u8>;
                                                            scope 45 {
                                                                debug short => _228;
                                                                let _236: &(usize, std::option::Option<usize>);
                                                                let _237: &(usize, std::option::Option<usize>);
                                                                let _250: &(usize, std::option::Option<usize>);
                                                                let _251: &(usize, std::option::Option<usize>);
                                                                let _268: &(usize, std::option::Option<usize>);
                                                                let _269: &(usize, std::option::Option<usize>);
                                                                let _282: &(usize, std::option::Option<usize>);
                                                                let _283: &(usize, std::option::Option<usize>);
                                                                let _299: &usize;
                                                                let _300: &usize;
                                                                let _314: &usize;
                                                                let _315: &usize;
                                                                let _329: &std::option::Option<u8>;
                                                                let _330: &std::option::Option<u8>;
                                                                let _342: &std::option::Option<u8>;
                                                                let _343: &std::option::Option<u8>;
                                                                let _355: &std::option::Option<u8>;
                                                                let _356: &std::option::Option<u8>;
                                                                let _368: &std::option::Option<u8>;
                                                                let _369: &std::option::Option<u8>;
                                                                let _381: &std::option::Option<u8>;
                                                                let _382: &std::option::Option<u8>;
                                                                let _394: &std::option::Option<u8>;
                                                                let _395: &std::option::Option<u8>;
                                                                let mut _403: std::ops::RangeInclusive<u8>;
                                                                let mut _425: std::ops::RangeInclusive<i32>;
                                                                scope 46 {
                                                                    debug left_val => _236;
                                                                    debug right_val => _237;
                                                                    let _240: core::panicking::AssertKind;
                                                                    scope 47 {
                                                                        debug kind => _240;
                                                                    }
                                                                }
                                                                scope 48 {
                                                                    debug left_val => _250;
                                                                    debug right_val => _251;
                                                                    let _254: core::panicking::AssertKind;
                                                                    scope 49 {
                                                                        debug kind => _254;
                                                                    }
                                                                }
                                                                scope 50 {
                                                                    debug left_val => _268;
                                                                    debug right_val => _269;
                                                                    let _272: core::panicking::AssertKind;
                                                                    scope 51 {
                                                                        debug kind => _272;
                                                                    }
                                                                }
                                                                scope 52 {
                                                                    debug left_val => _282;
                                                                    debug right_val => _283;
                                                                    let _286: core::panicking::AssertKind;
                                                                    scope 53 {
                                                                        debug kind => _286;
                                                                    }
                                                                }
                                                                scope 54 {
                                                                    debug left_val => _299;
                                                                    debug right_val => _300;
                                                                    let _305: core::panicking::AssertKind;
                                                                    scope 55 {
                                                                        debug kind => _305;
                                                                    }
                                                                }
                                                                scope 56 {
                                                                    debug left_val => _314;
                                                                    debug right_val => _315;
                                                                    let _320: core::panicking::AssertKind;
                                                                    scope 57 {
                                                                        debug kind => _320;
                                                                    }
                                                                }
                                                                scope 58 {
                                                                    debug left_val => _329;
                                                                    debug right_val => _330;
                                                                    let _333: core::panicking::AssertKind;
                                                                    scope 59 {
                                                                        debug kind => _333;
                                                                    }
                                                                }
                                                                scope 60 {
                                                                    debug left_val => _342;
                                                                    debug right_val => _343;
                                                                    let _346: core::panicking::AssertKind;
                                                                    scope 61 {
                                                                        debug kind => _346;
                                                                    }
                                                                }
                                                                scope 62 {
                                                                    debug left_val => _355;
                                                                    debug right_val => _356;
                                                                    let _359: core::panicking::AssertKind;
                                                                    scope 63 {
                                                                        debug kind => _359;
                                                                    }
                                                                }
                                                                scope 64 {
                                                                    debug left_val => _368;
                                                                    debug right_val => _369;
                                                                    let _372: core::panicking::AssertKind;
                                                                    scope 65 {
                                                                        debug kind => _372;
                                                                    }
                                                                }
                                                                scope 66 {
                                                                    debug left_val => _381;
                                                                    debug right_val => _382;
                                                                    let _385: core::panicking::AssertKind;
                                                                    scope 67 {
                                                                        debug kind => _385;
                                                                    }
                                                                }
                                                                scope 68 {
                                                                    debug left_val => _394;
                                                                    debug right_val => _395;
                                                                    let _398: core::panicking::AssertKind;
                                                                    scope 69 {
                                                                        debug kind => _398;
                                                                    }
                                                                }
                                                                scope 70 {
                                                                    debug iter => _403;
                                                                    let _407: u8;
                                                                    scope 71 {
                                                                        debug i => _407;
                                                                        let _414: &std::option::Option<u8>;
                                                                        let _415: &std::option::Option<u8>;
                                                                        scope 72 {
                                                                            debug left_val => _414;
                                                                            debug right_val => _415;
                                                                            let _418: core::panicking::AssertKind;
                                                                            scope 73 {
                                                                                debug kind => _418;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                scope 74 {
                                                                    debug narrow => _425;
                                                                    let _432: &std::option::Option<i32>;
                                                                    let _433: &std::option::Option<i32>;
                                                                    let mut _443: std::ops::RangeInclusive<u8>;
                                                                    scope 75 {
                                                                        debug left_val => _432;
                                                                        debug right_val => _433;
                                                                        let _436: core::panicking::AssertKind;
                                                                        scope 76 {
                                                                            debug kind => _436;
                                                                        }
                                                                    }
                                                                    scope 77 {
                                                                        debug zero => _443;
                                                                        let _450: &std::option::Option<u8>;
                                                                        let _451: &std::option::Option<u8>;
                                                                        let _463: &std::option::Option<u8>;
                                                                        let _464: &std::option::Option<u8>;
                                                                        let mut _474: std::ops::RangeInclusive<u8>;
                                                                        scope 78 {
                                                                            debug left_val => _450;
                                                                            debug right_val => _451;
                                                                            let _454: core::panicking::AssertKind;
                                                                            scope 79 {
                                                                                debug kind => _454;
                                                                            }
                                                                        }
                                                                        scope 80 {
                                                                            debug left_val => _463;
                                                                            debug right_val => _464;
                                                                            let _467: core::panicking::AssertKind;
                                                                            scope 81 {
                                                                                debug kind => _467;
                                                                            }
                                                                        }
                                                                        scope 82 {
                                                                            debug high => _474;
                                                                            let _481: &std::option::Option<u8>;
                                                                            let _482: &std::option::Option<u8>;
                                                                            let _494: &std::option::Option<u8>;
                                                                            let _495: &std::option::Option<u8>;
                                                                            let mut _505: std::ops::RangeInclusive<i32>;
                                                                            scope 83 {
                                                                                debug left_val => _481;
                                                                                debug right_val => _482;
                                                                                let _485: core::panicking::AssertKind;
                                                                                scope 84 {
                                                                                    debug kind => _485;
                                                                                }
                                                                            }
                                                                            scope 85 {
                                                                                debug left_val => _494;
                                                                                debug right_val => _495;
                                                                                let _498: core::panicking::AssertKind;
                                                                                scope 86 {
                                                                                    debug kind => _498;
                                                                                }
                                                                            }
                                                                            scope 87 {
                                                                                debug nonsense => _505;
                                                                                let _512: &std::option::Option<i32>;
                                                                                let _513: &std::option::Option<i32>;
                                                                                let _526: std::string::String;
                                                                                let _539: &std::string::String;
                                                                                let _540: &&str;
                                                                                let _549: std::string::String;
                                                                                let _562: &std::string::String;
                                                                                let _563: &&str;
                                                                                let _572: std::string::String;
                                                                                let _585: &std::string::String;
                                                                                let _586: &&str;
                                                                                let _595: std::string::String;
                                                                                let _610: &std::string::String;
                                                                                let _611: &&str;
                                                                                scope 88 {
                                                                                    debug left_val => _512;
                                                                                    debug right_val => _513;
                                                                                    let _516: core::panicking::AssertKind;
                                                                                    scope 89 {
                                                                                        debug kind => _516;
                                                                                    }
                                                                                }
                                                                                scope 90 {
                                                                                    debug res => _526;
                                                                                }
                                                                                scope 91 {
                                                                                    debug left_val => _539;
                                                                                    debug right_val => _540;
                                                                                    let _543: core::panicking::AssertKind;
                                                                                    scope 92 {
                                                                                        debug kind => _543;
                                                                                    }
                                                                                }
                                                                                scope 93 {
                                                                                    debug res => _549;
                                                                                }
                                                                                scope 94 {
                                                                                    debug left_val => _562;
                                                                                    debug right_val => _563;
                                                                                    let _566: core::panicking::AssertKind;
                                                                                    scope 95 {
                                                                                        debug kind => _566;
                                                                                    }
                                                                                }
                                                                                scope 96 {
                                                                                    debug res => _572;
                                                                                }
                                                                                scope 97 {
                                                                                    debug left_val => _585;
                                                                                    debug right_val => _586;
                                                                                    let _589: core::panicking::AssertKind;
                                                                                    scope 98 {
                                                                                        debug kind => _589;
                                                                                    }
                                                                                }
                                                                                scope 99 {
                                                                                    debug res => _595;
                                                                                }
                                                                                scope 100 {
                                                                                    debug left_val => _610;
                                                                                    debug right_val => _611;
                                                                                    let _614: core::panicking::AssertKind;
                                                                                    scope 101 {
                                                                                        debug kind => _614;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const 0_usize;
        _3 = RangeInclusive::<usize>::new(const 0_usize, const 10_usize) -> bb1;
    }

    bb1: {
        _2 = <RangeInclusive<usize> as IntoIterator>::into_iter(move _3) -> bb2;
    }

    bb2: {
        _4 = move _2;
        goto -> bb3;
    }

    bb3: {
        _6 = &mut _4;
        _5 = <RangeInclusive<usize> as Iterator>::next(_6) -> bb4;
    }

    bb4: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        _8 = ((_5 as Some).0: usize);
        _11 = Ge(_8, const 0_usize);
        switchInt(move _11) -> [0: bb8, otherwise: bb9];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _15 = &_1;
        _17 = const 55_usize;
        _16 = &_17;
        _14 = (move _15, move _16);
        _18 = (_14.0: &usize);
        _19 = (_14.1: &usize);
        _22 = (*_18);
        _23 = (*_19);
        _21 = Eq(move _22, move _23);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb14, otherwise: bb13];
    }

    bb8: {
        _10 = const false;
        goto -> bb10;
    }

    bb9: {
        _12 = Le(_8, const 10_usize);
        _10 = move _12;
        goto -> bb10;
    }

    bb10: {
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _13 = core::panicking::panic(const "assertion failed: i >= 0 && i <= 10");
    }

    bb12: {
        _1 = Add(_1, _8);
        goto -> bb3;
    }

    bb13: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<usize, usize>(move _24, _18, _19, move _26);
    }

    bb14: {
        _27 = const 0_usize;
        _28 = RangeInclusive::<usize>::new(const 0_usize, const 10_usize) -> bb15;
    }

    bb15: {
        _30 = move _28;
        _29 = <RangeInclusive<usize> as IntoIterator>::into_iter(move _30) -> bb16;
    }

    bb16: {
        _31 = move _29;
        goto -> bb17;
    }

    bb17: {
        _33 = &mut _31;
        _32 = <RangeInclusive<usize> as Iterator>::next(_33) -> bb18;
    }

    bb18: {
        _34 = discriminant(_32);
        switchInt(move _34) -> [0: bb20, 1: bb19, otherwise: bb6];
    }

    bb19: {
        _35 = ((_32 as Some).0: usize);
        _38 = Ge(_35, const 0_usize);
        switchInt(move _38) -> [0: bb21, otherwise: bb22];
    }

    bb20: {
        _42 = &_27;
        _44 = const 55_usize;
        _43 = &_44;
        _41 = (move _42, move _43);
        _45 = (_41.0: &usize);
        _46 = (_41.1: &usize);
        _49 = (*_45);
        _50 = (*_46);
        _48 = Eq(move _49, move _50);
        _47 = Not(move _48);
        switchInt(move _47) -> [0: bb27, otherwise: bb26];
    }

    bb21: {
        _37 = const false;
        goto -> bb23;
    }

    bb22: {
        _39 = Le(_35, const 10_usize);
        _37 = move _39;
        goto -> bb23;
    }

    bb23: {
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _40 = core::panicking::panic(const "assertion failed: i >= 0 && i <= 10");
    }

    bb25: {
        _27 = Add(_27, _35);
        goto -> bb17;
    }

    bb26: {
        _51 = core::panicking::AssertKind::Eq;
        _53 = Option::<Arguments<'_>>::None;
        _52 = core::panicking::assert_failed::<usize, usize>(move _51, _45, _46, move _53);
    }

    bb27: {
        _54 = const 0_usize;
        _57 = RangeInclusive::<usize>::new(const 0_usize, const 10_usize) -> bb28;
    }

    bb28: {
        _56 = <RangeInclusive<usize> as Iterator>::step_by(move _57, const 2_usize) -> bb29;
    }

    bb29: {
        _55 = <StepBy<RangeInclusive<usize>> as IntoIterator>::into_iter(move _56) -> bb30;
    }

    bb30: {
        _58 = move _55;
        goto -> bb31;
    }

    bb31: {
        _60 = &mut _58;
        _59 = <StepBy<RangeInclusive<usize>> as Iterator>::next(_60) -> bb32;
    }

    bb32: {
        _61 = discriminant(_59);
        switchInt(move _61) -> [0: bb34, 1: bb33, otherwise: bb6];
    }

    bb33: {
        _62 = ((_59 as Some).0: usize);
        _66 = Ge(_62, const 0_usize);
        switchInt(move _66) -> [0: bb38, otherwise: bb39];
    }

    bb34: {
        _73 = &_54;
        _75 = const 30_usize;
        _74 = &_75;
        _72 = (move _73, move _74);
        _76 = (_72.0: &usize);
        _77 = (_72.1: &usize);
        _80 = (*_76);
        _81 = (*_77);
        _79 = Eq(move _80, move _81);
        _78 = Not(move _79);
        switchInt(move _78) -> [0: bb45, otherwise: bb44];
    }

    bb35: {
        _64 = const false;
        goto -> bb37;
    }

    bb36: {
        _70 = Eq(const 2_usize, const 0_usize);
        assert(!move _70, "attempt to calculate the remainder of `{}` with a divisor of zero", _62) -> bb41;
    }

    bb37: {
        _63 = Not(move _64);
        switchInt(move _63) -> [0: bb43, otherwise: bb42];
    }

    bb38: {
        _65 = const false;
        goto -> bb40;
    }

    bb39: {
        _67 = Le(_62, const 10_usize);
        _65 = move _67;
        goto -> bb40;
    }

    bb40: {
        switchInt(move _65) -> [0: bb35, otherwise: bb36];
    }

    bb41: {
        _69 = Rem(_62, const 2_usize);
        _68 = Eq(move _69, const 0_usize);
        _64 = move _68;
        goto -> bb37;
    }

    bb42: {
        _71 = core::panicking::panic(const "assertion failed: i >= 0 && i <= 10 && i % 2 == 0");
    }

    bb43: {
        _54 = Add(_54, _62);
        goto -> bb31;
    }

    bb44: {
        _82 = core::panicking::AssertKind::Eq;
        _84 = Option::<Arguments<'_>>::None;
        _83 = core::panicking::assert_failed::<usize, usize>(move _82, _76, _77, move _84);
    }

    bb45: {
        _87 = Add(const 4_usize, const 4_usize);
        _86 = Sub(move _87, const 3_usize);
        _85 = RangeInclusive::<usize>::new(const 0_usize, move _86) -> bb46;
    }

    bb46: {
        _89 = foo() -> bb47;
    }

    bb47: {
        _88 = RangeInclusive::<isize>::new(const 0_isize, move _89) -> bb48;
    }

    bb48: {
        _92 = const 42_i32;
        _91 = &_92;
        _94 = const 100_i32;
        _93 = &_94;
        _90 = RangeInclusive::<&i32>::new(move _91, _93) -> bb49;
    }

    bb49: {
        _96 = const 42_i32;
        _95 = &_96;
        _97 = const 42_i32;
        _99 = &_97;
        _98 = RangeInclusive::<&i32>::new(_95, _99) -> bb50;
    }

    bb50: {
        _101 = RangeInclusive::<i32>::new(const 0_i32, const 10_i32) -> bb51;
    }

    bb51: {
        _100 = <RangeInclusive<i32> as Iterator>::collect::<Vec<i32>>(move _101) -> bb52;
    }

    bb52: {
        _104 = &_100;
        _103 = <Vec<i32> as Deref>::deref(move _104) -> [return: bb53, unwind: bb234];
    }

    bb53: {
        _102 = _103;
        _105 = <String as From<&str>>::from(const "hello world") -> [return: bb54, unwind: bb234];
    }

    bb54: {
        _106 = const "hello world";
        _111 = &_100;
        _112 = RangeInclusive::<usize>::new(const 3_usize, const 6_usize) -> [return: bb55, unwind: bb233];
    }

    bb55: {
        _110 = <Vec<i32> as Index<RangeInclusive<usize>>>::index(move _111, move _112) -> [return: bb56, unwind: bb233];
    }

    bb56: {
        _109 = _110;
        _108 = &_109;
        _115 = [const 3_i32, const 4_i32, const 5_i32, const 6_i32];
        _114 = &_115;
        _113 = &_114;
        _107 = (move _108, move _113);
        _116 = (_107.0: &&[i32]);
        _117 = (_107.1: &&[i32; 4]);
        _119 = <&[i32] as PartialEq<&[i32; 4]>>::eq(_116, _117) -> [return: bb57, unwind: bb233];
    }

    bb57: {
        _118 = Not(move _119);
        switchInt(move _118) -> [0: bb59, otherwise: bb58];
    }

    bb58: {
        _120 = core::panicking::AssertKind::Eq;
        _122 = Option::<Arguments<'_>>::None;
        _121 = core::panicking::assert_failed::<&[i32], &[i32; 4]>(move _120, _116, _117, move _122) -> bb233;
    }

    bb59: {
        _127 = &_100;
        _128 = RangeToInclusive::<usize> { end: const 6_usize };
        _126 = <Vec<i32> as Index<RangeToInclusive<usize>>>::index(move _127, move _128) -> [return: bb60, unwind: bb233];
    }

    bb60: {
        _125 = _126;
        _124 = &_125;
        _131 = [const 0_i32, const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32, const 6_i32];
        _130 = &_131;
        _129 = &_130;
        _123 = (move _124, move _129);
        _132 = (_123.0: &&[i32]);
        _133 = (_123.1: &&[i32; 7]);
        _135 = <&[i32] as PartialEq<&[i32; 7]>>::eq(_132, _133) -> [return: bb61, unwind: bb233];
    }

    bb61: {
        _134 = Not(move _135);
        switchInt(move _134) -> [0: bb63, otherwise: bb62];
    }

    bb62: {
        _136 = core::panicking::AssertKind::Eq;
        _138 = Option::<Arguments<'_>>::None;
        _137 = core::panicking::assert_failed::<&[i32], &[i32; 7]>(move _136, _132, _133, move _138) -> bb233;
    }

    bb63: {
        _143 = RangeInclusive::<usize>::new(const 3_usize, const 6_usize) -> [return: bb64, unwind: bb233];
    }

    bb64: {
        _142 = <[i32] as Index<RangeInclusive<usize>>>::index(_102, move _143) -> [return: bb65, unwind: bb233];
    }

    bb65: {
        _141 = _142;
        _140 = &_141;
        _146 = [const 3_i32, const 4_i32, const 5_i32, const 6_i32];
        _145 = &_146;
        _144 = &_145;
        _139 = (move _140, move _144);
        _147 = (_139.0: &&[i32]);
        _148 = (_139.1: &&[i32; 4]);
        _150 = <&[i32] as PartialEq<&[i32; 4]>>::eq(_147, _148) -> [return: bb66, unwind: bb233];
    }

    bb66: {
        _149 = Not(move _150);
        switchInt(move _149) -> [0: bb68, otherwise: bb67];
    }

    bb67: {
        _151 = core::panicking::AssertKind::Eq;
        _153 = Option::<Arguments<'_>>::None;
        _152 = core::panicking::assert_failed::<&[i32], &[i32; 4]>(move _151, _147, _148, move _153) -> bb233;
    }

    bb68: {
        _158 = RangeToInclusive::<usize> { end: const 6_usize };
        _157 = <[i32] as Index<RangeToInclusive<usize>>>::index(_102, move _158) -> [return: bb69, unwind: bb233];
    }

    bb69: {
        _156 = _157;
        _155 = &_156;
        _161 = [const 0_i32, const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32, const 6_i32];
        _160 = &_161;
        _159 = &_160;
        _154 = (move _155, move _159);
        _162 = (_154.0: &&[i32]);
        _163 = (_154.1: &&[i32; 7]);
        _165 = <&[i32] as PartialEq<&[i32; 7]>>::eq(_162, _163) -> [return: bb70, unwind: bb233];
    }

    bb70: {
        _164 = Not(move _165);
        switchInt(move _164) -> [0: bb72, otherwise: bb71];
    }

    bb71: {
        _166 = core::panicking::AssertKind::Eq;
        _168 = Option::<Arguments<'_>>::None;
        _167 = core::panicking::assert_failed::<&[i32], &[i32; 7]>(move _166, _162, _163, move _168) -> bb233;
    }

    bb72: {
        _173 = &_105;
        _174 = RangeInclusive::<usize>::new(const 3_usize, const 6_usize) -> [return: bb73, unwind: bb233];
    }

    bb73: {
        _172 = <String as Index<RangeInclusive<usize>>>::index(move _173, move _174) -> [return: bb74, unwind: bb233];
    }

    bb74: {
        _171 = _172;
        _170 = &_171;
        _176 = const "lo w";
        _175 = &_176;
        _169 = (move _170, move _175);
        _177 = (_169.0: &&str);
        _178 = (_169.1: &&str);
        _180 = <&str as PartialEq>::eq(_177, _178) -> [return: bb75, unwind: bb233];
    }

    bb75: {
        _179 = Not(move _180);
        switchInt(move _179) -> [0: bb77, otherwise: bb76];
    }

    bb76: {
        _181 = core::panicking::AssertKind::Eq;
        _183 = Option::<Arguments<'_>>::None;
        _182 = core::panicking::assert_failed::<&str, &str>(move _181, _177, _178, move _183) -> bb233;
    }

    bb77: {
        _188 = &_105;
        _189 = RangeToInclusive::<usize> { end: const 6_usize };
        _187 = <String as Index<RangeToInclusive<usize>>>::index(move _188, move _189) -> [return: bb78, unwind: bb233];
    }

    bb78: {
        _186 = _187;
        _185 = &_186;
        _191 = const "hello w";
        _190 = &_191;
        _184 = (move _185, move _190);
        _192 = (_184.0: &&str);
        _193 = (_184.1: &&str);
        _195 = <&str as PartialEq>::eq(_192, _193) -> [return: bb79, unwind: bb233];
    }

    bb79: {
        _194 = Not(move _195);
        switchInt(move _194) -> [0: bb81, otherwise: bb80];
    }

    bb80: {
        _196 = core::panicking::AssertKind::Eq;
        _198 = Option::<Arguments<'_>>::None;
        _197 = core::panicking::assert_failed::<&str, &str>(move _196, _192, _193, move _198) -> bb233;
    }

    bb81: {
        _203 = RangeInclusive::<usize>::new(const 3_usize, const 6_usize) -> [return: bb82, unwind: bb233];
    }

    bb82: {
        _202 = <str as Index<RangeInclusive<usize>>>::index(_106, move _203) -> [return: bb83, unwind: bb233];
    }

    bb83: {
        _201 = _202;
        _200 = &_201;
        _205 = const "lo w";
        _204 = &_205;
        _199 = (move _200, move _204);
        _206 = (_199.0: &&str);
        _207 = (_199.1: &&str);
        _209 = <&str as PartialEq>::eq(_206, _207) -> [return: bb84, unwind: bb233];
    }

    bb84: {
        _208 = Not(move _209);
        switchInt(move _208) -> [0: bb86, otherwise: bb85];
    }

    bb85: {
        _210 = core::panicking::AssertKind::Eq;
        _212 = Option::<Arguments<'_>>::None;
        _211 = core::panicking::assert_failed::<&str, &str>(move _210, _206, _207, move _212) -> bb233;
    }

    bb86: {
        _217 = RangeToInclusive::<usize> { end: const 6_usize };
        _216 = <str as Index<RangeToInclusive<usize>>>::index(_106, move _217) -> [return: bb87, unwind: bb233];
    }

    bb87: {
        _215 = _216;
        _214 = &_215;
        _219 = const "hello w";
        _218 = &_219;
        _213 = (move _214, move _218);
        _220 = (_213.0: &&str);
        _221 = (_213.1: &&str);
        _223 = <&str as PartialEq>::eq(_220, _221) -> [return: bb88, unwind: bb233];
    }

    bb88: {
        _222 = Not(move _223);
        switchInt(move _222) -> [0: bb90, otherwise: bb89];
    }

    bb89: {
        _224 = core::panicking::AssertKind::Eq;
        _226 = Option::<Arguments<'_>>::None;
        _225 = core::panicking::assert_failed::<&str, &str>(move _224, _220, _221, move _226) -> bb233;
    }

    bb90: {
        _227 = RangeInclusive::<u8>::new(const 0_u8, const u8::MAX) -> [return: bb91, unwind: bb233];
    }

    bb91: {
        _228 = RangeInclusive::<u8>::new(const 42_u8, const 42_u8) -> [return: bb92, unwind: bb233];
    }

    bb92: {
        _232 = &_227;
        _231 = <RangeInclusive<u8> as Iterator>::size_hint(move _232) -> [return: bb93, unwind: bb233];
    }

    bb93: {
        _230 = &_231;
        _235 = Option::<usize>::Some(const 256_usize);
        _234 = (const 256_usize, move _235);
        _233 = &_234;
        _229 = (move _230, move _233);
        _236 = (_229.0: &(usize, std::option::Option<usize>));
        _237 = (_229.1: &(usize, std::option::Option<usize>));
        _239 = <(usize, Option<usize>) as PartialEq>::eq(_236, _237) -> [return: bb94, unwind: bb233];
    }

    bb94: {
        _238 = Not(move _239);
        switchInt(move _238) -> [0: bb96, otherwise: bb95];
    }

    bb95: {
        _240 = core::panicking::AssertKind::Eq;
        _242 = Option::<Arguments<'_>>::None;
        _241 = core::panicking::assert_failed::<(usize, Option<usize>), (usize, Option<usize>)>(move _240, _236, _237, move _242) -> bb233;
    }

    bb96: {
        _246 = &_228;
        _245 = <RangeInclusive<u8> as Iterator>::size_hint(move _246) -> [return: bb97, unwind: bb233];
    }

    bb97: {
        _244 = &_245;
        _249 = Option::<usize>::Some(const 1_usize);
        _248 = (const 1_usize, move _249);
        _247 = &_248;
        _243 = (move _244, move _247);
        _250 = (_243.0: &(usize, std::option::Option<usize>));
        _251 = (_243.1: &(usize, std::option::Option<usize>));
        _253 = <(usize, Option<usize>) as PartialEq>::eq(_250, _251) -> [return: bb98, unwind: bb233];
    }

    bb98: {
        _252 = Not(move _253);
        switchInt(move _252) -> [0: bb100, otherwise: bb99];
    }

    bb99: {
        _254 = core::panicking::AssertKind::Eq;
        _256 = Option::<Arguments<'_>>::None;
        _255 = core::panicking::assert_failed::<(usize, Option<usize>), (usize, Option<usize>)>(move _254, _250, _251, move _256) -> bb233;
    }

    bb100: {
        _258 = &mut _227;
        _257 = <RangeInclusive<u8> as Iterator>::next(move _258) -> [return: bb101, unwind: bb233];
    }

    bb101: {
        _260 = &mut _228;
        _259 = <RangeInclusive<u8> as Iterator>::next(move _260) -> [return: bb102, unwind: bb233];
    }

    bb102: {
        _264 = &_227;
        _263 = <RangeInclusive<u8> as Iterator>::size_hint(move _264) -> [return: bb103, unwind: bb233];
    }

    bb103: {
        _262 = &_263;
        _267 = Option::<usize>::Some(const 255_usize);
        _266 = (const 255_usize, move _267);
        _265 = &_266;
        _261 = (move _262, move _265);
        _268 = (_261.0: &(usize, std::option::Option<usize>));
        _269 = (_261.1: &(usize, std::option::Option<usize>));
        _271 = <(usize, Option<usize>) as PartialEq>::eq(_268, _269) -> [return: bb104, unwind: bb233];
    }

    bb104: {
        _270 = Not(move _271);
        switchInt(move _270) -> [0: bb106, otherwise: bb105];
    }

    bb105: {
        _272 = core::panicking::AssertKind::Eq;
        _274 = Option::<Arguments<'_>>::None;
        _273 = core::panicking::assert_failed::<(usize, Option<usize>), (usize, Option<usize>)>(move _272, _268, _269, move _274) -> bb233;
    }

    bb106: {
        _278 = &_228;
        _277 = <RangeInclusive<u8> as Iterator>::size_hint(move _278) -> [return: bb107, unwind: bb233];
    }

    bb107: {
        _276 = &_277;
        _281 = Option::<usize>::Some(const 0_usize);
        _280 = (const 0_usize, move _281);
        _279 = &_280;
        _275 = (move _276, move _279);
        _282 = (_275.0: &(usize, std::option::Option<usize>));
        _283 = (_275.1: &(usize, std::option::Option<usize>));
        _285 = <(usize, Option<usize>) as PartialEq>::eq(_282, _283) -> [return: bb108, unwind: bb233];
    }

    bb108: {
        _284 = Not(move _285);
        switchInt(move _284) -> [0: bb110, otherwise: bb109];
    }

    bb109: {
        _286 = core::panicking::AssertKind::Eq;
        _288 = Option::<Arguments<'_>>::None;
        _287 = core::panicking::assert_failed::<(usize, Option<usize>), (usize, Option<usize>)>(move _286, _282, _283, move _288) -> bb233;
    }

    bb110: {
        _291 = &_228;
        _290 = RangeInclusive::<u8>::is_empty(move _291) -> [return: bb111, unwind: bb233];
    }

    bb111: {
        _289 = Not(move _290);
        switchInt(move _289) -> [0: bb113, otherwise: bb112];
    }

    bb112: {
        _292 = core::panicking::panic(const "assertion failed: short.is_empty()") -> bb233;
    }

    bb113: {
        _296 = &_227;
        _295 = <RangeInclusive<u8> as ExactSizeIterator>::len(move _296) -> [return: bb114, unwind: bb233];
    }

    bb114: {
        _294 = &_295;
        _298 = const 255_usize;
        _297 = &_298;
        _293 = (move _294, move _297);
        _299 = (_293.0: &usize);
        _300 = (_293.1: &usize);
        _303 = (*_299);
        _304 = (*_300);
        _302 = Eq(move _303, move _304);
        _301 = Not(move _302);
        switchInt(move _301) -> [0: bb116, otherwise: bb115];
    }

    bb115: {
        _305 = core::panicking::AssertKind::Eq;
        _307 = Option::<Arguments<'_>>::None;
        _306 = core::panicking::assert_failed::<usize, usize>(move _305, _299, _300, move _307) -> bb233;
    }

    bb116: {
        _311 = &_228;
        _310 = <RangeInclusive<u8> as ExactSizeIterator>::len(move _311) -> [return: bb117, unwind: bb233];
    }

    bb117: {
        _309 = &_310;
        _313 = const 0_usize;
        _312 = &_313;
        _308 = (move _309, move _312);
        _314 = (_308.0: &usize);
        _315 = (_308.1: &usize);
        _318 = (*_314);
        _319 = (*_315);
        _317 = Eq(move _318, move _319);
        _316 = Not(move _317);
        switchInt(move _316) -> [0: bb119, otherwise: bb118];
    }

    bb118: {
        _320 = core::panicking::AssertKind::Eq;
        _322 = Option::<Arguments<'_>>::None;
        _321 = core::panicking::assert_failed::<usize, usize>(move _320, _314, _315, move _322) -> bb233;
    }

    bb119: {
        _326 = &mut _227;
        _325 = <RangeInclusive<u8> as DoubleEndedIterator>::next_back(move _326) -> [return: bb120, unwind: bb233];
    }

    bb120: {
        _324 = &_325;
        _328 = Option::<u8>::Some(const u8::MAX);
        _327 = &_328;
        _323 = (move _324, move _327);
        _329 = (_323.0: &std::option::Option<u8>);
        _330 = (_323.1: &std::option::Option<u8>);
        _332 = <Option<u8> as PartialEq>::eq(_329, _330) -> [return: bb121, unwind: bb233];
    }

    bb121: {
        _331 = Not(move _332);
        switchInt(move _331) -> [0: bb123, otherwise: bb122];
    }

    bb122: {
        _333 = core::panicking::AssertKind::Eq;
        _335 = Option::<Arguments<'_>>::None;
        _334 = core::panicking::assert_failed::<Option<u8>, Option<u8>>(move _333, _329, _330, move _335) -> bb233;
    }

    bb123: {
        _339 = &mut _227;
        _338 = <RangeInclusive<u8> as DoubleEndedIterator>::next_back(move _339) -> [return: bb124, unwind: bb233];
    }

    bb124: {
        _337 = &_338;
        _341 = Option::<u8>::Some(const 254_u8);
        _340 = &_341;
        _336 = (move _337, move _340);
        _342 = (_336.0: &std::option::Option<u8>);
        _343 = (_336.1: &std::option::Option<u8>);
        _345 = <Option<u8> as PartialEq>::eq(_342, _343) -> [return: bb125, unwind: bb233];
    }

    bb125: {
        _344 = Not(move _345);
        switchInt(move _344) -> [0: bb127, otherwise: bb126];
    }

    bb126: {
        _346 = core::panicking::AssertKind::Eq;
        _348 = Option::<Arguments<'_>>::None;
        _347 = core::panicking::assert_failed::<Option<u8>, Option<u8>>(move _346, _342, _343, move _348) -> bb233;
    }

    bb127: {
        _352 = &mut _227;
        _351 = <RangeInclusive<u8> as DoubleEndedIterator>::next_back(move _352) -> [return: bb128, unwind: bb233];
    }

    bb128: {
        _350 = &_351;
        _354 = Option::<u8>::Some(const 253_u8);
        _353 = &_354;
        _349 = (move _350, move _353);
        _355 = (_349.0: &std::option::Option<u8>);
        _356 = (_349.1: &std::option::Option<u8>);
        _358 = <Option<u8> as PartialEq>::eq(_355, _356) -> [return: bb129, unwind: bb233];
    }

    bb129: {
        _357 = Not(move _358);
        switchInt(move _357) -> [0: bb131, otherwise: bb130];
    }

    bb130: {
        _359 = core::panicking::AssertKind::Eq;
        _361 = Option::<Arguments<'_>>::None;
        _360 = core::panicking::assert_failed::<Option<u8>, Option<u8>>(move _359, _355, _356, move _361) -> bb233;
    }

    bb131: {
        _365 = &mut _227;
        _364 = <RangeInclusive<u8> as Iterator>::next(move _365) -> [return: bb132, unwind: bb233];
    }

    bb132: {
        _363 = &_364;
        _367 = Option::<u8>::Some(const 1_u8);
        _366 = &_367;
        _362 = (move _363, move _366);
        _368 = (_362.0: &std::option::Option<u8>);
        _369 = (_362.1: &std::option::Option<u8>);
        _371 = <Option<u8> as PartialEq>::eq(_368, _369) -> [return: bb133, unwind: bb233];
    }

    bb133: {
        _370 = Not(move _371);
        switchInt(move _370) -> [0: bb135, otherwise: bb134];
    }

    bb134: {
        _372 = core::panicking::AssertKind::Eq;
        _374 = Option::<Arguments<'_>>::None;
        _373 = core::panicking::assert_failed::<Option<u8>, Option<u8>>(move _372, _368, _369, move _374) -> bb233;
    }

    bb135: {
        _378 = &mut _227;
        _377 = <RangeInclusive<u8> as Iterator>::next(move _378) -> [return: bb136, unwind: bb233];
    }

    bb136: {
        _376 = &_377;
        _380 = Option::<u8>::Some(const 2_u8);
        _379 = &_380;
        _375 = (move _376, move _379);
        _381 = (_375.0: &std::option::Option<u8>);
        _382 = (_375.1: &std::option::Option<u8>);
        _384 = <Option<u8> as PartialEq>::eq(_381, _382) -> [return: bb137, unwind: bb233];
    }

    bb137: {
        _383 = Not(move _384);
        switchInt(move _383) -> [0: bb139, otherwise: bb138];
    }

    bb138: {
        _385 = core::panicking::AssertKind::Eq;
        _387 = Option::<Arguments<'_>>::None;
        _386 = core::panicking::assert_failed::<Option<u8>, Option<u8>>(move _385, _381, _382, move _387) -> bb233;
    }

    bb139: {
        _391 = &mut _227;
        _390 = <RangeInclusive<u8> as DoubleEndedIterator>::next_back(move _391) -> [return: bb140, unwind: bb233];
    }

    bb140: {
        _389 = &_390;
        _393 = Option::<u8>::Some(const 252_u8);
        _392 = &_393;
        _388 = (move _389, move _392);
        _394 = (_388.0: &std::option::Option<u8>);
        _395 = (_388.1: &std::option::Option<u8>);
        _397 = <Option<u8> as PartialEq>::eq(_394, _395) -> [return: bb141, unwind: bb233];
    }

    bb141: {
        _396 = Not(move _397);
        switchInt(move _396) -> [0: bb143, otherwise: bb142];
    }

    bb142: {
        _398 = core::panicking::AssertKind::Eq;
        _400 = Option::<Arguments<'_>>::None;
        _399 = core::panicking::assert_failed::<Option<u8>, Option<u8>>(move _398, _394, _395, move _400) -> bb233;
    }

    bb143: {
        _402 = RangeInclusive::<u8>::new(const 3_u8, const 251_u8) -> [return: bb144, unwind: bb233];
    }

    bb144: {
        _401 = <RangeInclusive<u8> as IntoIterator>::into_iter(move _402) -> [return: bb145, unwind: bb233];
    }

    bb145: {
        _403 = move _401;
        goto -> bb146;
    }

    bb146: {
        _405 = &mut _403;
        _404 = <RangeInclusive<u8> as Iterator>::next(_405) -> [return: bb147, unwind: bb233];
    }

    bb147: {
        _406 = discriminant(_404);
        switchInt(move _406) -> [0: bb149, 1: bb148, otherwise: bb6];
    }

    bb148: {
        _407 = ((_404 as Some).0: u8);
        _411 = &mut _227;
        _410 = <RangeInclusive<u8> as Iterator>::next(move _411) -> [return: bb150, unwind: bb233];
    }

    bb149: {
        _423 = &_227;
        _422 = RangeInclusive::<u8>::is_empty(move _423) -> [return: bb153, unwind: bb233];
    }

    bb150: {
        _409 = &_410;
        _413 = Option::<u8>::Some(_407);
        _412 = &_413;
        _408 = (move _409, move _412);
        _414 = (_408.0: &std::option::Option<u8>);
        _415 = (_408.1: &std::option::Option<u8>);
        _417 = <Option<u8> as PartialEq>::eq(_414, _415) -> [return: bb151, unwind: bb233];
    }

    bb151: {
        _416 = Not(move _417);
        switchInt(move _416) -> [0: bb146, otherwise: bb152];
    }

    bb152: {
        _418 = core::panicking::AssertKind::Eq;
        _420 = Option::<Arguments<'_>>::None;
        _419 = core::panicking::assert_failed::<Option<u8>, Option<u8>>(move _418, _414, _415, move _420) -> bb233;
    }

    bb153: {
        _421 = Not(move _422);
        switchInt(move _421) -> [0: bb155, otherwise: bb154];
    }

    bb154: {
        _424 = core::panicking::panic(const "assertion failed: long.is_empty()") -> bb233;
    }

    bb155: {
        _425 = RangeInclusive::<i32>::new(const 1_i32, const 0_i32) -> [return: bb156, unwind: bb233];
    }

    bb156: {
        _429 = &mut _425;
        _428 = <RangeInclusive<i32> as DoubleEndedIterator>::next_back(move _429) -> [return: bb157, unwind: bb233];
    }

    bb157: {
        _427 = &_428;
        _431 = Option::<i32>::None;
        _430 = &_431;
        _426 = (move _427, move _430);
        _432 = (_426.0: &std::option::Option<i32>);
        _433 = (_426.1: &std::option::Option<i32>);
        _435 = <Option<i32> as PartialEq>::eq(_432, _433) -> [return: bb158, unwind: bb233];
    }

    bb158: {
        _434 = Not(move _435);
        switchInt(move _434) -> [0: bb160, otherwise: bb159];
    }

    bb159: {
        _436 = core::panicking::AssertKind::Eq;
        _438 = Option::<Arguments<'_>>::None;
        _437 = core::panicking::assert_failed::<Option<i32>, Option<i32>>(move _436, _432, _433, move _438) -> bb233;
    }

    bb160: {
        _441 = &_425;
        _440 = RangeInclusive::<i32>::is_empty(move _441) -> [return: bb161, unwind: bb233];
    }

    bb161: {
        _439 = Not(move _440);
        switchInt(move _439) -> [0: bb163, otherwise: bb162];
    }

    bb162: {
        _442 = core::panicking::panic(const "assertion failed: narrow.is_empty()") -> bb233;
    }

    bb163: {
        _443 = RangeInclusive::<u8>::new(const 0_u8, const 0_u8) -> [return: bb164, unwind: bb233];
    }

    bb164: {
        _447 = &mut _443;
        _446 = <RangeInclusive<u8> as DoubleEndedIterator>::next_back(move _447) -> [return: bb165, unwind: bb233];
    }

    bb165: {
        _445 = &_446;
        _449 = Option::<u8>::Some(const 0_u8);
        _448 = &_449;
        _444 = (move _445, move _448);
        _450 = (_444.0: &std::option::Option<u8>);
        _451 = (_444.1: &std::option::Option<u8>);
        _453 = <Option<u8> as PartialEq>::eq(_450, _451) -> [return: bb166, unwind: bb233];
    }

    bb166: {
        _452 = Not(move _453);
        switchInt(move _452) -> [0: bb168, otherwise: bb167];
    }

    bb167: {
        _454 = core::panicking::AssertKind::Eq;
        _456 = Option::<Arguments<'_>>::None;
        _455 = core::panicking::assert_failed::<Option<u8>, Option<u8>>(move _454, _450, _451, move _456) -> bb233;
    }

    bb168: {
        _460 = &mut _443;
        _459 = <RangeInclusive<u8> as DoubleEndedIterator>::next_back(move _460) -> [return: bb169, unwind: bb233];
    }

    bb169: {
        _458 = &_459;
        _462 = Option::<u8>::None;
        _461 = &_462;
        _457 = (move _458, move _461);
        _463 = (_457.0: &std::option::Option<u8>);
        _464 = (_457.1: &std::option::Option<u8>);
        _466 = <Option<u8> as PartialEq>::eq(_463, _464) -> [return: bb170, unwind: bb233];
    }

    bb170: {
        _465 = Not(move _466);
        switchInt(move _465) -> [0: bb172, otherwise: bb171];
    }

    bb171: {
        _467 = core::panicking::AssertKind::Eq;
        _469 = Option::<Arguments<'_>>::None;
        _468 = core::panicking::assert_failed::<Option<u8>, Option<u8>>(move _467, _463, _464, move _469) -> bb233;
    }

    bb172: {
        _472 = &_443;
        _471 = RangeInclusive::<u8>::is_empty(move _472) -> [return: bb173, unwind: bb233];
    }

    bb173: {
        _470 = Not(move _471);
        switchInt(move _470) -> [0: bb175, otherwise: bb174];
    }

    bb174: {
        _473 = core::panicking::panic(const "assertion failed: zero.is_empty()") -> bb233;
    }

    bb175: {
        _474 = RangeInclusive::<u8>::new(const u8::MAX, const u8::MAX) -> [return: bb176, unwind: bb233];
    }

    bb176: {
        _478 = &mut _474;
        _477 = <RangeInclusive<u8> as DoubleEndedIterator>::next_back(move _478) -> [return: bb177, unwind: bb233];
    }

    bb177: {
        _476 = &_477;
        _480 = Option::<u8>::Some(const u8::MAX);
        _479 = &_480;
        _475 = (move _476, move _479);
        _481 = (_475.0: &std::option::Option<u8>);
        _482 = (_475.1: &std::option::Option<u8>);
        _484 = <Option<u8> as PartialEq>::eq(_481, _482) -> [return: bb178, unwind: bb233];
    }

    bb178: {
        _483 = Not(move _484);
        switchInt(move _483) -> [0: bb180, otherwise: bb179];
    }

    bb179: {
        _485 = core::panicking::AssertKind::Eq;
        _487 = Option::<Arguments<'_>>::None;
        _486 = core::panicking::assert_failed::<Option<u8>, Option<u8>>(move _485, _481, _482, move _487) -> bb233;
    }

    bb180: {
        _491 = &mut _474;
        _490 = <RangeInclusive<u8> as DoubleEndedIterator>::next_back(move _491) -> [return: bb181, unwind: bb233];
    }

    bb181: {
        _489 = &_490;
        _493 = Option::<u8>::None;
        _492 = &_493;
        _488 = (move _489, move _492);
        _494 = (_488.0: &std::option::Option<u8>);
        _495 = (_488.1: &std::option::Option<u8>);
        _497 = <Option<u8> as PartialEq>::eq(_494, _495) -> [return: bb182, unwind: bb233];
    }

    bb182: {
        _496 = Not(move _497);
        switchInt(move _496) -> [0: bb184, otherwise: bb183];
    }

    bb183: {
        _498 = core::panicking::AssertKind::Eq;
        _500 = Option::<Arguments<'_>>::None;
        _499 = core::panicking::assert_failed::<Option<u8>, Option<u8>>(move _498, _494, _495, move _500) -> bb233;
    }

    bb184: {
        _503 = &_474;
        _502 = RangeInclusive::<u8>::is_empty(move _503) -> [return: bb185, unwind: bb233];
    }

    bb185: {
        _501 = Not(move _502);
        switchInt(move _501) -> [0: bb187, otherwise: bb186];
    }

    bb186: {
        _504 = core::panicking::panic(const "assertion failed: high.is_empty()") -> bb233;
    }

    bb187: {
        _505 = RangeInclusive::<i32>::new(const 10_i32, const 5_i32) -> [return: bb188, unwind: bb233];
    }

    bb188: {
        _509 = &mut _505;
        _508 = <RangeInclusive<i32> as Iterator>::next(move _509) -> [return: bb189, unwind: bb233];
    }

    bb189: {
        _507 = &_508;
        _511 = Option::<i32>::None;
        _510 = &_511;
        _506 = (move _507, move _510);
        _512 = (_506.0: &std::option::Option<i32>);
        _513 = (_506.1: &std::option::Option<i32>);
        _515 = <Option<i32> as PartialEq>::eq(_512, _513) -> [return: bb190, unwind: bb233];
    }

    bb190: {
        _514 = Not(move _515);
        switchInt(move _514) -> [0: bb192, otherwise: bb191];
    }

    bb191: {
        _516 = core::panicking::AssertKind::Eq;
        _518 = Option::<Arguments<'_>>::None;
        _517 = core::panicking::assert_failed::<Option<i32>, Option<i32>>(move _516, _512, _513, move _518) -> bb233;
    }

    bb192: {
        _521 = &_505;
        _520 = RangeInclusive::<i32>::is_empty(move _521) -> [return: bb193, unwind: bb233];
    }

    bb193: {
        _519 = Not(move _520);
        switchInt(move _519) -> [0: bb195, otherwise: bb194];
    }

    bb194: {
        _522 = core::panicking::panic(const "assertion failed: nonsense.is_empty()") -> bb233;
    }

    bb195: {
        _530 = [const ""];
        _529 = &_530;
        _528 = _529 as &[&str] (Pointer(Unsize));
        _536 = RangeInclusive::<i32>::new(const 0_i32, const 10_i32) -> [return: bb196, unwind: bb233];
    }

    bb196: {
        _535 = &_536;
        _534 = core::fmt::rt::Argument::<'_>::new_debug::<RangeInclusive<i32>>(_535) -> [return: bb197, unwind: bb233];
    }

    bb197: {
        _533 = [move _534];
        _532 = &_533;
        _531 = _532 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _527 = Arguments::<'_>::new_v1(move _528, move _531) -> [return: bb198, unwind: bb233];
    }

    bb198: {
        _526 = format(move _527) -> [return: bb199, unwind: bb233];
    }

    bb199: {
        _525 = move _526;
        _524 = &_525;
        _538 = const "0..=10";
        _537 = &_538;
        _523 = (move _524, move _537);
        _539 = (_523.0: &std::string::String);
        _540 = (_523.1: &&str);
        _542 = <String as PartialEq<&str>>::eq(_539, _540) -> [return: bb200, unwind: bb232];
    }

    bb200: {
        _541 = Not(move _542);
        switchInt(move _541) -> [0: bb202, otherwise: bb201];
    }

    bb201: {
        _543 = core::panicking::AssertKind::Eq;
        _545 = Option::<Arguments<'_>>::None;
        _544 = core::panicking::assert_failed::<String, &str>(move _543, _539, _540, move _545) -> bb232;
    }

    bb202: {
        drop(_525) -> [return: bb203, unwind: bb233];
    }

    bb203: {
        _553 = [const ""];
        _552 = &_553;
        _551 = _552 as &[&str] (Pointer(Unsize));
        _559 = RangeToInclusive::<i32> { end: const 10_i32 };
        _558 = &_559;
        _557 = core::fmt::rt::Argument::<'_>::new_debug::<RangeToInclusive<i32>>(_558) -> [return: bb204, unwind: bb233];
    }

    bb204: {
        _556 = [move _557];
        _555 = &_556;
        _554 = _555 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _550 = Arguments::<'_>::new_v1(move _551, move _554) -> [return: bb205, unwind: bb233];
    }

    bb205: {
        _549 = format(move _550) -> [return: bb206, unwind: bb233];
    }

    bb206: {
        _548 = move _549;
        _547 = &_548;
        _561 = const "..=10";
        _560 = &_561;
        _546 = (move _547, move _560);
        _562 = (_546.0: &std::string::String);
        _563 = (_546.1: &&str);
        _565 = <String as PartialEq<&str>>::eq(_562, _563) -> [return: bb207, unwind: bb231];
    }

    bb207: {
        _564 = Not(move _565);
        switchInt(move _564) -> [0: bb209, otherwise: bb208];
    }

    bb208: {
        _566 = core::panicking::AssertKind::Eq;
        _568 = Option::<Arguments<'_>>::None;
        _567 = core::panicking::assert_failed::<String, &str>(move _566, _562, _563, move _568) -> bb231;
    }

    bb209: {
        drop(_548) -> [return: bb210, unwind: bb233];
    }

    bb210: {
        _576 = [const ""];
        _575 = &_576;
        _574 = _575 as &[&str] (Pointer(Unsize));
        _582 = RangeInclusive::<i32>::new(const 9_i32, const 6_i32) -> [return: bb211, unwind: bb233];
    }

    bb211: {
        _581 = &_582;
        _580 = core::fmt::rt::Argument::<'_>::new_debug::<RangeInclusive<i32>>(_581) -> [return: bb212, unwind: bb233];
    }

    bb212: {
        _579 = [move _580];
        _578 = &_579;
        _577 = _578 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _573 = Arguments::<'_>::new_v1(move _574, move _577) -> [return: bb213, unwind: bb233];
    }

    bb213: {
        _572 = format(move _573) -> [return: bb214, unwind: bb233];
    }

    bb214: {
        _571 = move _572;
        _570 = &_571;
        _584 = const "9..=6";
        _583 = &_584;
        _569 = (move _570, move _583);
        _585 = (_569.0: &std::string::String);
        _586 = (_569.1: &&str);
        _588 = <String as PartialEq<&str>>::eq(_585, _586) -> [return: bb215, unwind: bb230];
    }

    bb215: {
        _587 = Not(move _588);
        switchInt(move _587) -> [0: bb217, otherwise: bb216];
    }

    bb216: {
        _589 = core::panicking::AssertKind::Eq;
        _591 = Option::<Arguments<'_>>::None;
        _590 = core::panicking::assert_failed::<String, &str>(move _589, _585, _586, move _591) -> bb230;
    }

    bb217: {
        drop(_571) -> [return: bb218, unwind: bb233];
    }

    bb218: {
        _599 = [const ""];
        _598 = &_599;
        _597 = _598 as &[&str] (Pointer(Unsize));
        _606 = P(const 1_u8);
        _607 = P(const 2_u8);
        _605 = RangeInclusive::<P>::new(move _606, move _607) -> [return: bb219, unwind: bb233];
    }

    bb219: {
        _604 = &_605;
        _603 = core::fmt::rt::Argument::<'_>::new_debug::<RangeInclusive<P>>(_604) -> [return: bb220, unwind: bb233];
    }

    bb220: {
        _602 = [move _603];
        _601 = &_602;
        _600 = _601 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _596 = Arguments::<'_>::new_v1(move _597, move _600) -> [return: bb221, unwind: bb233];
    }

    bb221: {
        _595 = format(move _596) -> [return: bb222, unwind: bb233];
    }

    bb222: {
        _594 = move _595;
        _593 = &_594;
        _609 = const "P(1)..=P(2)";
        _608 = &_609;
        _592 = (move _593, move _608);
        _610 = (_592.0: &std::string::String);
        _611 = (_592.1: &&str);
        _613 = <String as PartialEq<&str>>::eq(_610, _611) -> [return: bb223, unwind: bb229];
    }

    bb223: {
        _612 = Not(move _613);
        switchInt(move _612) -> [0: bb225, otherwise: bb224];
    }

    bb224: {
        _614 = core::panicking::AssertKind::Eq;
        _616 = Option::<Arguments<'_>>::None;
        _615 = core::panicking::assert_failed::<String, &str>(move _614, _610, _611, move _616) -> bb229;
    }

    bb225: {
        drop(_594) -> [return: bb226, unwind: bb233];
    }

    bb226: {
        drop(_105) -> [return: bb227, unwind: bb234];
    }

    bb227: {
        drop(_100) -> bb228;
    }

    bb228: {
        return;
    }

    bb229 (cleanup): {
        drop(_594) -> [return: bb233, unwind terminate];
    }

    bb230 (cleanup): {
        drop(_571) -> [return: bb233, unwind terminate];
    }

    bb231 (cleanup): {
        drop(_548) -> [return: bb233, unwind terminate];
    }

    bb232 (cleanup): {
        drop(_525) -> [return: bb233, unwind terminate];
    }

    bb233 (cleanup): {
        drop(_105) -> [return: bb234, unwind terminate];
    }

    bb234 (cleanup): {
        drop(_100) -> [return: bb235, unwind terminate];
    }

    bb235 (cleanup): {
        resume;
    }
}

fn P(_1: u8) -> P {
    let mut _0: P;

    bb0: {
        _0 = P(move _1);
        return;
    }
}

// MIR FOR CTFE
fn P(_1: u8) -> P {
    let mut _0: P;

    bb0: {
        _0 = P(move _1);
        return;
    }
}
