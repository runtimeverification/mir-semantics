// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn asBlock(_1: F) -> usize {
    debug f => _1;
    let mut _0: usize;

    bb0: {
        _0 = <F as FnOnce<()>>::call_once(move _1, const ()) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: usize;
    let mut _2: (&usize, &usize);
    let mut _3: &usize;
    let mut _4: &usize;
    let _5: usize;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: usize;
    let mut _11: usize;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _6: &usize;
        let _7: &usize;
        scope 2 {
            debug left_val => _6;
            debug right_val => _7;
            let _12: core::panicking::AssertKind;
            scope 3 {
                debug kind => _12;
            }
        }
    }

    bb0: {
        _1 = asBlock::<[closure@ui/closures/old-closure-arg-call-as.rs:10:20: 10:22]>(const ZeroSized: [closure@ui/closures/old-closure-arg-call-as.rs:10:20: 10:22]) -> bb1;
    }

    bb1: {
        _3 = &_1;
        _5 = const 22_usize;
        _4 = &_5;
        _2 = (move _3, move _4);
        _6 = (_2.0: &usize);
        _7 = (_2.1: &usize);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<usize, usize>(move _12, _6, _7, move _14);
    }

    bb3: {
        return;
    }
}

fn main::{closure#0}(_1: [closure@ui/closures/old-closure-arg-call-as.rs:10:20: 10:22]) -> usize {
    let mut _0: usize;

    bb0: {
        _0 = const 22_usize;
        return;
    }
}
