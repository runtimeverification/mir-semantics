// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Bug::inner::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: [closure@ui/closures/thir-unsafeck-issue-85871.rs:9:23: 9:25];
    let _2: [closure@ui/closures/thir-unsafeck-issue-85871.rs:9:23: 9:25];
    scope 1 {
        debug _n => _2;
    }

    bb0: {
        StorageLive(_1);
        _1 = [closure@ui/closures/thir-unsafeck-issue-85871.rs:9:23: 9:25];
        StorageLive(_2);
        _2 = _1;
        _0 = const 42_usize;
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

fn Bug::inner::{constant#0}::{closure#0}(_1: &[closure@ui/closures/thir-unsafeck-issue-85871.rs:9:23: 9:25]) -> i32 {
    let mut _0: i32;

    bb0: {
        _0 = const 1_i32;
        return;
    }
}

E::V::0::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: [closure@ui/closures/thir-unsafeck-issue-85871.rs:15:22: 15:24];
    scope 1 {
    }

    bb0: {
        StorageLive(_1);
        _1 = [closure@ui/closures/thir-unsafeck-issue-85871.rs:15:22: 15:24];
        StorageDead(_1);
        _0 = const 42_usize;
        return;
    }
}

fn E::V::0::{constant#0}::{closure#0}(_1: &[closure@ui/closures/thir-unsafeck-issue-85871.rs:15:22: 15:24]) -> i32 {
    let mut _0: i32;

    bb0: {
        _0 = const 1_i32;
        return;
    }
}

Ty::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: [closure@ui/closures/thir-unsafeck-issue-85871.rs:18:26: 18:28];
    scope 1 {
    }

    bb0: {
        StorageLive(_1);
        _1 = [closure@ui/closures/thir-unsafeck-issue-85871.rs:18:26: 18:28];
        StorageDead(_1);
        _0 = const 42_usize;
        return;
    }
}

fn Ty::{constant#0}::{closure#0}(_1: &[closure@ui/closures/thir-unsafeck-issue-85871.rs:18:26: 18:28]) -> i32 {
    let mut _0: i32;

    bb0: {
        _0 = const 1_i32;
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn E::V(_1: [(); 42]) -> E {
    let mut _0: E;

    bb0: {
        _0 = E::V(move _1);
        return;
    }
}

// MIR FOR CTFE
fn E::V(_1: [(); 42]) -> E {
    let mut _0: E;

    bb0: {
        _0 = E::V(move _1);
        return;
    }
}
