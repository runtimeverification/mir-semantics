// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: F) -> () {
    debug blk => _1;
    let mut _0: ();
    let _2: ();

    bb0: {
        _2 = <F as FnOnce<()>>::call_once(move _1, const ()) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::sync::Arc<bool>;
    let _2: ();
    let mut _3: [closure@ui/closures/once-move-out-on-heap.rs:14:9: 14:15];
    scope 1 {
        debug x => _1;
    }

    bb0: {
        _1 = Arc::<bool>::new(const true) -> bb1;
    }

    bb1: {
        _3 = [closure@ui/closures/once-move-out-on-heap.rs:14:9: 14:15] { x: move _1 };
        _2 = foo::<[closure@ui/closures/once-move-out-on-heap.rs:14:9: 14:15]>(move _3) -> bb2;
    }

    bb2: {
        return;
    }
}

fn main::{closure#0}(_1: [closure@ui/closures/once-move-out-on-heap.rs:14:9: 14:15]) -> () {
    debug x => (_1.0: std::sync::Arc<bool>);
    let mut _0: ();
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: &bool;
    let mut _5: &std::sync::Arc<bool>;
    let mut _6: !;
    let _7: ();
    let mut _8: std::sync::Arc<bool>;
    let mut _9: bool;

    bb0: {
        _9 = const false;
        _9 = const true;
        _5 = &(_1.0: std::sync::Arc<bool>);
        _4 = <Arc<bool> as Deref>::deref(move _5) -> [return: bb1, unwind: bb7];
    }

    bb1: {
        _3 = (*_4);
        _2 = Not(move _3);
        switchInt(move _2) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _6 = core::panicking::panic(const "assertion failed: *x") -> bb7;
    }

    bb3: {
        _9 = const false;
        _8 = move (_1.0: std::sync::Arc<bool>);
        _7 = std::mem::drop::<Arc<bool>>(move _8) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        resume;
    }

    bb6 (cleanup): {
        drop((_1.0: std::sync::Arc<bool>)) -> [return: bb5, unwind terminate];
    }

    bb7 (cleanup): {
        switchInt(_9) -> [0: bb5, otherwise: bb6];
    }
}
