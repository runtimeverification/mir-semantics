// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn iter_vec(_1: Vec<T>, _2: F) -> () {
    debug v => _1;
    debug f => _2;
    let mut _0: ();
    let mut _3: std::slice::Iter<'_, T>;
    let mut _4: &std::vec::Vec<T>;
    let mut _5: std::slice::Iter<'_, T>;
    let mut _6: std::option::Option<&T>;
    let mut _7: &mut std::slice::Iter<'_, T>;
    let mut _8: isize;
    let _10: ();
    let mut _11: &mut F;
    let mut _12: (&T,);
    scope 1 {
        debug iter => _5;
        let _9: &T;
        scope 2 {
            debug x => _9;
        }
    }

    bb0: {
        _4 = &_1;
        _3 = <&Vec<T> as IntoIterator>::into_iter(move _4) -> [return: bb1, unwind: bb9];
    }

    bb1: {
        _5 = move _3;
        goto -> bb2;
    }

    bb2: {
        _7 = &mut _5;
        _6 = <std::slice::Iter<'_, T> as Iterator>::next(_7) -> [return: bb3, unwind: bb9];
    }

    bb3: {
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        _9 = ((_6 as Some).0: &T);
        _11 = &mut _2;
        _12 = (_9,);
        _10 = <F as FnMut<(&T,)>>::call_mut(move _11, move _12) -> [return: bb12, unwind: bb9];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        drop(_2) -> [return: bb7, unwind: bb10];
    }

    bb7: {
        drop(_1) -> bb8;
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_2) -> [return: bb10, unwind terminate];
    }

    bb10 (cleanup): {
        drop(_1) -> [return: bb11, unwind terminate];
    }

    bb11 (cleanup): {
        resume;
    }

    bb12: {
        goto -> bb2;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<i32>;
    let mut _2: std::boxed::Box<[i32]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[i32; 7]>;
    let _8: ();
    let mut _9: std::vec::Vec<i32>;
    let mut _10: [closure@ui/closures/old-closure-iter-1.rs:8:17: 8:20];
    let mut _11: &mut i32;
    let _12: ();
    let mut _13: std::fmt::Arguments<'_>;
    let mut _14: &[&str];
    let _15: &[&str; 2];
    let _16: [&str; 2];
    let mut _17: &[core::fmt::rt::Argument<'_>];
    let _18: &[core::fmt::rt::Argument<'_>; 1];
    let _19: [core::fmt::rt::Argument<'_>; 1];
    let mut _20: core::fmt::rt::Argument<'_>;
    let _21: &i32;
    let mut _22: (&i32, &i32);
    let mut _23: &i32;
    let mut _24: &i32;
    let _25: i32;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: i32;
    let mut _31: i32;
    let _33: !;
    let mut _34: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _35: *const [i32; 7];
    let mut _36: *const ();
    let mut _37: usize;
    let mut _38: usize;
    let mut _39: usize;
    let mut _40: usize;
    let mut _41: bool;
    scope 1 {
        debug v => _1;
        let mut _7: i32;
        scope 3 {
            debug odds => _7;
            let _26: &i32;
            let _27: &i32;
            scope 4 {
                debug left_val => _26;
                debug right_val => _27;
                let _32: core::panicking::AssertKind;
                scope 5 {
                    debug kind => _32;
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _3 = SizeOf([i32; 7]);
        _4 = AlignOf([i32; 7]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> bb1;
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [i32; 7]);
        _35 = (((_6.0: std::ptr::Unique<[i32; 7]>).0: std::ptr::NonNull<[i32; 7]>).0: *const [i32; 7]);
        _36 = _35 as *const () (PtrToPtr);
        _37 = _36 as usize (Transmute);
        _38 = AlignOf(i32);
        _39 = Sub(_38, const 1_usize);
        _40 = BitAnd(_37, _39);
        _41 = Eq(_40, const 0_usize);
        assert(_41, "misaligned pointer dereference: address must be a multiple of {} but is {}", _38, _37) -> [success: bb9, unwind unreachable];
    }

    bb2: {
        _7 = const 0_i32;
        _9 = move _1;
        _11 = &mut _7;
        _10 = [closure@ui/closures/old-closure-iter-1.rs:8:17: 8:20] { odds: move _11 };
        _8 = iter_vec::<i32, [closure@ui/closures/old-closure-iter-1.rs:8:17: 8:20]>(move _9, move _10) -> bb3;
    }

    bb3: {
        _16 = [const "", const "\n"];
        _15 = &_16;
        _14 = _15 as &[&str] (Pointer(Unsize));
        _21 = &_7;
        _20 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_21) -> bb4;
    }

    bb4: {
        _19 = [move _20];
        _18 = &_19;
        _17 = _18 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _13 = Arguments::<'_>::new_v1(move _14, move _17) -> bb5;
    }

    bb5: {
        _12 = _print(move _13) -> bb6;
    }

    bb6: {
        _23 = &_7;
        _25 = const 4_i32;
        _24 = &_25;
        _22 = (move _23, move _24);
        _26 = (_22.0: &i32);
        _27 = (_22.1: &i32);
        _30 = (*_26);
        _31 = (*_27);
        _29 = Eq(move _30, move _31);
        _28 = Not(move _29);
        switchInt(move _28) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _32 = core::panicking::AssertKind::Eq;
        _34 = Option::<Arguments<'_>>::None;
        _33 = core::panicking::assert_failed::<i32, i32>(move _32, _26, _27, move _34);
    }

    bb8: {
        return;
    }

    bb9: {
        (*_35) = [const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32, const 6_i32, const 7_i32];
        _2 = move _6 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _1 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _2) -> bb2;
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/closures/old-closure-iter-1.rs:8:17: 8:20], _2: &i32) -> () {
    debug i => _2;
    debug odds => (*((*_1).0: &mut i32));
    let mut _0: ();
    let mut _3: i32;
    let mut _4: i32;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: &mut i32;
    let mut _10: &mut i32;

    bb0: {
        _4 = (*_2);
        _5 = Eq(const 2_i32, const 0_i32);
        assert(!move _5, "attempt to calculate the remainder of `{}` with a divisor of zero", _4) -> bb1;
    }

    bb1: {
        _6 = Eq(const 2_i32, const -1_i32);
        _7 = Eq(_4, const i32::MIN);
        _8 = BitAnd(move _6, move _7);
        assert(!move _8, "attempt to compute the remainder of `{} % {}`, which would overflow", _4, const 2_i32) -> bb2;
    }

    bb2: {
        _3 = Rem(move _4, const 2_i32);
        switchInt(move _3) -> [1: bb3, otherwise: bb4];
    }

    bb3: {
        _9 = deref_copy ((*_1).0: &mut i32);
        _10 = deref_copy ((*_1).0: &mut i32);
        (*_9) = Add((*_10), const 1_i32);
        goto -> bb4;
    }

    bb4: {
        return;
    }
}
