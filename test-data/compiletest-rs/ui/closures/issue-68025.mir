// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: G, _2: Box<F>) -> () {
    let mut _0: ();

    bb0: {
        drop(_2) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_1) -> bb2;
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::boxed::Box<[closure@ui/closures/issue-68025.rs:11:30: 11:32]>;

    bb0: {
        _2 = Box::<[closure@ui/closures/issue-68025.rs:11:30: 11:32]>::new(const ZeroSized: [closure@ui/closures/issue-68025.rs:11:30: 11:32]) -> bb1;
    }

    bb1: {
        _1 = foo::<[closure@ui/closures/issue-68025.rs:11:30: 11:32], [closure@ui/closures/issue-68025.rs:11:9: 11:12]>(const ZeroSized: [closure@ui/closures/issue-68025.rs:11:9: 11:12], move _2) -> bb2;
    }

    bb2: {
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/closures/issue-68025.rs:11:9: 11:12], _2: Box<[closure@ui/closures/issue-68025.rs:11:30: 11:32]>) -> () {
    debug f => _2;
    let mut _0: ();
    let mut _3: &[closure@ui/closures/issue-68025.rs:11:30: 11:32];
    let mut _4: *const [closure@ui/closures/issue-68025.rs:11:30: 11:32];
    let mut _5: *const ();
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: bool;

    bb0: {
        _4 = (((_2.0: std::ptr::Unique<[closure@ui/closures/issue-68025.rs:11:30: 11:32]>).0: std::ptr::NonNull<[closure@ui/closures/issue-68025.rs:11:30: 11:32]>).0: *const [closure@ui/closures/issue-68025.rs:11:30: 11:32]);
        _5 = _4 as *const () (PtrToPtr);
        _6 = _5 as usize (Transmute);
        _7 = AlignOf([closure@ui/closures/issue-68025.rs:11:30: 11:32]);
        _8 = Sub(_7, const 1_usize);
        _9 = BitAnd(_6, _8);
        _10 = Eq(_9, const 0_usize);
        assert(_10, "misaligned pointer dereference: address must be a multiple of {} but is {}", _7, _6) -> [success: bb5, unwind unreachable];
    }

    bb1: {
        drop(_2) -> bb2;
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }

    bb5: {
        _3 = &(*_4);
        _0 = <[closure@ui/closures/issue-68025.rs:11:30: 11:32] as Fn<()>>::call(move _3, const ()) -> [return: bb1, unwind: bb3];
    }
}

fn main::{closure#1}(_1: &[closure@ui/closures/issue-68025.rs:11:30: 11:32]) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
