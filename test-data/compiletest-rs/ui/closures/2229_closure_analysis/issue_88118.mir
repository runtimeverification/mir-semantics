// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: impl FnOnce() -> MsU + Clone + 'static) -> () {
    debug handler => _1;
    let mut _0: ();
    let _2: std::boxed::Box<dyn std::ops::Fn(i32) -> std::option::Option<i32>>;
    let mut _3: std::boxed::Box<dyn std::ops::Fn(i32) -> std::option::Option<i32>>;
    let mut _4: std::boxed::Box<[closure@ui/closures/2229_closure_analysis/issue_88118.rs:6:14: 6:26]>;
    let mut _5: [closure@ui/closures/2229_closure_analysis/issue_88118.rs:6:14: 6:26];

    bb0: {
        _5 = [closure@ui/closures/2229_closure_analysis/issue_88118.rs:6:14: 6:26] { handler: move _1 };
        _4 = Box::<[closure@ui/closures/2229_closure_analysis/issue_88118.rs:6:14: 6:26]>::new(move _5) -> bb1;
    }

    bb1: {
        _3 = move _4 as std::boxed::Box<dyn std::ops::Fn(i32) -> std::option::Option<i32>> (Pointer(Unsize));
        _2 = move _3;
        drop(_2) -> bb2;
    }

    bb2: {
        return;
    }
}

fn foo::{closure#0}(_1: &[closure@ui/closures/2229_closure_analysis/issue_88118.rs:6:14: 6:26], _2: i32) -> Option<i32> {
    debug value => _2;
    debug handler => ((*_1).0: impl FnOnce() -> MsU + Clone + 'static);
    let mut _0: std::option::Option<i32>;
    let _3: MsU;
    let mut _4: &[closure@ui/closures/2229_closure_analysis/issue_88118.rs:7:10: 7:13];
    let _5: [closure@ui/closures/2229_closure_analysis/issue_88118.rs:7:10: 7:13];
    let mut _6: &impl FnOnce() -> MsU + Clone + 'static;
    let mut _7: (i32,);

    bb0: {
        _6 = &((*_1).0: impl FnOnce() -> MsU + Clone + 'static);
        _5 = [closure@ui/closures/2229_closure_analysis/issue_88118.rs:7:10: 7:13] { handler: move _6 };
        _4 = &_5;
        _7 = (_2,);
        _3 = <[closure@ui/closures/2229_closure_analysis/issue_88118.rs:7:10: 7:13] as Fn<(i32,)>>::call(move _4, move _7) -> bb1;
    }

    bb1: {
        drop(_3) -> bb2;
    }

    bb2: {
        _0 = Option::<i32>::None;
        return;
    }
}

fn foo::{closure#0}::{closure#0}(_1: &[closure@ui/closures/2229_closure_analysis/issue_88118.rs:7:10: 7:13], _2: i32) -> MsU {
    debug handler => (*((*_1).0: &impl FnOnce() -> MsU + Clone + 'static));
    let mut _0: MsU;
    let mut _3: impl FnOnce() -> MsU + Clone + 'static;
    let mut _4: &impl FnOnce() -> MsU + Clone + 'static;

    bb0: {
        _4 = deref_copy ((*_1).0: &impl FnOnce() -> MsU + Clone + 'static);
        _3 = <impl FnOnce() -> MsU + Clone + 'static as Clone>::clone(_4) -> bb1;
    }

    bb1: {
        _0 = <impl FnOnce() -> MsU + Clone + 'static as FnOnce<()>>::call_once(move _3, const ()) -> bb2;
    }

    bb2: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
