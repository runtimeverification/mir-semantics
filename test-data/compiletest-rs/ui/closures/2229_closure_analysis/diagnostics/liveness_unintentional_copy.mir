// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:7:10: 7:15>::fmt(_1: &MyStruct, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &i32;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&i32;
    let _10: &i32;

    bb0: {
        _3 = const "MyStruct";
        _4 = const "a";
        _6 = &((*_1).0: i32);
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize));
        _7 = const "b";
        _10 = &((*_1).1: i32);
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> bb1;
    }

    bb1: {
        return;
    }
}

fn unintentional_copy_one() -> () {
    let mut _0: ();
    let mut _1: i32;
    let _4: ();
    let mut _5: &mut [closure@ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:16:17: 16:25];
    let mut _6: (i32,);
    let _7: ();
    let mut _8: &mut [closure@ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:16:17: 16:25];
    let mut _9: (i32,);
    let _10: ();
    let mut _11: &mut [closure@ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:16:17: 16:25];
    let mut _12: (i32,);
    scope 1 {
        debug a => _1;
        let mut _2: MyStruct;
        scope 2 {
            debug last => _2;
            let mut _3: [closure@ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:16:17: 16:25];
            scope 3 {
                debug f => _3;
            }
        }
    }

    bb0: {
        _1 = const 1_i32;
        _2 = MyStruct { a: const 1_i32, b: const 1_i32 };
        _3 = [closure@ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:16:17: 16:25] { last: move _2, a: _1 };
        _5 = &mut _3;
        _6 = (const 2_i32,);
        _4 = <[closure@ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:16:17: 16:25] as FnMut<(i32,)>>::call_mut(move _5, move _6) -> bb1;
    }

    bb1: {
        _8 = &mut _3;
        _9 = (const 3_i32,);
        _7 = <[closure@ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:16:17: 16:25] as FnMut<(i32,)>>::call_mut(move _8, move _9) -> bb2;
    }

    bb2: {
        _11 = &mut _3;
        _12 = (const 4_i32,);
        _10 = <[closure@ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:16:17: 16:25] as FnMut<(i32,)>>::call_mut(move _11, move _12) -> bb3;
    }

    bb3: {
        return;
    }
}

fn unintentional_copy_one::{closure#0}(_1: &mut [closure@ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:16:17: 16:25], _2: i32) -> () {
    debug s => _2;
    debug last => ((*_1).0: MyStruct);
    debug a => ((*_1).1: i32);
    let mut _0: ();

    bb0: {
        (((*_1).0: MyStruct).0: i32) = _2;
        ((*_1).1: i32) = _2;
        return;
    }
}

fn unintentional_copy_two() -> () {
    let mut _0: ();
    let mut _1: i32;
    let _3: ();
    let mut _4: std::ops::Range<i32>;
    let mut _5: [closure@ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:32:22: 32:30];
    scope 1 {
        debug a => _1;
        let mut _2: MyStruct;
        scope 2 {
            debug sum => _2;
        }
    }

    bb0: {
        _1 = const 1_i32;
        _2 = MyStruct { a: const 1_i32, b: const 0_i32 };
        _4 = std::ops::Range::<i32> { start: const 1_i32, end: const 10_i32 };
        _5 = [closure@ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:32:22: 32:30] { sum: move _2, a: _1 };
        _3 = <std::ops::Range<i32> as Iterator>::for_each::<[closure@ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:32:22: 32:30]>(move _4, move _5) -> bb1;
    }

    bb1: {
        return;
    }
}

fn unintentional_copy_two::{closure#0}(_1: &mut [closure@ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:32:22: 32:30], _2: i32) -> () {
    debug x => _2;
    debug sum => ((*_1).0: MyStruct);
    debug a => ((*_1).1: i32);
    let mut _0: ();

    bb0: {
        (((*_1).0: MyStruct).1: i32) = Add((((*_1).0: MyStruct).1: i32), _2);
        ((*_1).1: i32) = Add(((*_1).1: i32), _2);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();

    bb0: {
        _1 = unintentional_copy_one() -> bb1;
    }

    bb1: {
        _2 = unintentional_copy_two() -> bb2;
    }

    bb2: {
        return;
    }
}
