// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn by_ref(_1: &mut S<'_>) -> () {
    debug s => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: &mut [closure@ui/closures/2229_closure_analysis/issue-89606.rs:11:6: 11:8];
    let mut _4: [closure@ui/closures/2229_closure_analysis/issue-89606.rs:11:6: 11:8];
    let mut _5: &mut &mut S<'_>;

    bb0: {
        _5 = &mut _1;
        _4 = [closure@ui/closures/2229_closure_analysis/issue-89606.rs:11:6: 11:8] { s: move _5 };
        _3 = &mut _4;
        _2 = <[closure@ui/closures/2229_closure_analysis/issue-89606.rs:11:6: 11:8] as FnMut<()>>::call_mut(move _3, const ()) -> bb1;
    }

    bb1: {
        return;
    }
}

fn by_ref::{closure#0}(_1: &mut [closure@ui/closures/2229_closure_analysis/issue-89606.rs:11:6: 11:8]) -> () {
    debug s => (*((*_1).0: &mut &mut S<'_>));
    let mut _0: ();
    let _2: &mut std::option::Option<&mut i32>;
    let mut _3: std::option::Option<&mut i32>;
    let mut _4: &mut &mut S<'_>;
    let mut _5: &mut S<'_>;
    let mut _6: &mut &mut S<'_>;
    let mut _7: &mut S<'_>;
    scope 1 {
        debug _o => _2;
    }

    bb0: {
        _4 = deref_copy ((*_1).0: &mut &mut S<'_>);
        _5 = deref_copy (*_4);
        _2 = &mut ((*_5).0: std::option::Option<&mut i32>);
        _3 = Option::<&mut i32>::None;
        _6 = deref_copy ((*_1).0: &mut &mut S<'_>);
        _7 = deref_copy (*_6);
        ((*_7).0: std::option::Option<&mut i32>) = move _3;
        return;
    }
}

fn by_value(_1: S<'_>) -> () {
    debug s => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: [closure@ui/closures/2229_closure_analysis/issue-89606.rs:18:6: 18:8];

    bb0: {
        _3 = [closure@ui/closures/2229_closure_analysis/issue-89606.rs:18:6: 18:8] { s: move _1 };
        _2 = <[closure@ui/closures/2229_closure_analysis/issue-89606.rs:18:6: 18:8] as FnOnce<()>>::call_once(move _3, const ()) -> bb1;
    }

    bb1: {
        return;
    }
}

fn by_value::{closure#0}(_1: [closure@ui/closures/2229_closure_analysis/issue-89606.rs:18:6: 18:8]) -> () {
    debug s => (_1.0: S<'_>);
    let mut _0: ();
    let _2: &std::option::Option<&mut i32>;
    scope 1 {
        debug _o => _2;
        let _3: std::option::Option<&mut i32>;
        scope 2 {
            debug _g => _3;
        }
    }

    bb0: {
        _2 = &((_1.0: S<'_>).0: std::option::Option<&mut i32>);
        _3 = move ((_1.0: S<'_>).0: std::option::Option<&mut i32>);
        return;
    }
}

fn nested(_1: &mut V<'_>) -> () {
    debug v => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: &mut [closure@ui/closures/2229_closure_analysis/issue-89606.rs:27:6: 27:8];
    let mut _4: [closure@ui/closures/2229_closure_analysis/issue-89606.rs:27:6: 27:8];
    let mut _5: &mut &mut V<'_>;

    bb0: {
        _5 = &mut _1;
        _4 = [closure@ui/closures/2229_closure_analysis/issue-89606.rs:27:6: 27:8] { v: move _5 };
        _3 = &mut _4;
        _2 = <[closure@ui/closures/2229_closure_analysis/issue-89606.rs:27:6: 27:8] as FnMut<()>>::call_mut(move _3, const ()) -> bb1;
    }

    bb1: {
        return;
    }
}

fn nested::{closure#0}(_1: &mut [closure@ui/closures/2229_closure_analysis/issue-89606.rs:27:6: 27:8]) -> () {
    debug v => (*((*_1).0: &mut &mut V<'_>));
    let mut _0: ();
    let _2: &mut std::option::Option<&mut i32>;
    let mut _3: std::option::Option<&mut i32>;
    let mut _4: &mut &mut V<'_>;
    let mut _5: &mut V<'_>;
    let mut _6: &mut &mut V<'_>;
    let mut _7: &mut V<'_>;
    scope 1 {
        debug _o => _2;
    }

    bb0: {
        _4 = deref_copy ((*_1).0: &mut &mut V<'_>);
        _5 = deref_copy (*_4);
        _2 = &mut (((*_5).0: (std::option::Option<&mut i32>,)).0: std::option::Option<&mut i32>);
        _3 = Option::<&mut i32>::None;
        _6 = deref_copy ((*_1).0: &mut &mut V<'_>);
        _7 = deref_copy (*_6);
        ((*_7).0: (std::option::Option<&mut i32>,)) = (move _3,);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: S<'_>;
    let mut _2: std::option::Option<&mut i32>;
    let _3: ();
    let mut _4: &mut S<'_>;
    let _5: ();
    let mut _6: S<'_>;
    let mut _8: (std::option::Option<&mut i32>,);
    let mut _9: std::option::Option<&mut i32>;
    let _10: ();
    let mut _11: &mut V<'_>;
    scope 1 {
        debug s => _1;
        let mut _7: V<'_>;
        scope 2 {
            debug v => _7;
        }
    }

    bb0: {
        _2 = Option::<&mut i32>::None;
        _1 = S::<'_>(move _2);
        _4 = &mut _1;
        _3 = by_ref(_4) -> bb1;
    }

    bb1: {
        _6 = move _1;
        _5 = by_value(move _6) -> bb2;
    }

    bb2: {
        _9 = Option::<&mut i32>::None;
        _8 = (move _9,);
        _7 = V::<'_>(move _8);
        _11 = &mut _7;
        _10 = nested(_11) -> bb3;
    }

    bb3: {
        return;
    }
}

fn S(_1: Option<&mut i32>) -> S<'_> {
    let mut _0: S<'_>;

    bb0: {
        _0 = S::<'_>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn S(_1: Option<&mut i32>) -> S<'_> {
    let mut _0: S<'_>;

    bb0: {
        _0 = S::<'_>(move _1);
        return;
    }
}

fn V(_1: (Option<&mut i32>,)) -> V<'_> {
    let mut _0: V<'_>;

    bb0: {
        _0 = V::<'_>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn V(_1: (Option<&mut i32>,)) -> V<'_> {
    let mut _0: V<'_>;

    bb0: {
        _0 = V::<'_>(move _1);
        return;
    }
}
