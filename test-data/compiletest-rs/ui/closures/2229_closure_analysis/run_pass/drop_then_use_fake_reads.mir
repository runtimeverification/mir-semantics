// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: i32;
    let mut _3: &mut i32;
    scope 1 {
        debug x => _1;
        let _2: [closure@ui/closures/2229_closure_analysis/run_pass/drop_then_use_fake_reads.rs:9:13: 9:15];
        scope 2 {
            debug c => _2;
        }
    }

    bb0: {
        _1 = const 1_i32;
        _3 = &mut _1;
        _2 = [closure@ui/closures/2229_closure_analysis/run_pass/drop_then_use_fake_reads.rs:9:13: 9:15] { x: move _3 };
        return;
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/closures/2229_closure_analysis/run_pass/drop_then_use_fake_reads.rs:9:13: 9:15]) -> () {
    debug x => (*((*_1).0: &mut i32));
    let mut _0: ();
    let _2: ();
    let mut _3: &mut i32;

    bb0: {
        _3 = deref_copy ((*_1).0: &mut i32);
        _2 = std::mem::drop::<&mut i32>(_3) -> bb1;
    }

    bb1: {
        return;
    }
}
