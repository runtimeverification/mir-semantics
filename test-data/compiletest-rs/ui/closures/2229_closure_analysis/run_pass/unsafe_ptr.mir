// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/closures/2229_closure_analysis/run_pass/unsafe_ptr.rs:8:10: 8:15>::fmt(_1: &S, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &std::string::String;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&std::string::String;
    let _10: &std::string::String;

    bb0: {
        _3 = const "S";
        _4 = const "s";
        _6 = &((*_1).0: std::string::String);
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize));
        _7 = const "t";
        _10 = &((*_1).1: std::string::String);
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> bb1;
    }

    bb1: {
        return;
    }
}

fn unsafe_imm() -> () {
    let mut _0: ();
    let _1: std::string::String;
    let _2: &str;
    let _4: &str;
    let mut _6: S;
    let mut _7: std::string::String;
    let mut _8: std::string::String;
    let mut _10: *mut S;
    let mut _11: std::boxed::Box<S>;
    let mut _14: &T;
    let _15: ();
    let mut _16: &[closure@ui/closures/2229_closure_analysis/run_pass/unsafe_ptr.rs:24:13: 24:15];
    let mut _17: bool;
    scope 1 {
        debug s => _1;
        let _3: std::string::String;
        scope 2 {
            debug t => _3;
            let _5: std::boxed::Box<S>;
            scope 3 {
                debug my_speed => _5;
                let _9: *const S;
                scope 4 {
                    debug p => _9;
                    let _12: T;
                    scope 5 {
                        debug t => _12;
                        let _13: [closure@ui/closures/2229_closure_analysis/run_pass/unsafe_ptr.rs:24:13: 24:15];
                        scope 6 {
                            debug c => _13;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _17 = const false;
        _2 = const "";
        _17 = const true;
        _1 = <&str as Into<String>>::into(_2) -> bb1;
    }

    bb1: {
        _4 = const "";
        _3 = <&str as Into<String>>::into(_4) -> [return: bb2, unwind: bb8];
    }

    bb2: {
        _17 = const false;
        _7 = move _1;
        _8 = move _3;
        _6 = S { s: move _7, t: move _8 };
        _5 = Box::<S>::new(move _6) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        _11 = move _5;
        _10 = Box::<S>::into_raw(move _11) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _9 = move _10 as *const S (Pointer(MutToConstPointer));
        _12 = T(_9);
        _14 = &_12;
        _13 = [closure@ui/closures/2229_closure_analysis/run_pass/unsafe_ptr.rs:24:13: 24:15] { t: move _14 };
        _16 = &_13;
        _15 = <[closure@ui/closures/2229_closure_analysis/run_pass/unsafe_ptr.rs:24:13: 24:15] as Fn<()>>::call(move _16, const ()) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        _17 = const false;
        return;
    }

    bb6 (cleanup): {
        resume;
    }

    bb7 (cleanup): {
        drop(_1) -> [return: bb6, unwind terminate];
    }

    bb8 (cleanup): {
        switchInt(_17) -> [0: bb6, otherwise: bb7];
    }
}

fn unsafe_imm::{closure#0}(_1: &[closure@ui/closures/2229_closure_analysis/run_pass/unsafe_ptr.rs:24:13: 24:15]) -> () {
    debug t => (*((*_1).0: &T));
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 2];
    let _6: [&str; 2];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &std::string::String;
    let mut _12: &T;
    let mut _13: *const S;
    scope 1 {
        let mut _14: *const ();
        let mut _15: usize;
        let mut _16: usize;
        let mut _17: usize;
        let mut _18: usize;
        let mut _19: bool;
    }

    bb0: {
        _6 = [const "", const "\n"];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _12 = deref_copy ((*_1).0: &T);
        _13 = deref_copy ((*_12).0: *const S);
        _14 = _13 as *const () (PtrToPtr);
        _15 = _14 as usize (Transmute);
        _16 = AlignOf(S);
        _17 = Sub(_16, const 1_usize);
        _18 = BitAnd(_15, _17);
        _19 = Eq(_18, const 0_usize);
        assert(_19, "misaligned pointer dereference: address must be a multiple of {} but is {}", _16, _15) -> [success: bb4, unwind unreachable];
    }

    bb1: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb2;
    }

    bb2: {
        _2 = _print(move _3) -> bb3;
    }

    bb3: {
        return;
    }

    bb4: {
        _11 = &((*_13).0: std::string::String);
        _10 = core::fmt::rt::Argument::<'_>::new_debug::<String>(_11) -> bb1;
    }
}

fn unsafe_mut() -> () {
    let mut _0: ();
    let _1: std::string::String;
    let _2: &str;
    let _4: &str;
    let mut _6: S;
    let mut _7: std::string::String;
    let mut _8: std::string::String;
    let mut _10: &mut S;
    let mut _12: &*mut S;
    let _13: ();
    let mut _14: &[closure@ui/closures/2229_closure_analysis/run_pass/unsafe_ptr.rs:37:13: 37:15];
    let mut _15: bool;
    let mut _16: *const S;
    scope 1 {
        debug s => _1;
        let _3: std::string::String;
        scope 2 {
            debug t => _3;
            let mut _5: std::boxed::Box<S>;
            scope 3 {
                debug my_speed => _5;
                let _9: *mut S;
                let mut _17: *const ();
                let mut _18: usize;
                let mut _19: usize;
                let mut _20: usize;
                let mut _21: usize;
                let mut _22: bool;
                scope 4 {
                    debug p => _9;
                    let _11: [closure@ui/closures/2229_closure_analysis/run_pass/unsafe_ptr.rs:37:13: 37:15];
                    scope 5 {
                        debug c => _11;
                    }
                }
            }
        }
    }

    bb0: {
        _15 = const false;
        _2 = const "";
        _15 = const true;
        _1 = <&str as Into<String>>::into(_2) -> bb1;
    }

    bb1: {
        _4 = const "";
        _3 = <&str as Into<String>>::into(_4) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        _15 = const false;
        _7 = move _1;
        _8 = move _3;
        _6 = S { s: move _7, t: move _8 };
        _5 = Box::<S>::new(move _6) -> [return: bb3, unwind: bb9];
    }

    bb3: {
        _16 = (((_5.0: std::ptr::Unique<S>).0: std::ptr::NonNull<S>).0: *const S);
        _17 = _16 as *const () (PtrToPtr);
        _18 = _17 as usize (Transmute);
        _19 = AlignOf(S);
        _20 = Sub(_19, const 1_usize);
        _21 = BitAnd(_18, _20);
        _22 = Eq(_21, const 0_usize);
        assert(_22, "misaligned pointer dereference: address must be a multiple of {} but is {}", _19, _18) -> [success: bb10, unwind unreachable];
    }

    bb4: {
        drop(_5) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        _15 = const false;
        return;
    }

    bb6 (cleanup): {
        drop(_5) -> [return: bb9, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }

    bb8 (cleanup): {
        drop(_1) -> [return: bb7, unwind terminate];
    }

    bb9 (cleanup): {
        switchInt(_15) -> [0: bb7, otherwise: bb8];
    }

    bb10: {
        _10 = &mut (*_16);
        _9 = &raw mut (*_10);
        _12 = &_9;
        _11 = [closure@ui/closures/2229_closure_analysis/run_pass/unsafe_ptr.rs:37:13: 37:15] { p: move _12 };
        _14 = &_11;
        _13 = <[closure@ui/closures/2229_closure_analysis/run_pass/unsafe_ptr.rs:37:13: 37:15] as Fn<()>>::call(move _14, const ()) -> [return: bb4, unwind: bb6];
    }
}

fn unsafe_mut::{closure#0}(_1: &[closure@ui/closures/2229_closure_analysis/run_pass/unsafe_ptr.rs:37:13: 37:15]) -> () {
    debug p => (*((*_1).0: &*mut S));
    let mut _0: ();
    let mut _2: &mut std::string::String;
    let mut _3: std::string::String;
    let _4: &str;
    let mut _5: &*mut S;
    let mut _6: *mut S;
    scope 1 {
        debug x => _2;
    }
    scope 2 {
        let mut _7: *const ();
        let mut _8: usize;
        let mut _9: usize;
        let mut _10: usize;
        let mut _11: usize;
        let mut _12: bool;
    }

    bb0: {
        _5 = deref_copy ((*_1).0: &*mut S);
        _6 = deref_copy (*_5);
        _7 = _6 as *const () (PtrToPtr);
        _8 = _7 as usize (Transmute);
        _9 = AlignOf(S);
        _10 = Sub(_9, const 1_usize);
        _11 = BitAnd(_8, _10);
        _12 = Eq(_11, const 0_usize);
        assert(_12, "misaligned pointer dereference: address must be a multiple of {} but is {}", _9, _8) -> [success: bb4, unwind unreachable];
    }

    bb1: {
        drop((*_2)) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        (*_2) = move _3;
        return;
    }

    bb3 (cleanup): {
        (*_2) = move _3;
        resume;
    }

    bb4: {
        _2 = &mut ((*_6).0: std::string::String);
        _4 = const "s";
        _3 = <&str as Into<String>>::into(_4) -> bb1;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();

    bb0: {
        _1 = unsafe_mut() -> bb1;
    }

    bb1: {
        _2 = unsafe_imm() -> bb2;
    }

    bb2: {
        return;
    }
}

fn T(_1: *const S) -> T {
    let mut _0: T;

    bb0: {
        _0 = T(move _1);
        return;
    }
}

// MIR FOR CTFE
fn T(_1: *const S) -> T {
    let mut _0: T;

    bb0: {
        _0 = T(move _1);
        return;
    }
}
