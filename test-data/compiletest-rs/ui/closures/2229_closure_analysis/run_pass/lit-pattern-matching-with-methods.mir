// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: std::collections::BTreeMap<&str, ()>;
    let _2: std::option::Option<()>;
    let mut _3: &mut std::collections::BTreeMap<&str, ()>;
    let _4: std::option::Option<()>;
    let mut _5: &mut std::collections::BTreeMap<&str, ()>;
    let _6: &str;
    let _7: std::option::Option<()>;
    let mut _8: &mut std::collections::BTreeMap<&str, ()>;
    let _9: &str;
    let mut _11: &mut std::collections::BTreeMap<&str, ()>;
    let _12: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
    let mut _13: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _14: std::panic::AssertUnwindSafe<[closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:18:39: 18:41]>;
    let mut _15: [closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:18:39: 18:41];
    let mut _16: &mut std::collections::btree_map::ExtractIf<'_, &str, (), [closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:17:37: 17:43]>;
    let mut _18: std::panic::AssertUnwindSafe<[closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:19:52: 19:54]>;
    let mut _19: [closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:19:52: 19:54];
    let mut _20: &mut std::collections::btree_map::ExtractIf<'_, &str, (), [closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:17:37: 17:43]>;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: isize;
    let mut _24: isize;
    let mut _25: !;
    let mut _27: &mut std::collections::BTreeMap<&str, ()>;
    let _28: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
    let mut _29: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _30: std::panic::AssertUnwindSafe<[closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:25:39: 25:41]>;
    let mut _31: [closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:25:39: 25:41];
    let mut _32: &mut std::collections::btree_map::ExtractIf<'_, &str, (), [closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:24:37: 24:43]>;
    let mut _34: std::panic::AssertUnwindSafe<[closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:26:52: 26:54]>;
    let mut _35: [closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:26:52: 26:54];
    let mut _36: &mut std::collections::btree_map::ExtractIf<'_, &str, (), [closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:24:37: 24:43]>;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: isize;
    let mut _40: isize;
    let mut _41: !;
    scope 1 {
        debug map => _1;
        let mut _10: std::collections::btree_map::ExtractIf<'_, &str, (), [closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:17:37: 17:43]>;
        let mut _26: std::collections::btree_map::ExtractIf<'_, &str, (), [closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:24:37: 24:43]>;
        scope 2 {
            debug it => _10;
            let _17: std::result::Result<std::option::Option<(&str, ())>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
            scope 3 {
                debug result => _17;
            }
        }
        scope 4 {
            debug it => _26;
            let _33: std::result::Result<std::option::Option<(&str, ())>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
            scope 5 {
                debug result => _33;
            }
        }
    }

    bb0: {
        _1 = BTreeMap::<&str, ()>::new() -> bb1;
    }

    bb1: {
        _3 = &mut _1;
        _2 = BTreeMap::<&str, ()>::insert(move _3, const "a", const ()) -> [return: bb2, unwind: bb30];
    }

    bb2: {
        _5 = &mut _1;
        _6 = const "b";
        _4 = BTreeMap::<&str, ()>::insert(move _5, _6, const ()) -> [return: bb3, unwind: bb30];
    }

    bb3: {
        _8 = &mut _1;
        _9 = const "c";
        _7 = BTreeMap::<&str, ()>::insert(move _8, _9, const ()) -> [return: bb4, unwind: bb30];
    }

    bb4: {
        _11 = &mut _1;
        _10 = BTreeMap::<&str, ()>::extract_if::<[closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:17:37: 17:43]>(move _11, const ZeroSized: [closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:17:37: 17:43]) -> [return: bb5, unwind: bb30];
    }

    bb5: {
        _16 = &mut _10;
        _15 = [closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:18:39: 18:41] { it: move _16 };
        _14 = AssertUnwindSafe::<[closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:18:39: 18:41]>(move _15);
        _13 = catch_unwind::<AssertUnwindSafe<[closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:18:39: 18:41]>, ()>(move _14) -> [return: bb6, unwind: bb30];
    }

    bb6: {
        _12 = Result::<(), Box<dyn Any + Send>>::unwrap_err(move _13) -> [return: bb7, unwind: bb30];
    }

    bb7: {
        drop(_12) -> [return: bb8, unwind: bb30];
    }

    bb8: {
        _20 = &mut _10;
        _19 = [closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:19:52: 19:54] { it: move _20 };
        _18 = AssertUnwindSafe::<[closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:19:52: 19:54]>(move _19);
        _17 = catch_unwind::<AssertUnwindSafe<[closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:19:52: 19:54]>, Option<(&str, ())>>(move _18) -> [return: bb9, unwind: bb30];
    }

    bb9: {
        _24 = discriminant(_17);
        switchInt(move _24) -> [0: bb10, otherwise: bb11];
    }

    bb10: {
        _23 = discriminant(((_17 as Ok).0: std::option::Option<(&str, ())>));
        _22 = Eq(_23, const 0_isize);
        goto -> bb12;
    }

    bb11: {
        _22 = const false;
        goto -> bb12;
    }

    bb12: {
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _25 = core::panicking::panic(const "assertion failed: matches!(result, Ok(None))") -> bb29;
    }

    bb14: {
        drop(_17) -> [return: bb15, unwind: bb30];
    }

    bb15: {
        _27 = &mut _1;
        _26 = BTreeMap::<&str, ()>::extract_if::<[closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:24:37: 24:43]>(move _27, const ZeroSized: [closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:24:37: 24:43]) -> [return: bb16, unwind: bb30];
    }

    bb16: {
        _32 = &mut _26;
        _31 = [closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:25:39: 25:41] { it: move _32 };
        _30 = AssertUnwindSafe::<[closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:25:39: 25:41]>(move _31);
        _29 = catch_unwind::<AssertUnwindSafe<[closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:25:39: 25:41]>, ()>(move _30) -> [return: bb17, unwind: bb30];
    }

    bb17: {
        _28 = Result::<(), Box<dyn Any + Send>>::unwrap_err(move _29) -> [return: bb18, unwind: bb30];
    }

    bb18: {
        drop(_28) -> [return: bb19, unwind: bb30];
    }

    bb19: {
        _36 = &mut _26;
        _35 = [closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:26:52: 26:54] { it: move _36 };
        _34 = AssertUnwindSafe::<[closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:26:52: 26:54]>(move _35);
        _33 = catch_unwind::<AssertUnwindSafe<[closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:26:52: 26:54]>, Option<(&str, ())>>(move _34) -> [return: bb20, unwind: bb30];
    }

    bb20: {
        _40 = discriminant(_33);
        switchInt(move _40) -> [0: bb21, otherwise: bb22];
    }

    bb21: {
        _39 = discriminant(((_33 as Ok).0: std::option::Option<(&str, ())>));
        _38 = Eq(_39, const 0_isize);
        goto -> bb23;
    }

    bb22: {
        _38 = const false;
        goto -> bb23;
    }

    bb23: {
        _37 = Not(move _38);
        switchInt(move _37) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _41 = core::panicking::panic(const "assertion failed: matches!(result, Ok(None))") -> bb28;
    }

    bb25: {
        drop(_33) -> [return: bb26, unwind: bb30];
    }

    bb26: {
        drop(_1) -> bb27;
    }

    bb27: {
        return;
    }

    bb28 (cleanup): {
        drop(_33) -> [return: bb30, unwind terminate];
    }

    bb29 (cleanup): {
        drop(_17) -> [return: bb30, unwind terminate];
    }

    bb30 (cleanup): {
        drop(_1) -> [return: bb31, unwind terminate];
    }

    bb31 (cleanup): {
        resume;
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:17:37: 17:43], _2: &&str, _3: &mut ()) -> bool {
    let mut _0: bool;

    bb0: {
        _0 = const true;
        return;
    }
}

fn main::{closure#1}(_1: &mut [closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:18:39: 18:41]) -> () {
    debug it => (*((*_1).0: &mut std::collections::btree_map::ExtractIf<'_, &str, (), [closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:17:37: 17:43]>));
    let mut _0: ();
    let mut _2: bool;
    let mut _3: &std::option::Option<(&str, ())>;
    let _4: std::option::Option<(&str, ())>;
    let mut _5: &mut std::collections::btree_map::ExtractIf<'_, &str, (), [closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:17:37: 17:43]>;

    bb0: {
        goto -> bb1;
    }

    bb1: {
        _5 = deref_copy ((*_1).0: &mut std::collections::btree_map::ExtractIf<'_, &str, (), [closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:17:37: 17:43]>);
        _4 = <std::collections::btree_map::ExtractIf<'_, &str, (), [closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:17:37: 17:43]> as Iterator>::next(_5) -> bb2;
    }

    bb2: {
        _3 = &_4;
        _2 = Option::<(&str, ())>::is_some(move _3) -> bb3;
    }

    bb3: {
        switchInt(move _2) -> [0: bb4, otherwise: bb1];
    }

    bb4: {
        return;
    }
}

fn main::{closure#2}(_1: &mut [closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:19:52: 19:54]) -> Option<(&str, ())> {
    debug it => (*((*_1).0: &mut std::collections::btree_map::ExtractIf<'_, &str, (), [closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:17:37: 17:43]>));
    let mut _0: std::option::Option<(&str, ())>;
    let mut _2: &mut std::collections::btree_map::ExtractIf<'_, &str, (), [closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:17:37: 17:43]>;

    bb0: {
        _2 = deref_copy ((*_1).0: &mut std::collections::btree_map::ExtractIf<'_, &str, (), [closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:17:37: 17:43]>);
        _0 = <std::collections::btree_map::ExtractIf<'_, &str, (), [closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:17:37: 17:43]> as Iterator>::next(_2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main::{closure#3}(_1: &mut [closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:24:37: 24:43], _2: &&str, _3: &mut ()) -> bool {
    let mut _0: bool;

    bb0: {
        _0 = const true;
        return;
    }
}

fn main::{closure#4}(_1: &mut [closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:25:39: 25:41]) -> () {
    debug it => (*((*_1).0: &mut std::collections::btree_map::ExtractIf<'_, &str, (), [closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:24:37: 24:43]>));
    let mut _0: ();
    let mut _2: std::option::Option<(&str, ())>;
    let mut _3: isize;
    let mut _4: &mut std::collections::btree_map::ExtractIf<'_, &str, (), [closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:24:37: 24:43]>;
    scope 1 {
    }

    bb0: {
        goto -> bb1;
    }

    bb1: {
        _4 = deref_copy ((*_1).0: &mut std::collections::btree_map::ExtractIf<'_, &str, (), [closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:24:37: 24:43]>);
        _2 = <std::collections::btree_map::ExtractIf<'_, &str, (), [closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:24:37: 24:43]> as Iterator>::next(_4) -> bb2;
    }

    bb2: {
        _3 = discriminant(_2);
        switchInt(move _3) -> [1: bb1, otherwise: bb3];
    }

    bb3: {
        return;
    }
}

fn main::{closure#5}(_1: &mut [closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:26:52: 26:54]) -> Option<(&str, ())> {
    debug it => (*((*_1).0: &mut std::collections::btree_map::ExtractIf<'_, &str, (), [closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:24:37: 24:43]>));
    let mut _0: std::option::Option<(&str, ())>;
    let mut _2: &mut std::collections::btree_map::ExtractIf<'_, &str, (), [closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:24:37: 24:43]>;

    bb0: {
        _2 = deref_copy ((*_1).0: &mut std::collections::btree_map::ExtractIf<'_, &str, (), [closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:24:37: 24:43]>);
        _0 = <std::collections::btree_map::ExtractIf<'_, &str, (), [closure@ui/closures/2229_closure_analysis/run_pass/lit-pattern-matching-with-methods.rs:24:37: 24:43]> as Iterator>::next(_2) -> bb1;
    }

    bb1: {
        return;
    }
}
