// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn simple_ref() -> () {
    let mut _0: ();
    let mut _1: i32;
    let _4: ();
    let mut _5: &mut [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:12:17: 12:24];
    scope 1 {
        debug s => _1;
        let _2: &mut i32;
        scope 2 {
            debug ref_s => _2;
            let mut _3: [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:12:17: 12:24];
            scope 3 {
                debug c => _3;
            }
        }
    }

    bb0: {
        _1 = const 10_i32;
        _2 = &mut _1;
        _3 = [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:12:17: 12:24] { ref_s: move _2 };
        _5 = &mut _3;
        _4 = <[closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:12:17: 12:24] as FnMut<()>>::call_mut(move _5, const ()) -> bb1;
    }

    bb1: {
        return;
    }
}

fn simple_ref::{closure#0}(_1: &mut [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:12:17: 12:24]) -> () {
    debug ref_s => ((*_1).0: &mut i32);
    let mut _0: ();
    let mut _2: &mut i32;
    let mut _3: &mut i32;

    bb0: {
        _2 = deref_copy ((*_1).0: &mut i32);
        _3 = deref_copy ((*_1).0: &mut i32);
        (*_2) = Add((*_3), const 10_i32);
        return;
    }
}

fn struct_contains_ref_to_another_struct() -> () {
    let mut _0: ();
    let mut _1: struct_contains_ref_to_another_struct::S;
    let mut _2: std::string::String;
    let _3: &str;
    let mut _5: &mut struct_contains_ref_to_another_struct::S;
    let _7: ();
    let mut _8: &mut [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:25:17: 25:24];
    scope 1 {
        debug s => _1;
        let _4: struct_contains_ref_to_another_struct::T<'_>;
        scope 2 {
            debug t => _4;
            let mut _6: [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:25:17: 25:24];
            scope 3 {
                debug c => _6;
            }
        }
    }

    bb0: {
        _3 = const "s";
        _2 = <&str as Into<String>>::into(_3) -> bb1;
    }

    bb1: {
        _1 = struct_contains_ref_to_another_struct::S(move _2);
        _5 = &mut _1;
        _4 = struct_contains_ref_to_another_struct::T::<'_>(_5);
        _6 = [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:25:17: 25:24] { t: move _4 };
        _8 = &mut _6;
        _7 = <[closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:25:17: 25:24] as FnMut<()>>::call_mut(move _8, const ()) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_1) -> bb3;
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_1) -> [return: bb5, unwind terminate];
    }

    bb5 (cleanup): {
        resume;
    }
}

fn struct_contains_ref_to_another_struct::{closure#0}(_1: &mut [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:25:17: 25:24]) -> () {
    debug t => ((*_1).0: struct_contains_ref_to_another_struct::T<'_>);
    let mut _0: ();
    let mut _2: std::string::String;
    let _3: &str;
    let mut _4: &mut struct_contains_ref_to_another_struct::S;
    let mut _5: &mut struct_contains_ref_to_another_struct::S;
    let mut _6: &mut struct_contains_ref_to_another_struct::S;

    bb0: {
        _3 = const "new s";
        _2 = <&str as Into<String>>::into(_3) -> bb1;
    }

    bb1: {
        _4 = deref_copy (((*_1).0: struct_contains_ref_to_another_struct::T<'_>).0: &mut struct_contains_ref_to_another_struct::S);
        drop(((*_4).0: std::string::String)) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        _5 = deref_copy (((*_1).0: struct_contains_ref_to_another_struct::T<'_>).0: &mut struct_contains_ref_to_another_struct::S);
        ((*_5).0: std::string::String) = move _2;
        return;
    }

    bb3 (cleanup): {
        _6 = deref_copy (((*_1).0: struct_contains_ref_to_another_struct::T<'_>).0: &mut struct_contains_ref_to_another_struct::S);
        ((*_6).0: std::string::String) = move _2;
        resume;
    }
}

fn <impl at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:32:10: 32:15>::fmt(_1: &S, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&std::string::String;
    let _6: &std::string::String;

    bb0: {
        _3 = const "S";
        _6 = &((*_1).0: std::string::String);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:35:10: 35:15>::fmt(_1: &T, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&S;
    let _6: &S;

    bb0: {
        _3 = const "T";
        _6 = &((*_1).0: S);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> bb1;
    }

    bb1: {
        return;
    }
}

fn no_ref() -> () {
    let mut _0: ();
    let mut _1: T;
    let mut _2: S;
    let mut _3: std::string::String;
    let _4: &str;
    let _6: ();
    let mut _7: &mut [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:40:17: 40:24];
    scope 1 {
        debug t => _1;
        let mut _5: [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:40:17: 40:24];
        scope 2 {
            debug c => _5;
        }
    }

    bb0: {
        _4 = const "s";
        _3 = <&str as Into<String>>::into(_4) -> bb1;
    }

    bb1: {
        _2 = S(move _3);
        _1 = T(move _2);
        _5 = [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:40:17: 40:24] { t: move _1 };
        _7 = &mut _5;
        _6 = <[closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:40:17: 40:24] as FnMut<()>>::call_mut(move _7, const ()) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_5) -> bb3;
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_5) -> [return: bb5, unwind terminate];
    }

    bb5 (cleanup): {
        resume;
    }
}

fn no_ref::{closure#0}(_1: &mut [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:40:17: 40:24]) -> () {
    debug t => ((*_1).0: T);
    let mut _0: ();
    let mut _2: std::string::String;
    let _3: &str;

    bb0: {
        _3 = const "new S";
        _2 = <&str as Into<String>>::into(_3) -> bb1;
    }

    bb1: {
        drop(((((*_1).0: T).0: S).0: std::string::String)) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        ((((*_1).0: T).0: S).0: std::string::String) = move _2;
        return;
    }

    bb3 (cleanup): {
        ((((*_1).0: T).0: S).0: std::string::String) = move _2;
        resume;
    }
}

fn no_ref_nested() -> () {
    let mut _0: ();
    let mut _1: T;
    let mut _2: S;
    let mut _3: std::string::String;
    let _4: &str;
    let _6: ();
    scope 1 {
        debug t => _1;
        let _5: [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:48:13: 48:15];
        scope 2 {
            debug c => _5;
        }
    }

    bb0: {
        _4 = const "s";
        _3 = <&str as Into<String>>::into(_4) -> bb1;
    }

    bb1: {
        _2 = S(move _3);
        _1 = T(move _2);
        _5 = [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:48:13: 48:15] { t: move _1 };
        _6 = <[closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:48:13: 48:15] as FnOnce<()>>::call_once(move _5, const ()) -> bb2;
    }

    bb2: {
        return;
    }
}

fn no_ref_nested::{closure#0}(_1: [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:48:13: 48:15]) -> () {
    debug t => (_1.0: T);
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 2];
    let _6: [&str; 2];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &S;
    let mut _12: [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:50:21: 50:28];
    let _13: ();
    let mut _14: &mut [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:50:21: 50:28];
    let mut _15: bool;
    scope 1 {
        debug c => _12;
    }

    bb0: {
        _15 = const false;
        _15 = const true;
        _6 = [const "", const "\n"];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _11 = &((_1.0: T).0: S);
        _10 = core::fmt::rt::Argument::<'_>::new_debug::<S>(_11) -> [return: bb1, unwind: bb9];
    }

    bb1: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        _2 = _print(move _3) -> [return: bb3, unwind: bb9];
    }

    bb3: {
        _15 = const false;
        _12 = [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:50:21: 50:28] { t: move (_1.0: T) };
        _14 = &mut _12;
        _13 = <[closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:50:21: 50:28] as FnMut<()>>::call_mut(move _14, const ()) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_12) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_12) -> [return: bb9, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }

    bb8 (cleanup): {
        drop((_1.0: T)) -> [return: bb7, unwind terminate];
    }

    bb9 (cleanup): {
        switchInt(_15) -> [0: bb7, otherwise: bb8];
    }
}

fn no_ref_nested::{closure#0}::{closure#0}(_1: &mut [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:50:21: 50:28]) -> () {
    debug t => ((*_1).0: T);
    let mut _0: ();
    let mut _2: std::string::String;
    let _3: &str;
    let _4: ();
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let _7: &[&str; 2];
    let _8: [&str; 2];
    let mut _9: &[core::fmt::rt::Argument<'_>];
    let _10: &[core::fmt::rt::Argument<'_>; 1];
    let _11: [core::fmt::rt::Argument<'_>; 1];
    let mut _12: core::fmt::rt::Argument<'_>;
    let _13: &std::string::String;

    bb0: {
        _3 = const "new S";
        _2 = <&str as Into<String>>::into(_3) -> bb1;
    }

    bb1: {
        drop(((((*_1).0: T).0: S).0: std::string::String)) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        ((((*_1).0: T).0: S).0: std::string::String) = move _2;
        _8 = [const "", const "\n"];
        _7 = &_8;
        _6 = _7 as &[&str] (Pointer(Unsize));
        _13 = &((((*_1).0: T).0: S).0: std::string::String);
        _12 = core::fmt::rt::Argument::<'_>::new_debug::<String>(_13) -> bb4;
    }

    bb3 (cleanup): {
        ((((*_1).0: T).0: S).0: std::string::String) = move _2;
        resume;
    }

    bb4: {
        _11 = [move _12];
        _10 = &_11;
        _9 = _10 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _5 = Arguments::<'_>::new_v1(move _6, move _9) -> bb5;
    }

    bb5: {
        _4 = _print(move _5) -> bb6;
    }

    bb6: {
        return;
    }
}

fn data_moved_but_not_fn_once() -> () {
    let mut _0: ();
    let _1: std::boxed::Box<i32>;
    let _3: ();
    let mut _4: &[closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:64:13: 64:20];
    let _5: ();
    let mut _6: &[closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:64:13: 64:20];
    scope 1 {
        debug x => _1;
        let _2: [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:64:13: 64:20];
        scope 2 {
            debug c => _2;
        }
    }

    bb0: {
        _1 = Box::<i32>::new(const 10_i32) -> bb1;
    }

    bb1: {
        _2 = [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:64:13: 64:20] { x: move _1 };
        _4 = &_2;
        _3 = <[closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:64:13: 64:20] as Fn<()>>::call(move _4, const ()) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _6 = &_2;
        _5 = <[closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:64:13: 64:20] as Fn<()>>::call(move _6, const ()) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        drop(_2) -> bb4;
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn data_moved_but_not_fn_once::{closure#0}(_1: &[closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:64:13: 64:20]) -> () {
    debug x => ((*_1).0: std::boxed::Box<i32>);
    let mut _0: ();
    let _2: i32;
    let mut _3: std::boxed::Box<i32>;
    let mut _4: *const i32;
    let mut _5: *const ();
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: bool;
    scope 1 {
        debug _x => _2;
    }

    bb0: {
        _3 = deref_copy ((*_1).0: std::boxed::Box<i32>);
        _4 = (((_3.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32);
        _5 = _4 as *const () (PtrToPtr);
        _6 = _5 as usize (Transmute);
        _7 = AlignOf(i32);
        _8 = Sub(_7, const 1_usize);
        _9 = BitAnd(_6, _8);
        _10 = Eq(_9, const 0_usize);
        assert(_10, "misaligned pointer dereference: address must be a multiple of {} but is {}", _7, _6) -> [success: bb1, unwind unreachable];
    }

    bb1: {
        _2 = (*_4);
        return;
    }
}

fn returned_closure_owns_copy_type_data() -> impl Fn() -> i32 {
    let mut _0: impl Fn() -> i32;
    let _1: i32;
    scope 1 {
        debug x => _1;
        scope 2 {
            debug c => _0;
        }
    }

    bb0: {
        _1 = const 10_i32;
        _0 = [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:79:13: 79:20] { x: _1 };
        return;
    }
}

fn returned_closure_owns_copy_type_data::{closure#0}(_1: &[closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:79:13: 79:20]) -> i32 {
    debug x => ((*_1).0: i32);
    let mut _0: i32;

    bb0: {
        _0 = ((*_1).0: i32);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let _3: ();
    let _4: ();
    let _5: ();
    let _6: impl Fn() -> i32;

    bb0: {
        _1 = simple_ref() -> bb1;
    }

    bb1: {
        _2 = struct_contains_ref_to_another_struct() -> bb2;
    }

    bb2: {
        _3 = no_ref() -> bb3;
    }

    bb3: {
        _4 = no_ref_nested() -> bb4;
    }

    bb4: {
        _5 = data_moved_but_not_fn_once() -> bb5;
    }

    bb5: {
        _6 = returned_closure_owns_copy_type_data() -> bb6;
    }

    bb6: {
        return;
    }
}

fn struct_contains_ref_to_another_struct::S(_1: String) -> struct_contains_ref_to_another_struct::S {
    let mut _0: struct_contains_ref_to_another_struct::S;

    bb0: {
        _0 = struct_contains_ref_to_another_struct::S(move _1);
        return;
    }
}

// MIR FOR CTFE
fn struct_contains_ref_to_another_struct::S(_1: String) -> struct_contains_ref_to_another_struct::S {
    let mut _0: struct_contains_ref_to_another_struct::S;

    bb0: {
        _0 = struct_contains_ref_to_another_struct::S(move _1);
        return;
    }
}

fn struct_contains_ref_to_another_struct::T(_1: &mut struct_contains_ref_to_another_struct::S) -> struct_contains_ref_to_another_struct::T<'_> {
    let mut _0: struct_contains_ref_to_another_struct::T<'_>;

    bb0: {
        _0 = struct_contains_ref_to_another_struct::T::<'_>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn struct_contains_ref_to_another_struct::T(_1: &mut struct_contains_ref_to_another_struct::S) -> struct_contains_ref_to_another_struct::T<'_> {
    let mut _0: struct_contains_ref_to_another_struct::T<'_>;

    bb0: {
        _0 = struct_contains_ref_to_another_struct::T::<'_>(move _1);
        return;
    }
}

fn S(_1: String) -> S {
    let mut _0: S;

    bb0: {
        _0 = S(move _1);
        return;
    }
}

// MIR FOR CTFE
fn S(_1: String) -> S {
    let mut _0: S;

    bb0: {
        _0 = S(move _1);
        return;
    }
}

fn T(_1: S) -> T {
    let mut _0: T;

    bb0: {
        _0 = T(move _1);
        return;
    }
}

// MIR FOR CTFE
fn T(_1: S) -> T {
    let mut _0: T;

    bb0: {
        _0 = T(move _1);
        return;
    }
}
