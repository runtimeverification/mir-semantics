// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: (std::string::String, std::string::String);
    let mut _2: std::string::String;
    let mut _3: std::string::String;
    let mut _5: std::string::String;
    let mut _6: std::string::String;
    let _8: ();
    let mut _9: bool;
    scope 1 {
        debug t => _1;
        let _4: (std::string::String, std::string::String);
        scope 2 {
            debug g => _4;
            let _7: [closure@ui/closures/2229_closure_analysis/run_pass/destructure-pattern-closure-within-closure.rs:9:13: 9:15];
            scope 3 {
                debug a => _7;
            }
        }
    }

    bb0: {
        _9 = const false;
        _2 = <String as From<&str>>::from(const "Hello") -> bb1;
    }

    bb1: {
        _3 = <String as From<&str>>::from(const "World") -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _9 = const true;
        _1 = (move _2, move _3);
        _5 = <String as From<&str>>::from(const "Mr") -> [return: bb3, unwind: bb10];
    }

    bb3: {
        _6 = <String as From<&str>>::from(const "Goose") -> [return: bb4, unwind: bb6];
    }

    bb4: {
        _4 = (move _5, move _6);
        _9 = const false;
        _7 = [closure@ui/closures/2229_closure_analysis/run_pass/destructure-pattern-closure-within-closure.rs:9:13: 9:15] { g: move _4, t: move _1 };
        _8 = <[closure@ui/closures/2229_closure_analysis/run_pass/destructure-pattern-closure-within-closure.rs:9:13: 9:15] as FnOnce<()>>::call_once(move _7, const ()) -> [return: bb5, unwind: bb10];
    }

    bb5: {
        _9 = const false;
        return;
    }

    bb6 (cleanup): {
        drop(_5) -> [return: bb10, unwind terminate];
    }

    bb7 (cleanup): {
        drop(_2) -> [return: bb8, unwind terminate];
    }

    bb8 (cleanup): {
        resume;
    }

    bb9 (cleanup): {
        drop(_1) -> [return: bb8, unwind terminate];
    }

    bb10 (cleanup): {
        switchInt(_9) -> [0: bb8, otherwise: bb9];
    }
}

fn main::{closure#0}(_1: [closure@ui/closures/2229_closure_analysis/run_pass/destructure-pattern-closure-within-closure.rs:9:13: 9:15]) -> () {
    debug g => (_1.0: (std::string::String, std::string::String));
    debug t => (_1.1: (std::string::String, std::string::String));
    let mut _0: ();
    let _2: std::string::String;
    let _4: ();
    scope 1 {
        debug g2 => _2;
        let _3: [closure@ui/closures/2229_closure_analysis/run_pass/destructure-pattern-closure-within-closure.rs:12:17: 12:19];
        scope 2 {
            debug c => _3;
        }
    }

    bb0: {
        _2 = move ((_1.0: (std::string::String, std::string::String)).1: std::string::String);
        _3 = [closure@ui/closures/2229_closure_analysis/run_pass/destructure-pattern-closure-within-closure.rs:12:17: 12:19] { t: move (_1.1: (std::string::String, std::string::String)) };
        _4 = <[closure@ui/closures/2229_closure_analysis/run_pass/destructure-pattern-closure-within-closure.rs:12:17: 12:19] as FnOnce<()>>::call_once(move _3, const ()) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_2) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        drop(((_1.0: (std::string::String, std::string::String)).0: std::string::String)) -> bb5;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(((_1.0: (std::string::String, std::string::String)).0: std::string::String)) -> [return: bb4, unwind terminate];
    }
}

fn main::{closure#0}::{closure#0}(_1: [closure@ui/closures/2229_closure_analysis/run_pass/destructure-pattern-closure-within-closure.rs:12:17: 12:19]) -> () {
    debug t => (_1.0: (std::string::String, std::string::String));
    let mut _0: ();
    let _2: std::string::String;
    scope 1 {
        debug t2 => _2;
    }

    bb0: {
        _2 = move ((_1.0: (std::string::String, std::string::String)).1: std::string::String);
        drop(_2) -> [return: bb1, unwind: bb4];
    }

    bb1: {
        drop(((_1.0: (std::string::String, std::string::String)).0: std::string::String)) -> bb3;
    }

    bb2 (cleanup): {
        resume;
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(((_1.0: (std::string::String, std::string::String)).0: std::string::String)) -> [return: bb2, unwind terminate];
    }
}
