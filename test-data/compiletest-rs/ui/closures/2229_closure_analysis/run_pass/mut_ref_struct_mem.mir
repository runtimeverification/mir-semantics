// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn mut_tuple() -> () {
    let mut _0: ();
    let mut _1: (i32, i32);
    let mut _3: &mut (i32, i32);
    let mut _5: &mut (&mut (i32, i32), i32);
    let _6: ();
    let mut _7: &mut [closure@ui/closures/2229_closure_analysis/run_pass/mut_ref_struct_mem.rs:15:17: 15:19];
    scope 1 {
        debug t => _1;
        let _2: (&mut (i32, i32), i32);
        scope 2 {
            debug t1 => _2;
            let mut _4: [closure@ui/closures/2229_closure_analysis/run_pass/mut_ref_struct_mem.rs:15:17: 15:19];
            scope 3 {
                debug c => _4;
            }
        }
    }

    bb0: {
        _1 = (const 10_i32, const 10_i32);
        _3 = &mut _1;
        _2 = (move _3, const 10_i32);
        _5 = &mut _2;
        _4 = [closure@ui/closures/2229_closure_analysis/run_pass/mut_ref_struct_mem.rs:15:17: 15:19] { t1: move _5 };
        _7 = &mut _4;
        _6 = <[closure@ui/closures/2229_closure_analysis/run_pass/mut_ref_struct_mem.rs:15:17: 15:19] as FnMut<()>>::call_mut(move _7, const ()) -> bb1;
    }

    bb1: {
        return;
    }
}

fn mut_tuple::{closure#0}(_1: &mut [closure@ui/closures/2229_closure_analysis/run_pass/mut_ref_struct_mem.rs:15:17: 15:19]) -> () {
    debug t1 => (*((*_1).0: &mut (&mut (i32, i32), i32)));
    let mut _0: ();
    let mut _2: &mut (&mut (i32, i32), i32);
    let mut _3: &mut (i32, i32);
    let mut _4: &mut (&mut (i32, i32), i32);
    let mut _5: &mut (i32, i32);

    bb0: {
        _2 = deref_copy ((*_1).0: &mut (&mut (i32, i32), i32));
        _3 = deref_copy ((*_2).0: &mut (i32, i32));
        _4 = deref_copy ((*_1).0: &mut (&mut (i32, i32), i32));
        _5 = deref_copy ((*_4).0: &mut (i32, i32));
        ((*_3).0: i32) = Add(((*_5).0: i32), const 10_i32);
        return;
    }
}

fn mut_tuple_nested() -> () {
    let mut _0: ();
    let mut _1: (i32, i32);
    let mut _3: &mut (i32, i32);
    let mut _5: &mut (&mut (i32, i32), i32);
    let _6: ();
    let mut _7: &mut [closure@ui/closures/2229_closure_analysis/run_pass/mut_ref_struct_mem.rs:28:17: 28:19];
    scope 1 {
        debug t => _1;
        let _2: (&mut (i32, i32), i32);
        scope 2 {
            debug t1 => _2;
            let mut _4: [closure@ui/closures/2229_closure_analysis/run_pass/mut_ref_struct_mem.rs:28:17: 28:19];
            scope 3 {
                debug c => _4;
            }
        }
    }

    bb0: {
        _1 = (const 10_i32, const 10_i32);
        _3 = &mut _1;
        _2 = (move _3, const 10_i32);
        _5 = &mut _2;
        _4 = [closure@ui/closures/2229_closure_analysis/run_pass/mut_ref_struct_mem.rs:28:17: 28:19] { t1: move _5 };
        _7 = &mut _4;
        _6 = <[closure@ui/closures/2229_closure_analysis/run_pass/mut_ref_struct_mem.rs:28:17: 28:19] as FnMut<()>>::call_mut(move _7, const ()) -> bb1;
    }

    bb1: {
        return;
    }
}

fn mut_tuple_nested::{closure#0}(_1: &mut [closure@ui/closures/2229_closure_analysis/run_pass/mut_ref_struct_mem.rs:28:17: 28:19]) -> () {
    debug t1 => (*((*_1).0: &mut (&mut (i32, i32), i32)));
    let mut _0: ();
    let mut _2: [closure@ui/closures/2229_closure_analysis/run_pass/mut_ref_struct_mem.rs:29:21: 29:23];
    let _3: ();
    let mut _4: &mut [closure@ui/closures/2229_closure_analysis/run_pass/mut_ref_struct_mem.rs:29:21: 29:23];
    let mut _5: &mut (&mut (i32, i32), i32);
    scope 1 {
        debug c => _2;
    }

    bb0: {
        _5 = deref_copy ((*_1).0: &mut (&mut (i32, i32), i32));
        _2 = [closure@ui/closures/2229_closure_analysis/run_pass/mut_ref_struct_mem.rs:29:21: 29:23] { t1: _5 };
        _4 = &mut _2;
        _3 = <[closure@ui/closures/2229_closure_analysis/run_pass/mut_ref_struct_mem.rs:29:21: 29:23] as FnMut<()>>::call_mut(move _4, const ()) -> bb1;
    }

    bb1: {
        return;
    }
}

fn mut_tuple_nested::{closure#0}::{closure#0}(_1: &mut [closure@ui/closures/2229_closure_analysis/run_pass/mut_ref_struct_mem.rs:29:21: 29:23]) -> () {
    debug t1 => (*((*_1).0: &mut (&mut (i32, i32), i32)));
    let mut _0: ();
    let mut _2: &mut (&mut (i32, i32), i32);
    let mut _3: &mut (i32, i32);
    let mut _4: &mut (&mut (i32, i32), i32);
    let mut _5: &mut (i32, i32);

    bb0: {
        _2 = deref_copy ((*_1).0: &mut (&mut (i32, i32), i32));
        _3 = deref_copy ((*_2).0: &mut (i32, i32));
        _4 = deref_copy ((*_1).0: &mut (&mut (i32, i32), i32));
        _5 = deref_copy ((*_4).0: &mut (i32, i32));
        ((*_3).0: i32) = Add(((*_5).0: i32), const 10_i32);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();

    bb0: {
        _1 = mut_tuple() -> bb1;
    }

    bb1: {
        _2 = mut_tuple_nested() -> bb2;
    }

    bb2: {
        return;
    }
}
