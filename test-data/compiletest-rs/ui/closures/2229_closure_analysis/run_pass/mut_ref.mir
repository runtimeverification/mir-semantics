// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn mut_ref_1() -> () {
    let mut _0: ();
    let mut _1: std::string::String;
    let mut _4: &mut &mut std::string::String;
    let _5: ();
    let mut _6: &mut [closure@ui/closures/2229_closure_analysis/run_pass/mut_ref.rs:12:17: 12:19];
    scope 1 {
        debug x => _1;
        let _2: &mut std::string::String;
        scope 2 {
            debug rx => _2;
            let mut _3: [closure@ui/closures/2229_closure_analysis/run_pass/mut_ref.rs:12:17: 12:19];
            scope 3 {
                debug c => _3;
            }
        }
    }

    bb0: {
        _1 = String::new() -> bb1;
    }

    bb1: {
        _2 = &mut _1;
        _4 = &mut _2;
        _3 = [closure@ui/closures/2229_closure_analysis/run_pass/mut_ref.rs:12:17: 12:19] { rx: move _4 };
        _6 = &mut _3;
        _5 = <[closure@ui/closures/2229_closure_analysis/run_pass/mut_ref.rs:12:17: 12:19] as FnMut<()>>::call_mut(move _6, const ()) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_1) -> bb3;
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_1) -> [return: bb5, unwind terminate];
    }

    bb5 (cleanup): {
        resume;
    }
}

fn mut_ref_1::{closure#0}(_1: &mut [closure@ui/closures/2229_closure_analysis/run_pass/mut_ref.rs:12:17: 12:19]) -> () {
    debug rx => (*((*_1).0: &mut &mut std::string::String));
    let mut _0: ();
    let mut _2: std::string::String;
    let mut _3: &mut &mut std::string::String;
    let mut _4: &mut std::string::String;
    let mut _5: &mut &mut std::string::String;
    let mut _6: &mut std::string::String;
    let mut _7: &mut &mut std::string::String;
    let mut _8: &mut std::string::String;

    bb0: {
        _2 = String::new() -> bb1;
    }

    bb1: {
        _3 = deref_copy ((*_1).0: &mut &mut std::string::String);
        _4 = deref_copy (*_3);
        drop((*_4)) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        _5 = deref_copy ((*_1).0: &mut &mut std::string::String);
        _6 = deref_copy (*_5);
        (*_6) = move _2;
        return;
    }

    bb3 (cleanup): {
        _7 = deref_copy ((*_1).0: &mut &mut std::string::String);
        _8 = deref_copy (*_7);
        (*_8) = move _2;
        resume;
    }
}

fn mut_ref_2() -> () {
    let mut _0: ();
    let _1: std::string::String;
    let mut _6: &mut &mut &std::string::String;
    let mut _7: &std::string::String;
    let _8: ();
    let mut _9: &mut [closure@ui/closures/2229_closure_analysis/run_pass/mut_ref.rs:27:17: 27:19];
    scope 1 {
        debug x => _1;
        let _2: std::string::String;
        scope 2 {
            debug y => _2;
            let mut _3: &std::string::String;
            scope 3 {
                debug ref_x => _3;
                let _4: &mut &std::string::String;
                scope 4 {
                    debug m_ref_x => _4;
                    let mut _5: [closure@ui/closures/2229_closure_analysis/run_pass/mut_ref.rs:27:17: 27:19];
                    scope 5 {
                        debug c => _5;
                    }
                }
            }
        }
    }

    bb0: {
        _1 = String::new() -> bb1;
    }

    bb1: {
        _2 = String::new() -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _3 = &_1;
        _4 = &mut _3;
        _6 = &mut _4;
        _7 = &_2;
        _5 = [closure@ui/closures/2229_closure_analysis/run_pass/mut_ref.rs:27:17: 27:19] { y: move _6, m_ref_x: move _7 };
        _9 = &mut _5;
        _8 = <[closure@ui/closures/2229_closure_analysis/run_pass/mut_ref.rs:27:17: 27:19] as FnMut<()>>::call_mut(move _9, const ()) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        drop(_2) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        drop(_1) -> bb5;
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        drop(_1) -> [return: bb8, unwind terminate];
    }

    bb8 (cleanup): {
        resume;
    }
}

fn mut_ref_2::{closure#0}(_1: &mut [closure@ui/closures/2229_closure_analysis/run_pass/mut_ref.rs:27:17: 27:19]) -> () {
    debug m_ref_x => (*((*_1).0: &mut &mut &std::string::String));
    debug y => (*((*_1).1: &std::string::String));
    let mut _0: ();
    let mut _2: &std::string::String;
    let mut _3: &mut &mut &std::string::String;
    let mut _4: &mut &std::string::String;

    bb0: {
        _2 = deref_copy ((*_1).1: &std::string::String);
        _3 = deref_copy ((*_1).0: &mut &mut &std::string::String);
        _4 = deref_copy (*_3);
        (*_4) = _2;
        return;
    }
}

fn mut_mut_ref() -> () {
    let mut _0: ();
    let mut _1: std::string::String;
    let mut _5: &mut &mut &mut std::string::String;
    let _6: ();
    let mut _7: &mut [closure@ui/closures/2229_closure_analysis/run_pass/mut_ref.rs:43:17: 43:19];
    scope 1 {
        debug x => _1;
        let mut _2: &mut std::string::String;
        scope 2 {
            debug mref_x => _2;
            let _3: &mut &mut std::string::String;
            scope 3 {
                debug m_mref_x => _3;
                let mut _4: [closure@ui/closures/2229_closure_analysis/run_pass/mut_ref.rs:43:17: 43:19];
                scope 4 {
                    debug c => _4;
                }
            }
        }
    }

    bb0: {
        _1 = String::new() -> bb1;
    }

    bb1: {
        _2 = &mut _1;
        _3 = &mut _2;
        _5 = &mut _3;
        _4 = [closure@ui/closures/2229_closure_analysis/run_pass/mut_ref.rs:43:17: 43:19] { m_mref_x: move _5 };
        _7 = &mut _4;
        _6 = <[closure@ui/closures/2229_closure_analysis/run_pass/mut_ref.rs:43:17: 43:19] as FnMut<()>>::call_mut(move _7, const ()) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_1) -> bb3;
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_1) -> [return: bb5, unwind terminate];
    }

    bb5 (cleanup): {
        resume;
    }
}

fn mut_mut_ref::{closure#0}(_1: &mut [closure@ui/closures/2229_closure_analysis/run_pass/mut_ref.rs:43:17: 43:19]) -> () {
    debug m_mref_x => (*((*_1).0: &mut &mut &mut std::string::String));
    let mut _0: ();
    let mut _2: std::string::String;
    let mut _3: &mut &mut &mut std::string::String;
    let mut _4: &mut &mut std::string::String;
    let mut _5: &mut std::string::String;
    let mut _6: &mut &mut &mut std::string::String;
    let mut _7: &mut &mut std::string::String;
    let mut _8: &mut std::string::String;
    let mut _9: &mut &mut &mut std::string::String;
    let mut _10: &mut &mut std::string::String;
    let mut _11: &mut std::string::String;

    bb0: {
        _2 = String::new() -> bb1;
    }

    bb1: {
        _3 = deref_copy ((*_1).0: &mut &mut &mut std::string::String);
        _4 = deref_copy (*_3);
        _5 = deref_copy (*_4);
        drop((*_5)) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        _6 = deref_copy ((*_1).0: &mut &mut &mut std::string::String);
        _7 = deref_copy (*_6);
        _8 = deref_copy (*_7);
        (*_8) = move _2;
        return;
    }

    bb3 (cleanup): {
        _9 = deref_copy ((*_1).0: &mut &mut &mut std::string::String);
        _10 = deref_copy (*_9);
        _11 = deref_copy (*_10);
        (*_11) = move _2;
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let _3: ();

    bb0: {
        _1 = mut_ref_1() -> bb1;
    }

    bb1: {
        _2 = mut_ref_2() -> bb2;
    }

    bb2: {
        _3 = mut_mut_ref() -> bb3;
    }

    bb3: {
        return;
    }
}
