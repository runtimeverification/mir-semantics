// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn graph() -> Graph<N, E, i32> {
    let mut _0: Graph<N, E, i32>;
    let mut _1: !;

    bb0: {
        _1 = core::panicking::panic(const "not yet implemented");
    }
}

fn first_ice() -> () {
    let mut _0: ();
    let _1: Graph<i32, i32, i32>;
    let mut _2: [closure@ui/closures/2229_closure_analysis/migrations/issue-90024-adt-correct-subst.rs:19:13: 19:15];
    scope 1 {
        debug g => _1;
        scope 2 {
        }
    }

    bb0: {
        _1 = graph::<i32, i32>() -> bb1;
    }

    bb1: {
        _2 = [closure@ui/closures/2229_closure_analysis/migrations/issue-90024-adt-correct-subst.rs:19:13: 19:15] { g: move _1 };
        drop(_2) -> bb2;
    }

    bb2: {
        return;
    }
}

fn first_ice::{closure#0}(_1: [closure@ui/closures/2229_closure_analysis/migrations/issue-90024-adt-correct-subst.rs:19:13: 19:15]) -> Graph<i32, i32, i32> {
    debug g => (_1.0: Graph<i32, i32, i32>);
    let mut _0: Graph<i32, i32, i32>;

    bb0: {
        _0 = move (_1.0: Graph<i32, i32, i32>);
        return;
    }
}

fn second_ice() -> () {
    let mut _0: ();
    let _1: Foo<std::iter::Empty<()>>;
    let mut _2: std::vec::Vec<()>;
    let _3: ();
    let mut _4: &[closure@ui/closures/2229_closure_analysis/migrations/issue-90024-adt-correct-subst.rs:31:6: 31:8];
    let _5: [closure@ui/closures/2229_closure_analysis/migrations/issue-90024-adt-correct-subst.rs:31:6: 31:8];
    let mut _6: &Foo<std::iter::Empty<()>>;
    scope 1 {
        debug v => _1;
    }

    bb0: {
        _2 = Vec::<()>::new() -> bb1;
    }

    bb1: {
        _1 = Foo::<std::iter::Empty<()>> { data: move _2 };
        _6 = &_1;
        _5 = [closure@ui/closures/2229_closure_analysis/migrations/issue-90024-adt-correct-subst.rs:31:6: 31:8] { v: move _6 };
        _4 = &_5;
        _3 = <[closure@ui/closures/2229_closure_analysis/migrations/issue-90024-adt-correct-subst.rs:31:6: 31:8] as Fn<()>>::call(move _4, const ()) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_1) -> bb3;
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_1) -> [return: bb5, unwind terminate];
    }

    bb5 (cleanup): {
        resume;
    }
}

fn second_ice::{closure#0}(_1: &[closure@ui/closures/2229_closure_analysis/migrations/issue-90024-adt-correct-subst.rs:31:6: 31:8]) -> () {
    debug v => (*((*_1).0: &Foo<std::iter::Empty<()>>));
    let mut _0: ();
    let mut _2: &();
    let mut _3: &std::vec::Vec<()>;
    let mut _4: &Foo<std::iter::Empty<()>>;

    bb0: {
        _4 = deref_copy ((*_1).0: &Foo<std::iter::Empty<()>>);
        _3 = &((*_4).0: std::vec::Vec<()>);
        _2 = <Vec<()> as Index<usize>>::index(move _3, const 0_usize) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();

    bb0: {
        _1 = first_ice() -> bb1;
    }

    bb1: {
        _2 = second_ice() -> bb2;
    }

    bb2: {
        return;
    }
}
