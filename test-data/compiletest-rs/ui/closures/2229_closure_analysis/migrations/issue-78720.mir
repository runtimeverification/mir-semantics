// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: &str;
    let _3: ();
    let mut _4: [closure@ui/closures/2229_closure_analysis/migrations/issue-78720.rs:9:14: 9:21];
    let mut _5: &&str;
    scope 1 {
        debug a => _2;
        let _2: &str;
    }

    bb0: {
        _1 = const "";
        _2 = _1;
        _5 = &_2;
        _4 = [closure@ui/closures/2229_closure_analysis/migrations/issue-78720.rs:9:14: 9:21] { a: move _5 };
        _3 = std::mem::drop::<[closure@ui/closures/2229_closure_analysis/migrations/issue-78720.rs:9:14: 9:21]>(move _4) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/closures/2229_closure_analysis/migrations/issue-78720.rs:9:14: 9:21], _2: ()) -> () {
    debug a => (*((*_1).0: &&str));
    let mut _0: ();
    let mut _3: &str;
    let mut _4: &&str;

    bb0: {
        _4 = deref_copy ((*_1).0: &&str);
        _3 = (*_4);
        _0 = std::mem::drop::<&str>(move _3) -> bb1;
    }

    bb1: {
        return;
    }
}
