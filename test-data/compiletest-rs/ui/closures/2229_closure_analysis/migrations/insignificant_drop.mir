// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn prim_i32::test_for_type(_1: i32) -> () {
    debug t => _1;
    let mut _0: ();
    let _2: (std::sync::Mutex<i32>, i32);
    let mut _3: std::sync::Mutex<i32>;
    scope 1 {
        debug tup => _2;
        let _4: [closure@ui/closures/2229_closure_analysis/migrations/insignificant_drop.rs:19:26: 19:28];
        scope 2 {
            debug _c => _4;
        }
    }

    bb0: {
        _3 = Mutex::<i32>::new(const 0_i32) -> bb1;
    }

    bb1: {
        _2 = (move _3, _1);
        _4 = [closure@ui/closures/2229_closure_analysis/migrations/insignificant_drop.rs:19:26: 19:28] { tup: move _2 };
        return;
    }
}

fn prim_i32::test_for_type::{closure#0}(_1: [closure@ui/closures/2229_closure_analysis/migrations/insignificant_drop.rs:19:26: 19:28]) -> Mutex<i32> {
    debug tup => (_1.0: (std::sync::Mutex<i32>, i32));
    let mut _0: std::sync::Mutex<i32>;

    bb0: {
        _0 = move ((_1.0: (std::sync::Mutex<i32>, i32)).0: std::sync::Mutex<i32>);
        return;
    }
}

fn vec_i32::test_for_type(_1: Vec<i32>) -> () {
    debug t => _1;
    let mut _0: ();
    let _2: (std::sync::Mutex<i32>, std::vec::Vec<i32>);
    let mut _3: std::sync::Mutex<i32>;
    let mut _4: std::vec::Vec<i32>;
    let mut _6: bool;
    scope 1 {
        debug tup => _2;
        let _5: [closure@ui/closures/2229_closure_analysis/migrations/insignificant_drop.rs:19:26: 19:28];
        scope 2 {
            debug _c => _5;
        }
    }

    bb0: {
        _6 = const false;
        _6 = const true;
        _3 = Mutex::<i32>::new(const 0_i32) -> [return: bb1, unwind: bb5];
    }

    bb1: {
        _6 = const false;
        _4 = move _1;
        _2 = (move _3, move _4);
        _5 = [closure@ui/closures/2229_closure_analysis/migrations/insignificant_drop.rs:19:26: 19:28] { tup: move _2 };
        drop(_5) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        resume;
    }

    bb4 (cleanup): {
        drop(_1) -> [return: bb3, unwind terminate];
    }

    bb5 (cleanup): {
        switchInt(_6) -> [0: bb3, otherwise: bb4];
    }
}

fn vec_i32::test_for_type::{closure#0}(_1: [closure@ui/closures/2229_closure_analysis/migrations/insignificant_drop.rs:19:26: 19:28]) -> Mutex<i32> {
    debug tup => (_1.0: (std::sync::Mutex<i32>, std::vec::Vec<i32>));
    let mut _0: std::sync::Mutex<i32>;

    bb0: {
        _0 = move ((_1.0: (std::sync::Mutex<i32>, std::vec::Vec<i32>)).0: std::sync::Mutex<i32>);
        drop(((_1.0: (std::sync::Mutex<i32>, std::vec::Vec<i32>)).1: std::vec::Vec<i32>)) -> bb1;
    }

    bb1: {
        return;
    }
}

fn string::test_for_type(_1: String) -> () {
    debug t => _1;
    let mut _0: ();
    let _2: (std::sync::Mutex<i32>, std::string::String);
    let mut _3: std::sync::Mutex<i32>;
    let mut _4: std::string::String;
    let mut _6: bool;
    scope 1 {
        debug tup => _2;
        let _5: [closure@ui/closures/2229_closure_analysis/migrations/insignificant_drop.rs:19:26: 19:28];
        scope 2 {
            debug _c => _5;
        }
    }

    bb0: {
        _6 = const false;
        _6 = const true;
        _3 = Mutex::<i32>::new(const 0_i32) -> [return: bb1, unwind: bb5];
    }

    bb1: {
        _6 = const false;
        _4 = move _1;
        _2 = (move _3, move _4);
        _5 = [closure@ui/closures/2229_closure_analysis/migrations/insignificant_drop.rs:19:26: 19:28] { tup: move _2 };
        drop(_5) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        resume;
    }

    bb4 (cleanup): {
        drop(_1) -> [return: bb3, unwind terminate];
    }

    bb5 (cleanup): {
        switchInt(_6) -> [0: bb3, otherwise: bb4];
    }
}

fn string::test_for_type::{closure#0}(_1: [closure@ui/closures/2229_closure_analysis/migrations/insignificant_drop.rs:19:26: 19:28]) -> Mutex<i32> {
    debug tup => (_1.0: (std::sync::Mutex<i32>, std::string::String));
    let mut _0: std::sync::Mutex<i32>;

    bb0: {
        _0 = move ((_1.0: (std::sync::Mutex<i32>, std::string::String)).0: std::sync::Mutex<i32>);
        drop(((_1.0: (std::sync::Mutex<i32>, std::string::String)).1: std::string::String)) -> bb1;
    }

    bb1: {
        return;
    }
}

fn vec_string::test_for_type(_1: Vec<String>) -> () {
    debug t => _1;
    let mut _0: ();
    let _2: (std::sync::Mutex<i32>, std::vec::Vec<std::string::String>);
    let mut _3: std::sync::Mutex<i32>;
    let mut _4: std::vec::Vec<std::string::String>;
    let mut _6: bool;
    scope 1 {
        debug tup => _2;
        let _5: [closure@ui/closures/2229_closure_analysis/migrations/insignificant_drop.rs:19:26: 19:28];
        scope 2 {
            debug _c => _5;
        }
    }

    bb0: {
        _6 = const false;
        _6 = const true;
        _3 = Mutex::<i32>::new(const 0_i32) -> [return: bb1, unwind: bb5];
    }

    bb1: {
        _6 = const false;
        _4 = move _1;
        _2 = (move _3, move _4);
        _5 = [closure@ui/closures/2229_closure_analysis/migrations/insignificant_drop.rs:19:26: 19:28] { tup: move _2 };
        drop(_5) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        resume;
    }

    bb4 (cleanup): {
        drop(_1) -> [return: bb3, unwind terminate];
    }

    bb5 (cleanup): {
        switchInt(_6) -> [0: bb3, otherwise: bb4];
    }
}

fn vec_string::test_for_type::{closure#0}(_1: [closure@ui/closures/2229_closure_analysis/migrations/insignificant_drop.rs:19:26: 19:28]) -> Mutex<i32> {
    debug tup => (_1.0: (std::sync::Mutex<i32>, std::vec::Vec<std::string::String>));
    let mut _0: std::sync::Mutex<i32>;

    bb0: {
        _0 = move ((_1.0: (std::sync::Mutex<i32>, std::vec::Vec<std::string::String>)).0: std::sync::Mutex<i32>);
        drop(((_1.0: (std::sync::Mutex<i32>, std::vec::Vec<std::string::String>)).1: std::vec::Vec<std::string::String>)) -> bb1;
    }

    bb1: {
        return;
    }
}

fn hash_map::test_for_type(_1: std::collections::HashMap<String, String>) -> () {
    debug t => _1;
    let mut _0: ();
    let _2: (std::sync::Mutex<i32>, std::collections::HashMap<std::string::String, std::string::String>);
    let mut _3: std::sync::Mutex<i32>;
    let mut _4: std::collections::HashMap<std::string::String, std::string::String>;
    let mut _6: bool;
    scope 1 {
        debug tup => _2;
        let _5: [closure@ui/closures/2229_closure_analysis/migrations/insignificant_drop.rs:19:26: 19:28];
        scope 2 {
            debug _c => _5;
        }
    }

    bb0: {
        _6 = const false;
        _6 = const true;
        _3 = Mutex::<i32>::new(const 0_i32) -> [return: bb1, unwind: bb5];
    }

    bb1: {
        _6 = const false;
        _4 = move _1;
        _2 = (move _3, move _4);
        _5 = [closure@ui/closures/2229_closure_analysis/migrations/insignificant_drop.rs:19:26: 19:28] { tup: move _2 };
        drop(_5) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        resume;
    }

    bb4 (cleanup): {
        drop(_1) -> [return: bb3, unwind terminate];
    }

    bb5 (cleanup): {
        switchInt(_6) -> [0: bb3, otherwise: bb4];
    }
}

fn hash_map::test_for_type::{closure#0}(_1: [closure@ui/closures/2229_closure_analysis/migrations/insignificant_drop.rs:19:26: 19:28]) -> Mutex<i32> {
    debug tup => (_1.0: (std::sync::Mutex<i32>, std::collections::HashMap<std::string::String, std::string::String>));
    let mut _0: std::sync::Mutex<i32>;

    bb0: {
        _0 = move ((_1.0: (std::sync::Mutex<i32>, std::collections::HashMap<std::string::String, std::string::String>)).0: std::sync::Mutex<i32>);
        drop(((_1.0: (std::sync::Mutex<i32>, std::collections::HashMap<std::string::String, std::string::String>)).1: std::collections::HashMap<std::string::String, std::string::String>)) -> bb1;
    }

    bb1: {
        return;
    }
}

fn btree_map::test_for_type(_1: std::collections::BTreeMap<String, i32>) -> () {
    debug t => _1;
    let mut _0: ();
    let _2: (std::sync::Mutex<i32>, std::collections::BTreeMap<std::string::String, i32>);
    let mut _3: std::sync::Mutex<i32>;
    let mut _4: std::collections::BTreeMap<std::string::String, i32>;
    let mut _6: bool;
    scope 1 {
        debug tup => _2;
        let _5: [closure@ui/closures/2229_closure_analysis/migrations/insignificant_drop.rs:19:26: 19:28];
        scope 2 {
            debug _c => _5;
        }
    }

    bb0: {
        _6 = const false;
        _6 = const true;
        _3 = Mutex::<i32>::new(const 0_i32) -> [return: bb1, unwind: bb5];
    }

    bb1: {
        _6 = const false;
        _4 = move _1;
        _2 = (move _3, move _4);
        _5 = [closure@ui/closures/2229_closure_analysis/migrations/insignificant_drop.rs:19:26: 19:28] { tup: move _2 };
        drop(_5) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        resume;
    }

    bb4 (cleanup): {
        drop(_1) -> [return: bb3, unwind terminate];
    }

    bb5 (cleanup): {
        switchInt(_6) -> [0: bb3, otherwise: bb4];
    }
}

fn btree_map::test_for_type::{closure#0}(_1: [closure@ui/closures/2229_closure_analysis/migrations/insignificant_drop.rs:19:26: 19:28]) -> Mutex<i32> {
    debug tup => (_1.0: (std::sync::Mutex<i32>, std::collections::BTreeMap<std::string::String, i32>));
    let mut _0: std::sync::Mutex<i32>;

    bb0: {
        _0 = move ((_1.0: (std::sync::Mutex<i32>, std::collections::BTreeMap<std::string::String, i32>)).0: std::sync::Mutex<i32>);
        drop(((_1.0: (std::sync::Mutex<i32>, std::collections::BTreeMap<std::string::String, i32>)).1: std::collections::BTreeMap<std::string::String, i32>)) -> bb1;
    }

    bb1: {
        return;
    }
}

fn linked_list::test_for_type(_1: std::collections::LinkedList<String>) -> () {
    debug t => _1;
    let mut _0: ();
    let _2: (std::sync::Mutex<i32>, std::collections::LinkedList<std::string::String>);
    let mut _3: std::sync::Mutex<i32>;
    let mut _4: std::collections::LinkedList<std::string::String>;
    let mut _6: bool;
    scope 1 {
        debug tup => _2;
        let _5: [closure@ui/closures/2229_closure_analysis/migrations/insignificant_drop.rs:19:26: 19:28];
        scope 2 {
            debug _c => _5;
        }
    }

    bb0: {
        _6 = const false;
        _6 = const true;
        _3 = Mutex::<i32>::new(const 0_i32) -> [return: bb1, unwind: bb5];
    }

    bb1: {
        _6 = const false;
        _4 = move _1;
        _2 = (move _3, move _4);
        _5 = [closure@ui/closures/2229_closure_analysis/migrations/insignificant_drop.rs:19:26: 19:28] { tup: move _2 };
        drop(_5) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        resume;
    }

    bb4 (cleanup): {
        drop(_1) -> [return: bb3, unwind terminate];
    }

    bb5 (cleanup): {
        switchInt(_6) -> [0: bb3, otherwise: bb4];
    }
}

fn linked_list::test_for_type::{closure#0}(_1: [closure@ui/closures/2229_closure_analysis/migrations/insignificant_drop.rs:19:26: 19:28]) -> Mutex<i32> {
    debug tup => (_1.0: (std::sync::Mutex<i32>, std::collections::LinkedList<std::string::String>));
    let mut _0: std::sync::Mutex<i32>;

    bb0: {
        _0 = move ((_1.0: (std::sync::Mutex<i32>, std::collections::LinkedList<std::string::String>)).0: std::sync::Mutex<i32>);
        drop(((_1.0: (std::sync::Mutex<i32>, std::collections::LinkedList<std::string::String>)).1: std::collections::LinkedList<std::string::String>)) -> bb1;
    }

    bb1: {
        return;
    }
}

fn rc_i32::test_for_type(_1: Rc<i32>) -> () {
    debug t => _1;
    let mut _0: ();
    let _2: (std::sync::Mutex<i32>, std::rc::Rc<i32>);
    let mut _3: std::sync::Mutex<i32>;
    let mut _4: std::rc::Rc<i32>;
    let mut _6: bool;
    scope 1 {
        debug tup => _2;
        let _5: [closure@ui/closures/2229_closure_analysis/migrations/insignificant_drop.rs:19:26: 19:28];
        scope 2 {
            debug _c => _5;
        }
    }

    bb0: {
        _6 = const false;
        _6 = const true;
        _3 = Mutex::<i32>::new(const 0_i32) -> [return: bb1, unwind: bb5];
    }

    bb1: {
        _6 = const false;
        _4 = move _1;
        _2 = (move _3, move _4);
        _5 = [closure@ui/closures/2229_closure_analysis/migrations/insignificant_drop.rs:19:26: 19:28] { tup: move _2 };
        drop(_5) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        resume;
    }

    bb4 (cleanup): {
        drop(_1) -> [return: bb3, unwind terminate];
    }

    bb5 (cleanup): {
        switchInt(_6) -> [0: bb3, otherwise: bb4];
    }
}

fn rc_i32::test_for_type::{closure#0}(_1: [closure@ui/closures/2229_closure_analysis/migrations/insignificant_drop.rs:19:26: 19:28]) -> Mutex<i32> {
    debug tup => (_1.0: (std::sync::Mutex<i32>, std::rc::Rc<i32>));
    let mut _0: std::sync::Mutex<i32>;

    bb0: {
        _0 = move ((_1.0: (std::sync::Mutex<i32>, std::rc::Rc<i32>)).0: std::sync::Mutex<i32>);
        drop(((_1.0: (std::sync::Mutex<i32>, std::rc::Rc<i32>)).1: std::rc::Rc<i32>)) -> bb1;
    }

    bb1: {
        return;
    }
}

fn rc_string::test_for_type(_1: Rc<String>) -> () {
    debug t => _1;
    let mut _0: ();
    let _2: (std::sync::Mutex<i32>, std::rc::Rc<std::string::String>);
    let mut _3: std::sync::Mutex<i32>;
    let mut _4: std::rc::Rc<std::string::String>;
    let mut _6: bool;
    scope 1 {
        debug tup => _2;
        let _5: [closure@ui/closures/2229_closure_analysis/migrations/insignificant_drop.rs:19:26: 19:28];
        scope 2 {
            debug _c => _5;
        }
    }

    bb0: {
        _6 = const false;
        _6 = const true;
        _3 = Mutex::<i32>::new(const 0_i32) -> [return: bb1, unwind: bb5];
    }

    bb1: {
        _6 = const false;
        _4 = move _1;
        _2 = (move _3, move _4);
        _5 = [closure@ui/closures/2229_closure_analysis/migrations/insignificant_drop.rs:19:26: 19:28] { tup: move _2 };
        drop(_5) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        resume;
    }

    bb4 (cleanup): {
        drop(_1) -> [return: bb3, unwind terminate];
    }

    bb5 (cleanup): {
        switchInt(_6) -> [0: bb3, otherwise: bb4];
    }
}

fn rc_string::test_for_type::{closure#0}(_1: [closure@ui/closures/2229_closure_analysis/migrations/insignificant_drop.rs:19:26: 19:28]) -> Mutex<i32> {
    debug tup => (_1.0: (std::sync::Mutex<i32>, std::rc::Rc<std::string::String>));
    let mut _0: std::sync::Mutex<i32>;

    bb0: {
        _0 = move ((_1.0: (std::sync::Mutex<i32>, std::rc::Rc<std::string::String>)).0: std::sync::Mutex<i32>);
        drop(((_1.0: (std::sync::Mutex<i32>, std::rc::Rc<std::string::String>)).1: std::rc::Rc<std::string::String>)) -> bb1;
    }

    bb1: {
        return;
    }
}

fn vec_into_iter::test_for_type(_1: std::vec::IntoIter<String>) -> () {
    debug t => _1;
    let mut _0: ();
    let _2: (std::sync::Mutex<i32>, std::vec::IntoIter<std::string::String>);
    let mut _3: std::sync::Mutex<i32>;
    let mut _4: std::vec::IntoIter<std::string::String>;
    let mut _6: bool;
    scope 1 {
        debug tup => _2;
        let _5: [closure@ui/closures/2229_closure_analysis/migrations/insignificant_drop.rs:19:26: 19:28];
        scope 2 {
            debug _c => _5;
        }
    }

    bb0: {
        _6 = const false;
        _6 = const true;
        _3 = Mutex::<i32>::new(const 0_i32) -> [return: bb1, unwind: bb5];
    }

    bb1: {
        _6 = const false;
        _4 = move _1;
        _2 = (move _3, move _4);
        _5 = [closure@ui/closures/2229_closure_analysis/migrations/insignificant_drop.rs:19:26: 19:28] { tup: move _2 };
        drop(_5) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        resume;
    }

    bb4 (cleanup): {
        drop(_1) -> [return: bb3, unwind terminate];
    }

    bb5 (cleanup): {
        switchInt(_6) -> [0: bb3, otherwise: bb4];
    }
}

fn vec_into_iter::test_for_type::{closure#0}(_1: [closure@ui/closures/2229_closure_analysis/migrations/insignificant_drop.rs:19:26: 19:28]) -> Mutex<i32> {
    debug tup => (_1.0: (std::sync::Mutex<i32>, std::vec::IntoIter<std::string::String>));
    let mut _0: std::sync::Mutex<i32>;

    bb0: {
        _0 = move ((_1.0: (std::sync::Mutex<i32>, std::vec::IntoIter<std::string::String>)).0: std::sync::Mutex<i32>);
        drop(((_1.0: (std::sync::Mutex<i32>, std::vec::IntoIter<std::string::String>)).1: std::vec::IntoIter<std::string::String>)) -> bb1;
    }

    bb1: {
        return;
    }
}

fn btree_map_into_iter::test_for_type(_1: std::collections::btree_map::IntoIter<String, String>) -> () {
    debug t => _1;
    let mut _0: ();
    let _2: (std::sync::Mutex<i32>, std::collections::btree_map::IntoIter<std::string::String, std::string::String>);
    let mut _3: std::sync::Mutex<i32>;
    let mut _4: std::collections::btree_map::IntoIter<std::string::String, std::string::String>;
    let mut _6: bool;
    scope 1 {
        debug tup => _2;
        let _5: [closure@ui/closures/2229_closure_analysis/migrations/insignificant_drop.rs:19:26: 19:28];
        scope 2 {
            debug _c => _5;
        }
    }

    bb0: {
        _6 = const false;
        _6 = const true;
        _3 = Mutex::<i32>::new(const 0_i32) -> [return: bb1, unwind: bb5];
    }

    bb1: {
        _6 = const false;
        _4 = move _1;
        _2 = (move _3, move _4);
        _5 = [closure@ui/closures/2229_closure_analysis/migrations/insignificant_drop.rs:19:26: 19:28] { tup: move _2 };
        drop(_5) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        resume;
    }

    bb4 (cleanup): {
        drop(_1) -> [return: bb3, unwind terminate];
    }

    bb5 (cleanup): {
        switchInt(_6) -> [0: bb3, otherwise: bb4];
    }
}

fn btree_map_into_iter::test_for_type::{closure#0}(_1: [closure@ui/closures/2229_closure_analysis/migrations/insignificant_drop.rs:19:26: 19:28]) -> Mutex<i32> {
    debug tup => (_1.0: (std::sync::Mutex<i32>, std::collections::btree_map::IntoIter<std::string::String, std::string::String>));
    let mut _0: std::sync::Mutex<i32>;

    bb0: {
        _0 = move ((_1.0: (std::sync::Mutex<i32>, std::collections::btree_map::IntoIter<std::string::String, std::string::String>)).0: std::sync::Mutex<i32>);
        drop(((_1.0: (std::sync::Mutex<i32>, std::collections::btree_map::IntoIter<std::string::String, std::string::String>)).1: std::collections::btree_map::IntoIter<std::string::String, std::string::String>)) -> bb1;
    }

    bb1: {
        return;
    }
}

fn array_into_iter::test_for_type(_1: std::array::IntoIter<String, 5>) -> () {
    debug t => _1;
    let mut _0: ();
    let _2: (std::sync::Mutex<i32>, std::array::IntoIter<std::string::String, 5>);
    let mut _3: std::sync::Mutex<i32>;
    let mut _4: std::array::IntoIter<std::string::String, 5>;
    let mut _6: bool;
    scope 1 {
        debug tup => _2;
        let _5: [closure@ui/closures/2229_closure_analysis/migrations/insignificant_drop.rs:19:26: 19:28];
        scope 2 {
            debug _c => _5;
        }
    }

    bb0: {
        _6 = const false;
        _6 = const true;
        _3 = Mutex::<i32>::new(const 0_i32) -> [return: bb1, unwind: bb5];
    }

    bb1: {
        _6 = const false;
        _4 = move _1;
        _2 = (move _3, move _4);
        _5 = [closure@ui/closures/2229_closure_analysis/migrations/insignificant_drop.rs:19:26: 19:28] { tup: move _2 };
        drop(_5) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        resume;
    }

    bb4 (cleanup): {
        drop(_1) -> [return: bb3, unwind terminate];
    }

    bb5 (cleanup): {
        switchInt(_6) -> [0: bb3, otherwise: bb4];
    }
}

array_into_iter::test_for_type::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 5_usize;
        return;
    }
}

fn array_into_iter::test_for_type::{closure#0}(_1: [closure@ui/closures/2229_closure_analysis/migrations/insignificant_drop.rs:19:26: 19:28]) -> Mutex<i32> {
    debug tup => (_1.0: (std::sync::Mutex<i32>, std::array::IntoIter<std::string::String, 5>));
    let mut _0: std::sync::Mutex<i32>;

    bb0: {
        _0 = move ((_1.0: (std::sync::Mutex<i32>, std::array::IntoIter<std::string::String, 5>)).0: std::sync::Mutex<i32>);
        drop(((_1.0: (std::sync::Mutex<i32>, std::array::IntoIter<std::string::String, 5>)).1: std::array::IntoIter<std::string::String, 5>)) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
