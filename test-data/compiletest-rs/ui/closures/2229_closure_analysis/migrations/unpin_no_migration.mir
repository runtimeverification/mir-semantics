// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn filter_try_fold(_1: &mut impl FnMut() -> bool) -> impl FnMut() -> bool + '_ {
    debug predicate => _1;
    let mut _0: impl FnMut() -> bool + '_;

    bb0: {
        _0 = [closure@ui/closures/2229_closure_analysis/migrations/unpin_no_migration.rs:8:5: 8:12] { predicate: move _1 };
        return;
    }
}

fn filter_try_fold::{closure#0}(_1: &mut [closure@ui/closures/2229_closure_analysis/migrations/unpin_no_migration.rs:8:5: 8:12]) -> bool {
    debug predicate => ((*_1).0: &mut impl FnMut() -> bool);
    let mut _0: bool;
    let mut _2: &mut impl FnMut() -> bool;

    bb0: {
        _2 = deref_copy ((*_1).0: &mut impl FnMut() -> bool);
        _0 = <impl FnMut() -> bool as FnMut<()>>::call_mut(_2, const ()) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: impl FnMut() -> bool + '_;
    let mut _2: &mut [closure@ui/closures/2229_closure_analysis/migrations/unpin_no_migration.rs:12:26: 12:28];
    let mut _3: [closure@ui/closures/2229_closure_analysis/migrations/unpin_no_migration.rs:12:26: 12:28];

    bb0: {
        _2 = &mut _3;
        _1 = filter_try_fold::<[closure@ui/closures/2229_closure_analysis/migrations/unpin_no_migration.rs:12:26: 12:28]>(_2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/closures/2229_closure_analysis/migrations/unpin_no_migration.rs:12:26: 12:28]) -> bool {
    let mut _0: bool;

    bb0: {
        _0 = const true;
        return;
    }
}
