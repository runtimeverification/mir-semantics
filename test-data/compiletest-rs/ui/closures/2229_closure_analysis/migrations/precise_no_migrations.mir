// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/closures/2229_closure_analysis/migrations/precise_no_migrations.rs:5:10: 5:15>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&i32;
    let _6: &i32;

    bb0: {
        _3 = const "Foo";
        _6 = &((*_1).0: i32);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/closures/2229_closure_analysis/migrations/precise_no_migrations.rs:7:1: 7:18>::drop(_1: &mut Foo) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 2];
    let _6: [&str; 2];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &i32;

    bb0: {
        _6 = [const "", const " dropped\n"];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _11 = &((*_1).0: i32);
        _10 = core::fmt::rt::Argument::<'_>::new_debug::<i32>(_11) -> bb1;
    }

    bb1: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb2;
    }

    bb2: {
        _2 = _print(move _3) -> bb3;
    }

    bb3: {
        return;
    }
}

fn test_precise_analysis_simple_1() -> () {
    let mut _0: ();
    let _1: (Foo, Foo, Foo);
    let mut _2: Foo;
    let mut _3: Foo;
    let mut _4: Foo;
    let _6: ();
    scope 1 {
        debug t => _1;
        let _5: [closure@ui/closures/2229_closure_analysis/migrations/precise_no_migrations.rs:20:13: 20:15];
        scope 2 {
            debug c => _5;
        }
    }

    bb0: {
        _2 = Foo(const 10_i32);
        _3 = Foo(const 20_i32);
        _4 = Foo(const 30_i32);
        _1 = (move _2, move _3, move _4);
        _5 = [closure@ui/closures/2229_closure_analysis/migrations/precise_no_migrations.rs:20:13: 20:15] { t: move _1 };
        _6 = <[closure@ui/closures/2229_closure_analysis/migrations/precise_no_migrations.rs:20:13: 20:15] as FnOnce<()>>::call_once(move _5, const ()) -> bb1;
    }

    bb1: {
        return;
    }
}

fn test_precise_analysis_simple_1::{closure#0}(_1: [closure@ui/closures/2229_closure_analysis/migrations/precise_no_migrations.rs:20:13: 20:15]) -> () {
    debug t => (_1.0: (Foo, Foo, Foo));
    let mut _0: ();
    let _2: Foo;
    scope 1 {
        debug _t => _2;
        let _3: Foo;
        scope 2 {
            debug _t => _3;
            let _4: Foo;
            scope 3 {
                debug _t => _4;
            }
        }
    }

    bb0: {
        _2 = move ((_1.0: (Foo, Foo, Foo)).0: Foo);
        _3 = move ((_1.0: (Foo, Foo, Foo)).1: Foo);
        _4 = move ((_1.0: (Foo, Foo, Foo)).2: Foo);
        drop(_4) -> [return: bb1, unwind: bb4];
    }

    bb1: {
        drop(_3) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        drop(_2) -> bb3;
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_3) -> [return: bb5, unwind terminate];
    }

    bb5 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn test_precise_analysis_simple_2() -> () {
    let mut _0: ();
    let _1: ConstainsDropField;
    let mut _2: Foo;
    let mut _3: Foo;
    let _5: ();
    scope 1 {
        debug t => _1;
        let _4: [closure@ui/closures/2229_closure_analysis/migrations/precise_no_migrations.rs:34:13: 34:15];
        scope 2 {
            debug c => _4;
        }
    }

    bb0: {
        _2 = Foo(const 10_i32);
        _3 = Foo(const 20_i32);
        _1 = ConstainsDropField(move _2, move _3);
        _4 = [closure@ui/closures/2229_closure_analysis/migrations/precise_no_migrations.rs:34:13: 34:15] { t: move _1 };
        _5 = <[closure@ui/closures/2229_closure_analysis/migrations/precise_no_migrations.rs:34:13: 34:15] as FnOnce<()>>::call_once(move _4, const ()) -> bb1;
    }

    bb1: {
        return;
    }
}

fn test_precise_analysis_simple_2::{closure#0}(_1: [closure@ui/closures/2229_closure_analysis/migrations/precise_no_migrations.rs:34:13: 34:15]) -> () {
    debug t => (_1.0: ConstainsDropField);
    let mut _0: ();
    let _2: Foo;
    scope 1 {
        debug _t => _2;
        let _3: Foo;
        scope 2 {
            debug _t => _3;
        }
    }

    bb0: {
        _2 = move ((_1.0: ConstainsDropField).0: Foo);
        _3 = move ((_1.0: ConstainsDropField).1: Foo);
        drop(_3) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_2) -> bb2;
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn <impl at ui/closures/2229_closure_analysis/migrations/precise_no_migrations.rs:42:10: 42:15>::fmt(_1: &ContainsAndImplsDrop, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&Foo;
    let _6: &Foo;

    bb0: {
        _3 = const "ContainsAndImplsDrop";
        _6 = &((*_1).0: Foo);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/closures/2229_closure_analysis/migrations/precise_no_migrations.rs:44:1: 44:35>::drop(_1: &mut ContainsAndImplsDrop) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 2];
    let _6: [&str; 2];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &Foo;

    bb0: {
        _6 = [const "", const " dropped\n"];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _11 = &((*_1).0: Foo);
        _10 = core::fmt::rt::Argument::<'_>::new_debug::<Foo>(_11) -> bb1;
    }

    bb1: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb2;
    }

    bb2: {
        _2 = _print(move _3) -> bb3;
    }

    bb3: {
        return;
    }
}

fn test_precise_analysis_parent_captured_1() -> () {
    let mut _0: ();
    let _1: ConstainsDropField;
    let mut _2: Foo;
    let mut _3: Foo;
    let _5: ();
    scope 1 {
        debug t => _1;
        let _4: [closure@ui/closures/2229_closure_analysis/migrations/precise_no_migrations.rs:55:13: 55:15];
        scope 2 {
            debug c => _4;
        }
    }

    bb0: {
        _2 = Foo(const 10_i32);
        _3 = Foo(const 20_i32);
        _1 = ConstainsDropField(move _2, move _3);
        _4 = [closure@ui/closures/2229_closure_analysis/migrations/precise_no_migrations.rs:55:13: 55:15] { t: move _1 };
        _5 = <[closure@ui/closures/2229_closure_analysis/migrations/precise_no_migrations.rs:55:13: 55:15] as FnOnce<()>>::call_once(move _4, const ()) -> bb1;
    }

    bb1: {
        return;
    }
}

fn test_precise_analysis_parent_captured_1::{closure#0}(_1: [closure@ui/closures/2229_closure_analysis/migrations/precise_no_migrations.rs:55:13: 55:15]) -> () {
    debug t => (_1.0: ConstainsDropField);
    let mut _0: ();
    let _2: ConstainsDropField;
    scope 1 {
        debug _t => _2;
    }

    bb0: {
        _2 = move (_1.0: ConstainsDropField);
        drop(_2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn test_precise_analysis_parent_captured_2() -> () {
    let mut _0: ();
    let _1: ContainsAndImplsDrop;
    let mut _2: Foo;
    let _4: ();
    scope 1 {
        debug t => _1;
        let _3: [closure@ui/closures/2229_closure_analysis/migrations/precise_no_migrations.rs:67:13: 67:15];
        scope 2 {
            debug c => _3;
        }
    }

    bb0: {
        _2 = Foo(const 10_i32);
        _1 = ContainsAndImplsDrop(move _2);
        _3 = [closure@ui/closures/2229_closure_analysis/migrations/precise_no_migrations.rs:67:13: 67:15] { t: move _1 };
        _4 = <[closure@ui/closures/2229_closure_analysis/migrations/precise_no_migrations.rs:67:13: 67:15] as FnOnce<()>>::call_once(move _3, const ()) -> bb1;
    }

    bb1: {
        return;
    }
}

fn test_precise_analysis_parent_captured_2::{closure#0}(_1: [closure@ui/closures/2229_closure_analysis/migrations/precise_no_migrations.rs:67:13: 67:15]) -> () {
    debug t => (_1.0: ContainsAndImplsDrop);
    let mut _0: ();
    let _2: ContainsAndImplsDrop;
    scope 1 {
        debug _t => _2;
    }

    bb0: {
        _2 = move (_1.0: ContainsAndImplsDrop);
        drop(_2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/closures/2229_closure_analysis/migrations/precise_no_migrations.rs:75:1: 75:16>::drop(_1: &mut S) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn test_precise_analysis_long_path() -> () {
    let mut _0: ();
    let _1: ();
    scope 1 {
        debug u => const U(T(S, S), T(S, S));
        scope 2 {
            debug c => const ZeroSized: [closure@ui/closures/2229_closure_analysis/migrations/precise_no_migrations.rs:86:13: 86:15];
        }
    }

    bb0: {
        _1 = <[closure@ui/closures/2229_closure_analysis/migrations/precise_no_migrations.rs:86:13: 86:15] as FnOnce<()>>::call_once(const ZeroSized: [closure@ui/closures/2229_closure_analysis/migrations/precise_no_migrations.rs:86:13: 86:15], const ()) -> bb1;
    }

    bb1: {
        return;
    }
}

fn test_precise_analysis_long_path::{closure#0}(_1: [closure@ui/closures/2229_closure_analysis/migrations/precise_no_migrations.rs:86:13: 86:15]) -> () {
    debug u => const U(T(S, S), T(S, S));
    let mut _0: ();
    let _2: S;
    scope 1 {
        debug _x => const S;
        let _3: S;
        scope 2 {
            debug _x => const S;
            let _4: S;
            scope 3 {
                debug _x => const S;
                let _5: S;
                scope 4 {
                    debug _x => const S;
                }
            }
        }
    }

    bb0: {
        drop(_5) -> [return: bb1, unwind: bb5];
    }

    bb1: {
        drop(_4) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        drop(_3) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        drop(_2) -> bb4;
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_4) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        drop(_3) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        drop(_2) -> [return: bb8, unwind terminate];
    }

    bb8 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let _3: ();
    let _4: ();
    let _5: ();

    bb0: {
        _1 = test_precise_analysis_simple_1() -> bb1;
    }

    bb1: {
        _2 = test_precise_analysis_simple_2() -> bb2;
    }

    bb2: {
        _3 = test_precise_analysis_parent_captured_1() -> bb3;
    }

    bb3: {
        _4 = test_precise_analysis_parent_captured_2() -> bb4;
    }

    bb4: {
        _5 = test_precise_analysis_long_path() -> bb5;
    }

    bb5: {
        return;
    }
}

fn Foo(_1: i32) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: i32) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo(move _1);
        return;
    }
}

fn ConstainsDropField(_1: Foo, _2: Foo) -> ConstainsDropField {
    let mut _0: ConstainsDropField;

    bb0: {
        _0 = ConstainsDropField(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn ConstainsDropField(_1: Foo, _2: Foo) -> ConstainsDropField {
    let mut _0: ConstainsDropField;

    bb0: {
        _0 = ConstainsDropField(move _1, move _2);
        return;
    }
}

fn ContainsAndImplsDrop(_1: Foo) -> ContainsAndImplsDrop {
    let mut _0: ContainsAndImplsDrop;

    bb0: {
        _0 = ContainsAndImplsDrop(move _1);
        return;
    }
}

// MIR FOR CTFE
fn ContainsAndImplsDrop(_1: Foo) -> ContainsAndImplsDrop {
    let mut _0: ContainsAndImplsDrop;

    bb0: {
        _0 = ContainsAndImplsDrop(move _1);
        return;
    }
}

fn T(_1: S, _2: S) -> T {
    let mut _0: T;

    bb0: {
        _0 = T(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn T(_1: S, _2: S) -> T {
    let mut _0: T;

    bb0: {
        _0 = T(move _1, move _2);
        return;
    }
}

fn U(_1: T, _2: T) -> U {
    let mut _0: U;

    bb0: {
        _0 = U(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn U(_1: T, _2: T) -> U {
    let mut _0: U;

    bb0: {
        _0 = U(move _1, move _2);
        return;
    }
}
