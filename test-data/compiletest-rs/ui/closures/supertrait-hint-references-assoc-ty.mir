// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn closure_typer(_1: impl Fn0) -> () {
    let mut _0: ();

    bb0: {
        drop(_1) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();

    bb0: {
        _1 = closure_typer::<[closure@ui/closures/supertrait-hint-references-assoc-ty.rs:14:19: 14:27]>(const ZeroSized: [closure@ui/closures/supertrait-hint-references-assoc-ty.rs:14:19: 14:27]) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/closures/supertrait-hint-references-assoc-ty.rs:14:19: 14:27], _2: i32) -> () {
    debug x => _2;
    let mut _0: ();
    let mut _3: i64;
    scope 1 {
    }

    bb0: {
        _3 = <i32 as Into<i64>>::into(_2) -> bb1;
    }

    bb1: {
        return;
    }
}
