// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (std::vec::Vec<std::string::String>, std::vec::Vec<std::string::String>);
    let mut _2: std::vec::Vec<std::string::String>;
    let mut _3: std::vec::Vec<std::string::String>;
    let mut _5: &mut (std::vec::Vec<std::string::String>, std::vec::Vec<std::string::String>);
    scope 1 {
        debug schema_all => _1;
        let _4: [closure@ui/closures/issue-87814-2.rs:6:14: 6:16];
        scope 2 {
            debug _c => _4;
        }
    }

    bb0: {
        _2 = Vec::<String>::new() -> bb1;
    }

    bb1: {
        _3 = Vec::<String>::new() -> [return: bb2, unwind: bb4];
    }

    bb2: {
        _1 = (move _2, move _3);
        _5 = &mut _1;
        _4 = [closure@ui/closures/issue-87814-2.rs:6:14: 6:16] { schema_all: move _5 };
        drop(_1) -> bb3;
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_2) -> [return: bb5, unwind terminate];
    }

    bb5 (cleanup): {
        resume;
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/closures/issue-87814-2.rs:6:14: 6:16]) -> () {
    debug schema_all => (*((*_1).0: &mut (std::vec::Vec<std::string::String>, std::vec::Vec<std::string::String>)));
    let mut _0: ();
    let mut _2: std::result::Result<(), std::collections::TryReserveError>;
    let mut _3: &mut std::vec::Vec<std::string::String>;
    let mut _4: isize;
    let mut _5: &mut (std::vec::Vec<std::string::String>, std::vec::Vec<std::string::String>);

    bb0: {
        _5 = deref_copy ((*_1).0: &mut (std::vec::Vec<std::string::String>, std::vec::Vec<std::string::String>));
        _3 = &mut ((*_5).0: std::vec::Vec<std::string::String>);
        _2 = Vec::<String>::try_reserve(move _3, const 1_usize) -> bb1;
    }

    bb1: {
        _4 = discriminant(_2);
        switchInt(move _4) -> [0: bb3, 1: bb3, otherwise: bb2];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        return;
    }
}
