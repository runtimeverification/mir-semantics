// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: i32;
    let mut _2: fn(i32, i32) -> i32;
    let mut _3: &str;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: !;
    scope 1 {
    }

    bb0: {
        _3 = const "";
        _4 = <str as PartialEq>::eq(_3, const "+") -> bb1;
    }

    bb1: {
        switchInt(move _4) -> [0: bb2, otherwise: bb7];
    }

    bb2: {
        _5 = <str as PartialEq>::eq(_3, const "-") -> bb3;
    }

    bb3: {
        switchInt(move _5) -> [0: bb4, otherwise: bb8];
    }

    bb4: {
        _6 = <str as PartialEq>::eq(_3, const "<") -> bb5;
    }

    bb5: {
        switchInt(move _6) -> [0: bb6, otherwise: bb9];
    }

    bb6: {
        _7 = core::panicking::panic(const "not implemented");
    }

    bb7: {
        _2 = <i32 as Add>::add as fn(i32, i32) -> i32 (Pointer(ReifyFnPointer));
        goto -> bb10;
    }

    bb8: {
        _2 = <i32 as Sub>::sub as fn(i32, i32) -> i32 (Pointer(ReifyFnPointer));
        goto -> bb10;
    }

    bb9: {
        _2 = const ZeroSized: [closure@ui/closures/issue-46742.rs:6:16: 6:21] as fn(i32, i32) -> i32 (Pointer(ClosureFnPointer(Normal)));
        goto -> bb10;
    }

    bb10: {
        _1 = move _2(const 5_i32, const 5_i32) -> bb11;
    }

    bb11: {
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/closures/issue-46742.rs:6:16: 6:21], _2: i32, _3: i32) -> i32 {
    debug a => _2;
    debug b => _3;
    let mut _0: i32;
    let mut _4: bool;

    bb0: {
        _4 = Lt(_2, _3);
        _0 = move _4 as i32 (IntToInt);
        return;
    }
}
