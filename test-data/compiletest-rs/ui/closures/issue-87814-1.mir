// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: std::vec::Vec<()>;
    let _2: ();
    let mut _3: std::ops::Range<i32>;
    let mut _4: [closure@ui/closures/issue-87814-1.rs:4:22: 4:26];
    let mut _5: &mut std::vec::Vec<()>;
    scope 1 {
        debug schema_all => _1;
    }

    bb0: {
        _1 = Vec::<()>::new() -> bb1;
    }

    bb1: {
        _3 = std::ops::Range::<i32> { start: const 0_i32, end: const 42_i32 };
        _5 = &mut _1;
        _4 = [closure@ui/closures/issue-87814-1.rs:4:22: 4:26] { schema_all: move _5 };
        _2 = <std::ops::Range<i32> as Iterator>::for_each::<[closure@ui/closures/issue-87814-1.rs:4:22: 4:26]>(move _3, move _4) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_1) -> bb3;
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_1) -> [return: bb5, unwind terminate];
    }

    bb5 (cleanup): {
        resume;
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/closures/issue-87814-1.rs:4:22: 4:26], _2: i32) -> () {
    debug _x => _2;
    debug schema_all => (*((*_1).0: &mut std::vec::Vec<()>));
    let mut _0: ();
    let mut _3: std::result::Result<(), ()>;
    let mut _4: isize;
    let mut _5: &mut std::vec::Vec<()>;

    bb0: {
        _3 = Result::<(), ()>::Err(const ());
        _4 = discriminant(_3);
        switchInt(move _4) -> [0: bb2, 1: bb3, otherwise: bb1];
    }

    bb1: {
        unreachable;
    }

    bb2: {
        _5 = deref_copy ((*_1).0: &mut std::vec::Vec<()>);
        _0 = Vec::<()>::push(_5, const ()) -> bb3;
    }

    bb3: {
        return;
    }
}
