// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn iter_vec(_1: Vec<T>, _2: F) -> () {
    debug v => _1;
    debug f => _2;
    let mut _0: ();
    let mut _3: std::slice::Iter<'_, T>;
    let mut _4: &std::vec::Vec<T>;
    let mut _5: std::slice::Iter<'_, T>;
    let mut _6: std::option::Option<&T>;
    let mut _7: &mut std::slice::Iter<'_, T>;
    let mut _8: isize;
    let _10: ();
    let mut _11: &mut F;
    let mut _12: (&T,);
    scope 1 {
        debug iter => _5;
        let _9: &T;
        scope 2 {
            debug x => _9;
        }
    }

    bb0: {
        _4 = &_1;
        _3 = <&Vec<T> as IntoIterator>::into_iter(move _4) -> [return: bb1, unwind: bb9];
    }

    bb1: {
        _5 = move _3;
        goto -> bb2;
    }

    bb2: {
        _7 = &mut _5;
        _6 = <std::slice::Iter<'_, T> as Iterator>::next(_7) -> [return: bb3, unwind: bb9];
    }

    bb3: {
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        _9 = ((_6 as Some).0: &T);
        _11 = &mut _2;
        _12 = (_9,);
        _10 = <F as FnMut<(&T,)>>::call_mut(move _11, move _12) -> [return: bb12, unwind: bb9];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        drop(_2) -> [return: bb7, unwind: bb10];
    }

    bb7: {
        drop(_1) -> bb8;
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_2) -> [return: bb10, unwind terminate];
    }

    bb10 (cleanup): {
        drop(_1) -> [return: bb11, unwind terminate];
    }

    bb11 (cleanup): {
        resume;
    }

    bb12: {
        goto -> bb2;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<i32>;
    let mut _2: std::boxed::Box<[i32]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[i32; 5]>;
    let _8: ();
    let mut _9: std::vec::Vec<i32>;
    let mut _10: &std::vec::Vec<i32>;
    let mut _11: [closure@ui/closures/old-closure-iter-2.rs:8:25: 8:28];
    let mut _12: &std::vec::Vec<i32>;
    let mut _13: &mut i32;
    let _14: ();
    let mut _15: std::fmt::Arguments<'_>;
    let mut _16: &[&str];
    let _17: &[&str; 2];
    let _18: [&str; 2];
    let mut _19: &[core::fmt::rt::Argument<'_>];
    let _20: &[core::fmt::rt::Argument<'_>; 1];
    let _21: [core::fmt::rt::Argument<'_>; 1];
    let mut _22: core::fmt::rt::Argument<'_>;
    let _23: &i32;
    let mut _24: (&i32, &i32);
    let mut _25: &i32;
    let mut _26: &i32;
    let _27: i32;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: i32;
    let mut _33: i32;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _37: *const [i32; 5];
    let mut _38: *const ();
    let mut _39: usize;
    let mut _40: usize;
    let mut _41: usize;
    let mut _42: usize;
    let mut _43: bool;
    scope 1 {
        debug v => _1;
        let mut _7: i32;
        scope 3 {
            debug sum => _7;
            let _28: &i32;
            let _29: &i32;
            scope 4 {
                debug left_val => _28;
                debug right_val => _29;
                let _34: core::panicking::AssertKind;
                scope 5 {
                    debug kind => _34;
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _3 = SizeOf([i32; 5]);
        _4 = AlignOf([i32; 5]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> bb1;
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [i32; 5]);
        _37 = (((_6.0: std::ptr::Unique<[i32; 5]>).0: std::ptr::NonNull<[i32; 5]>).0: *const [i32; 5]);
        _38 = _37 as *const () (PtrToPtr);
        _39 = _38 as usize (Transmute);
        _40 = AlignOf(i32);
        _41 = Sub(_40, const 1_usize);
        _42 = BitAnd(_39, _41);
        _43 = Eq(_42, const 0_usize);
        assert(_43, "misaligned pointer dereference: address must be a multiple of {} but is {}", _40, _39) -> [success: bb13, unwind unreachable];
    }

    bb2: {
        _7 = const 0_i32;
        _10 = &_1;
        _9 = <Vec<i32> as Clone>::clone(move _10) -> [return: bb3, unwind: bb11];
    }

    bb3: {
        _12 = &_1;
        _13 = &mut _7;
        _11 = [closure@ui/closures/old-closure-iter-2.rs:8:25: 8:28] { v: move _12, sum: move _13 };
        _8 = iter_vec::<i32, [closure@ui/closures/old-closure-iter-2.rs:8:25: 8:28]>(move _9, move _11) -> [return: bb4, unwind: bb11];
    }

    bb4: {
        _18 = [const "", const "\n"];
        _17 = &_18;
        _16 = _17 as &[&str] (Pointer(Unsize));
        _23 = &_7;
        _22 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_23) -> [return: bb5, unwind: bb11];
    }

    bb5: {
        _21 = [move _22];
        _20 = &_21;
        _19 = _20 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _15 = Arguments::<'_>::new_v1(move _16, move _19) -> [return: bb6, unwind: bb11];
    }

    bb6: {
        _14 = _print(move _15) -> [return: bb7, unwind: bb11];
    }

    bb7: {
        _25 = &_7;
        _27 = const 225_i32;
        _26 = &_27;
        _24 = (move _25, move _26);
        _28 = (_24.0: &i32);
        _29 = (_24.1: &i32);
        _32 = (*_28);
        _33 = (*_29);
        _31 = Eq(move _32, move _33);
        _30 = Not(move _31);
        switchInt(move _30) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = core::panicking::assert_failed::<i32, i32>(move _34, _28, _29, move _36) -> bb11;
    }

    bb9: {
        drop(_1) -> bb10;
    }

    bb10: {
        return;
    }

    bb11 (cleanup): {
        drop(_1) -> [return: bb12, unwind terminate];
    }

    bb12 (cleanup): {
        resume;
    }

    bb13: {
        (*_37) = [const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32];
        _2 = move _6 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _1 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _2) -> bb2;
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/closures/old-closure-iter-2.rs:8:25: 8:28], _2: &i32) -> () {
    debug i => _2;
    debug v => (*((*_1).0: &std::vec::Vec<i32>));
    debug sum => (*((*_1).1: &mut i32));
    let mut _0: ();
    let _3: ();
    let mut _4: std::vec::Vec<i32>;
    let mut _5: [closure@ui/closures/old-closure-iter-2.rs:9:29: 9:32];
    let mut _6: &&i32;
    let mut _7: &std::vec::Vec<i32>;
    let mut _8: &mut i32;

    bb0: {
        _7 = deref_copy ((*_1).0: &std::vec::Vec<i32>);
        _4 = <Vec<i32> as Clone>::clone(_7) -> bb1;
    }

    bb1: {
        _8 = deref_copy ((*_1).1: &mut i32);
        _6 = &_2;
        _5 = [closure@ui/closures/old-closure-iter-2.rs:9:29: 9:32] { i: _8, sum: move _6 };
        _3 = iter_vec::<i32, [closure@ui/closures/old-closure-iter-2.rs:9:29: 9:32]>(move _4, move _5) -> bb2;
    }

    bb2: {
        return;
    }
}

fn main::{closure#0}::{closure#0}(_1: &mut [closure@ui/closures/old-closure-iter-2.rs:9:29: 9:32], _2: &i32) -> () {
    debug j => _2;
    debug sum => (*((*_1).0: &mut i32));
    debug i => (*((*_1).1: &&i32));
    let mut _0: ();
    let mut _3: i32;
    let mut _4: i32;
    let mut _5: i32;
    let mut _6: &&i32;
    let mut _7: &i32;
    let mut _8: &mut i32;
    let mut _9: &mut i32;

    bb0: {
        _6 = deref_copy ((*_1).1: &&i32);
        _7 = deref_copy (*_6);
        _4 = (*_7);
        _5 = (*_2);
        _3 = Mul(move _4, move _5);
        _8 = deref_copy ((*_1).0: &mut i32);
        _9 = deref_copy ((*_1).0: &mut i32);
        (*_8) = Add((*_9), move _3);
        return;
    }
}
