// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::string::String;
    let _3: &str;

    bb0: {
        _3 = const "foo";
        _2 = <str as ToString>::to_string(_3) -> bb1;
    }

    bb1: {
        _1 = as_buf::<(), [closure@ui/closures/old-closure-explicit-types.rs:5:31: 5:50]>(move _2, const ZeroSized: [closure@ui/closures/old-closure-explicit-types.rs:5:31: 5:50]) -> bb2;
    }

    bb2: {
        return;
    }
}

fn as_buf(_1: String, _2: F) -> T {
    debug s => _1;
    debug f => _2;
    let mut _0: T;
    let mut _3: (std::string::String,);

    bb0: {
        _3 = (move _1,);
        _0 = <F as FnOnce<(String,)>>::call_once(move _2, move _3) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main::{closure#0}(_1: [closure@ui/closures/old-closure-explicit-types.rs:5:31: 5:50], _2: String) -> () {
    debug foo => _2;
    let mut _0: ();
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let _6: &[&str; 2];
    let _7: [&str; 2];
    let mut _8: &[core::fmt::rt::Argument<'_>];
    let _9: &[core::fmt::rt::Argument<'_>; 1];
    let _10: [core::fmt::rt::Argument<'_>; 1];
    let mut _11: core::fmt::rt::Argument<'_>;
    let _12: &std::string::String;

    bb0: {
        _7 = [const "", const "\n"];
        _6 = &_7;
        _5 = _6 as &[&str] (Pointer(Unsize));
        _12 = &_2;
        _11 = core::fmt::rt::Argument::<'_>::new_display::<String>(_12) -> [return: bb1, unwind: bb5];
    }

    bb1: {
        _10 = [move _11];
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _3 = _print(move _4) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        drop(_2) -> bb4;
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        resume;
    }
}
