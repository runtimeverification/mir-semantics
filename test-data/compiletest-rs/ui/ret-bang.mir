// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn my_err(_1: String) -> ! {
    debug s => _1;
    let mut _0: !;
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 2];
    let _6: [&str; 2];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &std::string::String;
    let mut _12: !;

    bb0: {
        _6 = [const "", const "\n"];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _11 = &_1;
        _10 = core::fmt::rt::Argument::<'_>::new_display::<String>(_11) -> [return: bb1, unwind: bb4];
    }

    bb1: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        _2 = _print(move _3) -> [return: bb3, unwind: bb4];
    }

    bb3: {
        _12 = begin_panic::<&str>(const "explicit panic") -> bb4;
    }

    bb4 (cleanup): {
        drop(_1) -> [return: bb5, unwind terminate];
    }

    bb5 (cleanup): {
        resume;
    }
}

fn okay(_1: usize) -> isize {
    debug i => _1;
    let mut _0: isize;
    let _2: !;
    let mut _3: std::string::String;
    let _4: &str;

    bb0: {
        switchInt(move _1) -> [3: bb1, otherwise: bb3];
    }

    bb1: {
        _4 = const "I don't like three";
        _3 = <str as ToString>::to_string(_4) -> bb2;
    }

    bb2: {
        _2 = my_err(move _3);
    }

    bb3: {
        _0 = const 42_isize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: isize;

    bb0: {
        _1 = okay(const 4_usize) -> bb1;
    }

    bb1: {
        return;
    }
}
