// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/methods/method-normalize-bounds-issue-20604.rs:31:1: 31:26>::finish(_1: &SipHasher) -> u64 {
    debug self => _1;
    let mut _0: u64;

    bb0: {
        _0 = const 4_u64;
        return;
    }
}

fn <impl at ui/methods/method-normalize-bounds-issue-20604.rs:36:1: 36:31>::hash(_1: &isize, _2: &mut SipHasher) -> () {
    debug self => _1;
    debug h => _2;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/methods/method-normalize-bounds-issue-20604.rs:41:1: 41:28>::hasher(_1: &SipState) -> SipHasher {
    debug self => _1;
    let mut _0: SipHasher;

    bb0: {
        return;
    }
}

fn <impl at ui/methods/method-normalize-bounds-issue-20604.rs:50:1: 50:15>::foo(_1: &Map<S>, _2: K) -> () {
    debug self => _1;
    debug k => _2;
    let mut _0: ();

    bb0: {
        drop(_2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn foo(_1: &Map<SipState>) -> () {
    debug map => _1;
    let mut _0: ();
    let _2: ();

    bb0: {
        _2 = Map::<SipState>::foo::<isize>(_1, const 22_isize) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
