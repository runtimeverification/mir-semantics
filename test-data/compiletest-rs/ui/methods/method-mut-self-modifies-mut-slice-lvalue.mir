// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:13:1: 13:35>::my_write(_1: &mut &mut [u8], _2: &[u8]) -> Result<(), ()> {
    debug self => _1;
    debug buf => _2;
    let mut _0: std::result::Result<(), ()>;
    let _3: usize;
    let mut _4: usize;
    let mut _5: &[u8];
    let mut _6: usize;
    let _7: ();
    let mut _8: &mut [u8];
    let mut _9: &mut [u8];
    let mut _10: std::ops::RangeTo<usize>;
    let mut _11: usize;
    let _12: &[u8];
    let _13: &[u8];
    let mut _14: std::ops::RangeTo<usize>;
    let mut _15: usize;
    let mut _17: &mut [u8];
    let mut _18: &mut [u8];
    let mut _19: *mut u8;
    let mut _20: *mut u8;
    let mut _21: usize;
    let mut _22: usize;
    let mut _23: &[u8];
    let mut _24: &mut [u8];
    let mut _25: &mut [u8];
    let mut _26: &mut [u8];
    let mut _27: &mut [u8];
    scope 1 {
        debug amt => _3;
        let _16: usize;
        scope 2 {
            debug write_len => _16;
            scope 3 {
            }
        }
    }

    bb0: {
        _24 = deref_copy (*_1);
        _5 = &(*_24);
        _4 = Len((*_5));
        _6 = Len((*_2));
        _3 = std::cmp::min::<usize>(move _4, move _6) -> bb1;
    }

    bb1: {
        _25 = deref_copy (*_1);
        _11 = _3;
        _10 = RangeTo::<usize> { end: move _11 };
        _9 = <[u8] as IndexMut<RangeTo<usize>>>::index_mut(_25, move _10) -> bb2;
    }

    bb2: {
        _8 = _9;
        _15 = _3;
        _14 = RangeTo::<usize> { end: move _15 };
        _13 = <[u8] as Index<RangeTo<usize>>>::index(_2, move _14) -> bb3;
    }

    bb3: {
        _12 = _13;
        _7 = core::slice::<impl [u8]>::clone_from_slice(move _8, _12) -> bb4;
    }

    bb4: {
        _16 = Len((*_2));
        _26 = deref_copy (*_1);
        _20 = core::slice::<impl [u8]>::as_mut_ptr(_26) -> bb5;
    }

    bb5: {
        _19 = ptr::mut_ptr::<impl *mut u8>::add(move _20, _16) -> bb6;
    }

    bb6: {
        _27 = deref_copy (*_1);
        _23 = &(*_27);
        _22 = Len((*_23));
        _21 = Sub(move _22, _16);
        _18 = std::slice::from_raw_parts_mut::<'_, u8>(move _19, move _21) -> bb7;
    }

    bb7: {
        _17 = _18;
        (*_1) = move _17;
        _0 = Result::<(), ()>::Ok(const ());
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: [u8; 6];
    let mut _3: &mut [u8; 6];
    let _4: ();
    let mut _5: std::result::Result<(), ()>;
    let mut _6: &mut &mut [u8];
    let mut _7: &[u8];
    let _8: &[u8; 3];
    let _9: [u8; 3];
    let _10: ();
    let mut _11: std::result::Result<(), ()>;
    let mut _12: &mut &mut [u8];
    let mut _13: &[u8];
    let _14: &[u8; 3];
    let _15: [u8; 3];
    let mut _16: (&[u8; 6], &[u8; 6]);
    let mut _17: &[u8; 6];
    let mut _18: &[u8; 6];
    let _19: [u8; 6];
    let mut _22: bool;
    let mut _23: bool;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug buf => _1;
        let mut _2: &mut [u8];
        let _20: &[u8; 6];
        let _21: &[u8; 6];
        scope 2 {
            debug writer => _2;
        }
        scope 3 {
            debug left_val => _20;
            debug right_val => _21;
            let _24: core::panicking::AssertKind;
            scope 4 {
                debug kind => _24;
            }
        }
    }

    bb0: {
        _1 = [const 0_u8; 6];
        _3 = &mut _1;
        _2 = _3 as &mut [u8] (Pointer(Unsize));
        _6 = &mut _2;
        _9 = [const 0_u8, const 1_u8, const 2_u8];
        _8 = &_9;
        _7 = _8 as &[u8] (Pointer(Unsize));
        _5 = <&mut [u8] as MyWriter>::my_write(move _6, move _7) -> bb1;
    }

    bb1: {
        _4 = Result::<(), ()>::unwrap(move _5) -> bb2;
    }

    bb2: {
        _12 = &mut _2;
        _15 = [const 3_u8, const 4_u8, const 5_u8];
        _14 = &_15;
        _13 = _14 as &[u8] (Pointer(Unsize));
        _11 = <&mut [u8] as MyWriter>::my_write(move _12, move _13) -> bb3;
    }

    bb3: {
        _10 = Result::<(), ()>::unwrap(move _11) -> bb4;
    }

    bb4: {
        _17 = &_1;
        _19 = [const 0_u8, const 1_u8, const 2_u8, const 3_u8, const 4_u8, const 5_u8];
        _18 = &_19;
        _16 = (move _17, move _18);
        _20 = (_16.0: &[u8; 6]);
        _21 = (_16.1: &[u8; 6]);
        _23 = <[u8; 6] as PartialEq>::eq(_20, _21) -> bb5;
    }

    bb5: {
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<[u8; 6], [u8; 6]>(move _24, _20, _21, move _26);
    }

    bb7: {
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 6_usize;
        return;
    }
}
