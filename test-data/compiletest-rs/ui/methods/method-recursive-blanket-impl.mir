// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/methods/method-recursive-blanket-impl.rs:18:1: 18:22>::foo(_1: &[u8], _2: u8) -> () {
    debug self => _1;
    debug a => _2;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/methods/method-recursive-blanket-impl.rs:22:1: 22:32>::foo(_1: &&T, _2: A) -> () {
    debug self => _1;
    debug a => _2;
    let mut _0: ();
    let mut _3: &T;

    bb0: {
        _3 = deref_copy (*_1);
        _0 = <T as Foo<A>>::foo(_3, move _2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/methods/method-recursive-blanket-impl.rs:34:1: 34:20>::foo(_1: &MyType) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: MyType;
    let mut _2: &MyType;
    let _3: &mut MyType;
    scope 1 {
        debug m => const MyType;
    }

    bb0: {
        _3 = &mut _1;
        _2 = &(*_3);
        _0 = <MyType as Bar>::foo(move _2) -> bb1;
    }

    bb1: {
        return;
    }
}
