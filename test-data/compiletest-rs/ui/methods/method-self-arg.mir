// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static mut COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

fn <impl at ui/methods/method-self-arg.rs:6:16: 6:21>::clone(_1: &Foo) -> Foo {
    debug self => _1;
    let mut _0: Foo;

    bb0: {
        return;
    }
}

fn <impl at ui/methods/method-self-arg.rs:9:1: 9:9>::foo(_1: Foo, _2: &Foo) -> () {
    debug self => const Foo;
    debug x => _2;
    let mut _0: ();
    let mut _3: *mut usize;
    let _4: ();
    let _5: &Foo;
    let _6: ();
    let _7: ();
    let _8: ();
    let _9: ();
    let mut _10: std::boxed::Box<Foo>;
    let _11: ();
    let mut _12: std::boxed::Box<Foo>;
    scope 1 {
        let mut _13: *const ();
        let mut _14: usize;
        let mut _15: usize;
        let mut _16: usize;
        let mut _17: usize;
        let mut _18: bool;
        let mut _19: *const ();
        let mut _20: usize;
        let mut _21: usize;
        let mut _22: usize;
        let mut _23: usize;
        let mut _24: bool;
    }

    bb0: {
        _3 = const {alloc1: *mut usize};
        _19 = _3 as *const () (PtrToPtr);
        _20 = _19 as usize (Transmute);
        _21 = AlignOf(usize);
        _22 = Sub(_21, const 1_usize);
        _23 = BitAnd(_20, _22);
        _24 = Eq(_23, const 0_usize);
        assert(_24, "misaligned pointer dereference: address must be a multiple of {} but is {}", _21, _20) -> [success: bb10, unwind unreachable];
    }

    bb1: {
        _6 = Foo::bar(_2) -> bb2;
    }

    bb2: {
        _7 = Foo::baz(const Foo) -> bb3;
    }

    bb3: {
        _8 = Foo::baz(const Foo) -> bb4;
    }

    bb4: {
        _10 = Box::<Foo>::new(const Foo) -> bb5;
    }

    bb5: {
        _9 = Foo::qux(move _10) -> bb6;
    }

    bb6: {
        _12 = Box::<Foo>::new(const Foo) -> bb7;
    }

    bb7: {
        _11 = Foo::qux(move _12) -> bb8;
    }

    bb8: {
        return;
    }

    bb9: {
        (*_3) = Mul((*_3), const 2_usize);
        _5 = &_1;
        _4 = Foo::bar(_5) -> bb1;
    }

    bb10: {
        _13 = _3 as *const () (PtrToPtr);
        _14 = _13 as usize (Transmute);
        _15 = AlignOf(usize);
        _16 = Sub(_15, const 1_usize);
        _17 = BitAnd(_14, _16);
        _18 = Eq(_17, const 0_usize);
        assert(_18, "misaligned pointer dereference: address must be a multiple of {} but is {}", _15, _14) -> [success: bb9, unwind unreachable];
    }
}

alloc1 (static: COUNT, size: 8, align: 8) {
    01 00 00 00 00 00 00 00                         │ ........
}

fn <impl at ui/methods/method-self-arg.rs:9:1: 9:9>::bar(_1: &Foo) -> () {
    debug self => _1;
    let mut _0: ();
    let mut _2: *mut usize;
    scope 1 {
        let mut _3: *const ();
        let mut _4: usize;
        let mut _5: usize;
        let mut _6: usize;
        let mut _7: usize;
        let mut _8: bool;
        let mut _9: *const ();
        let mut _10: usize;
        let mut _11: usize;
        let mut _12: usize;
        let mut _13: usize;
        let mut _14: bool;
    }

    bb0: {
        _2 = const {alloc1: *mut usize};
        _9 = _2 as *const () (PtrToPtr);
        _10 = _9 as usize (Transmute);
        _11 = AlignOf(usize);
        _12 = Sub(_11, const 1_usize);
        _13 = BitAnd(_10, _12);
        _14 = Eq(_13, const 0_usize);
        assert(_14, "misaligned pointer dereference: address must be a multiple of {} but is {}", _11, _10) -> [success: bb2, unwind unreachable];
    }

    bb1: {
        (*_2) = Mul((*_2), const 3_usize);
        return;
    }

    bb2: {
        _3 = _2 as *const () (PtrToPtr);
        _4 = _3 as usize (Transmute);
        _5 = AlignOf(usize);
        _6 = Sub(_5, const 1_usize);
        _7 = BitAnd(_4, _6);
        _8 = Eq(_7, const 0_usize);
        assert(_8, "misaligned pointer dereference: address must be a multiple of {} but is {}", _5, _4) -> [success: bb1, unwind unreachable];
    }
}

alloc1 (static: COUNT, size: 8, align: 8) {
    01 00 00 00 00 00 00 00                         │ ........
}

fn <impl at ui/methods/method-self-arg.rs:9:1: 9:9>::baz(_1: Foo) -> () {
    debug self => const Foo;
    let mut _0: ();
    let mut _2: *mut usize;
    scope 1 {
        let mut _3: *const ();
        let mut _4: usize;
        let mut _5: usize;
        let mut _6: usize;
        let mut _7: usize;
        let mut _8: bool;
        let mut _9: *const ();
        let mut _10: usize;
        let mut _11: usize;
        let mut _12: usize;
        let mut _13: usize;
        let mut _14: bool;
    }

    bb0: {
        _2 = const {alloc1: *mut usize};
        _9 = _2 as *const () (PtrToPtr);
        _10 = _9 as usize (Transmute);
        _11 = AlignOf(usize);
        _12 = Sub(_11, const 1_usize);
        _13 = BitAnd(_10, _12);
        _14 = Eq(_13, const 0_usize);
        assert(_14, "misaligned pointer dereference: address must be a multiple of {} but is {}", _11, _10) -> [success: bb2, unwind unreachable];
    }

    bb1: {
        (*_2) = Mul((*_2), const 5_usize);
        return;
    }

    bb2: {
        _3 = _2 as *const () (PtrToPtr);
        _4 = _3 as usize (Transmute);
        _5 = AlignOf(usize);
        _6 = Sub(_5, const 1_usize);
        _7 = BitAnd(_4, _6);
        _8 = Eq(_7, const 0_usize);
        assert(_8, "misaligned pointer dereference: address must be a multiple of {} but is {}", _5, _4) -> [success: bb1, unwind unreachable];
    }
}

alloc1 (static: COUNT, size: 8, align: 8) {
    01 00 00 00 00 00 00 00                         │ ........
}

fn <impl at ui/methods/method-self-arg.rs:9:1: 9:9>::qux(_1: Box<Foo>) -> () {
    debug self => _1;
    let mut _0: ();
    let mut _2: *mut usize;
    scope 1 {
        let mut _3: *const ();
        let mut _4: usize;
        let mut _5: usize;
        let mut _6: usize;
        let mut _7: usize;
        let mut _8: bool;
        let mut _9: *const ();
        let mut _10: usize;
        let mut _11: usize;
        let mut _12: usize;
        let mut _13: usize;
        let mut _14: bool;
    }

    bb0: {
        _2 = const {alloc1: *mut usize};
        _9 = _2 as *const () (PtrToPtr);
        _10 = _9 as usize (Transmute);
        _11 = AlignOf(usize);
        _12 = Sub(_11, const 1_usize);
        _13 = BitAnd(_10, _12);
        _14 = Eq(_13, const 0_usize);
        assert(_14, "misaligned pointer dereference: address must be a multiple of {} but is {}", _11, _10) -> [success: bb3, unwind unreachable];
    }

    bb1: {
        return;
    }

    bb2: {
        (*_2) = Mul((*_2), const 7_usize);
        drop(_1) -> bb1;
    }

    bb3: {
        _3 = _2 as *const () (PtrToPtr);
        _4 = _3 as usize (Transmute);
        _5 = AlignOf(usize);
        _6 = Sub(_5, const 1_usize);
        _7 = BitAnd(_4, _6);
        _8 = Eq(_7, const 0_usize);
        assert(_8, "misaligned pointer dereference: address must be a multiple of {} but is {}", _5, _4) -> [success: bb2, unwind unreachable];
    }
}

alloc1 (static: COUNT, size: 8, align: 8) {
    01 00 00 00 00 00 00 00                         │ ........
}

fn main() -> () {
    let mut _0: ();
    let _1: Foo;
    let _2: ();
    let _3: &Foo;
    let _4: ();
    let _5: ();
    let mut _6: std::boxed::Box<Foo>;
    let _7: ();
    let _8: &Foo;
    let mut _9: (&usize, &usize);
    let mut _10: &usize;
    let _11: *mut usize;
    let mut _12: &usize;
    let _13: usize;
    let mut _14: usize;
    let mut _15: usize;
    let mut _16: usize;
    let mut _17: usize;
    let mut _18: usize;
    let mut _19: usize;
    let mut _20: usize;
    let mut _21: usize;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: usize;
    let mut _27: usize;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => const Foo;
        scope 2 {
            let _22: &usize;
            let _23: &usize;
            let mut _31: *const ();
            let mut _32: usize;
            let mut _33: usize;
            let mut _34: usize;
            let mut _35: usize;
            let mut _36: bool;
            scope 3 {
                debug left_val => _22;
                debug right_val => _23;
                let _28: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _28;
                }
            }
        }
    }

    bb0: {
        _3 = &_1;
        _2 = Foo::bar(_3) -> bb1;
    }

    bb1: {
        _4 = Foo::baz(const Foo) -> bb2;
    }

    bb2: {
        _6 = Box::<Foo>::new(const Foo) -> bb3;
    }

    bb3: {
        _5 = Foo::qux(move _6) -> bb4;
    }

    bb4: {
        _8 = &_1;
        _7 = Foo::foo(const Foo, _8) -> bb5;
    }

    bb5: {
        _11 = const {alloc1: *mut usize};
        _31 = _11 as *const () (PtrToPtr);
        _32 = _31 as usize (Transmute);
        _33 = AlignOf(usize);
        _34 = Sub(_33, const 1_usize);
        _35 = BitAnd(_32, _34);
        _36 = Eq(_35, const 0_usize);
        assert(_36, "misaligned pointer dereference: address must be a multiple of {} but is {}", _33, _32) -> [success: bb8, unwind unreachable];
    }

    bb6: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<usize, usize>(move _28, _22, _23, move _30);
    }

    bb7: {
        return;
    }

    bb8: {
        _10 = &(*_11);
        _21 = Mul(const 2_usize, const 3_usize);
        _20 = Mul(move _21, const 3_usize);
        _19 = Mul(move _20, const 3_usize);
        _18 = Mul(move _19, const 5_usize);
        _17 = Mul(move _18, const 5_usize);
        _16 = Mul(move _17, const 5_usize);
        _15 = Mul(move _16, const 7_usize);
        _14 = Mul(move _15, const 7_usize);
        _13 = Mul(move _14, const 7_usize);
        _12 = &_13;
        _9 = (move _10, move _12);
        _22 = (_9.0: &usize);
        _23 = (_9.1: &usize);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb7, otherwise: bb6];
    }
}

alloc1 (static: COUNT, size: 8, align: 8) {
    01 00 00 00 00 00 00 00                         │ ........
}
