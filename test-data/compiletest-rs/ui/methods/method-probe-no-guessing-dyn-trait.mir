// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn MyTrait1::my_fn(_1: &Self) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/methods/method-probe-no-guessing-dyn-trait.rs:20:1: 20:23>::deref(_1: &Foo<()>) -> &dyn MyTrait1 {
    debug self => _1;
    let mut _0: &dyn MyTrait1;
    let mut _2: !;

    bb0: {
        _2 = begin_panic::<&str>(const "explicit panic");
    }
}

fn MyTrait2::my_fn2(_1: &Self) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/methods/method-probe-no-guessing-dyn-trait.rs:37:1: 37:23>::deref(_1: &Bar<u8>) -> &dyn MyTrait2 {
    debug self => _1;
    let mut _0: &dyn MyTrait2;
    let _2: &u32;

    bb0: {
        _2 = &((*_1).1: u32);
        _0 = _2 as &dyn MyTrait2 (Pointer(Unsize));
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: std::option::Option<Foo<u32>>;
    let mut _4: bool;
    let mut _5: bool;
    let _6: ();
    let mut _7: &Foo<u32>;
    let _8: &Foo<u32>;
    let mut _9: std::option::Option<&Foo<u32>>;
    let mut _10: &std::option::Option<Foo<u32>>;
    let _11: ();
    let mut _12: &dyn MyTrait2;
    let _13: &dyn MyTrait2;
    let mut _14: &Bar<u8>;
    let _15: &Bar<u8>;
    let mut _16: std::option::Option<&Bar<u8>>;
    let mut _17: &std::option::Option<Bar<u8>>;
    let mut _18: std::option::Option<Foo<u32>>;
    let mut _19: Foo<u32>;
    let mut _20: std::option::Option<Bar<u8>>;
    let mut _21: Bar<u8>;
    let mut _22: u8;
    scope 1 {
        debug foo => _1;
        let mut _2: std::option::Option<Bar<u8>>;
        scope 2 {
            debug bar => _2;
            let mut _3: bool;
            scope 3 {
                debug first_iter => _3;
            }
        }
    }

    bb0: {
        _1 = Option::<Foo<u32>>::None;
        _2 = Option::<Bar<u8>>::None;
        _3 = const true;
        goto -> bb1;
    }

    bb1: {
        _5 = _3;
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb10, otherwise: bb2];
    }

    bb2: {
        _10 = &_1;
        _9 = Option::<Foo<u32>>::as_ref(move _10) -> bb3;
    }

    bb3: {
        _8 = Option::<&Foo<u32>>::unwrap(move _9) -> bb4;
    }

    bb4: {
        _7 = _8;
        _6 = <Foo<u32> as MyTrait1>::my_fn(move _7) -> bb5;
    }

    bb5: {
        _17 = &_2;
        _16 = Option::<Bar<u8>>::as_ref(move _17) -> bb6;
    }

    bb6: {
        _15 = Option::<&Bar<u8>>::unwrap(move _16) -> bb7;
    }

    bb7: {
        _14 = _15;
        _13 = <Bar<u8> as Deref>::deref(move _14) -> bb8;
    }

    bb8: {
        _12 = _13;
        _11 = <dyn MyTrait2 as MyTrait2>::my_fn2(move _12) -> bb9;
    }

    bb9: {
        return;
    }

    bb10: {
        _19 = Foo::<u32>(const 0_u32);
        _18 = Option::<Foo<u32>>::Some(move _19);
        _1 = move _18;
        _22 = <u8 as Default>::default() -> bb11;
    }

    bb11: {
        _21 = Bar::<u8>(move _22, const 0_u32);
        _20 = Option::<Bar<u8>>::Some(move _21);
        _2 = move _20;
        _3 = const false;
        goto -> bb1;
    }
}

fn Foo(_1: T) -> Foo<T> {
    let mut _0: Foo<T>;

    bb0: {
        _0 = Foo::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: T) -> Foo<T> {
    let mut _0: Foo<T>;

    bb0: {
        _0 = Foo::<T>(move _1);
        return;
    }
}

fn Bar(_1: T, _2: u32) -> Bar<T> {
    let mut _0: Bar<T>;

    bb0: {
        _0 = Bar::<T>(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn Bar(_1: T, _2: u32) -> Bar<T> {
    let mut _0: Bar<T>;

    bb0: {
        _0 = Bar::<T>(move _1, move _2);
        return;
    }
}
