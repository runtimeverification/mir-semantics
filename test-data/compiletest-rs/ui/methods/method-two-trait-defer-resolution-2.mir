// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn MyCopy::foo(_1: &Self) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/methods/method-two-trait-defer-resolution-2.rs:20:1: 20:30>::foo(_1: &Vec<T>) -> isize {
    debug self => _1;
    let mut _0: isize;

    bb0: {
        _0 = const 1_isize;
        return;
    }
}

fn <impl at ui/methods/method-two-trait-defer-resolution-2.rs:24:1: 24:27>::foo(_1: &Vec<Box<i32>>) -> isize {
    debug self => _1;
    let mut _0: isize;

    bb0: {
        _0 = const 2_isize;
        return;
    }
}

fn call_foo_copy() -> isize {
    let mut _0: isize;
    let mut _1: std::vec::Vec<i32>;
    let mut _3: &std::vec::Vec<i32>;
    let _4: ();
    let mut _5: &mut std::vec::Vec<i32>;
    scope 1 {
        debug x => _1;
        let _2: isize;
        scope 2 {
            debug y => _2;
        }
    }

    bb0: {
        _1 = Vec::<i32>::new() -> bb1;
    }

    bb1: {
        _3 = &_1;
        _2 = <Vec<i32> as Foo>::foo(move _3) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _5 = &mut _1;
        _4 = Vec::<i32>::push(move _5, const 0_i32) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        _0 = _2;
        drop(_1) -> bb4;
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_1) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn call_foo_other() -> isize {
    let mut _0: isize;
    let mut _1: std::vec::Vec<std::boxed::Box<i32>>;
    let mut _3: &std::vec::Vec<std::boxed::Box<i32>>;
    let _5: ();
    let mut _6: &mut std::vec::Vec<std::boxed::Box<i32>>;
    let mut _7: std::boxed::Box<i32>;
    scope 1 {
        debug x => _1;
        let _2: isize;
        scope 2 {
            debug y => _2;
            let _4: std::boxed::Box<i32>;
            scope 3 {
                debug z => _4;
            }
        }
    }

    bb0: {
        _1 = Vec::<Box<i32>>::new() -> bb1;
    }

    bb1: {
        _3 = &_1;
        _2 = <Vec<Box<i32>> as Foo>::foo(move _3) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _4 = Box::<i32>::new(const 0_i32) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _6 = &mut _1;
        _7 = move _4;
        _5 = Vec::<Box<i32>>::push(move _6, move _7) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        _0 = _2;
        drop(_1) -> bb5;
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_1) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&isize, &isize);
    let mut _2: &isize;
    let _3: isize;
    let mut _4: &isize;
    let _5: isize;
    let _6: &isize;
    let _7: &isize;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: isize;
    let mut _11: isize;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&isize, &isize);
    let mut _16: &isize;
    let _17: isize;
    let mut _18: &isize;
    let _19: isize;
    let _20: &isize;
    let _21: &isize;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: isize;
    let mut _25: isize;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }
    scope 3 {
        debug left_val => _20;
        debug right_val => _21;
        let _26: core::panicking::AssertKind;
        scope 4 {
            debug kind => _26;
        }
    }

    bb0: {
        _3 = call_foo_copy() -> bb1;
    }

    bb1: {
        _2 = &_3;
        _5 = const 1_isize;
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &isize);
        _7 = (_1.1: &isize);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<isize, isize>(move _12, _6, _7, move _14);
    }

    bb3: {
        _17 = call_foo_other() -> bb4;
    }

    bb4: {
        _16 = &_17;
        _19 = const 2_isize;
        _18 = &_19;
        _15 = (move _16, move _18);
        _20 = (_15.0: &isize);
        _21 = (_15.1: &isize);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<isize, isize>(move _26, _20, _21, move _28);
    }

    bb6: {
        return;
    }
}
