// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/methods/method-projection.rs:9:1: 9:26>::make_string(_1: &isize) -> String {
    debug self => _1;
    let mut _0: std::string::String;
    let _2: std::string::String;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 1];
    let _6: [&str; 1];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    scope 1 {
        debug res => _2;
    }

    bb0: {
        _6 = [const ""];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _10 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_1) -> bb1;
    }

    bb1: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb2;
    }

    bb2: {
        _2 = format(move _3) -> bb3;
    }

    bb3: {
        _0 = move _2;
        return;
    }
}

fn <impl at ui/methods/method-projection.rs:15:1: 15:26>::make_string(_1: &usize) -> String {
    debug self => _1;
    let mut _0: std::string::String;
    let _2: std::string::String;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 1];
    let _6: [&str; 1];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    scope 1 {
        debug res => _2;
    }

    bb0: {
        _6 = [const ""];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _10 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_1) -> bb1;
    }

    bb1: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb2;
    }

    bb2: {
        _2 = format(move _3) -> bb3;
    }

    bb3: {
        _0 = move _2;
        return;
    }
}

fn foo(_1: &F) -> String {
    debug f => _1;
    let mut _0: std::string::String;
    let mut _2: &<F as Foo>::F;
    let _3: &<F as Foo>::F;

    bb0: {
        _3 = <F as Foo>::get(_1) -> bb1;
    }

    bb1: {
        _2 = _3;
        _0 = <<F as Foo>::F as MakeString>::make_string(move _2) -> bb2;
    }

    bb2: {
        return;
    }
}

fn <impl at ui/methods/method-projection.rs:35:1: 35:24>::get(_1: &SomeStruct) -> &isize {
    debug self => _1;
    let mut _0: &isize;

    bb0: {
        _0 = &((*_1).0: isize);
        return;
    }
}

fn <impl at ui/methods/method-projection.rs:47:1: 47:29>::get(_1: &SomeOtherStruct) -> &usize {
    debug self => _1;
    let mut _0: &usize;

    bb0: {
        _0 = &((*_1).0: usize);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: SomeStruct;
    let mut _2: (&std::string::String, &std::string::String);
    let mut _3: &std::string::String;
    let _4: std::string::String;
    let _5: &SomeStruct;
    let mut _6: &std::string::String;
    let _7: std::string::String;
    let mut _9: std::fmt::Arguments<'_>;
    let mut _10: &[&str];
    let _11: &[&str; 1];
    let _12: [&str; 1];
    let mut _15: bool;
    let mut _16: bool;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: (&std::string::String, &std::string::String);
    let mut _22: &std::string::String;
    let _23: std::string::String;
    let _24: &SomeOtherStruct;
    let mut _25: &std::string::String;
    let _26: std::string::String;
    let mut _28: std::fmt::Arguments<'_>;
    let mut _29: &[&str];
    let _30: &[&str; 1];
    let _31: [&str; 1];
    let mut _34: bool;
    let mut _35: bool;
    let _37: !;
    let mut _38: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _8: std::string::String;
        let _13: &std::string::String;
        let _14: &std::string::String;
        let _20: SomeOtherStruct;
        scope 2 {
            debug res => _8;
        }
        scope 3 {
            debug left_val => _13;
            debug right_val => _14;
            let _17: core::panicking::AssertKind;
            scope 4 {
                debug kind => _17;
            }
        }
        scope 5 {
            debug x => _20;
            let _27: std::string::String;
            let _32: &std::string::String;
            let _33: &std::string::String;
            scope 6 {
                debug res => _27;
            }
            scope 7 {
                debug left_val => _32;
                debug right_val => _33;
                let _36: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _36;
                }
            }
        }
    }

    bb0: {
        _1 = SomeStruct { field: const 22_isize };
        _5 = &_1;
        _4 = foo::<SomeStruct>(_5) -> bb1;
    }

    bb1: {
        _3 = &_4;
        _12 = [const "22"];
        _11 = &_12;
        _10 = _11 as &[&str] (Pointer(Unsize));
        _9 = Arguments::<'_>::new_const(move _10) -> [return: bb2, unwind: bb20];
    }

    bb2: {
        _8 = format(move _9) -> [return: bb3, unwind: bb20];
    }

    bb3: {
        _7 = move _8;
        _6 = &_7;
        _2 = (move _3, move _6);
        _13 = (_2.0: &std::string::String);
        _14 = (_2.1: &std::string::String);
        _16 = <String as PartialEq>::eq(_13, _14) -> [return: bb4, unwind: bb19];
    }

    bb4: {
        _15 = Not(move _16);
        switchInt(move _15) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<String, String>(move _17, _13, _14, move _19) -> bb19;
    }

    bb6: {
        drop(_7) -> [return: bb7, unwind: bb20];
    }

    bb7: {
        drop(_4) -> bb8;
    }

    bb8: {
        _20 = SomeOtherStruct { field: const 44_usize };
        _24 = &_20;
        _23 = foo::<SomeOtherStruct>(_24) -> bb9;
    }

    bb9: {
        _22 = &_23;
        _31 = [const "44"];
        _30 = &_31;
        _29 = _30 as &[&str] (Pointer(Unsize));
        _28 = Arguments::<'_>::new_const(move _29) -> [return: bb10, unwind: bb18];
    }

    bb10: {
        _27 = format(move _28) -> [return: bb11, unwind: bb18];
    }

    bb11: {
        _26 = move _27;
        _25 = &_26;
        _21 = (move _22, move _25);
        _32 = (_21.0: &std::string::String);
        _33 = (_21.1: &std::string::String);
        _35 = <String as PartialEq>::eq(_32, _33) -> [return: bb12, unwind: bb17];
    }

    bb12: {
        _34 = Not(move _35);
        switchInt(move _34) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _36 = core::panicking::AssertKind::Eq;
        _38 = Option::<Arguments<'_>>::None;
        _37 = core::panicking::assert_failed::<String, String>(move _36, _32, _33, move _38) -> bb17;
    }

    bb14: {
        drop(_26) -> [return: bb15, unwind: bb18];
    }

    bb15: {
        drop(_23) -> bb16;
    }

    bb16: {
        return;
    }

    bb17 (cleanup): {
        drop(_26) -> [return: bb18, unwind terminate];
    }

    bb18 (cleanup): {
        drop(_23) -> [return: bb21, unwind terminate];
    }

    bb19 (cleanup): {
        drop(_7) -> [return: bb20, unwind terminate];
    }

    bb20 (cleanup): {
        drop(_4) -> [return: bb21, unwind terminate];
    }

    bb21 (cleanup): {
        resume;
    }
}
