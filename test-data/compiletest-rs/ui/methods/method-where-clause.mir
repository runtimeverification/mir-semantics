// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/methods/method-where-clause.rs:10:1: 10:25>::foo(_1: &Option<i32>) -> i32 {
    debug self => _1;
    let mut _0: i32;
    let mut _2: std::option::Option<i32>;

    bb0: {
        _2 = (*_1);
        _0 = Option::<i32>::unwrap_or(move _2, const 22_i32) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/methods/method-where-clause.rs:17:1: 17:25>::foo(_1: &Option<u32>) -> i32 {
    debug self => _1;
    let mut _0: i32;
    let mut _2: u32;
    let mut _3: std::option::Option<u32>;

    bb0: {
        _3 = (*_1);
        _2 = Option::<u32>::unwrap_or(move _3, const 22_u32) -> bb1;
    }

    bb1: {
        _0 = move _2 as i32 (IntToInt);
        return;
    }
}

fn check(_1: Option<T>) -> (i32, i32) {
    debug x => _1;
    let mut _0: (i32, i32);
    let _2: std::option::Option<T>;
    let mut _3: i32;
    let mut _4: &std::option::Option<T>;
    let mut _5: i32;
    let mut _6: &std::option::Option<T>;
    scope 1 {
        debug y => _2;
    }

    bb0: {
        _2 = Option::<T>::None;
        _4 = &_1;
        _3 = <Option<T> as Foo>::foo(move _4) -> [return: bb1, unwind: bb5];
    }

    bb1: {
        _6 = &_2;
        _5 = <Option<T> as Foo>::foo(move _6) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _0 = (move _3, move _5);
        drop(_2) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        drop(_1) -> bb4;
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        drop(_1) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&(i32, i32), &(i32, i32));
    let mut _2: &(i32, i32);
    let _3: (i32, i32);
    let mut _4: std::option::Option<u32>;
    let mut _5: &(i32, i32);
    let _6: (i32, i32);
    let _7: &(i32, i32);
    let _8: &(i32, i32);
    let mut _9: bool;
    let mut _10: bool;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: (&(i32, i32), &(i32, i32));
    let mut _15: &(i32, i32);
    let _16: (i32, i32);
    let mut _17: std::option::Option<i32>;
    let mut _18: &(i32, i32);
    let _19: (i32, i32);
    let _20: &(i32, i32);
    let _21: &(i32, i32);
    let mut _22: bool;
    let mut _23: bool;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _7;
        debug right_val => _8;
        let _11: core::panicking::AssertKind;
        scope 2 {
            debug kind => _11;
        }
    }
    scope 3 {
        debug left_val => _20;
        debug right_val => _21;
        let _24: core::panicking::AssertKind;
        scope 4 {
            debug kind => _24;
        }
    }

    bb0: {
        _4 = Option::<u32>::Some(const 23_u32);
        _3 = check::<u32>(move _4) -> bb1;
    }

    bb1: {
        _2 = &_3;
        _6 = (const 23_i32, const 22_i32);
        _5 = &_6;
        _1 = (move _2, move _5);
        _7 = (_1.0: &(i32, i32));
        _8 = (_1.1: &(i32, i32));
        _10 = <(i32, i32) as PartialEq>::eq(_7, _8) -> bb2;
    }

    bb2: {
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _11, _7, _8, move _13);
    }

    bb4: {
        _17 = Option::<i32>::Some(const 23_i32);
        _16 = check::<i32>(move _17) -> bb5;
    }

    bb5: {
        _15 = &_16;
        _19 = (const 23_i32, const 22_i32);
        _18 = &_19;
        _14 = (move _15, move _18);
        _20 = (_14.0: &(i32, i32));
        _21 = (_14.1: &(i32, i32));
        _23 = <(i32, i32) as PartialEq>::eq(_20, _21) -> bb6;
    }

    bb6: {
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _24, _20, _21, move _26);
    }

    bb8: {
        return;
    }
}
