// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:5:10: 5:15>::clone(_1: &foo) -> foo {
    debug self => _1;
    let mut _0: foo;
    let mut _2: isize;
    let _3: &usize;
    let mut _4: usize;
    let _5: &std::string::String;
    let mut _6: std::string::String;
    scope 1 {
        debug __self_0 => _3;
    }
    scope 2 {
        debug __self_0 => _5;
    }

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _5 = &(((*_1) as b).0: std::string::String);
        _6 = <String as Clone>::clone(_5) -> bb4;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _3 = &(((*_1) as a).0: usize);
        _4 = (*_3);
        _0 = foo::a(move _4);
        goto -> bb5;
    }

    bb4: {
        _0 = foo::b(move _6);
        goto -> bb5;
    }

    bb5: {
        return;
    }
}

fn <impl at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:5:17: 5:22>::fmt(_1: &foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &usize;
    let _5: &str;
    let mut _6: &dyn std::fmt::Debug;
    let _7: &&usize;
    let _8: &std::string::String;
    let _9: &str;
    let mut _10: &dyn std::fmt::Debug;
    let _11: &&std::string::String;
    scope 1 {
        debug __self_0 => _4;
    }
    scope 2 {
        debug __self_0 => _8;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _8 = &(((*_1) as b).0: std::string::String);
        _9 = const "b";
        _11 = &_8;
        _10 = _11 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _9, move _10) -> bb4;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as a).0: usize);
        _5 = const "a";
        _7 = &_4;
        _6 = _7 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _5, move _6) -> bb4;
    }

    bb4: {
        return;
    }
}

fn check_log(_1: String, _2: T) -> () {
    debug exp => _1;
    debug v => _2;
    let mut _0: ();
    let mut _3: (&std::string::String, &std::string::String);
    let mut _4: &std::string::String;
    let mut _5: &std::string::String;
    let _6: std::string::String;
    let _7: std::string::String;
    let mut _8: std::fmt::Arguments<'_>;
    let mut _9: &[&str];
    let _10: &[&str; 1];
    let _11: [&str; 1];
    let mut _12: &[core::fmt::rt::Argument<'_>];
    let _13: &[core::fmt::rt::Argument<'_>; 1];
    let _14: [core::fmt::rt::Argument<'_>; 1];
    let mut _15: core::fmt::rt::Argument<'_>;
    let _16: &T;
    let _17: &std::string::String;
    let _18: &std::string::String;
    let mut _19: bool;
    let mut _20: bool;
    let _22: !;
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug res => _7;
    }
    scope 2 {
        debug left_val => _17;
        debug right_val => _18;
        let _21: core::panicking::AssertKind;
        scope 3 {
            debug kind => _21;
        }
    }

    bb0: {
        _4 = &_1;
        _11 = [const ""];
        _10 = &_11;
        _9 = _10 as &[&str] (Pointer(Unsize));
        _16 = &_2;
        _15 = core::fmt::rt::Argument::<'_>::new_debug::<T>(_16) -> [return: bb1, unwind: bb11];
    }

    bb1: {
        _14 = [move _15];
        _13 = &_14;
        _12 = _13 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _8 = Arguments::<'_>::new_v1(move _9, move _12) -> [return: bb2, unwind: bb11];
    }

    bb2: {
        _7 = format(move _8) -> [return: bb3, unwind: bb11];
    }

    bb3: {
        _6 = move _7;
        _5 = &_6;
        _3 = (move _4, move _5);
        _17 = (_3.0: &std::string::String);
        _18 = (_3.1: &std::string::String);
        _20 = <String as PartialEq>::eq(_17, _18) -> [return: bb4, unwind: bb10];
    }

    bb4: {
        _19 = Not(move _20);
        switchInt(move _19) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _21 = core::panicking::AssertKind::Eq;
        _23 = Option::<Arguments<'_>>::None;
        _22 = core::panicking::assert_failed::<String, String>(move _21, _17, _18, move _23) -> bb10;
    }

    bb6: {
        drop(_6) -> [return: bb7, unwind: bb11];
    }

    bb7: {
        drop(_2) -> [return: bb8, unwind: bb12];
    }

    bb8: {
        drop(_1) -> bb9;
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_6) -> [return: bb11, unwind terminate];
    }

    bb11 (cleanup): {
        drop(_2) -> [return: bb12, unwind terminate];
    }

    bb12 (cleanup): {
        drop(_1) -> [return: bb13, unwind terminate];
    }

    bb13 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: std::option::Option<foo>;
    let mut _2: foo;
    let _4: &str;
    let mut _7: std::fmt::Arguments<'_>;
    let mut _8: &[&str];
    let _9: &[&str; 1];
    let _10: [&str; 1];
    let mut _11: &[core::fmt::rt::Argument<'_>];
    let _12: &[core::fmt::rt::Argument<'_>; 1];
    let _13: [core::fmt::rt::Argument<'_>; 1];
    let mut _14: core::fmt::rt::Argument<'_>;
    let _15: &std::option::Option<foo>;
    let mut _16: (&std::string::String, &std::string::String);
    let mut _17: &std::string::String;
    let mut _18: &std::string::String;
    let mut _21: bool;
    let mut _22: bool;
    let _24: !;
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>;
    let _26: ();
    let mut _27: std::string::String;
    let mut _28: std::option::Option<foo>;
    let mut _29: std::option::Option<foo>;
    let _31: &str;
    let mut _34: std::fmt::Arguments<'_>;
    let mut _35: &[&str];
    let _36: &[&str; 1];
    let _37: [&str; 1];
    let mut _38: &[core::fmt::rt::Argument<'_>];
    let _39: &[core::fmt::rt::Argument<'_>; 1];
    let _40: [core::fmt::rt::Argument<'_>; 1];
    let mut _41: core::fmt::rt::Argument<'_>;
    let _42: &std::option::Option<foo>;
    let mut _43: (&std::string::String, &std::string::String);
    let mut _44: &std::string::String;
    let mut _45: &std::string::String;
    let mut _48: bool;
    let mut _49: bool;
    let _51: !;
    let mut _52: std::option::Option<std::fmt::Arguments<'_>>;
    let _53: ();
    let mut _54: std::string::String;
    let mut _55: std::option::Option<foo>;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    scope 1 {
        debug x => _1;
        let _3: std::string::String;
        scope 2 {
            debug exp => _3;
            let _5: std::string::String;
            let _6: std::string::String;
            scope 3 {
                debug act => _5;
                let _19: &std::string::String;
                let _20: &std::string::String;
                let _30: std::string::String;
                scope 5 {
                    debug left_val => _19;
                    debug right_val => _20;
                    let _23: core::panicking::AssertKind;
                    scope 6 {
                        debug kind => _23;
                    }
                }
                scope 7 {
                    debug exp => _30;
                    let _32: std::string::String;
                    let _33: std::string::String;
                    scope 8 {
                        debug act => _32;
                        let _46: &std::string::String;
                        let _47: &std::string::String;
                        scope 10 {
                            debug left_val => _46;
                            debug right_val => _47;
                            let _50: core::panicking::AssertKind;
                            scope 11 {
                                debug kind => _50;
                            }
                        }
                    }
                    scope 9 {
                        debug res => _33;
                    }
                }
            }
            scope 4 {
                debug res => _6;
            }
        }
    }

    bb0: {
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _2 = foo::a(const 22_usize);
        _58 = const true;
        _1 = Option::<foo>::Some(move _2);
        _4 = const "Some(a(22))";
        _3 = <str as ToString>::to_string(_4) -> [return: bb1, unwind: bb21];
    }

    bb1: {
        _57 = const true;
        _10 = [const ""];
        _9 = &_10;
        _8 = _9 as &[&str] (Pointer(Unsize));
        _15 = &_1;
        _14 = core::fmt::rt::Argument::<'_>::new_debug::<Option<foo>>(_15) -> [return: bb2, unwind: bb26];
    }

    bb2: {
        _13 = [move _14];
        _12 = &_13;
        _11 = _12 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _7 = Arguments::<'_>::new_v1(move _8, move _11) -> [return: bb3, unwind: bb26];
    }

    bb3: {
        _6 = format(move _7) -> [return: bb4, unwind: bb26];
    }

    bb4: {
        _5 = move _6;
        _17 = &_5;
        _18 = &_3;
        _16 = (move _17, move _18);
        _19 = (_16.0: &std::string::String);
        _20 = (_16.1: &std::string::String);
        _22 = <String as PartialEq>::eq(_19, _20) -> [return: bb5, unwind: bb20];
    }

    bb5: {
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _23 = core::panicking::AssertKind::Eq;
        _25 = Option::<Arguments<'_>>::None;
        _24 = core::panicking::assert_failed::<String, String>(move _23, _19, _20, move _25) -> bb20;
    }

    bb7: {
        _57 = const false;
        _27 = move _3;
        _58 = const false;
        _28 = move _1;
        _26 = check_log::<Option<foo>>(move _27, move _28) -> [return: bb8, unwind: bb20];
    }

    bb8: {
        _29 = Option::<foo>::None;
        _58 = const true;
        _1 = move _29;
        _31 = const "None";
        _30 = <str as ToString>::to_string(_31) -> [return: bb9, unwind: bb20];
    }

    bb9: {
        _56 = const true;
        _37 = [const ""];
        _36 = &_37;
        _35 = _36 as &[&str] (Pointer(Unsize));
        _42 = &_1;
        _41 = core::fmt::rt::Argument::<'_>::new_debug::<Option<foo>>(_42) -> [return: bb10, unwind: bb24];
    }

    bb10: {
        _40 = [move _41];
        _39 = &_40;
        _38 = _39 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _34 = Arguments::<'_>::new_v1(move _35, move _38) -> [return: bb11, unwind: bb24];
    }

    bb11: {
        _33 = format(move _34) -> [return: bb12, unwind: bb24];
    }

    bb12: {
        _32 = move _33;
        _44 = &_32;
        _45 = &_30;
        _43 = (move _44, move _45);
        _46 = (_43.0: &std::string::String);
        _47 = (_43.1: &std::string::String);
        _49 = <String as PartialEq>::eq(_46, _47) -> [return: bb13, unwind: bb19];
    }

    bb13: {
        _48 = Not(move _49);
        switchInt(move _48) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _50 = core::panicking::AssertKind::Eq;
        _52 = Option::<Arguments<'_>>::None;
        _51 = core::panicking::assert_failed::<String, String>(move _50, _46, _47, move _52) -> bb19;
    }

    bb15: {
        _56 = const false;
        _54 = move _30;
        _58 = const false;
        _55 = move _1;
        _53 = check_log::<Option<foo>>(move _54, move _55) -> [return: bb16, unwind: bb19];
    }

    bb16: {
        drop(_32) -> [return: bb17, unwind: bb24];
    }

    bb17: {
        _56 = const false;
        drop(_5) -> [return: bb18, unwind: bb26];
    }

    bb18: {
        _57 = const false;
        _58 = const false;
        return;
    }

    bb19 (cleanup): {
        drop(_32) -> [return: bb24, unwind terminate];
    }

    bb20 (cleanup): {
        drop(_5) -> [return: bb26, unwind terminate];
    }

    bb21 (cleanup): {
        switchInt(_58) -> [0: bb22, otherwise: bb27];
    }

    bb22 (cleanup): {
        resume;
    }

    bb23 (cleanup): {
        drop(_30) -> [return: bb20, unwind terminate];
    }

    bb24 (cleanup): {
        switchInt(_56) -> [0: bb20, otherwise: bb23];
    }

    bb25 (cleanup): {
        drop(_3) -> [return: bb21, unwind terminate];
    }

    bb26 (cleanup): {
        switchInt(_57) -> [0: bb21, otherwise: bb25];
    }

    bb27 (cleanup): {
        drop(_1) -> [return: bb22, unwind terminate];
    }
}

fn foo::a(_1: usize) -> foo {
    let mut _0: foo;

    bb0: {
        _0 = foo::a(move _1);
        return;
    }
}

// MIR FOR CTFE
fn foo::a(_1: usize) -> foo {
    let mut _0: foo;

    bb0: {
        _0 = foo::a(move _1);
        return;
    }
}

fn foo::b(_1: String) -> foo {
    let mut _0: foo;

    bb0: {
        _0 = foo::b(move _1);
        return;
    }
}

// MIR FOR CTFE
fn foo::b(_1: String) -> foo {
    let mut _0: foo;

    bb0: {
        _0 = foo::b(move _1);
        return;
    }
}
