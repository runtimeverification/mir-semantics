// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: &std::string::String;
    let _4: std::string::String;
    let _5: &str;
    let mut _6: &std::string::String;
    let _7: std::string::String;
    let _8: &str;
    let mut _9: !;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: &std::string::String;
    let _13: std::string::String;
    let _14: &str;
    let mut _15: &std::string::String;
    let _16: std::string::String;
    let _17: &str;
    let mut _18: !;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: &std::string::String;
    let _22: std::string::String;
    let _23: &str;
    let mut _24: &std::string::String;
    let _25: std::string::String;
    let _26: &str;
    let mut _27: !;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: &std::vec::Vec<i32>;
    let _31: std::vec::Vec<i32>;
    let mut _32: std::boxed::Box<[i32]>;
    let mut _33: usize;
    let mut _34: usize;
    let mut _35: *mut u8;
    let mut _36: std::boxed::Box<[i32; 4]>;
    let mut _37: &std::vec::Vec<i32>;
    let _38: std::vec::Vec<i32>;
    let mut _39: std::boxed::Box<[i32]>;
    let mut _40: usize;
    let mut _41: usize;
    let mut _42: *mut u8;
    let mut _43: std::boxed::Box<[i32; 3]>;
    let mut _44: !;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: &std::vec::Vec<i32>;
    let _48: std::vec::Vec<i32>;
    let mut _49: std::boxed::Box<[i32]>;
    let mut _50: usize;
    let mut _51: usize;
    let mut _52: *mut u8;
    let mut _53: std::boxed::Box<[i32; 3]>;
    let mut _54: &std::vec::Vec<i32>;
    let _55: std::vec::Vec<i32>;
    let mut _56: std::boxed::Box<[i32]>;
    let mut _57: usize;
    let mut _58: usize;
    let mut _59: *mut u8;
    let mut _60: std::boxed::Box<[i32; 4]>;
    let mut _61: !;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: &std::vec::Vec<i32>;
    let _65: std::vec::Vec<i32>;
    let mut _66: std::boxed::Box<[i32]>;
    let mut _67: usize;
    let mut _68: usize;
    let mut _69: *mut u8;
    let mut _70: std::boxed::Box<[i32; 4]>;
    let mut _71: &std::vec::Vec<i32>;
    let _72: std::vec::Vec<i32>;
    let mut _73: std::boxed::Box<[i32]>;
    let mut _74: usize;
    let mut _75: usize;
    let mut _76: *mut u8;
    let mut _77: std::boxed::Box<[i32; 4]>;
    let mut _78: !;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: &std::vec::Vec<i32>;
    let _82: std::vec::Vec<i32>;
    let mut _83: std::boxed::Box<[i32]>;
    let mut _84: usize;
    let mut _85: usize;
    let mut _86: *mut u8;
    let mut _87: std::boxed::Box<[i32; 4]>;
    let mut _88: &std::vec::Vec<i32>;
    let _89: std::vec::Vec<i32>;
    let mut _90: std::boxed::Box<[i32]>;
    let mut _91: usize;
    let mut _92: usize;
    let mut _93: *mut u8;
    let mut _94: std::boxed::Box<[i32; 4]>;
    let mut _95: !;
    let mut _96: bool;
    let mut _97: bool;
    let mut _98: &std::vec::Vec<i32>;
    let _99: std::vec::Vec<i32>;
    let mut _100: std::boxed::Box<[i32]>;
    let mut _101: usize;
    let mut _102: usize;
    let mut _103: *mut u8;
    let mut _104: std::boxed::Box<[i32; 3]>;
    let mut _105: &std::vec::Vec<i32>;
    let _106: std::vec::Vec<i32>;
    let mut _107: std::boxed::Box<[i32]>;
    let mut _108: usize;
    let mut _109: usize;
    let mut _110: *mut u8;
    let mut _111: std::boxed::Box<[i32; 3]>;
    let mut _112: !;
    let mut _113: bool;
    let mut _114: bool;
    let mut _115: &std::vec::Vec<i32>;
    let _116: std::vec::Vec<i32>;
    let mut _117: std::boxed::Box<[i32]>;
    let mut _118: usize;
    let mut _119: usize;
    let mut _120: *mut u8;
    let mut _121: std::boxed::Box<[i32; 3]>;
    let mut _122: &std::vec::Vec<i32>;
    let _123: std::vec::Vec<i32>;
    let mut _124: std::boxed::Box<[i32]>;
    let mut _125: usize;
    let mut _126: usize;
    let mut _127: *mut u8;
    let mut _128: std::boxed::Box<[i32; 4]>;
    let mut _129: !;
    let mut _130: bool;
    let mut _131: bool;
    let mut _132: &std::vec::Vec<i32>;
    let _133: std::vec::Vec<i32>;
    let mut _134: std::boxed::Box<[i32]>;
    let mut _135: usize;
    let mut _136: usize;
    let mut _137: *mut u8;
    let mut _138: std::boxed::Box<[i32; 4]>;
    let mut _139: &std::vec::Vec<i32>;
    let _140: std::vec::Vec<i32>;
    let mut _141: std::boxed::Box<[i32]>;
    let mut _142: usize;
    let mut _143: usize;
    let mut _144: *mut u8;
    let mut _145: std::boxed::Box<[i32; 3]>;
    let mut _146: !;
    let mut _147: (&std::vec::Vec<i32>, &std::vec::Vec<i32>);
    let mut _148: &std::vec::Vec<i32>;
    let _149: std::vec::Vec<i32>;
    let mut _150: std::boxed::Box<[i32]>;
    let mut _151: usize;
    let mut _152: usize;
    let mut _153: *mut u8;
    let mut _154: std::boxed::Box<[i32; 3]>;
    let mut _155: &std::vec::Vec<i32>;
    let _156: std::vec::Vec<i32>;
    let mut _157: std::boxed::Box<[i32]>;
    let mut _158: usize;
    let mut _159: usize;
    let mut _160: *mut u8;
    let mut _161: std::boxed::Box<[i32; 3]>;
    let _162: &std::vec::Vec<i32>;
    let _163: &std::vec::Vec<i32>;
    let mut _164: bool;
    let mut _165: bool;
    let _167: !;
    let mut _168: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _169: bool;
    let mut _170: bool;
    let mut _171: &std::vec::Vec<i32>;
    let _172: std::vec::Vec<i32>;
    let mut _173: std::boxed::Box<[i32]>;
    let mut _174: usize;
    let mut _175: usize;
    let mut _176: *mut u8;
    let mut _177: std::boxed::Box<[i32; 3]>;
    let mut _178: &std::vec::Vec<i32>;
    let _179: std::vec::Vec<i32>;
    let mut _180: std::boxed::Box<[i32]>;
    let mut _181: usize;
    let mut _182: usize;
    let mut _183: *mut u8;
    let mut _184: std::boxed::Box<[i32; 3]>;
    let mut _185: !;
    let mut _186: *const [i32; 4];
    let mut _187: *const [i32; 3];
    let mut _188: *const [i32; 3];
    let mut _189: *const [i32; 4];
    let mut _190: *const [i32; 4];
    let mut _191: *const [i32; 4];
    let mut _192: *const [i32; 4];
    let mut _193: *const [i32; 4];
    let mut _194: *const [i32; 3];
    let mut _195: *const [i32; 3];
    let mut _196: *const [i32; 3];
    let mut _197: *const [i32; 4];
    let mut _198: *const [i32; 4];
    let mut _199: *const [i32; 3];
    let mut _200: *const [i32; 3];
    let mut _201: *const [i32; 3];
    let mut _202: *const [i32; 3];
    let mut _203: *const [i32; 3];
    let mut _204: *const ();
    let mut _205: usize;
    let mut _206: usize;
    let mut _207: usize;
    let mut _208: usize;
    let mut _209: bool;
    let mut _210: *const ();
    let mut _211: usize;
    let mut _212: usize;
    let mut _213: usize;
    let mut _214: usize;
    let mut _215: bool;
    let mut _216: *const ();
    let mut _217: usize;
    let mut _218: usize;
    let mut _219: usize;
    let mut _220: usize;
    let mut _221: bool;
    let mut _222: *const ();
    let mut _223: usize;
    let mut _224: usize;
    let mut _225: usize;
    let mut _226: usize;
    let mut _227: bool;
    let mut _228: *const ();
    let mut _229: usize;
    let mut _230: usize;
    let mut _231: usize;
    let mut _232: usize;
    let mut _233: bool;
    let mut _234: *const ();
    let mut _235: usize;
    let mut _236: usize;
    let mut _237: usize;
    let mut _238: usize;
    let mut _239: bool;
    let mut _240: *const ();
    let mut _241: usize;
    let mut _242: usize;
    let mut _243: usize;
    let mut _244: usize;
    let mut _245: bool;
    let mut _246: *const ();
    let mut _247: usize;
    let mut _248: usize;
    let mut _249: usize;
    let mut _250: usize;
    let mut _251: bool;
    let mut _252: *const ();
    let mut _253: usize;
    let mut _254: usize;
    let mut _255: usize;
    let mut _256: usize;
    let mut _257: bool;
    let mut _258: *const ();
    let mut _259: usize;
    let mut _260: usize;
    let mut _261: usize;
    let mut _262: usize;
    let mut _263: bool;
    let mut _264: *const ();
    let mut _265: usize;
    let mut _266: usize;
    let mut _267: usize;
    let mut _268: usize;
    let mut _269: bool;
    let mut _270: *const ();
    let mut _271: usize;
    let mut _272: usize;
    let mut _273: usize;
    let mut _274: usize;
    let mut _275: bool;
    let mut _276: *const ();
    let mut _277: usize;
    let mut _278: usize;
    let mut _279: usize;
    let mut _280: usize;
    let mut _281: bool;
    let mut _282: *const ();
    let mut _283: usize;
    let mut _284: usize;
    let mut _285: usize;
    let mut _286: usize;
    let mut _287: bool;
    let mut _288: *const ();
    let mut _289: usize;
    let mut _290: usize;
    let mut _291: usize;
    let mut _292: usize;
    let mut _293: bool;
    let mut _294: *const ();
    let mut _295: usize;
    let mut _296: usize;
    let mut _297: usize;
    let mut _298: usize;
    let mut _299: bool;
    let mut _300: *const ();
    let mut _301: usize;
    let mut _302: usize;
    let mut _303: usize;
    let mut _304: usize;
    let mut _305: bool;
    let mut _306: *const ();
    let mut _307: usize;
    let mut _308: usize;
    let mut _309: usize;
    let mut _310: usize;
    let mut _311: bool;
    scope 1 {
    }
    scope 2 {
    }
    scope 3 {
    }
    scope 4 {
    }
    scope 5 {
    }
    scope 6 {
    }
    scope 7 {
    }
    scope 8 {
    }
    scope 9 {
    }
    scope 10 {
    }
    scope 11 {
    }
    scope 12 {
    }
    scope 13 {
    }
    scope 14 {
    }
    scope 15 {
    }
    scope 16 {
    }
    scope 17 {
        debug left_val => _162;
        debug right_val => _163;
        let _166: core::panicking::AssertKind;
        scope 18 {
            debug kind => _166;
        }
    }
    scope 19 {
    }
    scope 20 {
    }

    bb0: {
        _5 = const "hello";
        _4 = <str as ToString>::to_string(_5) -> bb1;
    }

    bb1: {
        _3 = &_4;
        _8 = const "hellr";
        _7 = <str as ToString>::to_string(_8) -> [return: bb2, unwind: bb126];
    }

    bb2: {
        _6 = &_7;
        _2 = <String as PartialOrd>::lt(move _3, move _6) -> [return: bb3, unwind: bb125];
    }

    bb3: {
        _1 = Not(move _2);
        drop(_7) -> [return: bb4, unwind: bb126];
    }

    bb4: {
        drop(_4) -> bb5;
    }

    bb5: {
        switchInt(move _1) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _9 = core::panicking::panic(const "assertion failed: (\\\"hello\\\".to_string() < \\\"hellr\\\".to_string())");
    }

    bb7: {
        _14 = const "hello ";
        _13 = <str as ToString>::to_string(_14) -> bb8;
    }

    bb8: {
        _12 = &_13;
        _17 = const "hello";
        _16 = <str as ToString>::to_string(_17) -> [return: bb9, unwind: bb124];
    }

    bb9: {
        _15 = &_16;
        _11 = <String as PartialOrd>::gt(move _12, move _15) -> [return: bb10, unwind: bb123];
    }

    bb10: {
        _10 = Not(move _11);
        drop(_16) -> [return: bb11, unwind: bb124];
    }

    bb11: {
        drop(_13) -> bb12;
    }

    bb12: {
        switchInt(move _10) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _18 = core::panicking::panic(const "assertion failed: (\\\"hello \\\".to_string() > \\\"hello\\\".to_string())");
    }

    bb14: {
        _23 = const "hello";
        _22 = <str as ToString>::to_string(_23) -> bb15;
    }

    bb15: {
        _21 = &_22;
        _26 = const "there";
        _25 = <str as ToString>::to_string(_26) -> [return: bb16, unwind: bb122];
    }

    bb16: {
        _24 = &_25;
        _20 = <String as PartialEq>::ne(move _21, move _24) -> [return: bb17, unwind: bb121];
    }

    bb17: {
        _19 = Not(move _20);
        drop(_25) -> [return: bb18, unwind: bb122];
    }

    bb18: {
        drop(_22) -> bb19;
    }

    bb19: {
        switchInt(move _19) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _27 = core::panicking::panic(const "assertion failed: (\\\"hello\\\".to_string() != \\\"there\\\".to_string())");
    }

    bb21: {
        _33 = SizeOf([i32; 4]);
        _34 = AlignOf([i32; 4]);
        _35 = alloc::alloc::exchange_malloc(move _33, move _34) -> bb22;
    }

    bb22: {
        _36 = ShallowInitBox(move _35, [i32; 4]);
        _186 = (((_36.0: std::ptr::Unique<[i32; 4]>).0: std::ptr::NonNull<[i32; 4]>).0: *const [i32; 4]);
        _306 = _186 as *const () (PtrToPtr);
        _307 = _306 as usize (Transmute);
        _308 = AlignOf(i32);
        _309 = Sub(_308, const 1_usize);
        _310 = BitAnd(_307, _309);
        _311 = Eq(_310, const 0_usize);
        assert(_311, "misaligned pointer dereference: address must be a multiple of {} but is {}", _308, _307) -> [success: bb145, unwind unreachable];
    }

    bb23: {
        _30 = &_31;
        _40 = SizeOf([i32; 3]);
        _41 = AlignOf([i32; 3]);
        _42 = alloc::alloc::exchange_malloc(move _40, move _41) -> [return: bb24, unwind: bb120];
    }

    bb24: {
        _43 = ShallowInitBox(move _42, [i32; 3]);
        _187 = (((_43.0: std::ptr::Unique<[i32; 3]>).0: std::ptr::NonNull<[i32; 3]>).0: *const [i32; 3]);
        _300 = _187 as *const () (PtrToPtr);
        _301 = _300 as usize (Transmute);
        _302 = AlignOf(i32);
        _303 = Sub(_302, const 1_usize);
        _304 = BitAnd(_301, _303);
        _305 = Eq(_304, const 0_usize);
        assert(_305, "misaligned pointer dereference: address must be a multiple of {} but is {}", _302, _301) -> [success: bb144, unwind unreachable];
    }

    bb25: {
        _37 = &_38;
        _29 = <Vec<i32> as PartialOrd>::gt(move _30, move _37) -> [return: bb26, unwind: bb119];
    }

    bb26: {
        _28 = Not(move _29);
        drop(_38) -> [return: bb27, unwind: bb120];
    }

    bb27: {
        drop(_31) -> bb28;
    }

    bb28: {
        switchInt(move _28) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _44 = core::panicking::panic(const "assertion failed: (vec![1, 2, 3, 4] > vec![1, 2, 3])");
    }

    bb30: {
        _50 = SizeOf([i32; 3]);
        _51 = AlignOf([i32; 3]);
        _52 = alloc::alloc::exchange_malloc(move _50, move _51) -> bb31;
    }

    bb31: {
        _53 = ShallowInitBox(move _52, [i32; 3]);
        _188 = (((_53.0: std::ptr::Unique<[i32; 3]>).0: std::ptr::NonNull<[i32; 3]>).0: *const [i32; 3]);
        _294 = _188 as *const () (PtrToPtr);
        _295 = _294 as usize (Transmute);
        _296 = AlignOf(i32);
        _297 = Sub(_296, const 1_usize);
        _298 = BitAnd(_295, _297);
        _299 = Eq(_298, const 0_usize);
        assert(_299, "misaligned pointer dereference: address must be a multiple of {} but is {}", _296, _295) -> [success: bb143, unwind unreachable];
    }

    bb32: {
        _47 = &_48;
        _57 = SizeOf([i32; 4]);
        _58 = AlignOf([i32; 4]);
        _59 = alloc::alloc::exchange_malloc(move _57, move _58) -> [return: bb33, unwind: bb118];
    }

    bb33: {
        _60 = ShallowInitBox(move _59, [i32; 4]);
        _189 = (((_60.0: std::ptr::Unique<[i32; 4]>).0: std::ptr::NonNull<[i32; 4]>).0: *const [i32; 4]);
        _288 = _189 as *const () (PtrToPtr);
        _289 = _288 as usize (Transmute);
        _290 = AlignOf(i32);
        _291 = Sub(_290, const 1_usize);
        _292 = BitAnd(_289, _291);
        _293 = Eq(_292, const 0_usize);
        assert(_293, "misaligned pointer dereference: address must be a multiple of {} but is {}", _290, _289) -> [success: bb142, unwind unreachable];
    }

    bb34: {
        _54 = &_55;
        _46 = <Vec<i32> as PartialOrd>::lt(move _47, move _54) -> [return: bb35, unwind: bb117];
    }

    bb35: {
        _45 = Not(move _46);
        drop(_55) -> [return: bb36, unwind: bb118];
    }

    bb36: {
        drop(_48) -> bb37;
    }

    bb37: {
        switchInt(move _45) -> [0: bb39, otherwise: bb38];
    }

    bb38: {
        _61 = core::panicking::panic(const "assertion failed: (vec![1, 2, 3] < vec![1, 2, 3, 4])");
    }

    bb39: {
        _67 = SizeOf([i32; 4]);
        _68 = AlignOf([i32; 4]);
        _69 = alloc::alloc::exchange_malloc(move _67, move _68) -> bb40;
    }

    bb40: {
        _70 = ShallowInitBox(move _69, [i32; 4]);
        _190 = (((_70.0: std::ptr::Unique<[i32; 4]>).0: std::ptr::NonNull<[i32; 4]>).0: *const [i32; 4]);
        _282 = _190 as *const () (PtrToPtr);
        _283 = _282 as usize (Transmute);
        _284 = AlignOf(i32);
        _285 = Sub(_284, const 1_usize);
        _286 = BitAnd(_283, _285);
        _287 = Eq(_286, const 0_usize);
        assert(_287, "misaligned pointer dereference: address must be a multiple of {} but is {}", _284, _283) -> [success: bb141, unwind unreachable];
    }

    bb41: {
        _64 = &_65;
        _74 = SizeOf([i32; 4]);
        _75 = AlignOf([i32; 4]);
        _76 = alloc::alloc::exchange_malloc(move _74, move _75) -> [return: bb42, unwind: bb116];
    }

    bb42: {
        _77 = ShallowInitBox(move _76, [i32; 4]);
        _191 = (((_77.0: std::ptr::Unique<[i32; 4]>).0: std::ptr::NonNull<[i32; 4]>).0: *const [i32; 4]);
        _276 = _191 as *const () (PtrToPtr);
        _277 = _276 as usize (Transmute);
        _278 = AlignOf(i32);
        _279 = Sub(_278, const 1_usize);
        _280 = BitAnd(_277, _279);
        _281 = Eq(_280, const 0_usize);
        assert(_281, "misaligned pointer dereference: address must be a multiple of {} but is {}", _278, _277) -> [success: bb140, unwind unreachable];
    }

    bb43: {
        _71 = &_72;
        _63 = <Vec<i32> as PartialOrd>::gt(move _64, move _71) -> [return: bb44, unwind: bb115];
    }

    bb44: {
        _62 = Not(move _63);
        drop(_72) -> [return: bb45, unwind: bb116];
    }

    bb45: {
        drop(_65) -> bb46;
    }

    bb46: {
        switchInt(move _62) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _78 = core::panicking::panic(const "assertion failed: (vec![1, 2, 4, 4] > vec![1, 2, 3, 4])");
    }

    bb48: {
        _84 = SizeOf([i32; 4]);
        _85 = AlignOf([i32; 4]);
        _86 = alloc::alloc::exchange_malloc(move _84, move _85) -> bb49;
    }

    bb49: {
        _87 = ShallowInitBox(move _86, [i32; 4]);
        _192 = (((_87.0: std::ptr::Unique<[i32; 4]>).0: std::ptr::NonNull<[i32; 4]>).0: *const [i32; 4]);
        _270 = _192 as *const () (PtrToPtr);
        _271 = _270 as usize (Transmute);
        _272 = AlignOf(i32);
        _273 = Sub(_272, const 1_usize);
        _274 = BitAnd(_271, _273);
        _275 = Eq(_274, const 0_usize);
        assert(_275, "misaligned pointer dereference: address must be a multiple of {} but is {}", _272, _271) -> [success: bb139, unwind unreachable];
    }

    bb50: {
        _81 = &_82;
        _91 = SizeOf([i32; 4]);
        _92 = AlignOf([i32; 4]);
        _93 = alloc::alloc::exchange_malloc(move _91, move _92) -> [return: bb51, unwind: bb114];
    }

    bb51: {
        _94 = ShallowInitBox(move _93, [i32; 4]);
        _193 = (((_94.0: std::ptr::Unique<[i32; 4]>).0: std::ptr::NonNull<[i32; 4]>).0: *const [i32; 4]);
        _264 = _193 as *const () (PtrToPtr);
        _265 = _264 as usize (Transmute);
        _266 = AlignOf(i32);
        _267 = Sub(_266, const 1_usize);
        _268 = BitAnd(_265, _267);
        _269 = Eq(_268, const 0_usize);
        assert(_269, "misaligned pointer dereference: address must be a multiple of {} but is {}", _266, _265) -> [success: bb138, unwind unreachable];
    }

    bb52: {
        _88 = &_89;
        _80 = <Vec<i32> as PartialOrd>::lt(move _81, move _88) -> [return: bb53, unwind: bb113];
    }

    bb53: {
        _79 = Not(move _80);
        drop(_89) -> [return: bb54, unwind: bb114];
    }

    bb54: {
        drop(_82) -> bb55;
    }

    bb55: {
        switchInt(move _79) -> [0: bb57, otherwise: bb56];
    }

    bb56: {
        _95 = core::panicking::panic(const "assertion failed: (vec![1, 2, 3, 4] < vec![1, 2, 4, 4])");
    }

    bb57: {
        _101 = SizeOf([i32; 3]);
        _102 = AlignOf([i32; 3]);
        _103 = alloc::alloc::exchange_malloc(move _101, move _102) -> bb58;
    }

    bb58: {
        _104 = ShallowInitBox(move _103, [i32; 3]);
        _194 = (((_104.0: std::ptr::Unique<[i32; 3]>).0: std::ptr::NonNull<[i32; 3]>).0: *const [i32; 3]);
        _258 = _194 as *const () (PtrToPtr);
        _259 = _258 as usize (Transmute);
        _260 = AlignOf(i32);
        _261 = Sub(_260, const 1_usize);
        _262 = BitAnd(_259, _261);
        _263 = Eq(_262, const 0_usize);
        assert(_263, "misaligned pointer dereference: address must be a multiple of {} but is {}", _260, _259) -> [success: bb137, unwind unreachable];
    }

    bb59: {
        _98 = &_99;
        _108 = SizeOf([i32; 3]);
        _109 = AlignOf([i32; 3]);
        _110 = alloc::alloc::exchange_malloc(move _108, move _109) -> [return: bb60, unwind: bb112];
    }

    bb60: {
        _111 = ShallowInitBox(move _110, [i32; 3]);
        _195 = (((_111.0: std::ptr::Unique<[i32; 3]>).0: std::ptr::NonNull<[i32; 3]>).0: *const [i32; 3]);
        _252 = _195 as *const () (PtrToPtr);
        _253 = _252 as usize (Transmute);
        _254 = AlignOf(i32);
        _255 = Sub(_254, const 1_usize);
        _256 = BitAnd(_253, _255);
        _257 = Eq(_256, const 0_usize);
        assert(_257, "misaligned pointer dereference: address must be a multiple of {} but is {}", _254, _253) -> [success: bb136, unwind unreachable];
    }

    bb61: {
        _105 = &_106;
        _97 = <Vec<i32> as PartialOrd>::le(move _98, move _105) -> [return: bb62, unwind: bb111];
    }

    bb62: {
        _96 = Not(move _97);
        drop(_106) -> [return: bb63, unwind: bb112];
    }

    bb63: {
        drop(_99) -> bb64;
    }

    bb64: {
        switchInt(move _96) -> [0: bb66, otherwise: bb65];
    }

    bb65: {
        _112 = core::panicking::panic(const "assertion failed: (vec![1, 2, 3] <= vec![1, 2, 3])");
    }

    bb66: {
        _118 = SizeOf([i32; 3]);
        _119 = AlignOf([i32; 3]);
        _120 = alloc::alloc::exchange_malloc(move _118, move _119) -> bb67;
    }

    bb67: {
        _121 = ShallowInitBox(move _120, [i32; 3]);
        _196 = (((_121.0: std::ptr::Unique<[i32; 3]>).0: std::ptr::NonNull<[i32; 3]>).0: *const [i32; 3]);
        _246 = _196 as *const () (PtrToPtr);
        _247 = _246 as usize (Transmute);
        _248 = AlignOf(i32);
        _249 = Sub(_248, const 1_usize);
        _250 = BitAnd(_247, _249);
        _251 = Eq(_250, const 0_usize);
        assert(_251, "misaligned pointer dereference: address must be a multiple of {} but is {}", _248, _247) -> [success: bb135, unwind unreachable];
    }

    bb68: {
        _115 = &_116;
        _125 = SizeOf([i32; 4]);
        _126 = AlignOf([i32; 4]);
        _127 = alloc::alloc::exchange_malloc(move _125, move _126) -> [return: bb69, unwind: bb110];
    }

    bb69: {
        _128 = ShallowInitBox(move _127, [i32; 4]);
        _197 = (((_128.0: std::ptr::Unique<[i32; 4]>).0: std::ptr::NonNull<[i32; 4]>).0: *const [i32; 4]);
        _240 = _197 as *const () (PtrToPtr);
        _241 = _240 as usize (Transmute);
        _242 = AlignOf(i32);
        _243 = Sub(_242, const 1_usize);
        _244 = BitAnd(_241, _243);
        _245 = Eq(_244, const 0_usize);
        assert(_245, "misaligned pointer dereference: address must be a multiple of {} but is {}", _242, _241) -> [success: bb134, unwind unreachable];
    }

    bb70: {
        _122 = &_123;
        _114 = <Vec<i32> as PartialOrd>::le(move _115, move _122) -> [return: bb71, unwind: bb109];
    }

    bb71: {
        _113 = Not(move _114);
        drop(_123) -> [return: bb72, unwind: bb110];
    }

    bb72: {
        drop(_116) -> bb73;
    }

    bb73: {
        switchInt(move _113) -> [0: bb75, otherwise: bb74];
    }

    bb74: {
        _129 = core::panicking::panic(const "assertion failed: (vec![1, 2, 3] <= vec![1, 2, 3, 3])");
    }

    bb75: {
        _135 = SizeOf([i32; 4]);
        _136 = AlignOf([i32; 4]);
        _137 = alloc::alloc::exchange_malloc(move _135, move _136) -> bb76;
    }

    bb76: {
        _138 = ShallowInitBox(move _137, [i32; 4]);
        _198 = (((_138.0: std::ptr::Unique<[i32; 4]>).0: std::ptr::NonNull<[i32; 4]>).0: *const [i32; 4]);
        _234 = _198 as *const () (PtrToPtr);
        _235 = _234 as usize (Transmute);
        _236 = AlignOf(i32);
        _237 = Sub(_236, const 1_usize);
        _238 = BitAnd(_235, _237);
        _239 = Eq(_238, const 0_usize);
        assert(_239, "misaligned pointer dereference: address must be a multiple of {} but is {}", _236, _235) -> [success: bb133, unwind unreachable];
    }

    bb77: {
        _132 = &_133;
        _142 = SizeOf([i32; 3]);
        _143 = AlignOf([i32; 3]);
        _144 = alloc::alloc::exchange_malloc(move _142, move _143) -> [return: bb78, unwind: bb108];
    }

    bb78: {
        _145 = ShallowInitBox(move _144, [i32; 3]);
        _199 = (((_145.0: std::ptr::Unique<[i32; 3]>).0: std::ptr::NonNull<[i32; 3]>).0: *const [i32; 3]);
        _228 = _199 as *const () (PtrToPtr);
        _229 = _228 as usize (Transmute);
        _230 = AlignOf(i32);
        _231 = Sub(_230, const 1_usize);
        _232 = BitAnd(_229, _231);
        _233 = Eq(_232, const 0_usize);
        assert(_233, "misaligned pointer dereference: address must be a multiple of {} but is {}", _230, _229) -> [success: bb132, unwind unreachable];
    }

    bb79: {
        _139 = &_140;
        _131 = <Vec<i32> as PartialOrd>::gt(move _132, move _139) -> [return: bb80, unwind: bb107];
    }

    bb80: {
        _130 = Not(move _131);
        drop(_140) -> [return: bb81, unwind: bb108];
    }

    bb81: {
        drop(_133) -> bb82;
    }

    bb82: {
        switchInt(move _130) -> [0: bb84, otherwise: bb83];
    }

    bb83: {
        _146 = core::panicking::panic(const "assertion failed: (vec![1, 2, 3, 4] > vec![1, 2, 3])");
    }

    bb84: {
        _151 = SizeOf([i32; 3]);
        _152 = AlignOf([i32; 3]);
        _153 = alloc::alloc::exchange_malloc(move _151, move _152) -> bb85;
    }

    bb85: {
        _154 = ShallowInitBox(move _153, [i32; 3]);
        _200 = (((_154.0: std::ptr::Unique<[i32; 3]>).0: std::ptr::NonNull<[i32; 3]>).0: *const [i32; 3]);
        _222 = _200 as *const () (PtrToPtr);
        _223 = _222 as usize (Transmute);
        _224 = AlignOf(i32);
        _225 = Sub(_224, const 1_usize);
        _226 = BitAnd(_223, _225);
        _227 = Eq(_226, const 0_usize);
        assert(_227, "misaligned pointer dereference: address must be a multiple of {} but is {}", _224, _223) -> [success: bb131, unwind unreachable];
    }

    bb86: {
        _148 = &_149;
        _158 = SizeOf([i32; 3]);
        _159 = AlignOf([i32; 3]);
        _160 = alloc::alloc::exchange_malloc(move _158, move _159) -> [return: bb87, unwind: bb106];
    }

    bb87: {
        _161 = ShallowInitBox(move _160, [i32; 3]);
        _201 = (((_161.0: std::ptr::Unique<[i32; 3]>).0: std::ptr::NonNull<[i32; 3]>).0: *const [i32; 3]);
        _216 = _201 as *const () (PtrToPtr);
        _217 = _216 as usize (Transmute);
        _218 = AlignOf(i32);
        _219 = Sub(_218, const 1_usize);
        _220 = BitAnd(_217, _219);
        _221 = Eq(_220, const 0_usize);
        assert(_221, "misaligned pointer dereference: address must be a multiple of {} but is {}", _218, _217) -> [success: bb130, unwind unreachable];
    }

    bb88: {
        _155 = &_156;
        _147 = (move _148, move _155);
        _162 = (_147.0: &std::vec::Vec<i32>);
        _163 = (_147.1: &std::vec::Vec<i32>);
        _165 = <Vec<i32> as PartialEq>::eq(_162, _163) -> [return: bb89, unwind: bb105];
    }

    bb89: {
        _164 = Not(move _165);
        switchInt(move _164) -> [0: bb91, otherwise: bb90];
    }

    bb90: {
        _166 = core::panicking::AssertKind::Eq;
        _168 = Option::<Arguments<'_>>::None;
        _167 = core::panicking::assert_failed::<Vec<i32>, Vec<i32>>(move _166, _162, _163, move _168) -> bb105;
    }

    bb91: {
        drop(_156) -> [return: bb92, unwind: bb106];
    }

    bb92: {
        drop(_149) -> bb93;
    }

    bb93: {
        _174 = SizeOf([i32; 3]);
        _175 = AlignOf([i32; 3]);
        _176 = alloc::alloc::exchange_malloc(move _174, move _175) -> bb94;
    }

    bb94: {
        _177 = ShallowInitBox(move _176, [i32; 3]);
        _202 = (((_177.0: std::ptr::Unique<[i32; 3]>).0: std::ptr::NonNull<[i32; 3]>).0: *const [i32; 3]);
        _210 = _202 as *const () (PtrToPtr);
        _211 = _210 as usize (Transmute);
        _212 = AlignOf(i32);
        _213 = Sub(_212, const 1_usize);
        _214 = BitAnd(_211, _213);
        _215 = Eq(_214, const 0_usize);
        assert(_215, "misaligned pointer dereference: address must be a multiple of {} but is {}", _212, _211) -> [success: bb129, unwind unreachable];
    }

    bb95: {
        _171 = &_172;
        _181 = SizeOf([i32; 3]);
        _182 = AlignOf([i32; 3]);
        _183 = alloc::alloc::exchange_malloc(move _181, move _182) -> [return: bb96, unwind: bb104];
    }

    bb96: {
        _184 = ShallowInitBox(move _183, [i32; 3]);
        _203 = (((_184.0: std::ptr::Unique<[i32; 3]>).0: std::ptr::NonNull<[i32; 3]>).0: *const [i32; 3]);
        _204 = _203 as *const () (PtrToPtr);
        _205 = _204 as usize (Transmute);
        _206 = AlignOf(i32);
        _207 = Sub(_206, const 1_usize);
        _208 = BitAnd(_205, _207);
        _209 = Eq(_208, const 0_usize);
        assert(_209, "misaligned pointer dereference: address must be a multiple of {} but is {}", _206, _205) -> [success: bb128, unwind unreachable];
    }

    bb97: {
        _178 = &_179;
        _170 = <Vec<i32> as PartialEq>::ne(move _171, move _178) -> [return: bb98, unwind: bb103];
    }

    bb98: {
        _169 = Not(move _170);
        drop(_179) -> [return: bb99, unwind: bb104];
    }

    bb99: {
        drop(_172) -> bb100;
    }

    bb100: {
        switchInt(move _169) -> [0: bb102, otherwise: bb101];
    }

    bb101: {
        _185 = core::panicking::panic(const "assertion failed: (vec![1, 2, 3] != vec![1, 1, 3])");
    }

    bb102: {
        return;
    }

    bb103 (cleanup): {
        drop(_179) -> [return: bb104, unwind terminate];
    }

    bb104 (cleanup): {
        drop(_172) -> [return: bb127, unwind terminate];
    }

    bb105 (cleanup): {
        drop(_156) -> [return: bb106, unwind terminate];
    }

    bb106 (cleanup): {
        drop(_149) -> [return: bb127, unwind terminate];
    }

    bb107 (cleanup): {
        drop(_140) -> [return: bb108, unwind terminate];
    }

    bb108 (cleanup): {
        drop(_133) -> [return: bb127, unwind terminate];
    }

    bb109 (cleanup): {
        drop(_123) -> [return: bb110, unwind terminate];
    }

    bb110 (cleanup): {
        drop(_116) -> [return: bb127, unwind terminate];
    }

    bb111 (cleanup): {
        drop(_106) -> [return: bb112, unwind terminate];
    }

    bb112 (cleanup): {
        drop(_99) -> [return: bb127, unwind terminate];
    }

    bb113 (cleanup): {
        drop(_89) -> [return: bb114, unwind terminate];
    }

    bb114 (cleanup): {
        drop(_82) -> [return: bb127, unwind terminate];
    }

    bb115 (cleanup): {
        drop(_72) -> [return: bb116, unwind terminate];
    }

    bb116 (cleanup): {
        drop(_65) -> [return: bb127, unwind terminate];
    }

    bb117 (cleanup): {
        drop(_55) -> [return: bb118, unwind terminate];
    }

    bb118 (cleanup): {
        drop(_48) -> [return: bb127, unwind terminate];
    }

    bb119 (cleanup): {
        drop(_38) -> [return: bb120, unwind terminate];
    }

    bb120 (cleanup): {
        drop(_31) -> [return: bb127, unwind terminate];
    }

    bb121 (cleanup): {
        drop(_25) -> [return: bb122, unwind terminate];
    }

    bb122 (cleanup): {
        drop(_22) -> [return: bb127, unwind terminate];
    }

    bb123 (cleanup): {
        drop(_16) -> [return: bb124, unwind terminate];
    }

    bb124 (cleanup): {
        drop(_13) -> [return: bb127, unwind terminate];
    }

    bb125 (cleanup): {
        drop(_7) -> [return: bb126, unwind terminate];
    }

    bb126 (cleanup): {
        drop(_4) -> [return: bb127, unwind terminate];
    }

    bb127 (cleanup): {
        resume;
    }

    bb128: {
        (*_203) = [const 1_i32, const 1_i32, const 3_i32];
        _180 = move _184 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _179 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _180) -> [return: bb97, unwind: bb104];
    }

    bb129: {
        (*_202) = [const 1_i32, const 2_i32, const 3_i32];
        _173 = move _177 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _172 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _173) -> bb95;
    }

    bb130: {
        (*_201) = [const 1_i32, const 2_i32, const 3_i32];
        _157 = move _161 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _156 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _157) -> [return: bb88, unwind: bb106];
    }

    bb131: {
        (*_200) = [const 1_i32, const 2_i32, const 3_i32];
        _150 = move _154 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _149 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _150) -> bb86;
    }

    bb132: {
        (*_199) = [const 1_i32, const 2_i32, const 3_i32];
        _141 = move _145 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _140 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _141) -> [return: bb79, unwind: bb108];
    }

    bb133: {
        (*_198) = [const 1_i32, const 2_i32, const 3_i32, const 4_i32];
        _134 = move _138 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _133 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _134) -> bb77;
    }

    bb134: {
        (*_197) = [const 1_i32, const 2_i32, const 3_i32, const 3_i32];
        _124 = move _128 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _123 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _124) -> [return: bb70, unwind: bb110];
    }

    bb135: {
        (*_196) = [const 1_i32, const 2_i32, const 3_i32];
        _117 = move _121 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _116 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _117) -> bb68;
    }

    bb136: {
        (*_195) = [const 1_i32, const 2_i32, const 3_i32];
        _107 = move _111 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _106 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _107) -> [return: bb61, unwind: bb112];
    }

    bb137: {
        (*_194) = [const 1_i32, const 2_i32, const 3_i32];
        _100 = move _104 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _99 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _100) -> bb59;
    }

    bb138: {
        (*_193) = [const 1_i32, const 2_i32, const 4_i32, const 4_i32];
        _90 = move _94 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _89 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _90) -> [return: bb52, unwind: bb114];
    }

    bb139: {
        (*_192) = [const 1_i32, const 2_i32, const 3_i32, const 4_i32];
        _83 = move _87 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _82 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _83) -> bb50;
    }

    bb140: {
        (*_191) = [const 1_i32, const 2_i32, const 3_i32, const 4_i32];
        _73 = move _77 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _72 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _73) -> [return: bb43, unwind: bb116];
    }

    bb141: {
        (*_190) = [const 1_i32, const 2_i32, const 4_i32, const 4_i32];
        _66 = move _70 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _65 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _66) -> bb41;
    }

    bb142: {
        (*_189) = [const 1_i32, const 2_i32, const 3_i32, const 4_i32];
        _56 = move _60 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _55 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _56) -> [return: bb34, unwind: bb118];
    }

    bb143: {
        (*_188) = [const 1_i32, const 2_i32, const 3_i32];
        _49 = move _53 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _48 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _49) -> bb32;
    }

    bb144: {
        (*_187) = [const 1_i32, const 2_i32, const 3_i32];
        _39 = move _43 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _38 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _39) -> [return: bb25, unwind: bb120];
    }

    bb145: {
        (*_186) = [const 1_i32, const 2_i32, const 3_i32, const 4_i32];
        _32 = move _36 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _31 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _32) -> bb23;
    }
}
