// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: &str;
    let mut _3: *const &str;
    let _4: &&str;
    let mut _5: (&&str, &&str);
    let mut _6: &&str;
    let mut _7: &&str;
    let _8: &str;
    let mut _11: bool;
    let mut _12: bool;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let _16: ();
    let mut _17: *mut &str;
    let mut _18: &mut &str;
    let mut _19: (&&str, &&str);
    let mut _20: &&str;
    let mut _21: &&str;
    let _22: &str;
    let mut _25: bool;
    let mut _26: bool;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        scope 2 {
            let _2: &str;
            scope 3 {
                debug a => _2;
                let _9: &&str;
                let _10: &&str;
                let _23: &&str;
                let _24: &&str;
                scope 4 {
                    debug left_val => _9;
                    debug right_val => _10;
                    let _13: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _13;
                    }
                }
                scope 6 {
                    debug left_val => _23;
                    debug right_val => _24;
                    let _27: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _27;
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const "test";
        _4 = &_1;
        _3 = &raw const (*_4);
        _2 = read_volatile::<&str>(move _3) -> bb1;
    }

    bb1: {
        _6 = &_2;
        _8 = const "test";
        _7 = &_8;
        _5 = (move _6, move _7);
        _9 = (_5.0: &&str);
        _10 = (_5.1: &&str);
        _12 = <&str as PartialEq>::eq(_9, _10) -> bb2;
    }

    bb2: {
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<&str, &str>(move _13, _9, _10, move _15);
    }

    bb4: {
        _18 = &mut _1;
        _17 = &raw mut (*_18);
        _16 = write_volatile::<&str>(move _17, const "foo") -> bb5;
    }

    bb5: {
        _20 = &_1;
        _22 = const "foo";
        _21 = &_22;
        _19 = (move _20, move _21);
        _23 = (_19.0: &&str);
        _24 = (_19.1: &&str);
        _26 = <&str as PartialEq>::eq(_23, _24) -> bb6;
    }

    bb6: {
        _25 = Not(move _26);
        switchInt(move _25) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<&str, &str>(move _27, _23, _24, move _29);
    }

    bb8: {
        return;
    }
}
