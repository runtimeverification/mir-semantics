// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test_clone(_1: T) -> () {
    debug arg => _1;
    let mut _0: ();
    let mut _2: T;
    let mut _3: &T;
    scope 1 {
    }

    bb0: {
        _3 = &_1;
        _2 = <T as Clone>::clone(move _3) -> [return: bb1, unwind: bb4];
    }

    bb1: {
        drop(_2) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_1) -> bb3;
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_1) -> [return: bb5, unwind terminate];
    }

    bb5 (cleanup): {
        resume;
    }
}

fn foo() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/stdlib-unit-tests/builtin-clone.rs:12:10: 12:15>::fmt(_1: &S, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&i32;
    let _6: &i32;

    bb0: {
        _3 = const "S";
        _6 = &((*_1).0: i32);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/stdlib-unit-tests/builtin-clone.rs:12:17: 12:26>::eq(_1: &S, _2: &S) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: i32;
    let mut _4: i32;

    bb0: {
        _3 = ((*_1).0: i32);
        _4 = ((*_2).0: i32);
        _0 = Eq(move _3, move _4);
        return;
    }
}

fn <impl at ui/stdlib-unit-tests/builtin-clone.rs:12:28: 12:30>::assert_receiver_is_total_eq(_1: &S) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn <impl at ui/stdlib-unit-tests/builtin-clone.rs:15:1: 15:17>::clone(_1: &S) -> S {
    debug self => _1;
    let mut _0: S;
    let mut _2: i32;
    let mut _3: i32;

    bb0: {
        _3 = ((*_1).0: i32);
        _2 = Add(move _3, const 1_i32);
        _0 = S(move _2);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let mut _3: [i32; 56];
    let _4: ();
    let mut _5: (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32);
    let _6: [S; 3];
    let mut _7: S;
    let mut _8: S;
    let mut _9: S;
    let mut _11: S;
    let mut _12: S;
    let mut _13: S;
    let mut _14: (&[S; 3], &[S; 3]);
    let mut _15: &[S; 3];
    let mut _16: &[S; 3];
    let _17: [S; 3];
    let mut _18: &[S; 3];
    let mut _21: bool;
    let mut _22: bool;
    let _24: !;
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _27: (S, S);
    let mut _28: S;
    let mut _29: S;
    let mut _30: ((S, S, S), S);
    let mut _31: (S, S, S);
    let mut _32: S;
    let mut _33: S;
    let mut _34: S;
    let mut _35: S;
    let mut _37: (S, S);
    let mut _38: S;
    let mut _39: S;
    let mut _40: ((S, S, S), S);
    let mut _41: (S, S, S);
    let mut _42: S;
    let mut _43: S;
    let mut _44: S;
    let mut _45: S;
    let mut _46: (&((S, S), ((S, S, S), S)), &((S, S), ((S, S, S), S)));
    let mut _47: &((S, S), ((S, S, S), S));
    let mut _48: &((S, S), ((S, S, S), S));
    let _49: ((S, S), ((S, S, S), S));
    let mut _50: &((S, S), ((S, S, S), S));
    let mut _53: bool;
    let mut _54: bool;
    let _56: !;
    let mut _57: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug a => _6;
        let _10: [S; 3];
        scope 2 {
            debug b => _10;
            let _19: &[S; 3];
            let _20: &[S; 3];
            let _26: ((S, S), ((S, S, S), S));
            scope 3 {
                debug left_val => _19;
                debug right_val => _20;
                let _23: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _23;
                }
            }
            scope 5 {
                debug a => _26;
                let _36: ((S, S), ((S, S, S), S));
                scope 6 {
                    debug b => _36;
                    let _51: &((S, S), ((S, S, S), S));
                    let _52: &((S, S), ((S, S, S), S));
                    scope 7 {
                        debug left_val => _51;
                        debug right_val => _52;
                        let _55: core::panicking::AssertKind;
                        scope 8 {
                            debug kind => _55;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = test_clone::<fn() {foo}>(foo) -> bb1;
    }

    bb1: {
        _3 = [const 1_i32; 56];
        _2 = test_clone::<[i32; 56]>(move _3) -> bb2;
    }

    bb2: {
        _5 = (const 1_i32, const 1_i32, const 1_i32, const 1_i32, const 1_i32, const 1_i32, const 1_i32, const 1_i32, const 1_i32, const 1_i32, const 1_i32, const 1_i32, const 1_i32, const 1_i32, const 1_i32, const 1_i32, const 1_i32);
        _4 = test_clone::<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>(move _5) -> bb3;
    }

    bb3: {
        _7 = S(const 0_i32);
        _8 = S(const 1_i32);
        _9 = S(const 2_i32);
        _6 = [move _7, move _8, move _9];
        _11 = S(const 1_i32);
        _12 = S(const 2_i32);
        _13 = S(const 3_i32);
        _10 = [move _11, move _12, move _13];
        _15 = &_10;
        _18 = &_6;
        _17 = <[S; 3] as Clone>::clone(move _18) -> bb4;
    }

    bb4: {
        _16 = &_17;
        _14 = (move _15, move _16);
        _19 = (_14.0: &[S; 3]);
        _20 = (_14.1: &[S; 3]);
        _22 = <[S; 3] as PartialEq>::eq(_19, _20) -> bb5;
    }

    bb5: {
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _23 = core::panicking::AssertKind::Eq;
        _25 = Option::<Arguments<'_>>::None;
        _24 = core::panicking::assert_failed::<[S; 3], [S; 3]>(move _23, _19, _20, move _25);
    }

    bb7: {
        _28 = S(const 1_i32);
        _29 = S(const 0_i32);
        _27 = (move _28, move _29);
        _32 = S(const 0_i32);
        _33 = S(const 0_i32);
        _34 = S(const 1_i32);
        _31 = (move _32, move _33, move _34);
        _35 = S(const 0_i32);
        _30 = (move _31, move _35);
        _26 = (move _27, move _30);
        _38 = S(const 2_i32);
        _39 = S(const 1_i32);
        _37 = (move _38, move _39);
        _42 = S(const 1_i32);
        _43 = S(const 1_i32);
        _44 = S(const 2_i32);
        _41 = (move _42, move _43, move _44);
        _45 = S(const 1_i32);
        _40 = (move _41, move _45);
        _36 = (move _37, move _40);
        _47 = &_36;
        _50 = &_26;
        _49 = <((S, S), ((S, S, S), S)) as Clone>::clone(move _50) -> bb8;
    }

    bb8: {
        _48 = &_49;
        _46 = (move _47, move _48);
        _51 = (_46.0: &((S, S), ((S, S, S), S)));
        _52 = (_46.1: &((S, S), ((S, S, S), S)));
        _54 = <((S, S), ((S, S, S), S)) as PartialEq>::eq(_51, _52) -> bb9;
    }

    bb9: {
        _53 = Not(move _54);
        switchInt(move _53) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _55 = core::panicking::AssertKind::Eq;
        _57 = Option::<Arguments<'_>>::None;
        _56 = core::panicking::assert_failed::<((S, S), ((S, S, S), S)), ((S, S), ((S, S, S), S))>(move _55, _51, _52, move _57);
    }

    bb11: {
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 56_usize;
        return;
    }
}

fn S(_1: i32) -> S {
    let mut _0: S;

    bb0: {
        _0 = S(move _1);
        return;
    }
}

// MIR FOR CTFE
fn S(_1: i32) -> S {
    let mut _0: S;

    bb0: {
        _0 = S(move _1);
        return;
    }
}
