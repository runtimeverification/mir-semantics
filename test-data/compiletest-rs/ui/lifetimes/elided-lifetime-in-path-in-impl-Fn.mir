// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn with_fn() -> for<'a> fn(Foo<'a>) {
    let mut _0: for<'a> fn(Foo<'a>);

    bb0: {
        _0 = const ZeroSized: [closure@ui/lifetimes/elided-lifetime-in-path-in-impl-Fn.rs:6:5: 6:8] as for<'a> fn(Foo<'a>) (Pointer(ClosureFnPointer(Normal)));
        return;
    }
}

fn with_fn::{closure#0}(_1: &[closure@ui/lifetimes/elided-lifetime-in-path-in-impl-Fn.rs:6:5: 6:8], _2: Foo<'_>) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn with_impl_fn() -> impl for<'a> Fn(Foo<'a>) {
    let mut _0: impl for<'a> Fn(Foo<'a>);

    bb0: {
        return;
    }
}

fn with_impl_fn::{closure#0}(_1: &[closure@ui/lifetimes/elided-lifetime-in-path-in-impl-Fn.rs:10:5: 10:8], _2: Foo<'_>) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn with_where_fn() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn Foo(_1: &()) -> Foo<'_> {
    let mut _0: Foo<'_>;

    bb0: {
        _0 = Foo::<'_>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: &()) -> Foo<'_> {
    let mut _0: Foo<'_>;

    bb0: {
        _0 = Foo::<'_>(move _1);
        return;
    }
}
