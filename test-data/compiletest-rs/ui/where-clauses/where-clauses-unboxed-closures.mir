// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn warm_up(_1: F) -> () {
    debug f => _1;
    let mut _0: ();

    bb0: {
        drop(_1) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();

    bb0: {
        _1 = warm_up::<'_, [closure@ui/where-clauses/where-clauses-unboxed-closures.rs:13:13: 13:30]>(const ZeroSized: [closure@ui/where-clauses/where-clauses-unboxed-closures.rs:13:13: 13:30]) -> bb1;
    }

    bb1: {
        _2 = warm_up::<'_, [closure@ui/where-clauses/where-clauses-unboxed-closures.rs:16:13: 16:16]>(const ZeroSized: [closure@ui/where-clauses/where-clauses-unboxed-closures.rs:16:13: 16:16]) -> bb2;
    }

    bb2: {
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/where-clauses/where-clauses-unboxed-closures.rs:13:13: 13:30], _2: &mut Bencher) -> () {
    debug b => _2;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main::{closure#1}(_1: &[closure@ui/where-clauses/where-clauses-unboxed-closures.rs:16:13: 16:16], _2: &mut Bencher) -> () {
    debug b => _2;
    let mut _0: ();

    bb0: {
        return;
    }
}
