// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/dynamically-sized-types/dst-raw.rs:14:1: 14:17>::foo(_1: &A) -> isize {
    debug self => _1;
    let mut _0: isize;

    bb0: {
        _0 = ((*_1).0: isize);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: A;
    let mut _3: *const A;
    let _4: &A;
    let _6: &dyn Trait;
    let mut _7: (&isize, &isize);
    let mut _8: &isize;
    let mut _9: &isize;
    let _10: isize;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: isize;
    let mut _16: isize;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: A;
    let mut _23: *const Foo<A>;
    let _24: &Foo<A>;
    let mut _26: &dyn Trait;
    let _27: &Foo<dyn Trait>;
    let mut _28: (&isize, &isize);
    let mut _29: &isize;
    let mut _30: &isize;
    let _31: isize;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: isize;
    let mut _37: isize;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _42: A;
    let mut _44: *const (A,);
    let _45: &(A,);
    let mut _47: &dyn Trait;
    let _48: &(dyn Trait,);
    let mut _49: (&isize, &isize);
    let mut _50: &isize;
    let mut _51: &isize;
    let _52: isize;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: isize;
    let mut _58: isize;
    let _60: !;
    let mut _61: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _63: *const [i32; 3];
    let _64: &[i32; 3];
    let _65: [i32; 3];
    let _67: usize;
    let mut _68: usize;
    let mut _69: bool;
    let mut _70: (&i32, &i32);
    let mut _71: &i32;
    let mut _72: &i32;
    let _73: i32;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: i32;
    let mut _79: i32;
    let _81: !;
    let mut _82: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _84: &[i32];
    let mut _85: (&usize, &usize);
    let mut _86: &usize;
    let mut _87: &usize;
    let _88: usize;
    let mut _91: bool;
    let mut _92: bool;
    let mut _93: usize;
    let mut _94: usize;
    let _96: !;
    let mut _97: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _99: *const [i32; 3];
    let _100: &[i32; 3];
    let _101: [i32; 3];
    let _103: usize;
    let mut _104: usize;
    let mut _105: bool;
    let mut _106: (&i32, &i32);
    let mut _107: &i32;
    let mut _108: &i32;
    let _109: i32;
    let mut _112: bool;
    let mut _113: bool;
    let mut _114: i32;
    let mut _115: i32;
    let _117: !;
    let mut _118: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _120: &[i32];
    let mut _121: (&usize, &usize);
    let mut _122: &usize;
    let mut _123: &usize;
    let _124: usize;
    let mut _127: bool;
    let mut _128: bool;
    let mut _129: usize;
    let mut _130: usize;
    let _132: !;
    let mut _133: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _135: *const Foo<[i32; 3]>;
    let _136: &Foo<[i32; 3]>;
    let _137: Foo<[i32; 3]>;
    let mut _138: [i32; 3];
    let mut _140: &Foo<[i32]>;
    let _141: usize;
    let mut _142: usize;
    let mut _143: bool;
    let mut _144: (&i32, &i32);
    let mut _145: &i32;
    let mut _146: &i32;
    let _147: i32;
    let mut _150: bool;
    let mut _151: bool;
    let mut _152: i32;
    let mut _153: i32;
    let _155: !;
    let mut _156: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _158: &[i32];
    let _159: &Foo<[i32]>;
    let mut _160: (&usize, &usize);
    let mut _161: &usize;
    let mut _162: &usize;
    let _163: usize;
    let mut _166: bool;
    let mut _167: bool;
    let mut _168: usize;
    let mut _169: usize;
    let _171: !;
    let mut _172: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _174: *const ([i32; 3],);
    let _175: &([i32; 3],);
    let _176: ([i32; 3],);
    let mut _177: [i32; 3];
    let mut _179: &([i32],);
    let _180: usize;
    let mut _181: usize;
    let mut _182: bool;
    let mut _183: (&i32, &i32);
    let mut _184: &i32;
    let mut _185: &i32;
    let _186: i32;
    let mut _189: bool;
    let mut _190: bool;
    let mut _191: i32;
    let mut _192: i32;
    let _194: !;
    let mut _195: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _197: &[i32];
    let _198: &([i32],);
    let mut _199: (&usize, &usize);
    let mut _200: &usize;
    let mut _201: &usize;
    let _202: usize;
    let mut _205: bool;
    let mut _206: bool;
    let mut _207: usize;
    let mut _208: usize;
    let _210: !;
    let mut _211: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _214: *mut A;
    let mut _215: &mut A;
    let _217: &dyn Trait;
    let mut _218: (&isize, &isize);
    let mut _219: &isize;
    let mut _220: &isize;
    let _221: isize;
    let mut _224: bool;
    let mut _225: bool;
    let mut _226: isize;
    let mut _227: isize;
    let _229: !;
    let mut _230: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _232: A;
    let mut _234: *mut Foo<A>;
    let mut _235: &mut Foo<A>;
    let mut _237: &dyn Trait;
    let _238: &Foo<dyn Trait>;
    let mut _239: (&isize, &isize);
    let mut _240: &isize;
    let mut _241: &isize;
    let _242: isize;
    let mut _245: bool;
    let mut _246: bool;
    let mut _247: isize;
    let mut _248: isize;
    let _250: !;
    let mut _251: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _253: A;
    let mut _255: *mut (A,);
    let mut _256: &mut (A,);
    let mut _258: &dyn Trait;
    let _259: &(dyn Trait,);
    let mut _260: (&isize, &isize);
    let mut _261: &isize;
    let mut _262: &isize;
    let _263: isize;
    let mut _266: bool;
    let mut _267: bool;
    let mut _268: isize;
    let mut _269: isize;
    let _271: !;
    let mut _272: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _274: *mut [i32; 3];
    let mut _275: &mut [i32; 3];
    let mut _276: [i32; 3];
    let _278: usize;
    let mut _279: usize;
    let mut _280: bool;
    let mut _281: (&i32, &i32);
    let mut _282: &i32;
    let mut _283: &i32;
    let _284: i32;
    let mut _287: bool;
    let mut _288: bool;
    let mut _289: i32;
    let mut _290: i32;
    let _292: !;
    let mut _293: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _295: &[i32];
    let mut _296: (&usize, &usize);
    let mut _297: &usize;
    let mut _298: &usize;
    let _299: usize;
    let mut _302: bool;
    let mut _303: bool;
    let mut _304: usize;
    let mut _305: usize;
    let _307: !;
    let mut _308: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _310: *mut [i32; 3];
    let mut _311: &mut [i32; 3];
    let mut _312: [i32; 3];
    let _314: usize;
    let mut _315: usize;
    let mut _316: bool;
    let mut _317: (&i32, &i32);
    let mut _318: &i32;
    let mut _319: &i32;
    let _320: i32;
    let mut _323: bool;
    let mut _324: bool;
    let mut _325: i32;
    let mut _326: i32;
    let _328: !;
    let mut _329: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _331: &[i32];
    let mut _332: (&usize, &usize);
    let mut _333: &usize;
    let mut _334: &usize;
    let _335: usize;
    let mut _338: bool;
    let mut _339: bool;
    let mut _340: usize;
    let mut _341: usize;
    let _343: !;
    let mut _344: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _346: *mut Foo<[i32; 3]>;
    let mut _347: &mut Foo<[i32; 3]>;
    let mut _348: Foo<[i32; 3]>;
    let mut _349: [i32; 3];
    let mut _351: &Foo<[i32]>;
    let _352: usize;
    let mut _353: usize;
    let mut _354: bool;
    let mut _355: (&i32, &i32);
    let mut _356: &i32;
    let mut _357: &i32;
    let _358: i32;
    let mut _361: bool;
    let mut _362: bool;
    let mut _363: i32;
    let mut _364: i32;
    let _366: !;
    let mut _367: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _369: &[i32];
    let _370: &Foo<[i32]>;
    let mut _371: (&usize, &usize);
    let mut _372: &usize;
    let mut _373: &usize;
    let _374: usize;
    let mut _377: bool;
    let mut _378: bool;
    let mut _379: usize;
    let mut _380: usize;
    let _382: !;
    let mut _383: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _385: *mut ([i32; 3],);
    let mut _386: &mut ([i32; 3],);
    let mut _387: ([i32; 3],);
    let mut _388: [i32; 3];
    let mut _390: &([i32],);
    let _391: usize;
    let mut _392: usize;
    let mut _393: bool;
    let mut _394: (&i32, &i32);
    let mut _395: &i32;
    let mut _396: &i32;
    let _397: i32;
    let mut _400: bool;
    let mut _401: bool;
    let mut _402: i32;
    let mut _403: i32;
    let _405: !;
    let mut _406: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _408: &[i32];
    let _409: &([i32],);
    let mut _410: (&usize, &usize);
    let mut _411: &usize;
    let mut _412: &usize;
    let _413: usize;
    let mut _416: bool;
    let mut _417: bool;
    let mut _418: usize;
    let mut _419: usize;
    let _421: !;
    let mut _422: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _2: *const dyn Trait;
        scope 2 {
            debug z => _2;
            let _5: isize;
            scope 3 {
                debug r => _5;
                let _11: &isize;
                let _12: &isize;
                let _20: Foo<A>;
                scope 5 {
                    debug left_val => _11;
                    debug right_val => _12;
                    let _17: core::panicking::AssertKind;
                    scope 6 {
                        debug kind => _17;
                    }
                }
                scope 7 {
                    debug p => _20;
                    let _22: *const Foo<dyn Trait>;
                    scope 8 {
                        debug o => _22;
                        let _25: isize;
                        scope 9 {
                            debug r => _25;
                            let _32: &isize;
                            let _33: &isize;
                            let _41: (A,);
                            scope 11 {
                                debug left_val => _32;
                                debug right_val => _33;
                                let _38: core::panicking::AssertKind;
                                scope 12 {
                                    debug kind => _38;
                                }
                            }
                            scope 13 {
                                debug p => _41;
                                let _43: *const (dyn Trait,);
                                scope 14 {
                                    debug o => _43;
                                    let _46: isize;
                                    scope 15 {
                                        debug r => _46;
                                        let _53: &isize;
                                        let _54: &isize;
                                        let _62: *const [i32];
                                        scope 17 {
                                            debug left_val => _53;
                                            debug right_val => _54;
                                            let _59: core::panicking::AssertKind;
                                            scope 18 {
                                                debug kind => _59;
                                            }
                                        }
                                        scope 19 {
                                            debug a => _62;
                                            let _98: *const [i32];
                                            scope 20 {
                                                let _66: i32;
                                                let mut _483: *const ();
                                                let mut _484: usize;
                                                let mut _485: usize;
                                                let mut _486: usize;
                                                let mut _487: usize;
                                                let mut _488: bool;
                                                let mut _489: *const ();
                                                let mut _490: usize;
                                                let mut _491: usize;
                                                let mut _492: usize;
                                                let mut _493: usize;
                                                let mut _494: bool;
                                                scope 21 {
                                                    debug b => _66;
                                                    let _74: &i32;
                                                    let _75: &i32;
                                                    let _83: usize;
                                                    let mut _477: *const ();
                                                    let mut _478: usize;
                                                    let mut _479: usize;
                                                    let mut _480: usize;
                                                    let mut _481: usize;
                                                    let mut _482: bool;
                                                    scope 22 {
                                                        debug left_val => _74;
                                                        debug right_val => _75;
                                                        let _80: core::panicking::AssertKind;
                                                        scope 23 {
                                                            debug kind => _80;
                                                        }
                                                    }
                                                    scope 24 {
                                                        debug len => _83;
                                                        let _89: &usize;
                                                        let _90: &usize;
                                                        scope 25 {
                                                            debug left_val => _89;
                                                            debug right_val => _90;
                                                            let _95: core::panicking::AssertKind;
                                                            scope 26 {
                                                                debug kind => _95;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            scope 27 {
                                                debug a => _98;
                                                let _134: *const Foo<[i32]>;
                                                scope 28 {
                                                    let _102: i32;
                                                    let mut _465: *const ();
                                                    let mut _466: usize;
                                                    let mut _467: usize;
                                                    let mut _468: usize;
                                                    let mut _469: usize;
                                                    let mut _470: bool;
                                                    let mut _471: *const ();
                                                    let mut _472: usize;
                                                    let mut _473: usize;
                                                    let mut _474: usize;
                                                    let mut _475: usize;
                                                    let mut _476: bool;
                                                    scope 29 {
                                                        debug b => _102;
                                                        let _110: &i32;
                                                        let _111: &i32;
                                                        let _119: usize;
                                                        let mut _459: *const ();
                                                        let mut _460: usize;
                                                        let mut _461: usize;
                                                        let mut _462: usize;
                                                        let mut _463: usize;
                                                        let mut _464: bool;
                                                        scope 30 {
                                                            debug left_val => _110;
                                                            debug right_val => _111;
                                                            let _116: core::panicking::AssertKind;
                                                            scope 31 {
                                                                debug kind => _116;
                                                            }
                                                        }
                                                        scope 32 {
                                                            debug len => _119;
                                                            let _125: &usize;
                                                            let _126: &usize;
                                                            scope 33 {
                                                                debug left_val => _125;
                                                                debug right_val => _126;
                                                                let _131: core::panicking::AssertKind;
                                                                scope 34 {
                                                                    debug kind => _131;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                scope 35 {
                                                    debug c => _134;
                                                    let _173: *const ([i32],);
                                                    scope 36 {
                                                        let _139: i32;
                                                        scope 37 {
                                                            debug b => _139;
                                                            let _148: &i32;
                                                            let _149: &i32;
                                                            let _157: usize;
                                                            scope 38 {
                                                                debug left_val => _148;
                                                                debug right_val => _149;
                                                                let _154: core::panicking::AssertKind;
                                                                scope 39 {
                                                                    debug kind => _154;
                                                                }
                                                            }
                                                            scope 40 {
                                                                debug len => _157;
                                                                let _164: &usize;
                                                                let _165: &usize;
                                                                scope 41 {
                                                                    debug left_val => _164;
                                                                    debug right_val => _165;
                                                                    let _170: core::panicking::AssertKind;
                                                                    scope 42 {
                                                                        debug kind => _170;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    scope 43 {
                                                        debug c => _173;
                                                        let mut _212: A;
                                                        scope 44 {
                                                            let _178: i32;
                                                            scope 45 {
                                                                debug b => _178;
                                                                let _187: &i32;
                                                                let _188: &i32;
                                                                let _196: usize;
                                                                scope 46 {
                                                                    debug left_val => _187;
                                                                    debug right_val => _188;
                                                                    let _193: core::panicking::AssertKind;
                                                                    scope 47 {
                                                                        debug kind => _193;
                                                                    }
                                                                }
                                                                scope 48 {
                                                                    debug len => _196;
                                                                    let _203: &usize;
                                                                    let _204: &usize;
                                                                    scope 49 {
                                                                        debug left_val => _203;
                                                                        debug right_val => _204;
                                                                        let _209: core::panicking::AssertKind;
                                                                        scope 50 {
                                                                            debug kind => _209;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        scope 51 {
                                                            debug x => _212;
                                                            let _213: *mut dyn Trait;
                                                            scope 52 {
                                                                debug z => _213;
                                                                let _216: isize;
                                                                scope 53 {
                                                                    debug r => _216;
                                                                    let _222: &isize;
                                                                    let _223: &isize;
                                                                    let mut _231: Foo<A>;
                                                                    scope 55 {
                                                                        debug left_val => _222;
                                                                        debug right_val => _223;
                                                                        let _228: core::panicking::AssertKind;
                                                                        scope 56 {
                                                                            debug kind => _228;
                                                                        }
                                                                    }
                                                                    scope 57 {
                                                                        debug p => _231;
                                                                        let _233: *mut Foo<dyn Trait>;
                                                                        scope 58 {
                                                                            debug o => _233;
                                                                            let _236: isize;
                                                                            scope 59 {
                                                                                debug r => _236;
                                                                                let _243: &isize;
                                                                                let _244: &isize;
                                                                                let mut _252: (A,);
                                                                                scope 61 {
                                                                                    debug left_val => _243;
                                                                                    debug right_val => _244;
                                                                                    let _249: core::panicking::AssertKind;
                                                                                    scope 62 {
                                                                                        debug kind => _249;
                                                                                    }
                                                                                }
                                                                                scope 63 {
                                                                                    debug p => _252;
                                                                                    let _254: *mut (dyn Trait,);
                                                                                    scope 64 {
                                                                                        debug o => _254;
                                                                                        let _257: isize;
                                                                                        scope 65 {
                                                                                            debug r => _257;
                                                                                            let _264: &isize;
                                                                                            let _265: &isize;
                                                                                            let _273: *mut [i32];
                                                                                            scope 67 {
                                                                                                debug left_val => _264;
                                                                                                debug right_val => _265;
                                                                                                let _270: core::panicking::AssertKind;
                                                                                                scope 68 {
                                                                                                    debug kind => _270;
                                                                                                }
                                                                                            }
                                                                                            scope 69 {
                                                                                                debug a => _273;
                                                                                                let _309: *mut [i32];
                                                                                                scope 70 {
                                                                                                    let _277: i32;
                                                                                                    let mut _447: *const ();
                                                                                                    let mut _448: usize;
                                                                                                    let mut _449: usize;
                                                                                                    let mut _450: usize;
                                                                                                    let mut _451: usize;
                                                                                                    let mut _452: bool;
                                                                                                    let mut _453: *const ();
                                                                                                    let mut _454: usize;
                                                                                                    let mut _455: usize;
                                                                                                    let mut _456: usize;
                                                                                                    let mut _457: usize;
                                                                                                    let mut _458: bool;
                                                                                                    scope 71 {
                                                                                                        debug b => _277;
                                                                                                        let _285: &i32;
                                                                                                        let _286: &i32;
                                                                                                        let _294: usize;
                                                                                                        let mut _441: *const ();
                                                                                                        let mut _442: usize;
                                                                                                        let mut _443: usize;
                                                                                                        let mut _444: usize;
                                                                                                        let mut _445: usize;
                                                                                                        let mut _446: bool;
                                                                                                        scope 72 {
                                                                                                            debug left_val => _285;
                                                                                                            debug right_val => _286;
                                                                                                            let _291: core::panicking::AssertKind;
                                                                                                            scope 73 {
                                                                                                                debug kind => _291;
                                                                                                            }
                                                                                                        }
                                                                                                        scope 74 {
                                                                                                            debug len => _294;
                                                                                                            let _300: &usize;
                                                                                                            let _301: &usize;
                                                                                                            scope 75 {
                                                                                                                debug left_val => _300;
                                                                                                                debug right_val => _301;
                                                                                                                let _306: core::panicking::AssertKind;
                                                                                                                scope 76 {
                                                                                                                    debug kind => _306;
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                scope 77 {
                                                                                                    debug a => _309;
                                                                                                    let _345: *mut Foo<[i32]>;
                                                                                                    scope 78 {
                                                                                                        let _313: i32;
                                                                                                        let mut _429: *const ();
                                                                                                        let mut _430: usize;
                                                                                                        let mut _431: usize;
                                                                                                        let mut _432: usize;
                                                                                                        let mut _433: usize;
                                                                                                        let mut _434: bool;
                                                                                                        let mut _435: *const ();
                                                                                                        let mut _436: usize;
                                                                                                        let mut _437: usize;
                                                                                                        let mut _438: usize;
                                                                                                        let mut _439: usize;
                                                                                                        let mut _440: bool;
                                                                                                        scope 79 {
                                                                                                            debug b => _313;
                                                                                                            let _321: &i32;
                                                                                                            let _322: &i32;
                                                                                                            let _330: usize;
                                                                                                            let mut _423: *const ();
                                                                                                            let mut _424: usize;
                                                                                                            let mut _425: usize;
                                                                                                            let mut _426: usize;
                                                                                                            let mut _427: usize;
                                                                                                            let mut _428: bool;
                                                                                                            scope 80 {
                                                                                                                debug left_val => _321;
                                                                                                                debug right_val => _322;
                                                                                                                let _327: core::panicking::AssertKind;
                                                                                                                scope 81 {
                                                                                                                    debug kind => _327;
                                                                                                                }
                                                                                                            }
                                                                                                            scope 82 {
                                                                                                                debug len => _330;
                                                                                                                let _336: &usize;
                                                                                                                let _337: &usize;
                                                                                                                scope 83 {
                                                                                                                    debug left_val => _336;
                                                                                                                    debug right_val => _337;
                                                                                                                    let _342: core::panicking::AssertKind;
                                                                                                                    scope 84 {
                                                                                                                        debug kind => _342;
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    scope 85 {
                                                                                                        debug c => _345;
                                                                                                        let _384: *mut ([i32],);
                                                                                                        scope 86 {
                                                                                                            let _350: i32;
                                                                                                            scope 87 {
                                                                                                                debug b => _350;
                                                                                                                let _359: &i32;
                                                                                                                let _360: &i32;
                                                                                                                let _368: usize;
                                                                                                                scope 88 {
                                                                                                                    debug left_val => _359;
                                                                                                                    debug right_val => _360;
                                                                                                                    let _365: core::panicking::AssertKind;
                                                                                                                    scope 89 {
                                                                                                                        debug kind => _365;
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 90 {
                                                                                                                    debug len => _368;
                                                                                                                    let _375: &usize;
                                                                                                                    let _376: &usize;
                                                                                                                    scope 91 {
                                                                                                                        debug left_val => _375;
                                                                                                                        debug right_val => _376;
                                                                                                                        let _381: core::panicking::AssertKind;
                                                                                                                        scope 92 {
                                                                                                                            debug kind => _381;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        scope 93 {
                                                                                                            debug c => _384;
                                                                                                            scope 94 {
                                                                                                                let _389: i32;
                                                                                                                scope 95 {
                                                                                                                    debug b => _389;
                                                                                                                    let _398: &i32;
                                                                                                                    let _399: &i32;
                                                                                                                    let _407: usize;
                                                                                                                    scope 96 {
                                                                                                                        debug left_val => _398;
                                                                                                                        debug right_val => _399;
                                                                                                                        let _404: core::panicking::AssertKind;
                                                                                                                        scope 97 {
                                                                                                                            debug kind => _404;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 98 {
                                                                                                                        debug len => _407;
                                                                                                                        let _414: &usize;
                                                                                                                        let _415: &usize;
                                                                                                                        scope 99 {
                                                                                                                            debug left_val => _414;
                                                                                                                            debug right_val => _415;
                                                                                                                            let _420: core::panicking::AssertKind;
                                                                                                                            scope 100 {
                                                                                                                                debug kind => _420;
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 66 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 60 {
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                scope 54 {
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    scope 16 {
                                    }
                                }
                            }
                        }
                        scope 10 {
                        }
                    }
                }
            }
            scope 4 {
            }
        }
    }

    bb0: {
        _1 = A { f: const 42_isize };
        _4 = &_1;
        _3 = &raw const (*_4);
        _2 = move _3 as *const dyn Trait (Pointer(Unsize));
        _6 = &(*_2);
        _5 = <dyn Trait as Trait>::foo(_6) -> bb1;
    }

    bb1: {
        _8 = &_5;
        _10 = const 42_isize;
        _9 = &_10;
        _7 = (move _8, move _9);
        _11 = (_7.0: &isize);
        _12 = (_7.1: &isize);
        _15 = (*_11);
        _16 = (*_12);
        _14 = Eq(move _15, move _16);
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<isize, isize>(move _17, _11, _12, move _19);
    }

    bb3: {
        _21 = A { f: const 42_isize };
        _20 = Foo::<A> { f: move _21 };
        _24 = &_20;
        _23 = &raw const (*_24);
        _22 = move _23 as *const Foo<dyn Trait> (Pointer(Unsize));
        _27 = &(*_22);
        _26 = &((*_27).0: dyn Trait);
        _25 = <dyn Trait as Trait>::foo(move _26) -> bb4;
    }

    bb4: {
        _29 = &_25;
        _31 = const 42_isize;
        _30 = &_31;
        _28 = (move _29, move _30);
        _32 = (_28.0: &isize);
        _33 = (_28.1: &isize);
        _36 = (*_32);
        _37 = (*_33);
        _35 = Eq(move _36, move _37);
        _34 = Not(move _35);
        switchInt(move _34) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<isize, isize>(move _38, _32, _33, move _40);
    }

    bb6: {
        _42 = A { f: const 42_isize };
        _41 = (move _42,);
        _45 = &_41;
        _44 = &raw const (*_45);
        _43 = move _44 as *const (dyn Trait,) (Pointer(Unsize));
        _48 = &(*_43);
        _47 = &((*_48).0: dyn Trait);
        _46 = <dyn Trait as Trait>::foo(move _47) -> bb7;
    }

    bb7: {
        _50 = &_46;
        _52 = const 42_isize;
        _51 = &_52;
        _49 = (move _50, move _51);
        _53 = (_49.0: &isize);
        _54 = (_49.1: &isize);
        _57 = (*_53);
        _58 = (*_54);
        _56 = Eq(move _57, move _58);
        _55 = Not(move _56);
        switchInt(move _55) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _59 = core::panicking::AssertKind::Eq;
        _61 = Option::<Arguments<'_>>::None;
        _60 = core::panicking::assert_failed::<isize, isize>(move _59, _53, _54, move _61);
    }

    bb9: {
        _65 = [const 1_i32, const 2_i32, const 3_i32];
        _64 = &_65;
        _63 = &raw const (*_64);
        _62 = move _63 as *const [i32] (Pointer(Unsize));
        _67 = const 2_usize;
        _489 = _62 as *const () (PtrToPtr);
        _490 = _489 as usize (Transmute);
        _491 = AlignOf(i32);
        _492 = Sub(_491, const 1_usize);
        _493 = BitAnd(_490, _492);
        _494 = Eq(_493, const 0_usize);
        assert(_494, "misaligned pointer dereference: address must be a multiple of {} but is {}", _491, _490) -> [success: bb70, unwind unreachable];
    }

    bb10: {
        _483 = _62 as *const () (PtrToPtr);
        _484 = _483 as usize (Transmute);
        _485 = AlignOf(i32);
        _486 = Sub(_485, const 1_usize);
        _487 = BitAnd(_484, _486);
        _488 = Eq(_487, const 0_usize);
        assert(_488, "misaligned pointer dereference: address must be a multiple of {} but is {}", _485, _484) -> [success: bb69, unwind unreachable];
    }

    bb11: {
        _80 = core::panicking::AssertKind::Eq;
        _82 = Option::<Arguments<'_>>::None;
        _81 = core::panicking::assert_failed::<i32, i32>(move _80, _74, _75, move _82);
    }

    bb12: {
        _477 = _62 as *const () (PtrToPtr);
        _478 = _477 as usize (Transmute);
        _479 = AlignOf(i32);
        _480 = Sub(_479, const 1_usize);
        _481 = BitAnd(_478, _480);
        _482 = Eq(_481, const 0_usize);
        assert(_482, "misaligned pointer dereference: address must be a multiple of {} but is {}", _479, _478) -> [success: bb68, unwind unreachable];
    }

    bb13: {
        _95 = core::panicking::AssertKind::Eq;
        _97 = Option::<Arguments<'_>>::None;
        _96 = core::panicking::assert_failed::<usize, usize>(move _95, _89, _90, move _97);
    }

    bb14: {
        _101 = [const 1_i32, const 2_i32, const 3_i32];
        _100 = &_101;
        _99 = &raw const (*_100);
        _98 = move _99 as *const [i32] (Pointer(Unsize));
        _103 = const 2_usize;
        _471 = _98 as *const () (PtrToPtr);
        _472 = _471 as usize (Transmute);
        _473 = AlignOf(i32);
        _474 = Sub(_473, const 1_usize);
        _475 = BitAnd(_472, _474);
        _476 = Eq(_475, const 0_usize);
        assert(_476, "misaligned pointer dereference: address must be a multiple of {} but is {}", _473, _472) -> [success: bb67, unwind unreachable];
    }

    bb15: {
        _465 = _98 as *const () (PtrToPtr);
        _466 = _465 as usize (Transmute);
        _467 = AlignOf(i32);
        _468 = Sub(_467, const 1_usize);
        _469 = BitAnd(_466, _468);
        _470 = Eq(_469, const 0_usize);
        assert(_470, "misaligned pointer dereference: address must be a multiple of {} but is {}", _467, _466) -> [success: bb66, unwind unreachable];
    }

    bb16: {
        _116 = core::panicking::AssertKind::Eq;
        _118 = Option::<Arguments<'_>>::None;
        _117 = core::panicking::assert_failed::<i32, i32>(move _116, _110, _111, move _118);
    }

    bb17: {
        _459 = _98 as *const () (PtrToPtr);
        _460 = _459 as usize (Transmute);
        _461 = AlignOf(i32);
        _462 = Sub(_461, const 1_usize);
        _463 = BitAnd(_460, _462);
        _464 = Eq(_463, const 0_usize);
        assert(_464, "misaligned pointer dereference: address must be a multiple of {} but is {}", _461, _460) -> [success: bb65, unwind unreachable];
    }

    bb18: {
        _131 = core::panicking::AssertKind::Eq;
        _133 = Option::<Arguments<'_>>::None;
        _132 = core::panicking::assert_failed::<usize, usize>(move _131, _125, _126, move _133);
    }

    bb19: {
        _138 = [const 1_i32, const 2_i32, const 3_i32];
        _137 = Foo::<[i32; 3]> { f: move _138 };
        _136 = &_137;
        _135 = &raw const (*_136);
        _134 = move _135 as *const Foo<[i32]> (Pointer(Unsize));
        _140 = &(*_134);
        _141 = const 0_usize;
        _142 = Len(((*_140).0: [i32]));
        _143 = Lt(_141, _142);
        assert(move _143, "index out of bounds: the length is {} but the index is {}", move _142, _141) -> bb20;
    }

    bb20: {
        _139 = ((*_140).0: [i32])[_141];
        _145 = &_139;
        _147 = const 1_i32;
        _146 = &_147;
        _144 = (move _145, move _146);
        _148 = (_144.0: &i32);
        _149 = (_144.1: &i32);
        _152 = (*_148);
        _153 = (*_149);
        _151 = Eq(move _152, move _153);
        _150 = Not(move _151);
        switchInt(move _150) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _154 = core::panicking::AssertKind::Eq;
        _156 = Option::<Arguments<'_>>::None;
        _155 = core::panicking::assert_failed::<i32, i32>(move _154, _148, _149, move _156);
    }

    bb22: {
        _159 = &(*_134);
        _158 = &((*_159).0: [i32]);
        _157 = Len((*_158));
        _161 = &_157;
        _163 = const 3_usize;
        _162 = &_163;
        _160 = (move _161, move _162);
        _164 = (_160.0: &usize);
        _165 = (_160.1: &usize);
        _168 = (*_164);
        _169 = (*_165);
        _167 = Eq(move _168, move _169);
        _166 = Not(move _167);
        switchInt(move _166) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _170 = core::panicking::AssertKind::Eq;
        _172 = Option::<Arguments<'_>>::None;
        _171 = core::panicking::assert_failed::<usize, usize>(move _170, _164, _165, move _172);
    }

    bb24: {
        _177 = [const 1_i32, const 2_i32, const 3_i32];
        _176 = (move _177,);
        _175 = &_176;
        _174 = &raw const (*_175);
        _173 = move _174 as *const ([i32],) (Pointer(Unsize));
        _179 = &(*_173);
        _180 = const 0_usize;
        _181 = Len(((*_179).0: [i32]));
        _182 = Lt(_180, _181);
        assert(move _182, "index out of bounds: the length is {} but the index is {}", move _181, _180) -> bb25;
    }

    bb25: {
        _178 = ((*_179).0: [i32])[_180];
        _184 = &_178;
        _186 = const 1_i32;
        _185 = &_186;
        _183 = (move _184, move _185);
        _187 = (_183.0: &i32);
        _188 = (_183.1: &i32);
        _191 = (*_187);
        _192 = (*_188);
        _190 = Eq(move _191, move _192);
        _189 = Not(move _190);
        switchInt(move _189) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _193 = core::panicking::AssertKind::Eq;
        _195 = Option::<Arguments<'_>>::None;
        _194 = core::panicking::assert_failed::<i32, i32>(move _193, _187, _188, move _195);
    }

    bb27: {
        _198 = &(*_173);
        _197 = &((*_198).0: [i32]);
        _196 = Len((*_197));
        _200 = &_196;
        _202 = const 3_usize;
        _201 = &_202;
        _199 = (move _200, move _201);
        _203 = (_199.0: &usize);
        _204 = (_199.1: &usize);
        _207 = (*_203);
        _208 = (*_204);
        _206 = Eq(move _207, move _208);
        _205 = Not(move _206);
        switchInt(move _205) -> [0: bb29, otherwise: bb28];
    }

    bb28: {
        _209 = core::panicking::AssertKind::Eq;
        _211 = Option::<Arguments<'_>>::None;
        _210 = core::panicking::assert_failed::<usize, usize>(move _209, _203, _204, move _211);
    }

    bb29: {
        _212 = A { f: const 42_isize };
        _215 = &mut _212;
        _214 = &raw mut (*_215);
        _213 = move _214 as *mut dyn Trait (Pointer(Unsize));
        _217 = &(*_213);
        _216 = <dyn Trait as Trait>::foo(_217) -> bb30;
    }

    bb30: {
        _219 = &_216;
        _221 = const 42_isize;
        _220 = &_221;
        _218 = (move _219, move _220);
        _222 = (_218.0: &isize);
        _223 = (_218.1: &isize);
        _226 = (*_222);
        _227 = (*_223);
        _225 = Eq(move _226, move _227);
        _224 = Not(move _225);
        switchInt(move _224) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _228 = core::panicking::AssertKind::Eq;
        _230 = Option::<Arguments<'_>>::None;
        _229 = core::panicking::assert_failed::<isize, isize>(move _228, _222, _223, move _230);
    }

    bb32: {
        _232 = A { f: const 42_isize };
        _231 = Foo::<A> { f: move _232 };
        _235 = &mut _231;
        _234 = &raw mut (*_235);
        _233 = move _234 as *mut Foo<dyn Trait> (Pointer(Unsize));
        _238 = &(*_233);
        _237 = &((*_238).0: dyn Trait);
        _236 = <dyn Trait as Trait>::foo(move _237) -> bb33;
    }

    bb33: {
        _240 = &_236;
        _242 = const 42_isize;
        _241 = &_242;
        _239 = (move _240, move _241);
        _243 = (_239.0: &isize);
        _244 = (_239.1: &isize);
        _247 = (*_243);
        _248 = (*_244);
        _246 = Eq(move _247, move _248);
        _245 = Not(move _246);
        switchInt(move _245) -> [0: bb35, otherwise: bb34];
    }

    bb34: {
        _249 = core::panicking::AssertKind::Eq;
        _251 = Option::<Arguments<'_>>::None;
        _250 = core::panicking::assert_failed::<isize, isize>(move _249, _243, _244, move _251);
    }

    bb35: {
        _253 = A { f: const 42_isize };
        _252 = (move _253,);
        _256 = &mut _252;
        _255 = &raw mut (*_256);
        _254 = move _255 as *mut (dyn Trait,) (Pointer(Unsize));
        _259 = &(*_254);
        _258 = &((*_259).0: dyn Trait);
        _257 = <dyn Trait as Trait>::foo(move _258) -> bb36;
    }

    bb36: {
        _261 = &_257;
        _263 = const 42_isize;
        _262 = &_263;
        _260 = (move _261, move _262);
        _264 = (_260.0: &isize);
        _265 = (_260.1: &isize);
        _268 = (*_264);
        _269 = (*_265);
        _267 = Eq(move _268, move _269);
        _266 = Not(move _267);
        switchInt(move _266) -> [0: bb38, otherwise: bb37];
    }

    bb37: {
        _270 = core::panicking::AssertKind::Eq;
        _272 = Option::<Arguments<'_>>::None;
        _271 = core::panicking::assert_failed::<isize, isize>(move _270, _264, _265, move _272);
    }

    bb38: {
        _276 = [const 1_i32, const 2_i32, const 3_i32];
        _275 = &mut _276;
        _274 = &raw mut (*_275);
        _273 = move _274 as *mut [i32] (Pointer(Unsize));
        _278 = const 2_usize;
        _453 = _273 as *const () (PtrToPtr);
        _454 = _453 as usize (Transmute);
        _455 = AlignOf(i32);
        _456 = Sub(_455, const 1_usize);
        _457 = BitAnd(_454, _456);
        _458 = Eq(_457, const 0_usize);
        assert(_458, "misaligned pointer dereference: address must be a multiple of {} but is {}", _455, _454) -> [success: bb64, unwind unreachable];
    }

    bb39: {
        _447 = _273 as *const () (PtrToPtr);
        _448 = _447 as usize (Transmute);
        _449 = AlignOf(i32);
        _450 = Sub(_449, const 1_usize);
        _451 = BitAnd(_448, _450);
        _452 = Eq(_451, const 0_usize);
        assert(_452, "misaligned pointer dereference: address must be a multiple of {} but is {}", _449, _448) -> [success: bb63, unwind unreachable];
    }

    bb40: {
        _291 = core::panicking::AssertKind::Eq;
        _293 = Option::<Arguments<'_>>::None;
        _292 = core::panicking::assert_failed::<i32, i32>(move _291, _285, _286, move _293);
    }

    bb41: {
        _441 = _273 as *const () (PtrToPtr);
        _442 = _441 as usize (Transmute);
        _443 = AlignOf(i32);
        _444 = Sub(_443, const 1_usize);
        _445 = BitAnd(_442, _444);
        _446 = Eq(_445, const 0_usize);
        assert(_446, "misaligned pointer dereference: address must be a multiple of {} but is {}", _443, _442) -> [success: bb62, unwind unreachable];
    }

    bb42: {
        _306 = core::panicking::AssertKind::Eq;
        _308 = Option::<Arguments<'_>>::None;
        _307 = core::panicking::assert_failed::<usize, usize>(move _306, _300, _301, move _308);
    }

    bb43: {
        _312 = [const 1_i32, const 2_i32, const 3_i32];
        _311 = &mut _312;
        _310 = &raw mut (*_311);
        _309 = move _310 as *mut [i32] (Pointer(Unsize));
        _314 = const 2_usize;
        _435 = _309 as *const () (PtrToPtr);
        _436 = _435 as usize (Transmute);
        _437 = AlignOf(i32);
        _438 = Sub(_437, const 1_usize);
        _439 = BitAnd(_436, _438);
        _440 = Eq(_439, const 0_usize);
        assert(_440, "misaligned pointer dereference: address must be a multiple of {} but is {}", _437, _436) -> [success: bb61, unwind unreachable];
    }

    bb44: {
        _429 = _309 as *const () (PtrToPtr);
        _430 = _429 as usize (Transmute);
        _431 = AlignOf(i32);
        _432 = Sub(_431, const 1_usize);
        _433 = BitAnd(_430, _432);
        _434 = Eq(_433, const 0_usize);
        assert(_434, "misaligned pointer dereference: address must be a multiple of {} but is {}", _431, _430) -> [success: bb60, unwind unreachable];
    }

    bb45: {
        _327 = core::panicking::AssertKind::Eq;
        _329 = Option::<Arguments<'_>>::None;
        _328 = core::panicking::assert_failed::<i32, i32>(move _327, _321, _322, move _329);
    }

    bb46: {
        _423 = _309 as *const () (PtrToPtr);
        _424 = _423 as usize (Transmute);
        _425 = AlignOf(i32);
        _426 = Sub(_425, const 1_usize);
        _427 = BitAnd(_424, _426);
        _428 = Eq(_427, const 0_usize);
        assert(_428, "misaligned pointer dereference: address must be a multiple of {} but is {}", _425, _424) -> [success: bb59, unwind unreachable];
    }

    bb47: {
        _342 = core::panicking::AssertKind::Eq;
        _344 = Option::<Arguments<'_>>::None;
        _343 = core::panicking::assert_failed::<usize, usize>(move _342, _336, _337, move _344);
    }

    bb48: {
        _349 = [const 1_i32, const 2_i32, const 3_i32];
        _348 = Foo::<[i32; 3]> { f: move _349 };
        _347 = &mut _348;
        _346 = &raw mut (*_347);
        _345 = move _346 as *mut Foo<[i32]> (Pointer(Unsize));
        _351 = &(*_345);
        _352 = const 0_usize;
        _353 = Len(((*_351).0: [i32]));
        _354 = Lt(_352, _353);
        assert(move _354, "index out of bounds: the length is {} but the index is {}", move _353, _352) -> bb49;
    }

    bb49: {
        _350 = ((*_351).0: [i32])[_352];
        _356 = &_350;
        _358 = const 1_i32;
        _357 = &_358;
        _355 = (move _356, move _357);
        _359 = (_355.0: &i32);
        _360 = (_355.1: &i32);
        _363 = (*_359);
        _364 = (*_360);
        _362 = Eq(move _363, move _364);
        _361 = Not(move _362);
        switchInt(move _361) -> [0: bb51, otherwise: bb50];
    }

    bb50: {
        _365 = core::panicking::AssertKind::Eq;
        _367 = Option::<Arguments<'_>>::None;
        _366 = core::panicking::assert_failed::<i32, i32>(move _365, _359, _360, move _367);
    }

    bb51: {
        _370 = &(*_345);
        _369 = &((*_370).0: [i32]);
        _368 = Len((*_369));
        _372 = &_368;
        _374 = const 3_usize;
        _373 = &_374;
        _371 = (move _372, move _373);
        _375 = (_371.0: &usize);
        _376 = (_371.1: &usize);
        _379 = (*_375);
        _380 = (*_376);
        _378 = Eq(move _379, move _380);
        _377 = Not(move _378);
        switchInt(move _377) -> [0: bb53, otherwise: bb52];
    }

    bb52: {
        _381 = core::panicking::AssertKind::Eq;
        _383 = Option::<Arguments<'_>>::None;
        _382 = core::panicking::assert_failed::<usize, usize>(move _381, _375, _376, move _383);
    }

    bb53: {
        _388 = [const 1_i32, const 2_i32, const 3_i32];
        _387 = (move _388,);
        _386 = &mut _387;
        _385 = &raw mut (*_386);
        _384 = move _385 as *mut ([i32],) (Pointer(Unsize));
        _390 = &(*_384);
        _391 = const 0_usize;
        _392 = Len(((*_390).0: [i32]));
        _393 = Lt(_391, _392);
        assert(move _393, "index out of bounds: the length is {} but the index is {}", move _392, _391) -> bb54;
    }

    bb54: {
        _389 = ((*_390).0: [i32])[_391];
        _395 = &_389;
        _397 = const 1_i32;
        _396 = &_397;
        _394 = (move _395, move _396);
        _398 = (_394.0: &i32);
        _399 = (_394.1: &i32);
        _402 = (*_398);
        _403 = (*_399);
        _401 = Eq(move _402, move _403);
        _400 = Not(move _401);
        switchInt(move _400) -> [0: bb56, otherwise: bb55];
    }

    bb55: {
        _404 = core::panicking::AssertKind::Eq;
        _406 = Option::<Arguments<'_>>::None;
        _405 = core::panicking::assert_failed::<i32, i32>(move _404, _398, _399, move _406);
    }

    bb56: {
        _409 = &(*_384);
        _408 = &((*_409).0: [i32]);
        _407 = Len((*_408));
        _411 = &_407;
        _413 = const 3_usize;
        _412 = &_413;
        _410 = (move _411, move _412);
        _414 = (_410.0: &usize);
        _415 = (_410.1: &usize);
        _418 = (*_414);
        _419 = (*_415);
        _417 = Eq(move _418, move _419);
        _416 = Not(move _417);
        switchInt(move _416) -> [0: bb58, otherwise: bb57];
    }

    bb57: {
        _420 = core::panicking::AssertKind::Eq;
        _422 = Option::<Arguments<'_>>::None;
        _421 = core::panicking::assert_failed::<usize, usize>(move _420, _414, _415, move _422);
    }

    bb58: {
        return;
    }

    bb59: {
        _331 = &(*_309);
        _330 = Len((*_331));
        _333 = &_330;
        _335 = const 3_usize;
        _334 = &_335;
        _332 = (move _333, move _334);
        _336 = (_332.0: &usize);
        _337 = (_332.1: &usize);
        _340 = (*_336);
        _341 = (*_337);
        _339 = Eq(move _340, move _341);
        _338 = Not(move _339);
        switchInt(move _338) -> [0: bb48, otherwise: bb47];
    }

    bb60: {
        _313 = (*_309)[_314];
        _318 = &_313;
        _320 = const 3_i32;
        _319 = &_320;
        _317 = (move _318, move _319);
        _321 = (_317.0: &i32);
        _322 = (_317.1: &i32);
        _325 = (*_321);
        _326 = (*_322);
        _324 = Eq(move _325, move _326);
        _323 = Not(move _324);
        switchInt(move _323) -> [0: bb46, otherwise: bb45];
    }

    bb61: {
        _315 = Len((*_309));
        _316 = Lt(_314, _315);
        assert(move _316, "index out of bounds: the length is {} but the index is {}", move _315, _314) -> bb44;
    }

    bb62: {
        _295 = &(*_273);
        _294 = Len((*_295));
        _297 = &_294;
        _299 = const 3_usize;
        _298 = &_299;
        _296 = (move _297, move _298);
        _300 = (_296.0: &usize);
        _301 = (_296.1: &usize);
        _304 = (*_300);
        _305 = (*_301);
        _303 = Eq(move _304, move _305);
        _302 = Not(move _303);
        switchInt(move _302) -> [0: bb43, otherwise: bb42];
    }

    bb63: {
        _277 = (*_273)[_278];
        _282 = &_277;
        _284 = const 3_i32;
        _283 = &_284;
        _281 = (move _282, move _283);
        _285 = (_281.0: &i32);
        _286 = (_281.1: &i32);
        _289 = (*_285);
        _290 = (*_286);
        _288 = Eq(move _289, move _290);
        _287 = Not(move _288);
        switchInt(move _287) -> [0: bb41, otherwise: bb40];
    }

    bb64: {
        _279 = Len((*_273));
        _280 = Lt(_278, _279);
        assert(move _280, "index out of bounds: the length is {} but the index is {}", move _279, _278) -> bb39;
    }

    bb65: {
        _120 = &(*_98);
        _119 = Len((*_120));
        _122 = &_119;
        _124 = const 3_usize;
        _123 = &_124;
        _121 = (move _122, move _123);
        _125 = (_121.0: &usize);
        _126 = (_121.1: &usize);
        _129 = (*_125);
        _130 = (*_126);
        _128 = Eq(move _129, move _130);
        _127 = Not(move _128);
        switchInt(move _127) -> [0: bb19, otherwise: bb18];
    }

    bb66: {
        _102 = (*_98)[_103];
        _107 = &_102;
        _109 = const 3_i32;
        _108 = &_109;
        _106 = (move _107, move _108);
        _110 = (_106.0: &i32);
        _111 = (_106.1: &i32);
        _114 = (*_110);
        _115 = (*_111);
        _113 = Eq(move _114, move _115);
        _112 = Not(move _113);
        switchInt(move _112) -> [0: bb17, otherwise: bb16];
    }

    bb67: {
        _104 = Len((*_98));
        _105 = Lt(_103, _104);
        assert(move _105, "index out of bounds: the length is {} but the index is {}", move _104, _103) -> bb15;
    }

    bb68: {
        _84 = &(*_62);
        _83 = Len((*_84));
        _86 = &_83;
        _88 = const 3_usize;
        _87 = &_88;
        _85 = (move _86, move _87);
        _89 = (_85.0: &usize);
        _90 = (_85.1: &usize);
        _93 = (*_89);
        _94 = (*_90);
        _92 = Eq(move _93, move _94);
        _91 = Not(move _92);
        switchInt(move _91) -> [0: bb14, otherwise: bb13];
    }

    bb69: {
        _66 = (*_62)[_67];
        _71 = &_66;
        _73 = const 3_i32;
        _72 = &_73;
        _70 = (move _71, move _72);
        _74 = (_70.0: &i32);
        _75 = (_70.1: &i32);
        _78 = (*_74);
        _79 = (*_75);
        _77 = Eq(move _78, move _79);
        _76 = Not(move _77);
        switchInt(move _76) -> [0: bb12, otherwise: bb11];
    }

    bb70: {
        _68 = Len((*_62));
        _69 = Lt(_67, _68);
        assert(move _69, "index out of bounds: the length is {} but the index is {}", move _68, _67) -> bb10;
    }
}
