// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: &Fat<[isize]>) -> () {
    debug x => _1;
    let mut _0: ();
    let _2: &[isize];
    let mut _3: (&usize, &usize);
    let mut _4: &usize;
    let _5: usize;
    let mut _6: &[isize];
    let mut _7: &usize;
    let _8: usize;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: usize;
    let mut _14: usize;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: (&isize, &isize);
    let mut _19: &isize;
    let _20: usize;
    let mut _21: usize;
    let mut _22: bool;
    let mut _23: &isize;
    let _24: isize;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: isize;
    let mut _30: isize;
    let _32: !;
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _34: (&isize, &isize);
    let mut _35: &isize;
    let _36: usize;
    let mut _37: usize;
    let mut _38: bool;
    let mut _39: &isize;
    let _40: isize;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: isize;
    let mut _46: isize;
    let _48: !;
    let mut _49: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _50: (&isize, &isize);
    let mut _51: &isize;
    let mut _52: &isize;
    let _53: isize;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: isize;
    let mut _59: isize;
    let _61: !;
    let mut _62: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _63: (&&str, &&str);
    let mut _64: &&str;
    let mut _65: &&str;
    let _66: &str;
    let mut _69: bool;
    let mut _70: bool;
    let _72: !;
    let mut _73: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug y => _2;
        let _9: &usize;
        let _10: &usize;
        let _25: &isize;
        let _26: &isize;
        let _41: &isize;
        let _42: &isize;
        let _54: &isize;
        let _55: &isize;
        let _67: &&str;
        let _68: &&str;
        scope 2 {
            debug left_val => _9;
            debug right_val => _10;
            let _15: core::panicking::AssertKind;
            scope 3 {
                debug kind => _15;
            }
        }
        scope 4 {
            debug left_val => _25;
            debug right_val => _26;
            let _31: core::panicking::AssertKind;
            scope 5 {
                debug kind => _31;
            }
        }
        scope 6 {
            debug left_val => _41;
            debug right_val => _42;
            let _47: core::panicking::AssertKind;
            scope 7 {
                debug kind => _47;
            }
        }
        scope 8 {
            debug left_val => _54;
            debug right_val => _55;
            let _60: core::panicking::AssertKind;
            scope 9 {
                debug kind => _60;
            }
        }
        scope 10 {
            debug left_val => _67;
            debug right_val => _68;
            let _71: core::panicking::AssertKind;
            scope 11 {
                debug kind => _71;
            }
        }
    }

    bb0: {
        _2 = &((*_1).2: [isize]);
        _6 = &((*_1).2: [isize]);
        _5 = Len((*_6));
        _4 = &_5;
        _8 = const 3_usize;
        _7 = &_8;
        _3 = (move _4, move _7);
        _9 = (_3.0: &usize);
        _10 = (_3.1: &usize);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<usize, usize>(move _15, _9, _10, move _17);
    }

    bb2: {
        _20 = const 0_usize;
        _21 = Len((*_2));
        _22 = Lt(_20, _21);
        assert(move _22, "index out of bounds: the length is {} but the index is {}", move _21, _20) -> bb3;
    }

    bb3: {
        _19 = &(*_2)[_20];
        _24 = const 1_isize;
        _23 = &_24;
        _18 = (move _19, move _23);
        _25 = (_18.0: &isize);
        _26 = (_18.1: &isize);
        _29 = (*_25);
        _30 = (*_26);
        _28 = Eq(move _29, move _30);
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _31 = core::panicking::AssertKind::Eq;
        _33 = Option::<Arguments<'_>>::None;
        _32 = core::panicking::assert_failed::<isize, isize>(move _31, _25, _26, move _33);
    }

    bb5: {
        _36 = const 1_usize;
        _37 = Len(((*_1).2: [isize]));
        _38 = Lt(_36, _37);
        assert(move _38, "index out of bounds: the length is {} but the index is {}", move _37, _36) -> bb6;
    }

    bb6: {
        _35 = &((*_1).2: [isize])[_36];
        _40 = const 2_isize;
        _39 = &_40;
        _34 = (move _35, move _39);
        _41 = (_34.0: &isize);
        _42 = (_34.1: &isize);
        _45 = (*_41);
        _46 = (*_42);
        _44 = Eq(move _45, move _46);
        _43 = Not(move _44);
        switchInt(move _43) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _47 = core::panicking::AssertKind::Eq;
        _49 = Option::<Arguments<'_>>::None;
        _48 = core::panicking::assert_failed::<isize, isize>(move _47, _41, _42, move _49);
    }

    bb8: {
        _51 = &((*_1).0: isize);
        _53 = const 5_isize;
        _52 = &_53;
        _50 = (move _51, move _52);
        _54 = (_50.0: &isize);
        _55 = (_50.1: &isize);
        _58 = (*_54);
        _59 = (*_55);
        _57 = Eq(move _58, move _59);
        _56 = Not(move _57);
        switchInt(move _56) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _60 = core::panicking::AssertKind::Eq;
        _62 = Option::<Arguments<'_>>::None;
        _61 = core::panicking::assert_failed::<isize, isize>(move _60, _54, _55, move _62);
    }

    bb10: {
        _64 = &((*_1).1: &str);
        _66 = const "some str";
        _65 = &_66;
        _63 = (move _64, move _65);
        _67 = (_63.0: &&str);
        _68 = (_63.1: &&str);
        _70 = <&str as PartialEq>::eq(_67, _68) -> bb11;
    }

    bb11: {
        _69 = Not(move _70);
        switchInt(move _69) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _71 = core::panicking::AssertKind::Eq;
        _73 = Option::<Arguments<'_>>::None;
        _72 = core::panicking::assert_failed::<&str, &str>(move _71, _67, _68, move _73);
    }

    bb13: {
        return;
    }
}

fn foo2(_1: &Fat<[T]>) -> () {
    debug x => _1;
    let mut _0: ();
    let _2: &[T];
    let mut _4: (&usize, &usize);
    let mut _5: &usize;
    let _6: usize;
    let mut _7: &[T];
    let mut _8: &usize;
    let _9: usize;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: usize;
    let mut _15: usize;
    let _17: !;
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _19: (&Bar, &Bar);
    let mut _20: &Bar;
    let _21: Bar;
    let mut _22: &T;
    let _23: usize;
    let mut _24: usize;
    let mut _25: bool;
    let mut _26: &Bar;
    let mut _29: bool;
    let mut _30: bool;
    let _32: !;
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _34: (&Bar, &Bar);
    let mut _35: &Bar;
    let _36: Bar;
    let mut _37: &T;
    let _38: usize;
    let mut _39: usize;
    let mut _40: bool;
    let mut _41: &Bar;
    let mut _44: bool;
    let mut _45: bool;
    let _47: !;
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _49: (&isize, &isize);
    let mut _50: &isize;
    let mut _51: &isize;
    let _52: isize;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: isize;
    let mut _58: isize;
    let _60: !;
    let mut _61: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _62: (&&str, &&str);
    let mut _63: &&str;
    let mut _64: &&str;
    let _65: &str;
    let mut _68: bool;
    let mut _69: bool;
    let _71: !;
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug y => _2;
        let _3: Bar;
        scope 2 {
            debug bar => const Bar;
            let _10: &usize;
            let _11: &usize;
            let _27: &Bar;
            let _28: &Bar;
            let _42: &Bar;
            let _43: &Bar;
            let _53: &isize;
            let _54: &isize;
            let _66: &&str;
            let _67: &&str;
            scope 3 {
                debug left_val => _10;
                debug right_val => _11;
                let _16: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _16;
                }
            }
            scope 5 {
                debug left_val => _27;
                debug right_val => _28;
                let _31: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _31;
                }
            }
            scope 7 {
                debug left_val => _42;
                debug right_val => _43;
                let _46: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _46;
                }
            }
            scope 9 {
                debug left_val => _53;
                debug right_val => _54;
                let _59: core::panicking::AssertKind;
                scope 10 {
                    debug kind => _59;
                }
            }
            scope 11 {
                debug left_val => _66;
                debug right_val => _67;
                let _70: core::panicking::AssertKind;
                scope 12 {
                    debug kind => _70;
                }
            }
        }
    }

    bb0: {
        _2 = &((*_1).2: [T]);
        _7 = &((*_1).2: [T]);
        _6 = Len((*_7));
        _5 = &_6;
        _9 = const 3_usize;
        _8 = &_9;
        _4 = (move _5, move _8);
        _10 = (_4.0: &usize);
        _11 = (_4.1: &usize);
        _14 = (*_10);
        _15 = (*_11);
        _13 = Eq(move _14, move _15);
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _16 = core::panicking::AssertKind::Eq;
        _18 = Option::<Arguments<'_>>::None;
        _17 = core::panicking::assert_failed::<usize, usize>(move _16, _10, _11, move _18);
    }

    bb2: {
        _23 = const 0_usize;
        _24 = Len((*_2));
        _25 = Lt(_23, _24);
        assert(move _25, "index out of bounds: the length is {} but the index is {}", move _24, _23) -> bb3;
    }

    bb3: {
        _22 = &(*_2)[_23];
        _21 = <T as ToBar>::to_bar(move _22) -> bb4;
    }

    bb4: {
        _20 = &_21;
        _26 = &_3;
        _19 = (move _20, move _26);
        _27 = (_19.0: &Bar);
        _28 = (_19.1: &Bar);
        _30 = <Bar as PartialEq>::eq(_27, _28) -> bb5;
    }

    bb5: {
        _29 = Not(move _30);
        switchInt(move _29) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _31 = core::panicking::AssertKind::Eq;
        _33 = Option::<Arguments<'_>>::None;
        _32 = core::panicking::assert_failed::<Bar, Bar>(move _31, _27, _28, move _33);
    }

    bb7: {
        _38 = const 1_usize;
        _39 = Len(((*_1).2: [T]));
        _40 = Lt(_38, _39);
        assert(move _40, "index out of bounds: the length is {} but the index is {}", move _39, _38) -> bb8;
    }

    bb8: {
        _37 = &((*_1).2: [T])[_38];
        _36 = <T as ToBar>::to_bar(move _37) -> bb9;
    }

    bb9: {
        _35 = &_36;
        _41 = &_3;
        _34 = (move _35, move _41);
        _42 = (_34.0: &Bar);
        _43 = (_34.1: &Bar);
        _45 = <Bar as PartialEq>::eq(_42, _43) -> bb10;
    }

    bb10: {
        _44 = Not(move _45);
        switchInt(move _44) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _46 = core::panicking::AssertKind::Eq;
        _48 = Option::<Arguments<'_>>::None;
        _47 = core::panicking::assert_failed::<Bar, Bar>(move _46, _42, _43, move _48);
    }

    bb12: {
        _50 = &((*_1).0: isize);
        _52 = const 5_isize;
        _51 = &_52;
        _49 = (move _50, move _51);
        _53 = (_49.0: &isize);
        _54 = (_49.1: &isize);
        _57 = (*_53);
        _58 = (*_54);
        _56 = Eq(move _57, move _58);
        _55 = Not(move _56);
        switchInt(move _55) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _59 = core::panicking::AssertKind::Eq;
        _61 = Option::<Arguments<'_>>::None;
        _60 = core::panicking::assert_failed::<isize, isize>(move _59, _53, _54, move _61);
    }

    bb14: {
        _63 = &((*_1).1: &str);
        _65 = const "some str";
        _64 = &_65;
        _62 = (move _63, move _64);
        _66 = (_62.0: &&str);
        _67 = (_62.1: &&str);
        _69 = <&str as PartialEq>::eq(_66, _67) -> bb15;
    }

    bb15: {
        _68 = Not(move _69);
        switchInt(move _68) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _70 = core::panicking::AssertKind::Eq;
        _72 = Option::<Arguments<'_>>::None;
        _71 = core::panicking::assert_failed::<&str, &str>(move _70, _66, _67, move _72);
    }

    bb17: {
        return;
    }
}

fn foo3(_1: &Fat<Fat<[isize]>>) -> () {
    debug x => _1;
    let mut _0: ();
    let _2: &[isize];
    let mut _3: (&isize, &isize);
    let mut _4: &isize;
    let mut _5: &isize;
    let _6: isize;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: isize;
    let mut _12: isize;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&&str, &&str);
    let mut _17: &&str;
    let mut _18: &&str;
    let _19: &str;
    let mut _22: bool;
    let mut _23: bool;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _27: (&isize, &isize);
    let mut _28: &isize;
    let mut _29: &isize;
    let _30: isize;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: isize;
    let mut _36: isize;
    let _38: !;
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _40: (&&str, &&str);
    let mut _41: &&str;
    let mut _42: &&str;
    let _43: &str;
    let mut _46: bool;
    let mut _47: bool;
    let _49: !;
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _51: (&usize, &usize);
    let mut _52: &usize;
    let _53: usize;
    let mut _54: &[isize];
    let mut _55: &usize;
    let _56: usize;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: usize;
    let mut _62: usize;
    let _64: !;
    let mut _65: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _66: (&isize, &isize);
    let mut _67: &isize;
    let _68: usize;
    let mut _69: usize;
    let mut _70: bool;
    let mut _71: &isize;
    let _72: isize;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: isize;
    let mut _78: isize;
    let _80: !;
    let mut _81: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _82: (&isize, &isize);
    let mut _83: &isize;
    let _84: usize;
    let mut _85: usize;
    let mut _86: bool;
    let mut _87: &isize;
    let _88: isize;
    let mut _91: bool;
    let mut _92: bool;
    let mut _93: isize;
    let mut _94: isize;
    let _96: !;
    let mut _97: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug y => _2;
        let _7: &isize;
        let _8: &isize;
        let _20: &&str;
        let _21: &&str;
        let _31: &isize;
        let _32: &isize;
        let _44: &&str;
        let _45: &&str;
        let _57: &usize;
        let _58: &usize;
        let _73: &isize;
        let _74: &isize;
        let _89: &isize;
        let _90: &isize;
        scope 2 {
            debug left_val => _7;
            debug right_val => _8;
            let _13: core::panicking::AssertKind;
            scope 3 {
                debug kind => _13;
            }
        }
        scope 4 {
            debug left_val => _20;
            debug right_val => _21;
            let _24: core::panicking::AssertKind;
            scope 5 {
                debug kind => _24;
            }
        }
        scope 6 {
            debug left_val => _31;
            debug right_val => _32;
            let _37: core::panicking::AssertKind;
            scope 7 {
                debug kind => _37;
            }
        }
        scope 8 {
            debug left_val => _44;
            debug right_val => _45;
            let _48: core::panicking::AssertKind;
            scope 9 {
                debug kind => _48;
            }
        }
        scope 10 {
            debug left_val => _57;
            debug right_val => _58;
            let _63: core::panicking::AssertKind;
            scope 11 {
                debug kind => _63;
            }
        }
        scope 12 {
            debug left_val => _73;
            debug right_val => _74;
            let _79: core::panicking::AssertKind;
            scope 13 {
                debug kind => _79;
            }
        }
        scope 14 {
            debug left_val => _89;
            debug right_val => _90;
            let _95: core::panicking::AssertKind;
            scope 15 {
                debug kind => _95;
            }
        }
    }

    bb0: {
        _2 = &(((*_1).2: Fat<[isize]>).2: [isize]);
        _4 = &((*_1).0: isize);
        _6 = const 5_isize;
        _5 = &_6;
        _3 = (move _4, move _5);
        _7 = (_3.0: &isize);
        _8 = (_3.1: &isize);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<isize, isize>(move _13, _7, _8, move _15);
    }

    bb2: {
        _17 = &((*_1).1: &str);
        _19 = const "some str";
        _18 = &_19;
        _16 = (move _17, move _18);
        _20 = (_16.0: &&str);
        _21 = (_16.1: &&str);
        _23 = <&str as PartialEq>::eq(_20, _21) -> bb3;
    }

    bb3: {
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<&str, &str>(move _24, _20, _21, move _26);
    }

    bb5: {
        _28 = &(((*_1).2: Fat<[isize]>).0: isize);
        _30 = const 8_isize;
        _29 = &_30;
        _27 = (move _28, move _29);
        _31 = (_27.0: &isize);
        _32 = (_27.1: &isize);
        _35 = (*_31);
        _36 = (*_32);
        _34 = Eq(move _35, move _36);
        _33 = Not(move _34);
        switchInt(move _33) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _37 = core::panicking::AssertKind::Eq;
        _39 = Option::<Arguments<'_>>::None;
        _38 = core::panicking::assert_failed::<isize, isize>(move _37, _31, _32, move _39);
    }

    bb7: {
        _41 = &(((*_1).2: Fat<[isize]>).1: &str);
        _43 = const "deep str";
        _42 = &_43;
        _40 = (move _41, move _42);
        _44 = (_40.0: &&str);
        _45 = (_40.1: &&str);
        _47 = <&str as PartialEq>::eq(_44, _45) -> bb8;
    }

    bb8: {
        _46 = Not(move _47);
        switchInt(move _46) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _48 = core::panicking::AssertKind::Eq;
        _50 = Option::<Arguments<'_>>::None;
        _49 = core::panicking::assert_failed::<&str, &str>(move _48, _44, _45, move _50);
    }

    bb10: {
        _54 = &(((*_1).2: Fat<[isize]>).2: [isize]);
        _53 = Len((*_54));
        _52 = &_53;
        _56 = const 3_usize;
        _55 = &_56;
        _51 = (move _52, move _55);
        _57 = (_51.0: &usize);
        _58 = (_51.1: &usize);
        _61 = (*_57);
        _62 = (*_58);
        _60 = Eq(move _61, move _62);
        _59 = Not(move _60);
        switchInt(move _59) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _63 = core::panicking::AssertKind::Eq;
        _65 = Option::<Arguments<'_>>::None;
        _64 = core::panicking::assert_failed::<usize, usize>(move _63, _57, _58, move _65);
    }

    bb12: {
        _68 = const 0_usize;
        _69 = Len((*_2));
        _70 = Lt(_68, _69);
        assert(move _70, "index out of bounds: the length is {} but the index is {}", move _69, _68) -> bb13;
    }

    bb13: {
        _67 = &(*_2)[_68];
        _72 = const 1_isize;
        _71 = &_72;
        _66 = (move _67, move _71);
        _73 = (_66.0: &isize);
        _74 = (_66.1: &isize);
        _77 = (*_73);
        _78 = (*_74);
        _76 = Eq(move _77, move _78);
        _75 = Not(move _76);
        switchInt(move _75) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _79 = core::panicking::AssertKind::Eq;
        _81 = Option::<Arguments<'_>>::None;
        _80 = core::panicking::assert_failed::<isize, isize>(move _79, _73, _74, move _81);
    }

    bb15: {
        _84 = const 1_usize;
        _85 = Len((((*_1).2: Fat<[isize]>).2: [isize]));
        _86 = Lt(_84, _85);
        assert(move _86, "index out of bounds: the length is {} but the index is {}", move _85, _84) -> bb16;
    }

    bb16: {
        _83 = &(((*_1).2: Fat<[isize]>).2: [isize])[_84];
        _88 = const 2_isize;
        _87 = &_88;
        _82 = (move _83, move _87);
        _89 = (_82.0: &isize);
        _90 = (_82.1: &isize);
        _93 = (*_89);
        _94 = (*_90);
        _92 = Eq(move _93, move _94);
        _91 = Not(move _92);
        switchInt(move _91) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _95 = core::panicking::AssertKind::Eq;
        _97 = Option::<Arguments<'_>>::None;
        _96 = core::panicking::assert_failed::<isize, isize>(move _95, _89, _90, move _97);
    }

    bb18: {
        return;
    }
}

fn <impl at ui/dynamically-sized-types/dst-struct.rs:41:16: 41:21>::clone(_1: &Bar) -> Bar {
    debug self => _1;
    let mut _0: Bar;

    bb0: {
        return;
    }
}

fn <impl at ui/dynamically-sized-types/dst-struct.rs:41:23: 41:32>::eq(_1: &Bar, _2: &Bar) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;

    bb0: {
        _0 = const true;
        return;
    }
}

fn <impl at ui/dynamically-sized-types/dst-struct.rs:41:34: 41:36>::assert_receiver_is_total_eq(_1: &Bar) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/dynamically-sized-types/dst-struct.rs:41:38: 41:43>::fmt(_1: &Bar, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "Bar";
        _0 = Formatter::<'_>::write_str(_2, _3) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/dynamically-sized-types/dst-struct.rs:48:1: 48:19>::to_bar(_1: &Bar) -> Bar {
    debug self => _1;
    let mut _0: Bar;

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Fat<[isize; 3]>;
    let mut _2: [isize; 3];
    let _3: ();
    let mut _4: &Fat<[isize]>;
    let _5: &Fat<[isize; 3]>;
    let _7: ();
    let mut _8: &Fat<[isize]>;
    let _10: ();
    let _12: &Fat<[isize; 3]>;
    let _13: ();
    let _15: &Fat<[isize; 3]>;
    let _16: Fat<[isize; 3]>;
    let mut _17: [isize; 3];
    let _18: ();
    let _20: ();
    let mut _21: &Fat<[Bar]>;
    let _22: &Fat<[Bar; 3]>;
    let _24: ();
    let mut _25: &Fat<[Bar]>;
    let _27: ();
    let _29: &Fat<[Bar; 3]>;
    let _30: ();
    let _32: &Fat<[Bar; 3]>;
    let _33: Fat<[Bar; 3]>;
    let _34: ();
    let mut _36: &mut Fat<[isize; 3]>;
    let mut _37: Fat<[isize; 3]>;
    let mut _38: [isize; 3];
    let _39: usize;
    let mut _40: usize;
    let mut _41: bool;
    let mut _42: (&isize, &isize);
    let mut _43: &isize;
    let _44: usize;
    let mut _45: usize;
    let mut _46: bool;
    let mut _47: &isize;
    let _48: isize;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: isize;
    let mut _54: isize;
    let _56: !;
    let mut _57: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _58: (&isize, &isize);
    let mut _59: &isize;
    let _60: usize;
    let mut _61: usize;
    let mut _62: bool;
    let mut _63: &isize;
    let _64: isize;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: isize;
    let mut _70: isize;
    let _72: !;
    let mut _73: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _74: (&isize, &isize);
    let mut _75: &isize;
    let _76: usize;
    let mut _77: usize;
    let mut _78: bool;
    let mut _79: &isize;
    let _80: isize;
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: isize;
    let mut _86: isize;
    let _88: !;
    let mut _89: std::option::Option<std::fmt::Arguments<'_>>;
    let _91: &Fat<[isize; 0]>;
    let _92: Fat<[isize; 0]>;
    let mut _93: bool;
    let mut _94: bool;
    let mut _95: &[isize];
    let mut _96: !;
    let _98: &Fat<[Bar; 0]>;
    let _99: Fat<[Bar; 0]>;
    let mut _100: bool;
    let mut _101: bool;
    let mut _102: &[Bar];
    let mut _103: !;
    let mut _105: Fat<[isize; 3]>;
    let mut _106: [isize; 3];
    let _107: ();
    let mut _108: &Fat<Fat<[isize]>>;
    let _109: &Fat<Fat<[isize; 3]>>;
    let _111: ();
    let mut _112: &Fat<Fat<[isize]>>;
    let _114: ();
    let _116: &Fat<Fat<[isize; 3]>>;
    let _117: ();
    let _119: &Fat<Fat<[isize; 3]>>;
    let _120: Fat<Fat<[isize; 3]>>;
    let mut _121: Fat<[isize; 3]>;
    let mut _122: [isize; 3];
    let _123: ();
    let mut _125: [isize; 3];
    let mut _126: (&isize, &isize);
    let mut _127: &isize;
    let _128: usize;
    let mut _129: usize;
    let mut _130: bool;
    let mut _131: &isize;
    let _132: isize;
    let mut _135: bool;
    let mut _136: bool;
    let mut _137: isize;
    let mut _138: isize;
    let _140: !;
    let mut _141: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _143: std::boxed::Box<[isize; 3]>;
    let mut _144: (&isize, &isize);
    let mut _145: &isize;
    let _146: usize;
    let mut _147: usize;
    let mut _148: bool;
    let mut _149: &isize;
    let _150: isize;
    let mut _153: bool;
    let mut _154: bool;
    let mut _155: isize;
    let mut _156: isize;
    let _158: !;
    let mut _159: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _161: Fat<[isize; 3]>;
    let mut _162: [isize; 3];
    let _163: ();
    let mut _164: &Fat<[isize]>;
    let _165: &Fat<[isize; 3]>;
    let mut _167: std::boxed::Box<Fat<[isize; 3]>>;
    let _168: ();
    let _169: &Fat<[isize]>;
    let mut _171: std::boxed::Box<Fat<[isize; 3]>>;
    let mut _172: Fat<[isize; 3]>;
    let mut _173: [isize; 3];
    let _174: ();
    let _175: &Fat<[isize]>;
    let mut _176: bool;
    let mut _177: bool;
    let mut _178: *const [isize; 3];
    let mut _179: *const [isize; 3];
    let mut _180: *const [isize];
    let mut _181: *const [isize];
    let mut _182: *const Fat<[isize; 3]>;
    let mut _183: *const Fat<[isize]>;
    let mut _184: *const Fat<[isize]>;
    scope 1 {
        debug f1 => _1;
        let _6: &Fat<[isize; 3]>;
        scope 2 {
            debug f2 => _6;
            let _9: &Fat<[isize]>;
            scope 3 {
                debug f3 => _9;
                let _11: &Fat<[isize]>;
                scope 4 {
                    debug f4 => _11;
                    let _14: &Fat<[isize]>;
                    scope 5 {
                        debug f5 => _14;
                        scope 6 {
                            debug bar => const Bar;
                            let _19: Fat<[Bar; 3]>;
                            scope 7 {
                                debug f1 => _19;
                                let _23: &Fat<[Bar; 3]>;
                                scope 8 {
                                    debug f2 => _23;
                                    let _26: &Fat<[Bar]>;
                                    scope 9 {
                                        debug f3 => _26;
                                        let _28: &Fat<[Bar]>;
                                        scope 10 {
                                            debug f4 => _28;
                                            let _31: &Fat<[Bar]>;
                                            scope 11 {
                                                debug f5 => _31;
                                                let _35: &mut Fat<[isize]>;
                                                scope 12 {
                                                    debug f5 => _35;
                                                    let _49: &isize;
                                                    let _50: &isize;
                                                    let _65: &isize;
                                                    let _66: &isize;
                                                    let _81: &isize;
                                                    let _82: &isize;
                                                    let _90: &Fat<[isize]>;
                                                    scope 13 {
                                                        debug left_val => _49;
                                                        debug right_val => _50;
                                                        let _55: core::panicking::AssertKind;
                                                        scope 14 {
                                                            debug kind => _55;
                                                        }
                                                    }
                                                    scope 15 {
                                                        debug left_val => _65;
                                                        debug right_val => _66;
                                                        let _71: core::panicking::AssertKind;
                                                        scope 16 {
                                                            debug kind => _71;
                                                        }
                                                    }
                                                    scope 17 {
                                                        debug left_val => _81;
                                                        debug right_val => _82;
                                                        let _87: core::panicking::AssertKind;
                                                        scope 18 {
                                                            debug kind => _87;
                                                        }
                                                    }
                                                    scope 19 {
                                                        debug f5 => _90;
                                                        let _97: &Fat<[Bar]>;
                                                        scope 20 {
                                                            debug f5 => _97;
                                                            let _104: Fat<Fat<[isize; 3]>>;
                                                            scope 21 {
                                                                debug f1 => _104;
                                                                let _110: &Fat<Fat<[isize; 3]>>;
                                                                scope 22 {
                                                                    debug f2 => _110;
                                                                    let _113: &Fat<Fat<[isize]>>;
                                                                    scope 23 {
                                                                        debug f3 => _113;
                                                                        let _115: &Fat<Fat<[isize]>>;
                                                                        scope 24 {
                                                                            debug f4 => _115;
                                                                            let _118: &Fat<Fat<[isize]>>;
                                                                            scope 25 {
                                                                                debug f5 => _118;
                                                                                let _124: std::boxed::Box<[isize; 3]>;
                                                                                scope 26 {
                                                                                    debug f1 => _124;
                                                                                    let _133: &isize;
                                                                                    let _134: &isize;
                                                                                    let _142: std::boxed::Box<[isize]>;
                                                                                    let mut _203: *const ();
                                                                                    let mut _204: usize;
                                                                                    let mut _205: usize;
                                                                                    let mut _206: usize;
                                                                                    let mut _207: usize;
                                                                                    let mut _208: bool;
                                                                                    let mut _209: *const ();
                                                                                    let mut _210: usize;
                                                                                    let mut _211: usize;
                                                                                    let mut _212: usize;
                                                                                    let mut _213: usize;
                                                                                    let mut _214: bool;
                                                                                    scope 27 {
                                                                                        debug left_val => _133;
                                                                                        debug right_val => _134;
                                                                                        let _139: core::panicking::AssertKind;
                                                                                        scope 28 {
                                                                                            debug kind => _139;
                                                                                        }
                                                                                    }
                                                                                    scope 29 {
                                                                                        debug f2 => _142;
                                                                                        let _151: &isize;
                                                                                        let _152: &isize;
                                                                                        let _160: std::boxed::Box<Fat<[isize; 3]>>;
                                                                                        let mut _191: *const ();
                                                                                        let mut _192: usize;
                                                                                        let mut _193: usize;
                                                                                        let mut _194: usize;
                                                                                        let mut _195: usize;
                                                                                        let mut _196: bool;
                                                                                        let mut _197: *const ();
                                                                                        let mut _198: usize;
                                                                                        let mut _199: usize;
                                                                                        let mut _200: usize;
                                                                                        let mut _201: usize;
                                                                                        let mut _202: bool;
                                                                                        scope 30 {
                                                                                            debug left_val => _151;
                                                                                            debug right_val => _152;
                                                                                            let _157: core::panicking::AssertKind;
                                                                                            scope 31 {
                                                                                                debug kind => _157;
                                                                                            }
                                                                                        }
                                                                                        scope 32 {
                                                                                            debug f1 => _160;
                                                                                            let _166: std::boxed::Box<Fat<[isize]>>;
                                                                                            let mut _185: *const ();
                                                                                            let mut _186: usize;
                                                                                            let mut _187: usize;
                                                                                            let mut _188: usize;
                                                                                            let mut _189: usize;
                                                                                            let mut _190: bool;
                                                                                            scope 33 {
                                                                                                debug f2 => _166;
                                                                                                let _170: std::boxed::Box<Fat<[isize]>>;
                                                                                                scope 34 {
                                                                                                    debug f3 => _170;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _177 = const false;
        _176 = const false;
        _2 = [const 1_isize, const 2_isize, const 3_isize];
        _1 = Fat::<[isize; 3]> { f1: const 5_isize, f2: const "some str", ptr: move _2 };
        _5 = &_1;
        _4 = _5 as &Fat<[isize]> (Pointer(Unsize));
        _3 = foo(move _4) -> bb1;
    }

    bb1: {
        _6 = &_1;
        _8 = _6 as &Fat<[isize]> (Pointer(Unsize));
        _7 = foo(move _8) -> bb2;
    }

    bb2: {
        _9 = _6 as &Fat<[isize]> (Pointer(Unsize));
        _10 = foo(_9) -> bb3;
    }

    bb3: {
        _12 = &_1;
        _11 = _12 as &Fat<[isize]> (Pointer(Unsize));
        _13 = foo(_11) -> bb4;
    }

    bb4: {
        _17 = [const 1_isize, const 2_isize, const 3_isize];
        _16 = Fat::<[isize; 3]> { f1: const 5_isize, f2: const "some str", ptr: move _17 };
        _15 = &_16;
        _14 = _15 as &Fat<[isize]> (Pointer(Unsize));
        _18 = foo(_14) -> bb5;
    }

    bb5: {
        _19 = Fat::<[Bar; 3]> { f1: const 5_isize, f2: const "some str", ptr: const [Bar, Bar, Bar] };
        _22 = &_19;
        _21 = _22 as &Fat<[Bar]> (Pointer(Unsize));
        _20 = foo2::<Bar>(move _21) -> bb6;
    }

    bb6: {
        _23 = &_19;
        _25 = _23 as &Fat<[Bar]> (Pointer(Unsize));
        _24 = foo2::<Bar>(move _25) -> bb7;
    }

    bb7: {
        _26 = _23 as &Fat<[Bar]> (Pointer(Unsize));
        _27 = foo2::<Bar>(_26) -> bb8;
    }

    bb8: {
        _29 = &_19;
        _28 = _29 as &Fat<[Bar]> (Pointer(Unsize));
        _30 = foo2::<Bar>(_28) -> bb9;
    }

    bb9: {
        _33 = Fat::<[Bar; 3]> { f1: const 5_isize, f2: const "some str", ptr: const [Bar, Bar, Bar] };
        _32 = &_33;
        _31 = _32 as &Fat<[Bar]> (Pointer(Unsize));
        _34 = foo2::<Bar>(_31) -> bb10;
    }

    bb10: {
        _38 = [const 1_isize, const 2_isize, const 3_isize];
        _37 = Fat::<[isize; 3]> { f1: const 5_isize, f2: const "some str", ptr: move _38 };
        _36 = &mut _37;
        _35 = _36 as &mut Fat<[isize]> (Pointer(Unsize));
        _39 = const 1_usize;
        _40 = Len(((*_35).2: [isize]));
        _41 = Lt(_39, _40);
        assert(move _41, "index out of bounds: the length is {} but the index is {}", move _40, _39) -> bb11;
    }

    bb11: {
        ((*_35).2: [isize])[_39] = const 34_isize;
        _44 = const 0_usize;
        _45 = Len(((*_35).2: [isize]));
        _46 = Lt(_44, _45);
        assert(move _46, "index out of bounds: the length is {} but the index is {}", move _45, _44) -> bb12;
    }

    bb12: {
        _43 = &((*_35).2: [isize])[_44];
        _48 = const 1_isize;
        _47 = &_48;
        _42 = (move _43, move _47);
        _49 = (_42.0: &isize);
        _50 = (_42.1: &isize);
        _53 = (*_49);
        _54 = (*_50);
        _52 = Eq(move _53, move _54);
        _51 = Not(move _52);
        switchInt(move _51) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _55 = core::panicking::AssertKind::Eq;
        _57 = Option::<Arguments<'_>>::None;
        _56 = core::panicking::assert_failed::<isize, isize>(move _55, _49, _50, move _57);
    }

    bb14: {
        _60 = const 1_usize;
        _61 = Len(((*_35).2: [isize]));
        _62 = Lt(_60, _61);
        assert(move _62, "index out of bounds: the length is {} but the index is {}", move _61, _60) -> bb15;
    }

    bb15: {
        _59 = &((*_35).2: [isize])[_60];
        _64 = const 34_isize;
        _63 = &_64;
        _58 = (move _59, move _63);
        _65 = (_58.0: &isize);
        _66 = (_58.1: &isize);
        _69 = (*_65);
        _70 = (*_66);
        _68 = Eq(move _69, move _70);
        _67 = Not(move _68);
        switchInt(move _67) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _71 = core::panicking::AssertKind::Eq;
        _73 = Option::<Arguments<'_>>::None;
        _72 = core::panicking::assert_failed::<isize, isize>(move _71, _65, _66, move _73);
    }

    bb17: {
        _76 = const 2_usize;
        _77 = Len(((*_35).2: [isize]));
        _78 = Lt(_76, _77);
        assert(move _78, "index out of bounds: the length is {} but the index is {}", move _77, _76) -> bb18;
    }

    bb18: {
        _75 = &((*_35).2: [isize])[_76];
        _80 = const 3_isize;
        _79 = &_80;
        _74 = (move _75, move _79);
        _81 = (_74.0: &isize);
        _82 = (_74.1: &isize);
        _85 = (*_81);
        _86 = (*_82);
        _84 = Eq(move _85, move _86);
        _83 = Not(move _84);
        switchInt(move _83) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _87 = core::panicking::AssertKind::Eq;
        _89 = Option::<Arguments<'_>>::None;
        _88 = core::panicking::assert_failed::<isize, isize>(move _87, _81, _82, move _89);
    }

    bb20: {
        _92 = Fat::<[isize; 0]> { f1: const 5_isize, f2: const "some str", ptr: const [] };
        _91 = &_92;
        _90 = _91 as &Fat<[isize]> (Pointer(Unsize));
        _95 = &((*_90).2: [isize]);
        _94 = core::slice::<impl [isize]>::is_empty(move _95) -> bb21;
    }

    bb21: {
        _93 = Not(move _94);
        switchInt(move _93) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        _96 = core::panicking::panic(const "assertion failed: f5.ptr.is_empty()");
    }

    bb23: {
        _99 = Fat::<[Bar; 0]> { f1: const 5_isize, f2: const "some str", ptr: const [] };
        _98 = &_99;
        _97 = _98 as &Fat<[Bar]> (Pointer(Unsize));
        _102 = &((*_97).2: [Bar]);
        _101 = core::slice::<impl [Bar]>::is_empty(move _102) -> bb24;
    }

    bb24: {
        _100 = Not(move _101);
        switchInt(move _100) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _103 = core::panicking::panic(const "assertion failed: f5.ptr.is_empty()");
    }

    bb26: {
        _106 = [const 1_isize, const 2_isize, const 3_isize];
        _105 = Fat::<[isize; 3]> { f1: const 8_isize, f2: const "deep str", ptr: move _106 };
        _104 = Fat::<Fat<[isize; 3]>> { f1: const 5_isize, f2: const "some str", ptr: move _105 };
        _109 = &_104;
        _108 = _109 as &Fat<Fat<[isize]>> (Pointer(Unsize));
        _107 = foo3(move _108) -> bb27;
    }

    bb27: {
        _110 = &_104;
        _112 = _110 as &Fat<Fat<[isize]>> (Pointer(Unsize));
        _111 = foo3(move _112) -> bb28;
    }

    bb28: {
        _113 = _110 as &Fat<Fat<[isize]>> (Pointer(Unsize));
        _114 = foo3(_113) -> bb29;
    }

    bb29: {
        _116 = &_104;
        _115 = _116 as &Fat<Fat<[isize]>> (Pointer(Unsize));
        _117 = foo3(_115) -> bb30;
    }

    bb30: {
        _122 = [const 1_isize, const 2_isize, const 3_isize];
        _121 = Fat::<[isize; 3]> { f1: const 8_isize, f2: const "deep str", ptr: move _122 };
        _120 = Fat::<Fat<[isize; 3]>> { f1: const 5_isize, f2: const "some str", ptr: move _121 };
        _119 = &_120;
        _118 = _119 as &Fat<Fat<[isize]>> (Pointer(Unsize));
        _123 = foo3(_118) -> bb31;
    }

    bb31: {
        _125 = [const 1_isize, const 2_isize, const 3_isize];
        _177 = const true;
        _124 = Box::<[isize; 3]>::new(move _125) -> bb32;
    }

    bb32: {
        _128 = const 1_usize;
        _178 = (((_124.0: std::ptr::Unique<[isize; 3]>).0: std::ptr::NonNull<[isize; 3]>).0: *const [isize; 3]);
        _209 = _178 as *const () (PtrToPtr);
        _210 = _209 as usize (Transmute);
        _211 = AlignOf(isize);
        _212 = Sub(_211, const 1_usize);
        _213 = BitAnd(_210, _212);
        _214 = Eq(_213, const 0_usize);
        assert(_214, "misaligned pointer dereference: address must be a multiple of {} but is {}", _211, _210) -> [success: bb59, unwind unreachable];
    }

    bb33: {
        _179 = (((_124.0: std::ptr::Unique<[isize; 3]>).0: std::ptr::NonNull<[isize; 3]>).0: *const [isize; 3]);
        _203 = _179 as *const () (PtrToPtr);
        _204 = _203 as usize (Transmute);
        _205 = AlignOf(isize);
        _206 = Sub(_205, const 1_usize);
        _207 = BitAnd(_204, _206);
        _208 = Eq(_207, const 0_usize);
        assert(_208, "misaligned pointer dereference: address must be a multiple of {} but is {}", _205, _204) -> [success: bb58, unwind unreachable];
    }

    bb34: {
        _139 = core::panicking::AssertKind::Eq;
        _141 = Option::<Arguments<'_>>::None;
        _140 = core::panicking::assert_failed::<isize, isize>(move _139, _133, _134, move _141) -> bb54;
    }

    bb35: {
        _177 = const false;
        _143 = move _124;
        _142 = move _143 as std::boxed::Box<[isize]> (Pointer(Unsize));
        _146 = const 1_usize;
        _180 = (((_142.0: std::ptr::Unique<[isize]>).0: std::ptr::NonNull<[isize]>).0: *const [isize]);
        _197 = _180 as *const () (PtrToPtr);
        _198 = _197 as usize (Transmute);
        _199 = AlignOf(isize);
        _200 = Sub(_199, const 1_usize);
        _201 = BitAnd(_198, _200);
        _202 = Eq(_201, const 0_usize);
        assert(_202, "misaligned pointer dereference: address must be a multiple of {} but is {}", _199, _198) -> [success: bb57, unwind unreachable];
    }

    bb36: {
        _181 = (((_142.0: std::ptr::Unique<[isize]>).0: std::ptr::NonNull<[isize]>).0: *const [isize]);
        _191 = _181 as *const () (PtrToPtr);
        _192 = _191 as usize (Transmute);
        _193 = AlignOf(isize);
        _194 = Sub(_193, const 1_usize);
        _195 = BitAnd(_192, _194);
        _196 = Eq(_195, const 0_usize);
        assert(_196, "misaligned pointer dereference: address must be a multiple of {} but is {}", _193, _192) -> [success: bb56, unwind unreachable];
    }

    bb37: {
        _157 = core::panicking::AssertKind::Eq;
        _159 = Option::<Arguments<'_>>::None;
        _158 = core::panicking::assert_failed::<isize, isize>(move _157, _151, _152, move _159) -> bb49;
    }

    bb38: {
        _162 = [const 1_isize, const 2_isize, const 3_isize];
        _161 = Fat::<[isize; 3]> { f1: const 5_isize, f2: const "some str", ptr: move _162 };
        _160 = Box::<Fat<[isize; 3]>>::new(move _161) -> [return: bb39, unwind: bb49];
    }

    bb39: {
        _176 = const true;
        _182 = (((_160.0: std::ptr::Unique<Fat<[isize; 3]>>).0: std::ptr::NonNull<Fat<[isize; 3]>>).0: *const Fat<[isize; 3]>);
        _185 = _182 as *const () (PtrToPtr);
        _186 = _185 as usize (Transmute);
        _187 = AlignOf(Fat<[isize; 3]>);
        _188 = Sub(_187, const 1_usize);
        _189 = BitAnd(_186, _188);
        _190 = Eq(_189, const 0_usize);
        assert(_190, "misaligned pointer dereference: address must be a multiple of {} but is {}", _187, _186) -> [success: bb55, unwind unreachable];
    }

    bb40: {
        _176 = const false;
        _167 = move _160;
        _166 = move _167 as std::boxed::Box<Fat<[isize]>> (Pointer(Unsize));
        _183 = (((_166.0: std::ptr::Unique<Fat<[isize]>>).0: std::ptr::NonNull<Fat<[isize]>>).0: *const Fat<[isize]>);
        _169 = &(*_183);
        _168 = foo(_169) -> [return: bb41, unwind: bb48];
    }

    bb41: {
        _173 = [const 1_isize, const 2_isize, const 3_isize];
        _172 = Fat::<[isize; 3]> { f1: const 5_isize, f2: const "some str", ptr: move _173 };
        _171 = Box::<Fat<[isize; 3]>>::new(move _172) -> [return: bb42, unwind: bb48];
    }

    bb42: {
        _170 = move _171 as std::boxed::Box<Fat<[isize]>> (Pointer(Unsize));
        _184 = (((_170.0: std::ptr::Unique<Fat<[isize]>>).0: std::ptr::NonNull<Fat<[isize]>>).0: *const Fat<[isize]>);
        _175 = &(*_184);
        _174 = foo(_175) -> [return: bb43, unwind: bb47];
    }

    bb43: {
        drop(_170) -> [return: bb44, unwind: bb48];
    }

    bb44: {
        drop(_166) -> [return: bb45, unwind: bb52];
    }

    bb45: {
        _176 = const false;
        drop(_142) -> [return: bb46, unwind: bb54];
    }

    bb46: {
        _177 = const false;
        return;
    }

    bb47 (cleanup): {
        drop(_170) -> [return: bb48, unwind terminate];
    }

    bb48 (cleanup): {
        drop(_166) -> [return: bb52, unwind terminate];
    }

    bb49 (cleanup): {
        drop(_142) -> [return: bb54, unwind terminate];
    }

    bb50 (cleanup): {
        resume;
    }

    bb51 (cleanup): {
        drop(_160) -> [return: bb49, unwind terminate];
    }

    bb52 (cleanup): {
        switchInt(_176) -> [0: bb49, otherwise: bb51];
    }

    bb53 (cleanup): {
        drop(_124) -> [return: bb50, unwind terminate];
    }

    bb54 (cleanup): {
        switchInt(_177) -> [0: bb50, otherwise: bb53];
    }

    bb55: {
        _165 = &(*_182);
        _164 = _165 as &Fat<[isize]> (Pointer(Unsize));
        _163 = foo(move _164) -> [return: bb40, unwind: bb52];
    }

    bb56: {
        _145 = &(*_181)[_146];
        _150 = const 2_isize;
        _149 = &_150;
        _144 = (move _145, move _149);
        _151 = (_144.0: &isize);
        _152 = (_144.1: &isize);
        _155 = (*_151);
        _156 = (*_152);
        _154 = Eq(move _155, move _156);
        _153 = Not(move _154);
        switchInt(move _153) -> [0: bb38, otherwise: bb37];
    }

    bb57: {
        _147 = Len((*_180));
        _148 = Lt(_146, _147);
        assert(move _148, "index out of bounds: the length is {} but the index is {}", move _147, _146) -> [success: bb36, unwind: bb49];
    }

    bb58: {
        _127 = &(*_179)[_128];
        _132 = const 2_isize;
        _131 = &_132;
        _126 = (move _127, move _131);
        _133 = (_126.0: &isize);
        _134 = (_126.1: &isize);
        _137 = (*_133);
        _138 = (*_134);
        _136 = Eq(move _137, move _138);
        _135 = Not(move _136);
        switchInt(move _135) -> [0: bb35, otherwise: bb34];
    }

    bb59: {
        _129 = const 3_usize;
        _130 = Lt(_128, _129);
        assert(move _130, "index out of bounds: the length is {} but the index is {}", move _129, _128) -> [success: bb33, unwind: bb54];
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}
