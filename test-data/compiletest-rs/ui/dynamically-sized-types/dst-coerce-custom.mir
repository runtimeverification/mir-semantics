// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/dynamically-sized-types/dst-coerce-custom.rs:19:1: 19:17>::get(_1: &i32) -> i32 {
    debug self => _1;
    let mut _0: i32;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Bar<[i32; 3]>;
    let mut _2: *const [i32; 3];
    let _3: &[i32; 3];
    let _4: [i32; 3];
    let mut _6: (&i32, &i32);
    let mut _7: &i32;
    let _8: usize;
    let mut _9: usize;
    let mut _10: bool;
    let mut _11: &i32;
    let _12: i32;
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: i32;
    let mut _18: i32;
    let _20: !;
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _22: (&i32, &i32);
    let mut _23: &i32;
    let _24: usize;
    let mut _25: usize;
    let mut _26: bool;
    let mut _27: &i32;
    let _28: i32;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: i32;
    let mut _34: i32;
    let _36: !;
    let mut _37: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _38: (&i32, &i32);
    let mut _39: &i32;
    let _40: usize;
    let mut _41: usize;
    let mut _42: bool;
    let mut _43: &i32;
    let _44: i32;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: i32;
    let mut _50: i32;
    let _52: !;
    let mut _53: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _55: *const i32;
    let _56: &i32;
    let _57: i32;
    let mut _59: (&i32, &i32);
    let mut _60: &i32;
    let _61: i32;
    let mut _62: &dyn Baz;
    let mut _63: &i32;
    let _64: i32;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: i32;
    let mut _70: i32;
    let _72: !;
    let mut _73: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _74: *const [i32];
    let mut _75: *const [i32];
    let mut _76: *const [i32];
    let mut _77: *const [i32];
    let mut _78: *const [i32];
    let mut _79: *const [i32];
    let mut _80: *const dyn Baz;
    scope 1 {
        debug a => _1;
        let _5: Bar<[i32]>;
        scope 2 {
            debug b => _5;
            let _54: Bar<i32>;
            scope 3 {
                let _13: &i32;
                let _14: &i32;
                let _29: &i32;
                let _30: &i32;
                let _45: &i32;
                let _46: &i32;
                let mut _81: *const ();
                let mut _82: usize;
                let mut _83: usize;
                let mut _84: usize;
                let mut _85: usize;
                let mut _86: bool;
                let mut _87: *const ();
                let mut _88: usize;
                let mut _89: usize;
                let mut _90: usize;
                let mut _91: usize;
                let mut _92: bool;
                let mut _93: *const ();
                let mut _94: usize;
                let mut _95: usize;
                let mut _96: usize;
                let mut _97: usize;
                let mut _98: bool;
                let mut _99: *const ();
                let mut _100: usize;
                let mut _101: usize;
                let mut _102: usize;
                let mut _103: usize;
                let mut _104: bool;
                let mut _105: *const ();
                let mut _106: usize;
                let mut _107: usize;
                let mut _108: usize;
                let mut _109: usize;
                let mut _110: bool;
                let mut _111: *const ();
                let mut _112: usize;
                let mut _113: usize;
                let mut _114: usize;
                let mut _115: usize;
                let mut _116: bool;
                scope 4 {
                    debug left_val => _13;
                    debug right_val => _14;
                    let _19: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _19;
                    }
                }
                scope 6 {
                    debug left_val => _29;
                    debug right_val => _30;
                    let _35: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _35;
                    }
                }
                scope 8 {
                    debug left_val => _45;
                    debug right_val => _46;
                    let _51: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _51;
                    }
                }
            }
            scope 10 {
                debug a => _54;
                let _58: Bar<dyn Baz>;
                scope 11 {
                    debug b => _58;
                    scope 12 {
                        let _65: &i32;
                        let _66: &i32;
                        scope 13 {
                            debug left_val => _65;
                            debug right_val => _66;
                            let _71: core::panicking::AssertKind;
                            scope 14 {
                                debug kind => _71;
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _4 = [const 1_i32, const 2_i32, const 3_i32];
        _3 = &_4;
        _2 = &raw const (*_3);
        _1 = Bar::<[i32; 3]> { x: move _2 };
        _5 = move _1 as Bar<[i32]> (Pointer(Unsize));
        _8 = const 0_usize;
        _74 = deref_copy (_5.0: *const [i32]);
        _111 = _74 as *const () (PtrToPtr);
        _112 = _111 as usize (Transmute);
        _113 = AlignOf(i32);
        _114 = Sub(_113, const 1_usize);
        _115 = BitAnd(_112, _114);
        _116 = Eq(_115, const 0_usize);
        assert(_116, "misaligned pointer dereference: address must be a multiple of {} but is {}", _113, _112) -> [success: bb18, unwind unreachable];
    }

    bb1: {
        _75 = deref_copy (_5.0: *const [i32]);
        _105 = _75 as *const () (PtrToPtr);
        _106 = _105 as usize (Transmute);
        _107 = AlignOf(i32);
        _108 = Sub(_107, const 1_usize);
        _109 = BitAnd(_106, _108);
        _110 = Eq(_109, const 0_usize);
        assert(_110, "misaligned pointer dereference: address must be a multiple of {} but is {}", _107, _106) -> [success: bb17, unwind unreachable];
    }

    bb2: {
        _19 = core::panicking::AssertKind::Eq;
        _21 = Option::<Arguments<'_>>::None;
        _20 = core::panicking::assert_failed::<i32, i32>(move _19, _13, _14, move _21);
    }

    bb3: {
        _24 = const 1_usize;
        _76 = deref_copy (_5.0: *const [i32]);
        _99 = _76 as *const () (PtrToPtr);
        _100 = _99 as usize (Transmute);
        _101 = AlignOf(i32);
        _102 = Sub(_101, const 1_usize);
        _103 = BitAnd(_100, _102);
        _104 = Eq(_103, const 0_usize);
        assert(_104, "misaligned pointer dereference: address must be a multiple of {} but is {}", _101, _100) -> [success: bb16, unwind unreachable];
    }

    bb4: {
        _77 = deref_copy (_5.0: *const [i32]);
        _93 = _77 as *const () (PtrToPtr);
        _94 = _93 as usize (Transmute);
        _95 = AlignOf(i32);
        _96 = Sub(_95, const 1_usize);
        _97 = BitAnd(_94, _96);
        _98 = Eq(_97, const 0_usize);
        assert(_98, "misaligned pointer dereference: address must be a multiple of {} but is {}", _95, _94) -> [success: bb15, unwind unreachable];
    }

    bb5: {
        _35 = core::panicking::AssertKind::Eq;
        _37 = Option::<Arguments<'_>>::None;
        _36 = core::panicking::assert_failed::<i32, i32>(move _35, _29, _30, move _37);
    }

    bb6: {
        _40 = const 2_usize;
        _78 = deref_copy (_5.0: *const [i32]);
        _87 = _78 as *const () (PtrToPtr);
        _88 = _87 as usize (Transmute);
        _89 = AlignOf(i32);
        _90 = Sub(_89, const 1_usize);
        _91 = BitAnd(_88, _90);
        _92 = Eq(_91, const 0_usize);
        assert(_92, "misaligned pointer dereference: address must be a multiple of {} but is {}", _89, _88) -> [success: bb14, unwind unreachable];
    }

    bb7: {
        _79 = deref_copy (_5.0: *const [i32]);
        _81 = _79 as *const () (PtrToPtr);
        _82 = _81 as usize (Transmute);
        _83 = AlignOf(i32);
        _84 = Sub(_83, const 1_usize);
        _85 = BitAnd(_82, _84);
        _86 = Eq(_85, const 0_usize);
        assert(_86, "misaligned pointer dereference: address must be a multiple of {} but is {}", _83, _82) -> [success: bb13, unwind unreachable];
    }

    bb8: {
        _51 = core::panicking::AssertKind::Eq;
        _53 = Option::<Arguments<'_>>::None;
        _52 = core::panicking::assert_failed::<i32, i32>(move _51, _45, _46, move _53);
    }

    bb9: {
        _57 = const 42_i32;
        _56 = &_57;
        _55 = &raw const (*_56);
        _54 = Bar::<i32> { x: move _55 };
        _58 = move _54 as Bar<dyn Baz> (Pointer(Unsize));
        _80 = deref_copy (_58.0: *const dyn Baz);
        _62 = &(*_80);
        _61 = <dyn Baz as Baz>::get(move _62) -> bb10;
    }

    bb10: {
        _60 = &_61;
        _64 = const 42_i32;
        _63 = &_64;
        _59 = (move _60, move _63);
        _65 = (_59.0: &i32);
        _66 = (_59.1: &i32);
        _69 = (*_65);
        _70 = (*_66);
        _68 = Eq(move _69, move _70);
        _67 = Not(move _68);
        switchInt(move _67) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _71 = core::panicking::AssertKind::Eq;
        _73 = Option::<Arguments<'_>>::None;
        _72 = core::panicking::assert_failed::<i32, i32>(move _71, _65, _66, move _73);
    }

    bb12: {
        return;
    }

    bb13: {
        _39 = &(*_79)[_40];
        _44 = const 3_i32;
        _43 = &_44;
        _38 = (move _39, move _43);
        _45 = (_38.0: &i32);
        _46 = (_38.1: &i32);
        _49 = (*_45);
        _50 = (*_46);
        _48 = Eq(move _49, move _50);
        _47 = Not(move _48);
        switchInt(move _47) -> [0: bb9, otherwise: bb8];
    }

    bb14: {
        _41 = Len((*_78));
        _42 = Lt(_40, _41);
        assert(move _42, "index out of bounds: the length is {} but the index is {}", move _41, _40) -> bb7;
    }

    bb15: {
        _23 = &(*_77)[_24];
        _28 = const 2_i32;
        _27 = &_28;
        _22 = (move _23, move _27);
        _29 = (_22.0: &i32);
        _30 = (_22.1: &i32);
        _33 = (*_29);
        _34 = (*_30);
        _32 = Eq(move _33, move _34);
        _31 = Not(move _32);
        switchInt(move _31) -> [0: bb6, otherwise: bb5];
    }

    bb16: {
        _25 = Len((*_76));
        _26 = Lt(_24, _25);
        assert(move _26, "index out of bounds: the length is {} but the index is {}", move _25, _24) -> bb4;
    }

    bb17: {
        _7 = &(*_75)[_8];
        _12 = const 1_i32;
        _11 = &_12;
        _6 = (move _7, move _11);
        _13 = (_6.0: &i32);
        _14 = (_6.1: &i32);
        _17 = (*_13);
        _18 = (*_14);
        _16 = Eq(move _17, move _18);
        _15 = Not(move _16);
        switchInt(move _15) -> [0: bb3, otherwise: bb2];
    }

    bb18: {
        _9 = Len((*_74));
        _10 = Lt(_8, _9);
        assert(move _10, "index out of bounds: the length is {} but the index is {}", move _9, _8) -> bb1;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}
