// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/dynamically-sized-types/dst-field-align.rs:12:1: 12:19>::get(_1: &usize) -> usize {
    debug self => _1;
    let mut _0: usize;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Baz<usize>;
    let mut _2: (&usize, &usize);
    let mut _3: &usize;
    let _4: usize;
    let mut _5: &usize;
    let mut _6: &usize;
    let _7: usize;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let _18: &Baz<usize>;
    let mut _19: (&usize, &usize);
    let mut _20: &usize;
    let _21: usize;
    let mut _22: &dyn Bar;
    let mut _23: &usize;
    let _24: usize;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: usize;
    let mut _30: usize;
    let _32: !;
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _35: (&usize, &usize);
    let mut _36: &usize;
    let _37: usize;
    let mut _38: &usize;
    let mut _39: &usize;
    let _40: usize;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: usize;
    let mut _46: usize;
    let _48: !;
    let mut _49: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _51: *const usize;
    let _52: &usize;
    let _54: &Foo<usize>;
    let mut _56: *const dyn Bar;
    let _57: &dyn Bar;
    let mut _58: (&usize, &usize);
    let mut _59: &usize;
    let _60: usize;
    let mut _61: &dyn Bar;
    let mut _62: &usize;
    let _63: usize;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: usize;
    let mut _69: usize;
    let _71: !;
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _73: (&*const u8, &*const u8);
    let mut _74: &*const u8;
    let mut _75: &*const u8;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: *const u8;
    let mut _81: *const u8;
    let _83: !;
    let mut _84: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _86: Foo<usize>;
    let mut _87: (&usize, &usize);
    let mut _88: &usize;
    let _89: usize;
    let mut _90: &usize;
    let mut _91: &usize;
    let _92: usize;
    let mut _95: bool;
    let mut _96: bool;
    let mut _97: usize;
    let mut _98: usize;
    let _100: !;
    let mut _101: std::option::Option<std::fmt::Arguments<'_>>;
    let _103: &Foo<Foo<usize>>;
    let mut _104: (&usize, &usize);
    let mut _105: &usize;
    let _106: usize;
    let mut _107: &dyn Bar;
    let mut _108: &usize;
    let _109: usize;
    let mut _112: bool;
    let mut _113: bool;
    let mut _114: usize;
    let mut _115: usize;
    let _117: !;
    let mut _118: std::option::Option<std::fmt::Arguments<'_>>;
    let _121: &Foo<usize>;
    let mut _123: (&usize, &usize);
    let mut _124: &usize;
    let _125: usize;
    let mut _126: &usize;
    let _127: usize;
    let mut _130: bool;
    let mut _131: bool;
    let mut _132: usize;
    let mut _133: usize;
    let _135: !;
    let mut _136: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _138: std::boxed::Box<usize>;
    let mut _139: Baz<[i32; 4]>;
    let mut _140: [i32; 4];
    let mut _141: (&[i32; 4], &[i32; 4]);
    let mut _142: &[i32; 4];
    let _143: [i32; 4];
    let mut _144: &[i32; 4];
    let mut _147: bool;
    let mut _148: bool;
    let _150: !;
    let mut _151: std::option::Option<std::fmt::Arguments<'_>>;
    let _153: &HasDrop<Baz<[i32; 4]>>;
    let mut _154: (&&[i32; 4], &&[i32]);
    let mut _155: &&[i32; 4];
    let _156: &[i32; 4];
    let _157: [i32; 4];
    let mut _158: &&[i32];
    let _159: &[i32];
    let mut _162: bool;
    let mut _163: bool;
    let _165: !;
    let mut _166: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug b => _1;
        let _8: &usize;
        let _9: &usize;
        let _17: &Baz<dyn Bar>;
        scope 2 {
            debug left_val => _8;
            debug right_val => _9;
            let _14: core::panicking::AssertKind;
            scope 3 {
                debug kind => _14;
            }
        }
        scope 4 {
            debug b => _17;
            let _25: &usize;
            let _26: &usize;
            let _34: Foo<usize>;
            scope 5 {
                debug left_val => _25;
                debug right_val => _26;
                let _31: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _31;
                }
            }
            scope 7 {
                debug f => _34;
                let _41: &usize;
                let _42: &usize;
                let _50: *const u8;
                scope 8 {
                    debug left_val => _41;
                    debug right_val => _42;
                    let _47: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _47;
                    }
                }
                scope 10 {
                    debug ptr1 => _50;
                    let _53: &Foo<dyn Bar>;
                    scope 11 {
                        debug f => _53;
                        let _55: *const u8;
                        scope 12 {
                            debug ptr2 => _55;
                            let _64: &usize;
                            let _65: &usize;
                            let _76: &*const u8;
                            let _77: &*const u8;
                            let _85: Foo<Foo<usize>>;
                            scope 13 {
                                debug left_val => _64;
                                debug right_val => _65;
                                let _70: core::panicking::AssertKind;
                                scope 14 {
                                    debug kind => _70;
                                }
                            }
                            scope 15 {
                                debug left_val => _76;
                                debug right_val => _77;
                                let _82: core::panicking::AssertKind;
                                scope 16 {
                                    debug kind => _82;
                                }
                            }
                            scope 17 {
                                debug f => _85;
                                let _93: &usize;
                                let _94: &usize;
                                let _102: &Foo<Foo<dyn Bar>>;
                                scope 18 {
                                    debug left_val => _93;
                                    debug right_val => _94;
                                    let _99: core::panicking::AssertKind;
                                    scope 19 {
                                        debug kind => _99;
                                    }
                                }
                                scope 20 {
                                    debug f => _102;
                                    let _110: &usize;
                                    let _111: &usize;
                                    let _119: Foo<usize>;
                                    scope 21 {
                                        debug left_val => _110;
                                        debug right_val => _111;
                                        let _116: core::panicking::AssertKind;
                                        scope 22 {
                                            debug kind => _116;
                                        }
                                    }
                                    scope 23 {
                                        debug f => _119;
                                        let _120: &Foo<dyn Bar>;
                                        scope 24 {
                                            debug f => _120;
                                            let _122: &dyn Bar;
                                            scope 25 {
                                                debug bar => _122;
                                                let _128: &usize;
                                                let _129: &usize;
                                                let _137: HasDrop<Baz<[i32; 4]>>;
                                                scope 26 {
                                                    debug left_val => _128;
                                                    debug right_val => _129;
                                                    let _134: core::panicking::AssertKind;
                                                    scope 27 {
                                                        debug kind => _134;
                                                    }
                                                }
                                                scope 28 {
                                                    debug d => _137;
                                                    let _145: &[i32; 4];
                                                    let _146: &[i32; 4];
                                                    let _152: &HasDrop<Baz<[i32]>>;
                                                    scope 29 {
                                                        debug left_val => _145;
                                                        debug right_val => _146;
                                                        let _149: core::panicking::AssertKind;
                                                        scope 30 {
                                                            debug kind => _149;
                                                        }
                                                    }
                                                    scope 31 {
                                                        debug d => _152;
                                                        let _160: &&[i32; 4];
                                                        let _161: &&[i32];
                                                        scope 32 {
                                                            debug left_val => _160;
                                                            debug right_val => _161;
                                                            let _164: core::panicking::AssertKind;
                                                            scope 33 {
                                                                debug kind => _164;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = Baz::<usize> { a: const 7_usize };
        _5 = &(_1.0: usize);
        _4 = <usize as Bar>::get(move _5) -> bb1;
    }

    bb1: {
        _3 = &_4;
        _7 = const 7_usize;
        _6 = &_7;
        _2 = (move _3, move _6);
        _8 = (_2.0: &usize);
        _9 = (_2.1: &usize);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<usize, usize>(move _14, _8, _9, move _16);
    }

    bb3: {
        _18 = &_1;
        _17 = _18 as &Baz<dyn Bar> (Pointer(Unsize));
        _22 = &((*_17).0: dyn Bar);
        _21 = <dyn Bar as Bar>::get(move _22) -> bb4;
    }

    bb4: {
        _20 = &_21;
        _24 = const 7_usize;
        _23 = &_24;
        _19 = (move _20, move _23);
        _25 = (_19.0: &usize);
        _26 = (_19.1: &usize);
        _29 = (*_25);
        _30 = (*_26);
        _28 = Eq(move _29, move _30);
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _31 = core::panicking::AssertKind::Eq;
        _33 = Option::<Arguments<'_>>::None;
        _32 = core::panicking::assert_failed::<usize, usize>(move _31, _25, _26, move _33);
    }

    bb6: {
        _34 = Foo::<usize> { a: const 0_u16, b: const 11_usize };
        _38 = &(_34.1: usize);
        _37 = <usize as Bar>::get(move _38) -> bb7;
    }

    bb7: {
        _36 = &_37;
        _40 = const 11_usize;
        _39 = &_40;
        _35 = (move _36, move _39);
        _41 = (_35.0: &usize);
        _42 = (_35.1: &usize);
        _45 = (*_41);
        _46 = (*_42);
        _44 = Eq(move _45, move _46);
        _43 = Not(move _44);
        switchInt(move _43) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _47 = core::panicking::AssertKind::Eq;
        _49 = Option::<Arguments<'_>>::None;
        _48 = core::panicking::assert_failed::<usize, usize>(move _47, _41, _42, move _49);
    }

    bb9: {
        _52 = &(_34.1: usize);
        _51 = &raw const (*_52);
        _50 = _51 as *const u8 (PtrToPtr);
        _54 = &_34;
        _53 = _54 as &Foo<dyn Bar> (Pointer(Unsize));
        _57 = &((*_53).1: dyn Bar);
        _56 = &raw const (*_57);
        _55 = _56 as *const u8 (PtrToPtr);
        _61 = &((*_53).1: dyn Bar);
        _60 = <dyn Bar as Bar>::get(move _61) -> bb10;
    }

    bb10: {
        _59 = &_60;
        _63 = const 11_usize;
        _62 = &_63;
        _58 = (move _59, move _62);
        _64 = (_58.0: &usize);
        _65 = (_58.1: &usize);
        _68 = (*_64);
        _69 = (*_65);
        _67 = Eq(move _68, move _69);
        _66 = Not(move _67);
        switchInt(move _66) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _70 = core::panicking::AssertKind::Eq;
        _72 = Option::<Arguments<'_>>::None;
        _71 = core::panicking::assert_failed::<usize, usize>(move _70, _64, _65, move _72);
    }

    bb12: {
        _74 = &_50;
        _75 = &_55;
        _73 = (move _74, move _75);
        _76 = (_73.0: &*const u8);
        _77 = (_73.1: &*const u8);
        _80 = (*_76);
        _81 = (*_77);
        _79 = Eq(move _80, move _81);
        _78 = Not(move _79);
        switchInt(move _78) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _82 = core::panicking::AssertKind::Eq;
        _84 = Option::<Arguments<'_>>::None;
        _83 = core::panicking::assert_failed::<*const u8, *const u8>(move _82, _76, _77, move _84);
    }

    bb14: {
        _86 = Foo::<usize> { a: const 1_u16, b: const 17_usize };
        _85 = Foo::<Foo<usize>> { a: const 0_u16, b: move _86 };
        _90 = &((_85.1: Foo<usize>).1: usize);
        _89 = <usize as Bar>::get(move _90) -> bb15;
    }

    bb15: {
        _88 = &_89;
        _92 = const 17_usize;
        _91 = &_92;
        _87 = (move _88, move _91);
        _93 = (_87.0: &usize);
        _94 = (_87.1: &usize);
        _97 = (*_93);
        _98 = (*_94);
        _96 = Eq(move _97, move _98);
        _95 = Not(move _96);
        switchInt(move _95) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _99 = core::panicking::AssertKind::Eq;
        _101 = Option::<Arguments<'_>>::None;
        _100 = core::panicking::assert_failed::<usize, usize>(move _99, _93, _94, move _101);
    }

    bb17: {
        _103 = &_85;
        _102 = _103 as &Foo<Foo<dyn Bar>> (Pointer(Unsize));
        _107 = &(((*_102).1: Foo<dyn Bar>).1: dyn Bar);
        _106 = <dyn Bar as Bar>::get(move _107) -> bb18;
    }

    bb18: {
        _105 = &_106;
        _109 = const 17_usize;
        _108 = &_109;
        _104 = (move _105, move _108);
        _110 = (_104.0: &usize);
        _111 = (_104.1: &usize);
        _114 = (*_110);
        _115 = (*_111);
        _113 = Eq(move _114, move _115);
        _112 = Not(move _113);
        switchInt(move _112) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _116 = core::panicking::AssertKind::Eq;
        _118 = Option::<Arguments<'_>>::None;
        _117 = core::panicking::assert_failed::<usize, usize>(move _116, _110, _111, move _118);
    }

    bb20: {
        _119 = Foo::<usize> { a: const 0_u16, b: const 11_usize };
        _121 = &_119;
        _120 = _121 as &Foo<dyn Bar> (Pointer(Unsize));
        _122 = &((*_120).1: dyn Bar);
        _125 = <dyn Bar as Bar>::get(_122) -> bb21;
    }

    bb21: {
        _124 = &_125;
        _127 = const 11_usize;
        _126 = &_127;
        _123 = (move _124, move _126);
        _128 = (_123.0: &usize);
        _129 = (_123.1: &usize);
        _132 = (*_128);
        _133 = (*_129);
        _131 = Eq(move _132, move _133);
        _130 = Not(move _131);
        switchInt(move _130) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        _134 = core::panicking::AssertKind::Eq;
        _136 = Option::<Arguments<'_>>::None;
        _135 = core::panicking::assert_failed::<usize, usize>(move _134, _128, _129, move _136);
    }

    bb23: {
        _138 = Box::<usize>::new(const 0_usize) -> bb24;
    }

    bb24: {
        _140 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32];
        _139 = Baz::<[i32; 4]> { a: move _140 };
        _137 = HasDrop::<Baz<[i32; 4]>> { ptr: move _138, data: move _139 };
        _143 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32];
        _142 = &_143;
        _144 = &((_137.1: Baz<[i32; 4]>).0: [i32; 4]);
        _141 = (move _142, move _144);
        _145 = (_141.0: &[i32; 4]);
        _146 = (_141.1: &[i32; 4]);
        _148 = <[i32; 4] as PartialEq>::eq(_145, _146) -> [return: bb25, unwind: bb32];
    }

    bb25: {
        _147 = Not(move _148);
        switchInt(move _147) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _149 = core::panicking::AssertKind::Eq;
        _151 = Option::<Arguments<'_>>::None;
        _150 = core::panicking::assert_failed::<[i32; 4], [i32; 4]>(move _149, _145, _146, move _151) -> bb32;
    }

    bb27: {
        _153 = &_137;
        _152 = _153 as &HasDrop<Baz<[i32]>> (Pointer(Unsize));
        _157 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32];
        _156 = &_157;
        _155 = &_156;
        _159 = &(((*_152).1: Baz<[i32]>).0: [i32]);
        _158 = &_159;
        _154 = (move _155, move _158);
        _160 = (_154.0: &&[i32; 4]);
        _161 = (_154.1: &&[i32]);
        _163 = <&[i32; 4] as PartialEq<&[i32]>>::eq(_160, _161) -> [return: bb28, unwind: bb32];
    }

    bb28: {
        _162 = Not(move _163);
        switchInt(move _162) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _164 = core::panicking::AssertKind::Eq;
        _166 = Option::<Arguments<'_>>::None;
        _165 = core::panicking::assert_failed::<&[i32; 4], &[i32]>(move _164, _160, _161, move _166) -> bb32;
    }

    bb30: {
        drop(_137) -> bb31;
    }

    bb31: {
        return;
    }

    bb32 (cleanup): {
        drop(_137) -> [return: bb33, unwind terminate];
    }

    bb33 (cleanup): {
        resume;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}
