// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/dynamically-sized-types/dst-deref.rs:11:1: 11:19>::deref(_1: &Arr) -> &[usize] {
    debug self => _1;
    let mut _0: &[usize];
    let mut _2: std::boxed::Box<[usize]>;
    let mut _3: *const [usize];
    let mut _4: *const ();
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: bool;

    bb0: {
        _2 = deref_copy ((*_1).0: std::boxed::Box<[usize]>);
        _3 = (((_2.0: std::ptr::Unique<[usize]>).0: std::ptr::NonNull<[usize]>).0: *const [usize]);
        _4 = _3 as *const () (PtrToPtr);
        _5 = _4 as usize (Transmute);
        _6 = AlignOf(usize);
        _7 = Sub(_6, const 1_usize);
        _8 = BitAnd(_5, _7);
        _9 = Eq(_8, const 0_usize);
        assert(_9, "misaligned pointer dereference: address must be a multiple of {} but is {}", _6, _5) -> [success: bb1, unwind unreachable];
    }

    bb1: {
        _0 = &(*_3);
        return;
    }
}

fn foo(_1: &Arr) -> () {
    debug arr => _1;
    let mut _0: ();
    let mut _2: (&usize, &usize);
    let mut _3: &usize;
    let _4: usize;
    let mut _5: &[usize];
    let _6: &[usize];
    let mut _7: &usize;
    let _8: usize;
    let _9: &usize;
    let _10: &usize;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: usize;
    let mut _14: usize;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let _18: &[usize];
    let _19: &[usize];
    let mut _20: (&usize, &usize);
    let mut _21: &usize;
    let _22: usize;
    let mut _23: usize;
    let mut _24: bool;
    let mut _25: &usize;
    let _26: usize;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: usize;
    let mut _32: usize;
    let _34: !;
    let mut _35: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _36: (&usize, &usize);
    let mut _37: &usize;
    let _38: usize;
    let mut _39: usize;
    let mut _40: bool;
    let mut _41: &usize;
    let _42: usize;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: usize;
    let mut _48: usize;
    let _50: !;
    let mut _51: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _52: (&usize, &usize);
    let mut _53: &usize;
    let _54: usize;
    let mut _55: usize;
    let mut _56: bool;
    let mut _57: &usize;
    let _58: usize;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: usize;
    let mut _64: usize;
    let _66: !;
    let mut _67: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _9;
        debug right_val => _10;
        let _15: core::panicking::AssertKind;
        scope 2 {
            debug kind => _15;
        }
    }
    scope 3 {
        debug x => _18;
        let _27: &usize;
        let _28: &usize;
        let _43: &usize;
        let _44: &usize;
        let _59: &usize;
        let _60: &usize;
        scope 4 {
            debug left_val => _27;
            debug right_val => _28;
            let _33: core::panicking::AssertKind;
            scope 5 {
                debug kind => _33;
            }
        }
        scope 6 {
            debug left_val => _43;
            debug right_val => _44;
            let _49: core::panicking::AssertKind;
            scope 7 {
                debug kind => _49;
            }
        }
        scope 8 {
            debug left_val => _59;
            debug right_val => _60;
            let _65: core::panicking::AssertKind;
            scope 9 {
                debug kind => _65;
            }
        }
    }

    bb0: {
        _6 = <Arr as Deref>::deref(_1) -> bb1;
    }

    bb1: {
        _5 = _6;
        _4 = Len((*_5));
        _3 = &_4;
        _8 = const 3_usize;
        _7 = &_8;
        _2 = (move _3, move _7);
        _9 = (_2.0: &usize);
        _10 = (_2.1: &usize);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<usize, usize>(move _15, _9, _10, move _17);
    }

    bb3: {
        _19 = <Arr as Deref>::deref(_1) -> bb4;
    }

    bb4: {
        _18 = _19;
        _22 = const 0_usize;
        _23 = Len((*_18));
        _24 = Lt(_22, _23);
        assert(move _24, "index out of bounds: the length is {} but the index is {}", move _23, _22) -> bb5;
    }

    bb5: {
        _21 = &(*_18)[_22];
        _26 = const 1_usize;
        _25 = &_26;
        _20 = (move _21, move _25);
        _27 = (_20.0: &usize);
        _28 = (_20.1: &usize);
        _31 = (*_27);
        _32 = (*_28);
        _30 = Eq(move _31, move _32);
        _29 = Not(move _30);
        switchInt(move _29) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _33 = core::panicking::AssertKind::Eq;
        _35 = Option::<Arguments<'_>>::None;
        _34 = core::panicking::assert_failed::<usize, usize>(move _33, _27, _28, move _35);
    }

    bb7: {
        _38 = const 1_usize;
        _39 = Len((*_18));
        _40 = Lt(_38, _39);
        assert(move _40, "index out of bounds: the length is {} but the index is {}", move _39, _38) -> bb8;
    }

    bb8: {
        _37 = &(*_18)[_38];
        _42 = const 2_usize;
        _41 = &_42;
        _36 = (move _37, move _41);
        _43 = (_36.0: &usize);
        _44 = (_36.1: &usize);
        _47 = (*_43);
        _48 = (*_44);
        _46 = Eq(move _47, move _48);
        _45 = Not(move _46);
        switchInt(move _45) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _49 = core::panicking::AssertKind::Eq;
        _51 = Option::<Arguments<'_>>::None;
        _50 = core::panicking::assert_failed::<usize, usize>(move _49, _43, _44, move _51);
    }

    bb10: {
        _54 = const 2_usize;
        _55 = Len((*_18));
        _56 = Lt(_54, _55);
        assert(move _56, "index out of bounds: the length is {} but the index is {}", move _55, _54) -> bb11;
    }

    bb11: {
        _53 = &(*_18)[_54];
        _58 = const 3_usize;
        _57 = &_58;
        _52 = (move _53, move _57);
        _59 = (_52.0: &usize);
        _60 = (_52.1: &usize);
        _63 = (*_59);
        _64 = (*_60);
        _62 = Eq(move _63, move _64);
        _61 = Not(move _62);
        switchInt(move _61) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _65 = core::panicking::AssertKind::Eq;
        _67 = Option::<Arguments<'_>>::None;
        _66 = core::panicking::assert_failed::<usize, usize>(move _65, _59, _60, move _67);
    }

    bb13: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Arr;
    let mut _2: std::boxed::Box<[usize]>;
    let mut _3: std::boxed::Box<[usize; 3]>;
    let mut _4: [usize; 3];
    let _5: ();
    let _6: &Arr;
    scope 1 {
        debug a => _1;
    }

    bb0: {
        _4 = [const 1_usize, const 2_usize, const 3_usize];
        _3 = Box::<[usize; 3]>::new(move _4) -> bb1;
    }

    bb1: {
        _2 = move _3 as std::boxed::Box<[usize]> (Pointer(Unsize));
        _1 = Arr { ptr: move _2 };
        _6 = &_1;
        _5 = foo(_6) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_1) -> bb3;
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_1) -> [return: bb5, unwind terminate];
    }

    bb5 (cleanup): {
        resume;
    }
}
