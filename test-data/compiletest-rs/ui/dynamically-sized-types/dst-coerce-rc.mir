// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/dynamically-sized-types/dst-coerce-rc.rs:15:1: 15:17>::get(_1: &i32) -> i32 {
    debug self => _1;
    let mut _0: i32;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::rc::Rc<[i32; 3]>;
    let mut _2: [i32; 3];
    let mut _4: std::rc::Rc<[i32; 3]>;
    let mut _5: (&i32, &i32);
    let mut _6: &i32;
    let _7: &[i32];
    let mut _8: &std::rc::Rc<[i32]>;
    let _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _12: &i32;
    let _13: i32;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: i32;
    let mut _19: i32;
    let _21: !;
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _23: (&i32, &i32);
    let mut _24: &i32;
    let _25: &[i32];
    let mut _26: &std::rc::Rc<[i32]>;
    let _27: usize;
    let mut _28: usize;
    let mut _29: bool;
    let mut _30: &i32;
    let _31: i32;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: i32;
    let mut _37: i32;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _41: (&i32, &i32);
    let mut _42: &i32;
    let _43: &[i32];
    let mut _44: &std::rc::Rc<[i32]>;
    let _45: usize;
    let mut _46: usize;
    let mut _47: bool;
    let mut _48: &i32;
    let _49: i32;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: i32;
    let mut _55: i32;
    let _57: !;
    let mut _58: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _61: std::rc::Rc<i32>;
    let mut _62: &std::rc::Rc<i32>;
    let mut _63: (&i32, &i32);
    let mut _64: &i32;
    let _65: i32;
    let mut _66: &dyn Baz;
    let _67: &dyn Baz;
    let mut _68: &std::rc::Rc<dyn Baz>;
    let mut _69: &i32;
    let _70: i32;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: i32;
    let mut _76: i32;
    let _78: !;
    let mut _79: std::option::Option<std::fmt::Arguments<'_>>;
    let _81: &std::rc::Rc<i32>;
    let mut _83: std::rc::Weak<i32>;
    let mut _84: &std::rc::Weak<i32>;
    let mut _86: &std::rc::Rc<dyn Baz>;
    let mut _88: std::cell::RefCell<i32>;
    let mut _90: std::rc::Rc<std::cell::RefCell<i32>>;
    let mut _91: &std::rc::Rc<std::cell::RefCell<i32>>;
    let mut _92: (&i32, &i32);
    let mut _93: &i32;
    let _94: i32;
    let mut _95: &dyn Baz;
    let _96: &dyn Baz;
    let mut _97: &std::cell::Ref<'_, dyn Baz>;
    let _98: std::cell::Ref<'_, dyn Baz>;
    let mut _99: &std::cell::RefCell<dyn Baz>;
    let _100: &std::cell::RefCell<dyn Baz>;
    let mut _101: &std::rc::Rc<std::cell::RefCell<dyn Baz>>;
    let mut _102: &i32;
    let _103: i32;
    let mut _106: bool;
    let mut _107: bool;
    let mut _108: i32;
    let mut _109: i32;
    let _111: !;
    let mut _112: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _114: std::rc::Weak<std::cell::RefCell<dyn Baz>>;
    let mut _115: std::rc::Weak<std::cell::RefCell<i32>>;
    let _116: &std::rc::Rc<std::cell::RefCell<i32>>;
    scope 1 {
        debug a => _1;
        let _3: std::rc::Rc<[i32]>;
        scope 2 {
            debug b => _3;
            let _14: &i32;
            let _15: &i32;
            let _32: &i32;
            let _33: &i32;
            let _50: &i32;
            let _51: &i32;
            let _59: std::rc::Rc<i32>;
            scope 3 {
                debug left_val => _14;
                debug right_val => _15;
                let _20: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _20;
                }
            }
            scope 5 {
                debug left_val => _32;
                debug right_val => _33;
                let _38: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _38;
                }
            }
            scope 7 {
                debug left_val => _50;
                debug right_val => _51;
                let _56: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _56;
                }
            }
            scope 9 {
                debug a => _59;
                let _60: std::rc::Rc<dyn Baz>;
                scope 10 {
                    debug b => _60;
                    let _71: &i32;
                    let _72: &i32;
                    let _80: std::rc::Weak<i32>;
                    scope 11 {
                        debug left_val => _71;
                        debug right_val => _72;
                        let _77: core::panicking::AssertKind;
                        scope 12 {
                            debug kind => _77;
                        }
                    }
                    scope 13 {
                        debug c => _80;
                        let _82: std::rc::Weak<dyn Baz>;
                        scope 14 {
                            debug d => _82;
                            let _85: std::rc::Rc<dyn Baz>;
                            scope 15 {
                                debug _c => _85;
                                let _87: std::rc::Rc<std::cell::RefCell<i32>>;
                                scope 16 {
                                    debug a => _87;
                                    let _89: std::rc::Rc<std::cell::RefCell<dyn Baz>>;
                                    scope 17 {
                                        debug b => _89;
                                        let _104: &i32;
                                        let _105: &i32;
                                        let _113: std::rc::Weak<std::cell::RefCell<dyn Baz>>;
                                        scope 18 {
                                            debug left_val => _104;
                                            debug right_val => _105;
                                            let _110: core::panicking::AssertKind;
                                            scope 19 {
                                                debug kind => _110;
                                            }
                                        }
                                        scope 20 {
                                            debug c => _113;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = [const 1_i32, const 2_i32, const 3_i32];
        _1 = Rc::<[i32; 3]>::new(move _2) -> bb1;
    }

    bb1: {
        _4 = move _1;
        _3 = move _4 as std::rc::Rc<[i32]> (Pointer(Unsize));
        _8 = &_3;
        _7 = <Rc<[i32]> as Deref>::deref(move _8) -> [return: bb2, unwind: bb51];
    }

    bb2: {
        _9 = const 0_usize;
        _10 = Len((*_7));
        _11 = Lt(_9, _10);
        assert(move _11, "index out of bounds: the length is {} but the index is {}", move _10, _9) -> [success: bb3, unwind: bb51];
    }

    bb3: {
        _6 = &(*_7)[_9];
        _13 = const 1_i32;
        _12 = &_13;
        _5 = (move _6, move _12);
        _14 = (_5.0: &i32);
        _15 = (_5.1: &i32);
        _18 = (*_14);
        _19 = (*_15);
        _17 = Eq(move _18, move _19);
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _20 = core::panicking::AssertKind::Eq;
        _22 = Option::<Arguments<'_>>::None;
        _21 = core::panicking::assert_failed::<i32, i32>(move _20, _14, _15, move _22) -> bb51;
    }

    bb5: {
        _26 = &_3;
        _25 = <Rc<[i32]> as Deref>::deref(move _26) -> [return: bb6, unwind: bb51];
    }

    bb6: {
        _27 = const 1_usize;
        _28 = Len((*_25));
        _29 = Lt(_27, _28);
        assert(move _29, "index out of bounds: the length is {} but the index is {}", move _28, _27) -> [success: bb7, unwind: bb51];
    }

    bb7: {
        _24 = &(*_25)[_27];
        _31 = const 2_i32;
        _30 = &_31;
        _23 = (move _24, move _30);
        _32 = (_23.0: &i32);
        _33 = (_23.1: &i32);
        _36 = (*_32);
        _37 = (*_33);
        _35 = Eq(move _36, move _37);
        _34 = Not(move _35);
        switchInt(move _34) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<i32, i32>(move _38, _32, _33, move _40) -> bb51;
    }

    bb9: {
        _44 = &_3;
        _43 = <Rc<[i32]> as Deref>::deref(move _44) -> [return: bb10, unwind: bb51];
    }

    bb10: {
        _45 = const 2_usize;
        _46 = Len((*_43));
        _47 = Lt(_45, _46);
        assert(move _47, "index out of bounds: the length is {} but the index is {}", move _46, _45) -> [success: bb11, unwind: bb51];
    }

    bb11: {
        _42 = &(*_43)[_45];
        _49 = const 3_i32;
        _48 = &_49;
        _41 = (move _42, move _48);
        _50 = (_41.0: &i32);
        _51 = (_41.1: &i32);
        _54 = (*_50);
        _55 = (*_51);
        _53 = Eq(move _54, move _55);
        _52 = Not(move _53);
        switchInt(move _52) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _56 = core::panicking::AssertKind::Eq;
        _58 = Option::<Arguments<'_>>::None;
        _57 = core::panicking::assert_failed::<i32, i32>(move _56, _50, _51, move _58) -> bb51;
    }

    bb13: {
        _59 = Rc::<i32>::new(const 42_i32) -> [return: bb14, unwind: bb51];
    }

    bb14: {
        _62 = &_59;
        _61 = <Rc<i32> as Clone>::clone(move _62) -> [return: bb15, unwind: bb50];
    }

    bb15: {
        _60 = move _61 as std::rc::Rc<dyn Baz> (Pointer(Unsize));
        _68 = &_60;
        _67 = <Rc<dyn Baz> as Deref>::deref(move _68) -> [return: bb16, unwind: bb49];
    }

    bb16: {
        _66 = _67;
        _65 = <dyn Baz as Baz>::get(move _66) -> [return: bb17, unwind: bb49];
    }

    bb17: {
        _64 = &_65;
        _70 = const 42_i32;
        _69 = &_70;
        _63 = (move _64, move _69);
        _71 = (_63.0: &i32);
        _72 = (_63.1: &i32);
        _75 = (*_71);
        _76 = (*_72);
        _74 = Eq(move _75, move _76);
        _73 = Not(move _74);
        switchInt(move _73) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _77 = core::panicking::AssertKind::Eq;
        _79 = Option::<Arguments<'_>>::None;
        _78 = core::panicking::assert_failed::<i32, i32>(move _77, _71, _72, move _79) -> bb49;
    }

    bb19: {
        _81 = &_59;
        _80 = Rc::<i32>::downgrade(_81) -> [return: bb20, unwind: bb49];
    }

    bb20: {
        _84 = &_80;
        _83 = <std::rc::Weak<i32> as Clone>::clone(move _84) -> [return: bb21, unwind: bb48];
    }

    bb21: {
        _82 = move _83 as std::rc::Weak<dyn Baz> (Pointer(Unsize));
        _86 = &_60;
        _85 = <Rc<dyn Baz> as Clone>::clone(move _86) -> [return: bb22, unwind: bb47];
    }

    bb22: {
        _88 = RefCell::<i32>::new(const 42_i32) -> [return: bb23, unwind: bb46];
    }

    bb23: {
        _87 = Rc::<RefCell<i32>>::new(move _88) -> [return: bb24, unwind: bb46];
    }

    bb24: {
        _91 = &_87;
        _90 = <Rc<RefCell<i32>> as Clone>::clone(move _91) -> [return: bb25, unwind: bb45];
    }

    bb25: {
        _89 = move _90 as std::rc::Rc<std::cell::RefCell<dyn Baz>> (Pointer(Unsize));
        _101 = &_89;
        _100 = <Rc<RefCell<dyn Baz>> as Deref>::deref(move _101) -> [return: bb26, unwind: bb44];
    }

    bb26: {
        _99 = _100;
        _98 = RefCell::<dyn Baz>::borrow(move _99) -> [return: bb27, unwind: bb44];
    }

    bb27: {
        _97 = &_98;
        _96 = <Ref<'_, dyn Baz> as Deref>::deref(move _97) -> [return: bb28, unwind: bb43];
    }

    bb28: {
        _95 = _96;
        _94 = <dyn Baz as Baz>::get(move _95) -> [return: bb29, unwind: bb43];
    }

    bb29: {
        _93 = &_94;
        _103 = const 42_i32;
        _102 = &_103;
        _92 = (move _93, move _102);
        _104 = (_92.0: &i32);
        _105 = (_92.1: &i32);
        _108 = (*_104);
        _109 = (*_105);
        _107 = Eq(move _108, move _109);
        _106 = Not(move _107);
        switchInt(move _106) -> [0: bb31, otherwise: bb30];
    }

    bb30: {
        _110 = core::panicking::AssertKind::Eq;
        _112 = Option::<Arguments<'_>>::None;
        _111 = core::panicking::assert_failed::<i32, i32>(move _110, _104, _105, move _112) -> bb43;
    }

    bb31: {
        drop(_98) -> [return: bb32, unwind: bb44];
    }

    bb32: {
        _116 = &_87;
        _115 = Rc::<RefCell<i32>>::downgrade(_116) -> [return: bb33, unwind: bb44];
    }

    bb33: {
        _114 = move _115 as std::rc::Weak<std::cell::RefCell<dyn Baz>> (Pointer(Unsize));
        _113 = move _114;
        drop(_113) -> [return: bb34, unwind: bb44];
    }

    bb34: {
        drop(_89) -> [return: bb35, unwind: bb45];
    }

    bb35: {
        drop(_87) -> [return: bb36, unwind: bb46];
    }

    bb36: {
        drop(_85) -> [return: bb37, unwind: bb47];
    }

    bb37: {
        drop(_82) -> [return: bb38, unwind: bb48];
    }

    bb38: {
        drop(_80) -> [return: bb39, unwind: bb49];
    }

    bb39: {
        drop(_60) -> [return: bb40, unwind: bb50];
    }

    bb40: {
        drop(_59) -> [return: bb41, unwind: bb51];
    }

    bb41: {
        drop(_3) -> bb42;
    }

    bb42: {
        return;
    }

    bb43 (cleanup): {
        drop(_98) -> [return: bb44, unwind terminate];
    }

    bb44 (cleanup): {
        drop(_89) -> [return: bb45, unwind terminate];
    }

    bb45 (cleanup): {
        drop(_87) -> [return: bb46, unwind terminate];
    }

    bb46 (cleanup): {
        drop(_85) -> [return: bb47, unwind terminate];
    }

    bb47 (cleanup): {
        drop(_82) -> [return: bb48, unwind terminate];
    }

    bb48 (cleanup): {
        drop(_80) -> [return: bb49, unwind terminate];
    }

    bb49 (cleanup): {
        drop(_60) -> [return: bb50, unwind terminate];
    }

    bb50 (cleanup): {
        drop(_59) -> [return: bb51, unwind terminate];
    }

    bb51 (cleanup): {
        drop(_3) -> [return: bb52, unwind terminate];
    }

    bb52 (cleanup): {
        resume;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}
