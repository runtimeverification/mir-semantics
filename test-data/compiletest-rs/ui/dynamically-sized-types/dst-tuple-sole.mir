// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: &([isize],)) -> () {
    debug x => _1;
    let mut _0: ();
    let _2: &[isize];
    let mut _3: (&usize, &usize);
    let mut _4: &usize;
    let _5: usize;
    let mut _6: &[isize];
    let mut _7: &usize;
    let _8: usize;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: usize;
    let mut _14: usize;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: (&isize, &isize);
    let mut _19: &isize;
    let _20: usize;
    let mut _21: usize;
    let mut _22: bool;
    let mut _23: &isize;
    let _24: isize;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: isize;
    let mut _30: isize;
    let _32: !;
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _34: (&isize, &isize);
    let mut _35: &isize;
    let _36: usize;
    let mut _37: usize;
    let mut _38: bool;
    let mut _39: &isize;
    let _40: isize;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: isize;
    let mut _46: isize;
    let _48: !;
    let mut _49: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug y => _2;
        let _9: &usize;
        let _10: &usize;
        let _25: &isize;
        let _26: &isize;
        let _41: &isize;
        let _42: &isize;
        scope 2 {
            debug left_val => _9;
            debug right_val => _10;
            let _15: core::panicking::AssertKind;
            scope 3 {
                debug kind => _15;
            }
        }
        scope 4 {
            debug left_val => _25;
            debug right_val => _26;
            let _31: core::panicking::AssertKind;
            scope 5 {
                debug kind => _31;
            }
        }
        scope 6 {
            debug left_val => _41;
            debug right_val => _42;
            let _47: core::panicking::AssertKind;
            scope 7 {
                debug kind => _47;
            }
        }
    }

    bb0: {
        _2 = &((*_1).0: [isize]);
        _6 = &((*_1).0: [isize]);
        _5 = Len((*_6));
        _4 = &_5;
        _8 = const 3_usize;
        _7 = &_8;
        _3 = (move _4, move _7);
        _9 = (_3.0: &usize);
        _10 = (_3.1: &usize);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<usize, usize>(move _15, _9, _10, move _17);
    }

    bb2: {
        _20 = const 0_usize;
        _21 = Len((*_2));
        _22 = Lt(_20, _21);
        assert(move _22, "index out of bounds: the length is {} but the index is {}", move _21, _20) -> bb3;
    }

    bb3: {
        _19 = &(*_2)[_20];
        _24 = const 1_isize;
        _23 = &_24;
        _18 = (move _19, move _23);
        _25 = (_18.0: &isize);
        _26 = (_18.1: &isize);
        _29 = (*_25);
        _30 = (*_26);
        _28 = Eq(move _29, move _30);
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _31 = core::panicking::AssertKind::Eq;
        _33 = Option::<Arguments<'_>>::None;
        _32 = core::panicking::assert_failed::<isize, isize>(move _31, _25, _26, move _33);
    }

    bb5: {
        _36 = const 1_usize;
        _37 = Len(((*_1).0: [isize]));
        _38 = Lt(_36, _37);
        assert(move _38, "index out of bounds: the length is {} but the index is {}", move _37, _36) -> bb6;
    }

    bb6: {
        _35 = &((*_1).0: [isize])[_36];
        _40 = const 2_isize;
        _39 = &_40;
        _34 = (move _35, move _39);
        _41 = (_34.0: &isize);
        _42 = (_34.1: &isize);
        _45 = (*_41);
        _46 = (*_42);
        _44 = Eq(move _45, move _46);
        _43 = Not(move _44);
        switchInt(move _43) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _47 = core::panicking::AssertKind::Eq;
        _49 = Option::<Arguments<'_>>::None;
        _48 = core::panicking::assert_failed::<isize, isize>(move _47, _41, _42, move _49);
    }

    bb8: {
        return;
    }
}

fn foo2(_1: &([T],)) -> () {
    debug x => _1;
    let mut _0: ();
    let _2: &[T];
    let mut _4: (&usize, &usize);
    let mut _5: &usize;
    let _6: usize;
    let mut _7: &[T];
    let mut _8: &usize;
    let _9: usize;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: usize;
    let mut _15: usize;
    let _17: !;
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _19: (&Bar, &Bar);
    let mut _20: &Bar;
    let _21: Bar;
    let mut _22: &T;
    let _23: usize;
    let mut _24: usize;
    let mut _25: bool;
    let mut _26: &Bar;
    let mut _29: bool;
    let mut _30: bool;
    let _32: !;
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _34: (&Bar, &Bar);
    let mut _35: &Bar;
    let _36: Bar;
    let mut _37: &T;
    let _38: usize;
    let mut _39: usize;
    let mut _40: bool;
    let mut _41: &Bar;
    let mut _44: bool;
    let mut _45: bool;
    let _47: !;
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug y => _2;
        let _3: Bar;
        scope 2 {
            debug bar => const Bar;
            let _10: &usize;
            let _11: &usize;
            let _27: &Bar;
            let _28: &Bar;
            let _42: &Bar;
            let _43: &Bar;
            scope 3 {
                debug left_val => _10;
                debug right_val => _11;
                let _16: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _16;
                }
            }
            scope 5 {
                debug left_val => _27;
                debug right_val => _28;
                let _31: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _31;
                }
            }
            scope 7 {
                debug left_val => _42;
                debug right_val => _43;
                let _46: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _46;
                }
            }
        }
    }

    bb0: {
        _2 = &((*_1).0: [T]);
        _7 = &((*_1).0: [T]);
        _6 = Len((*_7));
        _5 = &_6;
        _9 = const 3_usize;
        _8 = &_9;
        _4 = (move _5, move _8);
        _10 = (_4.0: &usize);
        _11 = (_4.1: &usize);
        _14 = (*_10);
        _15 = (*_11);
        _13 = Eq(move _14, move _15);
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _16 = core::panicking::AssertKind::Eq;
        _18 = Option::<Arguments<'_>>::None;
        _17 = core::panicking::assert_failed::<usize, usize>(move _16, _10, _11, move _18);
    }

    bb2: {
        _23 = const 0_usize;
        _24 = Len((*_2));
        _25 = Lt(_23, _24);
        assert(move _25, "index out of bounds: the length is {} but the index is {}", move _24, _23) -> bb3;
    }

    bb3: {
        _22 = &(*_2)[_23];
        _21 = <T as ToBar>::to_bar(move _22) -> bb4;
    }

    bb4: {
        _20 = &_21;
        _26 = &_3;
        _19 = (move _20, move _26);
        _27 = (_19.0: &Bar);
        _28 = (_19.1: &Bar);
        _30 = <Bar as PartialEq>::eq(_27, _28) -> bb5;
    }

    bb5: {
        _29 = Not(move _30);
        switchInt(move _29) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _31 = core::panicking::AssertKind::Eq;
        _33 = Option::<Arguments<'_>>::None;
        _32 = core::panicking::assert_failed::<Bar, Bar>(move _31, _27, _28, move _33);
    }

    bb7: {
        _38 = const 1_usize;
        _39 = Len(((*_1).0: [T]));
        _40 = Lt(_38, _39);
        assert(move _40, "index out of bounds: the length is {} but the index is {}", move _39, _38) -> bb8;
    }

    bb8: {
        _37 = &((*_1).0: [T])[_38];
        _36 = <T as ToBar>::to_bar(move _37) -> bb9;
    }

    bb9: {
        _35 = &_36;
        _41 = &_3;
        _34 = (move _35, move _41);
        _42 = (_34.0: &Bar);
        _43 = (_34.1: &Bar);
        _45 = <Bar as PartialEq>::eq(_42, _43) -> bb10;
    }

    bb10: {
        _44 = Not(move _45);
        switchInt(move _44) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _46 = core::panicking::AssertKind::Eq;
        _48 = Option::<Arguments<'_>>::None;
        _47 = core::panicking::assert_failed::<Bar, Bar>(move _46, _42, _43, move _48);
    }

    bb12: {
        return;
    }
}

fn <impl at ui/dynamically-sized-types/dst-tuple-sole.rs:28:16: 28:21>::clone(_1: &Bar) -> Bar {
    debug self => _1;
    let mut _0: Bar;

    bb0: {
        return;
    }
}

fn <impl at ui/dynamically-sized-types/dst-tuple-sole.rs:28:23: 28:32>::eq(_1: &Bar, _2: &Bar) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;

    bb0: {
        _0 = const true;
        return;
    }
}

fn <impl at ui/dynamically-sized-types/dst-tuple-sole.rs:28:34: 28:36>::assert_receiver_is_total_eq(_1: &Bar) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/dynamically-sized-types/dst-tuple-sole.rs:28:38: 28:43>::fmt(_1: &Bar, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "Bar";
        _0 = Formatter::<'_>::write_str(_2, _3) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/dynamically-sized-types/dst-tuple-sole.rs:35:1: 35:19>::to_bar(_1: &Bar) -> Bar {
    debug self => _1;
    let mut _0: Bar;

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ([isize; 3],);
    let mut _2: [isize; 3];
    let _3: ();
    let mut _4: &([isize],);
    let _5: &([isize; 3],);
    let _7: ();
    let mut _8: &([isize],);
    let _10: ();
    let _12: &([isize; 3],);
    let _13: ();
    let _15: &([isize; 3],);
    let _16: ([isize; 3],);
    let mut _17: [isize; 3];
    let _18: ();
    let _20: ();
    let mut _21: &([Bar],);
    let _22: &([Bar; 3],);
    let _24: ();
    let mut _25: &([Bar],);
    let _27: ();
    let _29: &([Bar; 3],);
    let _30: ();
    let _32: &([Bar; 3],);
    let _33: ([Bar; 3],);
    let _34: ();
    let mut _36: &mut ([isize; 3],);
    let mut _37: ([isize; 3],);
    let mut _38: [isize; 3];
    let _39: usize;
    let mut _40: usize;
    let mut _41: bool;
    let mut _42: (&isize, &isize);
    let mut _43: &isize;
    let _44: usize;
    let mut _45: usize;
    let mut _46: bool;
    let mut _47: &isize;
    let _48: isize;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: isize;
    let mut _54: isize;
    let _56: !;
    let mut _57: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _58: (&isize, &isize);
    let mut _59: &isize;
    let _60: usize;
    let mut _61: usize;
    let mut _62: bool;
    let mut _63: &isize;
    let _64: isize;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: isize;
    let mut _70: isize;
    let _72: !;
    let mut _73: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _74: (&isize, &isize);
    let mut _75: &isize;
    let _76: usize;
    let mut _77: usize;
    let mut _78: bool;
    let mut _79: &isize;
    let _80: isize;
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: isize;
    let mut _86: isize;
    let _88: !;
    let mut _89: std::option::Option<std::fmt::Arguments<'_>>;
    let _91: &([isize; 0],);
    let _92: ([isize; 0],);
    let mut _93: bool;
    let mut _94: bool;
    let mut _95: &[isize];
    let mut _96: !;
    let _98: &([Bar; 0],);
    let _99: ([Bar; 0],);
    let mut _100: bool;
    let mut _101: bool;
    let mut _102: &[Bar];
    let mut _103: !;
    scope 1 {
        debug f1 => _1;
        let _6: &([isize; 3],);
        scope 2 {
            debug f2 => _6;
            let _9: &([isize],);
            scope 3 {
                debug f3 => _9;
                let _11: &([isize],);
                scope 4 {
                    debug f4 => _11;
                    let _14: &([isize],);
                    scope 5 {
                        debug f5 => _14;
                        scope 6 {
                            debug bar => const Bar;
                            let _19: ([Bar; 3],);
                            scope 7 {
                                debug f1 => const ([Bar, Bar, Bar],);
                                let _23: &([Bar; 3],);
                                scope 8 {
                                    debug f2 => _23;
                                    let _26: &([Bar],);
                                    scope 9 {
                                        debug f3 => _26;
                                        let _28: &([Bar],);
                                        scope 10 {
                                            debug f4 => _28;
                                            let _31: &([Bar],);
                                            scope 11 {
                                                debug f5 => _31;
                                                let _35: &mut ([isize],);
                                                scope 12 {
                                                    debug f5 => _35;
                                                    let _49: &isize;
                                                    let _50: &isize;
                                                    let _65: &isize;
                                                    let _66: &isize;
                                                    let _81: &isize;
                                                    let _82: &isize;
                                                    let _90: &([isize],);
                                                    scope 13 {
                                                        debug left_val => _49;
                                                        debug right_val => _50;
                                                        let _55: core::panicking::AssertKind;
                                                        scope 14 {
                                                            debug kind => _55;
                                                        }
                                                    }
                                                    scope 15 {
                                                        debug left_val => _65;
                                                        debug right_val => _66;
                                                        let _71: core::panicking::AssertKind;
                                                        scope 16 {
                                                            debug kind => _71;
                                                        }
                                                    }
                                                    scope 17 {
                                                        debug left_val => _81;
                                                        debug right_val => _82;
                                                        let _87: core::panicking::AssertKind;
                                                        scope 18 {
                                                            debug kind => _87;
                                                        }
                                                    }
                                                    scope 19 {
                                                        debug f5 => _90;
                                                        let _97: &([Bar],);
                                                        scope 20 {
                                                            debug f5 => _97;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = [const 1_isize, const 2_isize, const 3_isize];
        _1 = (move _2,);
        _5 = &_1;
        _4 = _5 as &([isize],) (Pointer(Unsize));
        _3 = foo(move _4) -> bb1;
    }

    bb1: {
        _6 = &_1;
        _8 = _6 as &([isize],) (Pointer(Unsize));
        _7 = foo(move _8) -> bb2;
    }

    bb2: {
        _9 = _6 as &([isize],) (Pointer(Unsize));
        _10 = foo(_9) -> bb3;
    }

    bb3: {
        _12 = &_1;
        _11 = _12 as &([isize],) (Pointer(Unsize));
        _13 = foo(_11) -> bb4;
    }

    bb4: {
        _17 = [const 1_isize, const 2_isize, const 3_isize];
        _16 = (move _17,);
        _15 = &_16;
        _14 = _15 as &([isize],) (Pointer(Unsize));
        _18 = foo(_14) -> bb5;
    }

    bb5: {
        _22 = &_19;
        _21 = _22 as &([Bar],) (Pointer(Unsize));
        _20 = foo2::<Bar>(move _21) -> bb6;
    }

    bb6: {
        _23 = &_19;
        _25 = _23 as &([Bar],) (Pointer(Unsize));
        _24 = foo2::<Bar>(move _25) -> bb7;
    }

    bb7: {
        _26 = _23 as &([Bar],) (Pointer(Unsize));
        _27 = foo2::<Bar>(_26) -> bb8;
    }

    bb8: {
        _29 = &_19;
        _28 = _29 as &([Bar],) (Pointer(Unsize));
        _30 = foo2::<Bar>(_28) -> bb9;
    }

    bb9: {
        _32 = &_33;
        _31 = _32 as &([Bar],) (Pointer(Unsize));
        _34 = foo2::<Bar>(_31) -> bb10;
    }

    bb10: {
        _38 = [const 1_isize, const 2_isize, const 3_isize];
        _37 = (move _38,);
        _36 = &mut _37;
        _35 = _36 as &mut ([isize],) (Pointer(Unsize));
        _39 = const 1_usize;
        _40 = Len(((*_35).0: [isize]));
        _41 = Lt(_39, _40);
        assert(move _41, "index out of bounds: the length is {} but the index is {}", move _40, _39) -> bb11;
    }

    bb11: {
        ((*_35).0: [isize])[_39] = const 34_isize;
        _44 = const 0_usize;
        _45 = Len(((*_35).0: [isize]));
        _46 = Lt(_44, _45);
        assert(move _46, "index out of bounds: the length is {} but the index is {}", move _45, _44) -> bb12;
    }

    bb12: {
        _43 = &((*_35).0: [isize])[_44];
        _48 = const 1_isize;
        _47 = &_48;
        _42 = (move _43, move _47);
        _49 = (_42.0: &isize);
        _50 = (_42.1: &isize);
        _53 = (*_49);
        _54 = (*_50);
        _52 = Eq(move _53, move _54);
        _51 = Not(move _52);
        switchInt(move _51) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _55 = core::panicking::AssertKind::Eq;
        _57 = Option::<Arguments<'_>>::None;
        _56 = core::panicking::assert_failed::<isize, isize>(move _55, _49, _50, move _57);
    }

    bb14: {
        _60 = const 1_usize;
        _61 = Len(((*_35).0: [isize]));
        _62 = Lt(_60, _61);
        assert(move _62, "index out of bounds: the length is {} but the index is {}", move _61, _60) -> bb15;
    }

    bb15: {
        _59 = &((*_35).0: [isize])[_60];
        _64 = const 34_isize;
        _63 = &_64;
        _58 = (move _59, move _63);
        _65 = (_58.0: &isize);
        _66 = (_58.1: &isize);
        _69 = (*_65);
        _70 = (*_66);
        _68 = Eq(move _69, move _70);
        _67 = Not(move _68);
        switchInt(move _67) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _71 = core::panicking::AssertKind::Eq;
        _73 = Option::<Arguments<'_>>::None;
        _72 = core::panicking::assert_failed::<isize, isize>(move _71, _65, _66, move _73);
    }

    bb17: {
        _76 = const 2_usize;
        _77 = Len(((*_35).0: [isize]));
        _78 = Lt(_76, _77);
        assert(move _78, "index out of bounds: the length is {} but the index is {}", move _77, _76) -> bb18;
    }

    bb18: {
        _75 = &((*_35).0: [isize])[_76];
        _80 = const 3_isize;
        _79 = &_80;
        _74 = (move _75, move _79);
        _81 = (_74.0: &isize);
        _82 = (_74.1: &isize);
        _85 = (*_81);
        _86 = (*_82);
        _84 = Eq(move _85, move _86);
        _83 = Not(move _84);
        switchInt(move _83) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _87 = core::panicking::AssertKind::Eq;
        _89 = Option::<Arguments<'_>>::None;
        _88 = core::panicking::assert_failed::<isize, isize>(move _87, _81, _82, move _89);
    }

    bb20: {
        _91 = &_92;
        _90 = _91 as &([isize],) (Pointer(Unsize));
        _95 = &((*_90).0: [isize]);
        _94 = core::slice::<impl [isize]>::is_empty(move _95) -> bb21;
    }

    bb21: {
        _93 = Not(move _94);
        switchInt(move _93) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        _96 = core::panicking::panic(const "assertion failed: f5.0.is_empty()");
    }

    bb23: {
        _98 = &_99;
        _97 = _98 as &([Bar],) (Pointer(Unsize));
        _102 = &((*_97).0: [Bar]);
        _101 = core::slice::<impl [Bar]>::is_empty(move _102) -> bb24;
    }

    bb24: {
        _100 = Not(move _101);
        switchInt(move _100) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _103 = core::panicking::panic(const "assertion failed: f5.0.is_empty()");
    }

    bb26: {
        return;
    }
}
