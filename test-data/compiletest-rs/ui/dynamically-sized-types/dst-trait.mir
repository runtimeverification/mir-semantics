// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/dynamically-sized-types/dst-trait.rs:9:16: 9:21>::clone(_1: &Bar) -> Bar {
    debug self => _1;
    let mut _0: Bar;

    bb0: {
        return;
    }
}

fn <impl at ui/dynamically-sized-types/dst-trait.rs:9:23: 9:32>::eq(_1: &Bar, _2: &Bar) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;

    bb0: {
        _0 = const true;
        return;
    }
}

fn <impl at ui/dynamically-sized-types/dst-trait.rs:9:34: 9:36>::assert_receiver_is_total_eq(_1: &Bar) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/dynamically-sized-types/dst-trait.rs:9:38: 9:43>::fmt(_1: &Bar, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "Bar";
        _0 = Formatter::<'_>::write_str(_2, _3) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/dynamically-sized-types/dst-trait.rs:12:16: 12:21>::clone(_1: &Bar1) -> Bar1 {
    debug self => _1;
    let mut _0: Bar1;
    scope 1 {
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn <impl at ui/dynamically-sized-types/dst-trait.rs:12:23: 12:32>::eq(_1: &Bar1, _2: &Bar1) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: isize;
    let mut _4: isize;

    bb0: {
        _3 = ((*_1).0: isize);
        _4 = ((*_2).0: isize);
        _0 = Eq(move _3, move _4);
        return;
    }
}

fn <impl at ui/dynamically-sized-types/dst-trait.rs:12:34: 12:36>::assert_receiver_is_total_eq(_1: &Bar1) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn <impl at ui/dynamically-sized-types/dst-trait.rs:22:1: 22:19>::to_bar(_1: &Bar) -> Bar {
    debug self => _1;
    let mut _0: Bar;

    bb0: {
        return;
    }
}

fn <impl at ui/dynamically-sized-types/dst-trait.rs:22:1: 22:19>::to_val(_1: &Bar) -> isize {
    debug self => _1;
    let mut _0: isize;

    bb0: {
        _0 = const 0_isize;
        return;
    }
}

fn <impl at ui/dynamically-sized-types/dst-trait.rs:30:1: 30:20>::to_bar(_1: &Bar1) -> Bar {
    debug self => _1;
    let mut _0: Bar;

    bb0: {
        return;
    }
}

fn <impl at ui/dynamically-sized-types/dst-trait.rs:30:1: 30:20>::to_val(_1: &Bar1) -> isize {
    debug self => _1;
    let mut _0: isize;

    bb0: {
        _0 = ((*_1).0: isize);
        return;
    }
}

fn foo(_1: &Fat<dyn ToBar>) -> () {
    debug x => _1;
    let mut _0: ();
    let mut _2: (&isize, &isize);
    let mut _3: &isize;
    let mut _4: &isize;
    let _5: isize;
    let _6: &isize;
    let _7: &isize;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: isize;
    let mut _11: isize;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&&str, &&str);
    let mut _16: &&str;
    let mut _17: &&str;
    let _18: &str;
    let _19: &&str;
    let _20: &&str;
    let mut _21: bool;
    let mut _22: bool;
    let _24: !;
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _26: (&Bar, &Bar);
    let mut _27: &Bar;
    let _28: Bar;
    let mut _29: &dyn ToBar;
    let mut _30: &Bar;
    let _31: Bar;
    let _32: &Bar;
    let _33: &Bar;
    let mut _34: bool;
    let mut _35: bool;
    let _37: !;
    let mut _38: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _39: (&isize, &isize);
    let mut _40: &isize;
    let _41: isize;
    let mut _42: &dyn ToBar;
    let mut _43: &isize;
    let _44: isize;
    let _45: &isize;
    let _46: &isize;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: isize;
    let mut _50: isize;
    let _52: !;
    let mut _53: std::option::Option<std::fmt::Arguments<'_>>;
    let _54: &dyn ToBar;
    let mut _55: (&Bar, &Bar);
    let mut _56: &Bar;
    let _57: Bar;
    let mut _58: &Bar;
    let _59: Bar;
    let mut _62: bool;
    let mut _63: bool;
    let _65: !;
    let mut _66: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _67: (&isize, &isize);
    let mut _68: &isize;
    let _69: isize;
    let mut _70: &isize;
    let _71: isize;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: isize;
    let mut _77: isize;
    let _79: !;
    let mut _80: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }
    scope 3 {
        debug left_val => _19;
        debug right_val => _20;
        let _23: core::panicking::AssertKind;
        scope 4 {
            debug kind => _23;
        }
    }
    scope 5 {
        debug left_val => _32;
        debug right_val => _33;
        let _36: core::panicking::AssertKind;
        scope 6 {
            debug kind => _36;
        }
    }
    scope 7 {
        debug left_val => _45;
        debug right_val => _46;
        let _51: core::panicking::AssertKind;
        scope 8 {
            debug kind => _51;
        }
    }
    scope 9 {
        debug y => _54;
        let _60: &Bar;
        let _61: &Bar;
        let _72: &isize;
        let _73: &isize;
        scope 10 {
            debug left_val => _60;
            debug right_val => _61;
            let _64: core::panicking::AssertKind;
            scope 11 {
                debug kind => _64;
            }
        }
        scope 12 {
            debug left_val => _72;
            debug right_val => _73;
            let _78: core::panicking::AssertKind;
            scope 13 {
                debug kind => _78;
            }
        }
    }

    bb0: {
        _3 = &((*_1).0: isize);
        _5 = const 5_isize;
        _4 = &_5;
        _2 = (move _3, move _4);
        _6 = (_2.0: &isize);
        _7 = (_2.1: &isize);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<isize, isize>(move _12, _6, _7, move _14);
    }

    bb2: {
        _16 = &((*_1).1: &str);
        _18 = const "some str";
        _17 = &_18;
        _15 = (move _16, move _17);
        _19 = (_15.0: &&str);
        _20 = (_15.1: &&str);
        _22 = <&str as PartialEq>::eq(_19, _20) -> bb3;
    }

    bb3: {
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _23 = core::panicking::AssertKind::Eq;
        _25 = Option::<Arguments<'_>>::None;
        _24 = core::panicking::assert_failed::<&str, &str>(move _23, _19, _20, move _25);
    }

    bb5: {
        _29 = &((*_1).2: dyn ToBar);
        _28 = <dyn ToBar as ToBar>::to_bar(move _29) -> bb6;
    }

    bb6: {
        _27 = &_28;
        _30 = &_31;
        _26 = (move _27, move _30);
        _32 = (_26.0: &Bar);
        _33 = (_26.1: &Bar);
        _35 = <Bar as PartialEq>::eq(_32, _33) -> bb7;
    }

    bb7: {
        _34 = Not(move _35);
        switchInt(move _34) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _36 = core::panicking::AssertKind::Eq;
        _38 = Option::<Arguments<'_>>::None;
        _37 = core::panicking::assert_failed::<Bar, Bar>(move _36, _32, _33, move _38);
    }

    bb9: {
        _42 = &((*_1).2: dyn ToBar);
        _41 = <dyn ToBar as ToBar>::to_val(move _42) -> bb10;
    }

    bb10: {
        _40 = &_41;
        _44 = const 42_isize;
        _43 = &_44;
        _39 = (move _40, move _43);
        _45 = (_39.0: &isize);
        _46 = (_39.1: &isize);
        _49 = (*_45);
        _50 = (*_46);
        _48 = Eq(move _49, move _50);
        _47 = Not(move _48);
        switchInt(move _47) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _51 = core::panicking::AssertKind::Eq;
        _53 = Option::<Arguments<'_>>::None;
        _52 = core::panicking::assert_failed::<isize, isize>(move _51, _45, _46, move _53);
    }

    bb12: {
        _54 = &((*_1).2: dyn ToBar);
        _57 = <dyn ToBar as ToBar>::to_bar(_54) -> bb13;
    }

    bb13: {
        _56 = &_57;
        _58 = &_59;
        _55 = (move _56, move _58);
        _60 = (_55.0: &Bar);
        _61 = (_55.1: &Bar);
        _63 = <Bar as PartialEq>::eq(_60, _61) -> bb14;
    }

    bb14: {
        _62 = Not(move _63);
        switchInt(move _62) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _64 = core::panicking::AssertKind::Eq;
        _66 = Option::<Arguments<'_>>::None;
        _65 = core::panicking::assert_failed::<Bar, Bar>(move _64, _60, _61, move _66);
    }

    bb16: {
        _69 = <dyn ToBar as ToBar>::to_val(_54) -> bb17;
    }

    bb17: {
        _68 = &_69;
        _71 = const 42_isize;
        _70 = &_71;
        _67 = (move _68, move _70);
        _72 = (_67.0: &isize);
        _73 = (_67.1: &isize);
        _76 = (*_72);
        _77 = (*_73);
        _75 = Eq(move _76, move _77);
        _74 = Not(move _75);
        switchInt(move _74) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _78 = core::panicking::AssertKind::Eq;
        _80 = Option::<Arguments<'_>>::None;
        _79 = core::panicking::assert_failed::<isize, isize>(move _78, _72, _73, move _80);
    }

    bb19: {
        return;
    }
}

fn bar(_1: &dyn ToBar) -> () {
    debug x => _1;
    let mut _0: ();
    let mut _2: (&Bar, &Bar);
    let mut _3: &Bar;
    let _4: Bar;
    let mut _5: &Bar;
    let _6: Bar;
    let _7: &Bar;
    let _8: &Bar;
    let mut _9: bool;
    let mut _10: bool;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: (&isize, &isize);
    let mut _15: &isize;
    let _16: isize;
    let mut _17: &isize;
    let _18: isize;
    let _19: &isize;
    let _20: &isize;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: isize;
    let mut _24: isize;
    let _26: !;
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _7;
        debug right_val => _8;
        let _11: core::panicking::AssertKind;
        scope 2 {
            debug kind => _11;
        }
    }
    scope 3 {
        debug left_val => _19;
        debug right_val => _20;
        let _25: core::panicking::AssertKind;
        scope 4 {
            debug kind => _25;
        }
    }

    bb0: {
        _4 = <dyn ToBar as ToBar>::to_bar(_1) -> bb1;
    }

    bb1: {
        _3 = &_4;
        _5 = &_6;
        _2 = (move _3, move _5);
        _7 = (_2.0: &Bar);
        _8 = (_2.1: &Bar);
        _10 = <Bar as PartialEq>::eq(_7, _8) -> bb2;
    }

    bb2: {
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<Bar, Bar>(move _11, _7, _8, move _13);
    }

    bb4: {
        _16 = <dyn ToBar as ToBar>::to_val(_1) -> bb5;
    }

    bb5: {
        _15 = &_16;
        _18 = const 42_isize;
        _17 = &_18;
        _14 = (move _15, move _17);
        _19 = (_14.0: &isize);
        _20 = (_14.1: &isize);
        _23 = (*_19);
        _24 = (*_20);
        _22 = Eq(move _23, move _24);
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _25 = core::panicking::AssertKind::Eq;
        _27 = Option::<Arguments<'_>>::None;
        _26 = core::panicking::assert_failed::<isize, isize>(move _25, _19, _20, move _27);
    }

    bb7: {
        return;
    }
}

fn baz(_1: &Fat<Fat<dyn ToBar>>) -> () {
    debug x => _1;
    let mut _0: ();
    let mut _2: (&isize, &isize);
    let mut _3: &isize;
    let mut _4: &isize;
    let _5: isize;
    let _6: &isize;
    let _7: &isize;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: isize;
    let mut _11: isize;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&&str, &&str);
    let mut _16: &&str;
    let mut _17: &&str;
    let _18: &str;
    let _19: &&str;
    let _20: &&str;
    let mut _21: bool;
    let mut _22: bool;
    let _24: !;
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _26: (&isize, &isize);
    let mut _27: &isize;
    let mut _28: &isize;
    let _29: isize;
    let _30: &isize;
    let _31: &isize;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: isize;
    let mut _35: isize;
    let _37: !;
    let mut _38: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _39: (&&str, &&str);
    let mut _40: &&str;
    let mut _41: &&str;
    let _42: &str;
    let _43: &&str;
    let _44: &&str;
    let mut _45: bool;
    let mut _46: bool;
    let _48: !;
    let mut _49: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _50: (&Bar, &Bar);
    let mut _51: &Bar;
    let _52: Bar;
    let mut _53: &dyn ToBar;
    let mut _54: &Bar;
    let _55: Bar;
    let _56: &Bar;
    let _57: &Bar;
    let mut _58: bool;
    let mut _59: bool;
    let _61: !;
    let mut _62: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _63: (&isize, &isize);
    let mut _64: &isize;
    let _65: isize;
    let mut _66: &dyn ToBar;
    let mut _67: &isize;
    let _68: isize;
    let _69: &isize;
    let _70: &isize;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: isize;
    let mut _74: isize;
    let _76: !;
    let mut _77: std::option::Option<std::fmt::Arguments<'_>>;
    let _78: &dyn ToBar;
    let mut _79: (&Bar, &Bar);
    let mut _80: &Bar;
    let _81: Bar;
    let mut _82: &Bar;
    let _83: Bar;
    let mut _86: bool;
    let mut _87: bool;
    let _89: !;
    let mut _90: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _91: (&isize, &isize);
    let mut _92: &isize;
    let _93: isize;
    let mut _94: &isize;
    let _95: isize;
    let mut _98: bool;
    let mut _99: bool;
    let mut _100: isize;
    let mut _101: isize;
    let _103: !;
    let mut _104: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }
    scope 3 {
        debug left_val => _19;
        debug right_val => _20;
        let _23: core::panicking::AssertKind;
        scope 4 {
            debug kind => _23;
        }
    }
    scope 5 {
        debug left_val => _30;
        debug right_val => _31;
        let _36: core::panicking::AssertKind;
        scope 6 {
            debug kind => _36;
        }
    }
    scope 7 {
        debug left_val => _43;
        debug right_val => _44;
        let _47: core::panicking::AssertKind;
        scope 8 {
            debug kind => _47;
        }
    }
    scope 9 {
        debug left_val => _56;
        debug right_val => _57;
        let _60: core::panicking::AssertKind;
        scope 10 {
            debug kind => _60;
        }
    }
    scope 11 {
        debug left_val => _69;
        debug right_val => _70;
        let _75: core::panicking::AssertKind;
        scope 12 {
            debug kind => _75;
        }
    }
    scope 13 {
        debug y => _78;
        let _84: &Bar;
        let _85: &Bar;
        let _96: &isize;
        let _97: &isize;
        scope 14 {
            debug left_val => _84;
            debug right_val => _85;
            let _88: core::panicking::AssertKind;
            scope 15 {
                debug kind => _88;
            }
        }
        scope 16 {
            debug left_val => _96;
            debug right_val => _97;
            let _102: core::panicking::AssertKind;
            scope 17 {
                debug kind => _102;
            }
        }
    }

    bb0: {
        _3 = &((*_1).0: isize);
        _5 = const 5_isize;
        _4 = &_5;
        _2 = (move _3, move _4);
        _6 = (_2.0: &isize);
        _7 = (_2.1: &isize);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<isize, isize>(move _12, _6, _7, move _14);
    }

    bb2: {
        _16 = &((*_1).1: &str);
        _18 = const "some str";
        _17 = &_18;
        _15 = (move _16, move _17);
        _19 = (_15.0: &&str);
        _20 = (_15.1: &&str);
        _22 = <&str as PartialEq>::eq(_19, _20) -> bb3;
    }

    bb3: {
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _23 = core::panicking::AssertKind::Eq;
        _25 = Option::<Arguments<'_>>::None;
        _24 = core::panicking::assert_failed::<&str, &str>(move _23, _19, _20, move _25);
    }

    bb5: {
        _27 = &(((*_1).2: Fat<dyn ToBar>).0: isize);
        _29 = const 8_isize;
        _28 = &_29;
        _26 = (move _27, move _28);
        _30 = (_26.0: &isize);
        _31 = (_26.1: &isize);
        _34 = (*_30);
        _35 = (*_31);
        _33 = Eq(move _34, move _35);
        _32 = Not(move _33);
        switchInt(move _32) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _36 = core::panicking::AssertKind::Eq;
        _38 = Option::<Arguments<'_>>::None;
        _37 = core::panicking::assert_failed::<isize, isize>(move _36, _30, _31, move _38);
    }

    bb7: {
        _40 = &(((*_1).2: Fat<dyn ToBar>).1: &str);
        _42 = const "deep str";
        _41 = &_42;
        _39 = (move _40, move _41);
        _43 = (_39.0: &&str);
        _44 = (_39.1: &&str);
        _46 = <&str as PartialEq>::eq(_43, _44) -> bb8;
    }

    bb8: {
        _45 = Not(move _46);
        switchInt(move _45) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _47 = core::panicking::AssertKind::Eq;
        _49 = Option::<Arguments<'_>>::None;
        _48 = core::panicking::assert_failed::<&str, &str>(move _47, _43, _44, move _49);
    }

    bb10: {
        _53 = &(((*_1).2: Fat<dyn ToBar>).2: dyn ToBar);
        _52 = <dyn ToBar as ToBar>::to_bar(move _53) -> bb11;
    }

    bb11: {
        _51 = &_52;
        _54 = &_55;
        _50 = (move _51, move _54);
        _56 = (_50.0: &Bar);
        _57 = (_50.1: &Bar);
        _59 = <Bar as PartialEq>::eq(_56, _57) -> bb12;
    }

    bb12: {
        _58 = Not(move _59);
        switchInt(move _58) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _60 = core::panicking::AssertKind::Eq;
        _62 = Option::<Arguments<'_>>::None;
        _61 = core::panicking::assert_failed::<Bar, Bar>(move _60, _56, _57, move _62);
    }

    bb14: {
        _66 = &(((*_1).2: Fat<dyn ToBar>).2: dyn ToBar);
        _65 = <dyn ToBar as ToBar>::to_val(move _66) -> bb15;
    }

    bb15: {
        _64 = &_65;
        _68 = const 42_isize;
        _67 = &_68;
        _63 = (move _64, move _67);
        _69 = (_63.0: &isize);
        _70 = (_63.1: &isize);
        _73 = (*_69);
        _74 = (*_70);
        _72 = Eq(move _73, move _74);
        _71 = Not(move _72);
        switchInt(move _71) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _75 = core::panicking::AssertKind::Eq;
        _77 = Option::<Arguments<'_>>::None;
        _76 = core::panicking::assert_failed::<isize, isize>(move _75, _69, _70, move _77);
    }

    bb17: {
        _78 = &(((*_1).2: Fat<dyn ToBar>).2: dyn ToBar);
        _81 = <dyn ToBar as ToBar>::to_bar(_78) -> bb18;
    }

    bb18: {
        _80 = &_81;
        _82 = &_83;
        _79 = (move _80, move _82);
        _84 = (_79.0: &Bar);
        _85 = (_79.1: &Bar);
        _87 = <Bar as PartialEq>::eq(_84, _85) -> bb19;
    }

    bb19: {
        _86 = Not(move _87);
        switchInt(move _86) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _88 = core::panicking::AssertKind::Eq;
        _90 = Option::<Arguments<'_>>::None;
        _89 = core::panicking::assert_failed::<Bar, Bar>(move _88, _84, _85, move _90);
    }

    bb21: {
        _93 = <dyn ToBar as ToBar>::to_val(_78) -> bb22;
    }

    bb22: {
        _92 = &_93;
        _95 = const 42_isize;
        _94 = &_95;
        _91 = (move _92, move _94);
        _96 = (_91.0: &isize);
        _97 = (_91.1: &isize);
        _100 = (*_96);
        _101 = (*_97);
        _99 = Eq(move _100, move _101);
        _98 = Not(move _99);
        switchInt(move _98) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _102 = core::panicking::AssertKind::Eq;
        _104 = Option::<Arguments<'_>>::None;
        _103 = core::panicking::assert_failed::<isize, isize>(move _102, _96, _97, move _104);
    }

    bb24: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Fat<Bar1>;
    let mut _2: Bar1;
    let _3: ();
    let mut _4: &Fat<dyn ToBar>;
    let _5: &Fat<Bar1>;
    let _7: ();
    let mut _8: &Fat<dyn ToBar>;
    let _10: ();
    let _12: &Fat<Bar1>;
    let _13: ();
    let _15: &Fat<Bar1>;
    let _16: Fat<Bar1>;
    let mut _17: Bar1;
    let _18: ();
    let _20: &Fat<Bar>;
    let _21: Fat<Bar>;
    let mut _22: (&Bar, &Bar);
    let mut _23: &Bar;
    let _24: Bar;
    let mut _25: &dyn ToBar;
    let mut _26: &Bar;
    let _27: Bar;
    let mut _30: bool;
    let mut _31: bool;
    let _33: !;
    let mut _34: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _36: std::boxed::Box<Bar1>;
    let mut _37: Bar1;
    let _38: ();
    let _39: &dyn ToBar;
    let mut _41: Fat<Bar1>;
    let mut _42: Bar1;
    let _43: ();
    let mut _44: &Fat<Fat<dyn ToBar>>;
    let _45: &Fat<Fat<Bar1>>;
    let _47: ();
    let mut _48: &Fat<Fat<dyn ToBar>>;
    let _50: ();
    let _52: &Fat<Fat<Bar1>>;
    let _53: ();
    let _55: &Fat<Fat<Bar1>>;
    let _56: Fat<Fat<Bar1>>;
    let mut _57: Fat<Bar1>;
    let mut _58: Bar1;
    let _59: ();
    let mut _60: *const dyn ToBar;
    scope 1 {
        debug f1 => _1;
        let _6: &Fat<Bar1>;
        scope 2 {
            debug f2 => _6;
            let _9: &Fat<dyn ToBar>;
            scope 3 {
                debug f3 => _9;
                let _11: &Fat<dyn ToBar>;
                scope 4 {
                    debug f4 => _11;
                    let _14: &Fat<dyn ToBar>;
                    scope 5 {
                        debug f5 => _14;
                        let _19: &Fat<dyn ToBar>;
                        scope 6 {
                            debug f6 => _19;
                            let _28: &Bar;
                            let _29: &Bar;
                            let _35: std::boxed::Box<dyn ToBar>;
                            scope 7 {
                                debug left_val => _28;
                                debug right_val => _29;
                                let _32: core::panicking::AssertKind;
                                scope 8 {
                                    debug kind => _32;
                                }
                            }
                            scope 9 {
                                debug f7 => _35;
                                let _40: Fat<Fat<Bar1>>;
                                scope 10 {
                                    debug f1 => _40;
                                    let _46: &Fat<Fat<Bar1>>;
                                    scope 11 {
                                        debug f2 => _46;
                                        let _49: &Fat<Fat<dyn ToBar>>;
                                        scope 12 {
                                            debug f3 => _49;
                                            let _51: &Fat<Fat<dyn ToBar>>;
                                            scope 13 {
                                                debug f4 => _51;
                                                let _54: &Fat<Fat<dyn ToBar>>;
                                                scope 14 {
                                                    debug f5 => _54;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = Bar1 { f: const 42_isize };
        _1 = Fat::<Bar1> { f1: const 5_isize, f2: const "some str", ptr: move _2 };
        _5 = &_1;
        _4 = _5 as &Fat<dyn ToBar> (Pointer(Unsize));
        _3 = foo(move _4) -> bb1;
    }

    bb1: {
        _6 = &_1;
        _8 = _6 as &Fat<dyn ToBar> (Pointer(Unsize));
        _7 = foo(move _8) -> bb2;
    }

    bb2: {
        _9 = _6 as &Fat<dyn ToBar> (Pointer(Unsize));
        _10 = foo(_9) -> bb3;
    }

    bb3: {
        _12 = &_1;
        _11 = _12 as &Fat<dyn ToBar> (Pointer(Unsize));
        _13 = foo(_11) -> bb4;
    }

    bb4: {
        _17 = Bar1 { f: const 42_isize };
        _16 = Fat::<Bar1> { f1: const 5_isize, f2: const "some str", ptr: move _17 };
        _15 = &_16;
        _14 = _15 as &Fat<dyn ToBar> (Pointer(Unsize));
        _18 = foo(_14) -> bb5;
    }

    bb5: {
        _21 = Fat::<Bar> { f1: const 5_isize, f2: const "some str", ptr: const Bar };
        _20 = &_21;
        _19 = _20 as &Fat<dyn ToBar> (Pointer(Unsize));
        _25 = &((*_19).2: dyn ToBar);
        _24 = <dyn ToBar as ToBar>::to_bar(move _25) -> bb6;
    }

    bb6: {
        _23 = &_24;
        _26 = &_27;
        _22 = (move _23, move _26);
        _28 = (_22.0: &Bar);
        _29 = (_22.1: &Bar);
        _31 = <Bar as PartialEq>::eq(_28, _29) -> bb7;
    }

    bb7: {
        _30 = Not(move _31);
        switchInt(move _30) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _32 = core::panicking::AssertKind::Eq;
        _34 = Option::<Arguments<'_>>::None;
        _33 = core::panicking::assert_failed::<Bar, Bar>(move _32, _28, _29, move _34);
    }

    bb9: {
        _37 = Bar1 { f: const 42_isize };
        _36 = Box::<Bar1>::new(move _37) -> bb10;
    }

    bb10: {
        _35 = move _36 as std::boxed::Box<dyn ToBar> (Pointer(Unsize));
        _60 = (((_35.0: std::ptr::Unique<dyn ToBar>).0: std::ptr::NonNull<dyn ToBar>).0: *const dyn ToBar);
        _39 = &(*_60);
        _38 = bar(_39) -> [return: bb11, unwind: bb18];
    }

    bb11: {
        _42 = Bar1 { f: const 42_isize };
        _41 = Fat::<Bar1> { f1: const 8_isize, f2: const "deep str", ptr: move _42 };
        _40 = Fat::<Fat<Bar1>> { f1: const 5_isize, f2: const "some str", ptr: move _41 };
        _45 = &_40;
        _44 = _45 as &Fat<Fat<dyn ToBar>> (Pointer(Unsize));
        _43 = baz(move _44) -> [return: bb12, unwind: bb18];
    }

    bb12: {
        _46 = &_40;
        _48 = _46 as &Fat<Fat<dyn ToBar>> (Pointer(Unsize));
        _47 = baz(move _48) -> [return: bb13, unwind: bb18];
    }

    bb13: {
        _49 = _46 as &Fat<Fat<dyn ToBar>> (Pointer(Unsize));
        _50 = baz(_49) -> [return: bb14, unwind: bb18];
    }

    bb14: {
        _52 = &_40;
        _51 = _52 as &Fat<Fat<dyn ToBar>> (Pointer(Unsize));
        _53 = baz(_51) -> [return: bb15, unwind: bb18];
    }

    bb15: {
        _58 = Bar1 { f: const 42_isize };
        _57 = Fat::<Bar1> { f1: const 8_isize, f2: const "deep str", ptr: move _58 };
        _56 = Fat::<Fat<Bar1>> { f1: const 5_isize, f2: const "some str", ptr: move _57 };
        _55 = &_56;
        _54 = _55 as &Fat<Fat<dyn ToBar>> (Pointer(Unsize));
        _59 = baz(_54) -> [return: bb16, unwind: bb18];
    }

    bb16: {
        drop(_35) -> bb17;
    }

    bb17: {
        return;
    }

    bb18 (cleanup): {
        drop(_35) -> [return: bb19, unwind terminate];
    }

    bb19 (cleanup): {
        resume;
    }
}
