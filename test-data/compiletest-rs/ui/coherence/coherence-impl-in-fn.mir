// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main::<impl at ui/coherence/coherence-impl-in-fn.rs:6:20: 6:25>::clone(_1: &x) -> x {
    debug self => _1;
    let mut _0: main::x;

    bb0: {
        return;
    }
}

fn main::<impl at ui/coherence/coherence-impl-in-fn.rs:8:5: 8:37>::eq(_1: &x, _2: &x) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: main::x;
    let mut _4: isize;
    let _5: main::x;
    let mut _6: isize;

    bb0: {
        _4 = discriminant(_3);
        _6 = discriminant(_5);
        _0 = Eq(move _4, move _6);
        return;
    }
}

fn main::<impl at ui/coherence/coherence-impl-in-fn.rs:8:5: 8:37>::ne(_1: &x, _2: &x) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;

    bb0: {
        _3 = <x as PartialEq>::eq(_1, _2) -> bb1;
    }

    bb1: {
        _0 = Not(move _3);
        return;
    }
}
