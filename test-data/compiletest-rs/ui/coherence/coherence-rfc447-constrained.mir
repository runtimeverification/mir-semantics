// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/coherence/coherence-rfc447-constrained.rs:16:1: 16:17>::name() -> &str {
    let mut _0: &str;

    bb0: {
        _0 = const "u64";
        return;
    }
}

fn <impl at ui/coherence/coherence-rfc447-constrained.rs:17:1: 17:23>::name() -> &str {
    let mut _0: &str;

    bb0: {
        _0 = const "Bar";
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&&str, &&str);
    let mut _2: &&str;
    let _3: &str;
    let mut _4: &&str;
    let _5: &str;
    let _6: &&str;
    let _7: &&str;
    let mut _8: bool;
    let mut _9: bool;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: (&&str, &&str);
    let mut _14: &&str;
    let _15: &str;
    let mut _16: &&str;
    let _17: &str;
    let _18: &&str;
    let _19: &&str;
    let mut _20: bool;
    let mut _21: bool;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }
    scope 3 {
        debug left_val => _18;
        debug right_val => _19;
        let _22: core::panicking::AssertKind;
        scope 4 {
            debug kind => _22;
        }
    }

    bb0: {
        _3 = <u64 as Foo>::name() -> bb1;
    }

    bb1: {
        _2 = &_3;
        _5 = const "u64";
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &&str);
        _7 = (_1.1: &&str);
        _9 = <&str as PartialEq>::eq(_6, _7) -> bb2;
    }

    bb2: {
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<&str, &str>(move _10, _6, _7, move _12);
    }

    bb4: {
        _15 = <u32 as Foo>::name() -> bb5;
    }

    bb5: {
        _14 = &_15;
        _17 = const "Bar";
        _16 = &_17;
        _13 = (move _14, move _16);
        _18 = (_13.0: &&str);
        _19 = (_13.1: &&str);
        _21 = <&str as PartialEq>::eq(_18, _19) -> bb6;
    }

    bb6: {
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<&str, &str>(move _22, _18, _19, move _24);
    }

    bb8: {
        return;
    }
}
