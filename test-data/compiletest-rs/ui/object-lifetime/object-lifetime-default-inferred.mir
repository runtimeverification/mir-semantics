// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Test::foo(_1: &Self) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn a(_1: [u8; N], _2: &dyn Test, _3: SomeStruct<'_>) -> () {
    debug t => _2;
    debug ss => _3;
    let mut _0: ();

    bb0: {
        (_3.0: &dyn Test) = _2;
        return;
    }
}

a::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn b(_1: T, _2: &dyn Test, _3: SomeStruct<'_>) -> () {
    debug t => _2;
    debug ss => _3;
    let mut _0: ();

    bb0: {
        (_3.1: &dyn Test) = _2;
        drop(_1) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: &dyn Test;
    let _3: &Foo;
    let _4: Foo;
    let mut _5: SomeStruct<'_>;
    let mut _6: &dyn Test;
    let _7: &Foo;
    let _8: Foo;
    let mut _9: &dyn Test;
    let _10: &Foo;
    let _11: Foo;
    let _12: ();
    let _13: &dyn Test;
    let _14: &Foo;
    let _15: Foo;
    let mut _16: SomeStruct<'_>;
    let mut _17: &dyn Test;
    let _18: &Foo;
    let _19: Foo;
    let mut _20: &dyn Test;
    let _21: &Foo;
    let _22: Foo;

    bb0: {
        _3 = &_4;
        _2 = _3 as &dyn Test (Pointer(Unsize));
        _7 = &_8;
        _6 = _7 as &dyn Test (Pointer(Unsize));
        _10 = &_11;
        _9 = _10 as &dyn Test (Pointer(Unsize));
        _5 = SomeStruct::<'_> { t: move _6, u: move _9 };
        _1 = a::<0>(const [], _2, move _5) -> bb1;
    }

    bb1: {
        _14 = &_15;
        _13 = _14 as &dyn Test (Pointer(Unsize));
        _18 = &_19;
        _17 = _18 as &dyn Test (Pointer(Unsize));
        _21 = &_22;
        _20 = _21 as &dyn Test (Pointer(Unsize));
        _16 = SomeStruct::<'_> { t: move _17, u: move _20 };
        _12 = b::<u8>(const 0_u8, _13, move _16) -> bb2;
    }

    bb2: {
        return;
    }
}
