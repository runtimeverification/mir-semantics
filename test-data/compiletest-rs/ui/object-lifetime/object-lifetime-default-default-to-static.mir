// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Test::foo(_1: &Self) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn a(_1: Box<dyn Test>, _2: SomeStruct) -> () {
    debug t => _1;
    debug ss => _2;
    let mut _0: ();

    bb0: {
        drop((_2.0: std::boxed::Box<dyn Test>)) -> [return: bb1, unwind: bb2];
    }

    bb1: {
        (_2.0: std::boxed::Box<dyn Test>) = move _1;
        drop(_2) -> bb3;
    }

    bb2 (cleanup): {
        (_2.0: std::boxed::Box<dyn Test>) = move _1;
        drop(_2) -> [return: bb4, unwind terminate];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        resume;
    }
}

fn b(_1: Box<dyn Test>, _2: SomeStruct) -> () {
    debug t => _1;
    debug ss => _2;
    let mut _0: ();

    bb0: {
        drop((_2.0: std::boxed::Box<dyn Test>)) -> [return: bb1, unwind: bb2];
    }

    bb1: {
        (_2.0: std::boxed::Box<dyn Test>) = move _1;
        drop(_2) -> bb3;
    }

    bb2 (cleanup): {
        (_2.0: std::boxed::Box<dyn Test>) = move _1;
        drop(_2) -> [return: bb4, unwind terminate];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        resume;
    }
}

fn c(_1: Box<dyn Test>, _2: SomeStruct) -> () {
    debug t => _1;
    debug ss => _2;
    let mut _0: ();

    bb0: {
        drop((_2.1: std::boxed::Box<dyn Test>)) -> [return: bb1, unwind: bb2];
    }

    bb1: {
        (_2.1: std::boxed::Box<dyn Test>) = move _1;
        drop(_2) -> bb3;
    }

    bb2 (cleanup): {
        (_2.1: std::boxed::Box<dyn Test>) = move _1;
        drop(_2) -> [return: bb4, unwind terminate];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        resume;
    }
}

fn d(_1: Box<dyn Test>, _2: SomeStruct) -> () {
    debug t => _1;
    debug ss => _2;
    let mut _0: ();

    bb0: {
        drop((_2.1: std::boxed::Box<dyn Test>)) -> [return: bb1, unwind: bb2];
    }

    bb1: {
        (_2.1: std::boxed::Box<dyn Test>) = move _1;
        drop(_2) -> bb3;
    }

    bb2 (cleanup): {
        (_2.1: std::boxed::Box<dyn Test>) = move _1;
        drop(_2) -> [return: bb4, unwind terminate];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
