// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f2(_1: F) -> () {
    debug _thing => _1;
    let mut _0: ();

    bb0: {
        drop(_1) -> bb1;
    }

    bb1: {
        return;
    }
}

fn f(_1: F) -> () {
    debug thing => _1;
    let mut _0: ();
    let _2: ();

    bb0: {
        _2 = f2::<F>(move _1) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();

    bb0: {
        _1 = f::<[closure@ui/moves/move-nullary-fn.rs:12:7: 12:9]>(const ZeroSized: [closure@ui/moves/move-nullary-fn.rs:12:7: 12:9]) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main::{closure#0}(_1: [closure@ui/moves/move-nullary-fn.rs:12:7: 12:9]) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
