// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/moves/move-3-unique.rs:5:10: 5:15>::clone(_1: &Triple) -> Triple {
    debug self => _1;
    let mut _0: Triple;
    let mut _2: isize;
    let _3: &isize;
    let mut _4: isize;
    let _5: &isize;
    let mut _6: isize;
    let _7: &isize;

    bb0: {
        _3 = &((*_1).0: isize);
        _2 = (*_3);
        _5 = &((*_1).1: isize);
        _4 = (*_5);
        _7 = &((*_1).2: isize);
        _6 = (*_7);
        _0 = Triple { x: move _2, y: move _4, z: move _6 };
        return;
    }
}

fn test(_1: bool, _2: Box<Triple>) -> isize {
    debug x => _1;
    debug foo => _2;
    let mut _0: isize;
    let _3: std::boxed::Box<Triple>;
    let mut _5: std::boxed::Box<Triple>;
    let mut _6: std::boxed::Box<Triple>;
    let mut _7: Triple;
    let mut _8: bool;
    let mut _9: *const Triple;
    scope 1 {
        debug bar => _3;
        let mut _4: std::boxed::Box<Triple>;
        scope 2 {
            debug y => _4;
            let mut _10: *const ();
            let mut _11: usize;
            let mut _12: usize;
            let mut _13: usize;
            let mut _14: usize;
            let mut _15: bool;
        }
    }

    bb0: {
        _8 = const false;
        _8 = const true;
        _3 = move _2;
        switchInt(_1) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _8 = const false;
        _5 = move _3;
        _4 = move _5;
        goto -> bb4;
    }

    bb2: {
        _7 = Triple { x: const 4_isize, y: const 5_isize, z: const 6_isize };
        _6 = Box::<Triple>::new(move _7) -> [return: bb3, unwind: bb10];
    }

    bb3: {
        _4 = move _6;
        goto -> bb4;
    }

    bb4: {
        _9 = (((_4.0: std::ptr::Unique<Triple>).0: std::ptr::NonNull<Triple>).0: *const Triple);
        _10 = _9 as *const () (PtrToPtr);
        _11 = _10 as usize (Transmute);
        _12 = AlignOf(Triple);
        _13 = Sub(_12, const 1_usize);
        _14 = BitAnd(_11, _13);
        _15 = Eq(_14, const 0_usize);
        assert(_15, "misaligned pointer dereference: address must be a multiple of {} but is {}", _12, _11) -> [success: bb11, unwind unreachable];
    }

    bb5: {
        switchInt(_8) -> [0: bb6, otherwise: bb8];
    }

    bb6: {
        _8 = const false;
        return;
    }

    bb7 (cleanup): {
        resume;
    }

    bb8: {
        drop(_3) -> bb6;
    }

    bb9 (cleanup): {
        drop(_3) -> [return: bb7, unwind terminate];
    }

    bb10 (cleanup): {
        switchInt(_8) -> [0: bb7, otherwise: bb9];
    }

    bb11: {
        _0 = ((*_9).1: isize);
        drop(_4) -> [return: bb5, unwind: bb10];
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::boxed::Box<Triple>;
    let mut _2: Triple;
    let mut _3: std::ops::Range<usize>;
    let mut _4: std::ops::Range<usize>;
    let mut _6: std::option::Option<usize>;
    let mut _7: &mut std::ops::Range<usize>;
    let mut _8: isize;
    let mut _9: (&isize, &isize);
    let mut _10: &isize;
    let _11: isize;
    let mut _12: std::boxed::Box<Triple>;
    let mut _13: &std::boxed::Box<Triple>;
    let mut _14: &isize;
    let _15: isize;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: isize;
    let mut _21: isize;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: (&isize, &isize);
    let mut _26: &isize;
    let _27: isize;
    let mut _28: std::boxed::Box<Triple>;
    let mut _29: &isize;
    let _30: isize;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: isize;
    let mut _36: isize;
    let _38: !;
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _40: bool;
    scope 1 {
        debug x => _1;
        let mut _5: std::ops::Range<usize>;
        let _31: &isize;
        let _32: &isize;
        scope 2 {
            debug iter => _5;
            let _16: &isize;
            let _17: &isize;
            scope 3 {
                debug left_val => _16;
                debug right_val => _17;
                let _22: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _22;
                }
            }
        }
        scope 5 {
            debug left_val => _31;
            debug right_val => _32;
            let _37: core::panicking::AssertKind;
            scope 6 {
                debug kind => _37;
            }
        }
    }

    bb0: {
        _40 = const false;
        _2 = Triple { x: const 1_isize, y: const 2_isize, z: const 3_isize };
        _40 = const true;
        _1 = Box::<Triple>::new(move _2) -> bb1;
    }

    bb1: {
        _4 = std::ops::Range::<usize> { start: const 0_usize, end: const 10000_usize };
        _3 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _4) -> [return: bb2, unwind: bb16];
    }

    bb2: {
        _5 = move _3;
        goto -> bb3;
    }

    bb3: {
        _7 = &mut _5;
        _6 = <std::ops::Range<usize> as Iterator>::next(_7) -> [return: bb4, unwind: bb16];
    }

    bb4: {
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        _13 = &_1;
        _12 = <Box<Triple> as Clone>::clone(move _13) -> [return: bb8, unwind: bb16];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _40 = const false;
        _28 = move _1;
        _27 = test(const false, move _28) -> [return: bb11, unwind: bb16];
    }

    bb8: {
        _11 = test(const true, move _12) -> [return: bb9, unwind: bb16];
    }

    bb9: {
        _10 = &_11;
        _15 = const 2_isize;
        _14 = &_15;
        _9 = (move _10, move _14);
        _16 = (_9.0: &isize);
        _17 = (_9.1: &isize);
        _20 = (*_16);
        _21 = (*_17);
        _19 = Eq(move _20, move _21);
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb3, otherwise: bb10];
    }

    bb10: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<isize, isize>(move _22, _16, _17, move _24) -> bb16;
    }

    bb11: {
        _26 = &_27;
        _30 = const 5_isize;
        _29 = &_30;
        _25 = (move _26, move _29);
        _31 = (_25.0: &isize);
        _32 = (_25.1: &isize);
        _35 = (*_31);
        _36 = (*_32);
        _34 = Eq(move _35, move _36);
        _33 = Not(move _34);
        switchInt(move _33) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _37 = core::panicking::AssertKind::Eq;
        _39 = Option::<Arguments<'_>>::None;
        _38 = core::panicking::assert_failed::<isize, isize>(move _37, _31, _32, move _39) -> bb16;
    }

    bb13: {
        _40 = const false;
        return;
    }

    bb14 (cleanup): {
        resume;
    }

    bb15 (cleanup): {
        drop(_1) -> [return: bb14, unwind terminate];
    }

    bb16 (cleanup): {
        switchInt(_40) -> [0: bb14, otherwise: bb15];
    }
}
