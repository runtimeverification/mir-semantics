// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/moves/move-1-unique.rs:5:10: 5:15>::clone(_1: &Triple) -> Triple {
    debug self => _1;
    let mut _0: Triple;
    let mut _2: isize;
    let _3: &isize;
    let mut _4: isize;
    let _5: &isize;
    let mut _6: isize;
    let _7: &isize;

    bb0: {
        _3 = &((*_1).0: isize);
        _2 = (*_3);
        _5 = &((*_1).1: isize);
        _4 = (*_5);
        _7 = &((*_1).2: isize);
        _6 = (*_7);
        _0 = Triple { x: move _2, y: move _4, z: move _6 };
        return;
    }
}

fn test(_1: bool, _2: Box<Triple>) -> isize {
    debug x => _1;
    debug foo => _2;
    let mut _0: isize;
    let _3: std::boxed::Box<Triple>;
    let mut _5: std::boxed::Box<Triple>;
    let mut _6: std::boxed::Box<Triple>;
    let mut _7: Triple;
    let mut _8: bool;
    let mut _9: *const Triple;
    scope 1 {
        debug bar => _3;
        let mut _4: std::boxed::Box<Triple>;
        scope 2 {
            debug y => _4;
            let mut _10: *const ();
            let mut _11: usize;
            let mut _12: usize;
            let mut _13: usize;
            let mut _14: usize;
            let mut _15: bool;
        }
    }

    bb0: {
        _8 = const false;
        _8 = const true;
        _3 = move _2;
        switchInt(_1) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _8 = const false;
        _5 = move _3;
        _4 = move _5;
        goto -> bb4;
    }

    bb2: {
        _7 = Triple { x: const 4_isize, y: const 5_isize, z: const 6_isize };
        _6 = Box::<Triple>::new(move _7) -> [return: bb3, unwind: bb10];
    }

    bb3: {
        _4 = move _6;
        goto -> bb4;
    }

    bb4: {
        _9 = (((_4.0: std::ptr::Unique<Triple>).0: std::ptr::NonNull<Triple>).0: *const Triple);
        _10 = _9 as *const () (PtrToPtr);
        _11 = _10 as usize (Transmute);
        _12 = AlignOf(Triple);
        _13 = Sub(_12, const 1_usize);
        _14 = BitAnd(_11, _13);
        _15 = Eq(_14, const 0_usize);
        assert(_15, "misaligned pointer dereference: address must be a multiple of {} but is {}", _12, _11) -> [success: bb11, unwind unreachable];
    }

    bb5: {
        switchInt(_8) -> [0: bb6, otherwise: bb8];
    }

    bb6: {
        _8 = const false;
        return;
    }

    bb7 (cleanup): {
        resume;
    }

    bb8: {
        drop(_3) -> bb6;
    }

    bb9 (cleanup): {
        drop(_3) -> [return: bb7, unwind terminate];
    }

    bb10 (cleanup): {
        switchInt(_8) -> [0: bb7, otherwise: bb9];
    }

    bb11: {
        _0 = ((*_9).1: isize);
        drop(_4) -> [return: bb5, unwind: bb10];
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::boxed::Box<Triple>;
    let mut _2: Triple;
    let mut _3: (&isize, &isize);
    let mut _4: &isize;
    let _5: isize;
    let mut _6: std::boxed::Box<Triple>;
    let mut _7: &std::boxed::Box<Triple>;
    let mut _8: &isize;
    let _9: isize;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: isize;
    let mut _15: isize;
    let _17: !;
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _19: (&isize, &isize);
    let mut _20: &isize;
    let _21: isize;
    let mut _22: std::boxed::Box<Triple>;
    let mut _23: &std::boxed::Box<Triple>;
    let mut _24: &isize;
    let _25: isize;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: isize;
    let mut _31: isize;
    let _33: !;
    let mut _34: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _35: (&isize, &isize);
    let mut _36: &isize;
    let _37: isize;
    let mut _38: std::boxed::Box<Triple>;
    let mut _39: &std::boxed::Box<Triple>;
    let mut _40: &isize;
    let _41: isize;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: isize;
    let mut _47: isize;
    let _49: !;
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _51: (&isize, &isize);
    let mut _52: &isize;
    let _53: isize;
    let mut _54: std::boxed::Box<Triple>;
    let mut _55: &isize;
    let _56: isize;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: isize;
    let mut _62: isize;
    let _64: !;
    let mut _65: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _66: bool;
    scope 1 {
        debug x => _1;
        let _10: &isize;
        let _11: &isize;
        let _26: &isize;
        let _27: &isize;
        let _42: &isize;
        let _43: &isize;
        let _57: &isize;
        let _58: &isize;
        scope 2 {
            debug left_val => _10;
            debug right_val => _11;
            let _16: core::panicking::AssertKind;
            scope 3 {
                debug kind => _16;
            }
        }
        scope 4 {
            debug left_val => _26;
            debug right_val => _27;
            let _32: core::panicking::AssertKind;
            scope 5 {
                debug kind => _32;
            }
        }
        scope 6 {
            debug left_val => _42;
            debug right_val => _43;
            let _48: core::panicking::AssertKind;
            scope 7 {
                debug kind => _48;
            }
        }
        scope 8 {
            debug left_val => _57;
            debug right_val => _58;
            let _63: core::panicking::AssertKind;
            scope 9 {
                debug kind => _63;
            }
        }
    }

    bb0: {
        _66 = const false;
        _2 = Triple { x: const 1_isize, y: const 2_isize, z: const 3_isize };
        _66 = const true;
        _1 = Box::<Triple>::new(move _2) -> bb1;
    }

    bb1: {
        _7 = &_1;
        _6 = <Box<Triple> as Clone>::clone(move _7) -> [return: bb2, unwind: bb19];
    }

    bb2: {
        _5 = test(const true, move _6) -> [return: bb3, unwind: bb19];
    }

    bb3: {
        _4 = &_5;
        _9 = const 2_isize;
        _8 = &_9;
        _3 = (move _4, move _8);
        _10 = (_3.0: &isize);
        _11 = (_3.1: &isize);
        _14 = (*_10);
        _15 = (*_11);
        _13 = Eq(move _14, move _15);
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _16 = core::panicking::AssertKind::Eq;
        _18 = Option::<Arguments<'_>>::None;
        _17 = core::panicking::assert_failed::<isize, isize>(move _16, _10, _11, move _18) -> bb19;
    }

    bb5: {
        _23 = &_1;
        _22 = <Box<Triple> as Clone>::clone(move _23) -> [return: bb6, unwind: bb19];
    }

    bb6: {
        _21 = test(const true, move _22) -> [return: bb7, unwind: bb19];
    }

    bb7: {
        _20 = &_21;
        _25 = const 2_isize;
        _24 = &_25;
        _19 = (move _20, move _24);
        _26 = (_19.0: &isize);
        _27 = (_19.1: &isize);
        _30 = (*_26);
        _31 = (*_27);
        _29 = Eq(move _30, move _31);
        _28 = Not(move _29);
        switchInt(move _28) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _32 = core::panicking::AssertKind::Eq;
        _34 = Option::<Arguments<'_>>::None;
        _33 = core::panicking::assert_failed::<isize, isize>(move _32, _26, _27, move _34) -> bb19;
    }

    bb9: {
        _39 = &_1;
        _38 = <Box<Triple> as Clone>::clone(move _39) -> [return: bb10, unwind: bb19];
    }

    bb10: {
        _37 = test(const true, move _38) -> [return: bb11, unwind: bb19];
    }

    bb11: {
        _36 = &_37;
        _41 = const 2_isize;
        _40 = &_41;
        _35 = (move _36, move _40);
        _42 = (_35.0: &isize);
        _43 = (_35.1: &isize);
        _46 = (*_42);
        _47 = (*_43);
        _45 = Eq(move _46, move _47);
        _44 = Not(move _45);
        switchInt(move _44) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _48 = core::panicking::AssertKind::Eq;
        _50 = Option::<Arguments<'_>>::None;
        _49 = core::panicking::assert_failed::<isize, isize>(move _48, _42, _43, move _50) -> bb19;
    }

    bb13: {
        _66 = const false;
        _54 = move _1;
        _53 = test(const false, move _54) -> [return: bb14, unwind: bb19];
    }

    bb14: {
        _52 = &_53;
        _56 = const 5_isize;
        _55 = &_56;
        _51 = (move _52, move _55);
        _57 = (_51.0: &isize);
        _58 = (_51.1: &isize);
        _61 = (*_57);
        _62 = (*_58);
        _60 = Eq(move _61, move _62);
        _59 = Not(move _60);
        switchInt(move _59) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _63 = core::panicking::AssertKind::Eq;
        _65 = Option::<Arguments<'_>>::None;
        _64 = core::panicking::assert_failed::<isize, isize>(move _63, _57, _58, move _65) -> bb19;
    }

    bb16: {
        _66 = const false;
        return;
    }

    bb17 (cleanup): {
        resume;
    }

    bb18 (cleanup): {
        drop(_1) -> [return: bb17, unwind terminate];
    }

    bb19 (cleanup): {
        switchInt(_66) -> [0: bb17, otherwise: bb18];
    }
}
