// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::boxed::Box<X>;
    let mut _2: X;
    let mut _4: (&isize, &isize);
    let mut _5: &isize;
    let mut _6: &isize;
    let _7: isize;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: isize;
    let mut _13: isize;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: *const X;
    scope 1 {
        debug x => _1;
        let _3: std::boxed::Box<X>;
        scope 2 {
            debug y => _3;
            let _8: &isize;
            let _9: &isize;
            let mut _18: *const ();
            let mut _19: usize;
            let mut _20: usize;
            let mut _21: usize;
            let mut _22: usize;
            let mut _23: bool;
            scope 3 {
                debug left_val => _8;
                debug right_val => _9;
                let _14: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _14;
                }
            }
        }
    }

    bb0: {
        _2 = X { x: const 1_isize, y: const 2_isize, z: const 3_isize };
        _1 = Box::<X>::new(move _2) -> bb1;
    }

    bb1: {
        _3 = move _1;
        _17 = (((_3.0: std::ptr::Unique<X>).0: std::ptr::NonNull<X>).0: *const X);
        _18 = _17 as *const () (PtrToPtr);
        _19 = _18 as usize (Transmute);
        _20 = AlignOf(X);
        _21 = Sub(_20, const 1_usize);
        _22 = BitAnd(_19, _21);
        _23 = Eq(_22, const 0_usize);
        assert(_23, "misaligned pointer dereference: address must be a multiple of {} but is {}", _20, _19) -> [success: bb7, unwind unreachable];
    }

    bb2: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<isize, isize>(move _14, _8, _9, move _16) -> bb5;
    }

    bb3: {
        drop(_3) -> bb4;
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_3) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        resume;
    }

    bb7: {
        _5 = &((*_17).1: isize);
        _7 = const 2_isize;
        _6 = &_7;
        _4 = (move _5, move _6);
        _8 = (_4.0: &isize);
        _9 = (_4.1: &isize);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb3, otherwise: bb2];
    }
}
