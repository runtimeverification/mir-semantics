// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::string::String;
    let _2: &str;
    let _3: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _4: std::thread::JoinHandle<()>;
    let mut _5: [closure@ui/moves/moves-based-on-type-capture-clause.rs:9:19: 9:25];
    scope 1 {
        debug x => _1;
    }

    bb0: {
        _2 = const "Hello world!";
        _1 = <str as ToString>::to_string(_2) -> bb1;
    }

    bb1: {
        _5 = [closure@ui/moves/moves-based-on-type-capture-clause.rs:9:19: 9:25] { x: move _1 };
        _4 = spawn::<[closure@ui/moves/moves-based-on-type-capture-clause.rs:9:19: 9:25], ()>(move _5) -> bb2;
    }

    bb2: {
        _3 = JoinHandle::<()>::join(move _4) -> bb3;
    }

    bb3: {
        drop(_3) -> bb4;
    }

    bb4: {
        return;
    }
}

fn main::{closure#0}(_1: [closure@ui/moves/moves-based-on-type-capture-clause.rs:9:19: 9:25]) -> () {
    debug x => (_1.0: std::string::String);
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 2];
    let _6: [&str; 2];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &std::string::String;

    bb0: {
        _6 = [const "", const "\n"];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _11 = &(_1.0: std::string::String);
        _10 = core::fmt::rt::Argument::<'_>::new_display::<String>(_11) -> [return: bb1, unwind: bb5];
    }

    bb1: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _2 = _print(move _3) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        drop(_1) -> bb4;
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_1) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        resume;
    }
}
