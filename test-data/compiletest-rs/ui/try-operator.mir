// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn on_method() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>;
    let mut _1: i32;
    let mut _2: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>;
    let mut _3: std::result::Result<i32, std::num::ParseIntError>;
    let _4: &str;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
    let _7: i32;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>;
    let mut _9: std::result::Result<i32, std::num::ParseIntError>;
    let _10: &str;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
    let _13: i32;
    scope 1 {
        debug residual => _6;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _7;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _12;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _13;
        scope 8 {
        }
    }

    bb0: {
        _4 = const "1";
        _3 = core::str::<impl str>::parse::<i32>(_4) -> bb1;
    }

    bb1: {
        _2 = <Result<i32, ParseIntError> as Try>::branch(move _3) -> bb2;
    }

    bb2: {
        _5 = discriminant(_2);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _7 = ((_2 as Continue).0: i32);
        _10 = const "2";
        _9 = core::str::<impl str>::parse::<i32>(_10) -> bb6;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = move ((_2 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _6) -> bb10;
    }

    bb6: {
        _8 = <Result<i32, ParseIntError> as Try>::branch(move _9) -> bb7;
    }

    bb7: {
        _11 = discriminant(_8);
        switchInt(move _11) -> [0: bb8, 1: bb9, otherwise: bb4];
    }

    bb8: {
        _13 = ((_8 as Continue).0: i32);
        _1 = Add(_7, _13);
        _0 = Result::<i32, ParseIntError>::Ok(move _1);
        goto -> bb10;
    }

    bb9: {
        _12 = move ((_8 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _12) -> bb10;
    }

    bb10: {
        return;
    }
}

fn in_chain() -> Result<String, ParseIntError> {
    let mut _0: std::result::Result<std::string::String, std::num::ParseIntError>;
    let mut _1: std::string::String;
    let mut _2: &i32;
    let _3: i32;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>;
    let mut _5: std::result::Result<i32, std::num::ParseIntError>;
    let _6: &str;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
    let _9: i32;
    scope 1 {
        debug residual => _8;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _9;
        scope 4 {
        }
    }

    bb0: {
        _6 = const "3";
        _5 = core::str::<impl str>::parse::<i32>(_6) -> bb1;
    }

    bb1: {
        _4 = <Result<i32, ParseIntError> as Try>::branch(move _5) -> bb2;
    }

    bb2: {
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _9 = ((_4 as Continue).0: i32);
        _3 = _9;
        _2 = &_3;
        _1 = <i32 as ToString>::to_string(move _2) -> bb6;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _8 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<String, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _8) -> bb7;
    }

    bb6: {
        _0 = Result::<String, ParseIntError>::Ok(move _1);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn on_call() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>;
    let mut _1: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>;
    let mut _2: std::result::Result<i32, std::num::ParseIntError>;
    let _3: &str;
    let mut _4: isize;
    let _5: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
    let _6: i32;
    scope 1 {
        debug residual => _5;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _6;
        scope 4 {
        }
    }

    bb0: {
        _3 = const "4";
        _2 = parse::<i32>(_3) -> bb1;
    }

    bb1: {
        _1 = <Result<i32, ParseIntError> as Try>::branch(move _2) -> bb2;
    }

    bb2: {
        _4 = discriminant(_1);
        switchInt(move _4) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _6 = ((_1 as Continue).0: i32);
        _0 = Result::<i32, ParseIntError>::Ok(_6);
        goto -> bb6;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _5 = move ((_1 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _5) -> bb6;
    }

    bb6: {
        return;
    }
}

fn parse(_1: &str) -> Result<T, <T as FromStr>::Err> {
    debug s => _1;
    let mut _0: std::result::Result<T, <T as std::str::FromStr>::Err>;

    bb0: {
        _0 = core::str::<impl str>::parse::<T>(_1) -> bb1;
    }

    bb1: {
        return;
    }
}

fn nested() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>;
    let mut _1: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>;
    let mut _2: std::result::Result<i32, std::num::ParseIntError>;
    let mut _3: &str;
    let _4: &str;
    let mut _5: &std::string::String;
    let _6: std::string::String;
    let mut _7: &i32;
    let _8: i32;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>;
    let mut _10: std::result::Result<i32, std::num::ParseIntError>;
    let _11: &str;
    let mut _12: isize;
    let _13: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
    let _14: i32;
    let mut _15: isize;
    let _16: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
    let _17: i32;
    scope 1 {
        debug residual => _13;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _14;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _16;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _17;
        scope 8 {
        }
    }

    bb0: {
        _11 = const "5";
        _10 = core::str::<impl str>::parse::<i32>(_11) -> bb1;
    }

    bb1: {
        _9 = <Result<i32, ParseIntError> as Try>::branch(move _10) -> bb2;
    }

    bb2: {
        _12 = discriminant(_9);
        switchInt(move _12) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _14 = ((_9 as Continue).0: i32);
        _8 = _14;
        _7 = &_8;
        _6 = <i32 as ToString>::to_string(move _7) -> bb6;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _13 = move ((_9 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _13) -> bb13;
    }

    bb6: {
        _5 = &_6;
        _4 = <String as Deref>::deref(move _5) -> [return: bb7, unwind: bb14];
    }

    bb7: {
        _3 = _4;
        _2 = core::str::<impl str>::parse::<i32>(move _3) -> [return: bb8, unwind: bb14];
    }

    bb8: {
        _1 = <Result<i32, ParseIntError> as Try>::branch(move _2) -> [return: bb9, unwind: bb14];
    }

    bb9: {
        _15 = discriminant(_1);
        switchInt(move _15) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        _17 = ((_1 as Continue).0: i32);
        _0 = Result::<i32, ParseIntError>::Ok(_17);
        drop(_6) -> bb13;
    }

    bb11: {
        _16 = move ((_1 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _16) -> [return: bb12, unwind: bb14];
    }

    bb12: {
        drop(_6) -> bb13;
    }

    bb13: {
        return;
    }

    bb14 (cleanup): {
        drop(_6) -> [return: bb15, unwind terminate];
    }

    bb15 (cleanup): {
        resume;
    }
}

fn on_path() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>;
    let _1: std::result::Result<i32, std::num::ParseIntError>;
    let _2: &str;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>;
    let mut _4: std::result::Result<i32, std::num::ParseIntError>;
    let mut _5: isize;
    scope 1 {
        debug x => _1;
        let _6: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
        let _7: i32;
        scope 2 {
            debug residual => _6;
            scope 3 {
            }
        }
        scope 4 {
            debug val => _7;
            scope 5 {
            }
        }
    }

    bb0: {
        _2 = const "6";
        _1 = core::str::<impl str>::parse::<i32>(_2) -> bb1;
    }

    bb1: {
        _4 = move _1;
        _3 = <Result<i32, ParseIntError> as Try>::branch(move _4) -> bb2;
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _7 = ((_3 as Continue).0: i32);
        _0 = Result::<i32, ParseIntError>::Ok(_7);
        goto -> bb6;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _6) -> bb6;
    }

    bb6: {
        return;
    }
}

fn on_macro() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>;
    let mut _1: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>;
    let mut _2: std::result::Result<i32, std::num::ParseIntError>;
    let _3: &str;
    let mut _4: isize;
    let _5: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
    let _6: i32;
    scope 1 {
        debug residual => _5;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _6;
        scope 4 {
        }
    }

    bb0: {
        _3 = const "7";
        _2 = core::str::<impl str>::parse::<i32>(_3) -> bb1;
    }

    bb1: {
        _1 = <Result<i32, ParseIntError> as Try>::branch(move _2) -> bb2;
    }

    bb2: {
        _4 = discriminant(_1);
        switchInt(move _4) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _6 = ((_1 as Continue).0: i32);
        _0 = Result::<i32, ParseIntError>::Ok(_6);
        goto -> bb6;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _5 = move ((_1 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _5) -> bb6;
    }

    bb6: {
        return;
    }
}

fn on_parens() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>;
    let _1: std::result::Result<i32, std::num::ParseIntError>;
    let _2: &str;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>;
    let mut _4: std::result::Result<i32, std::num::ParseIntError>;
    let mut _5: isize;
    scope 1 {
        debug x => _1;
        let _6: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
        let _7: i32;
        scope 2 {
            debug residual => _6;
            scope 3 {
            }
        }
        scope 4 {
            debug val => _7;
            scope 5 {
            }
        }
    }

    bb0: {
        _2 = const "8";
        _1 = core::str::<impl str>::parse::<i32>(_2) -> bb1;
    }

    bb1: {
        _4 = move _1;
        _3 = <Result<i32, ParseIntError> as Try>::branch(move _4) -> bb2;
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _7 = ((_3 as Continue).0: i32);
        _0 = Result::<i32, ParseIntError>::Ok(_7);
        goto -> bb6;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _6) -> bb6;
    }

    bb6: {
        return;
    }
}

fn on_block() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>;
    let _1: std::result::Result<i32, std::num::ParseIntError>;
    let _2: &str;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>;
    let mut _4: std::result::Result<i32, std::num::ParseIntError>;
    let mut _5: isize;
    scope 1 {
        debug x => _1;
        let _6: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
        let _7: i32;
        scope 2 {
            debug residual => _6;
            scope 3 {
            }
        }
        scope 4 {
            debug val => _7;
            scope 5 {
            }
        }
    }

    bb0: {
        _2 = const "9";
        _1 = core::str::<impl str>::parse::<i32>(_2) -> bb1;
    }

    bb1: {
        _4 = move _1;
        _3 = <Result<i32, ParseIntError> as Try>::branch(move _4) -> bb2;
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _7 = ((_3 as Continue).0: i32);
        _0 = Result::<i32, ParseIntError>::Ok(_7);
        goto -> bb6;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _6) -> bb6;
    }

    bb6: {
        return;
    }
}

fn on_field() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>;
    let _1: on_field::Pair<std::result::Result<i32, std::num::ParseIntError>, i32>;
    let mut _2: std::result::Result<i32, std::num::ParseIntError>;
    let _3: &str;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>;
    let mut _5: std::result::Result<i32, std::num::ParseIntError>;
    let mut _6: isize;
    scope 1 {
        debug x => _1;
        let _7: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
        let _8: i32;
        scope 2 {
            debug residual => _7;
            scope 3 {
            }
        }
        scope 4 {
            debug val => _8;
            scope 5 {
            }
        }
    }

    bb0: {
        _3 = const "10";
        _2 = core::str::<impl str>::parse::<i32>(_3) -> bb1;
    }

    bb1: {
        _1 = Pair::<Result<i32, ParseIntError>, i32> { a: move _2, b: const 0_i32 };
        _5 = move (_1.0: std::result::Result<i32, std::num::ParseIntError>);
        _4 = <Result<i32, ParseIntError> as Try>::branch(move _5) -> bb2;
    }

    bb2: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _8 = ((_4 as Continue).0: i32);
        _0 = Result::<i32, ParseIntError>::Ok(_8);
        goto -> bb6;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _7) -> bb6;
    }

    bb6: {
        return;
    }
}

fn on_tuple_field() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>;
    let _1: (std::result::Result<i32, std::num::ParseIntError>, i32);
    let mut _2: std::result::Result<i32, std::num::ParseIntError>;
    let _3: &str;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>;
    let mut _5: std::result::Result<i32, std::num::ParseIntError>;
    let mut _6: isize;
    scope 1 {
        debug x => _1;
        let _7: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
        let _8: i32;
        scope 2 {
            debug residual => _7;
            scope 3 {
            }
        }
        scope 4 {
            debug val => _8;
            scope 5 {
            }
        }
    }

    bb0: {
        _3 = const "11";
        _2 = core::str::<impl str>::parse::<i32>(_3) -> bb1;
    }

    bb1: {
        _1 = (move _2, const 0_i32);
        _5 = move (_1.0: std::result::Result<i32, std::num::ParseIntError>);
        _4 = <Result<i32, ParseIntError> as Try>::branch(move _5) -> bb2;
    }

    bb2: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _8 = ((_4 as Continue).0: i32);
        _0 = Result::<i32, ParseIntError>::Ok(_8);
        goto -> bb6;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _7) -> bb6;
    }

    bb6: {
        return;
    }
}

fn on_try() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>;
    let _1: std::result::Result<std::result::Result<i32, std::num::ParseIntError>, std::num::ParseIntError>;
    let mut _2: std::result::Result<i32, std::num::ParseIntError>;
    let _3: &str;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, std::result::Result<i32, std::num::ParseIntError>>;
    let mut _6: std::result::Result<std::result::Result<i32, std::num::ParseIntError>, std::num::ParseIntError>;
    let mut _7: isize;
    let mut _10: isize;
    scope 1 {
        debug x => _1;
        let _8: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
        let _9: std::result::Result<i32, std::num::ParseIntError>;
        let _11: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
        let _12: i32;
        scope 2 {
            debug residual => _8;
            scope 3 {
            }
        }
        scope 4 {
            debug val => _9;
            scope 5 {
            }
        }
        scope 6 {
            debug residual => _11;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _12;
            scope 9 {
            }
        }
    }

    bb0: {
        _3 = const "12";
        _2 = core::str::<impl str>::parse::<i32>(_3) -> bb1;
    }

    bb1: {
        _1 = Result::<i32, ParseIntError>::map::<Result<i32, ParseIntError>, [closure@ui/try-operator.rs:71:37: 71:40]>(move _2, const ZeroSized: [closure@ui/try-operator.rs:71:37: 71:40]) -> bb2;
    }

    bb2: {
        _6 = move _1;
        _5 = <Result<Result<i32, ParseIntError>, ParseIntError> as Try>::branch(move _6) -> bb3;
    }

    bb3: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        _9 = move ((_5 as Continue).0: std::result::Result<i32, std::num::ParseIntError>);
        _4 = <Result<i32, ParseIntError> as Try>::branch(move _9) -> bb7;
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _8 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _8) -> bb10;
    }

    bb7: {
        _10 = discriminant(_4);
        switchInt(move _10) -> [0: bb8, 1: bb9, otherwise: bb5];
    }

    bb8: {
        _12 = ((_4 as Continue).0: i32);
        _0 = Result::<i32, ParseIntError>::Ok(_12);
        goto -> bb10;
    }

    bb9: {
        _11 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _11) -> bb10;
    }

    bb10: {
        return;
    }
}

fn on_try::{closure#0}(_1: [closure@ui/try-operator.rs:71:37: 71:40], _2: i32) -> Result<i32, ParseIntError> {
    debug i => _2;
    let mut _0: std::result::Result<i32, std::num::ParseIntError>;
    let mut _3: &str;
    let _4: &str;
    let mut _5: &std::string::String;
    let _6: std::string::String;
    let mut _7: &i32;

    bb0: {
        _7 = &_2;
        _6 = <i32 as ToString>::to_string(move _7) -> bb1;
    }

    bb1: {
        _5 = &_6;
        _4 = <String as Deref>::deref(move _5) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _3 = _4;
        _0 = core::str::<impl str>::parse::<i32>(move _3) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        drop(_6) -> bb4;
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_6) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn on_binary_op() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>;
    let _1: i32;
    let mut _2: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>;
    let mut _3: std::result::Result<i32, std::num::ParseIntError>;
    let _4: &str;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
    let _7: i32;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>;
    let mut _10: std::result::Result<i32, std::num::ParseIntError>;
    let _11: &str;
    let mut _12: isize;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>;
    let mut _17: std::result::Result<i32, std::num::ParseIntError>;
    let _18: &str;
    let mut _19: isize;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>;
    let mut _23: std::result::Result<i32, std::num::ParseIntError>;
    let _24: &str;
    let mut _25: isize;
    let mut _28: i32;
    let mut _29: i32;
    scope 1 {
        debug x => _1;
        let _8: i32;
        let _13: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
        let _14: i32;
        scope 6 {
            debug y => _8;
            let _15: i32;
            let _20: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
            let _21: i32;
            let _26: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
            let _27: i32;
            scope 11 {
                debug z => _15;
            }
            scope 12 {
                debug residual => _20;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _21;
                scope 15 {
                }
            }
            scope 16 {
                debug residual => _26;
                scope 17 {
                }
            }
            scope 18 {
                debug val => _27;
                scope 19 {
                }
            }
        }
        scope 7 {
            debug residual => _13;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _14;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _6;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _7;
        scope 5 {
        }
    }

    bb0: {
        _4 = const "14";
        _3 = core::str::<impl str>::parse::<i32>(_4) -> bb1;
    }

    bb1: {
        _2 = <Result<i32, ParseIntError> as Try>::branch(move _3) -> bb2;
    }

    bb2: {
        _5 = discriminant(_2);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _7 = ((_2 as Continue).0: i32);
        _1 = Sub(const 13_i32, _7);
        _11 = const "15";
        _10 = core::str::<impl str>::parse::<i32>(_11) -> bb6;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = move ((_2 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _6) -> bb18;
    }

    bb6: {
        _9 = <Result<i32, ParseIntError> as Try>::branch(move _10) -> bb7;
    }

    bb7: {
        _12 = discriminant(_9);
        switchInt(move _12) -> [0: bb8, 1: bb9, otherwise: bb4];
    }

    bb8: {
        _14 = ((_9 as Continue).0: i32);
        _8 = Sub(_14, const 16_i32);
        _18 = const "17";
        _17 = core::str::<impl str>::parse::<i32>(_18) -> bb10;
    }

    bb9: {
        _13 = move ((_9 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _13) -> bb18;
    }

    bb10: {
        _16 = <Result<i32, ParseIntError> as Try>::branch(move _17) -> bb11;
    }

    bb11: {
        _19 = discriminant(_16);
        switchInt(move _19) -> [0: bb12, 1: bb13, otherwise: bb4];
    }

    bb12: {
        _21 = ((_16 as Continue).0: i32);
        _24 = const "18";
        _23 = core::str::<impl str>::parse::<i32>(_24) -> bb14;
    }

    bb13: {
        _20 = move ((_16 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _20) -> bb18;
    }

    bb14: {
        _22 = <Result<i32, ParseIntError> as Try>::branch(move _23) -> bb15;
    }

    bb15: {
        _25 = discriminant(_22);
        switchInt(move _25) -> [0: bb16, 1: bb17, otherwise: bb4];
    }

    bb16: {
        _27 = ((_22 as Continue).0: i32);
        _15 = Sub(_21, _27);
        _29 = Add(_1, _8);
        _28 = Add(move _29, _15);
        _0 = Result::<i32, ParseIntError>::Ok(move _28);
        goto -> bb18;
    }

    bb17: {
        _26 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _26) -> bb18;
    }

    bb18: {
        return;
    }
}

fn on_index() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>;
    let _1: [i32; 1];
    let _3: &str;
    let mut _4: i32;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, usize>;
    let mut _6: std::result::Result<usize, std::num::ParseIntError>;
    let mut _7: isize;
    let mut _10: usize;
    let mut _11: bool;
    scope 1 {
        debug x => _1;
        let _2: std::result::Result<usize, std::num::ParseIntError>;
        scope 2 {
            debug y => _2;
            let _8: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
            let _9: usize;
            scope 3 {
                debug residual => _8;
                scope 4 {
                }
            }
            scope 5 {
                debug val => _9;
                scope 6 {
                }
            }
        }
    }

    bb0: {
        _1 = [const 19_i32];
        _3 = const "0";
        _2 = core::str::<impl str>::parse::<usize>(_3) -> bb1;
    }

    bb1: {
        _6 = move _2;
        _5 = <Result<usize, ParseIntError> as Try>::branch(move _6) -> bb2;
    }

    bb2: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _9 = ((_5 as Continue).0: usize);
        _10 = const 1_usize;
        _11 = Lt(_9, _10);
        assert(move _11, "index out of bounds: the length is {} but the index is {}", move _10, _9) -> bb6;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _8 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _8) -> bb7;
    }

    bb6: {
        _4 = _1[_9];
        _0 = Result::<i32, ParseIntError>::Ok(move _4);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn on_args() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>;
    let _1: std::result::Result<i32, std::num::ParseIntError>;
    let _2: &str;
    let _4: &str;
    let mut _5: i32;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>;
    let mut _7: std::result::Result<i32, std::num::ParseIntError>;
    let mut _8: isize;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>;
    let mut _12: std::result::Result<i32, std::num::ParseIntError>;
    let mut _13: isize;
    scope 1 {
        debug x => _1;
        let _3: std::result::Result<i32, std::num::ParseIntError>;
        scope 2 {
            debug y => _3;
            let _9: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
            let _10: i32;
            let _14: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
            let _15: i32;
            scope 3 {
                debug residual => _9;
                scope 4 {
                }
            }
            scope 5 {
                debug val => _10;
                scope 6 {
                }
            }
            scope 7 {
                debug residual => _14;
                scope 8 {
                }
            }
            scope 9 {
                debug val => _15;
                scope 10 {
                }
            }
        }
    }

    bb0: {
        _2 = const "20";
        _1 = core::str::<impl str>::parse::<i32>(_2) -> bb1;
    }

    bb1: {
        _4 = const "21";
        _3 = core::str::<impl str>::parse::<i32>(_4) -> bb2;
    }

    bb2: {
        _7 = move _1;
        _6 = <Result<i32, ParseIntError> as Try>::branch(move _7) -> bb3;
    }

    bb3: {
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        _10 = ((_6 as Continue).0: i32);
        _12 = move _3;
        _11 = <Result<i32, ParseIntError> as Try>::branch(move _12) -> bb7;
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _9 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _9) -> bb11;
    }

    bb7: {
        _13 = discriminant(_11);
        switchInt(move _13) -> [0: bb8, 1: bb9, otherwise: bb5];
    }

    bb8: {
        _15 = ((_11 as Continue).0: i32);
        _5 = on_args::sub(_10, _15) -> bb10;
    }

    bb9: {
        _14 = move ((_11 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _14) -> bb11;
    }

    bb10: {
        _0 = Result::<i32, ParseIntError>::Ok(move _5);
        goto -> bb11;
    }

    bb11: {
        return;
    }
}

fn on_args::sub(_1: i32, _2: i32) -> i32 {
    debug x => _1;
    debug y => _2;
    let mut _0: i32;

    bb0: {
        _0 = Sub(_1, _2);
        return;
    }
}

fn on_if() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>;
    let mut _1: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>;
    let mut _2: std::result::Result<i32, std::num::ParseIntError>;
    let mut _3: bool;
    let _4: &str;
    let _5: &str;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
    let _8: i32;
    scope 1 {
        debug residual => _7;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _8;
        scope 4 {
        }
    }

    bb0: {
        _3 = const true;
        switchInt(move _3) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _4 = const "22";
        _2 = core::str::<impl str>::parse::<i32>(_4) -> bb3;
    }

    bb2: {
        _5 = const "23";
        _2 = core::str::<impl str>::parse::<i32>(_5) -> bb3;
    }

    bb3: {
        _1 = <Result<i32, ParseIntError> as Try>::branch(move _2) -> bb4;
    }

    bb4: {
        _6 = discriminant(_1);
        switchInt(move _6) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        _8 = ((_1 as Continue).0: i32);
        _0 = Result::<i32, ParseIntError>::Ok(_8);
        goto -> bb8;
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _7 = move ((_1 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _7) -> bb8;
    }

    bb8: {
        return;
    }
}

fn on_if_let() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>;
    let mut _1: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>;
    let mut _2: std::result::Result<i32, std::num::ParseIntError>;
    let mut _3: std::result::Result<i32, std::num::ParseIntError>;
    let _4: &str;
    let mut _5: isize;
    let _6: &str;
    let _7: &str;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
    let _10: i32;
    scope 1 {
    }
    scope 2 {
        debug residual => _9;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _10;
        scope 5 {
        }
    }

    bb0: {
        _4 = const "24";
        _3 = core::str::<impl str>::parse::<i32>(_4) -> bb1;
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb2, otherwise: bb3];
    }

    bb2: {
        _6 = const "25";
        _2 = core::str::<impl str>::parse::<i32>(_6) -> bb4;
    }

    bb3: {
        _7 = const "26";
        _2 = core::str::<impl str>::parse::<i32>(_7) -> bb4;
    }

    bb4: {
        _1 = <Result<i32, ParseIntError> as Try>::branch(move _2) -> bb5;
    }

    bb5: {
        _8 = discriminant(_1);
        switchInt(move _8) -> [0: bb6, 1: bb8, otherwise: bb7];
    }

    bb6: {
        _10 = ((_1 as Continue).0: i32);
        _0 = Result::<i32, ParseIntError>::Ok(_10);
        goto -> bb9;
    }

    bb7: {
        unreachable;
    }

    bb8: {
        _9 = move ((_1 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _9) -> bb9;
    }

    bb9: {
        return;
    }
}

fn on_match() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>;
    let mut _1: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>;
    let mut _2: std::result::Result<i32, std::num::ParseIntError>;
    let mut _3: std::result::Result<i32, std::num::ParseIntError>;
    let _4: &str;
    let mut _5: isize;
    let _6: &str;
    let _7: &str;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
    let _10: i32;
    scope 1 {
        debug residual => _9;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _10;
        scope 4 {
        }
    }

    bb0: {
        _4 = const "27";
        _3 = core::str::<impl str>::parse::<i32>(_4) -> bb1;
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _7 = const "29";
        _2 = core::str::<impl str>::parse::<i32>(_7) -> bb5;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = const "28";
        _2 = core::str::<impl str>::parse::<i32>(_6) -> bb5;
    }

    bb5: {
        _1 = <Result<i32, ParseIntError> as Try>::branch(move _2) -> bb6;
    }

    bb6: {
        _8 = discriminant(_1);
        switchInt(move _8) -> [0: bb7, 1: bb8, otherwise: bb3];
    }

    bb7: {
        _10 = ((_1 as Continue).0: i32);
        _0 = Result::<i32, ParseIntError>::Ok(_10);
        goto -> bb9;
    }

    bb8: {
        _9 = move ((_1 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _9) -> bb9;
    }

    bb9: {
        return;
    }
}

fn tight_binding() -> Result<bool, ()> {
    let mut _0: std::result::Result<bool, ()>;
    let _1: std::result::Result<bool, ()>;
    let mut _2: bool;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, ()>, bool>;
    let mut _4: std::result::Result<bool, ()>;
    let mut _5: isize;
    scope 1 {
        debug x => _1;
        let _6: bool;
        scope 2 {
            debug residual => const Result::<Infallible, ()>::Err(());
            scope 3 {
            }
        }
        scope 4 {
            debug val => _6;
            scope 5 {
            }
        }
    }

    bb0: {
        _1 = ok::<bool>(const true) -> bb1;
    }

    bb1: {
        _4 = _1;
        _3 = <Result<bool, ()> as Try>::branch(move _4) -> bb2;
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _6 = ((_3 as Continue).0: bool);
        _2 = Not(_6);
        _0 = Result::<bool, ()>::Ok(move _2);
        goto -> bb6;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _0 = <Result<bool, ()> as FromResidual<Result<Infallible, ()>>>::from_residual(const Result::<Infallible, ()>::Err(())) -> bb6;
    }

    bb6: {
        return;
    }
}

fn ok(_1: T) -> Result<T, ()> {
    debug x => _1;
    let mut _0: std::result::Result<T, ()>;

    bb0: {
        _0 = Result::<T, ()>::Ok(move _1);
        return;
    }
}

fn merge_error() -> Result<i32, Error> {
    let mut _0: std::result::Result<i32, Error>;
    let mut _1: std::string::String;
    let mut _2: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, usize>;
    let mut _3: std::result::Result<usize, std::io::Error>;
    let mut _4: &mut std::fs::File;
    let mut _5: std::fs::File;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::fs::File>;
    let mut _7: std::result::Result<std::fs::File, std::io::Error>;
    let mut _8: isize;
    let mut _11: &mut std::string::String;
    let mut _12: isize;
    let mut _15: i32;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>;
    let mut _17: std::result::Result<i32, std::num::ParseIntError>;
    let mut _18: &str;
    let _19: &str;
    let mut _20: &std::string::String;
    let mut _21: isize;
    scope 1 {
        debug s => _1;
        let _9: std::result::Result<std::convert::Infallible, std::io::Error>;
        let _10: std::fs::File;
        let _13: std::result::Result<std::convert::Infallible, std::io::Error>;
        let _14: usize;
        let _22: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
        let _23: i32;
        scope 2 {
            debug residual => _9;
            scope 3 {
            }
        }
        scope 4 {
            debug val => _10;
            scope 5 {
            }
        }
        scope 6 {
            debug residual => _13;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _14;
            scope 9 {
            }
        }
        scope 10 {
            debug residual => _22;
            scope 11 {
            }
        }
        scope 12 {
            debug val => _23;
            scope 13 {
            }
        }
    }

    bb0: {
        _1 = String::new() -> bb1;
    }

    bb1: {
        _7 = File::open::<&str>(const "foo.txt") -> [return: bb2, unwind: bb20];
    }

    bb2: {
        _6 = <Result<File, std::io::Error> as Try>::branch(move _7) -> [return: bb3, unwind: bb20];
    }

    bb3: {
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        _10 = move ((_6 as Continue).0: std::fs::File);
        _5 = move _10;
        _4 = &mut _5;
        _11 = &mut _1;
        _3 = <File as std::io::Read>::read_to_string(move _4, _11) -> [return: bb7, unwind: bb19];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _9 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<i32, Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _9) -> [return: bb24, unwind: bb20];
    }

    bb7: {
        _2 = <Result<usize, std::io::Error> as Try>::branch(move _3) -> [return: bb8, unwind: bb19];
    }

    bb8: {
        _12 = discriminant(_2);
        switchInt(move _12) -> [0: bb9, 1: bb10, otherwise: bb5];
    }

    bb9: {
        _14 = ((_2 as Continue).0: usize);
        drop(_5) -> [return: bb22, unwind: bb20];
    }

    bb10: {
        _13 = move ((_2 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<i32, Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _13) -> [return: bb11, unwind: bb19];
    }

    bb11: {
        drop(_5) -> [return: bb23, unwind: bb20];
    }

    bb12: {
        _18 = _19;
        _17 = core::str::<impl str>::parse::<i32>(move _18) -> [return: bb13, unwind: bb20];
    }

    bb13: {
        _16 = <Result<i32, ParseIntError> as Try>::branch(move _17) -> [return: bb14, unwind: bb20];
    }

    bb14: {
        _21 = discriminant(_16);
        switchInt(move _21) -> [0: bb15, 1: bb16, otherwise: bb5];
    }

    bb15: {
        _23 = ((_16 as Continue).0: i32);
        _15 = Add(_23, const 1_i32);
        _0 = Result::<i32, Error>::Ok(move _15);
        drop(_1) -> bb18;
    }

    bb16: {
        _22 = move ((_16 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, Error> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _22) -> [return: bb17, unwind: bb20];
    }

    bb17: {
        drop(_1) -> bb18;
    }

    bb18: {
        return;
    }

    bb19 (cleanup): {
        drop(_5) -> [return: bb20, unwind terminate];
    }

    bb20 (cleanup): {
        drop(_1) -> [return: bb21, unwind terminate];
    }

    bb21 (cleanup): {
        resume;
    }

    bb22: {
        _20 = &_1;
        _19 = <String as Deref>::deref(move _20) -> [return: bb12, unwind: bb20];
    }

    bb23: {
        drop(_1) -> bb18;
    }

    bb24: {
        goto -> bb23;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>);
    let mut _2: &std::result::Result<i32, std::num::ParseIntError>;
    let _3: std::result::Result<i32, std::num::ParseIntError>;
    let mut _4: &std::result::Result<i32, std::num::ParseIntError>;
    let _5: std::result::Result<i32, std::num::ParseIntError>;
    let _6: &std::result::Result<i32, std::num::ParseIntError>;
    let _7: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _8: bool;
    let mut _9: bool;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: (&std::result::Result<std::string::String, std::num::ParseIntError>, &std::result::Result<std::string::String, std::num::ParseIntError>);
    let mut _14: &std::result::Result<std::string::String, std::num::ParseIntError>;
    let _15: std::result::Result<std::string::String, std::num::ParseIntError>;
    let mut _16: std::string::String;
    let _17: &str;
    let mut _18: &std::result::Result<std::string::String, std::num::ParseIntError>;
    let _19: std::result::Result<std::string::String, std::num::ParseIntError>;
    let _20: &std::result::Result<std::string::String, std::num::ParseIntError>;
    let _21: &std::result::Result<std::string::String, std::num::ParseIntError>;
    let mut _22: bool;
    let mut _23: bool;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _27: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>);
    let mut _28: &std::result::Result<i32, std::num::ParseIntError>;
    let _29: std::result::Result<i32, std::num::ParseIntError>;
    let mut _30: &std::result::Result<i32, std::num::ParseIntError>;
    let _31: std::result::Result<i32, std::num::ParseIntError>;
    let _32: &std::result::Result<i32, std::num::ParseIntError>;
    let _33: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _34: bool;
    let mut _35: bool;
    let _37: !;
    let mut _38: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _39: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>);
    let mut _40: &std::result::Result<i32, std::num::ParseIntError>;
    let _41: std::result::Result<i32, std::num::ParseIntError>;
    let mut _42: &std::result::Result<i32, std::num::ParseIntError>;
    let _43: std::result::Result<i32, std::num::ParseIntError>;
    let _44: &std::result::Result<i32, std::num::ParseIntError>;
    let _45: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _46: bool;
    let mut _47: bool;
    let _49: !;
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _51: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>);
    let mut _52: &std::result::Result<i32, std::num::ParseIntError>;
    let _53: std::result::Result<i32, std::num::ParseIntError>;
    let mut _54: &std::result::Result<i32, std::num::ParseIntError>;
    let _55: std::result::Result<i32, std::num::ParseIntError>;
    let _56: &std::result::Result<i32, std::num::ParseIntError>;
    let _57: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _58: bool;
    let mut _59: bool;
    let _61: !;
    let mut _62: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _63: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>);
    let mut _64: &std::result::Result<i32, std::num::ParseIntError>;
    let _65: std::result::Result<i32, std::num::ParseIntError>;
    let mut _66: &std::result::Result<i32, std::num::ParseIntError>;
    let _67: std::result::Result<i32, std::num::ParseIntError>;
    let _68: &std::result::Result<i32, std::num::ParseIntError>;
    let _69: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _70: bool;
    let mut _71: bool;
    let _73: !;
    let mut _74: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _75: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>);
    let mut _76: &std::result::Result<i32, std::num::ParseIntError>;
    let _77: std::result::Result<i32, std::num::ParseIntError>;
    let mut _78: &std::result::Result<i32, std::num::ParseIntError>;
    let _79: std::result::Result<i32, std::num::ParseIntError>;
    let _80: &std::result::Result<i32, std::num::ParseIntError>;
    let _81: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _82: bool;
    let mut _83: bool;
    let _85: !;
    let mut _86: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _87: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>);
    let mut _88: &std::result::Result<i32, std::num::ParseIntError>;
    let _89: std::result::Result<i32, std::num::ParseIntError>;
    let mut _90: &std::result::Result<i32, std::num::ParseIntError>;
    let _91: std::result::Result<i32, std::num::ParseIntError>;
    let _92: &std::result::Result<i32, std::num::ParseIntError>;
    let _93: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _94: bool;
    let mut _95: bool;
    let _97: !;
    let mut _98: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _99: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>);
    let mut _100: &std::result::Result<i32, std::num::ParseIntError>;
    let _101: std::result::Result<i32, std::num::ParseIntError>;
    let mut _102: &std::result::Result<i32, std::num::ParseIntError>;
    let _103: std::result::Result<i32, std::num::ParseIntError>;
    let _104: &std::result::Result<i32, std::num::ParseIntError>;
    let _105: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _106: bool;
    let mut _107: bool;
    let _109: !;
    let mut _110: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _111: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>);
    let mut _112: &std::result::Result<i32, std::num::ParseIntError>;
    let _113: std::result::Result<i32, std::num::ParseIntError>;
    let mut _114: &std::result::Result<i32, std::num::ParseIntError>;
    let _115: std::result::Result<i32, std::num::ParseIntError>;
    let _116: &std::result::Result<i32, std::num::ParseIntError>;
    let _117: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _118: bool;
    let mut _119: bool;
    let _121: !;
    let mut _122: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _123: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>);
    let mut _124: &std::result::Result<i32, std::num::ParseIntError>;
    let _125: std::result::Result<i32, std::num::ParseIntError>;
    let mut _126: &std::result::Result<i32, std::num::ParseIntError>;
    let _127: std::result::Result<i32, std::num::ParseIntError>;
    let _128: &std::result::Result<i32, std::num::ParseIntError>;
    let _129: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _130: bool;
    let mut _131: bool;
    let _133: !;
    let mut _134: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _135: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>);
    let mut _136: &std::result::Result<i32, std::num::ParseIntError>;
    let _137: std::result::Result<i32, std::num::ParseIntError>;
    let mut _138: &std::result::Result<i32, std::num::ParseIntError>;
    let _139: std::result::Result<i32, std::num::ParseIntError>;
    let _140: &std::result::Result<i32, std::num::ParseIntError>;
    let _141: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _142: bool;
    let mut _143: bool;
    let _145: !;
    let mut _146: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _147: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>);
    let mut _148: &std::result::Result<i32, std::num::ParseIntError>;
    let _149: std::result::Result<i32, std::num::ParseIntError>;
    let mut _150: &std::result::Result<i32, std::num::ParseIntError>;
    let _151: std::result::Result<i32, std::num::ParseIntError>;
    let _152: &std::result::Result<i32, std::num::ParseIntError>;
    let _153: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _154: bool;
    let mut _155: bool;
    let _157: !;
    let mut _158: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _159: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>);
    let mut _160: &std::result::Result<i32, std::num::ParseIntError>;
    let _161: std::result::Result<i32, std::num::ParseIntError>;
    let mut _162: &std::result::Result<i32, std::num::ParseIntError>;
    let _163: std::result::Result<i32, std::num::ParseIntError>;
    let _164: &std::result::Result<i32, std::num::ParseIntError>;
    let _165: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _166: bool;
    let mut _167: bool;
    let _169: !;
    let mut _170: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _171: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>);
    let mut _172: &std::result::Result<i32, std::num::ParseIntError>;
    let _173: std::result::Result<i32, std::num::ParseIntError>;
    let mut _174: &std::result::Result<i32, std::num::ParseIntError>;
    let _175: std::result::Result<i32, std::num::ParseIntError>;
    let _176: &std::result::Result<i32, std::num::ParseIntError>;
    let _177: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _178: bool;
    let mut _179: bool;
    let _181: !;
    let mut _182: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _183: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>);
    let mut _184: &std::result::Result<i32, std::num::ParseIntError>;
    let _185: std::result::Result<i32, std::num::ParseIntError>;
    let mut _186: &std::result::Result<i32, std::num::ParseIntError>;
    let _187: std::result::Result<i32, std::num::ParseIntError>;
    let _188: &std::result::Result<i32, std::num::ParseIntError>;
    let _189: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _190: bool;
    let mut _191: bool;
    let _193: !;
    let mut _194: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _195: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>);
    let mut _196: &std::result::Result<i32, std::num::ParseIntError>;
    let _197: std::result::Result<i32, std::num::ParseIntError>;
    let mut _198: &std::result::Result<i32, std::num::ParseIntError>;
    let _199: std::result::Result<i32, std::num::ParseIntError>;
    let _200: &std::result::Result<i32, std::num::ParseIntError>;
    let _201: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _202: bool;
    let mut _203: bool;
    let _205: !;
    let mut _206: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _207: (&std::result::Result<bool, ()>, &std::result::Result<bool, ()>);
    let mut _208: &std::result::Result<bool, ()>;
    let _209: std::result::Result<bool, ()>;
    let mut _210: &std::result::Result<bool, ()>;
    let _211: std::result::Result<bool, ()>;
    let _212: &std::result::Result<bool, ()>;
    let _213: &std::result::Result<bool, ()>;
    let mut _214: bool;
    let mut _215: bool;
    let _217: !;
    let mut _218: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }
    scope 3 {
        debug left_val => _20;
        debug right_val => _21;
        let _24: core::panicking::AssertKind;
        scope 4 {
            debug kind => _24;
        }
    }
    scope 5 {
        debug left_val => _32;
        debug right_val => _33;
        let _36: core::panicking::AssertKind;
        scope 6 {
            debug kind => _36;
        }
    }
    scope 7 {
        debug left_val => _44;
        debug right_val => _45;
        let _48: core::panicking::AssertKind;
        scope 8 {
            debug kind => _48;
        }
    }
    scope 9 {
        debug left_val => _56;
        debug right_val => _57;
        let _60: core::panicking::AssertKind;
        scope 10 {
            debug kind => _60;
        }
    }
    scope 11 {
        debug left_val => _68;
        debug right_val => _69;
        let _72: core::panicking::AssertKind;
        scope 12 {
            debug kind => _72;
        }
    }
    scope 13 {
        debug left_val => _80;
        debug right_val => _81;
        let _84: core::panicking::AssertKind;
        scope 14 {
            debug kind => _84;
        }
    }
    scope 15 {
        debug left_val => _92;
        debug right_val => _93;
        let _96: core::panicking::AssertKind;
        scope 16 {
            debug kind => _96;
        }
    }
    scope 17 {
        debug left_val => _104;
        debug right_val => _105;
        let _108: core::panicking::AssertKind;
        scope 18 {
            debug kind => _108;
        }
    }
    scope 19 {
        debug left_val => _116;
        debug right_val => _117;
        let _120: core::panicking::AssertKind;
        scope 20 {
            debug kind => _120;
        }
    }
    scope 21 {
        debug left_val => _128;
        debug right_val => _129;
        let _132: core::panicking::AssertKind;
        scope 22 {
            debug kind => _132;
        }
    }
    scope 23 {
        debug left_val => _140;
        debug right_val => _141;
        let _144: core::panicking::AssertKind;
        scope 24 {
            debug kind => _144;
        }
    }
    scope 25 {
        debug left_val => _152;
        debug right_val => _153;
        let _156: core::panicking::AssertKind;
        scope 26 {
            debug kind => _156;
        }
    }
    scope 27 {
        debug left_val => _164;
        debug right_val => _165;
        let _168: core::panicking::AssertKind;
        scope 28 {
            debug kind => _168;
        }
    }
    scope 29 {
        debug left_val => _176;
        debug right_val => _177;
        let _180: core::panicking::AssertKind;
        scope 30 {
            debug kind => _180;
        }
    }
    scope 31 {
        debug left_val => _188;
        debug right_val => _189;
        let _192: core::panicking::AssertKind;
        scope 32 {
            debug kind => _192;
        }
    }
    scope 33 {
        debug left_val => _200;
        debug right_val => _201;
        let _204: core::panicking::AssertKind;
        scope 34 {
            debug kind => _204;
        }
    }
    scope 35 {
        debug left_val => _212;
        debug right_val => _213;
        let _216: core::panicking::AssertKind;
        scope 36 {
            debug kind => _216;
        }
    }

    bb0: {
        _3 = Result::<i32, ParseIntError>::Ok(const 3_i32);
        _2 = &_3;
        _5 = on_method() -> bb1;
    }

    bb1: {
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &std::result::Result<i32, std::num::ParseIntError>);
        _7 = (_1.1: &std::result::Result<i32, std::num::ParseIntError>);
        _9 = <Result<i32, ParseIntError> as PartialEq>::eq(_6, _7) -> bb2;
    }

    bb2: {
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _10, _6, _7, move _12);
    }

    bb4: {
        _17 = const "3";
        _16 = <str as ToString>::to_string(_17) -> bb5;
    }

    bb5: {
        _15 = Result::<String, ParseIntError>::Ok(move _16);
        _14 = &_15;
        _19 = in_chain() -> [return: bb6, unwind: bb77];
    }

    bb6: {
        _18 = &_19;
        _13 = (move _14, move _18);
        _20 = (_13.0: &std::result::Result<std::string::String, std::num::ParseIntError>);
        _21 = (_13.1: &std::result::Result<std::string::String, std::num::ParseIntError>);
        _23 = <Result<String, ParseIntError> as PartialEq>::eq(_20, _21) -> [return: bb7, unwind: bb76];
    }

    bb7: {
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<Result<String, ParseIntError>, Result<String, ParseIntError>>(move _24, _20, _21, move _26) -> bb76;
    }

    bb9: {
        drop(_19) -> [return: bb10, unwind: bb77];
    }

    bb10: {
        drop(_15) -> bb11;
    }

    bb11: {
        _29 = Result::<i32, ParseIntError>::Ok(const 4_i32);
        _28 = &_29;
        _31 = on_call() -> bb12;
    }

    bb12: {
        _30 = &_31;
        _27 = (move _28, move _30);
        _32 = (_27.0: &std::result::Result<i32, std::num::ParseIntError>);
        _33 = (_27.1: &std::result::Result<i32, std::num::ParseIntError>);
        _35 = <Result<i32, ParseIntError> as PartialEq>::eq(_32, _33) -> bb13;
    }

    bb13: {
        _34 = Not(move _35);
        switchInt(move _34) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _36 = core::panicking::AssertKind::Eq;
        _38 = Option::<Arguments<'_>>::None;
        _37 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _36, _32, _33, move _38);
    }

    bb15: {
        _41 = Result::<i32, ParseIntError>::Ok(const 5_i32);
        _40 = &_41;
        _43 = nested() -> bb16;
    }

    bb16: {
        _42 = &_43;
        _39 = (move _40, move _42);
        _44 = (_39.0: &std::result::Result<i32, std::num::ParseIntError>);
        _45 = (_39.1: &std::result::Result<i32, std::num::ParseIntError>);
        _47 = <Result<i32, ParseIntError> as PartialEq>::eq(_44, _45) -> bb17;
    }

    bb17: {
        _46 = Not(move _47);
        switchInt(move _46) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _48 = core::panicking::AssertKind::Eq;
        _50 = Option::<Arguments<'_>>::None;
        _49 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _48, _44, _45, move _50);
    }

    bb19: {
        _53 = Result::<i32, ParseIntError>::Ok(const 6_i32);
        _52 = &_53;
        _55 = on_path() -> bb20;
    }

    bb20: {
        _54 = &_55;
        _51 = (move _52, move _54);
        _56 = (_51.0: &std::result::Result<i32, std::num::ParseIntError>);
        _57 = (_51.1: &std::result::Result<i32, std::num::ParseIntError>);
        _59 = <Result<i32, ParseIntError> as PartialEq>::eq(_56, _57) -> bb21;
    }

    bb21: {
        _58 = Not(move _59);
        switchInt(move _58) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        _60 = core::panicking::AssertKind::Eq;
        _62 = Option::<Arguments<'_>>::None;
        _61 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _60, _56, _57, move _62);
    }

    bb23: {
        _65 = Result::<i32, ParseIntError>::Ok(const 7_i32);
        _64 = &_65;
        _67 = on_macro() -> bb24;
    }

    bb24: {
        _66 = &_67;
        _63 = (move _64, move _66);
        _68 = (_63.0: &std::result::Result<i32, std::num::ParseIntError>);
        _69 = (_63.1: &std::result::Result<i32, std::num::ParseIntError>);
        _71 = <Result<i32, ParseIntError> as PartialEq>::eq(_68, _69) -> bb25;
    }

    bb25: {
        _70 = Not(move _71);
        switchInt(move _70) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _72 = core::panicking::AssertKind::Eq;
        _74 = Option::<Arguments<'_>>::None;
        _73 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _72, _68, _69, move _74);
    }

    bb27: {
        _77 = Result::<i32, ParseIntError>::Ok(const 8_i32);
        _76 = &_77;
        _79 = on_parens() -> bb28;
    }

    bb28: {
        _78 = &_79;
        _75 = (move _76, move _78);
        _80 = (_75.0: &std::result::Result<i32, std::num::ParseIntError>);
        _81 = (_75.1: &std::result::Result<i32, std::num::ParseIntError>);
        _83 = <Result<i32, ParseIntError> as PartialEq>::eq(_80, _81) -> bb29;
    }

    bb29: {
        _82 = Not(move _83);
        switchInt(move _82) -> [0: bb31, otherwise: bb30];
    }

    bb30: {
        _84 = core::panicking::AssertKind::Eq;
        _86 = Option::<Arguments<'_>>::None;
        _85 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _84, _80, _81, move _86);
    }

    bb31: {
        _89 = Result::<i32, ParseIntError>::Ok(const 9_i32);
        _88 = &_89;
        _91 = on_block() -> bb32;
    }

    bb32: {
        _90 = &_91;
        _87 = (move _88, move _90);
        _92 = (_87.0: &std::result::Result<i32, std::num::ParseIntError>);
        _93 = (_87.1: &std::result::Result<i32, std::num::ParseIntError>);
        _95 = <Result<i32, ParseIntError> as PartialEq>::eq(_92, _93) -> bb33;
    }

    bb33: {
        _94 = Not(move _95);
        switchInt(move _94) -> [0: bb35, otherwise: bb34];
    }

    bb34: {
        _96 = core::panicking::AssertKind::Eq;
        _98 = Option::<Arguments<'_>>::None;
        _97 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _96, _92, _93, move _98);
    }

    bb35: {
        _101 = Result::<i32, ParseIntError>::Ok(const 10_i32);
        _100 = &_101;
        _103 = on_field() -> bb36;
    }

    bb36: {
        _102 = &_103;
        _99 = (move _100, move _102);
        _104 = (_99.0: &std::result::Result<i32, std::num::ParseIntError>);
        _105 = (_99.1: &std::result::Result<i32, std::num::ParseIntError>);
        _107 = <Result<i32, ParseIntError> as PartialEq>::eq(_104, _105) -> bb37;
    }

    bb37: {
        _106 = Not(move _107);
        switchInt(move _106) -> [0: bb39, otherwise: bb38];
    }

    bb38: {
        _108 = core::panicking::AssertKind::Eq;
        _110 = Option::<Arguments<'_>>::None;
        _109 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _108, _104, _105, move _110);
    }

    bb39: {
        _113 = Result::<i32, ParseIntError>::Ok(const 11_i32);
        _112 = &_113;
        _115 = on_tuple_field() -> bb40;
    }

    bb40: {
        _114 = &_115;
        _111 = (move _112, move _114);
        _116 = (_111.0: &std::result::Result<i32, std::num::ParseIntError>);
        _117 = (_111.1: &std::result::Result<i32, std::num::ParseIntError>);
        _119 = <Result<i32, ParseIntError> as PartialEq>::eq(_116, _117) -> bb41;
    }

    bb41: {
        _118 = Not(move _119);
        switchInt(move _118) -> [0: bb43, otherwise: bb42];
    }

    bb42: {
        _120 = core::panicking::AssertKind::Eq;
        _122 = Option::<Arguments<'_>>::None;
        _121 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _120, _116, _117, move _122);
    }

    bb43: {
        _125 = Result::<i32, ParseIntError>::Ok(const 12_i32);
        _124 = &_125;
        _127 = on_try() -> bb44;
    }

    bb44: {
        _126 = &_127;
        _123 = (move _124, move _126);
        _128 = (_123.0: &std::result::Result<i32, std::num::ParseIntError>);
        _129 = (_123.1: &std::result::Result<i32, std::num::ParseIntError>);
        _131 = <Result<i32, ParseIntError> as PartialEq>::eq(_128, _129) -> bb45;
    }

    bb45: {
        _130 = Not(move _131);
        switchInt(move _130) -> [0: bb47, otherwise: bb46];
    }

    bb46: {
        _132 = core::panicking::AssertKind::Eq;
        _134 = Option::<Arguments<'_>>::None;
        _133 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _132, _128, _129, move _134);
    }

    bb47: {
        _137 = Result::<i32, ParseIntError>::Ok(const -3_i32);
        _136 = &_137;
        _139 = on_binary_op() -> bb48;
    }

    bb48: {
        _138 = &_139;
        _135 = (move _136, move _138);
        _140 = (_135.0: &std::result::Result<i32, std::num::ParseIntError>);
        _141 = (_135.1: &std::result::Result<i32, std::num::ParseIntError>);
        _143 = <Result<i32, ParseIntError> as PartialEq>::eq(_140, _141) -> bb49;
    }

    bb49: {
        _142 = Not(move _143);
        switchInt(move _142) -> [0: bb51, otherwise: bb50];
    }

    bb50: {
        _144 = core::panicking::AssertKind::Eq;
        _146 = Option::<Arguments<'_>>::None;
        _145 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _144, _140, _141, move _146);
    }

    bb51: {
        _149 = Result::<i32, ParseIntError>::Ok(const 19_i32);
        _148 = &_149;
        _151 = on_index() -> bb52;
    }

    bb52: {
        _150 = &_151;
        _147 = (move _148, move _150);
        _152 = (_147.0: &std::result::Result<i32, std::num::ParseIntError>);
        _153 = (_147.1: &std::result::Result<i32, std::num::ParseIntError>);
        _155 = <Result<i32, ParseIntError> as PartialEq>::eq(_152, _153) -> bb53;
    }

    bb53: {
        _154 = Not(move _155);
        switchInt(move _154) -> [0: bb55, otherwise: bb54];
    }

    bb54: {
        _156 = core::panicking::AssertKind::Eq;
        _158 = Option::<Arguments<'_>>::None;
        _157 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _156, _152, _153, move _158);
    }

    bb55: {
        _161 = Result::<i32, ParseIntError>::Ok(const -1_i32);
        _160 = &_161;
        _163 = on_args() -> bb56;
    }

    bb56: {
        _162 = &_163;
        _159 = (move _160, move _162);
        _164 = (_159.0: &std::result::Result<i32, std::num::ParseIntError>);
        _165 = (_159.1: &std::result::Result<i32, std::num::ParseIntError>);
        _167 = <Result<i32, ParseIntError> as PartialEq>::eq(_164, _165) -> bb57;
    }

    bb57: {
        _166 = Not(move _167);
        switchInt(move _166) -> [0: bb59, otherwise: bb58];
    }

    bb58: {
        _168 = core::panicking::AssertKind::Eq;
        _170 = Option::<Arguments<'_>>::None;
        _169 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _168, _164, _165, move _170);
    }

    bb59: {
        _173 = Result::<i32, ParseIntError>::Ok(const 22_i32);
        _172 = &_173;
        _175 = on_if() -> bb60;
    }

    bb60: {
        _174 = &_175;
        _171 = (move _172, move _174);
        _176 = (_171.0: &std::result::Result<i32, std::num::ParseIntError>);
        _177 = (_171.1: &std::result::Result<i32, std::num::ParseIntError>);
        _179 = <Result<i32, ParseIntError> as PartialEq>::eq(_176, _177) -> bb61;
    }

    bb61: {
        _178 = Not(move _179);
        switchInt(move _178) -> [0: bb63, otherwise: bb62];
    }

    bb62: {
        _180 = core::panicking::AssertKind::Eq;
        _182 = Option::<Arguments<'_>>::None;
        _181 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _180, _176, _177, move _182);
    }

    bb63: {
        _185 = Result::<i32, ParseIntError>::Ok(const 25_i32);
        _184 = &_185;
        _187 = on_if_let() -> bb64;
    }

    bb64: {
        _186 = &_187;
        _183 = (move _184, move _186);
        _188 = (_183.0: &std::result::Result<i32, std::num::ParseIntError>);
        _189 = (_183.1: &std::result::Result<i32, std::num::ParseIntError>);
        _191 = <Result<i32, ParseIntError> as PartialEq>::eq(_188, _189) -> bb65;
    }

    bb65: {
        _190 = Not(move _191);
        switchInt(move _190) -> [0: bb67, otherwise: bb66];
    }

    bb66: {
        _192 = core::panicking::AssertKind::Eq;
        _194 = Option::<Arguments<'_>>::None;
        _193 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _192, _188, _189, move _194);
    }

    bb67: {
        _197 = Result::<i32, ParseIntError>::Ok(const 29_i32);
        _196 = &_197;
        _199 = on_match() -> bb68;
    }

    bb68: {
        _198 = &_199;
        _195 = (move _196, move _198);
        _200 = (_195.0: &std::result::Result<i32, std::num::ParseIntError>);
        _201 = (_195.1: &std::result::Result<i32, std::num::ParseIntError>);
        _203 = <Result<i32, ParseIntError> as PartialEq>::eq(_200, _201) -> bb69;
    }

    bb69: {
        _202 = Not(move _203);
        switchInt(move _202) -> [0: bb71, otherwise: bb70];
    }

    bb70: {
        _204 = core::panicking::AssertKind::Eq;
        _206 = Option::<Arguments<'_>>::None;
        _205 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _204, _200, _201, move _206);
    }

    bb71: {
        _209 = Result::<bool, ()>::Ok(const false);
        _208 = &_209;
        _211 = tight_binding() -> bb72;
    }

    bb72: {
        _210 = &_211;
        _207 = (move _208, move _210);
        _212 = (_207.0: &std::result::Result<bool, ()>);
        _213 = (_207.1: &std::result::Result<bool, ()>);
        _215 = <Result<bool, ()> as PartialEq>::eq(_212, _213) -> bb73;
    }

    bb73: {
        _214 = Not(move _215);
        switchInt(move _214) -> [0: bb75, otherwise: bb74];
    }

    bb74: {
        _216 = core::panicking::AssertKind::Eq;
        _218 = Option::<Arguments<'_>>::None;
        _217 = core::panicking::assert_failed::<Result<bool, ()>, Result<bool, ()>>(move _216, _212, _213, move _218);
    }

    bb75: {
        return;
    }

    bb76 (cleanup): {
        drop(_19) -> [return: bb77, unwind terminate];
    }

    bb77 (cleanup): {
        drop(_15) -> [return: bb78, unwind terminate];
    }

    bb78 (cleanup): {
        resume;
    }
}

fn <impl at ui/try-operator.rs:182:1: 182:31>::from(_1: std::io::Error) -> Error {
    debug e => _1;
    let mut _0: Error;

    bb0: {
        _0 = Error::Io(move _1);
        return;
    }
}

fn <impl at ui/try-operator.rs:188:1: 188:35>::from(_1: ParseIntError) -> Error {
    debug e => _1;
    let mut _0: Error;

    bb0: {
        _0 = Error::Parse(move _1);
        return;
    }
}

fn Error::Io(_1: std::io::Error) -> Error {
    let mut _0: Error;

    bb0: {
        _0 = Error::Io(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Error::Io(_1: std::io::Error) -> Error {
    let mut _0: Error;

    bb0: {
        _0 = Error::Io(move _1);
        return;
    }
}

fn Error::Parse(_1: ParseIntError) -> Error {
    let mut _0: Error;

    bb0: {
        _0 = Error::Parse(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Error::Parse(_1: ParseIntError) -> Error {
    let mut _0: Error;

    bb0: {
        _0 = Error::Parse(move _1);
        return;
    }
}
