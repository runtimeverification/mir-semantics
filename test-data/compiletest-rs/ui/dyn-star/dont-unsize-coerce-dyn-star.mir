// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/dyn-star/dont-unsize-coerce-dyn-star.rs:11:1: 11:22>::add1(_1: &mut usize) -> usize {
    debug self => _1;
    let mut _0: usize;

    bb0: {
        (*_1) = Add((*_1), const 1_usize);
        _0 = (*_1);
        return;
    }
}

fn add_one(_1: &mut dyn* AddOne) -> usize {
    debug i => _1;
    let mut _0: usize;

    bb0: {
        _0 = <dyn* AddOne as AddOne>::add1(_1) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: dyn* AddOne;
    let mut _2: dyn* AddOne;
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let _6: &[&str; 2];
    let _7: [&str; 2];
    let mut _8: &[core::fmt::rt::Argument<'_>];
    let _9: &[core::fmt::rt::Argument<'_>; 1];
    let _10: [core::fmt::rt::Argument<'_>; 1];
    let mut _11: core::fmt::rt::Argument<'_>;
    let _12: &usize;
    let _13: usize;
    let mut _14: &mut dyn* AddOne;
    let _15: ();
    let mut _16: std::fmt::Arguments<'_>;
    let mut _17: &[&str];
    let _18: &[&str; 2];
    let _19: [&str; 2];
    let mut _20: &[core::fmt::rt::Argument<'_>];
    let _21: &[core::fmt::rt::Argument<'_>; 1];
    let _22: [core::fmt::rt::Argument<'_>; 1];
    let mut _23: core::fmt::rt::Argument<'_>;
    let _24: &usize;
    let _25: usize;
    let mut _26: &mut dyn* AddOne;
    scope 1 {
        debug x => _1;
    }

    bb0: {
        _2 = const 42_usize as dyn* AddOne (DynStar);
        _1 = move _2;
        _7 = [const "", const "\n"];
        _6 = &_7;
        _5 = _6 as &[&str] (Pointer(Unsize));
        _14 = &mut _1;
        _13 = add_one(_14) -> [return: bb1, unwind: bb10];
    }

    bb1: {
        _12 = &_13;
        _11 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_12) -> [return: bb2, unwind: bb10];
    }

    bb2: {
        _10 = [move _11];
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> [return: bb3, unwind: bb10];
    }

    bb3: {
        _3 = _print(move _4) -> [return: bb4, unwind: bb10];
    }

    bb4: {
        _19 = [const "", const "\n"];
        _18 = &_19;
        _17 = _18 as &[&str] (Pointer(Unsize));
        _26 = &mut _1;
        _25 = add_one(_26) -> [return: bb5, unwind: bb10];
    }

    bb5: {
        _24 = &_25;
        _23 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_24) -> [return: bb6, unwind: bb10];
    }

    bb6: {
        _22 = [move _23];
        _21 = &_22;
        _20 = _21 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _16 = Arguments::<'_>::new_v1(move _17, move _20) -> [return: bb7, unwind: bb10];
    }

    bb7: {
        _15 = _print(move _16) -> [return: bb8, unwind: bb10];
    }

    bb8: {
        drop(_1) -> bb9;
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_1) -> [return: bb11, unwind terminate];
    }

    bb11 (cleanup): {
        resume;
    }
}
