// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/dyn-star/issue-102430.rs:10:1: 10:22>::add1(_1: &mut usize) -> usize {
    debug self => _1;
    let mut _0: usize;

    bb0: {
        (*_1) = Add((*_1), const 1_usize);
        _0 = (*_1);
        return;
    }
}

fn <impl at ui/dyn-star/issue-102430.rs:17:1: 17:27>::add1(_1: &mut &mut usize) -> usize {
    debug self => _1;
    let mut _0: usize;
    let mut _2: &mut usize;

    bb0: {
        _2 = deref_copy (*_1);
        _0 = <usize as AddOne>::add1(_2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn add_one(_1: dyn* AddOne) -> usize {
    debug i => _1;
    let mut _0: usize;
    let mut _2: &mut dyn* AddOne;

    bb0: {
        _2 = &mut _1;
        _0 = <dyn* AddOne as AddOne>::add1(move _2) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_1) -> bb2;
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: usize;
    let mut _2: dyn* AddOne;
    let mut _3: &mut usize;
    let _4: ();
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let _7: &[&str; 2];
    let _8: [&str; 2];
    let mut _9: &[core::fmt::rt::Argument<'_>];
    let _10: &[core::fmt::rt::Argument<'_>; 1];
    let _11: [core::fmt::rt::Argument<'_>; 1];
    let mut _12: core::fmt::rt::Argument<'_>;
    let _13: &usize;
    let _14: usize;
    scope 1 {
        debug x => _1;
        scope 2 {
            debug y => _2;
        }
    }

    bb0: {
        _1 = const 42_usize;
        _3 = &mut _1;
        _2 = move _3 as dyn* AddOne (DynStar);
        _8 = [const "", const "\n"];
        _7 = &_8;
        _6 = _7 as &[&str] (Pointer(Unsize));
        _14 = add_one(move _2) -> bb1;
    }

    bb1: {
        _13 = &_14;
        _12 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_13) -> bb2;
    }

    bb2: {
        _11 = [move _12];
        _10 = &_11;
        _9 = _10 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _5 = Arguments::<'_>::new_v1(move _6, move _9) -> bb3;
    }

    bb3: {
        _4 = _print(move _5) -> bb4;
    }

    bb4: {
        return;
    }
}
