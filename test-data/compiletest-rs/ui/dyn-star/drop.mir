// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/dyn-star/drop.rs:8:10: 8:15>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&usize;
    let _6: &usize;

    bb0: {
        _3 = const "Foo";
        _6 = &((*_1).0: usize);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/dyn-star/drop.rs:11:1: 11:18>::drop(_1: &mut Foo) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 1];
    let _6: [&str; 1];

    bb0: {
        _6 = [const "destructor called\n"];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_const(move _4) -> bb1;
    }

    bb1: {
        _2 = _print(move _3) -> bb2;
    }

    bb2: {
        return;
    }
}

fn make_dyn_star(_1: Foo) -> () {
    debug i => _1;
    let mut _0: ();
    let _2: dyn* std::fmt::Debug;
    scope 1 {
        debug _dyn_i => _2;
    }

    bb0: {
        _2 = move _1 as dyn* std::fmt::Debug (DynStar);
        drop(_2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: Foo;

    bb0: {
        _2 = Foo(const 42_usize);
        _1 = make_dyn_star(move _2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn Foo(_1: usize) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: usize) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo(move _1);
        return;
    }
}
