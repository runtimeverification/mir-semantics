// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn make_dyn_star() -> dyn* std::fmt::Display {
    let mut _0: dyn* std::fmt::Display;
    let mut _1: std::boxed::Box<i32>;

    bb0: {
        _1 = Box::<i32>::new(const 42_i32) -> bb1;
    }

    bb1: {
        _0 = move _1 as dyn* std::fmt::Display (DynStar);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: dyn* std::fmt::Display;
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 2];
    let _6: [&str; 2];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &dyn* std::fmt::Display;
    scope 1 {
        debug x => _1;
    }

    bb0: {
        _1 = make_dyn_star() -> bb1;
    }

    bb1: {
        _6 = [const "", const "\n"];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _11 = &_1;
        _10 = core::fmt::rt::Argument::<'_>::new_display::<dyn* std::fmt::Display>(_11) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _2 = _print(move _3) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_1) -> bb5;
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_1) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }
}
