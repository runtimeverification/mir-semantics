// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: dyn* std::fmt::Debug;
    let mut _2: &i32;
    let _3: i32;
    let mut _5: std::boxed::Box<dyn std::fmt::Debug>;
    let mut _6: std::boxed::Box<dyn* std::fmt::Debug>;
    let mut _7: (&&str, &std::string::String);
    let mut _8: &&str;
    let _9: &str;
    let mut _10: &std::string::String;
    let _11: std::string::String;
    let mut _13: std::fmt::Arguments<'_>;
    let mut _14: &[&str];
    let _15: &[&str; 1];
    let _16: [&str; 1];
    let mut _17: &[core::fmt::rt::Argument<'_>];
    let _18: &[core::fmt::rt::Argument<'_>; 1];
    let _19: [core::fmt::rt::Argument<'_>; 1];
    let mut _20: core::fmt::rt::Argument<'_>;
    let _21: &std::boxed::Box<dyn std::fmt::Debug>;
    let mut _24: bool;
    let mut _25: bool;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _30: std::boxed::Box<i32>;
    let mut _32: dyn* std::fmt::Debug;
    let mut _33: &std::boxed::Box<dyn std::fmt::Debug>;
    let mut _34: (&&str, &std::string::String);
    let mut _35: &&str;
    let _36: &str;
    let mut _37: &std::string::String;
    let _38: std::string::String;
    let mut _40: std::fmt::Arguments<'_>;
    let mut _41: &[&str];
    let _42: &[&str; 1];
    let _43: [&str; 1];
    let mut _44: &[core::fmt::rt::Argument<'_>];
    let _45: &[core::fmt::rt::Argument<'_>; 1];
    let _46: [core::fmt::rt::Argument<'_>; 1];
    let mut _47: core::fmt::rt::Argument<'_>;
    let _48: &dyn* std::fmt::Debug;
    let mut _51: bool;
    let mut _52: bool;
    let _54: !;
    let mut _55: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _4: std::boxed::Box<dyn std::fmt::Debug>;
        scope 2 {
            debug x => _4;
            let _12: std::string::String;
            let _22: &&str;
            let _23: &std::string::String;
            let _29: std::boxed::Box<dyn std::fmt::Debug>;
            scope 3 {
                debug res => _12;
            }
            scope 4 {
                debug left_val => _22;
                debug right_val => _23;
                let _26: core::panicking::AssertKind;
                scope 5 {
                    debug kind => _26;
                }
            }
            scope 6 {
                debug x => _29;
                let _31: dyn* std::fmt::Debug;
                scope 7 {
                    debug x => _31;
                    let _39: std::string::String;
                    let _49: &&str;
                    let _50: &std::string::String;
                    scope 8 {
                        debug res => _39;
                    }
                    scope 9 {
                        debug left_val => _49;
                        debug right_val => _50;
                        let _53: core::panicking::AssertKind;
                        scope 10 {
                            debug kind => _53;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _3 = const 42_i32;
        _2 = &_3;
        _1 = move _2 as dyn* std::fmt::Debug (DynStar);
        _6 = Box::<dyn* Debug>::new(move _1) -> bb1;
    }

    bb1: {
        _5 = move _6 as std::boxed::Box<dyn std::fmt::Debug> (Pointer(Unsize));
        _4 = move _5;
        _9 = const "42";
        _8 = &_9;
        _16 = [const ""];
        _15 = &_16;
        _14 = _15 as &[&str] (Pointer(Unsize));
        _21 = &_4;
        _20 = core::fmt::rt::Argument::<'_>::new_debug::<Box<dyn Debug>>(_21) -> [return: bb2, unwind: bb24];
    }

    bb2: {
        _19 = [move _20];
        _18 = &_19;
        _17 = _18 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _13 = Arguments::<'_>::new_v1(move _14, move _17) -> [return: bb3, unwind: bb24];
    }

    bb3: {
        _12 = format(move _13) -> [return: bb4, unwind: bb24];
    }

    bb4: {
        _11 = move _12;
        _10 = &_11;
        _7 = (move _8, move _10);
        _22 = (_7.0: &&str);
        _23 = (_7.1: &std::string::String);
        _25 = <&str as PartialEq<String>>::eq(_22, _23) -> [return: bb5, unwind: bb23];
    }

    bb5: {
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<&str, String>(move _26, _22, _23, move _28) -> bb23;
    }

    bb7: {
        drop(_11) -> [return: bb8, unwind: bb24];
    }

    bb8: {
        _30 = Box::<i32>::new(const 42_i32) -> [return: bb9, unwind: bb24];
    }

    bb9: {
        _29 = move _30 as std::boxed::Box<dyn std::fmt::Debug> (Pointer(Unsize));
        _33 = &_29;
        _32 = move _33 as dyn* std::fmt::Debug (DynStar);
        _31 = move _32;
        _36 = const "42";
        _35 = &_36;
        _43 = [const ""];
        _42 = &_43;
        _41 = _42 as &[&str] (Pointer(Unsize));
        _48 = &_31;
        _47 = core::fmt::rt::Argument::<'_>::new_debug::<dyn* Debug>(_48) -> [return: bb10, unwind: bb21];
    }

    bb10: {
        _46 = [move _47];
        _45 = &_46;
        _44 = _45 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _40 = Arguments::<'_>::new_v1(move _41, move _44) -> [return: bb11, unwind: bb21];
    }

    bb11: {
        _39 = format(move _40) -> [return: bb12, unwind: bb21];
    }

    bb12: {
        _38 = move _39;
        _37 = &_38;
        _34 = (move _35, move _37);
        _49 = (_34.0: &&str);
        _50 = (_34.1: &std::string::String);
        _52 = <&str as PartialEq<String>>::eq(_49, _50) -> [return: bb13, unwind: bb20];
    }

    bb13: {
        _51 = Not(move _52);
        switchInt(move _51) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _53 = core::panicking::AssertKind::Eq;
        _55 = Option::<Arguments<'_>>::None;
        _54 = core::panicking::assert_failed::<&str, String>(move _53, _49, _50, move _55) -> bb20;
    }

    bb15: {
        drop(_38) -> [return: bb16, unwind: bb21];
    }

    bb16: {
        drop(_31) -> [return: bb17, unwind: bb22];
    }

    bb17: {
        drop(_29) -> [return: bb18, unwind: bb24];
    }

    bb18: {
        drop(_4) -> bb19;
    }

    bb19: {
        return;
    }

    bb20 (cleanup): {
        drop(_38) -> [return: bb21, unwind terminate];
    }

    bb21 (cleanup): {
        drop(_31) -> [return: bb22, unwind terminate];
    }

    bb22 (cleanup): {
        drop(_29) -> [return: bb24, unwind terminate];
    }

    bb23 (cleanup): {
        drop(_11) -> [return: bb24, unwind terminate];
    }

    bb24 (cleanup): {
        drop(_4) -> [return: bb25, unwind terminate];
    }

    bb25 (cleanup): {
        resume;
    }
}
