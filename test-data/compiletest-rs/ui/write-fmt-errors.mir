// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/write-fmt-errors.rs:10:1: 10:35>::fmt(_1: &ErrorDisplay, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    let mut _0: std::result::Result<(), std::fmt::Error>;

    bb0: {
        _0 = Result::<(), std::fmt::Error>::Err(const std::fmt::Error);
        return;
    }
}

const FORMAT_ERROR: ErrorKind = {
    let mut _0: std::io::ErrorKind;

    bb0: {
        _0 = Uncategorized;
        return;
    }
}

const WRITER_ERROR: ErrorKind = {
    let mut _0: std::io::ErrorKind;

    bb0: {
        _0 = NotConnected;
        return;
    }
}

fn <impl at ui/write-fmt-errors.rs:21:1: 21:27>::write(_1: &mut ErrorWriter, _2: &[u8]) -> Result<usize, std::io::Error> {
    debug self => _1;
    debug _buf => _2;
    let mut _0: std::result::Result<usize, std::io::Error>;
    let mut _3: std::io::Error;

    bb0: {
        _3 = std::io::Error::new::<&str>(const _, const "not connected") -> bb1;
    }

    bb1: {
        _0 = Result::<usize, std::io::Error>::Err(move _3);
        return;
    }
}

fn <impl at ui/write-fmt-errors.rs:21:1: 21:27>::flush(_1: &mut ErrorWriter) -> Result<(), std::io::Error> {
    debug self => _1;
    let mut _0: std::result::Result<(), std::io::Error>;

    bb0: {
        _0 = Result::<(), std::io::Error>::Ok(const ());
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::result::Result<(), std::io::Error>;
    let mut _2: &mut std::io::Sink;
    let mut _3: std::io::Sink;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let _6: &[&str; 2];
    let _7: [&str; 2];
    let mut _8: &[core::fmt::rt::Argument<'_>];
    let _9: &[core::fmt::rt::Argument<'_>; 1];
    let _10: [core::fmt::rt::Argument<'_>; 1];
    let mut _11: core::fmt::rt::Argument<'_>;
    let _12: &ErrorDisplay;
    let _13: ErrorDisplay;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: &std::result::Result<(), std::io::Error>;
    let _17: !;
    let mut _18: (&std::io::ErrorKind, &std::io::ErrorKind);
    let mut _19: &std::io::ErrorKind;
    let _20: std::io::ErrorKind;
    let mut _21: &std::io::Error;
    let _22: std::io::Error;
    let mut _23: std::result::Result<(), std::io::Error>;
    let mut _24: &std::io::ErrorKind;
    let _25: std::io::ErrorKind;
    let mut _28: bool;
    let mut _29: bool;
    let _31: !;
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _34: &mut ErrorWriter;
    let mut _35: ErrorWriter;
    let mut _36: std::fmt::Arguments<'_>;
    let mut _37: &[&str];
    let _38: &[&str; 1];
    let _39: [&str; 1];
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: &std::result::Result<(), std::io::Error>;
    let _43: !;
    let mut _45: &mut ErrorWriter;
    let mut _46: ErrorWriter;
    let mut _47: std::fmt::Arguments<'_>;
    let mut _48: &[&str];
    let _49: &[&str; 1];
    let _50: [&str; 1];
    let mut _51: &[core::fmt::rt::Argument<'_>];
    let _52: &[core::fmt::rt::Argument<'_>; 1];
    let _53: [core::fmt::rt::Argument<'_>; 1];
    let mut _54: core::fmt::rt::Argument<'_>;
    let _55: &ErrorDisplay;
    let _56: ErrorDisplay;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: &std::result::Result<(), std::io::Error>;
    let _60: !;
    let mut _61: (&std::io::ErrorKind, &std::io::ErrorKind);
    let mut _62: &std::io::ErrorKind;
    let _63: std::io::ErrorKind;
    let mut _64: &std::io::Error;
    let _65: std::io::Error;
    let mut _66: std::result::Result<(), std::io::Error>;
    let mut _67: &std::io::ErrorKind;
    let _68: std::io::ErrorKind;
    let mut _71: bool;
    let mut _72: bool;
    let _74: !;
    let mut _75: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _77: &mut ErrorWriter;
    let mut _78: ErrorWriter;
    let mut _79: std::fmt::Arguments<'_>;
    let mut _80: &[&str];
    let _81: &[&str; 2];
    let _82: [&str; 2];
    let mut _83: &[core::fmt::rt::Argument<'_>];
    let _84: &[core::fmt::rt::Argument<'_>; 1];
    let _85: [core::fmt::rt::Argument<'_>; 1];
    let mut _86: core::fmt::rt::Argument<'_>;
    let _87: &ErrorDisplay;
    let _88: ErrorDisplay;
    let mut _89: bool;
    let mut _90: bool;
    let mut _91: &std::result::Result<(), std::io::Error>;
    let _92: !;
    let mut _93: (&std::io::ErrorKind, &std::io::ErrorKind);
    let mut _94: &std::io::ErrorKind;
    let _95: std::io::ErrorKind;
    let mut _96: &std::io::Error;
    let _97: std::io::Error;
    let mut _98: std::result::Result<(), std::io::Error>;
    let mut _99: &std::io::ErrorKind;
    let _100: std::io::ErrorKind;
    let mut _103: bool;
    let mut _104: bool;
    let _106: !;
    let mut _107: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _108: bool;
    let mut _109: bool;
    let mut _110: bool;
    scope 1 {
        debug res => _1;
        let _26: &std::io::ErrorKind;
        let _27: &std::io::ErrorKind;
        let _33: std::result::Result<(), std::io::Error>;
        scope 2 {
            debug left_val => _26;
            debug right_val => _27;
            let _30: core::panicking::AssertKind;
            scope 3 {
                debug kind => _30;
            }
        }
        scope 4 {
            debug res => _33;
            let _44: std::result::Result<(), std::io::Error>;
            scope 5 {
                debug res => _44;
                let _69: &std::io::ErrorKind;
                let _70: &std::io::ErrorKind;
                let _76: std::result::Result<(), std::io::Error>;
                scope 6 {
                    debug left_val => _69;
                    debug right_val => _70;
                    let _73: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _73;
                    }
                }
                scope 8 {
                    debug res => _76;
                    let _101: &std::io::ErrorKind;
                    let _102: &std::io::ErrorKind;
                    scope 9 {
                        debug left_val => _101;
                        debug right_val => _102;
                        let _105: core::panicking::AssertKind;
                        scope 10 {
                            debug kind => _105;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _110 = const false;
        _109 = const false;
        _108 = const false;
        _3 = sink() -> bb1;
    }

    bb1: {
        _2 = &mut _3;
        _7 = [const "1 ", const " bar"];
        _6 = &_7;
        _5 = _6 as &[&str] (Pointer(Unsize));
        _12 = &_13;
        _11 = core::fmt::rt::Argument::<'_>::new_display::<ErrorDisplay>(_12) -> bb2;
    }

    bb2: {
        _10 = [move _11];
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> bb3;
    }

    bb3: {
        _110 = const true;
        _1 = <Sink as std::io::Write>::write_fmt(move _2, move _4) -> bb4;
    }

    bb4: {
        _16 = &_1;
        _15 = Result::<(), std::io::Error>::is_err(move _16) -> [return: bb5, unwind: bb54];
    }

    bb5: {
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _17 = begin_panic::<&str>(const "formatter error did not propagate") -> bb54;
    }

    bb7: {
        _110 = const false;
        _23 = move _1;
        _22 = Result::<(), std::io::Error>::unwrap_err(move _23) -> [return: bb8, unwind: bb54];
    }

    bb8: {
        _21 = &_22;
        _20 = std::io::Error::kind(move _21) -> [return: bb9, unwind: bb47];
    }

    bb9: {
        _19 = &_20;
        _25 = const _;
        _24 = &_25;
        _18 = (move _19, move _24);
        _26 = (_18.0: &std::io::ErrorKind);
        _27 = (_18.1: &std::io::ErrorKind);
        _29 = <ErrorKind as PartialEq>::eq(_26, _27) -> [return: bb10, unwind: bb47];
    }

    bb10: {
        _28 = Not(move _29);
        switchInt(move _28) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _30 = core::panicking::AssertKind::Eq;
        _32 = Option::<Arguments<'_>>::None;
        _31 = core::panicking::assert_failed::<ErrorKind, ErrorKind>(move _30, _26, _27, move _32) -> bb47;
    }

    bb12: {
        drop(_22) -> [return: bb13, unwind: bb54];
    }

    bb13: {
        _34 = &mut _35;
        _39 = [const "abc"];
        _38 = &_39;
        _37 = _38 as &[&str] (Pointer(Unsize));
        _36 = Arguments::<'_>::new_const(move _37) -> [return: bb14, unwind: bb54];
    }

    bb14: {
        _33 = <ErrorWriter as std::io::Write>::write_fmt(move _34, move _36) -> [return: bb15, unwind: bb54];
    }

    bb15: {
        _42 = &_33;
        _41 = Result::<(), std::io::Error>::is_err(move _42) -> [return: bb16, unwind: bb46];
    }

    bb16: {
        _40 = Not(move _41);
        switchInt(move _40) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _43 = begin_panic::<&str>(const "writer error did not propagate") -> bb46;
    }

    bb18: {
        _45 = &mut _46;
        _50 = [const "abc "];
        _49 = &_50;
        _48 = _49 as &[&str] (Pointer(Unsize));
        _55 = &_56;
        _54 = core::fmt::rt::Argument::<'_>::new_display::<ErrorDisplay>(_55) -> [return: bb19, unwind: bb46];
    }

    bb19: {
        _53 = [move _54];
        _52 = &_53;
        _51 = _52 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _47 = Arguments::<'_>::new_v1(move _48, move _51) -> [return: bb20, unwind: bb46];
    }

    bb20: {
        _44 = <ErrorWriter as std::io::Write>::write_fmt(move _45, move _47) -> [return: bb21, unwind: bb46];
    }

    bb21: {
        _109 = const true;
        _59 = &_44;
        _58 = Result::<(), std::io::Error>::is_err(move _59) -> [return: bb22, unwind: bb52];
    }

    bb22: {
        _57 = Not(move _58);
        switchInt(move _57) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _60 = begin_panic::<&str>(const "writer error did not propagate") -> bb52;
    }

    bb24: {
        _109 = const false;
        _66 = move _44;
        _65 = Result::<(), std::io::Error>::unwrap_err(move _66) -> [return: bb25, unwind: bb52];
    }

    bb25: {
        _64 = &_65;
        _63 = std::io::Error::kind(move _64) -> [return: bb26, unwind: bb45];
    }

    bb26: {
        _62 = &_63;
        _68 = const _;
        _67 = &_68;
        _61 = (move _62, move _67);
        _69 = (_61.0: &std::io::ErrorKind);
        _70 = (_61.1: &std::io::ErrorKind);
        _72 = <ErrorKind as PartialEq>::eq(_69, _70) -> [return: bb27, unwind: bb45];
    }

    bb27: {
        _71 = Not(move _72);
        switchInt(move _71) -> [0: bb29, otherwise: bb28];
    }

    bb28: {
        _73 = core::panicking::AssertKind::Eq;
        _75 = Option::<Arguments<'_>>::None;
        _74 = core::panicking::assert_failed::<ErrorKind, ErrorKind>(move _73, _69, _70, move _75) -> bb45;
    }

    bb29: {
        drop(_65) -> [return: bb30, unwind: bb52];
    }

    bb30: {
        _77 = &mut _78;
        _82 = [const "", const " abc"];
        _81 = &_82;
        _80 = _81 as &[&str] (Pointer(Unsize));
        _87 = &_88;
        _86 = core::fmt::rt::Argument::<'_>::new_display::<ErrorDisplay>(_87) -> [return: bb31, unwind: bb52];
    }

    bb31: {
        _85 = [move _86];
        _84 = &_85;
        _83 = _84 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _79 = Arguments::<'_>::new_v1(move _80, move _83) -> [return: bb32, unwind: bb52];
    }

    bb32: {
        _76 = <ErrorWriter as std::io::Write>::write_fmt(move _77, move _79) -> [return: bb33, unwind: bb52];
    }

    bb33: {
        _108 = const true;
        _91 = &_76;
        _90 = Result::<(), std::io::Error>::is_err(move _91) -> [return: bb34, unwind: bb50];
    }

    bb34: {
        _89 = Not(move _90);
        switchInt(move _89) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _92 = begin_panic::<&str>(const "formatter error did not propagate") -> bb50;
    }

    bb36: {
        _108 = const false;
        _98 = move _76;
        _97 = Result::<(), std::io::Error>::unwrap_err(move _98) -> [return: bb37, unwind: bb50];
    }

    bb37: {
        _96 = &_97;
        _95 = std::io::Error::kind(move _96) -> [return: bb38, unwind: bb44];
    }

    bb38: {
        _94 = &_95;
        _100 = const _;
        _99 = &_100;
        _93 = (move _94, move _99);
        _101 = (_93.0: &std::io::ErrorKind);
        _102 = (_93.1: &std::io::ErrorKind);
        _104 = <ErrorKind as PartialEq>::eq(_101, _102) -> [return: bb39, unwind: bb44];
    }

    bb39: {
        _103 = Not(move _104);
        switchInt(move _103) -> [0: bb41, otherwise: bb40];
    }

    bb40: {
        _105 = core::panicking::AssertKind::Eq;
        _107 = Option::<Arguments<'_>>::None;
        _106 = core::panicking::assert_failed::<ErrorKind, ErrorKind>(move _105, _101, _102, move _107) -> bb44;
    }

    bb41: {
        drop(_97) -> [return: bb42, unwind: bb50];
    }

    bb42: {
        _108 = const false;
        _109 = const false;
        drop(_33) -> [return: bb43, unwind: bb54];
    }

    bb43: {
        _110 = const false;
        return;
    }

    bb44 (cleanup): {
        drop(_97) -> [return: bb50, unwind terminate];
    }

    bb45 (cleanup): {
        drop(_65) -> [return: bb52, unwind terminate];
    }

    bb46 (cleanup): {
        drop(_33) -> [return: bb54, unwind terminate];
    }

    bb47 (cleanup): {
        drop(_22) -> [return: bb54, unwind terminate];
    }

    bb48 (cleanup): {
        resume;
    }

    bb49 (cleanup): {
        drop(_76) -> [return: bb52, unwind terminate];
    }

    bb50 (cleanup): {
        switchInt(_108) -> [0: bb52, otherwise: bb49];
    }

    bb51 (cleanup): {
        drop(_44) -> [return: bb46, unwind terminate];
    }

    bb52 (cleanup): {
        switchInt(_109) -> [0: bb46, otherwise: bb51];
    }

    bb53 (cleanup): {
        drop(_1) -> [return: bb48, unwind terminate];
    }

    bb54 (cleanup): {
        switchInt(_110) -> [0: bb48, otherwise: bb53];
    }
}
