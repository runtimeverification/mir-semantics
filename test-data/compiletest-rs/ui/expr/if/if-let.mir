// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn macros() -> () {
    let mut _0: ();
    let mut _1: i32;
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 1];
    let _6: [&str; 1];
    let mut _7: i32;
    let _8: ();
    let mut _9: std::fmt::Arguments<'_>;
    let mut _10: &[&str];
    let _11: &[&str; 1];
    let _12: [&str; 1];
    scope 1 {
        debug a => _1;
    }
    scope 2 {
        debug a => _7;
    }

    bb0: {
        _1 = const 1_i32;
        _6 = [const "irrefutable pattern\n"];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_const(move _4) -> bb1;
    }

    bb1: {
        _2 = _print(move _3) -> bb2;
    }

    bb2: {
        _7 = const 1_i32;
        _12 = [const "irrefutable pattern\n"];
        _11 = &_12;
        _10 = _11 as &[&str] (Pointer(Unsize));
        _9 = Arguments::<'_>::new_const(move _10) -> bb3;
    }

    bb3: {
        _8 = _print(move _9) -> bb4;
    }

    bb4: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: i32;
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 1];
    let _6: [&str; 1];
    let mut _7: i32;
    let _8: ();
    let mut _9: std::fmt::Arguments<'_>;
    let mut _10: &[&str];
    let _11: &[&str; 1];
    let _12: [&str; 1];
    let mut _13: i32;
    let _14: ();
    let mut _15: std::fmt::Arguments<'_>;
    let mut _16: &[&str];
    let _17: &[&str; 1];
    let _18: [&str; 1];
    let mut _19: i32;
    let _20: ();
    let mut _21: std::fmt::Arguments<'_>;
    let mut _22: &[&str];
    let _23: &[&str; 1];
    let _24: [&str; 1];
    let mut _25: bool;
    let _26: ();
    let mut _27: std::fmt::Arguments<'_>;
    let mut _28: &[&str];
    let _29: &[&str; 1];
    let _30: [&str; 1];
    let mut _31: i32;
    let _32: ();
    let mut _33: std::fmt::Arguments<'_>;
    let mut _34: &[&str];
    let _35: &[&str; 1];
    let _36: [&str; 1];
    scope 1 {
        debug a => _1;
    }
    scope 2 {
        debug a => _7;
    }
    scope 3 {
    }
    scope 4 {
        debug a => _19;
    }
    scope 5 {
        debug a => _31;
    }

    bb0: {
        _1 = const 1_i32;
        _6 = [const "irrefutable pattern\n"];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_const(move _4) -> bb1;
    }

    bb1: {
        _2 = _print(move _3) -> bb2;
    }

    bb2: {
        _7 = const 1_i32;
        _12 = [const "irrefutable pattern\n"];
        _11 = &_12;
        _10 = _11 as &[&str] (Pointer(Unsize));
        _9 = Arguments::<'_>::new_const(move _10) -> bb3;
    }

    bb3: {
        _8 = _print(move _9) -> bb4;
    }

    bb4: {
        _13 = const 2_i32;
        switchInt(_13) -> [1: bb5, otherwise: bb7];
    }

    bb5: {
        _18 = [const "refutable pattern\n"];
        _17 = &_18;
        _16 = _17 as &[&str] (Pointer(Unsize));
        _15 = Arguments::<'_>::new_const(move _16) -> bb6;
    }

    bb6: {
        _14 = _print(move _15) -> bb9;
    }

    bb7: {
        _19 = const 1_i32;
        _24 = [const "irrefutable pattern\n"];
        _23 = &_24;
        _22 = _23 as &[&str] (Pointer(Unsize));
        _21 = Arguments::<'_>::new_const(move _22) -> bb8;
    }

    bb8: {
        _20 = _print(move _21) -> bb9;
    }

    bb9: {
        _25 = const true;
        switchInt(move _25) -> [0: bb12, otherwise: bb10];
    }

    bb10: {
        _30 = [const "if\n"];
        _29 = &_30;
        _28 = _29 as &[&str] (Pointer(Unsize));
        _27 = Arguments::<'_>::new_const(move _28) -> bb11;
    }

    bb11: {
        _26 = _print(move _27) -> bb14;
    }

    bb12: {
        _31 = const 1_i32;
        _36 = [const "irrefutable pattern\n"];
        _35 = &_36;
        _34 = _35 as &[&str] (Pointer(Unsize));
        _33 = Arguments::<'_>::new_const(move _34) -> bb13;
    }

    bb13: {
        _32 = _print(move _33) -> bb14;
    }

    bb14: {
        return;
    }
}
