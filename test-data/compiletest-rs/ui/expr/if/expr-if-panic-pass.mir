// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test_if_panic() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _2: bool;
    let mut _3: !;
    let mut _4: (&i32, &i32);
    let mut _5: &i32;
    let mut _6: &i32;
    let _7: i32;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: i32;
    let mut _13: i32;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _8: &i32;
        let _9: &i32;
        scope 2 {
            debug left_val => _8;
            debug right_val => _9;
            let _14: core::panicking::AssertKind;
            scope 3 {
                debug kind => _14;
            }
        }
    }

    bb0: {
        _2 = const false;
        switchInt(move _2) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _3 = begin_panic::<&str>(const "explicit panic");
    }

    bb2: {
        _1 = const 10_i32;
        _5 = &_1;
        _7 = const 10_i32;
        _6 = &_7;
        _4 = (move _5, move _6);
        _8 = (_4.0: &i32);
        _9 = (_4.1: &i32);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<i32, i32>(move _14, _8, _9, move _16);
    }

    bb4: {
        return;
    }
}

fn test_else_panic() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _2: bool;
    let mut _3: !;
    let mut _4: (&i32, &i32);
    let mut _5: &i32;
    let mut _6: &i32;
    let _7: i32;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: i32;
    let mut _13: i32;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _8: &i32;
        let _9: &i32;
        scope 2 {
            debug left_val => _8;
            debug right_val => _9;
            let _14: core::panicking::AssertKind;
            scope 3 {
                debug kind => _14;
            }
        }
    }

    bb0: {
        _2 = const true;
        switchInt(move _2) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _1 = const 10_i32;
        _5 = &_1;
        _7 = const 10_i32;
        _6 = &_7;
        _4 = (move _5, move _6);
        _8 = (_4.0: &i32);
        _9 = (_4.1: &i32);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb4, otherwise: bb3];
    }

    bb2: {
        _3 = begin_panic::<&str>(const "explicit panic");
    }

    bb3: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<i32, i32>(move _14, _8, _9, move _16);
    }

    bb4: {
        return;
    }
}

fn test_elseif_panic() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;
    let mut _5: (&i32, &i32);
    let mut _6: &i32;
    let mut _7: &i32;
    let _8: i32;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: i32;
    let mut _14: i32;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _9: &i32;
        let _10: &i32;
        scope 2 {
            debug left_val => _9;
            debug right_val => _10;
            let _15: core::panicking::AssertKind;
            scope 3 {
                debug kind => _15;
            }
        }
    }

    bb0: {
        _2 = const false;
        switchInt(move _2) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _1 = const 0_i32;
        goto -> bb5;
    }

    bb2: {
        _3 = const false;
        switchInt(move _3) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _4 = begin_panic::<&str>(const "explicit panic");
    }

    bb4: {
        _1 = const 10_i32;
        goto -> bb5;
    }

    bb5: {
        _6 = &_1;
        _8 = const 10_i32;
        _7 = &_8;
        _5 = (move _6, move _7);
        _9 = (_5.0: &i32);
        _10 = (_5.1: &i32);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<i32, i32>(move _15, _9, _10, move _17);
    }

    bb7: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let _3: ();

    bb0: {
        _1 = test_if_panic() -> bb1;
    }

    bb1: {
        _2 = test_else_panic() -> bb2;
    }

    bb2: {
        _3 = test_elseif_panic() -> bb3;
    }

    bb3: {
        return;
    }
}
