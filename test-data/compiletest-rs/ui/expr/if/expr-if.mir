// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test_if() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: !;
    scope 1 {
        debug rs => _1;
    }

    bb0: {
        _1 = const true;
        _2 = Not(_1);
        switchInt(move _2) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _3 = core::panicking::panic(const "assertion failed: (rs)");
    }

    bb2: {
        return;
    }
}

fn test_else() -> () {
    let mut _0: ();
    let _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;
    scope 1 {
        debug rs => _1;
    }

    bb0: {
        _2 = const false;
        _1 = Not(_2);
        _3 = Not(_1);
        switchInt(move _3) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _4 = core::panicking::panic(const "assertion failed: (rs)");
    }

    bb2: {
        return;
    }
}

fn test_elseif1() -> () {
    let mut _0: ();
    let _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: !;
    scope 1 {
        debug rs => _1;
    }

    bb0: {
        _2 = const true;
        switchInt(move _2) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _1 = const true;
        goto -> bb3;
    }

    bb2: {
        _1 = const false;
        goto -> bb3;
    }

    bb3: {
        _4 = _1;
        _3 = Not(move _4);
        switchInt(move _3) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _5 = core::panicking::panic(const "assertion failed: (rs)");
    }

    bb5: {
        return;
    }
}

fn test_elseif2() -> () {
    let mut _0: ();
    let _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: !;
    scope 1 {
        debug rs => _1;
    }

    bb0: {
        _2 = const false;
        switchInt(move _2) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _1 = const false;
        goto -> bb3;
    }

    bb2: {
        _3 = const true;
        _1 = _3;
        goto -> bb3;
    }

    bb3: {
        _5 = _1;
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _6 = core::panicking::panic(const "assertion failed: (rs)");
    }

    bb5: {
        return;
    }
}

fn test_elseif3() -> () {
    let mut _0: ();
    let _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: !;
    scope 1 {
        debug rs => _1;
    }

    bb0: {
        _2 = const false;
        switchInt(move _2) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _1 = const false;
        goto -> bb3;
    }

    bb2: {
        _3 = const false;
        _1 = Not(_3);
        goto -> bb3;
    }

    bb3: {
        _5 = _1;
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _6 = core::panicking::panic(const "assertion failed: (rs)");
    }

    bb5: {
        return;
    }
}

fn test_inferrence() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: !;
    scope 1 {
        debug rs => _1;
    }

    bb0: {
        _1 = const true;
        _2 = Not(_1);
        switchInt(move _2) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _3 = core::panicking::panic(const "assertion failed: (rs)");
    }

    bb2: {
        return;
    }
}

fn test_if_as_if_condition() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: !;
    scope 1 {
        debug rs1 => _1;
        let _5: bool;
        scope 2 {
            debug rs2 => _5;
        }
    }

    bb0: {
        _2 = const false;
        _1 = Not(_2);
        _3 = Not(_1);
        switchInt(move _3) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _4 = core::panicking::panic(const "assertion failed: (rs1)");
    }

    bb2: {
        _7 = const true;
        _6 = Not(_7);
        _5 = Not(_6);
        _8 = Not(_5);
        switchInt(move _8) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _9 = core::panicking::panic(const "assertion failed: (rs2)");
    }

    bb4: {
        return;
    }
}

fn test_if_as_block_result() -> () {
    let mut _0: ();
    let _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: !;
    scope 1 {
        debug rs => _1;
    }

    bb0: {
        _2 = const true;
        switchInt(move _2) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _3 = const false;
        _1 = Not(_3);
        goto -> bb3;
    }

    bb2: {
        _1 = const false;
        goto -> bb3;
    }

    bb3: {
        _5 = _1;
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _6 = core::panicking::panic(const "assertion failed: (rs)");
    }

    bb5: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let _3: ();
    let _4: ();
    let _5: ();
    let _6: ();
    let _7: ();
    let _8: ();

    bb0: {
        _1 = test_if() -> bb1;
    }

    bb1: {
        _2 = test_else() -> bb2;
    }

    bb2: {
        _3 = test_elseif1() -> bb3;
    }

    bb3: {
        _4 = test_elseif2() -> bb4;
    }

    bb4: {
        _5 = test_elseif3() -> bb5;
    }

    bb5: {
        _6 = test_inferrence() -> bb6;
    }

    bb6: {
        _7 = test_if_as_if_condition() -> bb7;
    }

    bb7: {
        _8 = test_if_as_block_result() -> bb8;
    }

    bb8: {
        return;
    }
}
