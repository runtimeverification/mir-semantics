// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn even(_1: usize) -> bool {
    debug x => _1;
    let mut _0: bool;
    let mut _2: bool;
    let mut _3: usize;

    bb0: {
        _2 = Lt(_1, const 2_usize);
        switchInt(move _2) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _0 = const false;
        goto -> bb5;
    }

    bb2: {
        switchInt(move _1) -> [2: bb3, otherwise: bb4];
    }

    bb3: {
        _0 = const true;
        goto -> bb5;
    }

    bb4: {
        _3 = Sub(_1, const 2_usize);
        _0 = even(move _3) -> bb5;
    }

    bb5: {
        return;
    }
}

fn foo(_1: usize) -> () {
    debug x => _1;
    let mut _0: ();
    let mut _2: bool;
    let mut _3: usize;
    let _4: ();
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let _7: &[&str; 2];
    let _8: [&str; 2];
    let mut _9: &[core::fmt::rt::Argument<'_>];
    let _10: &[core::fmt::rt::Argument<'_>; 1];
    let _11: [core::fmt::rt::Argument<'_>; 1];
    let mut _12: core::fmt::rt::Argument<'_>;
    let _13: &usize;
    let mut _14: !;

    bb0: {
        _3 = _1;
        _2 = even(move _3) -> bb1;
    }

    bb1: {
        switchInt(move _2) -> [0: bb6, otherwise: bb2];
    }

    bb2: {
        _8 = [const "", const "\n"];
        _7 = &_8;
        _6 = _7 as &[&str] (Pointer(Unsize));
        _13 = &_1;
        _12 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_13) -> bb3;
    }

    bb3: {
        _11 = [move _12];
        _10 = &_11;
        _9 = _10 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _5 = Arguments::<'_>::new_v1(move _6, move _9) -> bb4;
    }

    bb4: {
        _4 = _print(move _5) -> bb5;
    }

    bb5: {
        return;
    }

    bb6: {
        _14 = begin_panic::<&str>(const "explicit panic");
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();

    bb0: {
        _1 = foo(const 2_usize) -> bb1;
    }

    bb1: {
        return;
    }
}
