// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn with_parens(_1: T) -> String {
    debug arg => _1;
    let mut _0: std::string::String;
    let _2: &T;

    bb0: {
        _2 = &_1;
        _0 = <T as ToString>::to_string(_2) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_1) -> bb2;
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn no_parens(_1: T) -> String {
    debug arg => _1;
    let mut _0: std::string::String;
    let _2: &T;

    bb0: {
        _2 = &_1;
        _0 = <T as ToString>::to_string(_2) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_1) -> bb2;
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
