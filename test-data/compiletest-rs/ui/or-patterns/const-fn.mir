// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: Result<i32, i32>) -> () {
    let mut _0: ();
    let _2: i32;
    let mut _3: isize;
    let mut _6: isize;
    scope 1 {
        debug a => _2;
        let _4: std::result::Result<i32, i32>;
        scope 2 {
            debug x => _4;
            let _5: i32;
            scope 3 {
                debug y => _5;
            }
        }
    }

    bb0: {
        _3 = discriminant(_1);
        switchInt(move _3) -> [0: bb4, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _2 = ((_1 as Err).0: i32);
        goto -> bb3;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = Result::<i32, i32>::Ok(const 3_i32);
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb7, 1: bb5, otherwise: bb2];
    }

    bb4: {
        _2 = ((_1 as Ok).0: i32);
        goto -> bb3;
    }

    bb5: {
        _5 = ((_4 as Err).0: i32);
        goto -> bb6;
    }

    bb6: {
        return;
    }

    bb7: {
        _5 = ((_4 as Ok).0: i32);
        goto -> bb6;
    }
}

// MIR FOR CTFE
fn foo(_1: Result<i32, i32>) -> () {
    let mut _0: ();
    let _2: i32;
    let mut _3: isize;
    let mut _6: isize;
    scope 1 {
        debug a => _2;
        let _4: std::result::Result<i32, i32>;
        scope 2 {
            debug x => _4;
            let _5: i32;
            scope 3 {
                debug y => _5;
            }
        }
    }

    bb0: {
        _3 = discriminant(_1);
        switchInt(move _3) -> [0: bb4, 1: bb1, otherwise: bb2];
    }

    bb1: {
        StorageLive(_2);
        _2 = ((_1 as Err).0: i32);
        goto -> bb3;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        StorageLive(_4);
        _4 = Result::<i32, i32>::Ok(const 3_i32);
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb7, 1: bb5, otherwise: bb2];
    }

    bb4: {
        StorageLive(_2);
        _2 = ((_1 as Ok).0: i32);
        goto -> bb3;
    }

    bb5: {
        StorageLive(_5);
        _5 = ((_4 as Err).0: i32);
        goto -> bb6;
    }

    bb6: {
        _0 = const ();
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_2);
        return;
    }

    bb7: {
        StorageLive(_5);
        _5 = ((_4 as Ok).0: i32);
        goto -> bb6;
    }
}

const X: () = {
    let mut _0: ();
    let _1: std::result::Result<i32, i32>;
    let mut _3: isize;
    scope 1 {
        debug x => _1;
        let _2: i32;
        scope 2 {
            debug y => _2;
        }
    }

    bb0: {
        StorageLive(_1);
        _1 = Result::<i32, i32>::Ok(const 3_i32);
        _3 = discriminant(_1);
        switchInt(move _3) -> [0: bb4, 1: bb1, otherwise: bb2];
    }

    bb1: {
        StorageLive(_2);
        _2 = ((_1 as Err).0: i32);
        goto -> bb3;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _0 = const ();
        StorageDead(_2);
        StorageDead(_1);
        return;
    }

    bb4: {
        StorageLive(_2);
        _2 = ((_1 as Ok).0: i32);
        goto -> bb3;
    }
}

static Y: () = {
    let mut _0: ();
    let _1: std::result::Result<i32, i32>;
    let mut _3: isize;
    scope 1 {
        debug x => _1;
        let _2: i32;
        scope 2 {
            debug y => _2;
        }
    }

    bb0: {
        StorageLive(_1);
        _1 = Result::<i32, i32>::Ok(const 3_i32);
        _3 = discriminant(_1);
        switchInt(move _3) -> [0: bb4, 1: bb1, otherwise: bb2];
    }

    bb1: {
        StorageLive(_2);
        _2 = ((_1 as Err).0: i32);
        goto -> bb3;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _0 = const ();
        StorageDead(_2);
        StorageDead(_1);
        return;
    }

    bb4: {
        StorageLive(_2);
        _2 = ((_1 as Ok).0: i32);
        goto -> bb3;
    }
}

static mut Z: () = {
    let mut _0: ();
    let _1: std::result::Result<i32, i32>;
    let mut _3: isize;
    scope 1 {
        debug x => _1;
        let _2: i32;
        scope 2 {
            debug y => _2;
        }
    }

    bb0: {
        StorageLive(_1);
        _1 = Result::<i32, i32>::Ok(const 3_i32);
        _3 = discriminant(_1);
        switchInt(move _3) -> [0: bb4, 1: bb1, otherwise: bb2];
    }

    bb1: {
        StorageLive(_2);
        _2 = ((_1 as Err).0: i32);
        goto -> bb3;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _0 = const ();
        StorageDead(_2);
        StorageDead(_1);
        return;
    }

    bb4: {
        StorageLive(_2);
        _2 = ((_1 as Ok).0: i32);
        goto -> bb3;
    }
}

fn main() -> () {
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;
    let _1: std::result::Result<i32, i32>;
    let mut _3: isize;
    scope 1 {
        debug x => _1;
        let _2: i32;
        scope 2 {
            debug y => _2;
        }
    }

    bb0: {
        StorageLive(_1);
        _1 = Result::<i32, i32>::Ok(const 3_i32);
        _3 = discriminant(_1);
        switchInt(move _3) -> [0: bb4, 1: bb1, otherwise: bb2];
    }

    bb1: {
        StorageLive(_2);
        _2 = ((_1 as Err).0: i32);
        goto -> bb3;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _0 = const 2_usize;
        StorageDead(_2);
        StorageDead(_1);
        return;
    }

    bb4: {
        StorageLive(_2);
        _2 = ((_1 as Ok).0: i32);
        goto -> bb3;
    }
}
