// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/or-patterns/struct-like.rs:3:10: 3:15>::fmt(_1: &Other, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: &str;
    let mut _4: isize;
    let _5: &str;
    let _6: &str;
    let _7: &str;

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _7 = const "Three";
        _3 = _7;
        goto -> bb5;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = const "One";
        _3 = _5;
        goto -> bb5;
    }

    bb4: {
        _6 = const "Two";
        _3 = _6;
        goto -> bb5;
    }

    bb5: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> bb6;
    }

    bb6: {
        return;
    }
}

fn <impl at ui/or-patterns/struct-like.rs:10:10: 10:15>::fmt(_1: &Test, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &usize;
    let _5: &usize;
    let _6: &str;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &str;
    let mut _10: &dyn std::fmt::Debug;
    let _11: &&usize;
    let _12: &std::option::Option<Other>;
    let _13: &str;
    let _14: &str;
    let mut _15: &dyn std::fmt::Debug;
    let _16: &&std::option::Option<Other>;
    let _17: &str;
    scope 1 {
        debug __self_0 => _4;
        debug __self_1 => _5;
    }
    scope 2 {
        debug __self_0 => _12;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _17 = const "Baz";
        _0 = Formatter::<'_>::write_str(_2, _17) -> bb5;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as Foo).0: usize);
        _5 = &(((*_1) as Foo).1: usize);
        _6 = const "Foo";
        _7 = const "first";
        _8 = _4 as &dyn std::fmt::Debug (Pointer(Unsize));
        _9 = const "second";
        _11 = &_5;
        _10 = _11 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _6, _7, move _8, _9, move _10) -> bb5;
    }

    bb4: {
        _12 = &(((*_1) as Bar).0: std::option::Option<Other>);
        _13 = const "Bar";
        _14 = const "other";
        _16 = &_12;
        _15 = _16 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _13, _14, move _15) -> bb5;
    }

    bb5: {
        return;
    }
}

fn test(_1: Option<Test>) -> bool {
    debug x => _1;
    let mut _0: bool;
    let mut _2: isize;
    let mut _3: isize;
    let mut _4: isize;
    let mut _5: isize;

    bb0: {
        _5 = discriminant(_1);
        switchInt(move _5) -> [0: bb1, 1: bb2, otherwise: bb7];
    }

    bb1: {
        _0 = const false;
        goto -> bb10;
    }

    bb2: {
        _4 = discriminant(((_1 as Some).0: Test));
        switchInt(move _4) -> [0: bb3, 1: bb5, otherwise: bb9];
    }

    bb3: {
        switchInt(((((_1 as Some).0: Test) as Foo).0: usize)) -> [1024: bb4, 2048: bb4, otherwise: bb9];
    }

    bb4: {
        switchInt(((((_1 as Some).0: Test) as Foo).1: usize)) -> [2048: bb8, 4096: bb8, otherwise: bb9];
    }

    bb5: {
        _3 = discriminant(((((_1 as Some).0: Test) as Bar).0: std::option::Option<Other>));
        switchInt(move _3) -> [1: bb6, otherwise: bb9];
    }

    bb6: {
        _2 = discriminant(((((((_1 as Some).0: Test) as Bar).0: std::option::Option<Other>) as Some).0: Other));
        switchInt(move _2) -> [0: bb8, 1: bb8, otherwise: bb9];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        _0 = const true;
        goto -> bb10;
    }

    bb9: {
        _0 = const false;
        goto -> bb10;
    }

    bb10: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: std::option::Option<Test>;
    let mut _4: Test;
    let mut _5: !;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: std::option::Option<Test>;
    let mut _10: Test;
    let mut _11: !;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: std::option::Option<Test>;
    let mut _16: Test;
    let mut _17: !;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: std::option::Option<Test>;
    let mut _21: Test;
    let mut _22: std::option::Option<Other>;
    let mut _23: Other;
    let mut _24: !;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: std::option::Option<Test>;
    let mut _28: Test;
    let mut _29: std::option::Option<Other>;
    let mut _30: Other;
    let mut _31: !;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: std::option::Option<Test>;
    let mut _36: Test;
    let mut _37: std::option::Option<Other>;
    let mut _38: Other;
    let mut _39: !;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: std::option::Option<Test>;
    let mut _44: Test;
    let mut _45: std::option::Option<Other>;
    let mut _46: !;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: std::option::Option<Test>;
    let mut _51: Test;
    let mut _52: !;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: std::option::Option<Test>;
    let mut _57: !;

    bb0: {
        _4 = Test::Foo { first: const 1024_usize, second: const 4096_usize };
        _3 = Option::<Test>::Some(move _4);
        _2 = test(move _3) -> bb1;
    }

    bb1: {
        _1 = Not(move _2);
        switchInt(move _1) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _5 = core::panicking::panic(const "assertion failed: test(Some(Test::Foo { first: 1024, second: 4096 }))");
    }

    bb3: {
        _10 = Test::Foo { first: const 2048_usize, second: const 8192_usize };
        _9 = Option::<Test>::Some(move _10);
        _8 = test(move _9) -> bb4;
    }

    bb4: {
        _7 = Not(move _8);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _11 = core::panicking::panic(const "assertion failed: !test(Some(Test::Foo { first: 2048, second: 8192 }))");
    }

    bb6: {
        _16 = Test::Foo { first: const 42_usize, second: const 2048_usize };
        _15 = Option::<Test>::Some(move _16);
        _14 = test(move _15) -> bb7;
    }

    bb7: {
        _13 = Not(move _14);
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _17 = core::panicking::panic(const "assertion failed: !test(Some(Test::Foo { first: 42, second: 2048 }))");
    }

    bb9: {
        _23 = Other::One;
        _22 = Option::<Other>::Some(move _23);
        _21 = Test::Bar { other: move _22 };
        _20 = Option::<Test>::Some(move _21);
        _19 = test(move _20) -> bb10;
    }

    bb10: {
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _24 = core::panicking::panic(const "assertion failed: test(Some(Test::Bar { other: Some(Other::One) }))");
    }

    bb12: {
        _30 = Other::Two;
        _29 = Option::<Other>::Some(move _30);
        _28 = Test::Bar { other: move _29 };
        _27 = Option::<Test>::Some(move _28);
        _26 = test(move _27) -> bb13;
    }

    bb13: {
        _25 = Not(move _26);
        switchInt(move _25) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _31 = core::panicking::panic(const "assertion failed: test(Some(Test::Bar { other: Some(Other::Two) }))");
    }

    bb15: {
        _38 = Other::Three;
        _37 = Option::<Other>::Some(move _38);
        _36 = Test::Bar { other: move _37 };
        _35 = Option::<Test>::Some(move _36);
        _34 = test(move _35) -> bb16;
    }

    bb16: {
        _33 = Not(move _34);
        _32 = Not(move _33);
        switchInt(move _32) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _39 = core::panicking::panic(const "assertion failed: !test(Some(Test::Bar { other: Some(Other::Three) }))");
    }

    bb18: {
        _45 = Option::<Other>::None;
        _44 = Test::Bar { other: move _45 };
        _43 = Option::<Test>::Some(move _44);
        _42 = test(move _43) -> bb19;
    }

    bb19: {
        _41 = Not(move _42);
        _40 = Not(move _41);
        switchInt(move _40) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _46 = core::panicking::panic(const "assertion failed: !test(Some(Test::Bar { other: None }))");
    }

    bb21: {
        _51 = Test::Baz;
        _50 = Option::<Test>::Some(move _51);
        _49 = test(move _50) -> bb22;
    }

    bb22: {
        _48 = Not(move _49);
        _47 = Not(move _48);
        switchInt(move _47) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _52 = core::panicking::panic(const "assertion failed: !test(Some(Test::Baz))");
    }

    bb24: {
        _56 = Option::<Test>::None;
        _55 = test(move _56) -> bb25;
    }

    bb25: {
        _54 = Not(move _55);
        _53 = Not(move _54);
        switchInt(move _53) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _57 = core::panicking::panic(const "assertion failed: !test(None)");
    }

    bb27: {
        return;
    }
}
