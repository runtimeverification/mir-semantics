// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/or-patterns/basic-switch.rs:6:10: 6:15>::fmt(_1: &Test, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: &str;
    let mut _4: isize;
    let _5: &str;
    let _6: &str;
    let _7: &str;
    let _8: &str;

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb5, 3: bb1, otherwise: bb2];
    }

    bb1: {
        _8 = const "Qux";
        _3 = _8;
        goto -> bb6;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = const "Foo";
        _3 = _5;
        goto -> bb6;
    }

    bb4: {
        _6 = const "Bar";
        _3 = _6;
        goto -> bb6;
    }

    bb5: {
        _7 = const "Baz";
        _3 = _7;
        goto -> bb6;
    }

    bb6: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> bb7;
    }

    bb7: {
        return;
    }
}

fn test(_1: Option<Test>) -> bool {
    debug x => _1;
    let mut _0: bool;
    let mut _2: isize;
    let mut _3: isize;

    bb0: {
        _3 = discriminant(_1);
        switchInt(move _3) -> [0: bb1, 1: bb2, otherwise: bb3];
    }

    bb1: {
        _0 = const false;
        goto -> bb6;
    }

    bb2: {
        _2 = discriminant(((_1 as Some).0: Test));
        switchInt(move _2) -> [1: bb4, 3: bb4, otherwise: bb5];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _0 = const true;
        goto -> bb6;
    }

    bb5: {
        _0 = const false;
        goto -> bb6;
    }

    bb6: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: std::option::Option<Test>;
    let mut _5: Test;
    let mut _6: !;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: std::option::Option<Test>;
    let mut _10: Test;
    let mut _11: !;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: std::option::Option<Test>;
    let mut _16: Test;
    let mut _17: !;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: std::option::Option<Test>;
    let mut _21: Test;
    let mut _22: !;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: std::option::Option<Test>;
    let mut _27: !;

    bb0: {
        _5 = Test::Foo;
        _4 = Option::<Test>::Some(move _5);
        _3 = test(move _4) -> bb1;
    }

    bb1: {
        _2 = Not(move _3);
        _1 = Not(move _2);
        switchInt(move _1) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _6 = core::panicking::panic(const "assertion failed: !test(Some(Test::Foo))");
    }

    bb3: {
        _10 = Test::Bar;
        _9 = Option::<Test>::Some(move _10);
        _8 = test(move _9) -> bb4;
    }

    bb4: {
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _11 = core::panicking::panic(const "assertion failed: test(Some(Test::Bar))");
    }

    bb6: {
        _16 = Test::Baz;
        _15 = Option::<Test>::Some(move _16);
        _14 = test(move _15) -> bb7;
    }

    bb7: {
        _13 = Not(move _14);
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _17 = core::panicking::panic(const "assertion failed: !test(Some(Test::Baz))");
    }

    bb9: {
        _21 = Test::Qux;
        _20 = Option::<Test>::Some(move _21);
        _19 = test(move _20) -> bb10;
    }

    bb10: {
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _22 = core::panicking::panic(const "assertion failed: test(Some(Test::Qux))");
    }

    bb12: {
        _26 = Option::<Test>::None;
        _25 = test(move _26) -> bb13;
    }

    bb13: {
        _24 = Not(move _25);
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _27 = core::panicking::panic(const "assertion failed: !test(None)");
    }

    bb15: {
        return;
    }
}
