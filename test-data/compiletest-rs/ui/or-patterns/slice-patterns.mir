// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/or-patterns/slice-patterns.rs:5:10: 5:15>::fmt(_1: &MatchArm, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &usize;
    let _5: &str;
    let mut _6: &dyn std::fmt::Debug;
    let _7: &&usize;
    let _8: &str;
    scope 1 {
        debug __self_0 => _4;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _8 = const "Wild";
        _0 = Formatter::<'_>::write_str(_2, _8) -> bb4;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as Arm).0: usize);
        _5 = const "Arm";
        _7 = &_4;
        _6 = _7 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _5, move _6) -> bb4;
    }

    bb4: {
        return;
    }
}

fn <impl at ui/or-patterns/slice-patterns.rs:5:17: 5:26>::eq(_1: &MatchArm, _2: &MatchArm) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: (&MatchArm, &MatchArm);
    let mut _8: isize;
    let mut _9: isize;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: &MatchArm;
    let mut _15: &MatchArm;
    let mut _16: &MatchArm;
    let mut _17: &MatchArm;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
            let _10: &usize;
            let _11: &usize;
            scope 3 {
                debug __self_0 => _10;
                debug __arg1_0 => _11;
            }
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _5 = Eq(_3, _4);
        switchInt(move _5) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _7 = (_1, _2);
        _14 = deref_copy (_7.0: &MatchArm);
        _9 = discriminant((*_14));
        switchInt(move _9) -> [0: bb4, otherwise: bb5];
    }

    bb3: {
        return;
    }

    bb4: {
        _15 = deref_copy (_7.1: &MatchArm);
        _8 = discriminant((*_15));
        switchInt(move _8) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _6 = const true;
        goto -> bb7;
    }

    bb6: {
        _16 = deref_copy (_7.0: &MatchArm);
        _10 = &(((*_16) as Arm).0: usize);
        _17 = deref_copy (_7.1: &MatchArm);
        _11 = &(((*_17) as Arm).0: usize);
        _12 = (*_10);
        _13 = (*_11);
        _6 = Eq(move _12, move _13);
        goto -> bb7;
    }

    bb7: {
        _0 = move _6;
        goto -> bb3;
    }
}

fn <impl at ui/or-patterns/slice-patterns.rs:11:10: 11:15>::fmt(_1: &Test, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: &str;
    let mut _4: isize;
    let _5: &str;
    let _6: &str;
    let _7: &str;
    let _8: &str;

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb5, 3: bb1, otherwise: bb2];
    }

    bb1: {
        _8 = const "Qux";
        _3 = _8;
        goto -> bb6;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = const "Foo";
        _3 = _5;
        goto -> bb6;
    }

    bb4: {
        _6 = const "Bar";
        _3 = _6;
        goto -> bb6;
    }

    bb5: {
        _7 = const "Baz";
        _3 = _7;
        goto -> bb6;
    }

    bb6: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> bb7;
    }

    bb7: {
        return;
    }
}

fn test(_1: &[Option<Test>]) -> MatchArm {
    debug foo => _1;
    let mut _0: MatchArm;
    let mut _2: isize;
    let mut _3: isize;
    let mut _4: isize;
    let mut _5: isize;
    let mut _6: isize;
    let mut _7: isize;
    let mut _8: isize;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _12: isize;
    let mut _13: usize;
    let mut _14: usize;
    let mut _15: bool;

    bb0: {
        _13 = Len((*_1));
        _14 = const 1_usize;
        _15 = Ge(move _13, move _14);
        switchInt(move _15) -> [0: bb9, otherwise: bb1];
    }

    bb1: {
        _12 = discriminant((*_1)[-1 of 1]);
        switchInt(move _12) -> [1: bb3, otherwise: bb2];
    }

    bb2: {
        _9 = Len((*_1));
        _10 = const 2_usize;
        _11 = Ge(move _9, move _10);
        switchInt(move _11) -> [0: bb9, otherwise: bb4];
    }

    bb3: {
        _2 = discriminant((((*_1)[-1 of 1] as Some).0: Test));
        switchInt(move _2) -> [0: bb11, 3: bb11, otherwise: bb2];
    }

    bb4: {
        _8 = discriminant((*_1)[0 of 2]);
        switchInt(move _8) -> [1: bb6, otherwise: bb5];
    }

    bb5: {
        _7 = discriminant((*_1)[-2 of 2]);
        switchInt(move _7) -> [1: bb10, otherwise: bb9];
    }

    bb6: {
        _5 = discriminant((*_1)[-1 of 2]);
        switchInt(move _5) -> [1: bb7, otherwise: bb5];
    }

    bb7: {
        _4 = discriminant((((*_1)[0 of 2] as Some).0: Test));
        switchInt(move _4) -> [0: bb8, otherwise: bb5];
    }

    bb8: {
        _3 = discriminant((((*_1)[-1 of 2] as Some).0: Test));
        switchInt(move _3) -> [1: bb12, 2: bb12, otherwise: bb5];
    }

    bb9: {
        _0 = MatchArm::Wild;
        goto -> bb14;
    }

    bb10: {
        _6 = discriminant((((*_1)[-2 of 2] as Some).0: Test));
        switchInt(move _6) -> [1: bb13, 2: bb13, otherwise: bb9];
    }

    bb11: {
        _0 = MatchArm::Arm(const 0_usize);
        goto -> bb14;
    }

    bb12: {
        _0 = MatchArm::Arm(const 1_usize);
        goto -> bb14;
    }

    bb13: {
        _0 = MatchArm::Arm(const 2_usize);
        goto -> bb14;
    }

    bb14: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<std::option::Option<Test>>;
    let mut _2: std::boxed::Box<[std::option::Option<Test>]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[std::option::Option<Test>; 4]>;
    let mut _7: std::option::Option<Test>;
    let mut _8: Test;
    let mut _9: std::option::Option<Test>;
    let mut _10: Test;
    let mut _11: std::option::Option<Test>;
    let mut _12: Test;
    let mut _13: std::option::Option<Test>;
    let mut _14: Test;
    let mut _15: (&MatchArm, &MatchArm);
    let mut _16: &MatchArm;
    let _17: MatchArm;
    let mut _18: &[std::option::Option<Test>];
    let _19: &[std::option::Option<Test>];
    let _20: &std::vec::Vec<std::option::Option<Test>>;
    let mut _21: &MatchArm;
    let _22: MatchArm;
    let mut _25: bool;
    let mut _26: bool;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _30: (&MatchArm, &MatchArm);
    let mut _31: &MatchArm;
    let _32: MatchArm;
    let mut _33: &[std::option::Option<Test>];
    let _34: &[std::option::Option<Test>; 2];
    let _35: [std::option::Option<Test>; 2];
    let mut _36: std::option::Option<Test>;
    let mut _37: Test;
    let mut _38: std::option::Option<Test>;
    let mut _39: Test;
    let mut _40: &MatchArm;
    let _41: MatchArm;
    let mut _44: bool;
    let mut _45: bool;
    let _47: !;
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _49: (&MatchArm, &MatchArm);
    let mut _50: &MatchArm;
    let _51: MatchArm;
    let _52: &[std::option::Option<Test>];
    let _53: &[std::option::Option<Test>];
    let mut _54: &std::vec::Vec<std::option::Option<Test>>;
    let mut _55: std::ops::RangeTo<usize>;
    let mut _56: &MatchArm;
    let _57: MatchArm;
    let mut _60: bool;
    let mut _61: bool;
    let _63: !;
    let mut _64: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _65: (&MatchArm, &MatchArm);
    let mut _66: &MatchArm;
    let _67: MatchArm;
    let mut _68: &[std::option::Option<Test>];
    let _69: &[std::option::Option<Test>; 3];
    let _70: [std::option::Option<Test>; 3];
    let mut _71: std::option::Option<Test>;
    let mut _72: Test;
    let mut _73: std::option::Option<Test>;
    let mut _74: Test;
    let mut _75: std::option::Option<Test>;
    let mut _76: Test;
    let mut _77: &MatchArm;
    let _78: MatchArm;
    let mut _81: bool;
    let mut _82: bool;
    let _84: !;
    let mut _85: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _86: (&MatchArm, &MatchArm);
    let mut _87: &MatchArm;
    let _88: MatchArm;
    let _89: &[std::option::Option<Test>];
    let _90: &[std::option::Option<Test>];
    let mut _91: &std::vec::Vec<std::option::Option<Test>>;
    let mut _92: std::ops::Range<usize>;
    let mut _93: &MatchArm;
    let _94: MatchArm;
    let mut _97: bool;
    let mut _98: bool;
    let _100: !;
    let mut _101: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _102: (&MatchArm, &MatchArm);
    let mut _103: &MatchArm;
    let _104: MatchArm;
    let mut _105: &[std::option::Option<Test>];
    let _106: &[std::option::Option<Test>; 4];
    let _107: [std::option::Option<Test>; 4];
    let mut _108: std::option::Option<Test>;
    let mut _109: Test;
    let mut _110: std::option::Option<Test>;
    let mut _111: Test;
    let mut _112: std::option::Option<Test>;
    let mut _113: Test;
    let mut _114: std::option::Option<Test>;
    let mut _115: Test;
    let mut _116: &MatchArm;
    let _117: MatchArm;
    let mut _120: bool;
    let mut _121: bool;
    let _123: !;
    let mut _124: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _125: (&MatchArm, &MatchArm);
    let mut _126: &MatchArm;
    let _127: MatchArm;
    let _128: &[std::option::Option<Test>];
    let _129: &[std::option::Option<Test>];
    let mut _130: &std::vec::Vec<std::option::Option<Test>>;
    let mut _131: std::ops::RangeFrom<usize>;
    let mut _132: &MatchArm;
    let _133: MatchArm;
    let mut _136: bool;
    let mut _137: bool;
    let _139: !;
    let mut _140: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _141: *const [std::option::Option<Test>; 4];
    let mut _142: *const ();
    let mut _143: usize;
    let mut _144: usize;
    let mut _145: usize;
    let mut _146: usize;
    let mut _147: bool;
    scope 1 {
        debug foo => _1;
        let _23: &MatchArm;
        let _24: &MatchArm;
        let _42: &MatchArm;
        let _43: &MatchArm;
        let _58: &MatchArm;
        let _59: &MatchArm;
        let _79: &MatchArm;
        let _80: &MatchArm;
        let _95: &MatchArm;
        let _96: &MatchArm;
        let _118: &MatchArm;
        let _119: &MatchArm;
        let _134: &MatchArm;
        let _135: &MatchArm;
        scope 3 {
            debug left_val => _23;
            debug right_val => _24;
            let _27: core::panicking::AssertKind;
            scope 4 {
                debug kind => _27;
            }
        }
        scope 5 {
            debug left_val => _42;
            debug right_val => _43;
            let _46: core::panicking::AssertKind;
            scope 6 {
                debug kind => _46;
            }
        }
        scope 7 {
            debug left_val => _58;
            debug right_val => _59;
            let _62: core::panicking::AssertKind;
            scope 8 {
                debug kind => _62;
            }
        }
        scope 9 {
            debug left_val => _79;
            debug right_val => _80;
            let _83: core::panicking::AssertKind;
            scope 10 {
                debug kind => _83;
            }
        }
        scope 11 {
            debug left_val => _95;
            debug right_val => _96;
            let _99: core::panicking::AssertKind;
            scope 12 {
                debug kind => _99;
            }
        }
        scope 13 {
            debug left_val => _118;
            debug right_val => _119;
            let _122: core::panicking::AssertKind;
            scope 14 {
                debug kind => _122;
            }
        }
        scope 15 {
            debug left_val => _134;
            debug right_val => _135;
            let _138: core::panicking::AssertKind;
            scope 16 {
                debug kind => _138;
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _3 = SizeOf([std::option::Option<Test>; 4]);
        _4 = AlignOf([std::option::Option<Test>; 4]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> bb1;
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [std::option::Option<Test>; 4]);
        _8 = Test::Foo;
        _7 = Option::<Test>::Some(move _8);
        _10 = Test::Bar;
        _9 = Option::<Test>::Some(move _10);
        _12 = Test::Baz;
        _11 = Option::<Test>::Some(move _12);
        _14 = Test::Qux;
        _13 = Option::<Test>::Some(move _14);
        _141 = (((_6.0: std::ptr::Unique<[std::option::Option<Test>; 4]>).0: std::ptr::NonNull<[std::option::Option<Test>; 4]>).0: *const [std::option::Option<Test>; 4]);
        _142 = _141 as *const () (PtrToPtr);
        _143 = _142 as usize (Transmute);
        _144 = AlignOf(std::option::Option<Test>);
        _145 = Sub(_144, const 1_usize);
        _146 = BitAnd(_143, _145);
        _147 = Eq(_146, const 0_usize);
        assert(_147, "misaligned pointer dereference: address must be a multiple of {} but is {}", _144, _143) -> [success: bb38, unwind unreachable];
    }

    bb2: {
        _20 = &_1;
        _19 = <Vec<Option<Test>> as Deref>::deref(_20) -> [return: bb3, unwind: bb36];
    }

    bb3: {
        _18 = _19;
        _17 = test(move _18) -> [return: bb4, unwind: bb36];
    }

    bb4: {
        _16 = &_17;
        _22 = MatchArm::Arm(const 0_usize);
        _21 = &_22;
        _15 = (move _16, move _21);
        _23 = (_15.0: &MatchArm);
        _24 = (_15.1: &MatchArm);
        _26 = <MatchArm as PartialEq>::eq(_23, _24) -> [return: bb5, unwind: bb36];
    }

    bb5: {
        _25 = Not(move _26);
        switchInt(move _25) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _27, _23, _24, move _29) -> bb36;
    }

    bb7: {
        _37 = Test::Bar;
        _36 = Option::<Test>::Some(move _37);
        _39 = Test::Foo;
        _38 = Option::<Test>::Some(move _39);
        _35 = [move _36, move _38];
        _34 = &_35;
        _33 = _34 as &[std::option::Option<Test>] (Pointer(Unsize));
        _32 = test(move _33) -> [return: bb8, unwind: bb36];
    }

    bb8: {
        _31 = &_32;
        _41 = MatchArm::Arm(const 0_usize);
        _40 = &_41;
        _30 = (move _31, move _40);
        _42 = (_30.0: &MatchArm);
        _43 = (_30.1: &MatchArm);
        _45 = <MatchArm as PartialEq>::eq(_42, _43) -> [return: bb9, unwind: bb36];
    }

    bb9: {
        _44 = Not(move _45);
        switchInt(move _44) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _46 = core::panicking::AssertKind::Eq;
        _48 = Option::<Arguments<'_>>::None;
        _47 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _46, _42, _43, move _48) -> bb36;
    }

    bb11: {
        _54 = &_1;
        _55 = RangeTo::<usize> { end: const 3_usize };
        _53 = <Vec<Option<Test>> as Index<RangeTo<usize>>>::index(move _54, move _55) -> [return: bb12, unwind: bb36];
    }

    bb12: {
        _52 = _53;
        _51 = test(_52) -> [return: bb13, unwind: bb36];
    }

    bb13: {
        _50 = &_51;
        _57 = MatchArm::Arm(const 1_usize);
        _56 = &_57;
        _49 = (move _50, move _56);
        _58 = (_49.0: &MatchArm);
        _59 = (_49.1: &MatchArm);
        _61 = <MatchArm as PartialEq>::eq(_58, _59) -> [return: bb14, unwind: bb36];
    }

    bb14: {
        _60 = Not(move _61);
        switchInt(move _60) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _62 = core::panicking::AssertKind::Eq;
        _64 = Option::<Arguments<'_>>::None;
        _63 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _62, _58, _59, move _64) -> bb36;
    }

    bb16: {
        _72 = Test::Foo;
        _71 = Option::<Test>::Some(move _72);
        _74 = Test::Foo;
        _73 = Option::<Test>::Some(move _74);
        _76 = Test::Bar;
        _75 = Option::<Test>::Some(move _76);
        _70 = [move _71, move _73, move _75];
        _69 = &_70;
        _68 = _69 as &[std::option::Option<Test>] (Pointer(Unsize));
        _67 = test(move _68) -> [return: bb17, unwind: bb36];
    }

    bb17: {
        _66 = &_67;
        _78 = MatchArm::Arm(const 1_usize);
        _77 = &_78;
        _65 = (move _66, move _77);
        _79 = (_65.0: &MatchArm);
        _80 = (_65.1: &MatchArm);
        _82 = <MatchArm as PartialEq>::eq(_79, _80) -> [return: bb18, unwind: bb36];
    }

    bb18: {
        _81 = Not(move _82);
        switchInt(move _81) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _83 = core::panicking::AssertKind::Eq;
        _85 = Option::<Arguments<'_>>::None;
        _84 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _83, _79, _80, move _85) -> bb36;
    }

    bb20: {
        _91 = &_1;
        _92 = std::ops::Range::<usize> { start: const 1_usize, end: const 3_usize };
        _90 = <Vec<Option<Test>> as Index<std::ops::Range<usize>>>::index(move _91, move _92) -> [return: bb21, unwind: bb36];
    }

    bb21: {
        _89 = _90;
        _88 = test(_89) -> [return: bb22, unwind: bb36];
    }

    bb22: {
        _87 = &_88;
        _94 = MatchArm::Arm(const 2_usize);
        _93 = &_94;
        _86 = (move _87, move _93);
        _95 = (_86.0: &MatchArm);
        _96 = (_86.1: &MatchArm);
        _98 = <MatchArm as PartialEq>::eq(_95, _96) -> [return: bb23, unwind: bb36];
    }

    bb23: {
        _97 = Not(move _98);
        switchInt(move _97) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _99 = core::panicking::AssertKind::Eq;
        _101 = Option::<Arguments<'_>>::None;
        _100 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _99, _95, _96, move _101) -> bb36;
    }

    bb25: {
        _109 = Test::Bar;
        _108 = Option::<Test>::Some(move _109);
        _111 = Test::Baz;
        _110 = Option::<Test>::Some(move _111);
        _113 = Test::Baz;
        _112 = Option::<Test>::Some(move _113);
        _115 = Test::Bar;
        _114 = Option::<Test>::Some(move _115);
        _107 = [move _108, move _110, move _112, move _114];
        _106 = &_107;
        _105 = _106 as &[std::option::Option<Test>] (Pointer(Unsize));
        _104 = test(move _105) -> [return: bb26, unwind: bb36];
    }

    bb26: {
        _103 = &_104;
        _117 = MatchArm::Arm(const 2_usize);
        _116 = &_117;
        _102 = (move _103, move _116);
        _118 = (_102.0: &MatchArm);
        _119 = (_102.1: &MatchArm);
        _121 = <MatchArm as PartialEq>::eq(_118, _119) -> [return: bb27, unwind: bb36];
    }

    bb27: {
        _120 = Not(move _121);
        switchInt(move _120) -> [0: bb29, otherwise: bb28];
    }

    bb28: {
        _122 = core::panicking::AssertKind::Eq;
        _124 = Option::<Arguments<'_>>::None;
        _123 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _122, _118, _119, move _124) -> bb36;
    }

    bb29: {
        _130 = &_1;
        _131 = RangeFrom::<usize> { start: const 4_usize };
        _129 = <Vec<Option<Test>> as Index<RangeFrom<usize>>>::index(move _130, move _131) -> [return: bb30, unwind: bb36];
    }

    bb30: {
        _128 = _129;
        _127 = test(_128) -> [return: bb31, unwind: bb36];
    }

    bb31: {
        _126 = &_127;
        _133 = MatchArm::Wild;
        _132 = &_133;
        _125 = (move _126, move _132);
        _134 = (_125.0: &MatchArm);
        _135 = (_125.1: &MatchArm);
        _137 = <MatchArm as PartialEq>::eq(_134, _135) -> [return: bb32, unwind: bb36];
    }

    bb32: {
        _136 = Not(move _137);
        switchInt(move _136) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        _138 = core::panicking::AssertKind::Eq;
        _140 = Option::<Arguments<'_>>::None;
        _139 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _138, _134, _135, move _140) -> bb36;
    }

    bb34: {
        drop(_1) -> bb35;
    }

    bb35: {
        return;
    }

    bb36 (cleanup): {
        drop(_1) -> [return: bb37, unwind terminate];
    }

    bb37 (cleanup): {
        resume;
    }

    bb38: {
        (*_141) = [move _7, move _9, move _11, move _13];
        _2 = move _6 as std::boxed::Box<[std::option::Option<Test>]> (Pointer(Unsize));
        _1 = slice::<impl [Option<Test>]>::into_vec::<std::alloc::Global>(move _2) -> bb2;
    }
}

fn MatchArm::Arm(_1: usize) -> MatchArm {
    let mut _0: MatchArm;

    bb0: {
        _0 = MatchArm::Arm(move _1);
        return;
    }
}

// MIR FOR CTFE
fn MatchArm::Arm(_1: usize) -> MatchArm {
    let mut _0: MatchArm;

    bb0: {
        _0 = MatchArm::Arm(move _1);
        return;
    }
}
