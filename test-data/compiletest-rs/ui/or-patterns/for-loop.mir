// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<std::result::Result<i32, i32>>;
    let mut _2: std::boxed::Box<[std::result::Result<i32, i32>]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[std::result::Result<i32, i32>; 3]>;
    let mut _7: std::result::Result<i32, i32>;
    let mut _8: std::result::Result<i32, i32>;
    let mut _9: std::result::Result<i32, i32>;
    let mut _11: std::slice::Iter<'_, std::result::Result<i32, i32>>;
    let mut _12: &std::vec::Vec<std::result::Result<i32, i32>>;
    let mut _14: std::option::Option<&std::result::Result<i32, i32>>;
    let mut _15: &mut std::slice::Iter<'_, std::result::Result<i32, i32>>;
    let mut _16: isize;
    let mut _17: isize;
    let _19: ();
    let mut _20: &mut std::vec::Vec<i32>;
    let mut _21: i32;
    let mut _23: std::vec::IntoIter<std::result::Result<i32, i32>>;
    let mut _24: std::vec::Vec<std::result::Result<i32, i32>>;
    let mut _26: std::option::Option<std::result::Result<i32, i32>>;
    let mut _27: &mut std::vec::IntoIter<std::result::Result<i32, i32>>;
    let mut _28: isize;
    let mut _29: isize;
    let _31: ();
    let mut _32: &mut std::vec::Vec<i32>;
    let mut _33: i32;
    let mut _34: (&std::vec::Vec<i32>, &[i32; 3]);
    let mut _35: &std::vec::Vec<i32>;
    let mut _36: &[i32; 3];
    let _37: [i32; 3];
    let mut _40: bool;
    let mut _41: bool;
    let _43: !;
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _45: (&std::vec::Vec<i32>, &[i32; 3]);
    let mut _46: &std::vec::Vec<i32>;
    let mut _47: &[i32; 3];
    let _48: [i32; 3];
    let mut _51: bool;
    let mut _52: bool;
    let _54: !;
    let mut _55: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _56: &std::result::Result<i32, i32>;
    let mut _57: &std::result::Result<i32, i32>;
    let mut _58: &std::result::Result<i32, i32>;
    let mut _59: bool;
    let mut _60: *const [std::result::Result<i32, i32>; 3];
    let mut _61: *const ();
    let mut _62: usize;
    let mut _63: usize;
    let mut _64: usize;
    let mut _65: usize;
    let mut _66: bool;
    scope 1 {
        debug v => _1;
        let mut _10: std::vec::Vec<i32>;
        scope 3 {
            debug w => _10;
            let mut _13: std::slice::Iter<'_, std::result::Result<i32, i32>>;
            let mut _22: std::vec::Vec<i32>;
            scope 4 {
                debug iter => _13;
                let _18: i32;
                scope 5 {
                    debug i => _18;
                }
            }
            scope 6 {
                debug u => _22;
                let mut _25: std::vec::IntoIter<std::result::Result<i32, i32>>;
                let _38: &std::vec::Vec<i32>;
                let _39: &[i32; 3];
                let _49: &std::vec::Vec<i32>;
                let _50: &[i32; 3];
                scope 7 {
                    debug iter => _25;
                    let _30: i32;
                    scope 8 {
                        debug i => _30;
                    }
                }
                scope 9 {
                    debug left_val => _38;
                    debug right_val => _39;
                    let _42: core::panicking::AssertKind;
                    scope 10 {
                        debug kind => _42;
                    }
                }
                scope 11 {
                    debug left_val => _49;
                    debug right_val => _50;
                    let _53: core::panicking::AssertKind;
                    scope 12 {
                        debug kind => _53;
                    }
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _59 = const false;
        _3 = SizeOf([std::result::Result<i32, i32>; 3]);
        _4 = AlignOf([std::result::Result<i32, i32>; 3]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> bb1;
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [std::result::Result<i32, i32>; 3]);
        _7 = Result::<i32, i32>::Ok(const 2_i32);
        _8 = Result::<i32, i32>::Err(const 3_i32);
        _9 = Result::<i32, i32>::Ok(const 5_i32);
        _60 = (((_6.0: std::ptr::Unique<[std::result::Result<i32, i32>; 3]>).0: std::ptr::NonNull<[std::result::Result<i32, i32>; 3]>).0: *const [std::result::Result<i32, i32>; 3]);
        _61 = _60 as *const () (PtrToPtr);
        _62 = _61 as usize (Transmute);
        _63 = AlignOf(std::result::Result<i32, i32>);
        _64 = Sub(_63, const 1_usize);
        _65 = BitAnd(_62, _64);
        _66 = Eq(_65, const 0_usize);
        assert(_66, "misaligned pointer dereference: address must be a multiple of {} but is {}", _63, _62) -> [success: bb37, unwind unreachable];
    }

    bb2: {
        _59 = const true;
        _10 = Vec::<i32>::new() -> [return: bb3, unwind: bb36];
    }

    bb3: {
        _12 = &_1;
        _11 = <&Vec<Result<i32, i32>> as IntoIterator>::into_iter(move _12) -> [return: bb4, unwind: bb33];
    }

    bb4: {
        _13 = move _11;
        goto -> bb5;
    }

    bb5: {
        _15 = &mut _13;
        _14 = <std::slice::Iter<'_, Result<i32, i32>> as Iterator>::next(_15) -> [return: bb6, unwind: bb33];
    }

    bb6: {
        _17 = discriminant(_14);
        switchInt(move _17) -> [0: bb10, 1: bb7, otherwise: bb9];
    }

    bb7: {
        _56 = deref_copy ((_14 as Some).0: &std::result::Result<i32, i32>);
        _16 = discriminant((*_56));
        switchInt(move _16) -> [0: bb12, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _57 = deref_copy ((_14 as Some).0: &std::result::Result<i32, i32>);
        _18 = (((*_57) as Err).0: i32);
        goto -> bb11;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _22 = Vec::<i32>::new() -> [return: bb13, unwind: bb33];
    }

    bb11: {
        _20 = &mut _10;
        _21 = _18;
        _19 = Vec::<i32>::push(move _20, move _21) -> [return: bb38, unwind: bb33];
    }

    bb12: {
        _58 = deref_copy ((_14 as Some).0: &std::result::Result<i32, i32>);
        _18 = (((*_58) as Ok).0: i32);
        goto -> bb11;
    }

    bb13: {
        _59 = const false;
        _24 = move _1;
        _23 = <Vec<Result<i32, i32>> as IntoIterator>::into_iter(move _24) -> [return: bb14, unwind: bb32];
    }

    bb14: {
        _25 = move _23;
        goto -> bb15;
    }

    bb15: {
        _27 = &mut _25;
        _26 = <std::vec::IntoIter<Result<i32, i32>> as Iterator>::next(_27) -> [return: bb16, unwind: bb31];
    }

    bb16: {
        _29 = discriminant(_26);
        switchInt(move _29) -> [0: bb19, 1: bb17, otherwise: bb9];
    }

    bb17: {
        _28 = discriminant(((_26 as Some).0: std::result::Result<i32, i32>));
        switchInt(move _28) -> [0: bb21, 1: bb18, otherwise: bb9];
    }

    bb18: {
        _30 = ((((_26 as Some).0: std::result::Result<i32, i32>) as Err).0: i32);
        goto -> bb20;
    }

    bb19: {
        drop(_25) -> [return: bb22, unwind: bb32];
    }

    bb20: {
        _32 = &mut _22;
        _33 = _30;
        _31 = Vec::<i32>::push(move _32, move _33) -> [return: bb39, unwind: bb31];
    }

    bb21: {
        _30 = ((((_26 as Some).0: std::result::Result<i32, i32>) as Ok).0: i32);
        goto -> bb20;
    }

    bb22: {
        _35 = &_10;
        _37 = [const 2_i32, const 3_i32, const 5_i32];
        _36 = &_37;
        _34 = (move _35, move _36);
        _38 = (_34.0: &std::vec::Vec<i32>);
        _39 = (_34.1: &[i32; 3]);
        _41 = <Vec<i32> as PartialEq<[i32; 3]>>::eq(_38, _39) -> [return: bb23, unwind: bb32];
    }

    bb23: {
        _40 = Not(move _41);
        switchInt(move _40) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _42 = core::panicking::AssertKind::Eq;
        _44 = Option::<Arguments<'_>>::None;
        _43 = core::panicking::assert_failed::<Vec<i32>, [i32; 3]>(move _42, _38, _39, move _44) -> bb32;
    }

    bb25: {
        _46 = &_22;
        _48 = [const 2_i32, const 3_i32, const 5_i32];
        _47 = &_48;
        _45 = (move _46, move _47);
        _49 = (_45.0: &std::vec::Vec<i32>);
        _50 = (_45.1: &[i32; 3]);
        _52 = <Vec<i32> as PartialEq<[i32; 3]>>::eq(_49, _50) -> [return: bb26, unwind: bb32];
    }

    bb26: {
        _51 = Not(move _52);
        switchInt(move _51) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _53 = core::panicking::AssertKind::Eq;
        _55 = Option::<Arguments<'_>>::None;
        _54 = core::panicking::assert_failed::<Vec<i32>, [i32; 3]>(move _53, _49, _50, move _55) -> bb32;
    }

    bb28: {
        drop(_22) -> [return: bb29, unwind: bb33];
    }

    bb29: {
        drop(_10) -> [return: bb30, unwind: bb36];
    }

    bb30: {
        _59 = const false;
        return;
    }

    bb31 (cleanup): {
        drop(_25) -> [return: bb32, unwind terminate];
    }

    bb32 (cleanup): {
        drop(_22) -> [return: bb33, unwind terminate];
    }

    bb33 (cleanup): {
        drop(_10) -> [return: bb36, unwind terminate];
    }

    bb34 (cleanup): {
        resume;
    }

    bb35 (cleanup): {
        drop(_1) -> [return: bb34, unwind terminate];
    }

    bb36 (cleanup): {
        switchInt(_59) -> [0: bb34, otherwise: bb35];
    }

    bb37: {
        (*_60) = [move _7, move _8, move _9];
        _2 = move _6 as std::boxed::Box<[std::result::Result<i32, i32>]> (Pointer(Unsize));
        _1 = slice::<impl [Result<i32, i32>]>::into_vec::<std::alloc::Global>(move _2) -> bb2;
    }

    bb38: {
        goto -> bb5;
    }

    bb39: {
        goto -> bb15;
    }
}
