// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (std::option::Option<u8>,);
    let mut _2: std::option::Option<u8>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: isize;
    let mut _6: (&[u8],);
    let mut _7: &[u8];
    let _8: &[u8];
    let mut _9: &[u8; 1];
    let _10: [u8; 1];
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: usize;
    let mut _14: usize;
    let mut _15: bool;
    let mut _16: usize;
    let mut _17: usize;
    let mut _18: bool;
    let mut _19: usize;
    let mut _20: usize;
    let mut _21: bool;
    let mut _22: &[u8];
    let mut _23: &[u8];
    let mut _24: &[u8];
    let mut _25: &[u8];
    let mut _26: &[u8];
    let mut _27: &[u8];

    bb0: {
        _2 = Option::<u8>::Some(const 0_u8);
        _1 = (move _2,);
        _5 = discriminant((_1.0: std::option::Option<u8>));
        switchInt(move _5) -> [0: bb5, 1: bb1, otherwise: bb4];
    }

    bb1: {
        switchInt((((_1.0: std::option::Option<u8>) as Some).0: u8)) -> [0: bb5, 1: bb5, otherwise: bb2];
    }

    bb2: {
        _3 = Le(const 2_u8, (((_1.0: std::option::Option<u8>) as Some).0: u8));
        switchInt(move _3) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _4 = Le((((_1.0: std::option::Option<u8>) as Some).0: u8), const u8::MAX);
        switchInt(move _4) -> [0: bb4, otherwise: bb5];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _10 = [const 0_u8];
        _9 = &_10;
        _8 = <[u8; 1] as Index<RangeFull>>::index(move _9, const RangeFull) -> bb6;
    }

    bb6: {
        _7 = _8;
        _6 = (move _7,);
        _22 = deref_copy (_6.0: &[u8]);
        _19 = Len((*_22));
        _20 = const 0_usize;
        _21 = Eq(move _19, move _20);
        switchInt(move _21) -> [0: bb7, otherwise: bb12];
    }

    bb7: {
        _23 = deref_copy (_6.0: &[u8]);
        _16 = Len((*_23));
        _17 = const 1_usize;
        _18 = Eq(move _16, move _17);
        switchInt(move _18) -> [0: bb11, otherwise: bb8];
    }

    bb8: {
        _24 = deref_copy (_6.0: &[u8]);
        switchInt((*_24)[0 of 1]) -> [0: bb12, otherwise: bb9];
    }

    bb9: {
        _25 = deref_copy (_6.0: &[u8]);
        _11 = Le(const 1_u8, (*_25)[0 of 1]);
        switchInt(move _11) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _26 = deref_copy (_6.0: &[u8]);
        _12 = Le((*_26)[0 of 1], const u8::MAX);
        switchInt(move _12) -> [0: bb11, otherwise: bb12];
    }

    bb11: {
        _27 = deref_copy (_6.0: &[u8]);
        _13 = Len((*_27));
        _14 = const 1_usize;
        _15 = Ge(move _13, move _14);
        switchInt(move _15) -> [0: bb4, otherwise: bb12];
    }

    bb12: {
        return;
    }
}
