// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn or_pat_let(_1: Result<u32, u32>) -> u32 {
    debug x => _1;
    let mut _0: u32;
    let _2: u32;
    let mut _3: isize;
    scope 1 {
        debug y => _2;
    }

    bb0: {
        _3 = discriminant(_1);
        switchInt(move _3) -> [0: bb4, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _2 = ((_1 as Err).0: u32);
        goto -> bb3;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _0 = _2;
        return;
    }

    bb4: {
        _2 = ((_1 as Ok).0: u32);
        goto -> bb3;
    }
}

fn or_pat_arg(_1: Result<u32, u32>) -> u32 {
    let mut _0: u32;
    let _2: u32;
    let mut _3: isize;
    scope 1 {
        debug y => _2;
    }

    bb0: {
        _3 = discriminant(_1);
        switchInt(move _3) -> [0: bb4, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _2 = ((_1 as Err).0: u32);
        goto -> bb3;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _0 = _2;
        return;
    }

    bb4: {
        _2 = ((_1 as Ok).0: u32);
        goto -> bb3;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&u32, &u32);
    let mut _2: &u32;
    let _3: u32;
    let mut _4: std::result::Result<u32, u32>;
    let mut _5: &u32;
    let _6: u32;
    let _7: &u32;
    let _8: &u32;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: u32;
    let mut _12: u32;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&u32, &u32);
    let mut _17: &u32;
    let _18: u32;
    let mut _19: std::result::Result<u32, u32>;
    let mut _20: &u32;
    let _21: u32;
    let _22: &u32;
    let _23: &u32;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: u32;
    let mut _27: u32;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&u32, &u32);
    let mut _32: &u32;
    let _33: u32;
    let mut _34: std::result::Result<u32, u32>;
    let mut _35: &u32;
    let _36: u32;
    let _37: &u32;
    let _38: &u32;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: u32;
    let mut _42: u32;
    let _44: !;
    let mut _45: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _46: (&u32, &u32);
    let mut _47: &u32;
    let _48: u32;
    let mut _49: std::result::Result<u32, u32>;
    let mut _50: &u32;
    let _51: u32;
    let _52: &u32;
    let _53: &u32;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: u32;
    let mut _57: u32;
    let _59: !;
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _7;
        debug right_val => _8;
        let _13: core::panicking::AssertKind;
        scope 2 {
            debug kind => _13;
        }
    }
    scope 3 {
        debug left_val => _22;
        debug right_val => _23;
        let _28: core::panicking::AssertKind;
        scope 4 {
            debug kind => _28;
        }
    }
    scope 5 {
        debug left_val => _37;
        debug right_val => _38;
        let _43: core::panicking::AssertKind;
        scope 6 {
            debug kind => _43;
        }
    }
    scope 7 {
        debug left_val => _52;
        debug right_val => _53;
        let _58: core::panicking::AssertKind;
        scope 8 {
            debug kind => _58;
        }
    }

    bb0: {
        _4 = Result::<u32, u32>::Ok(const 3_u32);
        _3 = or_pat_let(move _4) -> bb1;
    }

    bb1: {
        _2 = &_3;
        _6 = const 3_u32;
        _5 = &_6;
        _1 = (move _2, move _5);
        _7 = (_1.0: &u32);
        _8 = (_1.1: &u32);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<u32, u32>(move _13, _7, _8, move _15);
    }

    bb3: {
        _19 = Result::<u32, u32>::Err(const 5_u32);
        _18 = or_pat_let(move _19) -> bb4;
    }

    bb4: {
        _17 = &_18;
        _21 = const 5_u32;
        _20 = &_21;
        _16 = (move _17, move _20);
        _22 = (_16.0: &u32);
        _23 = (_16.1: &u32);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<u32, u32>(move _28, _22, _23, move _30);
    }

    bb6: {
        _34 = Result::<u32, u32>::Ok(const 7_u32);
        _33 = or_pat_arg(move _34) -> bb7;
    }

    bb7: {
        _32 = &_33;
        _36 = const 7_u32;
        _35 = &_36;
        _31 = (move _32, move _35);
        _37 = (_31.0: &u32);
        _38 = (_31.1: &u32);
        _41 = (*_37);
        _42 = (*_38);
        _40 = Eq(move _41, move _42);
        _39 = Not(move _40);
        switchInt(move _39) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _43 = core::panicking::AssertKind::Eq;
        _45 = Option::<Arguments<'_>>::None;
        _44 = core::panicking::assert_failed::<u32, u32>(move _43, _37, _38, move _45);
    }

    bb9: {
        _49 = Result::<u32, u32>::Err(const 9_u32);
        _48 = or_pat_arg(move _49) -> bb10;
    }

    bb10: {
        _47 = &_48;
        _51 = const 9_u32;
        _50 = &_51;
        _46 = (move _47, move _50);
        _52 = (_46.0: &u32);
        _53 = (_46.1: &u32);
        _56 = (*_52);
        _57 = (*_53);
        _55 = Eq(move _56, move _57);
        _54 = Not(move _55);
        switchInt(move _54) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _58 = core::panicking::AssertKind::Eq;
        _60 = Option::<Arguments<'_>>::None;
        _59 = core::panicking::assert_failed::<u32, u32>(move _58, _52, _53, move _60);
    }

    bb12: {
        return;
    }
}
