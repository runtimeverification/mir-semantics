// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (i32, i32);
    let _2: i32;
    let _3: &i32;
    let mut _4: bool;
    let mut _5: i32;
    let mut _6: bool;
    let mut _7: i32;
    let _8: ();
    let mut _9: std::fmt::Arguments<'_>;
    let mut _10: &[&str];
    let _11: &[&str; 2];
    let _12: [&str; 2];
    let mut _13: &[core::fmt::rt::Argument<'_>];
    let _14: &[core::fmt::rt::Argument<'_>; 1];
    let _15: [core::fmt::rt::Argument<'_>; 1];
    let mut _16: core::fmt::rt::Argument<'_>;
    let _17: &i32;
    let mut _18: std::option::Option<(i32, i32)>;
    let mut _19: (i32, i32);
    let mut _20: isize;
    let _21: i32;
    let _22: &i32;
    let mut _23: bool;
    let mut _24: i32;
    let mut _25: bool;
    let mut _26: i32;
    let _27: ();
    let mut _28: std::fmt::Arguments<'_>;
    let mut _29: &[&str];
    let _30: &[&str; 2];
    let _31: [&str; 2];
    let mut _32: &[core::fmt::rt::Argument<'_>];
    let _33: &[core::fmt::rt::Argument<'_>; 1];
    let _34: [core::fmt::rt::Argument<'_>; 1];
    let mut _35: core::fmt::rt::Argument<'_>;
    let _36: &i32;
    let mut _37: std::option::Option<(i32, i32)>;
    let mut _38: (i32, i32);
    let mut _39: isize;
    let _40: i32;
    let _41: &i32;
    let mut _42: bool;
    let mut _43: i32;
    let mut _44: bool;
    let mut _45: i32;
    let _46: ();
    let mut _47: std::fmt::Arguments<'_>;
    let mut _48: &[&str];
    let _49: &[&str; 2];
    let _50: [&str; 2];
    let mut _51: &[core::fmt::rt::Argument<'_>];
    let _52: &[core::fmt::rt::Argument<'_>; 1];
    let _53: [core::fmt::rt::Argument<'_>; 1];
    let mut _54: core::fmt::rt::Argument<'_>;
    let _55: &i32;
    scope 1 {
        debug a => _2;
        debug a => _3;
    }
    scope 2 {
        debug a => _21;
        debug a => _22;
    }
    scope 3 {
        debug a => _40;
        debug a => _41;
    }

    bb0: {
        _1 = (const 3_i32, const 42_i32);
        _3 = &(_1.0: i32);
        _5 = (*_3);
        _4 = Gt(move _5, const 10_i32);
        switchInt(move _4) -> [0: bb3, otherwise: bb2];
    }

    bb1: {
        _12 = [const "", const "\n"];
        _11 = &_12;
        _10 = _11 as &[&str] (Pointer(Unsize));
        _17 = &_2;
        _16 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_17) -> bb5;
    }

    bb2: {
        _2 = (_1.0: i32);
        goto -> bb1;
    }

    bb3: {
        _3 = &(_1.1: i32);
        _7 = (*_3);
        _6 = Gt(move _7, const 10_i32);
        switchInt(move _6) -> [0: bb7, otherwise: bb4];
    }

    bb4: {
        _2 = (_1.1: i32);
        goto -> bb1;
    }

    bb5: {
        _15 = [move _16];
        _14 = &_15;
        _13 = _14 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _9 = Arguments::<'_>::new_v1(move _10, move _13) -> bb6;
    }

    bb6: {
        _8 = _print(move _9) -> bb7;
    }

    bb7: {
        _19 = (const 3_i32, const 42_i32);
        _18 = Option::<(i32, i32)>::Some(move _19);
        _20 = discriminant(_18);
        switchInt(move _20) -> [1: bb9, otherwise: bb15];
    }

    bb8: {
        _31 = [const "", const "\n"];
        _30 = &_31;
        _29 = _30 as &[&str] (Pointer(Unsize));
        _36 = &_21;
        _35 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_36) -> bb13;
    }

    bb9: {
        _22 = &(((_18 as Some).0: (i32, i32)).0: i32);
        _24 = (*_22);
        _23 = Gt(move _24, const 10_i32);
        switchInt(move _23) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _21 = (((_18 as Some).0: (i32, i32)).0: i32);
        goto -> bb8;
    }

    bb11: {
        _22 = &(((_18 as Some).0: (i32, i32)).1: i32);
        _26 = (*_22);
        _25 = Gt(move _26, const 10_i32);
        switchInt(move _25) -> [0: bb15, otherwise: bb12];
    }

    bb12: {
        _21 = (((_18 as Some).0: (i32, i32)).1: i32);
        goto -> bb8;
    }

    bb13: {
        _34 = [move _35];
        _33 = &_34;
        _32 = _33 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _28 = Arguments::<'_>::new_v1(move _29, move _32) -> bb14;
    }

    bb14: {
        _27 = _print(move _28) -> bb15;
    }

    bb15: {
        _38 = (const 3_i32, const 42_i32);
        _37 = Option::<(i32, i32)>::Some(move _38);
        _39 = discriminant(_37);
        switchInt(move _39) -> [1: bb17, otherwise: bb23];
    }

    bb16: {
        _50 = [const "", const "\n"];
        _49 = &_50;
        _48 = _49 as &[&str] (Pointer(Unsize));
        _55 = &_40;
        _54 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_55) -> bb21;
    }

    bb17: {
        _41 = &(((_37 as Some).0: (i32, i32)).0: i32);
        _43 = (*_41);
        _42 = Gt(move _43, const 10_i32);
        switchInt(move _42) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _40 = (((_37 as Some).0: (i32, i32)).0: i32);
        goto -> bb16;
    }

    bb19: {
        _41 = &(((_37 as Some).0: (i32, i32)).1: i32);
        _45 = (*_41);
        _44 = Gt(move _45, const 10_i32);
        switchInt(move _44) -> [0: bb23, otherwise: bb20];
    }

    bb20: {
        _40 = (((_37 as Some).0: (i32, i32)).1: i32);
        goto -> bb16;
    }

    bb21: {
        _53 = [move _54];
        _52 = &_53;
        _51 = _52 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _47 = Arguments::<'_>::new_v1(move _48, move _51) -> bb22;
    }

    bb22: {
        _46 = _print(move _47) -> bb23;
    }

    bb23: {
        return;
    }
}
