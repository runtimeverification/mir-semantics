// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
<impl at ui/const-generics/backcompat/unevaluated-consts.rs:7:1: 7:50>::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedAdd(const 1_usize, const 1_usize);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const 1_usize, const 1_usize) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

<impl at ui/const-generics/backcompat/unevaluated-consts.rs:7:1: 7:50>::{constant#1}: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedAdd(const 1_usize, const 1_usize);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const 1_usize, const 1_usize) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

fn <impl at ui/const-generics/backcompat/unevaluated-consts.rs:7:1: 7:50>::from(_1: [u8; 2]) -> Foo<T, [u8; 2]> {
    debug value => _1;
    let mut _0: Foo<T, [u8; 2]>;
    let _2: !;

    bb0: {
        _2 = core::panicking::panic(const "not yet implemented");
    }
}

<impl at ui/const-generics/backcompat/unevaluated-consts.rs:7:1: 7:50>::from::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedAdd(const 1_usize, const 1_usize);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const 1_usize, const 1_usize) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

<impl at ui/const-generics/backcompat/unevaluated-consts.rs:7:1: 7:50>::from::{constant#1}: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedAdd(const 1_usize, const 1_usize);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const 1_usize, const 1_usize) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

fn break_me() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

break_me::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedAdd(const 1_usize, const 1_usize);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const 1_usize, const 1_usize) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

break_me::{constant#1}: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedAdd(const 1_usize, const 1_usize);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const 1_usize, const 1_usize) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn Foo(_1: T, _2: U) -> Foo<T, U> {
    let mut _0: Foo<T, U>;

    bb0: {
        _0 = Foo::<T, U>(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: T, _2: U) -> Foo<T, U> {
    let mut _0: Foo<T, U>;

    bb0: {
        _0 = Foo::<T, U>(move _1, move _2);
        return;
    }
}
