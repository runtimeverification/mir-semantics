// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Bar::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

Baz::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

<impl at ui/const-generics/dyn-supertraits.rs:13:1: 13:43>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

<impl at ui/const-generics/dyn-supertraits.rs:13:1: 13:43>::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn <impl at ui/const-generics/dyn-supertraits.rs:13:1: 13:43>::myfun(_1: &FooType<N>) -> usize {
    debug self => _1;
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

<impl at ui/const-generics/dyn-supertraits.rs:16:1: 16:43>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

<impl at ui/const-generics/dyn-supertraits.rs:16:1: 16:43>::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn <impl at ui/const-generics/dyn-supertraits.rs:16:1: 16:43>::myfun(_1: &BarType<N>) -> usize {
    debug self => _1;
    let mut _0: usize;

    bb0: {
        _0 = Add(const N, const 1_usize);
        return;
    }
}

<impl at ui/const-generics/dyn-supertraits.rs:19:1: 19:43>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

<impl at ui/const-generics/dyn-supertraits.rs:19:1: 19:43>::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

<impl at ui/const-generics/dyn-supertraits.rs:20:1: 20:24>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

fn <impl at ui/const-generics/dyn-supertraits.rs:20:1: 20:24>::myfun(_1: &BazType) -> usize {
    debug self => _1;
    let mut _0: usize;

    bb0: {
        _0 = const 999_usize;
        return;
    }
}

Boz::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

Bok::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

<impl at ui/const-generics/dyn-supertraits.rs:36:1: 36:24>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

fn <impl at ui/const-generics/dyn-supertraits.rs:36:1: 36:24>::myfun(_1: &BozType) -> usize {
    debug self => _1;
    let mut _0: usize;

    bb0: {
        _0 = const 9999_usize;
        return;
    }
}

<impl at ui/const-generics/dyn-supertraits.rs:41:1: 41:40>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

<impl at ui/const-generics/dyn-supertraits.rs:42:1: 42:43>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

<impl at ui/const-generics/dyn-supertraits.rs:42:1: 42:43>::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn <impl at ui/const-generics/dyn-supertraits.rs:42:1: 42:43>::myfun(_1: &BokType<N>) -> usize {
    debug self => _1;
    let mut _0: usize;

    bb0: {
        _0 = Add(const N, const 2_usize);
        return;
    }
}

<impl at ui/const-generics/dyn-supertraits.rs:45:1: 45:43>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

<impl at ui/const-generics/dyn-supertraits.rs:45:1: 45:43>::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn a(_1: &dyn Foo<N>) -> usize {
    debug x => _1;
    let mut _0: usize;

    bb0: {
        _0 = <dyn Foo<N> as Foo<N>>::myfun(_1) -> bb1;
    }

    bb1: {
        return;
    }
}

a::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn b(_1: &dyn Foo<3>) -> usize {
    debug x => _1;
    let mut _0: usize;

    bb0: {
        _0 = <dyn Foo<3> as Foo<3>>::myfun(_1) -> bb1;
    }

    bb1: {
        return;
    }
}

b::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

fn c(_1: T) -> usize {
    debug x => _1;
    let mut _0: usize;
    let mut _2: &dyn Foo<N>;
    let _3: &T;

    bb0: {
        _3 = &_1;
        _2 = _3 as &dyn Foo<N> (Pointer(Unsize));
        _0 = a::<N>(move _2) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_1) -> bb2;
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

c::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

c::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn d(_1: &T) -> usize {
    debug x => _1;
    let mut _0: usize;

    bb0: {
        _0 = <T as Foo<3>>::myfun(_1) -> bb1;
    }

    bb1: {
        return;
    }
}

d::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

fn e(_1: &dyn Bar<3>) -> usize {
    debug x => _1;
    let mut _0: usize;

    bb0: {
        _0 = d::<dyn Bar<3>>(_1) -> bb1;
    }

    bb1: {
        return;
    }
}

e::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: FooType<3>;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: usize;
    let mut _5: &dyn Foo<3>;
    let _6: &FooType<3>;
    let mut _7: !;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: usize;
    let mut _11: &dyn Foo<3>;
    let _12: &FooType<3>;
    let mut _13: !;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: usize;
    let _17: &FooType<3>;
    let mut _18: !;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: usize;
    let mut _23: &dyn Foo<3>;
    let _24: &BarType<3>;
    let mut _25: !;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: usize;
    let mut _29: &dyn Foo<3>;
    let _30: &BarType<3>;
    let mut _31: !;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: usize;
    let _35: &BarType<3>;
    let mut _36: !;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: usize;
    let mut _40: &dyn Bar<3>;
    let _41: &BarType<3>;
    let mut _42: !;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: usize;
    let mut _47: &dyn Foo<3>;
    let _48: &BazType;
    let mut _49: !;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: usize;
    let mut _53: &dyn Foo<3>;
    let _54: &BazType;
    let mut _55: !;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: usize;
    let _59: &BazType;
    let mut _60: !;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: usize;
    let mut _65: &dyn Foo<3>;
    let _66: &BozType;
    let mut _67: !;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: usize;
    let mut _71: &dyn Foo<3>;
    let _72: &BozType;
    let mut _73: !;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: usize;
    let _77: &BozType;
    let mut _78: !;
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: usize;
    let mut _83: &dyn Foo<3>;
    let _84: &BokType<3>;
    let mut _85: !;
    let mut _86: bool;
    let mut _87: bool;
    let mut _88: usize;
    let mut _89: &dyn Foo<3>;
    let _90: &BokType<3>;
    let mut _91: !;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: usize;
    let _95: &BokType<3>;
    let mut _96: !;
    let mut _97: bool;
    let mut _98: bool;
    let mut _99: usize;
    let mut _100: !;
    scope 1 {
        debug foo => const FooType::<3>;
        let _19: BarType<3>;
        scope 2 {
            debug bar => const BarType::<3>;
            let _43: BazType;
            scope 3 {
                debug baz => const BazType;
                let _61: BozType;
                scope 4 {
                    debug boz => const BozType;
                    let _79: BokType<3>;
                    scope 5 {
                        debug bok => const BokType::<3>;
                    }
                }
            }
        }
    }

    bb0: {
        _6 = &_1;
        _5 = _6 as &dyn Foo<3> (Pointer(Unsize));
        _4 = a::<3>(move _5) -> bb1;
    }

    bb1: {
        _3 = Eq(move _4, const 3_usize);
        _2 = Not(move _3);
        switchInt(move _2) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _7 = core::panicking::panic(const "assertion failed: a(&foo) == 3");
    }

    bb3: {
        _12 = &_1;
        _11 = _12 as &dyn Foo<3> (Pointer(Unsize));
        _10 = b(move _11) -> bb4;
    }

    bb4: {
        _9 = Eq(move _10, const 3_usize);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _13 = core::panicking::panic(const "assertion failed: b(&foo) == 3");
    }

    bb6: {
        _17 = &_1;
        _16 = d::<FooType<3>>(_17) -> bb7;
    }

    bb7: {
        _15 = Eq(move _16, const 3_usize);
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _18 = core::panicking::panic(const "assertion failed: d(&foo) == 3");
    }

    bb9: {
        _24 = &_19;
        _23 = _24 as &dyn Foo<3> (Pointer(Unsize));
        _22 = a::<3>(move _23) -> bb10;
    }

    bb10: {
        _21 = Eq(move _22, const 4_usize);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _25 = core::panicking::panic(const "assertion failed: a(&bar) == 4");
    }

    bb12: {
        _30 = &_19;
        _29 = _30 as &dyn Foo<3> (Pointer(Unsize));
        _28 = b(move _29) -> bb13;
    }

    bb13: {
        _27 = Eq(move _28, const 4_usize);
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _31 = core::panicking::panic(const "assertion failed: b(&bar) == 4");
    }

    bb15: {
        _35 = &_19;
        _34 = d::<BarType<3>>(_35) -> bb16;
    }

    bb16: {
        _33 = Eq(move _34, const 4_usize);
        _32 = Not(move _33);
        switchInt(move _32) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _36 = core::panicking::panic(const "assertion failed: d(&bar) == 4");
    }

    bb18: {
        _41 = &_19;
        _40 = _41 as &dyn Bar<3> (Pointer(Unsize));
        _39 = e(move _40) -> bb19;
    }

    bb19: {
        _38 = Eq(move _39, const 4_usize);
        _37 = Not(move _38);
        switchInt(move _37) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _42 = core::panicking::panic(const "assertion failed: e(&bar) == 4");
    }

    bb21: {
        _48 = &_43;
        _47 = _48 as &dyn Foo<3> (Pointer(Unsize));
        _46 = a::<3>(move _47) -> bb22;
    }

    bb22: {
        _45 = Eq(move _46, const 999_usize);
        _44 = Not(move _45);
        switchInt(move _44) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _49 = core::panicking::panic(const "assertion failed: a(&baz) == 999");
    }

    bb24: {
        _54 = &_43;
        _53 = _54 as &dyn Foo<3> (Pointer(Unsize));
        _52 = b(move _53) -> bb25;
    }

    bb25: {
        _51 = Eq(move _52, const 999_usize);
        _50 = Not(move _51);
        switchInt(move _50) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _55 = core::panicking::panic(const "assertion failed: b(&baz) == 999");
    }

    bb27: {
        _59 = &_43;
        _58 = d::<BazType>(_59) -> bb28;
    }

    bb28: {
        _57 = Eq(move _58, const 999_usize);
        _56 = Not(move _57);
        switchInt(move _56) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _60 = core::panicking::panic(const "assertion failed: d(&baz) == 999");
    }

    bb30: {
        _66 = &_61;
        _65 = _66 as &dyn Foo<3> (Pointer(Unsize));
        _64 = a::<3>(move _65) -> bb31;
    }

    bb31: {
        _63 = Eq(move _64, const 9999_usize);
        _62 = Not(move _63);
        switchInt(move _62) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _67 = core::panicking::panic(const "assertion failed: a(&boz) == 9999");
    }

    bb33: {
        _72 = &_61;
        _71 = _72 as &dyn Foo<3> (Pointer(Unsize));
        _70 = b(move _71) -> bb34;
    }

    bb34: {
        _69 = Eq(move _70, const 9999_usize);
        _68 = Not(move _69);
        switchInt(move _68) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _73 = core::panicking::panic(const "assertion failed: b(&boz) == 9999");
    }

    bb36: {
        _77 = &_61;
        _76 = d::<BozType>(_77) -> bb37;
    }

    bb37: {
        _75 = Eq(move _76, const 9999_usize);
        _74 = Not(move _75);
        switchInt(move _74) -> [0: bb39, otherwise: bb38];
    }

    bb38: {
        _78 = core::panicking::panic(const "assertion failed: d(&boz) == 9999");
    }

    bb39: {
        _84 = &_79;
        _83 = _84 as &dyn Foo<3> (Pointer(Unsize));
        _82 = a::<3>(move _83) -> bb40;
    }

    bb40: {
        _81 = Eq(move _82, const 5_usize);
        _80 = Not(move _81);
        switchInt(move _80) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _85 = core::panicking::panic(const "assertion failed: a(&bok) == 5");
    }

    bb42: {
        _90 = &_79;
        _89 = _90 as &dyn Foo<3> (Pointer(Unsize));
        _88 = b(move _89) -> bb43;
    }

    bb43: {
        _87 = Eq(move _88, const 5_usize);
        _86 = Not(move _87);
        switchInt(move _86) -> [0: bb45, otherwise: bb44];
    }

    bb44: {
        _91 = core::panicking::panic(const "assertion failed: b(&bok) == 5");
    }

    bb45: {
        _95 = &_79;
        _94 = d::<BokType<3>>(_95) -> bb46;
    }

    bb46: {
        _93 = Eq(move _94, const 5_usize);
        _92 = Not(move _93);
        switchInt(move _92) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _96 = core::panicking::panic(const "assertion failed: d(&bok) == 5");
    }

    bb48: {
        _99 = c::<BokType<3>, 3>(const BokType::<3>) -> bb49;
    }

    bb49: {
        _98 = Eq(move _99, const 5_usize);
        _97 = Not(move _98);
        switchInt(move _97) -> [0: bb51, otherwise: bb50];
    }

    bb50: {
        _100 = core::panicking::panic(const "assertion failed: c(BokType::<3> {}) == 5");
    }

    bb51: {
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

main::{constant#2}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

main::{constant#3}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}
