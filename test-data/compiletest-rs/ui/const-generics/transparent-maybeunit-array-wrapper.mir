// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
MaybeUninitWrapper::0::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn MaybeUninitWrapper(_1: MaybeUninit<[u64; N]>) -> MaybeUninitWrapper<N> {
    let mut _0: MaybeUninitWrapper<N>;

    bb0: {
        _0 = MaybeUninitWrapper::<N>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn MaybeUninitWrapper(_1: MaybeUninit<[u64; N]>) -> MaybeUninitWrapper<N> {
    let mut _0: MaybeUninitWrapper<N>;

    bb0: {
        _0 = MaybeUninitWrapper::<N>(move _1);
        return;
    }
}
