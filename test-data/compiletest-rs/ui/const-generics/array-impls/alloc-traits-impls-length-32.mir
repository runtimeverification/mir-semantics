// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn yes_vec_partial_eq_array() -> impl PartialEq<[B; 32]> {
    let mut _0: impl std::cmp::PartialEq<[B; 32]>;

    bb0: {
        _0 = Vec::<A>::new() -> bb1;
    }

    bb1: {
        return;
    }
}

yes_vec_partial_eq_array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 32_usize;
        return;
    }
}

fn yes_vec_partial_eq_ref_array() -> impl PartialEq<&[B; 32]> {
    let mut _0: impl std::cmp::PartialEq<&[B; 32]>;

    bb0: {
        _0 = Vec::<A>::new() -> bb1;
    }

    bb1: {
        return;
    }
}

yes_vec_partial_eq_ref_array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 32_usize;
        return;
    }
}

fn yes_array_into_vec() -> Vec<T> {
    let mut _0: std::vec::Vec<T>;
    let mut _1: [T; 0];

    bb0: {
        _1 = [];
        _0 = <[T; 0] as Into<Vec<T>>>::into(move _1) -> bb1;
    }

    bb1: {
        return;
    }
}

fn yes_array_into_box() -> Box<[T]> {
    let mut _0: std::boxed::Box<[T]>;
    let mut _1: [T; 0];

    bb0: {
        _1 = [];
        _0 = <[T; 0] as Into<Box<[T]>>>::into(move _1) -> bb1;
    }

    bb1: {
        return;
    }
}

fn yes_vecdeque_partial_eq_array() -> impl PartialEq<[B; 32]> {
    let mut _0: impl std::cmp::PartialEq<[B; 32]>;

    bb0: {
        _0 = VecDeque::<A>::new() -> bb1;
    }

    bb1: {
        return;
    }
}

yes_vecdeque_partial_eq_array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 32_usize;
        return;
    }
}

fn yes_vecdeque_partial_eq_ref_array() -> impl PartialEq<&[B; 32]> {
    let mut _0: impl std::cmp::PartialEq<&[B; 32]>;

    bb0: {
        _0 = VecDeque::<A>::new() -> bb1;
    }

    bb1: {
        return;
    }
}

yes_vecdeque_partial_eq_ref_array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 32_usize;
        return;
    }
}

fn yes_vecdeque_partial_eq_ref_mut_array() -> impl PartialEq<&mut [B; 32]> {
    let mut _0: impl std::cmp::PartialEq<&mut [B; 32]>;

    bb0: {
        _0 = VecDeque::<A>::new() -> bb1;
    }

    bb1: {
        return;
    }
}

yes_vecdeque_partial_eq_ref_mut_array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 32_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
