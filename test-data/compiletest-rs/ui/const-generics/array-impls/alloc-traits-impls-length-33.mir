// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn yes_vec_partial_eq_array() -> impl PartialEq<[B; 33]> {
    let mut _0: impl std::cmp::PartialEq<[B; 33]>;

    bb0: {
        _0 = Vec::<A>::new() -> bb1;
    }

    bb1: {
        return;
    }
}

yes_vec_partial_eq_array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 33_usize;
        return;
    }
}

fn yes_vec_partial_eq_ref_array() -> impl PartialEq<&[B; 33]> {
    let mut _0: impl std::cmp::PartialEq<&[B; 33]>;

    bb0: {
        _0 = Vec::<A>::new() -> bb1;
    }

    bb1: {
        return;
    }
}

yes_vec_partial_eq_ref_array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 33_usize;
        return;
    }
}

fn yes_vecdeque_partial_eq_array() -> impl PartialEq<[B; 33]> {
    let mut _0: impl std::cmp::PartialEq<[B; 33]>;

    bb0: {
        _0 = VecDeque::<A>::new() -> bb1;
    }

    bb1: {
        return;
    }
}

yes_vecdeque_partial_eq_array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 33_usize;
        return;
    }
}

fn yes_vecdeque_partial_eq_ref_array() -> impl PartialEq<&[B; 33]> {
    let mut _0: impl std::cmp::PartialEq<&[B; 33]>;

    bb0: {
        _0 = VecDeque::<A>::new() -> bb1;
    }

    bb1: {
        return;
    }
}

yes_vecdeque_partial_eq_ref_array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 33_usize;
        return;
    }
}

fn yes_vecdeque_partial_eq_ref_mut_array() -> impl PartialEq<&mut [B; 33]> {
    let mut _0: impl std::cmp::PartialEq<&mut [B; 33]>;

    bb0: {
        _0 = VecDeque::<A>::new() -> bb1;
    }

    bb1: {
        return;
    }
}

yes_vecdeque_partial_eq_ref_mut_array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 33_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
