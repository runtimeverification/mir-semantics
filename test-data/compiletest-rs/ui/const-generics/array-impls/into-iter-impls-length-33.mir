// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn yes_iterator() -> impl Iterator<Item = i32> {
    let mut _0: impl std::iter::Iterator<Item = i32>;
    let mut _1: [i32; 33];

    bb0: {
        _1 = [const 0_i32; 33];
        _0 = <[i32; 33] as IntoIterator>::into_iter(move _1) -> bb1;
    }

    bb1: {
        return;
    }
}

yes_iterator::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 33_usize;
        return;
    }
}

fn yes_double_ended_iterator() -> impl DoubleEndedIterator {
    let mut _0: impl std::iter::DoubleEndedIterator;
    let mut _1: [i32; 33];

    bb0: {
        _1 = [const 0_i32; 33];
        _0 = <[i32; 33] as IntoIterator>::into_iter(move _1) -> bb1;
    }

    bb1: {
        return;
    }
}

yes_double_ended_iterator::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 33_usize;
        return;
    }
}

fn yes_exact_size_iterator() -> impl ExactSizeIterator {
    let mut _0: impl std::iter::ExactSizeIterator;
    let mut _1: [i32; 33];

    bb0: {
        _1 = [const 0_i32; 33];
        _0 = <[i32; 33] as IntoIterator>::into_iter(move _1) -> bb1;
    }

    bb1: {
        return;
    }
}

yes_exact_size_iterator::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 33_usize;
        return;
    }
}

fn yes_fused_iterator() -> impl FusedIterator {
    let mut _0: impl std::iter::FusedIterator;
    let mut _1: [i32; 33];

    bb0: {
        _1 = [const 0_i32; 33];
        _0 = <[i32; 33] as IntoIterator>::into_iter(move _1) -> bb1;
    }

    bb1: {
        return;
    }
}

yes_fused_iterator::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 33_usize;
        return;
    }
}

fn yes_trusted_len() -> impl TrustedLen {
    let mut _0: impl std::iter::TrustedLen;
    let mut _1: [i32; 33];

    bb0: {
        _1 = [const 0_i32; 33];
        _0 = <[i32; 33] as IntoIterator>::into_iter(move _1) -> bb1;
    }

    bb1: {
        return;
    }
}

yes_trusted_len::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 33_usize;
        return;
    }
}

fn yes_clone() -> impl Clone {
    let mut _0: impl std::clone::Clone;
    let mut _1: [i32; 33];

    bb0: {
        _1 = [const 0_i32; 33];
        _0 = <[i32; 33] as IntoIterator>::into_iter(move _1) -> bb1;
    }

    bb1: {
        return;
    }
}

yes_clone::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 33_usize;
        return;
    }
}

fn yes_debug() -> impl Debug {
    let mut _0: impl std::fmt::Debug;
    let mut _1: [i32; 33];

    bb0: {
        _1 = [const 0_i32; 33];
        _0 = <[i32; 33] as IntoIterator>::into_iter(move _1) -> bb1;
    }

    bb1: {
        return;
    }
}

yes_debug::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 33_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
