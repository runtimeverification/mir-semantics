// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
A::arr::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

<impl at ui/const-generics/infer_arg_from_pat.rs:9:1: 9:26>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn <impl at ui/const-generics/infer_arg_from_pat.rs:9:1: 9:26>::new() -> A<N> {
    let mut _0: A<N>;
    let mut _1: [u8; N];

    bb0: {
        _1 = [const 0_u8; N];
        _0 = A::<N> { arr: move _1 };
        return;
    }
}

<impl at ui/const-generics/infer_arg_from_pat.rs:9:1: 9:26>::new::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn <impl at ui/const-generics/infer_arg_from_pat.rs:9:1: 9:26>::value(_1: &A<N>) -> usize {
    debug self => _1;
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: A<2>;
    let mut _2: (&usize, &usize);
    let mut _3: &usize;
    let _4: usize;
    let mut _5: &A<2>;
    let mut _6: &usize;
    let _7: usize;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug a => _1;
        scope 2 {
            let _8: &usize;
            let _9: &usize;
            scope 3 {
                debug left_val => _8;
                debug right_val => _9;
                let _14: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _14;
                }
            }
        }
    }

    bb0: {
        _1 = A::<2>::new() -> bb1;
    }

    bb1: {
        _5 = &_1;
        _4 = A::<2>::value(move _5) -> bb2;
    }

    bb2: {
        _3 = &_4;
        _7 = const 2_usize;
        _6 = &_7;
        _2 = (move _3, move _6);
        _8 = (_2.0: &usize);
        _9 = (_2.1: &usize);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<usize, usize>(move _14, _8, _9, move _16);
    }

    bb4: {
        return;
    }
}
