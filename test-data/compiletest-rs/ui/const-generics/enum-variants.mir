// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                    scope 5 {
                        scope 6 {
                            scope 7 {
                                scope 8 {
                                    scope 9 {
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

main::{constant#2}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

main::{constant#3}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

main::{constant#4}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

main::{constant#5}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

main::{constant#6}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

main::{constant#7}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

main::{constant#8}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

fn Foo::Variant2() -> Foo<N> {
    let mut _0: Foo<N>;

    bb0: {
        _0 = Foo::<N>::Variant2;
        return;
    }
}

// MIR FOR CTFE
fn Foo::Variant2() -> Foo<N> {
    let mut _0: Foo<N>;

    bb0: {
        _0 = Foo::<N>::Variant2;
        return;
    }
}

fn Bar2() -> Bar2<N> {
    let mut _0: Bar2<N>;

    bb0: {
        _0 = Bar2::<N>;
        return;
    }
}

// MIR FOR CTFE
fn Bar2() -> Bar2<N> {
    let mut _0: Bar2<N>;

    bb0: {
        _0 = Bar2::<N>;
        return;
    }
}
