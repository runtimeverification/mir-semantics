// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
<impl at ui/const-generics/try_unify_ignore_lifetimes.rs:11:1: 11:37>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

const <impl at ui/const-generics/try_unify_ignore_lifetimes.rs:11:1: 11:37>::VALUE: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

Foo::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

Foo::0::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

fn Bar::bar(_1: &Foo<'_, <Self as Bar>::Size>) -> () {
    debug foo => _1;
    let mut _0: ();
    let _2: !;

    bb0: {
        _2 = core::panicking::panic(const "not yet implemented");
    }
}

Bar::bar::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

fn Baz::baz(_1: &Foo<'_, <Self as Baz<'_>>::Size>) -> () {
    debug foo => _1;
    let mut _0: ();
    let _2: !;

    bb0: {
        _2 = core::panicking::panic(const "not yet implemented");
    }
}

Baz::baz::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn Foo(_1: &[u32; N::VALUE]) -> Foo<'_, N> {
    let mut _0: Foo<'_, N>;

    bb0: {
        _0 = Foo::<'_, N>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: &[u32; N::VALUE]) -> Foo<'_, N> {
    let mut _0: Foo<'_, N>;

    bb0: {
        _0 = Foo::<'_, N>(move _1);
        return;
    }
}
