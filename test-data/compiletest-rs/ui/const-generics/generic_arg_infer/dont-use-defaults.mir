// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Foo::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

<impl at ui/const-generics/generic_arg_infer/dont-use-defaults.rs:7:1: 7:28>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn <impl at ui/const-generics/generic_arg_infer/dont-use-defaults.rs:7:1: 7:28>::make_arr() -> [(); N] {
    let mut _0: [(); N];

    bb0: {
        _0 = [const (); N];
        return;
    }
}

<impl at ui/const-generics/generic_arg_infer/dont-use-defaults.rs:7:1: 7:28>::make_arr::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

<impl at ui/const-generics/generic_arg_infer/dont-use-defaults.rs:7:1: 7:28>::make_arr::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: [(); 3];
    scope 1 {
    }

    bb0: {
        _1 = Foo::<3>::make_arr() -> bb1;
    }

    bb1: {
        return;
    }
}
