// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const <impl at ui/const-generics/issues/issue-88119.rs:11:1: 11:28>::NAME_BYTES: &[u8] = {
    let mut _0: &[u8];
    let mut _1: &[u8; 2];
    let _2: &[u8; 2];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const b"u8";
        _1 = &(*_2);
        _0 = move _1 as &[u8] (Pointer(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

alloc4 (size: 2, align: 1) {
    75 38                                           │ u8
}

fn name_len() -> usize {
    let mut _0: usize;
    let _1: &[u8];

    bb0: {
        _1 = const _;
        _0 = Len((*_1));
        return;
    }
}

// MIR FOR CTFE
fn name_len() -> usize {
    let mut _0: usize;
    let mut _1: &[u8];
    let _2: &[u8];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const _;
        _1 = &(*_2);
        ConstEvalCounter;
        _0 = core::slice::<impl [u8]>::len(move _1) -> bb1;
    }

    bb1: {
        StorageDead(_1);
        StorageDead(_2);
        return;
    }
}

<impl at ui/const-generics/issues/issue-88119.rs:19:1: 19:51>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        ConstEvalCounter;
        _0 = name_len::<T>() -> bb1;
    }

    bb1: {
        return;
    }
}

const <impl at ui/const-generics/issues/issue-88119.rs:19:1: 19:51>::NAME_BYTES: &[u8] = {
    let mut _0: &[u8];
    let mut _1: &[u8; 2];
    let _2: &[u8; 2];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const b"&T";
        _1 = &(*_2);
        _0 = move _1 as &[u8] (Pointer(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

alloc15 (size: 2, align: 1) {
    26 54                                           │ &T
}

<impl at ui/const-generics/issues/issue-88119.rs:26:1: 26:55>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        ConstEvalCounter;
        _0 = name_len::<T>() -> bb1;
    }

    bb1: {
        return;
    }
}

const <impl at ui/const-generics/issues/issue-88119.rs:26:1: 26:55>::NAME_BYTES: &[u8] = {
    let mut _0: &[u8];
    let mut _1: &[u8; 6];
    let _2: &[u8; 6];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const b"&mut T";
        _1 = &(*_2);
        _0 = move _1 as &[u8] (Pointer(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

alloc8 (size: 6, align: 1) {
    26 6d 75 74 20 54                               │ &mut T
}

const ICE_1: &[u8] = {
    let mut _0: &[u8];

    bb0: {
        _0 = const _;
        return;
    }
}

const ICE_2: &[u8] = {
    let mut _0: &[u8];

    bb0: {
        _0 = const _;
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
