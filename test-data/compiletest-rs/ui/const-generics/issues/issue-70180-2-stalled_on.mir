// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn works() -> () {
    let mut _0: ();
    let _1: [u8; 4];
    let _2: ();
    let _3: &[u8; 4];
    scope 1 {
        debug array => _1;
        scope 2 {
        }
    }

    bb0: {
        _1 = default_byte_array::<4>() -> bb1;
    }

    bb1: {
        _3 = &_1;
        _2 = <[u8; 4] as Foo<i32>>::foo(_3) -> bb2;
    }

    bb2: {
        return;
    }
}

works::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}

fn didnt_work() -> () {
    let mut _0: ();
    let _1: [u8; 4];
    let _2: ();
    let _3: &[u8; 4];
    scope 1 {
        debug array => _1;
        scope 2 {
        }
    }

    bb0: {
        _1 = default_byte_array::<4>() -> bb1;
    }

    bb1: {
        _3 = &_1;
        _2 = <[u8; 4] as Foo<i32>>::foo(_3) -> bb2;
    }

    bb2: {
        return;
    }
}

didnt_work::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}

fn Foo::foo(_1: &Self) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

<impl at ui/const-generics/issues/issue-70180-2-stalled_on.rs:19:1: 19:26>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}

<impl at ui/const-generics/issues/issue-70180-2-stalled_on.rs:20:1: 20:26>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 8_usize;
        return;
    }
}

fn default_byte_array() -> [u8; N] {
    let mut _0: [u8; N];

    bb0: {
        _0 = <[u8; N] as Default>::default() -> bb1;
    }

    bb1: {
        return;
    }
}

default_byte_array::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

default_byte_array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();

    bb0: {
        _1 = works() -> bb1;
    }

    bb1: {
        _2 = didnt_work() -> bb2;
    }

    bb2: {
        return;
    }
}
