// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
<impl at ui/const-generics/issues/issue-105037.rs:11:1: 11:44>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const D;
        return;
    }
}

<impl at ui/const-generics/issues/issue-105037.rs:11:1: 11:44>::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const D;
        return;
    }
}

const <impl at ui/const-generics/issues/issue-105037.rs:11:1: 11:44>::COLUMNS: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 123_usize;
        return;
    }
}

<impl at ui/const-generics/issues/issue-105037.rs:16:1: 16:44>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const D;
        return;
    }
}

<impl at ui/const-generics/issues/issue-105037.rs:16:1: 16:44>::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const D;
        return;
    }
}

const <impl at ui/const-generics/issues/issue-105037.rs:16:1: 16:44>::COLUMNS: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 456_usize;
        return;
    }
}

fn process_table(_1: T) -> () {
    debug _table => _1;
    let mut _0: ();

    bb0: {
        drop(_1) -> bb1;
    }

    bb1: {
        return;
    }
}

process_table::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const D;
        return;
    }
}

process_table::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

fn process_all_tables() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();

    bb0: {
        _1 = process_table::<Table1<D>, D>(const ZeroSized: Table1<D>) -> bb1;
    }

    bb1: {
        _2 = process_table::<Table2<D>, D>(const ZeroSized: Table2<D>) -> bb2;
    }

    bb2: {
        return;
    }
}

process_all_tables::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

process_all_tables::{constant#4}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const D;
        return;
    }
}

process_all_tables::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

process_all_tables::{constant#5}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const D;
        return;
    }
}

process_all_tables::{constant#2}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const D;
        return;
    }
}

process_all_tables::{constant#3}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const D;
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
