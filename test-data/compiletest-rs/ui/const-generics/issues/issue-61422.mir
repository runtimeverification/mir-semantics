// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> () {
    let mut _0: ();
    let _1: [u8; SIZE];
    scope 1 {
        debug arr => _1;
    }
    scope 2 {
        scope 3 {
            debug array => _2;
        }
        scope 4 {
            let _2: [u8; SIZE];
        }
    }

    bb0: {
        _2 = uninitialized::<[u8; SIZE]>() -> bb1;
    }

    bb1: {
        _1 = _2;
        return;
    }
}

foo::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const SIZE;
        return;
    }
}

foo::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const SIZE;
        return;
    }
}

fn bar() -> () {
    let mut _0: ();
    let _1: [u8; SIZE];
    let mut _3: std::mem::MaybeUninit<[u8; SIZE]>;
    scope 1 {
        debug arr => _1;
    }
    scope 2 {
        let _2: [u8; SIZE];
        scope 3 {
            debug array => _2;
        }
    }

    bb0: {
        _3 = MaybeUninit::<[u8; SIZE]>::uninit() -> bb1;
    }

    bb1: {
        _2 = MaybeUninit::<[u8; SIZE]>::assume_init(move _3) -> bb2;
    }

    bb2: {
        _1 = _2;
        return;
    }
}

bar::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const SIZE;
        return;
    }
}

bar::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const SIZE;
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
