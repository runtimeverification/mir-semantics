// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f(_1: T) -> [T; N] {
    debug x => _1;
    let mut _0: [T; N];

    bb0: {
        _0 = [_1; N];
        return;
    }
}

f::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

f::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: [u32; 5];
    let mut _2: (&[u32; 5], &[u32; 5]);
    let mut _3: &[u32; 5];
    let mut _4: &[u32; 5];
    let _5: [u32; 5];
    let mut _8: bool;
    let mut _9: bool;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _6: &[u32; 5];
        let _7: &[u32; 5];
        scope 2 {
            debug left_val => _6;
            debug right_val => _7;
            let _10: core::panicking::AssertKind;
            scope 3 {
                debug kind => _10;
            }
        }
    }

    bb0: {
        _1 = f::<u32, 5>(const 3_u32) -> bb1;
    }

    bb1: {
        _3 = &_1;
        _5 = [const 3_u32; 5];
        _4 = &_5;
        _2 = (move _3, move _4);
        _6 = (_2.0: &[u32; 5]);
        _7 = (_2.1: &[u32; 5]);
        _9 = <[u32; 5] as PartialEq>::eq(_6, _7) -> bb2;
    }

    bb2: {
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<[u32; 5], [u32; 5]>(move _10, _6, _7, move _12);
    }

    bb4: {
        return;
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 5_usize;
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 5_usize;
        return;
    }
}

main::{constant#2}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 5_usize;
        return;
    }
}
