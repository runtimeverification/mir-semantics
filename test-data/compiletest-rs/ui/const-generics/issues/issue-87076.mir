// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/const-generics/issues/issue-87076.rs:8:10: 8:19>::eq(_1: &UnitDims, _2: &UnitDims) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: u8;
    let mut _5: u8;
    let mut _6: bool;
    let mut _7: u8;
    let mut _8: u8;

    bb0: {
        _4 = ((*_1).0: u8);
        _5 = ((*_2).0: u8);
        _3 = Eq(move _4, move _5);
        switchInt(move _3) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _7 = ((*_1).1: u8);
        _8 = ((*_2).1: u8);
        _6 = Eq(move _7, move _8);
        _0 = move _6;
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn <impl at ui/const-generics/issues/issue-87076.rs:8:21: 8:23>::assert_receiver_is_total_eq(_1: &UnitDims) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

<impl at ui/const-generics/issues/issue-87076.rs:16:1: 16:43>::{constant#0}: UnitDims = {
    let mut _0: UnitDims;

    bb0: {
        _0 = const DIMS;
        return;
    }
}

fn <impl at ui/const-generics/issues/issue-87076.rs:16:1: 16:43>::crash() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();

    bb0: {
        _1 = UnitValue::<UnitDims { time: 1, length: 2 }>::crash() -> bb1;
    }

    bb1: {
        return;
    }
}

main::{constant#0}: UnitDims = {
    let mut _0: UnitDims;

    bb0: {
        _0 = UnitDims { time: const 1_u8, length: const 2_u8 };
        return;
    }
}
