// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/const-generics/issues/issue-85031-2.rs:11:1: 11:17>::foo() -> [(); A - 0] {
    let mut _0: [(); A - 0];

    bb0: {
        _0 = Ref::<'_>::foo::<A>() -> bb1;
    }

    bb1: {
        return;
    }
}

<impl at ui/const-generics/issues/issue-85031-2.rs:11:1: 11:17>::foo::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedSub(const A, const 0_usize);
        assert(!move (_1.1: bool), "attempt to compute `{} - {}`, which would overflow", const A, const 0_usize) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn Ref(_1: &i32) -> Ref<'_> {
    let mut _0: Ref<'_>;

    bb0: {
        _0 = Ref::<'_>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Ref(_1: &i32) -> Ref<'_> {
    let mut _0: Ref<'_>;

    bb0: {
        _0 = Ref::<'_>(move _1);
        return;
    }
}
