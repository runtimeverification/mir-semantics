// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Foo::state::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const D;
        return;
    }
}

<impl at ui/const-generics/issues/issue-64519.rs:6:1: 6:43>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const D;
        return;
    }
}

<impl at ui/const-generics/issues/issue-64519.rs:6:1: 6:43>::Item::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const D;
        return;
    }
}

fn <impl at ui/const-generics/issues/issue-64519.rs:6:1: 6:43>::next(_1: &mut Foo<D>) -> Option<[u8; D]> {
    debug self => _1;
    let mut _0: std::option::Option<[u8; D]>;
    let mut _2: bool;
    let mut _3: [u8; D];
    let mut _4: &[u8; D];
    let _5: [u8; D];
    let mut _6: std::option::Option<[u8; D]>;
    let mut _7: [u8; D];
    let mut _8: &[u8; D];
    let _9: [u8; D];
    let mut _10: std::option::Option<[u8; D]>;

    bb0: {
        _2 = const true;
        switchInt(move _2) -> [0: bb3, otherwise: bb1];
    }

    bb1: {
        _6 = ((*_1).0: std::option::Option<[u8; D]>);
        _5 = Option::<[u8; D]>::unwrap(move _6) -> bb2;
    }

    bb2: {
        _4 = &_5;
        _3 = (*_4);
        _0 = Option::<[u8; D]>::Some(move _3);
        goto -> bb5;
    }

    bb3: {
        _10 = ((*_1).0: std::option::Option<[u8; D]>);
        _9 = Option::<[u8; D]>::unwrap(move _10) -> bb4;
    }

    bb4: {
        _8 = &_9;
        _7 = (*_8);
        _0 = Option::<[u8; D]>::Some(move _7);
        goto -> bb5;
    }

    bb5: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
