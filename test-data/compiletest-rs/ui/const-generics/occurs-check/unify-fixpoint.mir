// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn bind(_1: [u8; N + 2]) -> [u8; N * 2] {
    debug value => _1;
    let mut _0: [u8; N * 2];
    let mut _2: !;

    bb0: {
        _2 = core::panicking::panic(const "not yet implemented");
    }
}

bind::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedAdd(const N, const 2_usize);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const N, const 2_usize) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

bind::{constant#1}: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedMul(const N, const 2_usize);
        assert(!move (_1.1: bool), "attempt to compute `{} * {}`, which would overflow", const N, const 2_usize) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: [u8; N + 2];
    let mut _2: [u8; N * 2];
    let mut _3: [u8; N + 2];
    scope 1 {
        debug arr => _1;
    }

    bb0: {
        _1 = <[u8; N + 2] as Default>::default() -> bb1;
    }

    bb1: {
        _3 = _1;
        _2 = bind::<2>(move _3) -> bb2;
    }

    bb2: {
        _1 = move _2;
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}
