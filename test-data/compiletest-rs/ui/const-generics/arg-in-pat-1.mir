// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
ConstGenericEnum::Foo::0::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn foo(_1: &ConstGenericEnum<N>) -> () {
    debug val => _1;
    let mut _0: ();
    let mut _2: isize;
    scope 1 {
        debug field => _3;
        let _3: &[i32; N];
    }

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _3 = &(((*_1) as Foo).0: [i32; N]);
        goto -> bb2;
    }

    bb2: {
        return;
    }
}

foo::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

foo::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn bar(_1: &ConstGenericEnum<N>) -> () {
    debug val => _1;
    let mut _0: ();
    let mut _2: isize;
    let _3: &[i32; N];
    scope 1 {
        debug field => _3;
    }

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb2, 1: bb3, otherwise: bb1];
    }

    bb1: {
        unreachable;
    }

    bb2: {
        _3 = &(((*_1) as Foo).0: [i32; N]);
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

bar::{constant#2}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

bar::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

bar::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: ConstGenericEnum<3>;
    let mut _2: isize;
    let _3: [i32; 3];
    scope 1 {
        debug field => _3;
    }

    bb0: {
        _1 = ConstGenericEnum::<3>::Bar;
        _2 = discriminant(_1);
        switchInt(move _2) -> [0: bb2, 1: bb3, otherwise: bb1];
    }

    bb1: {
        unreachable;
    }

    bb2: {
        _3 = ((_1 as Foo).0: [i32; 3]);
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

fn ConstGenericEnum::Foo(_1: [i32; N]) -> ConstGenericEnum<N> {
    let mut _0: ConstGenericEnum<N>;

    bb0: {
        _0 = ConstGenericEnum::<N>::Foo(move _1);
        return;
    }
}

// MIR FOR CTFE
fn ConstGenericEnum::Foo(_1: [i32; N]) -> ConstGenericEnum<N> {
    let mut _0: ConstGenericEnum<N>;

    bb0: {
        _0 = ConstGenericEnum::<N>::Foo(move _1);
        return;
    }
}
