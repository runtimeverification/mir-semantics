// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: &[u8; N]) -> &[u8] {
    debug v => _1;
    let mut _0: &[u8];

    bb0: {
        _0 = _1 as &[u8] (Pointer(Unsize));
        return;
    }
}

foo::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&&[u8], &&[u8; 2]);
    let mut _2: &&[u8];
    let _3: &[u8];
    let _4: &[u8; 2];
    let _5: [u8; 2];
    let mut _6: &&[u8; 2];
    let _7: &[u8; 2];
    let _8: [u8; 2];
    let _9: &&[u8];
    let _10: &&[u8; 2];
    let mut _11: bool;
    let mut _12: bool;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _9;
        debug right_val => _10;
        let _13: core::panicking::AssertKind;
        scope 2 {
            debug kind => _13;
        }
    }

    bb0: {
        _5 = [const 1_u8, const 2_u8];
        _4 = &_5;
        _3 = foo::<2>(_4) -> bb1;
    }

    bb1: {
        _2 = &_3;
        _8 = [const 1_u8, const 2_u8];
        _7 = &_8;
        _6 = &_7;
        _1 = (move _2, move _6);
        _9 = (_1.0: &&[u8]);
        _10 = (_1.1: &&[u8; 2]);
        _12 = <&[u8] as PartialEq<&[u8; 2]>>::eq(_9, _10) -> bb2;
    }

    bb2: {
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<&[u8], &[u8; 2]>(move _13, _9, _10, move _15);
    }

    bb4: {
        return;
    }
}
