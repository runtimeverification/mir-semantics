// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn make_array() -> [(); M + 1] {
    let mut _0: [(); M + 1];

    bb0: {
        _0 = [const (); M + 1];
        return;
    }
}

make_array::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedAdd(const M, const 1_usize);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const M, const 1_usize) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

make_array::{constant#1}: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedAdd(const M, const 1_usize);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const M, const 1_usize) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

fn foo() -> [(); (N * 2) + 1] {
    let mut _0: [(); (N * 2) + 1];

    bb0: {
        _0 = make_array::<{ N * 2 }>() -> bb1;
    }

    bb1: {
        return;
    }
}

foo::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: usize;
    let mut _2: (usize, bool);
    let mut _3: (usize, bool);

    bb0: {
        StorageLive(_1);
        _2 = CheckedMul(const N, const 2_usize);
        assert(!move (_2.1: bool), "attempt to compute `{} * {}`, which would overflow", const N, const 2_usize) -> bb1;
    }

    bb1: {
        _1 = move (_2.0: usize);
        _3 = CheckedAdd(_1, const 1_usize);
        assert(!move (_3.1: bool), "attempt to compute `{} + {}`, which would overflow", move _1, const 1_usize) -> bb2;
    }

    bb2: {
        _0 = move (_3.0: usize);
        StorageDead(_1);
        return;
    }
}

foo::{constant#1}: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedMul(const N, const 2_usize);
        assert(!move (_1.1: bool), "attempt to compute `{} * {}`, which would overflow", const N, const 2_usize) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&[(); (N * 2) + 1], &[(); 10 * 2 + 1]);
    let mut _2: &[(); (N * 2) + 1];
    let _3: [(); (N * 2) + 1];
    let mut _4: &[(); 10 * 2 + 1];
    let _5: [(); 10 * 2 + 1];
    let _6: &[(); (N * 2) + 1];
    let _7: &[(); 10 * 2 + 1];
    let mut _8: bool;
    let mut _9: bool;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }

    bb0: {
        _3 = foo::<10>() -> bb1;
    }

    bb1: {
        _2 = &_3;
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &[(); (N * 2) + 1]);
        _7 = (_1.1: &[(); 10 * 2 + 1]);
        _9 = <[(); (N * 2) + 1] as PartialEq<[(); 10 * 2 + 1]>>::eq(_6, _7) -> bb2;
    }

    bb2: {
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<[(); (N * 2) + 1], [(); 10 * 2 + 1]>(move _10, _6, _7, move _12);
    }

    bb4: {
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 10_usize;
        return;
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;
    let mut _1: usize;
    let mut _2: (usize, bool);
    let mut _3: (usize, bool);

    bb0: {
        StorageLive(_1);
        _2 = CheckedMul(const 10_usize, const 2_usize);
        assert(!move (_2.1: bool), "attempt to compute `{} * {}`, which would overflow", const 10_usize, const 2_usize) -> bb1;
    }

    bb1: {
        _1 = move (_2.0: usize);
        _3 = CheckedAdd(_1, const 1_usize);
        assert(!move (_3.1: bool), "attempt to compute `{} + {}`, which would overflow", move _1, const 1_usize) -> bb2;
    }

    bb2: {
        _0 = move (_3.0: usize);
        StorageDead(_1);
        return;
    }
}
