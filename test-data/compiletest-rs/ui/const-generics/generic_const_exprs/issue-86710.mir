// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: FooImpl<BarImpl<1>>;
    let _2: ();
    let mut _3: &FooImpl<BarImpl<1>>;
    scope 1 {
        debug x => const FooImpl::<BarImpl<1>> {{ phantom: PhantomData::<BarImpl<1>> }};
    }

    bb0: {
        _3 = &_1;
        _2 = <FooImpl<BarImpl<1>> as Foo<BarImpl<1>>>::foo::<BarImpl<1>>(move _3) -> bb1;
    }

    bb1: {
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

fn <impl at ui/const-generics/generic_const_exprs/issue-86710.rs:30:1: 30:30>::foo(_1: &FooImpl<T>) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();

    bb0: {
        _2 = <<T as Operation<U>>::Output as Bar>::error_occurs_here() -> bb1;
    }

    bb1: {
        return;
    }
}

<impl at ui/const-generics/generic_const_exprs/issue-86710.rs:49:1: 49:40>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn <impl at ui/const-generics/generic_const_exprs/issue-86710.rs:49:1: 49:40>::error_occurs_here() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

<impl at ui/const-generics/generic_const_exprs/issue-86710.rs:58:1: 58:74>::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedAdd(const N, const M);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const N, const M) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

<impl at ui/const-generics/generic_const_exprs/issue-86710.rs:58:1: 58:74>::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const M;
        return;
    }
}

<impl at ui/const-generics/generic_const_exprs/issue-86710.rs:58:1: 58:74>::{constant#2}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

<impl at ui/const-generics/generic_const_exprs/issue-86710.rs:58:1: 58:74>::Output::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedAdd(const N, const M);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const N, const M) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}
