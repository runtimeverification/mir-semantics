// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const <impl at ui/const-generics/generic_const_exprs/assoc_const_unification/const_equate_assoc_consts.rs:8:1: 8:20>::ASSOC: usize = {
    let mut _0: usize;

    bb0: {
        ConstEvalCounter;
        _0 = std::mem::size_of::<T>() -> bb1;
    }

    bb1: {
        return;
    }
}

Foo::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

Foo::0::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

fn bar() -> () {
    let mut _0: ();
    let mut _1: !;
    scope 1 {
    }

    bb0: {
        _1 = make();
    }
}

bar::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

fn make() -> ! {
    let mut _0: !;

    bb0: {
        _0 = core::panicking::panic(const "not yet implemented");
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn Foo(_1: [u8; T::ASSOC]) -> Foo<T> {
    let mut _0: Foo<T>;

    bb0: {
        _0 = Foo::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: [u8; T::ASSOC]) -> Foo<T> {
    let mut _0: Foo<T>;

    bb0: {
        _0 = Foo::<T>(move _1);
        return;
    }
}
