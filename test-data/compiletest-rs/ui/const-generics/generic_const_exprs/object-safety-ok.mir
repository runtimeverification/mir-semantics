// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Foo::test::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedAdd(const N, const 1_usize);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const N, const 1_usize) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

<impl at ui/const-generics/generic_const_exprs/object-safety-ok.rs:9:1: 9:35>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn <impl at ui/const-generics/generic_const_exprs/object-safety-ok.rs:9:1: 9:35>::test(_1: &()) -> [u8; N + 1] {
    debug self => _1;
    let mut _0: [u8; N + 1];

    bb0: {
        _0 = [const 0_u8; N + 1];
        return;
    }
}

<impl at ui/const-generics/generic_const_exprs/object-safety-ok.rs:9:1: 9:35>::test::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedAdd(const N, const 1_usize);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const N, const 1_usize) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

<impl at ui/const-generics/generic_const_exprs/object-safety-ok.rs:9:1: 9:35>::test::{constant#1}: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedAdd(const N, const 1_usize);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const N, const 1_usize) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

fn use_dyn(_1: &dyn Foo<N>) -> () {
    debug v => _1;
    let mut _0: ();
    let mut _2: (&[u8; N + 1], &[u8; N + 1]);
    let mut _3: &[u8; N + 1];
    let _4: [u8; N + 1];
    let mut _5: &[u8; N + 1];
    let _6: [u8; N + 1];
    let _7: &[u8; N + 1];
    let _8: &[u8; N + 1];
    let mut _9: bool;
    let mut _10: bool;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _7;
        debug right_val => _8;
        let _11: core::panicking::AssertKind;
        scope 2 {
            debug kind => _11;
        }
    }

    bb0: {
        _4 = <dyn Foo<N> as Foo<N>>::test(_1) -> bb1;
    }

    bb1: {
        _3 = &_4;
        _6 = [const 0_u8; N + 1];
        _5 = &_6;
        _2 = (move _3, move _5);
        _7 = (_2.0: &[u8; N + 1]);
        _8 = (_2.1: &[u8; N + 1]);
        _10 = <[u8; N + 1] as PartialEq<[u8; N + 1]>>::eq(_7, _8) -> bb2;
    }

    bb2: {
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<[u8; N + 1], [u8; N + 1]>(move _11, _7, _8, move _13);
    }

    bb4: {
        return;
    }
}

use_dyn::{constant#2}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

use_dyn::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedAdd(const N, const 1_usize);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const N, const 1_usize) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

use_dyn::{constant#1}: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedAdd(const N, const 1_usize);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const N, const 1_usize) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: &dyn Foo<3>;
    let _3: &();
    let _4: ();

    bb0: {
        _3 = &_4;
        _2 = _3 as &dyn Foo<3> (Pointer(Unsize));
        _1 = use_dyn::<3>(move _2) -> bb1;
    }

    bb1: {
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}
