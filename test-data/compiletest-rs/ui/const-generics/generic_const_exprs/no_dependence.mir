// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn two_args() -> [u8; M + 2] {
    let mut _0: [u8; M + 2];

    bb0: {
        _0 = [const 0_u8; M + 2];
        return;
    }
}

two_args::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedAdd(const M, const 2_usize);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const M, const 2_usize) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

two_args::{constant#1}: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedAdd(const M, const 2_usize);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const M, const 2_usize) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

fn yay() -> [u8; 4] {
    let mut _0: [u8; 4];

    bb0: {
        _0 = two_args::<N, 2>() -> bb1;
    }

    bb1: {
        return;
    }
}

yay::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}

yay::{constant#2}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

yay::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
