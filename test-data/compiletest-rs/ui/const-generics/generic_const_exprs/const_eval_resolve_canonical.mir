// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
<impl at ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs:10:1: 10:19>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

<impl at ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs:14:1: 14:19>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

fn foo(_1: T) -> <() as Foo<{ N + 1 }>>::Assoc {
    let mut _0: <() as Foo<{ N + 1 }>>::Assoc;

    bb0: {
        _0 = <<() as Foo<{ N + 1 }>>::Assoc as Default>::default() -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_1) -> bb2;
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

foo::{constant#1}: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedAdd(const N, const 1_usize);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const N, const 1_usize) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

foo::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedAdd(const N, const 1_usize);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const N, const 1_usize) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: i64;
    let mut _2: i64;
    let mut _3: i64;
    scope 1 {
        debug _q => _1;
    }

    bb0: {
        _1 = <i64 as Default>::default() -> bb1;
    }

    bb1: {
        _3 = _1;
        _2 = foo::<i64, 2>(move _3) -> bb2;
    }

    bb2: {
        _1 = move _2;
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}
