// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Changes::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: &[&str];
    let _2: &[&str];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const CHANGES;
        _1 = &(*_2);
        ConstEvalCounter;
        _0 = core::slice::<impl [&str]>::len(move _1) -> bb1;
    }

    bb1: {
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

Changes::changes::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: &[&str];
    let _2: &[&str];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const CHANGES;
        _1 = &(*_2);
        ConstEvalCounter;
        _0 = core::slice::<impl [&str]>::len(move _1) -> bb1;
    }

    bb1: {
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

<impl at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:14:1: 14:62>::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: &[&str];
    let _2: &[&str];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const CHANGES;
        _1 = &(*_2);
        ConstEvalCounter;
        _0 = core::slice::<impl [&str]>::len(move _1) -> bb1;
    }

    bb1: {
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

<impl at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:14:1: 14:62>::{constant#1}: &[&str] = {
    let mut _0: &[&str];

    bb0: {
        _0 = const CHANGES;
        return;
    }
}

fn <impl at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:14:1: 14:62>::combine(_1: &mut Changes<CHANGES>, _2: &Changes<CHANGES>) -> () {
    debug self => _1;
    debug other => _2;
    let mut _0: ();
    let mut _3: std::slice::Iter<'_, usize>;
    let mut _4: &[usize; CHANGES.len()];
    let mut _5: std::slice::Iter<'_, usize>;
    let mut _6: std::option::Option<&usize>;
    let mut _7: &mut std::slice::Iter<'_, usize>;
    let mut _8: isize;
    scope 1 {
        debug iter => _5;
        let _9: &usize;
        scope 2 {
            debug _change => _9;
        }
    }

    bb0: {
        _4 = &((*_1).0: [usize; CHANGES.len()]);
        _3 = <&[usize; CHANGES.len()] as IntoIterator>::into_iter(move _4) -> bb1;
    }

    bb1: {
        _5 = move _3;
        goto -> bb2;
    }

    bb2: {
        _7 = &mut _5;
        _6 = <std::slice::Iter<'_, usize> as Iterator>::next(_7) -> bb3;
    }

    bb3: {
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        _9 = ((_6 as Some).0: &usize);
        goto -> bb2;
    }

    bb5: {
        unreachable;
    }

    bb6: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
