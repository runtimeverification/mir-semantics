// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> usize {
    let mut _0: usize;
    let mut _1: bool;

    bb0: {
        _1 = const false;
        switchInt(move _1) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _0 = std::mem::size_of::<T>() -> bb3;
    }

    bb2: {
        _0 = const 8_usize;
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

// MIR FOR CTFE
fn foo() -> usize {
    let mut _0: usize;
    let mut _1: bool;

    bb0: {
        StorageLive(_1);
        _1 = const false;
        switchInt(move _1) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        ConstEvalCounter;
        _0 = std::mem::size_of::<T>() -> bb3;
    }

    bb2: {
        _0 = const 8_usize;
        goto -> bb3;
    }

    bb3: {
        StorageDead(_1);
        return;
    }
}

fn test() -> () {
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

test::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        ConstEvalCounter;
        _0 = foo::<T>() -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
