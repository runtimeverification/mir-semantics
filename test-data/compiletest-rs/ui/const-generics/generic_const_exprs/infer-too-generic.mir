// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn split_first(_1: [T; N]) -> (T, [T; N - 1]) {
    debug arr => _1;
    let mut _0: (T, [T; N - 1]);
    let _2: std::mem::ManuallyDrop<[T; N]>;
    let mut _4: *const T;
    let _5: &T;
    let _6: &[T; N];
    let mut _7: &std::mem::ManuallyDrop<[T; N]>;
    let _8: usize;
    let mut _9: usize;
    let mut _10: bool;
    let mut _12: *const [T; N - 1];
    let mut _13: *const [T];
    let _14: &[T];
    let _15: &[T];
    let mut _16: &[T; N];
    let _17: &[T; N];
    let mut _18: &std::mem::ManuallyDrop<[T; N]>;
    let mut _19: std::ops::RangeFrom<usize>;
    let mut _20: T;
    let mut _21: [T; N - 1];
    scope 1 {
        debug arr => _2;
        scope 2 {
            let _3: T;
            scope 3 {
                debug head => _3;
                let _11: [T; N - 1];
                scope 4 {
                    debug tail => _11;
                }
            }
        }
    }

    bb0: {
        _2 = ManuallyDrop::<[T; N]>::new(move _1) -> bb1;
    }

    bb1: {
        _7 = &_2;
        _6 = <ManuallyDrop<[T; N]> as Deref>::deref(move _7) -> bb2;
    }

    bb2: {
        _8 = const 0_usize;
        _9 = const N;
        _10 = Lt(_8, _9);
        assert(move _10, "index out of bounds: the length is {} but the index is {}", move _9, _8) -> bb3;
    }

    bb3: {
        _5 = &(*_6)[_8];
        _4 = &raw const (*_5);
        _3 = std::ptr::read::<T>(move _4) -> bb4;
    }

    bb4: {
        _18 = &_2;
        _17 = <ManuallyDrop<[T; N]> as Deref>::deref(move _18) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        _16 = _17;
        _19 = RangeFrom::<usize> { start: const 1_usize };
        _15 = <[T; N] as Index<RangeFrom<usize>>>::index(move _16, move _19) -> [return: bb6, unwind: bb8];
    }

    bb6: {
        _14 = _15;
        _13 = &raw const (*_14);
        _12 = move _13 as *const [T; N - 1] (PtrToPtr);
        _11 = std::ptr::read::<[T; N - 1]>(_12) -> [return: bb7, unwind: bb8];
    }

    bb7: {
        _20 = move _3;
        _21 = move _11;
        _0 = (move _20, move _21);
        return;
    }

    bb8 (cleanup): {
        drop(_3) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        resume;
    }
}

split_first::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

split_first::{constant#2}: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedSub(const N, const 1_usize);
        assert(!move (_1.1: bool), "attempt to compute `{} - {}`, which would overflow", const N, const 1_usize) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

split_first::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedSub(const N, const 1_usize);
        assert(!move (_1.1: bool), "attempt to compute `{} - {}`, which would overflow", const N, const 1_usize) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

split_first::{constant#3}: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedSub(const N, const 1_usize);
        assert(!move (_1.1: bool), "attempt to compute `{} - {}`, which would overflow", const N, const 1_usize) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: [i32; 5];
    let mut _4: (i32, [i32; N - 1]);
    let mut _5: (&i32, &i32);
    let mut _6: &i32;
    let mut _7: &i32;
    let _8: i32;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: i32;
    let mut _14: i32;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: (&[i32; N - 1], &[i32; 4]);
    let mut _19: &[i32; N - 1];
    let mut _20: &[i32; 4];
    let _21: [i32; 4];
    let mut _24: bool;
    let mut _25: bool;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug arr => _1;
        let _2: i32;
        let _3: [i32; N - 1];
        scope 2 {
            debug head => _2;
            debug tail => _3;
            let _9: &i32;
            let _10: &i32;
            let _22: &[i32; N - 1];
            let _23: &[i32; 4];
            scope 3 {
                debug left_val => _9;
                debug right_val => _10;
                let _15: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _15;
                }
            }
            scope 5 {
                debug left_val => _22;
                debug right_val => _23;
                let _26: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _26;
                }
            }
        }
    }

    bb0: {
        _1 = [const 0_i32, const 1_i32, const 2_i32, const 3_i32, const 4_i32];
        _4 = split_first::<i32, 5>(_1) -> bb1;
    }

    bb1: {
        _2 = (_4.0: i32);
        _3 = (_4.1: [i32; N - 1]);
        _6 = &_2;
        _8 = const 0_i32;
        _7 = &_8;
        _5 = (move _6, move _7);
        _9 = (_5.0: &i32);
        _10 = (_5.1: &i32);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<i32, i32>(move _15, _9, _10, move _17);
    }

    bb3: {
        _19 = &_3;
        _21 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32];
        _20 = &_21;
        _18 = (move _19, move _20);
        _22 = (_18.0: &[i32; N - 1]);
        _23 = (_18.1: &[i32; 4]);
        _25 = <[i32; N - 1] as PartialEq<[i32; 4]>>::eq(_22, _23) -> bb4;
    }

    bb4: {
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<[i32; N - 1], [i32; 4]>(move _26, _22, _23, move _28);
    }

    bb6: {
        return;
    }
}
