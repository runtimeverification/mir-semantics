// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Changes::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: &[&str];
    let _2: &[&str];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const CHANGES;
        _1 = &(*_2);
        ConstEvalCounter;
        _0 = core::slice::<impl [&str]>::len(move _1) -> bb1;
    }

    bb1: {
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

Changes::changes::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: &[&str];
    let _2: &[&str];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const CHANGES;
        _1 = &(*_2);
        ConstEvalCounter;
        _0 = core::slice::<impl [&str]>::len(move _1) -> bb1;
    }

    bb1: {
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

<impl at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:14:1: 14:62>::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: &[&str];
    let _2: &[&str];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const CHANGES;
        _1 = &(*_2);
        ConstEvalCounter;
        _0 = core::slice::<impl [&str]>::len(move _1) -> bb1;
    }

    bb1: {
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

<impl at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:14:1: 14:62>::{constant#1}: &[&str] = {
    let mut _0: &[&str];

    bb0: {
        _0 = const CHANGES;
        return;
    }
}

fn <impl at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:14:1: 14:62>::new() -> Changes<CHANGES> {
    let mut _0: Changes<CHANGES>;
    let mut _1: [usize; CHANGES.len()];

    bb0: {
        _1 = [const 0_usize; CHANGES.len()];
        _0 = Changes::<CHANGES> { changes: move _1 };
        return;
    }
}

// MIR FOR CTFE
fn <impl at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:14:1: 14:62>::new() -> Changes<CHANGES> {
    let mut _0: Changes<CHANGES>;
    let mut _1: [usize; CHANGES.len()];

    bb0: {
        StorageLive(_1);
        _1 = [const 0_usize; CHANGES.len()];
        _0 = Changes::<CHANGES> { changes: move _1 };
        StorageDead(_1);
        return;
    }
}

<impl at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:14:1: 14:62>::new::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: &[&str];
    let _2: &[&str];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const CHANGES;
        _1 = &(*_2);
        ConstEvalCounter;
        _0 = core::slice::<impl [&str]>::len(move _1) -> bb1;
    }

    bb1: {
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
