// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
<impl at ui/const-generics/generic_const_exprs/issue-84669.rs:12:1: 12:21>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

<impl at ui/const-generics/generic_const_exprs/issue-84669.rs:12:1: 12:21>::Output::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedAdd(const 1_usize, const 2_usize);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const 1_usize, const 2_usize) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

fn <impl at ui/const-generics/generic_const_exprs/issue-84669.rs:12:1: 12:21>::foo() -> [u8; 3] {
    let mut _0: [u8; 3];

    bb0: {
        _0 = [const 1_u8; 3];
        return;
    }
}

<impl at ui/const-generics/generic_const_exprs/issue-84669.rs:12:1: 12:21>::foo::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

<impl at ui/const-generics/generic_const_exprs/issue-84669.rs:12:1: 12:21>::foo::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

fn bug() -> () {
    let mut _0: ();
    let _1: &[u8];
    let mut _2: &<[u8; N] as Foo>::Output;
    let _3: <[u8; N] as Foo>::Output;

    bb0: {
        _3 = <[u8; N] as Foo>::foo() -> bb1;
    }

    bb1: {
        _2 = &_3;
        _1 = <<[u8; N] as Foo>::Output as AsRef<[u8]>>::as_ref(move _2) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_3) -> bb3;
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_3) -> [return: bb5, unwind terminate];
    }

    bb5 (cleanup): {
        resume;
    }
}

bug::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

bug::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

bug::{constant#2}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();

    bb0: {
        _1 = bug::<3>() -> bb1;
    }

    bb1: {
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}
