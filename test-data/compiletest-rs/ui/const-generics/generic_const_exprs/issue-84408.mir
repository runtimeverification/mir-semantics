// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Melon::new::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const X;
        return;
    }
}

Melon::change::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const X;
        return;
    }
}

Foo::0::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 5_usize;
        return;
    }
}

Bar::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedAdd(const A, const B);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const A, const B) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

Bar::0::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedAdd(const A, const B);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const A, const B) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

<impl at ui/const-generics/generic_const_exprs/issue-84408.rs:17:1: 17:22>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 5_usize;
        return;
    }
}

fn <impl at ui/const-generics/generic_const_exprs/issue-84408.rs:17:1: 17:22>::new(_1: [i32; 5]) -> Foo {
    debug arr => _1;
    let mut _0: Foo;

    bb0: {
        _0 = Foo(_1);
        return;
    }
}

<impl at ui/const-generics/generic_const_exprs/issue-84408.rs:17:1: 17:22>::new::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 5_usize;
        return;
    }
}

fn <impl at ui/const-generics/generic_const_exprs/issue-84408.rs:17:1: 17:22>::change(_1: Foo) -> T {
    debug self => _1;
    let mut _0: T;
    let mut _2: [i32; 5];

    bb0: {
        _2 = (_1.0: [i32; 5]);
        _0 = <T as Melon<5>>::new(move _2) -> bb1;
    }

    bb1: {
        return;
    }
}

<impl at ui/const-generics/generic_const_exprs/issue-84408.rs:17:1: 17:22>::change::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 5_usize;
        return;
    }
}

<impl at ui/const-generics/generic_const_exprs/issue-84408.rs:26:1: 26:68>::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedAdd(const A, const B);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const A, const B) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

<impl at ui/const-generics/generic_const_exprs/issue-84408.rs:26:1: 26:68>::{constant#1}: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedAdd(const A, const B);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const A, const B) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

<impl at ui/const-generics/generic_const_exprs/issue-84408.rs:26:1: 26:68>::{constant#2}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const A;
        return;
    }
}

<impl at ui/const-generics/generic_const_exprs/issue-84408.rs:26:1: 26:68>::{constant#3}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const B;
        return;
    }
}

fn <impl at ui/const-generics/generic_const_exprs/issue-84408.rs:26:1: 26:68>::new(_1: [i32; A + B]) -> Bar<A, B> {
    debug arr => _1;
    let mut _0: Bar<A, B>;

    bb0: {
        _0 = Bar::<A, B>(_1);
        return;
    }
}

<impl at ui/const-generics/generic_const_exprs/issue-84408.rs:26:1: 26:68>::new::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedAdd(const A, const B);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const A, const B) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

fn <impl at ui/const-generics/generic_const_exprs/issue-84408.rs:26:1: 26:68>::change(_1: Bar<A, B>) -> T {
    debug self => _1;
    let mut _0: T;
    let mut _2: [i32; A + B];

    bb0: {
        _2 = (_1.0: [i32; A + B]);
        _0 = <T as Melon<{ A + B }>>::new(move _2) -> bb1;
    }

    bb1: {
        return;
    }
}

<impl at ui/const-generics/generic_const_exprs/issue-84408.rs:26:1: 26:68>::change::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedAdd(const A, const B);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const A, const B) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn Foo(_1: [i32; 5]) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: [i32; 5]) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo(move _1);
        return;
    }
}

fn Bar(_1: [i32; A + B]) -> Bar<A, B> {
    let mut _0: Bar<A, B>;

    bb0: {
        _0 = Bar::<A, B>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Bar(_1: [i32; A + B]) -> Bar<A, B> {
    let mut _0: Bar<A, B>;

    bb0: {
        _0 = Bar::<A, B>(move _1);
        return;
    }
}
