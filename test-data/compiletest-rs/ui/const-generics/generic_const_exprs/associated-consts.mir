// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const <impl at ui/const-generics/generic_const_exprs/associated-consts.rs:10:1: 10:31>::BLOCK_SIZE: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 64_usize;
        return;
    }
}

const <impl at ui/const-generics/generic_const_exprs/associated-consts.rs:15:1: 15:31>::BLOCK_SIZE: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 32_usize;
        return;
    }
}

fn test() -> () {
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

test::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedSub(const M, const _);
        assert(!move (_1.1: bool), "attempt to compute `{} - {}`, which would overflow", const M, const _) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

test::{constant#1}: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedSub(const M, const _);
        assert(!move (_1.1: bool), "attempt to compute `{} - {}`, which would overflow", const M, const _) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();

    bb0: {
        _1 = test::<FooCipher, 128>() -> bb1;
    }

    bb1: {
        _2 = test::<BarCipher, 64>() -> bb2;
    }

    bb2: {
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 128_usize;
        return;
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 64_usize;
        return;
    }
}

fn Block(_1: C) -> Block<C> {
    let mut _0: Block<C>;

    bb0: {
        _0 = Block::<C>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Block(_1: C) -> Block<C> {
    let mut _0: Block<C>;

    bb0: {
        _0 = Block::<C>(move _1);
        return;
    }
}
