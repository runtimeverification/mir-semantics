// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Foo::bar() -> () {
    let mut _0: ();
    let _1: &mut [u8];
    let mut _2: &mut <Self as Foo>::Baz;
    let mut _3: <Self as Foo>::Baz;

    bb0: {
        _3 = <<Self as Foo>::Baz as Default>::default() -> bb1;
    }

    bb1: {
        _2 = &mut _3;
        _1 = <<Self as Foo>::Baz as AsMut<[u8]>>::as_mut(move _2) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_3) -> bb3;
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_3) -> [return: bb5, unwind terminate];
    }

    bb5 (cleanup): {
        resume;
    }
}

<impl at ui/const-generics/generic_const_exprs/issue-73298.rs:16:1: 16:16>::Baz::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedMul(const 1_usize, const 1_usize);
        assert(!move (_1.1: bool), "attempt to compute `{} * {}`, which would overflow", const 1_usize, const 1_usize) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();

    bb0: {
        _1 = <() as Foo>::bar() -> bb1;
    }

    bb1: {
        return;
    }
}
