// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Conster::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

<impl at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:12:10: 12:15>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

fn <impl at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:12:10: 12:15>::clone(_1: &Conster<OT>) -> Conster<OT> {
    debug self => _1;
    let mut _0: Conster<OT>;
    let mut _2: std::marker::PhantomData<fn(OT) -> OT>;
    let _3: &std::marker::PhantomData<fn(OT) -> OT>;

    bb0: {
        _3 = &((*_1).0: std::marker::PhantomData<fn(OT) -> OT>);
        _2 = <PhantomData<fn(OT) -> OT> as Clone>::clone(_3) -> bb1;
    }

    bb1: {
        return;
    }
}

<impl at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:12:17: 12:22>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

fn <impl at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:12:17: 12:22>::fmt(_1: &Conster<OT>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &&std::marker::PhantomData<fn(OT) -> OT>;
    let _7: &std::marker::PhantomData<fn(OT) -> OT>;

    bb0: {
        _3 = const "Conster";
        _4 = const "_offset_type";
        _7 = &((*_1).0: std::marker::PhantomData<fn(OT) -> OT>);
        _6 = &_7;
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _3, _4, move _5) -> bb1;
    }

    bb1: {
        return;
    }
}

<impl at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:21:1: 21:21>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

fn <impl at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:21:1: 21:21>::new() -> Conster<OT> {
    let mut _0: Conster<OT>;

    bb0: {
        return;
    }
}

fn make_conster() -> Conster<COT> {
    let mut _0: Conster<COT>;

    bb0: {
        _0 = Conster::<COT>::new() -> bb1;
    }

    bb1: {
        return;
    }
}

make_conster::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
