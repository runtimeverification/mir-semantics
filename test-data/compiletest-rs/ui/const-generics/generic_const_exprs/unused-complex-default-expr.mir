// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Foo::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedAdd(const N, const 1_usize);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const N, const 1_usize) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

Bar::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

Bar::0::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn Bar(_1: Foo<N, 3>) -> Bar<N> {
    let mut _0: Bar<N>;

    bb0: {
        _0 = Bar::<N>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Bar(_1: Foo<N, 3>) -> Bar<N> {
    let mut _0: Bar<N>;

    bb0: {
        _0 = Bar::<N>(move _1);
        return;
    }
}
