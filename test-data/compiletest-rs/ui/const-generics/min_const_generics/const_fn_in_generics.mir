// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn identity() -> u32 {
    let mut _0: u32;

    bb0: {
        _0 = const T;
        return;
    }
}

// MIR FOR CTFE
fn identity() -> u32 {
    let mut _0: u32;

    bb0: {
        _0 = const T;
        return;
    }
}

<impl at ui/const-generics/min_const_generics/const_fn_in_generics.rs:5:10: 5:12>::{constant#0}: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const U;
        return;
    }
}

<impl at ui/const-generics/min_const_generics/const_fn_in_generics.rs:5:10: 5:12>::{constant#0}: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const U;
        return;
    }
}

fn <impl at ui/const-generics/min_const_generics/const_fn_in_generics.rs:5:10: 5:12>::assert_receiver_is_total_eq(_1: &ConstU32<U>) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

<impl at ui/const-generics/min_const_generics/const_fn_in_generics.rs:5:14: 5:23>::{constant#0}: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const U;
        return;
    }
}

<impl at ui/const-generics/min_const_generics/const_fn_in_generics.rs:5:14: 5:23>::{constant#0}: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const U;
        return;
    }
}

fn <impl at ui/const-generics/min_const_generics/const_fn_in_generics.rs:5:14: 5:23>::eq(_1: &ConstU32<U>, _2: &ConstU32<U>) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;

    bb0: {
        _0 = const true;
        return;
    }
}

<impl at ui/const-generics/min_const_generics/const_fn_in_generics.rs:5:14: 5:23>::eq::{constant#0}: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const U;
        return;
    }
}

<impl at ui/const-generics/min_const_generics/const_fn_in_generics.rs:5:25: 5:30>::{constant#0}: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const U;
        return;
    }
}

fn <impl at ui/const-generics/min_const_generics/const_fn_in_generics.rs:5:25: 5:30>::fmt(_1: &ConstU32<U>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "ConstU32";
        _0 = Formatter::<'_>::write_str(_2, _3) -> bb1;
    }

    bb1: {
        return;
    }
}

fn new() -> ConstU32<3> {
    let mut _0: ConstU32<3>;

    bb0: {
        return;
    }
}

new::{constant#0}: u32 = {
    let mut _0: u32;

    bb0: {
        ConstEvalCounter;
        _0 = identity::<3>() -> bb1;
    }

    bb1: {
        return;
    }
}

new::{constant#0}::{constant#0}: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const 3_u32;
        return;
    }
}

new::{constant#1}: u32 = {
    let mut _0: u32;

    bb0: {
        ConstEvalCounter;
        _0 = identity::<3>() -> bb1;
    }

    bb1: {
        return;
    }
}

new::{constant#1}::{constant#0}: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const 3_u32;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ConstU32<3>;
    let mut _2: (&ConstU32<3>, &ConstU32<3>);
    let mut _3: &ConstU32<3>;
    let mut _4: &ConstU32<3>;
    let _5: ConstU32<3>;
    let mut _8: bool;
    let mut _9: bool;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug v => const ConstU32::<3>;
        let _6: &ConstU32<3>;
        let _7: &ConstU32<3>;
        scope 2 {
            debug left_val => _6;
            debug right_val => _7;
            let _10: core::panicking::AssertKind;
            scope 3 {
                debug kind => _10;
            }
        }
    }

    bb0: {
        _1 = new() -> bb1;
    }

    bb1: {
        _3 = &_1;
        _4 = &_5;
        _2 = (move _3, move _4);
        _6 = (_2.0: &ConstU32<3>);
        _7 = (_2.1: &ConstU32<3>);
        _9 = <ConstU32<3> as PartialEq>::eq(_6, _7) -> bb2;
    }

    bb2: {
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<ConstU32<3>, ConstU32<3>>(move _10, _6, _7, move _12);
    }

    bb4: {
        return;
    }
}

main::{constant#0}: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const 3_u32;
        return;
    }
}
