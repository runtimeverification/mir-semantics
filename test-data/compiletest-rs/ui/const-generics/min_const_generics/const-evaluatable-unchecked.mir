// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

foo::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        ConstEvalCounter;
        _0 = std::mem::size_of::<*mut T>() -> bb1;
    }

    bb1: {
        return;
    }
}

const <impl at ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:13:1: 13:15>::ASSOC: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}

fn <impl at ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:13:1: 13:15>::test() -> () {
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

<impl at ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:13:1: 13:15>::test::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

<impl at ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:25:1: 25:28>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

const <impl at ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:25:1: 25:28>::ASSOC: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}

fn <impl at ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:25:1: 25:28>::test() -> () {
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

<impl at ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:25:1: 25:28>::test::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn Foo(_1: T) -> Foo<T> {
    let mut _0: Foo<T>;

    bb0: {
        _0 = Foo::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: T) -> Foo<T> {
    let mut _0: Foo<T>;

    bb0: {
        _0 = Foo::<T>(move _1);
        return;
    }
}
