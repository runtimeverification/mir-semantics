// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: [u32; N]) -> [u32; K] {
    debug _data => _1;
    let mut _0: [u32; K];

    bb0: {
        _0 = [const 0_u32; K];
        return;
    }
}

foo::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

foo::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const K;
        return;
    }
}

foo::{constant#2}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const K;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: [u32; 2];
    let mut _2: [u32; 3];
    scope 1 {
        debug _a => _1;
    }

    bb0: {
        _2 = [const 0_u32, const 1_u32, const 2_u32];
        _1 = foo::<3, 2>(move _2) -> bb1;
    }

    bb1: {
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}
