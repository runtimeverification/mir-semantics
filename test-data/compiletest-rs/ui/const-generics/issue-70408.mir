// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn function_with_bytes() -> &[u8] {
    let mut _0: &[u8];
    let _1: &[u8; 4];

    bb0: {
        _1 = const BYTES;
        _0 = _1 as &[u8] (Pointer(Unsize));
        return;
    }
}

function_with_bytes::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&&[u8], &&[u8; 4]);
    let mut _2: &&[u8];
    let _3: &[u8];
    let mut _4: &&[u8; 4];
    let _5: &[u8; 4];
    let _6: [u8; 4];
    let _7: &&[u8];
    let _8: &&[u8; 4];
    let mut _9: bool;
    let mut _10: bool;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: (&&[u8], &&[u8; 4]);
    let mut _15: &&[u8];
    let _16: &[u8];
    let mut _17: &&[u8; 4];
    let _18: &[u8; 4];
    let _19: &&[u8];
    let _20: &&[u8; 4];
    let mut _21: bool;
    let mut _22: bool;
    let _24: !;
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _7;
        debug right_val => _8;
        let _11: core::panicking::AssertKind;
        scope 2 {
            debug kind => _11;
        }
    }
    scope 3 {
        debug left_val => _19;
        debug right_val => _20;
        let _23: core::panicking::AssertKind;
        scope 4 {
            debug kind => _23;
        }
    }

    bb0: {
        _3 = function_with_bytes::<&*b"AAAA">() -> bb1;
    }

    bb1: {
        _2 = &_3;
        _6 = [const 65_u8, const 65_u8, const 65_u8, const 65_u8];
        _5 = &_6;
        _4 = &_5;
        _1 = (move _2, move _4);
        _7 = (_1.0: &&[u8]);
        _8 = (_1.1: &&[u8; 4]);
        _10 = <&[u8] as PartialEq<&[u8; 4]>>::eq(_7, _8) -> bb2;
    }

    bb2: {
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<&[u8], &[u8; 4]>(move _11, _7, _8, move _13);
    }

    bb4: {
        _16 = function_with_bytes::<&*b"AAAA">() -> bb5;
    }

    bb5: {
        _15 = &_16;
        _18 = const b"AAAA";
        _17 = &_18;
        _14 = (move _15, move _17);
        _19 = (_14.0: &&[u8]);
        _20 = (_14.1: &&[u8; 4]);
        _22 = <&[u8] as PartialEq<&[u8; 4]>>::eq(_19, _20) -> bb6;
    }

    bb6: {
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _23 = core::panicking::AssertKind::Eq;
        _25 = Option::<Arguments<'_>>::None;
        _24 = core::panicking::assert_failed::<&[u8], &[u8; 4]>(move _23, _19, _20, move _25);
    }

    bb8: {
        return;
    }
}

alloc3 (size: 4, align: 1) {
    41 41 41 41                                     │ AAAA
}

main::{constant#0}: &[u8; 4] = {
    let mut _0: &[u8; 4];

    bb0: {
        _0 = const b"AAAA";
        return;
    }
}

alloc4 (size: 4, align: 1) {
    41 41 41 41                                     │ AAAA
}

main::{constant#1}: &[u8; 4] = {
    let mut _0: &[u8; 4];
    let _1: &[u8; 4];
    let _2: [u8; 4];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = [const 65_u8, const 65_u8, const 65_u8, const 65_u8];
        _1 = &_2;
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}
