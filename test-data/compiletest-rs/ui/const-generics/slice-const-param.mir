// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn function_with_str() -> &str {
    let mut _0: &str;

    bb0: {
        _0 = const STRING;
        return;
    }
}

fn function_with_bytes() -> &[u8] {
    let mut _0: &[u8];

    bb0: {
        _0 = const BYTES;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&&str, &&str);
    let mut _2: &&str;
    let _3: &str;
    let mut _4: &&str;
    let _5: &str;
    let _6: &&str;
    let _7: &&str;
    let mut _8: bool;
    let mut _9: bool;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: (&&str, &&str);
    let mut _14: &&str;
    let _15: &str;
    let mut _16: &&str;
    let _17: &str;
    let _18: &&str;
    let _19: &&str;
    let mut _20: bool;
    let mut _21: bool;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: (&&[u8], &&[u8; 4]);
    let mut _26: &&[u8];
    let _27: &[u8];
    let mut _28: &&[u8; 4];
    let _29: &[u8; 4];
    let _30: [u8; 4];
    let _31: &&[u8];
    let _32: &&[u8; 4];
    let mut _33: bool;
    let mut _34: bool;
    let _36: !;
    let mut _37: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _38: (&&[u8], &&[u8; 4]);
    let mut _39: &&[u8];
    let _40: &[u8];
    let mut _41: &&[u8; 4];
    let _42: &[u8; 4];
    let _43: &&[u8];
    let _44: &&[u8; 4];
    let mut _45: bool;
    let mut _46: bool;
    let _48: !;
    let mut _49: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }
    scope 3 {
        debug left_val => _18;
        debug right_val => _19;
        let _22: core::panicking::AssertKind;
        scope 4 {
            debug kind => _22;
        }
    }
    scope 5 {
        debug left_val => _31;
        debug right_val => _32;
        let _35: core::panicking::AssertKind;
        scope 6 {
            debug kind => _35;
        }
    }
    scope 7 {
        debug left_val => _43;
        debug right_val => _44;
        let _47: core::panicking::AssertKind;
        scope 8 {
            debug kind => _47;
        }
    }

    bb0: {
        _3 = function_with_str::<"Rust">() -> bb1;
    }

    bb1: {
        _2 = &_3;
        _5 = const "Rust";
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &&str);
        _7 = (_1.1: &&str);
        _9 = <&str as PartialEq>::eq(_6, _7) -> bb2;
    }

    bb2: {
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<&str, &str>(move _10, _6, _7, move _12);
    }

    bb4: {
        _15 = function_with_str::<"ℇ㇈↦">() -> bb5;
    }

    bb5: {
        _14 = &_15;
        _17 = const "ℇ㇈↦";
        _16 = &_17;
        _13 = (move _14, move _16);
        _18 = (_13.0: &&str);
        _19 = (_13.1: &&str);
        _21 = <&str as PartialEq>::eq(_18, _19) -> bb6;
    }

    bb6: {
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<&str, &str>(move _22, _18, _19, move _24);
    }

    bb8: {
        _27 = function_with_bytes::<b"AAAA">() -> bb9;
    }

    bb9: {
        _26 = &_27;
        _30 = [const 65_u8, const 65_u8, const 65_u8, const 65_u8];
        _29 = &_30;
        _28 = &_29;
        _25 = (move _26, move _28);
        _31 = (_25.0: &&[u8]);
        _32 = (_25.1: &&[u8; 4]);
        _34 = <&[u8] as PartialEq<&[u8; 4]>>::eq(_31, _32) -> bb10;
    }

    bb10: {
        _33 = Not(move _34);
        switchInt(move _33) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _35 = core::panicking::AssertKind::Eq;
        _37 = Option::<Arguments<'_>>::None;
        _36 = core::panicking::assert_failed::<&[u8], &[u8; 4]>(move _35, _31, _32, move _37);
    }

    bb12: {
        _40 = function_with_bytes::<b"AAAA">() -> bb13;
    }

    bb13: {
        _39 = &_40;
        _42 = const b"AAAA";
        _41 = &_42;
        _38 = (move _39, move _41);
        _43 = (_38.0: &&[u8]);
        _44 = (_38.1: &&[u8; 4]);
        _46 = <&[u8] as PartialEq<&[u8; 4]>>::eq(_43, _44) -> bb14;
    }

    bb14: {
        _45 = Not(move _46);
        switchInt(move _45) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _47 = core::panicking::AssertKind::Eq;
        _49 = Option::<Arguments<'_>>::None;
        _48 = core::panicking::assert_failed::<&[u8], &[u8; 4]>(move _47, _43, _44, move _49);
    }

    bb16: {
        return;
    }
}

alloc3 (size: 4, align: 1) {
    41 41 41 41                                     │ AAAA
}

main::{constant#0}: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "Rust";
        return;
    }
}

main::{constant#1}: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "ℇ㇈↦";
        return;
    }
}

main::{constant#2}: &[u8] = {
    let mut _0: &[u8];
    let mut _1: &[u8; 4];
    let _2: &[u8; 4];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const b"AAAA";
        _1 = &(*_2);
        _0 = move _1 as &[u8] (Pointer(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

alloc4 (size: 4, align: 1) {
    41 41 41 41                                     │ AAAA
}

main::{constant#3}: &[u8] = {
    let mut _0: &[u8];
    let mut _1: &[u8; 4];
    let _2: &[u8; 4];
    let _3: [u8; 4];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = [const 65_u8, const 65_u8, const 65_u8, const 65_u8];
        _2 = &_3;
        _1 = &(*_2);
        _0 = move _1 as &[u8] (Pointer(Unsize));
        StorageDead(_1);
        StorageDead(_2);
        return;
    }
}
