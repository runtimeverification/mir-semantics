// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/const-generics/type-dependent/issue-67144-2.rs:6:1: 6:7>::inner() -> A<N> {
    let mut _0: A<N>;

    bb0: {
        _0 = outer::<N>() -> bb1;
    }

    bb1: {
        return;
    }
}

<impl at ui/const-generics/type-dependent/issue-67144-2.rs:6:1: 6:7>::inner::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

<impl at ui/const-generics/type-dependent/issue-67144-2.rs:6:1: 6:7>::inner::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn outer() -> A<N> {
    let mut _0: A<N>;

    bb0: {
        return;
    }
}

outer::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: A<3>;
    scope 1 {
        debug i => const A::<3>;
        let _2: A<3>;
        scope 2 {
            debug o => const A::<3>;
        }
    }

    bb0: {
        _1 = outer::<3>() -> bb1;
    }

    bb1: {
        _2 = X::inner::<3>() -> bb2;
    }

    bb2: {
        return;
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

main::{constant#3}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

main::{constant#2}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}
