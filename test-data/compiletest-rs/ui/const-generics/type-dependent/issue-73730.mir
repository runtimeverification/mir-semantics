// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Foo::bar::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn <impl at ui/const-generics/type-dependent/issue-73730.rs:6:1: 6:40>::bar(_1: &mut I) -> *const [A; N] {
    debug self => _1;
    let mut _0: *const [A; N];

    bb0: {
        _0 = null::<[A; N]>() -> bb1;
    }

    bb1: {
        return;
    }
}

<impl at ui/const-generics/type-dependent/issue-73730.rs:6:1: 6:40>::bar::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: *const [u8; 10];
    let mut _2: &mut std::ops::Range<u8>;
    let mut _3: std::ops::Range<u8>;

    bb0: {
        _3 = std::ops::Range::<u8> { start: const 0_u8, end: const 10_u8 };
        _2 = &mut _3;
        _1 = <std::ops::Range<u8> as Foo<'_, u8>>::bar::<10>(move _2) -> bb1;
    }

    bb1: {
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 10_usize;
        return;
    }
}
