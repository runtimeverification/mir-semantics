// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/const-generics/type-dependent/issue-67144-1.rs:4:1: 4:7>::getn(_1: &X) -> [u8; N] {
    debug self => _1;
    let mut _0: [u8; N];

    bb0: {
        _0 = getn::<N>() -> bb1;
    }

    bb1: {
        return;
    }
}

<impl at ui/const-generics/type-dependent/issue-67144-1.rs:4:1: 4:7>::getn::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

<impl at ui/const-generics/type-dependent/issue-67144-1.rs:4:1: 4:7>::getn::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn getn() -> [u8; N] {
    let mut _0: [u8; N];
    scope 1 {
    }

    bb0: {
        _0 = zeroed::<[u8; N]>() -> bb1;
    }

    bb1: {
        return;
    }
}

getn::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: u8;
    let _2: u8;
    let _3: u8;
    let mut _4: [u8; 3];
    let mut _8: [u8; 3];
    let mut _9: &X;
    let _10: X;
    let mut _12: &X;
    let _13: X;
    scope 1 {
        debug a => _1;
        debug b => _2;
        debug c => _3;
        let _5: u8;
        let _6: u8;
        let _7: u8;
        scope 2 {
            debug a => _5;
            debug b => _6;
            debug c => _7;
            let _11: [u8; 3];
            scope 3 {
                debug arr => _11;
            }
        }
    }

    bb0: {
        _4 = getn::<3>() -> bb1;
    }

    bb1: {
        _1 = _4[0 of 3];
        _2 = _4[1 of 3];
        _3 = _4[2 of 3];
        _9 = &_10;
        _8 = X::getn::<3>(move _9) -> bb2;
    }

    bb2: {
        _5 = _8[0 of 3];
        _6 = _8[1 of 3];
        _7 = _8[2 of 3];
        _12 = &_13;
        _11 = X::getn::<3>(move _12) -> bb3;
    }

    bb3: {
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

main::{constant#3}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

main::{constant#2}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}
