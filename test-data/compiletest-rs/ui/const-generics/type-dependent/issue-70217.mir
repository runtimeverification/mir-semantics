// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
<impl at ui/const-generics/type-dependent/issue-70217.rs:5:1: 5:31>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn <impl at ui/const-generics/type-dependent/issue-70217.rs:5:1: 5:31>::method(_1: &Struct<N>) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn test(_1: Struct<N>) -> () {
    debug x => const ZeroSized: Struct<N>;
    let mut _0: ();
    let _2: ();
    let _3: &Struct<N>;
    let _4: ();
    let mut _5: &Struct<N>;

    bb0: {
        _3 = &_1;
        _2 = Struct::<N>::method::<M>(_3) -> bb1;
    }

    bb1: {
        _5 = &_1;
        _4 = Struct::<N>::method::<N>(move _5) -> bb2;
    }

    bb2: {
        return;
    }
}

test::{constant#3}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

test::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

test::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const M;
        return;
    }
}

test::{constant#2}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
