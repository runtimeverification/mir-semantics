// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn T::test(_1: &Self) -> i32 {
    debug self => _1;
    let mut _0: i32;

    bb0: {
        _0 = const A;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: S;
    let mut _2: (&i32, &i32);
    let mut _3: &i32;
    let _4: i32;
    let mut _5: &S;
    let mut _6: &i32;
    let _7: i32;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: i32;
    let mut _13: i32;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&i32, &i32);
    let mut _18: &i32;
    let _19: i32;
    let mut _20: &S;
    let mut _21: &i32;
    let _22: i32;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: i32;
    let mut _28: i32;
    let _30: !;
    let mut _31: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug foo => const S();
        let _8: &i32;
        let _9: &i32;
        let _23: &i32;
        let _24: &i32;
        scope 2 {
            debug left_val => _8;
            debug right_val => _9;
            let _14: core::panicking::AssertKind;
            scope 3 {
                debug kind => _14;
            }
        }
        scope 4 {
            debug left_val => _23;
            debug right_val => _24;
            let _29: core::panicking::AssertKind;
            scope 5 {
                debug kind => _29;
            }
        }
    }

    bb0: {
        _5 = &_1;
        _4 = <S as T>::test::<8>(move _5) -> bb1;
    }

    bb1: {
        _3 = &_4;
        _7 = const 8_i32;
        _6 = &_7;
        _2 = (move _3, move _6);
        _8 = (_2.0: &i32);
        _9 = (_2.1: &i32);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<i32, i32>(move _14, _8, _9, move _16);
    }

    bb3: {
        _20 = &_1;
        _19 = <S as T>::test::<16>(move _20) -> bb4;
    }

    bb4: {
        _18 = &_19;
        _22 = const 16_i32;
        _21 = &_22;
        _17 = (move _18, move _21);
        _23 = (_17.0: &i32);
        _24 = (_17.1: &i32);
        _27 = (*_23);
        _28 = (*_24);
        _26 = Eq(move _27, move _28);
        _25 = Not(move _26);
        switchInt(move _25) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _29 = core::panicking::AssertKind::Eq;
        _31 = Option::<Arguments<'_>>::None;
        _30 = core::panicking::assert_failed::<i32, i32>(move _29, _23, _24, move _31);
    }

    bb6: {
        return;
    }
}

main::{constant#0}: i32 = {
    let mut _0: i32;

    bb0: {
        _0 = const 8_i32;
        return;
    }
}

main::{constant#1}: i32 = {
    let mut _0: i32;

    bb0: {
        _0 = const 16_i32;
        return;
    }
}

fn S() -> S {
    let mut _0: S;

    bb0: {
        _0 = S;
        return;
    }
}

// MIR FOR CTFE
fn S() -> S {
    let mut _0: S;

    bb0: {
        _0 = S;
        return;
    }
}
