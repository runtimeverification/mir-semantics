// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
SliceExt::array_windows_example::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn <impl at ui/const-generics/type-dependent/issue-61936.rs:7:1: 7:36>::array_windows_example(_1: &[T]) -> ArrayWindowsExample<'_, T, N> {
    debug self => _1;
    let mut _0: ArrayWindowsExample<'_, T, N>;
    let _2: &&[T];
    let mut _3: &[T];

    bb0: {
        _2 = &_1;
        _3 = deref_copy (*_2);
        _0 = ArrayWindowsExample::<'_, T, N> { slice: _3, idx: const 0_usize };
        return;
    }
}

<impl at ui/const-generics/type-dependent/issue-61936.rs:7:1: 7:36>::array_windows_example::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

<impl at ui/const-generics/type-dependent/issue-61936.rs:18:1: 18:79>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

<impl at ui/const-generics/type-dependent/issue-61936.rs:18:1: 18:79>::Item::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn <impl at ui/const-generics/type-dependent/issue-61936.rs:18:1: 18:79>::next(_1: &mut ArrayWindowsExample<'_, T, N>) -> Option<[T; N]> {
    debug self => _1;
    let mut _0: std::option::Option<[T; N]>;
    let mut _2: [T; N];
    let mut _4: *mut [T; N];
    let mut _5: &mut [T; N];
    let mut _6: std::ops::Range<usize>;
    let mut _7: std::ops::Range<usize>;
    let mut _9: std::option::Option<usize>;
    let mut _10: &mut std::ops::Range<usize>;
    let mut _11: isize;
    let _13: ();
    let mut _14: std::option::Option<&T>;
    let mut _15: &[T];
    let _16: &[T];
    let mut _17: std::ops::RangeFrom<usize>;
    let mut _18: usize;
    let mut _19: isize;
    let mut _21: *mut T;
    let mut _22: T;
    let mut _23: *mut T;
    let mut _24: *mut T;
    let mut _25: [T; N];
    let mut _26: &[T];
    scope 1 {
        debug res => _2;
        let mut _3: *mut T;
        scope 3 {
            debug ptr => _3;
            let mut _8: std::ops::Range<usize>;
            scope 4 {
                debug iter => _8;
                let _12: usize;
                scope 5 {
                    debug i => _12;
                    let _20: &T;
                    scope 6 {
                        debug elem => _20;
                        scope 7 {
                        }
                    }
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _2 = zeroed::<[T; N]>() -> bb1;
    }

    bb1: {
        _5 = &mut _2;
        _4 = &raw mut (*_5);
        _3 = move _4 as *mut T (PtrToPtr);
        _7 = std::ops::Range::<usize> { start: const 0_usize, end: const N };
        _6 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _7) -> [return: bb2, unwind: bb16];
    }

    bb2: {
        _8 = move _6;
        goto -> bb3;
    }

    bb3: {
        _10 = &mut _8;
        _9 = <std::ops::Range<usize> as Iterator>::next(_10) -> [return: bb4, unwind: bb16];
    }

    bb4: {
        _11 = discriminant(_9);
        switchInt(move _11) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        _12 = ((_9 as Some).0: usize);
        _26 = deref_copy ((*_1).0: &[T]);
        _18 = ((*_1).1: usize);
        _17 = RangeFrom::<usize> { start: move _18 };
        _16 = <[T] as Index<RangeFrom<usize>>>::index(_26, move _17) -> [return: bb8, unwind: bb16];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _25 = move _2;
        _0 = Option::<[T; N]>::Some(move _25);
        goto -> bb15;
    }

    bb8: {
        _15 = _16;
        _14 = core::slice::<impl [T]>::get::<usize>(move _15, _12) -> [return: bb9, unwind: bb16];
    }

    bb9: {
        _19 = discriminant(_14);
        switchInt(move _19) -> [0: bb11, 1: bb10, otherwise: bb6];
    }

    bb10: {
        _20 = ((_14 as Some).0: &T);
        _21 = _3;
        _22 = <T as Clone>::clone(_20) -> [return: bb12, unwind: bb16];
    }

    bb11: {
        _0 = Option::<[T; N]>::None;
        drop(_2) -> bb15;
    }

    bb12: {
        _13 = write_volatile::<T>(move _21, move _22) -> [return: bb13, unwind: bb16];
    }

    bb13: {
        _24 = _3;
        _23 = ptr::mut_ptr::<impl *mut T>::wrapping_add(move _24, const 1_usize) -> [return: bb14, unwind: bb16];
    }

    bb14: {
        _3 = move _23;
        ((*_1).1: usize) = Add(((*_1).1: usize), const 1_usize);
        goto -> bb3;
    }

    bb15: {
        return;
    }

    bb16 (cleanup): {
        drop(_2) -> [return: bb17, unwind terminate];
    }

    bb17 (cleanup): {
        resume;
    }
}

<impl at ui/const-generics/type-dependent/issue-61936.rs:18:1: 18:79>::next::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

const FOUR: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<usize>;
    let mut _2: ArrayWindowsExample<'_, usize, 4>;
    let mut _3: ArrayWindowsExample<'_, usize, 4>;
    let mut _4: &[usize];
    let _5: &[usize];
    let mut _6: &std::vec::Vec<usize>;
    let mut _8: std::option::Option<[usize; 4]>;
    let mut _9: &mut ArrayWindowsExample<'_, usize, 4>;
    let mut _10: isize;
    let mut _12: (&[usize; 4], &[usize; 4]);
    let mut _13: &[usize; 4];
    let mut _14: &[usize; 4];
    let _15: [usize; 4];
    let mut _18: bool;
    let mut _19: bool;
    let _21: !;
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug v => _1;
        let mut _7: ArrayWindowsExample<'_, usize, 4>;
        scope 2 {
            debug iter => _7;
            let _11: [usize; 4];
            scope 3 {
                debug array => _11;
                let _16: &[usize; 4];
                let _17: &[usize; 4];
                scope 4 {
                    debug left_val => _16;
                    debug right_val => _17;
                    let _20: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _20;
                    }
                }
            }
        }
    }

    bb0: {
        _1 = from_elem::<usize>(const 0_usize, const 100_usize) -> bb1;
    }

    bb1: {
        _6 = &_1;
        _5 = Vec::<usize>::as_slice(move _6) -> [return: bb2, unwind: bb13];
    }

    bb2: {
        _4 = _5;
        _3 = <[usize] as SliceExt<usize>>::array_windows_example::<4>(move _4) -> [return: bb3, unwind: bb13];
    }

    bb3: {
        _2 = <ArrayWindowsExample<'_, usize, 4> as IntoIterator>::into_iter(move _3) -> [return: bb4, unwind: bb13];
    }

    bb4: {
        _7 = move _2;
        goto -> bb5;
    }

    bb5: {
        _9 = &mut _7;
        _8 = <ArrayWindowsExample<'_, usize, 4> as Iterator>::next(_9) -> [return: bb6, unwind: bb13];
    }

    bb6: {
        _10 = discriminant(_8);
        switchInt(move _10) -> [0: bb9, 1: bb7, otherwise: bb8];
    }

    bb7: {
        _11 = ((_8 as Some).0: [usize; 4]);
        _13 = &_11;
        _15 = [const 0_usize, const 0_usize, const 0_usize, const 0_usize];
        _14 = &_15;
        _12 = (move _13, move _14);
        _16 = (_12.0: &[usize; 4]);
        _17 = (_12.1: &[usize; 4]);
        _19 = <[usize; 4] as PartialEq>::eq(_16, _17) -> [return: bb10, unwind: bb13];
    }

    bb8: {
        unreachable;
    }

    bb9: {
        drop(_1) -> bb12;
    }

    bb10: {
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb5, otherwise: bb11];
    }

    bb11: {
        _20 = core::panicking::AssertKind::Eq;
        _22 = Option::<Arguments<'_>>::None;
        _21 = core::panicking::assert_failed::<[usize; 4], [usize; 4]>(move _20, _16, _17, move _22) -> bb13;
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        drop(_1) -> [return: bb14, unwind terminate];
    }

    bb14 (cleanup): {
        resume;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}
