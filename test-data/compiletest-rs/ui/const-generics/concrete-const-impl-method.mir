// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
<impl at ui/const-generics/concrete-const-impl-method.rs:7:1: 7:10>::{constant#0}: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const 2_u32;
        return;
    }
}

fn <impl at ui/const-generics/concrete-const-impl-method.rs:7:1: 7:10>::impl_method(_1: &A<2>) -> u32 {
    debug self => _1;
    let mut _0: u32;

    bb0: {
        _0 = const 17_u32;
        return;
    }
}

fn <impl at ui/const-generics/concrete-const-impl-method.rs:7:1: 7:10>::associated_non_method() -> u32 {
    let mut _0: u32;

    bb0: {
        _0 = const 17_u32;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: A<2>;
    let mut _2: (&u32, &u32);
    let mut _3: &u32;
    let _4: u32;
    let mut _5: &A<2>;
    let mut _6: &u32;
    let _7: u32;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: u32;
    let mut _13: u32;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&u32, &u32);
    let mut _18: &u32;
    let _19: u32;
    let mut _20: &u32;
    let _21: u32;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: u32;
    let mut _27: u32;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug val => const A::<2>;
        let _8: &u32;
        let _9: &u32;
        let _22: &u32;
        let _23: &u32;
        scope 2 {
            debug left_val => _8;
            debug right_val => _9;
            let _14: core::panicking::AssertKind;
            scope 3 {
                debug kind => _14;
            }
        }
        scope 4 {
            debug left_val => _22;
            debug right_val => _23;
            let _28: core::panicking::AssertKind;
            scope 5 {
                debug kind => _28;
            }
        }
    }

    bb0: {
        _5 = &_1;
        _4 = A::<2>::impl_method(move _5) -> bb1;
    }

    bb1: {
        _3 = &_4;
        _7 = const 17_u32;
        _6 = &_7;
        _2 = (move _3, move _6);
        _8 = (_2.0: &u32);
        _9 = (_2.1: &u32);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<u32, u32>(move _14, _8, _9, move _16);
    }

    bb3: {
        _19 = A::<2>::associated_non_method() -> bb4;
    }

    bb4: {
        _18 = &_19;
        _21 = const 17_u32;
        _20 = &_21;
        _17 = (move _18, move _20);
        _22 = (_17.0: &u32);
        _23 = (_17.1: &u32);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<u32, u32>(move _28, _22, _23, move _30);
    }

    bb6: {
        return;
    }
}

main::{constant#0}: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const 2_u32;
        return;
    }
}

main::{constant#1}: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const 2_u32;
        return;
    }
}
