// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
ArrayStruct::data::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

ArrayTuple::0::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 8_usize;
        return;
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 8_usize;
        return;
    }
}

fn ArrayTuple(_1: [T; N]) -> ArrayTuple<T, N> {
    let mut _0: ArrayTuple<T, N>;

    bb0: {
        _0 = ArrayTuple::<T, N>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn ArrayTuple(_1: [T; N]) -> ArrayTuple<T, N> {
    let mut _0: ArrayTuple<T, N>;

    bb0: {
        _0 = ArrayTuple::<T, N>(move _1);
        return;
    }
}
