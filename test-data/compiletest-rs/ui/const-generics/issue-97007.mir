// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const N_ISLANDS: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}

const N_BRIDGES: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 7_usize;
        return;
    }
}

const BRIDGES: [(usize, usize); 7] = {
    let mut _0: [(usize, usize); 7];
    let mut _1: (usize, usize);
    let mut _2: (usize, usize);
    let mut _3: (usize, usize);
    let mut _4: (usize, usize);
    let mut _5: (usize, usize);
    let mut _6: (usize, usize);
    let mut _7: (usize, usize);

    bb0: {
        StorageLive(_1);
        _1 = (const 0_usize, const 1_usize);
        StorageLive(_2);
        _2 = (const 0_usize, const 1_usize);
        StorageLive(_3);
        _3 = (const 0_usize, const 2_usize);
        StorageLive(_4);
        _4 = (const 0_usize, const 3_usize);
        StorageLive(_5);
        _5 = (const 0_usize, const 3_usize);
        StorageLive(_6);
        _6 = (const 1_usize, const 2_usize);
        StorageLive(_7);
        _7 = (const 2_usize, const 3_usize);
        _0 = [move _1, move _2, move _3, move _4, move _5, move _6, move _7];
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

BRIDGES::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 7_usize;
        return;
    }
}

Matrix::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

Matrix::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const EMPTY_MATRIX: [[usize; N_ISLANDS]; N_ISLANDS] = {
    let mut _0: [[usize; N_ISLANDS]; N_ISLANDS];
    let mut _1: [usize; N_ISLANDS];

    bb0: {
        StorageLive(_1);
        _1 = [const 0_usize; N_ISLANDS];
        _0 = [move _1; N_ISLANDS];
        StorageDead(_1);
        return;
    }
}

EMPTY_MATRIX::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

EMPTY_MATRIX::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

fn build(_1: [[usize; N_ISLANDS]; N_ISLANDS], _2: (usize, usize)) -> [[usize; N_ISLANDS]; N_ISLANDS] {
    debug matrix => _1;
    let mut _0: [[usize; N_ISLANDS]; N_ISLANDS];
    let _3: usize;
    let _4: usize;
    let mut _5: usize;
    let mut _6: bool;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: bool;
    let mut _11: usize;
    let mut _12: bool;
    scope 1 {
        debug to => _3;
        debug from => _4;
    }

    bb0: {
        _3 = (_2.0: usize);
        _4 = (_2.1: usize);
        _5 = const _;
        _6 = Lt(_3, _5);
        assert(move _6, "index out of bounds: the length is {} but the index is {}", move _5, _3) -> bb1;
    }

    bb1: {
        _7 = const _;
        _8 = Lt(_4, _7);
        assert(move _8, "index out of bounds: the length is {} but the index is {}", move _7, _4) -> bb2;
    }

    bb2: {
        _1[_3][_4] = Add(_1[_3][_4], const 1_usize);
        _9 = const _;
        _10 = Lt(_4, _9);
        assert(move _10, "index out of bounds: the length is {} but the index is {}", move _9, _4) -> bb3;
    }

    bb3: {
        _11 = const _;
        _12 = Lt(_3, _11);
        assert(move _12, "index out of bounds: the length is {} but the index is {}", move _11, _3) -> bb4;
    }

    bb4: {
        _1[_4][_3] = Add(_1[_4][_3], const 1_usize);
        _0 = _1;
        return;
    }
}

// MIR FOR CTFE
fn build(_1: [[usize; N_ISLANDS]; N_ISLANDS], _2: (usize, usize)) -> [[usize; N_ISLANDS]; N_ISLANDS] {
    debug matrix => _1;
    let mut _0: [[usize; N_ISLANDS]; N_ISLANDS];
    let _3: usize;
    let _4: usize;
    let _5: usize;
    let mut _6: usize;
    let mut _7: bool;
    let _8: usize;
    let mut _9: usize;
    let mut _10: bool;
    let _11: usize;
    let mut _12: usize;
    let mut _13: bool;
    let _14: usize;
    let mut _15: usize;
    let mut _16: bool;
    scope 1 {
        debug to => _3;
        debug from => _4;
    }

    bb0: {
        StorageLive(_3);
        _3 = (_2.0: usize);
        StorageLive(_4);
        _4 = (_2.1: usize);
        StorageLive(_5);
        _5 = _3;
        _6 = Len(_1);
        _7 = Lt(_5, _6);
        assert(move _7, "index out of bounds: the length is {} but the index is {}", move _6, _5) -> bb1;
    }

    bb1: {
        StorageLive(_8);
        _8 = _4;
        _9 = Len(_1[_5]);
        _10 = Lt(_8, _9);
        assert(move _10, "index out of bounds: the length is {} but the index is {}", move _9, _8) -> bb2;
    }

    bb2: {
        _1[_5][_8] = Add(_1[_5][_8], const 1_usize);
        StorageDead(_8);
        StorageDead(_5);
        StorageLive(_11);
        _11 = _4;
        _12 = Len(_1);
        _13 = Lt(_11, _12);
        assert(move _13, "index out of bounds: the length is {} but the index is {}", move _12, _11) -> bb3;
    }

    bb3: {
        StorageLive(_14);
        _14 = _3;
        _15 = Len(_1[_11]);
        _16 = Lt(_14, _15);
        assert(move _16, "index out of bounds: the length is {} but the index is {}", move _15, _14) -> bb4;
    }

    bb4: {
        _1[_11][_14] = Add(_1[_11][_14], const 1_usize);
        StorageDead(_14);
        StorageDead(_11);
        _0 = _1;
        StorageDead(_4);
        StorageDead(_3);
        return;
    }
}

fn walk(_1: [[usize; N_ISLANDS]; N_ISLANDS], _2: usize, _3: usize) -> [[usize; N_ISLANDS]; N_ISLANDS] {
    debug matrix => _1;
    debug from => _2;
    debug to => _3;
    let mut _0: [[usize; N_ISLANDS]; N_ISLANDS];
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: bool;
    let mut _8: usize;
    let mut _9: bool;
    let mut _10: usize;
    let mut _11: bool;

    bb0: {
        _4 = const _;
        _5 = Lt(_2, _4);
        assert(move _5, "index out of bounds: the length is {} but the index is {}", move _4, _2) -> bb1;
    }

    bb1: {
        _6 = const _;
        _7 = Lt(_3, _6);
        assert(move _7, "index out of bounds: the length is {} but the index is {}", move _6, _3) -> bb2;
    }

    bb2: {
        _1[_2][_3] = Sub(_1[_2][_3], const 1_usize);
        _8 = const _;
        _9 = Lt(_3, _8);
        assert(move _9, "index out of bounds: the length is {} but the index is {}", move _8, _3) -> bb3;
    }

    bb3: {
        _10 = const _;
        _11 = Lt(_2, _10);
        assert(move _11, "index out of bounds: the length is {} but the index is {}", move _10, _2) -> bb4;
    }

    bb4: {
        _1[_3][_2] = Sub(_1[_3][_2], const 1_usize);
        _0 = _1;
        return;
    }
}

// MIR FOR CTFE
fn walk(_1: [[usize; N_ISLANDS]; N_ISLANDS], _2: usize, _3: usize) -> [[usize; N_ISLANDS]; N_ISLANDS] {
    debug matrix => _1;
    debug from => _2;
    debug to => _3;
    let mut _0: [[usize; N_ISLANDS]; N_ISLANDS];
    let _4: usize;
    let mut _5: usize;
    let mut _6: bool;
    let _7: usize;
    let mut _8: usize;
    let mut _9: bool;
    let _10: usize;
    let mut _11: usize;
    let mut _12: bool;
    let _13: usize;
    let mut _14: usize;
    let mut _15: bool;

    bb0: {
        StorageLive(_4);
        _4 = _2;
        _5 = Len(_1);
        _6 = Lt(_4, _5);
        assert(move _6, "index out of bounds: the length is {} but the index is {}", move _5, _4) -> bb1;
    }

    bb1: {
        StorageLive(_7);
        _7 = _3;
        _8 = Len(_1[_4]);
        _9 = Lt(_7, _8);
        assert(move _9, "index out of bounds: the length is {} but the index is {}", move _8, _7) -> bb2;
    }

    bb2: {
        _1[_4][_7] = Sub(_1[_4][_7], const 1_usize);
        StorageDead(_7);
        StorageDead(_4);
        StorageLive(_10);
        _10 = _3;
        _11 = Len(_1);
        _12 = Lt(_10, _11);
        assert(move _12, "index out of bounds: the length is {} but the index is {}", move _11, _10) -> bb3;
    }

    bb3: {
        StorageLive(_13);
        _13 = _2;
        _14 = Len(_1[_10]);
        _15 = Lt(_13, _14);
        assert(move _15, "index out of bounds: the length is {} but the index is {}", move _14, _13) -> bb4;
    }

    bb4: {
        _1[_10][_13] = Sub(_1[_10][_13], const 1_usize);
        StorageDead(_13);
        StorageDead(_10);
        _0 = _1;
        return;
    }
}

fn to_matrix(_1: [(usize, usize); N_BRIDGES]) -> [[usize; N_ISLANDS]; N_ISLANDS] {
    debug bridges => _1;
    let mut _0: [[usize; N_ISLANDS]; N_ISLANDS];
    let _2: [[usize; N_ISLANDS]; N_ISLANDS];
    let mut _4: (usize, usize);
    let _5: usize;
    let mut _6: usize;
    let mut _7: bool;
    let mut _9: [[usize; N_ISLANDS]; N_ISLANDS];
    let mut _10: (usize, usize);
    let _11: usize;
    let mut _12: usize;
    let mut _13: bool;
    let mut _15: [[usize; N_ISLANDS]; N_ISLANDS];
    let mut _16: (usize, usize);
    let _17: usize;
    let mut _18: usize;
    let mut _19: bool;
    let mut _21: [[usize; N_ISLANDS]; N_ISLANDS];
    let mut _22: (usize, usize);
    let _23: usize;
    let mut _24: usize;
    let mut _25: bool;
    let mut _27: [[usize; N_ISLANDS]; N_ISLANDS];
    let mut _28: (usize, usize);
    let _29: usize;
    let mut _30: usize;
    let mut _31: bool;
    let mut _33: [[usize; N_ISLANDS]; N_ISLANDS];
    let mut _34: (usize, usize);
    let _35: usize;
    let mut _36: usize;
    let mut _37: bool;
    let mut _39: [[usize; N_ISLANDS]; N_ISLANDS];
    let mut _40: (usize, usize);
    let _41: usize;
    let mut _42: usize;
    let mut _43: bool;
    scope 1 {
        debug matrix => _2;
        let _3: [[usize; N_ISLANDS]; N_ISLANDS];
        scope 2 {
            debug matrix => _3;
            let _8: [[usize; N_ISLANDS]; N_ISLANDS];
            scope 3 {
                debug matrix => _8;
                let _14: [[usize; N_ISLANDS]; N_ISLANDS];
                scope 4 {
                    debug matrix => _14;
                    let _20: [[usize; N_ISLANDS]; N_ISLANDS];
                    scope 5 {
                        debug matrix => _20;
                        let _26: [[usize; N_ISLANDS]; N_ISLANDS];
                        scope 6 {
                            debug matrix => _26;
                            let _32: [[usize; N_ISLANDS]; N_ISLANDS];
                            scope 7 {
                                debug matrix => _32;
                                let _38: [[usize; N_ISLANDS]; N_ISLANDS];
                                scope 8 {
                                    debug matrix => _38;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = const _;
        _5 = const 0_usize;
        _6 = const _;
        _7 = Lt(_5, _6);
        assert(move _7, "index out of bounds: the length is {} but the index is {}", move _6, _5) -> bb1;
    }

    bb1: {
        _4 = _1[_5];
        _3 = build(_2, move _4) -> bb2;
    }

    bb2: {
        _9 = _3;
        _11 = const 1_usize;
        _12 = const _;
        _13 = Lt(_11, _12);
        assert(move _13, "index out of bounds: the length is {} but the index is {}", move _12, _11) -> bb3;
    }

    bb3: {
        _10 = _1[_11];
        _8 = build(move _9, move _10) -> bb4;
    }

    bb4: {
        _15 = _8;
        _17 = const 2_usize;
        _18 = const _;
        _19 = Lt(_17, _18);
        assert(move _19, "index out of bounds: the length is {} but the index is {}", move _18, _17) -> bb5;
    }

    bb5: {
        _16 = _1[_17];
        _14 = build(move _15, move _16) -> bb6;
    }

    bb6: {
        _21 = _14;
        _23 = const 3_usize;
        _24 = const _;
        _25 = Lt(_23, _24);
        assert(move _25, "index out of bounds: the length is {} but the index is {}", move _24, _23) -> bb7;
    }

    bb7: {
        _22 = _1[_23];
        _20 = build(move _21, move _22) -> bb8;
    }

    bb8: {
        _27 = _20;
        _29 = const 4_usize;
        _30 = const _;
        _31 = Lt(_29, _30);
        assert(move _31, "index out of bounds: the length is {} but the index is {}", move _30, _29) -> bb9;
    }

    bb9: {
        _28 = _1[_29];
        _26 = build(move _27, move _28) -> bb10;
    }

    bb10: {
        _33 = _26;
        _35 = const 5_usize;
        _36 = const _;
        _37 = Lt(_35, _36);
        assert(move _37, "index out of bounds: the length is {} but the index is {}", move _36, _35) -> bb11;
    }

    bb11: {
        _34 = _1[_35];
        _32 = build(move _33, move _34) -> bb12;
    }

    bb12: {
        _39 = _32;
        _41 = const 6_usize;
        _42 = const _;
        _43 = Lt(_41, _42);
        assert(move _43, "index out of bounds: the length is {} but the index is {}", move _42, _41) -> bb13;
    }

    bb13: {
        _40 = _1[_41];
        _38 = build(move _39, move _40) -> bb14;
    }

    bb14: {
        _0 = _38;
        return;
    }
}

// MIR FOR CTFE
fn to_matrix(_1: [(usize, usize); N_BRIDGES]) -> [[usize; N_ISLANDS]; N_ISLANDS] {
    debug bridges => _1;
    let mut _0: [[usize; N_ISLANDS]; N_ISLANDS];
    let _2: [[usize; N_ISLANDS]; N_ISLANDS];
    let mut _4: [[usize; N_ISLANDS]; N_ISLANDS];
    let mut _5: (usize, usize);
    let _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _10: [[usize; N_ISLANDS]; N_ISLANDS];
    let mut _11: (usize, usize);
    let _12: usize;
    let mut _13: usize;
    let mut _14: bool;
    let mut _16: [[usize; N_ISLANDS]; N_ISLANDS];
    let mut _17: (usize, usize);
    let _18: usize;
    let mut _19: usize;
    let mut _20: bool;
    let mut _22: [[usize; N_ISLANDS]; N_ISLANDS];
    let mut _23: (usize, usize);
    let _24: usize;
    let mut _25: usize;
    let mut _26: bool;
    let mut _28: [[usize; N_ISLANDS]; N_ISLANDS];
    let mut _29: (usize, usize);
    let _30: usize;
    let mut _31: usize;
    let mut _32: bool;
    let mut _34: [[usize; N_ISLANDS]; N_ISLANDS];
    let mut _35: (usize, usize);
    let _36: usize;
    let mut _37: usize;
    let mut _38: bool;
    let mut _40: [[usize; N_ISLANDS]; N_ISLANDS];
    let mut _41: (usize, usize);
    let _42: usize;
    let mut _43: usize;
    let mut _44: bool;
    scope 1 {
        debug matrix => _2;
        let _3: [[usize; N_ISLANDS]; N_ISLANDS];
        scope 2 {
            debug matrix => _3;
            let _9: [[usize; N_ISLANDS]; N_ISLANDS];
            scope 3 {
                debug matrix => _9;
                let _15: [[usize; N_ISLANDS]; N_ISLANDS];
                scope 4 {
                    debug matrix => _15;
                    let _21: [[usize; N_ISLANDS]; N_ISLANDS];
                    scope 5 {
                        debug matrix => _21;
                        let _27: [[usize; N_ISLANDS]; N_ISLANDS];
                        scope 6 {
                            debug matrix => _27;
                            let _33: [[usize; N_ISLANDS]; N_ISLANDS];
                            scope 7 {
                                debug matrix => _33;
                                let _39: [[usize; N_ISLANDS]; N_ISLANDS];
                                scope 8 {
                                    debug matrix => _39;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_2);
        _2 = const _;
        StorageLive(_3);
        StorageLive(_4);
        _4 = _2;
        StorageLive(_5);
        StorageLive(_6);
        _6 = const 0_usize;
        _7 = Len(_1);
        _8 = Lt(_6, _7);
        assert(move _8, "index out of bounds: the length is {} but the index is {}", move _7, _6) -> bb1;
    }

    bb1: {
        _5 = _1[_6];
        ConstEvalCounter;
        _3 = build(move _4, move _5) -> bb2;
    }

    bb2: {
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_6);
        StorageLive(_9);
        StorageLive(_10);
        _10 = _3;
        StorageLive(_11);
        StorageLive(_12);
        _12 = const 1_usize;
        _13 = Len(_1);
        _14 = Lt(_12, _13);
        assert(move _14, "index out of bounds: the length is {} but the index is {}", move _13, _12) -> bb3;
    }

    bb3: {
        _11 = _1[_12];
        ConstEvalCounter;
        _9 = build(move _10, move _11) -> bb4;
    }

    bb4: {
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_12);
        StorageLive(_15);
        StorageLive(_16);
        _16 = _9;
        StorageLive(_17);
        StorageLive(_18);
        _18 = const 2_usize;
        _19 = Len(_1);
        _20 = Lt(_18, _19);
        assert(move _20, "index out of bounds: the length is {} but the index is {}", move _19, _18) -> bb5;
    }

    bb5: {
        _17 = _1[_18];
        ConstEvalCounter;
        _15 = build(move _16, move _17) -> bb6;
    }

    bb6: {
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_18);
        StorageLive(_21);
        StorageLive(_22);
        _22 = _15;
        StorageLive(_23);
        StorageLive(_24);
        _24 = const 3_usize;
        _25 = Len(_1);
        _26 = Lt(_24, _25);
        assert(move _26, "index out of bounds: the length is {} but the index is {}", move _25, _24) -> bb7;
    }

    bb7: {
        _23 = _1[_24];
        ConstEvalCounter;
        _21 = build(move _22, move _23) -> bb8;
    }

    bb8: {
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_24);
        StorageLive(_27);
        StorageLive(_28);
        _28 = _21;
        StorageLive(_29);
        StorageLive(_30);
        _30 = const 4_usize;
        _31 = Len(_1);
        _32 = Lt(_30, _31);
        assert(move _32, "index out of bounds: the length is {} but the index is {}", move _31, _30) -> bb9;
    }

    bb9: {
        _29 = _1[_30];
        ConstEvalCounter;
        _27 = build(move _28, move _29) -> bb10;
    }

    bb10: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_30);
        StorageLive(_33);
        StorageLive(_34);
        _34 = _27;
        StorageLive(_35);
        StorageLive(_36);
        _36 = const 5_usize;
        _37 = Len(_1);
        _38 = Lt(_36, _37);
        assert(move _38, "index out of bounds: the length is {} but the index is {}", move _37, _36) -> bb11;
    }

    bb11: {
        _35 = _1[_36];
        ConstEvalCounter;
        _33 = build(move _34, move _35) -> bb12;
    }

    bb12: {
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_36);
        StorageLive(_39);
        StorageLive(_40);
        _40 = _33;
        StorageLive(_41);
        StorageLive(_42);
        _42 = const 6_usize;
        _43 = Len(_1);
        _44 = Lt(_42, _43);
        assert(move _44, "index out of bounds: the length is {} but the index is {}", move _43, _42) -> bb13;
    }

    bb13: {
        _41 = _1[_42];
        ConstEvalCounter;
        _39 = build(move _40, move _41) -> bb14;
    }

    bb14: {
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_42);
        _0 = _39;
        StorageDead(_39);
        StorageDead(_33);
        StorageDead(_27);
        StorageDead(_21);
        StorageDead(_15);
        StorageDead(_9);
        StorageDead(_3);
        StorageDead(_2);
        return;
    }
}

to_matrix::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const BRIDGE_MATRIX: [[usize; N_ISLANDS]; N_ISLANDS] = {
    let mut _0: [[usize; N_ISLANDS]; N_ISLANDS];

    bb0: {
        ConstEvalCounter;
        _0 = to_matrix(const _) -> bb1;
    }

    bb1: {
        return;
    }
}

BRIDGE_MATRIX::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

BRIDGE_MATRIX::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

lib::<impl at ui/const-generics/issue-97007.rs:47:5: 47:32>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

lib::<impl at ui/const-generics/issue-97007.rs:47:5: 47:32>::{constant#1}: [[usize; N_ISLANDS]; N_ISLANDS] = {
    let mut _0: [[usize; N_ISLANDS]; N_ISLANDS];

    bb0: {
        _0 = const _;
        return;
    }
}

fn lib::<impl at ui/const-generics/issue-97007.rs:47:5: 47:32>::new() -> Walk<0, BRIDGE_MATRIX> {
    let mut _0: lib::Walk<0, BRIDGE_MATRIX>;

    bb0: {
        return;
    }
}

// MIR FOR CTFE
fn lib::<impl at ui/const-generics/issue-97007.rs:47:5: 47:32>::new() -> Walk<0, BRIDGE_MATRIX> {
    let mut _0: lib::Walk<0, BRIDGE_MATRIX>;
    let mut _1: ();

    bb0: {
        StorageLive(_1);
        _1 = ();
        _0 = Walk::<0, BRIDGE_MATRIX> { _p: move _1 };
        StorageDead(_1);
        return;
    }
}

lib::<impl at ui/const-generics/issue-97007.rs:53:5: 53:81>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const CURRENT;
        return;
    }
}

lib::<impl at ui/const-generics/issue-97007.rs:53:5: 53:81>::{constant#1}: [[usize; N_ISLANDS]; N_ISLANDS] = {
    let mut _0: [[usize; N_ISLANDS]; N_ISLANDS];

    bb0: {
        _0 = const REMAINING;
        return;
    }
}

fn lib::<impl at ui/const-generics/issue-97007.rs:53:5: 53:81>::proceed_to(_1: Walk<CURRENT, REMAINING>) -> Walk<NEXT, { walk(REMAINING, CURRENT, NEXT) }> {
    debug self => const ZeroSized: Walk<CURRENT, REMAINING>;
    let mut _0: lib::Walk<NEXT, { walk(REMAINING, CURRENT, NEXT) }>;

    bb0: {
        return;
    }
}

lib::<impl at ui/const-generics/issue-97007.rs:53:5: 53:81>::proceed_to::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const NEXT;
        return;
    }
}

lib::<impl at ui/const-generics/issue-97007.rs:53:5: 53:81>::proceed_to::{constant#0}: [[usize; N_ISLANDS]; N_ISLANDS] = {
    let mut _0: [[usize; N_ISLANDS]; N_ISLANDS];

    bb0: {
        ConstEvalCounter;
        _0 = walk(const REMAINING, const CURRENT, const NEXT) -> bb1;
    }

    bb1: {
        return;
    }
}

lib::<impl at ui/const-generics/issue-97007.rs:65:5: 65:59>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const CURRENT;
        return;
    }
}

lib::<impl at ui/const-generics/issue-97007.rs:65:5: 65:59>::{constant#1}: [[usize; N_ISLANDS]; N_ISLANDS] = {
    let mut _0: [[usize; N_ISLANDS]; N_ISLANDS];

    bb0: {
        _0 = const _;
        return;
    }
}

fn lib::<impl at ui/const-generics/issue-97007.rs:65:5: 65:59>::collect_prize(_1: Walk<CURRENT, EMPTY_MATRIX>) -> Trophy {
    debug self => const ZeroSized: Walk<CURRENT, EMPTY_MATRIX>;
    let mut _0: lib::Trophy;

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: lib::Walk<1, { walk(REMAINING, CURRENT, NEXT) }>;
    let mut _2: lib::Walk<0, BRIDGE_MATRIX>;
    scope 1 {
    }

    bb0: {
        _2 = Walk::<0, BRIDGE_MATRIX>::new() -> bb1;
    }

    bb1: {
        _1 = Walk::<0, BRIDGE_MATRIX>::proceed_to::<1>(const Walk::<0, BRIDGE_MATRIX> {{ _p: () }}) -> bb2;
    }

    bb2: {
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}
