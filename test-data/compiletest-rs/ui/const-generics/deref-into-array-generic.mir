// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Test::0::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

<impl at ui/const-generics/deref-into-array-generic.rs:5:1: 5:63>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn <impl at ui/const-generics/deref-into-array-generic.rs:5:1: 5:63>::default() -> Test<T, N> {
    let mut _0: Test<T, N>;
    let mut _1: [T; N];
    let mut _2: T;

    bb0: {
        _2 = <T as Default>::default() -> bb1;
    }

    bb1: {
        _1 = [move _2; N];
        _0 = Test::<T, N>(move _1);
        return;
    }
}

<impl at ui/const-generics/deref-into-array-generic.rs:5:1: 5:63>::default::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

<impl at ui/const-generics/deref-into-array-generic.rs:11:1: 11:55>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

<impl at ui/const-generics/deref-into-array-generic.rs:11:1: 11:55>::Target::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn <impl at ui/const-generics/deref-into-array-generic.rs:11:1: 11:55>::deref(_1: &Test<T, N>) -> &[T; N] {
    debug self => _1;
    let mut _0: &[T; N];

    bb0: {
        _0 = &((*_1).0: [T; N]);
        return;
    }
}

<impl at ui/const-generics/deref-into-array-generic.rs:11:1: 11:55>::deref::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn test() -> Test<u64, 16> {
    let mut _0: Test<u64, 16>;
    let _1: Test<u64, 16>;
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 2];
    let _6: [&str; 2];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &usize;
    let _12: usize;
    let mut _13: &[u64];
    let mut _14: &[u64; 16];
    let _15: &[u64; 16];
    let mut _16: &Test<u64, 16>;
    scope 1 {
        debug test => _1;
    }

    bb0: {
        _1 = <Test<u64, 16> as Default>::default() -> bb1;
    }

    bb1: {
        _6 = [const "", const "\n"];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _16 = &_1;
        _15 = <Test<u64, 16> as Deref>::deref(move _16) -> bb2;
    }

    bb2: {
        _14 = _15;
        _13 = move _14 as &[u64] (Pointer(Unsize));
        _12 = Len((*_13));
        _11 = &_12;
        _10 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_11) -> bb3;
    }

    bb3: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb4;
    }

    bb4: {
        _2 = _print(move _3) -> bb5;
    }

    bb5: {
        _0 = move _1;
        return;
    }
}

test::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 16_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Test<u64, 16>;

    bb0: {
        _1 = test() -> bb1;
    }

    bb1: {
        return;
    }
}

fn Test(_1: [T; N]) -> Test<T, N> {
    let mut _0: Test<T, N>;

    bb0: {
        _0 = Test::<T, N>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Test(_1: [T; N]) -> Test<T, N> {
    let mut _0: Test<T, N>;

    bb0: {
        _0 = Test::<T, N>(move _1);
        return;
    }
}
