// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
<impl at ui/const-generics/uninferred-consts-during-codegen-2.rs:7:1: 7:65>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn <impl at ui/const-generics/uninferred-consts-during-codegen-2.rs:7:1: 7:65>::fmt(_1: &Array<[T; N]>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: &mut std::fmt::DebugList<'_, '_>;
    let mut _4: &mut std::fmt::DebugList<'_, '_>;
    let mut _5: &mut std::fmt::DebugList<'_, '_>;
    let mut _6: std::fmt::DebugList<'_, '_>;
    let mut _7: std::slice::Iter<'_, T>;
    let _8: &[T];
    let _9: &[T; N];

    bb0: {
        _6 = Formatter::<'_>::debug_list(_2) -> bb1;
    }

    bb1: {
        _5 = &mut _6;
        _9 = &((*_1).0: [T; N]);
        _8 = _9 as &[T] (Pointer(Unsize));
        _7 = core::slice::<impl [T]>::iter(_8) -> bb2;
    }

    bb2: {
        _4 = DebugList::<'_, '_>::entries::<&T, std::slice::Iter<'_, T>>(move _5, move _7) -> bb3;
    }

    bb3: {
        _3 = _4;
        _0 = DebugList::<'_, '_>::finish(move _3) -> bb4;
    }

    bb4: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&std::string::String, &&str);
    let mut _2: &std::string::String;
    let _3: std::string::String;
    let _4: std::string::String;
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let _7: &[&str; 1];
    let _8: [&str; 1];
    let mut _9: &[core::fmt::rt::Argument<'_>];
    let _10: &[core::fmt::rt::Argument<'_>; 1];
    let _11: [core::fmt::rt::Argument<'_>; 1];
    let mut _12: core::fmt::rt::Argument<'_>;
    let _13: &Array<[i32; 3]>;
    let _14: Array<[i32; 3]>;
    let mut _15: [i32; 3];
    let mut _16: &&str;
    let _17: &str;
    let _18: &std::string::String;
    let _19: &&str;
    let mut _20: bool;
    let mut _21: bool;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug res => _4;
    }
    scope 2 {
        debug left_val => _18;
        debug right_val => _19;
        let _22: core::panicking::AssertKind;
        scope 3 {
            debug kind => _22;
        }
    }

    bb0: {
        _8 = [const ""];
        _7 = &_8;
        _6 = _7 as &[&str] (Pointer(Unsize));
        _15 = [const 1_i32, const 2_i32, const 3_i32];
        _14 = Array::<[i32; 3]>(move _15);
        _13 = &_14;
        _12 = core::fmt::rt::Argument::<'_>::new_debug::<Array<[i32; 3]>>(_13) -> bb1;
    }

    bb1: {
        _11 = [move _12];
        _10 = &_11;
        _9 = _10 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _5 = Arguments::<'_>::new_v1(move _6, move _9) -> bb2;
    }

    bb2: {
        _4 = format(move _5) -> bb3;
    }

    bb3: {
        _3 = move _4;
        _2 = &_3;
        _17 = const "[1, 2, 3]";
        _16 = &_17;
        _1 = (move _2, move _16);
        _18 = (_1.0: &std::string::String);
        _19 = (_1.1: &&str);
        _21 = <String as PartialEq<&str>>::eq(_18, _19) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<String, &str>(move _22, _18, _19, move _24) -> bb8;
    }

    bb6: {
        drop(_3) -> bb7;
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_3) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        resume;
    }
}

fn Array(_1: T) -> Array<T> {
    let mut _0: Array<T>;

    bb0: {
        _0 = Array::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Array(_1: T) -> Array<T> {
    let mut _0: Array<T>;

    bb0: {
        _0 = Array::<T>(move _1);
        return;
    }
}
