// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Trait::{constant#0}: u8 = {
    let mut _0: u8;

    bb0: {
        _0 = const 12_u8;
        return;
    }
}

fn Trait::uwu(_1: &Self) -> u8 {
    debug self => _1;
    let mut _0: u8;

    bb0: {
        _0 = const N;
        return;
    }
}

<impl at ui/const-generics/defaults/trait_objects.rs:10:1: 10:23>::{constant#0}: u8 = {
    let mut _0: u8;

    bb0: {
        _0 = const 12_u8;
        return;
    }
}

fn <impl at ui/const-generics/defaults/trait_objects.rs:10:1: 10:23>::uwu(_1: &u64) -> u8 {
    debug self => _1;
    let mut _0: u8;
    let mut _2: u64;

    bb0: {
        _2 = (*_1);
        _0 = move _2 as u8 (IntToInt);
        return;
    }
}

fn foo(_1: &dyn Trait) -> u8 {
    debug arg => _1;
    let mut _0: u8;

    bb0: {
        _0 = <dyn Trait as Trait>::uwu(_1) -> bb1;
    }

    bb1: {
        return;
    }
}

Traitor::{constant#0}: u8 = {
    let mut _0: u8;

    bb0: {
        _0 = const 1_u8;
        return;
    }
}

Traitor::{constant#1}: u8 = {
    let mut _0: u8;

    bb0: {
        _0 = const N;
        return;
    }
}

fn Traitor::owo(_1: &Self) -> u8 {
    debug self => _1;
    let mut _0: u8;

    bb0: {
        _0 = const M;
        return;
    }
}

<impl at ui/const-generics/defaults/trait_objects.rs:26:1: 26:25>::{constant#0}: u8 = {
    let mut _0: u8;

    bb0: {
        _0 = const 2_u8;
        return;
    }
}

fn <impl at ui/const-generics/defaults/trait_objects.rs:27:1: 27:20>::owo(_1: &u8) -> u8 {
    debug self => _1;
    let mut _0: u8;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn bar(_1: &dyn Traitor<N>) -> u8 {
    debug arg => _1;
    let mut _0: u8;

    bb0: {
        _0 = <dyn Traitor<N> as Traitor<N>>::owo(_1) -> bb1;
    }

    bb1: {
        return;
    }
}

bar::{constant#0}: u8 = {
    let mut _0: u8;

    bb0: {
        _0 = const N;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&u8, &u8);
    let mut _2: &u8;
    let _3: u8;
    let mut _4: &dyn Trait;
    let _5: &u32;
    let _6: u32;
    let mut _7: &u8;
    let _8: u8;
    let _9: &u8;
    let _10: &u8;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: u8;
    let mut _14: u8;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: (&u8, &u8);
    let mut _19: &u8;
    let _20: u8;
    let mut _21: &dyn Trait;
    let _22: &u64;
    let _23: u64;
    let mut _24: &u8;
    let _25: u8;
    let _26: &u8;
    let _27: &u8;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: u8;
    let mut _31: u8;
    let _33: !;
    let mut _34: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _35: (&u8, &u8);
    let mut _36: &u8;
    let _37: u8;
    let mut _38: &dyn Traitor<2>;
    let _39: &bool;
    let _40: bool;
    let mut _41: &u8;
    let _42: u8;
    let _43: &u8;
    let _44: &u8;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: u8;
    let mut _48: u8;
    let _50: !;
    let mut _51: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _52: (&u8, &u8);
    let mut _53: &u8;
    let _54: u8;
    let mut _55: &dyn Traitor;
    let _56: &u8;
    let _57: u8;
    let mut _58: &u8;
    let _59: u8;
    let _60: &u8;
    let _61: &u8;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: u8;
    let mut _65: u8;
    let _67: !;
    let mut _68: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _9;
        debug right_val => _10;
        let _15: core::panicking::AssertKind;
        scope 2 {
            debug kind => _15;
        }
    }
    scope 3 {
        debug left_val => _26;
        debug right_val => _27;
        let _32: core::panicking::AssertKind;
        scope 4 {
            debug kind => _32;
        }
    }
    scope 5 {
        debug left_val => _43;
        debug right_val => _44;
        let _49: core::panicking::AssertKind;
        scope 6 {
            debug kind => _49;
        }
    }
    scope 7 {
        debug left_val => _60;
        debug right_val => _61;
        let _66: core::panicking::AssertKind;
        scope 8 {
            debug kind => _66;
        }
    }

    bb0: {
        _6 = const 10_u32;
        _5 = &_6;
        _4 = _5 as &dyn Trait (Pointer(Unsize));
        _3 = foo(move _4) -> bb1;
    }

    bb1: {
        _2 = &_3;
        _8 = const 12_u8;
        _7 = &_8;
        _1 = (move _2, move _7);
        _9 = (_1.0: &u8);
        _10 = (_1.1: &u8);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<u8, u8>(move _15, _9, _10, move _17);
    }

    bb3: {
        _23 = const 3_u64;
        _22 = &_23;
        _21 = _22 as &dyn Trait (Pointer(Unsize));
        _20 = foo(move _21) -> bb4;
    }

    bb4: {
        _19 = &_20;
        _25 = const 3_u8;
        _24 = &_25;
        _18 = (move _19, move _24);
        _26 = (_18.0: &u8);
        _27 = (_18.1: &u8);
        _30 = (*_26);
        _31 = (*_27);
        _29 = Eq(move _30, move _31);
        _28 = Not(move _29);
        switchInt(move _28) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _32 = core::panicking::AssertKind::Eq;
        _34 = Option::<Arguments<'_>>::None;
        _33 = core::panicking::assert_failed::<u8, u8>(move _32, _26, _27, move _34);
    }

    bb6: {
        _40 = const true;
        _39 = &_40;
        _38 = _39 as &dyn Traitor<2> (Pointer(Unsize));
        _37 = bar::<2>(move _38) -> bb7;
    }

    bb7: {
        _36 = &_37;
        _42 = const 2_u8;
        _41 = &_42;
        _35 = (move _36, move _41);
        _43 = (_35.0: &u8);
        _44 = (_35.1: &u8);
        _47 = (*_43);
        _48 = (*_44);
        _46 = Eq(move _47, move _48);
        _45 = Not(move _46);
        switchInt(move _45) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _49 = core::panicking::AssertKind::Eq;
        _51 = Option::<Arguments<'_>>::None;
        _50 = core::panicking::assert_failed::<u8, u8>(move _49, _43, _44, move _51);
    }

    bb9: {
        _57 = const 1_u8;
        _56 = &_57;
        _55 = _56 as &dyn Traitor (Pointer(Unsize));
        _54 = bar::<1>(move _55) -> bb10;
    }

    bb10: {
        _53 = &_54;
        _59 = const 1_u8;
        _58 = &_59;
        _52 = (move _53, move _58);
        _60 = (_52.0: &u8);
        _61 = (_52.1: &u8);
        _64 = (*_60);
        _65 = (*_61);
        _63 = Eq(move _64, move _65);
        _62 = Not(move _63);
        switchInt(move _62) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _66 = core::panicking::AssertKind::Eq;
        _68 = Option::<Arguments<'_>>::None;
        _67 = core::panicking::assert_failed::<u8, u8>(move _66, _60, _61, move _68);
    }

    bb12: {
        return;
    }
}
