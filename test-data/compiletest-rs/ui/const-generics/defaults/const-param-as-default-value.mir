// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Foo::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

Foo::0::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

Foo::1::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const M;
        return;
    }
}

fn foo() -> Foo<N> {
    let mut _0: Foo<N>;
    let _1: [u8; N];
    scope 1 {
        debug x => _1;
    }

    bb0: {
        _1 = [const 0_u8; N];
        _0 = Foo::<N>(_1, _1);
        return;
    }
}

foo::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

foo::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn concrete_foo() -> Foo<13> {
    let mut _0: Foo<13>;
    let mut _1: [u8; 13];
    let mut _2: [u8; 13];

    bb0: {
        _1 = <[u8; 13] as Default>::default() -> bb1;
    }

    bb1: {
        _2 = <[u8; 13] as Default>::default() -> bb2;
    }

    bb2: {
        _0 = Foo::<13>(move _1, move _2);
        return;
    }
}

concrete_foo::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 13_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Foo<13>;
    let mut _2: (&[u8; 13], &[u8; 13]);
    let mut _3: &[u8; 13];
    let mut _4: &[u8; 13];
    let mut _7: bool;
    let mut _8: bool;
    let _10: !;
    let mut _11: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: (&[u8; 13], &[u8; 13]);
    let mut _14: &[u8; 13];
    let mut _15: &[u8; 13];
    let mut _18: bool;
    let mut _19: bool;
    let _21: !;
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug val => _1;
        let _5: &[u8; 13];
        let _6: &[u8; 13];
        let _12: Foo<13>;
        scope 2 {
            debug left_val => _5;
            debug right_val => _6;
            let _9: core::panicking::AssertKind;
            scope 3 {
                debug kind => _9;
            }
        }
        scope 4 {
            debug val => _12;
            let _16: &[u8; 13];
            let _17: &[u8; 13];
            scope 5 {
                debug left_val => _16;
                debug right_val => _17;
                let _20: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _20;
                }
            }
        }
    }

    bb0: {
        _1 = foo::<13>() -> bb1;
    }

    bb1: {
        _3 = &(_1.0: [u8; 13]);
        _4 = &(_1.1: [u8; 13]);
        _2 = (move _3, move _4);
        _5 = (_2.0: &[u8; 13]);
        _6 = (_2.1: &[u8; 13]);
        _8 = <[u8; 13] as PartialEq>::eq(_5, _6) -> bb2;
    }

    bb2: {
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _9 = core::panicking::AssertKind::Eq;
        _11 = Option::<Arguments<'_>>::None;
        _10 = core::panicking::assert_failed::<[u8; 13], [u8; 13]>(move _9, _5, _6, move _11);
    }

    bb4: {
        _12 = concrete_foo() -> bb5;
    }

    bb5: {
        _14 = &(_12.0: [u8; 13]);
        _15 = &(_12.1: [u8; 13]);
        _13 = (move _14, move _15);
        _16 = (_13.0: &[u8; 13]);
        _17 = (_13.1: &[u8; 13]);
        _19 = <[u8; 13] as PartialEq>::eq(_16, _17) -> bb6;
    }

    bb6: {
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _20 = core::panicking::AssertKind::Eq;
        _22 = Option::<Arguments<'_>>::None;
        _21 = core::panicking::assert_failed::<[u8; 13], [u8; 13]>(move _20, _16, _17, move _22);
    }

    bb8: {
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 13_usize;
        return;
    }
}

fn Foo(_1: [u8; N], _2: [u8; M]) -> Foo<N, M> {
    let mut _0: Foo<N, M>;

    bb0: {
        _0 = Foo::<N, M>(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: [u8; N], _2: [u8; M]) -> Foo<N, M> {
    let mut _0: Foo<N, M>;

    bb0: {
        _0 = Foo::<N, M>(move _1, move _2);
        return;
    }
}
