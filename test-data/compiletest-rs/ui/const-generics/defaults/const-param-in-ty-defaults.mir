// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Foo::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

<impl at ui/const-generics/defaults/const-param-in-ty-defaults.rs:4:1: 4:28>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn <impl at ui/const-generics/defaults/const-param-in-ty-defaults.rs:4:1: 4:28>::new() -> Foo<N> {
    let mut _0: Foo<N>;
    let mut _1: [u8; N];

    bb0: {
        _1 = [const 0_u8; N];
        _0 = Foo::<N>(move _1);
        return;
    }
}

<impl at ui/const-generics/defaults/const-param-in-ty-defaults.rs:4:1: 4:28>::new::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&[u8; 10], &[u8; 10]);
    let mut _2: &[u8; 10];
    let _3: Foo<10>;
    let mut _4: &[u8; 10];
    let _5: [u8; 10];
    let _6: &[u8; 10];
    let _7: &[u8; 10];
    let mut _8: bool;
    let mut _9: bool;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }

    bb0: {
        _3 = Foo::<10>::new() -> bb1;
    }

    bb1: {
        _2 = &(_3.0: [u8; 10]);
        _5 = [const 0_u8; 10];
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &[u8; 10]);
        _7 = (_1.1: &[u8; 10]);
        _9 = <[u8; 10] as PartialEq>::eq(_6, _7) -> bb2;
    }

    bb2: {
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<[u8; 10], [u8; 10]>(move _10, _6, _7, move _12);
    }

    bb4: {
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 10_usize;
        return;
    }
}

fn Foo(_1: T) -> Foo<N, T> {
    let mut _0: Foo<N, T>;

    bb0: {
        _0 = Foo::<N, T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: T) -> Foo<N, T> {
    let mut _0: Foo<N, T>;

    bb0: {
        _0 = Foo::<N, T>(move _1);
        return;
    }
}
