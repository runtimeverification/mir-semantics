// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
ConstDefault::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

<impl at ui/const-generics/defaults/const-default.rs:4:1: 4:37>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn <impl at ui/const-generics/defaults/const-default.rs:4:1: 4:37>::foo(_1: ConstDefault<N>) -> usize {
    debug self => const ZeroSized: ConstDefault<N>;
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn <impl at ui/const-generics/defaults/const-default.rs:10:1: 10:18>::new() -> ConstDefault {
    let mut _0: ConstDefault;

    bb0: {
        return;
    }
}

fn <impl at ui/const-generics/defaults/const-default.rs:10:1: 10:18>::bar(_1: ConstDefault) -> () {
    debug self => const ConstDefault;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ConstDefault;
    let mut _2: (&usize, &usize);
    let mut _3: &usize;
    let _4: usize;
    let mut _5: &usize;
    let _6: usize;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: usize;
    let mut _12: usize;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let _16: ();
    scope 1 {
        debug s => const ConstDefault;
        let _7: &usize;
        let _8: &usize;
        scope 2 {
            debug left_val => _7;
            debug right_val => _8;
            let _13: core::panicking::AssertKind;
            scope 3 {
                debug kind => _13;
            }
        }
        scope 4 {
            debug w => const ConstDefault;
        }
    }

    bb0: {
        _1 = ConstDefault::new() -> bb1;
    }

    bb1: {
        _4 = ConstDefault::foo(const ConstDefault) -> bb2;
    }

    bb2: {
        _3 = &_4;
        _6 = const 3_usize;
        _5 = &_6;
        _2 = (move _3, move _5);
        _7 = (_2.0: &usize);
        _8 = (_2.1: &usize);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<usize, usize>(move _13, _7, _8, move _15);
    }

    bb4: {
        _16 = ConstDefault::bar(const ConstDefault) -> bb5;
    }

    bb5: {
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}
