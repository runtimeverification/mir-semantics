// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const ONE: i32 = {
    let mut _0: i32;

    bb0: {
        _0 = const 1_i32;
        return;
    }
}

const TWO: i32 = {
    let mut _0: i32;

    bb0: {
        _0 = const 2_i32;
        return;
    }
}

<impl at ui/const-generics/overlapping_impls.rs:13:1: 13:31>::{constant#0}: i32 = {
    let mut _0: i32;

    bb0: {
        _0 = const I;
        return;
    }
}

<impl at ui/const-generics/overlapping_impls.rs:13:1: 13:31>::{constant#1}: i32 = {
    let mut _0: i32;

    bb0: {
        _0 = const _;
        return;
    }
}

fn <impl at ui/const-generics/overlapping_impls.rs:13:1: 13:31>::foo() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

<impl at ui/const-generics/overlapping_impls.rs:17:1: 17:31>::{constant#0}: i32 = {
    let mut _0: i32;

    bb0: {
        _0 = const I;
        return;
    }
}

<impl at ui/const-generics/overlapping_impls.rs:17:1: 17:31>::{constant#1}: i32 = {
    let mut _0: i32;

    bb0: {
        _0 = const _;
        return;
    }
}

fn <impl at ui/const-generics/overlapping_impls.rs:17:1: 17:31>::foo() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/const-generics/overlapping_impls.rs:26:10: 26:19>::eq(_1: &Protocol, _2: &Protocol) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _0 = Eq(_3, _4);
        return;
    }
}

fn <impl at ui/const-generics/overlapping_impls.rs:26:21: 26:23>::assert_receiver_is_total_eq(_1: &Protocol) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

<impl at ui/const-generics/overlapping_impls.rs:34:1: 34:48>::{constant#0}: Protocol = {
    let mut _0: Protocol;

    bb0: {
        _0 = Protocol::Variant1;
        return;
    }
}

<impl at ui/const-generics/overlapping_impls.rs:35:1: 35:48>::{constant#0}: Protocol = {
    let mut _0: Protocol;

    bb0: {
        _0 = Protocol::Variant2;
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
