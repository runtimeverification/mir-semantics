// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn takes_closure_of_array_3(_1: F) -> () {
    debug f => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: &F;
    let mut _4: ([i32; 3],);
    let mut _5: [i32; 3];

    bb0: {
        _3 = &_1;
        _5 = [const 1_i32, const 2_i32, const 3_i32];
        _4 = (move _5,);
        _2 = <F as Fn<([i32; 3],)>>::call(move _3, move _4) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_1) -> bb2;
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

takes_closure_of_array_3::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

fn takes_closure_of_array_3_apit(_1: impl Fn([i32; 3])) -> () {
    debug f => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: &impl Fn([i32; 3]);
    let mut _4: ([i32; 3],);
    let mut _5: [i32; 3];

    bb0: {
        _3 = &_1;
        _5 = [const 1_i32, const 2_i32, const 3_i32];
        _4 = (move _5,);
        _2 = <impl Fn([i32; 3]) as Fn<([i32; 3],)>>::call(move _3, move _4) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_1) -> bb2;
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

takes_closure_of_array_3_apit::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

fn returns_closure_of_array_3() -> impl Fn([i32; 3]) {
    let mut _0: impl Fn([i32; 3]);

    bb0: {
        return;
    }
}

returns_closure_of_array_3::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

fn returns_closure_of_array_3::{closure#0}(_1: &[closure@ui/const-generics/integer-literal-generic-arg-in-where-clause.rs:12:5: 12:8], _2: [i32; 3]) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: impl Fn([i32; 3]);
    let _3: ();
    let mut _4: impl Fn([i32; 3]);

    bb0: {
        _2 = returns_closure_of_array_3() -> bb1;
    }

    bb1: {
        _1 = takes_closure_of_array_3::<impl Fn([i32; 3])>(const ZeroSized: impl Fn([i32; 3])) -> bb2;
    }

    bb2: {
        _4 = returns_closure_of_array_3() -> bb3;
    }

    bb3: {
        _3 = takes_closure_of_array_3_apit::<impl Fn([i32; 3])>(const ZeroSized: impl Fn([i32; 3])) -> bb4;
    }

    bb4: {
        return;
    }
}
