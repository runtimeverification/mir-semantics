// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f(_1: T) -> () {
    let mut _0: ();

    bb0: {
        drop(_1) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/trailing-comma.rs:10:1: 10:9>::f(_1: isize) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/trailing-comma.rs:10:1: 10:9>::g(_1: Bar, _2: isize) -> () {
    debug self => const Bar;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/trailing-comma.rs:10:1: 10:9>::h(_1: Bar) -> () {
    debug self => const Bar;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _3: ();
    let _4: ();
    let _5: ();
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                    let _2: Foo<isize>;
                    scope 5 {
                        debug x => _2;
                        let _6: Baz;
                        scope 6 {
                            debug x => _6;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = f::<isize>(const 0_isize) -> bb1;
    }

    bb1: {
        _2 = Foo::<isize>(const 1_isize);
        _3 = Bar::f(const 0_isize) -> bb2;
    }

    bb2: {
        _4 = Bar::g(const Bar, const 0_isize) -> bb3;
    }

    bb3: {
        _5 = Bar::h(const Bar) -> bb4;
    }

    bb4: {
        _6 = Baz::Qux(const 1_isize);
        return;
    }
}

fn Foo(_1: T) -> Foo<T> {
    let mut _0: Foo<T>;

    bb0: {
        _0 = Foo::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: T) -> Foo<T> {
    let mut _0: Foo<T>;

    bb0: {
        _0 = Foo::<T>(move _1);
        return;
    }
}

fn Baz::Qux(_1: isize) -> Baz {
    let mut _0: Baz;

    bb0: {
        _0 = Baz::Qux(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Baz::Qux(_1: isize) -> Baz {
    let mut _0: Baz;

    bb0: {
        _0 = Baz::Qux(move _1);
        return;
    }
}
