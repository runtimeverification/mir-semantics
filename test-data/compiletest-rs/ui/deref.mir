// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::boxed::Box<isize>;
    let mut _3: *const isize;
    scope 1 {
        debug x => _1;
        let _2: isize;
        let mut _4: *const ();
        let mut _5: usize;
        let mut _6: usize;
        let mut _7: usize;
        let mut _8: usize;
        let mut _9: bool;
        scope 2 {
            debug _y => _2;
        }
    }

    bb0: {
        _1 = Box::<isize>::new(const 10_isize) -> bb1;
    }

    bb1: {
        _3 = (((_1.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize);
        _4 = _3 as *const () (PtrToPtr);
        _5 = _4 as usize (Transmute);
        _6 = AlignOf(isize);
        _7 = Sub(_6, const 1_usize);
        _8 = BitAnd(_5, _7);
        _9 = Eq(_8, const 0_usize);
        assert(_9, "misaligned pointer dereference: address must be a multiple of {} but is {}", _6, _5) -> [success: bb3, unwind unreachable];
    }

    bb2: {
        return;
    }

    bb3: {
        _2 = (*_3);
        drop(_1) -> bb2;
    }
}
