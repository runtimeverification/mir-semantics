// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/borrow-by-val-method-receiver.rs:7:1: 7:29>::foo(_1: &[isize]) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<isize>;
    let mut _2: std::boxed::Box<[isize]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[isize; 5]>;
    let _7: ();
    let mut _8: &[isize];
    let _9: &[isize];
    let mut _10: &std::vec::Vec<isize>;
    let mut _11: *const [isize; 5];
    let mut _12: *const ();
    let mut _13: usize;
    let mut _14: usize;
    let mut _15: usize;
    let mut _16: usize;
    let mut _17: bool;
    scope 1 {
        debug items => _1;
    }
    scope 2 {
    }

    bb0: {
        _3 = SizeOf([isize; 5]);
        _4 = AlignOf([isize; 5]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> bb1;
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [isize; 5]);
        _11 = (((_6.0: std::ptr::Unique<[isize; 5]>).0: std::ptr::NonNull<[isize; 5]>).0: *const [isize; 5]);
        _12 = _11 as *const () (PtrToPtr);
        _13 = _12 as usize (Transmute);
        _14 = AlignOf(isize);
        _15 = Sub(_14, const 1_usize);
        _16 = BitAnd(_13, _15);
        _17 = Eq(_16, const 0_usize);
        assert(_17, "misaligned pointer dereference: address must be a multiple of {} but is {}", _14, _13) -> [success: bb8, unwind unreachable];
    }

    bb2: {
        _10 = &_1;
        _9 = <Vec<isize> as Deref>::deref(move _10) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _8 = _9;
        _7 = <&[isize] as Foo>::foo(move _8) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_1) -> bb5;
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_1) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }

    bb8: {
        (*_11) = [const 3_isize, const 5_isize, const 1_isize, const 2_isize, const 4_isize];
        _2 = move _6 as std::boxed::Box<[isize]> (Pointer(Unsize));
        _1 = slice::<impl [isize]>::into_vec::<std::alloc::Global>(move _2) -> bb2;
    }
}
