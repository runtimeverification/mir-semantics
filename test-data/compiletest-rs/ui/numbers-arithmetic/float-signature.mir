// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: f64;
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let _6: &[&str; 2];
    let _7: [&str; 2];
    let mut _8: &[core::fmt::rt::Argument<'_>];
    let _9: &[core::fmt::rt::Argument<'_>; 1];
    let _10: [core::fmt::rt::Argument<'_>; 1];
    let mut _11: core::fmt::rt::Argument<'_>;
    let _12: &f64;
    scope 1 {
        debug n => _1;
        let _2: f64;
        scope 2 {
            debug m => _2;
        }
    }

    bb0: {
        _1 = const 0.10000000000000001f64;
        _2 = foo(_1) -> bb1;
    }

    bb1: {
        _7 = [const "", const "\n"];
        _6 = &_7;
        _5 = _6 as &[&str] (Pointer(Unsize));
        _12 = &_2;
        _11 = core::fmt::rt::Argument::<'_>::new_display::<f64>(_12) -> bb2;
    }

    bb2: {
        _10 = [move _11];
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> bb3;
    }

    bb3: {
        _3 = _print(move _4) -> bb4;
    }

    bb4: {
        return;
    }
}

fn foo(_1: f64) -> f64 {
    debug n => _1;
    let mut _0: f64;

    bb0: {
        _0 = Add(_1, const 0.12345f64);
        return;
    }
}
