// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const i8::BITS: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 8_usize;
        return;
    }
}

const i8::MAX: i8 = {
    let mut _0: i8;

    bb0: {
        _0 = const _;
        return;
    }
}

const i8::MIN: i8 = {
    let mut _0: i8;

    bb0: {
        _0 = const _;
        return;
    }
}

const i16::BITS: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 16_usize;
        return;
    }
}

const i16::MAX: i16 = {
    let mut _0: i16;

    bb0: {
        _0 = const _;
        return;
    }
}

const i16::MIN: i16 = {
    let mut _0: i16;

    bb0: {
        _0 = const _;
        return;
    }
}

const i32::BITS: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 32_usize;
        return;
    }
}

const i32::MAX: i32 = {
    let mut _0: i32;

    bb0: {
        _0 = const _;
        return;
    }
}

const i32::MIN: i32 = {
    let mut _0: i32;

    bb0: {
        _0 = const _;
        return;
    }
}

const i64::BITS: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 64_usize;
        return;
    }
}

const i64::MAX: i64 = {
    let mut _0: i64;

    bb0: {
        _0 = const _;
        return;
    }
}

const i64::MIN: i64 = {
    let mut _0: i64;

    bb0: {
        _0 = const _;
        return;
    }
}

const u8::BITS: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 8_usize;
        return;
    }
}

const u8::MAX: u8 = {
    let mut _0: u8;

    bb0: {
        _0 = const _;
        return;
    }
}

const u8::MIN: u8 = {
    let mut _0: u8;

    bb0: {
        _0 = const _;
        return;
    }
}

const u16::BITS: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 16_usize;
        return;
    }
}

const u16::MAX: u16 = {
    let mut _0: u16;

    bb0: {
        _0 = const _;
        return;
    }
}

const u16::MIN: u16 = {
    let mut _0: u16;

    bb0: {
        _0 = const _;
        return;
    }
}

const u32::BITS: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 32_usize;
        return;
    }
}

const u32::MAX: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const _;
        return;
    }
}

const u32::MIN: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const _;
        return;
    }
}

const u64::BITS: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 64_usize;
        return;
    }
}

const u64::MAX: u64 = {
    let mut _0: u64;

    bb0: {
        _0 = const _;
        return;
    }
}

const u64::MIN: u64 = {
    let mut _0: u64;

    bb0: {
        _0 = const _;
        return;
    }
}

const isize::BITS: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 64_usize;
        return;
    }
}

const isize::MAX: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const _;
        return;
    }
}

const isize::MIN: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const _;
        return;
    }
}

const usize::BITS: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 64_usize;
        return;
    }
}

const usize::MAX: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const usize::MIN: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let _3: ();
    let _4: ();

    bb0: {
        _1 = test_ops() -> bb1;
    }

    bb1: {
        _2 = test_op_assigns() -> bb2;
    }

    bb2: {
        _3 = test_sh_ops() -> bb3;
    }

    bb3: {
        _4 = test_sh_op_assigns() -> bb4;
    }

    bb4: {
        return;
    }
}

fn test_ops() -> () {
    let mut _0: ();
    let mut _1: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _2: &std::num::Wrapping<i8>;
    let _3: std::num::Wrapping<i8>;
    let mut _4: std::num::Wrapping<i8>;
    let mut _5: std::num::Wrapping<i8>;
    let mut _6: std::num::Wrapping<i8>;
    let mut _7: &std::num::Wrapping<i8>;
    let _8: std::num::Wrapping<i8>;
    let _9: &std::num::Wrapping<i8>;
    let _10: &std::num::Wrapping<i8>;
    let mut _11: bool;
    let mut _12: bool;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _17: &std::num::Wrapping<i16>;
    let _18: std::num::Wrapping<i16>;
    let mut _19: std::num::Wrapping<i16>;
    let mut _20: std::num::Wrapping<i16>;
    let mut _21: std::num::Wrapping<i16>;
    let mut _22: &std::num::Wrapping<i16>;
    let _23: std::num::Wrapping<i16>;
    let _24: &std::num::Wrapping<i16>;
    let _25: &std::num::Wrapping<i16>;
    let mut _26: bool;
    let mut _27: bool;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _32: &std::num::Wrapping<i32>;
    let _33: std::num::Wrapping<i32>;
    let mut _34: std::num::Wrapping<i32>;
    let mut _35: std::num::Wrapping<i32>;
    let mut _36: std::num::Wrapping<i32>;
    let mut _37: &std::num::Wrapping<i32>;
    let _38: std::num::Wrapping<i32>;
    let _39: &std::num::Wrapping<i32>;
    let _40: &std::num::Wrapping<i32>;
    let mut _41: bool;
    let mut _42: bool;
    let _44: !;
    let mut _45: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _46: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _47: &std::num::Wrapping<i64>;
    let _48: std::num::Wrapping<i64>;
    let mut _49: std::num::Wrapping<i64>;
    let mut _50: std::num::Wrapping<i64>;
    let mut _51: std::num::Wrapping<i64>;
    let mut _52: &std::num::Wrapping<i64>;
    let _53: std::num::Wrapping<i64>;
    let _54: &std::num::Wrapping<i64>;
    let _55: &std::num::Wrapping<i64>;
    let mut _56: bool;
    let mut _57: bool;
    let _59: !;
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _61: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _62: &std::num::Wrapping<isize>;
    let _63: std::num::Wrapping<isize>;
    let mut _64: std::num::Wrapping<isize>;
    let mut _65: std::num::Wrapping<isize>;
    let mut _66: std::num::Wrapping<isize>;
    let mut _67: &std::num::Wrapping<isize>;
    let _68: std::num::Wrapping<isize>;
    let _69: &std::num::Wrapping<isize>;
    let _70: &std::num::Wrapping<isize>;
    let mut _71: bool;
    let mut _72: bool;
    let _74: !;
    let mut _75: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _76: (&std::num::Wrapping<u8>, &std::num::Wrapping<u8>);
    let mut _77: &std::num::Wrapping<u8>;
    let _78: std::num::Wrapping<u8>;
    let mut _79: std::num::Wrapping<u8>;
    let mut _80: std::num::Wrapping<u8>;
    let mut _81: std::num::Wrapping<u8>;
    let mut _82: &std::num::Wrapping<u8>;
    let _83: std::num::Wrapping<u8>;
    let _84: &std::num::Wrapping<u8>;
    let _85: &std::num::Wrapping<u8>;
    let mut _86: bool;
    let mut _87: bool;
    let _89: !;
    let mut _90: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _91: (&std::num::Wrapping<u16>, &std::num::Wrapping<u16>);
    let mut _92: &std::num::Wrapping<u16>;
    let _93: std::num::Wrapping<u16>;
    let mut _94: std::num::Wrapping<u16>;
    let mut _95: std::num::Wrapping<u16>;
    let mut _96: std::num::Wrapping<u16>;
    let mut _97: &std::num::Wrapping<u16>;
    let _98: std::num::Wrapping<u16>;
    let _99: &std::num::Wrapping<u16>;
    let _100: &std::num::Wrapping<u16>;
    let mut _101: bool;
    let mut _102: bool;
    let _104: !;
    let mut _105: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _106: (&std::num::Wrapping<u32>, &std::num::Wrapping<u32>);
    let mut _107: &std::num::Wrapping<u32>;
    let _108: std::num::Wrapping<u32>;
    let mut _109: std::num::Wrapping<u32>;
    let mut _110: std::num::Wrapping<u32>;
    let mut _111: std::num::Wrapping<u32>;
    let mut _112: &std::num::Wrapping<u32>;
    let _113: std::num::Wrapping<u32>;
    let _114: &std::num::Wrapping<u32>;
    let _115: &std::num::Wrapping<u32>;
    let mut _116: bool;
    let mut _117: bool;
    let _119: !;
    let mut _120: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _121: (&std::num::Wrapping<u64>, &std::num::Wrapping<u64>);
    let mut _122: &std::num::Wrapping<u64>;
    let _123: std::num::Wrapping<u64>;
    let mut _124: std::num::Wrapping<u64>;
    let mut _125: std::num::Wrapping<u64>;
    let mut _126: std::num::Wrapping<u64>;
    let mut _127: &std::num::Wrapping<u64>;
    let _128: std::num::Wrapping<u64>;
    let _129: &std::num::Wrapping<u64>;
    let _130: &std::num::Wrapping<u64>;
    let mut _131: bool;
    let mut _132: bool;
    let _134: !;
    let mut _135: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _136: (&std::num::Wrapping<usize>, &std::num::Wrapping<usize>);
    let mut _137: &std::num::Wrapping<usize>;
    let _138: std::num::Wrapping<usize>;
    let mut _139: std::num::Wrapping<usize>;
    let mut _140: std::num::Wrapping<usize>;
    let mut _141: std::num::Wrapping<usize>;
    let mut _142: &std::num::Wrapping<usize>;
    let _143: std::num::Wrapping<usize>;
    let _144: &std::num::Wrapping<usize>;
    let _145: &std::num::Wrapping<usize>;
    let mut _146: bool;
    let mut _147: bool;
    let _149: !;
    let mut _150: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _151: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _152: &std::num::Wrapping<i8>;
    let _153: std::num::Wrapping<i8>;
    let mut _154: std::num::Wrapping<i8>;
    let mut _155: std::num::Wrapping<i8>;
    let mut _156: std::num::Wrapping<i8>;
    let mut _157: &std::num::Wrapping<i8>;
    let _158: std::num::Wrapping<i8>;
    let _159: &std::num::Wrapping<i8>;
    let _160: &std::num::Wrapping<i8>;
    let mut _161: bool;
    let mut _162: bool;
    let _164: !;
    let mut _165: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _166: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _167: &std::num::Wrapping<i16>;
    let _168: std::num::Wrapping<i16>;
    let mut _169: std::num::Wrapping<i16>;
    let mut _170: std::num::Wrapping<i16>;
    let mut _171: std::num::Wrapping<i16>;
    let mut _172: &std::num::Wrapping<i16>;
    let _173: std::num::Wrapping<i16>;
    let _174: &std::num::Wrapping<i16>;
    let _175: &std::num::Wrapping<i16>;
    let mut _176: bool;
    let mut _177: bool;
    let _179: !;
    let mut _180: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _181: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _182: &std::num::Wrapping<i32>;
    let _183: std::num::Wrapping<i32>;
    let mut _184: std::num::Wrapping<i32>;
    let mut _185: std::num::Wrapping<i32>;
    let mut _186: std::num::Wrapping<i32>;
    let mut _187: &std::num::Wrapping<i32>;
    let _188: std::num::Wrapping<i32>;
    let _189: &std::num::Wrapping<i32>;
    let _190: &std::num::Wrapping<i32>;
    let mut _191: bool;
    let mut _192: bool;
    let _194: !;
    let mut _195: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _196: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _197: &std::num::Wrapping<i64>;
    let _198: std::num::Wrapping<i64>;
    let mut _199: std::num::Wrapping<i64>;
    let mut _200: std::num::Wrapping<i64>;
    let mut _201: std::num::Wrapping<i64>;
    let mut _202: &std::num::Wrapping<i64>;
    let _203: std::num::Wrapping<i64>;
    let _204: &std::num::Wrapping<i64>;
    let _205: &std::num::Wrapping<i64>;
    let mut _206: bool;
    let mut _207: bool;
    let _209: !;
    let mut _210: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _211: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _212: &std::num::Wrapping<isize>;
    let _213: std::num::Wrapping<isize>;
    let mut _214: std::num::Wrapping<isize>;
    let mut _215: std::num::Wrapping<isize>;
    let mut _216: std::num::Wrapping<isize>;
    let mut _217: &std::num::Wrapping<isize>;
    let _218: std::num::Wrapping<isize>;
    let _219: &std::num::Wrapping<isize>;
    let _220: &std::num::Wrapping<isize>;
    let mut _221: bool;
    let mut _222: bool;
    let _224: !;
    let mut _225: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _226: (&std::num::Wrapping<u8>, &std::num::Wrapping<u8>);
    let mut _227: &std::num::Wrapping<u8>;
    let _228: std::num::Wrapping<u8>;
    let mut _229: std::num::Wrapping<u8>;
    let mut _230: std::num::Wrapping<u8>;
    let mut _231: std::num::Wrapping<u8>;
    let mut _232: &std::num::Wrapping<u8>;
    let _233: std::num::Wrapping<u8>;
    let _234: &std::num::Wrapping<u8>;
    let _235: &std::num::Wrapping<u8>;
    let mut _236: bool;
    let mut _237: bool;
    let _239: !;
    let mut _240: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _241: (&std::num::Wrapping<u16>, &std::num::Wrapping<u16>);
    let mut _242: &std::num::Wrapping<u16>;
    let _243: std::num::Wrapping<u16>;
    let mut _244: std::num::Wrapping<u16>;
    let mut _245: std::num::Wrapping<u16>;
    let mut _246: std::num::Wrapping<u16>;
    let mut _247: &std::num::Wrapping<u16>;
    let _248: std::num::Wrapping<u16>;
    let _249: &std::num::Wrapping<u16>;
    let _250: &std::num::Wrapping<u16>;
    let mut _251: bool;
    let mut _252: bool;
    let _254: !;
    let mut _255: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _256: (&std::num::Wrapping<u32>, &std::num::Wrapping<u32>);
    let mut _257: &std::num::Wrapping<u32>;
    let _258: std::num::Wrapping<u32>;
    let mut _259: std::num::Wrapping<u32>;
    let mut _260: std::num::Wrapping<u32>;
    let mut _261: std::num::Wrapping<u32>;
    let mut _262: &std::num::Wrapping<u32>;
    let _263: std::num::Wrapping<u32>;
    let _264: &std::num::Wrapping<u32>;
    let _265: &std::num::Wrapping<u32>;
    let mut _266: bool;
    let mut _267: bool;
    let _269: !;
    let mut _270: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _271: (&std::num::Wrapping<u64>, &std::num::Wrapping<u64>);
    let mut _272: &std::num::Wrapping<u64>;
    let _273: std::num::Wrapping<u64>;
    let mut _274: std::num::Wrapping<u64>;
    let mut _275: std::num::Wrapping<u64>;
    let mut _276: std::num::Wrapping<u64>;
    let mut _277: &std::num::Wrapping<u64>;
    let _278: std::num::Wrapping<u64>;
    let _279: &std::num::Wrapping<u64>;
    let _280: &std::num::Wrapping<u64>;
    let mut _281: bool;
    let mut _282: bool;
    let _284: !;
    let mut _285: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _286: (&std::num::Wrapping<usize>, &std::num::Wrapping<usize>);
    let mut _287: &std::num::Wrapping<usize>;
    let _288: std::num::Wrapping<usize>;
    let mut _289: std::num::Wrapping<usize>;
    let mut _290: std::num::Wrapping<usize>;
    let mut _291: std::num::Wrapping<usize>;
    let mut _292: &std::num::Wrapping<usize>;
    let _293: std::num::Wrapping<usize>;
    let _294: &std::num::Wrapping<usize>;
    let _295: &std::num::Wrapping<usize>;
    let mut _296: bool;
    let mut _297: bool;
    let _299: !;
    let mut _300: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _301: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _302: &std::num::Wrapping<i8>;
    let _303: std::num::Wrapping<i8>;
    let mut _304: std::num::Wrapping<i8>;
    let mut _305: std::num::Wrapping<i8>;
    let mut _306: std::num::Wrapping<i8>;
    let mut _307: &std::num::Wrapping<i8>;
    let _308: std::num::Wrapping<i8>;
    let _309: &std::num::Wrapping<i8>;
    let _310: &std::num::Wrapping<i8>;
    let mut _311: bool;
    let mut _312: bool;
    let _314: !;
    let mut _315: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _316: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _317: &std::num::Wrapping<i16>;
    let _318: std::num::Wrapping<i16>;
    let mut _319: std::num::Wrapping<i16>;
    let mut _320: std::num::Wrapping<i16>;
    let mut _321: std::num::Wrapping<i16>;
    let mut _322: &std::num::Wrapping<i16>;
    let _323: std::num::Wrapping<i16>;
    let _324: &std::num::Wrapping<i16>;
    let _325: &std::num::Wrapping<i16>;
    let mut _326: bool;
    let mut _327: bool;
    let _329: !;
    let mut _330: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _331: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _332: &std::num::Wrapping<i32>;
    let _333: std::num::Wrapping<i32>;
    let mut _334: std::num::Wrapping<i32>;
    let mut _335: std::num::Wrapping<i32>;
    let mut _336: std::num::Wrapping<i32>;
    let mut _337: &std::num::Wrapping<i32>;
    let _338: std::num::Wrapping<i32>;
    let _339: &std::num::Wrapping<i32>;
    let _340: &std::num::Wrapping<i32>;
    let mut _341: bool;
    let mut _342: bool;
    let _344: !;
    let mut _345: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _346: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _347: &std::num::Wrapping<i64>;
    let _348: std::num::Wrapping<i64>;
    let mut _349: std::num::Wrapping<i64>;
    let mut _350: std::num::Wrapping<i64>;
    let mut _351: std::num::Wrapping<i64>;
    let mut _352: &std::num::Wrapping<i64>;
    let _353: std::num::Wrapping<i64>;
    let _354: &std::num::Wrapping<i64>;
    let _355: &std::num::Wrapping<i64>;
    let mut _356: bool;
    let mut _357: bool;
    let _359: !;
    let mut _360: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _361: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _362: &std::num::Wrapping<isize>;
    let _363: std::num::Wrapping<isize>;
    let mut _364: std::num::Wrapping<isize>;
    let mut _365: std::num::Wrapping<isize>;
    let mut _366: std::num::Wrapping<isize>;
    let mut _367: &std::num::Wrapping<isize>;
    let _368: std::num::Wrapping<isize>;
    let _369: &std::num::Wrapping<isize>;
    let _370: &std::num::Wrapping<isize>;
    let mut _371: bool;
    let mut _372: bool;
    let _374: !;
    let mut _375: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _376: (&std::num::Wrapping<u8>, &std::num::Wrapping<u8>);
    let mut _377: &std::num::Wrapping<u8>;
    let _378: std::num::Wrapping<u8>;
    let mut _379: std::num::Wrapping<u8>;
    let mut _380: std::num::Wrapping<u8>;
    let mut _381: std::num::Wrapping<u8>;
    let mut _382: &std::num::Wrapping<u8>;
    let _383: std::num::Wrapping<u8>;
    let mut _384: u8;
    let _385: &std::num::Wrapping<u8>;
    let _386: &std::num::Wrapping<u8>;
    let mut _387: bool;
    let mut _388: bool;
    let _390: !;
    let mut _391: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _392: (&std::num::Wrapping<u16>, &std::num::Wrapping<u16>);
    let mut _393: &std::num::Wrapping<u16>;
    let _394: std::num::Wrapping<u16>;
    let mut _395: std::num::Wrapping<u16>;
    let mut _396: std::num::Wrapping<u16>;
    let mut _397: std::num::Wrapping<u16>;
    let mut _398: &std::num::Wrapping<u16>;
    let _399: std::num::Wrapping<u16>;
    let mut _400: u16;
    let _401: &std::num::Wrapping<u16>;
    let _402: &std::num::Wrapping<u16>;
    let mut _403: bool;
    let mut _404: bool;
    let _406: !;
    let mut _407: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _408: (&std::num::Wrapping<u32>, &std::num::Wrapping<u32>);
    let mut _409: &std::num::Wrapping<u32>;
    let _410: std::num::Wrapping<u32>;
    let mut _411: std::num::Wrapping<u32>;
    let mut _412: std::num::Wrapping<u32>;
    let mut _413: std::num::Wrapping<u32>;
    let mut _414: &std::num::Wrapping<u32>;
    let _415: std::num::Wrapping<u32>;
    let mut _416: u32;
    let _417: &std::num::Wrapping<u32>;
    let _418: &std::num::Wrapping<u32>;
    let mut _419: bool;
    let mut _420: bool;
    let _422: !;
    let mut _423: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _424: (&std::num::Wrapping<u64>, &std::num::Wrapping<u64>);
    let mut _425: &std::num::Wrapping<u64>;
    let _426: std::num::Wrapping<u64>;
    let mut _427: std::num::Wrapping<u64>;
    let mut _428: std::num::Wrapping<u64>;
    let mut _429: std::num::Wrapping<u64>;
    let mut _430: &std::num::Wrapping<u64>;
    let _431: std::num::Wrapping<u64>;
    let mut _432: u64;
    let _433: &std::num::Wrapping<u64>;
    let _434: &std::num::Wrapping<u64>;
    let mut _435: bool;
    let mut _436: bool;
    let _438: !;
    let mut _439: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _440: (&std::num::Wrapping<usize>, &std::num::Wrapping<usize>);
    let mut _441: &std::num::Wrapping<usize>;
    let _442: std::num::Wrapping<usize>;
    let mut _443: std::num::Wrapping<usize>;
    let mut _444: std::num::Wrapping<usize>;
    let mut _445: std::num::Wrapping<usize>;
    let mut _446: &std::num::Wrapping<usize>;
    let _447: std::num::Wrapping<usize>;
    let mut _448: usize;
    let _449: &std::num::Wrapping<usize>;
    let _450: &std::num::Wrapping<usize>;
    let mut _451: bool;
    let mut _452: bool;
    let _454: !;
    let mut _455: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _456: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _457: &std::num::Wrapping<i8>;
    let _458: std::num::Wrapping<i8>;
    let mut _459: std::num::Wrapping<i8>;
    let mut _460: std::num::Wrapping<i8>;
    let mut _461: std::num::Wrapping<i8>;
    let mut _462: &std::num::Wrapping<i8>;
    let _463: std::num::Wrapping<i8>;
    let _464: &std::num::Wrapping<i8>;
    let _465: &std::num::Wrapping<i8>;
    let mut _466: bool;
    let mut _467: bool;
    let _469: !;
    let mut _470: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _471: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _472: &std::num::Wrapping<i16>;
    let _473: std::num::Wrapping<i16>;
    let mut _474: std::num::Wrapping<i16>;
    let mut _475: std::num::Wrapping<i16>;
    let mut _476: std::num::Wrapping<i16>;
    let mut _477: &std::num::Wrapping<i16>;
    let _478: std::num::Wrapping<i16>;
    let _479: &std::num::Wrapping<i16>;
    let _480: &std::num::Wrapping<i16>;
    let mut _481: bool;
    let mut _482: bool;
    let _484: !;
    let mut _485: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _486: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _487: &std::num::Wrapping<i32>;
    let _488: std::num::Wrapping<i32>;
    let mut _489: std::num::Wrapping<i32>;
    let mut _490: std::num::Wrapping<i32>;
    let mut _491: std::num::Wrapping<i32>;
    let mut _492: &std::num::Wrapping<i32>;
    let _493: std::num::Wrapping<i32>;
    let _494: &std::num::Wrapping<i32>;
    let _495: &std::num::Wrapping<i32>;
    let mut _496: bool;
    let mut _497: bool;
    let _499: !;
    let mut _500: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _501: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _502: &std::num::Wrapping<i64>;
    let _503: std::num::Wrapping<i64>;
    let mut _504: std::num::Wrapping<i64>;
    let mut _505: std::num::Wrapping<i64>;
    let mut _506: std::num::Wrapping<i64>;
    let mut _507: &std::num::Wrapping<i64>;
    let _508: std::num::Wrapping<i64>;
    let _509: &std::num::Wrapping<i64>;
    let _510: &std::num::Wrapping<i64>;
    let mut _511: bool;
    let mut _512: bool;
    let _514: !;
    let mut _515: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _516: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _517: &std::num::Wrapping<isize>;
    let _518: std::num::Wrapping<isize>;
    let mut _519: std::num::Wrapping<isize>;
    let mut _520: std::num::Wrapping<isize>;
    let mut _521: std::num::Wrapping<isize>;
    let mut _522: &std::num::Wrapping<isize>;
    let _523: std::num::Wrapping<isize>;
    let _524: &std::num::Wrapping<isize>;
    let _525: &std::num::Wrapping<isize>;
    let mut _526: bool;
    let mut _527: bool;
    let _529: !;
    let mut _530: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _531: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _532: &std::num::Wrapping<i8>;
    let _533: std::num::Wrapping<i8>;
    let mut _534: std::num::Wrapping<i8>;
    let mut _535: std::num::Wrapping<i8>;
    let mut _536: std::num::Wrapping<i8>;
    let mut _537: &std::num::Wrapping<i8>;
    let _538: std::num::Wrapping<i8>;
    let _539: &std::num::Wrapping<i8>;
    let _540: &std::num::Wrapping<i8>;
    let mut _541: bool;
    let mut _542: bool;
    let _544: !;
    let mut _545: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _546: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _547: &std::num::Wrapping<i16>;
    let _548: std::num::Wrapping<i16>;
    let mut _549: std::num::Wrapping<i16>;
    let mut _550: std::num::Wrapping<i16>;
    let mut _551: std::num::Wrapping<i16>;
    let mut _552: &std::num::Wrapping<i16>;
    let _553: std::num::Wrapping<i16>;
    let _554: &std::num::Wrapping<i16>;
    let _555: &std::num::Wrapping<i16>;
    let mut _556: bool;
    let mut _557: bool;
    let _559: !;
    let mut _560: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _561: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _562: &std::num::Wrapping<i32>;
    let _563: std::num::Wrapping<i32>;
    let mut _564: std::num::Wrapping<i32>;
    let mut _565: std::num::Wrapping<i32>;
    let mut _566: std::num::Wrapping<i32>;
    let mut _567: &std::num::Wrapping<i32>;
    let _568: std::num::Wrapping<i32>;
    let _569: &std::num::Wrapping<i32>;
    let _570: &std::num::Wrapping<i32>;
    let mut _571: bool;
    let mut _572: bool;
    let _574: !;
    let mut _575: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _576: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _577: &std::num::Wrapping<i64>;
    let _578: std::num::Wrapping<i64>;
    let mut _579: std::num::Wrapping<i64>;
    let mut _580: std::num::Wrapping<i64>;
    let mut _581: std::num::Wrapping<i64>;
    let mut _582: &std::num::Wrapping<i64>;
    let _583: std::num::Wrapping<i64>;
    let _584: &std::num::Wrapping<i64>;
    let _585: &std::num::Wrapping<i64>;
    let mut _586: bool;
    let mut _587: bool;
    let _589: !;
    let mut _590: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _591: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _592: &std::num::Wrapping<isize>;
    let _593: std::num::Wrapping<isize>;
    let mut _594: std::num::Wrapping<isize>;
    let mut _595: std::num::Wrapping<isize>;
    let mut _596: std::num::Wrapping<isize>;
    let mut _597: &std::num::Wrapping<isize>;
    let _598: std::num::Wrapping<isize>;
    let _599: &std::num::Wrapping<isize>;
    let _600: &std::num::Wrapping<isize>;
    let mut _601: bool;
    let mut _602: bool;
    let _604: !;
    let mut _605: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _606: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _607: &std::num::Wrapping<i8>;
    let _608: std::num::Wrapping<i8>;
    let mut _609: std::num::Wrapping<i8>;
    let mut _610: std::num::Wrapping<i8>;
    let mut _611: std::num::Wrapping<i8>;
    let mut _612: &std::num::Wrapping<i8>;
    let _613: std::num::Wrapping<i8>;
    let _614: &std::num::Wrapping<i8>;
    let _615: &std::num::Wrapping<i8>;
    let mut _616: bool;
    let mut _617: bool;
    let _619: !;
    let mut _620: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _621: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _622: &std::num::Wrapping<i16>;
    let _623: std::num::Wrapping<i16>;
    let mut _624: std::num::Wrapping<i16>;
    let mut _625: std::num::Wrapping<i16>;
    let mut _626: std::num::Wrapping<i16>;
    let mut _627: &std::num::Wrapping<i16>;
    let _628: std::num::Wrapping<i16>;
    let _629: &std::num::Wrapping<i16>;
    let _630: &std::num::Wrapping<i16>;
    let mut _631: bool;
    let mut _632: bool;
    let _634: !;
    let mut _635: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _636: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _637: &std::num::Wrapping<i32>;
    let _638: std::num::Wrapping<i32>;
    let mut _639: std::num::Wrapping<i32>;
    let mut _640: std::num::Wrapping<i32>;
    let mut _641: std::num::Wrapping<i32>;
    let mut _642: &std::num::Wrapping<i32>;
    let _643: std::num::Wrapping<i32>;
    let _644: &std::num::Wrapping<i32>;
    let _645: &std::num::Wrapping<i32>;
    let mut _646: bool;
    let mut _647: bool;
    let _649: !;
    let mut _650: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _651: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _652: &std::num::Wrapping<i64>;
    let _653: std::num::Wrapping<i64>;
    let mut _654: std::num::Wrapping<i64>;
    let mut _655: std::num::Wrapping<i64>;
    let mut _656: std::num::Wrapping<i64>;
    let mut _657: &std::num::Wrapping<i64>;
    let _658: std::num::Wrapping<i64>;
    let _659: &std::num::Wrapping<i64>;
    let _660: &std::num::Wrapping<i64>;
    let mut _661: bool;
    let mut _662: bool;
    let _664: !;
    let mut _665: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _666: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _667: &std::num::Wrapping<isize>;
    let _668: std::num::Wrapping<isize>;
    let mut _669: std::num::Wrapping<isize>;
    let mut _670: std::num::Wrapping<isize>;
    let mut _671: std::num::Wrapping<isize>;
    let mut _672: &std::num::Wrapping<isize>;
    let _673: std::num::Wrapping<isize>;
    let _674: &std::num::Wrapping<isize>;
    let _675: &std::num::Wrapping<isize>;
    let mut _676: bool;
    let mut _677: bool;
    let _679: !;
    let mut _680: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _681: (&std::num::Wrapping<u8>, &std::num::Wrapping<u8>);
    let mut _682: &std::num::Wrapping<u8>;
    let _683: std::num::Wrapping<u8>;
    let mut _684: std::num::Wrapping<u8>;
    let mut _685: std::num::Wrapping<u8>;
    let mut _686: std::num::Wrapping<u8>;
    let mut _687: &std::num::Wrapping<u8>;
    let _688: std::num::Wrapping<u8>;
    let _689: &std::num::Wrapping<u8>;
    let _690: &std::num::Wrapping<u8>;
    let mut _691: bool;
    let mut _692: bool;
    let _694: !;
    let mut _695: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _696: (&std::num::Wrapping<u16>, &std::num::Wrapping<u16>);
    let mut _697: &std::num::Wrapping<u16>;
    let _698: std::num::Wrapping<u16>;
    let mut _699: std::num::Wrapping<u16>;
    let mut _700: std::num::Wrapping<u16>;
    let mut _701: std::num::Wrapping<u16>;
    let mut _702: &std::num::Wrapping<u16>;
    let _703: std::num::Wrapping<u16>;
    let _704: &std::num::Wrapping<u16>;
    let _705: &std::num::Wrapping<u16>;
    let mut _706: bool;
    let mut _707: bool;
    let _709: !;
    let mut _710: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _711: (&std::num::Wrapping<u32>, &std::num::Wrapping<u32>);
    let mut _712: &std::num::Wrapping<u32>;
    let _713: std::num::Wrapping<u32>;
    let mut _714: std::num::Wrapping<u32>;
    let mut _715: std::num::Wrapping<u32>;
    let mut _716: std::num::Wrapping<u32>;
    let mut _717: &std::num::Wrapping<u32>;
    let _718: std::num::Wrapping<u32>;
    let _719: &std::num::Wrapping<u32>;
    let _720: &std::num::Wrapping<u32>;
    let mut _721: bool;
    let mut _722: bool;
    let _724: !;
    let mut _725: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _726: (&std::num::Wrapping<u64>, &std::num::Wrapping<u64>);
    let mut _727: &std::num::Wrapping<u64>;
    let _728: std::num::Wrapping<u64>;
    let mut _729: std::num::Wrapping<u64>;
    let mut _730: std::num::Wrapping<u64>;
    let mut _731: std::num::Wrapping<u64>;
    let mut _732: &std::num::Wrapping<u64>;
    let _733: std::num::Wrapping<u64>;
    let _734: &std::num::Wrapping<u64>;
    let _735: &std::num::Wrapping<u64>;
    let mut _736: bool;
    let mut _737: bool;
    let _739: !;
    let mut _740: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _741: (&std::num::Wrapping<usize>, &std::num::Wrapping<usize>);
    let mut _742: &std::num::Wrapping<usize>;
    let _743: std::num::Wrapping<usize>;
    let mut _744: std::num::Wrapping<usize>;
    let mut _745: std::num::Wrapping<usize>;
    let mut _746: std::num::Wrapping<usize>;
    let mut _747: &std::num::Wrapping<usize>;
    let _748: std::num::Wrapping<usize>;
    let _749: &std::num::Wrapping<usize>;
    let _750: &std::num::Wrapping<usize>;
    let mut _751: bool;
    let mut _752: bool;
    let _754: !;
    let mut _755: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _756: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _757: &std::num::Wrapping<i8>;
    let _758: std::num::Wrapping<i8>;
    let mut _759: std::num::Wrapping<i8>;
    let mut _760: std::num::Wrapping<i8>;
    let mut _761: std::num::Wrapping<i8>;
    let mut _762: &std::num::Wrapping<i8>;
    let _763: std::num::Wrapping<i8>;
    let _764: &std::num::Wrapping<i8>;
    let _765: &std::num::Wrapping<i8>;
    let mut _766: bool;
    let mut _767: bool;
    let _769: !;
    let mut _770: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _771: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _772: &std::num::Wrapping<i16>;
    let _773: std::num::Wrapping<i16>;
    let mut _774: std::num::Wrapping<i16>;
    let mut _775: std::num::Wrapping<i16>;
    let mut _776: std::num::Wrapping<i16>;
    let mut _777: &std::num::Wrapping<i16>;
    let _778: std::num::Wrapping<i16>;
    let _779: &std::num::Wrapping<i16>;
    let _780: &std::num::Wrapping<i16>;
    let mut _781: bool;
    let mut _782: bool;
    let _784: !;
    let mut _785: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _786: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _787: &std::num::Wrapping<i32>;
    let _788: std::num::Wrapping<i32>;
    let mut _789: std::num::Wrapping<i32>;
    let mut _790: std::num::Wrapping<i32>;
    let mut _791: std::num::Wrapping<i32>;
    let mut _792: &std::num::Wrapping<i32>;
    let _793: std::num::Wrapping<i32>;
    let _794: &std::num::Wrapping<i32>;
    let _795: &std::num::Wrapping<i32>;
    let mut _796: bool;
    let mut _797: bool;
    let _799: !;
    let mut _800: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _801: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _802: &std::num::Wrapping<i64>;
    let _803: std::num::Wrapping<i64>;
    let mut _804: std::num::Wrapping<i64>;
    let mut _805: std::num::Wrapping<i64>;
    let mut _806: std::num::Wrapping<i64>;
    let mut _807: &std::num::Wrapping<i64>;
    let _808: std::num::Wrapping<i64>;
    let _809: &std::num::Wrapping<i64>;
    let _810: &std::num::Wrapping<i64>;
    let mut _811: bool;
    let mut _812: bool;
    let _814: !;
    let mut _815: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _816: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _817: &std::num::Wrapping<isize>;
    let _818: std::num::Wrapping<isize>;
    let mut _819: std::num::Wrapping<isize>;
    let mut _820: std::num::Wrapping<isize>;
    let mut _821: std::num::Wrapping<isize>;
    let mut _822: &std::num::Wrapping<isize>;
    let _823: std::num::Wrapping<isize>;
    let _824: &std::num::Wrapping<isize>;
    let _825: &std::num::Wrapping<isize>;
    let mut _826: bool;
    let mut _827: bool;
    let _829: !;
    let mut _830: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _831: (&std::num::Wrapping<u8>, &std::num::Wrapping<u8>);
    let mut _832: &std::num::Wrapping<u8>;
    let _833: std::num::Wrapping<u8>;
    let mut _834: std::num::Wrapping<u8>;
    let mut _835: std::num::Wrapping<u8>;
    let mut _836: std::num::Wrapping<u8>;
    let mut _837: &std::num::Wrapping<u8>;
    let _838: std::num::Wrapping<u8>;
    let _839: &std::num::Wrapping<u8>;
    let _840: &std::num::Wrapping<u8>;
    let mut _841: bool;
    let mut _842: bool;
    let _844: !;
    let mut _845: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _846: (&std::num::Wrapping<u16>, &std::num::Wrapping<u16>);
    let mut _847: &std::num::Wrapping<u16>;
    let _848: std::num::Wrapping<u16>;
    let mut _849: std::num::Wrapping<u16>;
    let mut _850: std::num::Wrapping<u16>;
    let mut _851: std::num::Wrapping<u16>;
    let mut _852: &std::num::Wrapping<u16>;
    let _853: std::num::Wrapping<u16>;
    let _854: &std::num::Wrapping<u16>;
    let _855: &std::num::Wrapping<u16>;
    let mut _856: bool;
    let mut _857: bool;
    let _859: !;
    let mut _860: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _861: (&std::num::Wrapping<u32>, &std::num::Wrapping<u32>);
    let mut _862: &std::num::Wrapping<u32>;
    let _863: std::num::Wrapping<u32>;
    let mut _864: std::num::Wrapping<u32>;
    let mut _865: std::num::Wrapping<u32>;
    let mut _866: std::num::Wrapping<u32>;
    let mut _867: &std::num::Wrapping<u32>;
    let _868: std::num::Wrapping<u32>;
    let _869: &std::num::Wrapping<u32>;
    let _870: &std::num::Wrapping<u32>;
    let mut _871: bool;
    let mut _872: bool;
    let _874: !;
    let mut _875: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _876: (&std::num::Wrapping<u64>, &std::num::Wrapping<u64>);
    let mut _877: &std::num::Wrapping<u64>;
    let _878: std::num::Wrapping<u64>;
    let mut _879: std::num::Wrapping<u64>;
    let mut _880: std::num::Wrapping<u64>;
    let mut _881: std::num::Wrapping<u64>;
    let mut _882: &std::num::Wrapping<u64>;
    let _883: std::num::Wrapping<u64>;
    let _884: &std::num::Wrapping<u64>;
    let _885: &std::num::Wrapping<u64>;
    let mut _886: bool;
    let mut _887: bool;
    let _889: !;
    let mut _890: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _891: (&std::num::Wrapping<usize>, &std::num::Wrapping<usize>);
    let mut _892: &std::num::Wrapping<usize>;
    let _893: std::num::Wrapping<usize>;
    let mut _894: std::num::Wrapping<usize>;
    let mut _895: std::num::Wrapping<usize>;
    let mut _896: std::num::Wrapping<usize>;
    let mut _897: &std::num::Wrapping<usize>;
    let _898: std::num::Wrapping<usize>;
    let _899: &std::num::Wrapping<usize>;
    let _900: &std::num::Wrapping<usize>;
    let mut _901: bool;
    let mut _902: bool;
    let _904: !;
    let mut _905: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _906: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _907: &std::num::Wrapping<i8>;
    let _908: std::num::Wrapping<i8>;
    let mut _909: std::num::Wrapping<i8>;
    let mut _910: std::num::Wrapping<i8>;
    let mut _911: std::num::Wrapping<i8>;
    let mut _912: &std::num::Wrapping<i8>;
    let _913: std::num::Wrapping<i8>;
    let _914: &std::num::Wrapping<i8>;
    let _915: &std::num::Wrapping<i8>;
    let mut _916: bool;
    let mut _917: bool;
    let _919: !;
    let mut _920: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _921: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _922: &std::num::Wrapping<i16>;
    let _923: std::num::Wrapping<i16>;
    let mut _924: std::num::Wrapping<i16>;
    let mut _925: std::num::Wrapping<i16>;
    let mut _926: std::num::Wrapping<i16>;
    let mut _927: &std::num::Wrapping<i16>;
    let _928: std::num::Wrapping<i16>;
    let _929: &std::num::Wrapping<i16>;
    let _930: &std::num::Wrapping<i16>;
    let mut _931: bool;
    let mut _932: bool;
    let _934: !;
    let mut _935: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _936: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _937: &std::num::Wrapping<i32>;
    let _938: std::num::Wrapping<i32>;
    let mut _939: std::num::Wrapping<i32>;
    let mut _940: std::num::Wrapping<i32>;
    let mut _941: std::num::Wrapping<i32>;
    let mut _942: &std::num::Wrapping<i32>;
    let _943: std::num::Wrapping<i32>;
    let _944: &std::num::Wrapping<i32>;
    let _945: &std::num::Wrapping<i32>;
    let mut _946: bool;
    let mut _947: bool;
    let _949: !;
    let mut _950: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _951: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _952: &std::num::Wrapping<i64>;
    let _953: std::num::Wrapping<i64>;
    let mut _954: std::num::Wrapping<i64>;
    let mut _955: std::num::Wrapping<i64>;
    let mut _956: std::num::Wrapping<i64>;
    let mut _957: &std::num::Wrapping<i64>;
    let _958: std::num::Wrapping<i64>;
    let _959: &std::num::Wrapping<i64>;
    let _960: &std::num::Wrapping<i64>;
    let mut _961: bool;
    let mut _962: bool;
    let _964: !;
    let mut _965: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _966: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _967: &std::num::Wrapping<isize>;
    let _968: std::num::Wrapping<isize>;
    let mut _969: std::num::Wrapping<isize>;
    let mut _970: std::num::Wrapping<isize>;
    let mut _971: std::num::Wrapping<isize>;
    let mut _972: &std::num::Wrapping<isize>;
    let _973: std::num::Wrapping<isize>;
    let _974: &std::num::Wrapping<isize>;
    let _975: &std::num::Wrapping<isize>;
    let mut _976: bool;
    let mut _977: bool;
    let _979: !;
    let mut _980: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _981: (&std::num::Wrapping<u8>, &std::num::Wrapping<u8>);
    let mut _982: &std::num::Wrapping<u8>;
    let _983: std::num::Wrapping<u8>;
    let mut _984: std::num::Wrapping<u8>;
    let mut _985: std::num::Wrapping<u8>;
    let mut _986: std::num::Wrapping<u8>;
    let mut _987: &std::num::Wrapping<u8>;
    let _988: std::num::Wrapping<u8>;
    let _989: &std::num::Wrapping<u8>;
    let _990: &std::num::Wrapping<u8>;
    let mut _991: bool;
    let mut _992: bool;
    let _994: !;
    let mut _995: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _996: (&std::num::Wrapping<u16>, &std::num::Wrapping<u16>);
    let mut _997: &std::num::Wrapping<u16>;
    let _998: std::num::Wrapping<u16>;
    let mut _999: std::num::Wrapping<u16>;
    let mut _1000: std::num::Wrapping<u16>;
    let mut _1001: std::num::Wrapping<u16>;
    let mut _1002: &std::num::Wrapping<u16>;
    let _1003: std::num::Wrapping<u16>;
    let _1004: &std::num::Wrapping<u16>;
    let _1005: &std::num::Wrapping<u16>;
    let mut _1006: bool;
    let mut _1007: bool;
    let _1009: !;
    let mut _1010: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1011: (&std::num::Wrapping<u32>, &std::num::Wrapping<u32>);
    let mut _1012: &std::num::Wrapping<u32>;
    let _1013: std::num::Wrapping<u32>;
    let mut _1014: std::num::Wrapping<u32>;
    let mut _1015: std::num::Wrapping<u32>;
    let mut _1016: std::num::Wrapping<u32>;
    let mut _1017: &std::num::Wrapping<u32>;
    let _1018: std::num::Wrapping<u32>;
    let _1019: &std::num::Wrapping<u32>;
    let _1020: &std::num::Wrapping<u32>;
    let mut _1021: bool;
    let mut _1022: bool;
    let _1024: !;
    let mut _1025: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1026: (&std::num::Wrapping<u64>, &std::num::Wrapping<u64>);
    let mut _1027: &std::num::Wrapping<u64>;
    let _1028: std::num::Wrapping<u64>;
    let mut _1029: std::num::Wrapping<u64>;
    let mut _1030: std::num::Wrapping<u64>;
    let mut _1031: std::num::Wrapping<u64>;
    let mut _1032: &std::num::Wrapping<u64>;
    let _1033: std::num::Wrapping<u64>;
    let _1034: &std::num::Wrapping<u64>;
    let _1035: &std::num::Wrapping<u64>;
    let mut _1036: bool;
    let mut _1037: bool;
    let _1039: !;
    let mut _1040: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1041: (&std::num::Wrapping<usize>, &std::num::Wrapping<usize>);
    let mut _1042: &std::num::Wrapping<usize>;
    let _1043: std::num::Wrapping<usize>;
    let mut _1044: std::num::Wrapping<usize>;
    let mut _1045: std::num::Wrapping<usize>;
    let mut _1046: std::num::Wrapping<usize>;
    let mut _1047: &std::num::Wrapping<usize>;
    let _1048: std::num::Wrapping<usize>;
    let _1049: &std::num::Wrapping<usize>;
    let _1050: &std::num::Wrapping<usize>;
    let mut _1051: bool;
    let mut _1052: bool;
    let _1054: !;
    let mut _1055: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _9;
        debug right_val => _10;
        let _13: core::panicking::AssertKind;
        scope 2 {
            debug kind => _13;
        }
    }
    scope 3 {
        debug left_val => _24;
        debug right_val => _25;
        let _28: core::panicking::AssertKind;
        scope 4 {
            debug kind => _28;
        }
    }
    scope 5 {
        debug left_val => _39;
        debug right_val => _40;
        let _43: core::panicking::AssertKind;
        scope 6 {
            debug kind => _43;
        }
    }
    scope 7 {
        debug left_val => _54;
        debug right_val => _55;
        let _58: core::panicking::AssertKind;
        scope 8 {
            debug kind => _58;
        }
    }
    scope 9 {
        debug left_val => _69;
        debug right_val => _70;
        let _73: core::panicking::AssertKind;
        scope 10 {
            debug kind => _73;
        }
    }
    scope 11 {
        debug left_val => _84;
        debug right_val => _85;
        let _88: core::panicking::AssertKind;
        scope 12 {
            debug kind => _88;
        }
    }
    scope 13 {
        debug left_val => _99;
        debug right_val => _100;
        let _103: core::panicking::AssertKind;
        scope 14 {
            debug kind => _103;
        }
    }
    scope 15 {
        debug left_val => _114;
        debug right_val => _115;
        let _118: core::panicking::AssertKind;
        scope 16 {
            debug kind => _118;
        }
    }
    scope 17 {
        debug left_val => _129;
        debug right_val => _130;
        let _133: core::panicking::AssertKind;
        scope 18 {
            debug kind => _133;
        }
    }
    scope 19 {
        debug left_val => _144;
        debug right_val => _145;
        let _148: core::panicking::AssertKind;
        scope 20 {
            debug kind => _148;
        }
    }
    scope 21 {
        debug left_val => _159;
        debug right_val => _160;
        let _163: core::panicking::AssertKind;
        scope 22 {
            debug kind => _163;
        }
    }
    scope 23 {
        debug left_val => _174;
        debug right_val => _175;
        let _178: core::panicking::AssertKind;
        scope 24 {
            debug kind => _178;
        }
    }
    scope 25 {
        debug left_val => _189;
        debug right_val => _190;
        let _193: core::panicking::AssertKind;
        scope 26 {
            debug kind => _193;
        }
    }
    scope 27 {
        debug left_val => _204;
        debug right_val => _205;
        let _208: core::panicking::AssertKind;
        scope 28 {
            debug kind => _208;
        }
    }
    scope 29 {
        debug left_val => _219;
        debug right_val => _220;
        let _223: core::panicking::AssertKind;
        scope 30 {
            debug kind => _223;
        }
    }
    scope 31 {
        debug left_val => _234;
        debug right_val => _235;
        let _238: core::panicking::AssertKind;
        scope 32 {
            debug kind => _238;
        }
    }
    scope 33 {
        debug left_val => _249;
        debug right_val => _250;
        let _253: core::panicking::AssertKind;
        scope 34 {
            debug kind => _253;
        }
    }
    scope 35 {
        debug left_val => _264;
        debug right_val => _265;
        let _268: core::panicking::AssertKind;
        scope 36 {
            debug kind => _268;
        }
    }
    scope 37 {
        debug left_val => _279;
        debug right_val => _280;
        let _283: core::panicking::AssertKind;
        scope 38 {
            debug kind => _283;
        }
    }
    scope 39 {
        debug left_val => _294;
        debug right_val => _295;
        let _298: core::panicking::AssertKind;
        scope 40 {
            debug kind => _298;
        }
    }
    scope 41 {
        debug left_val => _309;
        debug right_val => _310;
        let _313: core::panicking::AssertKind;
        scope 42 {
            debug kind => _313;
        }
    }
    scope 43 {
        debug left_val => _324;
        debug right_val => _325;
        let _328: core::panicking::AssertKind;
        scope 44 {
            debug kind => _328;
        }
    }
    scope 45 {
        debug left_val => _339;
        debug right_val => _340;
        let _343: core::panicking::AssertKind;
        scope 46 {
            debug kind => _343;
        }
    }
    scope 47 {
        debug left_val => _354;
        debug right_val => _355;
        let _358: core::panicking::AssertKind;
        scope 48 {
            debug kind => _358;
        }
    }
    scope 49 {
        debug left_val => _369;
        debug right_val => _370;
        let _373: core::panicking::AssertKind;
        scope 50 {
            debug kind => _373;
        }
    }
    scope 51 {
        debug left_val => _385;
        debug right_val => _386;
        let _389: core::panicking::AssertKind;
        scope 52 {
            debug kind => _389;
        }
    }
    scope 53 {
        debug left_val => _401;
        debug right_val => _402;
        let _405: core::panicking::AssertKind;
        scope 54 {
            debug kind => _405;
        }
    }
    scope 55 {
        debug left_val => _417;
        debug right_val => _418;
        let _421: core::panicking::AssertKind;
        scope 56 {
            debug kind => _421;
        }
    }
    scope 57 {
        debug left_val => _433;
        debug right_val => _434;
        let _437: core::panicking::AssertKind;
        scope 58 {
            debug kind => _437;
        }
    }
    scope 59 {
        debug left_val => _449;
        debug right_val => _450;
        let _453: core::panicking::AssertKind;
        scope 60 {
            debug kind => _453;
        }
    }
    scope 61 {
        debug left_val => _464;
        debug right_val => _465;
        let _468: core::panicking::AssertKind;
        scope 62 {
            debug kind => _468;
        }
    }
    scope 63 {
        debug left_val => _479;
        debug right_val => _480;
        let _483: core::panicking::AssertKind;
        scope 64 {
            debug kind => _483;
        }
    }
    scope 65 {
        debug left_val => _494;
        debug right_val => _495;
        let _498: core::panicking::AssertKind;
        scope 66 {
            debug kind => _498;
        }
    }
    scope 67 {
        debug left_val => _509;
        debug right_val => _510;
        let _513: core::panicking::AssertKind;
        scope 68 {
            debug kind => _513;
        }
    }
    scope 69 {
        debug left_val => _524;
        debug right_val => _525;
        let _528: core::panicking::AssertKind;
        scope 70 {
            debug kind => _528;
        }
    }
    scope 71 {
        debug left_val => _539;
        debug right_val => _540;
        let _543: core::panicking::AssertKind;
        scope 72 {
            debug kind => _543;
        }
    }
    scope 73 {
        debug left_val => _554;
        debug right_val => _555;
        let _558: core::panicking::AssertKind;
        scope 74 {
            debug kind => _558;
        }
    }
    scope 75 {
        debug left_val => _569;
        debug right_val => _570;
        let _573: core::panicking::AssertKind;
        scope 76 {
            debug kind => _573;
        }
    }
    scope 77 {
        debug left_val => _584;
        debug right_val => _585;
        let _588: core::panicking::AssertKind;
        scope 78 {
            debug kind => _588;
        }
    }
    scope 79 {
        debug left_val => _599;
        debug right_val => _600;
        let _603: core::panicking::AssertKind;
        scope 80 {
            debug kind => _603;
        }
    }
    scope 81 {
        debug left_val => _614;
        debug right_val => _615;
        let _618: core::panicking::AssertKind;
        scope 82 {
            debug kind => _618;
        }
    }
    scope 83 {
        debug left_val => _629;
        debug right_val => _630;
        let _633: core::panicking::AssertKind;
        scope 84 {
            debug kind => _633;
        }
    }
    scope 85 {
        debug left_val => _644;
        debug right_val => _645;
        let _648: core::panicking::AssertKind;
        scope 86 {
            debug kind => _648;
        }
    }
    scope 87 {
        debug left_val => _659;
        debug right_val => _660;
        let _663: core::panicking::AssertKind;
        scope 88 {
            debug kind => _663;
        }
    }
    scope 89 {
        debug left_val => _674;
        debug right_val => _675;
        let _678: core::panicking::AssertKind;
        scope 90 {
            debug kind => _678;
        }
    }
    scope 91 {
        debug left_val => _689;
        debug right_val => _690;
        let _693: core::panicking::AssertKind;
        scope 92 {
            debug kind => _693;
        }
    }
    scope 93 {
        debug left_val => _704;
        debug right_val => _705;
        let _708: core::panicking::AssertKind;
        scope 94 {
            debug kind => _708;
        }
    }
    scope 95 {
        debug left_val => _719;
        debug right_val => _720;
        let _723: core::panicking::AssertKind;
        scope 96 {
            debug kind => _723;
        }
    }
    scope 97 {
        debug left_val => _734;
        debug right_val => _735;
        let _738: core::panicking::AssertKind;
        scope 98 {
            debug kind => _738;
        }
    }
    scope 99 {
        debug left_val => _749;
        debug right_val => _750;
        let _753: core::panicking::AssertKind;
        scope 100 {
            debug kind => _753;
        }
    }
    scope 101 {
        debug left_val => _764;
        debug right_val => _765;
        let _768: core::panicking::AssertKind;
        scope 102 {
            debug kind => _768;
        }
    }
    scope 103 {
        debug left_val => _779;
        debug right_val => _780;
        let _783: core::panicking::AssertKind;
        scope 104 {
            debug kind => _783;
        }
    }
    scope 105 {
        debug left_val => _794;
        debug right_val => _795;
        let _798: core::panicking::AssertKind;
        scope 106 {
            debug kind => _798;
        }
    }
    scope 107 {
        debug left_val => _809;
        debug right_val => _810;
        let _813: core::panicking::AssertKind;
        scope 108 {
            debug kind => _813;
        }
    }
    scope 109 {
        debug left_val => _824;
        debug right_val => _825;
        let _828: core::panicking::AssertKind;
        scope 110 {
            debug kind => _828;
        }
    }
    scope 111 {
        debug left_val => _839;
        debug right_val => _840;
        let _843: core::panicking::AssertKind;
        scope 112 {
            debug kind => _843;
        }
    }
    scope 113 {
        debug left_val => _854;
        debug right_val => _855;
        let _858: core::panicking::AssertKind;
        scope 114 {
            debug kind => _858;
        }
    }
    scope 115 {
        debug left_val => _869;
        debug right_val => _870;
        let _873: core::panicking::AssertKind;
        scope 116 {
            debug kind => _873;
        }
    }
    scope 117 {
        debug left_val => _884;
        debug right_val => _885;
        let _888: core::panicking::AssertKind;
        scope 118 {
            debug kind => _888;
        }
    }
    scope 119 {
        debug left_val => _899;
        debug right_val => _900;
        let _903: core::panicking::AssertKind;
        scope 120 {
            debug kind => _903;
        }
    }
    scope 121 {
        debug left_val => _914;
        debug right_val => _915;
        let _918: core::panicking::AssertKind;
        scope 122 {
            debug kind => _918;
        }
    }
    scope 123 {
        debug left_val => _929;
        debug right_val => _930;
        let _933: core::panicking::AssertKind;
        scope 124 {
            debug kind => _933;
        }
    }
    scope 125 {
        debug left_val => _944;
        debug right_val => _945;
        let _948: core::panicking::AssertKind;
        scope 126 {
            debug kind => _948;
        }
    }
    scope 127 {
        debug left_val => _959;
        debug right_val => _960;
        let _963: core::panicking::AssertKind;
        scope 128 {
            debug kind => _963;
        }
    }
    scope 129 {
        debug left_val => _974;
        debug right_val => _975;
        let _978: core::panicking::AssertKind;
        scope 130 {
            debug kind => _978;
        }
    }
    scope 131 {
        debug left_val => _989;
        debug right_val => _990;
        let _993: core::panicking::AssertKind;
        scope 132 {
            debug kind => _993;
        }
    }
    scope 133 {
        debug left_val => _1004;
        debug right_val => _1005;
        let _1008: core::panicking::AssertKind;
        scope 134 {
            debug kind => _1008;
        }
    }
    scope 135 {
        debug left_val => _1019;
        debug right_val => _1020;
        let _1023: core::panicking::AssertKind;
        scope 136 {
            debug kind => _1023;
        }
    }
    scope 137 {
        debug left_val => _1034;
        debug right_val => _1035;
        let _1038: core::panicking::AssertKind;
        scope 138 {
            debug kind => _1038;
        }
    }
    scope 139 {
        debug left_val => _1049;
        debug right_val => _1050;
        let _1053: core::panicking::AssertKind;
        scope 140 {
            debug kind => _1053;
        }
    }

    bb0: {
        _5 = Wrapping::<i8>(const _);
        _6 = Wrapping::<i8>(const 1_i8);
        _4 = <Wrapping<i8> as Add>::add(move _5, move _6) -> bb1;
    }

    bb1: {
        _3 = test::black_box::<Wrapping<i8>>(move _4) -> bb2;
    }

    bb2: {
        _2 = &_3;
        _8 = Wrapping::<i8>(const _);
        _7 = &_8;
        _1 = (move _2, move _7);
        _9 = (_1.0: &std::num::Wrapping<i8>);
        _10 = (_1.1: &std::num::Wrapping<i8>);
        _12 = <Wrapping<i8> as PartialEq>::eq(_9, _10) -> bb3;
    }

    bb3: {
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _13, _9, _10, move _15);
    }

    bb5: {
        _20 = Wrapping::<i16>(const _);
        _21 = Wrapping::<i16>(const 1_i16);
        _19 = <Wrapping<i16> as Add>::add(move _20, move _21) -> bb6;
    }

    bb6: {
        _18 = test::black_box::<Wrapping<i16>>(move _19) -> bb7;
    }

    bb7: {
        _17 = &_18;
        _23 = Wrapping::<i16>(const _);
        _22 = &_23;
        _16 = (move _17, move _22);
        _24 = (_16.0: &std::num::Wrapping<i16>);
        _25 = (_16.1: &std::num::Wrapping<i16>);
        _27 = <Wrapping<i16> as PartialEq>::eq(_24, _25) -> bb8;
    }

    bb8: {
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _28, _24, _25, move _30);
    }

    bb10: {
        _35 = Wrapping::<i32>(const _);
        _36 = Wrapping::<i32>(const 1_i32);
        _34 = <Wrapping<i32> as Add>::add(move _35, move _36) -> bb11;
    }

    bb11: {
        _33 = test::black_box::<Wrapping<i32>>(move _34) -> bb12;
    }

    bb12: {
        _32 = &_33;
        _38 = Wrapping::<i32>(const _);
        _37 = &_38;
        _31 = (move _32, move _37);
        _39 = (_31.0: &std::num::Wrapping<i32>);
        _40 = (_31.1: &std::num::Wrapping<i32>);
        _42 = <Wrapping<i32> as PartialEq>::eq(_39, _40) -> bb13;
    }

    bb13: {
        _41 = Not(move _42);
        switchInt(move _41) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _43 = core::panicking::AssertKind::Eq;
        _45 = Option::<Arguments<'_>>::None;
        _44 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _43, _39, _40, move _45);
    }

    bb15: {
        _50 = Wrapping::<i64>(const _);
        _51 = Wrapping::<i64>(const 1_i64);
        _49 = <Wrapping<i64> as Add>::add(move _50, move _51) -> bb16;
    }

    bb16: {
        _48 = test::black_box::<Wrapping<i64>>(move _49) -> bb17;
    }

    bb17: {
        _47 = &_48;
        _53 = Wrapping::<i64>(const _);
        _52 = &_53;
        _46 = (move _47, move _52);
        _54 = (_46.0: &std::num::Wrapping<i64>);
        _55 = (_46.1: &std::num::Wrapping<i64>);
        _57 = <Wrapping<i64> as PartialEq>::eq(_54, _55) -> bb18;
    }

    bb18: {
        _56 = Not(move _57);
        switchInt(move _56) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _58 = core::panicking::AssertKind::Eq;
        _60 = Option::<Arguments<'_>>::None;
        _59 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _58, _54, _55, move _60);
    }

    bb20: {
        _65 = Wrapping::<isize>(const _);
        _66 = Wrapping::<isize>(const 1_isize);
        _64 = <Wrapping<isize> as Add>::add(move _65, move _66) -> bb21;
    }

    bb21: {
        _63 = test::black_box::<Wrapping<isize>>(move _64) -> bb22;
    }

    bb22: {
        _62 = &_63;
        _68 = Wrapping::<isize>(const _);
        _67 = &_68;
        _61 = (move _62, move _67);
        _69 = (_61.0: &std::num::Wrapping<isize>);
        _70 = (_61.1: &std::num::Wrapping<isize>);
        _72 = <Wrapping<isize> as PartialEq>::eq(_69, _70) -> bb23;
    }

    bb23: {
        _71 = Not(move _72);
        switchInt(move _71) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _73 = core::panicking::AssertKind::Eq;
        _75 = Option::<Arguments<'_>>::None;
        _74 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _73, _69, _70, move _75);
    }

    bb25: {
        _80 = Wrapping::<u8>(const _);
        _81 = Wrapping::<u8>(const 1_u8);
        _79 = <Wrapping<u8> as Add>::add(move _80, move _81) -> bb26;
    }

    bb26: {
        _78 = test::black_box::<Wrapping<u8>>(move _79) -> bb27;
    }

    bb27: {
        _77 = &_78;
        _83 = Wrapping::<u8>(const 0_u8);
        _82 = &_83;
        _76 = (move _77, move _82);
        _84 = (_76.0: &std::num::Wrapping<u8>);
        _85 = (_76.1: &std::num::Wrapping<u8>);
        _87 = <Wrapping<u8> as PartialEq>::eq(_84, _85) -> bb28;
    }

    bb28: {
        _86 = Not(move _87);
        switchInt(move _86) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _88 = core::panicking::AssertKind::Eq;
        _90 = Option::<Arguments<'_>>::None;
        _89 = core::panicking::assert_failed::<Wrapping<u8>, Wrapping<u8>>(move _88, _84, _85, move _90);
    }

    bb30: {
        _95 = Wrapping::<u16>(const _);
        _96 = Wrapping::<u16>(const 1_u16);
        _94 = <Wrapping<u16> as Add>::add(move _95, move _96) -> bb31;
    }

    bb31: {
        _93 = test::black_box::<Wrapping<u16>>(move _94) -> bb32;
    }

    bb32: {
        _92 = &_93;
        _98 = Wrapping::<u16>(const 0_u16);
        _97 = &_98;
        _91 = (move _92, move _97);
        _99 = (_91.0: &std::num::Wrapping<u16>);
        _100 = (_91.1: &std::num::Wrapping<u16>);
        _102 = <Wrapping<u16> as PartialEq>::eq(_99, _100) -> bb33;
    }

    bb33: {
        _101 = Not(move _102);
        switchInt(move _101) -> [0: bb35, otherwise: bb34];
    }

    bb34: {
        _103 = core::panicking::AssertKind::Eq;
        _105 = Option::<Arguments<'_>>::None;
        _104 = core::panicking::assert_failed::<Wrapping<u16>, Wrapping<u16>>(move _103, _99, _100, move _105);
    }

    bb35: {
        _110 = Wrapping::<u32>(const _);
        _111 = Wrapping::<u32>(const 1_u32);
        _109 = <Wrapping<u32> as Add>::add(move _110, move _111) -> bb36;
    }

    bb36: {
        _108 = test::black_box::<Wrapping<u32>>(move _109) -> bb37;
    }

    bb37: {
        _107 = &_108;
        _113 = Wrapping::<u32>(const 0_u32);
        _112 = &_113;
        _106 = (move _107, move _112);
        _114 = (_106.0: &std::num::Wrapping<u32>);
        _115 = (_106.1: &std::num::Wrapping<u32>);
        _117 = <Wrapping<u32> as PartialEq>::eq(_114, _115) -> bb38;
    }

    bb38: {
        _116 = Not(move _117);
        switchInt(move _116) -> [0: bb40, otherwise: bb39];
    }

    bb39: {
        _118 = core::panicking::AssertKind::Eq;
        _120 = Option::<Arguments<'_>>::None;
        _119 = core::panicking::assert_failed::<Wrapping<u32>, Wrapping<u32>>(move _118, _114, _115, move _120);
    }

    bb40: {
        _125 = Wrapping::<u64>(const _);
        _126 = Wrapping::<u64>(const 1_u64);
        _124 = <Wrapping<u64> as Add>::add(move _125, move _126) -> bb41;
    }

    bb41: {
        _123 = test::black_box::<Wrapping<u64>>(move _124) -> bb42;
    }

    bb42: {
        _122 = &_123;
        _128 = Wrapping::<u64>(const 0_u64);
        _127 = &_128;
        _121 = (move _122, move _127);
        _129 = (_121.0: &std::num::Wrapping<u64>);
        _130 = (_121.1: &std::num::Wrapping<u64>);
        _132 = <Wrapping<u64> as PartialEq>::eq(_129, _130) -> bb43;
    }

    bb43: {
        _131 = Not(move _132);
        switchInt(move _131) -> [0: bb45, otherwise: bb44];
    }

    bb44: {
        _133 = core::panicking::AssertKind::Eq;
        _135 = Option::<Arguments<'_>>::None;
        _134 = core::panicking::assert_failed::<Wrapping<u64>, Wrapping<u64>>(move _133, _129, _130, move _135);
    }

    bb45: {
        _140 = Wrapping::<usize>(const _);
        _141 = Wrapping::<usize>(const 1_usize);
        _139 = <Wrapping<usize> as Add>::add(move _140, move _141) -> bb46;
    }

    bb46: {
        _138 = test::black_box::<Wrapping<usize>>(move _139) -> bb47;
    }

    bb47: {
        _137 = &_138;
        _143 = Wrapping::<usize>(const 0_usize);
        _142 = &_143;
        _136 = (move _137, move _142);
        _144 = (_136.0: &std::num::Wrapping<usize>);
        _145 = (_136.1: &std::num::Wrapping<usize>);
        _147 = <Wrapping<usize> as PartialEq>::eq(_144, _145) -> bb48;
    }

    bb48: {
        _146 = Not(move _147);
        switchInt(move _146) -> [0: bb50, otherwise: bb49];
    }

    bb49: {
        _148 = core::panicking::AssertKind::Eq;
        _150 = Option::<Arguments<'_>>::None;
        _149 = core::panicking::assert_failed::<Wrapping<usize>, Wrapping<usize>>(move _148, _144, _145, move _150);
    }

    bb50: {
        _155 = Wrapping::<i8>(const _);
        _156 = Wrapping::<i8>(const 1_i8);
        _154 = <Wrapping<i8> as Sub>::sub(move _155, move _156) -> bb51;
    }

    bb51: {
        _153 = test::black_box::<Wrapping<i8>>(move _154) -> bb52;
    }

    bb52: {
        _152 = &_153;
        _158 = Wrapping::<i8>(const _);
        _157 = &_158;
        _151 = (move _152, move _157);
        _159 = (_151.0: &std::num::Wrapping<i8>);
        _160 = (_151.1: &std::num::Wrapping<i8>);
        _162 = <Wrapping<i8> as PartialEq>::eq(_159, _160) -> bb53;
    }

    bb53: {
        _161 = Not(move _162);
        switchInt(move _161) -> [0: bb55, otherwise: bb54];
    }

    bb54: {
        _163 = core::panicking::AssertKind::Eq;
        _165 = Option::<Arguments<'_>>::None;
        _164 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _163, _159, _160, move _165);
    }

    bb55: {
        _170 = Wrapping::<i16>(const _);
        _171 = Wrapping::<i16>(const 1_i16);
        _169 = <Wrapping<i16> as Sub>::sub(move _170, move _171) -> bb56;
    }

    bb56: {
        _168 = test::black_box::<Wrapping<i16>>(move _169) -> bb57;
    }

    bb57: {
        _167 = &_168;
        _173 = Wrapping::<i16>(const _);
        _172 = &_173;
        _166 = (move _167, move _172);
        _174 = (_166.0: &std::num::Wrapping<i16>);
        _175 = (_166.1: &std::num::Wrapping<i16>);
        _177 = <Wrapping<i16> as PartialEq>::eq(_174, _175) -> bb58;
    }

    bb58: {
        _176 = Not(move _177);
        switchInt(move _176) -> [0: bb60, otherwise: bb59];
    }

    bb59: {
        _178 = core::panicking::AssertKind::Eq;
        _180 = Option::<Arguments<'_>>::None;
        _179 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _178, _174, _175, move _180);
    }

    bb60: {
        _185 = Wrapping::<i32>(const _);
        _186 = Wrapping::<i32>(const 1_i32);
        _184 = <Wrapping<i32> as Sub>::sub(move _185, move _186) -> bb61;
    }

    bb61: {
        _183 = test::black_box::<Wrapping<i32>>(move _184) -> bb62;
    }

    bb62: {
        _182 = &_183;
        _188 = Wrapping::<i32>(const _);
        _187 = &_188;
        _181 = (move _182, move _187);
        _189 = (_181.0: &std::num::Wrapping<i32>);
        _190 = (_181.1: &std::num::Wrapping<i32>);
        _192 = <Wrapping<i32> as PartialEq>::eq(_189, _190) -> bb63;
    }

    bb63: {
        _191 = Not(move _192);
        switchInt(move _191) -> [0: bb65, otherwise: bb64];
    }

    bb64: {
        _193 = core::panicking::AssertKind::Eq;
        _195 = Option::<Arguments<'_>>::None;
        _194 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _193, _189, _190, move _195);
    }

    bb65: {
        _200 = Wrapping::<i64>(const _);
        _201 = Wrapping::<i64>(const 1_i64);
        _199 = <Wrapping<i64> as Sub>::sub(move _200, move _201) -> bb66;
    }

    bb66: {
        _198 = test::black_box::<Wrapping<i64>>(move _199) -> bb67;
    }

    bb67: {
        _197 = &_198;
        _203 = Wrapping::<i64>(const _);
        _202 = &_203;
        _196 = (move _197, move _202);
        _204 = (_196.0: &std::num::Wrapping<i64>);
        _205 = (_196.1: &std::num::Wrapping<i64>);
        _207 = <Wrapping<i64> as PartialEq>::eq(_204, _205) -> bb68;
    }

    bb68: {
        _206 = Not(move _207);
        switchInt(move _206) -> [0: bb70, otherwise: bb69];
    }

    bb69: {
        _208 = core::panicking::AssertKind::Eq;
        _210 = Option::<Arguments<'_>>::None;
        _209 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _208, _204, _205, move _210);
    }

    bb70: {
        _215 = Wrapping::<isize>(const _);
        _216 = Wrapping::<isize>(const 1_isize);
        _214 = <Wrapping<isize> as Sub>::sub(move _215, move _216) -> bb71;
    }

    bb71: {
        _213 = test::black_box::<Wrapping<isize>>(move _214) -> bb72;
    }

    bb72: {
        _212 = &_213;
        _218 = Wrapping::<isize>(const _);
        _217 = &_218;
        _211 = (move _212, move _217);
        _219 = (_211.0: &std::num::Wrapping<isize>);
        _220 = (_211.1: &std::num::Wrapping<isize>);
        _222 = <Wrapping<isize> as PartialEq>::eq(_219, _220) -> bb73;
    }

    bb73: {
        _221 = Not(move _222);
        switchInt(move _221) -> [0: bb75, otherwise: bb74];
    }

    bb74: {
        _223 = core::panicking::AssertKind::Eq;
        _225 = Option::<Arguments<'_>>::None;
        _224 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _223, _219, _220, move _225);
    }

    bb75: {
        _230 = Wrapping::<u8>(const 0_u8);
        _231 = Wrapping::<u8>(const 1_u8);
        _229 = <Wrapping<u8> as Sub>::sub(move _230, move _231) -> bb76;
    }

    bb76: {
        _228 = test::black_box::<Wrapping<u8>>(move _229) -> bb77;
    }

    bb77: {
        _227 = &_228;
        _233 = Wrapping::<u8>(const _);
        _232 = &_233;
        _226 = (move _227, move _232);
        _234 = (_226.0: &std::num::Wrapping<u8>);
        _235 = (_226.1: &std::num::Wrapping<u8>);
        _237 = <Wrapping<u8> as PartialEq>::eq(_234, _235) -> bb78;
    }

    bb78: {
        _236 = Not(move _237);
        switchInt(move _236) -> [0: bb80, otherwise: bb79];
    }

    bb79: {
        _238 = core::panicking::AssertKind::Eq;
        _240 = Option::<Arguments<'_>>::None;
        _239 = core::panicking::assert_failed::<Wrapping<u8>, Wrapping<u8>>(move _238, _234, _235, move _240);
    }

    bb80: {
        _245 = Wrapping::<u16>(const 0_u16);
        _246 = Wrapping::<u16>(const 1_u16);
        _244 = <Wrapping<u16> as Sub>::sub(move _245, move _246) -> bb81;
    }

    bb81: {
        _243 = test::black_box::<Wrapping<u16>>(move _244) -> bb82;
    }

    bb82: {
        _242 = &_243;
        _248 = Wrapping::<u16>(const _);
        _247 = &_248;
        _241 = (move _242, move _247);
        _249 = (_241.0: &std::num::Wrapping<u16>);
        _250 = (_241.1: &std::num::Wrapping<u16>);
        _252 = <Wrapping<u16> as PartialEq>::eq(_249, _250) -> bb83;
    }

    bb83: {
        _251 = Not(move _252);
        switchInt(move _251) -> [0: bb85, otherwise: bb84];
    }

    bb84: {
        _253 = core::panicking::AssertKind::Eq;
        _255 = Option::<Arguments<'_>>::None;
        _254 = core::panicking::assert_failed::<Wrapping<u16>, Wrapping<u16>>(move _253, _249, _250, move _255);
    }

    bb85: {
        _260 = Wrapping::<u32>(const 0_u32);
        _261 = Wrapping::<u32>(const 1_u32);
        _259 = <Wrapping<u32> as Sub>::sub(move _260, move _261) -> bb86;
    }

    bb86: {
        _258 = test::black_box::<Wrapping<u32>>(move _259) -> bb87;
    }

    bb87: {
        _257 = &_258;
        _263 = Wrapping::<u32>(const _);
        _262 = &_263;
        _256 = (move _257, move _262);
        _264 = (_256.0: &std::num::Wrapping<u32>);
        _265 = (_256.1: &std::num::Wrapping<u32>);
        _267 = <Wrapping<u32> as PartialEq>::eq(_264, _265) -> bb88;
    }

    bb88: {
        _266 = Not(move _267);
        switchInt(move _266) -> [0: bb90, otherwise: bb89];
    }

    bb89: {
        _268 = core::panicking::AssertKind::Eq;
        _270 = Option::<Arguments<'_>>::None;
        _269 = core::panicking::assert_failed::<Wrapping<u32>, Wrapping<u32>>(move _268, _264, _265, move _270);
    }

    bb90: {
        _275 = Wrapping::<u64>(const 0_u64);
        _276 = Wrapping::<u64>(const 1_u64);
        _274 = <Wrapping<u64> as Sub>::sub(move _275, move _276) -> bb91;
    }

    bb91: {
        _273 = test::black_box::<Wrapping<u64>>(move _274) -> bb92;
    }

    bb92: {
        _272 = &_273;
        _278 = Wrapping::<u64>(const _);
        _277 = &_278;
        _271 = (move _272, move _277);
        _279 = (_271.0: &std::num::Wrapping<u64>);
        _280 = (_271.1: &std::num::Wrapping<u64>);
        _282 = <Wrapping<u64> as PartialEq>::eq(_279, _280) -> bb93;
    }

    bb93: {
        _281 = Not(move _282);
        switchInt(move _281) -> [0: bb95, otherwise: bb94];
    }

    bb94: {
        _283 = core::panicking::AssertKind::Eq;
        _285 = Option::<Arguments<'_>>::None;
        _284 = core::panicking::assert_failed::<Wrapping<u64>, Wrapping<u64>>(move _283, _279, _280, move _285);
    }

    bb95: {
        _290 = Wrapping::<usize>(const 0_usize);
        _291 = Wrapping::<usize>(const 1_usize);
        _289 = <Wrapping<usize> as Sub>::sub(move _290, move _291) -> bb96;
    }

    bb96: {
        _288 = test::black_box::<Wrapping<usize>>(move _289) -> bb97;
    }

    bb97: {
        _287 = &_288;
        _293 = Wrapping::<usize>(const _);
        _292 = &_293;
        _286 = (move _287, move _292);
        _294 = (_286.0: &std::num::Wrapping<usize>);
        _295 = (_286.1: &std::num::Wrapping<usize>);
        _297 = <Wrapping<usize> as PartialEq>::eq(_294, _295) -> bb98;
    }

    bb98: {
        _296 = Not(move _297);
        switchInt(move _296) -> [0: bb100, otherwise: bb99];
    }

    bb99: {
        _298 = core::panicking::AssertKind::Eq;
        _300 = Option::<Arguments<'_>>::None;
        _299 = core::panicking::assert_failed::<Wrapping<usize>, Wrapping<usize>>(move _298, _294, _295, move _300);
    }

    bb100: {
        _305 = Wrapping::<i8>(const _);
        _306 = Wrapping::<i8>(const 2_i8);
        _304 = <Wrapping<i8> as Mul>::mul(move _305, move _306) -> bb101;
    }

    bb101: {
        _303 = test::black_box::<Wrapping<i8>>(move _304) -> bb102;
    }

    bb102: {
        _302 = &_303;
        _308 = Wrapping::<i8>(const -2_i8);
        _307 = &_308;
        _301 = (move _302, move _307);
        _309 = (_301.0: &std::num::Wrapping<i8>);
        _310 = (_301.1: &std::num::Wrapping<i8>);
        _312 = <Wrapping<i8> as PartialEq>::eq(_309, _310) -> bb103;
    }

    bb103: {
        _311 = Not(move _312);
        switchInt(move _311) -> [0: bb105, otherwise: bb104];
    }

    bb104: {
        _313 = core::panicking::AssertKind::Eq;
        _315 = Option::<Arguments<'_>>::None;
        _314 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _313, _309, _310, move _315);
    }

    bb105: {
        _320 = Wrapping::<i16>(const _);
        _321 = Wrapping::<i16>(const 2_i16);
        _319 = <Wrapping<i16> as Mul>::mul(move _320, move _321) -> bb106;
    }

    bb106: {
        _318 = test::black_box::<Wrapping<i16>>(move _319) -> bb107;
    }

    bb107: {
        _317 = &_318;
        _323 = Wrapping::<i16>(const -2_i16);
        _322 = &_323;
        _316 = (move _317, move _322);
        _324 = (_316.0: &std::num::Wrapping<i16>);
        _325 = (_316.1: &std::num::Wrapping<i16>);
        _327 = <Wrapping<i16> as PartialEq>::eq(_324, _325) -> bb108;
    }

    bb108: {
        _326 = Not(move _327);
        switchInt(move _326) -> [0: bb110, otherwise: bb109];
    }

    bb109: {
        _328 = core::panicking::AssertKind::Eq;
        _330 = Option::<Arguments<'_>>::None;
        _329 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _328, _324, _325, move _330);
    }

    bb110: {
        _335 = Wrapping::<i32>(const _);
        _336 = Wrapping::<i32>(const 2_i32);
        _334 = <Wrapping<i32> as Mul>::mul(move _335, move _336) -> bb111;
    }

    bb111: {
        _333 = test::black_box::<Wrapping<i32>>(move _334) -> bb112;
    }

    bb112: {
        _332 = &_333;
        _338 = Wrapping::<i32>(const -2_i32);
        _337 = &_338;
        _331 = (move _332, move _337);
        _339 = (_331.0: &std::num::Wrapping<i32>);
        _340 = (_331.1: &std::num::Wrapping<i32>);
        _342 = <Wrapping<i32> as PartialEq>::eq(_339, _340) -> bb113;
    }

    bb113: {
        _341 = Not(move _342);
        switchInt(move _341) -> [0: bb115, otherwise: bb114];
    }

    bb114: {
        _343 = core::panicking::AssertKind::Eq;
        _345 = Option::<Arguments<'_>>::None;
        _344 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _343, _339, _340, move _345);
    }

    bb115: {
        _350 = Wrapping::<i64>(const _);
        _351 = Wrapping::<i64>(const 2_i64);
        _349 = <Wrapping<i64> as Mul>::mul(move _350, move _351) -> bb116;
    }

    bb116: {
        _348 = test::black_box::<Wrapping<i64>>(move _349) -> bb117;
    }

    bb117: {
        _347 = &_348;
        _353 = Wrapping::<i64>(const -2_i64);
        _352 = &_353;
        _346 = (move _347, move _352);
        _354 = (_346.0: &std::num::Wrapping<i64>);
        _355 = (_346.1: &std::num::Wrapping<i64>);
        _357 = <Wrapping<i64> as PartialEq>::eq(_354, _355) -> bb118;
    }

    bb118: {
        _356 = Not(move _357);
        switchInt(move _356) -> [0: bb120, otherwise: bb119];
    }

    bb119: {
        _358 = core::panicking::AssertKind::Eq;
        _360 = Option::<Arguments<'_>>::None;
        _359 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _358, _354, _355, move _360);
    }

    bb120: {
        _365 = Wrapping::<isize>(const _);
        _366 = Wrapping::<isize>(const 2_isize);
        _364 = <Wrapping<isize> as Mul>::mul(move _365, move _366) -> bb121;
    }

    bb121: {
        _363 = test::black_box::<Wrapping<isize>>(move _364) -> bb122;
    }

    bb122: {
        _362 = &_363;
        _368 = Wrapping::<isize>(const -2_isize);
        _367 = &_368;
        _361 = (move _362, move _367);
        _369 = (_361.0: &std::num::Wrapping<isize>);
        _370 = (_361.1: &std::num::Wrapping<isize>);
        _372 = <Wrapping<isize> as PartialEq>::eq(_369, _370) -> bb123;
    }

    bb123: {
        _371 = Not(move _372);
        switchInt(move _371) -> [0: bb125, otherwise: bb124];
    }

    bb124: {
        _373 = core::panicking::AssertKind::Eq;
        _375 = Option::<Arguments<'_>>::None;
        _374 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _373, _369, _370, move _375);
    }

    bb125: {
        _380 = Wrapping::<u8>(const _);
        _381 = Wrapping::<u8>(const 2_u8);
        _379 = <Wrapping<u8> as Mul>::mul(move _380, move _381) -> bb126;
    }

    bb126: {
        _378 = test::black_box::<Wrapping<u8>>(move _379) -> bb127;
    }

    bb127: {
        _377 = &_378;
        _384 = Sub(const _, const 1_u8);
        _383 = Wrapping::<u8>(move _384);
        _382 = &_383;
        _376 = (move _377, move _382);
        _385 = (_376.0: &std::num::Wrapping<u8>);
        _386 = (_376.1: &std::num::Wrapping<u8>);
        _388 = <Wrapping<u8> as PartialEq>::eq(_385, _386) -> bb128;
    }

    bb128: {
        _387 = Not(move _388);
        switchInt(move _387) -> [0: bb130, otherwise: bb129];
    }

    bb129: {
        _389 = core::panicking::AssertKind::Eq;
        _391 = Option::<Arguments<'_>>::None;
        _390 = core::panicking::assert_failed::<Wrapping<u8>, Wrapping<u8>>(move _389, _385, _386, move _391);
    }

    bb130: {
        _396 = Wrapping::<u16>(const _);
        _397 = Wrapping::<u16>(const 2_u16);
        _395 = <Wrapping<u16> as Mul>::mul(move _396, move _397) -> bb131;
    }

    bb131: {
        _394 = test::black_box::<Wrapping<u16>>(move _395) -> bb132;
    }

    bb132: {
        _393 = &_394;
        _400 = Sub(const _, const 1_u16);
        _399 = Wrapping::<u16>(move _400);
        _398 = &_399;
        _392 = (move _393, move _398);
        _401 = (_392.0: &std::num::Wrapping<u16>);
        _402 = (_392.1: &std::num::Wrapping<u16>);
        _404 = <Wrapping<u16> as PartialEq>::eq(_401, _402) -> bb133;
    }

    bb133: {
        _403 = Not(move _404);
        switchInt(move _403) -> [0: bb135, otherwise: bb134];
    }

    bb134: {
        _405 = core::panicking::AssertKind::Eq;
        _407 = Option::<Arguments<'_>>::None;
        _406 = core::panicking::assert_failed::<Wrapping<u16>, Wrapping<u16>>(move _405, _401, _402, move _407);
    }

    bb135: {
        _412 = Wrapping::<u32>(const _);
        _413 = Wrapping::<u32>(const 2_u32);
        _411 = <Wrapping<u32> as Mul>::mul(move _412, move _413) -> bb136;
    }

    bb136: {
        _410 = test::black_box::<Wrapping<u32>>(move _411) -> bb137;
    }

    bb137: {
        _409 = &_410;
        _416 = Sub(const _, const 1_u32);
        _415 = Wrapping::<u32>(move _416);
        _414 = &_415;
        _408 = (move _409, move _414);
        _417 = (_408.0: &std::num::Wrapping<u32>);
        _418 = (_408.1: &std::num::Wrapping<u32>);
        _420 = <Wrapping<u32> as PartialEq>::eq(_417, _418) -> bb138;
    }

    bb138: {
        _419 = Not(move _420);
        switchInt(move _419) -> [0: bb140, otherwise: bb139];
    }

    bb139: {
        _421 = core::panicking::AssertKind::Eq;
        _423 = Option::<Arguments<'_>>::None;
        _422 = core::panicking::assert_failed::<Wrapping<u32>, Wrapping<u32>>(move _421, _417, _418, move _423);
    }

    bb140: {
        _428 = Wrapping::<u64>(const _);
        _429 = Wrapping::<u64>(const 2_u64);
        _427 = <Wrapping<u64> as Mul>::mul(move _428, move _429) -> bb141;
    }

    bb141: {
        _426 = test::black_box::<Wrapping<u64>>(move _427) -> bb142;
    }

    bb142: {
        _425 = &_426;
        _432 = Sub(const _, const 1_u64);
        _431 = Wrapping::<u64>(move _432);
        _430 = &_431;
        _424 = (move _425, move _430);
        _433 = (_424.0: &std::num::Wrapping<u64>);
        _434 = (_424.1: &std::num::Wrapping<u64>);
        _436 = <Wrapping<u64> as PartialEq>::eq(_433, _434) -> bb143;
    }

    bb143: {
        _435 = Not(move _436);
        switchInt(move _435) -> [0: bb145, otherwise: bb144];
    }

    bb144: {
        _437 = core::panicking::AssertKind::Eq;
        _439 = Option::<Arguments<'_>>::None;
        _438 = core::panicking::assert_failed::<Wrapping<u64>, Wrapping<u64>>(move _437, _433, _434, move _439);
    }

    bb145: {
        _444 = Wrapping::<usize>(const _);
        _445 = Wrapping::<usize>(const 2_usize);
        _443 = <Wrapping<usize> as Mul>::mul(move _444, move _445) -> bb146;
    }

    bb146: {
        _442 = test::black_box::<Wrapping<usize>>(move _443) -> bb147;
    }

    bb147: {
        _441 = &_442;
        _448 = Sub(const _, const 1_usize);
        _447 = Wrapping::<usize>(move _448);
        _446 = &_447;
        _440 = (move _441, move _446);
        _449 = (_440.0: &std::num::Wrapping<usize>);
        _450 = (_440.1: &std::num::Wrapping<usize>);
        _452 = <Wrapping<usize> as PartialEq>::eq(_449, _450) -> bb148;
    }

    bb148: {
        _451 = Not(move _452);
        switchInt(move _451) -> [0: bb150, otherwise: bb149];
    }

    bb149: {
        _453 = core::panicking::AssertKind::Eq;
        _455 = Option::<Arguments<'_>>::None;
        _454 = core::panicking::assert_failed::<Wrapping<usize>, Wrapping<usize>>(move _453, _449, _450, move _455);
    }

    bb150: {
        _460 = Wrapping::<i8>(const _);
        _461 = Wrapping::<i8>(const -1_i8);
        _459 = <Wrapping<i8> as Div>::div(move _460, move _461) -> bb151;
    }

    bb151: {
        _458 = test::black_box::<Wrapping<i8>>(move _459) -> bb152;
    }

    bb152: {
        _457 = &_458;
        _463 = Wrapping::<i8>(const _);
        _462 = &_463;
        _456 = (move _457, move _462);
        _464 = (_456.0: &std::num::Wrapping<i8>);
        _465 = (_456.1: &std::num::Wrapping<i8>);
        _467 = <Wrapping<i8> as PartialEq>::eq(_464, _465) -> bb153;
    }

    bb153: {
        _466 = Not(move _467);
        switchInt(move _466) -> [0: bb155, otherwise: bb154];
    }

    bb154: {
        _468 = core::panicking::AssertKind::Eq;
        _470 = Option::<Arguments<'_>>::None;
        _469 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _468, _464, _465, move _470);
    }

    bb155: {
        _475 = Wrapping::<i16>(const _);
        _476 = Wrapping::<i16>(const -1_i16);
        _474 = <Wrapping<i16> as Div>::div(move _475, move _476) -> bb156;
    }

    bb156: {
        _473 = test::black_box::<Wrapping<i16>>(move _474) -> bb157;
    }

    bb157: {
        _472 = &_473;
        _478 = Wrapping::<i16>(const _);
        _477 = &_478;
        _471 = (move _472, move _477);
        _479 = (_471.0: &std::num::Wrapping<i16>);
        _480 = (_471.1: &std::num::Wrapping<i16>);
        _482 = <Wrapping<i16> as PartialEq>::eq(_479, _480) -> bb158;
    }

    bb158: {
        _481 = Not(move _482);
        switchInt(move _481) -> [0: bb160, otherwise: bb159];
    }

    bb159: {
        _483 = core::panicking::AssertKind::Eq;
        _485 = Option::<Arguments<'_>>::None;
        _484 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _483, _479, _480, move _485);
    }

    bb160: {
        _490 = Wrapping::<i32>(const _);
        _491 = Wrapping::<i32>(const -1_i32);
        _489 = <Wrapping<i32> as Div>::div(move _490, move _491) -> bb161;
    }

    bb161: {
        _488 = test::black_box::<Wrapping<i32>>(move _489) -> bb162;
    }

    bb162: {
        _487 = &_488;
        _493 = Wrapping::<i32>(const _);
        _492 = &_493;
        _486 = (move _487, move _492);
        _494 = (_486.0: &std::num::Wrapping<i32>);
        _495 = (_486.1: &std::num::Wrapping<i32>);
        _497 = <Wrapping<i32> as PartialEq>::eq(_494, _495) -> bb163;
    }

    bb163: {
        _496 = Not(move _497);
        switchInt(move _496) -> [0: bb165, otherwise: bb164];
    }

    bb164: {
        _498 = core::panicking::AssertKind::Eq;
        _500 = Option::<Arguments<'_>>::None;
        _499 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _498, _494, _495, move _500);
    }

    bb165: {
        _505 = Wrapping::<i64>(const _);
        _506 = Wrapping::<i64>(const -1_i64);
        _504 = <Wrapping<i64> as Div>::div(move _505, move _506) -> bb166;
    }

    bb166: {
        _503 = test::black_box::<Wrapping<i64>>(move _504) -> bb167;
    }

    bb167: {
        _502 = &_503;
        _508 = Wrapping::<i64>(const _);
        _507 = &_508;
        _501 = (move _502, move _507);
        _509 = (_501.0: &std::num::Wrapping<i64>);
        _510 = (_501.1: &std::num::Wrapping<i64>);
        _512 = <Wrapping<i64> as PartialEq>::eq(_509, _510) -> bb168;
    }

    bb168: {
        _511 = Not(move _512);
        switchInt(move _511) -> [0: bb170, otherwise: bb169];
    }

    bb169: {
        _513 = core::panicking::AssertKind::Eq;
        _515 = Option::<Arguments<'_>>::None;
        _514 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _513, _509, _510, move _515);
    }

    bb170: {
        _520 = Wrapping::<isize>(const _);
        _521 = Wrapping::<isize>(const -1_isize);
        _519 = <Wrapping<isize> as Div>::div(move _520, move _521) -> bb171;
    }

    bb171: {
        _518 = test::black_box::<Wrapping<isize>>(move _519) -> bb172;
    }

    bb172: {
        _517 = &_518;
        _523 = Wrapping::<isize>(const _);
        _522 = &_523;
        _516 = (move _517, move _522);
        _524 = (_516.0: &std::num::Wrapping<isize>);
        _525 = (_516.1: &std::num::Wrapping<isize>);
        _527 = <Wrapping<isize> as PartialEq>::eq(_524, _525) -> bb173;
    }

    bb173: {
        _526 = Not(move _527);
        switchInt(move _526) -> [0: bb175, otherwise: bb174];
    }

    bb174: {
        _528 = core::panicking::AssertKind::Eq;
        _530 = Option::<Arguments<'_>>::None;
        _529 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _528, _524, _525, move _530);
    }

    bb175: {
        _535 = Wrapping::<i8>(const _);
        _536 = Wrapping::<i8>(const -1_i8);
        _534 = <Wrapping<i8> as Rem>::rem(move _535, move _536) -> bb176;
    }

    bb176: {
        _533 = test::black_box::<Wrapping<i8>>(move _534) -> bb177;
    }

    bb177: {
        _532 = &_533;
        _538 = Wrapping::<i8>(const 0_i8);
        _537 = &_538;
        _531 = (move _532, move _537);
        _539 = (_531.0: &std::num::Wrapping<i8>);
        _540 = (_531.1: &std::num::Wrapping<i8>);
        _542 = <Wrapping<i8> as PartialEq>::eq(_539, _540) -> bb178;
    }

    bb178: {
        _541 = Not(move _542);
        switchInt(move _541) -> [0: bb180, otherwise: bb179];
    }

    bb179: {
        _543 = core::panicking::AssertKind::Eq;
        _545 = Option::<Arguments<'_>>::None;
        _544 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _543, _539, _540, move _545);
    }

    bb180: {
        _550 = Wrapping::<i16>(const _);
        _551 = Wrapping::<i16>(const -1_i16);
        _549 = <Wrapping<i16> as Rem>::rem(move _550, move _551) -> bb181;
    }

    bb181: {
        _548 = test::black_box::<Wrapping<i16>>(move _549) -> bb182;
    }

    bb182: {
        _547 = &_548;
        _553 = Wrapping::<i16>(const 0_i16);
        _552 = &_553;
        _546 = (move _547, move _552);
        _554 = (_546.0: &std::num::Wrapping<i16>);
        _555 = (_546.1: &std::num::Wrapping<i16>);
        _557 = <Wrapping<i16> as PartialEq>::eq(_554, _555) -> bb183;
    }

    bb183: {
        _556 = Not(move _557);
        switchInt(move _556) -> [0: bb185, otherwise: bb184];
    }

    bb184: {
        _558 = core::panicking::AssertKind::Eq;
        _560 = Option::<Arguments<'_>>::None;
        _559 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _558, _554, _555, move _560);
    }

    bb185: {
        _565 = Wrapping::<i32>(const _);
        _566 = Wrapping::<i32>(const -1_i32);
        _564 = <Wrapping<i32> as Rem>::rem(move _565, move _566) -> bb186;
    }

    bb186: {
        _563 = test::black_box::<Wrapping<i32>>(move _564) -> bb187;
    }

    bb187: {
        _562 = &_563;
        _568 = Wrapping::<i32>(const 0_i32);
        _567 = &_568;
        _561 = (move _562, move _567);
        _569 = (_561.0: &std::num::Wrapping<i32>);
        _570 = (_561.1: &std::num::Wrapping<i32>);
        _572 = <Wrapping<i32> as PartialEq>::eq(_569, _570) -> bb188;
    }

    bb188: {
        _571 = Not(move _572);
        switchInt(move _571) -> [0: bb190, otherwise: bb189];
    }

    bb189: {
        _573 = core::panicking::AssertKind::Eq;
        _575 = Option::<Arguments<'_>>::None;
        _574 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _573, _569, _570, move _575);
    }

    bb190: {
        _580 = Wrapping::<i64>(const _);
        _581 = Wrapping::<i64>(const -1_i64);
        _579 = <Wrapping<i64> as Rem>::rem(move _580, move _581) -> bb191;
    }

    bb191: {
        _578 = test::black_box::<Wrapping<i64>>(move _579) -> bb192;
    }

    bb192: {
        _577 = &_578;
        _583 = Wrapping::<i64>(const 0_i64);
        _582 = &_583;
        _576 = (move _577, move _582);
        _584 = (_576.0: &std::num::Wrapping<i64>);
        _585 = (_576.1: &std::num::Wrapping<i64>);
        _587 = <Wrapping<i64> as PartialEq>::eq(_584, _585) -> bb193;
    }

    bb193: {
        _586 = Not(move _587);
        switchInt(move _586) -> [0: bb195, otherwise: bb194];
    }

    bb194: {
        _588 = core::panicking::AssertKind::Eq;
        _590 = Option::<Arguments<'_>>::None;
        _589 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _588, _584, _585, move _590);
    }

    bb195: {
        _595 = Wrapping::<isize>(const _);
        _596 = Wrapping::<isize>(const -1_isize);
        _594 = <Wrapping<isize> as Rem>::rem(move _595, move _596) -> bb196;
    }

    bb196: {
        _593 = test::black_box::<Wrapping<isize>>(move _594) -> bb197;
    }

    bb197: {
        _592 = &_593;
        _598 = Wrapping::<isize>(const 0_isize);
        _597 = &_598;
        _591 = (move _592, move _597);
        _599 = (_591.0: &std::num::Wrapping<isize>);
        _600 = (_591.1: &std::num::Wrapping<isize>);
        _602 = <Wrapping<isize> as PartialEq>::eq(_599, _600) -> bb198;
    }

    bb198: {
        _601 = Not(move _602);
        switchInt(move _601) -> [0: bb200, otherwise: bb199];
    }

    bb199: {
        _603 = core::panicking::AssertKind::Eq;
        _605 = Option::<Arguments<'_>>::None;
        _604 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _603, _599, _600, move _605);
    }

    bb200: {
        _610 = Wrapping::<i8>(const 42_i8);
        _611 = Wrapping::<i8>(const 38_i8);
        _609 = <Wrapping<i8> as BitXor>::bitxor(move _610, move _611) -> bb201;
    }

    bb201: {
        _608 = test::black_box::<Wrapping<i8>>(move _609) -> bb202;
    }

    bb202: {
        _607 = &_608;
        _613 = Wrapping::<i8>(const 12_i8);
        _612 = &_613;
        _606 = (move _607, move _612);
        _614 = (_606.0: &std::num::Wrapping<i8>);
        _615 = (_606.1: &std::num::Wrapping<i8>);
        _617 = <Wrapping<i8> as PartialEq>::eq(_614, _615) -> bb203;
    }

    bb203: {
        _616 = Not(move _617);
        switchInt(move _616) -> [0: bb205, otherwise: bb204];
    }

    bb204: {
        _618 = core::panicking::AssertKind::Eq;
        _620 = Option::<Arguments<'_>>::None;
        _619 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _618, _614, _615, move _620);
    }

    bb205: {
        _625 = Wrapping::<i16>(const 42_i16);
        _626 = Wrapping::<i16>(const 38_i16);
        _624 = <Wrapping<i16> as BitXor>::bitxor(move _625, move _626) -> bb206;
    }

    bb206: {
        _623 = test::black_box::<Wrapping<i16>>(move _624) -> bb207;
    }

    bb207: {
        _622 = &_623;
        _628 = Wrapping::<i16>(const 12_i16);
        _627 = &_628;
        _621 = (move _622, move _627);
        _629 = (_621.0: &std::num::Wrapping<i16>);
        _630 = (_621.1: &std::num::Wrapping<i16>);
        _632 = <Wrapping<i16> as PartialEq>::eq(_629, _630) -> bb208;
    }

    bb208: {
        _631 = Not(move _632);
        switchInt(move _631) -> [0: bb210, otherwise: bb209];
    }

    bb209: {
        _633 = core::panicking::AssertKind::Eq;
        _635 = Option::<Arguments<'_>>::None;
        _634 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _633, _629, _630, move _635);
    }

    bb210: {
        _640 = Wrapping::<i32>(const 42_i32);
        _641 = Wrapping::<i32>(const 38_i32);
        _639 = <Wrapping<i32> as BitXor>::bitxor(move _640, move _641) -> bb211;
    }

    bb211: {
        _638 = test::black_box::<Wrapping<i32>>(move _639) -> bb212;
    }

    bb212: {
        _637 = &_638;
        _643 = Wrapping::<i32>(const 12_i32);
        _642 = &_643;
        _636 = (move _637, move _642);
        _644 = (_636.0: &std::num::Wrapping<i32>);
        _645 = (_636.1: &std::num::Wrapping<i32>);
        _647 = <Wrapping<i32> as PartialEq>::eq(_644, _645) -> bb213;
    }

    bb213: {
        _646 = Not(move _647);
        switchInt(move _646) -> [0: bb215, otherwise: bb214];
    }

    bb214: {
        _648 = core::panicking::AssertKind::Eq;
        _650 = Option::<Arguments<'_>>::None;
        _649 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _648, _644, _645, move _650);
    }

    bb215: {
        _655 = Wrapping::<i64>(const 42_i64);
        _656 = Wrapping::<i64>(const 38_i64);
        _654 = <Wrapping<i64> as BitXor>::bitxor(move _655, move _656) -> bb216;
    }

    bb216: {
        _653 = test::black_box::<Wrapping<i64>>(move _654) -> bb217;
    }

    bb217: {
        _652 = &_653;
        _658 = Wrapping::<i64>(const 12_i64);
        _657 = &_658;
        _651 = (move _652, move _657);
        _659 = (_651.0: &std::num::Wrapping<i64>);
        _660 = (_651.1: &std::num::Wrapping<i64>);
        _662 = <Wrapping<i64> as PartialEq>::eq(_659, _660) -> bb218;
    }

    bb218: {
        _661 = Not(move _662);
        switchInt(move _661) -> [0: bb220, otherwise: bb219];
    }

    bb219: {
        _663 = core::panicking::AssertKind::Eq;
        _665 = Option::<Arguments<'_>>::None;
        _664 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _663, _659, _660, move _665);
    }

    bb220: {
        _670 = Wrapping::<isize>(const 42_isize);
        _671 = Wrapping::<isize>(const 38_isize);
        _669 = <Wrapping<isize> as BitXor>::bitxor(move _670, move _671) -> bb221;
    }

    bb221: {
        _668 = test::black_box::<Wrapping<isize>>(move _669) -> bb222;
    }

    bb222: {
        _667 = &_668;
        _673 = Wrapping::<isize>(const 12_isize);
        _672 = &_673;
        _666 = (move _667, move _672);
        _674 = (_666.0: &std::num::Wrapping<isize>);
        _675 = (_666.1: &std::num::Wrapping<isize>);
        _677 = <Wrapping<isize> as PartialEq>::eq(_674, _675) -> bb223;
    }

    bb223: {
        _676 = Not(move _677);
        switchInt(move _676) -> [0: bb225, otherwise: bb224];
    }

    bb224: {
        _678 = core::panicking::AssertKind::Eq;
        _680 = Option::<Arguments<'_>>::None;
        _679 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _678, _674, _675, move _680);
    }

    bb225: {
        _685 = Wrapping::<u8>(const 42_u8);
        _686 = Wrapping::<u8>(const 38_u8);
        _684 = <Wrapping<u8> as BitXor>::bitxor(move _685, move _686) -> bb226;
    }

    bb226: {
        _683 = test::black_box::<Wrapping<u8>>(move _684) -> bb227;
    }

    bb227: {
        _682 = &_683;
        _688 = Wrapping::<u8>(const 12_u8);
        _687 = &_688;
        _681 = (move _682, move _687);
        _689 = (_681.0: &std::num::Wrapping<u8>);
        _690 = (_681.1: &std::num::Wrapping<u8>);
        _692 = <Wrapping<u8> as PartialEq>::eq(_689, _690) -> bb228;
    }

    bb228: {
        _691 = Not(move _692);
        switchInt(move _691) -> [0: bb230, otherwise: bb229];
    }

    bb229: {
        _693 = core::panicking::AssertKind::Eq;
        _695 = Option::<Arguments<'_>>::None;
        _694 = core::panicking::assert_failed::<Wrapping<u8>, Wrapping<u8>>(move _693, _689, _690, move _695);
    }

    bb230: {
        _700 = Wrapping::<u16>(const 42_u16);
        _701 = Wrapping::<u16>(const 38_u16);
        _699 = <Wrapping<u16> as BitXor>::bitxor(move _700, move _701) -> bb231;
    }

    bb231: {
        _698 = test::black_box::<Wrapping<u16>>(move _699) -> bb232;
    }

    bb232: {
        _697 = &_698;
        _703 = Wrapping::<u16>(const 12_u16);
        _702 = &_703;
        _696 = (move _697, move _702);
        _704 = (_696.0: &std::num::Wrapping<u16>);
        _705 = (_696.1: &std::num::Wrapping<u16>);
        _707 = <Wrapping<u16> as PartialEq>::eq(_704, _705) -> bb233;
    }

    bb233: {
        _706 = Not(move _707);
        switchInt(move _706) -> [0: bb235, otherwise: bb234];
    }

    bb234: {
        _708 = core::panicking::AssertKind::Eq;
        _710 = Option::<Arguments<'_>>::None;
        _709 = core::panicking::assert_failed::<Wrapping<u16>, Wrapping<u16>>(move _708, _704, _705, move _710);
    }

    bb235: {
        _715 = Wrapping::<u32>(const 42_u32);
        _716 = Wrapping::<u32>(const 38_u32);
        _714 = <Wrapping<u32> as BitXor>::bitxor(move _715, move _716) -> bb236;
    }

    bb236: {
        _713 = test::black_box::<Wrapping<u32>>(move _714) -> bb237;
    }

    bb237: {
        _712 = &_713;
        _718 = Wrapping::<u32>(const 12_u32);
        _717 = &_718;
        _711 = (move _712, move _717);
        _719 = (_711.0: &std::num::Wrapping<u32>);
        _720 = (_711.1: &std::num::Wrapping<u32>);
        _722 = <Wrapping<u32> as PartialEq>::eq(_719, _720) -> bb238;
    }

    bb238: {
        _721 = Not(move _722);
        switchInt(move _721) -> [0: bb240, otherwise: bb239];
    }

    bb239: {
        _723 = core::panicking::AssertKind::Eq;
        _725 = Option::<Arguments<'_>>::None;
        _724 = core::panicking::assert_failed::<Wrapping<u32>, Wrapping<u32>>(move _723, _719, _720, move _725);
    }

    bb240: {
        _730 = Wrapping::<u64>(const 42_u64);
        _731 = Wrapping::<u64>(const 38_u64);
        _729 = <Wrapping<u64> as BitXor>::bitxor(move _730, move _731) -> bb241;
    }

    bb241: {
        _728 = test::black_box::<Wrapping<u64>>(move _729) -> bb242;
    }

    bb242: {
        _727 = &_728;
        _733 = Wrapping::<u64>(const 12_u64);
        _732 = &_733;
        _726 = (move _727, move _732);
        _734 = (_726.0: &std::num::Wrapping<u64>);
        _735 = (_726.1: &std::num::Wrapping<u64>);
        _737 = <Wrapping<u64> as PartialEq>::eq(_734, _735) -> bb243;
    }

    bb243: {
        _736 = Not(move _737);
        switchInt(move _736) -> [0: bb245, otherwise: bb244];
    }

    bb244: {
        _738 = core::panicking::AssertKind::Eq;
        _740 = Option::<Arguments<'_>>::None;
        _739 = core::panicking::assert_failed::<Wrapping<u64>, Wrapping<u64>>(move _738, _734, _735, move _740);
    }

    bb245: {
        _745 = Wrapping::<usize>(const 42_usize);
        _746 = Wrapping::<usize>(const 38_usize);
        _744 = <Wrapping<usize> as BitXor>::bitxor(move _745, move _746) -> bb246;
    }

    bb246: {
        _743 = test::black_box::<Wrapping<usize>>(move _744) -> bb247;
    }

    bb247: {
        _742 = &_743;
        _748 = Wrapping::<usize>(const 12_usize);
        _747 = &_748;
        _741 = (move _742, move _747);
        _749 = (_741.0: &std::num::Wrapping<usize>);
        _750 = (_741.1: &std::num::Wrapping<usize>);
        _752 = <Wrapping<usize> as PartialEq>::eq(_749, _750) -> bb248;
    }

    bb248: {
        _751 = Not(move _752);
        switchInt(move _751) -> [0: bb250, otherwise: bb249];
    }

    bb249: {
        _753 = core::panicking::AssertKind::Eq;
        _755 = Option::<Arguments<'_>>::None;
        _754 = core::panicking::assert_failed::<Wrapping<usize>, Wrapping<usize>>(move _753, _749, _750, move _755);
    }

    bb250: {
        _760 = Wrapping::<i8>(const 42_i8);
        _761 = Wrapping::<i8>(const 38_i8);
        _759 = <Wrapping<i8> as BitOr>::bitor(move _760, move _761) -> bb251;
    }

    bb251: {
        _758 = test::black_box::<Wrapping<i8>>(move _759) -> bb252;
    }

    bb252: {
        _757 = &_758;
        _763 = Wrapping::<i8>(const 46_i8);
        _762 = &_763;
        _756 = (move _757, move _762);
        _764 = (_756.0: &std::num::Wrapping<i8>);
        _765 = (_756.1: &std::num::Wrapping<i8>);
        _767 = <Wrapping<i8> as PartialEq>::eq(_764, _765) -> bb253;
    }

    bb253: {
        _766 = Not(move _767);
        switchInt(move _766) -> [0: bb255, otherwise: bb254];
    }

    bb254: {
        _768 = core::panicking::AssertKind::Eq;
        _770 = Option::<Arguments<'_>>::None;
        _769 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _768, _764, _765, move _770);
    }

    bb255: {
        _775 = Wrapping::<i16>(const 42_i16);
        _776 = Wrapping::<i16>(const 38_i16);
        _774 = <Wrapping<i16> as BitOr>::bitor(move _775, move _776) -> bb256;
    }

    bb256: {
        _773 = test::black_box::<Wrapping<i16>>(move _774) -> bb257;
    }

    bb257: {
        _772 = &_773;
        _778 = Wrapping::<i16>(const 46_i16);
        _777 = &_778;
        _771 = (move _772, move _777);
        _779 = (_771.0: &std::num::Wrapping<i16>);
        _780 = (_771.1: &std::num::Wrapping<i16>);
        _782 = <Wrapping<i16> as PartialEq>::eq(_779, _780) -> bb258;
    }

    bb258: {
        _781 = Not(move _782);
        switchInt(move _781) -> [0: bb260, otherwise: bb259];
    }

    bb259: {
        _783 = core::panicking::AssertKind::Eq;
        _785 = Option::<Arguments<'_>>::None;
        _784 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _783, _779, _780, move _785);
    }

    bb260: {
        _790 = Wrapping::<i32>(const 42_i32);
        _791 = Wrapping::<i32>(const 38_i32);
        _789 = <Wrapping<i32> as BitOr>::bitor(move _790, move _791) -> bb261;
    }

    bb261: {
        _788 = test::black_box::<Wrapping<i32>>(move _789) -> bb262;
    }

    bb262: {
        _787 = &_788;
        _793 = Wrapping::<i32>(const 46_i32);
        _792 = &_793;
        _786 = (move _787, move _792);
        _794 = (_786.0: &std::num::Wrapping<i32>);
        _795 = (_786.1: &std::num::Wrapping<i32>);
        _797 = <Wrapping<i32> as PartialEq>::eq(_794, _795) -> bb263;
    }

    bb263: {
        _796 = Not(move _797);
        switchInt(move _796) -> [0: bb265, otherwise: bb264];
    }

    bb264: {
        _798 = core::panicking::AssertKind::Eq;
        _800 = Option::<Arguments<'_>>::None;
        _799 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _798, _794, _795, move _800);
    }

    bb265: {
        _805 = Wrapping::<i64>(const 42_i64);
        _806 = Wrapping::<i64>(const 38_i64);
        _804 = <Wrapping<i64> as BitOr>::bitor(move _805, move _806) -> bb266;
    }

    bb266: {
        _803 = test::black_box::<Wrapping<i64>>(move _804) -> bb267;
    }

    bb267: {
        _802 = &_803;
        _808 = Wrapping::<i64>(const 46_i64);
        _807 = &_808;
        _801 = (move _802, move _807);
        _809 = (_801.0: &std::num::Wrapping<i64>);
        _810 = (_801.1: &std::num::Wrapping<i64>);
        _812 = <Wrapping<i64> as PartialEq>::eq(_809, _810) -> bb268;
    }

    bb268: {
        _811 = Not(move _812);
        switchInt(move _811) -> [0: bb270, otherwise: bb269];
    }

    bb269: {
        _813 = core::panicking::AssertKind::Eq;
        _815 = Option::<Arguments<'_>>::None;
        _814 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _813, _809, _810, move _815);
    }

    bb270: {
        _820 = Wrapping::<isize>(const 42_isize);
        _821 = Wrapping::<isize>(const 38_isize);
        _819 = <Wrapping<isize> as BitOr>::bitor(move _820, move _821) -> bb271;
    }

    bb271: {
        _818 = test::black_box::<Wrapping<isize>>(move _819) -> bb272;
    }

    bb272: {
        _817 = &_818;
        _823 = Wrapping::<isize>(const 46_isize);
        _822 = &_823;
        _816 = (move _817, move _822);
        _824 = (_816.0: &std::num::Wrapping<isize>);
        _825 = (_816.1: &std::num::Wrapping<isize>);
        _827 = <Wrapping<isize> as PartialEq>::eq(_824, _825) -> bb273;
    }

    bb273: {
        _826 = Not(move _827);
        switchInt(move _826) -> [0: bb275, otherwise: bb274];
    }

    bb274: {
        _828 = core::panicking::AssertKind::Eq;
        _830 = Option::<Arguments<'_>>::None;
        _829 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _828, _824, _825, move _830);
    }

    bb275: {
        _835 = Wrapping::<u8>(const 42_u8);
        _836 = Wrapping::<u8>(const 38_u8);
        _834 = <Wrapping<u8> as BitOr>::bitor(move _835, move _836) -> bb276;
    }

    bb276: {
        _833 = test::black_box::<Wrapping<u8>>(move _834) -> bb277;
    }

    bb277: {
        _832 = &_833;
        _838 = Wrapping::<u8>(const 46_u8);
        _837 = &_838;
        _831 = (move _832, move _837);
        _839 = (_831.0: &std::num::Wrapping<u8>);
        _840 = (_831.1: &std::num::Wrapping<u8>);
        _842 = <Wrapping<u8> as PartialEq>::eq(_839, _840) -> bb278;
    }

    bb278: {
        _841 = Not(move _842);
        switchInt(move _841) -> [0: bb280, otherwise: bb279];
    }

    bb279: {
        _843 = core::panicking::AssertKind::Eq;
        _845 = Option::<Arguments<'_>>::None;
        _844 = core::panicking::assert_failed::<Wrapping<u8>, Wrapping<u8>>(move _843, _839, _840, move _845);
    }

    bb280: {
        _850 = Wrapping::<u16>(const 42_u16);
        _851 = Wrapping::<u16>(const 38_u16);
        _849 = <Wrapping<u16> as BitOr>::bitor(move _850, move _851) -> bb281;
    }

    bb281: {
        _848 = test::black_box::<Wrapping<u16>>(move _849) -> bb282;
    }

    bb282: {
        _847 = &_848;
        _853 = Wrapping::<u16>(const 46_u16);
        _852 = &_853;
        _846 = (move _847, move _852);
        _854 = (_846.0: &std::num::Wrapping<u16>);
        _855 = (_846.1: &std::num::Wrapping<u16>);
        _857 = <Wrapping<u16> as PartialEq>::eq(_854, _855) -> bb283;
    }

    bb283: {
        _856 = Not(move _857);
        switchInt(move _856) -> [0: bb285, otherwise: bb284];
    }

    bb284: {
        _858 = core::panicking::AssertKind::Eq;
        _860 = Option::<Arguments<'_>>::None;
        _859 = core::panicking::assert_failed::<Wrapping<u16>, Wrapping<u16>>(move _858, _854, _855, move _860);
    }

    bb285: {
        _865 = Wrapping::<u32>(const 42_u32);
        _866 = Wrapping::<u32>(const 38_u32);
        _864 = <Wrapping<u32> as BitOr>::bitor(move _865, move _866) -> bb286;
    }

    bb286: {
        _863 = test::black_box::<Wrapping<u32>>(move _864) -> bb287;
    }

    bb287: {
        _862 = &_863;
        _868 = Wrapping::<u32>(const 46_u32);
        _867 = &_868;
        _861 = (move _862, move _867);
        _869 = (_861.0: &std::num::Wrapping<u32>);
        _870 = (_861.1: &std::num::Wrapping<u32>);
        _872 = <Wrapping<u32> as PartialEq>::eq(_869, _870) -> bb288;
    }

    bb288: {
        _871 = Not(move _872);
        switchInt(move _871) -> [0: bb290, otherwise: bb289];
    }

    bb289: {
        _873 = core::panicking::AssertKind::Eq;
        _875 = Option::<Arguments<'_>>::None;
        _874 = core::panicking::assert_failed::<Wrapping<u32>, Wrapping<u32>>(move _873, _869, _870, move _875);
    }

    bb290: {
        _880 = Wrapping::<u64>(const 42_u64);
        _881 = Wrapping::<u64>(const 38_u64);
        _879 = <Wrapping<u64> as BitOr>::bitor(move _880, move _881) -> bb291;
    }

    bb291: {
        _878 = test::black_box::<Wrapping<u64>>(move _879) -> bb292;
    }

    bb292: {
        _877 = &_878;
        _883 = Wrapping::<u64>(const 46_u64);
        _882 = &_883;
        _876 = (move _877, move _882);
        _884 = (_876.0: &std::num::Wrapping<u64>);
        _885 = (_876.1: &std::num::Wrapping<u64>);
        _887 = <Wrapping<u64> as PartialEq>::eq(_884, _885) -> bb293;
    }

    bb293: {
        _886 = Not(move _887);
        switchInt(move _886) -> [0: bb295, otherwise: bb294];
    }

    bb294: {
        _888 = core::panicking::AssertKind::Eq;
        _890 = Option::<Arguments<'_>>::None;
        _889 = core::panicking::assert_failed::<Wrapping<u64>, Wrapping<u64>>(move _888, _884, _885, move _890);
    }

    bb295: {
        _895 = Wrapping::<usize>(const 42_usize);
        _896 = Wrapping::<usize>(const 38_usize);
        _894 = <Wrapping<usize> as BitOr>::bitor(move _895, move _896) -> bb296;
    }

    bb296: {
        _893 = test::black_box::<Wrapping<usize>>(move _894) -> bb297;
    }

    bb297: {
        _892 = &_893;
        _898 = Wrapping::<usize>(const 46_usize);
        _897 = &_898;
        _891 = (move _892, move _897);
        _899 = (_891.0: &std::num::Wrapping<usize>);
        _900 = (_891.1: &std::num::Wrapping<usize>);
        _902 = <Wrapping<usize> as PartialEq>::eq(_899, _900) -> bb298;
    }

    bb298: {
        _901 = Not(move _902);
        switchInt(move _901) -> [0: bb300, otherwise: bb299];
    }

    bb299: {
        _903 = core::panicking::AssertKind::Eq;
        _905 = Option::<Arguments<'_>>::None;
        _904 = core::panicking::assert_failed::<Wrapping<usize>, Wrapping<usize>>(move _903, _899, _900, move _905);
    }

    bb300: {
        _910 = Wrapping::<i8>(const 42_i8);
        _911 = Wrapping::<i8>(const 38_i8);
        _909 = <Wrapping<i8> as BitAnd>::bitand(move _910, move _911) -> bb301;
    }

    bb301: {
        _908 = test::black_box::<Wrapping<i8>>(move _909) -> bb302;
    }

    bb302: {
        _907 = &_908;
        _913 = Wrapping::<i8>(const 34_i8);
        _912 = &_913;
        _906 = (move _907, move _912);
        _914 = (_906.0: &std::num::Wrapping<i8>);
        _915 = (_906.1: &std::num::Wrapping<i8>);
        _917 = <Wrapping<i8> as PartialEq>::eq(_914, _915) -> bb303;
    }

    bb303: {
        _916 = Not(move _917);
        switchInt(move _916) -> [0: bb305, otherwise: bb304];
    }

    bb304: {
        _918 = core::panicking::AssertKind::Eq;
        _920 = Option::<Arguments<'_>>::None;
        _919 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _918, _914, _915, move _920);
    }

    bb305: {
        _925 = Wrapping::<i16>(const 42_i16);
        _926 = Wrapping::<i16>(const 38_i16);
        _924 = <Wrapping<i16> as BitAnd>::bitand(move _925, move _926) -> bb306;
    }

    bb306: {
        _923 = test::black_box::<Wrapping<i16>>(move _924) -> bb307;
    }

    bb307: {
        _922 = &_923;
        _928 = Wrapping::<i16>(const 34_i16);
        _927 = &_928;
        _921 = (move _922, move _927);
        _929 = (_921.0: &std::num::Wrapping<i16>);
        _930 = (_921.1: &std::num::Wrapping<i16>);
        _932 = <Wrapping<i16> as PartialEq>::eq(_929, _930) -> bb308;
    }

    bb308: {
        _931 = Not(move _932);
        switchInt(move _931) -> [0: bb310, otherwise: bb309];
    }

    bb309: {
        _933 = core::panicking::AssertKind::Eq;
        _935 = Option::<Arguments<'_>>::None;
        _934 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _933, _929, _930, move _935);
    }

    bb310: {
        _940 = Wrapping::<i32>(const 42_i32);
        _941 = Wrapping::<i32>(const 38_i32);
        _939 = <Wrapping<i32> as BitAnd>::bitand(move _940, move _941) -> bb311;
    }

    bb311: {
        _938 = test::black_box::<Wrapping<i32>>(move _939) -> bb312;
    }

    bb312: {
        _937 = &_938;
        _943 = Wrapping::<i32>(const 34_i32);
        _942 = &_943;
        _936 = (move _937, move _942);
        _944 = (_936.0: &std::num::Wrapping<i32>);
        _945 = (_936.1: &std::num::Wrapping<i32>);
        _947 = <Wrapping<i32> as PartialEq>::eq(_944, _945) -> bb313;
    }

    bb313: {
        _946 = Not(move _947);
        switchInt(move _946) -> [0: bb315, otherwise: bb314];
    }

    bb314: {
        _948 = core::panicking::AssertKind::Eq;
        _950 = Option::<Arguments<'_>>::None;
        _949 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _948, _944, _945, move _950);
    }

    bb315: {
        _955 = Wrapping::<i64>(const 42_i64);
        _956 = Wrapping::<i64>(const 38_i64);
        _954 = <Wrapping<i64> as BitAnd>::bitand(move _955, move _956) -> bb316;
    }

    bb316: {
        _953 = test::black_box::<Wrapping<i64>>(move _954) -> bb317;
    }

    bb317: {
        _952 = &_953;
        _958 = Wrapping::<i64>(const 34_i64);
        _957 = &_958;
        _951 = (move _952, move _957);
        _959 = (_951.0: &std::num::Wrapping<i64>);
        _960 = (_951.1: &std::num::Wrapping<i64>);
        _962 = <Wrapping<i64> as PartialEq>::eq(_959, _960) -> bb318;
    }

    bb318: {
        _961 = Not(move _962);
        switchInt(move _961) -> [0: bb320, otherwise: bb319];
    }

    bb319: {
        _963 = core::panicking::AssertKind::Eq;
        _965 = Option::<Arguments<'_>>::None;
        _964 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _963, _959, _960, move _965);
    }

    bb320: {
        _970 = Wrapping::<isize>(const 42_isize);
        _971 = Wrapping::<isize>(const 38_isize);
        _969 = <Wrapping<isize> as BitAnd>::bitand(move _970, move _971) -> bb321;
    }

    bb321: {
        _968 = test::black_box::<Wrapping<isize>>(move _969) -> bb322;
    }

    bb322: {
        _967 = &_968;
        _973 = Wrapping::<isize>(const 34_isize);
        _972 = &_973;
        _966 = (move _967, move _972);
        _974 = (_966.0: &std::num::Wrapping<isize>);
        _975 = (_966.1: &std::num::Wrapping<isize>);
        _977 = <Wrapping<isize> as PartialEq>::eq(_974, _975) -> bb323;
    }

    bb323: {
        _976 = Not(move _977);
        switchInt(move _976) -> [0: bb325, otherwise: bb324];
    }

    bb324: {
        _978 = core::panicking::AssertKind::Eq;
        _980 = Option::<Arguments<'_>>::None;
        _979 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _978, _974, _975, move _980);
    }

    bb325: {
        _985 = Wrapping::<u8>(const 42_u8);
        _986 = Wrapping::<u8>(const 38_u8);
        _984 = <Wrapping<u8> as BitAnd>::bitand(move _985, move _986) -> bb326;
    }

    bb326: {
        _983 = test::black_box::<Wrapping<u8>>(move _984) -> bb327;
    }

    bb327: {
        _982 = &_983;
        _988 = Wrapping::<u8>(const 34_u8);
        _987 = &_988;
        _981 = (move _982, move _987);
        _989 = (_981.0: &std::num::Wrapping<u8>);
        _990 = (_981.1: &std::num::Wrapping<u8>);
        _992 = <Wrapping<u8> as PartialEq>::eq(_989, _990) -> bb328;
    }

    bb328: {
        _991 = Not(move _992);
        switchInt(move _991) -> [0: bb330, otherwise: bb329];
    }

    bb329: {
        _993 = core::panicking::AssertKind::Eq;
        _995 = Option::<Arguments<'_>>::None;
        _994 = core::panicking::assert_failed::<Wrapping<u8>, Wrapping<u8>>(move _993, _989, _990, move _995);
    }

    bb330: {
        _1000 = Wrapping::<u16>(const 42_u16);
        _1001 = Wrapping::<u16>(const 38_u16);
        _999 = <Wrapping<u16> as BitAnd>::bitand(move _1000, move _1001) -> bb331;
    }

    bb331: {
        _998 = test::black_box::<Wrapping<u16>>(move _999) -> bb332;
    }

    bb332: {
        _997 = &_998;
        _1003 = Wrapping::<u16>(const 34_u16);
        _1002 = &_1003;
        _996 = (move _997, move _1002);
        _1004 = (_996.0: &std::num::Wrapping<u16>);
        _1005 = (_996.1: &std::num::Wrapping<u16>);
        _1007 = <Wrapping<u16> as PartialEq>::eq(_1004, _1005) -> bb333;
    }

    bb333: {
        _1006 = Not(move _1007);
        switchInt(move _1006) -> [0: bb335, otherwise: bb334];
    }

    bb334: {
        _1008 = core::panicking::AssertKind::Eq;
        _1010 = Option::<Arguments<'_>>::None;
        _1009 = core::panicking::assert_failed::<Wrapping<u16>, Wrapping<u16>>(move _1008, _1004, _1005, move _1010);
    }

    bb335: {
        _1015 = Wrapping::<u32>(const 42_u32);
        _1016 = Wrapping::<u32>(const 38_u32);
        _1014 = <Wrapping<u32> as BitAnd>::bitand(move _1015, move _1016) -> bb336;
    }

    bb336: {
        _1013 = test::black_box::<Wrapping<u32>>(move _1014) -> bb337;
    }

    bb337: {
        _1012 = &_1013;
        _1018 = Wrapping::<u32>(const 34_u32);
        _1017 = &_1018;
        _1011 = (move _1012, move _1017);
        _1019 = (_1011.0: &std::num::Wrapping<u32>);
        _1020 = (_1011.1: &std::num::Wrapping<u32>);
        _1022 = <Wrapping<u32> as PartialEq>::eq(_1019, _1020) -> bb338;
    }

    bb338: {
        _1021 = Not(move _1022);
        switchInt(move _1021) -> [0: bb340, otherwise: bb339];
    }

    bb339: {
        _1023 = core::panicking::AssertKind::Eq;
        _1025 = Option::<Arguments<'_>>::None;
        _1024 = core::panicking::assert_failed::<Wrapping<u32>, Wrapping<u32>>(move _1023, _1019, _1020, move _1025);
    }

    bb340: {
        _1030 = Wrapping::<u64>(const 42_u64);
        _1031 = Wrapping::<u64>(const 38_u64);
        _1029 = <Wrapping<u64> as BitAnd>::bitand(move _1030, move _1031) -> bb341;
    }

    bb341: {
        _1028 = test::black_box::<Wrapping<u64>>(move _1029) -> bb342;
    }

    bb342: {
        _1027 = &_1028;
        _1033 = Wrapping::<u64>(const 34_u64);
        _1032 = &_1033;
        _1026 = (move _1027, move _1032);
        _1034 = (_1026.0: &std::num::Wrapping<u64>);
        _1035 = (_1026.1: &std::num::Wrapping<u64>);
        _1037 = <Wrapping<u64> as PartialEq>::eq(_1034, _1035) -> bb343;
    }

    bb343: {
        _1036 = Not(move _1037);
        switchInt(move _1036) -> [0: bb345, otherwise: bb344];
    }

    bb344: {
        _1038 = core::panicking::AssertKind::Eq;
        _1040 = Option::<Arguments<'_>>::None;
        _1039 = core::panicking::assert_failed::<Wrapping<u64>, Wrapping<u64>>(move _1038, _1034, _1035, move _1040);
    }

    bb345: {
        _1045 = Wrapping::<usize>(const 42_usize);
        _1046 = Wrapping::<usize>(const 38_usize);
        _1044 = <Wrapping<usize> as BitAnd>::bitand(move _1045, move _1046) -> bb346;
    }

    bb346: {
        _1043 = test::black_box::<Wrapping<usize>>(move _1044) -> bb347;
    }

    bb347: {
        _1042 = &_1043;
        _1048 = Wrapping::<usize>(const 34_usize);
        _1047 = &_1048;
        _1041 = (move _1042, move _1047);
        _1049 = (_1041.0: &std::num::Wrapping<usize>);
        _1050 = (_1041.1: &std::num::Wrapping<usize>);
        _1052 = <Wrapping<usize> as PartialEq>::eq(_1049, _1050) -> bb348;
    }

    bb348: {
        _1051 = Not(move _1052);
        switchInt(move _1051) -> [0: bb350, otherwise: bb349];
    }

    bb349: {
        _1053 = core::panicking::AssertKind::Eq;
        _1055 = Option::<Arguments<'_>>::None;
        _1054 = core::panicking::assert_failed::<Wrapping<usize>, Wrapping<usize>>(move _1053, _1049, _1050, move _1055);
    }

    bb350: {
        return;
    }
}

fn test_op_assigns() -> () {
    let mut _0: ();
    let mut _1: std::num::Wrapping<i8>;
    let mut _2: std::num::Wrapping<i8>;
    let mut _3: std::num::Wrapping<i8>;
    let _4: ();
    let mut _5: &mut std::num::Wrapping<i8>;
    let mut _6: std::num::Wrapping<i8>;
    let mut _7: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _8: &std::num::Wrapping<i8>;
    let _9: std::num::Wrapping<i8>;
    let mut _10: std::num::Wrapping<i8>;
    let mut _11: &std::num::Wrapping<i8>;
    let _12: std::num::Wrapping<i8>;
    let mut _15: bool;
    let mut _16: bool;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _20: std::num::Wrapping<i8>;
    let mut _21: std::num::Wrapping<i8>;
    let mut _22: std::num::Wrapping<i8>;
    let _23: ();
    let mut _24: &mut std::num::Wrapping<i8>;
    let mut _25: &std::num::Wrapping<i8>;
    let _26: std::num::Wrapping<i8>;
    let mut _27: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _28: &std::num::Wrapping<i8>;
    let _29: std::num::Wrapping<i8>;
    let mut _30: std::num::Wrapping<i8>;
    let mut _31: &std::num::Wrapping<i8>;
    let _32: std::num::Wrapping<i8>;
    let mut _35: bool;
    let mut _36: bool;
    let _38: !;
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _40: std::num::Wrapping<i16>;
    let mut _41: std::num::Wrapping<i16>;
    let mut _42: std::num::Wrapping<i16>;
    let _43: ();
    let mut _44: &mut std::num::Wrapping<i16>;
    let mut _45: std::num::Wrapping<i16>;
    let mut _46: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _47: &std::num::Wrapping<i16>;
    let _48: std::num::Wrapping<i16>;
    let mut _49: std::num::Wrapping<i16>;
    let mut _50: &std::num::Wrapping<i16>;
    let _51: std::num::Wrapping<i16>;
    let mut _54: bool;
    let mut _55: bool;
    let _57: !;
    let mut _58: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _59: std::num::Wrapping<i16>;
    let mut _60: std::num::Wrapping<i16>;
    let mut _61: std::num::Wrapping<i16>;
    let _62: ();
    let mut _63: &mut std::num::Wrapping<i16>;
    let mut _64: &std::num::Wrapping<i16>;
    let _65: std::num::Wrapping<i16>;
    let mut _66: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _67: &std::num::Wrapping<i16>;
    let _68: std::num::Wrapping<i16>;
    let mut _69: std::num::Wrapping<i16>;
    let mut _70: &std::num::Wrapping<i16>;
    let _71: std::num::Wrapping<i16>;
    let mut _74: bool;
    let mut _75: bool;
    let _77: !;
    let mut _78: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _79: std::num::Wrapping<i32>;
    let mut _80: std::num::Wrapping<i32>;
    let mut _81: std::num::Wrapping<i32>;
    let _82: ();
    let mut _83: &mut std::num::Wrapping<i32>;
    let mut _84: std::num::Wrapping<i32>;
    let mut _85: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _86: &std::num::Wrapping<i32>;
    let _87: std::num::Wrapping<i32>;
    let mut _88: std::num::Wrapping<i32>;
    let mut _89: &std::num::Wrapping<i32>;
    let _90: std::num::Wrapping<i32>;
    let mut _93: bool;
    let mut _94: bool;
    let _96: !;
    let mut _97: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _98: std::num::Wrapping<i32>;
    let mut _99: std::num::Wrapping<i32>;
    let mut _100: std::num::Wrapping<i32>;
    let _101: ();
    let mut _102: &mut std::num::Wrapping<i32>;
    let mut _103: &std::num::Wrapping<i32>;
    let _104: std::num::Wrapping<i32>;
    let mut _105: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _106: &std::num::Wrapping<i32>;
    let _107: std::num::Wrapping<i32>;
    let mut _108: std::num::Wrapping<i32>;
    let mut _109: &std::num::Wrapping<i32>;
    let _110: std::num::Wrapping<i32>;
    let mut _113: bool;
    let mut _114: bool;
    let _116: !;
    let mut _117: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _118: std::num::Wrapping<i64>;
    let mut _119: std::num::Wrapping<i64>;
    let mut _120: std::num::Wrapping<i64>;
    let _121: ();
    let mut _122: &mut std::num::Wrapping<i64>;
    let mut _123: std::num::Wrapping<i64>;
    let mut _124: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _125: &std::num::Wrapping<i64>;
    let _126: std::num::Wrapping<i64>;
    let mut _127: std::num::Wrapping<i64>;
    let mut _128: &std::num::Wrapping<i64>;
    let _129: std::num::Wrapping<i64>;
    let mut _132: bool;
    let mut _133: bool;
    let _135: !;
    let mut _136: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _137: std::num::Wrapping<i64>;
    let mut _138: std::num::Wrapping<i64>;
    let mut _139: std::num::Wrapping<i64>;
    let _140: ();
    let mut _141: &mut std::num::Wrapping<i64>;
    let mut _142: &std::num::Wrapping<i64>;
    let _143: std::num::Wrapping<i64>;
    let mut _144: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _145: &std::num::Wrapping<i64>;
    let _146: std::num::Wrapping<i64>;
    let mut _147: std::num::Wrapping<i64>;
    let mut _148: &std::num::Wrapping<i64>;
    let _149: std::num::Wrapping<i64>;
    let mut _152: bool;
    let mut _153: bool;
    let _155: !;
    let mut _156: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _157: std::num::Wrapping<isize>;
    let mut _158: std::num::Wrapping<isize>;
    let mut _159: std::num::Wrapping<isize>;
    let _160: ();
    let mut _161: &mut std::num::Wrapping<isize>;
    let mut _162: std::num::Wrapping<isize>;
    let mut _163: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _164: &std::num::Wrapping<isize>;
    let _165: std::num::Wrapping<isize>;
    let mut _166: std::num::Wrapping<isize>;
    let mut _167: &std::num::Wrapping<isize>;
    let _168: std::num::Wrapping<isize>;
    let mut _171: bool;
    let mut _172: bool;
    let _174: !;
    let mut _175: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _176: std::num::Wrapping<isize>;
    let mut _177: std::num::Wrapping<isize>;
    let mut _178: std::num::Wrapping<isize>;
    let _179: ();
    let mut _180: &mut std::num::Wrapping<isize>;
    let mut _181: &std::num::Wrapping<isize>;
    let _182: std::num::Wrapping<isize>;
    let mut _183: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _184: &std::num::Wrapping<isize>;
    let _185: std::num::Wrapping<isize>;
    let mut _186: std::num::Wrapping<isize>;
    let mut _187: &std::num::Wrapping<isize>;
    let _188: std::num::Wrapping<isize>;
    let mut _191: bool;
    let mut _192: bool;
    let _194: !;
    let mut _195: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _196: std::num::Wrapping<u8>;
    let mut _197: std::num::Wrapping<u8>;
    let mut _198: std::num::Wrapping<u8>;
    let _199: ();
    let mut _200: &mut std::num::Wrapping<u8>;
    let mut _201: std::num::Wrapping<u8>;
    let mut _202: (&std::num::Wrapping<u8>, &std::num::Wrapping<u8>);
    let mut _203: &std::num::Wrapping<u8>;
    let _204: std::num::Wrapping<u8>;
    let mut _205: std::num::Wrapping<u8>;
    let mut _206: &std::num::Wrapping<u8>;
    let _207: std::num::Wrapping<u8>;
    let mut _210: bool;
    let mut _211: bool;
    let _213: !;
    let mut _214: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _215: std::num::Wrapping<u8>;
    let mut _216: std::num::Wrapping<u8>;
    let mut _217: std::num::Wrapping<u8>;
    let _218: ();
    let mut _219: &mut std::num::Wrapping<u8>;
    let mut _220: &std::num::Wrapping<u8>;
    let _221: std::num::Wrapping<u8>;
    let mut _222: (&std::num::Wrapping<u8>, &std::num::Wrapping<u8>);
    let mut _223: &std::num::Wrapping<u8>;
    let _224: std::num::Wrapping<u8>;
    let mut _225: std::num::Wrapping<u8>;
    let mut _226: &std::num::Wrapping<u8>;
    let _227: std::num::Wrapping<u8>;
    let mut _230: bool;
    let mut _231: bool;
    let _233: !;
    let mut _234: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _235: std::num::Wrapping<u16>;
    let mut _236: std::num::Wrapping<u16>;
    let mut _237: std::num::Wrapping<u16>;
    let _238: ();
    let mut _239: &mut std::num::Wrapping<u16>;
    let mut _240: std::num::Wrapping<u16>;
    let mut _241: (&std::num::Wrapping<u16>, &std::num::Wrapping<u16>);
    let mut _242: &std::num::Wrapping<u16>;
    let _243: std::num::Wrapping<u16>;
    let mut _244: std::num::Wrapping<u16>;
    let mut _245: &std::num::Wrapping<u16>;
    let _246: std::num::Wrapping<u16>;
    let mut _249: bool;
    let mut _250: bool;
    let _252: !;
    let mut _253: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _254: std::num::Wrapping<u16>;
    let mut _255: std::num::Wrapping<u16>;
    let mut _256: std::num::Wrapping<u16>;
    let _257: ();
    let mut _258: &mut std::num::Wrapping<u16>;
    let mut _259: &std::num::Wrapping<u16>;
    let _260: std::num::Wrapping<u16>;
    let mut _261: (&std::num::Wrapping<u16>, &std::num::Wrapping<u16>);
    let mut _262: &std::num::Wrapping<u16>;
    let _263: std::num::Wrapping<u16>;
    let mut _264: std::num::Wrapping<u16>;
    let mut _265: &std::num::Wrapping<u16>;
    let _266: std::num::Wrapping<u16>;
    let mut _269: bool;
    let mut _270: bool;
    let _272: !;
    let mut _273: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _274: std::num::Wrapping<u32>;
    let mut _275: std::num::Wrapping<u32>;
    let mut _276: std::num::Wrapping<u32>;
    let _277: ();
    let mut _278: &mut std::num::Wrapping<u32>;
    let mut _279: std::num::Wrapping<u32>;
    let mut _280: (&std::num::Wrapping<u32>, &std::num::Wrapping<u32>);
    let mut _281: &std::num::Wrapping<u32>;
    let _282: std::num::Wrapping<u32>;
    let mut _283: std::num::Wrapping<u32>;
    let mut _284: &std::num::Wrapping<u32>;
    let _285: std::num::Wrapping<u32>;
    let mut _288: bool;
    let mut _289: bool;
    let _291: !;
    let mut _292: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _293: std::num::Wrapping<u32>;
    let mut _294: std::num::Wrapping<u32>;
    let mut _295: std::num::Wrapping<u32>;
    let _296: ();
    let mut _297: &mut std::num::Wrapping<u32>;
    let mut _298: &std::num::Wrapping<u32>;
    let _299: std::num::Wrapping<u32>;
    let mut _300: (&std::num::Wrapping<u32>, &std::num::Wrapping<u32>);
    let mut _301: &std::num::Wrapping<u32>;
    let _302: std::num::Wrapping<u32>;
    let mut _303: std::num::Wrapping<u32>;
    let mut _304: &std::num::Wrapping<u32>;
    let _305: std::num::Wrapping<u32>;
    let mut _308: bool;
    let mut _309: bool;
    let _311: !;
    let mut _312: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _313: std::num::Wrapping<u64>;
    let mut _314: std::num::Wrapping<u64>;
    let mut _315: std::num::Wrapping<u64>;
    let _316: ();
    let mut _317: &mut std::num::Wrapping<u64>;
    let mut _318: std::num::Wrapping<u64>;
    let mut _319: (&std::num::Wrapping<u64>, &std::num::Wrapping<u64>);
    let mut _320: &std::num::Wrapping<u64>;
    let _321: std::num::Wrapping<u64>;
    let mut _322: std::num::Wrapping<u64>;
    let mut _323: &std::num::Wrapping<u64>;
    let _324: std::num::Wrapping<u64>;
    let mut _327: bool;
    let mut _328: bool;
    let _330: !;
    let mut _331: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _332: std::num::Wrapping<u64>;
    let mut _333: std::num::Wrapping<u64>;
    let mut _334: std::num::Wrapping<u64>;
    let _335: ();
    let mut _336: &mut std::num::Wrapping<u64>;
    let mut _337: &std::num::Wrapping<u64>;
    let _338: std::num::Wrapping<u64>;
    let mut _339: (&std::num::Wrapping<u64>, &std::num::Wrapping<u64>);
    let mut _340: &std::num::Wrapping<u64>;
    let _341: std::num::Wrapping<u64>;
    let mut _342: std::num::Wrapping<u64>;
    let mut _343: &std::num::Wrapping<u64>;
    let _344: std::num::Wrapping<u64>;
    let mut _347: bool;
    let mut _348: bool;
    let _350: !;
    let mut _351: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _352: std::num::Wrapping<usize>;
    let mut _353: std::num::Wrapping<usize>;
    let mut _354: std::num::Wrapping<usize>;
    let _355: ();
    let mut _356: &mut std::num::Wrapping<usize>;
    let mut _357: std::num::Wrapping<usize>;
    let mut _358: (&std::num::Wrapping<usize>, &std::num::Wrapping<usize>);
    let mut _359: &std::num::Wrapping<usize>;
    let _360: std::num::Wrapping<usize>;
    let mut _361: std::num::Wrapping<usize>;
    let mut _362: &std::num::Wrapping<usize>;
    let _363: std::num::Wrapping<usize>;
    let mut _366: bool;
    let mut _367: bool;
    let _369: !;
    let mut _370: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _371: std::num::Wrapping<usize>;
    let mut _372: std::num::Wrapping<usize>;
    let mut _373: std::num::Wrapping<usize>;
    let _374: ();
    let mut _375: &mut std::num::Wrapping<usize>;
    let mut _376: &std::num::Wrapping<usize>;
    let _377: std::num::Wrapping<usize>;
    let mut _378: (&std::num::Wrapping<usize>, &std::num::Wrapping<usize>);
    let mut _379: &std::num::Wrapping<usize>;
    let _380: std::num::Wrapping<usize>;
    let mut _381: std::num::Wrapping<usize>;
    let mut _382: &std::num::Wrapping<usize>;
    let _383: std::num::Wrapping<usize>;
    let mut _386: bool;
    let mut _387: bool;
    let _389: !;
    let mut _390: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _391: std::num::Wrapping<i8>;
    let mut _392: std::num::Wrapping<i8>;
    let mut _393: std::num::Wrapping<i8>;
    let _394: ();
    let mut _395: &mut std::num::Wrapping<i8>;
    let mut _396: std::num::Wrapping<i8>;
    let mut _397: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _398: &std::num::Wrapping<i8>;
    let _399: std::num::Wrapping<i8>;
    let mut _400: std::num::Wrapping<i8>;
    let mut _401: &std::num::Wrapping<i8>;
    let _402: std::num::Wrapping<i8>;
    let mut _405: bool;
    let mut _406: bool;
    let _408: !;
    let mut _409: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _410: std::num::Wrapping<i8>;
    let mut _411: std::num::Wrapping<i8>;
    let mut _412: std::num::Wrapping<i8>;
    let _413: ();
    let mut _414: &mut std::num::Wrapping<i8>;
    let mut _415: &std::num::Wrapping<i8>;
    let _416: std::num::Wrapping<i8>;
    let mut _417: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _418: &std::num::Wrapping<i8>;
    let _419: std::num::Wrapping<i8>;
    let mut _420: std::num::Wrapping<i8>;
    let mut _421: &std::num::Wrapping<i8>;
    let _422: std::num::Wrapping<i8>;
    let mut _425: bool;
    let mut _426: bool;
    let _428: !;
    let mut _429: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _430: std::num::Wrapping<i16>;
    let mut _431: std::num::Wrapping<i16>;
    let mut _432: std::num::Wrapping<i16>;
    let _433: ();
    let mut _434: &mut std::num::Wrapping<i16>;
    let mut _435: std::num::Wrapping<i16>;
    let mut _436: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _437: &std::num::Wrapping<i16>;
    let _438: std::num::Wrapping<i16>;
    let mut _439: std::num::Wrapping<i16>;
    let mut _440: &std::num::Wrapping<i16>;
    let _441: std::num::Wrapping<i16>;
    let mut _444: bool;
    let mut _445: bool;
    let _447: !;
    let mut _448: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _449: std::num::Wrapping<i16>;
    let mut _450: std::num::Wrapping<i16>;
    let mut _451: std::num::Wrapping<i16>;
    let _452: ();
    let mut _453: &mut std::num::Wrapping<i16>;
    let mut _454: &std::num::Wrapping<i16>;
    let _455: std::num::Wrapping<i16>;
    let mut _456: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _457: &std::num::Wrapping<i16>;
    let _458: std::num::Wrapping<i16>;
    let mut _459: std::num::Wrapping<i16>;
    let mut _460: &std::num::Wrapping<i16>;
    let _461: std::num::Wrapping<i16>;
    let mut _464: bool;
    let mut _465: bool;
    let _467: !;
    let mut _468: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _469: std::num::Wrapping<i32>;
    let mut _470: std::num::Wrapping<i32>;
    let mut _471: std::num::Wrapping<i32>;
    let _472: ();
    let mut _473: &mut std::num::Wrapping<i32>;
    let mut _474: std::num::Wrapping<i32>;
    let mut _475: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _476: &std::num::Wrapping<i32>;
    let _477: std::num::Wrapping<i32>;
    let mut _478: std::num::Wrapping<i32>;
    let mut _479: &std::num::Wrapping<i32>;
    let _480: std::num::Wrapping<i32>;
    let mut _483: bool;
    let mut _484: bool;
    let _486: !;
    let mut _487: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _488: std::num::Wrapping<i32>;
    let mut _489: std::num::Wrapping<i32>;
    let mut _490: std::num::Wrapping<i32>;
    let _491: ();
    let mut _492: &mut std::num::Wrapping<i32>;
    let mut _493: &std::num::Wrapping<i32>;
    let _494: std::num::Wrapping<i32>;
    let mut _495: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _496: &std::num::Wrapping<i32>;
    let _497: std::num::Wrapping<i32>;
    let mut _498: std::num::Wrapping<i32>;
    let mut _499: &std::num::Wrapping<i32>;
    let _500: std::num::Wrapping<i32>;
    let mut _503: bool;
    let mut _504: bool;
    let _506: !;
    let mut _507: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _508: std::num::Wrapping<i64>;
    let mut _509: std::num::Wrapping<i64>;
    let mut _510: std::num::Wrapping<i64>;
    let _511: ();
    let mut _512: &mut std::num::Wrapping<i64>;
    let mut _513: std::num::Wrapping<i64>;
    let mut _514: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _515: &std::num::Wrapping<i64>;
    let _516: std::num::Wrapping<i64>;
    let mut _517: std::num::Wrapping<i64>;
    let mut _518: &std::num::Wrapping<i64>;
    let _519: std::num::Wrapping<i64>;
    let mut _522: bool;
    let mut _523: bool;
    let _525: !;
    let mut _526: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _527: std::num::Wrapping<i64>;
    let mut _528: std::num::Wrapping<i64>;
    let mut _529: std::num::Wrapping<i64>;
    let _530: ();
    let mut _531: &mut std::num::Wrapping<i64>;
    let mut _532: &std::num::Wrapping<i64>;
    let _533: std::num::Wrapping<i64>;
    let mut _534: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _535: &std::num::Wrapping<i64>;
    let _536: std::num::Wrapping<i64>;
    let mut _537: std::num::Wrapping<i64>;
    let mut _538: &std::num::Wrapping<i64>;
    let _539: std::num::Wrapping<i64>;
    let mut _542: bool;
    let mut _543: bool;
    let _545: !;
    let mut _546: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _547: std::num::Wrapping<isize>;
    let mut _548: std::num::Wrapping<isize>;
    let mut _549: std::num::Wrapping<isize>;
    let _550: ();
    let mut _551: &mut std::num::Wrapping<isize>;
    let mut _552: std::num::Wrapping<isize>;
    let mut _553: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _554: &std::num::Wrapping<isize>;
    let _555: std::num::Wrapping<isize>;
    let mut _556: std::num::Wrapping<isize>;
    let mut _557: &std::num::Wrapping<isize>;
    let _558: std::num::Wrapping<isize>;
    let mut _561: bool;
    let mut _562: bool;
    let _564: !;
    let mut _565: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _566: std::num::Wrapping<isize>;
    let mut _567: std::num::Wrapping<isize>;
    let mut _568: std::num::Wrapping<isize>;
    let _569: ();
    let mut _570: &mut std::num::Wrapping<isize>;
    let mut _571: &std::num::Wrapping<isize>;
    let _572: std::num::Wrapping<isize>;
    let mut _573: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _574: &std::num::Wrapping<isize>;
    let _575: std::num::Wrapping<isize>;
    let mut _576: std::num::Wrapping<isize>;
    let mut _577: &std::num::Wrapping<isize>;
    let _578: std::num::Wrapping<isize>;
    let mut _581: bool;
    let mut _582: bool;
    let _584: !;
    let mut _585: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _586: std::num::Wrapping<u8>;
    let mut _587: std::num::Wrapping<u8>;
    let mut _588: std::num::Wrapping<u8>;
    let _589: ();
    let mut _590: &mut std::num::Wrapping<u8>;
    let mut _591: std::num::Wrapping<u8>;
    let mut _592: (&std::num::Wrapping<u8>, &std::num::Wrapping<u8>);
    let mut _593: &std::num::Wrapping<u8>;
    let _594: std::num::Wrapping<u8>;
    let mut _595: std::num::Wrapping<u8>;
    let mut _596: &std::num::Wrapping<u8>;
    let _597: std::num::Wrapping<u8>;
    let mut _600: bool;
    let mut _601: bool;
    let _603: !;
    let mut _604: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _605: std::num::Wrapping<u8>;
    let mut _606: std::num::Wrapping<u8>;
    let mut _607: std::num::Wrapping<u8>;
    let _608: ();
    let mut _609: &mut std::num::Wrapping<u8>;
    let mut _610: &std::num::Wrapping<u8>;
    let _611: std::num::Wrapping<u8>;
    let mut _612: (&std::num::Wrapping<u8>, &std::num::Wrapping<u8>);
    let mut _613: &std::num::Wrapping<u8>;
    let _614: std::num::Wrapping<u8>;
    let mut _615: std::num::Wrapping<u8>;
    let mut _616: &std::num::Wrapping<u8>;
    let _617: std::num::Wrapping<u8>;
    let mut _620: bool;
    let mut _621: bool;
    let _623: !;
    let mut _624: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _625: std::num::Wrapping<u16>;
    let mut _626: std::num::Wrapping<u16>;
    let mut _627: std::num::Wrapping<u16>;
    let _628: ();
    let mut _629: &mut std::num::Wrapping<u16>;
    let mut _630: std::num::Wrapping<u16>;
    let mut _631: (&std::num::Wrapping<u16>, &std::num::Wrapping<u16>);
    let mut _632: &std::num::Wrapping<u16>;
    let _633: std::num::Wrapping<u16>;
    let mut _634: std::num::Wrapping<u16>;
    let mut _635: &std::num::Wrapping<u16>;
    let _636: std::num::Wrapping<u16>;
    let mut _639: bool;
    let mut _640: bool;
    let _642: !;
    let mut _643: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _644: std::num::Wrapping<u16>;
    let mut _645: std::num::Wrapping<u16>;
    let mut _646: std::num::Wrapping<u16>;
    let _647: ();
    let mut _648: &mut std::num::Wrapping<u16>;
    let mut _649: &std::num::Wrapping<u16>;
    let _650: std::num::Wrapping<u16>;
    let mut _651: (&std::num::Wrapping<u16>, &std::num::Wrapping<u16>);
    let mut _652: &std::num::Wrapping<u16>;
    let _653: std::num::Wrapping<u16>;
    let mut _654: std::num::Wrapping<u16>;
    let mut _655: &std::num::Wrapping<u16>;
    let _656: std::num::Wrapping<u16>;
    let mut _659: bool;
    let mut _660: bool;
    let _662: !;
    let mut _663: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _664: std::num::Wrapping<u32>;
    let mut _665: std::num::Wrapping<u32>;
    let mut _666: std::num::Wrapping<u32>;
    let _667: ();
    let mut _668: &mut std::num::Wrapping<u32>;
    let mut _669: std::num::Wrapping<u32>;
    let mut _670: (&std::num::Wrapping<u32>, &std::num::Wrapping<u32>);
    let mut _671: &std::num::Wrapping<u32>;
    let _672: std::num::Wrapping<u32>;
    let mut _673: std::num::Wrapping<u32>;
    let mut _674: &std::num::Wrapping<u32>;
    let _675: std::num::Wrapping<u32>;
    let mut _678: bool;
    let mut _679: bool;
    let _681: !;
    let mut _682: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _683: std::num::Wrapping<u32>;
    let mut _684: std::num::Wrapping<u32>;
    let mut _685: std::num::Wrapping<u32>;
    let _686: ();
    let mut _687: &mut std::num::Wrapping<u32>;
    let mut _688: &std::num::Wrapping<u32>;
    let _689: std::num::Wrapping<u32>;
    let mut _690: (&std::num::Wrapping<u32>, &std::num::Wrapping<u32>);
    let mut _691: &std::num::Wrapping<u32>;
    let _692: std::num::Wrapping<u32>;
    let mut _693: std::num::Wrapping<u32>;
    let mut _694: &std::num::Wrapping<u32>;
    let _695: std::num::Wrapping<u32>;
    let mut _698: bool;
    let mut _699: bool;
    let _701: !;
    let mut _702: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _703: std::num::Wrapping<u64>;
    let mut _704: std::num::Wrapping<u64>;
    let mut _705: std::num::Wrapping<u64>;
    let _706: ();
    let mut _707: &mut std::num::Wrapping<u64>;
    let mut _708: std::num::Wrapping<u64>;
    let mut _709: (&std::num::Wrapping<u64>, &std::num::Wrapping<u64>);
    let mut _710: &std::num::Wrapping<u64>;
    let _711: std::num::Wrapping<u64>;
    let mut _712: std::num::Wrapping<u64>;
    let mut _713: &std::num::Wrapping<u64>;
    let _714: std::num::Wrapping<u64>;
    let mut _717: bool;
    let mut _718: bool;
    let _720: !;
    let mut _721: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _722: std::num::Wrapping<u64>;
    let mut _723: std::num::Wrapping<u64>;
    let mut _724: std::num::Wrapping<u64>;
    let _725: ();
    let mut _726: &mut std::num::Wrapping<u64>;
    let mut _727: &std::num::Wrapping<u64>;
    let _728: std::num::Wrapping<u64>;
    let mut _729: (&std::num::Wrapping<u64>, &std::num::Wrapping<u64>);
    let mut _730: &std::num::Wrapping<u64>;
    let _731: std::num::Wrapping<u64>;
    let mut _732: std::num::Wrapping<u64>;
    let mut _733: &std::num::Wrapping<u64>;
    let _734: std::num::Wrapping<u64>;
    let mut _737: bool;
    let mut _738: bool;
    let _740: !;
    let mut _741: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _742: std::num::Wrapping<usize>;
    let mut _743: std::num::Wrapping<usize>;
    let mut _744: std::num::Wrapping<usize>;
    let _745: ();
    let mut _746: &mut std::num::Wrapping<usize>;
    let mut _747: std::num::Wrapping<usize>;
    let mut _748: (&std::num::Wrapping<usize>, &std::num::Wrapping<usize>);
    let mut _749: &std::num::Wrapping<usize>;
    let _750: std::num::Wrapping<usize>;
    let mut _751: std::num::Wrapping<usize>;
    let mut _752: &std::num::Wrapping<usize>;
    let _753: std::num::Wrapping<usize>;
    let mut _756: bool;
    let mut _757: bool;
    let _759: !;
    let mut _760: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _761: std::num::Wrapping<usize>;
    let mut _762: std::num::Wrapping<usize>;
    let mut _763: std::num::Wrapping<usize>;
    let _764: ();
    let mut _765: &mut std::num::Wrapping<usize>;
    let mut _766: &std::num::Wrapping<usize>;
    let _767: std::num::Wrapping<usize>;
    let mut _768: (&std::num::Wrapping<usize>, &std::num::Wrapping<usize>);
    let mut _769: &std::num::Wrapping<usize>;
    let _770: std::num::Wrapping<usize>;
    let mut _771: std::num::Wrapping<usize>;
    let mut _772: &std::num::Wrapping<usize>;
    let _773: std::num::Wrapping<usize>;
    let mut _776: bool;
    let mut _777: bool;
    let _779: !;
    let mut _780: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _781: std::num::Wrapping<i8>;
    let mut _782: std::num::Wrapping<i8>;
    let mut _783: std::num::Wrapping<i8>;
    let _784: ();
    let mut _785: &mut std::num::Wrapping<i8>;
    let mut _786: std::num::Wrapping<i8>;
    let mut _787: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _788: &std::num::Wrapping<i8>;
    let _789: std::num::Wrapping<i8>;
    let mut _790: std::num::Wrapping<i8>;
    let mut _791: &std::num::Wrapping<i8>;
    let _792: std::num::Wrapping<i8>;
    let mut _795: bool;
    let mut _796: bool;
    let _798: !;
    let mut _799: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _800: std::num::Wrapping<i8>;
    let mut _801: std::num::Wrapping<i8>;
    let mut _802: std::num::Wrapping<i8>;
    let _803: ();
    let mut _804: &mut std::num::Wrapping<i8>;
    let mut _805: &std::num::Wrapping<i8>;
    let _806: std::num::Wrapping<i8>;
    let mut _807: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _808: &std::num::Wrapping<i8>;
    let _809: std::num::Wrapping<i8>;
    let mut _810: std::num::Wrapping<i8>;
    let mut _811: &std::num::Wrapping<i8>;
    let _812: std::num::Wrapping<i8>;
    let mut _815: bool;
    let mut _816: bool;
    let _818: !;
    let mut _819: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _820: std::num::Wrapping<i16>;
    let mut _821: std::num::Wrapping<i16>;
    let mut _822: std::num::Wrapping<i16>;
    let _823: ();
    let mut _824: &mut std::num::Wrapping<i16>;
    let mut _825: std::num::Wrapping<i16>;
    let mut _826: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _827: &std::num::Wrapping<i16>;
    let _828: std::num::Wrapping<i16>;
    let mut _829: std::num::Wrapping<i16>;
    let mut _830: &std::num::Wrapping<i16>;
    let _831: std::num::Wrapping<i16>;
    let mut _834: bool;
    let mut _835: bool;
    let _837: !;
    let mut _838: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _839: std::num::Wrapping<i16>;
    let mut _840: std::num::Wrapping<i16>;
    let mut _841: std::num::Wrapping<i16>;
    let _842: ();
    let mut _843: &mut std::num::Wrapping<i16>;
    let mut _844: &std::num::Wrapping<i16>;
    let _845: std::num::Wrapping<i16>;
    let mut _846: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _847: &std::num::Wrapping<i16>;
    let _848: std::num::Wrapping<i16>;
    let mut _849: std::num::Wrapping<i16>;
    let mut _850: &std::num::Wrapping<i16>;
    let _851: std::num::Wrapping<i16>;
    let mut _854: bool;
    let mut _855: bool;
    let _857: !;
    let mut _858: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _859: std::num::Wrapping<i32>;
    let mut _860: std::num::Wrapping<i32>;
    let mut _861: std::num::Wrapping<i32>;
    let _862: ();
    let mut _863: &mut std::num::Wrapping<i32>;
    let mut _864: std::num::Wrapping<i32>;
    let mut _865: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _866: &std::num::Wrapping<i32>;
    let _867: std::num::Wrapping<i32>;
    let mut _868: std::num::Wrapping<i32>;
    let mut _869: &std::num::Wrapping<i32>;
    let _870: std::num::Wrapping<i32>;
    let mut _873: bool;
    let mut _874: bool;
    let _876: !;
    let mut _877: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _878: std::num::Wrapping<i32>;
    let mut _879: std::num::Wrapping<i32>;
    let mut _880: std::num::Wrapping<i32>;
    let _881: ();
    let mut _882: &mut std::num::Wrapping<i32>;
    let mut _883: &std::num::Wrapping<i32>;
    let _884: std::num::Wrapping<i32>;
    let mut _885: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _886: &std::num::Wrapping<i32>;
    let _887: std::num::Wrapping<i32>;
    let mut _888: std::num::Wrapping<i32>;
    let mut _889: &std::num::Wrapping<i32>;
    let _890: std::num::Wrapping<i32>;
    let mut _893: bool;
    let mut _894: bool;
    let _896: !;
    let mut _897: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _898: std::num::Wrapping<i64>;
    let mut _899: std::num::Wrapping<i64>;
    let mut _900: std::num::Wrapping<i64>;
    let _901: ();
    let mut _902: &mut std::num::Wrapping<i64>;
    let mut _903: std::num::Wrapping<i64>;
    let mut _904: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _905: &std::num::Wrapping<i64>;
    let _906: std::num::Wrapping<i64>;
    let mut _907: std::num::Wrapping<i64>;
    let mut _908: &std::num::Wrapping<i64>;
    let _909: std::num::Wrapping<i64>;
    let mut _912: bool;
    let mut _913: bool;
    let _915: !;
    let mut _916: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _917: std::num::Wrapping<i64>;
    let mut _918: std::num::Wrapping<i64>;
    let mut _919: std::num::Wrapping<i64>;
    let _920: ();
    let mut _921: &mut std::num::Wrapping<i64>;
    let mut _922: &std::num::Wrapping<i64>;
    let _923: std::num::Wrapping<i64>;
    let mut _924: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _925: &std::num::Wrapping<i64>;
    let _926: std::num::Wrapping<i64>;
    let mut _927: std::num::Wrapping<i64>;
    let mut _928: &std::num::Wrapping<i64>;
    let _929: std::num::Wrapping<i64>;
    let mut _932: bool;
    let mut _933: bool;
    let _935: !;
    let mut _936: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _937: std::num::Wrapping<isize>;
    let mut _938: std::num::Wrapping<isize>;
    let mut _939: std::num::Wrapping<isize>;
    let _940: ();
    let mut _941: &mut std::num::Wrapping<isize>;
    let mut _942: std::num::Wrapping<isize>;
    let mut _943: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _944: &std::num::Wrapping<isize>;
    let _945: std::num::Wrapping<isize>;
    let mut _946: std::num::Wrapping<isize>;
    let mut _947: &std::num::Wrapping<isize>;
    let _948: std::num::Wrapping<isize>;
    let mut _951: bool;
    let mut _952: bool;
    let _954: !;
    let mut _955: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _956: std::num::Wrapping<isize>;
    let mut _957: std::num::Wrapping<isize>;
    let mut _958: std::num::Wrapping<isize>;
    let _959: ();
    let mut _960: &mut std::num::Wrapping<isize>;
    let mut _961: &std::num::Wrapping<isize>;
    let _962: std::num::Wrapping<isize>;
    let mut _963: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _964: &std::num::Wrapping<isize>;
    let _965: std::num::Wrapping<isize>;
    let mut _966: std::num::Wrapping<isize>;
    let mut _967: &std::num::Wrapping<isize>;
    let _968: std::num::Wrapping<isize>;
    let mut _971: bool;
    let mut _972: bool;
    let _974: !;
    let mut _975: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _976: std::num::Wrapping<u8>;
    let mut _977: std::num::Wrapping<u8>;
    let mut _978: std::num::Wrapping<u8>;
    let _979: ();
    let mut _980: &mut std::num::Wrapping<u8>;
    let mut _981: std::num::Wrapping<u8>;
    let mut _982: (&std::num::Wrapping<u8>, &std::num::Wrapping<u8>);
    let mut _983: &std::num::Wrapping<u8>;
    let _984: std::num::Wrapping<u8>;
    let mut _985: std::num::Wrapping<u8>;
    let mut _986: &std::num::Wrapping<u8>;
    let _987: std::num::Wrapping<u8>;
    let mut _988: u8;
    let mut _991: bool;
    let mut _992: bool;
    let _994: !;
    let mut _995: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _996: std::num::Wrapping<u8>;
    let mut _997: std::num::Wrapping<u8>;
    let mut _998: std::num::Wrapping<u8>;
    let _999: ();
    let mut _1000: &mut std::num::Wrapping<u8>;
    let mut _1001: &std::num::Wrapping<u8>;
    let _1002: std::num::Wrapping<u8>;
    let mut _1003: (&std::num::Wrapping<u8>, &std::num::Wrapping<u8>);
    let mut _1004: &std::num::Wrapping<u8>;
    let _1005: std::num::Wrapping<u8>;
    let mut _1006: std::num::Wrapping<u8>;
    let mut _1007: &std::num::Wrapping<u8>;
    let _1008: std::num::Wrapping<u8>;
    let mut _1009: u8;
    let mut _1012: bool;
    let mut _1013: bool;
    let _1015: !;
    let mut _1016: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1017: std::num::Wrapping<u16>;
    let mut _1018: std::num::Wrapping<u16>;
    let mut _1019: std::num::Wrapping<u16>;
    let _1020: ();
    let mut _1021: &mut std::num::Wrapping<u16>;
    let mut _1022: std::num::Wrapping<u16>;
    let mut _1023: (&std::num::Wrapping<u16>, &std::num::Wrapping<u16>);
    let mut _1024: &std::num::Wrapping<u16>;
    let _1025: std::num::Wrapping<u16>;
    let mut _1026: std::num::Wrapping<u16>;
    let mut _1027: &std::num::Wrapping<u16>;
    let _1028: std::num::Wrapping<u16>;
    let mut _1029: u16;
    let mut _1032: bool;
    let mut _1033: bool;
    let _1035: !;
    let mut _1036: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1037: std::num::Wrapping<u16>;
    let mut _1038: std::num::Wrapping<u16>;
    let mut _1039: std::num::Wrapping<u16>;
    let _1040: ();
    let mut _1041: &mut std::num::Wrapping<u16>;
    let mut _1042: &std::num::Wrapping<u16>;
    let _1043: std::num::Wrapping<u16>;
    let mut _1044: (&std::num::Wrapping<u16>, &std::num::Wrapping<u16>);
    let mut _1045: &std::num::Wrapping<u16>;
    let _1046: std::num::Wrapping<u16>;
    let mut _1047: std::num::Wrapping<u16>;
    let mut _1048: &std::num::Wrapping<u16>;
    let _1049: std::num::Wrapping<u16>;
    let mut _1050: u16;
    let mut _1053: bool;
    let mut _1054: bool;
    let _1056: !;
    let mut _1057: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1058: std::num::Wrapping<u32>;
    let mut _1059: std::num::Wrapping<u32>;
    let mut _1060: std::num::Wrapping<u32>;
    let _1061: ();
    let mut _1062: &mut std::num::Wrapping<u32>;
    let mut _1063: std::num::Wrapping<u32>;
    let mut _1064: (&std::num::Wrapping<u32>, &std::num::Wrapping<u32>);
    let mut _1065: &std::num::Wrapping<u32>;
    let _1066: std::num::Wrapping<u32>;
    let mut _1067: std::num::Wrapping<u32>;
    let mut _1068: &std::num::Wrapping<u32>;
    let _1069: std::num::Wrapping<u32>;
    let mut _1070: u32;
    let mut _1073: bool;
    let mut _1074: bool;
    let _1076: !;
    let mut _1077: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1078: std::num::Wrapping<u32>;
    let mut _1079: std::num::Wrapping<u32>;
    let mut _1080: std::num::Wrapping<u32>;
    let _1081: ();
    let mut _1082: &mut std::num::Wrapping<u32>;
    let mut _1083: &std::num::Wrapping<u32>;
    let _1084: std::num::Wrapping<u32>;
    let mut _1085: (&std::num::Wrapping<u32>, &std::num::Wrapping<u32>);
    let mut _1086: &std::num::Wrapping<u32>;
    let _1087: std::num::Wrapping<u32>;
    let mut _1088: std::num::Wrapping<u32>;
    let mut _1089: &std::num::Wrapping<u32>;
    let _1090: std::num::Wrapping<u32>;
    let mut _1091: u32;
    let mut _1094: bool;
    let mut _1095: bool;
    let _1097: !;
    let mut _1098: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1099: std::num::Wrapping<u64>;
    let mut _1100: std::num::Wrapping<u64>;
    let mut _1101: std::num::Wrapping<u64>;
    let _1102: ();
    let mut _1103: &mut std::num::Wrapping<u64>;
    let mut _1104: std::num::Wrapping<u64>;
    let mut _1105: (&std::num::Wrapping<u64>, &std::num::Wrapping<u64>);
    let mut _1106: &std::num::Wrapping<u64>;
    let _1107: std::num::Wrapping<u64>;
    let mut _1108: std::num::Wrapping<u64>;
    let mut _1109: &std::num::Wrapping<u64>;
    let _1110: std::num::Wrapping<u64>;
    let mut _1111: u64;
    let mut _1114: bool;
    let mut _1115: bool;
    let _1117: !;
    let mut _1118: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1119: std::num::Wrapping<u64>;
    let mut _1120: std::num::Wrapping<u64>;
    let mut _1121: std::num::Wrapping<u64>;
    let _1122: ();
    let mut _1123: &mut std::num::Wrapping<u64>;
    let mut _1124: &std::num::Wrapping<u64>;
    let _1125: std::num::Wrapping<u64>;
    let mut _1126: (&std::num::Wrapping<u64>, &std::num::Wrapping<u64>);
    let mut _1127: &std::num::Wrapping<u64>;
    let _1128: std::num::Wrapping<u64>;
    let mut _1129: std::num::Wrapping<u64>;
    let mut _1130: &std::num::Wrapping<u64>;
    let _1131: std::num::Wrapping<u64>;
    let mut _1132: u64;
    let mut _1135: bool;
    let mut _1136: bool;
    let _1138: !;
    let mut _1139: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1140: std::num::Wrapping<usize>;
    let mut _1141: std::num::Wrapping<usize>;
    let mut _1142: std::num::Wrapping<usize>;
    let _1143: ();
    let mut _1144: &mut std::num::Wrapping<usize>;
    let mut _1145: std::num::Wrapping<usize>;
    let mut _1146: (&std::num::Wrapping<usize>, &std::num::Wrapping<usize>);
    let mut _1147: &std::num::Wrapping<usize>;
    let _1148: std::num::Wrapping<usize>;
    let mut _1149: std::num::Wrapping<usize>;
    let mut _1150: &std::num::Wrapping<usize>;
    let _1151: std::num::Wrapping<usize>;
    let mut _1152: usize;
    let mut _1155: bool;
    let mut _1156: bool;
    let _1158: !;
    let mut _1159: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1160: std::num::Wrapping<usize>;
    let mut _1161: std::num::Wrapping<usize>;
    let mut _1162: std::num::Wrapping<usize>;
    let _1163: ();
    let mut _1164: &mut std::num::Wrapping<usize>;
    let mut _1165: &std::num::Wrapping<usize>;
    let _1166: std::num::Wrapping<usize>;
    let mut _1167: (&std::num::Wrapping<usize>, &std::num::Wrapping<usize>);
    let mut _1168: &std::num::Wrapping<usize>;
    let _1169: std::num::Wrapping<usize>;
    let mut _1170: std::num::Wrapping<usize>;
    let mut _1171: &std::num::Wrapping<usize>;
    let _1172: std::num::Wrapping<usize>;
    let mut _1173: usize;
    let mut _1176: bool;
    let mut _1177: bool;
    let _1179: !;
    let mut _1180: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1181: std::num::Wrapping<i8>;
    let mut _1182: std::num::Wrapping<i8>;
    let mut _1183: std::num::Wrapping<i8>;
    let _1184: ();
    let mut _1185: &mut std::num::Wrapping<i8>;
    let mut _1186: std::num::Wrapping<i8>;
    let mut _1187: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _1188: &std::num::Wrapping<i8>;
    let _1189: std::num::Wrapping<i8>;
    let mut _1190: std::num::Wrapping<i8>;
    let mut _1191: &std::num::Wrapping<i8>;
    let _1192: std::num::Wrapping<i8>;
    let mut _1195: bool;
    let mut _1196: bool;
    let _1198: !;
    let mut _1199: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1200: std::num::Wrapping<i8>;
    let mut _1201: std::num::Wrapping<i8>;
    let mut _1202: std::num::Wrapping<i8>;
    let _1203: ();
    let mut _1204: &mut std::num::Wrapping<i8>;
    let mut _1205: &std::num::Wrapping<i8>;
    let _1206: std::num::Wrapping<i8>;
    let mut _1207: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _1208: &std::num::Wrapping<i8>;
    let _1209: std::num::Wrapping<i8>;
    let mut _1210: std::num::Wrapping<i8>;
    let mut _1211: &std::num::Wrapping<i8>;
    let _1212: std::num::Wrapping<i8>;
    let mut _1215: bool;
    let mut _1216: bool;
    let _1218: !;
    let mut _1219: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1220: std::num::Wrapping<i16>;
    let mut _1221: std::num::Wrapping<i16>;
    let mut _1222: std::num::Wrapping<i16>;
    let _1223: ();
    let mut _1224: &mut std::num::Wrapping<i16>;
    let mut _1225: std::num::Wrapping<i16>;
    let mut _1226: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _1227: &std::num::Wrapping<i16>;
    let _1228: std::num::Wrapping<i16>;
    let mut _1229: std::num::Wrapping<i16>;
    let mut _1230: &std::num::Wrapping<i16>;
    let _1231: std::num::Wrapping<i16>;
    let mut _1234: bool;
    let mut _1235: bool;
    let _1237: !;
    let mut _1238: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1239: std::num::Wrapping<i16>;
    let mut _1240: std::num::Wrapping<i16>;
    let mut _1241: std::num::Wrapping<i16>;
    let _1242: ();
    let mut _1243: &mut std::num::Wrapping<i16>;
    let mut _1244: &std::num::Wrapping<i16>;
    let _1245: std::num::Wrapping<i16>;
    let mut _1246: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _1247: &std::num::Wrapping<i16>;
    let _1248: std::num::Wrapping<i16>;
    let mut _1249: std::num::Wrapping<i16>;
    let mut _1250: &std::num::Wrapping<i16>;
    let _1251: std::num::Wrapping<i16>;
    let mut _1254: bool;
    let mut _1255: bool;
    let _1257: !;
    let mut _1258: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1259: std::num::Wrapping<i32>;
    let mut _1260: std::num::Wrapping<i32>;
    let mut _1261: std::num::Wrapping<i32>;
    let _1262: ();
    let mut _1263: &mut std::num::Wrapping<i32>;
    let mut _1264: std::num::Wrapping<i32>;
    let mut _1265: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _1266: &std::num::Wrapping<i32>;
    let _1267: std::num::Wrapping<i32>;
    let mut _1268: std::num::Wrapping<i32>;
    let mut _1269: &std::num::Wrapping<i32>;
    let _1270: std::num::Wrapping<i32>;
    let mut _1273: bool;
    let mut _1274: bool;
    let _1276: !;
    let mut _1277: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1278: std::num::Wrapping<i32>;
    let mut _1279: std::num::Wrapping<i32>;
    let mut _1280: std::num::Wrapping<i32>;
    let _1281: ();
    let mut _1282: &mut std::num::Wrapping<i32>;
    let mut _1283: &std::num::Wrapping<i32>;
    let _1284: std::num::Wrapping<i32>;
    let mut _1285: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _1286: &std::num::Wrapping<i32>;
    let _1287: std::num::Wrapping<i32>;
    let mut _1288: std::num::Wrapping<i32>;
    let mut _1289: &std::num::Wrapping<i32>;
    let _1290: std::num::Wrapping<i32>;
    let mut _1293: bool;
    let mut _1294: bool;
    let _1296: !;
    let mut _1297: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1298: std::num::Wrapping<i64>;
    let mut _1299: std::num::Wrapping<i64>;
    let mut _1300: std::num::Wrapping<i64>;
    let _1301: ();
    let mut _1302: &mut std::num::Wrapping<i64>;
    let mut _1303: std::num::Wrapping<i64>;
    let mut _1304: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _1305: &std::num::Wrapping<i64>;
    let _1306: std::num::Wrapping<i64>;
    let mut _1307: std::num::Wrapping<i64>;
    let mut _1308: &std::num::Wrapping<i64>;
    let _1309: std::num::Wrapping<i64>;
    let mut _1312: bool;
    let mut _1313: bool;
    let _1315: !;
    let mut _1316: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1317: std::num::Wrapping<i64>;
    let mut _1318: std::num::Wrapping<i64>;
    let mut _1319: std::num::Wrapping<i64>;
    let _1320: ();
    let mut _1321: &mut std::num::Wrapping<i64>;
    let mut _1322: &std::num::Wrapping<i64>;
    let _1323: std::num::Wrapping<i64>;
    let mut _1324: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _1325: &std::num::Wrapping<i64>;
    let _1326: std::num::Wrapping<i64>;
    let mut _1327: std::num::Wrapping<i64>;
    let mut _1328: &std::num::Wrapping<i64>;
    let _1329: std::num::Wrapping<i64>;
    let mut _1332: bool;
    let mut _1333: bool;
    let _1335: !;
    let mut _1336: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1337: std::num::Wrapping<isize>;
    let mut _1338: std::num::Wrapping<isize>;
    let mut _1339: std::num::Wrapping<isize>;
    let _1340: ();
    let mut _1341: &mut std::num::Wrapping<isize>;
    let mut _1342: std::num::Wrapping<isize>;
    let mut _1343: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _1344: &std::num::Wrapping<isize>;
    let _1345: std::num::Wrapping<isize>;
    let mut _1346: std::num::Wrapping<isize>;
    let mut _1347: &std::num::Wrapping<isize>;
    let _1348: std::num::Wrapping<isize>;
    let mut _1351: bool;
    let mut _1352: bool;
    let _1354: !;
    let mut _1355: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1356: std::num::Wrapping<isize>;
    let mut _1357: std::num::Wrapping<isize>;
    let mut _1358: std::num::Wrapping<isize>;
    let _1359: ();
    let mut _1360: &mut std::num::Wrapping<isize>;
    let mut _1361: &std::num::Wrapping<isize>;
    let _1362: std::num::Wrapping<isize>;
    let mut _1363: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _1364: &std::num::Wrapping<isize>;
    let _1365: std::num::Wrapping<isize>;
    let mut _1366: std::num::Wrapping<isize>;
    let mut _1367: &std::num::Wrapping<isize>;
    let _1368: std::num::Wrapping<isize>;
    let mut _1371: bool;
    let mut _1372: bool;
    let _1374: !;
    let mut _1375: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1376: std::num::Wrapping<i8>;
    let mut _1377: std::num::Wrapping<i8>;
    let mut _1378: std::num::Wrapping<i8>;
    let _1379: ();
    let mut _1380: &mut std::num::Wrapping<i8>;
    let mut _1381: std::num::Wrapping<i8>;
    let mut _1382: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _1383: &std::num::Wrapping<i8>;
    let _1384: std::num::Wrapping<i8>;
    let mut _1385: std::num::Wrapping<i8>;
    let mut _1386: &std::num::Wrapping<i8>;
    let _1387: std::num::Wrapping<i8>;
    let mut _1390: bool;
    let mut _1391: bool;
    let _1393: !;
    let mut _1394: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1395: std::num::Wrapping<i8>;
    let mut _1396: std::num::Wrapping<i8>;
    let mut _1397: std::num::Wrapping<i8>;
    let _1398: ();
    let mut _1399: &mut std::num::Wrapping<i8>;
    let mut _1400: &std::num::Wrapping<i8>;
    let _1401: std::num::Wrapping<i8>;
    let mut _1402: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _1403: &std::num::Wrapping<i8>;
    let _1404: std::num::Wrapping<i8>;
    let mut _1405: std::num::Wrapping<i8>;
    let mut _1406: &std::num::Wrapping<i8>;
    let _1407: std::num::Wrapping<i8>;
    let mut _1410: bool;
    let mut _1411: bool;
    let _1413: !;
    let mut _1414: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1415: std::num::Wrapping<i16>;
    let mut _1416: std::num::Wrapping<i16>;
    let mut _1417: std::num::Wrapping<i16>;
    let _1418: ();
    let mut _1419: &mut std::num::Wrapping<i16>;
    let mut _1420: std::num::Wrapping<i16>;
    let mut _1421: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _1422: &std::num::Wrapping<i16>;
    let _1423: std::num::Wrapping<i16>;
    let mut _1424: std::num::Wrapping<i16>;
    let mut _1425: &std::num::Wrapping<i16>;
    let _1426: std::num::Wrapping<i16>;
    let mut _1429: bool;
    let mut _1430: bool;
    let _1432: !;
    let mut _1433: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1434: std::num::Wrapping<i16>;
    let mut _1435: std::num::Wrapping<i16>;
    let mut _1436: std::num::Wrapping<i16>;
    let _1437: ();
    let mut _1438: &mut std::num::Wrapping<i16>;
    let mut _1439: &std::num::Wrapping<i16>;
    let _1440: std::num::Wrapping<i16>;
    let mut _1441: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _1442: &std::num::Wrapping<i16>;
    let _1443: std::num::Wrapping<i16>;
    let mut _1444: std::num::Wrapping<i16>;
    let mut _1445: &std::num::Wrapping<i16>;
    let _1446: std::num::Wrapping<i16>;
    let mut _1449: bool;
    let mut _1450: bool;
    let _1452: !;
    let mut _1453: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1454: std::num::Wrapping<i32>;
    let mut _1455: std::num::Wrapping<i32>;
    let mut _1456: std::num::Wrapping<i32>;
    let _1457: ();
    let mut _1458: &mut std::num::Wrapping<i32>;
    let mut _1459: std::num::Wrapping<i32>;
    let mut _1460: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _1461: &std::num::Wrapping<i32>;
    let _1462: std::num::Wrapping<i32>;
    let mut _1463: std::num::Wrapping<i32>;
    let mut _1464: &std::num::Wrapping<i32>;
    let _1465: std::num::Wrapping<i32>;
    let mut _1468: bool;
    let mut _1469: bool;
    let _1471: !;
    let mut _1472: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1473: std::num::Wrapping<i32>;
    let mut _1474: std::num::Wrapping<i32>;
    let mut _1475: std::num::Wrapping<i32>;
    let _1476: ();
    let mut _1477: &mut std::num::Wrapping<i32>;
    let mut _1478: &std::num::Wrapping<i32>;
    let _1479: std::num::Wrapping<i32>;
    let mut _1480: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _1481: &std::num::Wrapping<i32>;
    let _1482: std::num::Wrapping<i32>;
    let mut _1483: std::num::Wrapping<i32>;
    let mut _1484: &std::num::Wrapping<i32>;
    let _1485: std::num::Wrapping<i32>;
    let mut _1488: bool;
    let mut _1489: bool;
    let _1491: !;
    let mut _1492: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1493: std::num::Wrapping<i64>;
    let mut _1494: std::num::Wrapping<i64>;
    let mut _1495: std::num::Wrapping<i64>;
    let _1496: ();
    let mut _1497: &mut std::num::Wrapping<i64>;
    let mut _1498: std::num::Wrapping<i64>;
    let mut _1499: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _1500: &std::num::Wrapping<i64>;
    let _1501: std::num::Wrapping<i64>;
    let mut _1502: std::num::Wrapping<i64>;
    let mut _1503: &std::num::Wrapping<i64>;
    let _1504: std::num::Wrapping<i64>;
    let mut _1507: bool;
    let mut _1508: bool;
    let _1510: !;
    let mut _1511: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1512: std::num::Wrapping<i64>;
    let mut _1513: std::num::Wrapping<i64>;
    let mut _1514: std::num::Wrapping<i64>;
    let _1515: ();
    let mut _1516: &mut std::num::Wrapping<i64>;
    let mut _1517: &std::num::Wrapping<i64>;
    let _1518: std::num::Wrapping<i64>;
    let mut _1519: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _1520: &std::num::Wrapping<i64>;
    let _1521: std::num::Wrapping<i64>;
    let mut _1522: std::num::Wrapping<i64>;
    let mut _1523: &std::num::Wrapping<i64>;
    let _1524: std::num::Wrapping<i64>;
    let mut _1527: bool;
    let mut _1528: bool;
    let _1530: !;
    let mut _1531: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1532: std::num::Wrapping<isize>;
    let mut _1533: std::num::Wrapping<isize>;
    let mut _1534: std::num::Wrapping<isize>;
    let _1535: ();
    let mut _1536: &mut std::num::Wrapping<isize>;
    let mut _1537: std::num::Wrapping<isize>;
    let mut _1538: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _1539: &std::num::Wrapping<isize>;
    let _1540: std::num::Wrapping<isize>;
    let mut _1541: std::num::Wrapping<isize>;
    let mut _1542: &std::num::Wrapping<isize>;
    let _1543: std::num::Wrapping<isize>;
    let mut _1546: bool;
    let mut _1547: bool;
    let _1549: !;
    let mut _1550: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1551: std::num::Wrapping<isize>;
    let mut _1552: std::num::Wrapping<isize>;
    let mut _1553: std::num::Wrapping<isize>;
    let _1554: ();
    let mut _1555: &mut std::num::Wrapping<isize>;
    let mut _1556: &std::num::Wrapping<isize>;
    let _1557: std::num::Wrapping<isize>;
    let mut _1558: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _1559: &std::num::Wrapping<isize>;
    let _1560: std::num::Wrapping<isize>;
    let mut _1561: std::num::Wrapping<isize>;
    let mut _1562: &std::num::Wrapping<isize>;
    let _1563: std::num::Wrapping<isize>;
    let mut _1566: bool;
    let mut _1567: bool;
    let _1569: !;
    let mut _1570: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1571: std::num::Wrapping<i8>;
    let mut _1572: std::num::Wrapping<i8>;
    let mut _1573: std::num::Wrapping<i8>;
    let _1574: ();
    let mut _1575: &mut std::num::Wrapping<i8>;
    let mut _1576: std::num::Wrapping<i8>;
    let mut _1577: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _1578: &std::num::Wrapping<i8>;
    let _1579: std::num::Wrapping<i8>;
    let mut _1580: std::num::Wrapping<i8>;
    let mut _1581: &std::num::Wrapping<i8>;
    let _1582: std::num::Wrapping<i8>;
    let mut _1585: bool;
    let mut _1586: bool;
    let _1588: !;
    let mut _1589: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1590: std::num::Wrapping<i8>;
    let mut _1591: std::num::Wrapping<i8>;
    let mut _1592: std::num::Wrapping<i8>;
    let _1593: ();
    let mut _1594: &mut std::num::Wrapping<i8>;
    let mut _1595: &std::num::Wrapping<i8>;
    let _1596: std::num::Wrapping<i8>;
    let mut _1597: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _1598: &std::num::Wrapping<i8>;
    let _1599: std::num::Wrapping<i8>;
    let mut _1600: std::num::Wrapping<i8>;
    let mut _1601: &std::num::Wrapping<i8>;
    let _1602: std::num::Wrapping<i8>;
    let mut _1605: bool;
    let mut _1606: bool;
    let _1608: !;
    let mut _1609: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1610: std::num::Wrapping<i16>;
    let mut _1611: std::num::Wrapping<i16>;
    let mut _1612: std::num::Wrapping<i16>;
    let _1613: ();
    let mut _1614: &mut std::num::Wrapping<i16>;
    let mut _1615: std::num::Wrapping<i16>;
    let mut _1616: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _1617: &std::num::Wrapping<i16>;
    let _1618: std::num::Wrapping<i16>;
    let mut _1619: std::num::Wrapping<i16>;
    let mut _1620: &std::num::Wrapping<i16>;
    let _1621: std::num::Wrapping<i16>;
    let mut _1624: bool;
    let mut _1625: bool;
    let _1627: !;
    let mut _1628: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1629: std::num::Wrapping<i16>;
    let mut _1630: std::num::Wrapping<i16>;
    let mut _1631: std::num::Wrapping<i16>;
    let _1632: ();
    let mut _1633: &mut std::num::Wrapping<i16>;
    let mut _1634: &std::num::Wrapping<i16>;
    let _1635: std::num::Wrapping<i16>;
    let mut _1636: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _1637: &std::num::Wrapping<i16>;
    let _1638: std::num::Wrapping<i16>;
    let mut _1639: std::num::Wrapping<i16>;
    let mut _1640: &std::num::Wrapping<i16>;
    let _1641: std::num::Wrapping<i16>;
    let mut _1644: bool;
    let mut _1645: bool;
    let _1647: !;
    let mut _1648: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1649: std::num::Wrapping<i32>;
    let mut _1650: std::num::Wrapping<i32>;
    let mut _1651: std::num::Wrapping<i32>;
    let _1652: ();
    let mut _1653: &mut std::num::Wrapping<i32>;
    let mut _1654: std::num::Wrapping<i32>;
    let mut _1655: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _1656: &std::num::Wrapping<i32>;
    let _1657: std::num::Wrapping<i32>;
    let mut _1658: std::num::Wrapping<i32>;
    let mut _1659: &std::num::Wrapping<i32>;
    let _1660: std::num::Wrapping<i32>;
    let mut _1663: bool;
    let mut _1664: bool;
    let _1666: !;
    let mut _1667: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1668: std::num::Wrapping<i32>;
    let mut _1669: std::num::Wrapping<i32>;
    let mut _1670: std::num::Wrapping<i32>;
    let _1671: ();
    let mut _1672: &mut std::num::Wrapping<i32>;
    let mut _1673: &std::num::Wrapping<i32>;
    let _1674: std::num::Wrapping<i32>;
    let mut _1675: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _1676: &std::num::Wrapping<i32>;
    let _1677: std::num::Wrapping<i32>;
    let mut _1678: std::num::Wrapping<i32>;
    let mut _1679: &std::num::Wrapping<i32>;
    let _1680: std::num::Wrapping<i32>;
    let mut _1683: bool;
    let mut _1684: bool;
    let _1686: !;
    let mut _1687: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1688: std::num::Wrapping<i64>;
    let mut _1689: std::num::Wrapping<i64>;
    let mut _1690: std::num::Wrapping<i64>;
    let _1691: ();
    let mut _1692: &mut std::num::Wrapping<i64>;
    let mut _1693: std::num::Wrapping<i64>;
    let mut _1694: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _1695: &std::num::Wrapping<i64>;
    let _1696: std::num::Wrapping<i64>;
    let mut _1697: std::num::Wrapping<i64>;
    let mut _1698: &std::num::Wrapping<i64>;
    let _1699: std::num::Wrapping<i64>;
    let mut _1702: bool;
    let mut _1703: bool;
    let _1705: !;
    let mut _1706: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1707: std::num::Wrapping<i64>;
    let mut _1708: std::num::Wrapping<i64>;
    let mut _1709: std::num::Wrapping<i64>;
    let _1710: ();
    let mut _1711: &mut std::num::Wrapping<i64>;
    let mut _1712: &std::num::Wrapping<i64>;
    let _1713: std::num::Wrapping<i64>;
    let mut _1714: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _1715: &std::num::Wrapping<i64>;
    let _1716: std::num::Wrapping<i64>;
    let mut _1717: std::num::Wrapping<i64>;
    let mut _1718: &std::num::Wrapping<i64>;
    let _1719: std::num::Wrapping<i64>;
    let mut _1722: bool;
    let mut _1723: bool;
    let _1725: !;
    let mut _1726: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1727: std::num::Wrapping<isize>;
    let mut _1728: std::num::Wrapping<isize>;
    let mut _1729: std::num::Wrapping<isize>;
    let _1730: ();
    let mut _1731: &mut std::num::Wrapping<isize>;
    let mut _1732: std::num::Wrapping<isize>;
    let mut _1733: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _1734: &std::num::Wrapping<isize>;
    let _1735: std::num::Wrapping<isize>;
    let mut _1736: std::num::Wrapping<isize>;
    let mut _1737: &std::num::Wrapping<isize>;
    let _1738: std::num::Wrapping<isize>;
    let mut _1741: bool;
    let mut _1742: bool;
    let _1744: !;
    let mut _1745: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1746: std::num::Wrapping<isize>;
    let mut _1747: std::num::Wrapping<isize>;
    let mut _1748: std::num::Wrapping<isize>;
    let _1749: ();
    let mut _1750: &mut std::num::Wrapping<isize>;
    let mut _1751: &std::num::Wrapping<isize>;
    let _1752: std::num::Wrapping<isize>;
    let mut _1753: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _1754: &std::num::Wrapping<isize>;
    let _1755: std::num::Wrapping<isize>;
    let mut _1756: std::num::Wrapping<isize>;
    let mut _1757: &std::num::Wrapping<isize>;
    let _1758: std::num::Wrapping<isize>;
    let mut _1761: bool;
    let mut _1762: bool;
    let _1764: !;
    let mut _1765: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1766: std::num::Wrapping<u8>;
    let mut _1767: std::num::Wrapping<u8>;
    let mut _1768: std::num::Wrapping<u8>;
    let _1769: ();
    let mut _1770: &mut std::num::Wrapping<u8>;
    let mut _1771: std::num::Wrapping<u8>;
    let mut _1772: (&std::num::Wrapping<u8>, &std::num::Wrapping<u8>);
    let mut _1773: &std::num::Wrapping<u8>;
    let _1774: std::num::Wrapping<u8>;
    let mut _1775: std::num::Wrapping<u8>;
    let mut _1776: &std::num::Wrapping<u8>;
    let _1777: std::num::Wrapping<u8>;
    let mut _1780: bool;
    let mut _1781: bool;
    let _1783: !;
    let mut _1784: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1785: std::num::Wrapping<u8>;
    let mut _1786: std::num::Wrapping<u8>;
    let mut _1787: std::num::Wrapping<u8>;
    let _1788: ();
    let mut _1789: &mut std::num::Wrapping<u8>;
    let mut _1790: &std::num::Wrapping<u8>;
    let _1791: std::num::Wrapping<u8>;
    let mut _1792: (&std::num::Wrapping<u8>, &std::num::Wrapping<u8>);
    let mut _1793: &std::num::Wrapping<u8>;
    let _1794: std::num::Wrapping<u8>;
    let mut _1795: std::num::Wrapping<u8>;
    let mut _1796: &std::num::Wrapping<u8>;
    let _1797: std::num::Wrapping<u8>;
    let mut _1800: bool;
    let mut _1801: bool;
    let _1803: !;
    let mut _1804: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1805: std::num::Wrapping<u16>;
    let mut _1806: std::num::Wrapping<u16>;
    let mut _1807: std::num::Wrapping<u16>;
    let _1808: ();
    let mut _1809: &mut std::num::Wrapping<u16>;
    let mut _1810: std::num::Wrapping<u16>;
    let mut _1811: (&std::num::Wrapping<u16>, &std::num::Wrapping<u16>);
    let mut _1812: &std::num::Wrapping<u16>;
    let _1813: std::num::Wrapping<u16>;
    let mut _1814: std::num::Wrapping<u16>;
    let mut _1815: &std::num::Wrapping<u16>;
    let _1816: std::num::Wrapping<u16>;
    let mut _1819: bool;
    let mut _1820: bool;
    let _1822: !;
    let mut _1823: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1824: std::num::Wrapping<u16>;
    let mut _1825: std::num::Wrapping<u16>;
    let mut _1826: std::num::Wrapping<u16>;
    let _1827: ();
    let mut _1828: &mut std::num::Wrapping<u16>;
    let mut _1829: &std::num::Wrapping<u16>;
    let _1830: std::num::Wrapping<u16>;
    let mut _1831: (&std::num::Wrapping<u16>, &std::num::Wrapping<u16>);
    let mut _1832: &std::num::Wrapping<u16>;
    let _1833: std::num::Wrapping<u16>;
    let mut _1834: std::num::Wrapping<u16>;
    let mut _1835: &std::num::Wrapping<u16>;
    let _1836: std::num::Wrapping<u16>;
    let mut _1839: bool;
    let mut _1840: bool;
    let _1842: !;
    let mut _1843: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1844: std::num::Wrapping<u32>;
    let mut _1845: std::num::Wrapping<u32>;
    let mut _1846: std::num::Wrapping<u32>;
    let _1847: ();
    let mut _1848: &mut std::num::Wrapping<u32>;
    let mut _1849: std::num::Wrapping<u32>;
    let mut _1850: (&std::num::Wrapping<u32>, &std::num::Wrapping<u32>);
    let mut _1851: &std::num::Wrapping<u32>;
    let _1852: std::num::Wrapping<u32>;
    let mut _1853: std::num::Wrapping<u32>;
    let mut _1854: &std::num::Wrapping<u32>;
    let _1855: std::num::Wrapping<u32>;
    let mut _1858: bool;
    let mut _1859: bool;
    let _1861: !;
    let mut _1862: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1863: std::num::Wrapping<u32>;
    let mut _1864: std::num::Wrapping<u32>;
    let mut _1865: std::num::Wrapping<u32>;
    let _1866: ();
    let mut _1867: &mut std::num::Wrapping<u32>;
    let mut _1868: &std::num::Wrapping<u32>;
    let _1869: std::num::Wrapping<u32>;
    let mut _1870: (&std::num::Wrapping<u32>, &std::num::Wrapping<u32>);
    let mut _1871: &std::num::Wrapping<u32>;
    let _1872: std::num::Wrapping<u32>;
    let mut _1873: std::num::Wrapping<u32>;
    let mut _1874: &std::num::Wrapping<u32>;
    let _1875: std::num::Wrapping<u32>;
    let mut _1878: bool;
    let mut _1879: bool;
    let _1881: !;
    let mut _1882: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1883: std::num::Wrapping<u64>;
    let mut _1884: std::num::Wrapping<u64>;
    let mut _1885: std::num::Wrapping<u64>;
    let _1886: ();
    let mut _1887: &mut std::num::Wrapping<u64>;
    let mut _1888: std::num::Wrapping<u64>;
    let mut _1889: (&std::num::Wrapping<u64>, &std::num::Wrapping<u64>);
    let mut _1890: &std::num::Wrapping<u64>;
    let _1891: std::num::Wrapping<u64>;
    let mut _1892: std::num::Wrapping<u64>;
    let mut _1893: &std::num::Wrapping<u64>;
    let _1894: std::num::Wrapping<u64>;
    let mut _1897: bool;
    let mut _1898: bool;
    let _1900: !;
    let mut _1901: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1902: std::num::Wrapping<u64>;
    let mut _1903: std::num::Wrapping<u64>;
    let mut _1904: std::num::Wrapping<u64>;
    let _1905: ();
    let mut _1906: &mut std::num::Wrapping<u64>;
    let mut _1907: &std::num::Wrapping<u64>;
    let _1908: std::num::Wrapping<u64>;
    let mut _1909: (&std::num::Wrapping<u64>, &std::num::Wrapping<u64>);
    let mut _1910: &std::num::Wrapping<u64>;
    let _1911: std::num::Wrapping<u64>;
    let mut _1912: std::num::Wrapping<u64>;
    let mut _1913: &std::num::Wrapping<u64>;
    let _1914: std::num::Wrapping<u64>;
    let mut _1917: bool;
    let mut _1918: bool;
    let _1920: !;
    let mut _1921: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1922: std::num::Wrapping<usize>;
    let mut _1923: std::num::Wrapping<usize>;
    let mut _1924: std::num::Wrapping<usize>;
    let _1925: ();
    let mut _1926: &mut std::num::Wrapping<usize>;
    let mut _1927: std::num::Wrapping<usize>;
    let mut _1928: (&std::num::Wrapping<usize>, &std::num::Wrapping<usize>);
    let mut _1929: &std::num::Wrapping<usize>;
    let _1930: std::num::Wrapping<usize>;
    let mut _1931: std::num::Wrapping<usize>;
    let mut _1932: &std::num::Wrapping<usize>;
    let _1933: std::num::Wrapping<usize>;
    let mut _1936: bool;
    let mut _1937: bool;
    let _1939: !;
    let mut _1940: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1941: std::num::Wrapping<usize>;
    let mut _1942: std::num::Wrapping<usize>;
    let mut _1943: std::num::Wrapping<usize>;
    let _1944: ();
    let mut _1945: &mut std::num::Wrapping<usize>;
    let mut _1946: &std::num::Wrapping<usize>;
    let _1947: std::num::Wrapping<usize>;
    let mut _1948: (&std::num::Wrapping<usize>, &std::num::Wrapping<usize>);
    let mut _1949: &std::num::Wrapping<usize>;
    let _1950: std::num::Wrapping<usize>;
    let mut _1951: std::num::Wrapping<usize>;
    let mut _1952: &std::num::Wrapping<usize>;
    let _1953: std::num::Wrapping<usize>;
    let mut _1956: bool;
    let mut _1957: bool;
    let _1959: !;
    let mut _1960: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1961: std::num::Wrapping<i8>;
    let mut _1962: std::num::Wrapping<i8>;
    let mut _1963: std::num::Wrapping<i8>;
    let _1964: ();
    let mut _1965: &mut std::num::Wrapping<i8>;
    let mut _1966: std::num::Wrapping<i8>;
    let mut _1967: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _1968: &std::num::Wrapping<i8>;
    let _1969: std::num::Wrapping<i8>;
    let mut _1970: std::num::Wrapping<i8>;
    let mut _1971: &std::num::Wrapping<i8>;
    let _1972: std::num::Wrapping<i8>;
    let mut _1975: bool;
    let mut _1976: bool;
    let _1978: !;
    let mut _1979: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1980: std::num::Wrapping<i8>;
    let mut _1981: std::num::Wrapping<i8>;
    let mut _1982: std::num::Wrapping<i8>;
    let _1983: ();
    let mut _1984: &mut std::num::Wrapping<i8>;
    let mut _1985: &std::num::Wrapping<i8>;
    let _1986: std::num::Wrapping<i8>;
    let mut _1987: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _1988: &std::num::Wrapping<i8>;
    let _1989: std::num::Wrapping<i8>;
    let mut _1990: std::num::Wrapping<i8>;
    let mut _1991: &std::num::Wrapping<i8>;
    let _1992: std::num::Wrapping<i8>;
    let mut _1995: bool;
    let mut _1996: bool;
    let _1998: !;
    let mut _1999: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2000: std::num::Wrapping<i16>;
    let mut _2001: std::num::Wrapping<i16>;
    let mut _2002: std::num::Wrapping<i16>;
    let _2003: ();
    let mut _2004: &mut std::num::Wrapping<i16>;
    let mut _2005: std::num::Wrapping<i16>;
    let mut _2006: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _2007: &std::num::Wrapping<i16>;
    let _2008: std::num::Wrapping<i16>;
    let mut _2009: std::num::Wrapping<i16>;
    let mut _2010: &std::num::Wrapping<i16>;
    let _2011: std::num::Wrapping<i16>;
    let mut _2014: bool;
    let mut _2015: bool;
    let _2017: !;
    let mut _2018: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2019: std::num::Wrapping<i16>;
    let mut _2020: std::num::Wrapping<i16>;
    let mut _2021: std::num::Wrapping<i16>;
    let _2022: ();
    let mut _2023: &mut std::num::Wrapping<i16>;
    let mut _2024: &std::num::Wrapping<i16>;
    let _2025: std::num::Wrapping<i16>;
    let mut _2026: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _2027: &std::num::Wrapping<i16>;
    let _2028: std::num::Wrapping<i16>;
    let mut _2029: std::num::Wrapping<i16>;
    let mut _2030: &std::num::Wrapping<i16>;
    let _2031: std::num::Wrapping<i16>;
    let mut _2034: bool;
    let mut _2035: bool;
    let _2037: !;
    let mut _2038: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2039: std::num::Wrapping<i32>;
    let mut _2040: std::num::Wrapping<i32>;
    let mut _2041: std::num::Wrapping<i32>;
    let _2042: ();
    let mut _2043: &mut std::num::Wrapping<i32>;
    let mut _2044: std::num::Wrapping<i32>;
    let mut _2045: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _2046: &std::num::Wrapping<i32>;
    let _2047: std::num::Wrapping<i32>;
    let mut _2048: std::num::Wrapping<i32>;
    let mut _2049: &std::num::Wrapping<i32>;
    let _2050: std::num::Wrapping<i32>;
    let mut _2053: bool;
    let mut _2054: bool;
    let _2056: !;
    let mut _2057: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2058: std::num::Wrapping<i32>;
    let mut _2059: std::num::Wrapping<i32>;
    let mut _2060: std::num::Wrapping<i32>;
    let _2061: ();
    let mut _2062: &mut std::num::Wrapping<i32>;
    let mut _2063: &std::num::Wrapping<i32>;
    let _2064: std::num::Wrapping<i32>;
    let mut _2065: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _2066: &std::num::Wrapping<i32>;
    let _2067: std::num::Wrapping<i32>;
    let mut _2068: std::num::Wrapping<i32>;
    let mut _2069: &std::num::Wrapping<i32>;
    let _2070: std::num::Wrapping<i32>;
    let mut _2073: bool;
    let mut _2074: bool;
    let _2076: !;
    let mut _2077: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2078: std::num::Wrapping<i64>;
    let mut _2079: std::num::Wrapping<i64>;
    let mut _2080: std::num::Wrapping<i64>;
    let _2081: ();
    let mut _2082: &mut std::num::Wrapping<i64>;
    let mut _2083: std::num::Wrapping<i64>;
    let mut _2084: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _2085: &std::num::Wrapping<i64>;
    let _2086: std::num::Wrapping<i64>;
    let mut _2087: std::num::Wrapping<i64>;
    let mut _2088: &std::num::Wrapping<i64>;
    let _2089: std::num::Wrapping<i64>;
    let mut _2092: bool;
    let mut _2093: bool;
    let _2095: !;
    let mut _2096: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2097: std::num::Wrapping<i64>;
    let mut _2098: std::num::Wrapping<i64>;
    let mut _2099: std::num::Wrapping<i64>;
    let _2100: ();
    let mut _2101: &mut std::num::Wrapping<i64>;
    let mut _2102: &std::num::Wrapping<i64>;
    let _2103: std::num::Wrapping<i64>;
    let mut _2104: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _2105: &std::num::Wrapping<i64>;
    let _2106: std::num::Wrapping<i64>;
    let mut _2107: std::num::Wrapping<i64>;
    let mut _2108: &std::num::Wrapping<i64>;
    let _2109: std::num::Wrapping<i64>;
    let mut _2112: bool;
    let mut _2113: bool;
    let _2115: !;
    let mut _2116: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2117: std::num::Wrapping<isize>;
    let mut _2118: std::num::Wrapping<isize>;
    let mut _2119: std::num::Wrapping<isize>;
    let _2120: ();
    let mut _2121: &mut std::num::Wrapping<isize>;
    let mut _2122: std::num::Wrapping<isize>;
    let mut _2123: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _2124: &std::num::Wrapping<isize>;
    let _2125: std::num::Wrapping<isize>;
    let mut _2126: std::num::Wrapping<isize>;
    let mut _2127: &std::num::Wrapping<isize>;
    let _2128: std::num::Wrapping<isize>;
    let mut _2131: bool;
    let mut _2132: bool;
    let _2134: !;
    let mut _2135: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2136: std::num::Wrapping<isize>;
    let mut _2137: std::num::Wrapping<isize>;
    let mut _2138: std::num::Wrapping<isize>;
    let _2139: ();
    let mut _2140: &mut std::num::Wrapping<isize>;
    let mut _2141: &std::num::Wrapping<isize>;
    let _2142: std::num::Wrapping<isize>;
    let mut _2143: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _2144: &std::num::Wrapping<isize>;
    let _2145: std::num::Wrapping<isize>;
    let mut _2146: std::num::Wrapping<isize>;
    let mut _2147: &std::num::Wrapping<isize>;
    let _2148: std::num::Wrapping<isize>;
    let mut _2151: bool;
    let mut _2152: bool;
    let _2154: !;
    let mut _2155: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2156: std::num::Wrapping<u8>;
    let mut _2157: std::num::Wrapping<u8>;
    let mut _2158: std::num::Wrapping<u8>;
    let _2159: ();
    let mut _2160: &mut std::num::Wrapping<u8>;
    let mut _2161: std::num::Wrapping<u8>;
    let mut _2162: (&std::num::Wrapping<u8>, &std::num::Wrapping<u8>);
    let mut _2163: &std::num::Wrapping<u8>;
    let _2164: std::num::Wrapping<u8>;
    let mut _2165: std::num::Wrapping<u8>;
    let mut _2166: &std::num::Wrapping<u8>;
    let _2167: std::num::Wrapping<u8>;
    let mut _2170: bool;
    let mut _2171: bool;
    let _2173: !;
    let mut _2174: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2175: std::num::Wrapping<u8>;
    let mut _2176: std::num::Wrapping<u8>;
    let mut _2177: std::num::Wrapping<u8>;
    let _2178: ();
    let mut _2179: &mut std::num::Wrapping<u8>;
    let mut _2180: &std::num::Wrapping<u8>;
    let _2181: std::num::Wrapping<u8>;
    let mut _2182: (&std::num::Wrapping<u8>, &std::num::Wrapping<u8>);
    let mut _2183: &std::num::Wrapping<u8>;
    let _2184: std::num::Wrapping<u8>;
    let mut _2185: std::num::Wrapping<u8>;
    let mut _2186: &std::num::Wrapping<u8>;
    let _2187: std::num::Wrapping<u8>;
    let mut _2190: bool;
    let mut _2191: bool;
    let _2193: !;
    let mut _2194: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2195: std::num::Wrapping<u16>;
    let mut _2196: std::num::Wrapping<u16>;
    let mut _2197: std::num::Wrapping<u16>;
    let _2198: ();
    let mut _2199: &mut std::num::Wrapping<u16>;
    let mut _2200: std::num::Wrapping<u16>;
    let mut _2201: (&std::num::Wrapping<u16>, &std::num::Wrapping<u16>);
    let mut _2202: &std::num::Wrapping<u16>;
    let _2203: std::num::Wrapping<u16>;
    let mut _2204: std::num::Wrapping<u16>;
    let mut _2205: &std::num::Wrapping<u16>;
    let _2206: std::num::Wrapping<u16>;
    let mut _2209: bool;
    let mut _2210: bool;
    let _2212: !;
    let mut _2213: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2214: std::num::Wrapping<u16>;
    let mut _2215: std::num::Wrapping<u16>;
    let mut _2216: std::num::Wrapping<u16>;
    let _2217: ();
    let mut _2218: &mut std::num::Wrapping<u16>;
    let mut _2219: &std::num::Wrapping<u16>;
    let _2220: std::num::Wrapping<u16>;
    let mut _2221: (&std::num::Wrapping<u16>, &std::num::Wrapping<u16>);
    let mut _2222: &std::num::Wrapping<u16>;
    let _2223: std::num::Wrapping<u16>;
    let mut _2224: std::num::Wrapping<u16>;
    let mut _2225: &std::num::Wrapping<u16>;
    let _2226: std::num::Wrapping<u16>;
    let mut _2229: bool;
    let mut _2230: bool;
    let _2232: !;
    let mut _2233: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2234: std::num::Wrapping<u32>;
    let mut _2235: std::num::Wrapping<u32>;
    let mut _2236: std::num::Wrapping<u32>;
    let _2237: ();
    let mut _2238: &mut std::num::Wrapping<u32>;
    let mut _2239: std::num::Wrapping<u32>;
    let mut _2240: (&std::num::Wrapping<u32>, &std::num::Wrapping<u32>);
    let mut _2241: &std::num::Wrapping<u32>;
    let _2242: std::num::Wrapping<u32>;
    let mut _2243: std::num::Wrapping<u32>;
    let mut _2244: &std::num::Wrapping<u32>;
    let _2245: std::num::Wrapping<u32>;
    let mut _2248: bool;
    let mut _2249: bool;
    let _2251: !;
    let mut _2252: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2253: std::num::Wrapping<u32>;
    let mut _2254: std::num::Wrapping<u32>;
    let mut _2255: std::num::Wrapping<u32>;
    let _2256: ();
    let mut _2257: &mut std::num::Wrapping<u32>;
    let mut _2258: &std::num::Wrapping<u32>;
    let _2259: std::num::Wrapping<u32>;
    let mut _2260: (&std::num::Wrapping<u32>, &std::num::Wrapping<u32>);
    let mut _2261: &std::num::Wrapping<u32>;
    let _2262: std::num::Wrapping<u32>;
    let mut _2263: std::num::Wrapping<u32>;
    let mut _2264: &std::num::Wrapping<u32>;
    let _2265: std::num::Wrapping<u32>;
    let mut _2268: bool;
    let mut _2269: bool;
    let _2271: !;
    let mut _2272: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2273: std::num::Wrapping<u64>;
    let mut _2274: std::num::Wrapping<u64>;
    let mut _2275: std::num::Wrapping<u64>;
    let _2276: ();
    let mut _2277: &mut std::num::Wrapping<u64>;
    let mut _2278: std::num::Wrapping<u64>;
    let mut _2279: (&std::num::Wrapping<u64>, &std::num::Wrapping<u64>);
    let mut _2280: &std::num::Wrapping<u64>;
    let _2281: std::num::Wrapping<u64>;
    let mut _2282: std::num::Wrapping<u64>;
    let mut _2283: &std::num::Wrapping<u64>;
    let _2284: std::num::Wrapping<u64>;
    let mut _2287: bool;
    let mut _2288: bool;
    let _2290: !;
    let mut _2291: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2292: std::num::Wrapping<u64>;
    let mut _2293: std::num::Wrapping<u64>;
    let mut _2294: std::num::Wrapping<u64>;
    let _2295: ();
    let mut _2296: &mut std::num::Wrapping<u64>;
    let mut _2297: &std::num::Wrapping<u64>;
    let _2298: std::num::Wrapping<u64>;
    let mut _2299: (&std::num::Wrapping<u64>, &std::num::Wrapping<u64>);
    let mut _2300: &std::num::Wrapping<u64>;
    let _2301: std::num::Wrapping<u64>;
    let mut _2302: std::num::Wrapping<u64>;
    let mut _2303: &std::num::Wrapping<u64>;
    let _2304: std::num::Wrapping<u64>;
    let mut _2307: bool;
    let mut _2308: bool;
    let _2310: !;
    let mut _2311: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2312: std::num::Wrapping<usize>;
    let mut _2313: std::num::Wrapping<usize>;
    let mut _2314: std::num::Wrapping<usize>;
    let _2315: ();
    let mut _2316: &mut std::num::Wrapping<usize>;
    let mut _2317: std::num::Wrapping<usize>;
    let mut _2318: (&std::num::Wrapping<usize>, &std::num::Wrapping<usize>);
    let mut _2319: &std::num::Wrapping<usize>;
    let _2320: std::num::Wrapping<usize>;
    let mut _2321: std::num::Wrapping<usize>;
    let mut _2322: &std::num::Wrapping<usize>;
    let _2323: std::num::Wrapping<usize>;
    let mut _2326: bool;
    let mut _2327: bool;
    let _2329: !;
    let mut _2330: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2331: std::num::Wrapping<usize>;
    let mut _2332: std::num::Wrapping<usize>;
    let mut _2333: std::num::Wrapping<usize>;
    let _2334: ();
    let mut _2335: &mut std::num::Wrapping<usize>;
    let mut _2336: &std::num::Wrapping<usize>;
    let _2337: std::num::Wrapping<usize>;
    let mut _2338: (&std::num::Wrapping<usize>, &std::num::Wrapping<usize>);
    let mut _2339: &std::num::Wrapping<usize>;
    let _2340: std::num::Wrapping<usize>;
    let mut _2341: std::num::Wrapping<usize>;
    let mut _2342: &std::num::Wrapping<usize>;
    let _2343: std::num::Wrapping<usize>;
    let mut _2346: bool;
    let mut _2347: bool;
    let _2349: !;
    let mut _2350: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2351: std::num::Wrapping<i8>;
    let mut _2352: std::num::Wrapping<i8>;
    let mut _2353: std::num::Wrapping<i8>;
    let _2354: ();
    let mut _2355: &mut std::num::Wrapping<i8>;
    let mut _2356: std::num::Wrapping<i8>;
    let mut _2357: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _2358: &std::num::Wrapping<i8>;
    let _2359: std::num::Wrapping<i8>;
    let mut _2360: std::num::Wrapping<i8>;
    let mut _2361: &std::num::Wrapping<i8>;
    let _2362: std::num::Wrapping<i8>;
    let mut _2365: bool;
    let mut _2366: bool;
    let _2368: !;
    let mut _2369: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2370: std::num::Wrapping<i8>;
    let mut _2371: std::num::Wrapping<i8>;
    let mut _2372: std::num::Wrapping<i8>;
    let _2373: ();
    let mut _2374: &mut std::num::Wrapping<i8>;
    let mut _2375: &std::num::Wrapping<i8>;
    let _2376: std::num::Wrapping<i8>;
    let mut _2377: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _2378: &std::num::Wrapping<i8>;
    let _2379: std::num::Wrapping<i8>;
    let mut _2380: std::num::Wrapping<i8>;
    let mut _2381: &std::num::Wrapping<i8>;
    let _2382: std::num::Wrapping<i8>;
    let mut _2385: bool;
    let mut _2386: bool;
    let _2388: !;
    let mut _2389: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2390: std::num::Wrapping<i16>;
    let mut _2391: std::num::Wrapping<i16>;
    let mut _2392: std::num::Wrapping<i16>;
    let _2393: ();
    let mut _2394: &mut std::num::Wrapping<i16>;
    let mut _2395: std::num::Wrapping<i16>;
    let mut _2396: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _2397: &std::num::Wrapping<i16>;
    let _2398: std::num::Wrapping<i16>;
    let mut _2399: std::num::Wrapping<i16>;
    let mut _2400: &std::num::Wrapping<i16>;
    let _2401: std::num::Wrapping<i16>;
    let mut _2404: bool;
    let mut _2405: bool;
    let _2407: !;
    let mut _2408: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2409: std::num::Wrapping<i16>;
    let mut _2410: std::num::Wrapping<i16>;
    let mut _2411: std::num::Wrapping<i16>;
    let _2412: ();
    let mut _2413: &mut std::num::Wrapping<i16>;
    let mut _2414: &std::num::Wrapping<i16>;
    let _2415: std::num::Wrapping<i16>;
    let mut _2416: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _2417: &std::num::Wrapping<i16>;
    let _2418: std::num::Wrapping<i16>;
    let mut _2419: std::num::Wrapping<i16>;
    let mut _2420: &std::num::Wrapping<i16>;
    let _2421: std::num::Wrapping<i16>;
    let mut _2424: bool;
    let mut _2425: bool;
    let _2427: !;
    let mut _2428: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2429: std::num::Wrapping<i32>;
    let mut _2430: std::num::Wrapping<i32>;
    let mut _2431: std::num::Wrapping<i32>;
    let _2432: ();
    let mut _2433: &mut std::num::Wrapping<i32>;
    let mut _2434: std::num::Wrapping<i32>;
    let mut _2435: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _2436: &std::num::Wrapping<i32>;
    let _2437: std::num::Wrapping<i32>;
    let mut _2438: std::num::Wrapping<i32>;
    let mut _2439: &std::num::Wrapping<i32>;
    let _2440: std::num::Wrapping<i32>;
    let mut _2443: bool;
    let mut _2444: bool;
    let _2446: !;
    let mut _2447: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2448: std::num::Wrapping<i32>;
    let mut _2449: std::num::Wrapping<i32>;
    let mut _2450: std::num::Wrapping<i32>;
    let _2451: ();
    let mut _2452: &mut std::num::Wrapping<i32>;
    let mut _2453: &std::num::Wrapping<i32>;
    let _2454: std::num::Wrapping<i32>;
    let mut _2455: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _2456: &std::num::Wrapping<i32>;
    let _2457: std::num::Wrapping<i32>;
    let mut _2458: std::num::Wrapping<i32>;
    let mut _2459: &std::num::Wrapping<i32>;
    let _2460: std::num::Wrapping<i32>;
    let mut _2463: bool;
    let mut _2464: bool;
    let _2466: !;
    let mut _2467: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2468: std::num::Wrapping<i64>;
    let mut _2469: std::num::Wrapping<i64>;
    let mut _2470: std::num::Wrapping<i64>;
    let _2471: ();
    let mut _2472: &mut std::num::Wrapping<i64>;
    let mut _2473: std::num::Wrapping<i64>;
    let mut _2474: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _2475: &std::num::Wrapping<i64>;
    let _2476: std::num::Wrapping<i64>;
    let mut _2477: std::num::Wrapping<i64>;
    let mut _2478: &std::num::Wrapping<i64>;
    let _2479: std::num::Wrapping<i64>;
    let mut _2482: bool;
    let mut _2483: bool;
    let _2485: !;
    let mut _2486: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2487: std::num::Wrapping<i64>;
    let mut _2488: std::num::Wrapping<i64>;
    let mut _2489: std::num::Wrapping<i64>;
    let _2490: ();
    let mut _2491: &mut std::num::Wrapping<i64>;
    let mut _2492: &std::num::Wrapping<i64>;
    let _2493: std::num::Wrapping<i64>;
    let mut _2494: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _2495: &std::num::Wrapping<i64>;
    let _2496: std::num::Wrapping<i64>;
    let mut _2497: std::num::Wrapping<i64>;
    let mut _2498: &std::num::Wrapping<i64>;
    let _2499: std::num::Wrapping<i64>;
    let mut _2502: bool;
    let mut _2503: bool;
    let _2505: !;
    let mut _2506: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2507: std::num::Wrapping<isize>;
    let mut _2508: std::num::Wrapping<isize>;
    let mut _2509: std::num::Wrapping<isize>;
    let _2510: ();
    let mut _2511: &mut std::num::Wrapping<isize>;
    let mut _2512: std::num::Wrapping<isize>;
    let mut _2513: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _2514: &std::num::Wrapping<isize>;
    let _2515: std::num::Wrapping<isize>;
    let mut _2516: std::num::Wrapping<isize>;
    let mut _2517: &std::num::Wrapping<isize>;
    let _2518: std::num::Wrapping<isize>;
    let mut _2521: bool;
    let mut _2522: bool;
    let _2524: !;
    let mut _2525: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2526: std::num::Wrapping<isize>;
    let mut _2527: std::num::Wrapping<isize>;
    let mut _2528: std::num::Wrapping<isize>;
    let _2529: ();
    let mut _2530: &mut std::num::Wrapping<isize>;
    let mut _2531: &std::num::Wrapping<isize>;
    let _2532: std::num::Wrapping<isize>;
    let mut _2533: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _2534: &std::num::Wrapping<isize>;
    let _2535: std::num::Wrapping<isize>;
    let mut _2536: std::num::Wrapping<isize>;
    let mut _2537: &std::num::Wrapping<isize>;
    let _2538: std::num::Wrapping<isize>;
    let mut _2541: bool;
    let mut _2542: bool;
    let _2544: !;
    let mut _2545: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2546: std::num::Wrapping<u8>;
    let mut _2547: std::num::Wrapping<u8>;
    let mut _2548: std::num::Wrapping<u8>;
    let _2549: ();
    let mut _2550: &mut std::num::Wrapping<u8>;
    let mut _2551: std::num::Wrapping<u8>;
    let mut _2552: (&std::num::Wrapping<u8>, &std::num::Wrapping<u8>);
    let mut _2553: &std::num::Wrapping<u8>;
    let _2554: std::num::Wrapping<u8>;
    let mut _2555: std::num::Wrapping<u8>;
    let mut _2556: &std::num::Wrapping<u8>;
    let _2557: std::num::Wrapping<u8>;
    let mut _2560: bool;
    let mut _2561: bool;
    let _2563: !;
    let mut _2564: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2565: std::num::Wrapping<u8>;
    let mut _2566: std::num::Wrapping<u8>;
    let mut _2567: std::num::Wrapping<u8>;
    let _2568: ();
    let mut _2569: &mut std::num::Wrapping<u8>;
    let mut _2570: &std::num::Wrapping<u8>;
    let _2571: std::num::Wrapping<u8>;
    let mut _2572: (&std::num::Wrapping<u8>, &std::num::Wrapping<u8>);
    let mut _2573: &std::num::Wrapping<u8>;
    let _2574: std::num::Wrapping<u8>;
    let mut _2575: std::num::Wrapping<u8>;
    let mut _2576: &std::num::Wrapping<u8>;
    let _2577: std::num::Wrapping<u8>;
    let mut _2580: bool;
    let mut _2581: bool;
    let _2583: !;
    let mut _2584: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2585: std::num::Wrapping<u16>;
    let mut _2586: std::num::Wrapping<u16>;
    let mut _2587: std::num::Wrapping<u16>;
    let _2588: ();
    let mut _2589: &mut std::num::Wrapping<u16>;
    let mut _2590: std::num::Wrapping<u16>;
    let mut _2591: (&std::num::Wrapping<u16>, &std::num::Wrapping<u16>);
    let mut _2592: &std::num::Wrapping<u16>;
    let _2593: std::num::Wrapping<u16>;
    let mut _2594: std::num::Wrapping<u16>;
    let mut _2595: &std::num::Wrapping<u16>;
    let _2596: std::num::Wrapping<u16>;
    let mut _2599: bool;
    let mut _2600: bool;
    let _2602: !;
    let mut _2603: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2604: std::num::Wrapping<u16>;
    let mut _2605: std::num::Wrapping<u16>;
    let mut _2606: std::num::Wrapping<u16>;
    let _2607: ();
    let mut _2608: &mut std::num::Wrapping<u16>;
    let mut _2609: &std::num::Wrapping<u16>;
    let _2610: std::num::Wrapping<u16>;
    let mut _2611: (&std::num::Wrapping<u16>, &std::num::Wrapping<u16>);
    let mut _2612: &std::num::Wrapping<u16>;
    let _2613: std::num::Wrapping<u16>;
    let mut _2614: std::num::Wrapping<u16>;
    let mut _2615: &std::num::Wrapping<u16>;
    let _2616: std::num::Wrapping<u16>;
    let mut _2619: bool;
    let mut _2620: bool;
    let _2622: !;
    let mut _2623: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2624: std::num::Wrapping<u32>;
    let mut _2625: std::num::Wrapping<u32>;
    let mut _2626: std::num::Wrapping<u32>;
    let _2627: ();
    let mut _2628: &mut std::num::Wrapping<u32>;
    let mut _2629: std::num::Wrapping<u32>;
    let mut _2630: (&std::num::Wrapping<u32>, &std::num::Wrapping<u32>);
    let mut _2631: &std::num::Wrapping<u32>;
    let _2632: std::num::Wrapping<u32>;
    let mut _2633: std::num::Wrapping<u32>;
    let mut _2634: &std::num::Wrapping<u32>;
    let _2635: std::num::Wrapping<u32>;
    let mut _2638: bool;
    let mut _2639: bool;
    let _2641: !;
    let mut _2642: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2643: std::num::Wrapping<u32>;
    let mut _2644: std::num::Wrapping<u32>;
    let mut _2645: std::num::Wrapping<u32>;
    let _2646: ();
    let mut _2647: &mut std::num::Wrapping<u32>;
    let mut _2648: &std::num::Wrapping<u32>;
    let _2649: std::num::Wrapping<u32>;
    let mut _2650: (&std::num::Wrapping<u32>, &std::num::Wrapping<u32>);
    let mut _2651: &std::num::Wrapping<u32>;
    let _2652: std::num::Wrapping<u32>;
    let mut _2653: std::num::Wrapping<u32>;
    let mut _2654: &std::num::Wrapping<u32>;
    let _2655: std::num::Wrapping<u32>;
    let mut _2658: bool;
    let mut _2659: bool;
    let _2661: !;
    let mut _2662: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2663: std::num::Wrapping<u64>;
    let mut _2664: std::num::Wrapping<u64>;
    let mut _2665: std::num::Wrapping<u64>;
    let _2666: ();
    let mut _2667: &mut std::num::Wrapping<u64>;
    let mut _2668: std::num::Wrapping<u64>;
    let mut _2669: (&std::num::Wrapping<u64>, &std::num::Wrapping<u64>);
    let mut _2670: &std::num::Wrapping<u64>;
    let _2671: std::num::Wrapping<u64>;
    let mut _2672: std::num::Wrapping<u64>;
    let mut _2673: &std::num::Wrapping<u64>;
    let _2674: std::num::Wrapping<u64>;
    let mut _2677: bool;
    let mut _2678: bool;
    let _2680: !;
    let mut _2681: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2682: std::num::Wrapping<u64>;
    let mut _2683: std::num::Wrapping<u64>;
    let mut _2684: std::num::Wrapping<u64>;
    let _2685: ();
    let mut _2686: &mut std::num::Wrapping<u64>;
    let mut _2687: &std::num::Wrapping<u64>;
    let _2688: std::num::Wrapping<u64>;
    let mut _2689: (&std::num::Wrapping<u64>, &std::num::Wrapping<u64>);
    let mut _2690: &std::num::Wrapping<u64>;
    let _2691: std::num::Wrapping<u64>;
    let mut _2692: std::num::Wrapping<u64>;
    let mut _2693: &std::num::Wrapping<u64>;
    let _2694: std::num::Wrapping<u64>;
    let mut _2697: bool;
    let mut _2698: bool;
    let _2700: !;
    let mut _2701: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2702: std::num::Wrapping<usize>;
    let mut _2703: std::num::Wrapping<usize>;
    let mut _2704: std::num::Wrapping<usize>;
    let _2705: ();
    let mut _2706: &mut std::num::Wrapping<usize>;
    let mut _2707: std::num::Wrapping<usize>;
    let mut _2708: (&std::num::Wrapping<usize>, &std::num::Wrapping<usize>);
    let mut _2709: &std::num::Wrapping<usize>;
    let _2710: std::num::Wrapping<usize>;
    let mut _2711: std::num::Wrapping<usize>;
    let mut _2712: &std::num::Wrapping<usize>;
    let _2713: std::num::Wrapping<usize>;
    let mut _2716: bool;
    let mut _2717: bool;
    let _2719: !;
    let mut _2720: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2721: std::num::Wrapping<usize>;
    let mut _2722: std::num::Wrapping<usize>;
    let mut _2723: std::num::Wrapping<usize>;
    let _2724: ();
    let mut _2725: &mut std::num::Wrapping<usize>;
    let mut _2726: &std::num::Wrapping<usize>;
    let _2727: std::num::Wrapping<usize>;
    let mut _2728: (&std::num::Wrapping<usize>, &std::num::Wrapping<usize>);
    let mut _2729: &std::num::Wrapping<usize>;
    let _2730: std::num::Wrapping<usize>;
    let mut _2731: std::num::Wrapping<usize>;
    let mut _2732: &std::num::Wrapping<usize>;
    let _2733: std::num::Wrapping<usize>;
    let mut _2736: bool;
    let mut _2737: bool;
    let _2739: !;
    let mut _2740: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug tmp => _1;
        let _13: &std::num::Wrapping<i8>;
        let _14: &std::num::Wrapping<i8>;
        scope 2 {
            debug left_val => _13;
            debug right_val => _14;
            let _17: core::panicking::AssertKind;
            scope 3 {
                debug kind => _17;
            }
        }
    }
    scope 4 {
        debug tmp => _20;
        let _33: &std::num::Wrapping<i8>;
        let _34: &std::num::Wrapping<i8>;
        scope 5 {
            debug left_val => _33;
            debug right_val => _34;
            let _37: core::panicking::AssertKind;
            scope 6 {
                debug kind => _37;
            }
        }
    }
    scope 7 {
        debug tmp => _40;
        let _52: &std::num::Wrapping<i16>;
        let _53: &std::num::Wrapping<i16>;
        scope 8 {
            debug left_val => _52;
            debug right_val => _53;
            let _56: core::panicking::AssertKind;
            scope 9 {
                debug kind => _56;
            }
        }
    }
    scope 10 {
        debug tmp => _59;
        let _72: &std::num::Wrapping<i16>;
        let _73: &std::num::Wrapping<i16>;
        scope 11 {
            debug left_val => _72;
            debug right_val => _73;
            let _76: core::panicking::AssertKind;
            scope 12 {
                debug kind => _76;
            }
        }
    }
    scope 13 {
        debug tmp => _79;
        let _91: &std::num::Wrapping<i32>;
        let _92: &std::num::Wrapping<i32>;
        scope 14 {
            debug left_val => _91;
            debug right_val => _92;
            let _95: core::panicking::AssertKind;
            scope 15 {
                debug kind => _95;
            }
        }
    }
    scope 16 {
        debug tmp => _98;
        let _111: &std::num::Wrapping<i32>;
        let _112: &std::num::Wrapping<i32>;
        scope 17 {
            debug left_val => _111;
            debug right_val => _112;
            let _115: core::panicking::AssertKind;
            scope 18 {
                debug kind => _115;
            }
        }
    }
    scope 19 {
        debug tmp => _118;
        let _130: &std::num::Wrapping<i64>;
        let _131: &std::num::Wrapping<i64>;
        scope 20 {
            debug left_val => _130;
            debug right_val => _131;
            let _134: core::panicking::AssertKind;
            scope 21 {
                debug kind => _134;
            }
        }
    }
    scope 22 {
        debug tmp => _137;
        let _150: &std::num::Wrapping<i64>;
        let _151: &std::num::Wrapping<i64>;
        scope 23 {
            debug left_val => _150;
            debug right_val => _151;
            let _154: core::panicking::AssertKind;
            scope 24 {
                debug kind => _154;
            }
        }
    }
    scope 25 {
        debug tmp => _157;
        let _169: &std::num::Wrapping<isize>;
        let _170: &std::num::Wrapping<isize>;
        scope 26 {
            debug left_val => _169;
            debug right_val => _170;
            let _173: core::panicking::AssertKind;
            scope 27 {
                debug kind => _173;
            }
        }
    }
    scope 28 {
        debug tmp => _176;
        let _189: &std::num::Wrapping<isize>;
        let _190: &std::num::Wrapping<isize>;
        scope 29 {
            debug left_val => _189;
            debug right_val => _190;
            let _193: core::panicking::AssertKind;
            scope 30 {
                debug kind => _193;
            }
        }
    }
    scope 31 {
        debug tmp => _196;
        let _208: &std::num::Wrapping<u8>;
        let _209: &std::num::Wrapping<u8>;
        scope 32 {
            debug left_val => _208;
            debug right_val => _209;
            let _212: core::panicking::AssertKind;
            scope 33 {
                debug kind => _212;
            }
        }
    }
    scope 34 {
        debug tmp => _215;
        let _228: &std::num::Wrapping<u8>;
        let _229: &std::num::Wrapping<u8>;
        scope 35 {
            debug left_val => _228;
            debug right_val => _229;
            let _232: core::panicking::AssertKind;
            scope 36 {
                debug kind => _232;
            }
        }
    }
    scope 37 {
        debug tmp => _235;
        let _247: &std::num::Wrapping<u16>;
        let _248: &std::num::Wrapping<u16>;
        scope 38 {
            debug left_val => _247;
            debug right_val => _248;
            let _251: core::panicking::AssertKind;
            scope 39 {
                debug kind => _251;
            }
        }
    }
    scope 40 {
        debug tmp => _254;
        let _267: &std::num::Wrapping<u16>;
        let _268: &std::num::Wrapping<u16>;
        scope 41 {
            debug left_val => _267;
            debug right_val => _268;
            let _271: core::panicking::AssertKind;
            scope 42 {
                debug kind => _271;
            }
        }
    }
    scope 43 {
        debug tmp => _274;
        let _286: &std::num::Wrapping<u32>;
        let _287: &std::num::Wrapping<u32>;
        scope 44 {
            debug left_val => _286;
            debug right_val => _287;
            let _290: core::panicking::AssertKind;
            scope 45 {
                debug kind => _290;
            }
        }
    }
    scope 46 {
        debug tmp => _293;
        let _306: &std::num::Wrapping<u32>;
        let _307: &std::num::Wrapping<u32>;
        scope 47 {
            debug left_val => _306;
            debug right_val => _307;
            let _310: core::panicking::AssertKind;
            scope 48 {
                debug kind => _310;
            }
        }
    }
    scope 49 {
        debug tmp => _313;
        let _325: &std::num::Wrapping<u64>;
        let _326: &std::num::Wrapping<u64>;
        scope 50 {
            debug left_val => _325;
            debug right_val => _326;
            let _329: core::panicking::AssertKind;
            scope 51 {
                debug kind => _329;
            }
        }
    }
    scope 52 {
        debug tmp => _332;
        let _345: &std::num::Wrapping<u64>;
        let _346: &std::num::Wrapping<u64>;
        scope 53 {
            debug left_val => _345;
            debug right_val => _346;
            let _349: core::panicking::AssertKind;
            scope 54 {
                debug kind => _349;
            }
        }
    }
    scope 55 {
        debug tmp => _352;
        let _364: &std::num::Wrapping<usize>;
        let _365: &std::num::Wrapping<usize>;
        scope 56 {
            debug left_val => _364;
            debug right_val => _365;
            let _368: core::panicking::AssertKind;
            scope 57 {
                debug kind => _368;
            }
        }
    }
    scope 58 {
        debug tmp => _371;
        let _384: &std::num::Wrapping<usize>;
        let _385: &std::num::Wrapping<usize>;
        scope 59 {
            debug left_val => _384;
            debug right_val => _385;
            let _388: core::panicking::AssertKind;
            scope 60 {
                debug kind => _388;
            }
        }
    }
    scope 61 {
        debug tmp => _391;
        let _403: &std::num::Wrapping<i8>;
        let _404: &std::num::Wrapping<i8>;
        scope 62 {
            debug left_val => _403;
            debug right_val => _404;
            let _407: core::panicking::AssertKind;
            scope 63 {
                debug kind => _407;
            }
        }
    }
    scope 64 {
        debug tmp => _410;
        let _423: &std::num::Wrapping<i8>;
        let _424: &std::num::Wrapping<i8>;
        scope 65 {
            debug left_val => _423;
            debug right_val => _424;
            let _427: core::panicking::AssertKind;
            scope 66 {
                debug kind => _427;
            }
        }
    }
    scope 67 {
        debug tmp => _430;
        let _442: &std::num::Wrapping<i16>;
        let _443: &std::num::Wrapping<i16>;
        scope 68 {
            debug left_val => _442;
            debug right_val => _443;
            let _446: core::panicking::AssertKind;
            scope 69 {
                debug kind => _446;
            }
        }
    }
    scope 70 {
        debug tmp => _449;
        let _462: &std::num::Wrapping<i16>;
        let _463: &std::num::Wrapping<i16>;
        scope 71 {
            debug left_val => _462;
            debug right_val => _463;
            let _466: core::panicking::AssertKind;
            scope 72 {
                debug kind => _466;
            }
        }
    }
    scope 73 {
        debug tmp => _469;
        let _481: &std::num::Wrapping<i32>;
        let _482: &std::num::Wrapping<i32>;
        scope 74 {
            debug left_val => _481;
            debug right_val => _482;
            let _485: core::panicking::AssertKind;
            scope 75 {
                debug kind => _485;
            }
        }
    }
    scope 76 {
        debug tmp => _488;
        let _501: &std::num::Wrapping<i32>;
        let _502: &std::num::Wrapping<i32>;
        scope 77 {
            debug left_val => _501;
            debug right_val => _502;
            let _505: core::panicking::AssertKind;
            scope 78 {
                debug kind => _505;
            }
        }
    }
    scope 79 {
        debug tmp => _508;
        let _520: &std::num::Wrapping<i64>;
        let _521: &std::num::Wrapping<i64>;
        scope 80 {
            debug left_val => _520;
            debug right_val => _521;
            let _524: core::panicking::AssertKind;
            scope 81 {
                debug kind => _524;
            }
        }
    }
    scope 82 {
        debug tmp => _527;
        let _540: &std::num::Wrapping<i64>;
        let _541: &std::num::Wrapping<i64>;
        scope 83 {
            debug left_val => _540;
            debug right_val => _541;
            let _544: core::panicking::AssertKind;
            scope 84 {
                debug kind => _544;
            }
        }
    }
    scope 85 {
        debug tmp => _547;
        let _559: &std::num::Wrapping<isize>;
        let _560: &std::num::Wrapping<isize>;
        scope 86 {
            debug left_val => _559;
            debug right_val => _560;
            let _563: core::panicking::AssertKind;
            scope 87 {
                debug kind => _563;
            }
        }
    }
    scope 88 {
        debug tmp => _566;
        let _579: &std::num::Wrapping<isize>;
        let _580: &std::num::Wrapping<isize>;
        scope 89 {
            debug left_val => _579;
            debug right_val => _580;
            let _583: core::panicking::AssertKind;
            scope 90 {
                debug kind => _583;
            }
        }
    }
    scope 91 {
        debug tmp => _586;
        let _598: &std::num::Wrapping<u8>;
        let _599: &std::num::Wrapping<u8>;
        scope 92 {
            debug left_val => _598;
            debug right_val => _599;
            let _602: core::panicking::AssertKind;
            scope 93 {
                debug kind => _602;
            }
        }
    }
    scope 94 {
        debug tmp => _605;
        let _618: &std::num::Wrapping<u8>;
        let _619: &std::num::Wrapping<u8>;
        scope 95 {
            debug left_val => _618;
            debug right_val => _619;
            let _622: core::panicking::AssertKind;
            scope 96 {
                debug kind => _622;
            }
        }
    }
    scope 97 {
        debug tmp => _625;
        let _637: &std::num::Wrapping<u16>;
        let _638: &std::num::Wrapping<u16>;
        scope 98 {
            debug left_val => _637;
            debug right_val => _638;
            let _641: core::panicking::AssertKind;
            scope 99 {
                debug kind => _641;
            }
        }
    }
    scope 100 {
        debug tmp => _644;
        let _657: &std::num::Wrapping<u16>;
        let _658: &std::num::Wrapping<u16>;
        scope 101 {
            debug left_val => _657;
            debug right_val => _658;
            let _661: core::panicking::AssertKind;
            scope 102 {
                debug kind => _661;
            }
        }
    }
    scope 103 {
        debug tmp => _664;
        let _676: &std::num::Wrapping<u32>;
        let _677: &std::num::Wrapping<u32>;
        scope 104 {
            debug left_val => _676;
            debug right_val => _677;
            let _680: core::panicking::AssertKind;
            scope 105 {
                debug kind => _680;
            }
        }
    }
    scope 106 {
        debug tmp => _683;
        let _696: &std::num::Wrapping<u32>;
        let _697: &std::num::Wrapping<u32>;
        scope 107 {
            debug left_val => _696;
            debug right_val => _697;
            let _700: core::panicking::AssertKind;
            scope 108 {
                debug kind => _700;
            }
        }
    }
    scope 109 {
        debug tmp => _703;
        let _715: &std::num::Wrapping<u64>;
        let _716: &std::num::Wrapping<u64>;
        scope 110 {
            debug left_val => _715;
            debug right_val => _716;
            let _719: core::panicking::AssertKind;
            scope 111 {
                debug kind => _719;
            }
        }
    }
    scope 112 {
        debug tmp => _722;
        let _735: &std::num::Wrapping<u64>;
        let _736: &std::num::Wrapping<u64>;
        scope 113 {
            debug left_val => _735;
            debug right_val => _736;
            let _739: core::panicking::AssertKind;
            scope 114 {
                debug kind => _739;
            }
        }
    }
    scope 115 {
        debug tmp => _742;
        let _754: &std::num::Wrapping<usize>;
        let _755: &std::num::Wrapping<usize>;
        scope 116 {
            debug left_val => _754;
            debug right_val => _755;
            let _758: core::panicking::AssertKind;
            scope 117 {
                debug kind => _758;
            }
        }
    }
    scope 118 {
        debug tmp => _761;
        let _774: &std::num::Wrapping<usize>;
        let _775: &std::num::Wrapping<usize>;
        scope 119 {
            debug left_val => _774;
            debug right_val => _775;
            let _778: core::panicking::AssertKind;
            scope 120 {
                debug kind => _778;
            }
        }
    }
    scope 121 {
        debug tmp => _781;
        let _793: &std::num::Wrapping<i8>;
        let _794: &std::num::Wrapping<i8>;
        scope 122 {
            debug left_val => _793;
            debug right_val => _794;
            let _797: core::panicking::AssertKind;
            scope 123 {
                debug kind => _797;
            }
        }
    }
    scope 124 {
        debug tmp => _800;
        let _813: &std::num::Wrapping<i8>;
        let _814: &std::num::Wrapping<i8>;
        scope 125 {
            debug left_val => _813;
            debug right_val => _814;
            let _817: core::panicking::AssertKind;
            scope 126 {
                debug kind => _817;
            }
        }
    }
    scope 127 {
        debug tmp => _820;
        let _832: &std::num::Wrapping<i16>;
        let _833: &std::num::Wrapping<i16>;
        scope 128 {
            debug left_val => _832;
            debug right_val => _833;
            let _836: core::panicking::AssertKind;
            scope 129 {
                debug kind => _836;
            }
        }
    }
    scope 130 {
        debug tmp => _839;
        let _852: &std::num::Wrapping<i16>;
        let _853: &std::num::Wrapping<i16>;
        scope 131 {
            debug left_val => _852;
            debug right_val => _853;
            let _856: core::panicking::AssertKind;
            scope 132 {
                debug kind => _856;
            }
        }
    }
    scope 133 {
        debug tmp => _859;
        let _871: &std::num::Wrapping<i32>;
        let _872: &std::num::Wrapping<i32>;
        scope 134 {
            debug left_val => _871;
            debug right_val => _872;
            let _875: core::panicking::AssertKind;
            scope 135 {
                debug kind => _875;
            }
        }
    }
    scope 136 {
        debug tmp => _878;
        let _891: &std::num::Wrapping<i32>;
        let _892: &std::num::Wrapping<i32>;
        scope 137 {
            debug left_val => _891;
            debug right_val => _892;
            let _895: core::panicking::AssertKind;
            scope 138 {
                debug kind => _895;
            }
        }
    }
    scope 139 {
        debug tmp => _898;
        let _910: &std::num::Wrapping<i64>;
        let _911: &std::num::Wrapping<i64>;
        scope 140 {
            debug left_val => _910;
            debug right_val => _911;
            let _914: core::panicking::AssertKind;
            scope 141 {
                debug kind => _914;
            }
        }
    }
    scope 142 {
        debug tmp => _917;
        let _930: &std::num::Wrapping<i64>;
        let _931: &std::num::Wrapping<i64>;
        scope 143 {
            debug left_val => _930;
            debug right_val => _931;
            let _934: core::panicking::AssertKind;
            scope 144 {
                debug kind => _934;
            }
        }
    }
    scope 145 {
        debug tmp => _937;
        let _949: &std::num::Wrapping<isize>;
        let _950: &std::num::Wrapping<isize>;
        scope 146 {
            debug left_val => _949;
            debug right_val => _950;
            let _953: core::panicking::AssertKind;
            scope 147 {
                debug kind => _953;
            }
        }
    }
    scope 148 {
        debug tmp => _956;
        let _969: &std::num::Wrapping<isize>;
        let _970: &std::num::Wrapping<isize>;
        scope 149 {
            debug left_val => _969;
            debug right_val => _970;
            let _973: core::panicking::AssertKind;
            scope 150 {
                debug kind => _973;
            }
        }
    }
    scope 151 {
        debug tmp => _976;
        let _989: &std::num::Wrapping<u8>;
        let _990: &std::num::Wrapping<u8>;
        scope 152 {
            debug left_val => _989;
            debug right_val => _990;
            let _993: core::panicking::AssertKind;
            scope 153 {
                debug kind => _993;
            }
        }
    }
    scope 154 {
        debug tmp => _996;
        let _1010: &std::num::Wrapping<u8>;
        let _1011: &std::num::Wrapping<u8>;
        scope 155 {
            debug left_val => _1010;
            debug right_val => _1011;
            let _1014: core::panicking::AssertKind;
            scope 156 {
                debug kind => _1014;
            }
        }
    }
    scope 157 {
        debug tmp => _1017;
        let _1030: &std::num::Wrapping<u16>;
        let _1031: &std::num::Wrapping<u16>;
        scope 158 {
            debug left_val => _1030;
            debug right_val => _1031;
            let _1034: core::panicking::AssertKind;
            scope 159 {
                debug kind => _1034;
            }
        }
    }
    scope 160 {
        debug tmp => _1037;
        let _1051: &std::num::Wrapping<u16>;
        let _1052: &std::num::Wrapping<u16>;
        scope 161 {
            debug left_val => _1051;
            debug right_val => _1052;
            let _1055: core::panicking::AssertKind;
            scope 162 {
                debug kind => _1055;
            }
        }
    }
    scope 163 {
        debug tmp => _1058;
        let _1071: &std::num::Wrapping<u32>;
        let _1072: &std::num::Wrapping<u32>;
        scope 164 {
            debug left_val => _1071;
            debug right_val => _1072;
            let _1075: core::panicking::AssertKind;
            scope 165 {
                debug kind => _1075;
            }
        }
    }
    scope 166 {
        debug tmp => _1078;
        let _1092: &std::num::Wrapping<u32>;
        let _1093: &std::num::Wrapping<u32>;
        scope 167 {
            debug left_val => _1092;
            debug right_val => _1093;
            let _1096: core::panicking::AssertKind;
            scope 168 {
                debug kind => _1096;
            }
        }
    }
    scope 169 {
        debug tmp => _1099;
        let _1112: &std::num::Wrapping<u64>;
        let _1113: &std::num::Wrapping<u64>;
        scope 170 {
            debug left_val => _1112;
            debug right_val => _1113;
            let _1116: core::panicking::AssertKind;
            scope 171 {
                debug kind => _1116;
            }
        }
    }
    scope 172 {
        debug tmp => _1119;
        let _1133: &std::num::Wrapping<u64>;
        let _1134: &std::num::Wrapping<u64>;
        scope 173 {
            debug left_val => _1133;
            debug right_val => _1134;
            let _1137: core::panicking::AssertKind;
            scope 174 {
                debug kind => _1137;
            }
        }
    }
    scope 175 {
        debug tmp => _1140;
        let _1153: &std::num::Wrapping<usize>;
        let _1154: &std::num::Wrapping<usize>;
        scope 176 {
            debug left_val => _1153;
            debug right_val => _1154;
            let _1157: core::panicking::AssertKind;
            scope 177 {
                debug kind => _1157;
            }
        }
    }
    scope 178 {
        debug tmp => _1160;
        let _1174: &std::num::Wrapping<usize>;
        let _1175: &std::num::Wrapping<usize>;
        scope 179 {
            debug left_val => _1174;
            debug right_val => _1175;
            let _1178: core::panicking::AssertKind;
            scope 180 {
                debug kind => _1178;
            }
        }
    }
    scope 181 {
        debug tmp => _1181;
        let _1193: &std::num::Wrapping<i8>;
        let _1194: &std::num::Wrapping<i8>;
        scope 182 {
            debug left_val => _1193;
            debug right_val => _1194;
            let _1197: core::panicking::AssertKind;
            scope 183 {
                debug kind => _1197;
            }
        }
    }
    scope 184 {
        debug tmp => _1200;
        let _1213: &std::num::Wrapping<i8>;
        let _1214: &std::num::Wrapping<i8>;
        scope 185 {
            debug left_val => _1213;
            debug right_val => _1214;
            let _1217: core::panicking::AssertKind;
            scope 186 {
                debug kind => _1217;
            }
        }
    }
    scope 187 {
        debug tmp => _1220;
        let _1232: &std::num::Wrapping<i16>;
        let _1233: &std::num::Wrapping<i16>;
        scope 188 {
            debug left_val => _1232;
            debug right_val => _1233;
            let _1236: core::panicking::AssertKind;
            scope 189 {
                debug kind => _1236;
            }
        }
    }
    scope 190 {
        debug tmp => _1239;
        let _1252: &std::num::Wrapping<i16>;
        let _1253: &std::num::Wrapping<i16>;
        scope 191 {
            debug left_val => _1252;
            debug right_val => _1253;
            let _1256: core::panicking::AssertKind;
            scope 192 {
                debug kind => _1256;
            }
        }
    }
    scope 193 {
        debug tmp => _1259;
        let _1271: &std::num::Wrapping<i32>;
        let _1272: &std::num::Wrapping<i32>;
        scope 194 {
            debug left_val => _1271;
            debug right_val => _1272;
            let _1275: core::panicking::AssertKind;
            scope 195 {
                debug kind => _1275;
            }
        }
    }
    scope 196 {
        debug tmp => _1278;
        let _1291: &std::num::Wrapping<i32>;
        let _1292: &std::num::Wrapping<i32>;
        scope 197 {
            debug left_val => _1291;
            debug right_val => _1292;
            let _1295: core::panicking::AssertKind;
            scope 198 {
                debug kind => _1295;
            }
        }
    }
    scope 199 {
        debug tmp => _1298;
        let _1310: &std::num::Wrapping<i64>;
        let _1311: &std::num::Wrapping<i64>;
        scope 200 {
            debug left_val => _1310;
            debug right_val => _1311;
            let _1314: core::panicking::AssertKind;
            scope 201 {
                debug kind => _1314;
            }
        }
    }
    scope 202 {
        debug tmp => _1317;
        let _1330: &std::num::Wrapping<i64>;
        let _1331: &std::num::Wrapping<i64>;
        scope 203 {
            debug left_val => _1330;
            debug right_val => _1331;
            let _1334: core::panicking::AssertKind;
            scope 204 {
                debug kind => _1334;
            }
        }
    }
    scope 205 {
        debug tmp => _1337;
        let _1349: &std::num::Wrapping<isize>;
        let _1350: &std::num::Wrapping<isize>;
        scope 206 {
            debug left_val => _1349;
            debug right_val => _1350;
            let _1353: core::panicking::AssertKind;
            scope 207 {
                debug kind => _1353;
            }
        }
    }
    scope 208 {
        debug tmp => _1356;
        let _1369: &std::num::Wrapping<isize>;
        let _1370: &std::num::Wrapping<isize>;
        scope 209 {
            debug left_val => _1369;
            debug right_val => _1370;
            let _1373: core::panicking::AssertKind;
            scope 210 {
                debug kind => _1373;
            }
        }
    }
    scope 211 {
        debug tmp => _1376;
        let _1388: &std::num::Wrapping<i8>;
        let _1389: &std::num::Wrapping<i8>;
        scope 212 {
            debug left_val => _1388;
            debug right_val => _1389;
            let _1392: core::panicking::AssertKind;
            scope 213 {
                debug kind => _1392;
            }
        }
    }
    scope 214 {
        debug tmp => _1395;
        let _1408: &std::num::Wrapping<i8>;
        let _1409: &std::num::Wrapping<i8>;
        scope 215 {
            debug left_val => _1408;
            debug right_val => _1409;
            let _1412: core::panicking::AssertKind;
            scope 216 {
                debug kind => _1412;
            }
        }
    }
    scope 217 {
        debug tmp => _1415;
        let _1427: &std::num::Wrapping<i16>;
        let _1428: &std::num::Wrapping<i16>;
        scope 218 {
            debug left_val => _1427;
            debug right_val => _1428;
            let _1431: core::panicking::AssertKind;
            scope 219 {
                debug kind => _1431;
            }
        }
    }
    scope 220 {
        debug tmp => _1434;
        let _1447: &std::num::Wrapping<i16>;
        let _1448: &std::num::Wrapping<i16>;
        scope 221 {
            debug left_val => _1447;
            debug right_val => _1448;
            let _1451: core::panicking::AssertKind;
            scope 222 {
                debug kind => _1451;
            }
        }
    }
    scope 223 {
        debug tmp => _1454;
        let _1466: &std::num::Wrapping<i32>;
        let _1467: &std::num::Wrapping<i32>;
        scope 224 {
            debug left_val => _1466;
            debug right_val => _1467;
            let _1470: core::panicking::AssertKind;
            scope 225 {
                debug kind => _1470;
            }
        }
    }
    scope 226 {
        debug tmp => _1473;
        let _1486: &std::num::Wrapping<i32>;
        let _1487: &std::num::Wrapping<i32>;
        scope 227 {
            debug left_val => _1486;
            debug right_val => _1487;
            let _1490: core::panicking::AssertKind;
            scope 228 {
                debug kind => _1490;
            }
        }
    }
    scope 229 {
        debug tmp => _1493;
        let _1505: &std::num::Wrapping<i64>;
        let _1506: &std::num::Wrapping<i64>;
        scope 230 {
            debug left_val => _1505;
            debug right_val => _1506;
            let _1509: core::panicking::AssertKind;
            scope 231 {
                debug kind => _1509;
            }
        }
    }
    scope 232 {
        debug tmp => _1512;
        let _1525: &std::num::Wrapping<i64>;
        let _1526: &std::num::Wrapping<i64>;
        scope 233 {
            debug left_val => _1525;
            debug right_val => _1526;
            let _1529: core::panicking::AssertKind;
            scope 234 {
                debug kind => _1529;
            }
        }
    }
    scope 235 {
        debug tmp => _1532;
        let _1544: &std::num::Wrapping<isize>;
        let _1545: &std::num::Wrapping<isize>;
        scope 236 {
            debug left_val => _1544;
            debug right_val => _1545;
            let _1548: core::panicking::AssertKind;
            scope 237 {
                debug kind => _1548;
            }
        }
    }
    scope 238 {
        debug tmp => _1551;
        let _1564: &std::num::Wrapping<isize>;
        let _1565: &std::num::Wrapping<isize>;
        scope 239 {
            debug left_val => _1564;
            debug right_val => _1565;
            let _1568: core::panicking::AssertKind;
            scope 240 {
                debug kind => _1568;
            }
        }
    }
    scope 241 {
        debug tmp => _1571;
        let _1583: &std::num::Wrapping<i8>;
        let _1584: &std::num::Wrapping<i8>;
        scope 242 {
            debug left_val => _1583;
            debug right_val => _1584;
            let _1587: core::panicking::AssertKind;
            scope 243 {
                debug kind => _1587;
            }
        }
    }
    scope 244 {
        debug tmp => _1590;
        let _1603: &std::num::Wrapping<i8>;
        let _1604: &std::num::Wrapping<i8>;
        scope 245 {
            debug left_val => _1603;
            debug right_val => _1604;
            let _1607: core::panicking::AssertKind;
            scope 246 {
                debug kind => _1607;
            }
        }
    }
    scope 247 {
        debug tmp => _1610;
        let _1622: &std::num::Wrapping<i16>;
        let _1623: &std::num::Wrapping<i16>;
        scope 248 {
            debug left_val => _1622;
            debug right_val => _1623;
            let _1626: core::panicking::AssertKind;
            scope 249 {
                debug kind => _1626;
            }
        }
    }
    scope 250 {
        debug tmp => _1629;
        let _1642: &std::num::Wrapping<i16>;
        let _1643: &std::num::Wrapping<i16>;
        scope 251 {
            debug left_val => _1642;
            debug right_val => _1643;
            let _1646: core::panicking::AssertKind;
            scope 252 {
                debug kind => _1646;
            }
        }
    }
    scope 253 {
        debug tmp => _1649;
        let _1661: &std::num::Wrapping<i32>;
        let _1662: &std::num::Wrapping<i32>;
        scope 254 {
            debug left_val => _1661;
            debug right_val => _1662;
            let _1665: core::panicking::AssertKind;
            scope 255 {
                debug kind => _1665;
            }
        }
    }
    scope 256 {
        debug tmp => _1668;
        let _1681: &std::num::Wrapping<i32>;
        let _1682: &std::num::Wrapping<i32>;
        scope 257 {
            debug left_val => _1681;
            debug right_val => _1682;
            let _1685: core::panicking::AssertKind;
            scope 258 {
                debug kind => _1685;
            }
        }
    }
    scope 259 {
        debug tmp => _1688;
        let _1700: &std::num::Wrapping<i64>;
        let _1701: &std::num::Wrapping<i64>;
        scope 260 {
            debug left_val => _1700;
            debug right_val => _1701;
            let _1704: core::panicking::AssertKind;
            scope 261 {
                debug kind => _1704;
            }
        }
    }
    scope 262 {
        debug tmp => _1707;
        let _1720: &std::num::Wrapping<i64>;
        let _1721: &std::num::Wrapping<i64>;
        scope 263 {
            debug left_val => _1720;
            debug right_val => _1721;
            let _1724: core::panicking::AssertKind;
            scope 264 {
                debug kind => _1724;
            }
        }
    }
    scope 265 {
        debug tmp => _1727;
        let _1739: &std::num::Wrapping<isize>;
        let _1740: &std::num::Wrapping<isize>;
        scope 266 {
            debug left_val => _1739;
            debug right_val => _1740;
            let _1743: core::panicking::AssertKind;
            scope 267 {
                debug kind => _1743;
            }
        }
    }
    scope 268 {
        debug tmp => _1746;
        let _1759: &std::num::Wrapping<isize>;
        let _1760: &std::num::Wrapping<isize>;
        scope 269 {
            debug left_val => _1759;
            debug right_val => _1760;
            let _1763: core::panicking::AssertKind;
            scope 270 {
                debug kind => _1763;
            }
        }
    }
    scope 271 {
        debug tmp => _1766;
        let _1778: &std::num::Wrapping<u8>;
        let _1779: &std::num::Wrapping<u8>;
        scope 272 {
            debug left_val => _1778;
            debug right_val => _1779;
            let _1782: core::panicking::AssertKind;
            scope 273 {
                debug kind => _1782;
            }
        }
    }
    scope 274 {
        debug tmp => _1785;
        let _1798: &std::num::Wrapping<u8>;
        let _1799: &std::num::Wrapping<u8>;
        scope 275 {
            debug left_val => _1798;
            debug right_val => _1799;
            let _1802: core::panicking::AssertKind;
            scope 276 {
                debug kind => _1802;
            }
        }
    }
    scope 277 {
        debug tmp => _1805;
        let _1817: &std::num::Wrapping<u16>;
        let _1818: &std::num::Wrapping<u16>;
        scope 278 {
            debug left_val => _1817;
            debug right_val => _1818;
            let _1821: core::panicking::AssertKind;
            scope 279 {
                debug kind => _1821;
            }
        }
    }
    scope 280 {
        debug tmp => _1824;
        let _1837: &std::num::Wrapping<u16>;
        let _1838: &std::num::Wrapping<u16>;
        scope 281 {
            debug left_val => _1837;
            debug right_val => _1838;
            let _1841: core::panicking::AssertKind;
            scope 282 {
                debug kind => _1841;
            }
        }
    }
    scope 283 {
        debug tmp => _1844;
        let _1856: &std::num::Wrapping<u32>;
        let _1857: &std::num::Wrapping<u32>;
        scope 284 {
            debug left_val => _1856;
            debug right_val => _1857;
            let _1860: core::panicking::AssertKind;
            scope 285 {
                debug kind => _1860;
            }
        }
    }
    scope 286 {
        debug tmp => _1863;
        let _1876: &std::num::Wrapping<u32>;
        let _1877: &std::num::Wrapping<u32>;
        scope 287 {
            debug left_val => _1876;
            debug right_val => _1877;
            let _1880: core::panicking::AssertKind;
            scope 288 {
                debug kind => _1880;
            }
        }
    }
    scope 289 {
        debug tmp => _1883;
        let _1895: &std::num::Wrapping<u64>;
        let _1896: &std::num::Wrapping<u64>;
        scope 290 {
            debug left_val => _1895;
            debug right_val => _1896;
            let _1899: core::panicking::AssertKind;
            scope 291 {
                debug kind => _1899;
            }
        }
    }
    scope 292 {
        debug tmp => _1902;
        let _1915: &std::num::Wrapping<u64>;
        let _1916: &std::num::Wrapping<u64>;
        scope 293 {
            debug left_val => _1915;
            debug right_val => _1916;
            let _1919: core::panicking::AssertKind;
            scope 294 {
                debug kind => _1919;
            }
        }
    }
    scope 295 {
        debug tmp => _1922;
        let _1934: &std::num::Wrapping<usize>;
        let _1935: &std::num::Wrapping<usize>;
        scope 296 {
            debug left_val => _1934;
            debug right_val => _1935;
            let _1938: core::panicking::AssertKind;
            scope 297 {
                debug kind => _1938;
            }
        }
    }
    scope 298 {
        debug tmp => _1941;
        let _1954: &std::num::Wrapping<usize>;
        let _1955: &std::num::Wrapping<usize>;
        scope 299 {
            debug left_val => _1954;
            debug right_val => _1955;
            let _1958: core::panicking::AssertKind;
            scope 300 {
                debug kind => _1958;
            }
        }
    }
    scope 301 {
        debug tmp => _1961;
        let _1973: &std::num::Wrapping<i8>;
        let _1974: &std::num::Wrapping<i8>;
        scope 302 {
            debug left_val => _1973;
            debug right_val => _1974;
            let _1977: core::panicking::AssertKind;
            scope 303 {
                debug kind => _1977;
            }
        }
    }
    scope 304 {
        debug tmp => _1980;
        let _1993: &std::num::Wrapping<i8>;
        let _1994: &std::num::Wrapping<i8>;
        scope 305 {
            debug left_val => _1993;
            debug right_val => _1994;
            let _1997: core::panicking::AssertKind;
            scope 306 {
                debug kind => _1997;
            }
        }
    }
    scope 307 {
        debug tmp => _2000;
        let _2012: &std::num::Wrapping<i16>;
        let _2013: &std::num::Wrapping<i16>;
        scope 308 {
            debug left_val => _2012;
            debug right_val => _2013;
            let _2016: core::panicking::AssertKind;
            scope 309 {
                debug kind => _2016;
            }
        }
    }
    scope 310 {
        debug tmp => _2019;
        let _2032: &std::num::Wrapping<i16>;
        let _2033: &std::num::Wrapping<i16>;
        scope 311 {
            debug left_val => _2032;
            debug right_val => _2033;
            let _2036: core::panicking::AssertKind;
            scope 312 {
                debug kind => _2036;
            }
        }
    }
    scope 313 {
        debug tmp => _2039;
        let _2051: &std::num::Wrapping<i32>;
        let _2052: &std::num::Wrapping<i32>;
        scope 314 {
            debug left_val => _2051;
            debug right_val => _2052;
            let _2055: core::panicking::AssertKind;
            scope 315 {
                debug kind => _2055;
            }
        }
    }
    scope 316 {
        debug tmp => _2058;
        let _2071: &std::num::Wrapping<i32>;
        let _2072: &std::num::Wrapping<i32>;
        scope 317 {
            debug left_val => _2071;
            debug right_val => _2072;
            let _2075: core::panicking::AssertKind;
            scope 318 {
                debug kind => _2075;
            }
        }
    }
    scope 319 {
        debug tmp => _2078;
        let _2090: &std::num::Wrapping<i64>;
        let _2091: &std::num::Wrapping<i64>;
        scope 320 {
            debug left_val => _2090;
            debug right_val => _2091;
            let _2094: core::panicking::AssertKind;
            scope 321 {
                debug kind => _2094;
            }
        }
    }
    scope 322 {
        debug tmp => _2097;
        let _2110: &std::num::Wrapping<i64>;
        let _2111: &std::num::Wrapping<i64>;
        scope 323 {
            debug left_val => _2110;
            debug right_val => _2111;
            let _2114: core::panicking::AssertKind;
            scope 324 {
                debug kind => _2114;
            }
        }
    }
    scope 325 {
        debug tmp => _2117;
        let _2129: &std::num::Wrapping<isize>;
        let _2130: &std::num::Wrapping<isize>;
        scope 326 {
            debug left_val => _2129;
            debug right_val => _2130;
            let _2133: core::panicking::AssertKind;
            scope 327 {
                debug kind => _2133;
            }
        }
    }
    scope 328 {
        debug tmp => _2136;
        let _2149: &std::num::Wrapping<isize>;
        let _2150: &std::num::Wrapping<isize>;
        scope 329 {
            debug left_val => _2149;
            debug right_val => _2150;
            let _2153: core::panicking::AssertKind;
            scope 330 {
                debug kind => _2153;
            }
        }
    }
    scope 331 {
        debug tmp => _2156;
        let _2168: &std::num::Wrapping<u8>;
        let _2169: &std::num::Wrapping<u8>;
        scope 332 {
            debug left_val => _2168;
            debug right_val => _2169;
            let _2172: core::panicking::AssertKind;
            scope 333 {
                debug kind => _2172;
            }
        }
    }
    scope 334 {
        debug tmp => _2175;
        let _2188: &std::num::Wrapping<u8>;
        let _2189: &std::num::Wrapping<u8>;
        scope 335 {
            debug left_val => _2188;
            debug right_val => _2189;
            let _2192: core::panicking::AssertKind;
            scope 336 {
                debug kind => _2192;
            }
        }
    }
    scope 337 {
        debug tmp => _2195;
        let _2207: &std::num::Wrapping<u16>;
        let _2208: &std::num::Wrapping<u16>;
        scope 338 {
            debug left_val => _2207;
            debug right_val => _2208;
            let _2211: core::panicking::AssertKind;
            scope 339 {
                debug kind => _2211;
            }
        }
    }
    scope 340 {
        debug tmp => _2214;
        let _2227: &std::num::Wrapping<u16>;
        let _2228: &std::num::Wrapping<u16>;
        scope 341 {
            debug left_val => _2227;
            debug right_val => _2228;
            let _2231: core::panicking::AssertKind;
            scope 342 {
                debug kind => _2231;
            }
        }
    }
    scope 343 {
        debug tmp => _2234;
        let _2246: &std::num::Wrapping<u32>;
        let _2247: &std::num::Wrapping<u32>;
        scope 344 {
            debug left_val => _2246;
            debug right_val => _2247;
            let _2250: core::panicking::AssertKind;
            scope 345 {
                debug kind => _2250;
            }
        }
    }
    scope 346 {
        debug tmp => _2253;
        let _2266: &std::num::Wrapping<u32>;
        let _2267: &std::num::Wrapping<u32>;
        scope 347 {
            debug left_val => _2266;
            debug right_val => _2267;
            let _2270: core::panicking::AssertKind;
            scope 348 {
                debug kind => _2270;
            }
        }
    }
    scope 349 {
        debug tmp => _2273;
        let _2285: &std::num::Wrapping<u64>;
        let _2286: &std::num::Wrapping<u64>;
        scope 350 {
            debug left_val => _2285;
            debug right_val => _2286;
            let _2289: core::panicking::AssertKind;
            scope 351 {
                debug kind => _2289;
            }
        }
    }
    scope 352 {
        debug tmp => _2292;
        let _2305: &std::num::Wrapping<u64>;
        let _2306: &std::num::Wrapping<u64>;
        scope 353 {
            debug left_val => _2305;
            debug right_val => _2306;
            let _2309: core::panicking::AssertKind;
            scope 354 {
                debug kind => _2309;
            }
        }
    }
    scope 355 {
        debug tmp => _2312;
        let _2324: &std::num::Wrapping<usize>;
        let _2325: &std::num::Wrapping<usize>;
        scope 356 {
            debug left_val => _2324;
            debug right_val => _2325;
            let _2328: core::panicking::AssertKind;
            scope 357 {
                debug kind => _2328;
            }
        }
    }
    scope 358 {
        debug tmp => _2331;
        let _2344: &std::num::Wrapping<usize>;
        let _2345: &std::num::Wrapping<usize>;
        scope 359 {
            debug left_val => _2344;
            debug right_val => _2345;
            let _2348: core::panicking::AssertKind;
            scope 360 {
                debug kind => _2348;
            }
        }
    }
    scope 361 {
        debug tmp => _2351;
        let _2363: &std::num::Wrapping<i8>;
        let _2364: &std::num::Wrapping<i8>;
        scope 362 {
            debug left_val => _2363;
            debug right_val => _2364;
            let _2367: core::panicking::AssertKind;
            scope 363 {
                debug kind => _2367;
            }
        }
    }
    scope 364 {
        debug tmp => _2370;
        let _2383: &std::num::Wrapping<i8>;
        let _2384: &std::num::Wrapping<i8>;
        scope 365 {
            debug left_val => _2383;
            debug right_val => _2384;
            let _2387: core::panicking::AssertKind;
            scope 366 {
                debug kind => _2387;
            }
        }
    }
    scope 367 {
        debug tmp => _2390;
        let _2402: &std::num::Wrapping<i16>;
        let _2403: &std::num::Wrapping<i16>;
        scope 368 {
            debug left_val => _2402;
            debug right_val => _2403;
            let _2406: core::panicking::AssertKind;
            scope 369 {
                debug kind => _2406;
            }
        }
    }
    scope 370 {
        debug tmp => _2409;
        let _2422: &std::num::Wrapping<i16>;
        let _2423: &std::num::Wrapping<i16>;
        scope 371 {
            debug left_val => _2422;
            debug right_val => _2423;
            let _2426: core::panicking::AssertKind;
            scope 372 {
                debug kind => _2426;
            }
        }
    }
    scope 373 {
        debug tmp => _2429;
        let _2441: &std::num::Wrapping<i32>;
        let _2442: &std::num::Wrapping<i32>;
        scope 374 {
            debug left_val => _2441;
            debug right_val => _2442;
            let _2445: core::panicking::AssertKind;
            scope 375 {
                debug kind => _2445;
            }
        }
    }
    scope 376 {
        debug tmp => _2448;
        let _2461: &std::num::Wrapping<i32>;
        let _2462: &std::num::Wrapping<i32>;
        scope 377 {
            debug left_val => _2461;
            debug right_val => _2462;
            let _2465: core::panicking::AssertKind;
            scope 378 {
                debug kind => _2465;
            }
        }
    }
    scope 379 {
        debug tmp => _2468;
        let _2480: &std::num::Wrapping<i64>;
        let _2481: &std::num::Wrapping<i64>;
        scope 380 {
            debug left_val => _2480;
            debug right_val => _2481;
            let _2484: core::panicking::AssertKind;
            scope 381 {
                debug kind => _2484;
            }
        }
    }
    scope 382 {
        debug tmp => _2487;
        let _2500: &std::num::Wrapping<i64>;
        let _2501: &std::num::Wrapping<i64>;
        scope 383 {
            debug left_val => _2500;
            debug right_val => _2501;
            let _2504: core::panicking::AssertKind;
            scope 384 {
                debug kind => _2504;
            }
        }
    }
    scope 385 {
        debug tmp => _2507;
        let _2519: &std::num::Wrapping<isize>;
        let _2520: &std::num::Wrapping<isize>;
        scope 386 {
            debug left_val => _2519;
            debug right_val => _2520;
            let _2523: core::panicking::AssertKind;
            scope 387 {
                debug kind => _2523;
            }
        }
    }
    scope 388 {
        debug tmp => _2526;
        let _2539: &std::num::Wrapping<isize>;
        let _2540: &std::num::Wrapping<isize>;
        scope 389 {
            debug left_val => _2539;
            debug right_val => _2540;
            let _2543: core::panicking::AssertKind;
            scope 390 {
                debug kind => _2543;
            }
        }
    }
    scope 391 {
        debug tmp => _2546;
        let _2558: &std::num::Wrapping<u8>;
        let _2559: &std::num::Wrapping<u8>;
        scope 392 {
            debug left_val => _2558;
            debug right_val => _2559;
            let _2562: core::panicking::AssertKind;
            scope 393 {
                debug kind => _2562;
            }
        }
    }
    scope 394 {
        debug tmp => _2565;
        let _2578: &std::num::Wrapping<u8>;
        let _2579: &std::num::Wrapping<u8>;
        scope 395 {
            debug left_val => _2578;
            debug right_val => _2579;
            let _2582: core::panicking::AssertKind;
            scope 396 {
                debug kind => _2582;
            }
        }
    }
    scope 397 {
        debug tmp => _2585;
        let _2597: &std::num::Wrapping<u16>;
        let _2598: &std::num::Wrapping<u16>;
        scope 398 {
            debug left_val => _2597;
            debug right_val => _2598;
            let _2601: core::panicking::AssertKind;
            scope 399 {
                debug kind => _2601;
            }
        }
    }
    scope 400 {
        debug tmp => _2604;
        let _2617: &std::num::Wrapping<u16>;
        let _2618: &std::num::Wrapping<u16>;
        scope 401 {
            debug left_val => _2617;
            debug right_val => _2618;
            let _2621: core::panicking::AssertKind;
            scope 402 {
                debug kind => _2621;
            }
        }
    }
    scope 403 {
        debug tmp => _2624;
        let _2636: &std::num::Wrapping<u32>;
        let _2637: &std::num::Wrapping<u32>;
        scope 404 {
            debug left_val => _2636;
            debug right_val => _2637;
            let _2640: core::panicking::AssertKind;
            scope 405 {
                debug kind => _2640;
            }
        }
    }
    scope 406 {
        debug tmp => _2643;
        let _2656: &std::num::Wrapping<u32>;
        let _2657: &std::num::Wrapping<u32>;
        scope 407 {
            debug left_val => _2656;
            debug right_val => _2657;
            let _2660: core::panicking::AssertKind;
            scope 408 {
                debug kind => _2660;
            }
        }
    }
    scope 409 {
        debug tmp => _2663;
        let _2675: &std::num::Wrapping<u64>;
        let _2676: &std::num::Wrapping<u64>;
        scope 410 {
            debug left_val => _2675;
            debug right_val => _2676;
            let _2679: core::panicking::AssertKind;
            scope 411 {
                debug kind => _2679;
            }
        }
    }
    scope 412 {
        debug tmp => _2682;
        let _2695: &std::num::Wrapping<u64>;
        let _2696: &std::num::Wrapping<u64>;
        scope 413 {
            debug left_val => _2695;
            debug right_val => _2696;
            let _2699: core::panicking::AssertKind;
            scope 414 {
                debug kind => _2699;
            }
        }
    }
    scope 415 {
        debug tmp => _2702;
        let _2714: &std::num::Wrapping<usize>;
        let _2715: &std::num::Wrapping<usize>;
        scope 416 {
            debug left_val => _2714;
            debug right_val => _2715;
            let _2718: core::panicking::AssertKind;
            scope 417 {
                debug kind => _2718;
            }
        }
    }
    scope 418 {
        debug tmp => _2721;
        let _2734: &std::num::Wrapping<usize>;
        let _2735: &std::num::Wrapping<usize>;
        scope 419 {
            debug left_val => _2734;
            debug right_val => _2735;
            let _2738: core::panicking::AssertKind;
            scope 420 {
                debug kind => _2738;
            }
        }
    }

    bb0: {
        _1 = Wrapping::<i8>(const _);
        _3 = _1;
        _2 = test::black_box::<Wrapping<i8>>(move _3) -> bb1;
    }

    bb1: {
        _1 = move _2;
        _5 = &mut _1;
        _6 = Wrapping::<i8>(const 1_i8);
        _4 = <Wrapping<i8> as AddAssign>::add_assign(move _5, move _6) -> bb2;
    }

    bb2: {
        _10 = _1;
        _9 = test::black_box::<Wrapping<i8>>(move _10) -> bb3;
    }

    bb3: {
        _8 = &_9;
        _12 = Wrapping::<i8>(const _);
        _11 = &_12;
        _7 = (move _8, move _11);
        _13 = (_7.0: &std::num::Wrapping<i8>);
        _14 = (_7.1: &std::num::Wrapping<i8>);
        _16 = <Wrapping<i8> as PartialEq>::eq(_13, _14) -> bb4;
    }

    bb4: {
        _15 = Not(move _16);
        switchInt(move _15) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _17, _13, _14, move _19);
    }

    bb6: {
        _20 = Wrapping::<i8>(const _);
        _22 = _20;
        _21 = test::black_box::<Wrapping<i8>>(move _22) -> bb7;
    }

    bb7: {
        _20 = move _21;
        _24 = &mut _20;
        _26 = Wrapping::<i8>(const 1_i8);
        _25 = &_26;
        _23 = <Wrapping<i8> as AddAssign<&Wrapping<i8>>>::add_assign(move _24, move _25) -> bb8;
    }

    bb8: {
        _30 = _20;
        _29 = test::black_box::<Wrapping<i8>>(move _30) -> bb9;
    }

    bb9: {
        _28 = &_29;
        _32 = Wrapping::<i8>(const _);
        _31 = &_32;
        _27 = (move _28, move _31);
        _33 = (_27.0: &std::num::Wrapping<i8>);
        _34 = (_27.1: &std::num::Wrapping<i8>);
        _36 = <Wrapping<i8> as PartialEq>::eq(_33, _34) -> bb10;
    }

    bb10: {
        _35 = Not(move _36);
        switchInt(move _35) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _37 = core::panicking::AssertKind::Eq;
        _39 = Option::<Arguments<'_>>::None;
        _38 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _37, _33, _34, move _39);
    }

    bb12: {
        _40 = Wrapping::<i16>(const _);
        _42 = _40;
        _41 = test::black_box::<Wrapping<i16>>(move _42) -> bb13;
    }

    bb13: {
        _40 = move _41;
        _44 = &mut _40;
        _45 = Wrapping::<i16>(const 1_i16);
        _43 = <Wrapping<i16> as AddAssign>::add_assign(move _44, move _45) -> bb14;
    }

    bb14: {
        _49 = _40;
        _48 = test::black_box::<Wrapping<i16>>(move _49) -> bb15;
    }

    bb15: {
        _47 = &_48;
        _51 = Wrapping::<i16>(const _);
        _50 = &_51;
        _46 = (move _47, move _50);
        _52 = (_46.0: &std::num::Wrapping<i16>);
        _53 = (_46.1: &std::num::Wrapping<i16>);
        _55 = <Wrapping<i16> as PartialEq>::eq(_52, _53) -> bb16;
    }

    bb16: {
        _54 = Not(move _55);
        switchInt(move _54) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _56 = core::panicking::AssertKind::Eq;
        _58 = Option::<Arguments<'_>>::None;
        _57 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _56, _52, _53, move _58);
    }

    bb18: {
        _59 = Wrapping::<i16>(const _);
        _61 = _59;
        _60 = test::black_box::<Wrapping<i16>>(move _61) -> bb19;
    }

    bb19: {
        _59 = move _60;
        _63 = &mut _59;
        _65 = Wrapping::<i16>(const 1_i16);
        _64 = &_65;
        _62 = <Wrapping<i16> as AddAssign<&Wrapping<i16>>>::add_assign(move _63, move _64) -> bb20;
    }

    bb20: {
        _69 = _59;
        _68 = test::black_box::<Wrapping<i16>>(move _69) -> bb21;
    }

    bb21: {
        _67 = &_68;
        _71 = Wrapping::<i16>(const _);
        _70 = &_71;
        _66 = (move _67, move _70);
        _72 = (_66.0: &std::num::Wrapping<i16>);
        _73 = (_66.1: &std::num::Wrapping<i16>);
        _75 = <Wrapping<i16> as PartialEq>::eq(_72, _73) -> bb22;
    }

    bb22: {
        _74 = Not(move _75);
        switchInt(move _74) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _76 = core::panicking::AssertKind::Eq;
        _78 = Option::<Arguments<'_>>::None;
        _77 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _76, _72, _73, move _78);
    }

    bb24: {
        _79 = Wrapping::<i32>(const _);
        _81 = _79;
        _80 = test::black_box::<Wrapping<i32>>(move _81) -> bb25;
    }

    bb25: {
        _79 = move _80;
        _83 = &mut _79;
        _84 = Wrapping::<i32>(const 1_i32);
        _82 = <Wrapping<i32> as AddAssign>::add_assign(move _83, move _84) -> bb26;
    }

    bb26: {
        _88 = _79;
        _87 = test::black_box::<Wrapping<i32>>(move _88) -> bb27;
    }

    bb27: {
        _86 = &_87;
        _90 = Wrapping::<i32>(const _);
        _89 = &_90;
        _85 = (move _86, move _89);
        _91 = (_85.0: &std::num::Wrapping<i32>);
        _92 = (_85.1: &std::num::Wrapping<i32>);
        _94 = <Wrapping<i32> as PartialEq>::eq(_91, _92) -> bb28;
    }

    bb28: {
        _93 = Not(move _94);
        switchInt(move _93) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _95 = core::panicking::AssertKind::Eq;
        _97 = Option::<Arguments<'_>>::None;
        _96 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _95, _91, _92, move _97);
    }

    bb30: {
        _98 = Wrapping::<i32>(const _);
        _100 = _98;
        _99 = test::black_box::<Wrapping<i32>>(move _100) -> bb31;
    }

    bb31: {
        _98 = move _99;
        _102 = &mut _98;
        _104 = Wrapping::<i32>(const 1_i32);
        _103 = &_104;
        _101 = <Wrapping<i32> as AddAssign<&Wrapping<i32>>>::add_assign(move _102, move _103) -> bb32;
    }

    bb32: {
        _108 = _98;
        _107 = test::black_box::<Wrapping<i32>>(move _108) -> bb33;
    }

    bb33: {
        _106 = &_107;
        _110 = Wrapping::<i32>(const _);
        _109 = &_110;
        _105 = (move _106, move _109);
        _111 = (_105.0: &std::num::Wrapping<i32>);
        _112 = (_105.1: &std::num::Wrapping<i32>);
        _114 = <Wrapping<i32> as PartialEq>::eq(_111, _112) -> bb34;
    }

    bb34: {
        _113 = Not(move _114);
        switchInt(move _113) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _115 = core::panicking::AssertKind::Eq;
        _117 = Option::<Arguments<'_>>::None;
        _116 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _115, _111, _112, move _117);
    }

    bb36: {
        _118 = Wrapping::<i64>(const _);
        _120 = _118;
        _119 = test::black_box::<Wrapping<i64>>(move _120) -> bb37;
    }

    bb37: {
        _118 = move _119;
        _122 = &mut _118;
        _123 = Wrapping::<i64>(const 1_i64);
        _121 = <Wrapping<i64> as AddAssign>::add_assign(move _122, move _123) -> bb38;
    }

    bb38: {
        _127 = _118;
        _126 = test::black_box::<Wrapping<i64>>(move _127) -> bb39;
    }

    bb39: {
        _125 = &_126;
        _129 = Wrapping::<i64>(const _);
        _128 = &_129;
        _124 = (move _125, move _128);
        _130 = (_124.0: &std::num::Wrapping<i64>);
        _131 = (_124.1: &std::num::Wrapping<i64>);
        _133 = <Wrapping<i64> as PartialEq>::eq(_130, _131) -> bb40;
    }

    bb40: {
        _132 = Not(move _133);
        switchInt(move _132) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _134 = core::panicking::AssertKind::Eq;
        _136 = Option::<Arguments<'_>>::None;
        _135 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _134, _130, _131, move _136);
    }

    bb42: {
        _137 = Wrapping::<i64>(const _);
        _139 = _137;
        _138 = test::black_box::<Wrapping<i64>>(move _139) -> bb43;
    }

    bb43: {
        _137 = move _138;
        _141 = &mut _137;
        _143 = Wrapping::<i64>(const 1_i64);
        _142 = &_143;
        _140 = <Wrapping<i64> as AddAssign<&Wrapping<i64>>>::add_assign(move _141, move _142) -> bb44;
    }

    bb44: {
        _147 = _137;
        _146 = test::black_box::<Wrapping<i64>>(move _147) -> bb45;
    }

    bb45: {
        _145 = &_146;
        _149 = Wrapping::<i64>(const _);
        _148 = &_149;
        _144 = (move _145, move _148);
        _150 = (_144.0: &std::num::Wrapping<i64>);
        _151 = (_144.1: &std::num::Wrapping<i64>);
        _153 = <Wrapping<i64> as PartialEq>::eq(_150, _151) -> bb46;
    }

    bb46: {
        _152 = Not(move _153);
        switchInt(move _152) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _154 = core::panicking::AssertKind::Eq;
        _156 = Option::<Arguments<'_>>::None;
        _155 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _154, _150, _151, move _156);
    }

    bb48: {
        _157 = Wrapping::<isize>(const _);
        _159 = _157;
        _158 = test::black_box::<Wrapping<isize>>(move _159) -> bb49;
    }

    bb49: {
        _157 = move _158;
        _161 = &mut _157;
        _162 = Wrapping::<isize>(const 1_isize);
        _160 = <Wrapping<isize> as AddAssign>::add_assign(move _161, move _162) -> bb50;
    }

    bb50: {
        _166 = _157;
        _165 = test::black_box::<Wrapping<isize>>(move _166) -> bb51;
    }

    bb51: {
        _164 = &_165;
        _168 = Wrapping::<isize>(const _);
        _167 = &_168;
        _163 = (move _164, move _167);
        _169 = (_163.0: &std::num::Wrapping<isize>);
        _170 = (_163.1: &std::num::Wrapping<isize>);
        _172 = <Wrapping<isize> as PartialEq>::eq(_169, _170) -> bb52;
    }

    bb52: {
        _171 = Not(move _172);
        switchInt(move _171) -> [0: bb54, otherwise: bb53];
    }

    bb53: {
        _173 = core::panicking::AssertKind::Eq;
        _175 = Option::<Arguments<'_>>::None;
        _174 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _173, _169, _170, move _175);
    }

    bb54: {
        _176 = Wrapping::<isize>(const _);
        _178 = _176;
        _177 = test::black_box::<Wrapping<isize>>(move _178) -> bb55;
    }

    bb55: {
        _176 = move _177;
        _180 = &mut _176;
        _182 = Wrapping::<isize>(const 1_isize);
        _181 = &_182;
        _179 = <Wrapping<isize> as AddAssign<&Wrapping<isize>>>::add_assign(move _180, move _181) -> bb56;
    }

    bb56: {
        _186 = _176;
        _185 = test::black_box::<Wrapping<isize>>(move _186) -> bb57;
    }

    bb57: {
        _184 = &_185;
        _188 = Wrapping::<isize>(const _);
        _187 = &_188;
        _183 = (move _184, move _187);
        _189 = (_183.0: &std::num::Wrapping<isize>);
        _190 = (_183.1: &std::num::Wrapping<isize>);
        _192 = <Wrapping<isize> as PartialEq>::eq(_189, _190) -> bb58;
    }

    bb58: {
        _191 = Not(move _192);
        switchInt(move _191) -> [0: bb60, otherwise: bb59];
    }

    bb59: {
        _193 = core::panicking::AssertKind::Eq;
        _195 = Option::<Arguments<'_>>::None;
        _194 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _193, _189, _190, move _195);
    }

    bb60: {
        _196 = Wrapping::<u8>(const _);
        _198 = _196;
        _197 = test::black_box::<Wrapping<u8>>(move _198) -> bb61;
    }

    bb61: {
        _196 = move _197;
        _200 = &mut _196;
        _201 = Wrapping::<u8>(const 1_u8);
        _199 = <Wrapping<u8> as AddAssign>::add_assign(move _200, move _201) -> bb62;
    }

    bb62: {
        _205 = _196;
        _204 = test::black_box::<Wrapping<u8>>(move _205) -> bb63;
    }

    bb63: {
        _203 = &_204;
        _207 = Wrapping::<u8>(const _);
        _206 = &_207;
        _202 = (move _203, move _206);
        _208 = (_202.0: &std::num::Wrapping<u8>);
        _209 = (_202.1: &std::num::Wrapping<u8>);
        _211 = <Wrapping<u8> as PartialEq>::eq(_208, _209) -> bb64;
    }

    bb64: {
        _210 = Not(move _211);
        switchInt(move _210) -> [0: bb66, otherwise: bb65];
    }

    bb65: {
        _212 = core::panicking::AssertKind::Eq;
        _214 = Option::<Arguments<'_>>::None;
        _213 = core::panicking::assert_failed::<Wrapping<u8>, Wrapping<u8>>(move _212, _208, _209, move _214);
    }

    bb66: {
        _215 = Wrapping::<u8>(const _);
        _217 = _215;
        _216 = test::black_box::<Wrapping<u8>>(move _217) -> bb67;
    }

    bb67: {
        _215 = move _216;
        _219 = &mut _215;
        _221 = Wrapping::<u8>(const 1_u8);
        _220 = &_221;
        _218 = <Wrapping<u8> as AddAssign<&Wrapping<u8>>>::add_assign(move _219, move _220) -> bb68;
    }

    bb68: {
        _225 = _215;
        _224 = test::black_box::<Wrapping<u8>>(move _225) -> bb69;
    }

    bb69: {
        _223 = &_224;
        _227 = Wrapping::<u8>(const _);
        _226 = &_227;
        _222 = (move _223, move _226);
        _228 = (_222.0: &std::num::Wrapping<u8>);
        _229 = (_222.1: &std::num::Wrapping<u8>);
        _231 = <Wrapping<u8> as PartialEq>::eq(_228, _229) -> bb70;
    }

    bb70: {
        _230 = Not(move _231);
        switchInt(move _230) -> [0: bb72, otherwise: bb71];
    }

    bb71: {
        _232 = core::panicking::AssertKind::Eq;
        _234 = Option::<Arguments<'_>>::None;
        _233 = core::panicking::assert_failed::<Wrapping<u8>, Wrapping<u8>>(move _232, _228, _229, move _234);
    }

    bb72: {
        _235 = Wrapping::<u16>(const _);
        _237 = _235;
        _236 = test::black_box::<Wrapping<u16>>(move _237) -> bb73;
    }

    bb73: {
        _235 = move _236;
        _239 = &mut _235;
        _240 = Wrapping::<u16>(const 1_u16);
        _238 = <Wrapping<u16> as AddAssign>::add_assign(move _239, move _240) -> bb74;
    }

    bb74: {
        _244 = _235;
        _243 = test::black_box::<Wrapping<u16>>(move _244) -> bb75;
    }

    bb75: {
        _242 = &_243;
        _246 = Wrapping::<u16>(const _);
        _245 = &_246;
        _241 = (move _242, move _245);
        _247 = (_241.0: &std::num::Wrapping<u16>);
        _248 = (_241.1: &std::num::Wrapping<u16>);
        _250 = <Wrapping<u16> as PartialEq>::eq(_247, _248) -> bb76;
    }

    bb76: {
        _249 = Not(move _250);
        switchInt(move _249) -> [0: bb78, otherwise: bb77];
    }

    bb77: {
        _251 = core::panicking::AssertKind::Eq;
        _253 = Option::<Arguments<'_>>::None;
        _252 = core::panicking::assert_failed::<Wrapping<u16>, Wrapping<u16>>(move _251, _247, _248, move _253);
    }

    bb78: {
        _254 = Wrapping::<u16>(const _);
        _256 = _254;
        _255 = test::black_box::<Wrapping<u16>>(move _256) -> bb79;
    }

    bb79: {
        _254 = move _255;
        _258 = &mut _254;
        _260 = Wrapping::<u16>(const 1_u16);
        _259 = &_260;
        _257 = <Wrapping<u16> as AddAssign<&Wrapping<u16>>>::add_assign(move _258, move _259) -> bb80;
    }

    bb80: {
        _264 = _254;
        _263 = test::black_box::<Wrapping<u16>>(move _264) -> bb81;
    }

    bb81: {
        _262 = &_263;
        _266 = Wrapping::<u16>(const _);
        _265 = &_266;
        _261 = (move _262, move _265);
        _267 = (_261.0: &std::num::Wrapping<u16>);
        _268 = (_261.1: &std::num::Wrapping<u16>);
        _270 = <Wrapping<u16> as PartialEq>::eq(_267, _268) -> bb82;
    }

    bb82: {
        _269 = Not(move _270);
        switchInt(move _269) -> [0: bb84, otherwise: bb83];
    }

    bb83: {
        _271 = core::panicking::AssertKind::Eq;
        _273 = Option::<Arguments<'_>>::None;
        _272 = core::panicking::assert_failed::<Wrapping<u16>, Wrapping<u16>>(move _271, _267, _268, move _273);
    }

    bb84: {
        _274 = Wrapping::<u32>(const _);
        _276 = _274;
        _275 = test::black_box::<Wrapping<u32>>(move _276) -> bb85;
    }

    bb85: {
        _274 = move _275;
        _278 = &mut _274;
        _279 = Wrapping::<u32>(const 1_u32);
        _277 = <Wrapping<u32> as AddAssign>::add_assign(move _278, move _279) -> bb86;
    }

    bb86: {
        _283 = _274;
        _282 = test::black_box::<Wrapping<u32>>(move _283) -> bb87;
    }

    bb87: {
        _281 = &_282;
        _285 = Wrapping::<u32>(const _);
        _284 = &_285;
        _280 = (move _281, move _284);
        _286 = (_280.0: &std::num::Wrapping<u32>);
        _287 = (_280.1: &std::num::Wrapping<u32>);
        _289 = <Wrapping<u32> as PartialEq>::eq(_286, _287) -> bb88;
    }

    bb88: {
        _288 = Not(move _289);
        switchInt(move _288) -> [0: bb90, otherwise: bb89];
    }

    bb89: {
        _290 = core::panicking::AssertKind::Eq;
        _292 = Option::<Arguments<'_>>::None;
        _291 = core::panicking::assert_failed::<Wrapping<u32>, Wrapping<u32>>(move _290, _286, _287, move _292);
    }

    bb90: {
        _293 = Wrapping::<u32>(const _);
        _295 = _293;
        _294 = test::black_box::<Wrapping<u32>>(move _295) -> bb91;
    }

    bb91: {
        _293 = move _294;
        _297 = &mut _293;
        _299 = Wrapping::<u32>(const 1_u32);
        _298 = &_299;
        _296 = <Wrapping<u32> as AddAssign<&Wrapping<u32>>>::add_assign(move _297, move _298) -> bb92;
    }

    bb92: {
        _303 = _293;
        _302 = test::black_box::<Wrapping<u32>>(move _303) -> bb93;
    }

    bb93: {
        _301 = &_302;
        _305 = Wrapping::<u32>(const _);
        _304 = &_305;
        _300 = (move _301, move _304);
        _306 = (_300.0: &std::num::Wrapping<u32>);
        _307 = (_300.1: &std::num::Wrapping<u32>);
        _309 = <Wrapping<u32> as PartialEq>::eq(_306, _307) -> bb94;
    }

    bb94: {
        _308 = Not(move _309);
        switchInt(move _308) -> [0: bb96, otherwise: bb95];
    }

    bb95: {
        _310 = core::panicking::AssertKind::Eq;
        _312 = Option::<Arguments<'_>>::None;
        _311 = core::panicking::assert_failed::<Wrapping<u32>, Wrapping<u32>>(move _310, _306, _307, move _312);
    }

    bb96: {
        _313 = Wrapping::<u64>(const _);
        _315 = _313;
        _314 = test::black_box::<Wrapping<u64>>(move _315) -> bb97;
    }

    bb97: {
        _313 = move _314;
        _317 = &mut _313;
        _318 = Wrapping::<u64>(const 1_u64);
        _316 = <Wrapping<u64> as AddAssign>::add_assign(move _317, move _318) -> bb98;
    }

    bb98: {
        _322 = _313;
        _321 = test::black_box::<Wrapping<u64>>(move _322) -> bb99;
    }

    bb99: {
        _320 = &_321;
        _324 = Wrapping::<u64>(const _);
        _323 = &_324;
        _319 = (move _320, move _323);
        _325 = (_319.0: &std::num::Wrapping<u64>);
        _326 = (_319.1: &std::num::Wrapping<u64>);
        _328 = <Wrapping<u64> as PartialEq>::eq(_325, _326) -> bb100;
    }

    bb100: {
        _327 = Not(move _328);
        switchInt(move _327) -> [0: bb102, otherwise: bb101];
    }

    bb101: {
        _329 = core::panicking::AssertKind::Eq;
        _331 = Option::<Arguments<'_>>::None;
        _330 = core::panicking::assert_failed::<Wrapping<u64>, Wrapping<u64>>(move _329, _325, _326, move _331);
    }

    bb102: {
        _332 = Wrapping::<u64>(const _);
        _334 = _332;
        _333 = test::black_box::<Wrapping<u64>>(move _334) -> bb103;
    }

    bb103: {
        _332 = move _333;
        _336 = &mut _332;
        _338 = Wrapping::<u64>(const 1_u64);
        _337 = &_338;
        _335 = <Wrapping<u64> as AddAssign<&Wrapping<u64>>>::add_assign(move _336, move _337) -> bb104;
    }

    bb104: {
        _342 = _332;
        _341 = test::black_box::<Wrapping<u64>>(move _342) -> bb105;
    }

    bb105: {
        _340 = &_341;
        _344 = Wrapping::<u64>(const _);
        _343 = &_344;
        _339 = (move _340, move _343);
        _345 = (_339.0: &std::num::Wrapping<u64>);
        _346 = (_339.1: &std::num::Wrapping<u64>);
        _348 = <Wrapping<u64> as PartialEq>::eq(_345, _346) -> bb106;
    }

    bb106: {
        _347 = Not(move _348);
        switchInt(move _347) -> [0: bb108, otherwise: bb107];
    }

    bb107: {
        _349 = core::panicking::AssertKind::Eq;
        _351 = Option::<Arguments<'_>>::None;
        _350 = core::panicking::assert_failed::<Wrapping<u64>, Wrapping<u64>>(move _349, _345, _346, move _351);
    }

    bb108: {
        _352 = Wrapping::<usize>(const _);
        _354 = _352;
        _353 = test::black_box::<Wrapping<usize>>(move _354) -> bb109;
    }

    bb109: {
        _352 = move _353;
        _356 = &mut _352;
        _357 = Wrapping::<usize>(const 1_usize);
        _355 = <Wrapping<usize> as AddAssign>::add_assign(move _356, move _357) -> bb110;
    }

    bb110: {
        _361 = _352;
        _360 = test::black_box::<Wrapping<usize>>(move _361) -> bb111;
    }

    bb111: {
        _359 = &_360;
        _363 = Wrapping::<usize>(const _);
        _362 = &_363;
        _358 = (move _359, move _362);
        _364 = (_358.0: &std::num::Wrapping<usize>);
        _365 = (_358.1: &std::num::Wrapping<usize>);
        _367 = <Wrapping<usize> as PartialEq>::eq(_364, _365) -> bb112;
    }

    bb112: {
        _366 = Not(move _367);
        switchInt(move _366) -> [0: bb114, otherwise: bb113];
    }

    bb113: {
        _368 = core::panicking::AssertKind::Eq;
        _370 = Option::<Arguments<'_>>::None;
        _369 = core::panicking::assert_failed::<Wrapping<usize>, Wrapping<usize>>(move _368, _364, _365, move _370);
    }

    bb114: {
        _371 = Wrapping::<usize>(const _);
        _373 = _371;
        _372 = test::black_box::<Wrapping<usize>>(move _373) -> bb115;
    }

    bb115: {
        _371 = move _372;
        _375 = &mut _371;
        _377 = Wrapping::<usize>(const 1_usize);
        _376 = &_377;
        _374 = <Wrapping<usize> as AddAssign<&Wrapping<usize>>>::add_assign(move _375, move _376) -> bb116;
    }

    bb116: {
        _381 = _371;
        _380 = test::black_box::<Wrapping<usize>>(move _381) -> bb117;
    }

    bb117: {
        _379 = &_380;
        _383 = Wrapping::<usize>(const _);
        _382 = &_383;
        _378 = (move _379, move _382);
        _384 = (_378.0: &std::num::Wrapping<usize>);
        _385 = (_378.1: &std::num::Wrapping<usize>);
        _387 = <Wrapping<usize> as PartialEq>::eq(_384, _385) -> bb118;
    }

    bb118: {
        _386 = Not(move _387);
        switchInt(move _386) -> [0: bb120, otherwise: bb119];
    }

    bb119: {
        _388 = core::panicking::AssertKind::Eq;
        _390 = Option::<Arguments<'_>>::None;
        _389 = core::panicking::assert_failed::<Wrapping<usize>, Wrapping<usize>>(move _388, _384, _385, move _390);
    }

    bb120: {
        _391 = Wrapping::<i8>(const _);
        _393 = _391;
        _392 = test::black_box::<Wrapping<i8>>(move _393) -> bb121;
    }

    bb121: {
        _391 = move _392;
        _395 = &mut _391;
        _396 = Wrapping::<i8>(const 1_i8);
        _394 = <Wrapping<i8> as SubAssign>::sub_assign(move _395, move _396) -> bb122;
    }

    bb122: {
        _400 = _391;
        _399 = test::black_box::<Wrapping<i8>>(move _400) -> bb123;
    }

    bb123: {
        _398 = &_399;
        _402 = Wrapping::<i8>(const _);
        _401 = &_402;
        _397 = (move _398, move _401);
        _403 = (_397.0: &std::num::Wrapping<i8>);
        _404 = (_397.1: &std::num::Wrapping<i8>);
        _406 = <Wrapping<i8> as PartialEq>::eq(_403, _404) -> bb124;
    }

    bb124: {
        _405 = Not(move _406);
        switchInt(move _405) -> [0: bb126, otherwise: bb125];
    }

    bb125: {
        _407 = core::panicking::AssertKind::Eq;
        _409 = Option::<Arguments<'_>>::None;
        _408 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _407, _403, _404, move _409);
    }

    bb126: {
        _410 = Wrapping::<i8>(const _);
        _412 = _410;
        _411 = test::black_box::<Wrapping<i8>>(move _412) -> bb127;
    }

    bb127: {
        _410 = move _411;
        _414 = &mut _410;
        _416 = Wrapping::<i8>(const 1_i8);
        _415 = &_416;
        _413 = <Wrapping<i8> as SubAssign<&Wrapping<i8>>>::sub_assign(move _414, move _415) -> bb128;
    }

    bb128: {
        _420 = _410;
        _419 = test::black_box::<Wrapping<i8>>(move _420) -> bb129;
    }

    bb129: {
        _418 = &_419;
        _422 = Wrapping::<i8>(const _);
        _421 = &_422;
        _417 = (move _418, move _421);
        _423 = (_417.0: &std::num::Wrapping<i8>);
        _424 = (_417.1: &std::num::Wrapping<i8>);
        _426 = <Wrapping<i8> as PartialEq>::eq(_423, _424) -> bb130;
    }

    bb130: {
        _425 = Not(move _426);
        switchInt(move _425) -> [0: bb132, otherwise: bb131];
    }

    bb131: {
        _427 = core::panicking::AssertKind::Eq;
        _429 = Option::<Arguments<'_>>::None;
        _428 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _427, _423, _424, move _429);
    }

    bb132: {
        _430 = Wrapping::<i16>(const _);
        _432 = _430;
        _431 = test::black_box::<Wrapping<i16>>(move _432) -> bb133;
    }

    bb133: {
        _430 = move _431;
        _434 = &mut _430;
        _435 = Wrapping::<i16>(const 1_i16);
        _433 = <Wrapping<i16> as SubAssign>::sub_assign(move _434, move _435) -> bb134;
    }

    bb134: {
        _439 = _430;
        _438 = test::black_box::<Wrapping<i16>>(move _439) -> bb135;
    }

    bb135: {
        _437 = &_438;
        _441 = Wrapping::<i16>(const _);
        _440 = &_441;
        _436 = (move _437, move _440);
        _442 = (_436.0: &std::num::Wrapping<i16>);
        _443 = (_436.1: &std::num::Wrapping<i16>);
        _445 = <Wrapping<i16> as PartialEq>::eq(_442, _443) -> bb136;
    }

    bb136: {
        _444 = Not(move _445);
        switchInt(move _444) -> [0: bb138, otherwise: bb137];
    }

    bb137: {
        _446 = core::panicking::AssertKind::Eq;
        _448 = Option::<Arguments<'_>>::None;
        _447 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _446, _442, _443, move _448);
    }

    bb138: {
        _449 = Wrapping::<i16>(const _);
        _451 = _449;
        _450 = test::black_box::<Wrapping<i16>>(move _451) -> bb139;
    }

    bb139: {
        _449 = move _450;
        _453 = &mut _449;
        _455 = Wrapping::<i16>(const 1_i16);
        _454 = &_455;
        _452 = <Wrapping<i16> as SubAssign<&Wrapping<i16>>>::sub_assign(move _453, move _454) -> bb140;
    }

    bb140: {
        _459 = _449;
        _458 = test::black_box::<Wrapping<i16>>(move _459) -> bb141;
    }

    bb141: {
        _457 = &_458;
        _461 = Wrapping::<i16>(const _);
        _460 = &_461;
        _456 = (move _457, move _460);
        _462 = (_456.0: &std::num::Wrapping<i16>);
        _463 = (_456.1: &std::num::Wrapping<i16>);
        _465 = <Wrapping<i16> as PartialEq>::eq(_462, _463) -> bb142;
    }

    bb142: {
        _464 = Not(move _465);
        switchInt(move _464) -> [0: bb144, otherwise: bb143];
    }

    bb143: {
        _466 = core::panicking::AssertKind::Eq;
        _468 = Option::<Arguments<'_>>::None;
        _467 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _466, _462, _463, move _468);
    }

    bb144: {
        _469 = Wrapping::<i32>(const _);
        _471 = _469;
        _470 = test::black_box::<Wrapping<i32>>(move _471) -> bb145;
    }

    bb145: {
        _469 = move _470;
        _473 = &mut _469;
        _474 = Wrapping::<i32>(const 1_i32);
        _472 = <Wrapping<i32> as SubAssign>::sub_assign(move _473, move _474) -> bb146;
    }

    bb146: {
        _478 = _469;
        _477 = test::black_box::<Wrapping<i32>>(move _478) -> bb147;
    }

    bb147: {
        _476 = &_477;
        _480 = Wrapping::<i32>(const _);
        _479 = &_480;
        _475 = (move _476, move _479);
        _481 = (_475.0: &std::num::Wrapping<i32>);
        _482 = (_475.1: &std::num::Wrapping<i32>);
        _484 = <Wrapping<i32> as PartialEq>::eq(_481, _482) -> bb148;
    }

    bb148: {
        _483 = Not(move _484);
        switchInt(move _483) -> [0: bb150, otherwise: bb149];
    }

    bb149: {
        _485 = core::panicking::AssertKind::Eq;
        _487 = Option::<Arguments<'_>>::None;
        _486 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _485, _481, _482, move _487);
    }

    bb150: {
        _488 = Wrapping::<i32>(const _);
        _490 = _488;
        _489 = test::black_box::<Wrapping<i32>>(move _490) -> bb151;
    }

    bb151: {
        _488 = move _489;
        _492 = &mut _488;
        _494 = Wrapping::<i32>(const 1_i32);
        _493 = &_494;
        _491 = <Wrapping<i32> as SubAssign<&Wrapping<i32>>>::sub_assign(move _492, move _493) -> bb152;
    }

    bb152: {
        _498 = _488;
        _497 = test::black_box::<Wrapping<i32>>(move _498) -> bb153;
    }

    bb153: {
        _496 = &_497;
        _500 = Wrapping::<i32>(const _);
        _499 = &_500;
        _495 = (move _496, move _499);
        _501 = (_495.0: &std::num::Wrapping<i32>);
        _502 = (_495.1: &std::num::Wrapping<i32>);
        _504 = <Wrapping<i32> as PartialEq>::eq(_501, _502) -> bb154;
    }

    bb154: {
        _503 = Not(move _504);
        switchInt(move _503) -> [0: bb156, otherwise: bb155];
    }

    bb155: {
        _505 = core::panicking::AssertKind::Eq;
        _507 = Option::<Arguments<'_>>::None;
        _506 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _505, _501, _502, move _507);
    }

    bb156: {
        _508 = Wrapping::<i64>(const _);
        _510 = _508;
        _509 = test::black_box::<Wrapping<i64>>(move _510) -> bb157;
    }

    bb157: {
        _508 = move _509;
        _512 = &mut _508;
        _513 = Wrapping::<i64>(const 1_i64);
        _511 = <Wrapping<i64> as SubAssign>::sub_assign(move _512, move _513) -> bb158;
    }

    bb158: {
        _517 = _508;
        _516 = test::black_box::<Wrapping<i64>>(move _517) -> bb159;
    }

    bb159: {
        _515 = &_516;
        _519 = Wrapping::<i64>(const _);
        _518 = &_519;
        _514 = (move _515, move _518);
        _520 = (_514.0: &std::num::Wrapping<i64>);
        _521 = (_514.1: &std::num::Wrapping<i64>);
        _523 = <Wrapping<i64> as PartialEq>::eq(_520, _521) -> bb160;
    }

    bb160: {
        _522 = Not(move _523);
        switchInt(move _522) -> [0: bb162, otherwise: bb161];
    }

    bb161: {
        _524 = core::panicking::AssertKind::Eq;
        _526 = Option::<Arguments<'_>>::None;
        _525 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _524, _520, _521, move _526);
    }

    bb162: {
        _527 = Wrapping::<i64>(const _);
        _529 = _527;
        _528 = test::black_box::<Wrapping<i64>>(move _529) -> bb163;
    }

    bb163: {
        _527 = move _528;
        _531 = &mut _527;
        _533 = Wrapping::<i64>(const 1_i64);
        _532 = &_533;
        _530 = <Wrapping<i64> as SubAssign<&Wrapping<i64>>>::sub_assign(move _531, move _532) -> bb164;
    }

    bb164: {
        _537 = _527;
        _536 = test::black_box::<Wrapping<i64>>(move _537) -> bb165;
    }

    bb165: {
        _535 = &_536;
        _539 = Wrapping::<i64>(const _);
        _538 = &_539;
        _534 = (move _535, move _538);
        _540 = (_534.0: &std::num::Wrapping<i64>);
        _541 = (_534.1: &std::num::Wrapping<i64>);
        _543 = <Wrapping<i64> as PartialEq>::eq(_540, _541) -> bb166;
    }

    bb166: {
        _542 = Not(move _543);
        switchInt(move _542) -> [0: bb168, otherwise: bb167];
    }

    bb167: {
        _544 = core::panicking::AssertKind::Eq;
        _546 = Option::<Arguments<'_>>::None;
        _545 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _544, _540, _541, move _546);
    }

    bb168: {
        _547 = Wrapping::<isize>(const _);
        _549 = _547;
        _548 = test::black_box::<Wrapping<isize>>(move _549) -> bb169;
    }

    bb169: {
        _547 = move _548;
        _551 = &mut _547;
        _552 = Wrapping::<isize>(const 1_isize);
        _550 = <Wrapping<isize> as SubAssign>::sub_assign(move _551, move _552) -> bb170;
    }

    bb170: {
        _556 = _547;
        _555 = test::black_box::<Wrapping<isize>>(move _556) -> bb171;
    }

    bb171: {
        _554 = &_555;
        _558 = Wrapping::<isize>(const _);
        _557 = &_558;
        _553 = (move _554, move _557);
        _559 = (_553.0: &std::num::Wrapping<isize>);
        _560 = (_553.1: &std::num::Wrapping<isize>);
        _562 = <Wrapping<isize> as PartialEq>::eq(_559, _560) -> bb172;
    }

    bb172: {
        _561 = Not(move _562);
        switchInt(move _561) -> [0: bb174, otherwise: bb173];
    }

    bb173: {
        _563 = core::panicking::AssertKind::Eq;
        _565 = Option::<Arguments<'_>>::None;
        _564 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _563, _559, _560, move _565);
    }

    bb174: {
        _566 = Wrapping::<isize>(const _);
        _568 = _566;
        _567 = test::black_box::<Wrapping<isize>>(move _568) -> bb175;
    }

    bb175: {
        _566 = move _567;
        _570 = &mut _566;
        _572 = Wrapping::<isize>(const 1_isize);
        _571 = &_572;
        _569 = <Wrapping<isize> as SubAssign<&Wrapping<isize>>>::sub_assign(move _570, move _571) -> bb176;
    }

    bb176: {
        _576 = _566;
        _575 = test::black_box::<Wrapping<isize>>(move _576) -> bb177;
    }

    bb177: {
        _574 = &_575;
        _578 = Wrapping::<isize>(const _);
        _577 = &_578;
        _573 = (move _574, move _577);
        _579 = (_573.0: &std::num::Wrapping<isize>);
        _580 = (_573.1: &std::num::Wrapping<isize>);
        _582 = <Wrapping<isize> as PartialEq>::eq(_579, _580) -> bb178;
    }

    bb178: {
        _581 = Not(move _582);
        switchInt(move _581) -> [0: bb180, otherwise: bb179];
    }

    bb179: {
        _583 = core::panicking::AssertKind::Eq;
        _585 = Option::<Arguments<'_>>::None;
        _584 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _583, _579, _580, move _585);
    }

    bb180: {
        _586 = Wrapping::<u8>(const _);
        _588 = _586;
        _587 = test::black_box::<Wrapping<u8>>(move _588) -> bb181;
    }

    bb181: {
        _586 = move _587;
        _590 = &mut _586;
        _591 = Wrapping::<u8>(const 1_u8);
        _589 = <Wrapping<u8> as SubAssign>::sub_assign(move _590, move _591) -> bb182;
    }

    bb182: {
        _595 = _586;
        _594 = test::black_box::<Wrapping<u8>>(move _595) -> bb183;
    }

    bb183: {
        _593 = &_594;
        _597 = Wrapping::<u8>(const _);
        _596 = &_597;
        _592 = (move _593, move _596);
        _598 = (_592.0: &std::num::Wrapping<u8>);
        _599 = (_592.1: &std::num::Wrapping<u8>);
        _601 = <Wrapping<u8> as PartialEq>::eq(_598, _599) -> bb184;
    }

    bb184: {
        _600 = Not(move _601);
        switchInt(move _600) -> [0: bb186, otherwise: bb185];
    }

    bb185: {
        _602 = core::panicking::AssertKind::Eq;
        _604 = Option::<Arguments<'_>>::None;
        _603 = core::panicking::assert_failed::<Wrapping<u8>, Wrapping<u8>>(move _602, _598, _599, move _604);
    }

    bb186: {
        _605 = Wrapping::<u8>(const _);
        _607 = _605;
        _606 = test::black_box::<Wrapping<u8>>(move _607) -> bb187;
    }

    bb187: {
        _605 = move _606;
        _609 = &mut _605;
        _611 = Wrapping::<u8>(const 1_u8);
        _610 = &_611;
        _608 = <Wrapping<u8> as SubAssign<&Wrapping<u8>>>::sub_assign(move _609, move _610) -> bb188;
    }

    bb188: {
        _615 = _605;
        _614 = test::black_box::<Wrapping<u8>>(move _615) -> bb189;
    }

    bb189: {
        _613 = &_614;
        _617 = Wrapping::<u8>(const _);
        _616 = &_617;
        _612 = (move _613, move _616);
        _618 = (_612.0: &std::num::Wrapping<u8>);
        _619 = (_612.1: &std::num::Wrapping<u8>);
        _621 = <Wrapping<u8> as PartialEq>::eq(_618, _619) -> bb190;
    }

    bb190: {
        _620 = Not(move _621);
        switchInt(move _620) -> [0: bb192, otherwise: bb191];
    }

    bb191: {
        _622 = core::panicking::AssertKind::Eq;
        _624 = Option::<Arguments<'_>>::None;
        _623 = core::panicking::assert_failed::<Wrapping<u8>, Wrapping<u8>>(move _622, _618, _619, move _624);
    }

    bb192: {
        _625 = Wrapping::<u16>(const _);
        _627 = _625;
        _626 = test::black_box::<Wrapping<u16>>(move _627) -> bb193;
    }

    bb193: {
        _625 = move _626;
        _629 = &mut _625;
        _630 = Wrapping::<u16>(const 1_u16);
        _628 = <Wrapping<u16> as SubAssign>::sub_assign(move _629, move _630) -> bb194;
    }

    bb194: {
        _634 = _625;
        _633 = test::black_box::<Wrapping<u16>>(move _634) -> bb195;
    }

    bb195: {
        _632 = &_633;
        _636 = Wrapping::<u16>(const _);
        _635 = &_636;
        _631 = (move _632, move _635);
        _637 = (_631.0: &std::num::Wrapping<u16>);
        _638 = (_631.1: &std::num::Wrapping<u16>);
        _640 = <Wrapping<u16> as PartialEq>::eq(_637, _638) -> bb196;
    }

    bb196: {
        _639 = Not(move _640);
        switchInt(move _639) -> [0: bb198, otherwise: bb197];
    }

    bb197: {
        _641 = core::panicking::AssertKind::Eq;
        _643 = Option::<Arguments<'_>>::None;
        _642 = core::panicking::assert_failed::<Wrapping<u16>, Wrapping<u16>>(move _641, _637, _638, move _643);
    }

    bb198: {
        _644 = Wrapping::<u16>(const _);
        _646 = _644;
        _645 = test::black_box::<Wrapping<u16>>(move _646) -> bb199;
    }

    bb199: {
        _644 = move _645;
        _648 = &mut _644;
        _650 = Wrapping::<u16>(const 1_u16);
        _649 = &_650;
        _647 = <Wrapping<u16> as SubAssign<&Wrapping<u16>>>::sub_assign(move _648, move _649) -> bb200;
    }

    bb200: {
        _654 = _644;
        _653 = test::black_box::<Wrapping<u16>>(move _654) -> bb201;
    }

    bb201: {
        _652 = &_653;
        _656 = Wrapping::<u16>(const _);
        _655 = &_656;
        _651 = (move _652, move _655);
        _657 = (_651.0: &std::num::Wrapping<u16>);
        _658 = (_651.1: &std::num::Wrapping<u16>);
        _660 = <Wrapping<u16> as PartialEq>::eq(_657, _658) -> bb202;
    }

    bb202: {
        _659 = Not(move _660);
        switchInt(move _659) -> [0: bb204, otherwise: bb203];
    }

    bb203: {
        _661 = core::panicking::AssertKind::Eq;
        _663 = Option::<Arguments<'_>>::None;
        _662 = core::panicking::assert_failed::<Wrapping<u16>, Wrapping<u16>>(move _661, _657, _658, move _663);
    }

    bb204: {
        _664 = Wrapping::<u32>(const _);
        _666 = _664;
        _665 = test::black_box::<Wrapping<u32>>(move _666) -> bb205;
    }

    bb205: {
        _664 = move _665;
        _668 = &mut _664;
        _669 = Wrapping::<u32>(const 1_u32);
        _667 = <Wrapping<u32> as SubAssign>::sub_assign(move _668, move _669) -> bb206;
    }

    bb206: {
        _673 = _664;
        _672 = test::black_box::<Wrapping<u32>>(move _673) -> bb207;
    }

    bb207: {
        _671 = &_672;
        _675 = Wrapping::<u32>(const _);
        _674 = &_675;
        _670 = (move _671, move _674);
        _676 = (_670.0: &std::num::Wrapping<u32>);
        _677 = (_670.1: &std::num::Wrapping<u32>);
        _679 = <Wrapping<u32> as PartialEq>::eq(_676, _677) -> bb208;
    }

    bb208: {
        _678 = Not(move _679);
        switchInt(move _678) -> [0: bb210, otherwise: bb209];
    }

    bb209: {
        _680 = core::panicking::AssertKind::Eq;
        _682 = Option::<Arguments<'_>>::None;
        _681 = core::panicking::assert_failed::<Wrapping<u32>, Wrapping<u32>>(move _680, _676, _677, move _682);
    }

    bb210: {
        _683 = Wrapping::<u32>(const _);
        _685 = _683;
        _684 = test::black_box::<Wrapping<u32>>(move _685) -> bb211;
    }

    bb211: {
        _683 = move _684;
        _687 = &mut _683;
        _689 = Wrapping::<u32>(const 1_u32);
        _688 = &_689;
        _686 = <Wrapping<u32> as SubAssign<&Wrapping<u32>>>::sub_assign(move _687, move _688) -> bb212;
    }

    bb212: {
        _693 = _683;
        _692 = test::black_box::<Wrapping<u32>>(move _693) -> bb213;
    }

    bb213: {
        _691 = &_692;
        _695 = Wrapping::<u32>(const _);
        _694 = &_695;
        _690 = (move _691, move _694);
        _696 = (_690.0: &std::num::Wrapping<u32>);
        _697 = (_690.1: &std::num::Wrapping<u32>);
        _699 = <Wrapping<u32> as PartialEq>::eq(_696, _697) -> bb214;
    }

    bb214: {
        _698 = Not(move _699);
        switchInt(move _698) -> [0: bb216, otherwise: bb215];
    }

    bb215: {
        _700 = core::panicking::AssertKind::Eq;
        _702 = Option::<Arguments<'_>>::None;
        _701 = core::panicking::assert_failed::<Wrapping<u32>, Wrapping<u32>>(move _700, _696, _697, move _702);
    }

    bb216: {
        _703 = Wrapping::<u64>(const _);
        _705 = _703;
        _704 = test::black_box::<Wrapping<u64>>(move _705) -> bb217;
    }

    bb217: {
        _703 = move _704;
        _707 = &mut _703;
        _708 = Wrapping::<u64>(const 1_u64);
        _706 = <Wrapping<u64> as SubAssign>::sub_assign(move _707, move _708) -> bb218;
    }

    bb218: {
        _712 = _703;
        _711 = test::black_box::<Wrapping<u64>>(move _712) -> bb219;
    }

    bb219: {
        _710 = &_711;
        _714 = Wrapping::<u64>(const _);
        _713 = &_714;
        _709 = (move _710, move _713);
        _715 = (_709.0: &std::num::Wrapping<u64>);
        _716 = (_709.1: &std::num::Wrapping<u64>);
        _718 = <Wrapping<u64> as PartialEq>::eq(_715, _716) -> bb220;
    }

    bb220: {
        _717 = Not(move _718);
        switchInt(move _717) -> [0: bb222, otherwise: bb221];
    }

    bb221: {
        _719 = core::panicking::AssertKind::Eq;
        _721 = Option::<Arguments<'_>>::None;
        _720 = core::panicking::assert_failed::<Wrapping<u64>, Wrapping<u64>>(move _719, _715, _716, move _721);
    }

    bb222: {
        _722 = Wrapping::<u64>(const _);
        _724 = _722;
        _723 = test::black_box::<Wrapping<u64>>(move _724) -> bb223;
    }

    bb223: {
        _722 = move _723;
        _726 = &mut _722;
        _728 = Wrapping::<u64>(const 1_u64);
        _727 = &_728;
        _725 = <Wrapping<u64> as SubAssign<&Wrapping<u64>>>::sub_assign(move _726, move _727) -> bb224;
    }

    bb224: {
        _732 = _722;
        _731 = test::black_box::<Wrapping<u64>>(move _732) -> bb225;
    }

    bb225: {
        _730 = &_731;
        _734 = Wrapping::<u64>(const _);
        _733 = &_734;
        _729 = (move _730, move _733);
        _735 = (_729.0: &std::num::Wrapping<u64>);
        _736 = (_729.1: &std::num::Wrapping<u64>);
        _738 = <Wrapping<u64> as PartialEq>::eq(_735, _736) -> bb226;
    }

    bb226: {
        _737 = Not(move _738);
        switchInt(move _737) -> [0: bb228, otherwise: bb227];
    }

    bb227: {
        _739 = core::panicking::AssertKind::Eq;
        _741 = Option::<Arguments<'_>>::None;
        _740 = core::panicking::assert_failed::<Wrapping<u64>, Wrapping<u64>>(move _739, _735, _736, move _741);
    }

    bb228: {
        _742 = Wrapping::<usize>(const _);
        _744 = _742;
        _743 = test::black_box::<Wrapping<usize>>(move _744) -> bb229;
    }

    bb229: {
        _742 = move _743;
        _746 = &mut _742;
        _747 = Wrapping::<usize>(const 1_usize);
        _745 = <Wrapping<usize> as SubAssign>::sub_assign(move _746, move _747) -> bb230;
    }

    bb230: {
        _751 = _742;
        _750 = test::black_box::<Wrapping<usize>>(move _751) -> bb231;
    }

    bb231: {
        _749 = &_750;
        _753 = Wrapping::<usize>(const _);
        _752 = &_753;
        _748 = (move _749, move _752);
        _754 = (_748.0: &std::num::Wrapping<usize>);
        _755 = (_748.1: &std::num::Wrapping<usize>);
        _757 = <Wrapping<usize> as PartialEq>::eq(_754, _755) -> bb232;
    }

    bb232: {
        _756 = Not(move _757);
        switchInt(move _756) -> [0: bb234, otherwise: bb233];
    }

    bb233: {
        _758 = core::panicking::AssertKind::Eq;
        _760 = Option::<Arguments<'_>>::None;
        _759 = core::panicking::assert_failed::<Wrapping<usize>, Wrapping<usize>>(move _758, _754, _755, move _760);
    }

    bb234: {
        _761 = Wrapping::<usize>(const _);
        _763 = _761;
        _762 = test::black_box::<Wrapping<usize>>(move _763) -> bb235;
    }

    bb235: {
        _761 = move _762;
        _765 = &mut _761;
        _767 = Wrapping::<usize>(const 1_usize);
        _766 = &_767;
        _764 = <Wrapping<usize> as SubAssign<&Wrapping<usize>>>::sub_assign(move _765, move _766) -> bb236;
    }

    bb236: {
        _771 = _761;
        _770 = test::black_box::<Wrapping<usize>>(move _771) -> bb237;
    }

    bb237: {
        _769 = &_770;
        _773 = Wrapping::<usize>(const _);
        _772 = &_773;
        _768 = (move _769, move _772);
        _774 = (_768.0: &std::num::Wrapping<usize>);
        _775 = (_768.1: &std::num::Wrapping<usize>);
        _777 = <Wrapping<usize> as PartialEq>::eq(_774, _775) -> bb238;
    }

    bb238: {
        _776 = Not(move _777);
        switchInt(move _776) -> [0: bb240, otherwise: bb239];
    }

    bb239: {
        _778 = core::panicking::AssertKind::Eq;
        _780 = Option::<Arguments<'_>>::None;
        _779 = core::panicking::assert_failed::<Wrapping<usize>, Wrapping<usize>>(move _778, _774, _775, move _780);
    }

    bb240: {
        _781 = Wrapping::<i8>(const _);
        _783 = _781;
        _782 = test::black_box::<Wrapping<i8>>(move _783) -> bb241;
    }

    bb241: {
        _781 = move _782;
        _785 = &mut _781;
        _786 = Wrapping::<i8>(const 2_i8);
        _784 = <Wrapping<i8> as MulAssign>::mul_assign(move _785, move _786) -> bb242;
    }

    bb242: {
        _790 = _781;
        _789 = test::black_box::<Wrapping<i8>>(move _790) -> bb243;
    }

    bb243: {
        _788 = &_789;
        _792 = Wrapping::<i8>(const -2_i8);
        _791 = &_792;
        _787 = (move _788, move _791);
        _793 = (_787.0: &std::num::Wrapping<i8>);
        _794 = (_787.1: &std::num::Wrapping<i8>);
        _796 = <Wrapping<i8> as PartialEq>::eq(_793, _794) -> bb244;
    }

    bb244: {
        _795 = Not(move _796);
        switchInt(move _795) -> [0: bb246, otherwise: bb245];
    }

    bb245: {
        _797 = core::panicking::AssertKind::Eq;
        _799 = Option::<Arguments<'_>>::None;
        _798 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _797, _793, _794, move _799);
    }

    bb246: {
        _800 = Wrapping::<i8>(const _);
        _802 = _800;
        _801 = test::black_box::<Wrapping<i8>>(move _802) -> bb247;
    }

    bb247: {
        _800 = move _801;
        _804 = &mut _800;
        _806 = Wrapping::<i8>(const 2_i8);
        _805 = &_806;
        _803 = <Wrapping<i8> as MulAssign<&Wrapping<i8>>>::mul_assign(move _804, move _805) -> bb248;
    }

    bb248: {
        _810 = _800;
        _809 = test::black_box::<Wrapping<i8>>(move _810) -> bb249;
    }

    bb249: {
        _808 = &_809;
        _812 = Wrapping::<i8>(const -2_i8);
        _811 = &_812;
        _807 = (move _808, move _811);
        _813 = (_807.0: &std::num::Wrapping<i8>);
        _814 = (_807.1: &std::num::Wrapping<i8>);
        _816 = <Wrapping<i8> as PartialEq>::eq(_813, _814) -> bb250;
    }

    bb250: {
        _815 = Not(move _816);
        switchInt(move _815) -> [0: bb252, otherwise: bb251];
    }

    bb251: {
        _817 = core::panicking::AssertKind::Eq;
        _819 = Option::<Arguments<'_>>::None;
        _818 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _817, _813, _814, move _819);
    }

    bb252: {
        _820 = Wrapping::<i16>(const _);
        _822 = _820;
        _821 = test::black_box::<Wrapping<i16>>(move _822) -> bb253;
    }

    bb253: {
        _820 = move _821;
        _824 = &mut _820;
        _825 = Wrapping::<i16>(const 2_i16);
        _823 = <Wrapping<i16> as MulAssign>::mul_assign(move _824, move _825) -> bb254;
    }

    bb254: {
        _829 = _820;
        _828 = test::black_box::<Wrapping<i16>>(move _829) -> bb255;
    }

    bb255: {
        _827 = &_828;
        _831 = Wrapping::<i16>(const -2_i16);
        _830 = &_831;
        _826 = (move _827, move _830);
        _832 = (_826.0: &std::num::Wrapping<i16>);
        _833 = (_826.1: &std::num::Wrapping<i16>);
        _835 = <Wrapping<i16> as PartialEq>::eq(_832, _833) -> bb256;
    }

    bb256: {
        _834 = Not(move _835);
        switchInt(move _834) -> [0: bb258, otherwise: bb257];
    }

    bb257: {
        _836 = core::panicking::AssertKind::Eq;
        _838 = Option::<Arguments<'_>>::None;
        _837 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _836, _832, _833, move _838);
    }

    bb258: {
        _839 = Wrapping::<i16>(const _);
        _841 = _839;
        _840 = test::black_box::<Wrapping<i16>>(move _841) -> bb259;
    }

    bb259: {
        _839 = move _840;
        _843 = &mut _839;
        _845 = Wrapping::<i16>(const 2_i16);
        _844 = &_845;
        _842 = <Wrapping<i16> as MulAssign<&Wrapping<i16>>>::mul_assign(move _843, move _844) -> bb260;
    }

    bb260: {
        _849 = _839;
        _848 = test::black_box::<Wrapping<i16>>(move _849) -> bb261;
    }

    bb261: {
        _847 = &_848;
        _851 = Wrapping::<i16>(const -2_i16);
        _850 = &_851;
        _846 = (move _847, move _850);
        _852 = (_846.0: &std::num::Wrapping<i16>);
        _853 = (_846.1: &std::num::Wrapping<i16>);
        _855 = <Wrapping<i16> as PartialEq>::eq(_852, _853) -> bb262;
    }

    bb262: {
        _854 = Not(move _855);
        switchInt(move _854) -> [0: bb264, otherwise: bb263];
    }

    bb263: {
        _856 = core::panicking::AssertKind::Eq;
        _858 = Option::<Arguments<'_>>::None;
        _857 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _856, _852, _853, move _858);
    }

    bb264: {
        _859 = Wrapping::<i32>(const _);
        _861 = _859;
        _860 = test::black_box::<Wrapping<i32>>(move _861) -> bb265;
    }

    bb265: {
        _859 = move _860;
        _863 = &mut _859;
        _864 = Wrapping::<i32>(const 2_i32);
        _862 = <Wrapping<i32> as MulAssign>::mul_assign(move _863, move _864) -> bb266;
    }

    bb266: {
        _868 = _859;
        _867 = test::black_box::<Wrapping<i32>>(move _868) -> bb267;
    }

    bb267: {
        _866 = &_867;
        _870 = Wrapping::<i32>(const -2_i32);
        _869 = &_870;
        _865 = (move _866, move _869);
        _871 = (_865.0: &std::num::Wrapping<i32>);
        _872 = (_865.1: &std::num::Wrapping<i32>);
        _874 = <Wrapping<i32> as PartialEq>::eq(_871, _872) -> bb268;
    }

    bb268: {
        _873 = Not(move _874);
        switchInt(move _873) -> [0: bb270, otherwise: bb269];
    }

    bb269: {
        _875 = core::panicking::AssertKind::Eq;
        _877 = Option::<Arguments<'_>>::None;
        _876 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _875, _871, _872, move _877);
    }

    bb270: {
        _878 = Wrapping::<i32>(const _);
        _880 = _878;
        _879 = test::black_box::<Wrapping<i32>>(move _880) -> bb271;
    }

    bb271: {
        _878 = move _879;
        _882 = &mut _878;
        _884 = Wrapping::<i32>(const 2_i32);
        _883 = &_884;
        _881 = <Wrapping<i32> as MulAssign<&Wrapping<i32>>>::mul_assign(move _882, move _883) -> bb272;
    }

    bb272: {
        _888 = _878;
        _887 = test::black_box::<Wrapping<i32>>(move _888) -> bb273;
    }

    bb273: {
        _886 = &_887;
        _890 = Wrapping::<i32>(const -2_i32);
        _889 = &_890;
        _885 = (move _886, move _889);
        _891 = (_885.0: &std::num::Wrapping<i32>);
        _892 = (_885.1: &std::num::Wrapping<i32>);
        _894 = <Wrapping<i32> as PartialEq>::eq(_891, _892) -> bb274;
    }

    bb274: {
        _893 = Not(move _894);
        switchInt(move _893) -> [0: bb276, otherwise: bb275];
    }

    bb275: {
        _895 = core::panicking::AssertKind::Eq;
        _897 = Option::<Arguments<'_>>::None;
        _896 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _895, _891, _892, move _897);
    }

    bb276: {
        _898 = Wrapping::<i64>(const _);
        _900 = _898;
        _899 = test::black_box::<Wrapping<i64>>(move _900) -> bb277;
    }

    bb277: {
        _898 = move _899;
        _902 = &mut _898;
        _903 = Wrapping::<i64>(const 2_i64);
        _901 = <Wrapping<i64> as MulAssign>::mul_assign(move _902, move _903) -> bb278;
    }

    bb278: {
        _907 = _898;
        _906 = test::black_box::<Wrapping<i64>>(move _907) -> bb279;
    }

    bb279: {
        _905 = &_906;
        _909 = Wrapping::<i64>(const -2_i64);
        _908 = &_909;
        _904 = (move _905, move _908);
        _910 = (_904.0: &std::num::Wrapping<i64>);
        _911 = (_904.1: &std::num::Wrapping<i64>);
        _913 = <Wrapping<i64> as PartialEq>::eq(_910, _911) -> bb280;
    }

    bb280: {
        _912 = Not(move _913);
        switchInt(move _912) -> [0: bb282, otherwise: bb281];
    }

    bb281: {
        _914 = core::panicking::AssertKind::Eq;
        _916 = Option::<Arguments<'_>>::None;
        _915 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _914, _910, _911, move _916);
    }

    bb282: {
        _917 = Wrapping::<i64>(const _);
        _919 = _917;
        _918 = test::black_box::<Wrapping<i64>>(move _919) -> bb283;
    }

    bb283: {
        _917 = move _918;
        _921 = &mut _917;
        _923 = Wrapping::<i64>(const 2_i64);
        _922 = &_923;
        _920 = <Wrapping<i64> as MulAssign<&Wrapping<i64>>>::mul_assign(move _921, move _922) -> bb284;
    }

    bb284: {
        _927 = _917;
        _926 = test::black_box::<Wrapping<i64>>(move _927) -> bb285;
    }

    bb285: {
        _925 = &_926;
        _929 = Wrapping::<i64>(const -2_i64);
        _928 = &_929;
        _924 = (move _925, move _928);
        _930 = (_924.0: &std::num::Wrapping<i64>);
        _931 = (_924.1: &std::num::Wrapping<i64>);
        _933 = <Wrapping<i64> as PartialEq>::eq(_930, _931) -> bb286;
    }

    bb286: {
        _932 = Not(move _933);
        switchInt(move _932) -> [0: bb288, otherwise: bb287];
    }

    bb287: {
        _934 = core::panicking::AssertKind::Eq;
        _936 = Option::<Arguments<'_>>::None;
        _935 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _934, _930, _931, move _936);
    }

    bb288: {
        _937 = Wrapping::<isize>(const _);
        _939 = _937;
        _938 = test::black_box::<Wrapping<isize>>(move _939) -> bb289;
    }

    bb289: {
        _937 = move _938;
        _941 = &mut _937;
        _942 = Wrapping::<isize>(const 2_isize);
        _940 = <Wrapping<isize> as MulAssign>::mul_assign(move _941, move _942) -> bb290;
    }

    bb290: {
        _946 = _937;
        _945 = test::black_box::<Wrapping<isize>>(move _946) -> bb291;
    }

    bb291: {
        _944 = &_945;
        _948 = Wrapping::<isize>(const -2_isize);
        _947 = &_948;
        _943 = (move _944, move _947);
        _949 = (_943.0: &std::num::Wrapping<isize>);
        _950 = (_943.1: &std::num::Wrapping<isize>);
        _952 = <Wrapping<isize> as PartialEq>::eq(_949, _950) -> bb292;
    }

    bb292: {
        _951 = Not(move _952);
        switchInt(move _951) -> [0: bb294, otherwise: bb293];
    }

    bb293: {
        _953 = core::panicking::AssertKind::Eq;
        _955 = Option::<Arguments<'_>>::None;
        _954 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _953, _949, _950, move _955);
    }

    bb294: {
        _956 = Wrapping::<isize>(const _);
        _958 = _956;
        _957 = test::black_box::<Wrapping<isize>>(move _958) -> bb295;
    }

    bb295: {
        _956 = move _957;
        _960 = &mut _956;
        _962 = Wrapping::<isize>(const 2_isize);
        _961 = &_962;
        _959 = <Wrapping<isize> as MulAssign<&Wrapping<isize>>>::mul_assign(move _960, move _961) -> bb296;
    }

    bb296: {
        _966 = _956;
        _965 = test::black_box::<Wrapping<isize>>(move _966) -> bb297;
    }

    bb297: {
        _964 = &_965;
        _968 = Wrapping::<isize>(const -2_isize);
        _967 = &_968;
        _963 = (move _964, move _967);
        _969 = (_963.0: &std::num::Wrapping<isize>);
        _970 = (_963.1: &std::num::Wrapping<isize>);
        _972 = <Wrapping<isize> as PartialEq>::eq(_969, _970) -> bb298;
    }

    bb298: {
        _971 = Not(move _972);
        switchInt(move _971) -> [0: bb300, otherwise: bb299];
    }

    bb299: {
        _973 = core::panicking::AssertKind::Eq;
        _975 = Option::<Arguments<'_>>::None;
        _974 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _973, _969, _970, move _975);
    }

    bb300: {
        _976 = Wrapping::<u8>(const _);
        _978 = _976;
        _977 = test::black_box::<Wrapping<u8>>(move _978) -> bb301;
    }

    bb301: {
        _976 = move _977;
        _980 = &mut _976;
        _981 = Wrapping::<u8>(const 2_u8);
        _979 = <Wrapping<u8> as MulAssign>::mul_assign(move _980, move _981) -> bb302;
    }

    bb302: {
        _985 = _976;
        _984 = test::black_box::<Wrapping<u8>>(move _985) -> bb303;
    }

    bb303: {
        _983 = &_984;
        _988 = Sub(const _, const 1_u8);
        _987 = Wrapping::<u8>(move _988);
        _986 = &_987;
        _982 = (move _983, move _986);
        _989 = (_982.0: &std::num::Wrapping<u8>);
        _990 = (_982.1: &std::num::Wrapping<u8>);
        _992 = <Wrapping<u8> as PartialEq>::eq(_989, _990) -> bb304;
    }

    bb304: {
        _991 = Not(move _992);
        switchInt(move _991) -> [0: bb306, otherwise: bb305];
    }

    bb305: {
        _993 = core::panicking::AssertKind::Eq;
        _995 = Option::<Arguments<'_>>::None;
        _994 = core::panicking::assert_failed::<Wrapping<u8>, Wrapping<u8>>(move _993, _989, _990, move _995);
    }

    bb306: {
        _996 = Wrapping::<u8>(const _);
        _998 = _996;
        _997 = test::black_box::<Wrapping<u8>>(move _998) -> bb307;
    }

    bb307: {
        _996 = move _997;
        _1000 = &mut _996;
        _1002 = Wrapping::<u8>(const 2_u8);
        _1001 = &_1002;
        _999 = <Wrapping<u8> as MulAssign<&Wrapping<u8>>>::mul_assign(move _1000, move _1001) -> bb308;
    }

    bb308: {
        _1006 = _996;
        _1005 = test::black_box::<Wrapping<u8>>(move _1006) -> bb309;
    }

    bb309: {
        _1004 = &_1005;
        _1009 = Sub(const _, const 1_u8);
        _1008 = Wrapping::<u8>(move _1009);
        _1007 = &_1008;
        _1003 = (move _1004, move _1007);
        _1010 = (_1003.0: &std::num::Wrapping<u8>);
        _1011 = (_1003.1: &std::num::Wrapping<u8>);
        _1013 = <Wrapping<u8> as PartialEq>::eq(_1010, _1011) -> bb310;
    }

    bb310: {
        _1012 = Not(move _1013);
        switchInt(move _1012) -> [0: bb312, otherwise: bb311];
    }

    bb311: {
        _1014 = core::panicking::AssertKind::Eq;
        _1016 = Option::<Arguments<'_>>::None;
        _1015 = core::panicking::assert_failed::<Wrapping<u8>, Wrapping<u8>>(move _1014, _1010, _1011, move _1016);
    }

    bb312: {
        _1017 = Wrapping::<u16>(const _);
        _1019 = _1017;
        _1018 = test::black_box::<Wrapping<u16>>(move _1019) -> bb313;
    }

    bb313: {
        _1017 = move _1018;
        _1021 = &mut _1017;
        _1022 = Wrapping::<u16>(const 2_u16);
        _1020 = <Wrapping<u16> as MulAssign>::mul_assign(move _1021, move _1022) -> bb314;
    }

    bb314: {
        _1026 = _1017;
        _1025 = test::black_box::<Wrapping<u16>>(move _1026) -> bb315;
    }

    bb315: {
        _1024 = &_1025;
        _1029 = Sub(const _, const 1_u16);
        _1028 = Wrapping::<u16>(move _1029);
        _1027 = &_1028;
        _1023 = (move _1024, move _1027);
        _1030 = (_1023.0: &std::num::Wrapping<u16>);
        _1031 = (_1023.1: &std::num::Wrapping<u16>);
        _1033 = <Wrapping<u16> as PartialEq>::eq(_1030, _1031) -> bb316;
    }

    bb316: {
        _1032 = Not(move _1033);
        switchInt(move _1032) -> [0: bb318, otherwise: bb317];
    }

    bb317: {
        _1034 = core::panicking::AssertKind::Eq;
        _1036 = Option::<Arguments<'_>>::None;
        _1035 = core::panicking::assert_failed::<Wrapping<u16>, Wrapping<u16>>(move _1034, _1030, _1031, move _1036);
    }

    bb318: {
        _1037 = Wrapping::<u16>(const _);
        _1039 = _1037;
        _1038 = test::black_box::<Wrapping<u16>>(move _1039) -> bb319;
    }

    bb319: {
        _1037 = move _1038;
        _1041 = &mut _1037;
        _1043 = Wrapping::<u16>(const 2_u16);
        _1042 = &_1043;
        _1040 = <Wrapping<u16> as MulAssign<&Wrapping<u16>>>::mul_assign(move _1041, move _1042) -> bb320;
    }

    bb320: {
        _1047 = _1037;
        _1046 = test::black_box::<Wrapping<u16>>(move _1047) -> bb321;
    }

    bb321: {
        _1045 = &_1046;
        _1050 = Sub(const _, const 1_u16);
        _1049 = Wrapping::<u16>(move _1050);
        _1048 = &_1049;
        _1044 = (move _1045, move _1048);
        _1051 = (_1044.0: &std::num::Wrapping<u16>);
        _1052 = (_1044.1: &std::num::Wrapping<u16>);
        _1054 = <Wrapping<u16> as PartialEq>::eq(_1051, _1052) -> bb322;
    }

    bb322: {
        _1053 = Not(move _1054);
        switchInt(move _1053) -> [0: bb324, otherwise: bb323];
    }

    bb323: {
        _1055 = core::panicking::AssertKind::Eq;
        _1057 = Option::<Arguments<'_>>::None;
        _1056 = core::panicking::assert_failed::<Wrapping<u16>, Wrapping<u16>>(move _1055, _1051, _1052, move _1057);
    }

    bb324: {
        _1058 = Wrapping::<u32>(const _);
        _1060 = _1058;
        _1059 = test::black_box::<Wrapping<u32>>(move _1060) -> bb325;
    }

    bb325: {
        _1058 = move _1059;
        _1062 = &mut _1058;
        _1063 = Wrapping::<u32>(const 2_u32);
        _1061 = <Wrapping<u32> as MulAssign>::mul_assign(move _1062, move _1063) -> bb326;
    }

    bb326: {
        _1067 = _1058;
        _1066 = test::black_box::<Wrapping<u32>>(move _1067) -> bb327;
    }

    bb327: {
        _1065 = &_1066;
        _1070 = Sub(const _, const 1_u32);
        _1069 = Wrapping::<u32>(move _1070);
        _1068 = &_1069;
        _1064 = (move _1065, move _1068);
        _1071 = (_1064.0: &std::num::Wrapping<u32>);
        _1072 = (_1064.1: &std::num::Wrapping<u32>);
        _1074 = <Wrapping<u32> as PartialEq>::eq(_1071, _1072) -> bb328;
    }

    bb328: {
        _1073 = Not(move _1074);
        switchInt(move _1073) -> [0: bb330, otherwise: bb329];
    }

    bb329: {
        _1075 = core::panicking::AssertKind::Eq;
        _1077 = Option::<Arguments<'_>>::None;
        _1076 = core::panicking::assert_failed::<Wrapping<u32>, Wrapping<u32>>(move _1075, _1071, _1072, move _1077);
    }

    bb330: {
        _1078 = Wrapping::<u32>(const _);
        _1080 = _1078;
        _1079 = test::black_box::<Wrapping<u32>>(move _1080) -> bb331;
    }

    bb331: {
        _1078 = move _1079;
        _1082 = &mut _1078;
        _1084 = Wrapping::<u32>(const 2_u32);
        _1083 = &_1084;
        _1081 = <Wrapping<u32> as MulAssign<&Wrapping<u32>>>::mul_assign(move _1082, move _1083) -> bb332;
    }

    bb332: {
        _1088 = _1078;
        _1087 = test::black_box::<Wrapping<u32>>(move _1088) -> bb333;
    }

    bb333: {
        _1086 = &_1087;
        _1091 = Sub(const _, const 1_u32);
        _1090 = Wrapping::<u32>(move _1091);
        _1089 = &_1090;
        _1085 = (move _1086, move _1089);
        _1092 = (_1085.0: &std::num::Wrapping<u32>);
        _1093 = (_1085.1: &std::num::Wrapping<u32>);
        _1095 = <Wrapping<u32> as PartialEq>::eq(_1092, _1093) -> bb334;
    }

    bb334: {
        _1094 = Not(move _1095);
        switchInt(move _1094) -> [0: bb336, otherwise: bb335];
    }

    bb335: {
        _1096 = core::panicking::AssertKind::Eq;
        _1098 = Option::<Arguments<'_>>::None;
        _1097 = core::panicking::assert_failed::<Wrapping<u32>, Wrapping<u32>>(move _1096, _1092, _1093, move _1098);
    }

    bb336: {
        _1099 = Wrapping::<u64>(const _);
        _1101 = _1099;
        _1100 = test::black_box::<Wrapping<u64>>(move _1101) -> bb337;
    }

    bb337: {
        _1099 = move _1100;
        _1103 = &mut _1099;
        _1104 = Wrapping::<u64>(const 2_u64);
        _1102 = <Wrapping<u64> as MulAssign>::mul_assign(move _1103, move _1104) -> bb338;
    }

    bb338: {
        _1108 = _1099;
        _1107 = test::black_box::<Wrapping<u64>>(move _1108) -> bb339;
    }

    bb339: {
        _1106 = &_1107;
        _1111 = Sub(const _, const 1_u64);
        _1110 = Wrapping::<u64>(move _1111);
        _1109 = &_1110;
        _1105 = (move _1106, move _1109);
        _1112 = (_1105.0: &std::num::Wrapping<u64>);
        _1113 = (_1105.1: &std::num::Wrapping<u64>);
        _1115 = <Wrapping<u64> as PartialEq>::eq(_1112, _1113) -> bb340;
    }

    bb340: {
        _1114 = Not(move _1115);
        switchInt(move _1114) -> [0: bb342, otherwise: bb341];
    }

    bb341: {
        _1116 = core::panicking::AssertKind::Eq;
        _1118 = Option::<Arguments<'_>>::None;
        _1117 = core::panicking::assert_failed::<Wrapping<u64>, Wrapping<u64>>(move _1116, _1112, _1113, move _1118);
    }

    bb342: {
        _1119 = Wrapping::<u64>(const _);
        _1121 = _1119;
        _1120 = test::black_box::<Wrapping<u64>>(move _1121) -> bb343;
    }

    bb343: {
        _1119 = move _1120;
        _1123 = &mut _1119;
        _1125 = Wrapping::<u64>(const 2_u64);
        _1124 = &_1125;
        _1122 = <Wrapping<u64> as MulAssign<&Wrapping<u64>>>::mul_assign(move _1123, move _1124) -> bb344;
    }

    bb344: {
        _1129 = _1119;
        _1128 = test::black_box::<Wrapping<u64>>(move _1129) -> bb345;
    }

    bb345: {
        _1127 = &_1128;
        _1132 = Sub(const _, const 1_u64);
        _1131 = Wrapping::<u64>(move _1132);
        _1130 = &_1131;
        _1126 = (move _1127, move _1130);
        _1133 = (_1126.0: &std::num::Wrapping<u64>);
        _1134 = (_1126.1: &std::num::Wrapping<u64>);
        _1136 = <Wrapping<u64> as PartialEq>::eq(_1133, _1134) -> bb346;
    }

    bb346: {
        _1135 = Not(move _1136);
        switchInt(move _1135) -> [0: bb348, otherwise: bb347];
    }

    bb347: {
        _1137 = core::panicking::AssertKind::Eq;
        _1139 = Option::<Arguments<'_>>::None;
        _1138 = core::panicking::assert_failed::<Wrapping<u64>, Wrapping<u64>>(move _1137, _1133, _1134, move _1139);
    }

    bb348: {
        _1140 = Wrapping::<usize>(const _);
        _1142 = _1140;
        _1141 = test::black_box::<Wrapping<usize>>(move _1142) -> bb349;
    }

    bb349: {
        _1140 = move _1141;
        _1144 = &mut _1140;
        _1145 = Wrapping::<usize>(const 2_usize);
        _1143 = <Wrapping<usize> as MulAssign>::mul_assign(move _1144, move _1145) -> bb350;
    }

    bb350: {
        _1149 = _1140;
        _1148 = test::black_box::<Wrapping<usize>>(move _1149) -> bb351;
    }

    bb351: {
        _1147 = &_1148;
        _1152 = Sub(const _, const 1_usize);
        _1151 = Wrapping::<usize>(move _1152);
        _1150 = &_1151;
        _1146 = (move _1147, move _1150);
        _1153 = (_1146.0: &std::num::Wrapping<usize>);
        _1154 = (_1146.1: &std::num::Wrapping<usize>);
        _1156 = <Wrapping<usize> as PartialEq>::eq(_1153, _1154) -> bb352;
    }

    bb352: {
        _1155 = Not(move _1156);
        switchInt(move _1155) -> [0: bb354, otherwise: bb353];
    }

    bb353: {
        _1157 = core::panicking::AssertKind::Eq;
        _1159 = Option::<Arguments<'_>>::None;
        _1158 = core::panicking::assert_failed::<Wrapping<usize>, Wrapping<usize>>(move _1157, _1153, _1154, move _1159);
    }

    bb354: {
        _1160 = Wrapping::<usize>(const _);
        _1162 = _1160;
        _1161 = test::black_box::<Wrapping<usize>>(move _1162) -> bb355;
    }

    bb355: {
        _1160 = move _1161;
        _1164 = &mut _1160;
        _1166 = Wrapping::<usize>(const 2_usize);
        _1165 = &_1166;
        _1163 = <Wrapping<usize> as MulAssign<&Wrapping<usize>>>::mul_assign(move _1164, move _1165) -> bb356;
    }

    bb356: {
        _1170 = _1160;
        _1169 = test::black_box::<Wrapping<usize>>(move _1170) -> bb357;
    }

    bb357: {
        _1168 = &_1169;
        _1173 = Sub(const _, const 1_usize);
        _1172 = Wrapping::<usize>(move _1173);
        _1171 = &_1172;
        _1167 = (move _1168, move _1171);
        _1174 = (_1167.0: &std::num::Wrapping<usize>);
        _1175 = (_1167.1: &std::num::Wrapping<usize>);
        _1177 = <Wrapping<usize> as PartialEq>::eq(_1174, _1175) -> bb358;
    }

    bb358: {
        _1176 = Not(move _1177);
        switchInt(move _1176) -> [0: bb360, otherwise: bb359];
    }

    bb359: {
        _1178 = core::panicking::AssertKind::Eq;
        _1180 = Option::<Arguments<'_>>::None;
        _1179 = core::panicking::assert_failed::<Wrapping<usize>, Wrapping<usize>>(move _1178, _1174, _1175, move _1180);
    }

    bb360: {
        _1181 = Wrapping::<i8>(const _);
        _1183 = _1181;
        _1182 = test::black_box::<Wrapping<i8>>(move _1183) -> bb361;
    }

    bb361: {
        _1181 = move _1182;
        _1185 = &mut _1181;
        _1186 = Wrapping::<i8>(const -1_i8);
        _1184 = <Wrapping<i8> as DivAssign>::div_assign(move _1185, move _1186) -> bb362;
    }

    bb362: {
        _1190 = _1181;
        _1189 = test::black_box::<Wrapping<i8>>(move _1190) -> bb363;
    }

    bb363: {
        _1188 = &_1189;
        _1192 = Wrapping::<i8>(const _);
        _1191 = &_1192;
        _1187 = (move _1188, move _1191);
        _1193 = (_1187.0: &std::num::Wrapping<i8>);
        _1194 = (_1187.1: &std::num::Wrapping<i8>);
        _1196 = <Wrapping<i8> as PartialEq>::eq(_1193, _1194) -> bb364;
    }

    bb364: {
        _1195 = Not(move _1196);
        switchInt(move _1195) -> [0: bb366, otherwise: bb365];
    }

    bb365: {
        _1197 = core::panicking::AssertKind::Eq;
        _1199 = Option::<Arguments<'_>>::None;
        _1198 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _1197, _1193, _1194, move _1199);
    }

    bb366: {
        _1200 = Wrapping::<i8>(const _);
        _1202 = _1200;
        _1201 = test::black_box::<Wrapping<i8>>(move _1202) -> bb367;
    }

    bb367: {
        _1200 = move _1201;
        _1204 = &mut _1200;
        _1206 = Wrapping::<i8>(const -1_i8);
        _1205 = &_1206;
        _1203 = <Wrapping<i8> as DivAssign<&Wrapping<i8>>>::div_assign(move _1204, move _1205) -> bb368;
    }

    bb368: {
        _1210 = _1200;
        _1209 = test::black_box::<Wrapping<i8>>(move _1210) -> bb369;
    }

    bb369: {
        _1208 = &_1209;
        _1212 = Wrapping::<i8>(const _);
        _1211 = &_1212;
        _1207 = (move _1208, move _1211);
        _1213 = (_1207.0: &std::num::Wrapping<i8>);
        _1214 = (_1207.1: &std::num::Wrapping<i8>);
        _1216 = <Wrapping<i8> as PartialEq>::eq(_1213, _1214) -> bb370;
    }

    bb370: {
        _1215 = Not(move _1216);
        switchInt(move _1215) -> [0: bb372, otherwise: bb371];
    }

    bb371: {
        _1217 = core::panicking::AssertKind::Eq;
        _1219 = Option::<Arguments<'_>>::None;
        _1218 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _1217, _1213, _1214, move _1219);
    }

    bb372: {
        _1220 = Wrapping::<i16>(const _);
        _1222 = _1220;
        _1221 = test::black_box::<Wrapping<i16>>(move _1222) -> bb373;
    }

    bb373: {
        _1220 = move _1221;
        _1224 = &mut _1220;
        _1225 = Wrapping::<i16>(const -1_i16);
        _1223 = <Wrapping<i16> as DivAssign>::div_assign(move _1224, move _1225) -> bb374;
    }

    bb374: {
        _1229 = _1220;
        _1228 = test::black_box::<Wrapping<i16>>(move _1229) -> bb375;
    }

    bb375: {
        _1227 = &_1228;
        _1231 = Wrapping::<i16>(const _);
        _1230 = &_1231;
        _1226 = (move _1227, move _1230);
        _1232 = (_1226.0: &std::num::Wrapping<i16>);
        _1233 = (_1226.1: &std::num::Wrapping<i16>);
        _1235 = <Wrapping<i16> as PartialEq>::eq(_1232, _1233) -> bb376;
    }

    bb376: {
        _1234 = Not(move _1235);
        switchInt(move _1234) -> [0: bb378, otherwise: bb377];
    }

    bb377: {
        _1236 = core::panicking::AssertKind::Eq;
        _1238 = Option::<Arguments<'_>>::None;
        _1237 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _1236, _1232, _1233, move _1238);
    }

    bb378: {
        _1239 = Wrapping::<i16>(const _);
        _1241 = _1239;
        _1240 = test::black_box::<Wrapping<i16>>(move _1241) -> bb379;
    }

    bb379: {
        _1239 = move _1240;
        _1243 = &mut _1239;
        _1245 = Wrapping::<i16>(const -1_i16);
        _1244 = &_1245;
        _1242 = <Wrapping<i16> as DivAssign<&Wrapping<i16>>>::div_assign(move _1243, move _1244) -> bb380;
    }

    bb380: {
        _1249 = _1239;
        _1248 = test::black_box::<Wrapping<i16>>(move _1249) -> bb381;
    }

    bb381: {
        _1247 = &_1248;
        _1251 = Wrapping::<i16>(const _);
        _1250 = &_1251;
        _1246 = (move _1247, move _1250);
        _1252 = (_1246.0: &std::num::Wrapping<i16>);
        _1253 = (_1246.1: &std::num::Wrapping<i16>);
        _1255 = <Wrapping<i16> as PartialEq>::eq(_1252, _1253) -> bb382;
    }

    bb382: {
        _1254 = Not(move _1255);
        switchInt(move _1254) -> [0: bb384, otherwise: bb383];
    }

    bb383: {
        _1256 = core::panicking::AssertKind::Eq;
        _1258 = Option::<Arguments<'_>>::None;
        _1257 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _1256, _1252, _1253, move _1258);
    }

    bb384: {
        _1259 = Wrapping::<i32>(const _);
        _1261 = _1259;
        _1260 = test::black_box::<Wrapping<i32>>(move _1261) -> bb385;
    }

    bb385: {
        _1259 = move _1260;
        _1263 = &mut _1259;
        _1264 = Wrapping::<i32>(const -1_i32);
        _1262 = <Wrapping<i32> as DivAssign>::div_assign(move _1263, move _1264) -> bb386;
    }

    bb386: {
        _1268 = _1259;
        _1267 = test::black_box::<Wrapping<i32>>(move _1268) -> bb387;
    }

    bb387: {
        _1266 = &_1267;
        _1270 = Wrapping::<i32>(const _);
        _1269 = &_1270;
        _1265 = (move _1266, move _1269);
        _1271 = (_1265.0: &std::num::Wrapping<i32>);
        _1272 = (_1265.1: &std::num::Wrapping<i32>);
        _1274 = <Wrapping<i32> as PartialEq>::eq(_1271, _1272) -> bb388;
    }

    bb388: {
        _1273 = Not(move _1274);
        switchInt(move _1273) -> [0: bb390, otherwise: bb389];
    }

    bb389: {
        _1275 = core::panicking::AssertKind::Eq;
        _1277 = Option::<Arguments<'_>>::None;
        _1276 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _1275, _1271, _1272, move _1277);
    }

    bb390: {
        _1278 = Wrapping::<i32>(const _);
        _1280 = _1278;
        _1279 = test::black_box::<Wrapping<i32>>(move _1280) -> bb391;
    }

    bb391: {
        _1278 = move _1279;
        _1282 = &mut _1278;
        _1284 = Wrapping::<i32>(const -1_i32);
        _1283 = &_1284;
        _1281 = <Wrapping<i32> as DivAssign<&Wrapping<i32>>>::div_assign(move _1282, move _1283) -> bb392;
    }

    bb392: {
        _1288 = _1278;
        _1287 = test::black_box::<Wrapping<i32>>(move _1288) -> bb393;
    }

    bb393: {
        _1286 = &_1287;
        _1290 = Wrapping::<i32>(const _);
        _1289 = &_1290;
        _1285 = (move _1286, move _1289);
        _1291 = (_1285.0: &std::num::Wrapping<i32>);
        _1292 = (_1285.1: &std::num::Wrapping<i32>);
        _1294 = <Wrapping<i32> as PartialEq>::eq(_1291, _1292) -> bb394;
    }

    bb394: {
        _1293 = Not(move _1294);
        switchInt(move _1293) -> [0: bb396, otherwise: bb395];
    }

    bb395: {
        _1295 = core::panicking::AssertKind::Eq;
        _1297 = Option::<Arguments<'_>>::None;
        _1296 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _1295, _1291, _1292, move _1297);
    }

    bb396: {
        _1298 = Wrapping::<i64>(const _);
        _1300 = _1298;
        _1299 = test::black_box::<Wrapping<i64>>(move _1300) -> bb397;
    }

    bb397: {
        _1298 = move _1299;
        _1302 = &mut _1298;
        _1303 = Wrapping::<i64>(const -1_i64);
        _1301 = <Wrapping<i64> as DivAssign>::div_assign(move _1302, move _1303) -> bb398;
    }

    bb398: {
        _1307 = _1298;
        _1306 = test::black_box::<Wrapping<i64>>(move _1307) -> bb399;
    }

    bb399: {
        _1305 = &_1306;
        _1309 = Wrapping::<i64>(const _);
        _1308 = &_1309;
        _1304 = (move _1305, move _1308);
        _1310 = (_1304.0: &std::num::Wrapping<i64>);
        _1311 = (_1304.1: &std::num::Wrapping<i64>);
        _1313 = <Wrapping<i64> as PartialEq>::eq(_1310, _1311) -> bb400;
    }

    bb400: {
        _1312 = Not(move _1313);
        switchInt(move _1312) -> [0: bb402, otherwise: bb401];
    }

    bb401: {
        _1314 = core::panicking::AssertKind::Eq;
        _1316 = Option::<Arguments<'_>>::None;
        _1315 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _1314, _1310, _1311, move _1316);
    }

    bb402: {
        _1317 = Wrapping::<i64>(const _);
        _1319 = _1317;
        _1318 = test::black_box::<Wrapping<i64>>(move _1319) -> bb403;
    }

    bb403: {
        _1317 = move _1318;
        _1321 = &mut _1317;
        _1323 = Wrapping::<i64>(const -1_i64);
        _1322 = &_1323;
        _1320 = <Wrapping<i64> as DivAssign<&Wrapping<i64>>>::div_assign(move _1321, move _1322) -> bb404;
    }

    bb404: {
        _1327 = _1317;
        _1326 = test::black_box::<Wrapping<i64>>(move _1327) -> bb405;
    }

    bb405: {
        _1325 = &_1326;
        _1329 = Wrapping::<i64>(const _);
        _1328 = &_1329;
        _1324 = (move _1325, move _1328);
        _1330 = (_1324.0: &std::num::Wrapping<i64>);
        _1331 = (_1324.1: &std::num::Wrapping<i64>);
        _1333 = <Wrapping<i64> as PartialEq>::eq(_1330, _1331) -> bb406;
    }

    bb406: {
        _1332 = Not(move _1333);
        switchInt(move _1332) -> [0: bb408, otherwise: bb407];
    }

    bb407: {
        _1334 = core::panicking::AssertKind::Eq;
        _1336 = Option::<Arguments<'_>>::None;
        _1335 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _1334, _1330, _1331, move _1336);
    }

    bb408: {
        _1337 = Wrapping::<isize>(const _);
        _1339 = _1337;
        _1338 = test::black_box::<Wrapping<isize>>(move _1339) -> bb409;
    }

    bb409: {
        _1337 = move _1338;
        _1341 = &mut _1337;
        _1342 = Wrapping::<isize>(const -1_isize);
        _1340 = <Wrapping<isize> as DivAssign>::div_assign(move _1341, move _1342) -> bb410;
    }

    bb410: {
        _1346 = _1337;
        _1345 = test::black_box::<Wrapping<isize>>(move _1346) -> bb411;
    }

    bb411: {
        _1344 = &_1345;
        _1348 = Wrapping::<isize>(const _);
        _1347 = &_1348;
        _1343 = (move _1344, move _1347);
        _1349 = (_1343.0: &std::num::Wrapping<isize>);
        _1350 = (_1343.1: &std::num::Wrapping<isize>);
        _1352 = <Wrapping<isize> as PartialEq>::eq(_1349, _1350) -> bb412;
    }

    bb412: {
        _1351 = Not(move _1352);
        switchInt(move _1351) -> [0: bb414, otherwise: bb413];
    }

    bb413: {
        _1353 = core::panicking::AssertKind::Eq;
        _1355 = Option::<Arguments<'_>>::None;
        _1354 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _1353, _1349, _1350, move _1355);
    }

    bb414: {
        _1356 = Wrapping::<isize>(const _);
        _1358 = _1356;
        _1357 = test::black_box::<Wrapping<isize>>(move _1358) -> bb415;
    }

    bb415: {
        _1356 = move _1357;
        _1360 = &mut _1356;
        _1362 = Wrapping::<isize>(const -1_isize);
        _1361 = &_1362;
        _1359 = <Wrapping<isize> as DivAssign<&Wrapping<isize>>>::div_assign(move _1360, move _1361) -> bb416;
    }

    bb416: {
        _1366 = _1356;
        _1365 = test::black_box::<Wrapping<isize>>(move _1366) -> bb417;
    }

    bb417: {
        _1364 = &_1365;
        _1368 = Wrapping::<isize>(const _);
        _1367 = &_1368;
        _1363 = (move _1364, move _1367);
        _1369 = (_1363.0: &std::num::Wrapping<isize>);
        _1370 = (_1363.1: &std::num::Wrapping<isize>);
        _1372 = <Wrapping<isize> as PartialEq>::eq(_1369, _1370) -> bb418;
    }

    bb418: {
        _1371 = Not(move _1372);
        switchInt(move _1371) -> [0: bb420, otherwise: bb419];
    }

    bb419: {
        _1373 = core::panicking::AssertKind::Eq;
        _1375 = Option::<Arguments<'_>>::None;
        _1374 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _1373, _1369, _1370, move _1375);
    }

    bb420: {
        _1376 = Wrapping::<i8>(const _);
        _1378 = _1376;
        _1377 = test::black_box::<Wrapping<i8>>(move _1378) -> bb421;
    }

    bb421: {
        _1376 = move _1377;
        _1380 = &mut _1376;
        _1381 = Wrapping::<i8>(const -1_i8);
        _1379 = <Wrapping<i8> as RemAssign>::rem_assign(move _1380, move _1381) -> bb422;
    }

    bb422: {
        _1385 = _1376;
        _1384 = test::black_box::<Wrapping<i8>>(move _1385) -> bb423;
    }

    bb423: {
        _1383 = &_1384;
        _1387 = Wrapping::<i8>(const 0_i8);
        _1386 = &_1387;
        _1382 = (move _1383, move _1386);
        _1388 = (_1382.0: &std::num::Wrapping<i8>);
        _1389 = (_1382.1: &std::num::Wrapping<i8>);
        _1391 = <Wrapping<i8> as PartialEq>::eq(_1388, _1389) -> bb424;
    }

    bb424: {
        _1390 = Not(move _1391);
        switchInt(move _1390) -> [0: bb426, otherwise: bb425];
    }

    bb425: {
        _1392 = core::panicking::AssertKind::Eq;
        _1394 = Option::<Arguments<'_>>::None;
        _1393 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _1392, _1388, _1389, move _1394);
    }

    bb426: {
        _1395 = Wrapping::<i8>(const _);
        _1397 = _1395;
        _1396 = test::black_box::<Wrapping<i8>>(move _1397) -> bb427;
    }

    bb427: {
        _1395 = move _1396;
        _1399 = &mut _1395;
        _1401 = Wrapping::<i8>(const -1_i8);
        _1400 = &_1401;
        _1398 = <Wrapping<i8> as RemAssign<&Wrapping<i8>>>::rem_assign(move _1399, move _1400) -> bb428;
    }

    bb428: {
        _1405 = _1395;
        _1404 = test::black_box::<Wrapping<i8>>(move _1405) -> bb429;
    }

    bb429: {
        _1403 = &_1404;
        _1407 = Wrapping::<i8>(const 0_i8);
        _1406 = &_1407;
        _1402 = (move _1403, move _1406);
        _1408 = (_1402.0: &std::num::Wrapping<i8>);
        _1409 = (_1402.1: &std::num::Wrapping<i8>);
        _1411 = <Wrapping<i8> as PartialEq>::eq(_1408, _1409) -> bb430;
    }

    bb430: {
        _1410 = Not(move _1411);
        switchInt(move _1410) -> [0: bb432, otherwise: bb431];
    }

    bb431: {
        _1412 = core::panicking::AssertKind::Eq;
        _1414 = Option::<Arguments<'_>>::None;
        _1413 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _1412, _1408, _1409, move _1414);
    }

    bb432: {
        _1415 = Wrapping::<i16>(const _);
        _1417 = _1415;
        _1416 = test::black_box::<Wrapping<i16>>(move _1417) -> bb433;
    }

    bb433: {
        _1415 = move _1416;
        _1419 = &mut _1415;
        _1420 = Wrapping::<i16>(const -1_i16);
        _1418 = <Wrapping<i16> as RemAssign>::rem_assign(move _1419, move _1420) -> bb434;
    }

    bb434: {
        _1424 = _1415;
        _1423 = test::black_box::<Wrapping<i16>>(move _1424) -> bb435;
    }

    bb435: {
        _1422 = &_1423;
        _1426 = Wrapping::<i16>(const 0_i16);
        _1425 = &_1426;
        _1421 = (move _1422, move _1425);
        _1427 = (_1421.0: &std::num::Wrapping<i16>);
        _1428 = (_1421.1: &std::num::Wrapping<i16>);
        _1430 = <Wrapping<i16> as PartialEq>::eq(_1427, _1428) -> bb436;
    }

    bb436: {
        _1429 = Not(move _1430);
        switchInt(move _1429) -> [0: bb438, otherwise: bb437];
    }

    bb437: {
        _1431 = core::panicking::AssertKind::Eq;
        _1433 = Option::<Arguments<'_>>::None;
        _1432 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _1431, _1427, _1428, move _1433);
    }

    bb438: {
        _1434 = Wrapping::<i16>(const _);
        _1436 = _1434;
        _1435 = test::black_box::<Wrapping<i16>>(move _1436) -> bb439;
    }

    bb439: {
        _1434 = move _1435;
        _1438 = &mut _1434;
        _1440 = Wrapping::<i16>(const -1_i16);
        _1439 = &_1440;
        _1437 = <Wrapping<i16> as RemAssign<&Wrapping<i16>>>::rem_assign(move _1438, move _1439) -> bb440;
    }

    bb440: {
        _1444 = _1434;
        _1443 = test::black_box::<Wrapping<i16>>(move _1444) -> bb441;
    }

    bb441: {
        _1442 = &_1443;
        _1446 = Wrapping::<i16>(const 0_i16);
        _1445 = &_1446;
        _1441 = (move _1442, move _1445);
        _1447 = (_1441.0: &std::num::Wrapping<i16>);
        _1448 = (_1441.1: &std::num::Wrapping<i16>);
        _1450 = <Wrapping<i16> as PartialEq>::eq(_1447, _1448) -> bb442;
    }

    bb442: {
        _1449 = Not(move _1450);
        switchInt(move _1449) -> [0: bb444, otherwise: bb443];
    }

    bb443: {
        _1451 = core::panicking::AssertKind::Eq;
        _1453 = Option::<Arguments<'_>>::None;
        _1452 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _1451, _1447, _1448, move _1453);
    }

    bb444: {
        _1454 = Wrapping::<i32>(const _);
        _1456 = _1454;
        _1455 = test::black_box::<Wrapping<i32>>(move _1456) -> bb445;
    }

    bb445: {
        _1454 = move _1455;
        _1458 = &mut _1454;
        _1459 = Wrapping::<i32>(const -1_i32);
        _1457 = <Wrapping<i32> as RemAssign>::rem_assign(move _1458, move _1459) -> bb446;
    }

    bb446: {
        _1463 = _1454;
        _1462 = test::black_box::<Wrapping<i32>>(move _1463) -> bb447;
    }

    bb447: {
        _1461 = &_1462;
        _1465 = Wrapping::<i32>(const 0_i32);
        _1464 = &_1465;
        _1460 = (move _1461, move _1464);
        _1466 = (_1460.0: &std::num::Wrapping<i32>);
        _1467 = (_1460.1: &std::num::Wrapping<i32>);
        _1469 = <Wrapping<i32> as PartialEq>::eq(_1466, _1467) -> bb448;
    }

    bb448: {
        _1468 = Not(move _1469);
        switchInt(move _1468) -> [0: bb450, otherwise: bb449];
    }

    bb449: {
        _1470 = core::panicking::AssertKind::Eq;
        _1472 = Option::<Arguments<'_>>::None;
        _1471 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _1470, _1466, _1467, move _1472);
    }

    bb450: {
        _1473 = Wrapping::<i32>(const _);
        _1475 = _1473;
        _1474 = test::black_box::<Wrapping<i32>>(move _1475) -> bb451;
    }

    bb451: {
        _1473 = move _1474;
        _1477 = &mut _1473;
        _1479 = Wrapping::<i32>(const -1_i32);
        _1478 = &_1479;
        _1476 = <Wrapping<i32> as RemAssign<&Wrapping<i32>>>::rem_assign(move _1477, move _1478) -> bb452;
    }

    bb452: {
        _1483 = _1473;
        _1482 = test::black_box::<Wrapping<i32>>(move _1483) -> bb453;
    }

    bb453: {
        _1481 = &_1482;
        _1485 = Wrapping::<i32>(const 0_i32);
        _1484 = &_1485;
        _1480 = (move _1481, move _1484);
        _1486 = (_1480.0: &std::num::Wrapping<i32>);
        _1487 = (_1480.1: &std::num::Wrapping<i32>);
        _1489 = <Wrapping<i32> as PartialEq>::eq(_1486, _1487) -> bb454;
    }

    bb454: {
        _1488 = Not(move _1489);
        switchInt(move _1488) -> [0: bb456, otherwise: bb455];
    }

    bb455: {
        _1490 = core::panicking::AssertKind::Eq;
        _1492 = Option::<Arguments<'_>>::None;
        _1491 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _1490, _1486, _1487, move _1492);
    }

    bb456: {
        _1493 = Wrapping::<i64>(const _);
        _1495 = _1493;
        _1494 = test::black_box::<Wrapping<i64>>(move _1495) -> bb457;
    }

    bb457: {
        _1493 = move _1494;
        _1497 = &mut _1493;
        _1498 = Wrapping::<i64>(const -1_i64);
        _1496 = <Wrapping<i64> as RemAssign>::rem_assign(move _1497, move _1498) -> bb458;
    }

    bb458: {
        _1502 = _1493;
        _1501 = test::black_box::<Wrapping<i64>>(move _1502) -> bb459;
    }

    bb459: {
        _1500 = &_1501;
        _1504 = Wrapping::<i64>(const 0_i64);
        _1503 = &_1504;
        _1499 = (move _1500, move _1503);
        _1505 = (_1499.0: &std::num::Wrapping<i64>);
        _1506 = (_1499.1: &std::num::Wrapping<i64>);
        _1508 = <Wrapping<i64> as PartialEq>::eq(_1505, _1506) -> bb460;
    }

    bb460: {
        _1507 = Not(move _1508);
        switchInt(move _1507) -> [0: bb462, otherwise: bb461];
    }

    bb461: {
        _1509 = core::panicking::AssertKind::Eq;
        _1511 = Option::<Arguments<'_>>::None;
        _1510 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _1509, _1505, _1506, move _1511);
    }

    bb462: {
        _1512 = Wrapping::<i64>(const _);
        _1514 = _1512;
        _1513 = test::black_box::<Wrapping<i64>>(move _1514) -> bb463;
    }

    bb463: {
        _1512 = move _1513;
        _1516 = &mut _1512;
        _1518 = Wrapping::<i64>(const -1_i64);
        _1517 = &_1518;
        _1515 = <Wrapping<i64> as RemAssign<&Wrapping<i64>>>::rem_assign(move _1516, move _1517) -> bb464;
    }

    bb464: {
        _1522 = _1512;
        _1521 = test::black_box::<Wrapping<i64>>(move _1522) -> bb465;
    }

    bb465: {
        _1520 = &_1521;
        _1524 = Wrapping::<i64>(const 0_i64);
        _1523 = &_1524;
        _1519 = (move _1520, move _1523);
        _1525 = (_1519.0: &std::num::Wrapping<i64>);
        _1526 = (_1519.1: &std::num::Wrapping<i64>);
        _1528 = <Wrapping<i64> as PartialEq>::eq(_1525, _1526) -> bb466;
    }

    bb466: {
        _1527 = Not(move _1528);
        switchInt(move _1527) -> [0: bb468, otherwise: bb467];
    }

    bb467: {
        _1529 = core::panicking::AssertKind::Eq;
        _1531 = Option::<Arguments<'_>>::None;
        _1530 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _1529, _1525, _1526, move _1531);
    }

    bb468: {
        _1532 = Wrapping::<isize>(const _);
        _1534 = _1532;
        _1533 = test::black_box::<Wrapping<isize>>(move _1534) -> bb469;
    }

    bb469: {
        _1532 = move _1533;
        _1536 = &mut _1532;
        _1537 = Wrapping::<isize>(const -1_isize);
        _1535 = <Wrapping<isize> as RemAssign>::rem_assign(move _1536, move _1537) -> bb470;
    }

    bb470: {
        _1541 = _1532;
        _1540 = test::black_box::<Wrapping<isize>>(move _1541) -> bb471;
    }

    bb471: {
        _1539 = &_1540;
        _1543 = Wrapping::<isize>(const 0_isize);
        _1542 = &_1543;
        _1538 = (move _1539, move _1542);
        _1544 = (_1538.0: &std::num::Wrapping<isize>);
        _1545 = (_1538.1: &std::num::Wrapping<isize>);
        _1547 = <Wrapping<isize> as PartialEq>::eq(_1544, _1545) -> bb472;
    }

    bb472: {
        _1546 = Not(move _1547);
        switchInt(move _1546) -> [0: bb474, otherwise: bb473];
    }

    bb473: {
        _1548 = core::panicking::AssertKind::Eq;
        _1550 = Option::<Arguments<'_>>::None;
        _1549 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _1548, _1544, _1545, move _1550);
    }

    bb474: {
        _1551 = Wrapping::<isize>(const _);
        _1553 = _1551;
        _1552 = test::black_box::<Wrapping<isize>>(move _1553) -> bb475;
    }

    bb475: {
        _1551 = move _1552;
        _1555 = &mut _1551;
        _1557 = Wrapping::<isize>(const -1_isize);
        _1556 = &_1557;
        _1554 = <Wrapping<isize> as RemAssign<&Wrapping<isize>>>::rem_assign(move _1555, move _1556) -> bb476;
    }

    bb476: {
        _1561 = _1551;
        _1560 = test::black_box::<Wrapping<isize>>(move _1561) -> bb477;
    }

    bb477: {
        _1559 = &_1560;
        _1563 = Wrapping::<isize>(const 0_isize);
        _1562 = &_1563;
        _1558 = (move _1559, move _1562);
        _1564 = (_1558.0: &std::num::Wrapping<isize>);
        _1565 = (_1558.1: &std::num::Wrapping<isize>);
        _1567 = <Wrapping<isize> as PartialEq>::eq(_1564, _1565) -> bb478;
    }

    bb478: {
        _1566 = Not(move _1567);
        switchInt(move _1566) -> [0: bb480, otherwise: bb479];
    }

    bb479: {
        _1568 = core::panicking::AssertKind::Eq;
        _1570 = Option::<Arguments<'_>>::None;
        _1569 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _1568, _1564, _1565, move _1570);
    }

    bb480: {
        _1571 = Wrapping::<i8>(const 42_i8);
        _1573 = _1571;
        _1572 = test::black_box::<Wrapping<i8>>(move _1573) -> bb481;
    }

    bb481: {
        _1571 = move _1572;
        _1575 = &mut _1571;
        _1576 = Wrapping::<i8>(const 38_i8);
        _1574 = <Wrapping<i8> as BitXorAssign>::bitxor_assign(move _1575, move _1576) -> bb482;
    }

    bb482: {
        _1580 = _1571;
        _1579 = test::black_box::<Wrapping<i8>>(move _1580) -> bb483;
    }

    bb483: {
        _1578 = &_1579;
        _1582 = Wrapping::<i8>(const 12_i8);
        _1581 = &_1582;
        _1577 = (move _1578, move _1581);
        _1583 = (_1577.0: &std::num::Wrapping<i8>);
        _1584 = (_1577.1: &std::num::Wrapping<i8>);
        _1586 = <Wrapping<i8> as PartialEq>::eq(_1583, _1584) -> bb484;
    }

    bb484: {
        _1585 = Not(move _1586);
        switchInt(move _1585) -> [0: bb486, otherwise: bb485];
    }

    bb485: {
        _1587 = core::panicking::AssertKind::Eq;
        _1589 = Option::<Arguments<'_>>::None;
        _1588 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _1587, _1583, _1584, move _1589);
    }

    bb486: {
        _1590 = Wrapping::<i8>(const 42_i8);
        _1592 = _1590;
        _1591 = test::black_box::<Wrapping<i8>>(move _1592) -> bb487;
    }

    bb487: {
        _1590 = move _1591;
        _1594 = &mut _1590;
        _1596 = Wrapping::<i8>(const 38_i8);
        _1595 = &_1596;
        _1593 = <Wrapping<i8> as BitXorAssign<&Wrapping<i8>>>::bitxor_assign(move _1594, move _1595) -> bb488;
    }

    bb488: {
        _1600 = _1590;
        _1599 = test::black_box::<Wrapping<i8>>(move _1600) -> bb489;
    }

    bb489: {
        _1598 = &_1599;
        _1602 = Wrapping::<i8>(const 12_i8);
        _1601 = &_1602;
        _1597 = (move _1598, move _1601);
        _1603 = (_1597.0: &std::num::Wrapping<i8>);
        _1604 = (_1597.1: &std::num::Wrapping<i8>);
        _1606 = <Wrapping<i8> as PartialEq>::eq(_1603, _1604) -> bb490;
    }

    bb490: {
        _1605 = Not(move _1606);
        switchInt(move _1605) -> [0: bb492, otherwise: bb491];
    }

    bb491: {
        _1607 = core::panicking::AssertKind::Eq;
        _1609 = Option::<Arguments<'_>>::None;
        _1608 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _1607, _1603, _1604, move _1609);
    }

    bb492: {
        _1610 = Wrapping::<i16>(const 42_i16);
        _1612 = _1610;
        _1611 = test::black_box::<Wrapping<i16>>(move _1612) -> bb493;
    }

    bb493: {
        _1610 = move _1611;
        _1614 = &mut _1610;
        _1615 = Wrapping::<i16>(const 38_i16);
        _1613 = <Wrapping<i16> as BitXorAssign>::bitxor_assign(move _1614, move _1615) -> bb494;
    }

    bb494: {
        _1619 = _1610;
        _1618 = test::black_box::<Wrapping<i16>>(move _1619) -> bb495;
    }

    bb495: {
        _1617 = &_1618;
        _1621 = Wrapping::<i16>(const 12_i16);
        _1620 = &_1621;
        _1616 = (move _1617, move _1620);
        _1622 = (_1616.0: &std::num::Wrapping<i16>);
        _1623 = (_1616.1: &std::num::Wrapping<i16>);
        _1625 = <Wrapping<i16> as PartialEq>::eq(_1622, _1623) -> bb496;
    }

    bb496: {
        _1624 = Not(move _1625);
        switchInt(move _1624) -> [0: bb498, otherwise: bb497];
    }

    bb497: {
        _1626 = core::panicking::AssertKind::Eq;
        _1628 = Option::<Arguments<'_>>::None;
        _1627 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _1626, _1622, _1623, move _1628);
    }

    bb498: {
        _1629 = Wrapping::<i16>(const 42_i16);
        _1631 = _1629;
        _1630 = test::black_box::<Wrapping<i16>>(move _1631) -> bb499;
    }

    bb499: {
        _1629 = move _1630;
        _1633 = &mut _1629;
        _1635 = Wrapping::<i16>(const 38_i16);
        _1634 = &_1635;
        _1632 = <Wrapping<i16> as BitXorAssign<&Wrapping<i16>>>::bitxor_assign(move _1633, move _1634) -> bb500;
    }

    bb500: {
        _1639 = _1629;
        _1638 = test::black_box::<Wrapping<i16>>(move _1639) -> bb501;
    }

    bb501: {
        _1637 = &_1638;
        _1641 = Wrapping::<i16>(const 12_i16);
        _1640 = &_1641;
        _1636 = (move _1637, move _1640);
        _1642 = (_1636.0: &std::num::Wrapping<i16>);
        _1643 = (_1636.1: &std::num::Wrapping<i16>);
        _1645 = <Wrapping<i16> as PartialEq>::eq(_1642, _1643) -> bb502;
    }

    bb502: {
        _1644 = Not(move _1645);
        switchInt(move _1644) -> [0: bb504, otherwise: bb503];
    }

    bb503: {
        _1646 = core::panicking::AssertKind::Eq;
        _1648 = Option::<Arguments<'_>>::None;
        _1647 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _1646, _1642, _1643, move _1648);
    }

    bb504: {
        _1649 = Wrapping::<i32>(const 42_i32);
        _1651 = _1649;
        _1650 = test::black_box::<Wrapping<i32>>(move _1651) -> bb505;
    }

    bb505: {
        _1649 = move _1650;
        _1653 = &mut _1649;
        _1654 = Wrapping::<i32>(const 38_i32);
        _1652 = <Wrapping<i32> as BitXorAssign>::bitxor_assign(move _1653, move _1654) -> bb506;
    }

    bb506: {
        _1658 = _1649;
        _1657 = test::black_box::<Wrapping<i32>>(move _1658) -> bb507;
    }

    bb507: {
        _1656 = &_1657;
        _1660 = Wrapping::<i32>(const 12_i32);
        _1659 = &_1660;
        _1655 = (move _1656, move _1659);
        _1661 = (_1655.0: &std::num::Wrapping<i32>);
        _1662 = (_1655.1: &std::num::Wrapping<i32>);
        _1664 = <Wrapping<i32> as PartialEq>::eq(_1661, _1662) -> bb508;
    }

    bb508: {
        _1663 = Not(move _1664);
        switchInt(move _1663) -> [0: bb510, otherwise: bb509];
    }

    bb509: {
        _1665 = core::panicking::AssertKind::Eq;
        _1667 = Option::<Arguments<'_>>::None;
        _1666 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _1665, _1661, _1662, move _1667);
    }

    bb510: {
        _1668 = Wrapping::<i32>(const 42_i32);
        _1670 = _1668;
        _1669 = test::black_box::<Wrapping<i32>>(move _1670) -> bb511;
    }

    bb511: {
        _1668 = move _1669;
        _1672 = &mut _1668;
        _1674 = Wrapping::<i32>(const 38_i32);
        _1673 = &_1674;
        _1671 = <Wrapping<i32> as BitXorAssign<&Wrapping<i32>>>::bitxor_assign(move _1672, move _1673) -> bb512;
    }

    bb512: {
        _1678 = _1668;
        _1677 = test::black_box::<Wrapping<i32>>(move _1678) -> bb513;
    }

    bb513: {
        _1676 = &_1677;
        _1680 = Wrapping::<i32>(const 12_i32);
        _1679 = &_1680;
        _1675 = (move _1676, move _1679);
        _1681 = (_1675.0: &std::num::Wrapping<i32>);
        _1682 = (_1675.1: &std::num::Wrapping<i32>);
        _1684 = <Wrapping<i32> as PartialEq>::eq(_1681, _1682) -> bb514;
    }

    bb514: {
        _1683 = Not(move _1684);
        switchInt(move _1683) -> [0: bb516, otherwise: bb515];
    }

    bb515: {
        _1685 = core::panicking::AssertKind::Eq;
        _1687 = Option::<Arguments<'_>>::None;
        _1686 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _1685, _1681, _1682, move _1687);
    }

    bb516: {
        _1688 = Wrapping::<i64>(const 42_i64);
        _1690 = _1688;
        _1689 = test::black_box::<Wrapping<i64>>(move _1690) -> bb517;
    }

    bb517: {
        _1688 = move _1689;
        _1692 = &mut _1688;
        _1693 = Wrapping::<i64>(const 38_i64);
        _1691 = <Wrapping<i64> as BitXorAssign>::bitxor_assign(move _1692, move _1693) -> bb518;
    }

    bb518: {
        _1697 = _1688;
        _1696 = test::black_box::<Wrapping<i64>>(move _1697) -> bb519;
    }

    bb519: {
        _1695 = &_1696;
        _1699 = Wrapping::<i64>(const 12_i64);
        _1698 = &_1699;
        _1694 = (move _1695, move _1698);
        _1700 = (_1694.0: &std::num::Wrapping<i64>);
        _1701 = (_1694.1: &std::num::Wrapping<i64>);
        _1703 = <Wrapping<i64> as PartialEq>::eq(_1700, _1701) -> bb520;
    }

    bb520: {
        _1702 = Not(move _1703);
        switchInt(move _1702) -> [0: bb522, otherwise: bb521];
    }

    bb521: {
        _1704 = core::panicking::AssertKind::Eq;
        _1706 = Option::<Arguments<'_>>::None;
        _1705 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _1704, _1700, _1701, move _1706);
    }

    bb522: {
        _1707 = Wrapping::<i64>(const 42_i64);
        _1709 = _1707;
        _1708 = test::black_box::<Wrapping<i64>>(move _1709) -> bb523;
    }

    bb523: {
        _1707 = move _1708;
        _1711 = &mut _1707;
        _1713 = Wrapping::<i64>(const 38_i64);
        _1712 = &_1713;
        _1710 = <Wrapping<i64> as BitXorAssign<&Wrapping<i64>>>::bitxor_assign(move _1711, move _1712) -> bb524;
    }

    bb524: {
        _1717 = _1707;
        _1716 = test::black_box::<Wrapping<i64>>(move _1717) -> bb525;
    }

    bb525: {
        _1715 = &_1716;
        _1719 = Wrapping::<i64>(const 12_i64);
        _1718 = &_1719;
        _1714 = (move _1715, move _1718);
        _1720 = (_1714.0: &std::num::Wrapping<i64>);
        _1721 = (_1714.1: &std::num::Wrapping<i64>);
        _1723 = <Wrapping<i64> as PartialEq>::eq(_1720, _1721) -> bb526;
    }

    bb526: {
        _1722 = Not(move _1723);
        switchInt(move _1722) -> [0: bb528, otherwise: bb527];
    }

    bb527: {
        _1724 = core::panicking::AssertKind::Eq;
        _1726 = Option::<Arguments<'_>>::None;
        _1725 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _1724, _1720, _1721, move _1726);
    }

    bb528: {
        _1727 = Wrapping::<isize>(const 42_isize);
        _1729 = _1727;
        _1728 = test::black_box::<Wrapping<isize>>(move _1729) -> bb529;
    }

    bb529: {
        _1727 = move _1728;
        _1731 = &mut _1727;
        _1732 = Wrapping::<isize>(const 38_isize);
        _1730 = <Wrapping<isize> as BitXorAssign>::bitxor_assign(move _1731, move _1732) -> bb530;
    }

    bb530: {
        _1736 = _1727;
        _1735 = test::black_box::<Wrapping<isize>>(move _1736) -> bb531;
    }

    bb531: {
        _1734 = &_1735;
        _1738 = Wrapping::<isize>(const 12_isize);
        _1737 = &_1738;
        _1733 = (move _1734, move _1737);
        _1739 = (_1733.0: &std::num::Wrapping<isize>);
        _1740 = (_1733.1: &std::num::Wrapping<isize>);
        _1742 = <Wrapping<isize> as PartialEq>::eq(_1739, _1740) -> bb532;
    }

    bb532: {
        _1741 = Not(move _1742);
        switchInt(move _1741) -> [0: bb534, otherwise: bb533];
    }

    bb533: {
        _1743 = core::panicking::AssertKind::Eq;
        _1745 = Option::<Arguments<'_>>::None;
        _1744 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _1743, _1739, _1740, move _1745);
    }

    bb534: {
        _1746 = Wrapping::<isize>(const 42_isize);
        _1748 = _1746;
        _1747 = test::black_box::<Wrapping<isize>>(move _1748) -> bb535;
    }

    bb535: {
        _1746 = move _1747;
        _1750 = &mut _1746;
        _1752 = Wrapping::<isize>(const 38_isize);
        _1751 = &_1752;
        _1749 = <Wrapping<isize> as BitXorAssign<&Wrapping<isize>>>::bitxor_assign(move _1750, move _1751) -> bb536;
    }

    bb536: {
        _1756 = _1746;
        _1755 = test::black_box::<Wrapping<isize>>(move _1756) -> bb537;
    }

    bb537: {
        _1754 = &_1755;
        _1758 = Wrapping::<isize>(const 12_isize);
        _1757 = &_1758;
        _1753 = (move _1754, move _1757);
        _1759 = (_1753.0: &std::num::Wrapping<isize>);
        _1760 = (_1753.1: &std::num::Wrapping<isize>);
        _1762 = <Wrapping<isize> as PartialEq>::eq(_1759, _1760) -> bb538;
    }

    bb538: {
        _1761 = Not(move _1762);
        switchInt(move _1761) -> [0: bb540, otherwise: bb539];
    }

    bb539: {
        _1763 = core::panicking::AssertKind::Eq;
        _1765 = Option::<Arguments<'_>>::None;
        _1764 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _1763, _1759, _1760, move _1765);
    }

    bb540: {
        _1766 = Wrapping::<u8>(const 42_u8);
        _1768 = _1766;
        _1767 = test::black_box::<Wrapping<u8>>(move _1768) -> bb541;
    }

    bb541: {
        _1766 = move _1767;
        _1770 = &mut _1766;
        _1771 = Wrapping::<u8>(const 38_u8);
        _1769 = <Wrapping<u8> as BitXorAssign>::bitxor_assign(move _1770, move _1771) -> bb542;
    }

    bb542: {
        _1775 = _1766;
        _1774 = test::black_box::<Wrapping<u8>>(move _1775) -> bb543;
    }

    bb543: {
        _1773 = &_1774;
        _1777 = Wrapping::<u8>(const 12_u8);
        _1776 = &_1777;
        _1772 = (move _1773, move _1776);
        _1778 = (_1772.0: &std::num::Wrapping<u8>);
        _1779 = (_1772.1: &std::num::Wrapping<u8>);
        _1781 = <Wrapping<u8> as PartialEq>::eq(_1778, _1779) -> bb544;
    }

    bb544: {
        _1780 = Not(move _1781);
        switchInt(move _1780) -> [0: bb546, otherwise: bb545];
    }

    bb545: {
        _1782 = core::panicking::AssertKind::Eq;
        _1784 = Option::<Arguments<'_>>::None;
        _1783 = core::panicking::assert_failed::<Wrapping<u8>, Wrapping<u8>>(move _1782, _1778, _1779, move _1784);
    }

    bb546: {
        _1785 = Wrapping::<u8>(const 42_u8);
        _1787 = _1785;
        _1786 = test::black_box::<Wrapping<u8>>(move _1787) -> bb547;
    }

    bb547: {
        _1785 = move _1786;
        _1789 = &mut _1785;
        _1791 = Wrapping::<u8>(const 38_u8);
        _1790 = &_1791;
        _1788 = <Wrapping<u8> as BitXorAssign<&Wrapping<u8>>>::bitxor_assign(move _1789, move _1790) -> bb548;
    }

    bb548: {
        _1795 = _1785;
        _1794 = test::black_box::<Wrapping<u8>>(move _1795) -> bb549;
    }

    bb549: {
        _1793 = &_1794;
        _1797 = Wrapping::<u8>(const 12_u8);
        _1796 = &_1797;
        _1792 = (move _1793, move _1796);
        _1798 = (_1792.0: &std::num::Wrapping<u8>);
        _1799 = (_1792.1: &std::num::Wrapping<u8>);
        _1801 = <Wrapping<u8> as PartialEq>::eq(_1798, _1799) -> bb550;
    }

    bb550: {
        _1800 = Not(move _1801);
        switchInt(move _1800) -> [0: bb552, otherwise: bb551];
    }

    bb551: {
        _1802 = core::panicking::AssertKind::Eq;
        _1804 = Option::<Arguments<'_>>::None;
        _1803 = core::panicking::assert_failed::<Wrapping<u8>, Wrapping<u8>>(move _1802, _1798, _1799, move _1804);
    }

    bb552: {
        _1805 = Wrapping::<u16>(const 42_u16);
        _1807 = _1805;
        _1806 = test::black_box::<Wrapping<u16>>(move _1807) -> bb553;
    }

    bb553: {
        _1805 = move _1806;
        _1809 = &mut _1805;
        _1810 = Wrapping::<u16>(const 38_u16);
        _1808 = <Wrapping<u16> as BitXorAssign>::bitxor_assign(move _1809, move _1810) -> bb554;
    }

    bb554: {
        _1814 = _1805;
        _1813 = test::black_box::<Wrapping<u16>>(move _1814) -> bb555;
    }

    bb555: {
        _1812 = &_1813;
        _1816 = Wrapping::<u16>(const 12_u16);
        _1815 = &_1816;
        _1811 = (move _1812, move _1815);
        _1817 = (_1811.0: &std::num::Wrapping<u16>);
        _1818 = (_1811.1: &std::num::Wrapping<u16>);
        _1820 = <Wrapping<u16> as PartialEq>::eq(_1817, _1818) -> bb556;
    }

    bb556: {
        _1819 = Not(move _1820);
        switchInt(move _1819) -> [0: bb558, otherwise: bb557];
    }

    bb557: {
        _1821 = core::panicking::AssertKind::Eq;
        _1823 = Option::<Arguments<'_>>::None;
        _1822 = core::panicking::assert_failed::<Wrapping<u16>, Wrapping<u16>>(move _1821, _1817, _1818, move _1823);
    }

    bb558: {
        _1824 = Wrapping::<u16>(const 42_u16);
        _1826 = _1824;
        _1825 = test::black_box::<Wrapping<u16>>(move _1826) -> bb559;
    }

    bb559: {
        _1824 = move _1825;
        _1828 = &mut _1824;
        _1830 = Wrapping::<u16>(const 38_u16);
        _1829 = &_1830;
        _1827 = <Wrapping<u16> as BitXorAssign<&Wrapping<u16>>>::bitxor_assign(move _1828, move _1829) -> bb560;
    }

    bb560: {
        _1834 = _1824;
        _1833 = test::black_box::<Wrapping<u16>>(move _1834) -> bb561;
    }

    bb561: {
        _1832 = &_1833;
        _1836 = Wrapping::<u16>(const 12_u16);
        _1835 = &_1836;
        _1831 = (move _1832, move _1835);
        _1837 = (_1831.0: &std::num::Wrapping<u16>);
        _1838 = (_1831.1: &std::num::Wrapping<u16>);
        _1840 = <Wrapping<u16> as PartialEq>::eq(_1837, _1838) -> bb562;
    }

    bb562: {
        _1839 = Not(move _1840);
        switchInt(move _1839) -> [0: bb564, otherwise: bb563];
    }

    bb563: {
        _1841 = core::panicking::AssertKind::Eq;
        _1843 = Option::<Arguments<'_>>::None;
        _1842 = core::panicking::assert_failed::<Wrapping<u16>, Wrapping<u16>>(move _1841, _1837, _1838, move _1843);
    }

    bb564: {
        _1844 = Wrapping::<u32>(const 42_u32);
        _1846 = _1844;
        _1845 = test::black_box::<Wrapping<u32>>(move _1846) -> bb565;
    }

    bb565: {
        _1844 = move _1845;
        _1848 = &mut _1844;
        _1849 = Wrapping::<u32>(const 38_u32);
        _1847 = <Wrapping<u32> as BitXorAssign>::bitxor_assign(move _1848, move _1849) -> bb566;
    }

    bb566: {
        _1853 = _1844;
        _1852 = test::black_box::<Wrapping<u32>>(move _1853) -> bb567;
    }

    bb567: {
        _1851 = &_1852;
        _1855 = Wrapping::<u32>(const 12_u32);
        _1854 = &_1855;
        _1850 = (move _1851, move _1854);
        _1856 = (_1850.0: &std::num::Wrapping<u32>);
        _1857 = (_1850.1: &std::num::Wrapping<u32>);
        _1859 = <Wrapping<u32> as PartialEq>::eq(_1856, _1857) -> bb568;
    }

    bb568: {
        _1858 = Not(move _1859);
        switchInt(move _1858) -> [0: bb570, otherwise: bb569];
    }

    bb569: {
        _1860 = core::panicking::AssertKind::Eq;
        _1862 = Option::<Arguments<'_>>::None;
        _1861 = core::panicking::assert_failed::<Wrapping<u32>, Wrapping<u32>>(move _1860, _1856, _1857, move _1862);
    }

    bb570: {
        _1863 = Wrapping::<u32>(const 42_u32);
        _1865 = _1863;
        _1864 = test::black_box::<Wrapping<u32>>(move _1865) -> bb571;
    }

    bb571: {
        _1863 = move _1864;
        _1867 = &mut _1863;
        _1869 = Wrapping::<u32>(const 38_u32);
        _1868 = &_1869;
        _1866 = <Wrapping<u32> as BitXorAssign<&Wrapping<u32>>>::bitxor_assign(move _1867, move _1868) -> bb572;
    }

    bb572: {
        _1873 = _1863;
        _1872 = test::black_box::<Wrapping<u32>>(move _1873) -> bb573;
    }

    bb573: {
        _1871 = &_1872;
        _1875 = Wrapping::<u32>(const 12_u32);
        _1874 = &_1875;
        _1870 = (move _1871, move _1874);
        _1876 = (_1870.0: &std::num::Wrapping<u32>);
        _1877 = (_1870.1: &std::num::Wrapping<u32>);
        _1879 = <Wrapping<u32> as PartialEq>::eq(_1876, _1877) -> bb574;
    }

    bb574: {
        _1878 = Not(move _1879);
        switchInt(move _1878) -> [0: bb576, otherwise: bb575];
    }

    bb575: {
        _1880 = core::panicking::AssertKind::Eq;
        _1882 = Option::<Arguments<'_>>::None;
        _1881 = core::panicking::assert_failed::<Wrapping<u32>, Wrapping<u32>>(move _1880, _1876, _1877, move _1882);
    }

    bb576: {
        _1883 = Wrapping::<u64>(const 42_u64);
        _1885 = _1883;
        _1884 = test::black_box::<Wrapping<u64>>(move _1885) -> bb577;
    }

    bb577: {
        _1883 = move _1884;
        _1887 = &mut _1883;
        _1888 = Wrapping::<u64>(const 38_u64);
        _1886 = <Wrapping<u64> as BitXorAssign>::bitxor_assign(move _1887, move _1888) -> bb578;
    }

    bb578: {
        _1892 = _1883;
        _1891 = test::black_box::<Wrapping<u64>>(move _1892) -> bb579;
    }

    bb579: {
        _1890 = &_1891;
        _1894 = Wrapping::<u64>(const 12_u64);
        _1893 = &_1894;
        _1889 = (move _1890, move _1893);
        _1895 = (_1889.0: &std::num::Wrapping<u64>);
        _1896 = (_1889.1: &std::num::Wrapping<u64>);
        _1898 = <Wrapping<u64> as PartialEq>::eq(_1895, _1896) -> bb580;
    }

    bb580: {
        _1897 = Not(move _1898);
        switchInt(move _1897) -> [0: bb582, otherwise: bb581];
    }

    bb581: {
        _1899 = core::panicking::AssertKind::Eq;
        _1901 = Option::<Arguments<'_>>::None;
        _1900 = core::panicking::assert_failed::<Wrapping<u64>, Wrapping<u64>>(move _1899, _1895, _1896, move _1901);
    }

    bb582: {
        _1902 = Wrapping::<u64>(const 42_u64);
        _1904 = _1902;
        _1903 = test::black_box::<Wrapping<u64>>(move _1904) -> bb583;
    }

    bb583: {
        _1902 = move _1903;
        _1906 = &mut _1902;
        _1908 = Wrapping::<u64>(const 38_u64);
        _1907 = &_1908;
        _1905 = <Wrapping<u64> as BitXorAssign<&Wrapping<u64>>>::bitxor_assign(move _1906, move _1907) -> bb584;
    }

    bb584: {
        _1912 = _1902;
        _1911 = test::black_box::<Wrapping<u64>>(move _1912) -> bb585;
    }

    bb585: {
        _1910 = &_1911;
        _1914 = Wrapping::<u64>(const 12_u64);
        _1913 = &_1914;
        _1909 = (move _1910, move _1913);
        _1915 = (_1909.0: &std::num::Wrapping<u64>);
        _1916 = (_1909.1: &std::num::Wrapping<u64>);
        _1918 = <Wrapping<u64> as PartialEq>::eq(_1915, _1916) -> bb586;
    }

    bb586: {
        _1917 = Not(move _1918);
        switchInt(move _1917) -> [0: bb588, otherwise: bb587];
    }

    bb587: {
        _1919 = core::panicking::AssertKind::Eq;
        _1921 = Option::<Arguments<'_>>::None;
        _1920 = core::panicking::assert_failed::<Wrapping<u64>, Wrapping<u64>>(move _1919, _1915, _1916, move _1921);
    }

    bb588: {
        _1922 = Wrapping::<usize>(const 42_usize);
        _1924 = _1922;
        _1923 = test::black_box::<Wrapping<usize>>(move _1924) -> bb589;
    }

    bb589: {
        _1922 = move _1923;
        _1926 = &mut _1922;
        _1927 = Wrapping::<usize>(const 38_usize);
        _1925 = <Wrapping<usize> as BitXorAssign>::bitxor_assign(move _1926, move _1927) -> bb590;
    }

    bb590: {
        _1931 = _1922;
        _1930 = test::black_box::<Wrapping<usize>>(move _1931) -> bb591;
    }

    bb591: {
        _1929 = &_1930;
        _1933 = Wrapping::<usize>(const 12_usize);
        _1932 = &_1933;
        _1928 = (move _1929, move _1932);
        _1934 = (_1928.0: &std::num::Wrapping<usize>);
        _1935 = (_1928.1: &std::num::Wrapping<usize>);
        _1937 = <Wrapping<usize> as PartialEq>::eq(_1934, _1935) -> bb592;
    }

    bb592: {
        _1936 = Not(move _1937);
        switchInt(move _1936) -> [0: bb594, otherwise: bb593];
    }

    bb593: {
        _1938 = core::panicking::AssertKind::Eq;
        _1940 = Option::<Arguments<'_>>::None;
        _1939 = core::panicking::assert_failed::<Wrapping<usize>, Wrapping<usize>>(move _1938, _1934, _1935, move _1940);
    }

    bb594: {
        _1941 = Wrapping::<usize>(const 42_usize);
        _1943 = _1941;
        _1942 = test::black_box::<Wrapping<usize>>(move _1943) -> bb595;
    }

    bb595: {
        _1941 = move _1942;
        _1945 = &mut _1941;
        _1947 = Wrapping::<usize>(const 38_usize);
        _1946 = &_1947;
        _1944 = <Wrapping<usize> as BitXorAssign<&Wrapping<usize>>>::bitxor_assign(move _1945, move _1946) -> bb596;
    }

    bb596: {
        _1951 = _1941;
        _1950 = test::black_box::<Wrapping<usize>>(move _1951) -> bb597;
    }

    bb597: {
        _1949 = &_1950;
        _1953 = Wrapping::<usize>(const 12_usize);
        _1952 = &_1953;
        _1948 = (move _1949, move _1952);
        _1954 = (_1948.0: &std::num::Wrapping<usize>);
        _1955 = (_1948.1: &std::num::Wrapping<usize>);
        _1957 = <Wrapping<usize> as PartialEq>::eq(_1954, _1955) -> bb598;
    }

    bb598: {
        _1956 = Not(move _1957);
        switchInt(move _1956) -> [0: bb600, otherwise: bb599];
    }

    bb599: {
        _1958 = core::panicking::AssertKind::Eq;
        _1960 = Option::<Arguments<'_>>::None;
        _1959 = core::panicking::assert_failed::<Wrapping<usize>, Wrapping<usize>>(move _1958, _1954, _1955, move _1960);
    }

    bb600: {
        _1961 = Wrapping::<i8>(const 42_i8);
        _1963 = _1961;
        _1962 = test::black_box::<Wrapping<i8>>(move _1963) -> bb601;
    }

    bb601: {
        _1961 = move _1962;
        _1965 = &mut _1961;
        _1966 = Wrapping::<i8>(const 38_i8);
        _1964 = <Wrapping<i8> as BitOrAssign>::bitor_assign(move _1965, move _1966) -> bb602;
    }

    bb602: {
        _1970 = _1961;
        _1969 = test::black_box::<Wrapping<i8>>(move _1970) -> bb603;
    }

    bb603: {
        _1968 = &_1969;
        _1972 = Wrapping::<i8>(const 46_i8);
        _1971 = &_1972;
        _1967 = (move _1968, move _1971);
        _1973 = (_1967.0: &std::num::Wrapping<i8>);
        _1974 = (_1967.1: &std::num::Wrapping<i8>);
        _1976 = <Wrapping<i8> as PartialEq>::eq(_1973, _1974) -> bb604;
    }

    bb604: {
        _1975 = Not(move _1976);
        switchInt(move _1975) -> [0: bb606, otherwise: bb605];
    }

    bb605: {
        _1977 = core::panicking::AssertKind::Eq;
        _1979 = Option::<Arguments<'_>>::None;
        _1978 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _1977, _1973, _1974, move _1979);
    }

    bb606: {
        _1980 = Wrapping::<i8>(const 42_i8);
        _1982 = _1980;
        _1981 = test::black_box::<Wrapping<i8>>(move _1982) -> bb607;
    }

    bb607: {
        _1980 = move _1981;
        _1984 = &mut _1980;
        _1986 = Wrapping::<i8>(const 38_i8);
        _1985 = &_1986;
        _1983 = <Wrapping<i8> as BitOrAssign<&Wrapping<i8>>>::bitor_assign(move _1984, move _1985) -> bb608;
    }

    bb608: {
        _1990 = _1980;
        _1989 = test::black_box::<Wrapping<i8>>(move _1990) -> bb609;
    }

    bb609: {
        _1988 = &_1989;
        _1992 = Wrapping::<i8>(const 46_i8);
        _1991 = &_1992;
        _1987 = (move _1988, move _1991);
        _1993 = (_1987.0: &std::num::Wrapping<i8>);
        _1994 = (_1987.1: &std::num::Wrapping<i8>);
        _1996 = <Wrapping<i8> as PartialEq>::eq(_1993, _1994) -> bb610;
    }

    bb610: {
        _1995 = Not(move _1996);
        switchInt(move _1995) -> [0: bb612, otherwise: bb611];
    }

    bb611: {
        _1997 = core::panicking::AssertKind::Eq;
        _1999 = Option::<Arguments<'_>>::None;
        _1998 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _1997, _1993, _1994, move _1999);
    }

    bb612: {
        _2000 = Wrapping::<i16>(const 42_i16);
        _2002 = _2000;
        _2001 = test::black_box::<Wrapping<i16>>(move _2002) -> bb613;
    }

    bb613: {
        _2000 = move _2001;
        _2004 = &mut _2000;
        _2005 = Wrapping::<i16>(const 38_i16);
        _2003 = <Wrapping<i16> as BitOrAssign>::bitor_assign(move _2004, move _2005) -> bb614;
    }

    bb614: {
        _2009 = _2000;
        _2008 = test::black_box::<Wrapping<i16>>(move _2009) -> bb615;
    }

    bb615: {
        _2007 = &_2008;
        _2011 = Wrapping::<i16>(const 46_i16);
        _2010 = &_2011;
        _2006 = (move _2007, move _2010);
        _2012 = (_2006.0: &std::num::Wrapping<i16>);
        _2013 = (_2006.1: &std::num::Wrapping<i16>);
        _2015 = <Wrapping<i16> as PartialEq>::eq(_2012, _2013) -> bb616;
    }

    bb616: {
        _2014 = Not(move _2015);
        switchInt(move _2014) -> [0: bb618, otherwise: bb617];
    }

    bb617: {
        _2016 = core::panicking::AssertKind::Eq;
        _2018 = Option::<Arguments<'_>>::None;
        _2017 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _2016, _2012, _2013, move _2018);
    }

    bb618: {
        _2019 = Wrapping::<i16>(const 42_i16);
        _2021 = _2019;
        _2020 = test::black_box::<Wrapping<i16>>(move _2021) -> bb619;
    }

    bb619: {
        _2019 = move _2020;
        _2023 = &mut _2019;
        _2025 = Wrapping::<i16>(const 38_i16);
        _2024 = &_2025;
        _2022 = <Wrapping<i16> as BitOrAssign<&Wrapping<i16>>>::bitor_assign(move _2023, move _2024) -> bb620;
    }

    bb620: {
        _2029 = _2019;
        _2028 = test::black_box::<Wrapping<i16>>(move _2029) -> bb621;
    }

    bb621: {
        _2027 = &_2028;
        _2031 = Wrapping::<i16>(const 46_i16);
        _2030 = &_2031;
        _2026 = (move _2027, move _2030);
        _2032 = (_2026.0: &std::num::Wrapping<i16>);
        _2033 = (_2026.1: &std::num::Wrapping<i16>);
        _2035 = <Wrapping<i16> as PartialEq>::eq(_2032, _2033) -> bb622;
    }

    bb622: {
        _2034 = Not(move _2035);
        switchInt(move _2034) -> [0: bb624, otherwise: bb623];
    }

    bb623: {
        _2036 = core::panicking::AssertKind::Eq;
        _2038 = Option::<Arguments<'_>>::None;
        _2037 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _2036, _2032, _2033, move _2038);
    }

    bb624: {
        _2039 = Wrapping::<i32>(const 42_i32);
        _2041 = _2039;
        _2040 = test::black_box::<Wrapping<i32>>(move _2041) -> bb625;
    }

    bb625: {
        _2039 = move _2040;
        _2043 = &mut _2039;
        _2044 = Wrapping::<i32>(const 38_i32);
        _2042 = <Wrapping<i32> as BitOrAssign>::bitor_assign(move _2043, move _2044) -> bb626;
    }

    bb626: {
        _2048 = _2039;
        _2047 = test::black_box::<Wrapping<i32>>(move _2048) -> bb627;
    }

    bb627: {
        _2046 = &_2047;
        _2050 = Wrapping::<i32>(const 46_i32);
        _2049 = &_2050;
        _2045 = (move _2046, move _2049);
        _2051 = (_2045.0: &std::num::Wrapping<i32>);
        _2052 = (_2045.1: &std::num::Wrapping<i32>);
        _2054 = <Wrapping<i32> as PartialEq>::eq(_2051, _2052) -> bb628;
    }

    bb628: {
        _2053 = Not(move _2054);
        switchInt(move _2053) -> [0: bb630, otherwise: bb629];
    }

    bb629: {
        _2055 = core::panicking::AssertKind::Eq;
        _2057 = Option::<Arguments<'_>>::None;
        _2056 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _2055, _2051, _2052, move _2057);
    }

    bb630: {
        _2058 = Wrapping::<i32>(const 42_i32);
        _2060 = _2058;
        _2059 = test::black_box::<Wrapping<i32>>(move _2060) -> bb631;
    }

    bb631: {
        _2058 = move _2059;
        _2062 = &mut _2058;
        _2064 = Wrapping::<i32>(const 38_i32);
        _2063 = &_2064;
        _2061 = <Wrapping<i32> as BitOrAssign<&Wrapping<i32>>>::bitor_assign(move _2062, move _2063) -> bb632;
    }

    bb632: {
        _2068 = _2058;
        _2067 = test::black_box::<Wrapping<i32>>(move _2068) -> bb633;
    }

    bb633: {
        _2066 = &_2067;
        _2070 = Wrapping::<i32>(const 46_i32);
        _2069 = &_2070;
        _2065 = (move _2066, move _2069);
        _2071 = (_2065.0: &std::num::Wrapping<i32>);
        _2072 = (_2065.1: &std::num::Wrapping<i32>);
        _2074 = <Wrapping<i32> as PartialEq>::eq(_2071, _2072) -> bb634;
    }

    bb634: {
        _2073 = Not(move _2074);
        switchInt(move _2073) -> [0: bb636, otherwise: bb635];
    }

    bb635: {
        _2075 = core::panicking::AssertKind::Eq;
        _2077 = Option::<Arguments<'_>>::None;
        _2076 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _2075, _2071, _2072, move _2077);
    }

    bb636: {
        _2078 = Wrapping::<i64>(const 42_i64);
        _2080 = _2078;
        _2079 = test::black_box::<Wrapping<i64>>(move _2080) -> bb637;
    }

    bb637: {
        _2078 = move _2079;
        _2082 = &mut _2078;
        _2083 = Wrapping::<i64>(const 38_i64);
        _2081 = <Wrapping<i64> as BitOrAssign>::bitor_assign(move _2082, move _2083) -> bb638;
    }

    bb638: {
        _2087 = _2078;
        _2086 = test::black_box::<Wrapping<i64>>(move _2087) -> bb639;
    }

    bb639: {
        _2085 = &_2086;
        _2089 = Wrapping::<i64>(const 46_i64);
        _2088 = &_2089;
        _2084 = (move _2085, move _2088);
        _2090 = (_2084.0: &std::num::Wrapping<i64>);
        _2091 = (_2084.1: &std::num::Wrapping<i64>);
        _2093 = <Wrapping<i64> as PartialEq>::eq(_2090, _2091) -> bb640;
    }

    bb640: {
        _2092 = Not(move _2093);
        switchInt(move _2092) -> [0: bb642, otherwise: bb641];
    }

    bb641: {
        _2094 = core::panicking::AssertKind::Eq;
        _2096 = Option::<Arguments<'_>>::None;
        _2095 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _2094, _2090, _2091, move _2096);
    }

    bb642: {
        _2097 = Wrapping::<i64>(const 42_i64);
        _2099 = _2097;
        _2098 = test::black_box::<Wrapping<i64>>(move _2099) -> bb643;
    }

    bb643: {
        _2097 = move _2098;
        _2101 = &mut _2097;
        _2103 = Wrapping::<i64>(const 38_i64);
        _2102 = &_2103;
        _2100 = <Wrapping<i64> as BitOrAssign<&Wrapping<i64>>>::bitor_assign(move _2101, move _2102) -> bb644;
    }

    bb644: {
        _2107 = _2097;
        _2106 = test::black_box::<Wrapping<i64>>(move _2107) -> bb645;
    }

    bb645: {
        _2105 = &_2106;
        _2109 = Wrapping::<i64>(const 46_i64);
        _2108 = &_2109;
        _2104 = (move _2105, move _2108);
        _2110 = (_2104.0: &std::num::Wrapping<i64>);
        _2111 = (_2104.1: &std::num::Wrapping<i64>);
        _2113 = <Wrapping<i64> as PartialEq>::eq(_2110, _2111) -> bb646;
    }

    bb646: {
        _2112 = Not(move _2113);
        switchInt(move _2112) -> [0: bb648, otherwise: bb647];
    }

    bb647: {
        _2114 = core::panicking::AssertKind::Eq;
        _2116 = Option::<Arguments<'_>>::None;
        _2115 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _2114, _2110, _2111, move _2116);
    }

    bb648: {
        _2117 = Wrapping::<isize>(const 42_isize);
        _2119 = _2117;
        _2118 = test::black_box::<Wrapping<isize>>(move _2119) -> bb649;
    }

    bb649: {
        _2117 = move _2118;
        _2121 = &mut _2117;
        _2122 = Wrapping::<isize>(const 38_isize);
        _2120 = <Wrapping<isize> as BitOrAssign>::bitor_assign(move _2121, move _2122) -> bb650;
    }

    bb650: {
        _2126 = _2117;
        _2125 = test::black_box::<Wrapping<isize>>(move _2126) -> bb651;
    }

    bb651: {
        _2124 = &_2125;
        _2128 = Wrapping::<isize>(const 46_isize);
        _2127 = &_2128;
        _2123 = (move _2124, move _2127);
        _2129 = (_2123.0: &std::num::Wrapping<isize>);
        _2130 = (_2123.1: &std::num::Wrapping<isize>);
        _2132 = <Wrapping<isize> as PartialEq>::eq(_2129, _2130) -> bb652;
    }

    bb652: {
        _2131 = Not(move _2132);
        switchInt(move _2131) -> [0: bb654, otherwise: bb653];
    }

    bb653: {
        _2133 = core::panicking::AssertKind::Eq;
        _2135 = Option::<Arguments<'_>>::None;
        _2134 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _2133, _2129, _2130, move _2135);
    }

    bb654: {
        _2136 = Wrapping::<isize>(const 42_isize);
        _2138 = _2136;
        _2137 = test::black_box::<Wrapping<isize>>(move _2138) -> bb655;
    }

    bb655: {
        _2136 = move _2137;
        _2140 = &mut _2136;
        _2142 = Wrapping::<isize>(const 38_isize);
        _2141 = &_2142;
        _2139 = <Wrapping<isize> as BitOrAssign<&Wrapping<isize>>>::bitor_assign(move _2140, move _2141) -> bb656;
    }

    bb656: {
        _2146 = _2136;
        _2145 = test::black_box::<Wrapping<isize>>(move _2146) -> bb657;
    }

    bb657: {
        _2144 = &_2145;
        _2148 = Wrapping::<isize>(const 46_isize);
        _2147 = &_2148;
        _2143 = (move _2144, move _2147);
        _2149 = (_2143.0: &std::num::Wrapping<isize>);
        _2150 = (_2143.1: &std::num::Wrapping<isize>);
        _2152 = <Wrapping<isize> as PartialEq>::eq(_2149, _2150) -> bb658;
    }

    bb658: {
        _2151 = Not(move _2152);
        switchInt(move _2151) -> [0: bb660, otherwise: bb659];
    }

    bb659: {
        _2153 = core::panicking::AssertKind::Eq;
        _2155 = Option::<Arguments<'_>>::None;
        _2154 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _2153, _2149, _2150, move _2155);
    }

    bb660: {
        _2156 = Wrapping::<u8>(const 42_u8);
        _2158 = _2156;
        _2157 = test::black_box::<Wrapping<u8>>(move _2158) -> bb661;
    }

    bb661: {
        _2156 = move _2157;
        _2160 = &mut _2156;
        _2161 = Wrapping::<u8>(const 38_u8);
        _2159 = <Wrapping<u8> as BitOrAssign>::bitor_assign(move _2160, move _2161) -> bb662;
    }

    bb662: {
        _2165 = _2156;
        _2164 = test::black_box::<Wrapping<u8>>(move _2165) -> bb663;
    }

    bb663: {
        _2163 = &_2164;
        _2167 = Wrapping::<u8>(const 46_u8);
        _2166 = &_2167;
        _2162 = (move _2163, move _2166);
        _2168 = (_2162.0: &std::num::Wrapping<u8>);
        _2169 = (_2162.1: &std::num::Wrapping<u8>);
        _2171 = <Wrapping<u8> as PartialEq>::eq(_2168, _2169) -> bb664;
    }

    bb664: {
        _2170 = Not(move _2171);
        switchInt(move _2170) -> [0: bb666, otherwise: bb665];
    }

    bb665: {
        _2172 = core::panicking::AssertKind::Eq;
        _2174 = Option::<Arguments<'_>>::None;
        _2173 = core::panicking::assert_failed::<Wrapping<u8>, Wrapping<u8>>(move _2172, _2168, _2169, move _2174);
    }

    bb666: {
        _2175 = Wrapping::<u8>(const 42_u8);
        _2177 = _2175;
        _2176 = test::black_box::<Wrapping<u8>>(move _2177) -> bb667;
    }

    bb667: {
        _2175 = move _2176;
        _2179 = &mut _2175;
        _2181 = Wrapping::<u8>(const 38_u8);
        _2180 = &_2181;
        _2178 = <Wrapping<u8> as BitOrAssign<&Wrapping<u8>>>::bitor_assign(move _2179, move _2180) -> bb668;
    }

    bb668: {
        _2185 = _2175;
        _2184 = test::black_box::<Wrapping<u8>>(move _2185) -> bb669;
    }

    bb669: {
        _2183 = &_2184;
        _2187 = Wrapping::<u8>(const 46_u8);
        _2186 = &_2187;
        _2182 = (move _2183, move _2186);
        _2188 = (_2182.0: &std::num::Wrapping<u8>);
        _2189 = (_2182.1: &std::num::Wrapping<u8>);
        _2191 = <Wrapping<u8> as PartialEq>::eq(_2188, _2189) -> bb670;
    }

    bb670: {
        _2190 = Not(move _2191);
        switchInt(move _2190) -> [0: bb672, otherwise: bb671];
    }

    bb671: {
        _2192 = core::panicking::AssertKind::Eq;
        _2194 = Option::<Arguments<'_>>::None;
        _2193 = core::panicking::assert_failed::<Wrapping<u8>, Wrapping<u8>>(move _2192, _2188, _2189, move _2194);
    }

    bb672: {
        _2195 = Wrapping::<u16>(const 42_u16);
        _2197 = _2195;
        _2196 = test::black_box::<Wrapping<u16>>(move _2197) -> bb673;
    }

    bb673: {
        _2195 = move _2196;
        _2199 = &mut _2195;
        _2200 = Wrapping::<u16>(const 38_u16);
        _2198 = <Wrapping<u16> as BitOrAssign>::bitor_assign(move _2199, move _2200) -> bb674;
    }

    bb674: {
        _2204 = _2195;
        _2203 = test::black_box::<Wrapping<u16>>(move _2204) -> bb675;
    }

    bb675: {
        _2202 = &_2203;
        _2206 = Wrapping::<u16>(const 46_u16);
        _2205 = &_2206;
        _2201 = (move _2202, move _2205);
        _2207 = (_2201.0: &std::num::Wrapping<u16>);
        _2208 = (_2201.1: &std::num::Wrapping<u16>);
        _2210 = <Wrapping<u16> as PartialEq>::eq(_2207, _2208) -> bb676;
    }

    bb676: {
        _2209 = Not(move _2210);
        switchInt(move _2209) -> [0: bb678, otherwise: bb677];
    }

    bb677: {
        _2211 = core::panicking::AssertKind::Eq;
        _2213 = Option::<Arguments<'_>>::None;
        _2212 = core::panicking::assert_failed::<Wrapping<u16>, Wrapping<u16>>(move _2211, _2207, _2208, move _2213);
    }

    bb678: {
        _2214 = Wrapping::<u16>(const 42_u16);
        _2216 = _2214;
        _2215 = test::black_box::<Wrapping<u16>>(move _2216) -> bb679;
    }

    bb679: {
        _2214 = move _2215;
        _2218 = &mut _2214;
        _2220 = Wrapping::<u16>(const 38_u16);
        _2219 = &_2220;
        _2217 = <Wrapping<u16> as BitOrAssign<&Wrapping<u16>>>::bitor_assign(move _2218, move _2219) -> bb680;
    }

    bb680: {
        _2224 = _2214;
        _2223 = test::black_box::<Wrapping<u16>>(move _2224) -> bb681;
    }

    bb681: {
        _2222 = &_2223;
        _2226 = Wrapping::<u16>(const 46_u16);
        _2225 = &_2226;
        _2221 = (move _2222, move _2225);
        _2227 = (_2221.0: &std::num::Wrapping<u16>);
        _2228 = (_2221.1: &std::num::Wrapping<u16>);
        _2230 = <Wrapping<u16> as PartialEq>::eq(_2227, _2228) -> bb682;
    }

    bb682: {
        _2229 = Not(move _2230);
        switchInt(move _2229) -> [0: bb684, otherwise: bb683];
    }

    bb683: {
        _2231 = core::panicking::AssertKind::Eq;
        _2233 = Option::<Arguments<'_>>::None;
        _2232 = core::panicking::assert_failed::<Wrapping<u16>, Wrapping<u16>>(move _2231, _2227, _2228, move _2233);
    }

    bb684: {
        _2234 = Wrapping::<u32>(const 42_u32);
        _2236 = _2234;
        _2235 = test::black_box::<Wrapping<u32>>(move _2236) -> bb685;
    }

    bb685: {
        _2234 = move _2235;
        _2238 = &mut _2234;
        _2239 = Wrapping::<u32>(const 38_u32);
        _2237 = <Wrapping<u32> as BitOrAssign>::bitor_assign(move _2238, move _2239) -> bb686;
    }

    bb686: {
        _2243 = _2234;
        _2242 = test::black_box::<Wrapping<u32>>(move _2243) -> bb687;
    }

    bb687: {
        _2241 = &_2242;
        _2245 = Wrapping::<u32>(const 46_u32);
        _2244 = &_2245;
        _2240 = (move _2241, move _2244);
        _2246 = (_2240.0: &std::num::Wrapping<u32>);
        _2247 = (_2240.1: &std::num::Wrapping<u32>);
        _2249 = <Wrapping<u32> as PartialEq>::eq(_2246, _2247) -> bb688;
    }

    bb688: {
        _2248 = Not(move _2249);
        switchInt(move _2248) -> [0: bb690, otherwise: bb689];
    }

    bb689: {
        _2250 = core::panicking::AssertKind::Eq;
        _2252 = Option::<Arguments<'_>>::None;
        _2251 = core::panicking::assert_failed::<Wrapping<u32>, Wrapping<u32>>(move _2250, _2246, _2247, move _2252);
    }

    bb690: {
        _2253 = Wrapping::<u32>(const 42_u32);
        _2255 = _2253;
        _2254 = test::black_box::<Wrapping<u32>>(move _2255) -> bb691;
    }

    bb691: {
        _2253 = move _2254;
        _2257 = &mut _2253;
        _2259 = Wrapping::<u32>(const 38_u32);
        _2258 = &_2259;
        _2256 = <Wrapping<u32> as BitOrAssign<&Wrapping<u32>>>::bitor_assign(move _2257, move _2258) -> bb692;
    }

    bb692: {
        _2263 = _2253;
        _2262 = test::black_box::<Wrapping<u32>>(move _2263) -> bb693;
    }

    bb693: {
        _2261 = &_2262;
        _2265 = Wrapping::<u32>(const 46_u32);
        _2264 = &_2265;
        _2260 = (move _2261, move _2264);
        _2266 = (_2260.0: &std::num::Wrapping<u32>);
        _2267 = (_2260.1: &std::num::Wrapping<u32>);
        _2269 = <Wrapping<u32> as PartialEq>::eq(_2266, _2267) -> bb694;
    }

    bb694: {
        _2268 = Not(move _2269);
        switchInt(move _2268) -> [0: bb696, otherwise: bb695];
    }

    bb695: {
        _2270 = core::panicking::AssertKind::Eq;
        _2272 = Option::<Arguments<'_>>::None;
        _2271 = core::panicking::assert_failed::<Wrapping<u32>, Wrapping<u32>>(move _2270, _2266, _2267, move _2272);
    }

    bb696: {
        _2273 = Wrapping::<u64>(const 42_u64);
        _2275 = _2273;
        _2274 = test::black_box::<Wrapping<u64>>(move _2275) -> bb697;
    }

    bb697: {
        _2273 = move _2274;
        _2277 = &mut _2273;
        _2278 = Wrapping::<u64>(const 38_u64);
        _2276 = <Wrapping<u64> as BitOrAssign>::bitor_assign(move _2277, move _2278) -> bb698;
    }

    bb698: {
        _2282 = _2273;
        _2281 = test::black_box::<Wrapping<u64>>(move _2282) -> bb699;
    }

    bb699: {
        _2280 = &_2281;
        _2284 = Wrapping::<u64>(const 46_u64);
        _2283 = &_2284;
        _2279 = (move _2280, move _2283);
        _2285 = (_2279.0: &std::num::Wrapping<u64>);
        _2286 = (_2279.1: &std::num::Wrapping<u64>);
        _2288 = <Wrapping<u64> as PartialEq>::eq(_2285, _2286) -> bb700;
    }

    bb700: {
        _2287 = Not(move _2288);
        switchInt(move _2287) -> [0: bb702, otherwise: bb701];
    }

    bb701: {
        _2289 = core::panicking::AssertKind::Eq;
        _2291 = Option::<Arguments<'_>>::None;
        _2290 = core::panicking::assert_failed::<Wrapping<u64>, Wrapping<u64>>(move _2289, _2285, _2286, move _2291);
    }

    bb702: {
        _2292 = Wrapping::<u64>(const 42_u64);
        _2294 = _2292;
        _2293 = test::black_box::<Wrapping<u64>>(move _2294) -> bb703;
    }

    bb703: {
        _2292 = move _2293;
        _2296 = &mut _2292;
        _2298 = Wrapping::<u64>(const 38_u64);
        _2297 = &_2298;
        _2295 = <Wrapping<u64> as BitOrAssign<&Wrapping<u64>>>::bitor_assign(move _2296, move _2297) -> bb704;
    }

    bb704: {
        _2302 = _2292;
        _2301 = test::black_box::<Wrapping<u64>>(move _2302) -> bb705;
    }

    bb705: {
        _2300 = &_2301;
        _2304 = Wrapping::<u64>(const 46_u64);
        _2303 = &_2304;
        _2299 = (move _2300, move _2303);
        _2305 = (_2299.0: &std::num::Wrapping<u64>);
        _2306 = (_2299.1: &std::num::Wrapping<u64>);
        _2308 = <Wrapping<u64> as PartialEq>::eq(_2305, _2306) -> bb706;
    }

    bb706: {
        _2307 = Not(move _2308);
        switchInt(move _2307) -> [0: bb708, otherwise: bb707];
    }

    bb707: {
        _2309 = core::panicking::AssertKind::Eq;
        _2311 = Option::<Arguments<'_>>::None;
        _2310 = core::panicking::assert_failed::<Wrapping<u64>, Wrapping<u64>>(move _2309, _2305, _2306, move _2311);
    }

    bb708: {
        _2312 = Wrapping::<usize>(const 42_usize);
        _2314 = _2312;
        _2313 = test::black_box::<Wrapping<usize>>(move _2314) -> bb709;
    }

    bb709: {
        _2312 = move _2313;
        _2316 = &mut _2312;
        _2317 = Wrapping::<usize>(const 38_usize);
        _2315 = <Wrapping<usize> as BitOrAssign>::bitor_assign(move _2316, move _2317) -> bb710;
    }

    bb710: {
        _2321 = _2312;
        _2320 = test::black_box::<Wrapping<usize>>(move _2321) -> bb711;
    }

    bb711: {
        _2319 = &_2320;
        _2323 = Wrapping::<usize>(const 46_usize);
        _2322 = &_2323;
        _2318 = (move _2319, move _2322);
        _2324 = (_2318.0: &std::num::Wrapping<usize>);
        _2325 = (_2318.1: &std::num::Wrapping<usize>);
        _2327 = <Wrapping<usize> as PartialEq>::eq(_2324, _2325) -> bb712;
    }

    bb712: {
        _2326 = Not(move _2327);
        switchInt(move _2326) -> [0: bb714, otherwise: bb713];
    }

    bb713: {
        _2328 = core::panicking::AssertKind::Eq;
        _2330 = Option::<Arguments<'_>>::None;
        _2329 = core::panicking::assert_failed::<Wrapping<usize>, Wrapping<usize>>(move _2328, _2324, _2325, move _2330);
    }

    bb714: {
        _2331 = Wrapping::<usize>(const 42_usize);
        _2333 = _2331;
        _2332 = test::black_box::<Wrapping<usize>>(move _2333) -> bb715;
    }

    bb715: {
        _2331 = move _2332;
        _2335 = &mut _2331;
        _2337 = Wrapping::<usize>(const 38_usize);
        _2336 = &_2337;
        _2334 = <Wrapping<usize> as BitOrAssign<&Wrapping<usize>>>::bitor_assign(move _2335, move _2336) -> bb716;
    }

    bb716: {
        _2341 = _2331;
        _2340 = test::black_box::<Wrapping<usize>>(move _2341) -> bb717;
    }

    bb717: {
        _2339 = &_2340;
        _2343 = Wrapping::<usize>(const 46_usize);
        _2342 = &_2343;
        _2338 = (move _2339, move _2342);
        _2344 = (_2338.0: &std::num::Wrapping<usize>);
        _2345 = (_2338.1: &std::num::Wrapping<usize>);
        _2347 = <Wrapping<usize> as PartialEq>::eq(_2344, _2345) -> bb718;
    }

    bb718: {
        _2346 = Not(move _2347);
        switchInt(move _2346) -> [0: bb720, otherwise: bb719];
    }

    bb719: {
        _2348 = core::panicking::AssertKind::Eq;
        _2350 = Option::<Arguments<'_>>::None;
        _2349 = core::panicking::assert_failed::<Wrapping<usize>, Wrapping<usize>>(move _2348, _2344, _2345, move _2350);
    }

    bb720: {
        _2351 = Wrapping::<i8>(const 42_i8);
        _2353 = _2351;
        _2352 = test::black_box::<Wrapping<i8>>(move _2353) -> bb721;
    }

    bb721: {
        _2351 = move _2352;
        _2355 = &mut _2351;
        _2356 = Wrapping::<i8>(const 38_i8);
        _2354 = <Wrapping<i8> as BitAndAssign>::bitand_assign(move _2355, move _2356) -> bb722;
    }

    bb722: {
        _2360 = _2351;
        _2359 = test::black_box::<Wrapping<i8>>(move _2360) -> bb723;
    }

    bb723: {
        _2358 = &_2359;
        _2362 = Wrapping::<i8>(const 34_i8);
        _2361 = &_2362;
        _2357 = (move _2358, move _2361);
        _2363 = (_2357.0: &std::num::Wrapping<i8>);
        _2364 = (_2357.1: &std::num::Wrapping<i8>);
        _2366 = <Wrapping<i8> as PartialEq>::eq(_2363, _2364) -> bb724;
    }

    bb724: {
        _2365 = Not(move _2366);
        switchInt(move _2365) -> [0: bb726, otherwise: bb725];
    }

    bb725: {
        _2367 = core::panicking::AssertKind::Eq;
        _2369 = Option::<Arguments<'_>>::None;
        _2368 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _2367, _2363, _2364, move _2369);
    }

    bb726: {
        _2370 = Wrapping::<i8>(const 42_i8);
        _2372 = _2370;
        _2371 = test::black_box::<Wrapping<i8>>(move _2372) -> bb727;
    }

    bb727: {
        _2370 = move _2371;
        _2374 = &mut _2370;
        _2376 = Wrapping::<i8>(const 38_i8);
        _2375 = &_2376;
        _2373 = <Wrapping<i8> as BitAndAssign<&Wrapping<i8>>>::bitand_assign(move _2374, move _2375) -> bb728;
    }

    bb728: {
        _2380 = _2370;
        _2379 = test::black_box::<Wrapping<i8>>(move _2380) -> bb729;
    }

    bb729: {
        _2378 = &_2379;
        _2382 = Wrapping::<i8>(const 34_i8);
        _2381 = &_2382;
        _2377 = (move _2378, move _2381);
        _2383 = (_2377.0: &std::num::Wrapping<i8>);
        _2384 = (_2377.1: &std::num::Wrapping<i8>);
        _2386 = <Wrapping<i8> as PartialEq>::eq(_2383, _2384) -> bb730;
    }

    bb730: {
        _2385 = Not(move _2386);
        switchInt(move _2385) -> [0: bb732, otherwise: bb731];
    }

    bb731: {
        _2387 = core::panicking::AssertKind::Eq;
        _2389 = Option::<Arguments<'_>>::None;
        _2388 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _2387, _2383, _2384, move _2389);
    }

    bb732: {
        _2390 = Wrapping::<i16>(const 42_i16);
        _2392 = _2390;
        _2391 = test::black_box::<Wrapping<i16>>(move _2392) -> bb733;
    }

    bb733: {
        _2390 = move _2391;
        _2394 = &mut _2390;
        _2395 = Wrapping::<i16>(const 38_i16);
        _2393 = <Wrapping<i16> as BitAndAssign>::bitand_assign(move _2394, move _2395) -> bb734;
    }

    bb734: {
        _2399 = _2390;
        _2398 = test::black_box::<Wrapping<i16>>(move _2399) -> bb735;
    }

    bb735: {
        _2397 = &_2398;
        _2401 = Wrapping::<i16>(const 34_i16);
        _2400 = &_2401;
        _2396 = (move _2397, move _2400);
        _2402 = (_2396.0: &std::num::Wrapping<i16>);
        _2403 = (_2396.1: &std::num::Wrapping<i16>);
        _2405 = <Wrapping<i16> as PartialEq>::eq(_2402, _2403) -> bb736;
    }

    bb736: {
        _2404 = Not(move _2405);
        switchInt(move _2404) -> [0: bb738, otherwise: bb737];
    }

    bb737: {
        _2406 = core::panicking::AssertKind::Eq;
        _2408 = Option::<Arguments<'_>>::None;
        _2407 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _2406, _2402, _2403, move _2408);
    }

    bb738: {
        _2409 = Wrapping::<i16>(const 42_i16);
        _2411 = _2409;
        _2410 = test::black_box::<Wrapping<i16>>(move _2411) -> bb739;
    }

    bb739: {
        _2409 = move _2410;
        _2413 = &mut _2409;
        _2415 = Wrapping::<i16>(const 38_i16);
        _2414 = &_2415;
        _2412 = <Wrapping<i16> as BitAndAssign<&Wrapping<i16>>>::bitand_assign(move _2413, move _2414) -> bb740;
    }

    bb740: {
        _2419 = _2409;
        _2418 = test::black_box::<Wrapping<i16>>(move _2419) -> bb741;
    }

    bb741: {
        _2417 = &_2418;
        _2421 = Wrapping::<i16>(const 34_i16);
        _2420 = &_2421;
        _2416 = (move _2417, move _2420);
        _2422 = (_2416.0: &std::num::Wrapping<i16>);
        _2423 = (_2416.1: &std::num::Wrapping<i16>);
        _2425 = <Wrapping<i16> as PartialEq>::eq(_2422, _2423) -> bb742;
    }

    bb742: {
        _2424 = Not(move _2425);
        switchInt(move _2424) -> [0: bb744, otherwise: bb743];
    }

    bb743: {
        _2426 = core::panicking::AssertKind::Eq;
        _2428 = Option::<Arguments<'_>>::None;
        _2427 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _2426, _2422, _2423, move _2428);
    }

    bb744: {
        _2429 = Wrapping::<i32>(const 42_i32);
        _2431 = _2429;
        _2430 = test::black_box::<Wrapping<i32>>(move _2431) -> bb745;
    }

    bb745: {
        _2429 = move _2430;
        _2433 = &mut _2429;
        _2434 = Wrapping::<i32>(const 38_i32);
        _2432 = <Wrapping<i32> as BitAndAssign>::bitand_assign(move _2433, move _2434) -> bb746;
    }

    bb746: {
        _2438 = _2429;
        _2437 = test::black_box::<Wrapping<i32>>(move _2438) -> bb747;
    }

    bb747: {
        _2436 = &_2437;
        _2440 = Wrapping::<i32>(const 34_i32);
        _2439 = &_2440;
        _2435 = (move _2436, move _2439);
        _2441 = (_2435.0: &std::num::Wrapping<i32>);
        _2442 = (_2435.1: &std::num::Wrapping<i32>);
        _2444 = <Wrapping<i32> as PartialEq>::eq(_2441, _2442) -> bb748;
    }

    bb748: {
        _2443 = Not(move _2444);
        switchInt(move _2443) -> [0: bb750, otherwise: bb749];
    }

    bb749: {
        _2445 = core::panicking::AssertKind::Eq;
        _2447 = Option::<Arguments<'_>>::None;
        _2446 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _2445, _2441, _2442, move _2447);
    }

    bb750: {
        _2448 = Wrapping::<i32>(const 42_i32);
        _2450 = _2448;
        _2449 = test::black_box::<Wrapping<i32>>(move _2450) -> bb751;
    }

    bb751: {
        _2448 = move _2449;
        _2452 = &mut _2448;
        _2454 = Wrapping::<i32>(const 38_i32);
        _2453 = &_2454;
        _2451 = <Wrapping<i32> as BitAndAssign<&Wrapping<i32>>>::bitand_assign(move _2452, move _2453) -> bb752;
    }

    bb752: {
        _2458 = _2448;
        _2457 = test::black_box::<Wrapping<i32>>(move _2458) -> bb753;
    }

    bb753: {
        _2456 = &_2457;
        _2460 = Wrapping::<i32>(const 34_i32);
        _2459 = &_2460;
        _2455 = (move _2456, move _2459);
        _2461 = (_2455.0: &std::num::Wrapping<i32>);
        _2462 = (_2455.1: &std::num::Wrapping<i32>);
        _2464 = <Wrapping<i32> as PartialEq>::eq(_2461, _2462) -> bb754;
    }

    bb754: {
        _2463 = Not(move _2464);
        switchInt(move _2463) -> [0: bb756, otherwise: bb755];
    }

    bb755: {
        _2465 = core::panicking::AssertKind::Eq;
        _2467 = Option::<Arguments<'_>>::None;
        _2466 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _2465, _2461, _2462, move _2467);
    }

    bb756: {
        _2468 = Wrapping::<i64>(const 42_i64);
        _2470 = _2468;
        _2469 = test::black_box::<Wrapping<i64>>(move _2470) -> bb757;
    }

    bb757: {
        _2468 = move _2469;
        _2472 = &mut _2468;
        _2473 = Wrapping::<i64>(const 38_i64);
        _2471 = <Wrapping<i64> as BitAndAssign>::bitand_assign(move _2472, move _2473) -> bb758;
    }

    bb758: {
        _2477 = _2468;
        _2476 = test::black_box::<Wrapping<i64>>(move _2477) -> bb759;
    }

    bb759: {
        _2475 = &_2476;
        _2479 = Wrapping::<i64>(const 34_i64);
        _2478 = &_2479;
        _2474 = (move _2475, move _2478);
        _2480 = (_2474.0: &std::num::Wrapping<i64>);
        _2481 = (_2474.1: &std::num::Wrapping<i64>);
        _2483 = <Wrapping<i64> as PartialEq>::eq(_2480, _2481) -> bb760;
    }

    bb760: {
        _2482 = Not(move _2483);
        switchInt(move _2482) -> [0: bb762, otherwise: bb761];
    }

    bb761: {
        _2484 = core::panicking::AssertKind::Eq;
        _2486 = Option::<Arguments<'_>>::None;
        _2485 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _2484, _2480, _2481, move _2486);
    }

    bb762: {
        _2487 = Wrapping::<i64>(const 42_i64);
        _2489 = _2487;
        _2488 = test::black_box::<Wrapping<i64>>(move _2489) -> bb763;
    }

    bb763: {
        _2487 = move _2488;
        _2491 = &mut _2487;
        _2493 = Wrapping::<i64>(const 38_i64);
        _2492 = &_2493;
        _2490 = <Wrapping<i64> as BitAndAssign<&Wrapping<i64>>>::bitand_assign(move _2491, move _2492) -> bb764;
    }

    bb764: {
        _2497 = _2487;
        _2496 = test::black_box::<Wrapping<i64>>(move _2497) -> bb765;
    }

    bb765: {
        _2495 = &_2496;
        _2499 = Wrapping::<i64>(const 34_i64);
        _2498 = &_2499;
        _2494 = (move _2495, move _2498);
        _2500 = (_2494.0: &std::num::Wrapping<i64>);
        _2501 = (_2494.1: &std::num::Wrapping<i64>);
        _2503 = <Wrapping<i64> as PartialEq>::eq(_2500, _2501) -> bb766;
    }

    bb766: {
        _2502 = Not(move _2503);
        switchInt(move _2502) -> [0: bb768, otherwise: bb767];
    }

    bb767: {
        _2504 = core::panicking::AssertKind::Eq;
        _2506 = Option::<Arguments<'_>>::None;
        _2505 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _2504, _2500, _2501, move _2506);
    }

    bb768: {
        _2507 = Wrapping::<isize>(const 42_isize);
        _2509 = _2507;
        _2508 = test::black_box::<Wrapping<isize>>(move _2509) -> bb769;
    }

    bb769: {
        _2507 = move _2508;
        _2511 = &mut _2507;
        _2512 = Wrapping::<isize>(const 38_isize);
        _2510 = <Wrapping<isize> as BitAndAssign>::bitand_assign(move _2511, move _2512) -> bb770;
    }

    bb770: {
        _2516 = _2507;
        _2515 = test::black_box::<Wrapping<isize>>(move _2516) -> bb771;
    }

    bb771: {
        _2514 = &_2515;
        _2518 = Wrapping::<isize>(const 34_isize);
        _2517 = &_2518;
        _2513 = (move _2514, move _2517);
        _2519 = (_2513.0: &std::num::Wrapping<isize>);
        _2520 = (_2513.1: &std::num::Wrapping<isize>);
        _2522 = <Wrapping<isize> as PartialEq>::eq(_2519, _2520) -> bb772;
    }

    bb772: {
        _2521 = Not(move _2522);
        switchInt(move _2521) -> [0: bb774, otherwise: bb773];
    }

    bb773: {
        _2523 = core::panicking::AssertKind::Eq;
        _2525 = Option::<Arguments<'_>>::None;
        _2524 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _2523, _2519, _2520, move _2525);
    }

    bb774: {
        _2526 = Wrapping::<isize>(const 42_isize);
        _2528 = _2526;
        _2527 = test::black_box::<Wrapping<isize>>(move _2528) -> bb775;
    }

    bb775: {
        _2526 = move _2527;
        _2530 = &mut _2526;
        _2532 = Wrapping::<isize>(const 38_isize);
        _2531 = &_2532;
        _2529 = <Wrapping<isize> as BitAndAssign<&Wrapping<isize>>>::bitand_assign(move _2530, move _2531) -> bb776;
    }

    bb776: {
        _2536 = _2526;
        _2535 = test::black_box::<Wrapping<isize>>(move _2536) -> bb777;
    }

    bb777: {
        _2534 = &_2535;
        _2538 = Wrapping::<isize>(const 34_isize);
        _2537 = &_2538;
        _2533 = (move _2534, move _2537);
        _2539 = (_2533.0: &std::num::Wrapping<isize>);
        _2540 = (_2533.1: &std::num::Wrapping<isize>);
        _2542 = <Wrapping<isize> as PartialEq>::eq(_2539, _2540) -> bb778;
    }

    bb778: {
        _2541 = Not(move _2542);
        switchInt(move _2541) -> [0: bb780, otherwise: bb779];
    }

    bb779: {
        _2543 = core::panicking::AssertKind::Eq;
        _2545 = Option::<Arguments<'_>>::None;
        _2544 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _2543, _2539, _2540, move _2545);
    }

    bb780: {
        _2546 = Wrapping::<u8>(const 42_u8);
        _2548 = _2546;
        _2547 = test::black_box::<Wrapping<u8>>(move _2548) -> bb781;
    }

    bb781: {
        _2546 = move _2547;
        _2550 = &mut _2546;
        _2551 = Wrapping::<u8>(const 38_u8);
        _2549 = <Wrapping<u8> as BitAndAssign>::bitand_assign(move _2550, move _2551) -> bb782;
    }

    bb782: {
        _2555 = _2546;
        _2554 = test::black_box::<Wrapping<u8>>(move _2555) -> bb783;
    }

    bb783: {
        _2553 = &_2554;
        _2557 = Wrapping::<u8>(const 34_u8);
        _2556 = &_2557;
        _2552 = (move _2553, move _2556);
        _2558 = (_2552.0: &std::num::Wrapping<u8>);
        _2559 = (_2552.1: &std::num::Wrapping<u8>);
        _2561 = <Wrapping<u8> as PartialEq>::eq(_2558, _2559) -> bb784;
    }

    bb784: {
        _2560 = Not(move _2561);
        switchInt(move _2560) -> [0: bb786, otherwise: bb785];
    }

    bb785: {
        _2562 = core::panicking::AssertKind::Eq;
        _2564 = Option::<Arguments<'_>>::None;
        _2563 = core::panicking::assert_failed::<Wrapping<u8>, Wrapping<u8>>(move _2562, _2558, _2559, move _2564);
    }

    bb786: {
        _2565 = Wrapping::<u8>(const 42_u8);
        _2567 = _2565;
        _2566 = test::black_box::<Wrapping<u8>>(move _2567) -> bb787;
    }

    bb787: {
        _2565 = move _2566;
        _2569 = &mut _2565;
        _2571 = Wrapping::<u8>(const 38_u8);
        _2570 = &_2571;
        _2568 = <Wrapping<u8> as BitAndAssign<&Wrapping<u8>>>::bitand_assign(move _2569, move _2570) -> bb788;
    }

    bb788: {
        _2575 = _2565;
        _2574 = test::black_box::<Wrapping<u8>>(move _2575) -> bb789;
    }

    bb789: {
        _2573 = &_2574;
        _2577 = Wrapping::<u8>(const 34_u8);
        _2576 = &_2577;
        _2572 = (move _2573, move _2576);
        _2578 = (_2572.0: &std::num::Wrapping<u8>);
        _2579 = (_2572.1: &std::num::Wrapping<u8>);
        _2581 = <Wrapping<u8> as PartialEq>::eq(_2578, _2579) -> bb790;
    }

    bb790: {
        _2580 = Not(move _2581);
        switchInt(move _2580) -> [0: bb792, otherwise: bb791];
    }

    bb791: {
        _2582 = core::panicking::AssertKind::Eq;
        _2584 = Option::<Arguments<'_>>::None;
        _2583 = core::panicking::assert_failed::<Wrapping<u8>, Wrapping<u8>>(move _2582, _2578, _2579, move _2584);
    }

    bb792: {
        _2585 = Wrapping::<u16>(const 42_u16);
        _2587 = _2585;
        _2586 = test::black_box::<Wrapping<u16>>(move _2587) -> bb793;
    }

    bb793: {
        _2585 = move _2586;
        _2589 = &mut _2585;
        _2590 = Wrapping::<u16>(const 38_u16);
        _2588 = <Wrapping<u16> as BitAndAssign>::bitand_assign(move _2589, move _2590) -> bb794;
    }

    bb794: {
        _2594 = _2585;
        _2593 = test::black_box::<Wrapping<u16>>(move _2594) -> bb795;
    }

    bb795: {
        _2592 = &_2593;
        _2596 = Wrapping::<u16>(const 34_u16);
        _2595 = &_2596;
        _2591 = (move _2592, move _2595);
        _2597 = (_2591.0: &std::num::Wrapping<u16>);
        _2598 = (_2591.1: &std::num::Wrapping<u16>);
        _2600 = <Wrapping<u16> as PartialEq>::eq(_2597, _2598) -> bb796;
    }

    bb796: {
        _2599 = Not(move _2600);
        switchInt(move _2599) -> [0: bb798, otherwise: bb797];
    }

    bb797: {
        _2601 = core::panicking::AssertKind::Eq;
        _2603 = Option::<Arguments<'_>>::None;
        _2602 = core::panicking::assert_failed::<Wrapping<u16>, Wrapping<u16>>(move _2601, _2597, _2598, move _2603);
    }

    bb798: {
        _2604 = Wrapping::<u16>(const 42_u16);
        _2606 = _2604;
        _2605 = test::black_box::<Wrapping<u16>>(move _2606) -> bb799;
    }

    bb799: {
        _2604 = move _2605;
        _2608 = &mut _2604;
        _2610 = Wrapping::<u16>(const 38_u16);
        _2609 = &_2610;
        _2607 = <Wrapping<u16> as BitAndAssign<&Wrapping<u16>>>::bitand_assign(move _2608, move _2609) -> bb800;
    }

    bb800: {
        _2614 = _2604;
        _2613 = test::black_box::<Wrapping<u16>>(move _2614) -> bb801;
    }

    bb801: {
        _2612 = &_2613;
        _2616 = Wrapping::<u16>(const 34_u16);
        _2615 = &_2616;
        _2611 = (move _2612, move _2615);
        _2617 = (_2611.0: &std::num::Wrapping<u16>);
        _2618 = (_2611.1: &std::num::Wrapping<u16>);
        _2620 = <Wrapping<u16> as PartialEq>::eq(_2617, _2618) -> bb802;
    }

    bb802: {
        _2619 = Not(move _2620);
        switchInt(move _2619) -> [0: bb804, otherwise: bb803];
    }

    bb803: {
        _2621 = core::panicking::AssertKind::Eq;
        _2623 = Option::<Arguments<'_>>::None;
        _2622 = core::panicking::assert_failed::<Wrapping<u16>, Wrapping<u16>>(move _2621, _2617, _2618, move _2623);
    }

    bb804: {
        _2624 = Wrapping::<u32>(const 42_u32);
        _2626 = _2624;
        _2625 = test::black_box::<Wrapping<u32>>(move _2626) -> bb805;
    }

    bb805: {
        _2624 = move _2625;
        _2628 = &mut _2624;
        _2629 = Wrapping::<u32>(const 38_u32);
        _2627 = <Wrapping<u32> as BitAndAssign>::bitand_assign(move _2628, move _2629) -> bb806;
    }

    bb806: {
        _2633 = _2624;
        _2632 = test::black_box::<Wrapping<u32>>(move _2633) -> bb807;
    }

    bb807: {
        _2631 = &_2632;
        _2635 = Wrapping::<u32>(const 34_u32);
        _2634 = &_2635;
        _2630 = (move _2631, move _2634);
        _2636 = (_2630.0: &std::num::Wrapping<u32>);
        _2637 = (_2630.1: &std::num::Wrapping<u32>);
        _2639 = <Wrapping<u32> as PartialEq>::eq(_2636, _2637) -> bb808;
    }

    bb808: {
        _2638 = Not(move _2639);
        switchInt(move _2638) -> [0: bb810, otherwise: bb809];
    }

    bb809: {
        _2640 = core::panicking::AssertKind::Eq;
        _2642 = Option::<Arguments<'_>>::None;
        _2641 = core::panicking::assert_failed::<Wrapping<u32>, Wrapping<u32>>(move _2640, _2636, _2637, move _2642);
    }

    bb810: {
        _2643 = Wrapping::<u32>(const 42_u32);
        _2645 = _2643;
        _2644 = test::black_box::<Wrapping<u32>>(move _2645) -> bb811;
    }

    bb811: {
        _2643 = move _2644;
        _2647 = &mut _2643;
        _2649 = Wrapping::<u32>(const 38_u32);
        _2648 = &_2649;
        _2646 = <Wrapping<u32> as BitAndAssign<&Wrapping<u32>>>::bitand_assign(move _2647, move _2648) -> bb812;
    }

    bb812: {
        _2653 = _2643;
        _2652 = test::black_box::<Wrapping<u32>>(move _2653) -> bb813;
    }

    bb813: {
        _2651 = &_2652;
        _2655 = Wrapping::<u32>(const 34_u32);
        _2654 = &_2655;
        _2650 = (move _2651, move _2654);
        _2656 = (_2650.0: &std::num::Wrapping<u32>);
        _2657 = (_2650.1: &std::num::Wrapping<u32>);
        _2659 = <Wrapping<u32> as PartialEq>::eq(_2656, _2657) -> bb814;
    }

    bb814: {
        _2658 = Not(move _2659);
        switchInt(move _2658) -> [0: bb816, otherwise: bb815];
    }

    bb815: {
        _2660 = core::panicking::AssertKind::Eq;
        _2662 = Option::<Arguments<'_>>::None;
        _2661 = core::panicking::assert_failed::<Wrapping<u32>, Wrapping<u32>>(move _2660, _2656, _2657, move _2662);
    }

    bb816: {
        _2663 = Wrapping::<u64>(const 42_u64);
        _2665 = _2663;
        _2664 = test::black_box::<Wrapping<u64>>(move _2665) -> bb817;
    }

    bb817: {
        _2663 = move _2664;
        _2667 = &mut _2663;
        _2668 = Wrapping::<u64>(const 38_u64);
        _2666 = <Wrapping<u64> as BitAndAssign>::bitand_assign(move _2667, move _2668) -> bb818;
    }

    bb818: {
        _2672 = _2663;
        _2671 = test::black_box::<Wrapping<u64>>(move _2672) -> bb819;
    }

    bb819: {
        _2670 = &_2671;
        _2674 = Wrapping::<u64>(const 34_u64);
        _2673 = &_2674;
        _2669 = (move _2670, move _2673);
        _2675 = (_2669.0: &std::num::Wrapping<u64>);
        _2676 = (_2669.1: &std::num::Wrapping<u64>);
        _2678 = <Wrapping<u64> as PartialEq>::eq(_2675, _2676) -> bb820;
    }

    bb820: {
        _2677 = Not(move _2678);
        switchInt(move _2677) -> [0: bb822, otherwise: bb821];
    }

    bb821: {
        _2679 = core::panicking::AssertKind::Eq;
        _2681 = Option::<Arguments<'_>>::None;
        _2680 = core::panicking::assert_failed::<Wrapping<u64>, Wrapping<u64>>(move _2679, _2675, _2676, move _2681);
    }

    bb822: {
        _2682 = Wrapping::<u64>(const 42_u64);
        _2684 = _2682;
        _2683 = test::black_box::<Wrapping<u64>>(move _2684) -> bb823;
    }

    bb823: {
        _2682 = move _2683;
        _2686 = &mut _2682;
        _2688 = Wrapping::<u64>(const 38_u64);
        _2687 = &_2688;
        _2685 = <Wrapping<u64> as BitAndAssign<&Wrapping<u64>>>::bitand_assign(move _2686, move _2687) -> bb824;
    }

    bb824: {
        _2692 = _2682;
        _2691 = test::black_box::<Wrapping<u64>>(move _2692) -> bb825;
    }

    bb825: {
        _2690 = &_2691;
        _2694 = Wrapping::<u64>(const 34_u64);
        _2693 = &_2694;
        _2689 = (move _2690, move _2693);
        _2695 = (_2689.0: &std::num::Wrapping<u64>);
        _2696 = (_2689.1: &std::num::Wrapping<u64>);
        _2698 = <Wrapping<u64> as PartialEq>::eq(_2695, _2696) -> bb826;
    }

    bb826: {
        _2697 = Not(move _2698);
        switchInt(move _2697) -> [0: bb828, otherwise: bb827];
    }

    bb827: {
        _2699 = core::panicking::AssertKind::Eq;
        _2701 = Option::<Arguments<'_>>::None;
        _2700 = core::panicking::assert_failed::<Wrapping<u64>, Wrapping<u64>>(move _2699, _2695, _2696, move _2701);
    }

    bb828: {
        _2702 = Wrapping::<usize>(const 42_usize);
        _2704 = _2702;
        _2703 = test::black_box::<Wrapping<usize>>(move _2704) -> bb829;
    }

    bb829: {
        _2702 = move _2703;
        _2706 = &mut _2702;
        _2707 = Wrapping::<usize>(const 38_usize);
        _2705 = <Wrapping<usize> as BitAndAssign>::bitand_assign(move _2706, move _2707) -> bb830;
    }

    bb830: {
        _2711 = _2702;
        _2710 = test::black_box::<Wrapping<usize>>(move _2711) -> bb831;
    }

    bb831: {
        _2709 = &_2710;
        _2713 = Wrapping::<usize>(const 34_usize);
        _2712 = &_2713;
        _2708 = (move _2709, move _2712);
        _2714 = (_2708.0: &std::num::Wrapping<usize>);
        _2715 = (_2708.1: &std::num::Wrapping<usize>);
        _2717 = <Wrapping<usize> as PartialEq>::eq(_2714, _2715) -> bb832;
    }

    bb832: {
        _2716 = Not(move _2717);
        switchInt(move _2716) -> [0: bb834, otherwise: bb833];
    }

    bb833: {
        _2718 = core::panicking::AssertKind::Eq;
        _2720 = Option::<Arguments<'_>>::None;
        _2719 = core::panicking::assert_failed::<Wrapping<usize>, Wrapping<usize>>(move _2718, _2714, _2715, move _2720);
    }

    bb834: {
        _2721 = Wrapping::<usize>(const 42_usize);
        _2723 = _2721;
        _2722 = test::black_box::<Wrapping<usize>>(move _2723) -> bb835;
    }

    bb835: {
        _2721 = move _2722;
        _2725 = &mut _2721;
        _2727 = Wrapping::<usize>(const 38_usize);
        _2726 = &_2727;
        _2724 = <Wrapping<usize> as BitAndAssign<&Wrapping<usize>>>::bitand_assign(move _2725, move _2726) -> bb836;
    }

    bb836: {
        _2731 = _2721;
        _2730 = test::black_box::<Wrapping<usize>>(move _2731) -> bb837;
    }

    bb837: {
        _2729 = &_2730;
        _2733 = Wrapping::<usize>(const 34_usize);
        _2732 = &_2733;
        _2728 = (move _2729, move _2732);
        _2734 = (_2728.0: &std::num::Wrapping<usize>);
        _2735 = (_2728.1: &std::num::Wrapping<usize>);
        _2737 = <Wrapping<usize> as PartialEq>::eq(_2734, _2735) -> bb838;
    }

    bb838: {
        _2736 = Not(move _2737);
        switchInt(move _2736) -> [0: bb840, otherwise: bb839];
    }

    bb839: {
        _2738 = core::panicking::AssertKind::Eq;
        _2740 = Option::<Arguments<'_>>::None;
        _2739 = core::panicking::assert_failed::<Wrapping<usize>, Wrapping<usize>>(move _2738, _2734, _2735, move _2740);
    }

    bb840: {
        return;
    }
}

fn test_sh_ops() -> () {
    let mut _0: ();
    let mut _1: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _2: &std::num::Wrapping<i8>;
    let _3: std::num::Wrapping<i8>;
    let mut _4: std::num::Wrapping<i8>;
    let mut _5: std::num::Wrapping<i8>;
    let mut _6: usize;
    let mut _7: &std::num::Wrapping<i8>;
    let _8: std::num::Wrapping<i8>;
    let _9: &std::num::Wrapping<i8>;
    let _10: &std::num::Wrapping<i8>;
    let mut _11: bool;
    let mut _12: bool;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _17: &std::num::Wrapping<i16>;
    let _18: std::num::Wrapping<i16>;
    let mut _19: std::num::Wrapping<i16>;
    let mut _20: std::num::Wrapping<i16>;
    let mut _21: usize;
    let mut _22: &std::num::Wrapping<i16>;
    let _23: std::num::Wrapping<i16>;
    let _24: &std::num::Wrapping<i16>;
    let _25: &std::num::Wrapping<i16>;
    let mut _26: bool;
    let mut _27: bool;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _32: &std::num::Wrapping<i32>;
    let _33: std::num::Wrapping<i32>;
    let mut _34: std::num::Wrapping<i32>;
    let mut _35: std::num::Wrapping<i32>;
    let mut _36: usize;
    let mut _37: &std::num::Wrapping<i32>;
    let _38: std::num::Wrapping<i32>;
    let _39: &std::num::Wrapping<i32>;
    let _40: &std::num::Wrapping<i32>;
    let mut _41: bool;
    let mut _42: bool;
    let _44: !;
    let mut _45: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _46: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _47: &std::num::Wrapping<i64>;
    let _48: std::num::Wrapping<i64>;
    let mut _49: std::num::Wrapping<i64>;
    let mut _50: std::num::Wrapping<i64>;
    let mut _51: usize;
    let mut _52: &std::num::Wrapping<i64>;
    let _53: std::num::Wrapping<i64>;
    let _54: &std::num::Wrapping<i64>;
    let _55: &std::num::Wrapping<i64>;
    let mut _56: bool;
    let mut _57: bool;
    let _59: !;
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _61: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _62: &std::num::Wrapping<isize>;
    let _63: std::num::Wrapping<isize>;
    let mut _64: std::num::Wrapping<isize>;
    let mut _65: std::num::Wrapping<isize>;
    let mut _66: usize;
    let mut _67: &std::num::Wrapping<isize>;
    let _68: std::num::Wrapping<isize>;
    let _69: &std::num::Wrapping<isize>;
    let _70: &std::num::Wrapping<isize>;
    let mut _71: bool;
    let mut _72: bool;
    let _74: !;
    let mut _75: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _76: (&std::num::Wrapping<u8>, &std::num::Wrapping<u8>);
    let mut _77: &std::num::Wrapping<u8>;
    let _78: std::num::Wrapping<u8>;
    let mut _79: std::num::Wrapping<u8>;
    let mut _80: std::num::Wrapping<u8>;
    let mut _81: usize;
    let mut _82: &std::num::Wrapping<u8>;
    let _83: std::num::Wrapping<u8>;
    let mut _84: u8;
    let _85: &std::num::Wrapping<u8>;
    let _86: &std::num::Wrapping<u8>;
    let mut _87: bool;
    let mut _88: bool;
    let _90: !;
    let mut _91: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _92: (&std::num::Wrapping<u16>, &std::num::Wrapping<u16>);
    let mut _93: &std::num::Wrapping<u16>;
    let _94: std::num::Wrapping<u16>;
    let mut _95: std::num::Wrapping<u16>;
    let mut _96: std::num::Wrapping<u16>;
    let mut _97: usize;
    let mut _98: &std::num::Wrapping<u16>;
    let _99: std::num::Wrapping<u16>;
    let mut _100: u16;
    let _101: &std::num::Wrapping<u16>;
    let _102: &std::num::Wrapping<u16>;
    let mut _103: bool;
    let mut _104: bool;
    let _106: !;
    let mut _107: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _108: (&std::num::Wrapping<u32>, &std::num::Wrapping<u32>);
    let mut _109: &std::num::Wrapping<u32>;
    let _110: std::num::Wrapping<u32>;
    let mut _111: std::num::Wrapping<u32>;
    let mut _112: std::num::Wrapping<u32>;
    let mut _113: usize;
    let mut _114: &std::num::Wrapping<u32>;
    let _115: std::num::Wrapping<u32>;
    let mut _116: u32;
    let _117: &std::num::Wrapping<u32>;
    let _118: &std::num::Wrapping<u32>;
    let mut _119: bool;
    let mut _120: bool;
    let _122: !;
    let mut _123: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _124: (&std::num::Wrapping<u64>, &std::num::Wrapping<u64>);
    let mut _125: &std::num::Wrapping<u64>;
    let _126: std::num::Wrapping<u64>;
    let mut _127: std::num::Wrapping<u64>;
    let mut _128: std::num::Wrapping<u64>;
    let mut _129: usize;
    let mut _130: &std::num::Wrapping<u64>;
    let _131: std::num::Wrapping<u64>;
    let mut _132: u64;
    let _133: &std::num::Wrapping<u64>;
    let _134: &std::num::Wrapping<u64>;
    let mut _135: bool;
    let mut _136: bool;
    let _138: !;
    let mut _139: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _140: (&std::num::Wrapping<usize>, &std::num::Wrapping<usize>);
    let mut _141: &std::num::Wrapping<usize>;
    let _142: std::num::Wrapping<usize>;
    let mut _143: std::num::Wrapping<usize>;
    let mut _144: std::num::Wrapping<usize>;
    let mut _145: usize;
    let mut _146: &std::num::Wrapping<usize>;
    let _147: std::num::Wrapping<usize>;
    let mut _148: usize;
    let _149: &std::num::Wrapping<usize>;
    let _150: &std::num::Wrapping<usize>;
    let mut _151: bool;
    let mut _152: bool;
    let _154: !;
    let mut _155: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _156: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _157: &std::num::Wrapping<i8>;
    let _158: std::num::Wrapping<i8>;
    let mut _159: std::num::Wrapping<i8>;
    let mut _160: std::num::Wrapping<i8>;
    let mut _161: usize;
    let mut _162: &std::num::Wrapping<i8>;
    let _163: std::num::Wrapping<i8>;
    let mut _164: i8;
    let mut _165: bool;
    let mut _166: bool;
    let mut _167: bool;
    let mut _168: bool;
    let _169: &std::num::Wrapping<i8>;
    let _170: &std::num::Wrapping<i8>;
    let mut _171: bool;
    let mut _172: bool;
    let _174: !;
    let mut _175: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _176: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _177: &std::num::Wrapping<i16>;
    let _178: std::num::Wrapping<i16>;
    let mut _179: std::num::Wrapping<i16>;
    let mut _180: std::num::Wrapping<i16>;
    let mut _181: usize;
    let mut _182: &std::num::Wrapping<i16>;
    let _183: std::num::Wrapping<i16>;
    let mut _184: i16;
    let mut _185: bool;
    let mut _186: bool;
    let mut _187: bool;
    let mut _188: bool;
    let _189: &std::num::Wrapping<i16>;
    let _190: &std::num::Wrapping<i16>;
    let mut _191: bool;
    let mut _192: bool;
    let _194: !;
    let mut _195: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _196: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _197: &std::num::Wrapping<i32>;
    let _198: std::num::Wrapping<i32>;
    let mut _199: std::num::Wrapping<i32>;
    let mut _200: std::num::Wrapping<i32>;
    let mut _201: usize;
    let mut _202: &std::num::Wrapping<i32>;
    let _203: std::num::Wrapping<i32>;
    let mut _204: i32;
    let mut _205: bool;
    let mut _206: bool;
    let mut _207: bool;
    let mut _208: bool;
    let _209: &std::num::Wrapping<i32>;
    let _210: &std::num::Wrapping<i32>;
    let mut _211: bool;
    let mut _212: bool;
    let _214: !;
    let mut _215: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _216: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _217: &std::num::Wrapping<i64>;
    let _218: std::num::Wrapping<i64>;
    let mut _219: std::num::Wrapping<i64>;
    let mut _220: std::num::Wrapping<i64>;
    let mut _221: usize;
    let mut _222: &std::num::Wrapping<i64>;
    let _223: std::num::Wrapping<i64>;
    let mut _224: i64;
    let mut _225: bool;
    let mut _226: bool;
    let mut _227: bool;
    let mut _228: bool;
    let _229: &std::num::Wrapping<i64>;
    let _230: &std::num::Wrapping<i64>;
    let mut _231: bool;
    let mut _232: bool;
    let _234: !;
    let mut _235: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _236: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _237: &std::num::Wrapping<isize>;
    let _238: std::num::Wrapping<isize>;
    let mut _239: std::num::Wrapping<isize>;
    let mut _240: std::num::Wrapping<isize>;
    let mut _241: usize;
    let mut _242: &std::num::Wrapping<isize>;
    let _243: std::num::Wrapping<isize>;
    let mut _244: isize;
    let mut _245: bool;
    let mut _246: bool;
    let mut _247: bool;
    let mut _248: bool;
    let _249: &std::num::Wrapping<isize>;
    let _250: &std::num::Wrapping<isize>;
    let mut _251: bool;
    let mut _252: bool;
    let _254: !;
    let mut _255: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _256: (&std::num::Wrapping<u8>, &std::num::Wrapping<u8>);
    let mut _257: &std::num::Wrapping<u8>;
    let _258: std::num::Wrapping<u8>;
    let mut _259: std::num::Wrapping<u8>;
    let mut _260: std::num::Wrapping<u8>;
    let mut _261: usize;
    let mut _262: &std::num::Wrapping<u8>;
    let _263: std::num::Wrapping<u8>;
    let mut _264: u8;
    let mut _265: bool;
    let _266: &std::num::Wrapping<u8>;
    let _267: &std::num::Wrapping<u8>;
    let mut _268: bool;
    let mut _269: bool;
    let _271: !;
    let mut _272: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _273: (&std::num::Wrapping<u16>, &std::num::Wrapping<u16>);
    let mut _274: &std::num::Wrapping<u16>;
    let _275: std::num::Wrapping<u16>;
    let mut _276: std::num::Wrapping<u16>;
    let mut _277: std::num::Wrapping<u16>;
    let mut _278: usize;
    let mut _279: &std::num::Wrapping<u16>;
    let _280: std::num::Wrapping<u16>;
    let mut _281: u16;
    let mut _282: bool;
    let _283: &std::num::Wrapping<u16>;
    let _284: &std::num::Wrapping<u16>;
    let mut _285: bool;
    let mut _286: bool;
    let _288: !;
    let mut _289: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _290: (&std::num::Wrapping<u32>, &std::num::Wrapping<u32>);
    let mut _291: &std::num::Wrapping<u32>;
    let _292: std::num::Wrapping<u32>;
    let mut _293: std::num::Wrapping<u32>;
    let mut _294: std::num::Wrapping<u32>;
    let mut _295: usize;
    let mut _296: &std::num::Wrapping<u32>;
    let _297: std::num::Wrapping<u32>;
    let mut _298: u32;
    let mut _299: bool;
    let _300: &std::num::Wrapping<u32>;
    let _301: &std::num::Wrapping<u32>;
    let mut _302: bool;
    let mut _303: bool;
    let _305: !;
    let mut _306: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _307: (&std::num::Wrapping<u64>, &std::num::Wrapping<u64>);
    let mut _308: &std::num::Wrapping<u64>;
    let _309: std::num::Wrapping<u64>;
    let mut _310: std::num::Wrapping<u64>;
    let mut _311: std::num::Wrapping<u64>;
    let mut _312: usize;
    let mut _313: &std::num::Wrapping<u64>;
    let _314: std::num::Wrapping<u64>;
    let mut _315: u64;
    let mut _316: bool;
    let _317: &std::num::Wrapping<u64>;
    let _318: &std::num::Wrapping<u64>;
    let mut _319: bool;
    let mut _320: bool;
    let _322: !;
    let mut _323: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _324: (&std::num::Wrapping<usize>, &std::num::Wrapping<usize>);
    let mut _325: &std::num::Wrapping<usize>;
    let _326: std::num::Wrapping<usize>;
    let mut _327: std::num::Wrapping<usize>;
    let mut _328: std::num::Wrapping<usize>;
    let mut _329: usize;
    let mut _330: &std::num::Wrapping<usize>;
    let _331: std::num::Wrapping<usize>;
    let mut _332: usize;
    let mut _333: bool;
    let _334: &std::num::Wrapping<usize>;
    let _335: &std::num::Wrapping<usize>;
    let mut _336: bool;
    let mut _337: bool;
    let _339: !;
    let mut _340: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _9;
        debug right_val => _10;
        let _13: core::panicking::AssertKind;
        scope 2 {
            debug kind => _13;
        }
    }
    scope 3 {
        debug left_val => _24;
        debug right_val => _25;
        let _28: core::panicking::AssertKind;
        scope 4 {
            debug kind => _28;
        }
    }
    scope 5 {
        debug left_val => _39;
        debug right_val => _40;
        let _43: core::panicking::AssertKind;
        scope 6 {
            debug kind => _43;
        }
    }
    scope 7 {
        debug left_val => _54;
        debug right_val => _55;
        let _58: core::panicking::AssertKind;
        scope 8 {
            debug kind => _58;
        }
    }
    scope 9 {
        debug left_val => _69;
        debug right_val => _70;
        let _73: core::panicking::AssertKind;
        scope 10 {
            debug kind => _73;
        }
    }
    scope 11 {
        debug left_val => _85;
        debug right_val => _86;
        let _89: core::panicking::AssertKind;
        scope 12 {
            debug kind => _89;
        }
    }
    scope 13 {
        debug left_val => _101;
        debug right_val => _102;
        let _105: core::panicking::AssertKind;
        scope 14 {
            debug kind => _105;
        }
    }
    scope 15 {
        debug left_val => _117;
        debug right_val => _118;
        let _121: core::panicking::AssertKind;
        scope 16 {
            debug kind => _121;
        }
    }
    scope 17 {
        debug left_val => _133;
        debug right_val => _134;
        let _137: core::panicking::AssertKind;
        scope 18 {
            debug kind => _137;
        }
    }
    scope 19 {
        debug left_val => _149;
        debug right_val => _150;
        let _153: core::panicking::AssertKind;
        scope 20 {
            debug kind => _153;
        }
    }
    scope 21 {
        debug left_val => _169;
        debug right_val => _170;
        let _173: core::panicking::AssertKind;
        scope 22 {
            debug kind => _173;
        }
    }
    scope 23 {
        debug left_val => _189;
        debug right_val => _190;
        let _193: core::panicking::AssertKind;
        scope 24 {
            debug kind => _193;
        }
    }
    scope 25 {
        debug left_val => _209;
        debug right_val => _210;
        let _213: core::panicking::AssertKind;
        scope 26 {
            debug kind => _213;
        }
    }
    scope 27 {
        debug left_val => _229;
        debug right_val => _230;
        let _233: core::panicking::AssertKind;
        scope 28 {
            debug kind => _233;
        }
    }
    scope 29 {
        debug left_val => _249;
        debug right_val => _250;
        let _253: core::panicking::AssertKind;
        scope 30 {
            debug kind => _253;
        }
    }
    scope 31 {
        debug left_val => _266;
        debug right_val => _267;
        let _270: core::panicking::AssertKind;
        scope 32 {
            debug kind => _270;
        }
    }
    scope 33 {
        debug left_val => _283;
        debug right_val => _284;
        let _287: core::panicking::AssertKind;
        scope 34 {
            debug kind => _287;
        }
    }
    scope 35 {
        debug left_val => _300;
        debug right_val => _301;
        let _304: core::panicking::AssertKind;
        scope 36 {
            debug kind => _304;
        }
    }
    scope 37 {
        debug left_val => _317;
        debug right_val => _318;
        let _321: core::panicking::AssertKind;
        scope 38 {
            debug kind => _321;
        }
    }
    scope 39 {
        debug left_val => _334;
        debug right_val => _335;
        let _338: core::panicking::AssertKind;
        scope 40 {
            debug kind => _338;
        }
    }

    bb0: {
        _5 = Wrapping::<i8>(const _);
        _6 = Add(const _, const 1_usize);
        _4 = <Wrapping<i8> as Shl<usize>>::shl(move _5, move _6) -> bb1;
    }

    bb1: {
        _3 = test::black_box::<Wrapping<i8>>(move _4) -> bb2;
    }

    bb2: {
        _2 = &_3;
        _8 = Wrapping::<i8>(const -2_i8);
        _7 = &_8;
        _1 = (move _2, move _7);
        _9 = (_1.0: &std::num::Wrapping<i8>);
        _10 = (_1.1: &std::num::Wrapping<i8>);
        _12 = <Wrapping<i8> as PartialEq>::eq(_9, _10) -> bb3;
    }

    bb3: {
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _13, _9, _10, move _15);
    }

    bb5: {
        _20 = Wrapping::<i16>(const _);
        _21 = Add(const _, const 1_usize);
        _19 = <Wrapping<i16> as Shl<usize>>::shl(move _20, move _21) -> bb6;
    }

    bb6: {
        _18 = test::black_box::<Wrapping<i16>>(move _19) -> bb7;
    }

    bb7: {
        _17 = &_18;
        _23 = Wrapping::<i16>(const -2_i16);
        _22 = &_23;
        _16 = (move _17, move _22);
        _24 = (_16.0: &std::num::Wrapping<i16>);
        _25 = (_16.1: &std::num::Wrapping<i16>);
        _27 = <Wrapping<i16> as PartialEq>::eq(_24, _25) -> bb8;
    }

    bb8: {
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _28, _24, _25, move _30);
    }

    bb10: {
        _35 = Wrapping::<i32>(const _);
        _36 = Add(const _, const 1_usize);
        _34 = <Wrapping<i32> as Shl<usize>>::shl(move _35, move _36) -> bb11;
    }

    bb11: {
        _33 = test::black_box::<Wrapping<i32>>(move _34) -> bb12;
    }

    bb12: {
        _32 = &_33;
        _38 = Wrapping::<i32>(const -2_i32);
        _37 = &_38;
        _31 = (move _32, move _37);
        _39 = (_31.0: &std::num::Wrapping<i32>);
        _40 = (_31.1: &std::num::Wrapping<i32>);
        _42 = <Wrapping<i32> as PartialEq>::eq(_39, _40) -> bb13;
    }

    bb13: {
        _41 = Not(move _42);
        switchInt(move _41) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _43 = core::panicking::AssertKind::Eq;
        _45 = Option::<Arguments<'_>>::None;
        _44 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _43, _39, _40, move _45);
    }

    bb15: {
        _50 = Wrapping::<i64>(const _);
        _51 = Add(const _, const 1_usize);
        _49 = <Wrapping<i64> as Shl<usize>>::shl(move _50, move _51) -> bb16;
    }

    bb16: {
        _48 = test::black_box::<Wrapping<i64>>(move _49) -> bb17;
    }

    bb17: {
        _47 = &_48;
        _53 = Wrapping::<i64>(const -2_i64);
        _52 = &_53;
        _46 = (move _47, move _52);
        _54 = (_46.0: &std::num::Wrapping<i64>);
        _55 = (_46.1: &std::num::Wrapping<i64>);
        _57 = <Wrapping<i64> as PartialEq>::eq(_54, _55) -> bb18;
    }

    bb18: {
        _56 = Not(move _57);
        switchInt(move _56) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _58 = core::panicking::AssertKind::Eq;
        _60 = Option::<Arguments<'_>>::None;
        _59 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _58, _54, _55, move _60);
    }

    bb20: {
        _65 = Wrapping::<isize>(const _);
        _66 = Add(const _, const 1_usize);
        _64 = <Wrapping<isize> as Shl<usize>>::shl(move _65, move _66) -> bb21;
    }

    bb21: {
        _63 = test::black_box::<Wrapping<isize>>(move _64) -> bb22;
    }

    bb22: {
        _62 = &_63;
        _68 = Wrapping::<isize>(const -2_isize);
        _67 = &_68;
        _61 = (move _62, move _67);
        _69 = (_61.0: &std::num::Wrapping<isize>);
        _70 = (_61.1: &std::num::Wrapping<isize>);
        _72 = <Wrapping<isize> as PartialEq>::eq(_69, _70) -> bb23;
    }

    bb23: {
        _71 = Not(move _72);
        switchInt(move _71) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _73 = core::panicking::AssertKind::Eq;
        _75 = Option::<Arguments<'_>>::None;
        _74 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _73, _69, _70, move _75);
    }

    bb25: {
        _80 = Wrapping::<u8>(const _);
        _81 = Add(const _, const 1_usize);
        _79 = <Wrapping<u8> as Shl<usize>>::shl(move _80, move _81) -> bb26;
    }

    bb26: {
        _78 = test::black_box::<Wrapping<u8>>(move _79) -> bb27;
    }

    bb27: {
        _77 = &_78;
        _84 = Sub(const _, const 1_u8);
        _83 = Wrapping::<u8>(move _84);
        _82 = &_83;
        _76 = (move _77, move _82);
        _85 = (_76.0: &std::num::Wrapping<u8>);
        _86 = (_76.1: &std::num::Wrapping<u8>);
        _88 = <Wrapping<u8> as PartialEq>::eq(_85, _86) -> bb28;
    }

    bb28: {
        _87 = Not(move _88);
        switchInt(move _87) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _89 = core::panicking::AssertKind::Eq;
        _91 = Option::<Arguments<'_>>::None;
        _90 = core::panicking::assert_failed::<Wrapping<u8>, Wrapping<u8>>(move _89, _85, _86, move _91);
    }

    bb30: {
        _96 = Wrapping::<u16>(const _);
        _97 = Add(const _, const 1_usize);
        _95 = <Wrapping<u16> as Shl<usize>>::shl(move _96, move _97) -> bb31;
    }

    bb31: {
        _94 = test::black_box::<Wrapping<u16>>(move _95) -> bb32;
    }

    bb32: {
        _93 = &_94;
        _100 = Sub(const _, const 1_u16);
        _99 = Wrapping::<u16>(move _100);
        _98 = &_99;
        _92 = (move _93, move _98);
        _101 = (_92.0: &std::num::Wrapping<u16>);
        _102 = (_92.1: &std::num::Wrapping<u16>);
        _104 = <Wrapping<u16> as PartialEq>::eq(_101, _102) -> bb33;
    }

    bb33: {
        _103 = Not(move _104);
        switchInt(move _103) -> [0: bb35, otherwise: bb34];
    }

    bb34: {
        _105 = core::panicking::AssertKind::Eq;
        _107 = Option::<Arguments<'_>>::None;
        _106 = core::panicking::assert_failed::<Wrapping<u16>, Wrapping<u16>>(move _105, _101, _102, move _107);
    }

    bb35: {
        _112 = Wrapping::<u32>(const _);
        _113 = Add(const _, const 1_usize);
        _111 = <Wrapping<u32> as Shl<usize>>::shl(move _112, move _113) -> bb36;
    }

    bb36: {
        _110 = test::black_box::<Wrapping<u32>>(move _111) -> bb37;
    }

    bb37: {
        _109 = &_110;
        _116 = Sub(const _, const 1_u32);
        _115 = Wrapping::<u32>(move _116);
        _114 = &_115;
        _108 = (move _109, move _114);
        _117 = (_108.0: &std::num::Wrapping<u32>);
        _118 = (_108.1: &std::num::Wrapping<u32>);
        _120 = <Wrapping<u32> as PartialEq>::eq(_117, _118) -> bb38;
    }

    bb38: {
        _119 = Not(move _120);
        switchInt(move _119) -> [0: bb40, otherwise: bb39];
    }

    bb39: {
        _121 = core::panicking::AssertKind::Eq;
        _123 = Option::<Arguments<'_>>::None;
        _122 = core::panicking::assert_failed::<Wrapping<u32>, Wrapping<u32>>(move _121, _117, _118, move _123);
    }

    bb40: {
        _128 = Wrapping::<u64>(const _);
        _129 = Add(const _, const 1_usize);
        _127 = <Wrapping<u64> as Shl<usize>>::shl(move _128, move _129) -> bb41;
    }

    bb41: {
        _126 = test::black_box::<Wrapping<u64>>(move _127) -> bb42;
    }

    bb42: {
        _125 = &_126;
        _132 = Sub(const _, const 1_u64);
        _131 = Wrapping::<u64>(move _132);
        _130 = &_131;
        _124 = (move _125, move _130);
        _133 = (_124.0: &std::num::Wrapping<u64>);
        _134 = (_124.1: &std::num::Wrapping<u64>);
        _136 = <Wrapping<u64> as PartialEq>::eq(_133, _134) -> bb43;
    }

    bb43: {
        _135 = Not(move _136);
        switchInt(move _135) -> [0: bb45, otherwise: bb44];
    }

    bb44: {
        _137 = core::panicking::AssertKind::Eq;
        _139 = Option::<Arguments<'_>>::None;
        _138 = core::panicking::assert_failed::<Wrapping<u64>, Wrapping<u64>>(move _137, _133, _134, move _139);
    }

    bb45: {
        _144 = Wrapping::<usize>(const _);
        _145 = Add(const _, const 1_usize);
        _143 = <Wrapping<usize> as Shl<usize>>::shl(move _144, move _145) -> bb46;
    }

    bb46: {
        _142 = test::black_box::<Wrapping<usize>>(move _143) -> bb47;
    }

    bb47: {
        _141 = &_142;
        _148 = Sub(const _, const 1_usize);
        _147 = Wrapping::<usize>(move _148);
        _146 = &_147;
        _140 = (move _141, move _146);
        _149 = (_140.0: &std::num::Wrapping<usize>);
        _150 = (_140.1: &std::num::Wrapping<usize>);
        _152 = <Wrapping<usize> as PartialEq>::eq(_149, _150) -> bb48;
    }

    bb48: {
        _151 = Not(move _152);
        switchInt(move _151) -> [0: bb50, otherwise: bb49];
    }

    bb49: {
        _153 = core::panicking::AssertKind::Eq;
        _155 = Option::<Arguments<'_>>::None;
        _154 = core::panicking::assert_failed::<Wrapping<usize>, Wrapping<usize>>(move _153, _149, _150, move _155);
    }

    bb50: {
        _160 = Wrapping::<i8>(const _);
        _161 = Add(const _, const 1_usize);
        _159 = <Wrapping<i8> as Shr<usize>>::shr(move _160, move _161) -> bb51;
    }

    bb51: {
        _158 = test::black_box::<Wrapping<i8>>(move _159) -> bb52;
    }

    bb52: {
        _157 = &_158;
        _165 = Eq(const 2_i8, const 0_i8);
        assert(!move _165, "attempt to divide `{}` by zero", const _) -> bb53;
    }

    bb53: {
        _166 = Eq(const 2_i8, const -1_i8);
        _167 = Eq(const _, const i8::MIN);
        _168 = BitAnd(move _166, move _167);
        assert(!move _168, "attempt to compute `{} / {}`, which would overflow", const _, const 2_i8) -> bb54;
    }

    bb54: {
        _164 = Div(const _, const 2_i8);
        _163 = Wrapping::<i8>(move _164);
        _162 = &_163;
        _156 = (move _157, move _162);
        _169 = (_156.0: &std::num::Wrapping<i8>);
        _170 = (_156.1: &std::num::Wrapping<i8>);
        _172 = <Wrapping<i8> as PartialEq>::eq(_169, _170) -> bb55;
    }

    bb55: {
        _171 = Not(move _172);
        switchInt(move _171) -> [0: bb57, otherwise: bb56];
    }

    bb56: {
        _173 = core::panicking::AssertKind::Eq;
        _175 = Option::<Arguments<'_>>::None;
        _174 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _173, _169, _170, move _175);
    }

    bb57: {
        _180 = Wrapping::<i16>(const _);
        _181 = Add(const _, const 1_usize);
        _179 = <Wrapping<i16> as Shr<usize>>::shr(move _180, move _181) -> bb58;
    }

    bb58: {
        _178 = test::black_box::<Wrapping<i16>>(move _179) -> bb59;
    }

    bb59: {
        _177 = &_178;
        _185 = Eq(const 2_i16, const 0_i16);
        assert(!move _185, "attempt to divide `{}` by zero", const _) -> bb60;
    }

    bb60: {
        _186 = Eq(const 2_i16, const -1_i16);
        _187 = Eq(const _, const i16::MIN);
        _188 = BitAnd(move _186, move _187);
        assert(!move _188, "attempt to compute `{} / {}`, which would overflow", const _, const 2_i16) -> bb61;
    }

    bb61: {
        _184 = Div(const _, const 2_i16);
        _183 = Wrapping::<i16>(move _184);
        _182 = &_183;
        _176 = (move _177, move _182);
        _189 = (_176.0: &std::num::Wrapping<i16>);
        _190 = (_176.1: &std::num::Wrapping<i16>);
        _192 = <Wrapping<i16> as PartialEq>::eq(_189, _190) -> bb62;
    }

    bb62: {
        _191 = Not(move _192);
        switchInt(move _191) -> [0: bb64, otherwise: bb63];
    }

    bb63: {
        _193 = core::panicking::AssertKind::Eq;
        _195 = Option::<Arguments<'_>>::None;
        _194 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _193, _189, _190, move _195);
    }

    bb64: {
        _200 = Wrapping::<i32>(const _);
        _201 = Add(const _, const 1_usize);
        _199 = <Wrapping<i32> as Shr<usize>>::shr(move _200, move _201) -> bb65;
    }

    bb65: {
        _198 = test::black_box::<Wrapping<i32>>(move _199) -> bb66;
    }

    bb66: {
        _197 = &_198;
        _205 = Eq(const 2_i32, const 0_i32);
        assert(!move _205, "attempt to divide `{}` by zero", const _) -> bb67;
    }

    bb67: {
        _206 = Eq(const 2_i32, const -1_i32);
        _207 = Eq(const _, const i32::MIN);
        _208 = BitAnd(move _206, move _207);
        assert(!move _208, "attempt to compute `{} / {}`, which would overflow", const _, const 2_i32) -> bb68;
    }

    bb68: {
        _204 = Div(const _, const 2_i32);
        _203 = Wrapping::<i32>(move _204);
        _202 = &_203;
        _196 = (move _197, move _202);
        _209 = (_196.0: &std::num::Wrapping<i32>);
        _210 = (_196.1: &std::num::Wrapping<i32>);
        _212 = <Wrapping<i32> as PartialEq>::eq(_209, _210) -> bb69;
    }

    bb69: {
        _211 = Not(move _212);
        switchInt(move _211) -> [0: bb71, otherwise: bb70];
    }

    bb70: {
        _213 = core::panicking::AssertKind::Eq;
        _215 = Option::<Arguments<'_>>::None;
        _214 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _213, _209, _210, move _215);
    }

    bb71: {
        _220 = Wrapping::<i64>(const _);
        _221 = Add(const _, const 1_usize);
        _219 = <Wrapping<i64> as Shr<usize>>::shr(move _220, move _221) -> bb72;
    }

    bb72: {
        _218 = test::black_box::<Wrapping<i64>>(move _219) -> bb73;
    }

    bb73: {
        _217 = &_218;
        _225 = Eq(const 2_i64, const 0_i64);
        assert(!move _225, "attempt to divide `{}` by zero", const _) -> bb74;
    }

    bb74: {
        _226 = Eq(const 2_i64, const -1_i64);
        _227 = Eq(const _, const i64::MIN);
        _228 = BitAnd(move _226, move _227);
        assert(!move _228, "attempt to compute `{} / {}`, which would overflow", const _, const 2_i64) -> bb75;
    }

    bb75: {
        _224 = Div(const _, const 2_i64);
        _223 = Wrapping::<i64>(move _224);
        _222 = &_223;
        _216 = (move _217, move _222);
        _229 = (_216.0: &std::num::Wrapping<i64>);
        _230 = (_216.1: &std::num::Wrapping<i64>);
        _232 = <Wrapping<i64> as PartialEq>::eq(_229, _230) -> bb76;
    }

    bb76: {
        _231 = Not(move _232);
        switchInt(move _231) -> [0: bb78, otherwise: bb77];
    }

    bb77: {
        _233 = core::panicking::AssertKind::Eq;
        _235 = Option::<Arguments<'_>>::None;
        _234 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _233, _229, _230, move _235);
    }

    bb78: {
        _240 = Wrapping::<isize>(const _);
        _241 = Add(const _, const 1_usize);
        _239 = <Wrapping<isize> as Shr<usize>>::shr(move _240, move _241) -> bb79;
    }

    bb79: {
        _238 = test::black_box::<Wrapping<isize>>(move _239) -> bb80;
    }

    bb80: {
        _237 = &_238;
        _245 = Eq(const 2_isize, const 0_isize);
        assert(!move _245, "attempt to divide `{}` by zero", const _) -> bb81;
    }

    bb81: {
        _246 = Eq(const 2_isize, const -1_isize);
        _247 = Eq(const _, const isize::MIN);
        _248 = BitAnd(move _246, move _247);
        assert(!move _248, "attempt to compute `{} / {}`, which would overflow", const _, const 2_isize) -> bb82;
    }

    bb82: {
        _244 = Div(const _, const 2_isize);
        _243 = Wrapping::<isize>(move _244);
        _242 = &_243;
        _236 = (move _237, move _242);
        _249 = (_236.0: &std::num::Wrapping<isize>);
        _250 = (_236.1: &std::num::Wrapping<isize>);
        _252 = <Wrapping<isize> as PartialEq>::eq(_249, _250) -> bb83;
    }

    bb83: {
        _251 = Not(move _252);
        switchInt(move _251) -> [0: bb85, otherwise: bb84];
    }

    bb84: {
        _253 = core::panicking::AssertKind::Eq;
        _255 = Option::<Arguments<'_>>::None;
        _254 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _253, _249, _250, move _255);
    }

    bb85: {
        _260 = Wrapping::<u8>(const _);
        _261 = Add(const _, const 1_usize);
        _259 = <Wrapping<u8> as Shr<usize>>::shr(move _260, move _261) -> bb86;
    }

    bb86: {
        _258 = test::black_box::<Wrapping<u8>>(move _259) -> bb87;
    }

    bb87: {
        _257 = &_258;
        _265 = Eq(const 2_u8, const 0_u8);
        assert(!move _265, "attempt to divide `{}` by zero", const _) -> bb88;
    }

    bb88: {
        _264 = Div(const _, const 2_u8);
        _263 = Wrapping::<u8>(move _264);
        _262 = &_263;
        _256 = (move _257, move _262);
        _266 = (_256.0: &std::num::Wrapping<u8>);
        _267 = (_256.1: &std::num::Wrapping<u8>);
        _269 = <Wrapping<u8> as PartialEq>::eq(_266, _267) -> bb89;
    }

    bb89: {
        _268 = Not(move _269);
        switchInt(move _268) -> [0: bb91, otherwise: bb90];
    }

    bb90: {
        _270 = core::panicking::AssertKind::Eq;
        _272 = Option::<Arguments<'_>>::None;
        _271 = core::panicking::assert_failed::<Wrapping<u8>, Wrapping<u8>>(move _270, _266, _267, move _272);
    }

    bb91: {
        _277 = Wrapping::<u16>(const _);
        _278 = Add(const _, const 1_usize);
        _276 = <Wrapping<u16> as Shr<usize>>::shr(move _277, move _278) -> bb92;
    }

    bb92: {
        _275 = test::black_box::<Wrapping<u16>>(move _276) -> bb93;
    }

    bb93: {
        _274 = &_275;
        _282 = Eq(const 2_u16, const 0_u16);
        assert(!move _282, "attempt to divide `{}` by zero", const _) -> bb94;
    }

    bb94: {
        _281 = Div(const _, const 2_u16);
        _280 = Wrapping::<u16>(move _281);
        _279 = &_280;
        _273 = (move _274, move _279);
        _283 = (_273.0: &std::num::Wrapping<u16>);
        _284 = (_273.1: &std::num::Wrapping<u16>);
        _286 = <Wrapping<u16> as PartialEq>::eq(_283, _284) -> bb95;
    }

    bb95: {
        _285 = Not(move _286);
        switchInt(move _285) -> [0: bb97, otherwise: bb96];
    }

    bb96: {
        _287 = core::panicking::AssertKind::Eq;
        _289 = Option::<Arguments<'_>>::None;
        _288 = core::panicking::assert_failed::<Wrapping<u16>, Wrapping<u16>>(move _287, _283, _284, move _289);
    }

    bb97: {
        _294 = Wrapping::<u32>(const _);
        _295 = Add(const _, const 1_usize);
        _293 = <Wrapping<u32> as Shr<usize>>::shr(move _294, move _295) -> bb98;
    }

    bb98: {
        _292 = test::black_box::<Wrapping<u32>>(move _293) -> bb99;
    }

    bb99: {
        _291 = &_292;
        _299 = Eq(const 2_u32, const 0_u32);
        assert(!move _299, "attempt to divide `{}` by zero", const _) -> bb100;
    }

    bb100: {
        _298 = Div(const _, const 2_u32);
        _297 = Wrapping::<u32>(move _298);
        _296 = &_297;
        _290 = (move _291, move _296);
        _300 = (_290.0: &std::num::Wrapping<u32>);
        _301 = (_290.1: &std::num::Wrapping<u32>);
        _303 = <Wrapping<u32> as PartialEq>::eq(_300, _301) -> bb101;
    }

    bb101: {
        _302 = Not(move _303);
        switchInt(move _302) -> [0: bb103, otherwise: bb102];
    }

    bb102: {
        _304 = core::panicking::AssertKind::Eq;
        _306 = Option::<Arguments<'_>>::None;
        _305 = core::panicking::assert_failed::<Wrapping<u32>, Wrapping<u32>>(move _304, _300, _301, move _306);
    }

    bb103: {
        _311 = Wrapping::<u64>(const _);
        _312 = Add(const _, const 1_usize);
        _310 = <Wrapping<u64> as Shr<usize>>::shr(move _311, move _312) -> bb104;
    }

    bb104: {
        _309 = test::black_box::<Wrapping<u64>>(move _310) -> bb105;
    }

    bb105: {
        _308 = &_309;
        _316 = Eq(const 2_u64, const 0_u64);
        assert(!move _316, "attempt to divide `{}` by zero", const _) -> bb106;
    }

    bb106: {
        _315 = Div(const _, const 2_u64);
        _314 = Wrapping::<u64>(move _315);
        _313 = &_314;
        _307 = (move _308, move _313);
        _317 = (_307.0: &std::num::Wrapping<u64>);
        _318 = (_307.1: &std::num::Wrapping<u64>);
        _320 = <Wrapping<u64> as PartialEq>::eq(_317, _318) -> bb107;
    }

    bb107: {
        _319 = Not(move _320);
        switchInt(move _319) -> [0: bb109, otherwise: bb108];
    }

    bb108: {
        _321 = core::panicking::AssertKind::Eq;
        _323 = Option::<Arguments<'_>>::None;
        _322 = core::panicking::assert_failed::<Wrapping<u64>, Wrapping<u64>>(move _321, _317, _318, move _323);
    }

    bb109: {
        _328 = Wrapping::<usize>(const _);
        _329 = Add(const _, const 1_usize);
        _327 = <Wrapping<usize> as Shr<usize>>::shr(move _328, move _329) -> bb110;
    }

    bb110: {
        _326 = test::black_box::<Wrapping<usize>>(move _327) -> bb111;
    }

    bb111: {
        _325 = &_326;
        _333 = Eq(const 2_usize, const 0_usize);
        assert(!move _333, "attempt to divide `{}` by zero", const _) -> bb112;
    }

    bb112: {
        _332 = Div(const _, const 2_usize);
        _331 = Wrapping::<usize>(move _332);
        _330 = &_331;
        _324 = (move _325, move _330);
        _334 = (_324.0: &std::num::Wrapping<usize>);
        _335 = (_324.1: &std::num::Wrapping<usize>);
        _337 = <Wrapping<usize> as PartialEq>::eq(_334, _335) -> bb113;
    }

    bb113: {
        _336 = Not(move _337);
        switchInt(move _336) -> [0: bb115, otherwise: bb114];
    }

    bb114: {
        _338 = core::panicking::AssertKind::Eq;
        _340 = Option::<Arguments<'_>>::None;
        _339 = core::panicking::assert_failed::<Wrapping<usize>, Wrapping<usize>>(move _338, _334, _335, move _340);
    }

    bb115: {
        return;
    }
}

fn test_sh_op_assigns() -> () {
    let mut _0: ();
    let mut _1: std::num::Wrapping<i8>;
    let mut _2: std::num::Wrapping<i8>;
    let mut _3: std::num::Wrapping<i8>;
    let _4: ();
    let mut _5: &mut std::num::Wrapping<i8>;
    let mut _6: usize;
    let mut _7: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _8: &std::num::Wrapping<i8>;
    let _9: std::num::Wrapping<i8>;
    let mut _10: std::num::Wrapping<i8>;
    let mut _11: &std::num::Wrapping<i8>;
    let _12: std::num::Wrapping<i8>;
    let mut _15: bool;
    let mut _16: bool;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _20: std::num::Wrapping<i16>;
    let mut _21: std::num::Wrapping<i16>;
    let mut _22: std::num::Wrapping<i16>;
    let _23: ();
    let mut _24: &mut std::num::Wrapping<i16>;
    let mut _25: usize;
    let mut _26: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _27: &std::num::Wrapping<i16>;
    let _28: std::num::Wrapping<i16>;
    let mut _29: std::num::Wrapping<i16>;
    let mut _30: &std::num::Wrapping<i16>;
    let _31: std::num::Wrapping<i16>;
    let mut _34: bool;
    let mut _35: bool;
    let _37: !;
    let mut _38: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _39: std::num::Wrapping<i32>;
    let mut _40: std::num::Wrapping<i32>;
    let mut _41: std::num::Wrapping<i32>;
    let _42: ();
    let mut _43: &mut std::num::Wrapping<i32>;
    let mut _44: usize;
    let mut _45: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _46: &std::num::Wrapping<i32>;
    let _47: std::num::Wrapping<i32>;
    let mut _48: std::num::Wrapping<i32>;
    let mut _49: &std::num::Wrapping<i32>;
    let _50: std::num::Wrapping<i32>;
    let mut _53: bool;
    let mut _54: bool;
    let _56: !;
    let mut _57: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _58: std::num::Wrapping<i64>;
    let mut _59: std::num::Wrapping<i64>;
    let mut _60: std::num::Wrapping<i64>;
    let _61: ();
    let mut _62: &mut std::num::Wrapping<i64>;
    let mut _63: usize;
    let mut _64: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _65: &std::num::Wrapping<i64>;
    let _66: std::num::Wrapping<i64>;
    let mut _67: std::num::Wrapping<i64>;
    let mut _68: &std::num::Wrapping<i64>;
    let _69: std::num::Wrapping<i64>;
    let mut _72: bool;
    let mut _73: bool;
    let _75: !;
    let mut _76: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _77: std::num::Wrapping<isize>;
    let mut _78: std::num::Wrapping<isize>;
    let mut _79: std::num::Wrapping<isize>;
    let _80: ();
    let mut _81: &mut std::num::Wrapping<isize>;
    let mut _82: usize;
    let mut _83: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _84: &std::num::Wrapping<isize>;
    let _85: std::num::Wrapping<isize>;
    let mut _86: std::num::Wrapping<isize>;
    let mut _87: &std::num::Wrapping<isize>;
    let _88: std::num::Wrapping<isize>;
    let mut _91: bool;
    let mut _92: bool;
    let _94: !;
    let mut _95: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _96: std::num::Wrapping<u8>;
    let mut _97: std::num::Wrapping<u8>;
    let mut _98: std::num::Wrapping<u8>;
    let _99: ();
    let mut _100: &mut std::num::Wrapping<u8>;
    let mut _101: usize;
    let mut _102: (&std::num::Wrapping<u8>, &std::num::Wrapping<u8>);
    let mut _103: &std::num::Wrapping<u8>;
    let _104: std::num::Wrapping<u8>;
    let mut _105: std::num::Wrapping<u8>;
    let mut _106: &std::num::Wrapping<u8>;
    let _107: std::num::Wrapping<u8>;
    let mut _108: u8;
    let mut _111: bool;
    let mut _112: bool;
    let _114: !;
    let mut _115: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _116: std::num::Wrapping<u16>;
    let mut _117: std::num::Wrapping<u16>;
    let mut _118: std::num::Wrapping<u16>;
    let _119: ();
    let mut _120: &mut std::num::Wrapping<u16>;
    let mut _121: usize;
    let mut _122: (&std::num::Wrapping<u16>, &std::num::Wrapping<u16>);
    let mut _123: &std::num::Wrapping<u16>;
    let _124: std::num::Wrapping<u16>;
    let mut _125: std::num::Wrapping<u16>;
    let mut _126: &std::num::Wrapping<u16>;
    let _127: std::num::Wrapping<u16>;
    let mut _128: u16;
    let mut _131: bool;
    let mut _132: bool;
    let _134: !;
    let mut _135: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _136: std::num::Wrapping<u32>;
    let mut _137: std::num::Wrapping<u32>;
    let mut _138: std::num::Wrapping<u32>;
    let _139: ();
    let mut _140: &mut std::num::Wrapping<u32>;
    let mut _141: usize;
    let mut _142: (&std::num::Wrapping<u32>, &std::num::Wrapping<u32>);
    let mut _143: &std::num::Wrapping<u32>;
    let _144: std::num::Wrapping<u32>;
    let mut _145: std::num::Wrapping<u32>;
    let mut _146: &std::num::Wrapping<u32>;
    let _147: std::num::Wrapping<u32>;
    let mut _148: u32;
    let mut _151: bool;
    let mut _152: bool;
    let _154: !;
    let mut _155: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _156: std::num::Wrapping<u64>;
    let mut _157: std::num::Wrapping<u64>;
    let mut _158: std::num::Wrapping<u64>;
    let _159: ();
    let mut _160: &mut std::num::Wrapping<u64>;
    let mut _161: usize;
    let mut _162: (&std::num::Wrapping<u64>, &std::num::Wrapping<u64>);
    let mut _163: &std::num::Wrapping<u64>;
    let _164: std::num::Wrapping<u64>;
    let mut _165: std::num::Wrapping<u64>;
    let mut _166: &std::num::Wrapping<u64>;
    let _167: std::num::Wrapping<u64>;
    let mut _168: u64;
    let mut _171: bool;
    let mut _172: bool;
    let _174: !;
    let mut _175: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _176: std::num::Wrapping<usize>;
    let mut _177: std::num::Wrapping<usize>;
    let mut _178: std::num::Wrapping<usize>;
    let _179: ();
    let mut _180: &mut std::num::Wrapping<usize>;
    let mut _181: usize;
    let mut _182: (&std::num::Wrapping<usize>, &std::num::Wrapping<usize>);
    let mut _183: &std::num::Wrapping<usize>;
    let _184: std::num::Wrapping<usize>;
    let mut _185: std::num::Wrapping<usize>;
    let mut _186: &std::num::Wrapping<usize>;
    let _187: std::num::Wrapping<usize>;
    let mut _188: usize;
    let mut _191: bool;
    let mut _192: bool;
    let _194: !;
    let mut _195: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _196: std::num::Wrapping<i8>;
    let mut _197: std::num::Wrapping<i8>;
    let mut _198: std::num::Wrapping<i8>;
    let _199: ();
    let mut _200: &mut std::num::Wrapping<i8>;
    let mut _201: usize;
    let mut _202: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _203: &std::num::Wrapping<i8>;
    let _204: std::num::Wrapping<i8>;
    let mut _205: std::num::Wrapping<i8>;
    let mut _206: &std::num::Wrapping<i8>;
    let _207: std::num::Wrapping<i8>;
    let mut _208: i8;
    let mut _209: bool;
    let mut _210: bool;
    let mut _211: bool;
    let mut _212: bool;
    let mut _215: bool;
    let mut _216: bool;
    let _218: !;
    let mut _219: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _220: std::num::Wrapping<i16>;
    let mut _221: std::num::Wrapping<i16>;
    let mut _222: std::num::Wrapping<i16>;
    let _223: ();
    let mut _224: &mut std::num::Wrapping<i16>;
    let mut _225: usize;
    let mut _226: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _227: &std::num::Wrapping<i16>;
    let _228: std::num::Wrapping<i16>;
    let mut _229: std::num::Wrapping<i16>;
    let mut _230: &std::num::Wrapping<i16>;
    let _231: std::num::Wrapping<i16>;
    let mut _232: i16;
    let mut _233: bool;
    let mut _234: bool;
    let mut _235: bool;
    let mut _236: bool;
    let mut _239: bool;
    let mut _240: bool;
    let _242: !;
    let mut _243: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _244: std::num::Wrapping<i32>;
    let mut _245: std::num::Wrapping<i32>;
    let mut _246: std::num::Wrapping<i32>;
    let _247: ();
    let mut _248: &mut std::num::Wrapping<i32>;
    let mut _249: usize;
    let mut _250: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _251: &std::num::Wrapping<i32>;
    let _252: std::num::Wrapping<i32>;
    let mut _253: std::num::Wrapping<i32>;
    let mut _254: &std::num::Wrapping<i32>;
    let _255: std::num::Wrapping<i32>;
    let mut _256: i32;
    let mut _257: bool;
    let mut _258: bool;
    let mut _259: bool;
    let mut _260: bool;
    let mut _263: bool;
    let mut _264: bool;
    let _266: !;
    let mut _267: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _268: std::num::Wrapping<i64>;
    let mut _269: std::num::Wrapping<i64>;
    let mut _270: std::num::Wrapping<i64>;
    let _271: ();
    let mut _272: &mut std::num::Wrapping<i64>;
    let mut _273: usize;
    let mut _274: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _275: &std::num::Wrapping<i64>;
    let _276: std::num::Wrapping<i64>;
    let mut _277: std::num::Wrapping<i64>;
    let mut _278: &std::num::Wrapping<i64>;
    let _279: std::num::Wrapping<i64>;
    let mut _280: i64;
    let mut _281: bool;
    let mut _282: bool;
    let mut _283: bool;
    let mut _284: bool;
    let mut _287: bool;
    let mut _288: bool;
    let _290: !;
    let mut _291: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _292: std::num::Wrapping<isize>;
    let mut _293: std::num::Wrapping<isize>;
    let mut _294: std::num::Wrapping<isize>;
    let _295: ();
    let mut _296: &mut std::num::Wrapping<isize>;
    let mut _297: usize;
    let mut _298: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _299: &std::num::Wrapping<isize>;
    let _300: std::num::Wrapping<isize>;
    let mut _301: std::num::Wrapping<isize>;
    let mut _302: &std::num::Wrapping<isize>;
    let _303: std::num::Wrapping<isize>;
    let mut _304: isize;
    let mut _305: bool;
    let mut _306: bool;
    let mut _307: bool;
    let mut _308: bool;
    let mut _311: bool;
    let mut _312: bool;
    let _314: !;
    let mut _315: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _316: std::num::Wrapping<u8>;
    let mut _317: std::num::Wrapping<u8>;
    let mut _318: std::num::Wrapping<u8>;
    let _319: ();
    let mut _320: &mut std::num::Wrapping<u8>;
    let mut _321: usize;
    let mut _322: (&std::num::Wrapping<u8>, &std::num::Wrapping<u8>);
    let mut _323: &std::num::Wrapping<u8>;
    let _324: std::num::Wrapping<u8>;
    let mut _325: std::num::Wrapping<u8>;
    let mut _326: &std::num::Wrapping<u8>;
    let _327: std::num::Wrapping<u8>;
    let mut _328: u8;
    let mut _329: bool;
    let mut _332: bool;
    let mut _333: bool;
    let _335: !;
    let mut _336: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _337: std::num::Wrapping<u16>;
    let mut _338: std::num::Wrapping<u16>;
    let mut _339: std::num::Wrapping<u16>;
    let _340: ();
    let mut _341: &mut std::num::Wrapping<u16>;
    let mut _342: usize;
    let mut _343: (&std::num::Wrapping<u16>, &std::num::Wrapping<u16>);
    let mut _344: &std::num::Wrapping<u16>;
    let _345: std::num::Wrapping<u16>;
    let mut _346: std::num::Wrapping<u16>;
    let mut _347: &std::num::Wrapping<u16>;
    let _348: std::num::Wrapping<u16>;
    let mut _349: u16;
    let mut _350: bool;
    let mut _353: bool;
    let mut _354: bool;
    let _356: !;
    let mut _357: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _358: std::num::Wrapping<u32>;
    let mut _359: std::num::Wrapping<u32>;
    let mut _360: std::num::Wrapping<u32>;
    let _361: ();
    let mut _362: &mut std::num::Wrapping<u32>;
    let mut _363: usize;
    let mut _364: (&std::num::Wrapping<u32>, &std::num::Wrapping<u32>);
    let mut _365: &std::num::Wrapping<u32>;
    let _366: std::num::Wrapping<u32>;
    let mut _367: std::num::Wrapping<u32>;
    let mut _368: &std::num::Wrapping<u32>;
    let _369: std::num::Wrapping<u32>;
    let mut _370: u32;
    let mut _371: bool;
    let mut _374: bool;
    let mut _375: bool;
    let _377: !;
    let mut _378: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _379: std::num::Wrapping<u64>;
    let mut _380: std::num::Wrapping<u64>;
    let mut _381: std::num::Wrapping<u64>;
    let _382: ();
    let mut _383: &mut std::num::Wrapping<u64>;
    let mut _384: usize;
    let mut _385: (&std::num::Wrapping<u64>, &std::num::Wrapping<u64>);
    let mut _386: &std::num::Wrapping<u64>;
    let _387: std::num::Wrapping<u64>;
    let mut _388: std::num::Wrapping<u64>;
    let mut _389: &std::num::Wrapping<u64>;
    let _390: std::num::Wrapping<u64>;
    let mut _391: u64;
    let mut _392: bool;
    let mut _395: bool;
    let mut _396: bool;
    let _398: !;
    let mut _399: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _400: std::num::Wrapping<usize>;
    let mut _401: std::num::Wrapping<usize>;
    let mut _402: std::num::Wrapping<usize>;
    let _403: ();
    let mut _404: &mut std::num::Wrapping<usize>;
    let mut _405: usize;
    let mut _406: (&std::num::Wrapping<usize>, &std::num::Wrapping<usize>);
    let mut _407: &std::num::Wrapping<usize>;
    let _408: std::num::Wrapping<usize>;
    let mut _409: std::num::Wrapping<usize>;
    let mut _410: &std::num::Wrapping<usize>;
    let _411: std::num::Wrapping<usize>;
    let mut _412: usize;
    let mut _413: bool;
    let mut _416: bool;
    let mut _417: bool;
    let _419: !;
    let mut _420: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug tmp => _1;
        let _13: &std::num::Wrapping<i8>;
        let _14: &std::num::Wrapping<i8>;
        scope 2 {
            debug left_val => _13;
            debug right_val => _14;
            let _17: core::panicking::AssertKind;
            scope 3 {
                debug kind => _17;
            }
        }
    }
    scope 4 {
        debug tmp => _20;
        let _32: &std::num::Wrapping<i16>;
        let _33: &std::num::Wrapping<i16>;
        scope 5 {
            debug left_val => _32;
            debug right_val => _33;
            let _36: core::panicking::AssertKind;
            scope 6 {
                debug kind => _36;
            }
        }
    }
    scope 7 {
        debug tmp => _39;
        let _51: &std::num::Wrapping<i32>;
        let _52: &std::num::Wrapping<i32>;
        scope 8 {
            debug left_val => _51;
            debug right_val => _52;
            let _55: core::panicking::AssertKind;
            scope 9 {
                debug kind => _55;
            }
        }
    }
    scope 10 {
        debug tmp => _58;
        let _70: &std::num::Wrapping<i64>;
        let _71: &std::num::Wrapping<i64>;
        scope 11 {
            debug left_val => _70;
            debug right_val => _71;
            let _74: core::panicking::AssertKind;
            scope 12 {
                debug kind => _74;
            }
        }
    }
    scope 13 {
        debug tmp => _77;
        let _89: &std::num::Wrapping<isize>;
        let _90: &std::num::Wrapping<isize>;
        scope 14 {
            debug left_val => _89;
            debug right_val => _90;
            let _93: core::panicking::AssertKind;
            scope 15 {
                debug kind => _93;
            }
        }
    }
    scope 16 {
        debug tmp => _96;
        let _109: &std::num::Wrapping<u8>;
        let _110: &std::num::Wrapping<u8>;
        scope 17 {
            debug left_val => _109;
            debug right_val => _110;
            let _113: core::panicking::AssertKind;
            scope 18 {
                debug kind => _113;
            }
        }
    }
    scope 19 {
        debug tmp => _116;
        let _129: &std::num::Wrapping<u16>;
        let _130: &std::num::Wrapping<u16>;
        scope 20 {
            debug left_val => _129;
            debug right_val => _130;
            let _133: core::panicking::AssertKind;
            scope 21 {
                debug kind => _133;
            }
        }
    }
    scope 22 {
        debug tmp => _136;
        let _149: &std::num::Wrapping<u32>;
        let _150: &std::num::Wrapping<u32>;
        scope 23 {
            debug left_val => _149;
            debug right_val => _150;
            let _153: core::panicking::AssertKind;
            scope 24 {
                debug kind => _153;
            }
        }
    }
    scope 25 {
        debug tmp => _156;
        let _169: &std::num::Wrapping<u64>;
        let _170: &std::num::Wrapping<u64>;
        scope 26 {
            debug left_val => _169;
            debug right_val => _170;
            let _173: core::panicking::AssertKind;
            scope 27 {
                debug kind => _173;
            }
        }
    }
    scope 28 {
        debug tmp => _176;
        let _189: &std::num::Wrapping<usize>;
        let _190: &std::num::Wrapping<usize>;
        scope 29 {
            debug left_val => _189;
            debug right_val => _190;
            let _193: core::panicking::AssertKind;
            scope 30 {
                debug kind => _193;
            }
        }
    }
    scope 31 {
        debug tmp => _196;
        let _213: &std::num::Wrapping<i8>;
        let _214: &std::num::Wrapping<i8>;
        scope 32 {
            debug left_val => _213;
            debug right_val => _214;
            let _217: core::panicking::AssertKind;
            scope 33 {
                debug kind => _217;
            }
        }
    }
    scope 34 {
        debug tmp => _220;
        let _237: &std::num::Wrapping<i16>;
        let _238: &std::num::Wrapping<i16>;
        scope 35 {
            debug left_val => _237;
            debug right_val => _238;
            let _241: core::panicking::AssertKind;
            scope 36 {
                debug kind => _241;
            }
        }
    }
    scope 37 {
        debug tmp => _244;
        let _261: &std::num::Wrapping<i32>;
        let _262: &std::num::Wrapping<i32>;
        scope 38 {
            debug left_val => _261;
            debug right_val => _262;
            let _265: core::panicking::AssertKind;
            scope 39 {
                debug kind => _265;
            }
        }
    }
    scope 40 {
        debug tmp => _268;
        let _285: &std::num::Wrapping<i64>;
        let _286: &std::num::Wrapping<i64>;
        scope 41 {
            debug left_val => _285;
            debug right_val => _286;
            let _289: core::panicking::AssertKind;
            scope 42 {
                debug kind => _289;
            }
        }
    }
    scope 43 {
        debug tmp => _292;
        let _309: &std::num::Wrapping<isize>;
        let _310: &std::num::Wrapping<isize>;
        scope 44 {
            debug left_val => _309;
            debug right_val => _310;
            let _313: core::panicking::AssertKind;
            scope 45 {
                debug kind => _313;
            }
        }
    }
    scope 46 {
        debug tmp => _316;
        let _330: &std::num::Wrapping<u8>;
        let _331: &std::num::Wrapping<u8>;
        scope 47 {
            debug left_val => _330;
            debug right_val => _331;
            let _334: core::panicking::AssertKind;
            scope 48 {
                debug kind => _334;
            }
        }
    }
    scope 49 {
        debug tmp => _337;
        let _351: &std::num::Wrapping<u16>;
        let _352: &std::num::Wrapping<u16>;
        scope 50 {
            debug left_val => _351;
            debug right_val => _352;
            let _355: core::panicking::AssertKind;
            scope 51 {
                debug kind => _355;
            }
        }
    }
    scope 52 {
        debug tmp => _358;
        let _372: &std::num::Wrapping<u32>;
        let _373: &std::num::Wrapping<u32>;
        scope 53 {
            debug left_val => _372;
            debug right_val => _373;
            let _376: core::panicking::AssertKind;
            scope 54 {
                debug kind => _376;
            }
        }
    }
    scope 55 {
        debug tmp => _379;
        let _393: &std::num::Wrapping<u64>;
        let _394: &std::num::Wrapping<u64>;
        scope 56 {
            debug left_val => _393;
            debug right_val => _394;
            let _397: core::panicking::AssertKind;
            scope 57 {
                debug kind => _397;
            }
        }
    }
    scope 58 {
        debug tmp => _400;
        let _414: &std::num::Wrapping<usize>;
        let _415: &std::num::Wrapping<usize>;
        scope 59 {
            debug left_val => _414;
            debug right_val => _415;
            let _418: core::panicking::AssertKind;
            scope 60 {
                debug kind => _418;
            }
        }
    }

    bb0: {
        _1 = Wrapping::<i8>(const _);
        _3 = _1;
        _2 = test::black_box::<Wrapping<i8>>(move _3) -> bb1;
    }

    bb1: {
        _1 = move _2;
        _5 = &mut _1;
        _6 = Add(const _, const 1_usize);
        _4 = <Wrapping<i8> as ShlAssign<usize>>::shl_assign(move _5, move _6) -> bb2;
    }

    bb2: {
        _10 = _1;
        _9 = test::black_box::<Wrapping<i8>>(move _10) -> bb3;
    }

    bb3: {
        _8 = &_9;
        _12 = Wrapping::<i8>(const -2_i8);
        _11 = &_12;
        _7 = (move _8, move _11);
        _13 = (_7.0: &std::num::Wrapping<i8>);
        _14 = (_7.1: &std::num::Wrapping<i8>);
        _16 = <Wrapping<i8> as PartialEq>::eq(_13, _14) -> bb4;
    }

    bb4: {
        _15 = Not(move _16);
        switchInt(move _15) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _17, _13, _14, move _19);
    }

    bb6: {
        _20 = Wrapping::<i16>(const _);
        _22 = _20;
        _21 = test::black_box::<Wrapping<i16>>(move _22) -> bb7;
    }

    bb7: {
        _20 = move _21;
        _24 = &mut _20;
        _25 = Add(const _, const 1_usize);
        _23 = <Wrapping<i16> as ShlAssign<usize>>::shl_assign(move _24, move _25) -> bb8;
    }

    bb8: {
        _29 = _20;
        _28 = test::black_box::<Wrapping<i16>>(move _29) -> bb9;
    }

    bb9: {
        _27 = &_28;
        _31 = Wrapping::<i16>(const -2_i16);
        _30 = &_31;
        _26 = (move _27, move _30);
        _32 = (_26.0: &std::num::Wrapping<i16>);
        _33 = (_26.1: &std::num::Wrapping<i16>);
        _35 = <Wrapping<i16> as PartialEq>::eq(_32, _33) -> bb10;
    }

    bb10: {
        _34 = Not(move _35);
        switchInt(move _34) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _36 = core::panicking::AssertKind::Eq;
        _38 = Option::<Arguments<'_>>::None;
        _37 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _36, _32, _33, move _38);
    }

    bb12: {
        _39 = Wrapping::<i32>(const _);
        _41 = _39;
        _40 = test::black_box::<Wrapping<i32>>(move _41) -> bb13;
    }

    bb13: {
        _39 = move _40;
        _43 = &mut _39;
        _44 = Add(const _, const 1_usize);
        _42 = <Wrapping<i32> as ShlAssign<usize>>::shl_assign(move _43, move _44) -> bb14;
    }

    bb14: {
        _48 = _39;
        _47 = test::black_box::<Wrapping<i32>>(move _48) -> bb15;
    }

    bb15: {
        _46 = &_47;
        _50 = Wrapping::<i32>(const -2_i32);
        _49 = &_50;
        _45 = (move _46, move _49);
        _51 = (_45.0: &std::num::Wrapping<i32>);
        _52 = (_45.1: &std::num::Wrapping<i32>);
        _54 = <Wrapping<i32> as PartialEq>::eq(_51, _52) -> bb16;
    }

    bb16: {
        _53 = Not(move _54);
        switchInt(move _53) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _55 = core::panicking::AssertKind::Eq;
        _57 = Option::<Arguments<'_>>::None;
        _56 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _55, _51, _52, move _57);
    }

    bb18: {
        _58 = Wrapping::<i64>(const _);
        _60 = _58;
        _59 = test::black_box::<Wrapping<i64>>(move _60) -> bb19;
    }

    bb19: {
        _58 = move _59;
        _62 = &mut _58;
        _63 = Add(const _, const 1_usize);
        _61 = <Wrapping<i64> as ShlAssign<usize>>::shl_assign(move _62, move _63) -> bb20;
    }

    bb20: {
        _67 = _58;
        _66 = test::black_box::<Wrapping<i64>>(move _67) -> bb21;
    }

    bb21: {
        _65 = &_66;
        _69 = Wrapping::<i64>(const -2_i64);
        _68 = &_69;
        _64 = (move _65, move _68);
        _70 = (_64.0: &std::num::Wrapping<i64>);
        _71 = (_64.1: &std::num::Wrapping<i64>);
        _73 = <Wrapping<i64> as PartialEq>::eq(_70, _71) -> bb22;
    }

    bb22: {
        _72 = Not(move _73);
        switchInt(move _72) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _74 = core::panicking::AssertKind::Eq;
        _76 = Option::<Arguments<'_>>::None;
        _75 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _74, _70, _71, move _76);
    }

    bb24: {
        _77 = Wrapping::<isize>(const _);
        _79 = _77;
        _78 = test::black_box::<Wrapping<isize>>(move _79) -> bb25;
    }

    bb25: {
        _77 = move _78;
        _81 = &mut _77;
        _82 = Add(const _, const 1_usize);
        _80 = <Wrapping<isize> as ShlAssign<usize>>::shl_assign(move _81, move _82) -> bb26;
    }

    bb26: {
        _86 = _77;
        _85 = test::black_box::<Wrapping<isize>>(move _86) -> bb27;
    }

    bb27: {
        _84 = &_85;
        _88 = Wrapping::<isize>(const -2_isize);
        _87 = &_88;
        _83 = (move _84, move _87);
        _89 = (_83.0: &std::num::Wrapping<isize>);
        _90 = (_83.1: &std::num::Wrapping<isize>);
        _92 = <Wrapping<isize> as PartialEq>::eq(_89, _90) -> bb28;
    }

    bb28: {
        _91 = Not(move _92);
        switchInt(move _91) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _93 = core::panicking::AssertKind::Eq;
        _95 = Option::<Arguments<'_>>::None;
        _94 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _93, _89, _90, move _95);
    }

    bb30: {
        _96 = Wrapping::<u8>(const _);
        _98 = _96;
        _97 = test::black_box::<Wrapping<u8>>(move _98) -> bb31;
    }

    bb31: {
        _96 = move _97;
        _100 = &mut _96;
        _101 = Add(const _, const 1_usize);
        _99 = <Wrapping<u8> as ShlAssign<usize>>::shl_assign(move _100, move _101) -> bb32;
    }

    bb32: {
        _105 = _96;
        _104 = test::black_box::<Wrapping<u8>>(move _105) -> bb33;
    }

    bb33: {
        _103 = &_104;
        _108 = Sub(const _, const 1_u8);
        _107 = Wrapping::<u8>(move _108);
        _106 = &_107;
        _102 = (move _103, move _106);
        _109 = (_102.0: &std::num::Wrapping<u8>);
        _110 = (_102.1: &std::num::Wrapping<u8>);
        _112 = <Wrapping<u8> as PartialEq>::eq(_109, _110) -> bb34;
    }

    bb34: {
        _111 = Not(move _112);
        switchInt(move _111) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _113 = core::panicking::AssertKind::Eq;
        _115 = Option::<Arguments<'_>>::None;
        _114 = core::panicking::assert_failed::<Wrapping<u8>, Wrapping<u8>>(move _113, _109, _110, move _115);
    }

    bb36: {
        _116 = Wrapping::<u16>(const _);
        _118 = _116;
        _117 = test::black_box::<Wrapping<u16>>(move _118) -> bb37;
    }

    bb37: {
        _116 = move _117;
        _120 = &mut _116;
        _121 = Add(const _, const 1_usize);
        _119 = <Wrapping<u16> as ShlAssign<usize>>::shl_assign(move _120, move _121) -> bb38;
    }

    bb38: {
        _125 = _116;
        _124 = test::black_box::<Wrapping<u16>>(move _125) -> bb39;
    }

    bb39: {
        _123 = &_124;
        _128 = Sub(const _, const 1_u16);
        _127 = Wrapping::<u16>(move _128);
        _126 = &_127;
        _122 = (move _123, move _126);
        _129 = (_122.0: &std::num::Wrapping<u16>);
        _130 = (_122.1: &std::num::Wrapping<u16>);
        _132 = <Wrapping<u16> as PartialEq>::eq(_129, _130) -> bb40;
    }

    bb40: {
        _131 = Not(move _132);
        switchInt(move _131) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _133 = core::panicking::AssertKind::Eq;
        _135 = Option::<Arguments<'_>>::None;
        _134 = core::panicking::assert_failed::<Wrapping<u16>, Wrapping<u16>>(move _133, _129, _130, move _135);
    }

    bb42: {
        _136 = Wrapping::<u32>(const _);
        _138 = _136;
        _137 = test::black_box::<Wrapping<u32>>(move _138) -> bb43;
    }

    bb43: {
        _136 = move _137;
        _140 = &mut _136;
        _141 = Add(const _, const 1_usize);
        _139 = <Wrapping<u32> as ShlAssign<usize>>::shl_assign(move _140, move _141) -> bb44;
    }

    bb44: {
        _145 = _136;
        _144 = test::black_box::<Wrapping<u32>>(move _145) -> bb45;
    }

    bb45: {
        _143 = &_144;
        _148 = Sub(const _, const 1_u32);
        _147 = Wrapping::<u32>(move _148);
        _146 = &_147;
        _142 = (move _143, move _146);
        _149 = (_142.0: &std::num::Wrapping<u32>);
        _150 = (_142.1: &std::num::Wrapping<u32>);
        _152 = <Wrapping<u32> as PartialEq>::eq(_149, _150) -> bb46;
    }

    bb46: {
        _151 = Not(move _152);
        switchInt(move _151) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _153 = core::panicking::AssertKind::Eq;
        _155 = Option::<Arguments<'_>>::None;
        _154 = core::panicking::assert_failed::<Wrapping<u32>, Wrapping<u32>>(move _153, _149, _150, move _155);
    }

    bb48: {
        _156 = Wrapping::<u64>(const _);
        _158 = _156;
        _157 = test::black_box::<Wrapping<u64>>(move _158) -> bb49;
    }

    bb49: {
        _156 = move _157;
        _160 = &mut _156;
        _161 = Add(const _, const 1_usize);
        _159 = <Wrapping<u64> as ShlAssign<usize>>::shl_assign(move _160, move _161) -> bb50;
    }

    bb50: {
        _165 = _156;
        _164 = test::black_box::<Wrapping<u64>>(move _165) -> bb51;
    }

    bb51: {
        _163 = &_164;
        _168 = Sub(const _, const 1_u64);
        _167 = Wrapping::<u64>(move _168);
        _166 = &_167;
        _162 = (move _163, move _166);
        _169 = (_162.0: &std::num::Wrapping<u64>);
        _170 = (_162.1: &std::num::Wrapping<u64>);
        _172 = <Wrapping<u64> as PartialEq>::eq(_169, _170) -> bb52;
    }

    bb52: {
        _171 = Not(move _172);
        switchInt(move _171) -> [0: bb54, otherwise: bb53];
    }

    bb53: {
        _173 = core::panicking::AssertKind::Eq;
        _175 = Option::<Arguments<'_>>::None;
        _174 = core::panicking::assert_failed::<Wrapping<u64>, Wrapping<u64>>(move _173, _169, _170, move _175);
    }

    bb54: {
        _176 = Wrapping::<usize>(const _);
        _178 = _176;
        _177 = test::black_box::<Wrapping<usize>>(move _178) -> bb55;
    }

    bb55: {
        _176 = move _177;
        _180 = &mut _176;
        _181 = Add(const _, const 1_usize);
        _179 = <Wrapping<usize> as ShlAssign<usize>>::shl_assign(move _180, move _181) -> bb56;
    }

    bb56: {
        _185 = _176;
        _184 = test::black_box::<Wrapping<usize>>(move _185) -> bb57;
    }

    bb57: {
        _183 = &_184;
        _188 = Sub(const _, const 1_usize);
        _187 = Wrapping::<usize>(move _188);
        _186 = &_187;
        _182 = (move _183, move _186);
        _189 = (_182.0: &std::num::Wrapping<usize>);
        _190 = (_182.1: &std::num::Wrapping<usize>);
        _192 = <Wrapping<usize> as PartialEq>::eq(_189, _190) -> bb58;
    }

    bb58: {
        _191 = Not(move _192);
        switchInt(move _191) -> [0: bb60, otherwise: bb59];
    }

    bb59: {
        _193 = core::panicking::AssertKind::Eq;
        _195 = Option::<Arguments<'_>>::None;
        _194 = core::panicking::assert_failed::<Wrapping<usize>, Wrapping<usize>>(move _193, _189, _190, move _195);
    }

    bb60: {
        _196 = Wrapping::<i8>(const _);
        _198 = _196;
        _197 = test::black_box::<Wrapping<i8>>(move _198) -> bb61;
    }

    bb61: {
        _196 = move _197;
        _200 = &mut _196;
        _201 = Add(const _, const 1_usize);
        _199 = <Wrapping<i8> as ShrAssign<usize>>::shr_assign(move _200, move _201) -> bb62;
    }

    bb62: {
        _205 = _196;
        _204 = test::black_box::<Wrapping<i8>>(move _205) -> bb63;
    }

    bb63: {
        _203 = &_204;
        _209 = Eq(const 2_i8, const 0_i8);
        assert(!move _209, "attempt to divide `{}` by zero", const _) -> bb64;
    }

    bb64: {
        _210 = Eq(const 2_i8, const -1_i8);
        _211 = Eq(const _, const i8::MIN);
        _212 = BitAnd(move _210, move _211);
        assert(!move _212, "attempt to compute `{} / {}`, which would overflow", const _, const 2_i8) -> bb65;
    }

    bb65: {
        _208 = Div(const _, const 2_i8);
        _207 = Wrapping::<i8>(move _208);
        _206 = &_207;
        _202 = (move _203, move _206);
        _213 = (_202.0: &std::num::Wrapping<i8>);
        _214 = (_202.1: &std::num::Wrapping<i8>);
        _216 = <Wrapping<i8> as PartialEq>::eq(_213, _214) -> bb66;
    }

    bb66: {
        _215 = Not(move _216);
        switchInt(move _215) -> [0: bb68, otherwise: bb67];
    }

    bb67: {
        _217 = core::panicking::AssertKind::Eq;
        _219 = Option::<Arguments<'_>>::None;
        _218 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _217, _213, _214, move _219);
    }

    bb68: {
        _220 = Wrapping::<i16>(const _);
        _222 = _220;
        _221 = test::black_box::<Wrapping<i16>>(move _222) -> bb69;
    }

    bb69: {
        _220 = move _221;
        _224 = &mut _220;
        _225 = Add(const _, const 1_usize);
        _223 = <Wrapping<i16> as ShrAssign<usize>>::shr_assign(move _224, move _225) -> bb70;
    }

    bb70: {
        _229 = _220;
        _228 = test::black_box::<Wrapping<i16>>(move _229) -> bb71;
    }

    bb71: {
        _227 = &_228;
        _233 = Eq(const 2_i16, const 0_i16);
        assert(!move _233, "attempt to divide `{}` by zero", const _) -> bb72;
    }

    bb72: {
        _234 = Eq(const 2_i16, const -1_i16);
        _235 = Eq(const _, const i16::MIN);
        _236 = BitAnd(move _234, move _235);
        assert(!move _236, "attempt to compute `{} / {}`, which would overflow", const _, const 2_i16) -> bb73;
    }

    bb73: {
        _232 = Div(const _, const 2_i16);
        _231 = Wrapping::<i16>(move _232);
        _230 = &_231;
        _226 = (move _227, move _230);
        _237 = (_226.0: &std::num::Wrapping<i16>);
        _238 = (_226.1: &std::num::Wrapping<i16>);
        _240 = <Wrapping<i16> as PartialEq>::eq(_237, _238) -> bb74;
    }

    bb74: {
        _239 = Not(move _240);
        switchInt(move _239) -> [0: bb76, otherwise: bb75];
    }

    bb75: {
        _241 = core::panicking::AssertKind::Eq;
        _243 = Option::<Arguments<'_>>::None;
        _242 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _241, _237, _238, move _243);
    }

    bb76: {
        _244 = Wrapping::<i32>(const _);
        _246 = _244;
        _245 = test::black_box::<Wrapping<i32>>(move _246) -> bb77;
    }

    bb77: {
        _244 = move _245;
        _248 = &mut _244;
        _249 = Add(const _, const 1_usize);
        _247 = <Wrapping<i32> as ShrAssign<usize>>::shr_assign(move _248, move _249) -> bb78;
    }

    bb78: {
        _253 = _244;
        _252 = test::black_box::<Wrapping<i32>>(move _253) -> bb79;
    }

    bb79: {
        _251 = &_252;
        _257 = Eq(const 2_i32, const 0_i32);
        assert(!move _257, "attempt to divide `{}` by zero", const _) -> bb80;
    }

    bb80: {
        _258 = Eq(const 2_i32, const -1_i32);
        _259 = Eq(const _, const i32::MIN);
        _260 = BitAnd(move _258, move _259);
        assert(!move _260, "attempt to compute `{} / {}`, which would overflow", const _, const 2_i32) -> bb81;
    }

    bb81: {
        _256 = Div(const _, const 2_i32);
        _255 = Wrapping::<i32>(move _256);
        _254 = &_255;
        _250 = (move _251, move _254);
        _261 = (_250.0: &std::num::Wrapping<i32>);
        _262 = (_250.1: &std::num::Wrapping<i32>);
        _264 = <Wrapping<i32> as PartialEq>::eq(_261, _262) -> bb82;
    }

    bb82: {
        _263 = Not(move _264);
        switchInt(move _263) -> [0: bb84, otherwise: bb83];
    }

    bb83: {
        _265 = core::panicking::AssertKind::Eq;
        _267 = Option::<Arguments<'_>>::None;
        _266 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _265, _261, _262, move _267);
    }

    bb84: {
        _268 = Wrapping::<i64>(const _);
        _270 = _268;
        _269 = test::black_box::<Wrapping<i64>>(move _270) -> bb85;
    }

    bb85: {
        _268 = move _269;
        _272 = &mut _268;
        _273 = Add(const _, const 1_usize);
        _271 = <Wrapping<i64> as ShrAssign<usize>>::shr_assign(move _272, move _273) -> bb86;
    }

    bb86: {
        _277 = _268;
        _276 = test::black_box::<Wrapping<i64>>(move _277) -> bb87;
    }

    bb87: {
        _275 = &_276;
        _281 = Eq(const 2_i64, const 0_i64);
        assert(!move _281, "attempt to divide `{}` by zero", const _) -> bb88;
    }

    bb88: {
        _282 = Eq(const 2_i64, const -1_i64);
        _283 = Eq(const _, const i64::MIN);
        _284 = BitAnd(move _282, move _283);
        assert(!move _284, "attempt to compute `{} / {}`, which would overflow", const _, const 2_i64) -> bb89;
    }

    bb89: {
        _280 = Div(const _, const 2_i64);
        _279 = Wrapping::<i64>(move _280);
        _278 = &_279;
        _274 = (move _275, move _278);
        _285 = (_274.0: &std::num::Wrapping<i64>);
        _286 = (_274.1: &std::num::Wrapping<i64>);
        _288 = <Wrapping<i64> as PartialEq>::eq(_285, _286) -> bb90;
    }

    bb90: {
        _287 = Not(move _288);
        switchInt(move _287) -> [0: bb92, otherwise: bb91];
    }

    bb91: {
        _289 = core::panicking::AssertKind::Eq;
        _291 = Option::<Arguments<'_>>::None;
        _290 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _289, _285, _286, move _291);
    }

    bb92: {
        _292 = Wrapping::<isize>(const _);
        _294 = _292;
        _293 = test::black_box::<Wrapping<isize>>(move _294) -> bb93;
    }

    bb93: {
        _292 = move _293;
        _296 = &mut _292;
        _297 = Add(const _, const 1_usize);
        _295 = <Wrapping<isize> as ShrAssign<usize>>::shr_assign(move _296, move _297) -> bb94;
    }

    bb94: {
        _301 = _292;
        _300 = test::black_box::<Wrapping<isize>>(move _301) -> bb95;
    }

    bb95: {
        _299 = &_300;
        _305 = Eq(const 2_isize, const 0_isize);
        assert(!move _305, "attempt to divide `{}` by zero", const _) -> bb96;
    }

    bb96: {
        _306 = Eq(const 2_isize, const -1_isize);
        _307 = Eq(const _, const isize::MIN);
        _308 = BitAnd(move _306, move _307);
        assert(!move _308, "attempt to compute `{} / {}`, which would overflow", const _, const 2_isize) -> bb97;
    }

    bb97: {
        _304 = Div(const _, const 2_isize);
        _303 = Wrapping::<isize>(move _304);
        _302 = &_303;
        _298 = (move _299, move _302);
        _309 = (_298.0: &std::num::Wrapping<isize>);
        _310 = (_298.1: &std::num::Wrapping<isize>);
        _312 = <Wrapping<isize> as PartialEq>::eq(_309, _310) -> bb98;
    }

    bb98: {
        _311 = Not(move _312);
        switchInt(move _311) -> [0: bb100, otherwise: bb99];
    }

    bb99: {
        _313 = core::panicking::AssertKind::Eq;
        _315 = Option::<Arguments<'_>>::None;
        _314 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _313, _309, _310, move _315);
    }

    bb100: {
        _316 = Wrapping::<u8>(const _);
        _318 = _316;
        _317 = test::black_box::<Wrapping<u8>>(move _318) -> bb101;
    }

    bb101: {
        _316 = move _317;
        _320 = &mut _316;
        _321 = Add(const _, const 1_usize);
        _319 = <Wrapping<u8> as ShrAssign<usize>>::shr_assign(move _320, move _321) -> bb102;
    }

    bb102: {
        _325 = _316;
        _324 = test::black_box::<Wrapping<u8>>(move _325) -> bb103;
    }

    bb103: {
        _323 = &_324;
        _329 = Eq(const 2_u8, const 0_u8);
        assert(!move _329, "attempt to divide `{}` by zero", const _) -> bb104;
    }

    bb104: {
        _328 = Div(const _, const 2_u8);
        _327 = Wrapping::<u8>(move _328);
        _326 = &_327;
        _322 = (move _323, move _326);
        _330 = (_322.0: &std::num::Wrapping<u8>);
        _331 = (_322.1: &std::num::Wrapping<u8>);
        _333 = <Wrapping<u8> as PartialEq>::eq(_330, _331) -> bb105;
    }

    bb105: {
        _332 = Not(move _333);
        switchInt(move _332) -> [0: bb107, otherwise: bb106];
    }

    bb106: {
        _334 = core::panicking::AssertKind::Eq;
        _336 = Option::<Arguments<'_>>::None;
        _335 = core::panicking::assert_failed::<Wrapping<u8>, Wrapping<u8>>(move _334, _330, _331, move _336);
    }

    bb107: {
        _337 = Wrapping::<u16>(const _);
        _339 = _337;
        _338 = test::black_box::<Wrapping<u16>>(move _339) -> bb108;
    }

    bb108: {
        _337 = move _338;
        _341 = &mut _337;
        _342 = Add(const _, const 1_usize);
        _340 = <Wrapping<u16> as ShrAssign<usize>>::shr_assign(move _341, move _342) -> bb109;
    }

    bb109: {
        _346 = _337;
        _345 = test::black_box::<Wrapping<u16>>(move _346) -> bb110;
    }

    bb110: {
        _344 = &_345;
        _350 = Eq(const 2_u16, const 0_u16);
        assert(!move _350, "attempt to divide `{}` by zero", const _) -> bb111;
    }

    bb111: {
        _349 = Div(const _, const 2_u16);
        _348 = Wrapping::<u16>(move _349);
        _347 = &_348;
        _343 = (move _344, move _347);
        _351 = (_343.0: &std::num::Wrapping<u16>);
        _352 = (_343.1: &std::num::Wrapping<u16>);
        _354 = <Wrapping<u16> as PartialEq>::eq(_351, _352) -> bb112;
    }

    bb112: {
        _353 = Not(move _354);
        switchInt(move _353) -> [0: bb114, otherwise: bb113];
    }

    bb113: {
        _355 = core::panicking::AssertKind::Eq;
        _357 = Option::<Arguments<'_>>::None;
        _356 = core::panicking::assert_failed::<Wrapping<u16>, Wrapping<u16>>(move _355, _351, _352, move _357);
    }

    bb114: {
        _358 = Wrapping::<u32>(const _);
        _360 = _358;
        _359 = test::black_box::<Wrapping<u32>>(move _360) -> bb115;
    }

    bb115: {
        _358 = move _359;
        _362 = &mut _358;
        _363 = Add(const _, const 1_usize);
        _361 = <Wrapping<u32> as ShrAssign<usize>>::shr_assign(move _362, move _363) -> bb116;
    }

    bb116: {
        _367 = _358;
        _366 = test::black_box::<Wrapping<u32>>(move _367) -> bb117;
    }

    bb117: {
        _365 = &_366;
        _371 = Eq(const 2_u32, const 0_u32);
        assert(!move _371, "attempt to divide `{}` by zero", const _) -> bb118;
    }

    bb118: {
        _370 = Div(const _, const 2_u32);
        _369 = Wrapping::<u32>(move _370);
        _368 = &_369;
        _364 = (move _365, move _368);
        _372 = (_364.0: &std::num::Wrapping<u32>);
        _373 = (_364.1: &std::num::Wrapping<u32>);
        _375 = <Wrapping<u32> as PartialEq>::eq(_372, _373) -> bb119;
    }

    bb119: {
        _374 = Not(move _375);
        switchInt(move _374) -> [0: bb121, otherwise: bb120];
    }

    bb120: {
        _376 = core::panicking::AssertKind::Eq;
        _378 = Option::<Arguments<'_>>::None;
        _377 = core::panicking::assert_failed::<Wrapping<u32>, Wrapping<u32>>(move _376, _372, _373, move _378);
    }

    bb121: {
        _379 = Wrapping::<u64>(const _);
        _381 = _379;
        _380 = test::black_box::<Wrapping<u64>>(move _381) -> bb122;
    }

    bb122: {
        _379 = move _380;
        _383 = &mut _379;
        _384 = Add(const _, const 1_usize);
        _382 = <Wrapping<u64> as ShrAssign<usize>>::shr_assign(move _383, move _384) -> bb123;
    }

    bb123: {
        _388 = _379;
        _387 = test::black_box::<Wrapping<u64>>(move _388) -> bb124;
    }

    bb124: {
        _386 = &_387;
        _392 = Eq(const 2_u64, const 0_u64);
        assert(!move _392, "attempt to divide `{}` by zero", const _) -> bb125;
    }

    bb125: {
        _391 = Div(const _, const 2_u64);
        _390 = Wrapping::<u64>(move _391);
        _389 = &_390;
        _385 = (move _386, move _389);
        _393 = (_385.0: &std::num::Wrapping<u64>);
        _394 = (_385.1: &std::num::Wrapping<u64>);
        _396 = <Wrapping<u64> as PartialEq>::eq(_393, _394) -> bb126;
    }

    bb126: {
        _395 = Not(move _396);
        switchInt(move _395) -> [0: bb128, otherwise: bb127];
    }

    bb127: {
        _397 = core::panicking::AssertKind::Eq;
        _399 = Option::<Arguments<'_>>::None;
        _398 = core::panicking::assert_failed::<Wrapping<u64>, Wrapping<u64>>(move _397, _393, _394, move _399);
    }

    bb128: {
        _400 = Wrapping::<usize>(const _);
        _402 = _400;
        _401 = test::black_box::<Wrapping<usize>>(move _402) -> bb129;
    }

    bb129: {
        _400 = move _401;
        _404 = &mut _400;
        _405 = Add(const _, const 1_usize);
        _403 = <Wrapping<usize> as ShrAssign<usize>>::shr_assign(move _404, move _405) -> bb130;
    }

    bb130: {
        _409 = _400;
        _408 = test::black_box::<Wrapping<usize>>(move _409) -> bb131;
    }

    bb131: {
        _407 = &_408;
        _413 = Eq(const 2_usize, const 0_usize);
        assert(!move _413, "attempt to divide `{}` by zero", const _) -> bb132;
    }

    bb132: {
        _412 = Div(const _, const 2_usize);
        _411 = Wrapping::<usize>(move _412);
        _410 = &_411;
        _406 = (move _407, move _410);
        _414 = (_406.0: &std::num::Wrapping<usize>);
        _415 = (_406.1: &std::num::Wrapping<usize>);
        _417 = <Wrapping<usize> as PartialEq>::eq(_414, _415) -> bb133;
    }

    bb133: {
        _416 = Not(move _417);
        switchInt(move _416) -> [0: bb135, otherwise: bb134];
    }

    bb134: {
        _418 = core::panicking::AssertKind::Eq;
        _420 = Option::<Arguments<'_>>::None;
        _419 = core::panicking::assert_failed::<Wrapping<usize>, Wrapping<usize>>(move _418, _414, _415, move _420);
    }

    bb135: {
        return;
    }
}
