// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    scope 1 {
        debug y => _1;
        let _2: i32;
        scope 2 {
            debug _z => _2;
        }
    }

    bb0: {
        _1 = const 0_i32;
        _3 = Eq(_1, const 0_i32);
        assert(!move _3, "attempt to divide `{}` by zero", const 1_i32) -> bb1;
    }

    bb1: {
        _4 = Eq(_1, const -1_i32);
        _5 = Eq(const 1_i32, const i32::MIN);
        _6 = BitAnd(move _4, move _5);
        assert(!move _6, "attempt to compute `{} / {}`, which would overflow", const 1_i32, _1) -> bb2;
    }

    bb2: {
        _2 = Div(const 1_i32, _1);
        return;
    }
}
