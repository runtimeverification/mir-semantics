// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::result::Result<u8, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: &std::result::Result<u8, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _5: !;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: &std::result::Result<u8, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _10: !;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: &std::result::Result<u16, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _15: !;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: &std::result::Result<u16, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _20: !;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: &std::result::Result<u32, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _25: !;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: &std::result::Result<u32, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _30: !;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: &std::result::Result<u64, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _35: !;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: &std::result::Result<u64, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _40: !;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: &std::result::Result<u128, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _45: !;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: &std::result::Result<u128, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _50: !;
    scope 1 {
        debug r => _1;
        let _6: std::result::Result<u8, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 2 {
            debug r => _6;
            let _11: std::result::Result<u16, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
            scope 3 {
                debug r => _11;
                let _16: std::result::Result<u16, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
                scope 4 {
                    debug r => _16;
                    let _21: std::result::Result<u32, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
                    scope 5 {
                        debug r => _21;
                        let _26: std::result::Result<u32, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
                        scope 6 {
                            debug r => _26;
                            let _31: std::result::Result<u64, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
                            scope 7 {
                                debug r => _31;
                                let _36: std::result::Result<u64, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
                                scope 8 {
                                    debug r => _36;
                                    let _41: std::result::Result<u128, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
                                    scope 9 {
                                        debug r => _41;
                                        let _46: std::result::Result<u128, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
                                        scope 10 {
                                            debug r => _46;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = catch_unwind::<[closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:41: 11:43], u8>(const ZeroSized: [closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:41: 11:43]) -> bb1;
    }

    bb1: {
        _4 = &_1;
        _3 = Result::<u8, Box<dyn Any + Send>>::is_err(move _4) -> [return: bb2, unwind: bb60];
    }

    bb2: {
        _2 = Not(move _3);
        switchInt(move _2) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _5 = core::panicking::panic(const "assertion failed: r.is_err()") -> bb60;
    }

    bb4: {
        _6 = catch_unwind::<[closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:41: 16:43], u8>(const ZeroSized: [closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:41: 16:43]) -> [return: bb5, unwind: bb60];
    }

    bb5: {
        _9 = &_6;
        _8 = Result::<u8, Box<dyn Any + Send>>::is_err(move _9) -> [return: bb6, unwind: bb59];
    }

    bb6: {
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _10 = core::panicking::panic(const "assertion failed: r.is_err()") -> bb59;
    }

    bb8: {
        _11 = catch_unwind::<[closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:41: 11:43], u16>(const ZeroSized: [closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:41: 11:43]) -> [return: bb9, unwind: bb59];
    }

    bb9: {
        _14 = &_11;
        _13 = Result::<u16, Box<dyn Any + Send>>::is_err(move _14) -> [return: bb10, unwind: bb58];
    }

    bb10: {
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _15 = core::panicking::panic(const "assertion failed: r.is_err()") -> bb58;
    }

    bb12: {
        _16 = catch_unwind::<[closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:41: 16:43], u16>(const ZeroSized: [closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:41: 16:43]) -> [return: bb13, unwind: bb58];
    }

    bb13: {
        _19 = &_16;
        _18 = Result::<u16, Box<dyn Any + Send>>::is_err(move _19) -> [return: bb14, unwind: bb57];
    }

    bb14: {
        _17 = Not(move _18);
        switchInt(move _17) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _20 = core::panicking::panic(const "assertion failed: r.is_err()") -> bb57;
    }

    bb16: {
        _21 = catch_unwind::<[closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:41: 11:43], u32>(const ZeroSized: [closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:41: 11:43]) -> [return: bb17, unwind: bb57];
    }

    bb17: {
        _24 = &_21;
        _23 = Result::<u32, Box<dyn Any + Send>>::is_err(move _24) -> [return: bb18, unwind: bb56];
    }

    bb18: {
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _25 = core::panicking::panic(const "assertion failed: r.is_err()") -> bb56;
    }

    bb20: {
        _26 = catch_unwind::<[closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:41: 16:43], u32>(const ZeroSized: [closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:41: 16:43]) -> [return: bb21, unwind: bb56];
    }

    bb21: {
        _29 = &_26;
        _28 = Result::<u32, Box<dyn Any + Send>>::is_err(move _29) -> [return: bb22, unwind: bb55];
    }

    bb22: {
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _30 = core::panicking::panic(const "assertion failed: r.is_err()") -> bb55;
    }

    bb24: {
        _31 = catch_unwind::<[closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:41: 11:43], u64>(const ZeroSized: [closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:41: 11:43]) -> [return: bb25, unwind: bb55];
    }

    bb25: {
        _34 = &_31;
        _33 = Result::<u64, Box<dyn Any + Send>>::is_err(move _34) -> [return: bb26, unwind: bb54];
    }

    bb26: {
        _32 = Not(move _33);
        switchInt(move _32) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _35 = core::panicking::panic(const "assertion failed: r.is_err()") -> bb54;
    }

    bb28: {
        _36 = catch_unwind::<[closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:41: 16:43], u64>(const ZeroSized: [closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:41: 16:43]) -> [return: bb29, unwind: bb54];
    }

    bb29: {
        _39 = &_36;
        _38 = Result::<u64, Box<dyn Any + Send>>::is_err(move _39) -> [return: bb30, unwind: bb53];
    }

    bb30: {
        _37 = Not(move _38);
        switchInt(move _37) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _40 = core::panicking::panic(const "assertion failed: r.is_err()") -> bb53;
    }

    bb32: {
        _41 = catch_unwind::<[closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:41: 11:43], u128>(const ZeroSized: [closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:41: 11:43]) -> [return: bb33, unwind: bb53];
    }

    bb33: {
        _44 = &_41;
        _43 = Result::<u128, Box<dyn Any + Send>>::is_err(move _44) -> [return: bb34, unwind: bb52];
    }

    bb34: {
        _42 = Not(move _43);
        switchInt(move _42) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _45 = core::panicking::panic(const "assertion failed: r.is_err()") -> bb52;
    }

    bb36: {
        _46 = catch_unwind::<[closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:41: 16:43], u128>(const ZeroSized: [closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:41: 16:43]) -> [return: bb37, unwind: bb52];
    }

    bb37: {
        _49 = &_46;
        _48 = Result::<u128, Box<dyn Any + Send>>::is_err(move _49) -> [return: bb38, unwind: bb51];
    }

    bb38: {
        _47 = Not(move _48);
        switchInt(move _47) -> [0: bb40, otherwise: bb39];
    }

    bb39: {
        _50 = core::panicking::panic(const "assertion failed: r.is_err()") -> bb51;
    }

    bb40: {
        drop(_46) -> [return: bb41, unwind: bb52];
    }

    bb41: {
        drop(_41) -> [return: bb42, unwind: bb53];
    }

    bb42: {
        drop(_36) -> [return: bb43, unwind: bb54];
    }

    bb43: {
        drop(_31) -> [return: bb44, unwind: bb55];
    }

    bb44: {
        drop(_26) -> [return: bb45, unwind: bb56];
    }

    bb45: {
        drop(_21) -> [return: bb46, unwind: bb57];
    }

    bb46: {
        drop(_16) -> [return: bb47, unwind: bb58];
    }

    bb47: {
        drop(_11) -> [return: bb48, unwind: bb59];
    }

    bb48: {
        drop(_6) -> [return: bb49, unwind: bb60];
    }

    bb49: {
        drop(_1) -> bb50;
    }

    bb50: {
        return;
    }

    bb51 (cleanup): {
        drop(_46) -> [return: bb52, unwind terminate];
    }

    bb52 (cleanup): {
        drop(_41) -> [return: bb53, unwind terminate];
    }

    bb53 (cleanup): {
        drop(_36) -> [return: bb54, unwind terminate];
    }

    bb54 (cleanup): {
        drop(_31) -> [return: bb55, unwind terminate];
    }

    bb55 (cleanup): {
        drop(_26) -> [return: bb56, unwind terminate];
    }

    bb56 (cleanup): {
        drop(_21) -> [return: bb57, unwind terminate];
    }

    bb57 (cleanup): {
        drop(_16) -> [return: bb58, unwind terminate];
    }

    bb58 (cleanup): {
        drop(_11) -> [return: bb59, unwind terminate];
    }

    bb59 (cleanup): {
        drop(_6) -> [return: bb60, unwind terminate];
    }

    bb60 (cleanup): {
        drop(_1) -> [return: bb61, unwind terminate];
    }

    bb61 (cleanup): {
        resume;
    }
}

fn main::{closure#0}(_1: [closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:41: 11:43]) -> u8 {
    let mut _0: u8;

    bb0: {
        _0 = core::num::<impl u8>::next_power_of_two(const _) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main::{closure#1}(_1: [closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:41: 16:43]) -> u8 {
    let mut _0: u8;
    let mut _2: u8;
    let mut _3: u8;

    bb0: {
        _3 = Shr(const _, const 1_i32);
        _2 = Add(move _3, const 2_u8);
        _0 = core::num::<impl u8>::next_power_of_two(move _2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main::{closure#2}(_1: [closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:41: 11:43]) -> u16 {
    let mut _0: u16;

    bb0: {
        _0 = core::num::<impl u16>::next_power_of_two(const _) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main::{closure#3}(_1: [closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:41: 16:43]) -> u16 {
    let mut _0: u16;
    let mut _2: u16;
    let mut _3: u16;

    bb0: {
        _3 = Shr(const _, const 1_i32);
        _2 = Add(move _3, const 2_u16);
        _0 = core::num::<impl u16>::next_power_of_two(move _2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main::{closure#4}(_1: [closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:41: 11:43]) -> u32 {
    let mut _0: u32;

    bb0: {
        _0 = core::num::<impl u32>::next_power_of_two(const _) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main::{closure#5}(_1: [closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:41: 16:43]) -> u32 {
    let mut _0: u32;
    let mut _2: u32;
    let mut _3: u32;

    bb0: {
        _3 = Shr(const _, const 1_i32);
        _2 = Add(move _3, const 2_u32);
        _0 = core::num::<impl u32>::next_power_of_two(move _2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main::{closure#6}(_1: [closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:41: 11:43]) -> u64 {
    let mut _0: u64;

    bb0: {
        _0 = core::num::<impl u64>::next_power_of_two(const _) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main::{closure#7}(_1: [closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:41: 16:43]) -> u64 {
    let mut _0: u64;
    let mut _2: u64;
    let mut _3: u64;

    bb0: {
        _3 = Shr(const _, const 1_i32);
        _2 = Add(move _3, const 2_u64);
        _0 = core::num::<impl u64>::next_power_of_two(move _2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main::{closure#8}(_1: [closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:41: 11:43]) -> u128 {
    let mut _0: u128;

    bb0: {
        _0 = core::num::<impl u128>::next_power_of_two(const _) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main::{closure#9}(_1: [closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:41: 16:43]) -> u128 {
    let mut _0: u128;
    let mut _2: u128;
    let mut _3: u128;

    bb0: {
        _3 = Shr(const _, const 1_i32);
        _2 = Add(move _3, const 2_u128);
        _0 = core::num::<impl u128>::next_power_of_two(move _2) -> bb1;
    }

    bb1: {
        return;
    }
}
