// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: &std::result::Result<i8, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let _4: std::result::Result<i8, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _5: std::thread::JoinHandle<i8>;
    let mut _6: !;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: &std::result::Result<i16, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let _10: std::result::Result<i16, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _11: std::thread::JoinHandle<i16>;
    let mut _12: !;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: &std::result::Result<i32, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let _16: std::result::Result<i32, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _17: std::thread::JoinHandle<i32>;
    let mut _18: !;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: &std::result::Result<i64, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let _22: std::result::Result<i64, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _23: std::thread::JoinHandle<i64>;
    let mut _24: !;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: &std::result::Result<isize, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let _28: std::result::Result<isize, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _29: std::thread::JoinHandle<isize>;
    let mut _30: !;

    bb0: {
        _5 = spawn::<[closure@ui/numbers-arithmetic/int-abs-overflow.rs:9:27: 9:29], i8>(const ZeroSized: [closure@ui/numbers-arithmetic/int-abs-overflow.rs:9:27: 9:29]) -> bb1;
    }

    bb1: {
        _4 = JoinHandle::<i8>::join(move _5) -> bb2;
    }

    bb2: {
        _3 = &_4;
        _2 = Result::<i8, Box<dyn Any + Send>>::is_err(move _3) -> [return: bb3, unwind: bb35];
    }

    bb3: {
        _1 = Not(move _2);
        drop(_4) -> bb4;
    }

    bb4: {
        switchInt(move _1) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _6 = core::panicking::panic(const "assertion failed: thread::spawn(|| i8::MIN.abs()).join().is_err()");
    }

    bb6: {
        _11 = spawn::<[closure@ui/numbers-arithmetic/int-abs-overflow.rs:10:27: 10:29], i16>(const ZeroSized: [closure@ui/numbers-arithmetic/int-abs-overflow.rs:10:27: 10:29]) -> bb7;
    }

    bb7: {
        _10 = JoinHandle::<i16>::join(move _11) -> bb8;
    }

    bb8: {
        _9 = &_10;
        _8 = Result::<i16, Box<dyn Any + Send>>::is_err(move _9) -> [return: bb9, unwind: bb34];
    }

    bb9: {
        _7 = Not(move _8);
        drop(_10) -> bb10;
    }

    bb10: {
        switchInt(move _7) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _12 = core::panicking::panic(const "assertion failed: thread::spawn(|| i16::MIN.abs()).join().is_err()");
    }

    bb12: {
        _17 = spawn::<[closure@ui/numbers-arithmetic/int-abs-overflow.rs:11:27: 11:29], i32>(const ZeroSized: [closure@ui/numbers-arithmetic/int-abs-overflow.rs:11:27: 11:29]) -> bb13;
    }

    bb13: {
        _16 = JoinHandle::<i32>::join(move _17) -> bb14;
    }

    bb14: {
        _15 = &_16;
        _14 = Result::<i32, Box<dyn Any + Send>>::is_err(move _15) -> [return: bb15, unwind: bb33];
    }

    bb15: {
        _13 = Not(move _14);
        drop(_16) -> bb16;
    }

    bb16: {
        switchInt(move _13) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _18 = core::panicking::panic(const "assertion failed: thread::spawn(|| i32::MIN.abs()).join().is_err()");
    }

    bb18: {
        _23 = spawn::<[closure@ui/numbers-arithmetic/int-abs-overflow.rs:12:27: 12:29], i64>(const ZeroSized: [closure@ui/numbers-arithmetic/int-abs-overflow.rs:12:27: 12:29]) -> bb19;
    }

    bb19: {
        _22 = JoinHandle::<i64>::join(move _23) -> bb20;
    }

    bb20: {
        _21 = &_22;
        _20 = Result::<i64, Box<dyn Any + Send>>::is_err(move _21) -> [return: bb21, unwind: bb32];
    }

    bb21: {
        _19 = Not(move _20);
        drop(_22) -> bb22;
    }

    bb22: {
        switchInt(move _19) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _24 = core::panicking::panic(const "assertion failed: thread::spawn(|| i64::MIN.abs()).join().is_err()");
    }

    bb24: {
        _29 = spawn::<[closure@ui/numbers-arithmetic/int-abs-overflow.rs:13:27: 13:29], isize>(const ZeroSized: [closure@ui/numbers-arithmetic/int-abs-overflow.rs:13:27: 13:29]) -> bb25;
    }

    bb25: {
        _28 = JoinHandle::<isize>::join(move _29) -> bb26;
    }

    bb26: {
        _27 = &_28;
        _26 = Result::<isize, Box<dyn Any + Send>>::is_err(move _27) -> [return: bb27, unwind: bb31];
    }

    bb27: {
        _25 = Not(move _26);
        drop(_28) -> bb28;
    }

    bb28: {
        switchInt(move _25) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _30 = core::panicking::panic(const "assertion failed: thread::spawn(|| isize::MIN.abs()).join().is_err()");
    }

    bb30: {
        return;
    }

    bb31 (cleanup): {
        drop(_28) -> [return: bb36, unwind terminate];
    }

    bb32 (cleanup): {
        drop(_22) -> [return: bb36, unwind terminate];
    }

    bb33 (cleanup): {
        drop(_16) -> [return: bb36, unwind terminate];
    }

    bb34 (cleanup): {
        drop(_10) -> [return: bb36, unwind terminate];
    }

    bb35 (cleanup): {
        drop(_4) -> [return: bb36, unwind terminate];
    }

    bb36 (cleanup): {
        resume;
    }
}

fn main::{closure#0}(_1: [closure@ui/numbers-arithmetic/int-abs-overflow.rs:9:27: 9:29]) -> i8 {
    let mut _0: i8;

    bb0: {
        _0 = core::num::<impl i8>::abs(const _) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main::{closure#1}(_1: [closure@ui/numbers-arithmetic/int-abs-overflow.rs:10:27: 10:29]) -> i16 {
    let mut _0: i16;

    bb0: {
        _0 = core::num::<impl i16>::abs(const _) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main::{closure#2}(_1: [closure@ui/numbers-arithmetic/int-abs-overflow.rs:11:27: 11:29]) -> i32 {
    let mut _0: i32;

    bb0: {
        _0 = core::num::<impl i32>::abs(const _) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main::{closure#3}(_1: [closure@ui/numbers-arithmetic/int-abs-overflow.rs:12:27: 12:29]) -> i64 {
    let mut _0: i64;

    bb0: {
        _0 = core::num::<impl i64>::abs(const _) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main::{closure#4}(_1: [closure@ui/numbers-arithmetic/int-abs-overflow.rs:13:27: 13:29]) -> isize {
    let mut _0: isize;

    bb0: {
        _0 = core::num::<impl isize>::abs(const _) -> bb1;
    }

    bb1: {
        return;
    }
}
