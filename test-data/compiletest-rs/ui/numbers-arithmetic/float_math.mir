// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test_operations(_1: f64, _2: f64) -> () {
    debug a => _1;
    debug b => _2;
    let mut _0: ();
    let mut _3: (&f64, &f64);
    let mut _4: &f64;
    let _5: f64;
    let mut _6: &f64;
    let _7: f64;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: f64;
    let mut _13: f64;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&f64, &f64);
    let mut _18: &f64;
    let _19: f64;
    let mut _20: &f64;
    let _21: f64;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: f64;
    let mut _27: f64;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&f64, &f64);
    let mut _32: &f64;
    let _33: f64;
    let mut _34: &f64;
    let _35: f64;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: f64;
    let mut _41: f64;
    let _43: !;
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _45: (&f64, &f64);
    let mut _46: &f64;
    let _47: f64;
    let mut _48: &f64;
    let _49: f64;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: f64;
    let mut _55: f64;
    let _57: !;
    let mut _58: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _59: (&f64, &f64);
    let mut _60: &f64;
    let _61: f64;
    let mut _62: &f64;
    let _63: f64;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: f64;
    let mut _69: f64;
    let _71: !;
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        let _8: &f64;
        let _9: &f64;
        let _22: &f64;
        let _23: &f64;
        let _36: &f64;
        let _37: &f64;
        let _50: &f64;
        let _51: &f64;
        let _64: &f64;
        let _65: &f64;
        scope 2 {
            debug left_val => _8;
            debug right_val => _9;
            let _14: core::panicking::AssertKind;
            scope 3 {
                debug kind => _14;
            }
        }
        scope 4 {
            debug left_val => _22;
            debug right_val => _23;
            let _28: core::panicking::AssertKind;
            scope 5 {
                debug kind => _28;
            }
        }
        scope 6 {
            debug left_val => _36;
            debug right_val => _37;
            let _42: core::panicking::AssertKind;
            scope 7 {
                debug kind => _42;
            }
        }
        scope 8 {
            debug left_val => _50;
            debug right_val => _51;
            let _56: core::panicking::AssertKind;
            scope 9 {
                debug kind => _56;
            }
        }
        scope 10 {
            debug left_val => _64;
            debug right_val => _65;
            let _70: core::panicking::AssertKind;
            scope 11 {
                debug kind => _70;
            }
        }
    }

    bb0: {
        _5 = fadd_fast::<f64>(_1, _2) -> [return: bb1, unwind unreachable];
    }

    bb1: {
        _4 = &_5;
        _7 = Add(_1, _2);
        _6 = &_7;
        _3 = (move _4, move _6);
        _8 = (_3.0: &f64);
        _9 = (_3.1: &f64);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<f64, f64>(move _14, _8, _9, move _16);
    }

    bb3: {
        _19 = fsub_fast::<f64>(_1, _2) -> [return: bb4, unwind unreachable];
    }

    bb4: {
        _18 = &_19;
        _21 = Sub(_1, _2);
        _20 = &_21;
        _17 = (move _18, move _20);
        _22 = (_17.0: &f64);
        _23 = (_17.1: &f64);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<f64, f64>(move _28, _22, _23, move _30);
    }

    bb6: {
        _33 = fmul_fast::<f64>(_1, _2) -> [return: bb7, unwind unreachable];
    }

    bb7: {
        _32 = &_33;
        _35 = Mul(_1, _2);
        _34 = &_35;
        _31 = (move _32, move _34);
        _36 = (_31.0: &f64);
        _37 = (_31.1: &f64);
        _40 = (*_36);
        _41 = (*_37);
        _39 = Eq(move _40, move _41);
        _38 = Not(move _39);
        switchInt(move _38) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _42 = core::panicking::AssertKind::Eq;
        _44 = Option::<Arguments<'_>>::None;
        _43 = core::panicking::assert_failed::<f64, f64>(move _42, _36, _37, move _44);
    }

    bb9: {
        _47 = fdiv_fast::<f64>(_1, _2) -> [return: bb10, unwind unreachable];
    }

    bb10: {
        _46 = &_47;
        _49 = Div(_1, _2);
        _48 = &_49;
        _45 = (move _46, move _48);
        _50 = (_45.0: &f64);
        _51 = (_45.1: &f64);
        _54 = (*_50);
        _55 = (*_51);
        _53 = Eq(move _54, move _55);
        _52 = Not(move _53);
        switchInt(move _52) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _56 = core::panicking::AssertKind::Eq;
        _58 = Option::<Arguments<'_>>::None;
        _57 = core::panicking::assert_failed::<f64, f64>(move _56, _50, _51, move _58);
    }

    bb12: {
        _61 = frem_fast::<f64>(_1, _2) -> [return: bb13, unwind unreachable];
    }

    bb13: {
        _60 = &_61;
        _63 = Rem(_1, _2);
        _62 = &_63;
        _59 = (move _60, move _62);
        _64 = (_59.0: &f64);
        _65 = (_59.1: &f64);
        _68 = (*_64);
        _69 = (*_65);
        _67 = Eq(move _68, move _69);
        _66 = Not(move _67);
        switchInt(move _66) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _70 = core::panicking::AssertKind::Eq;
        _72 = Option::<Arguments<'_>>::None;
        _71 = core::panicking::assert_failed::<f64, f64>(move _70, _64, _65, move _72);
    }

    bb15: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();

    bb0: {
        _1 = test_operations(const 1f64, const 2f64) -> bb1;
    }

    bb1: {
        _2 = test_operations(const 10f64, const 5f64) -> bb2;
    }

    bb2: {
        return;
    }
}
