// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: u8;
    let mut _3: u8;
    let mut _4: u8;
    let mut _5: (&u8, &u8);
    let mut _6: &u8;
    let mut _7: &u8;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: u8;
    let mut _13: u8;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let mut _2: u8;
        scope 2 {
            debug y => _2;
            let _8: &u8;
            let _9: &u8;
            scope 3 {
                debug left_val => _8;
                debug right_val => _9;
                let _14: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _14;
                }
            }
        }
    }

    bb0: {
        _1 = const 19_u8;
        _2 = const 35_u8;
        _3 = _1;
        _1 = Add(move _3, const 7_u8);
        _4 = _2;
        _2 = Sub(move _4, const 9_u8);
        _6 = &_1;
        _7 = &_2;
        _5 = (move _6, move _7);
        _8 = (_5.0: &u8);
        _9 = (_5.1: &u8);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<u8, u8>(move _14, _8, _9, move _16);
    }

    bb2: {
        return;
    }
}
