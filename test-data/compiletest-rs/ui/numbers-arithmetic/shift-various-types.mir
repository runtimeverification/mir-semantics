// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: &Panolpy) -> () {
    debug p => _1;
    let mut _0: ();
    let mut _2: (&i32, &i32);
    let mut _3: &i32;
    let _4: i32;
    let mut _5: i8;
    let mut _6: &i32;
    let _7: i32;
    let _8: &i32;
    let _9: &i32;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: i32;
    let mut _13: i32;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&i32, &i32);
    let mut _18: &i32;
    let _19: i32;
    let mut _20: i16;
    let mut _21: &i32;
    let _22: i32;
    let _23: &i32;
    let _24: &i32;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: i32;
    let mut _28: i32;
    let _30: !;
    let mut _31: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _32: (&i32, &i32);
    let mut _33: &i32;
    let _34: i32;
    let mut _35: i32;
    let mut _36: &i32;
    let _37: i32;
    let _38: &i32;
    let _39: &i32;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: i32;
    let mut _43: i32;
    let _45: !;
    let mut _46: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _47: (&i32, &i32);
    let mut _48: &i32;
    let _49: i32;
    let mut _50: i64;
    let mut _51: &i32;
    let _52: i32;
    let _53: &i32;
    let _54: &i32;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: i32;
    let mut _58: i32;
    let _60: !;
    let mut _61: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _62: (&i32, &i32);
    let mut _63: &i32;
    let _64: i32;
    let mut _65: isize;
    let mut _66: &i32;
    let _67: i32;
    let _68: &i32;
    let _69: &i32;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: i32;
    let mut _73: i32;
    let _75: !;
    let mut _76: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _77: (&i32, &i32);
    let mut _78: &i32;
    let _79: i32;
    let mut _80: u8;
    let mut _81: &i32;
    let _82: i32;
    let _83: &i32;
    let _84: &i32;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: i32;
    let mut _88: i32;
    let _90: !;
    let mut _91: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _92: (&i32, &i32);
    let mut _93: &i32;
    let _94: i32;
    let mut _95: u16;
    let mut _96: &i32;
    let _97: i32;
    let _98: &i32;
    let _99: &i32;
    let mut _100: bool;
    let mut _101: bool;
    let mut _102: i32;
    let mut _103: i32;
    let _105: !;
    let mut _106: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _107: (&i32, &i32);
    let mut _108: &i32;
    let _109: i32;
    let mut _110: u32;
    let mut _111: &i32;
    let _112: i32;
    let _113: &i32;
    let _114: &i32;
    let mut _115: bool;
    let mut _116: bool;
    let mut _117: i32;
    let mut _118: i32;
    let _120: !;
    let mut _121: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _122: (&i32, &i32);
    let mut _123: &i32;
    let _124: i32;
    let mut _125: u64;
    let mut _126: &i32;
    let _127: i32;
    let _128: &i32;
    let _129: &i32;
    let mut _130: bool;
    let mut _131: bool;
    let mut _132: i32;
    let mut _133: i32;
    let _135: !;
    let mut _136: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _137: (&i32, &i32);
    let mut _138: &i32;
    let _139: i32;
    let mut _140: usize;
    let mut _141: &i32;
    let _142: i32;
    let _143: &i32;
    let _144: &i32;
    let mut _145: bool;
    let mut _146: bool;
    let mut _147: i32;
    let mut _148: i32;
    let _150: !;
    let mut _151: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _8;
        debug right_val => _9;
        let _14: core::panicking::AssertKind;
        scope 2 {
            debug kind => _14;
        }
    }
    scope 3 {
        debug left_val => _23;
        debug right_val => _24;
        let _29: core::panicking::AssertKind;
        scope 4 {
            debug kind => _29;
        }
    }
    scope 5 {
        debug left_val => _38;
        debug right_val => _39;
        let _44: core::panicking::AssertKind;
        scope 6 {
            debug kind => _44;
        }
    }
    scope 7 {
        debug left_val => _53;
        debug right_val => _54;
        let _59: core::panicking::AssertKind;
        scope 8 {
            debug kind => _59;
        }
    }
    scope 9 {
        debug left_val => _68;
        debug right_val => _69;
        let _74: core::panicking::AssertKind;
        scope 10 {
            debug kind => _74;
        }
    }
    scope 11 {
        debug left_val => _83;
        debug right_val => _84;
        let _89: core::panicking::AssertKind;
        scope 12 {
            debug kind => _89;
        }
    }
    scope 13 {
        debug left_val => _98;
        debug right_val => _99;
        let _104: core::panicking::AssertKind;
        scope 14 {
            debug kind => _104;
        }
    }
    scope 15 {
        debug left_val => _113;
        debug right_val => _114;
        let _119: core::panicking::AssertKind;
        scope 16 {
            debug kind => _119;
        }
    }
    scope 17 {
        debug left_val => _128;
        debug right_val => _129;
        let _134: core::panicking::AssertKind;
        scope 18 {
            debug kind => _134;
        }
    }
    scope 19 {
        debug left_val => _143;
        debug right_val => _144;
        let _149: core::panicking::AssertKind;
        scope 20 {
            debug kind => _149;
        }
    }

    bb0: {
        _5 = ((*_1).0: i8);
        _4 = Shr(const 22_i32, move _5);
        _3 = &_4;
        _7 = const 11_i32;
        _6 = &_7;
        _2 = (move _3, move _6);
        _8 = (_2.0: &i32);
        _9 = (_2.1: &i32);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<i32, i32>(move _14, _8, _9, move _16);
    }

    bb2: {
        _20 = ((*_1).1: i16);
        _19 = Shr(const 22_i32, move _20);
        _18 = &_19;
        _22 = const 11_i32;
        _21 = &_22;
        _17 = (move _18, move _21);
        _23 = (_17.0: &i32);
        _24 = (_17.1: &i32);
        _27 = (*_23);
        _28 = (*_24);
        _26 = Eq(move _27, move _28);
        _25 = Not(move _26);
        switchInt(move _25) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _29 = core::panicking::AssertKind::Eq;
        _31 = Option::<Arguments<'_>>::None;
        _30 = core::panicking::assert_failed::<i32, i32>(move _29, _23, _24, move _31);
    }

    bb4: {
        _35 = ((*_1).2: i32);
        _34 = Shr(const 22_i32, move _35);
        _33 = &_34;
        _37 = const 11_i32;
        _36 = &_37;
        _32 = (move _33, move _36);
        _38 = (_32.0: &i32);
        _39 = (_32.1: &i32);
        _42 = (*_38);
        _43 = (*_39);
        _41 = Eq(move _42, move _43);
        _40 = Not(move _41);
        switchInt(move _40) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _44 = core::panicking::AssertKind::Eq;
        _46 = Option::<Arguments<'_>>::None;
        _45 = core::panicking::assert_failed::<i32, i32>(move _44, _38, _39, move _46);
    }

    bb6: {
        _50 = ((*_1).3: i64);
        _49 = Shr(const 22_i32, move _50);
        _48 = &_49;
        _52 = const 11_i32;
        _51 = &_52;
        _47 = (move _48, move _51);
        _53 = (_47.0: &i32);
        _54 = (_47.1: &i32);
        _57 = (*_53);
        _58 = (*_54);
        _56 = Eq(move _57, move _58);
        _55 = Not(move _56);
        switchInt(move _55) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _59 = core::panicking::AssertKind::Eq;
        _61 = Option::<Arguments<'_>>::None;
        _60 = core::panicking::assert_failed::<i32, i32>(move _59, _53, _54, move _61);
    }

    bb8: {
        _65 = ((*_1).4: isize);
        _64 = Shr(const 22_i32, move _65);
        _63 = &_64;
        _67 = const 11_i32;
        _66 = &_67;
        _62 = (move _63, move _66);
        _68 = (_62.0: &i32);
        _69 = (_62.1: &i32);
        _72 = (*_68);
        _73 = (*_69);
        _71 = Eq(move _72, move _73);
        _70 = Not(move _71);
        switchInt(move _70) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _74 = core::panicking::AssertKind::Eq;
        _76 = Option::<Arguments<'_>>::None;
        _75 = core::panicking::assert_failed::<i32, i32>(move _74, _68, _69, move _76);
    }

    bb10: {
        _80 = ((*_1).5: u8);
        _79 = Shr(const 22_i32, move _80);
        _78 = &_79;
        _82 = const 11_i32;
        _81 = &_82;
        _77 = (move _78, move _81);
        _83 = (_77.0: &i32);
        _84 = (_77.1: &i32);
        _87 = (*_83);
        _88 = (*_84);
        _86 = Eq(move _87, move _88);
        _85 = Not(move _86);
        switchInt(move _85) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _89 = core::panicking::AssertKind::Eq;
        _91 = Option::<Arguments<'_>>::None;
        _90 = core::panicking::assert_failed::<i32, i32>(move _89, _83, _84, move _91);
    }

    bb12: {
        _95 = ((*_1).6: u16);
        _94 = Shr(const 22_i32, move _95);
        _93 = &_94;
        _97 = const 11_i32;
        _96 = &_97;
        _92 = (move _93, move _96);
        _98 = (_92.0: &i32);
        _99 = (_92.1: &i32);
        _102 = (*_98);
        _103 = (*_99);
        _101 = Eq(move _102, move _103);
        _100 = Not(move _101);
        switchInt(move _100) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _104 = core::panicking::AssertKind::Eq;
        _106 = Option::<Arguments<'_>>::None;
        _105 = core::panicking::assert_failed::<i32, i32>(move _104, _98, _99, move _106);
    }

    bb14: {
        _110 = ((*_1).7: u32);
        _109 = Shr(const 22_i32, move _110);
        _108 = &_109;
        _112 = const 11_i32;
        _111 = &_112;
        _107 = (move _108, move _111);
        _113 = (_107.0: &i32);
        _114 = (_107.1: &i32);
        _117 = (*_113);
        _118 = (*_114);
        _116 = Eq(move _117, move _118);
        _115 = Not(move _116);
        switchInt(move _115) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _119 = core::panicking::AssertKind::Eq;
        _121 = Option::<Arguments<'_>>::None;
        _120 = core::panicking::assert_failed::<i32, i32>(move _119, _113, _114, move _121);
    }

    bb16: {
        _125 = ((*_1).8: u64);
        _124 = Shr(const 22_i32, move _125);
        _123 = &_124;
        _127 = const 11_i32;
        _126 = &_127;
        _122 = (move _123, move _126);
        _128 = (_122.0: &i32);
        _129 = (_122.1: &i32);
        _132 = (*_128);
        _133 = (*_129);
        _131 = Eq(move _132, move _133);
        _130 = Not(move _131);
        switchInt(move _130) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _134 = core::panicking::AssertKind::Eq;
        _136 = Option::<Arguments<'_>>::None;
        _135 = core::panicking::assert_failed::<i32, i32>(move _134, _128, _129, move _136);
    }

    bb18: {
        _140 = ((*_1).9: usize);
        _139 = Shr(const 22_i32, move _140);
        _138 = &_139;
        _142 = const 11_i32;
        _141 = &_142;
        _137 = (move _138, move _141);
        _143 = (_137.0: &i32);
        _144 = (_137.1: &i32);
        _147 = (*_143);
        _148 = (*_144);
        _146 = Eq(move _147, move _148);
        _145 = Not(move _146);
        switchInt(move _145) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _149 = core::panicking::AssertKind::Eq;
        _151 = Option::<Arguments<'_>>::None;
        _150 = core::panicking::assert_failed::<i32, i32>(move _149, _143, _144, move _151);
    }

    bb20: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Panolpy;
    let _2: &Panolpy;
    scope 1 {
        debug p => _1;
    }

    bb0: {
        _1 = Panolpy { i8: const 1_i8, i16: const 1_i16, i32: const 1_i32, i64: const 1_i64, isize: const 1_isize, u8: const 1_u8, u16: const 1_u16, u32: const 1_u32, u64: const 1_u64, usize: const 1_usize };
        _2 = &_1;
        _0 = foo(_2) -> bb1;
    }

    bb1: {
        return;
    }
}
