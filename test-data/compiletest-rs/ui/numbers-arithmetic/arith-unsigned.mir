// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: !;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: !;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: !;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: !;
    let mut _13: (&u8, &u8);
    let mut _14: &u8;
    let _15: u8;
    let mut _16: bool;
    let mut _17: &u8;
    let _18: u8;
    let _19: &u8;
    let _20: &u8;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: u8;
    let mut _24: u8;
    let _26: !;
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _28: (&u8, &u8);
    let mut _29: &u8;
    let _30: u8;
    let mut _31: bool;
    let mut _32: &u8;
    let _33: u8;
    let _34: &u8;
    let _35: &u8;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: u8;
    let mut _39: u8;
    let _41: !;
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: !;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: !;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: !;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: !;
    let mut _55: (&u16, &u16);
    let mut _56: &u16;
    let _57: u16;
    let mut _58: bool;
    let mut _59: &u16;
    let _60: u16;
    let _61: &u16;
    let _62: &u16;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: u16;
    let mut _66: u16;
    let _68: !;
    let mut _69: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _70: (&u16, &u16);
    let mut _71: &u16;
    let _72: u16;
    let mut _73: bool;
    let mut _74: &u16;
    let _75: u16;
    let _76: &u16;
    let _77: &u16;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: u16;
    let mut _81: u16;
    let _83: !;
    let mut _84: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: !;
    let mut _88: bool;
    let mut _89: bool;
    let mut _90: !;
    let mut _91: bool;
    let mut _92: bool;
    let mut _93: !;
    let mut _94: bool;
    let mut _95: bool;
    let mut _96: !;
    let mut _97: (&u32, &u32);
    let mut _98: &u32;
    let _99: u32;
    let mut _100: bool;
    let mut _101: &u32;
    let _102: u32;
    let _103: &u32;
    let _104: &u32;
    let mut _105: bool;
    let mut _106: bool;
    let mut _107: u32;
    let mut _108: u32;
    let _110: !;
    let mut _111: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _112: (&u32, &u32);
    let mut _113: &u32;
    let _114: u32;
    let mut _115: bool;
    let mut _116: &u32;
    let _117: u32;
    let _118: &u32;
    let _119: &u32;
    let mut _120: bool;
    let mut _121: bool;
    let mut _122: u32;
    let mut _123: u32;
    let _125: !;
    let mut _126: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _19;
        debug right_val => _20;
        let _25: core::panicking::AssertKind;
        scope 2 {
            debug kind => _25;
        }
    }
    scope 3 {
        debug left_val => _34;
        debug right_val => _35;
        let _40: core::panicking::AssertKind;
        scope 4 {
            debug kind => _40;
        }
    }
    scope 5 {
        debug left_val => _61;
        debug right_val => _62;
        let _67: core::panicking::AssertKind;
        scope 6 {
            debug kind => _67;
        }
    }
    scope 7 {
        debug left_val => _76;
        debug right_val => _77;
        let _82: core::panicking::AssertKind;
        scope 8 {
            debug kind => _82;
        }
    }
    scope 9 {
        debug left_val => _103;
        debug right_val => _104;
        let _109: core::panicking::AssertKind;
        scope 10 {
            debug kind => _109;
        }
    }
    scope 11 {
        debug left_val => _118;
        debug right_val => _119;
        let _124: core::panicking::AssertKind;
        scope 12 {
            debug kind => _124;
        }
    }

    bb0: {
        _2 = Lt(const 0_u8, const u8::MAX);
        _1 = Not(move _2);
        switchInt(move _1) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _3 = core::panicking::panic(const "assertion failed: (0u8 < 255u8)");
    }

    bb2: {
        _5 = Le(const 0_u8, const u8::MAX);
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _6 = core::panicking::panic(const "assertion failed: (0u8 <= 255u8)");
    }

    bb4: {
        _8 = Gt(const u8::MAX, const 0_u8);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _9 = core::panicking::panic(const "assertion failed: (255u8 > 0u8)");
    }

    bb6: {
        _11 = Ge(const u8::MAX, const 0_u8);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _12 = core::panicking::panic(const "assertion failed: (255u8 >= 0u8)");
    }

    bb8: {
        _16 = Eq(const 10_u8, const 0_u8);
        assert(!move _16, "attempt to divide `{}` by zero", const 250_u8) -> bb9;
    }

    bb9: {
        _15 = Div(const 250_u8, const 10_u8);
        _14 = &_15;
        _18 = const 25_u8;
        _17 = &_18;
        _13 = (move _14, move _17);
        _19 = (_13.0: &u8);
        _20 = (_13.1: &u8);
        _23 = (*_19);
        _24 = (*_20);
        _22 = Eq(move _23, move _24);
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _25 = core::panicking::AssertKind::Eq;
        _27 = Option::<Arguments<'_>>::None;
        _26 = core::panicking::assert_failed::<u8, u8>(move _25, _19, _20, move _27);
    }

    bb11: {
        _31 = Eq(const 10_u8, const 0_u8);
        assert(!move _31, "attempt to calculate the remainder of `{}` with a divisor of zero", const u8::MAX) -> bb12;
    }

    bb12: {
        _30 = Rem(const u8::MAX, const 10_u8);
        _29 = &_30;
        _33 = const 5_u8;
        _32 = &_33;
        _28 = (move _29, move _32);
        _34 = (_28.0: &u8);
        _35 = (_28.1: &u8);
        _38 = (*_34);
        _39 = (*_35);
        _37 = Eq(move _38, move _39);
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _40 = core::panicking::AssertKind::Eq;
        _42 = Option::<Arguments<'_>>::None;
        _41 = core::panicking::assert_failed::<u8, u8>(move _40, _34, _35, move _42);
    }

    bb14: {
        _44 = Lt(const 0_u16, const 60000_u16);
        _43 = Not(move _44);
        switchInt(move _43) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _45 = core::panicking::panic(const "assertion failed: (0u16 < 60000u16)");
    }

    bb16: {
        _47 = Le(const 0_u16, const 60000_u16);
        _46 = Not(move _47);
        switchInt(move _46) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _48 = core::panicking::panic(const "assertion failed: (0u16 <= 60000u16)");
    }

    bb18: {
        _50 = Gt(const 60000_u16, const 0_u16);
        _49 = Not(move _50);
        switchInt(move _49) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _51 = core::panicking::panic(const "assertion failed: (60000u16 > 0u16)");
    }

    bb20: {
        _53 = Ge(const 60000_u16, const 0_u16);
        _52 = Not(move _53);
        switchInt(move _52) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _54 = core::panicking::panic(const "assertion failed: (60000u16 >= 0u16)");
    }

    bb22: {
        _58 = Eq(const 10_u16, const 0_u16);
        assert(!move _58, "attempt to divide `{}` by zero", const 60000_u16) -> bb23;
    }

    bb23: {
        _57 = Div(const 60000_u16, const 10_u16);
        _56 = &_57;
        _60 = const 6000_u16;
        _59 = &_60;
        _55 = (move _56, move _59);
        _61 = (_55.0: &u16);
        _62 = (_55.1: &u16);
        _65 = (*_61);
        _66 = (*_62);
        _64 = Eq(move _65, move _66);
        _63 = Not(move _64);
        switchInt(move _63) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _67 = core::panicking::AssertKind::Eq;
        _69 = Option::<Arguments<'_>>::None;
        _68 = core::panicking::assert_failed::<u16, u16>(move _67, _61, _62, move _69);
    }

    bb25: {
        _73 = Eq(const 10_u16, const 0_u16);
        assert(!move _73, "attempt to calculate the remainder of `{}` with a divisor of zero", const 60005_u16) -> bb26;
    }

    bb26: {
        _72 = Rem(const 60005_u16, const 10_u16);
        _71 = &_72;
        _75 = const 5_u16;
        _74 = &_75;
        _70 = (move _71, move _74);
        _76 = (_70.0: &u16);
        _77 = (_70.1: &u16);
        _80 = (*_76);
        _81 = (*_77);
        _79 = Eq(move _80, move _81);
        _78 = Not(move _79);
        switchInt(move _78) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _82 = core::panicking::AssertKind::Eq;
        _84 = Option::<Arguments<'_>>::None;
        _83 = core::panicking::assert_failed::<u16, u16>(move _82, _76, _77, move _84);
    }

    bb28: {
        _86 = Lt(const 0_u32, const 4000000000_u32);
        _85 = Not(move _86);
        switchInt(move _85) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _87 = core::panicking::panic(const "assertion failed: (0u32 < 4000000000u32)");
    }

    bb30: {
        _89 = Le(const 0_u32, const 4000000000_u32);
        _88 = Not(move _89);
        switchInt(move _88) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _90 = core::panicking::panic(const "assertion failed: (0u32 <= 4000000000u32)");
    }

    bb32: {
        _92 = Gt(const 4000000000_u32, const 0_u32);
        _91 = Not(move _92);
        switchInt(move _91) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        _93 = core::panicking::panic(const "assertion failed: (4000000000u32 > 0u32)");
    }

    bb34: {
        _95 = Ge(const 4000000000_u32, const 0_u32);
        _94 = Not(move _95);
        switchInt(move _94) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _96 = core::panicking::panic(const "assertion failed: (4000000000u32 >= 0u32)");
    }

    bb36: {
        _100 = Eq(const 10_u32, const 0_u32);
        assert(!move _100, "attempt to divide `{}` by zero", const 4000000000_u32) -> bb37;
    }

    bb37: {
        _99 = Div(const 4000000000_u32, const 10_u32);
        _98 = &_99;
        _102 = const 400000000_u32;
        _101 = &_102;
        _97 = (move _98, move _101);
        _103 = (_97.0: &u32);
        _104 = (_97.1: &u32);
        _107 = (*_103);
        _108 = (*_104);
        _106 = Eq(move _107, move _108);
        _105 = Not(move _106);
        switchInt(move _105) -> [0: bb39, otherwise: bb38];
    }

    bb38: {
        _109 = core::panicking::AssertKind::Eq;
        _111 = Option::<Arguments<'_>>::None;
        _110 = core::panicking::assert_failed::<u32, u32>(move _109, _103, _104, move _111);
    }

    bb39: {
        _115 = Eq(const 10_u32, const 0_u32);
        assert(!move _115, "attempt to calculate the remainder of `{}` with a divisor of zero", const 4000000005_u32) -> bb40;
    }

    bb40: {
        _114 = Rem(const 4000000005_u32, const 10_u32);
        _113 = &_114;
        _117 = const 5_u32;
        _116 = &_117;
        _112 = (move _113, move _116);
        _118 = (_112.0: &u32);
        _119 = (_112.1: &u32);
        _122 = (*_118);
        _123 = (*_119);
        _121 = Eq(move _122, move _123);
        _120 = Not(move _121);
        switchInt(move _120) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _124 = core::panicking::AssertKind::Eq;
        _126 = Option::<Arguments<'_>>::None;
        _125 = core::panicking::assert_failed::<u32, u32>(move _124, _118, _119, move _126);
    }

    bb42: {
        return;
    }
}
