// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: f64;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;
    let mut _7: (&f64, &f64);
    let mut _8: &f64;
    let _9: f64;
    let mut _10: &f64;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: f64;
    let mut _16: f64;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: !;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: f64;
    let mut _26: !;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: f64;
    let mut _30: f64;
    let mut _31: !;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: f64;
    let mut _35: !;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: !;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: !;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: !;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: f64;
    let mut _48: !;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: !;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: !;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: !;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: f64;
    let mut _61: !;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: !;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: f64;
    let mut _70: !;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: !;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: !;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: !;
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: f64;
    let mut _87: !;
    let mut _88: bool;
    let mut _89: bool;
    let mut _90: bool;
    let mut _91: !;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: bool;
    let mut _95: !;
    let mut _96: bool;
    let mut _97: bool;
    let mut _98: bool;
    let mut _99: !;
    let mut _100: bool;
    let mut _101: bool;
    let mut _102: bool;
    let mut _103: f64;
    let mut _104: !;
    let mut _105: bool;
    let mut _106: bool;
    let mut _107: bool;
    let mut _108: f64;
    let mut _109: !;
    let mut _110: bool;
    let mut _111: bool;
    let mut _112: bool;
    let mut _113: f64;
    let mut _114: f64;
    let mut _115: !;
    let mut _116: bool;
    let mut _117: bool;
    let mut _118: bool;
    let mut _119: !;
    let mut _120: bool;
    let mut _121: bool;
    let mut _122: bool;
    let mut _123: f64;
    let mut _124: !;
    let mut _125: bool;
    let mut _126: bool;
    let mut _127: bool;
    let mut _128: !;
    let mut _129: bool;
    let mut _130: bool;
    let mut _131: bool;
    let mut _132: !;
    let mut _133: bool;
    let mut _134: bool;
    let mut _135: bool;
    let mut _136: f64;
    let mut _137: !;
    let mut _138: bool;
    let mut _139: bool;
    let mut _140: bool;
    let mut _141: !;
    let mut _142: bool;
    let mut _143: bool;
    let mut _144: bool;
    let mut _145: !;
    let mut _146: bool;
    let mut _147: bool;
    let mut _148: bool;
    let mut _149: f64;
    let mut _150: !;
    let mut _151: bool;
    let mut _152: bool;
    let mut _153: bool;
    let mut _154: f64;
    let mut _155: !;
    let mut _156: bool;
    let mut _157: bool;
    let mut _158: bool;
    let mut _159: !;
    let mut _160: bool;
    let mut _161: bool;
    let mut _162: bool;
    let mut _163: !;
    let mut _164: bool;
    let mut _165: bool;
    let mut _166: bool;
    let mut _167: !;
    let mut _168: bool;
    let mut _169: bool;
    let mut _170: bool;
    let mut _171: !;
    let mut _172: bool;
    let mut _173: bool;
    let mut _174: bool;
    let mut _175: f64;
    let mut _176: !;
    let mut _177: bool;
    let mut _178: bool;
    let mut _179: bool;
    let mut _180: !;
    let mut _181: bool;
    let mut _182: bool;
    let mut _183: bool;
    let mut _184: f64;
    let mut _185: !;
    let mut _186: bool;
    let mut _187: bool;
    let mut _188: bool;
    let mut _189: !;
    let mut _190: bool;
    let mut _191: bool;
    let mut _192: bool;
    let mut _193: !;
    let mut _194: bool;
    let mut _195: bool;
    let mut _196: bool;
    let mut _197: !;
    let mut _198: bool;
    let mut _199: bool;
    let mut _200: bool;
    let mut _201: !;
    let mut _202: bool;
    let mut _203: bool;
    let mut _204: bool;
    let mut _205: f64;
    let mut _206: !;
    let mut _207: bool;
    let mut _208: bool;
    let mut _209: bool;
    let mut _210: f64;
    let mut _211: !;
    let mut _212: bool;
    let mut _213: bool;
    let mut _214: f64;
    let mut _215: !;
    let mut _216: bool;
    let mut _217: bool;
    let mut _218: f64;
    let mut _219: f64;
    let mut _220: !;
    let mut _221: bool;
    let mut _222: bool;
    let mut _223: f64;
    let mut _224: !;
    let mut _225: bool;
    let mut _226: bool;
    let mut _227: f64;
    let mut _228: !;
    let mut _229: bool;
    let mut _230: bool;
    let mut _231: f64;
    let mut _232: !;
    let mut _233: bool;
    let mut _234: bool;
    let mut _235: f64;
    let mut _236: !;
    let mut _237: bool;
    let mut _238: bool;
    let mut _239: f64;
    let mut _240: !;
    let mut _241: bool;
    let mut _242: bool;
    let mut _243: f64;
    let mut _244: !;
    let mut _245: bool;
    let mut _246: bool;
    let mut _247: f64;
    let mut _248: f64;
    let mut _249: !;
    let mut _250: bool;
    let mut _251: bool;
    let mut _252: f64;
    let mut _253: !;
    let mut _254: bool;
    let mut _255: bool;
    let mut _256: bool;
    let mut _257: !;
    let mut _258: bool;
    let mut _259: bool;
    let mut _260: bool;
    let mut _261: !;
    let mut _262: bool;
    let mut _263: bool;
    let mut _264: bool;
    let mut _265: !;
    let mut _266: bool;
    let mut _267: bool;
    let mut _268: bool;
    let mut _269: !;
    let mut _270: bool;
    let mut _271: bool;
    let mut _272: bool;
    let mut _273: !;
    let mut _274: bool;
    let mut _275: bool;
    let mut _276: bool;
    let mut _277: f64;
    let mut _278: !;
    let mut _279: bool;
    let mut _280: bool;
    let mut _281: bool;
    let mut _282: f64;
    let mut _283: f64;
    let mut _284: !;
    scope 1 {
        debug nan => _1;
        let _5: f64;
        scope 2 {
            debug inf => _5;
            let _6: f64;
            scope 3 {
                debug neg_inf => _6;
                let _11: &f64;
                let _12: &f64;
                scope 4 {
                    debug left_val => _11;
                    debug right_val => _12;
                    let _17: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _17;
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const _;
        _3 = core::f64::<impl f64>::is_nan(_1) -> bb1;
    }

    bb1: {
        _2 = Not(move _3);
        switchInt(move _2) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _4 = core::panicking::panic(const "assertion failed: (nan).is_nan()");
    }

    bb3: {
        _5 = const _;
        _6 = Neg(const _);
        _9 = Neg(_5);
        _8 = &_9;
        _10 = &_6;
        _7 = (move _8, move _10);
        _11 = (_7.0: &f64);
        _12 = (_7.1: &f64);
        _15 = (*_11);
        _16 = (*_12);
        _14 = Eq(move _15, move _16);
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<f64, f64>(move _17, _11, _12, move _19);
    }

    bb5: {
        _21 = Ne(_1, _1);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _22 = core::panicking::panic(const "assertion failed: nan != nan");
    }

    bb7: {
        _25 = Neg(_1);
        _24 = Ne(_1, move _25);
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _26 = core::panicking::panic(const "assertion failed: nan != -nan");
    }

    bb9: {
        _29 = Neg(_1);
        _30 = Neg(_1);
        _28 = Ne(move _29, move _30);
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _31 = core::panicking::panic(const "assertion failed: -nan != -nan");
    }

    bb11: {
        _34 = Neg(_1);
        _33 = Ne(move _34, _1);
        _32 = Not(move _33);
        switchInt(move _32) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _35 = core::panicking::panic(const "assertion failed: -nan != nan");
    }

    bb13: {
        _37 = Ne(_1, const 1f64);
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _38 = core::panicking::panic(const "assertion failed: nan != 1.");
    }

    bb15: {
        _40 = Ne(_1, const 0f64);
        _39 = Not(move _40);
        switchInt(move _39) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _41 = core::panicking::panic(const "assertion failed: nan != 0.");
    }

    bb17: {
        _43 = Ne(_1, _5);
        _42 = Not(move _43);
        switchInt(move _42) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _44 = core::panicking::panic(const "assertion failed: nan != inf");
    }

    bb19: {
        _47 = Neg(_5);
        _46 = Ne(_1, move _47);
        _45 = Not(move _46);
        switchInt(move _45) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _48 = core::panicking::panic(const "assertion failed: nan != -inf");
    }

    bb21: {
        _50 = Ne(const 1f64, _1);
        _49 = Not(move _50);
        switchInt(move _49) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        _51 = core::panicking::panic(const "assertion failed: 1. != nan");
    }

    bb23: {
        _53 = Ne(const 0f64, _1);
        _52 = Not(move _53);
        switchInt(move _52) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _54 = core::panicking::panic(const "assertion failed: 0. != nan");
    }

    bb25: {
        _56 = Ne(_5, _1);
        _55 = Not(move _56);
        switchInt(move _55) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _57 = core::panicking::panic(const "assertion failed: inf != nan");
    }

    bb27: {
        _60 = Neg(_5);
        _59 = Ne(move _60, _1);
        _58 = Not(move _59);
        switchInt(move _58) -> [0: bb29, otherwise: bb28];
    }

    bb28: {
        _61 = core::panicking::panic(const "assertion failed: -inf != nan");
    }

    bb29: {
        _64 = Eq(_1, _1);
        _63 = Not(move _64);
        _62 = Not(move _63);
        switchInt(move _62) -> [0: bb31, otherwise: bb30];
    }

    bb30: {
        _65 = core::panicking::panic(const "assertion failed: !(nan == nan)");
    }

    bb31: {
        _69 = Neg(_1);
        _68 = Eq(_1, move _69);
        _67 = Not(move _68);
        _66 = Not(move _67);
        switchInt(move _66) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _70 = core::panicking::panic(const "assertion failed: !(nan == -nan)");
    }

    bb33: {
        _73 = Eq(_1, const 1f64);
        _72 = Not(move _73);
        _71 = Not(move _72);
        switchInt(move _71) -> [0: bb35, otherwise: bb34];
    }

    bb34: {
        _74 = core::panicking::panic(const "assertion failed: !(nan == 1.)");
    }

    bb35: {
        _77 = Eq(_1, const 0f64);
        _76 = Not(move _77);
        _75 = Not(move _76);
        switchInt(move _75) -> [0: bb37, otherwise: bb36];
    }

    bb36: {
        _78 = core::panicking::panic(const "assertion failed: !(nan == 0.)");
    }

    bb37: {
        _81 = Eq(_1, _5);
        _80 = Not(move _81);
        _79 = Not(move _80);
        switchInt(move _79) -> [0: bb39, otherwise: bb38];
    }

    bb38: {
        _82 = core::panicking::panic(const "assertion failed: !(nan == inf)");
    }

    bb39: {
        _86 = Neg(_5);
        _85 = Eq(_1, move _86);
        _84 = Not(move _85);
        _83 = Not(move _84);
        switchInt(move _83) -> [0: bb41, otherwise: bb40];
    }

    bb40: {
        _87 = core::panicking::panic(const "assertion failed: !(nan == -inf)");
    }

    bb41: {
        _90 = Eq(const 1f64, _1);
        _89 = Not(move _90);
        _88 = Not(move _89);
        switchInt(move _88) -> [0: bb43, otherwise: bb42];
    }

    bb42: {
        _91 = core::panicking::panic(const "assertion failed: !(1. == nan)");
    }

    bb43: {
        _94 = Eq(const 0f64, _1);
        _93 = Not(move _94);
        _92 = Not(move _93);
        switchInt(move _92) -> [0: bb45, otherwise: bb44];
    }

    bb44: {
        _95 = core::panicking::panic(const "assertion failed: !(0. == nan)");
    }

    bb45: {
        _98 = Eq(_5, _1);
        _97 = Not(move _98);
        _96 = Not(move _97);
        switchInt(move _96) -> [0: bb47, otherwise: bb46];
    }

    bb46: {
        _99 = core::panicking::panic(const "assertion failed: !(inf == nan)");
    }

    bb47: {
        _103 = Neg(_5);
        _102 = Eq(move _103, _1);
        _101 = Not(move _102);
        _100 = Not(move _101);
        switchInt(move _100) -> [0: bb49, otherwise: bb48];
    }

    bb48: {
        _104 = core::panicking::panic(const "assertion failed: !(-inf == nan)");
    }

    bb49: {
        _108 = Neg(_1);
        _107 = Eq(move _108, _1);
        _106 = Not(move _107);
        _105 = Not(move _106);
        switchInt(move _105) -> [0: bb51, otherwise: bb50];
    }

    bb50: {
        _109 = core::panicking::panic(const "assertion failed: !(-nan == nan)");
    }

    bb51: {
        _113 = Neg(_1);
        _114 = Neg(_1);
        _112 = Eq(move _113, move _114);
        _111 = Not(move _112);
        _110 = Not(move _111);
        switchInt(move _110) -> [0: bb53, otherwise: bb52];
    }

    bb52: {
        _115 = core::panicking::panic(const "assertion failed: !(-nan == -nan)");
    }

    bb53: {
        _118 = Gt(_1, _1);
        _117 = Not(move _118);
        _116 = Not(move _117);
        switchInt(move _116) -> [0: bb55, otherwise: bb54];
    }

    bb54: {
        _119 = core::panicking::panic(const "assertion failed: !(nan > nan)");
    }

    bb55: {
        _123 = Neg(_1);
        _122 = Gt(_1, move _123);
        _121 = Not(move _122);
        _120 = Not(move _121);
        switchInt(move _120) -> [0: bb57, otherwise: bb56];
    }

    bb56: {
        _124 = core::panicking::panic(const "assertion failed: !(nan > -nan)");
    }

    bb57: {
        _127 = Gt(_1, const 0f64);
        _126 = Not(move _127);
        _125 = Not(move _126);
        switchInt(move _125) -> [0: bb59, otherwise: bb58];
    }

    bb58: {
        _128 = core::panicking::panic(const "assertion failed: !(nan > 0.)");
    }

    bb59: {
        _131 = Gt(_1, _5);
        _130 = Not(move _131);
        _129 = Not(move _130);
        switchInt(move _129) -> [0: bb61, otherwise: bb60];
    }

    bb60: {
        _132 = core::panicking::panic(const "assertion failed: !(nan > inf)");
    }

    bb61: {
        _136 = Neg(_5);
        _135 = Gt(_1, move _136);
        _134 = Not(move _135);
        _133 = Not(move _134);
        switchInt(move _133) -> [0: bb63, otherwise: bb62];
    }

    bb62: {
        _137 = core::panicking::panic(const "assertion failed: !(nan > -inf)");
    }

    bb63: {
        _140 = Gt(const 0f64, _1);
        _139 = Not(move _140);
        _138 = Not(move _139);
        switchInt(move _138) -> [0: bb65, otherwise: bb64];
    }

    bb64: {
        _141 = core::panicking::panic(const "assertion failed: !(0. > nan)");
    }

    bb65: {
        _144 = Gt(_5, _1);
        _143 = Not(move _144);
        _142 = Not(move _143);
        switchInt(move _142) -> [0: bb67, otherwise: bb66];
    }

    bb66: {
        _145 = core::panicking::panic(const "assertion failed: !(inf > nan)");
    }

    bb67: {
        _149 = Neg(_5);
        _148 = Gt(move _149, _1);
        _147 = Not(move _148);
        _146 = Not(move _147);
        switchInt(move _146) -> [0: bb69, otherwise: bb68];
    }

    bb68: {
        _150 = core::panicking::panic(const "assertion failed: !(-inf > nan)");
    }

    bb69: {
        _154 = Neg(_1);
        _153 = Gt(move _154, _1);
        _152 = Not(move _153);
        _151 = Not(move _152);
        switchInt(move _151) -> [0: bb71, otherwise: bb70];
    }

    bb70: {
        _155 = core::panicking::panic(const "assertion failed: !(-nan > nan)");
    }

    bb71: {
        _158 = Lt(_1, const 0f64);
        _157 = Not(move _158);
        _156 = Not(move _157);
        switchInt(move _156) -> [0: bb73, otherwise: bb72];
    }

    bb72: {
        _159 = core::panicking::panic(const "assertion failed: !(nan < 0.)");
    }

    bb73: {
        _162 = Lt(_1, const 1f64);
        _161 = Not(move _162);
        _160 = Not(move _161);
        switchInt(move _160) -> [0: bb75, otherwise: bb74];
    }

    bb74: {
        _163 = core::panicking::panic(const "assertion failed: !(nan < 1.)");
    }

    bb75: {
        _166 = Lt(_1, const -1f64);
        _165 = Not(move _166);
        _164 = Not(move _165);
        switchInt(move _164) -> [0: bb77, otherwise: bb76];
    }

    bb76: {
        _167 = core::panicking::panic(const "assertion failed: !(nan < -1.)");
    }

    bb77: {
        _170 = Lt(_1, _5);
        _169 = Not(move _170);
        _168 = Not(move _169);
        switchInt(move _168) -> [0: bb79, otherwise: bb78];
    }

    bb78: {
        _171 = core::panicking::panic(const "assertion failed: !(nan < inf)");
    }

    bb79: {
        _175 = Neg(_5);
        _174 = Lt(_1, move _175);
        _173 = Not(move _174);
        _172 = Not(move _173);
        switchInt(move _172) -> [0: bb81, otherwise: bb80];
    }

    bb80: {
        _176 = core::panicking::panic(const "assertion failed: !(nan < -inf)");
    }

    bb81: {
        _179 = Lt(_1, _1);
        _178 = Not(move _179);
        _177 = Not(move _178);
        switchInt(move _177) -> [0: bb83, otherwise: bb82];
    }

    bb82: {
        _180 = core::panicking::panic(const "assertion failed: !(nan < nan)");
    }

    bb83: {
        _184 = Neg(_1);
        _183 = Lt(_1, move _184);
        _182 = Not(move _183);
        _181 = Not(move _182);
        switchInt(move _181) -> [0: bb85, otherwise: bb84];
    }

    bb84: {
        _185 = core::panicking::panic(const "assertion failed: !(nan < -nan)");
    }

    bb85: {
        _188 = Lt(const 0f64, _1);
        _187 = Not(move _188);
        _186 = Not(move _187);
        switchInt(move _186) -> [0: bb87, otherwise: bb86];
    }

    bb86: {
        _189 = core::panicking::panic(const "assertion failed: !(0. < nan)");
    }

    bb87: {
        _192 = Lt(const 1f64, _1);
        _191 = Not(move _192);
        _190 = Not(move _191);
        switchInt(move _190) -> [0: bb89, otherwise: bb88];
    }

    bb88: {
        _193 = core::panicking::panic(const "assertion failed: !(1. < nan)");
    }

    bb89: {
        _196 = Lt(const -1f64, _1);
        _195 = Not(move _196);
        _194 = Not(move _195);
        switchInt(move _194) -> [0: bb91, otherwise: bb90];
    }

    bb90: {
        _197 = core::panicking::panic(const "assertion failed: !(-1. < nan)");
    }

    bb91: {
        _200 = Lt(_5, _1);
        _199 = Not(move _200);
        _198 = Not(move _199);
        switchInt(move _198) -> [0: bb93, otherwise: bb92];
    }

    bb92: {
        _201 = core::panicking::panic(const "assertion failed: !(inf < nan)");
    }

    bb93: {
        _205 = Neg(_5);
        _204 = Lt(move _205, _1);
        _203 = Not(move _204);
        _202 = Not(move _203);
        switchInt(move _202) -> [0: bb95, otherwise: bb94];
    }

    bb94: {
        _206 = core::panicking::panic(const "assertion failed: !(-inf < nan)");
    }

    bb95: {
        _210 = Neg(_1);
        _209 = Lt(move _210, _1);
        _208 = Not(move _209);
        _207 = Not(move _208);
        switchInt(move _207) -> [0: bb97, otherwise: bb96];
    }

    bb96: {
        _211 = core::panicking::panic(const "assertion failed: !(-nan < nan)");
    }

    bb97: {
        _214 = Add(_1, _5);
        _213 = core::f64::<impl f64>::is_nan(move _214) -> bb98;
    }

    bb98: {
        _212 = Not(move _213);
        switchInt(move _212) -> [0: bb100, otherwise: bb99];
    }

    bb99: {
        _215 = core::panicking::panic(const "assertion failed: (nan + inf).is_nan()");
    }

    bb100: {
        _219 = Neg(_5);
        _218 = Add(_1, move _219);
        _217 = core::f64::<impl f64>::is_nan(move _218) -> bb101;
    }

    bb101: {
        _216 = Not(move _217);
        switchInt(move _216) -> [0: bb103, otherwise: bb102];
    }

    bb102: {
        _220 = core::panicking::panic(const "assertion failed: (nan + -inf).is_nan()");
    }

    bb103: {
        _223 = Add(_1, const 0f64);
        _222 = core::f64::<impl f64>::is_nan(move _223) -> bb104;
    }

    bb104: {
        _221 = Not(move _222);
        switchInt(move _221) -> [0: bb106, otherwise: bb105];
    }

    bb105: {
        _224 = core::panicking::panic(const "assertion failed: (nan + 0.).is_nan()");
    }

    bb106: {
        _227 = Add(_1, const 1f64);
        _226 = core::f64::<impl f64>::is_nan(move _227) -> bb107;
    }

    bb107: {
        _225 = Not(move _226);
        switchInt(move _225) -> [0: bb109, otherwise: bb108];
    }

    bb108: {
        _228 = core::panicking::panic(const "assertion failed: (nan + 1.).is_nan()");
    }

    bb109: {
        _231 = Mul(_1, const 1f64);
        _230 = core::f64::<impl f64>::is_nan(move _231) -> bb110;
    }

    bb110: {
        _229 = Not(move _230);
        switchInt(move _229) -> [0: bb112, otherwise: bb111];
    }

    bb111: {
        _232 = core::panicking::panic(const "assertion failed: (nan * 1.).is_nan()");
    }

    bb112: {
        _235 = Div(_1, const 1f64);
        _234 = core::f64::<impl f64>::is_nan(move _235) -> bb113;
    }

    bb113: {
        _233 = Not(move _234);
        switchInt(move _233) -> [0: bb115, otherwise: bb114];
    }

    bb114: {
        _236 = core::panicking::panic(const "assertion failed: (nan / 1.).is_nan()");
    }

    bb115: {
        _239 = Div(_1, const 0f64);
        _238 = core::f64::<impl f64>::is_nan(move _239) -> bb116;
    }

    bb116: {
        _237 = Not(move _238);
        switchInt(move _237) -> [0: bb118, otherwise: bb117];
    }

    bb117: {
        _240 = core::panicking::panic(const "assertion failed: (nan / 0.).is_nan()");
    }

    bb118: {
        _243 = Div(const 0f64, const 0f64);
        _242 = core::f64::<impl f64>::is_nan(move _243) -> bb119;
    }

    bb119: {
        _241 = Not(move _242);
        switchInt(move _241) -> [0: bb121, otherwise: bb120];
    }

    bb120: {
        _244 = core::panicking::panic(const "assertion failed: (0.0 / 0.0f64).is_nan()");
    }

    bb121: {
        _248 = Neg(_5);
        _247 = Add(move _248, _5);
        _246 = core::f64::<impl f64>::is_nan(move _247) -> bb122;
    }

    bb122: {
        _245 = Not(move _246);
        switchInt(move _245) -> [0: bb124, otherwise: bb123];
    }

    bb123: {
        _249 = core::panicking::panic(const "assertion failed: (-inf + inf).is_nan()");
    }

    bb124: {
        _252 = Sub(_5, _5);
        _251 = core::f64::<impl f64>::is_nan(move _252) -> bb125;
    }

    bb125: {
        _250 = Not(move _251);
        switchInt(move _250) -> [0: bb127, otherwise: bb126];
    }

    bb126: {
        _253 = core::panicking::panic(const "assertion failed: (inf - inf).is_nan()");
    }

    bb127: {
        _256 = core::f64::<impl f64>::is_nan(const -1f64) -> bb128;
    }

    bb128: {
        _255 = Not(move _256);
        _254 = Not(move _255);
        switchInt(move _254) -> [0: bb130, otherwise: bb129];
    }

    bb129: {
        _257 = core::panicking::panic(const "assertion failed: !(-1.0f64).is_nan()");
    }

    bb130: {
        _260 = core::f64::<impl f64>::is_nan(const 0f64) -> bb131;
    }

    bb131: {
        _259 = Not(move _260);
        _258 = Not(move _259);
        switchInt(move _258) -> [0: bb133, otherwise: bb132];
    }

    bb132: {
        _261 = core::panicking::panic(const "assertion failed: !(0.0f64).is_nan()");
    }

    bb133: {
        _264 = core::f64::<impl f64>::is_nan(const 0.10000000000000001f64) -> bb134;
    }

    bb134: {
        _263 = Not(move _264);
        _262 = Not(move _263);
        switchInt(move _262) -> [0: bb136, otherwise: bb135];
    }

    bb135: {
        _265 = core::panicking::panic(const "assertion failed: !(0.1f64).is_nan()");
    }

    bb136: {
        _268 = core::f64::<impl f64>::is_nan(const 1f64) -> bb137;
    }

    bb137: {
        _267 = Not(move _268);
        _266 = Not(move _267);
        switchInt(move _266) -> [0: bb139, otherwise: bb138];
    }

    bb138: {
        _269 = core::panicking::panic(const "assertion failed: !(1.0f64).is_nan()");
    }

    bb139: {
        _272 = core::f64::<impl f64>::is_nan(_5) -> bb140;
    }

    bb140: {
        _271 = Not(move _272);
        _270 = Not(move _271);
        switchInt(move _270) -> [0: bb142, otherwise: bb141];
    }

    bb141: {
        _273 = core::panicking::panic(const "assertion failed: !(inf).is_nan()");
    }

    bb142: {
        _277 = Neg(_5);
        _276 = core::f64::<impl f64>::is_nan(move _277) -> bb143;
    }

    bb143: {
        _275 = Not(move _276);
        _274 = Not(move _275);
        switchInt(move _274) -> [0: bb145, otherwise: bb144];
    }

    bb144: {
        _278 = core::panicking::panic(const "assertion failed: !(-inf).is_nan()");
    }

    bb145: {
        _283 = Neg(_5);
        _282 = Div(const 1f64, move _283);
        _281 = core::f64::<impl f64>::is_nan(move _282) -> bb146;
    }

    bb146: {
        _280 = Not(move _281);
        _279 = Not(move _280);
        switchInt(move _279) -> [0: bb148, otherwise: bb147];
    }

    bb147: {
        _284 = core::panicking::panic(const "assertion failed: !(1. / -inf).is_nan()");
    }

    bb148: {
        return;
    }
}
