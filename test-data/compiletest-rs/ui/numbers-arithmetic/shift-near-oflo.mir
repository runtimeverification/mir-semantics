// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();

    bb0: {
        _1 = test_left_shift() -> bb1;
    }

    bb1: {
        _2 = test_right_shift() -> bb2;
    }

    bb2: {
        return;
    }
}

static mut HACK: i32 = {
    let mut _0: i32;

    bb0: {
        _0 = const 0_i32;
        return;
    }
}

fn id(_1: T) -> T {
    debug x => _1;
    let mut _0: T;
    let mut _2: *mut i32;
    scope 1 {
        let mut _3: *const ();
        let mut _4: usize;
        let mut _5: usize;
        let mut _6: usize;
        let mut _7: usize;
        let mut _8: bool;
        let mut _9: *const ();
        let mut _10: usize;
        let mut _11: usize;
        let mut _12: usize;
        let mut _13: usize;
        let mut _14: bool;
    }

    bb0: {
        _2 = const {alloc1: *mut i32};
        _9 = _2 as *const () (PtrToPtr);
        _10 = _9 as usize (Transmute);
        _11 = AlignOf(i32);
        _12 = Sub(_11, const 1_usize);
        _13 = BitAnd(_10, _12);
        _14 = Eq(_13, const 0_usize);
        assert(_14, "misaligned pointer dereference: address must be a multiple of {} but is {}", _11, _10) -> [success: bb2, unwind unreachable];
    }

    bb1: {
        (*_2) = Add((*_2), const 1_i32);
        _0 = move _1;
        return;
    }

    bb2: {
        _3 = _2 as *const () (PtrToPtr);
        _4 = _3 as usize (Transmute);
        _5 = AlignOf(i32);
        _6 = Sub(_5, const 1_usize);
        _7 = BitAnd(_4, _6);
        _8 = Eq(_7, const 0_usize);
        assert(_8, "misaligned pointer dereference: address must be a multiple of {} but is {}", _5, _4) -> [success: bb1, unwind unreachable];
    }
}

alloc1 (static: HACK, size: 4, align: 4) {
    00 00 00 00                                     â”‚ ....
}

fn test_left_shift() -> () {
    let mut _0: ();
    let _1: i8;
    let mut _2: i32;
    let mut _3: (&i8, &i8);
    let mut _4: &i8;
    let mut _5: &i8;
    let _6: i8;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: i8;
    let mut _12: i8;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: i32;
    let mut _18: (&u8, &u8);
    let mut _19: &u8;
    let mut _20: &u8;
    let _21: u8;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: u8;
    let mut _27: u8;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _32: i32;
    let mut _33: (&i8, &i8);
    let mut _34: &i8;
    let mut _35: &i8;
    let _36: i8;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: i8;
    let mut _42: i8;
    let _44: !;
    let mut _45: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _47: i32;
    let mut _48: (&u8, &u8);
    let mut _49: &u8;
    let mut _50: &u8;
    let _51: u8;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: u8;
    let mut _57: u8;
    let _59: !;
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _62: i32;
    let mut _63: (&i8, &i8);
    let mut _64: &i8;
    let mut _65: &i8;
    let _66: i8;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: i8;
    let mut _72: i8;
    let _74: !;
    let mut _75: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _77: i32;
    let mut _78: (&u8, &u8);
    let mut _79: &u8;
    let mut _80: &u8;
    let _81: u8;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: u8;
    let mut _87: u8;
    let _89: !;
    let mut _90: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _92: i8;
    let mut _93: i32;
    let mut _94: (&i8, &i8);
    let mut _95: &i8;
    let mut _96: &i8;
    let _97: i8;
    let mut _100: bool;
    let mut _101: bool;
    let mut _102: i8;
    let mut _103: i8;
    let _105: !;
    let mut _106: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _108: u8;
    let mut _109: i32;
    let mut _110: (&u8, &u8);
    let mut _111: &u8;
    let mut _112: &u8;
    let _113: u8;
    let mut _116: bool;
    let mut _117: bool;
    let mut _118: u8;
    let mut _119: u8;
    let _121: !;
    let mut _122: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _124: i8;
    let mut _125: i32;
    let mut _126: (&i8, &i8);
    let mut _127: &i8;
    let mut _128: &i8;
    let _129: i8;
    let mut _132: bool;
    let mut _133: bool;
    let mut _134: i8;
    let mut _135: i8;
    let _137: !;
    let mut _138: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _140: u8;
    let mut _141: i32;
    let mut _142: (&u8, &u8);
    let mut _143: &u8;
    let mut _144: &u8;
    let _145: u8;
    let mut _148: bool;
    let mut _149: bool;
    let mut _150: u8;
    let mut _151: u8;
    let _153: !;
    let mut _154: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _156: i8;
    let mut _157: i32;
    let mut _158: (&i8, &i8);
    let mut _159: &i8;
    let mut _160: &i8;
    let _161: i8;
    let mut _164: bool;
    let mut _165: bool;
    let mut _166: i8;
    let mut _167: i8;
    let _169: !;
    let mut _170: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _172: u8;
    let mut _173: i32;
    let mut _174: (&u8, &u8);
    let mut _175: &u8;
    let mut _176: &u8;
    let _177: u8;
    let mut _180: bool;
    let mut _181: bool;
    let mut _182: u8;
    let mut _183: u8;
    let _185: !;
    let mut _186: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _188: i16;
    let mut _189: i32;
    let mut _190: (&i16, &i16);
    let mut _191: &i16;
    let mut _192: &i16;
    let _193: i16;
    let mut _196: bool;
    let mut _197: bool;
    let mut _198: i16;
    let mut _199: i16;
    let _201: !;
    let mut _202: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _204: u16;
    let mut _205: i32;
    let mut _206: (&u16, &u16);
    let mut _207: &u16;
    let mut _208: &u16;
    let _209: u16;
    let mut _212: bool;
    let mut _213: bool;
    let mut _214: u16;
    let mut _215: u16;
    let _217: !;
    let mut _218: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _220: i16;
    let mut _221: i32;
    let mut _222: (&i16, &i16);
    let mut _223: &i16;
    let mut _224: &i16;
    let _225: i16;
    let mut _228: bool;
    let mut _229: bool;
    let mut _230: i16;
    let mut _231: i16;
    let _233: !;
    let mut _234: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _236: u16;
    let mut _237: i32;
    let mut _238: (&u16, &u16);
    let mut _239: &u16;
    let mut _240: &u16;
    let _241: u16;
    let mut _244: bool;
    let mut _245: bool;
    let mut _246: u16;
    let mut _247: u16;
    let _249: !;
    let mut _250: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _252: i16;
    let mut _253: i32;
    let mut _254: (&i16, &i16);
    let mut _255: &i16;
    let mut _256: &i16;
    let _257: i16;
    let mut _260: bool;
    let mut _261: bool;
    let mut _262: i16;
    let mut _263: i16;
    let _265: !;
    let mut _266: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _268: u16;
    let mut _269: i32;
    let mut _270: (&u16, &u16);
    let mut _271: &u16;
    let mut _272: &u16;
    let _273: u16;
    let mut _276: bool;
    let mut _277: bool;
    let mut _278: u16;
    let mut _279: u16;
    let _281: !;
    let mut _282: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _284: i32;
    let mut _285: i32;
    let mut _286: (&i32, &i32);
    let mut _287: &i32;
    let mut _288: &i32;
    let _289: i32;
    let mut _292: bool;
    let mut _293: bool;
    let mut _294: i32;
    let mut _295: i32;
    let _297: !;
    let mut _298: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _300: u32;
    let mut _301: i32;
    let mut _302: (&u32, &u32);
    let mut _303: &u32;
    let mut _304: &u32;
    let _305: u32;
    let mut _308: bool;
    let mut _309: bool;
    let mut _310: u32;
    let mut _311: u32;
    let _313: !;
    let mut _314: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _316: i32;
    let mut _317: i32;
    let mut _318: (&i32, &i32);
    let mut _319: &i32;
    let mut _320: &i32;
    let _321: i32;
    let mut _324: bool;
    let mut _325: bool;
    let mut _326: i32;
    let mut _327: i32;
    let _329: !;
    let mut _330: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _332: u32;
    let mut _333: i32;
    let mut _334: (&u32, &u32);
    let mut _335: &u32;
    let mut _336: &u32;
    let _337: u32;
    let mut _340: bool;
    let mut _341: bool;
    let mut _342: u32;
    let mut _343: u32;
    let _345: !;
    let mut _346: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _348: i32;
    let mut _349: i32;
    let mut _350: (&i32, &i32);
    let mut _351: &i32;
    let mut _352: &i32;
    let _353: i32;
    let mut _356: bool;
    let mut _357: bool;
    let mut _358: i32;
    let mut _359: i32;
    let _361: !;
    let mut _362: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _364: u32;
    let mut _365: i32;
    let mut _366: (&u32, &u32);
    let mut _367: &u32;
    let mut _368: &u32;
    let _369: u32;
    let mut _372: bool;
    let mut _373: bool;
    let mut _374: u32;
    let mut _375: u32;
    let _377: !;
    let mut _378: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _380: i64;
    let mut _381: i32;
    let mut _382: (&i64, &i64);
    let mut _383: &i64;
    let mut _384: &i64;
    let _385: i64;
    let mut _388: bool;
    let mut _389: bool;
    let mut _390: i64;
    let mut _391: i64;
    let _393: !;
    let mut _394: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _396: u64;
    let mut _397: i32;
    let mut _398: (&u64, &u64);
    let mut _399: &u64;
    let mut _400: &u64;
    let _401: u64;
    let mut _404: bool;
    let mut _405: bool;
    let mut _406: u64;
    let mut _407: u64;
    let _409: !;
    let mut _410: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _412: i64;
    let mut _413: i32;
    let mut _414: (&i64, &i64);
    let mut _415: &i64;
    let mut _416: &i64;
    let _417: i64;
    let mut _420: bool;
    let mut _421: bool;
    let mut _422: i64;
    let mut _423: i64;
    let _425: !;
    let mut _426: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _428: u64;
    let mut _429: i32;
    let mut _430: (&u64, &u64);
    let mut _431: &u64;
    let mut _432: &u64;
    let _433: u64;
    let mut _436: bool;
    let mut _437: bool;
    let mut _438: u64;
    let mut _439: u64;
    let _441: !;
    let mut _442: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _444: i64;
    let mut _445: i32;
    let mut _446: (&i64, &i64);
    let mut _447: &i64;
    let mut _448: &i64;
    let _449: i64;
    let mut _452: bool;
    let mut _453: bool;
    let mut _454: i64;
    let mut _455: i64;
    let _457: !;
    let mut _458: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _460: u64;
    let mut _461: i32;
    let mut _462: (&u64, &u64);
    let mut _463: &u64;
    let mut _464: &u64;
    let _465: u64;
    let mut _468: bool;
    let mut _469: bool;
    let mut _470: u64;
    let mut _471: u64;
    let _473: !;
    let mut _474: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _7: &i8;
        let _8: &i8;
        let _16: u8;
        scope 2 {
            debug left_val => _7;
            debug right_val => _8;
            let _13: core::panicking::AssertKind;
            scope 3 {
                debug kind => _13;
            }
        }
        scope 4 {
            debug x => _16;
            let _22: &u8;
            let _23: &u8;
            let _31: i8;
            scope 5 {
                debug left_val => _22;
                debug right_val => _23;
                let _28: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _28;
                }
            }
            scope 7 {
                debug x => _31;
                let _37: &i8;
                let _38: &i8;
                let _46: u8;
                scope 8 {
                    debug left_val => _37;
                    debug right_val => _38;
                    let _43: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _43;
                    }
                }
                scope 10 {
                    debug x => _46;
                    let _52: &u8;
                    let _53: &u8;
                    let _61: i8;
                    scope 11 {
                        debug left_val => _52;
                        debug right_val => _53;
                        let _58: core::panicking::AssertKind;
                        scope 12 {
                            debug kind => _58;
                        }
                    }
                    scope 13 {
                        debug x => _61;
                        let _67: &i8;
                        let _68: &i8;
                        let _76: u8;
                        scope 14 {
                            debug left_val => _67;
                            debug right_val => _68;
                            let _73: core::panicking::AssertKind;
                            scope 15 {
                                debug kind => _73;
                            }
                        }
                        scope 16 {
                            debug x => _76;
                            let _82: &u8;
                            let _83: &u8;
                            let _91: i8;
                            let _187: i16;
                            let _283: i32;
                            let _379: i64;
                            scope 17 {
                                debug left_val => _82;
                                debug right_val => _83;
                                let _88: core::panicking::AssertKind;
                                scope 18 {
                                    debug kind => _88;
                                }
                            }
                            scope 19 {
                                debug x => _91;
                                let _98: &i8;
                                let _99: &i8;
                                let _107: u8;
                                scope 20 {
                                    debug left_val => _98;
                                    debug right_val => _99;
                                    let _104: core::panicking::AssertKind;
                                    scope 21 {
                                        debug kind => _104;
                                    }
                                }
                                scope 22 {
                                    debug x => _107;
                                    let _114: &u8;
                                    let _115: &u8;
                                    let _123: i8;
                                    scope 23 {
                                        debug left_val => _114;
                                        debug right_val => _115;
                                        let _120: core::panicking::AssertKind;
                                        scope 24 {
                                            debug kind => _120;
                                        }
                                    }
                                    scope 25 {
                                        debug x => _123;
                                        let _130: &i8;
                                        let _131: &i8;
                                        let _139: u8;
                                        scope 26 {
                                            debug left_val => _130;
                                            debug right_val => _131;
                                            let _136: core::panicking::AssertKind;
                                            scope 27 {
                                                debug kind => _136;
                                            }
                                        }
                                        scope 28 {
                                            debug x => _139;
                                            let _146: &u8;
                                            let _147: &u8;
                                            let _155: i8;
                                            scope 29 {
                                                debug left_val => _146;
                                                debug right_val => _147;
                                                let _152: core::panicking::AssertKind;
                                                scope 30 {
                                                    debug kind => _152;
                                                }
                                            }
                                            scope 31 {
                                                debug x => _155;
                                                let _162: &i8;
                                                let _163: &i8;
                                                let _171: u8;
                                                scope 32 {
                                                    debug left_val => _162;
                                                    debug right_val => _163;
                                                    let _168: core::panicking::AssertKind;
                                                    scope 33 {
                                                        debug kind => _168;
                                                    }
                                                }
                                                scope 34 {
                                                    debug x => _171;
                                                    let _178: &u8;
                                                    let _179: &u8;
                                                    scope 35 {
                                                        debug left_val => _178;
                                                        debug right_val => _179;
                                                        let _184: core::panicking::AssertKind;
                                                        scope 36 {
                                                            debug kind => _184;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            scope 37 {
                                debug x => _187;
                                let _194: &i16;
                                let _195: &i16;
                                let _203: u16;
                                scope 38 {
                                    debug left_val => _194;
                                    debug right_val => _195;
                                    let _200: core::panicking::AssertKind;
                                    scope 39 {
                                        debug kind => _200;
                                    }
                                }
                                scope 40 {
                                    debug x => _203;
                                    let _210: &u16;
                                    let _211: &u16;
                                    let _219: i16;
                                    scope 41 {
                                        debug left_val => _210;
                                        debug right_val => _211;
                                        let _216: core::panicking::AssertKind;
                                        scope 42 {
                                            debug kind => _216;
                                        }
                                    }
                                    scope 43 {
                                        debug x => _219;
                                        let _226: &i16;
                                        let _227: &i16;
                                        let _235: u16;
                                        scope 44 {
                                            debug left_val => _226;
                                            debug right_val => _227;
                                            let _232: core::panicking::AssertKind;
                                            scope 45 {
                                                debug kind => _232;
                                            }
                                        }
                                        scope 46 {
                                            debug x => _235;
                                            let _242: &u16;
                                            let _243: &u16;
                                            let _251: i16;
                                            scope 47 {
                                                debug left_val => _242;
                                                debug right_val => _243;
                                                let _248: core::panicking::AssertKind;
                                                scope 48 {
                                                    debug kind => _248;
                                                }
                                            }
                                            scope 49 {
                                                debug x => _251;
                                                let _258: &i16;
                                                let _259: &i16;
                                                let _267: u16;
                                                scope 50 {
                                                    debug left_val => _258;
                                                    debug right_val => _259;
                                                    let _264: core::panicking::AssertKind;
                                                    scope 51 {
                                                        debug kind => _264;
                                                    }
                                                }
                                                scope 52 {
                                                    debug x => _267;
                                                    let _274: &u16;
                                                    let _275: &u16;
                                                    scope 53 {
                                                        debug left_val => _274;
                                                        debug right_val => _275;
                                                        let _280: core::panicking::AssertKind;
                                                        scope 54 {
                                                            debug kind => _280;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            scope 55 {
                                debug x => _283;
                                let _290: &i32;
                                let _291: &i32;
                                let _299: u32;
                                scope 56 {
                                    debug left_val => _290;
                                    debug right_val => _291;
                                    let _296: core::panicking::AssertKind;
                                    scope 57 {
                                        debug kind => _296;
                                    }
                                }
                                scope 58 {
                                    debug x => _299;
                                    let _306: &u32;
                                    let _307: &u32;
                                    let _315: i32;
                                    scope 59 {
                                        debug left_val => _306;
                                        debug right_val => _307;
                                        let _312: core::panicking::AssertKind;
                                        scope 60 {
                                            debug kind => _312;
                                        }
                                    }
                                    scope 61 {
                                        debug x => _315;
                                        let _322: &i32;
                                        let _323: &i32;
                                        let _331: u32;
                                        scope 62 {
                                            debug left_val => _322;
                                            debug right_val => _323;
                                            let _328: core::panicking::AssertKind;
                                            scope 63 {
                                                debug kind => _328;
                                            }
                                        }
                                        scope 64 {
                                            debug x => _331;
                                            let _338: &u32;
                                            let _339: &u32;
                                            let _347: i32;
                                            scope 65 {
                                                debug left_val => _338;
                                                debug right_val => _339;
                                                let _344: core::panicking::AssertKind;
                                                scope 66 {
                                                    debug kind => _344;
                                                }
                                            }
                                            scope 67 {
                                                debug x => _347;
                                                let _354: &i32;
                                                let _355: &i32;
                                                let _363: u32;
                                                scope 68 {
                                                    debug left_val => _354;
                                                    debug right_val => _355;
                                                    let _360: core::panicking::AssertKind;
                                                    scope 69 {
                                                        debug kind => _360;
                                                    }
                                                }
                                                scope 70 {
                                                    debug x => _363;
                                                    let _370: &u32;
                                                    let _371: &u32;
                                                    scope 71 {
                                                        debug left_val => _370;
                                                        debug right_val => _371;
                                                        let _376: core::panicking::AssertKind;
                                                        scope 72 {
                                                            debug kind => _376;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            scope 73 {
                                debug x => _379;
                                let _386: &i64;
                                let _387: &i64;
                                let _395: u64;
                                scope 74 {
                                    debug left_val => _386;
                                    debug right_val => _387;
                                    let _392: core::panicking::AssertKind;
                                    scope 75 {
                                        debug kind => _392;
                                    }
                                }
                                scope 76 {
                                    debug x => _395;
                                    let _402: &u64;
                                    let _403: &u64;
                                    let _411: i64;
                                    scope 77 {
                                        debug left_val => _402;
                                        debug right_val => _403;
                                        let _408: core::panicking::AssertKind;
                                        scope 78 {
                                            debug kind => _408;
                                        }
                                    }
                                    scope 79 {
                                        debug x => _411;
                                        let _418: &i64;
                                        let _419: &i64;
                                        let _427: u64;
                                        scope 80 {
                                            debug left_val => _418;
                                            debug right_val => _419;
                                            let _424: core::panicking::AssertKind;
                                            scope 81 {
                                                debug kind => _424;
                                            }
                                        }
                                        scope 82 {
                                            debug x => _427;
                                            let _434: &u64;
                                            let _435: &u64;
                                            let _443: i64;
                                            scope 83 {
                                                debug left_val => _434;
                                                debug right_val => _435;
                                                let _440: core::panicking::AssertKind;
                                                scope 84 {
                                                    debug kind => _440;
                                                }
                                            }
                                            scope 85 {
                                                debug x => _443;
                                                let _450: &i64;
                                                let _451: &i64;
                                                let _459: u64;
                                                scope 86 {
                                                    debug left_val => _450;
                                                    debug right_val => _451;
                                                    let _456: core::panicking::AssertKind;
                                                    scope 87 {
                                                        debug kind => _456;
                                                    }
                                                }
                                                scope 88 {
                                                    debug x => _459;
                                                    let _466: &u64;
                                                    let _467: &u64;
                                                    scope 89 {
                                                        debug left_val => _466;
                                                        debug right_val => _467;
                                                        let _472: core::panicking::AssertKind;
                                                        scope 90 {
                                                            debug kind => _472;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = id::<i32>(const 0_i32) -> bb1;
    }

    bb1: {
        _1 = Shl(const 1_i8, move _2);
        _4 = &_1;
        _6 = const 1_i8;
        _5 = &_6;
        _3 = (move _4, move _5);
        _7 = (_3.0: &i8);
        _8 = (_3.1: &i8);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<i8, i8>(move _13, _7, _8, move _15);
    }

    bb3: {
        _17 = id::<i32>(const 0_i32) -> bb4;
    }

    bb4: {
        _16 = Shl(const 1_u8, move _17);
        _19 = &_16;
        _21 = const 1_u8;
        _20 = &_21;
        _18 = (move _19, move _20);
        _22 = (_18.0: &u8);
        _23 = (_18.1: &u8);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<u8, u8>(move _28, _22, _23, move _30);
    }

    bb6: {
        _32 = id::<i32>(const 7_i32) -> bb7;
    }

    bb7: {
        _31 = Shl(const 1_i8, move _32);
        _34 = &_31;
        _36 = const _;
        _35 = &_36;
        _33 = (move _34, move _35);
        _37 = (_33.0: &i8);
        _38 = (_33.1: &i8);
        _41 = (*_37);
        _42 = (*_38);
        _40 = Eq(move _41, move _42);
        _39 = Not(move _40);
        switchInt(move _39) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _43 = core::panicking::AssertKind::Eq;
        _45 = Option::<Arguments<'_>>::None;
        _44 = core::panicking::assert_failed::<i8, i8>(move _43, _37, _38, move _45);
    }

    bb9: {
        _47 = id::<i32>(const 7_i32) -> bb10;
    }

    bb10: {
        _46 = Shl(const 1_u8, move _47);
        _49 = &_46;
        _51 = const 128_u8;
        _50 = &_51;
        _48 = (move _49, move _50);
        _52 = (_48.0: &u8);
        _53 = (_48.1: &u8);
        _56 = (*_52);
        _57 = (*_53);
        _55 = Eq(move _56, move _57);
        _54 = Not(move _55);
        switchInt(move _54) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _58 = core::panicking::AssertKind::Eq;
        _60 = Option::<Arguments<'_>>::None;
        _59 = core::panicking::assert_failed::<u8, u8>(move _58, _52, _53, move _60);
    }

    bb12: {
        _62 = id::<i32>(const 7_i32) -> bb13;
    }

    bb13: {
        _61 = Shl(const 3_i8, move _62);
        _64 = &_61;
        _66 = const _;
        _65 = &_66;
        _63 = (move _64, move _65);
        _67 = (_63.0: &i8);
        _68 = (_63.1: &i8);
        _71 = (*_67);
        _72 = (*_68);
        _70 = Eq(move _71, move _72);
        _69 = Not(move _70);
        switchInt(move _69) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _73 = core::panicking::AssertKind::Eq;
        _75 = Option::<Arguments<'_>>::None;
        _74 = core::panicking::assert_failed::<i8, i8>(move _73, _67, _68, move _75);
    }

    bb15: {
        _77 = id::<i32>(const 7_i32) -> bb16;
    }

    bb16: {
        _76 = Shl(const 3_u8, move _77);
        _79 = &_76;
        _81 = const 128_u8;
        _80 = &_81;
        _78 = (move _79, move _80);
        _82 = (_78.0: &u8);
        _83 = (_78.1: &u8);
        _86 = (*_82);
        _87 = (*_83);
        _85 = Eq(move _86, move _87);
        _84 = Not(move _85);
        switchInt(move _84) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _88 = core::panicking::AssertKind::Eq;
        _90 = Option::<Arguments<'_>>::None;
        _89 = core::panicking::assert_failed::<u8, u8>(move _88, _82, _83, move _90);
    }

    bb18: {
        _92 = const 1_i8;
        _93 = id::<i32>(const 0_i32) -> bb19;
    }

    bb19: {
        _91 = Shl(move _92, move _93);
        _95 = &_91;
        _97 = const 1_i8;
        _96 = &_97;
        _94 = (move _95, move _96);
        _98 = (_94.0: &i8);
        _99 = (_94.1: &i8);
        _102 = (*_98);
        _103 = (*_99);
        _101 = Eq(move _102, move _103);
        _100 = Not(move _101);
        switchInt(move _100) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _104 = core::panicking::AssertKind::Eq;
        _106 = Option::<Arguments<'_>>::None;
        _105 = core::panicking::assert_failed::<i8, i8>(move _104, _98, _99, move _106);
    }

    bb21: {
        _108 = const 1_u8;
        _109 = id::<i32>(const 0_i32) -> bb22;
    }

    bb22: {
        _107 = Shl(move _108, move _109);
        _111 = &_107;
        _113 = const 1_u8;
        _112 = &_113;
        _110 = (move _111, move _112);
        _114 = (_110.0: &u8);
        _115 = (_110.1: &u8);
        _118 = (*_114);
        _119 = (*_115);
        _117 = Eq(move _118, move _119);
        _116 = Not(move _117);
        switchInt(move _116) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _120 = core::panicking::AssertKind::Eq;
        _122 = Option::<Arguments<'_>>::None;
        _121 = core::panicking::assert_failed::<u8, u8>(move _120, _114, _115, move _122);
    }

    bb24: {
        _124 = const 1_i8;
        _125 = id::<i32>(const 7_i32) -> bb25;
    }

    bb25: {
        _123 = Shl(move _124, move _125);
        _127 = &_123;
        _129 = const _;
        _128 = &_129;
        _126 = (move _127, move _128);
        _130 = (_126.0: &i8);
        _131 = (_126.1: &i8);
        _134 = (*_130);
        _135 = (*_131);
        _133 = Eq(move _134, move _135);
        _132 = Not(move _133);
        switchInt(move _132) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _136 = core::panicking::AssertKind::Eq;
        _138 = Option::<Arguments<'_>>::None;
        _137 = core::panicking::assert_failed::<i8, i8>(move _136, _130, _131, move _138);
    }

    bb27: {
        _140 = const 1_u8;
        _141 = id::<i32>(const 7_i32) -> bb28;
    }

    bb28: {
        _139 = Shl(move _140, move _141);
        _143 = &_139;
        _145 = const 128_u8;
        _144 = &_145;
        _142 = (move _143, move _144);
        _146 = (_142.0: &u8);
        _147 = (_142.1: &u8);
        _150 = (*_146);
        _151 = (*_147);
        _149 = Eq(move _150, move _151);
        _148 = Not(move _149);
        switchInt(move _148) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _152 = core::panicking::AssertKind::Eq;
        _154 = Option::<Arguments<'_>>::None;
        _153 = core::panicking::assert_failed::<u8, u8>(move _152, _146, _147, move _154);
    }

    bb30: {
        _156 = const 3_i8;
        _157 = id::<i32>(const 7_i32) -> bb31;
    }

    bb31: {
        _155 = Shl(move _156, move _157);
        _159 = &_155;
        _161 = const _;
        _160 = &_161;
        _158 = (move _159, move _160);
        _162 = (_158.0: &i8);
        _163 = (_158.1: &i8);
        _166 = (*_162);
        _167 = (*_163);
        _165 = Eq(move _166, move _167);
        _164 = Not(move _165);
        switchInt(move _164) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _168 = core::panicking::AssertKind::Eq;
        _170 = Option::<Arguments<'_>>::None;
        _169 = core::panicking::assert_failed::<i8, i8>(move _168, _162, _163, move _170);
    }

    bb33: {
        _172 = const 3_u8;
        _173 = id::<i32>(const 7_i32) -> bb34;
    }

    bb34: {
        _171 = Shl(move _172, move _173);
        _175 = &_171;
        _177 = const 128_u8;
        _176 = &_177;
        _174 = (move _175, move _176);
        _178 = (_174.0: &u8);
        _179 = (_174.1: &u8);
        _182 = (*_178);
        _183 = (*_179);
        _181 = Eq(move _182, move _183);
        _180 = Not(move _181);
        switchInt(move _180) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _184 = core::panicking::AssertKind::Eq;
        _186 = Option::<Arguments<'_>>::None;
        _185 = core::panicking::assert_failed::<u8, u8>(move _184, _178, _179, move _186);
    }

    bb36: {
        _188 = const 1_i16;
        _189 = id::<i32>(const 0_i32) -> bb37;
    }

    bb37: {
        _187 = Shl(move _188, move _189);
        _191 = &_187;
        _193 = const 1_i16;
        _192 = &_193;
        _190 = (move _191, move _192);
        _194 = (_190.0: &i16);
        _195 = (_190.1: &i16);
        _198 = (*_194);
        _199 = (*_195);
        _197 = Eq(move _198, move _199);
        _196 = Not(move _197);
        switchInt(move _196) -> [0: bb39, otherwise: bb38];
    }

    bb38: {
        _200 = core::panicking::AssertKind::Eq;
        _202 = Option::<Arguments<'_>>::None;
        _201 = core::panicking::assert_failed::<i16, i16>(move _200, _194, _195, move _202);
    }

    bb39: {
        _204 = const 1_u16;
        _205 = id::<i32>(const 0_i32) -> bb40;
    }

    bb40: {
        _203 = Shl(move _204, move _205);
        _207 = &_203;
        _209 = const 1_u16;
        _208 = &_209;
        _206 = (move _207, move _208);
        _210 = (_206.0: &u16);
        _211 = (_206.1: &u16);
        _214 = (*_210);
        _215 = (*_211);
        _213 = Eq(move _214, move _215);
        _212 = Not(move _213);
        switchInt(move _212) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _216 = core::panicking::AssertKind::Eq;
        _218 = Option::<Arguments<'_>>::None;
        _217 = core::panicking::assert_failed::<u16, u16>(move _216, _210, _211, move _218);
    }

    bb42: {
        _220 = const 1_i16;
        _221 = id::<i32>(const 15_i32) -> bb43;
    }

    bb43: {
        _219 = Shl(move _220, move _221);
        _223 = &_219;
        _225 = const _;
        _224 = &_225;
        _222 = (move _223, move _224);
        _226 = (_222.0: &i16);
        _227 = (_222.1: &i16);
        _230 = (*_226);
        _231 = (*_227);
        _229 = Eq(move _230, move _231);
        _228 = Not(move _229);
        switchInt(move _228) -> [0: bb45, otherwise: bb44];
    }

    bb44: {
        _232 = core::panicking::AssertKind::Eq;
        _234 = Option::<Arguments<'_>>::None;
        _233 = core::panicking::assert_failed::<i16, i16>(move _232, _226, _227, move _234);
    }

    bb45: {
        _236 = const 1_u16;
        _237 = id::<i32>(const 15_i32) -> bb46;
    }

    bb46: {
        _235 = Shl(move _236, move _237);
        _239 = &_235;
        _241 = const 32768_u16;
        _240 = &_241;
        _238 = (move _239, move _240);
        _242 = (_238.0: &u16);
        _243 = (_238.1: &u16);
        _246 = (*_242);
        _247 = (*_243);
        _245 = Eq(move _246, move _247);
        _244 = Not(move _245);
        switchInt(move _244) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _248 = core::panicking::AssertKind::Eq;
        _250 = Option::<Arguments<'_>>::None;
        _249 = core::panicking::assert_failed::<u16, u16>(move _248, _242, _243, move _250);
    }

    bb48: {
        _252 = const 3_i16;
        _253 = id::<i32>(const 15_i32) -> bb49;
    }

    bb49: {
        _251 = Shl(move _252, move _253);
        _255 = &_251;
        _257 = const _;
        _256 = &_257;
        _254 = (move _255, move _256);
        _258 = (_254.0: &i16);
        _259 = (_254.1: &i16);
        _262 = (*_258);
        _263 = (*_259);
        _261 = Eq(move _262, move _263);
        _260 = Not(move _261);
        switchInt(move _260) -> [0: bb51, otherwise: bb50];
    }

    bb50: {
        _264 = core::panicking::AssertKind::Eq;
        _266 = Option::<Arguments<'_>>::None;
        _265 = core::panicking::assert_failed::<i16, i16>(move _264, _258, _259, move _266);
    }

    bb51: {
        _268 = const 3_u16;
        _269 = id::<i32>(const 15_i32) -> bb52;
    }

    bb52: {
        _267 = Shl(move _268, move _269);
        _271 = &_267;
        _273 = const 32768_u16;
        _272 = &_273;
        _270 = (move _271, move _272);
        _274 = (_270.0: &u16);
        _275 = (_270.1: &u16);
        _278 = (*_274);
        _279 = (*_275);
        _277 = Eq(move _278, move _279);
        _276 = Not(move _277);
        switchInt(move _276) -> [0: bb54, otherwise: bb53];
    }

    bb53: {
        _280 = core::panicking::AssertKind::Eq;
        _282 = Option::<Arguments<'_>>::None;
        _281 = core::panicking::assert_failed::<u16, u16>(move _280, _274, _275, move _282);
    }

    bb54: {
        _284 = const 1_i32;
        _285 = id::<i32>(const 0_i32) -> bb55;
    }

    bb55: {
        _283 = Shl(move _284, move _285);
        _287 = &_283;
        _289 = const 1_i32;
        _288 = &_289;
        _286 = (move _287, move _288);
        _290 = (_286.0: &i32);
        _291 = (_286.1: &i32);
        _294 = (*_290);
        _295 = (*_291);
        _293 = Eq(move _294, move _295);
        _292 = Not(move _293);
        switchInt(move _292) -> [0: bb57, otherwise: bb56];
    }

    bb56: {
        _296 = core::panicking::AssertKind::Eq;
        _298 = Option::<Arguments<'_>>::None;
        _297 = core::panicking::assert_failed::<i32, i32>(move _296, _290, _291, move _298);
    }

    bb57: {
        _300 = const 1_u32;
        _301 = id::<i32>(const 0_i32) -> bb58;
    }

    bb58: {
        _299 = Shl(move _300, move _301);
        _303 = &_299;
        _305 = const 1_u32;
        _304 = &_305;
        _302 = (move _303, move _304);
        _306 = (_302.0: &u32);
        _307 = (_302.1: &u32);
        _310 = (*_306);
        _311 = (*_307);
        _309 = Eq(move _310, move _311);
        _308 = Not(move _309);
        switchInt(move _308) -> [0: bb60, otherwise: bb59];
    }

    bb59: {
        _312 = core::panicking::AssertKind::Eq;
        _314 = Option::<Arguments<'_>>::None;
        _313 = core::panicking::assert_failed::<u32, u32>(move _312, _306, _307, move _314);
    }

    bb60: {
        _316 = const 1_i32;
        _317 = id::<i32>(const 31_i32) -> bb61;
    }

    bb61: {
        _315 = Shl(move _316, move _317);
        _319 = &_315;
        _321 = const _;
        _320 = &_321;
        _318 = (move _319, move _320);
        _322 = (_318.0: &i32);
        _323 = (_318.1: &i32);
        _326 = (*_322);
        _327 = (*_323);
        _325 = Eq(move _326, move _327);
        _324 = Not(move _325);
        switchInt(move _324) -> [0: bb63, otherwise: bb62];
    }

    bb62: {
        _328 = core::panicking::AssertKind::Eq;
        _330 = Option::<Arguments<'_>>::None;
        _329 = core::panicking::assert_failed::<i32, i32>(move _328, _322, _323, move _330);
    }

    bb63: {
        _332 = const 1_u32;
        _333 = id::<i32>(const 31_i32) -> bb64;
    }

    bb64: {
        _331 = Shl(move _332, move _333);
        _335 = &_331;
        _337 = const 2147483648_u32;
        _336 = &_337;
        _334 = (move _335, move _336);
        _338 = (_334.0: &u32);
        _339 = (_334.1: &u32);
        _342 = (*_338);
        _343 = (*_339);
        _341 = Eq(move _342, move _343);
        _340 = Not(move _341);
        switchInt(move _340) -> [0: bb66, otherwise: bb65];
    }

    bb65: {
        _344 = core::panicking::AssertKind::Eq;
        _346 = Option::<Arguments<'_>>::None;
        _345 = core::panicking::assert_failed::<u32, u32>(move _344, _338, _339, move _346);
    }

    bb66: {
        _348 = const 3_i32;
        _349 = id::<i32>(const 31_i32) -> bb67;
    }

    bb67: {
        _347 = Shl(move _348, move _349);
        _351 = &_347;
        _353 = const _;
        _352 = &_353;
        _350 = (move _351, move _352);
        _354 = (_350.0: &i32);
        _355 = (_350.1: &i32);
        _358 = (*_354);
        _359 = (*_355);
        _357 = Eq(move _358, move _359);
        _356 = Not(move _357);
        switchInt(move _356) -> [0: bb69, otherwise: bb68];
    }

    bb68: {
        _360 = core::panicking::AssertKind::Eq;
        _362 = Option::<Arguments<'_>>::None;
        _361 = core::panicking::assert_failed::<i32, i32>(move _360, _354, _355, move _362);
    }

    bb69: {
        _364 = const 3_u32;
        _365 = id::<i32>(const 31_i32) -> bb70;
    }

    bb70: {
        _363 = Shl(move _364, move _365);
        _367 = &_363;
        _369 = const 2147483648_u32;
        _368 = &_369;
        _366 = (move _367, move _368);
        _370 = (_366.0: &u32);
        _371 = (_366.1: &u32);
        _374 = (*_370);
        _375 = (*_371);
        _373 = Eq(move _374, move _375);
        _372 = Not(move _373);
        switchInt(move _372) -> [0: bb72, otherwise: bb71];
    }

    bb71: {
        _376 = core::panicking::AssertKind::Eq;
        _378 = Option::<Arguments<'_>>::None;
        _377 = core::panicking::assert_failed::<u32, u32>(move _376, _370, _371, move _378);
    }

    bb72: {
        _380 = const 1_i64;
        _381 = id::<i32>(const 0_i32) -> bb73;
    }

    bb73: {
        _379 = Shl(move _380, move _381);
        _383 = &_379;
        _385 = const 1_i64;
        _384 = &_385;
        _382 = (move _383, move _384);
        _386 = (_382.0: &i64);
        _387 = (_382.1: &i64);
        _390 = (*_386);
        _391 = (*_387);
        _389 = Eq(move _390, move _391);
        _388 = Not(move _389);
        switchInt(move _388) -> [0: bb75, otherwise: bb74];
    }

    bb74: {
        _392 = core::panicking::AssertKind::Eq;
        _394 = Option::<Arguments<'_>>::None;
        _393 = core::panicking::assert_failed::<i64, i64>(move _392, _386, _387, move _394);
    }

    bb75: {
        _396 = const 1_u64;
        _397 = id::<i32>(const 0_i32) -> bb76;
    }

    bb76: {
        _395 = Shl(move _396, move _397);
        _399 = &_395;
        _401 = const 1_u64;
        _400 = &_401;
        _398 = (move _399, move _400);
        _402 = (_398.0: &u64);
        _403 = (_398.1: &u64);
        _406 = (*_402);
        _407 = (*_403);
        _405 = Eq(move _406, move _407);
        _404 = Not(move _405);
        switchInt(move _404) -> [0: bb78, otherwise: bb77];
    }

    bb77: {
        _408 = core::panicking::AssertKind::Eq;
        _410 = Option::<Arguments<'_>>::None;
        _409 = core::panicking::assert_failed::<u64, u64>(move _408, _402, _403, move _410);
    }

    bb78: {
        _412 = const 1_i64;
        _413 = id::<i32>(const 63_i32) -> bb79;
    }

    bb79: {
        _411 = Shl(move _412, move _413);
        _415 = &_411;
        _417 = const _;
        _416 = &_417;
        _414 = (move _415, move _416);
        _418 = (_414.0: &i64);
        _419 = (_414.1: &i64);
        _422 = (*_418);
        _423 = (*_419);
        _421 = Eq(move _422, move _423);
        _420 = Not(move _421);
        switchInt(move _420) -> [0: bb81, otherwise: bb80];
    }

    bb80: {
        _424 = core::panicking::AssertKind::Eq;
        _426 = Option::<Arguments<'_>>::None;
        _425 = core::panicking::assert_failed::<i64, i64>(move _424, _418, _419, move _426);
    }

    bb81: {
        _428 = const 1_u64;
        _429 = id::<i32>(const 63_i32) -> bb82;
    }

    bb82: {
        _427 = Shl(move _428, move _429);
        _431 = &_427;
        _433 = const 9223372036854775808_u64;
        _432 = &_433;
        _430 = (move _431, move _432);
        _434 = (_430.0: &u64);
        _435 = (_430.1: &u64);
        _438 = (*_434);
        _439 = (*_435);
        _437 = Eq(move _438, move _439);
        _436 = Not(move _437);
        switchInt(move _436) -> [0: bb84, otherwise: bb83];
    }

    bb83: {
        _440 = core::panicking::AssertKind::Eq;
        _442 = Option::<Arguments<'_>>::None;
        _441 = core::panicking::assert_failed::<u64, u64>(move _440, _434, _435, move _442);
    }

    bb84: {
        _444 = const 3_i64;
        _445 = id::<i32>(const 63_i32) -> bb85;
    }

    bb85: {
        _443 = Shl(move _444, move _445);
        _447 = &_443;
        _449 = const _;
        _448 = &_449;
        _446 = (move _447, move _448);
        _450 = (_446.0: &i64);
        _451 = (_446.1: &i64);
        _454 = (*_450);
        _455 = (*_451);
        _453 = Eq(move _454, move _455);
        _452 = Not(move _453);
        switchInt(move _452) -> [0: bb87, otherwise: bb86];
    }

    bb86: {
        _456 = core::panicking::AssertKind::Eq;
        _458 = Option::<Arguments<'_>>::None;
        _457 = core::panicking::assert_failed::<i64, i64>(move _456, _450, _451, move _458);
    }

    bb87: {
        _460 = const 3_u64;
        _461 = id::<i32>(const 63_i32) -> bb88;
    }

    bb88: {
        _459 = Shl(move _460, move _461);
        _463 = &_459;
        _465 = const 9223372036854775808_u64;
        _464 = &_465;
        _462 = (move _463, move _464);
        _466 = (_462.0: &u64);
        _467 = (_462.1: &u64);
        _470 = (*_466);
        _471 = (*_467);
        _469 = Eq(move _470, move _471);
        _468 = Not(move _469);
        switchInt(move _468) -> [0: bb90, otherwise: bb89];
    }

    bb89: {
        _472 = core::panicking::AssertKind::Eq;
        _474 = Option::<Arguments<'_>>::None;
        _473 = core::panicking::assert_failed::<u64, u64>(move _472, _466, _467, move _474);
    }

    bb90: {
        return;
    }
}

fn test_right_shift() -> () {
    let mut _0: ();
    let _1: i8;
    let mut _2: i8;
    let mut _3: i32;
    let mut _4: (&i8, &i8);
    let mut _5: &i8;
    let mut _6: &i8;
    let _7: i8;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: i8;
    let mut _13: i8;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: u8;
    let mut _19: i32;
    let mut _20: (&u8, &u8);
    let mut _21: &u8;
    let mut _22: &u8;
    let _23: u8;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: u8;
    let mut _29: u8;
    let _31: !;
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _34: i32;
    let mut _35: i32;
    let mut _36: (&i8, &i8);
    let mut _37: &i8;
    let mut _38: &i8;
    let _39: i8;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: i8;
    let mut _45: i8;
    let _47: !;
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _50: i32;
    let mut _51: (&u8, &u8);
    let mut _52: &u8;
    let mut _53: &u8;
    let _54: u8;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: u8;
    let mut _60: u8;
    let _62: !;
    let mut _63: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _65: i32;
    let mut _66: (&i8, &i8);
    let mut _67: &i8;
    let mut _68: &i8;
    let _69: i8;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: i8;
    let mut _75: i8;
    let _77: !;
    let mut _78: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _80: i8;
    let mut _81: i32;
    let mut _82: i32;
    let mut _83: (&i8, &i8);
    let mut _84: &i8;
    let mut _85: &i8;
    let _86: i8;
    let mut _89: bool;
    let mut _90: bool;
    let mut _91: i8;
    let mut _92: i8;
    let _94: !;
    let mut _95: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _97: u8;
    let mut _98: i32;
    let mut _99: (&u8, &u8);
    let mut _100: &u8;
    let mut _101: &u8;
    let _102: u8;
    let mut _105: bool;
    let mut _106: bool;
    let mut _107: u8;
    let mut _108: u8;
    let _110: !;
    let mut _111: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _113: i8;
    let mut _114: i32;
    let mut _115: (&i8, &i8);
    let mut _116: &i8;
    let mut _117: &i8;
    let _118: i8;
    let mut _121: bool;
    let mut _122: bool;
    let mut _123: i8;
    let mut _124: i8;
    let _126: !;
    let mut _127: std::option::Option<std::fmt::Arguments<'_>>;
    let _128: i16;
    let mut _129: i16;
    let mut _130: i32;
    let mut _131: (&i16, &i16);
    let mut _132: &i16;
    let mut _133: &i16;
    let _134: i16;
    let mut _137: bool;
    let mut _138: bool;
    let mut _139: i16;
    let mut _140: i16;
    let _142: !;
    let mut _143: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _145: u16;
    let mut _146: i32;
    let mut _147: (&u16, &u16);
    let mut _148: &u16;
    let mut _149: &u16;
    let _150: u16;
    let mut _153: bool;
    let mut _154: bool;
    let mut _155: u16;
    let mut _156: u16;
    let _158: !;
    let mut _159: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _161: i32;
    let mut _162: i32;
    let mut _163: (&u16, &u16);
    let mut _164: &u16;
    let mut _165: &u16;
    let _166: u16;
    let mut _169: bool;
    let mut _170: bool;
    let mut _171: u16;
    let mut _172: u16;
    let _174: !;
    let mut _175: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _177: i32;
    let mut _178: (&u16, &u16);
    let mut _179: &u16;
    let mut _180: &u16;
    let _181: u16;
    let mut _184: bool;
    let mut _185: bool;
    let mut _186: u16;
    let mut _187: u16;
    let _189: !;
    let mut _190: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _192: i32;
    let mut _193: (&i16, &i16);
    let mut _194: &i16;
    let mut _195: &i16;
    let _196: i16;
    let mut _199: bool;
    let mut _200: bool;
    let mut _201: i16;
    let mut _202: i16;
    let _204: !;
    let mut _205: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _207: u16;
    let mut _208: i32;
    let mut _209: i32;
    let mut _210: (&u16, &u16);
    let mut _211: &u16;
    let mut _212: &u16;
    let _213: u16;
    let mut _216: bool;
    let mut _217: bool;
    let mut _218: u16;
    let mut _219: u16;
    let _221: !;
    let mut _222: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _224: u16;
    let mut _225: i32;
    let mut _226: (&u16, &u16);
    let mut _227: &u16;
    let mut _228: &u16;
    let _229: u16;
    let mut _232: bool;
    let mut _233: bool;
    let mut _234: u16;
    let mut _235: u16;
    let _237: !;
    let mut _238: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _240: i16;
    let mut _241: i32;
    let mut _242: (&i16, &i16);
    let mut _243: &i16;
    let mut _244: &i16;
    let _245: i16;
    let mut _248: bool;
    let mut _249: bool;
    let mut _250: i16;
    let mut _251: i16;
    let _253: !;
    let mut _254: std::option::Option<std::fmt::Arguments<'_>>;
    let _255: i32;
    let mut _256: i32;
    let mut _257: i32;
    let mut _258: (&i32, &i32);
    let mut _259: &i32;
    let mut _260: &i32;
    let _261: i32;
    let mut _264: bool;
    let mut _265: bool;
    let mut _266: i32;
    let mut _267: i32;
    let _269: !;
    let mut _270: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _272: u32;
    let mut _273: i32;
    let mut _274: (&u32, &u32);
    let mut _275: &u32;
    let mut _276: &u32;
    let _277: u32;
    let mut _280: bool;
    let mut _281: bool;
    let mut _282: u32;
    let mut _283: u32;
    let _285: !;
    let mut _286: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _288: i32;
    let mut _289: i32;
    let mut _290: (&u32, &u32);
    let mut _291: &u32;
    let mut _292: &u32;
    let _293: u32;
    let mut _296: bool;
    let mut _297: bool;
    let mut _298: u32;
    let mut _299: u32;
    let _301: !;
    let mut _302: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _304: i32;
    let mut _305: (&u32, &u32);
    let mut _306: &u32;
    let mut _307: &u32;
    let _308: u32;
    let mut _311: bool;
    let mut _312: bool;
    let mut _313: u32;
    let mut _314: u32;
    let _316: !;
    let mut _317: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _319: i32;
    let mut _320: (&i32, &i32);
    let mut _321: &i32;
    let mut _322: &i32;
    let _323: i32;
    let mut _326: bool;
    let mut _327: bool;
    let mut _328: i32;
    let mut _329: i32;
    let _331: !;
    let mut _332: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _334: u32;
    let mut _335: i32;
    let mut _336: i32;
    let mut _337: (&u32, &u32);
    let mut _338: &u32;
    let mut _339: &u32;
    let _340: u32;
    let mut _343: bool;
    let mut _344: bool;
    let mut _345: u32;
    let mut _346: u32;
    let _348: !;
    let mut _349: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _351: u32;
    let mut _352: i32;
    let mut _353: (&u32, &u32);
    let mut _354: &u32;
    let mut _355: &u32;
    let _356: u32;
    let mut _359: bool;
    let mut _360: bool;
    let mut _361: u32;
    let mut _362: u32;
    let _364: !;
    let mut _365: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _367: i32;
    let mut _368: i32;
    let mut _369: (&i32, &i32);
    let mut _370: &i32;
    let mut _371: &i32;
    let _372: i32;
    let mut _375: bool;
    let mut _376: bool;
    let mut _377: i32;
    let mut _378: i32;
    let _380: !;
    let mut _381: std::option::Option<std::fmt::Arguments<'_>>;
    let _382: i64;
    let mut _383: i64;
    let mut _384: i32;
    let mut _385: (&i64, &i64);
    let mut _386: &i64;
    let mut _387: &i64;
    let _388: i64;
    let mut _391: bool;
    let mut _392: bool;
    let mut _393: i64;
    let mut _394: i64;
    let _396: !;
    let mut _397: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _399: u64;
    let mut _400: i32;
    let mut _401: (&u64, &u64);
    let mut _402: &u64;
    let mut _403: &u64;
    let _404: u64;
    let mut _407: bool;
    let mut _408: bool;
    let mut _409: u64;
    let mut _410: u64;
    let _412: !;
    let mut _413: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _415: i32;
    let mut _416: i32;
    let mut _417: (&u64, &u64);
    let mut _418: &u64;
    let mut _419: &u64;
    let _420: u64;
    let mut _423: bool;
    let mut _424: bool;
    let mut _425: u64;
    let mut _426: u64;
    let _428: !;
    let mut _429: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _431: i32;
    let mut _432: (&u64, &u64);
    let mut _433: &u64;
    let mut _434: &u64;
    let _435: u64;
    let mut _438: bool;
    let mut _439: bool;
    let mut _440: u64;
    let mut _441: u64;
    let _443: !;
    let mut _444: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _446: i32;
    let mut _447: (&i64, &i64);
    let mut _448: &i64;
    let mut _449: &i64;
    let _450: i64;
    let mut _453: bool;
    let mut _454: bool;
    let mut _455: i64;
    let mut _456: i64;
    let _458: !;
    let mut _459: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _461: u64;
    let mut _462: i32;
    let mut _463: i32;
    let mut _464: (&u64, &u64);
    let mut _465: &u64;
    let mut _466: &u64;
    let _467: u64;
    let mut _470: bool;
    let mut _471: bool;
    let mut _472: u64;
    let mut _473: u64;
    let _475: !;
    let mut _476: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _478: u64;
    let mut _479: i32;
    let mut _480: (&u64, &u64);
    let mut _481: &u64;
    let mut _482: &u64;
    let _483: u64;
    let mut _486: bool;
    let mut _487: bool;
    let mut _488: u64;
    let mut _489: u64;
    let _491: !;
    let mut _492: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _494: i64;
    let mut _495: i32;
    let mut _496: (&i64, &i64);
    let mut _497: &i64;
    let mut _498: &i64;
    let _499: i64;
    let mut _502: bool;
    let mut _503: bool;
    let mut _504: i64;
    let mut _505: i64;
    let _507: !;
    let mut _508: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _8: &i8;
        let _9: &i8;
        let _17: u8;
        scope 2 {
            debug left_val => _8;
            debug right_val => _9;
            let _14: core::panicking::AssertKind;
            scope 3 {
                debug kind => _14;
            }
        }
        scope 4 {
            debug x => _17;
            let _24: &u8;
            let _25: &u8;
            let _33: i8;
            scope 5 {
                debug left_val => _24;
                debug right_val => _25;
                let _30: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _30;
                }
            }
            scope 7 {
                debug x => _33;
                let _40: &i8;
                let _41: &i8;
                let _49: u8;
                scope 8 {
                    debug left_val => _40;
                    debug right_val => _41;
                    let _46: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _46;
                    }
                }
                scope 10 {
                    debug x => _49;
                    let _55: &u8;
                    let _56: &u8;
                    let _64: i8;
                    scope 11 {
                        debug left_val => _55;
                        debug right_val => _56;
                        let _61: core::panicking::AssertKind;
                        scope 12 {
                            debug kind => _61;
                        }
                    }
                    scope 13 {
                        debug x => _64;
                        let _70: &i8;
                        let _71: &i8;
                        let _79: i8;
                        scope 14 {
                            debug left_val => _70;
                            debug right_val => _71;
                            let _76: core::panicking::AssertKind;
                            scope 15 {
                                debug kind => _76;
                            }
                        }
                        scope 16 {
                            debug x => _79;
                            let _87: &i8;
                            let _88: &i8;
                            let _96: u8;
                            scope 17 {
                                debug left_val => _87;
                                debug right_val => _88;
                                let _93: core::panicking::AssertKind;
                                scope 18 {
                                    debug kind => _93;
                                }
                            }
                            scope 19 {
                                debug x => _96;
                                let _103: &u8;
                                let _104: &u8;
                                let _112: i8;
                                scope 20 {
                                    debug left_val => _103;
                                    debug right_val => _104;
                                    let _109: core::panicking::AssertKind;
                                    scope 21 {
                                        debug kind => _109;
                                    }
                                }
                                scope 22 {
                                    debug x => _112;
                                    let _119: &i8;
                                    let _120: &i8;
                                    scope 23 {
                                        debug left_val => _119;
                                        debug right_val => _120;
                                        let _125: core::panicking::AssertKind;
                                        scope 24 {
                                            debug kind => _125;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    scope 25 {
        debug x => _128;
        let _135: &i16;
        let _136: &i16;
        let _144: u16;
        scope 26 {
            debug left_val => _135;
            debug right_val => _136;
            let _141: core::panicking::AssertKind;
            scope 27 {
                debug kind => _141;
            }
        }
        scope 28 {
            debug x => _144;
            let _151: &u16;
            let _152: &u16;
            let _160: u16;
            scope 29 {
                debug left_val => _151;
                debug right_val => _152;
                let _157: core::panicking::AssertKind;
                scope 30 {
                    debug kind => _157;
                }
            }
            scope 31 {
                debug x => _160;
                let _167: &u16;
                let _168: &u16;
                let _176: u16;
                scope 32 {
                    debug left_val => _167;
                    debug right_val => _168;
                    let _173: core::panicking::AssertKind;
                    scope 33 {
                        debug kind => _173;
                    }
                }
                scope 34 {
                    debug x => _176;
                    let _182: &u16;
                    let _183: &u16;
                    let _191: i16;
                    scope 35 {
                        debug left_val => _182;
                        debug right_val => _183;
                        let _188: core::panicking::AssertKind;
                        scope 36 {
                            debug kind => _188;
                        }
                    }
                    scope 37 {
                        debug x => _191;
                        let _197: &i16;
                        let _198: &i16;
                        let _206: u16;
                        scope 38 {
                            debug left_val => _197;
                            debug right_val => _198;
                            let _203: core::panicking::AssertKind;
                            scope 39 {
                                debug kind => _203;
                            }
                        }
                        scope 40 {
                            debug x => _206;
                            let _214: &u16;
                            let _215: &u16;
                            let _223: u16;
                            scope 41 {
                                debug left_val => _214;
                                debug right_val => _215;
                                let _220: core::panicking::AssertKind;
                                scope 42 {
                                    debug kind => _220;
                                }
                            }
                            scope 43 {
                                debug x => _223;
                                let _230: &u16;
                                let _231: &u16;
                                let _239: i16;
                                scope 44 {
                                    debug left_val => _230;
                                    debug right_val => _231;
                                    let _236: core::panicking::AssertKind;
                                    scope 45 {
                                        debug kind => _236;
                                    }
                                }
                                scope 46 {
                                    debug x => _239;
                                    let _246: &i16;
                                    let _247: &i16;
                                    scope 47 {
                                        debug left_val => _246;
                                        debug right_val => _247;
                                        let _252: core::panicking::AssertKind;
                                        scope 48 {
                                            debug kind => _252;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    scope 49 {
        debug x => _255;
        let _262: &i32;
        let _263: &i32;
        let _271: u32;
        scope 50 {
            debug left_val => _262;
            debug right_val => _263;
            let _268: core::panicking::AssertKind;
            scope 51 {
                debug kind => _268;
            }
        }
        scope 52 {
            debug x => _271;
            let _278: &u32;
            let _279: &u32;
            let _287: u32;
            scope 53 {
                debug left_val => _278;
                debug right_val => _279;
                let _284: core::panicking::AssertKind;
                scope 54 {
                    debug kind => _284;
                }
            }
            scope 55 {
                debug x => _287;
                let _294: &u32;
                let _295: &u32;
                let _303: u32;
                scope 56 {
                    debug left_val => _294;
                    debug right_val => _295;
                    let _300: core::panicking::AssertKind;
                    scope 57 {
                        debug kind => _300;
                    }
                }
                scope 58 {
                    debug x => _303;
                    let _309: &u32;
                    let _310: &u32;
                    let _318: i32;
                    scope 59 {
                        debug left_val => _309;
                        debug right_val => _310;
                        let _315: core::panicking::AssertKind;
                        scope 60 {
                            debug kind => _315;
                        }
                    }
                    scope 61 {
                        debug x => _318;
                        let _324: &i32;
                        let _325: &i32;
                        let _333: u32;
                        scope 62 {
                            debug left_val => _324;
                            debug right_val => _325;
                            let _330: core::panicking::AssertKind;
                            scope 63 {
                                debug kind => _330;
                            }
                        }
                        scope 64 {
                            debug x => _333;
                            let _341: &u32;
                            let _342: &u32;
                            let _350: u32;
                            scope 65 {
                                debug left_val => _341;
                                debug right_val => _342;
                                let _347: core::panicking::AssertKind;
                                scope 66 {
                                    debug kind => _347;
                                }
                            }
                            scope 67 {
                                debug x => _350;
                                let _357: &u32;
                                let _358: &u32;
                                let _366: i32;
                                scope 68 {
                                    debug left_val => _357;
                                    debug right_val => _358;
                                    let _363: core::panicking::AssertKind;
                                    scope 69 {
                                        debug kind => _363;
                                    }
                                }
                                scope 70 {
                                    debug x => _366;
                                    let _373: &i32;
                                    let _374: &i32;
                                    scope 71 {
                                        debug left_val => _373;
                                        debug right_val => _374;
                                        let _379: core::panicking::AssertKind;
                                        scope 72 {
                                            debug kind => _379;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    scope 73 {
        debug x => _382;
        let _389: &i64;
        let _390: &i64;
        let _398: u64;
        scope 74 {
            debug left_val => _389;
            debug right_val => _390;
            let _395: core::panicking::AssertKind;
            scope 75 {
                debug kind => _395;
            }
        }
        scope 76 {
            debug x => _398;
            let _405: &u64;
            let _406: &u64;
            let _414: u64;
            scope 77 {
                debug left_val => _405;
                debug right_val => _406;
                let _411: core::panicking::AssertKind;
                scope 78 {
                    debug kind => _411;
                }
            }
            scope 79 {
                debug x => _414;
                let _421: &u64;
                let _422: &u64;
                let _430: u64;
                scope 80 {
                    debug left_val => _421;
                    debug right_val => _422;
                    let _427: core::panicking::AssertKind;
                    scope 81 {
                        debug kind => _427;
                    }
                }
                scope 82 {
                    debug x => _430;
                    let _436: &u64;
                    let _437: &u64;
                    let _445: i64;
                    scope 83 {
                        debug left_val => _436;
                        debug right_val => _437;
                        let _442: core::panicking::AssertKind;
                        scope 84 {
                            debug kind => _442;
                        }
                    }
                    scope 85 {
                        debug x => _445;
                        let _451: &i64;
                        let _452: &i64;
                        let _460: u64;
                        scope 86 {
                            debug left_val => _451;
                            debug right_val => _452;
                            let _457: core::panicking::AssertKind;
                            scope 87 {
                                debug kind => _457;
                            }
                        }
                        scope 88 {
                            debug x => _460;
                            let _468: &u64;
                            let _469: &u64;
                            let _477: u64;
                            scope 89 {
                                debug left_val => _468;
                                debug right_val => _469;
                                let _474: core::panicking::AssertKind;
                                scope 90 {
                                    debug kind => _474;
                                }
                            }
                            scope 91 {
                                debug x => _477;
                                let _484: &u64;
                                let _485: &u64;
                                let _493: i64;
                                scope 92 {
                                    debug left_val => _484;
                                    debug right_val => _485;
                                    let _490: core::panicking::AssertKind;
                                    scope 93 {
                                        debug kind => _490;
                                    }
                                }
                                scope 94 {
                                    debug x => _493;
                                    let _500: &i64;
                                    let _501: &i64;
                                    scope 95 {
                                        debug left_val => _500;
                                        debug right_val => _501;
                                        let _506: core::panicking::AssertKind;
                                        scope 96 {
                                            debug kind => _506;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = const 1_i8;
        _3 = id::<i32>(const 0_i32) -> bb1;
    }

    bb1: {
        _1 = Shr(move _2, move _3);
        _5 = &_1;
        _7 = const 1_i8;
        _6 = &_7;
        _4 = (move _5, move _6);
        _8 = (_4.0: &i8);
        _9 = (_4.1: &i8);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<i8, i8>(move _14, _8, _9, move _16);
    }

    bb3: {
        _18 = const 1_u8;
        _19 = id::<i32>(const 0_i32) -> bb4;
    }

    bb4: {
        _17 = Shr(move _18, move _19);
        _21 = &_17;
        _23 = const 1_u8;
        _22 = &_23;
        _20 = (move _21, move _22);
        _24 = (_20.0: &u8);
        _25 = (_20.1: &u8);
        _28 = (*_24);
        _29 = (*_25);
        _27 = Eq(move _28, move _29);
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _30 = core::panicking::AssertKind::Eq;
        _32 = Option::<Arguments<'_>>::None;
        _31 = core::panicking::assert_failed::<u8, u8>(move _30, _24, _25, move _32);
    }

    bb6: {
        _35 = Sub(const 7_i32, const 1_i32);
        _34 = id::<i32>(move _35) -> bb7;
    }

    bb7: {
        _33 = Shr(const 64_i8, move _34);
        _37 = &_33;
        _39 = const 1_i8;
        _38 = &_39;
        _36 = (move _37, move _38);
        _40 = (_36.0: &i8);
        _41 = (_36.1: &i8);
        _44 = (*_40);
        _45 = (*_41);
        _43 = Eq(move _44, move _45);
        _42 = Not(move _43);
        switchInt(move _42) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _46 = core::panicking::AssertKind::Eq;
        _48 = Option::<Arguments<'_>>::None;
        _47 = core::panicking::assert_failed::<i8, i8>(move _46, _40, _41, move _48);
    }

    bb9: {
        _50 = id::<i32>(const 7_i32) -> bb10;
    }

    bb10: {
        _49 = Shr(const 128_u8, move _50);
        _52 = &_49;
        _54 = const 1_u8;
        _53 = &_54;
        _51 = (move _52, move _53);
        _55 = (_51.0: &u8);
        _56 = (_51.1: &u8);
        _59 = (*_55);
        _60 = (*_56);
        _58 = Eq(move _59, move _60);
        _57 = Not(move _58);
        switchInt(move _57) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _61 = core::panicking::AssertKind::Eq;
        _63 = Option::<Arguments<'_>>::None;
        _62 = core::panicking::assert_failed::<u8, u8>(move _61, _55, _56, move _63);
    }

    bb12: {
        _65 = id::<i32>(const 7_i32) -> bb13;
    }

    bb13: {
        _64 = Shr(const _, move _65);
        _67 = &_64;
        _69 = const -1_i8;
        _68 = &_69;
        _66 = (move _67, move _68);
        _70 = (_66.0: &i8);
        _71 = (_66.1: &i8);
        _74 = (*_70);
        _75 = (*_71);
        _73 = Eq(move _74, move _75);
        _72 = Not(move _73);
        switchInt(move _72) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _76 = core::panicking::AssertKind::Eq;
        _78 = Option::<Arguments<'_>>::None;
        _77 = core::panicking::assert_failed::<i8, i8>(move _76, _70, _71, move _78);
    }

    bb15: {
        _80 = Add(const 64_i8, const 1_i8);
        _82 = Sub(const 7_i32, const 1_i32);
        _81 = id::<i32>(move _82) -> bb16;
    }

    bb16: {
        _79 = Shr(move _80, move _81);
        _84 = &_79;
        _86 = const 1_i8;
        _85 = &_86;
        _83 = (move _84, move _85);
        _87 = (_83.0: &i8);
        _88 = (_83.1: &i8);
        _91 = (*_87);
        _92 = (*_88);
        _90 = Eq(move _91, move _92);
        _89 = Not(move _90);
        switchInt(move _89) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _93 = core::panicking::AssertKind::Eq;
        _95 = Option::<Arguments<'_>>::None;
        _94 = core::panicking::assert_failed::<i8, i8>(move _93, _87, _88, move _95);
    }

    bb18: {
        _97 = Add(const 128_u8, const 1_u8);
        _98 = id::<i32>(const 7_i32) -> bb19;
    }

    bb19: {
        _96 = Shr(move _97, move _98);
        _100 = &_96;
        _102 = const 1_u8;
        _101 = &_102;
        _99 = (move _100, move _101);
        _103 = (_99.0: &u8);
        _104 = (_99.1: &u8);
        _107 = (*_103);
        _108 = (*_104);
        _106 = Eq(move _107, move _108);
        _105 = Not(move _106);
        switchInt(move _105) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _109 = core::panicking::AssertKind::Eq;
        _111 = Option::<Arguments<'_>>::None;
        _110 = core::panicking::assert_failed::<u8, u8>(move _109, _103, _104, move _111);
    }

    bb21: {
        _113 = Add(const _, const 1_i8);
        _114 = id::<i32>(const 7_i32) -> bb22;
    }

    bb22: {
        _112 = Shr(move _113, move _114);
        _116 = &_112;
        _118 = const -1_i8;
        _117 = &_118;
        _115 = (move _116, move _117);
        _119 = (_115.0: &i8);
        _120 = (_115.1: &i8);
        _123 = (*_119);
        _124 = (*_120);
        _122 = Eq(move _123, move _124);
        _121 = Not(move _122);
        switchInt(move _121) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _125 = core::panicking::AssertKind::Eq;
        _127 = Option::<Arguments<'_>>::None;
        _126 = core::panicking::assert_failed::<i8, i8>(move _125, _119, _120, move _127);
    }

    bb24: {
        _129 = const 1_i16;
        _130 = id::<i32>(const 0_i32) -> bb25;
    }

    bb25: {
        _128 = Shr(move _129, move _130);
        _132 = &_128;
        _134 = const 1_i16;
        _133 = &_134;
        _131 = (move _132, move _133);
        _135 = (_131.0: &i16);
        _136 = (_131.1: &i16);
        _139 = (*_135);
        _140 = (*_136);
        _138 = Eq(move _139, move _140);
        _137 = Not(move _138);
        switchInt(move _137) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _141 = core::panicking::AssertKind::Eq;
        _143 = Option::<Arguments<'_>>::None;
        _142 = core::panicking::assert_failed::<i16, i16>(move _141, _135, _136, move _143);
    }

    bb27: {
        _145 = const 1_u16;
        _146 = id::<i32>(const 0_i32) -> bb28;
    }

    bb28: {
        _144 = Shr(move _145, move _146);
        _148 = &_144;
        _150 = const 1_u16;
        _149 = &_150;
        _147 = (move _148, move _149);
        _151 = (_147.0: &u16);
        _152 = (_147.1: &u16);
        _155 = (*_151);
        _156 = (*_152);
        _154 = Eq(move _155, move _156);
        _153 = Not(move _154);
        switchInt(move _153) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _157 = core::panicking::AssertKind::Eq;
        _159 = Option::<Arguments<'_>>::None;
        _158 = core::panicking::assert_failed::<u16, u16>(move _157, _151, _152, move _159);
    }

    bb30: {
        _162 = Sub(const 15_i32, const 1_i32);
        _161 = id::<i32>(move _162) -> bb31;
    }

    bb31: {
        _160 = Shr(const 16384_u16, move _161);
        _164 = &_160;
        _166 = const 1_u16;
        _165 = &_166;
        _163 = (move _164, move _165);
        _167 = (_163.0: &u16);
        _168 = (_163.1: &u16);
        _171 = (*_167);
        _172 = (*_168);
        _170 = Eq(move _171, move _172);
        _169 = Not(move _170);
        switchInt(move _169) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _173 = core::panicking::AssertKind::Eq;
        _175 = Option::<Arguments<'_>>::None;
        _174 = core::panicking::assert_failed::<u16, u16>(move _173, _167, _168, move _175);
    }

    bb33: {
        _177 = id::<i32>(const 15_i32) -> bb34;
    }

    bb34: {
        _176 = Shr(const 32768_u16, move _177);
        _179 = &_176;
        _181 = const 1_u16;
        _180 = &_181;
        _178 = (move _179, move _180);
        _182 = (_178.0: &u16);
        _183 = (_178.1: &u16);
        _186 = (*_182);
        _187 = (*_183);
        _185 = Eq(move _186, move _187);
        _184 = Not(move _185);
        switchInt(move _184) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _188 = core::panicking::AssertKind::Eq;
        _190 = Option::<Arguments<'_>>::None;
        _189 = core::panicking::assert_failed::<u16, u16>(move _188, _182, _183, move _190);
    }

    bb36: {
        _192 = id::<i32>(const 15_i32) -> bb37;
    }

    bb37: {
        _191 = Shr(const _, move _192);
        _194 = &_191;
        _196 = const -1_i16;
        _195 = &_196;
        _193 = (move _194, move _195);
        _197 = (_193.0: &i16);
        _198 = (_193.1: &i16);
        _201 = (*_197);
        _202 = (*_198);
        _200 = Eq(move _201, move _202);
        _199 = Not(move _200);
        switchInt(move _199) -> [0: bb39, otherwise: bb38];
    }

    bb38: {
        _203 = core::panicking::AssertKind::Eq;
        _205 = Option::<Arguments<'_>>::None;
        _204 = core::panicking::assert_failed::<i16, i16>(move _203, _197, _198, move _205);
    }

    bb39: {
        _207 = Add(const 16384_u16, const 1_u16);
        _209 = Sub(const 15_i32, const 1_i32);
        _208 = id::<i32>(move _209) -> bb40;
    }

    bb40: {
        _206 = Shr(move _207, move _208);
        _211 = &_206;
        _213 = const 1_u16;
        _212 = &_213;
        _210 = (move _211, move _212);
        _214 = (_210.0: &u16);
        _215 = (_210.1: &u16);
        _218 = (*_214);
        _219 = (*_215);
        _217 = Eq(move _218, move _219);
        _216 = Not(move _217);
        switchInt(move _216) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _220 = core::panicking::AssertKind::Eq;
        _222 = Option::<Arguments<'_>>::None;
        _221 = core::panicking::assert_failed::<u16, u16>(move _220, _214, _215, move _222);
    }

    bb42: {
        _224 = Add(const 32768_u16, const 1_u16);
        _225 = id::<i32>(const 15_i32) -> bb43;
    }

    bb43: {
        _223 = Shr(move _224, move _225);
        _227 = &_223;
        _229 = const 1_u16;
        _228 = &_229;
        _226 = (move _227, move _228);
        _230 = (_226.0: &u16);
        _231 = (_226.1: &u16);
        _234 = (*_230);
        _235 = (*_231);
        _233 = Eq(move _234, move _235);
        _232 = Not(move _233);
        switchInt(move _232) -> [0: bb45, otherwise: bb44];
    }

    bb44: {
        _236 = core::panicking::AssertKind::Eq;
        _238 = Option::<Arguments<'_>>::None;
        _237 = core::panicking::assert_failed::<u16, u16>(move _236, _230, _231, move _238);
    }

    bb45: {
        _240 = Add(const _, const 1_i16);
        _241 = id::<i32>(const 15_i32) -> bb46;
    }

    bb46: {
        _239 = Shr(move _240, move _241);
        _243 = &_239;
        _245 = const -1_i16;
        _244 = &_245;
        _242 = (move _243, move _244);
        _246 = (_242.0: &i16);
        _247 = (_242.1: &i16);
        _250 = (*_246);
        _251 = (*_247);
        _249 = Eq(move _250, move _251);
        _248 = Not(move _249);
        switchInt(move _248) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _252 = core::panicking::AssertKind::Eq;
        _254 = Option::<Arguments<'_>>::None;
        _253 = core::panicking::assert_failed::<i16, i16>(move _252, _246, _247, move _254);
    }

    bb48: {
        _256 = const 1_i32;
        _257 = id::<i32>(const 0_i32) -> bb49;
    }

    bb49: {
        _255 = Shr(move _256, move _257);
        _259 = &_255;
        _261 = const 1_i32;
        _260 = &_261;
        _258 = (move _259, move _260);
        _262 = (_258.0: &i32);
        _263 = (_258.1: &i32);
        _266 = (*_262);
        _267 = (*_263);
        _265 = Eq(move _266, move _267);
        _264 = Not(move _265);
        switchInt(move _264) -> [0: bb51, otherwise: bb50];
    }

    bb50: {
        _268 = core::panicking::AssertKind::Eq;
        _270 = Option::<Arguments<'_>>::None;
        _269 = core::panicking::assert_failed::<i32, i32>(move _268, _262, _263, move _270);
    }

    bb51: {
        _272 = const 1_u32;
        _273 = id::<i32>(const 0_i32) -> bb52;
    }

    bb52: {
        _271 = Shr(move _272, move _273);
        _275 = &_271;
        _277 = const 1_u32;
        _276 = &_277;
        _274 = (move _275, move _276);
        _278 = (_274.0: &u32);
        _279 = (_274.1: &u32);
        _282 = (*_278);
        _283 = (*_279);
        _281 = Eq(move _282, move _283);
        _280 = Not(move _281);
        switchInt(move _280) -> [0: bb54, otherwise: bb53];
    }

    bb53: {
        _284 = core::panicking::AssertKind::Eq;
        _286 = Option::<Arguments<'_>>::None;
        _285 = core::panicking::assert_failed::<u32, u32>(move _284, _278, _279, move _286);
    }

    bb54: {
        _289 = Sub(const 31_i32, const 1_i32);
        _288 = id::<i32>(move _289) -> bb55;
    }

    bb55: {
        _287 = Shr(const 1073741824_u32, move _288);
        _291 = &_287;
        _293 = const 1_u32;
        _292 = &_293;
        _290 = (move _291, move _292);
        _294 = (_290.0: &u32);
        _295 = (_290.1: &u32);
        _298 = (*_294);
        _299 = (*_295);
        _297 = Eq(move _298, move _299);
        _296 = Not(move _297);
        switchInt(move _296) -> [0: bb57, otherwise: bb56];
    }

    bb56: {
        _300 = core::panicking::AssertKind::Eq;
        _302 = Option::<Arguments<'_>>::None;
        _301 = core::panicking::assert_failed::<u32, u32>(move _300, _294, _295, move _302);
    }

    bb57: {
        _304 = id::<i32>(const 31_i32) -> bb58;
    }

    bb58: {
        _303 = Shr(const 2147483648_u32, move _304);
        _306 = &_303;
        _308 = const 1_u32;
        _307 = &_308;
        _305 = (move _306, move _307);
        _309 = (_305.0: &u32);
        _310 = (_305.1: &u32);
        _313 = (*_309);
        _314 = (*_310);
        _312 = Eq(move _313, move _314);
        _311 = Not(move _312);
        switchInt(move _311) -> [0: bb60, otherwise: bb59];
    }

    bb59: {
        _315 = core::panicking::AssertKind::Eq;
        _317 = Option::<Arguments<'_>>::None;
        _316 = core::panicking::assert_failed::<u32, u32>(move _315, _309, _310, move _317);
    }

    bb60: {
        _319 = id::<i32>(const 31_i32) -> bb61;
    }

    bb61: {
        _318 = Shr(const _, move _319);
        _321 = &_318;
        _323 = const -1_i32;
        _322 = &_323;
        _320 = (move _321, move _322);
        _324 = (_320.0: &i32);
        _325 = (_320.1: &i32);
        _328 = (*_324);
        _329 = (*_325);
        _327 = Eq(move _328, move _329);
        _326 = Not(move _327);
        switchInt(move _326) -> [0: bb63, otherwise: bb62];
    }

    bb62: {
        _330 = core::panicking::AssertKind::Eq;
        _332 = Option::<Arguments<'_>>::None;
        _331 = core::panicking::assert_failed::<i32, i32>(move _330, _324, _325, move _332);
    }

    bb63: {
        _334 = Add(const 1073741824_u32, const 1_u32);
        _336 = Sub(const 31_i32, const 1_i32);
        _335 = id::<i32>(move _336) -> bb64;
    }

    bb64: {
        _333 = Shr(move _334, move _335);
        _338 = &_333;
        _340 = const 1_u32;
        _339 = &_340;
        _337 = (move _338, move _339);
        _341 = (_337.0: &u32);
        _342 = (_337.1: &u32);
        _345 = (*_341);
        _346 = (*_342);
        _344 = Eq(move _345, move _346);
        _343 = Not(move _344);
        switchInt(move _343) -> [0: bb66, otherwise: bb65];
    }

    bb65: {
        _347 = core::panicking::AssertKind::Eq;
        _349 = Option::<Arguments<'_>>::None;
        _348 = core::panicking::assert_failed::<u32, u32>(move _347, _341, _342, move _349);
    }

    bb66: {
        _351 = Add(const 2147483648_u32, const 1_u32);
        _352 = id::<i32>(const 31_i32) -> bb67;
    }

    bb67: {
        _350 = Shr(move _351, move _352);
        _354 = &_350;
        _356 = const 1_u32;
        _355 = &_356;
        _353 = (move _354, move _355);
        _357 = (_353.0: &u32);
        _358 = (_353.1: &u32);
        _361 = (*_357);
        _362 = (*_358);
        _360 = Eq(move _361, move _362);
        _359 = Not(move _360);
        switchInt(move _359) -> [0: bb69, otherwise: bb68];
    }

    bb68: {
        _363 = core::panicking::AssertKind::Eq;
        _365 = Option::<Arguments<'_>>::None;
        _364 = core::panicking::assert_failed::<u32, u32>(move _363, _357, _358, move _365);
    }

    bb69: {
        _367 = Add(const _, const 1_i32);
        _368 = id::<i32>(const 31_i32) -> bb70;
    }

    bb70: {
        _366 = Shr(move _367, move _368);
        _370 = &_366;
        _372 = const -1_i32;
        _371 = &_372;
        _369 = (move _370, move _371);
        _373 = (_369.0: &i32);
        _374 = (_369.1: &i32);
        _377 = (*_373);
        _378 = (*_374);
        _376 = Eq(move _377, move _378);
        _375 = Not(move _376);
        switchInt(move _375) -> [0: bb72, otherwise: bb71];
    }

    bb71: {
        _379 = core::panicking::AssertKind::Eq;
        _381 = Option::<Arguments<'_>>::None;
        _380 = core::panicking::assert_failed::<i32, i32>(move _379, _373, _374, move _381);
    }

    bb72: {
        _383 = const 1_i64;
        _384 = id::<i32>(const 0_i32) -> bb73;
    }

    bb73: {
        _382 = Shr(move _383, move _384);
        _386 = &_382;
        _388 = const 1_i64;
        _387 = &_388;
        _385 = (move _386, move _387);
        _389 = (_385.0: &i64);
        _390 = (_385.1: &i64);
        _393 = (*_389);
        _394 = (*_390);
        _392 = Eq(move _393, move _394);
        _391 = Not(move _392);
        switchInt(move _391) -> [0: bb75, otherwise: bb74];
    }

    bb74: {
        _395 = core::panicking::AssertKind::Eq;
        _397 = Option::<Arguments<'_>>::None;
        _396 = core::panicking::assert_failed::<i64, i64>(move _395, _389, _390, move _397);
    }

    bb75: {
        _399 = const 1_u64;
        _400 = id::<i32>(const 0_i32) -> bb76;
    }

    bb76: {
        _398 = Shr(move _399, move _400);
        _402 = &_398;
        _404 = const 1_u64;
        _403 = &_404;
        _401 = (move _402, move _403);
        _405 = (_401.0: &u64);
        _406 = (_401.1: &u64);
        _409 = (*_405);
        _410 = (*_406);
        _408 = Eq(move _409, move _410);
        _407 = Not(move _408);
        switchInt(move _407) -> [0: bb78, otherwise: bb77];
    }

    bb77: {
        _411 = core::panicking::AssertKind::Eq;
        _413 = Option::<Arguments<'_>>::None;
        _412 = core::panicking::assert_failed::<u64, u64>(move _411, _405, _406, move _413);
    }

    bb78: {
        _416 = Sub(const 63_i32, const 1_i32);
        _415 = id::<i32>(move _416) -> bb79;
    }

    bb79: {
        _414 = Shr(const 4611686018427387904_u64, move _415);
        _418 = &_414;
        _420 = const 1_u64;
        _419 = &_420;
        _417 = (move _418, move _419);
        _421 = (_417.0: &u64);
        _422 = (_417.1: &u64);
        _425 = (*_421);
        _426 = (*_422);
        _424 = Eq(move _425, move _426);
        _423 = Not(move _424);
        switchInt(move _423) -> [0: bb81, otherwise: bb80];
    }

    bb80: {
        _427 = core::panicking::AssertKind::Eq;
        _429 = Option::<Arguments<'_>>::None;
        _428 = core::panicking::assert_failed::<u64, u64>(move _427, _421, _422, move _429);
    }

    bb81: {
        _431 = id::<i32>(const 63_i32) -> bb82;
    }

    bb82: {
        _430 = Shr(const 9223372036854775808_u64, move _431);
        _433 = &_430;
        _435 = const 1_u64;
        _434 = &_435;
        _432 = (move _433, move _434);
        _436 = (_432.0: &u64);
        _437 = (_432.1: &u64);
        _440 = (*_436);
        _441 = (*_437);
        _439 = Eq(move _440, move _441);
        _438 = Not(move _439);
        switchInt(move _438) -> [0: bb84, otherwise: bb83];
    }

    bb83: {
        _442 = core::panicking::AssertKind::Eq;
        _444 = Option::<Arguments<'_>>::None;
        _443 = core::panicking::assert_failed::<u64, u64>(move _442, _436, _437, move _444);
    }

    bb84: {
        _446 = id::<i32>(const 63_i32) -> bb85;
    }

    bb85: {
        _445 = Shr(const _, move _446);
        _448 = &_445;
        _450 = const -1_i64;
        _449 = &_450;
        _447 = (move _448, move _449);
        _451 = (_447.0: &i64);
        _452 = (_447.1: &i64);
        _455 = (*_451);
        _456 = (*_452);
        _454 = Eq(move _455, move _456);
        _453 = Not(move _454);
        switchInt(move _453) -> [0: bb87, otherwise: bb86];
    }

    bb86: {
        _457 = core::panicking::AssertKind::Eq;
        _459 = Option::<Arguments<'_>>::None;
        _458 = core::panicking::assert_failed::<i64, i64>(move _457, _451, _452, move _459);
    }

    bb87: {
        _461 = Add(const 4611686018427387904_u64, const 1_u64);
        _463 = Sub(const 63_i32, const 1_i32);
        _462 = id::<i32>(move _463) -> bb88;
    }

    bb88: {
        _460 = Shr(move _461, move _462);
        _465 = &_460;
        _467 = const 1_u64;
        _466 = &_467;
        _464 = (move _465, move _466);
        _468 = (_464.0: &u64);
        _469 = (_464.1: &u64);
        _472 = (*_468);
        _473 = (*_469);
        _471 = Eq(move _472, move _473);
        _470 = Not(move _471);
        switchInt(move _470) -> [0: bb90, otherwise: bb89];
    }

    bb89: {
        _474 = core::panicking::AssertKind::Eq;
        _476 = Option::<Arguments<'_>>::None;
        _475 = core::panicking::assert_failed::<u64, u64>(move _474, _468, _469, move _476);
    }

    bb90: {
        _478 = Add(const 9223372036854775808_u64, const 1_u64);
        _479 = id::<i32>(const 63_i32) -> bb91;
    }

    bb91: {
        _477 = Shr(move _478, move _479);
        _481 = &_477;
        _483 = const 1_u64;
        _482 = &_483;
        _480 = (move _481, move _482);
        _484 = (_480.0: &u64);
        _485 = (_480.1: &u64);
        _488 = (*_484);
        _489 = (*_485);
        _487 = Eq(move _488, move _489);
        _486 = Not(move _487);
        switchInt(move _486) -> [0: bb93, otherwise: bb92];
    }

    bb92: {
        _490 = core::panicking::AssertKind::Eq;
        _492 = Option::<Arguments<'_>>::None;
        _491 = core::panicking::assert_failed::<u64, u64>(move _490, _484, _485, move _492);
    }

    bb93: {
        _494 = Add(const _, const 1_i64);
        _495 = id::<i32>(const 63_i32) -> bb94;
    }

    bb94: {
        _493 = Shr(move _494, move _495);
        _497 = &_493;
        _499 = const -1_i64;
        _498 = &_499;
        _496 = (move _497, move _498);
        _500 = (_496.0: &i64);
        _501 = (_496.1: &i64);
        _504 = (*_500);
        _505 = (*_501);
        _503 = Eq(move _504, move _505);
        _502 = Not(move _503);
        switchInt(move _502) -> [0: bb96, otherwise: bb95];
    }

    bb95: {
        _506 = core::panicking::AssertKind::Eq;
        _508 = Option::<Arguments<'_>>::None;
        _507 = core::panicking::assert_failed::<i64, i64>(move _506, _500, _501, move _508);
    }

    bb96: {
        return;
    }
}
