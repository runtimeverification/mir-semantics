// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: i8;
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let _6: &[&str; 2];
    let _7: [&str; 2];
    let mut _8: &[core::fmt::rt::Argument<'_>];
    let _9: &[core::fmt::rt::Argument<'_>; 1];
    let _10: [core::fmt::rt::Argument<'_>; 1];
    let mut _11: core::fmt::rt::Argument<'_>;
    let _12: &i8;
    let _15: ();
    let mut _16: std::fmt::Arguments<'_>;
    let mut _17: &[&str];
    let _18: &[&str; 2];
    let _19: [&str; 2];
    let mut _20: &[core::fmt::rt::Argument<'_>];
    let _21: &[core::fmt::rt::Argument<'_>; 1];
    let _22: [core::fmt::rt::Argument<'_>; 1];
    let mut _23: core::fmt::rt::Argument<'_>;
    let _24: &i16;
    let _27: ();
    let mut _28: std::fmt::Arguments<'_>;
    let mut _29: &[&str];
    let _30: &[&str; 2];
    let _31: [&str; 2];
    let mut _32: &[core::fmt::rt::Argument<'_>];
    let _33: &[core::fmt::rt::Argument<'_>; 1];
    let _34: [core::fmt::rt::Argument<'_>; 1];
    let mut _35: core::fmt::rt::Argument<'_>;
    let _36: &i32;
    let _39: ();
    let mut _40: std::fmt::Arguments<'_>;
    let mut _41: &[&str];
    let _42: &[&str; 2];
    let _43: [&str; 2];
    let mut _44: &[core::fmt::rt::Argument<'_>];
    let _45: &[core::fmt::rt::Argument<'_>; 1];
    let _46: [core::fmt::rt::Argument<'_>; 1];
    let mut _47: core::fmt::rt::Argument<'_>;
    let _48: &i64;
    let _51: ();
    let mut _52: std::fmt::Arguments<'_>;
    let mut _53: &[&str];
    let _54: &[&str; 2];
    let _55: [&str; 2];
    let mut _56: &[core::fmt::rt::Argument<'_>];
    let _57: &[core::fmt::rt::Argument<'_>; 1];
    let _58: [core::fmt::rt::Argument<'_>; 1];
    let mut _59: core::fmt::rt::Argument<'_>;
    let _60: &isize;
    scope 1 {
        debug a => _1;
        let _2: i8;
        scope 2 {
            debug a_neg => _2;
            let _13: i16;
            scope 3 {
                debug b => _13;
                let _14: i16;
                scope 4 {
                    debug b_neg => _14;
                    let _25: i32;
                    scope 5 {
                        debug c => _25;
                        let _26: i32;
                        scope 6 {
                            debug c_neg => _26;
                            let _37: i64;
                            scope 7 {
                                debug d => _37;
                                let _38: i64;
                                scope 8 {
                                    debug d_neg => _38;
                                    let _49: isize;
                                    scope 9 {
                                        debug e => _49;
                                        let _50: isize;
                                        scope 10 {
                                            debug e_neg => _50;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const 1_i8;
        _2 = Neg(_1);
        _7 = [const "", const "\n"];
        _6 = &_7;
        _5 = _6 as &[&str] (Pointer(Unsize));
        _12 = &_2;
        _11 = core::fmt::rt::Argument::<'_>::new_display::<i8>(_12) -> bb1;
    }

    bb1: {
        _10 = [move _11];
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> bb2;
    }

    bb2: {
        _3 = _print(move _4) -> bb3;
    }

    bb3: {
        _13 = const 1_i16;
        _14 = Neg(_13);
        _19 = [const "", const "\n"];
        _18 = &_19;
        _17 = _18 as &[&str] (Pointer(Unsize));
        _24 = &_14;
        _23 = core::fmt::rt::Argument::<'_>::new_display::<i16>(_24) -> bb4;
    }

    bb4: {
        _22 = [move _23];
        _21 = &_22;
        _20 = _21 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _16 = Arguments::<'_>::new_v1(move _17, move _20) -> bb5;
    }

    bb5: {
        _15 = _print(move _16) -> bb6;
    }

    bb6: {
        _25 = const 1_i32;
        _26 = Neg(_25);
        _31 = [const "", const "\n"];
        _30 = &_31;
        _29 = _30 as &[&str] (Pointer(Unsize));
        _36 = &_26;
        _35 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_36) -> bb7;
    }

    bb7: {
        _34 = [move _35];
        _33 = &_34;
        _32 = _33 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _28 = Arguments::<'_>::new_v1(move _29, move _32) -> bb8;
    }

    bb8: {
        _27 = _print(move _28) -> bb9;
    }

    bb9: {
        _37 = const 1_i64;
        _38 = Neg(_37);
        _43 = [const "", const "\n"];
        _42 = &_43;
        _41 = _42 as &[&str] (Pointer(Unsize));
        _48 = &_38;
        _47 = core::fmt::rt::Argument::<'_>::new_display::<i64>(_48) -> bb10;
    }

    bb10: {
        _46 = [move _47];
        _45 = &_46;
        _44 = _45 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _40 = Arguments::<'_>::new_v1(move _41, move _44) -> bb11;
    }

    bb11: {
        _39 = _print(move _40) -> bb12;
    }

    bb12: {
        _49 = const 1_isize;
        _50 = Neg(_49);
        _55 = [const "", const "\n"];
        _54 = &_55;
        _53 = _54 as &[&str] (Pointer(Unsize));
        _60 = &_50;
        _59 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_60) -> bb13;
    }

    bb13: {
        _58 = [move _59];
        _57 = &_58;
        _56 = _57 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _52 = Arguments::<'_>::new_v1(move _53, move _56) -> bb14;
    }

    bb14: {
        _51 = _print(move _52) -> bb15;
    }

    bb15: {
        return;
    }
}
