// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: std::ops::Range<usize>;
    let mut _2: std::ops::Range<usize>;
    let mut _3: std::ops::Range<usize>;
    let mut _4: std::option::Option<usize>;
    let mut _5: &mut std::ops::Range<usize>;
    let mut _6: isize;
    let mut _9: (&usize, &usize);
    let mut _10: &usize;
    let _11: usize;
    let mut _12: &std::collections::LinkedList<()>;
    let mut _13: &usize;
    let _14: usize;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: usize;
    let mut _20: usize;
    let _22: !;
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _24: (&std::option::Option<&()>, &std::option::Option<&()>);
    let mut _25: &std::option::Option<&()>;
    let _26: std::option::Option<&()>;
    let mut _27: &std::collections::LinkedList<()>;
    let mut _28: &std::option::Option<&()>;
    let _29: std::option::Option<&()>;
    let mut _32: bool;
    let mut _33: bool;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _37: std::ops::Range<i32>;
    let mut _38: std::ops::Range<i32>;
    let mut _39: i32;
    let mut _40: usize;
    let mut _42: std::option::Option<i32>;
    let mut _43: &mut std::ops::Range<i32>;
    let mut _44: isize;
    let mut _46: (&usize, &usize);
    let mut _47: &usize;
    let _48: usize;
    let mut _49: &std::collections::LinkedList<()>;
    let mut _50: &usize;
    let _51: usize;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: usize;
    let mut _57: usize;
    let _59: !;
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _61: std::ops::Range<usize>;
    let mut _62: std::ops::Range<usize>;
    let mut _63: usize;
    let mut _65: std::option::Option<usize>;
    let mut _66: &mut std::ops::Range<usize>;
    let mut _67: isize;
    let mut _69: i32;
    let mut _70: i32;
    let _71: ();
    let mut _72: &mut std::collections::LinkedList<()>;
    let _73: ();
    let mut _74: &mut std::collections::LinkedList<()>;
    let mut _75: (&usize, &usize);
    let mut _76: &usize;
    let _77: usize;
    let mut _78: &std::collections::LinkedList<()>;
    let mut _79: &usize;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: usize;
    let mut _85: usize;
    let _87: !;
    let mut _88: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _89: (&usize, &usize);
    let mut _90: &usize;
    let _91: usize;
    let mut _92: std::collections::linked_list::Iter<'_, ()>;
    let mut _93: &std::collections::LinkedList<()>;
    let mut _94: &usize;
    let mut _97: bool;
    let mut _98: bool;
    let mut _99: usize;
    let mut _100: usize;
    let _102: !;
    let mut _103: std::option::Option<std::fmt::Arguments<'_>>;
    let _104: ();
    let mut _105: &mut std::collections::LinkedList<()>;
    scope 1 {
        debug iter => _3;
        let _7: usize;
        scope 2 {
            debug len => _7;
            let mut _8: std::collections::LinkedList<()>;
            scope 3 {
                debug tester => _8;
                let _15: &usize;
                let _16: &usize;
                let _30: &std::option::Option<&()>;
                let _31: &std::option::Option<&()>;
                let mut _41: std::ops::Range<i32>;
                scope 4 {
                    debug left_val => _15;
                    debug right_val => _16;
                    let _21: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _21;
                    }
                }
                scope 6 {
                    debug left_val => _30;
                    debug right_val => _31;
                    let _34: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _34;
                    }
                }
                scope 8 {
                    debug iter => _41;
                    let _45: i32;
                    scope 9 {
                        debug case => _45;
                        let _52: &usize;
                        let _53: &usize;
                        let mut _64: std::ops::Range<usize>;
                        let _80: &usize;
                        let _81: &usize;
                        let _95: &usize;
                        let _96: &usize;
                        scope 10 {
                            debug left_val => _52;
                            debug right_val => _53;
                            let _58: core::panicking::AssertKind;
                            scope 11 {
                                debug kind => _58;
                            }
                        }
                        scope 12 {
                            debug iter => _64;
                            let _68: usize;
                            scope 13 {
                                debug bit => _68;
                            }
                        }
                        scope 14 {
                            debug left_val => _80;
                            debug right_val => _81;
                            let _86: core::panicking::AssertKind;
                            scope 15 {
                                debug kind => _86;
                            }
                        }
                        scope 16 {
                            debug left_val => _95;
                            debug right_val => _96;
                            let _101: core::panicking::AssertKind;
                            scope 17 {
                                debug kind => _101;
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = std::ops::Range::<usize> { start: const 0_usize, end: const _ };
        _1 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _2) -> bb1;
    }

    bb1: {
        _3 = move _1;
        goto -> bb2;
    }

    bb2: {
        _5 = &mut _3;
        _4 = <std::ops::Range<usize> as Iterator>::next(_5) -> bb3;
    }

    bb3: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        _7 = ((_4 as Some).0: usize);
        _8 = LinkedList::<()>::new() -> bb7;
    }

    bb5: {
        unreachable;
    }

    bb6: {
        return;
    }

    bb7: {
        _12 = &_8;
        _11 = LinkedList::<()>::len(move _12) -> [return: bb8, unwind: bb37];
    }

    bb8: {
        _10 = &_11;
        _14 = const 0_usize;
        _13 = &_14;
        _9 = (move _10, move _13);
        _15 = (_9.0: &usize);
        _16 = (_9.1: &usize);
        _19 = (*_15);
        _20 = (*_16);
        _18 = Eq(move _19, move _20);
        _17 = Not(move _18);
        switchInt(move _17) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _21 = core::panicking::AssertKind::Eq;
        _23 = Option::<Arguments<'_>>::None;
        _22 = core::panicking::assert_failed::<usize, usize>(move _21, _15, _16, move _23) -> bb37;
    }

    bb10: {
        _27 = &_8;
        _26 = LinkedList::<()>::front(move _27) -> [return: bb11, unwind: bb37];
    }

    bb11: {
        _25 = &_26;
        _29 = Option::<&()>::None;
        _28 = &_29;
        _24 = (move _25, move _28);
        _30 = (_24.0: &std::option::Option<&()>);
        _31 = (_24.1: &std::option::Option<&()>);
        _33 = <Option<&()> as PartialEq>::eq(_30, _31) -> [return: bb12, unwind: bb37];
    }

    bb12: {
        _32 = Not(move _33);
        switchInt(move _32) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = core::panicking::assert_failed::<Option<&()>, Option<&()>>(move _34, _30, _31, move _36) -> bb37;
    }

    bb14: {
        _40 = _7;
        _39 = Shl(const 1_i32, move _40);
        _38 = std::ops::Range::<i32> { start: const 0_i32, end: move _39 };
        _37 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _38) -> [return: bb15, unwind: bb37];
    }

    bb15: {
        _41 = move _37;
        goto -> bb16;
    }

    bb16: {
        _43 = &mut _41;
        _42 = <std::ops::Range<i32> as Iterator>::next(_43) -> [return: bb17, unwind: bb37];
    }

    bb17: {
        _44 = discriminant(_42);
        switchInt(move _44) -> [0: bb19, 1: bb18, otherwise: bb5];
    }

    bb18: {
        _45 = ((_42 as Some).0: i32);
        _49 = &_8;
        _48 = LinkedList::<()>::len(move _49) -> [return: bb20, unwind: bb37];
    }

    bb19: {
        drop(_8) -> bb2;
    }

    bb20: {
        _47 = &_48;
        _51 = const 0_usize;
        _50 = &_51;
        _46 = (move _47, move _50);
        _52 = (_46.0: &usize);
        _53 = (_46.1: &usize);
        _56 = (*_52);
        _57 = (*_53);
        _55 = Eq(move _56, move _57);
        _54 = Not(move _55);
        switchInt(move _54) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _58 = core::panicking::AssertKind::Eq;
        _60 = Option::<Arguments<'_>>::None;
        _59 = core::panicking::assert_failed::<usize, usize>(move _58, _52, _53, move _60) -> bb37;
    }

    bb22: {
        _63 = _7;
        _62 = std::ops::Range::<usize> { start: const 0_usize, end: move _63 };
        _61 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _62) -> [return: bb23, unwind: bb37];
    }

    bb23: {
        _64 = move _61;
        goto -> bb24;
    }

    bb24: {
        _66 = &mut _64;
        _65 = <std::ops::Range<usize> as Iterator>::next(_66) -> [return: bb25, unwind: bb37];
    }

    bb25: {
        _67 = discriminant(_65);
        switchInt(move _67) -> [0: bb27, 1: bb26, otherwise: bb5];
    }

    bb26: {
        _68 = ((_65 as Some).0: usize);
        _70 = Shl(const 1_i32, _68);
        _69 = BitAnd(_45, move _70);
        switchInt(move _69) -> [0: bb29, otherwise: bb28];
    }

    bb27: {
        _78 = &_8;
        _77 = LinkedList::<()>::len(move _78) -> [return: bb30, unwind: bb37];
    }

    bb28: {
        _72 = &mut _8;
        _71 = LinkedList::<()>::push_front(move _72, const ()) -> [return: bb39, unwind: bb37];
    }

    bb29: {
        _74 = &mut _8;
        _73 = LinkedList::<()>::push_back(move _74, const ()) -> [return: bb40, unwind: bb37];
    }

    bb30: {
        _76 = &_77;
        _79 = &_7;
        _75 = (move _76, move _79);
        _80 = (_75.0: &usize);
        _81 = (_75.1: &usize);
        _84 = (*_80);
        _85 = (*_81);
        _83 = Eq(move _84, move _85);
        _82 = Not(move _83);
        switchInt(move _82) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _86 = core::panicking::AssertKind::Eq;
        _88 = Option::<Arguments<'_>>::None;
        _87 = core::panicking::assert_failed::<usize, usize>(move _86, _80, _81, move _88) -> bb37;
    }

    bb32: {
        _93 = &_8;
        _92 = LinkedList::<()>::iter(move _93) -> [return: bb33, unwind: bb37];
    }

    bb33: {
        _91 = <std::collections::linked_list::Iter<'_, ()> as Iterator>::count(move _92) -> [return: bb34, unwind: bb37];
    }

    bb34: {
        _90 = &_91;
        _94 = &_7;
        _89 = (move _90, move _94);
        _95 = (_89.0: &usize);
        _96 = (_89.1: &usize);
        _99 = (*_95);
        _100 = (*_96);
        _98 = Eq(move _99, move _100);
        _97 = Not(move _98);
        switchInt(move _97) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _101 = core::panicking::AssertKind::Eq;
        _103 = Option::<Arguments<'_>>::None;
        _102 = core::panicking::assert_failed::<usize, usize>(move _101, _95, _96, move _103) -> bb37;
    }

    bb36: {
        _105 = &mut _8;
        _104 = LinkedList::<()>::clear(move _105) -> [return: bb41, unwind: bb37];
    }

    bb37 (cleanup): {
        drop(_8) -> [return: bb38, unwind terminate];
    }

    bb38 (cleanup): {
        resume;
    }

    bb39: {
        goto -> bb24;
    }

    bb40: {
        goto -> bb24;
    }

    bb41: {
        goto -> bb16;
    }
}

const N: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 8_usize;
        return;
    }
}
