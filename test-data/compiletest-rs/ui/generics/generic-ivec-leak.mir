// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: wrapper<std::vec::Vec<i32>>;
    let mut _2: std::vec::Vec<i32>;
    let mut _3: std::boxed::Box<[i32]>;
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: *mut u8;
    let mut _7: std::boxed::Box<[i32; 5]>;
    let mut _8: *const [i32; 5];
    let mut _9: *const ();
    let mut _10: usize;
    let mut _11: usize;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: bool;
    scope 1 {
        debug _w => _1;
    }
    scope 2 {
    }

    bb0: {
        _4 = SizeOf([i32; 5]);
        _5 = AlignOf([i32; 5]);
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> bb1;
    }

    bb1: {
        _7 = ShallowInitBox(move _6, [i32; 5]);
        _8 = (((_7.0: std::ptr::Unique<[i32; 5]>).0: std::ptr::NonNull<[i32; 5]>).0: *const [i32; 5]);
        _9 = _8 as *const () (PtrToPtr);
        _10 = _9 as usize (Transmute);
        _11 = AlignOf(i32);
        _12 = Sub(_11, const 1_usize);
        _13 = BitAnd(_10, _12);
        _14 = Eq(_13, const 0_usize);
        assert(_14, "misaligned pointer dereference: address must be a multiple of {} but is {}", _11, _10) -> [success: bb4, unwind unreachable];
    }

    bb2: {
        _1 = wrapper::<Vec<i32>>::wrapped(move _2);
        drop(_1) -> bb3;
    }

    bb3: {
        return;
    }

    bb4: {
        (*_8) = [const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32];
        _3 = move _7 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _2 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _3) -> bb2;
    }
}

fn wrapper::wrapped(_1: T) -> wrapper<T> {
    let mut _0: wrapper<T>;

    bb0: {
        _0 = wrapper::<T>::wrapped(move _1);
        return;
    }
}

// MIR FOR CTFE
fn wrapper::wrapped(_1: T) -> wrapper<T> {
    let mut _0: wrapper<T>;

    bb0: {
        _0 = wrapper::<T>::wrapped(move _1);
        return;
    }
}
