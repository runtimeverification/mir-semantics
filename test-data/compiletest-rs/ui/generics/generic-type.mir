// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: Pair<isize>;
    let mut _2: (&isize, &isize);
    let mut _3: &isize;
    let mut _4: &isize;
    let _5: isize;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: isize;
    let mut _11: isize;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&isize, &isize);
    let mut _16: &isize;
    let mut _17: &isize;
    let _18: isize;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: isize;
    let mut _24: isize;
    let _26: !;
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _6: &isize;
        let _7: &isize;
        let _19: &isize;
        let _20: &isize;
        scope 2 {
            debug left_val => _6;
            debug right_val => _7;
            let _12: core::panicking::AssertKind;
            scope 3 {
                debug kind => _12;
            }
        }
        scope 4 {
            debug left_val => _19;
            debug right_val => _20;
            let _25: core::panicking::AssertKind;
            scope 5 {
                debug kind => _25;
            }
        }
    }

    bb0: {
        _1 = Pair::<isize> { x: const 10_isize, y: const 12_isize };
        _3 = &(_1.0: isize);
        _5 = const 10_isize;
        _4 = &_5;
        _2 = (move _3, move _4);
        _6 = (_2.0: &isize);
        _7 = (_2.1: &isize);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<isize, isize>(move _12, _6, _7, move _14);
    }

    bb2: {
        _16 = &(_1.1: isize);
        _18 = const 12_isize;
        _17 = &_18;
        _15 = (move _16, move _17);
        _19 = (_15.0: &isize);
        _20 = (_15.1: &isize);
        _23 = (*_19);
        _24 = (*_20);
        _22 = Eq(move _23, move _24);
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _25 = core::panicking::AssertKind::Eq;
        _27 = Option::<Arguments<'_>>::None;
        _26 = core::panicking::assert_failed::<isize, isize>(move _25, _19, _20, move _27);
    }

    bb4: {
        return;
    }
}
