// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: option<isize>;
    let mut _2: std::boxed::Box<isize>;
    let mut _3: option<isize>;
    scope 1 {
        debug a => _1;
    }

    bb0: {
        _2 = Box::<isize>::new(const 10_isize) -> bb1;
    }

    bb1: {
        _1 = option::<isize>::some(move _2);
        _3 = option::<isize>::none;
        drop(_1) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        _1 = move _3;
        drop(_1) -> bb4;
    }

    bb3 (cleanup): {
        _1 = move _3;
        drop(_1) -> [return: bb5, unwind terminate];
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        resume;
    }
}

fn option::some(_1: Box<T>) -> option<T> {
    let mut _0: option<T>;

    bb0: {
        _0 = option::<T>::some(move _1);
        return;
    }
}

// MIR FOR CTFE
fn option::some(_1: Box<T>) -> option<T> {
    let mut _0: option<T>;

    bb0: {
        _0 = option::<T>::some(move _1);
        return;
    }
}
