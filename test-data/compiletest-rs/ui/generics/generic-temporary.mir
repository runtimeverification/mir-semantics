// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn mk() -> isize {
    let mut _0: isize;

    bb0: {
        _0 = const 1_isize;
        return;
    }
}

fn chk(_1: isize) -> () {
    debug a => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 2];
    let _6: [&str; 2];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &isize;
    let mut _12: (&isize, &isize);
    let mut _13: &isize;
    let mut _14: &isize;
    let _15: isize;
    let _16: &isize;
    let _17: &isize;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: isize;
    let mut _21: isize;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _16;
        debug right_val => _17;
        let _22: core::panicking::AssertKind;
        scope 2 {
            debug kind => _22;
        }
    }

    bb0: {
        _6 = [const "", const "\n"];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _11 = &_1;
        _10 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_11) -> bb1;
    }

    bb1: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb2;
    }

    bb2: {
        _2 = _print(move _3) -> bb3;
    }

    bb3: {
        _13 = &_1;
        _15 = const 1_isize;
        _14 = &_15;
        _12 = (move _13, move _14);
        _16 = (_12.0: &isize);
        _17 = (_12.1: &isize);
        _20 = (*_16);
        _21 = (*_17);
        _19 = Eq(move _20, move _21);
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<isize, isize>(move _22, _16, _17, move _24);
    }

    bb5: {
        return;
    }
}

fn apply(_1: fn() -> T, _2: fn(T)) -> () {
    debug produce => _1;
    debug consume => _2;
    let mut _0: ();
    let _3: ();
    let mut _4: T;

    bb0: {
        _4 = _1() -> bb1;
    }

    bb1: {
        _3 = _2(move _4) -> bb2;
    }

    bb2: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: fn() -> isize;
    let _3: ();
    scope 1 {
        debug produce => _1;
        let _2: fn(isize);
        scope 2 {
            debug consume => _2;
        }
    }

    bb0: {
        _1 = mk as fn() -> isize (Pointer(ReifyFnPointer));
        _2 = chk as fn(isize) (Pointer(ReifyFnPointer));
        _3 = apply::<isize>(_1, _2) -> bb1;
    }

    bb1: {
        return;
    }
}
