// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: U) -> T {
    debug b => _1;
    let mut _0: T;
    let mut _2: &U;

    bb0: {
        _2 = &_1;
        _0 = <U as bar<T>>::get_bar(move _2) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_1) -> bb2;
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn <impl at ui/generics/issue-2936.rs:16:1: 16:25>::get_bar(_1: &cbar) -> isize {
    debug self => _1;
    let mut _0: isize;

    bb0: {
        _0 = ((*_1).0: isize);
        return;
    }
}

fn cbar(_1: isize) -> cbar {
    debug x => _1;
    let mut _0: cbar;

    bb0: {
        _0 = cbar { x: _1 };
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: isize;
    let mut _2: cbar;
    let mut _3: (&isize, &isize);
    let mut _4: &isize;
    let mut _5: &isize;
    let _6: isize;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: isize;
    let mut _12: isize;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _7: &isize;
        let _8: &isize;
        scope 2 {
            debug left_val => _7;
            debug right_val => _8;
            let _13: core::panicking::AssertKind;
            scope 3 {
                debug kind => _13;
            }
        }
    }

    bb0: {
        _2 = cbar(const 5_isize) -> bb1;
    }

    bb1: {
        _1 = foo::<isize, cbar>(move _2) -> bb2;
    }

    bb2: {
        _4 = &_1;
        _6 = const 5_isize;
        _5 = &_6;
        _3 = (move _4, move _5);
        _7 = (_3.0: &isize);
        _8 = (_3.1: &isize);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<isize, isize>(move _13, _7, _8, move _15);
    }

    bb4: {
        return;
    }
}
