// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f(_1: Box<T>) -> Box<T> {
    debug x => _1;
    let mut _0: std::boxed::Box<T>;

    bb0: {
        _0 = move _1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::boxed::Box<i32>;
    let mut _2: std::boxed::Box<i32>;
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let _6: &[&str; 2];
    let _7: [&str; 2];
    let mut _8: &[core::fmt::rt::Argument<'_>];
    let _9: &[core::fmt::rt::Argument<'_>; 1];
    let _10: [core::fmt::rt::Argument<'_>; 1];
    let mut _11: core::fmt::rt::Argument<'_>;
    let _12: &i32;
    let mut _13: *const i32;
    scope 1 {
        debug x => _1;
        let mut _14: *const ();
        let mut _15: usize;
        let mut _16: usize;
        let mut _17: usize;
        let mut _18: usize;
        let mut _19: bool;
    }

    bb0: {
        _2 = Box::<i32>::new(const 3_i32) -> bb1;
    }

    bb1: {
        _1 = f::<i32>(move _2) -> bb2;
    }

    bb2: {
        _7 = [const "", const "\n"];
        _6 = &_7;
        _5 = _6 as &[&str] (Pointer(Unsize));
        _13 = (((_1.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32);
        _14 = _13 as *const () (PtrToPtr);
        _15 = _14 as usize (Transmute);
        _16 = AlignOf(i32);
        _17 = Sub(_16, const 1_usize);
        _18 = BitAnd(_15, _17);
        _19 = Eq(_18, const 0_usize);
        assert(_19, "misaligned pointer dereference: address must be a multiple of {} but is {}", _16, _15) -> [success: bb9, unwind unreachable];
    }

    bb3: {
        _10 = [move _11];
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        _3 = _print(move _4) -> [return: bb5, unwind: bb7];
    }

    bb5: {
        drop(_1) -> bb6;
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_1) -> [return: bb8, unwind terminate];
    }

    bb8 (cleanup): {
        resume;
    }

    bb9: {
        _12 = &(*_13);
        _11 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_12) -> [return: bb3, unwind: bb7];
    }
}
