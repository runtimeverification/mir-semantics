// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f(_1: Vec<T>) -> T {
    debug x => _1;
    let mut _0: T;
    let mut _2: std::option::Option<T>;
    let mut _3: &mut std::vec::IntoIter<T>;
    let mut _4: std::vec::IntoIter<T>;

    bb0: {
        _4 = <Vec<T> as IntoIterator>::into_iter(move _1) -> bb1;
    }

    bb1: {
        _3 = &mut _4;
        _2 = <std::vec::IntoIter<T> as Iterator>::next(move _3) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _0 = Option::<T>::unwrap(move _2) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        drop(_4) -> bb4;
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_4) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn g(_1: F) -> isize {
    debug act => _1;
    let mut _0: isize;
    let mut _2: F;
    let mut _3: (std::vec::Vec<isize>,);
    let mut _4: std::vec::Vec<isize>;
    let mut _5: std::boxed::Box<[isize]>;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: *mut u8;
    let mut _9: std::boxed::Box<[isize; 3]>;
    let mut _10: bool;
    let mut _11: *const [isize; 3];
    let mut _12: *const ();
    let mut _13: usize;
    let mut _14: usize;
    let mut _15: usize;
    let mut _16: usize;
    let mut _17: bool;
    scope 1 {
    }

    bb0: {
        _10 = const false;
        _10 = const true;
        _2 = move _1;
        _6 = SizeOf([isize; 3]);
        _7 = AlignOf([isize; 3]);
        _8 = alloc::alloc::exchange_malloc(move _6, move _7) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _9 = ShallowInitBox(move _8, [isize; 3]);
        _11 = (((_9.0: std::ptr::Unique<[isize; 3]>).0: std::ptr::NonNull<[isize; 3]>).0: *const [isize; 3]);
        _12 = _11 as *const () (PtrToPtr);
        _13 = _12 as usize (Transmute);
        _14 = AlignOf(isize);
        _15 = Sub(_14, const 1_usize);
        _16 = BitAnd(_13, _15);
        _17 = Eq(_16, const 0_usize);
        assert(_17, "misaligned pointer dereference: address must be a multiple of {} but is {}", _14, _13) -> [success: bb7, unwind unreachable];
    }

    bb2: {
        _3 = (move _4,);
        _10 = const false;
        _0 = <F as FnOnce<(Vec<isize>,)>>::call_once(move _2, move _3) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _10 = const false;
        return;
    }

    bb4 (cleanup): {
        resume;
    }

    bb5 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate];
    }

    bb6 (cleanup): {
        switchInt(_10) -> [0: bb4, otherwise: bb5];
    }

    bb7: {
        (*_11) = [const 1_isize, const 2_isize, const 3_isize];
        _5 = move _9 as std::boxed::Box<[isize]> (Pointer(Unsize));
        _4 = slice::<impl [isize]>::into_vec::<std::alloc::Global>(move _5) -> [return: bb2, unwind: bb6];
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&isize, &isize);
    let mut _2: &isize;
    let _3: isize;
    let mut _4: &isize;
    let _5: isize;
    let _6: &isize;
    let _7: &isize;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: isize;
    let mut _11: isize;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&std::string::String, &std::string::String);
    let mut _16: &std::string::String;
    let _17: std::string::String;
    let mut _18: std::vec::Vec<std::string::String>;
    let mut _19: std::boxed::Box<[std::string::String]>;
    let mut _20: std::boxed::Box<[std::string::String; 3]>;
    let mut _21: usize;
    let mut _22: usize;
    let mut _23: *mut u8;
    let mut _24: std::boxed::Box<[std::string::String; 3]>;
    let mut _25: std::string::String;
    let _26: &str;
    let mut _27: std::string::String;
    let _28: &str;
    let mut _29: std::string::String;
    let _30: &str;
    let mut _31: &std::string::String;
    let _32: std::string::String;
    let _33: &str;
    let mut _36: bool;
    let mut _37: bool;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _41: &mut std::boxed::Box<[std::string::String; 3]>;
    let mut _42: ();
    let mut _43: *const [std::string::String; 3];
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }
    scope 3 {
        debug f1 => f::<String>;
        let _34: &std::string::String;
        let _35: &std::string::String;
        let mut _44: *const ();
        let mut _45: usize;
        let mut _46: usize;
        let mut _47: usize;
        let mut _48: usize;
        let mut _49: bool;
        scope 4 {
        }
        scope 5 {
            debug left_val => _34;
            debug right_val => _35;
            let _38: core::panicking::AssertKind;
            scope 6 {
                debug kind => _38;
            }
        }
    }

    bb0: {
        _3 = g::<fn(Vec<isize>) -> isize {f::<isize>}>(f::<isize>) -> bb1;
    }

    bb1: {
        _2 = &_3;
        _5 = const 1_isize;
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &isize);
        _7 = (_1.1: &isize);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<isize, isize>(move _12, _6, _7, move _14);
    }

    bb3: {
        _21 = SizeOf([std::string::String; 3]);
        _22 = AlignOf([std::string::String; 3]);
        _23 = alloc::alloc::exchange_malloc(move _21, move _22) -> bb4;
    }

    bb4: {
        _24 = ShallowInitBox(move _23, [std::string::String; 3]);
        _26 = const "x";
        _25 = <str as ToString>::to_string(_26) -> [return: bb5, unwind: bb21];
    }

    bb5: {
        _28 = const "y";
        _27 = <str as ToString>::to_string(_28) -> [return: bb6, unwind: bb19];
    }

    bb6: {
        _30 = const "z";
        _29 = <str as ToString>::to_string(_30) -> [return: bb7, unwind: bb18];
    }

    bb7: {
        _43 = (((_24.0: std::ptr::Unique<[std::string::String; 3]>).0: std::ptr::NonNull<[std::string::String; 3]>).0: *const [std::string::String; 3]);
        _44 = _43 as *const () (PtrToPtr);
        _45 = _44 as usize (Transmute);
        _46 = AlignOf(std::string::String);
        _47 = Sub(_46, const 1_usize);
        _48 = BitAnd(_45, _47);
        _49 = Eq(_48, const 0_usize);
        assert(_49, "misaligned pointer dereference: address must be a multiple of {} but is {}", _46, _45) -> [success: bb22, unwind unreachable];
    }

    bb8: {
        _17 = f::<String>(move _18) -> bb9;
    }

    bb9: {
        _16 = &_17;
        _33 = const "x";
        _32 = <str as ToString>::to_string(_33) -> [return: bb10, unwind: bb17];
    }

    bb10: {
        _31 = &_32;
        _15 = (move _16, move _31);
        _34 = (_15.0: &std::string::String);
        _35 = (_15.1: &std::string::String);
        _37 = <String as PartialEq>::eq(_34, _35) -> [return: bb11, unwind: bb16];
    }

    bb11: {
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<String, String>(move _38, _34, _35, move _40) -> bb16;
    }

    bb13: {
        drop(_32) -> [return: bb14, unwind: bb17];
    }

    bb14: {
        drop(_17) -> bb15;
    }

    bb15: {
        return;
    }

    bb16 (cleanup): {
        drop(_32) -> [return: bb17, unwind terminate];
    }

    bb17 (cleanup): {
        drop(_17) -> [return: bb20, unwind terminate];
    }

    bb18 (cleanup): {
        drop(_27) -> [return: bb19, unwind terminate];
    }

    bb19 (cleanup): {
        drop(_25) -> [return: bb21, unwind terminate];
    }

    bb20 (cleanup): {
        resume;
    }

    bb21 (cleanup): {
        _41 = &mut _24;
        _42 = <Box<[String; 3]> as Drop>::drop(move _41) -> [return: bb23, unwind terminate];
    }

    bb22: {
        (*_43) = [move _25, move _27, move _29];
        _20 = move _24;
        _19 = move _20 as std::boxed::Box<[std::string::String]> (Pointer(Unsize));
        _18 = slice::<impl [String]>::into_vec::<std::alloc::Global>(move _19) -> bb8;
    }

    bb23 (cleanup): {
        goto -> bb20;
    }
}
