// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: list<isize>;
    let mut _2: std::boxed::Box<isize>;
    let mut _3: std::boxed::Box<list<isize>>;
    let mut _4: list<isize>;
    let mut _5: std::boxed::Box<isize>;
    let mut _6: std::boxed::Box<list<isize>>;
    let mut _7: list<isize>;
    let mut _8: std::boxed::Box<isize>;
    let mut _9: std::boxed::Box<list<isize>>;
    let mut _10: list<isize>;
    scope 1 {
        debug _a => _1;
    }

    bb0: {
        _2 = Box::<isize>::new(const 10_isize) -> bb1;
    }

    bb1: {
        _5 = Box::<isize>::new(const 12_isize) -> [return: bb2, unwind: bb10];
    }

    bb2: {
        _8 = Box::<isize>::new(const 13_isize) -> [return: bb3, unwind: bb9];
    }

    bb3: {
        _10 = list::<isize>::nil;
        _9 = Box::<list<isize>>::new(move _10) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _7 = list::<isize>::cons(move _8, move _9);
        _6 = Box::<list<isize>>::new(move _7) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        _4 = list::<isize>::cons(move _5, move _6);
        _3 = Box::<list<isize>>::new(move _4) -> [return: bb6, unwind: bb10];
    }

    bb6: {
        _1 = list::<isize>::cons(move _2, move _3);
        drop(_1) -> bb7;
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_8) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        drop(_5) -> [return: bb10, unwind terminate];
    }

    bb10 (cleanup): {
        drop(_2) -> [return: bb11, unwind terminate];
    }

    bb11 (cleanup): {
        resume;
    }
}

fn list::cons(_1: Box<T>, _2: Box<list<T>>) -> list<T> {
    let mut _0: list<T>;

    bb0: {
        _0 = list::<T>::cons(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn list::cons(_1: Box<T>, _2: Box<list<T>>) -> list<T> {
    let mut _0: list<T>;

    bb0: {
        _0 = list::<T>::cons(move _1, move _2);
        return;
    }
}
