// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn altfoo(_1: foo<T>) -> () {
    debug f => _1;
    let mut _0: ();
    let mut _2: bool;
    let _4: ();
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let _7: &[&str; 1];
    let _8: [&str; 1];
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: !;
    scope 1 {
        debug hit => _2;
        let _3: T;
        scope 2 {
            debug _x => _3;
        }
    }

    bb0: {
        _2 = const false;
        _3 = move ((_1 as arm).0: T);
        _8 = [const "in arm\n"];
        _7 = &_8;
        _6 = _7 as &[&str] (Pointer(Unsize));
        _5 = Arguments::<'_>::new_const(move _6) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _4 = _print(move _5) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _2 = const true;
        drop(_3) -> bb3;
    }

    bb3: {
        _10 = _2;
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _11 = core::panicking::panic(const "assertion failed: (hit)");
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_3) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: foo<isize>;

    bb0: {
        _2 = foo::<isize>::arm(const 10_isize);
        _1 = altfoo::<isize>(move _2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn foo::arm(_1: T) -> foo<T> {
    let mut _0: foo<T>;

    bb0: {
        _0 = foo::<T>::arm(move _1);
        return;
    }
}

// MIR FOR CTFE
fn foo::arm(_1: T) -> foo<T> {
    let mut _0: foo<T>;

    bb0: {
        _0 = foo::<T>::arm(move _1);
        return;
    }
}
