// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn reclift(_1: T) -> Recbox<T> {
    debug t => _1;
    let mut _0: Recbox<T>;
    let mut _2: std::boxed::Box<T>;

    bb0: {
        _2 = Box::<T>::new(move _1) -> bb1;
    }

    bb1: {
        _0 = Recbox::<T> { x: move _2 };
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: isize;
    let mut _3: isize;
    let mut _4: (&isize, &isize);
    let mut _5: &isize;
    let mut _6: &isize;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: isize;
    let mut _12: isize;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: std::boxed::Box<isize>;
    let mut _17: *const isize;
    scope 1 {
        debug foo => _1;
        let _2: Recbox<isize>;
        scope 2 {
            debug rbfoo => _2;
            let _7: &isize;
            let _8: &isize;
            let mut _18: *const ();
            let mut _19: usize;
            let mut _20: usize;
            let mut _21: usize;
            let mut _22: usize;
            let mut _23: bool;
            scope 3 {
                debug left_val => _7;
                debug right_val => _8;
                let _13: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _13;
                }
            }
        }
    }

    bb0: {
        _1 = const 17_isize;
        _3 = _1;
        _2 = reclift::<isize>(move _3) -> bb1;
    }

    bb1: {
        _16 = deref_copy (_2.0: std::boxed::Box<isize>);
        _17 = (((_16.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize);
        _18 = _17 as *const () (PtrToPtr);
        _19 = _18 as usize (Transmute);
        _20 = AlignOf(isize);
        _21 = Sub(_20, const 1_usize);
        _22 = BitAnd(_19, _21);
        _23 = Eq(_22, const 0_usize);
        assert(_23, "misaligned pointer dereference: address must be a multiple of {} but is {}", _20, _19) -> [success: bb7, unwind unreachable];
    }

    bb2: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<isize, isize>(move _13, _7, _8, move _15) -> bb5;
    }

    bb3: {
        drop(_2) -> bb4;
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        resume;
    }

    bb7: {
        _5 = &(*_17);
        _6 = &_1;
        _4 = (move _5, move _6);
        _7 = (_4.0: &isize);
        _8 = (_4.1: &isize);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb3, otherwise: bb2];
    }
}
