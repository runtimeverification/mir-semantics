// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f0(_1: usize) -> usize {
    debug x => _1;
    let mut _0: usize;
    let mut _2: std::ops::Range<i32>;
    let mut _3: std::ops::Range<i32>;
    let mut _4: std::ops::Range<i32>;
    let mut _5: std::option::Option<i32>;
    let mut _6: &mut std::ops::Range<i32>;
    let mut _7: isize;
    let mut _8: bool;
    let mut _9: usize;
    scope 1 {
        debug iter => _4;
    }

    bb0: {
        _3 = std::ops::Range::<i32> { start: const 0_i32, end: const 1000_i32 };
        _2 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _3) -> bb1;
    }

    bb1: {
        _4 = move _2;
        goto -> bb2;
    }

    bb2: {
        _6 = &mut _4;
        _5 = <std::ops::Range<i32> as Iterator>::next(_6) -> bb3;
    }

    bb3: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        _1 = Mul(_1, const 123_usize);
        _8 = Eq(const 99_usize, const 0_usize);
        assert(!move _8, "attempt to calculate the remainder of `{}` with a divisor of zero", _1) -> bb7;
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _9 = _1;
        _0 = Add(move _9, const 321_usize);
        return;
    }

    bb7: {
        _1 = Rem(_1, const 99_usize);
        goto -> bb2;
    }
}

fn f1(_1: usize) -> usize {
    debug x => _1;
    let mut _0: usize;
    let mut _2: usize;

    bb0: {
        _2 = f0::<(u8, T)>(_1) -> bb1;
    }

    bb1: {
        _0 = f0::<(i8, T)>(move _2) -> bb2;
    }

    bb2: {
        return;
    }
}

fn f2(_1: usize) -> usize {
    debug x => _1;
    let mut _0: usize;
    let mut _2: usize;

    bb0: {
        _2 = f1::<(u8, T)>(_1) -> bb1;
    }

    bb1: {
        _0 = f1::<(i8, T)>(move _2) -> bb2;
    }

    bb2: {
        return;
    }
}

fn f3(_1: usize) -> usize {
    debug x => _1;
    let mut _0: usize;
    let mut _2: usize;

    bb0: {
        _2 = f2::<(u8, T)>(_1) -> bb1;
    }

    bb1: {
        _0 = f2::<(i8, T)>(move _2) -> bb2;
    }

    bb2: {
        return;
    }
}

fn f4(_1: usize) -> usize {
    debug x => _1;
    let mut _0: usize;
    let mut _2: usize;

    bb0: {
        _2 = f3::<(u8, T)>(_1) -> bb1;
    }

    bb1: {
        _0 = f3::<(i8, T)>(move _2) -> bb2;
    }

    bb2: {
        return;
    }
}

fn f5(_1: usize) -> usize {
    debug x => _1;
    let mut _0: usize;
    let mut _2: usize;

    bb0: {
        _2 = f4::<(u8, T)>(_1) -> bb1;
    }

    bb1: {
        _0 = f4::<(i8, T)>(move _2) -> bb2;
    }

    bb2: {
        return;
    }
}

fn f6(_1: usize) -> usize {
    debug x => _1;
    let mut _0: usize;
    let mut _2: usize;

    bb0: {
        _2 = f5::<(u8, T)>(_1) -> bb1;
    }

    bb1: {
        _0 = f5::<(i8, T)>(move _2) -> bb2;
    }

    bb2: {
        return;
    }
}

fn f7(_1: usize) -> usize {
    debug x => _1;
    let mut _0: usize;
    let mut _2: usize;

    bb0: {
        _2 = f6::<(u8, T)>(_1) -> bb1;
    }

    bb1: {
        _0 = f6::<(i8, T)>(move _2) -> bb2;
    }

    bb2: {
        return;
    }
}

fn f8(_1: usize) -> usize {
    debug x => _1;
    let mut _0: usize;
    let mut _2: usize;

    bb0: {
        _2 = f7::<(u8, T)>(_1) -> bb1;
    }

    bb1: {
        _0 = f7::<(i8, T)>(move _2) -> bb2;
    }

    bb2: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: usize;
    let mut _2: (&usize, &usize);
    let mut _3: &usize;
    let mut _4: &usize;
    let _5: usize;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: usize;
    let mut _11: usize;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug y => _1;
        let _6: &usize;
        let _7: &usize;
        scope 2 {
            debug left_val => _6;
            debug right_val => _7;
            let _12: core::panicking::AssertKind;
            scope 3 {
                debug kind => _12;
            }
        }
    }

    bb0: {
        _1 = f8::<()>(const 1_usize) -> bb1;
    }

    bb1: {
        _3 = &_1;
        _5 = const 348_usize;
        _4 = &_5;
        _2 = (move _3, move _4);
        _6 = (_2.0: &usize);
        _7 = (_2.1: &usize);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<usize, usize>(move _12, _6, _7, move _14);
    }

    bb3: {
        return;
    }
}
