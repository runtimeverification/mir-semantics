// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: X<isize>;
    let _2: ();
    scope 1 {
        debug x => _1;
    }

    bb0: {
        _1 = X::<isize> { a: const 12345678_isize, b: const 9_u8, c: const true, d: const 10_u8, e: const 11_u16, f: const 12_u8, g: const 13_u8 };
        _2 = bar::<isize>(move _1) -> bb1;
    }

    bb1: {
        return;
    }
}

fn bar(_1: X<T>) -> () {
    debug x => _1;
    let mut _0: ();
    let mut _2: (&u8, &u8);
    let mut _3: &u8;
    let mut _4: &u8;
    let _5: u8;
    let _6: &u8;
    let _7: &u8;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: u8;
    let mut _11: u8;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&bool, &bool);
    let mut _16: &bool;
    let mut _17: &bool;
    let _18: bool;
    let _19: &bool;
    let _20: &bool;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: bool;
    let _26: !;
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _28: (&u8, &u8);
    let mut _29: &u8;
    let mut _30: &u8;
    let _31: u8;
    let _32: &u8;
    let _33: &u8;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: u8;
    let mut _37: u8;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _41: (&u16, &u16);
    let mut _42: &u16;
    let mut _43: &u16;
    let _44: u16;
    let _45: &u16;
    let _46: &u16;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: u16;
    let mut _50: u16;
    let _52: !;
    let mut _53: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _54: (&u8, &u8);
    let mut _55: &u8;
    let mut _56: &u8;
    let _57: u8;
    let _58: &u8;
    let _59: &u8;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: u8;
    let mut _63: u8;
    let _65: !;
    let mut _66: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _67: (&u8, &u8);
    let mut _68: &u8;
    let mut _69: &u8;
    let _70: u8;
    let _71: &u8;
    let _72: &u8;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: u8;
    let mut _76: u8;
    let _78: !;
    let mut _79: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }
    scope 3 {
        debug left_val => _19;
        debug right_val => _20;
        let _25: core::panicking::AssertKind;
        scope 4 {
            debug kind => _25;
        }
    }
    scope 5 {
        debug left_val => _32;
        debug right_val => _33;
        let _38: core::panicking::AssertKind;
        scope 6 {
            debug kind => _38;
        }
    }
    scope 7 {
        debug left_val => _45;
        debug right_val => _46;
        let _51: core::panicking::AssertKind;
        scope 8 {
            debug kind => _51;
        }
    }
    scope 9 {
        debug left_val => _58;
        debug right_val => _59;
        let _64: core::panicking::AssertKind;
        scope 10 {
            debug kind => _64;
        }
    }
    scope 11 {
        debug left_val => _71;
        debug right_val => _72;
        let _77: core::panicking::AssertKind;
        scope 12 {
            debug kind => _77;
        }
    }

    bb0: {
        _3 = &(_1.1: u8);
        _5 = const 9_u8;
        _4 = &_5;
        _2 = (move _3, move _4);
        _6 = (_2.0: &u8);
        _7 = (_2.1: &u8);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<u8, u8>(move _12, _6, _7, move _14) -> bb14;
    }

    bb2: {
        _16 = &(_1.2: bool);
        _18 = const true;
        _17 = &_18;
        _15 = (move _16, move _17);
        _19 = (_15.0: &bool);
        _20 = (_15.1: &bool);
        _23 = (*_19);
        _24 = (*_20);
        _22 = Eq(move _23, move _24);
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _25 = core::panicking::AssertKind::Eq;
        _27 = Option::<Arguments<'_>>::None;
        _26 = core::panicking::assert_failed::<bool, bool>(move _25, _19, _20, move _27) -> bb14;
    }

    bb4: {
        _29 = &(_1.3: u8);
        _31 = const 10_u8;
        _30 = &_31;
        _28 = (move _29, move _30);
        _32 = (_28.0: &u8);
        _33 = (_28.1: &u8);
        _36 = (*_32);
        _37 = (*_33);
        _35 = Eq(move _36, move _37);
        _34 = Not(move _35);
        switchInt(move _34) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<u8, u8>(move _38, _32, _33, move _40) -> bb14;
    }

    bb6: {
        _42 = &(_1.4: u16);
        _44 = const 11_u16;
        _43 = &_44;
        _41 = (move _42, move _43);
        _45 = (_41.0: &u16);
        _46 = (_41.1: &u16);
        _49 = (*_45);
        _50 = (*_46);
        _48 = Eq(move _49, move _50);
        _47 = Not(move _48);
        switchInt(move _47) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _51 = core::panicking::AssertKind::Eq;
        _53 = Option::<Arguments<'_>>::None;
        _52 = core::panicking::assert_failed::<u16, u16>(move _51, _45, _46, move _53) -> bb14;
    }

    bb8: {
        _55 = &(_1.5: u8);
        _57 = const 12_u8;
        _56 = &_57;
        _54 = (move _55, move _56);
        _58 = (_54.0: &u8);
        _59 = (_54.1: &u8);
        _62 = (*_58);
        _63 = (*_59);
        _61 = Eq(move _62, move _63);
        _60 = Not(move _61);
        switchInt(move _60) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _64 = core::panicking::AssertKind::Eq;
        _66 = Option::<Arguments<'_>>::None;
        _65 = core::panicking::assert_failed::<u8, u8>(move _64, _58, _59, move _66) -> bb14;
    }

    bb10: {
        _68 = &(_1.6: u8);
        _70 = const 13_u8;
        _69 = &_70;
        _67 = (move _68, move _69);
        _71 = (_67.0: &u8);
        _72 = (_67.1: &u8);
        _75 = (*_71);
        _76 = (*_72);
        _74 = Eq(move _75, move _76);
        _73 = Not(move _74);
        switchInt(move _73) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _77 = core::panicking::AssertKind::Eq;
        _79 = Option::<Arguments<'_>>::None;
        _78 = core::panicking::assert_failed::<u8, u8>(move _77, _71, _72, move _79) -> bb14;
    }

    bb12: {
        drop(_1) -> bb13;
    }

    bb13: {
        return;
    }

    bb14 (cleanup): {
        drop(_1) -> [return: bb15, unwind terminate];
    }

    bb15 (cleanup): {
        resume;
    }
}
