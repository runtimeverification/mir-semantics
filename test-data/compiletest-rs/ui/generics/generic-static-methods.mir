// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/generics/generic-static-methods.rs:9:1: 9:32>::map_(_1: &Vec<T>, _2: F) -> Vec<U> {
    debug x => _1;
    debug f => _2;
    let mut _0: std::vec::Vec<U>;
    let mut _3: std::vec::Vec<U>;
    let mut _4: std::slice::Iter<'_, T>;
    let mut _6: std::option::Option<&T>;
    let mut _7: &mut std::slice::Iter<'_, T>;
    let mut _8: isize;
    let _10: ();
    let mut _11: &mut std::vec::Vec<U>;
    let mut _12: U;
    let mut _13: &mut F;
    let mut _14: (&T,);
    scope 1 {
        debug r => _3;
        let mut _5: std::slice::Iter<'_, T>;
        scope 2 {
            debug iter => _5;
            let _9: &T;
            scope 3 {
                debug elt => _9;
            }
        }
    }

    bb0: {
        _3 = Vec::<U>::new() -> [return: bb1, unwind: bb11];
    }

    bb1: {
        _4 = <&Vec<T> as IntoIterator>::into_iter(_1) -> [return: bb2, unwind: bb10];
    }

    bb2: {
        _5 = move _4;
        goto -> bb3;
    }

    bb3: {
        _7 = &mut _5;
        _6 = <std::slice::Iter<'_, T> as Iterator>::next(_7) -> [return: bb4, unwind: bb10];
    }

    bb4: {
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        _9 = ((_6 as Some).0: &T);
        _11 = &mut _3;
        _13 = &mut _2;
        _14 = (_9,);
        _12 = <F as FnMut<(&T,)>>::call_mut(move _13, move _14) -> [return: bb8, unwind: bb10];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _0 = move _3;
        drop(_2) -> bb9;
    }

    bb8: {
        _10 = Vec::<U>::push(move _11, move _12) -> [return: bb13, unwind: bb10];
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_3) -> [return: bb11, unwind terminate];
    }

    bb11 (cleanup): {
        drop(_2) -> [return: bb12, unwind terminate];
    }

    bb12 (cleanup): {
        resume;
    }

    bb13: {
        goto -> bb3;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&std::vec::Vec<i32>, &[i32; 3]);
    let mut _2: &std::vec::Vec<i32>;
    let _3: std::vec::Vec<i32>;
    let _4: &std::vec::Vec<i32>;
    let _5: std::vec::Vec<i32>;
    let mut _6: std::boxed::Box<[i32]>;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: *mut u8;
    let mut _10: std::boxed::Box<[i32; 3]>;
    let mut _11: &[i32; 3];
    let _12: [i32; 3];
    let _13: &std::vec::Vec<i32>;
    let _14: &[i32; 3];
    let mut _15: bool;
    let mut _16: bool;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _20: *const [i32; 3];
    let mut _21: *const ();
    let mut _22: usize;
    let mut _23: usize;
    let mut _24: usize;
    let mut _25: usize;
    let mut _26: bool;
    scope 1 {
    }
    scope 2 {
        debug left_val => _13;
        debug right_val => _14;
        let _17: core::panicking::AssertKind;
        scope 3 {
            debug kind => _17;
        }
    }

    bb0: {
        _7 = SizeOf([i32; 3]);
        _8 = AlignOf([i32; 3]);
        _9 = alloc::alloc::exchange_malloc(move _7, move _8) -> bb1;
    }

    bb1: {
        _10 = ShallowInitBox(move _9, [i32; 3]);
        _20 = (((_10.0: std::ptr::Unique<[i32; 3]>).0: std::ptr::NonNull<[i32; 3]>).0: *const [i32; 3]);
        _21 = _20 as *const () (PtrToPtr);
        _22 = _21 as usize (Transmute);
        _23 = AlignOf(i32);
        _24 = Sub(_23, const 1_usize);
        _25 = BitAnd(_22, _24);
        _26 = Eq(_25, const 0_usize);
        assert(_26, "misaligned pointer dereference: address must be a multiple of {} but is {}", _23, _22) -> [success: bb12, unwind unreachable];
    }

    bb2: {
        _4 = &_5;
        _3 = <Vec<i32> as vec_utils<i32>>::map_::<i32, [closure@ui/generics/generic-static-methods.rs:20:46: 20:50]>(_4, const ZeroSized: [closure@ui/generics/generic-static-methods.rs:20:46: 20:50]) -> [return: bb3, unwind: bb10];
    }

    bb3: {
        _2 = &_3;
        _12 = [const 2_i32, const 3_i32, const 4_i32];
        _11 = &_12;
        _1 = (move _2, move _11);
        _13 = (_1.0: &std::vec::Vec<i32>);
        _14 = (_1.1: &[i32; 3]);
        _16 = <Vec<i32> as PartialEq<[i32; 3]>>::eq(_13, _14) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        _15 = Not(move _16);
        switchInt(move _15) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<Vec<i32>, [i32; 3]>(move _17, _13, _14, move _19) -> bb9;
    }

    bb6: {
        drop(_3) -> [return: bb7, unwind: bb10];
    }

    bb7: {
        drop(_5) -> bb8;
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_3) -> [return: bb10, unwind terminate];
    }

    bb10 (cleanup): {
        drop(_5) -> [return: bb11, unwind terminate];
    }

    bb11 (cleanup): {
        resume;
    }

    bb12: {
        (*_20) = [const 1_i32, const 2_i32, const 3_i32];
        _6 = move _10 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _5 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _6) -> bb2;
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/generics/generic-static-methods.rs:20:46: 20:50], _2: &i32) -> i32 {
    let mut _0: i32;
    let _3: i32;
    scope 1 {
        debug x => _3;
    }

    bb0: {
        _3 = (*_2);
        _0 = Add(_3, const 1_i32);
        return;
    }
}
