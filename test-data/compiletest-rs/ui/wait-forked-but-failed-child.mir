// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn find_zombies() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _3: std::result::Result<std::process::Output, std::io::Error>;
    let mut _4: &mut std::process::Command;
    let mut _5: &mut std::process::Command;
    let mut _6: &mut std::process::Command;
    let mut _7: std::process::Command;
    let mut _8: &[&str; 3];
    let _9: [&str; 3];
    let _10: &str;
    let _11: &str;
    let mut _13: &[u8];
    let _14: &[u8];
    let _15: &std::vec::Vec<u8>;
    let mut _16: std::iter::Enumerate<std::str::Split<'_, char>>;
    let mut _17: std::iter::Enumerate<std::str::Split<'_, char>>;
    let mut _18: std::str::Split<'_, char>;
    let mut _19: &str;
    let _20: &str;
    let mut _21: &std::borrow::Cow<'_, str>;
    let mut _23: std::option::Option<(usize, &str)>;
    let mut _24: &mut std::iter::Enumerate<std::str::Split<'_, char>>;
    let mut _25: isize;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: usize;
    let mut _34: &str;
    let mut _35: bool;
    let mut _36: i32;
    let mut _37: i32;
    let mut _38: std::option::Option<i32>;
    let mut _39: std::result::Result<i32, std::num::ParseIntError>;
    let mut _40: &str;
    let _41: &str;
    let mut _42: std::option::Option<&str>;
    let mut _43: &mut std::iter::Filter<std::str::Split<'_, char>, [closure@ui/wait-forked-but-failed-child.rs:39:45: 39:48]>;
    let mut _44: std::iter::Filter<std::str::Split<'_, char>, [closure@ui/wait-forked-but-failed-child.rs:39:45: 39:48]>;
    let mut _45: std::str::Split<'_, char>;
    let mut _46: &str;
    let _47: &str;
    let _48: &str;
    let mut _49: bool;
    let mut _50: &str;
    let _51: !;
    let mut _52: std::fmt::Arguments<'_>;
    let mut _53: &[&str];
    let _54: &[&str; 1];
    let _55: [&str; 1];
    let mut _56: &[core::fmt::rt::Argument<'_>];
    let _57: &[core::fmt::rt::Argument<'_>; 1];
    let _58: [core::fmt::rt::Argument<'_>; 1];
    let mut _59: core::fmt::rt::Argument<'_>;
    let _60: &&str;
    scope 1 {
        debug my_pid => _1;
        let _2: std::process::Output;
        scope 3 {
            debug ps_cmd_output => _2;
            let _12: std::borrow::Cow<'_, str>;
            scope 4 {
                debug ps_output => _12;
                let mut _22: std::iter::Enumerate<std::str::Split<'_, char>>;
                scope 5 {
                    debug iter => _22;
                    let _26: usize;
                    let _27: &str;
                    scope 6 {
                        debug line_no => _26;
                        debug line => _27;
                    }
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _1 = getpid() -> bb1;
    }

    bb1: {
        _7 = Command::new::<&str>(const "ps") -> bb2;
    }

    bb2: {
        _6 = &mut _7;
        _10 = const "-o";
        _11 = const "pid,ppid,args";
        _9 = [const "-A", _10, _11];
        _8 = &_9;
        _5 = Command::args::<&[&str; 3], &&str>(move _6, move _8) -> [return: bb3, unwind: bb43];
    }

    bb3: {
        _4 = _5;
        _3 = Command::output(move _4) -> [return: bb4, unwind: bb43];
    }

    bb4: {
        _2 = Result::<Output, std::io::Error>::unwrap(move _3) -> [return: bb5, unwind: bb43];
    }

    bb5: {
        drop(_7) -> [return: bb6, unwind: bb42];
    }

    bb6: {
        _15 = &(_2.1: std::vec::Vec<u8>);
        _14 = <Vec<u8> as Deref>::deref(_15) -> [return: bb7, unwind: bb42];
    }

    bb7: {
        _13 = _14;
        _12 = String::from_utf8_lossy(move _13) -> [return: bb8, unwind: bb42];
    }

    bb8: {
        _21 = &_12;
        _20 = <Cow<'_, str> as Deref>::deref(move _21) -> [return: bb9, unwind: bb41];
    }

    bb9: {
        _19 = _20;
        _18 = core::str::<impl str>::split::<'_, char>(move _19, const '\n') -> [return: bb10, unwind: bb41];
    }

    bb10: {
        _17 = <std::str::Split<'_, char> as Iterator>::enumerate(move _18) -> [return: bb11, unwind: bb41];
    }

    bb11: {
        _16 = <Enumerate<std::str::Split<'_, char>> as IntoIterator>::into_iter(move _17) -> [return: bb12, unwind: bb41];
    }

    bb12: {
        _22 = move _16;
        goto -> bb13;
    }

    bb13: {
        _24 = &mut _22;
        _23 = <Enumerate<std::str::Split<'_, char>> as Iterator>::next(_24) -> [return: bb14, unwind: bb41];
    }

    bb14: {
        _25 = discriminant(_23);
        switchInt(move _25) -> [0: bb17, 1: bb15, otherwise: bb16];
    }

    bb15: {
        _26 = (((_23 as Some).0: (usize, &str)).0: usize);
        _27 = (((_23 as Some).0: (usize, &str)).1: &str);
        _31 = Lt(const 0_usize, _26);
        switchInt(move _31) -> [0: bb24, otherwise: bb25];
    }

    bb16: {
        unreachable;
    }

    bb17: {
        drop(_12) -> [return: bb39, unwind: bb42];
    }

    bb18: {
        _28 = const false;
        goto -> bb20;
    }

    bb19: {
        _50 = _27;
        _49 = core::str::<impl str>::contains::<'_, &str>(move _50, const "defunct") -> [return: bb35, unwind: bb41];
    }

    bb20: {
        switchInt(move _28) -> [0: bb13, otherwise: bb36];
    }

    bb21: {
        _29 = const false;
        goto -> bb23;
    }

    bb22: {
        _36 = _1;
        _46 = _27;
        _45 = core::str::<impl str>::split::<'_, char>(move _46, const ' ') -> [return: bb28, unwind: bb41];
    }

    bb23: {
        switchInt(move _29) -> [0: bb18, otherwise: bb19];
    }

    bb24: {
        _30 = const false;
        goto -> bb26;
    }

    bb25: {
        _34 = _27;
        _33 = core::str::<impl str>::len(move _34) -> [return: bb27, unwind: bb41];
    }

    bb26: {
        switchInt(move _30) -> [0: bb21, otherwise: bb22];
    }

    bb27: {
        _32 = Lt(const 0_usize, move _33);
        _30 = move _32;
        goto -> bb26;
    }

    bb28: {
        _44 = <std::str::Split<'_, char> as Iterator>::filter::<[closure@ui/wait-forked-but-failed-child.rs:39:45: 39:48]>(move _45, const ZeroSized: [closure@ui/wait-forked-but-failed-child.rs:39:45: 39:48]) -> [return: bb29, unwind: bb41];
    }

    bb29: {
        _43 = &mut _44;
        _42 = <Filter<std::str::Split<'_, char>, [closure@ui/wait-forked-but-failed-child.rs:39:45: 39:48]> as Iterator>::nth(move _43, const 1_usize) -> [return: bb30, unwind: bb41];
    }

    bb30: {
        _47 = const "1st column should be PPID";
        _41 = Option::<&str>::expect(move _42, _47) -> [return: bb31, unwind: bb41];
    }

    bb31: {
        _40 = _41;
        _39 = core::str::<impl str>::parse::<i32>(move _40) -> [return: bb32, unwind: bb41];
    }

    bb32: {
        _38 = Result::<i32, ParseIntError>::ok(move _39) -> [return: bb33, unwind: bb41];
    }

    bb33: {
        _48 = const "PPID string into integer";
        _37 = Option::<i32>::expect(move _38, _48) -> [return: bb34, unwind: bb41];
    }

    bb34: {
        _35 = Eq(move _36, move _37);
        _29 = move _35;
        goto -> bb23;
    }

    bb35: {
        _28 = move _49;
        goto -> bb20;
    }

    bb36: {
        _55 = [const "Zombie child "];
        _54 = &_55;
        _53 = _54 as &[&str] (Pointer(Unsize));
        _60 = &_27;
        _59 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_60) -> [return: bb37, unwind: bb41];
    }

    bb37: {
        _58 = [move _59];
        _57 = &_58;
        _56 = _57 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _52 = Arguments::<'_>::new_v1(move _53, move _56) -> [return: bb38, unwind: bb41];
    }

    bb38: {
        _51 = panic_fmt(move _52) -> bb41;
    }

    bb39: {
        drop(_2) -> bb40;
    }

    bb40: {
        return;
    }

    bb41 (cleanup): {
        drop(_12) -> [return: bb42, unwind terminate];
    }

    bb42 (cleanup): {
        drop(_2) -> [return: bb44, unwind terminate];
    }

    bb43 (cleanup): {
        drop(_7) -> [return: bb44, unwind terminate];
    }

    bb44 (cleanup): {
        resume;
    }
}

fn find_zombies::{closure#0}(_1: &mut [closure@ui/wait-forked-but-failed-child.rs:39:45: 39:48], _2: &&str) -> bool {
    debug w => _2;
    let mut _0: bool;
    let mut _3: usize;
    let mut _4: &str;

    bb0: {
        _4 = deref_copy (*_2);
        _3 = core::str::<impl str>::len(_4) -> bb1;
    }

    bb1: {
        _0 = Lt(const 0_usize, move _3);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::string::String;
    let _2: std::string::String;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 1];
    let _6: [&str; 1];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &u8;
    let _12: u8;
    let mut _13: &[core::fmt::rt::Placeholder];
    let _14: &[core::fmt::rt::Placeholder; 1];
    let _15: [core::fmt::rt::Placeholder; 1];
    let mut _16: core::fmt::rt::Placeholder;
    let mut _17: core::fmt::rt::Alignment;
    let mut _18: core::fmt::rt::Count;
    let mut _19: core::fmt::rt::Count;
    let mut _20: core::fmt::rt::UnsafeArg;
    let mut _22: std::iter::Map<std::ops::Range<i32>, [closure@ui/wait-forked-but-failed-child.rs:55:34: 55:37]>;
    let mut _23: std::ops::Range<i32>;
    let mut _24: [closure@ui/wait-forked-but-failed-child.rs:55:34: 55:37];
    let mut _25: &std::string::String;
    let _26: ();
    scope 1 {
        debug too_long => _1;
        let _21: std::vec::Vec<std::result::Result<std::process::Child, std::io::Error>>;
        scope 4 {
            debug _failures => _21;
        }
    }
    scope 2 {
        debug res => _2;
    }
    scope 3 {
    }

    bb0: {
        _6 = [const "/NoSuchCommand"];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _12 = const 0_u8;
        _11 = &_12;
        _10 = core::fmt::rt::Argument::<'_>::new_display::<u8>(_11) -> bb1;
    }

    bb1: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _17 = core::fmt::rt::Alignment::Unknown;
        _18 = core::fmt::rt::Count::Implied;
        _19 = core::fmt::rt::Count::Is(const 300_usize) -> bb2;
    }

    bb2: {
        _16 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _17, const 8_u32, move _18, move _19) -> bb3;
    }

    bb3: {
        _15 = [move _16];
        _14 = &_15;
        _13 = _14 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _20 = core::fmt::rt::UnsafeArg::new() -> bb4;
    }

    bb4: {
        _3 = Arguments::<'_>::new_v1_formatted(move _4, move _7, move _13, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> bb5;
    }

    bb5: {
        _2 = format(move _3) -> bb6;
    }

    bb6: {
        _1 = move _2;
        _23 = std::ops::Range::<i32> { start: const 0_i32, end: const 100_i32 };
        _25 = &_1;
        _24 = [closure@ui/wait-forked-but-failed-child.rs:55:34: 55:37] { too_long: move _25 };
        _22 = <std::ops::Range<i32> as Iterator>::map::<Result<Child, std::io::Error>, [closure@ui/wait-forked-but-failed-child.rs:55:34: 55:37]>(move _23, move _24) -> [return: bb7, unwind: bb13];
    }

    bb7: {
        _21 = <Map<std::ops::Range<i32>, [closure@ui/wait-forked-but-failed-child.rs:55:34: 55:37]> as Iterator>::collect::<Vec<Result<Child, std::io::Error>>>(move _22) -> [return: bb8, unwind: bb13];
    }

    bb8: {
        _26 = find_zombies() -> [return: bb9, unwind: bb12];
    }

    bb9: {
        drop(_21) -> [return: bb10, unwind: bb13];
    }

    bb10: {
        drop(_1) -> bb11;
    }

    bb11: {
        return;
    }

    bb12 (cleanup): {
        drop(_21) -> [return: bb13, unwind terminate];
    }

    bb13 (cleanup): {
        drop(_1) -> [return: bb14, unwind terminate];
    }

    bb14 (cleanup): {
        resume;
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/wait-forked-but-failed-child.rs:55:34: 55:37], _2: i32) -> Result<Child, std::io::Error> {
    debug too_long => (*((*_1).0: &std::string::String));
    let mut _0: std::result::Result<std::process::Child, std::io::Error>;
    let mut _3: std::process::Command;
    let mut _5: &mut std::process::Command;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: &std::result::Result<std::process::Child, std::io::Error>;
    let _9: !;
    let mut _10: std::fmt::Arguments<'_>;
    let mut _11: &[&str];
    let _12: &[&str; 1];
    let _13: [&str; 1];
    let mut _14: &[core::fmt::rt::Argument<'_>];
    let _15: &[core::fmt::rt::Argument<'_>; 1];
    let _16: [core::fmt::rt::Argument<'_>; 1];
    let mut _17: core::fmt::rt::Argument<'_>;
    let _18: &std::process::Command;
    let mut _19: &std::string::String;
    scope 1 {
        debug cmd => _3;
        let _4: std::result::Result<std::process::Child, std::io::Error>;
        scope 2 {
            debug failed => _4;
        }
    }

    bb0: {
        _19 = deref_copy ((*_1).0: &std::string::String);
        _3 = Command::new::<&String>(_19) -> bb1;
    }

    bb1: {
        _5 = &mut _3;
        _4 = Command::spawn(move _5) -> [return: bb2, unwind: bb10];
    }

    bb2: {
        _8 = &_4;
        _7 = Result::<Child, std::io::Error>::is_err(move _8) -> [return: bb3, unwind: bb9];
    }

    bb3: {
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb7, otherwise: bb4];
    }

    bb4: {
        _13 = [const "Make sure the command fails to spawn(): "];
        _12 = &_13;
        _11 = _12 as &[&str] (Pointer(Unsize));
        _18 = &_3;
        _17 = core::fmt::rt::Argument::<'_>::new_debug::<Command>(_18) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        _16 = [move _17];
        _15 = &_16;
        _14 = _15 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _10 = Arguments::<'_>::new_v1(move _11, move _14) -> [return: bb6, unwind: bb9];
    }

    bb6: {
        _9 = panic_fmt(move _10) -> bb9;
    }

    bb7: {
        _0 = move _4;
        drop(_3) -> bb8;
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_4) -> [return: bb10, unwind terminate];
    }

    bb10 (cleanup): {
        drop(_3) -> [return: bb11, unwind terminate];
    }

    bb11 (cleanup): {
        resume;
    }
}
