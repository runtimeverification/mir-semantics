// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: !;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: !;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: !;
    let mut _10: bool;
    let mut _11: !;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: !;
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: !;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: !;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: !;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: !;
    let mut _28: bool;
    let mut _29: !;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: !;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: !;
    let mut _36: bool;
    let mut _37: !;

    bb0: {
        _1 = Eq(const 1_i32, const 2_i32);
        switchInt(move _1) -> [0: bb3, otherwise: bb1];
    }

    bb1: {
        _2 = Not(const false);
        switchInt(move _2) -> [0: bb11, otherwise: bb2];
    }

    bb2: {
        _3 = core::panicking::panic(const "assertion failed: (false)");
    }

    bb3: {
        _4 = Eq(const 2_i32, const 3_i32);
        switchInt(move _4) -> [0: bb6, otherwise: bb4];
    }

    bb4: {
        _5 = Not(const false);
        switchInt(move _5) -> [0: bb11, otherwise: bb5];
    }

    bb5: {
        _6 = core::panicking::panic(const "assertion failed: (false)");
    }

    bb6: {
        _7 = Eq(const 3_i32, const 4_i32);
        switchInt(move _7) -> [0: bb9, otherwise: bb7];
    }

    bb7: {
        _8 = Not(const false);
        switchInt(move _8) -> [0: bb11, otherwise: bb8];
    }

    bb8: {
        _9 = core::panicking::panic(const "assertion failed: (false)");
    }

    bb9: {
        _10 = Not(const true);
        switchInt(move _10) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _11 = core::panicking::panic(const "assertion failed: (true)");
    }

    bb11: {
        _12 = Eq(const 1_i32, const 2_i32);
        switchInt(move _12) -> [0: bb14, otherwise: bb12];
    }

    bb12: {
        _13 = Not(const false);
        switchInt(move _13) -> [0: bb17, otherwise: bb13];
    }

    bb13: {
        _14 = core::panicking::panic(const "assertion failed: (false)");
    }

    bb14: {
        _15 = Eq(const 2_i32, const 2_i32);
        switchInt(move _15) -> [0: bb17, otherwise: bb15];
    }

    bb15: {
        _16 = Not(const true);
        switchInt(move _16) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _17 = core::panicking::panic(const "assertion failed: (true)");
    }

    bb17: {
        _18 = Eq(const 1_i32, const 2_i32);
        switchInt(move _18) -> [0: bb20, otherwise: bb18];
    }

    bb18: {
        _19 = Not(const false);
        switchInt(move _19) -> [0: bb29, otherwise: bb19];
    }

    bb19: {
        _20 = core::panicking::panic(const "assertion failed: (false)");
    }

    bb20: {
        _21 = Eq(const 2_i32, const 2_i32);
        switchInt(move _21) -> [0: bb29, otherwise: bb21];
    }

    bb21: {
        _22 = Eq(const 1_i32, const 1_i32);
        switchInt(move _22) -> [0: bb24, otherwise: bb22];
    }

    bb22: {
        _23 = Not(const true);
        switchInt(move _23) -> [0: bb29, otherwise: bb23];
    }

    bb23: {
        _24 = core::panicking::panic(const "assertion failed: (true)");
    }

    bb24: {
        _25 = Eq(const 2_i32, const 1_i32);
        switchInt(move _25) -> [0: bb27, otherwise: bb25];
    }

    bb25: {
        _26 = Not(const false);
        switchInt(move _26) -> [0: bb29, otherwise: bb26];
    }

    bb26: {
        _27 = core::panicking::panic(const "assertion failed: (false)");
    }

    bb27: {
        _28 = Not(const false);
        switchInt(move _28) -> [0: bb29, otherwise: bb28];
    }

    bb28: {
        _29 = core::panicking::panic(const "assertion failed: (false)");
    }

    bb29: {
        _30 = Eq(const 1_i32, const 2_i32);
        switchInt(move _30) -> [0: bb32, otherwise: bb30];
    }

    bb30: {
        _31 = Not(const false);
        switchInt(move _31) -> [0: bb37, otherwise: bb31];
    }

    bb31: {
        _32 = core::panicking::panic(const "assertion failed: (false)");
    }

    bb32: {
        _33 = Eq(const 1_i32, const 2_i32);
        switchInt(move _33) -> [0: bb35, otherwise: bb33];
    }

    bb33: {
        _34 = Not(const false);
        switchInt(move _34) -> [0: bb37, otherwise: bb34];
    }

    bb34: {
        _35 = core::panicking::panic(const "assertion failed: (false)");
    }

    bb35: {
        _36 = Not(const true);
        switchInt(move _36) -> [0: bb37, otherwise: bb36];
    }

    bb36: {
        _37 = core::panicking::panic(const "assertion failed: (true)");
    }

    bb37: {
        return;
    }
}
