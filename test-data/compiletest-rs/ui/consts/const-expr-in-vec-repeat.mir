// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: [i32; 6];
    scope 1 {
        debug _v => _1;
    }

    bb0: {
        _1 = [const 0_i32; 6];
        return;
    }
}

const FOO: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: usize;
    let mut _2: usize;
    let mut _3: (usize, bool);
    let mut _4: (usize, bool);
    let mut _5: bool;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _3 = CheckedMul(const _, const 3_usize);
        assert(!move (_3.1: bool), "attempt to compute `{} * {}`, which would overflow", const _, const 3_usize) -> bb1;
    }

    bb1: {
        _2 = move (_3.0: usize);
        _4 = CheckedMul(_2, const 2_usize);
        assert(!move (_4.1: bool), "attempt to compute `{} * {}`, which would overflow", move _2, const 2_usize) -> bb2;
    }

    bb2: {
        _1 = move (_4.0: usize);
        StorageDead(_2);
        _5 = Eq(const 2_usize, const 0_usize);
        assert(!move _5, "attempt to divide `{}` by zero", _1) -> bb3;
    }

    bb3: {
        _0 = Div(move _1, const 2_usize);
        StorageDead(_1);
        return;
    }
}
