// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static X: Foo = {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::Bar;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: &Foo;
    let mut _2: isize;
    let mut _3: !;
    let mut _4: &Foo;
    let mut _5: isize;
    let mut _6: !;

    bb0: {
        _1 = const {alloc1: &Foo};
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb2, 1: bb3, 2: bb3, otherwise: bb1];
    }

    bb1: {
        unreachable;
    }

    bb2: {
        _4 = const {alloc2: &Foo};
        _5 = discriminant((*_4));
        switchInt(move _5) -> [0: bb5, 1: bb4, 2: bb5, otherwise: bb1];
    }

    bb3: {
        _3 = begin_panic::<&str>(const "explicit panic");
    }

    bb4: {
        return;
    }

    bb5: {
        _6 = begin_panic::<&str>(const "explicit panic");
    }
}

alloc2 (static: Y, size: 1, align: 1) {
    01                                              │ .
}

alloc1 (static: X, size: 1, align: 1) {
    00                                              │ .
}

static Y: Foo = {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::Baz;
        return;
    }
}
