// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const C: &isize = {
    let mut _0: &isize;
    let _1: &isize;
    let _2: isize;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const 1000_isize;
        _1 = &_2;
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

static D: isize = {
    let mut _0: isize;
    let mut _1: &isize;

    bb0: {
        StorageLive(_1);
        _1 = const _;
        _0 = (*_1);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&isize, &isize);
    let _2: &isize;
    let mut _3: &isize;
    let _4: isize;
    let _5: &isize;
    let _6: &isize;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: isize;
    let mut _10: isize;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _5;
        debug right_val => _6;
        let _11: core::panicking::AssertKind;
        scope 2 {
            debug kind => _11;
        }
    }

    bb0: {
        _2 = const {alloc1: &isize};
        _4 = const 1000_isize;
        _3 = &_4;
        _1 = (_2, move _3);
        _5 = (_1.0: &isize);
        _6 = (_1.1: &isize);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<isize, isize>(move _11, _5, _6, move _13);
    }

    bb2: {
        return;
    }
}

alloc1 (static: D, size: 8, align: 8) {
    e8 03 00 00 00 00 00 00                         â”‚ ........
}
