// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const OFFSET: usize = {
    let mut _0: usize;
    let _1: std::mem::MaybeUninit<Struct>;
    let mut _3: *const std::mem::MaybeUninit<Struct>;
    let mut _4: *const std::mem::MaybeUninit<Struct>;
    let _5: &std::mem::MaybeUninit<Struct>;
    let mut _7: *const ();
    let _8: &();
    let mut _10: *const u8;
    let mut _11: *const u8;
    let mut _12: *const Struct;
    let mut _13: isize;
    scope 1 {
        debug uninit => _1;
        let _2: *const Struct;
        scope 2 {
            debug base_ptr => _2;
            let _6: *const u8;
            scope 3 {
                debug field_ptr => _6;
                let _9: isize;
                scope 5 {
                    debug offset => _9;
                }
                scope 6 {
                }
            }
            scope 4 {
            }
        }
    }

    bb0: {
        StorageLive(_1);
        ConstEvalCounter;
        _1 = MaybeUninit::<Struct>::uninit() -> bb1;
    }

    bb1: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &_1;
        _4 = &raw const (*_5);
        _3 = _4;
        _2 = move _3 as *const Struct (PtrToPtr);
        StorageDead(_3);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &((*_2).0: ());
        _7 = &raw const (*_8);
        _6 = move _7 as *const u8 (PtrToPtr);
        StorageDead(_7);
        StorageDead(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = _6;
        StorageLive(_11);
        StorageLive(_12);
        _12 = _2;
        _11 = move _12 as *const u8 (PtrToPtr);
        StorageDead(_12);
        ConstEvalCounter;
        _9 = ptr::const_ptr::<impl *const u8>::offset_from(move _10, move _11) -> bb2;
    }

    bb2: {
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_13);
        _13 = _9;
        _0 = move _13 as usize (IntToInt);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

const OFFSET_2: usize = {
    let mut _0: usize;
    let _1: std::mem::MaybeUninit<Struct2>;
    let mut _3: *const std::mem::MaybeUninit<Struct2>;
    let mut _4: *const std::mem::MaybeUninit<Struct2>;
    let _5: &std::mem::MaybeUninit<Struct2>;
    let _7: &u8;
    let mut _9: *const u8;
    let mut _10: *const u8;
    let mut _11: *const Struct2;
    let mut _12: isize;
    scope 1 {
        debug uninit => _1;
        let _2: *const Struct2;
        scope 2 {
            debug base_ptr => _2;
            let _6: *const u8;
            scope 3 {
                debug field_ptr => _6;
                let _8: isize;
                scope 5 {
                    debug offset => _8;
                }
                scope 6 {
                }
            }
            scope 4 {
            }
        }
    }

    bb0: {
        StorageLive(_1);
        ConstEvalCounter;
        _1 = MaybeUninit::<Struct2>::uninit() -> bb1;
    }

    bb1: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &_1;
        _4 = &raw const (*_5);
        _3 = _4;
        _2 = move _3 as *const Struct2 (PtrToPtr);
        StorageDead(_3);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &((*_2).1: u8);
        _6 = &raw const (*_7);
        StorageDead(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = _6;
        StorageLive(_10);
        StorageLive(_11);
        _11 = _2;
        _10 = move _11 as *const u8 (PtrToPtr);
        StorageDead(_11);
        ConstEvalCounter;
        _8 = ptr::const_ptr::<impl *const u8>::offset_from(move _9, move _10) -> bb2;
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_12);
        _12 = _8;
        _0 = move _12 as usize (IntToInt);
        StorageDead(_12);
        StorageDead(_8);
        StorageDead(_6);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

const OVERFLOW: isize = {
    let mut _0: isize;
    let _1: std::mem::MaybeUninit<Struct2>;
    let mut _3: *const std::mem::MaybeUninit<Struct2>;
    let mut _4: *const std::mem::MaybeUninit<Struct2>;
    let _5: &std::mem::MaybeUninit<Struct2>;
    let _7: &u8;
    let mut _8: *const u8;
    let mut _9: *const Struct2;
    let mut _10: *const u8;
    scope 1 {
        debug uninit => _1;
        let _2: *const Struct2;
        scope 2 {
            debug base_ptr => _2;
            let _6: *const u8;
            scope 3 {
                debug field_ptr => _6;
                scope 5 {
                }
            }
            scope 4 {
            }
        }
    }

    bb0: {
        StorageLive(_1);
        ConstEvalCounter;
        _1 = MaybeUninit::<Struct2>::uninit() -> bb1;
    }

    bb1: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &_1;
        _4 = &raw const (*_5);
        _3 = _4;
        _2 = move _3 as *const Struct2 (PtrToPtr);
        StorageDead(_3);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &((*_2).1: u8);
        _6 = &raw const (*_7);
        StorageDead(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = _2;
        _8 = move _9 as *const u8 (PtrToPtr);
        StorageDead(_9);
        StorageLive(_10);
        _10 = _6;
        ConstEvalCounter;
        _0 = ptr::const_ptr::<impl *const u8>::offset_from(move _8, move _10) -> bb2;
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_6);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

const OFFSET_EQUAL_INTS: isize = {
    let mut _0: isize;
    let _1: *const u8;
    let mut _2: *const u8;
    let mut _3: *const u8;
    scope 1 {
        debug ptr => _1;
        scope 2 {
        }
    }

    bb0: {
        StorageLive(_1);
        _1 = const 1_usize as *const u8 (PointerFromExposedAddress);
        StorageLive(_2);
        _2 = _1;
        StorageLive(_3);
        _3 = _1;
        ConstEvalCounter;
        _0 = ptr::const_ptr::<impl *const u8>::offset_from(move _2, move _3) -> bb1;
    }

    bb1: {
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

const OFFSET_UNSIGNED: usize = {
    let mut _0: usize;
    let _1: [char; 3];
    let mut _3: &[char];
    let mut _4: &[char; 3];
    let mut _5: *const char;
    let mut _6: *const char;
    let mut _7: *const char;
    scope 1 {
        debug a => _1;
        let _2: *const char;
        scope 2 {
            debug ptr => _2;
            scope 3 {
            }
        }
    }

    bb0: {
        StorageLive(_1);
        _1 = [const 'a', const 'b', const 'c'];
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = &_1;
        _3 = move _4 as &[char] (Pointer(Unsize));
        StorageDead(_4);
        ConstEvalCounter;
        _2 = core::slice::<impl [char]>::as_ptr(move _3) -> bb1;
    }

    bb1: {
        StorageDead(_3);
        StorageLive(_5);
        StorageLive(_6);
        _6 = _2;
        ConstEvalCounter;
        _5 = ptr::const_ptr::<impl *const char>::add(move _6, const 2_usize) -> bb2;
    }

    bb2: {
        StorageDead(_6);
        StorageLive(_7);
        _7 = _2;
        ConstEvalCounter;
        _0 = ptr::const_ptr::<impl *const char>::sub_ptr(move _5, move _7) -> bb3;
    }

    bb3: {
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let mut _2: &usize;
    let _3: usize;
    let mut _4: &usize;
    let _5: usize;
    let _6: &usize;
    let _7: &usize;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: usize;
    let mut _11: usize;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&usize, &usize);
    let mut _16: &usize;
    let _17: usize;
    let mut _18: &usize;
    let _19: usize;
    let _20: &usize;
    let _21: &usize;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: usize;
    let mut _25: usize;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: (&isize, &isize);
    let mut _30: &isize;
    let _31: isize;
    let mut _32: &isize;
    let _33: isize;
    let _34: &isize;
    let _35: &isize;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: isize;
    let mut _39: isize;
    let _41: !;
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _43: (&isize, &isize);
    let mut _44: &isize;
    let _45: isize;
    let mut _46: &isize;
    let _47: isize;
    let _48: &isize;
    let _49: &isize;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: isize;
    let mut _53: isize;
    let _55: !;
    let mut _56: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _57: (&usize, &usize);
    let mut _58: &usize;
    let _59: usize;
    let mut _60: &usize;
    let _61: usize;
    let _62: &usize;
    let _63: &usize;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: usize;
    let mut _67: usize;
    let _69: !;
    let mut _70: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }
    scope 3 {
        debug left_val => _20;
        debug right_val => _21;
        let _26: core::panicking::AssertKind;
        scope 4 {
            debug kind => _26;
        }
    }
    scope 5 {
        debug left_val => _34;
        debug right_val => _35;
        let _40: core::panicking::AssertKind;
        scope 6 {
            debug kind => _40;
        }
    }
    scope 7 {
        debug left_val => _48;
        debug right_val => _49;
        let _54: core::panicking::AssertKind;
        scope 8 {
            debug kind => _54;
        }
    }
    scope 9 {
        debug left_val => _62;
        debug right_val => _63;
        let _68: core::panicking::AssertKind;
        scope 10 {
            debug kind => _68;
        }
    }

    bb0: {
        _3 = const _;
        _2 = &_3;
        _5 = const 0_usize;
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &usize);
        _7 = (_1.1: &usize);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<usize, usize>(move _12, _6, _7, move _14);
    }

    bb2: {
        _17 = const _;
        _16 = &_17;
        _19 = const 1_usize;
        _18 = &_19;
        _15 = (move _16, move _18);
        _20 = (_15.0: &usize);
        _21 = (_15.1: &usize);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<usize, usize>(move _26, _20, _21, move _28);
    }

    bb4: {
        _31 = const _;
        _30 = &_31;
        _33 = const -1_isize;
        _32 = &_33;
        _29 = (move _30, move _32);
        _34 = (_29.0: &isize);
        _35 = (_29.1: &isize);
        _38 = (*_34);
        _39 = (*_35);
        _37 = Eq(move _38, move _39);
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _40 = core::panicking::AssertKind::Eq;
        _42 = Option::<Arguments<'_>>::None;
        _41 = core::panicking::assert_failed::<isize, isize>(move _40, _34, _35, move _42);
    }

    bb6: {
        _45 = const _;
        _44 = &_45;
        _47 = const 0_isize;
        _46 = &_47;
        _43 = (move _44, move _46);
        _48 = (_43.0: &isize);
        _49 = (_43.1: &isize);
        _52 = (*_48);
        _53 = (*_49);
        _51 = Eq(move _52, move _53);
        _50 = Not(move _51);
        switchInt(move _50) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _54 = core::panicking::AssertKind::Eq;
        _56 = Option::<Arguments<'_>>::None;
        _55 = core::panicking::assert_failed::<isize, isize>(move _54, _48, _49, move _56);
    }

    bb8: {
        _59 = const _;
        _58 = &_59;
        _61 = const 2_usize;
        _60 = &_61;
        _57 = (move _58, move _60);
        _62 = (_57.0: &usize);
        _63 = (_57.1: &usize);
        _66 = (*_62);
        _67 = (*_63);
        _65 = Eq(move _66, move _67);
        _64 = Not(move _65);
        switchInt(move _64) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _68 = core::panicking::AssertKind::Eq;
        _70 = Option::<Arguments<'_>>::None;
        _69 = core::panicking::assert_failed::<usize, usize>(move _68, _62, _63, move _70);
    }

    bb10: {
        return;
    }
}
