// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
<impl at ui/consts/self_normalization2.rs:9:1: 9:24>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

fn <impl at ui/consts/self_normalization2.rs:9:1: 9:24>::gen(_1: A) -> [(); 0] {
    debug x => const A;
    let mut _0: [(); 0];

    bb0: {
        return;
    }
}

<impl at ui/consts/self_normalization2.rs:9:1: 9:24>::gen::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

fn array() -> impl Gen<[(); 0]> {
    let mut _0: impl Gen<[(); 0]>;

    bb0: {
        return;
    }
}

array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: [(); 0];
    let mut _2: impl Gen<[(); 0]>;
    scope 1 {
    }

    bb0: {
        _2 = array() -> bb1;
    }

    bb1: {
        _1 = <impl Gen<[(); 0]> as Gen<[(); 0]>>::gen(const ZeroSized: impl Gen<[(); 0]>) -> bb2;
    }

    bb2: {
        return;
    }
}
