// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn type_name_wrapper(_1: &T) -> &str {
    let mut _0: &str;

    bb0: {
        _0 = std::any::type_name::<T>() -> bb1;
    }

    bb1: {
        return;
    }
}

// MIR FOR CTFE
fn type_name_wrapper(_1: &T) -> &str {
    let mut _0: &str;

    bb0: {
        ConstEvalCounter;
        _0 = std::any::type_name::<T>() -> bb1;
    }

    bb1: {
        return;
    }
}

const CONST_STRUCT: Struct<i8, f64, bool> = {
    let mut _0: Struct<i8, f64, bool>;

    bb0: {
        _0 = Struct::<i8, f64, bool> { a: const 12_i8, b: const 13.699999999999999f64, c: const false };
        return;
    }
}

const CONST_STRUCT_NAME: &str = {
    let mut _0: &str;
    let mut _1: &Struct<i8, f64, bool>;
    let _2: &Struct<i8, f64, bool>;
    let _3: Struct<i8, f64, bool>;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = const _;
        _2 = &_3;
        _1 = &(*_2);
        ConstEvalCounter;
        _0 = type_name_wrapper::<Struct<i8, f64, bool>>(move _1) -> bb1;
    }

    bb1: {
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Struct<i8, f64, bool>;
    let _3: &Struct<i8, f64, bool>;
    let mut _4: (&&str, &&str);
    let mut _5: &&str;
    let _6: &str;
    let mut _7: &&str;
    let mut _10: bool;
    let mut _11: bool;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug non_const_struct => _1;
        let _2: &str;
        scope 2 {
            debug non_const_struct_name => _2;
            let _8: &&str;
            let _9: &&str;
            scope 3 {
                debug left_val => _8;
                debug right_val => _9;
                let _12: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _12;
                }
            }
        }
    }

    bb0: {
        _1 = Struct::<i8, f64, bool> { a: const 87_i8, b: const 65.989999999999995f64, c: const true };
        _3 = &_1;
        _2 = type_name_wrapper::<Struct<i8, f64, bool>>(_3) -> bb1;
    }

    bb1: {
        _6 = const _;
        _5 = &_6;
        _7 = &_2;
        _4 = (move _5, move _7);
        _8 = (_4.0: &&str);
        _9 = (_4.1: &&str);
        _11 = <&str as PartialEq>::eq(_8, _9) -> bb2;
    }

    bb2: {
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<&str, &str>(move _12, _8, _9, move _14);
    }

    bb4: {
        return;
    }
}
