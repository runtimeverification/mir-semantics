// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn basics(_1: (f32,)) -> f32 {
    let mut _0: f32;
    let _2: f32;
    let mut _6: f32;
    let _8: usize;
    let mut _9: usize;
    let mut _10: bool;
    let mut _11: f32;
    let mut _12: f32;
    let _13: usize;
    let mut _14: usize;
    let mut _15: bool;
    let mut _18: f32;
    let mut _19: f32;
    let mut _20: f32;
    let mut _21: f32;
    let mut _23: Foo<f32>;
    let _24: usize;
    let mut _25: usize;
    let mut _26: bool;
    let mut _27: f32;
    let mut _28: f32;
    let _29: usize;
    let mut _30: usize;
    let mut _31: bool;
    let mut _33: Bar<f32>;
    let _34: usize;
    let mut _35: usize;
    let mut _36: bool;
    let mut _37: f32;
    let mut _38: f32;
    let _39: usize;
    let mut _40: usize;
    let mut _41: bool;
    let mut _43: [f32; 1];
    let _44: usize;
    let mut _45: usize;
    let mut _46: bool;
    let mut _47: f32;
    let mut _48: f32;
    let _49: usize;
    let mut _50: usize;
    let mut _51: bool;
    let mut _53: [f32; 1];
    let _54: usize;
    let mut _55: usize;
    let mut _56: bool;
    let mut _57: f32;
    let mut _58: f32;
    let _59: usize;
    let mut _60: usize;
    let mut _61: bool;
    scope 1 {
        debug a => _2;
        let _3: f32;
        scope 2 {
            debug b => _3;
            let _4: f32;
            scope 3 {
                debug c => _4;
                let mut _5: f32;
                scope 4 {
                    debug d => _5;
                    let mut _7: [f32; 1];
                    scope 5 {
                        debug arr => _7;
                        let mut _16: Foo<f32>;
                        scope 6 {
                            debug foo => _16;
                            let mut _17: Bar<f32>;
                            scope 7 {
                                debug bar => _17;
                                let mut _22: [Foo<f32>; 1];
                                scope 8 {
                                    debug arr => _22;
                                    let mut _32: [Bar<f32>; 1];
                                    scope 9 {
                                        debug arr => _32;
                                        let mut _42: Foo<[f32; 1]>;
                                        scope 10 {
                                            debug arr => _42;
                                            let mut _52: Bar<[f32; 1]>;
                                            scope 11 {
                                                debug arr => _52;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = (_1.0: f32);
        _3 = Add(_2, const 1f32);
        _4 = Add(_3, const 1f32);
        _5 = Add(_4, const 1f32);
        _6 = _5;
        _5 = Add(move _6, const 1f32);
        _7 = [const 0f32];
        _8 = const 0_usize;
        _9 = const 1_usize;
        _10 = Lt(_8, _9);
        assert(move _10, "index out of bounds: the length is {} but the index is {}", move _9, _8) -> bb1;
    }

    bb1: {
        _7[_8] = const 1f32;
        _11 = _5;
        _13 = const 0_usize;
        _14 = const 1_usize;
        _15 = Lt(_13, _14);
        assert(move _15, "index out of bounds: the length is {} but the index is {}", move _14, _13) -> bb2;
    }

    bb2: {
        _12 = _7[_13];
        _5 = Add(move _11, move _12);
        _16 = Foo::<f32>(const 0f32);
        _17 = Bar::<f32> { x: const 0f32 };
        (_16.0: f32) = const 1f32;
        (_17.0: f32) = const 1f32;
        _19 = _5;
        _20 = (_16.0: f32);
        _18 = Add(move _19, move _20);
        _21 = (_17.0: f32);
        _5 = Add(move _18, move _21);
        _23 = Foo::<f32>(const 0f32);
        _22 = [move _23];
        _24 = const 0_usize;
        _25 = const 1_usize;
        _26 = Lt(_24, _25);
        assert(move _26, "index out of bounds: the length is {} but the index is {}", move _25, _24) -> bb3;
    }

    bb3: {
        (_22[_24].0: f32) = const 1f32;
        _27 = _5;
        _29 = const 0_usize;
        _30 = const 1_usize;
        _31 = Lt(_29, _30);
        assert(move _31, "index out of bounds: the length is {} but the index is {}", move _30, _29) -> bb4;
    }

    bb4: {
        _28 = (_22[_29].0: f32);
        _5 = Add(move _27, move _28);
        _33 = Bar::<f32> { x: const 0f32 };
        _32 = [move _33];
        _34 = const 0_usize;
        _35 = const 1_usize;
        _36 = Lt(_34, _35);
        assert(move _36, "index out of bounds: the length is {} but the index is {}", move _35, _34) -> bb5;
    }

    bb5: {
        (_32[_34].0: f32) = const 1f32;
        _37 = _5;
        _39 = const 0_usize;
        _40 = const 1_usize;
        _41 = Lt(_39, _40);
        assert(move _41, "index out of bounds: the length is {} but the index is {}", move _40, _39) -> bb6;
    }

    bb6: {
        _38 = (_32[_39].0: f32);
        _5 = Add(move _37, move _38);
        _43 = [const 0f32];
        _42 = Foo::<[f32; 1]>(move _43);
        _44 = const 0_usize;
        _45 = const 1_usize;
        _46 = Lt(_44, _45);
        assert(move _46, "index out of bounds: the length is {} but the index is {}", move _45, _44) -> bb7;
    }

    bb7: {
        (_42.0: [f32; 1])[_44] = const 1f32;
        _47 = _5;
        _49 = const 0_usize;
        _50 = const 1_usize;
        _51 = Lt(_49, _50);
        assert(move _51, "index out of bounds: the length is {} but the index is {}", move _50, _49) -> bb8;
    }

    bb8: {
        _48 = (_42.0: [f32; 1])[_49];
        _5 = Add(move _47, move _48);
        _53 = [const 0f32];
        _52 = Bar::<[f32; 1]> { x: move _53 };
        _54 = const 0_usize;
        _55 = const 1_usize;
        _56 = Lt(_54, _55);
        assert(move _56, "index out of bounds: the length is {} but the index is {}", move _55, _54) -> bb9;
    }

    bb9: {
        (_52.0: [f32; 1])[_54] = const 1f32;
        _57 = _5;
        _59 = const 0_usize;
        _60 = const 1_usize;
        _61 = Lt(_59, _60);
        assert(move _61, "index out of bounds: the length is {} but the index is {}", move _60, _59) -> bb10;
    }

    bb10: {
        _58 = (_52.0: [f32; 1])[_59];
        _5 = Add(move _57, move _58);
        _0 = _5;
        return;
    }
}

// MIR FOR CTFE
fn basics(_1: (f32,)) -> f32 {
    let mut _0: f32;
    let _2: f32;
    let mut _4: f32;
    let mut _6: f32;
    let mut _8: f32;
    let mut _9: f32;
    let _10: i32;
    let _12: usize;
    let mut _13: usize;
    let mut _14: bool;
    let mut _15: f32;
    let mut _16: f32;
    let _17: usize;
    let mut _18: usize;
    let mut _19: bool;
    let mut _22: f32;
    let mut _23: f32;
    let mut _24: f32;
    let mut _25: f32;
    let mut _27: Foo<f32>;
    let _28: usize;
    let mut _29: usize;
    let mut _30: bool;
    let mut _31: f32;
    let mut _32: f32;
    let _33: usize;
    let mut _34: usize;
    let mut _35: bool;
    let mut _37: Bar<f32>;
    let _38: usize;
    let mut _39: usize;
    let mut _40: bool;
    let mut _41: f32;
    let mut _42: f32;
    let _43: usize;
    let mut _44: usize;
    let mut _45: bool;
    let mut _47: [f32; 1];
    let _48: usize;
    let mut _49: usize;
    let mut _50: bool;
    let mut _51: f32;
    let mut _52: f32;
    let _53: usize;
    let mut _54: usize;
    let mut _55: bool;
    let mut _57: [f32; 1];
    let _58: usize;
    let mut _59: usize;
    let mut _60: bool;
    let mut _61: f32;
    let mut _62: f32;
    let _63: usize;
    let mut _64: usize;
    let mut _65: bool;
    scope 1 {
        debug a => _2;
        let _3: f32;
        scope 2 {
            debug b => _3;
            let _5: f32;
            scope 3 {
                debug c => _5;
                let mut _7: f32;
                scope 4 {
                    debug d => _7;
                    let mut _11: [f32; 1];
                    scope 5 {
                        debug arr => _11;
                        let mut _20: Foo<f32>;
                        scope 6 {
                            debug foo => _20;
                            let mut _21: Bar<f32>;
                            scope 7 {
                                debug bar => _21;
                                let mut _26: [Foo<f32>; 1];
                                scope 8 {
                                    debug arr => _26;
                                    let mut _36: [Bar<f32>; 1];
                                    scope 9 {
                                        debug arr => _36;
                                        let mut _46: Foo<[f32; 1]>;
                                        scope 10 {
                                            debug arr => _46;
                                            let mut _56: Bar<[f32; 1]>;
                                            scope 11 {
                                                debug arr => _56;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_2);
        _2 = (_1.0: f32);
        StorageLive(_3);
        StorageLive(_4);
        _4 = _2;
        _3 = Add(move _4, const 1f32);
        StorageDead(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = _3;
        _5 = Add(move _6, const 1f32);
        StorageDead(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _5;
        _7 = Add(move _8, const 1f32);
        StorageDead(_8);
        StorageLive(_9);
        _9 = _7;
        _7 = Add(move _9, const 1f32);
        StorageDead(_9);
        StorageLive(_10);
        _10 = const 1_i32;
        StorageDead(_10);
        StorageLive(_11);
        _11 = [const 0f32];
        StorageLive(_12);
        _12 = const 0_usize;
        _13 = Len(_11);
        _14 = Lt(_12, _13);
        assert(move _14, "index out of bounds: the length is {} but the index is {}", move _13, _12) -> bb1;
    }

    bb1: {
        _11[_12] = const 1f32;
        StorageDead(_12);
        StorageLive(_15);
        _15 = _7;
        StorageLive(_16);
        StorageLive(_17);
        _17 = const 0_usize;
        _18 = Len(_11);
        _19 = Lt(_17, _18);
        assert(move _19, "index out of bounds: the length is {} but the index is {}", move _18, _17) -> bb2;
    }

    bb2: {
        _16 = _11[_17];
        _7 = Add(move _15, move _16);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_17);
        StorageLive(_20);
        _20 = Foo::<f32>(const 0f32);
        StorageLive(_21);
        _21 = Bar::<f32> { x: const 0f32 };
        (_20.0: f32) = const 1f32;
        (_21.0: f32) = const 1f32;
        StorageLive(_22);
        StorageLive(_23);
        _23 = _7;
        StorageLive(_24);
        _24 = (_20.0: f32);
        _22 = Add(move _23, move _24);
        StorageDead(_24);
        StorageDead(_23);
        StorageLive(_25);
        _25 = (_21.0: f32);
        _7 = Add(move _22, move _25);
        StorageDead(_25);
        StorageDead(_22);
        StorageLive(_26);
        StorageLive(_27);
        _27 = Foo::<f32>(const 0f32);
        _26 = [move _27];
        StorageDead(_27);
        StorageLive(_28);
        _28 = const 0_usize;
        _29 = Len(_26);
        _30 = Lt(_28, _29);
        assert(move _30, "index out of bounds: the length is {} but the index is {}", move _29, _28) -> bb3;
    }

    bb3: {
        (_26[_28].0: f32) = const 1f32;
        StorageDead(_28);
        StorageLive(_31);
        _31 = _7;
        StorageLive(_32);
        StorageLive(_33);
        _33 = const 0_usize;
        _34 = Len(_26);
        _35 = Lt(_33, _34);
        assert(move _35, "index out of bounds: the length is {} but the index is {}", move _34, _33) -> bb4;
    }

    bb4: {
        _32 = (_26[_33].0: f32);
        _7 = Add(move _31, move _32);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_33);
        StorageLive(_36);
        StorageLive(_37);
        _37 = Bar::<f32> { x: const 0f32 };
        _36 = [move _37];
        StorageDead(_37);
        StorageLive(_38);
        _38 = const 0_usize;
        _39 = Len(_36);
        _40 = Lt(_38, _39);
        assert(move _40, "index out of bounds: the length is {} but the index is {}", move _39, _38) -> bb5;
    }

    bb5: {
        (_36[_38].0: f32) = const 1f32;
        StorageDead(_38);
        StorageLive(_41);
        _41 = _7;
        StorageLive(_42);
        StorageLive(_43);
        _43 = const 0_usize;
        _44 = Len(_36);
        _45 = Lt(_43, _44);
        assert(move _45, "index out of bounds: the length is {} but the index is {}", move _44, _43) -> bb6;
    }

    bb6: {
        _42 = (_36[_43].0: f32);
        _7 = Add(move _41, move _42);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_43);
        StorageLive(_46);
        StorageLive(_47);
        _47 = [const 0f32];
        _46 = Foo::<[f32; 1]>(move _47);
        StorageDead(_47);
        StorageLive(_48);
        _48 = const 0_usize;
        _49 = Len((_46.0: [f32; 1]));
        _50 = Lt(_48, _49);
        assert(move _50, "index out of bounds: the length is {} but the index is {}", move _49, _48) -> bb7;
    }

    bb7: {
        (_46.0: [f32; 1])[_48] = const 1f32;
        StorageDead(_48);
        StorageLive(_51);
        _51 = _7;
        StorageLive(_52);
        StorageLive(_53);
        _53 = const 0_usize;
        _54 = Len((_46.0: [f32; 1]));
        _55 = Lt(_53, _54);
        assert(move _55, "index out of bounds: the length is {} but the index is {}", move _54, _53) -> bb8;
    }

    bb8: {
        _52 = (_46.0: [f32; 1])[_53];
        _7 = Add(move _51, move _52);
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_53);
        StorageLive(_56);
        StorageLive(_57);
        _57 = [const 0f32];
        _56 = Bar::<[f32; 1]> { x: move _57 };
        StorageDead(_57);
        StorageLive(_58);
        _58 = const 0_usize;
        _59 = Len((_56.0: [f32; 1]));
        _60 = Lt(_58, _59);
        assert(move _60, "index out of bounds: the length is {} but the index is {}", move _59, _58) -> bb9;
    }

    bb9: {
        (_56.0: [f32; 1])[_58] = const 1f32;
        StorageDead(_58);
        StorageLive(_61);
        _61 = _7;
        StorageLive(_62);
        StorageLive(_63);
        _63 = const 0_usize;
        _64 = Len((_56.0: [f32; 1]));
        _65 = Lt(_63, _64);
        assert(move _65, "index out of bounds: the length is {} but the index is {}", move _64, _63) -> bb10;
    }

    bb10: {
        _62 = (_56.0: [f32; 1])[_63];
        _7 = Add(move _61, move _62);
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_63);
        _0 = _7;
        StorageDead(_56);
        StorageDead(_46);
        StorageDead(_36);
        StorageDead(_26);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_11);
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_3);
        StorageDead(_2);
        return;
    }
}

basics::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

basics::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

basics::{constant#2}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

basics::{constant#3}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

basics::{constant#4}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

fn add_assign(_1: W) -> f32 {
    let mut _0: f32;
    let _2: f32;
    let _5: usize;
    let mut _6: usize;
    let mut _7: bool;
    let mut _8: f32;
    let _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _14: f32;
    let mut _15: f32;
    let mut _16: f32;
    let mut _18: Foo<f32>;
    let _19: usize;
    let mut _20: usize;
    let mut _21: bool;
    let mut _22: f32;
    let _23: usize;
    let mut _24: usize;
    let mut _25: bool;
    let mut _27: Bar<f32>;
    let _28: usize;
    let mut _29: usize;
    let mut _30: bool;
    let mut _31: f32;
    let _32: usize;
    let mut _33: usize;
    let mut _34: bool;
    let mut _36: [f32; 1];
    let _37: usize;
    let mut _38: usize;
    let mut _39: bool;
    let mut _40: f32;
    let _41: usize;
    let mut _42: usize;
    let mut _43: bool;
    let mut _45: [f32; 1];
    let _46: usize;
    let mut _47: usize;
    let mut _48: bool;
    let mut _49: f32;
    let _50: usize;
    let mut _51: usize;
    let mut _52: bool;
    scope 1 {
        debug a => _2;
        let mut _3: f32;
        scope 2 {
            debug d => _3;
            let mut _4: [f32; 1];
            scope 3 {
                debug arr => _4;
                let mut _12: Foo<f32>;
                scope 4 {
                    debug foo => _12;
                    let mut _13: Bar<f32>;
                    scope 5 {
                        debug bar => _13;
                        let mut _17: [Foo<f32>; 1];
                        scope 6 {
                            debug arr => _17;
                            let mut _26: [Bar<f32>; 1];
                            scope 7 {
                                debug arr => _26;
                                let mut _35: Foo<[f32; 1]>;
                                scope 8 {
                                    debug arr => _35;
                                    let mut _44: Bar<[f32; 1]>;
                                    scope 9 {
                                        debug arr => _44;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = (_1.0: f32);
        _3 = Add(_2, const 1f32);
        _3 = Add(_3, const 1f32);
        _4 = [const 0f32];
        _5 = const 0_usize;
        _6 = const 1_usize;
        _7 = Lt(_5, _6);
        assert(move _7, "index out of bounds: the length is {} but the index is {}", move _6, _5) -> bb1;
    }

    bb1: {
        _4[_5] = Add(_4[_5], const 1f32);
        _9 = const 0_usize;
        _10 = const 1_usize;
        _11 = Lt(_9, _10);
        assert(move _11, "index out of bounds: the length is {} but the index is {}", move _10, _9) -> bb2;
    }

    bb2: {
        _8 = _4[_9];
        _3 = Add(_3, move _8);
        _12 = Foo::<f32>(const 0f32);
        _13 = Bar::<f32> { x: const 0f32 };
        (_12.0: f32) = Add((_12.0: f32), const 1f32);
        (_13.0: f32) = Add((_13.0: f32), const 1f32);
        _15 = (_12.0: f32);
        _16 = (_13.0: f32);
        _14 = Add(move _15, move _16);
        _3 = Add(_3, move _14);
        _18 = Foo::<f32>(const 0f32);
        _17 = [move _18];
        _19 = const 0_usize;
        _20 = const 1_usize;
        _21 = Lt(_19, _20);
        assert(move _21, "index out of bounds: the length is {} but the index is {}", move _20, _19) -> bb3;
    }

    bb3: {
        (_17[_19].0: f32) = Add((_17[_19].0: f32), const 1f32);
        _23 = const 0_usize;
        _24 = const 1_usize;
        _25 = Lt(_23, _24);
        assert(move _25, "index out of bounds: the length is {} but the index is {}", move _24, _23) -> bb4;
    }

    bb4: {
        _22 = (_17[_23].0: f32);
        _3 = Add(_3, move _22);
        _27 = Bar::<f32> { x: const 0f32 };
        _26 = [move _27];
        _28 = const 0_usize;
        _29 = const 1_usize;
        _30 = Lt(_28, _29);
        assert(move _30, "index out of bounds: the length is {} but the index is {}", move _29, _28) -> bb5;
    }

    bb5: {
        (_26[_28].0: f32) = Add((_26[_28].0: f32), const 1f32);
        _32 = const 0_usize;
        _33 = const 1_usize;
        _34 = Lt(_32, _33);
        assert(move _34, "index out of bounds: the length is {} but the index is {}", move _33, _32) -> bb6;
    }

    bb6: {
        _31 = (_26[_32].0: f32);
        _3 = Add(_3, move _31);
        _36 = [const 0f32];
        _35 = Foo::<[f32; 1]>(move _36);
        _37 = const 0_usize;
        _38 = const 1_usize;
        _39 = Lt(_37, _38);
        assert(move _39, "index out of bounds: the length is {} but the index is {}", move _38, _37) -> bb7;
    }

    bb7: {
        (_35.0: [f32; 1])[_37] = Add((_35.0: [f32; 1])[_37], const 1f32);
        _41 = const 0_usize;
        _42 = const 1_usize;
        _43 = Lt(_41, _42);
        assert(move _43, "index out of bounds: the length is {} but the index is {}", move _42, _41) -> bb8;
    }

    bb8: {
        _40 = (_35.0: [f32; 1])[_41];
        _3 = Add(_3, move _40);
        _45 = [const 0f32];
        _44 = Bar::<[f32; 1]> { x: move _45 };
        _46 = const 0_usize;
        _47 = const 1_usize;
        _48 = Lt(_46, _47);
        assert(move _48, "index out of bounds: the length is {} but the index is {}", move _47, _46) -> bb9;
    }

    bb9: {
        (_44.0: [f32; 1])[_46] = Add((_44.0: [f32; 1])[_46], const 1f32);
        _50 = const 0_usize;
        _51 = const 1_usize;
        _52 = Lt(_50, _51);
        assert(move _52, "index out of bounds: the length is {} but the index is {}", move _51, _50) -> bb10;
    }

    bb10: {
        _49 = (_44.0: [f32; 1])[_50];
        _3 = Add(_3, move _49);
        _0 = _3;
        return;
    }
}

// MIR FOR CTFE
fn add_assign(_1: W) -> f32 {
    let mut _0: f32;
    let _2: f32;
    let mut _4: f32;
    let _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: f32;
    let _10: usize;
    let mut _11: usize;
    let mut _12: bool;
    let mut _15: f32;
    let mut _16: f32;
    let mut _17: f32;
    let mut _19: Foo<f32>;
    let _20: usize;
    let mut _21: usize;
    let mut _22: bool;
    let mut _23: f32;
    let _24: usize;
    let mut _25: usize;
    let mut _26: bool;
    let mut _28: Bar<f32>;
    let _29: usize;
    let mut _30: usize;
    let mut _31: bool;
    let mut _32: f32;
    let _33: usize;
    let mut _34: usize;
    let mut _35: bool;
    let mut _37: [f32; 1];
    let _38: usize;
    let mut _39: usize;
    let mut _40: bool;
    let mut _41: f32;
    let _42: usize;
    let mut _43: usize;
    let mut _44: bool;
    let mut _46: [f32; 1];
    let _47: usize;
    let mut _48: usize;
    let mut _49: bool;
    let mut _50: f32;
    let _51: usize;
    let mut _52: usize;
    let mut _53: bool;
    scope 1 {
        debug a => _2;
        let mut _3: f32;
        scope 2 {
            debug d => _3;
            let mut _5: [f32; 1];
            scope 3 {
                debug arr => _5;
                let mut _13: Foo<f32>;
                scope 4 {
                    debug foo => _13;
                    let mut _14: Bar<f32>;
                    scope 5 {
                        debug bar => _14;
                        let mut _18: [Foo<f32>; 1];
                        scope 6 {
                            debug arr => _18;
                            let mut _27: [Bar<f32>; 1];
                            scope 7 {
                                debug arr => _27;
                                let mut _36: Foo<[f32; 1]>;
                                scope 8 {
                                    debug arr => _36;
                                    let mut _45: Bar<[f32; 1]>;
                                    scope 9 {
                                        debug arr => _45;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_2);
        _2 = (_1.0: f32);
        StorageLive(_3);
        StorageLive(_4);
        _4 = _2;
        _3 = Add(move _4, const 1f32);
        StorageDead(_4);
        _3 = Add(_3, const 1f32);
        StorageLive(_5);
        _5 = [const 0f32];
        StorageLive(_6);
        _6 = const 0_usize;
        _7 = Len(_5);
        _8 = Lt(_6, _7);
        assert(move _8, "index out of bounds: the length is {} but the index is {}", move _7, _6) -> bb1;
    }

    bb1: {
        _5[_6] = Add(_5[_6], const 1f32);
        StorageDead(_6);
        StorageLive(_9);
        StorageLive(_10);
        _10 = const 0_usize;
        _11 = Len(_5);
        _12 = Lt(_10, _11);
        assert(move _12, "index out of bounds: the length is {} but the index is {}", move _11, _10) -> bb2;
    }

    bb2: {
        _9 = _5[_10];
        _3 = Add(_3, move _9);
        StorageDead(_9);
        StorageDead(_10);
        StorageLive(_13);
        _13 = Foo::<f32>(const 0f32);
        StorageLive(_14);
        _14 = Bar::<f32> { x: const 0f32 };
        (_13.0: f32) = Add((_13.0: f32), const 1f32);
        (_14.0: f32) = Add((_14.0: f32), const 1f32);
        StorageLive(_15);
        StorageLive(_16);
        _16 = (_13.0: f32);
        StorageLive(_17);
        _17 = (_14.0: f32);
        _15 = Add(move _16, move _17);
        StorageDead(_17);
        StorageDead(_16);
        _3 = Add(_3, move _15);
        StorageDead(_15);
        StorageLive(_18);
        StorageLive(_19);
        _19 = Foo::<f32>(const 0f32);
        _18 = [move _19];
        StorageDead(_19);
        StorageLive(_20);
        _20 = const 0_usize;
        _21 = Len(_18);
        _22 = Lt(_20, _21);
        assert(move _22, "index out of bounds: the length is {} but the index is {}", move _21, _20) -> bb3;
    }

    bb3: {
        (_18[_20].0: f32) = Add((_18[_20].0: f32), const 1f32);
        StorageDead(_20);
        StorageLive(_23);
        StorageLive(_24);
        _24 = const 0_usize;
        _25 = Len(_18);
        _26 = Lt(_24, _25);
        assert(move _26, "index out of bounds: the length is {} but the index is {}", move _25, _24) -> bb4;
    }

    bb4: {
        _23 = (_18[_24].0: f32);
        _3 = Add(_3, move _23);
        StorageDead(_23);
        StorageDead(_24);
        StorageLive(_27);
        StorageLive(_28);
        _28 = Bar::<f32> { x: const 0f32 };
        _27 = [move _28];
        StorageDead(_28);
        StorageLive(_29);
        _29 = const 0_usize;
        _30 = Len(_27);
        _31 = Lt(_29, _30);
        assert(move _31, "index out of bounds: the length is {} but the index is {}", move _30, _29) -> bb5;
    }

    bb5: {
        (_27[_29].0: f32) = Add((_27[_29].0: f32), const 1f32);
        StorageDead(_29);
        StorageLive(_32);
        StorageLive(_33);
        _33 = const 0_usize;
        _34 = Len(_27);
        _35 = Lt(_33, _34);
        assert(move _35, "index out of bounds: the length is {} but the index is {}", move _34, _33) -> bb6;
    }

    bb6: {
        _32 = (_27[_33].0: f32);
        _3 = Add(_3, move _32);
        StorageDead(_32);
        StorageDead(_33);
        StorageLive(_36);
        StorageLive(_37);
        _37 = [const 0f32];
        _36 = Foo::<[f32; 1]>(move _37);
        StorageDead(_37);
        StorageLive(_38);
        _38 = const 0_usize;
        _39 = Len((_36.0: [f32; 1]));
        _40 = Lt(_38, _39);
        assert(move _40, "index out of bounds: the length is {} but the index is {}", move _39, _38) -> bb7;
    }

    bb7: {
        (_36.0: [f32; 1])[_38] = Add((_36.0: [f32; 1])[_38], const 1f32);
        StorageDead(_38);
        StorageLive(_41);
        StorageLive(_42);
        _42 = const 0_usize;
        _43 = Len((_36.0: [f32; 1]));
        _44 = Lt(_42, _43);
        assert(move _44, "index out of bounds: the length is {} but the index is {}", move _43, _42) -> bb8;
    }

    bb8: {
        _41 = (_36.0: [f32; 1])[_42];
        _3 = Add(_3, move _41);
        StorageDead(_41);
        StorageDead(_42);
        StorageLive(_45);
        StorageLive(_46);
        _46 = [const 0f32];
        _45 = Bar::<[f32; 1]> { x: move _46 };
        StorageDead(_46);
        StorageLive(_47);
        _47 = const 0_usize;
        _48 = Len((_45.0: [f32; 1]));
        _49 = Lt(_47, _48);
        assert(move _49, "index out of bounds: the length is {} but the index is {}", move _48, _47) -> bb9;
    }

    bb9: {
        (_45.0: [f32; 1])[_47] = Add((_45.0: [f32; 1])[_47], const 1f32);
        StorageDead(_47);
        StorageLive(_50);
        StorageLive(_51);
        _51 = const 0_usize;
        _52 = Len((_45.0: [f32; 1]));
        _53 = Lt(_51, _52);
        assert(move _53, "index out of bounds: the length is {} but the index is {}", move _52, _51) -> bb10;
    }

    bb10: {
        _50 = (_45.0: [f32; 1])[_51];
        _3 = Add(_3, move _50);
        StorageDead(_50);
        StorageDead(_51);
        _0 = _3;
        StorageDead(_45);
        StorageDead(_36);
        StorageDead(_27);
        StorageDead(_18);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_5);
        StorageDead(_3);
        StorageDead(_2);
        return;
    }
}

add_assign::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

add_assign::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

add_assign::{constant#2}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

add_assign::{constant#3}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

add_assign::{constant#4}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

fn mul_assign(_1: A) -> f32 {
    let mut _0: f32;
    let _2: f32;
    let _5: usize;
    let mut _6: usize;
    let mut _7: bool;
    let mut _8: f32;
    let _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _14: f32;
    let mut _15: f32;
    let mut _16: f32;
    let mut _18: Foo<f32>;
    let _19: usize;
    let mut _20: usize;
    let mut _21: bool;
    let mut _22: f32;
    let _23: usize;
    let mut _24: usize;
    let mut _25: bool;
    let mut _27: Bar<f32>;
    let _28: usize;
    let mut _29: usize;
    let mut _30: bool;
    let mut _31: f32;
    let _32: usize;
    let mut _33: usize;
    let mut _34: bool;
    let mut _36: [f32; 1];
    let _37: usize;
    let mut _38: usize;
    let mut _39: bool;
    let mut _40: f32;
    let _41: usize;
    let mut _42: usize;
    let mut _43: bool;
    let mut _45: [f32; 1];
    let _46: usize;
    let mut _47: usize;
    let mut _48: bool;
    let mut _49: f32;
    let _50: usize;
    let mut _51: usize;
    let mut _52: bool;
    scope 1 {
        debug a => _2;
        let mut _3: f32;
        scope 2 {
            debug d => _3;
            let mut _4: [f32; 1];
            scope 3 {
                debug arr => _4;
                let mut _12: Foo<f32>;
                scope 4 {
                    debug foo => _12;
                    let mut _13: Bar<f32>;
                    scope 5 {
                        debug bar => _13;
                        let mut _17: [Foo<f32>; 1];
                        scope 6 {
                            debug arr => _17;
                            let mut _26: [Bar<f32>; 1];
                            scope 7 {
                                debug arr => _26;
                                let mut _35: Foo<[f32; 1]>;
                                scope 8 {
                                    debug arr => _35;
                                    let mut _44: Bar<[f32; 1]>;
                                    scope 9 {
                                        debug arr => _44;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = (_1.0: f32);
        _3 = Add(_2, const 1f32);
        _3 = Mul(_3, const 2f32);
        _4 = [const 1f32];
        _5 = const 0_usize;
        _6 = const 1_usize;
        _7 = Lt(_5, _6);
        assert(move _7, "index out of bounds: the length is {} but the index is {}", move _6, _5) -> bb1;
    }

    bb1: {
        _4[_5] = Mul(_4[_5], const 2f32);
        _9 = const 0_usize;
        _10 = const 1_usize;
        _11 = Lt(_9, _10);
        assert(move _11, "index out of bounds: the length is {} but the index is {}", move _10, _9) -> bb2;
    }

    bb2: {
        _8 = _4[_9];
        _3 = Mul(_3, move _8);
        _12 = Foo::<f32>(const 1f32);
        _13 = Bar::<f32> { x: const 1f32 };
        (_12.0: f32) = Mul((_12.0: f32), const 2f32);
        (_13.0: f32) = Mul((_13.0: f32), const 2f32);
        _15 = (_12.0: f32);
        _16 = (_13.0: f32);
        _14 = Add(move _15, move _16);
        _3 = Mul(_3, move _14);
        _18 = Foo::<f32>(const 1f32);
        _17 = [move _18];
        _19 = const 0_usize;
        _20 = const 1_usize;
        _21 = Lt(_19, _20);
        assert(move _21, "index out of bounds: the length is {} but the index is {}", move _20, _19) -> bb3;
    }

    bb3: {
        (_17[_19].0: f32) = Mul((_17[_19].0: f32), const 2f32);
        _23 = const 0_usize;
        _24 = const 1_usize;
        _25 = Lt(_23, _24);
        assert(move _25, "index out of bounds: the length is {} but the index is {}", move _24, _23) -> bb4;
    }

    bb4: {
        _22 = (_17[_23].0: f32);
        _3 = Mul(_3, move _22);
        _27 = Bar::<f32> { x: const 1f32 };
        _26 = [move _27];
        _28 = const 0_usize;
        _29 = const 1_usize;
        _30 = Lt(_28, _29);
        assert(move _30, "index out of bounds: the length is {} but the index is {}", move _29, _28) -> bb5;
    }

    bb5: {
        (_26[_28].0: f32) = Mul((_26[_28].0: f32), const 2f32);
        _32 = const 0_usize;
        _33 = const 1_usize;
        _34 = Lt(_32, _33);
        assert(move _34, "index out of bounds: the length is {} but the index is {}", move _33, _32) -> bb6;
    }

    bb6: {
        _31 = (_26[_32].0: f32);
        _3 = Mul(_3, move _31);
        _36 = [const 1f32];
        _35 = Foo::<[f32; 1]>(move _36);
        _37 = const 0_usize;
        _38 = const 1_usize;
        _39 = Lt(_37, _38);
        assert(move _39, "index out of bounds: the length is {} but the index is {}", move _38, _37) -> bb7;
    }

    bb7: {
        (_35.0: [f32; 1])[_37] = Mul((_35.0: [f32; 1])[_37], const 2f32);
        _41 = const 0_usize;
        _42 = const 1_usize;
        _43 = Lt(_41, _42);
        assert(move _43, "index out of bounds: the length is {} but the index is {}", move _42, _41) -> bb8;
    }

    bb8: {
        _40 = (_35.0: [f32; 1])[_41];
        _3 = Mul(_3, move _40);
        _45 = [const 1f32];
        _44 = Bar::<[f32; 1]> { x: move _45 };
        _46 = const 0_usize;
        _47 = const 1_usize;
        _48 = Lt(_46, _47);
        assert(move _48, "index out of bounds: the length is {} but the index is {}", move _47, _46) -> bb9;
    }

    bb9: {
        (_44.0: [f32; 1])[_46] = Mul((_44.0: [f32; 1])[_46], const 2f32);
        _50 = const 0_usize;
        _51 = const 1_usize;
        _52 = Lt(_50, _51);
        assert(move _52, "index out of bounds: the length is {} but the index is {}", move _51, _50) -> bb10;
    }

    bb10: {
        _49 = (_44.0: [f32; 1])[_50];
        _3 = Mul(_3, move _49);
        _0 = _3;
        return;
    }
}

// MIR FOR CTFE
fn mul_assign(_1: A) -> f32 {
    let mut _0: f32;
    let _2: f32;
    let mut _4: f32;
    let _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: f32;
    let _10: usize;
    let mut _11: usize;
    let mut _12: bool;
    let mut _15: f32;
    let mut _16: f32;
    let mut _17: f32;
    let mut _19: Foo<f32>;
    let _20: usize;
    let mut _21: usize;
    let mut _22: bool;
    let mut _23: f32;
    let _24: usize;
    let mut _25: usize;
    let mut _26: bool;
    let mut _28: Bar<f32>;
    let _29: usize;
    let mut _30: usize;
    let mut _31: bool;
    let mut _32: f32;
    let _33: usize;
    let mut _34: usize;
    let mut _35: bool;
    let mut _37: [f32; 1];
    let _38: usize;
    let mut _39: usize;
    let mut _40: bool;
    let mut _41: f32;
    let _42: usize;
    let mut _43: usize;
    let mut _44: bool;
    let mut _46: [f32; 1];
    let _47: usize;
    let mut _48: usize;
    let mut _49: bool;
    let mut _50: f32;
    let _51: usize;
    let mut _52: usize;
    let mut _53: bool;
    scope 1 {
        debug a => _2;
        let mut _3: f32;
        scope 2 {
            debug d => _3;
            let mut _5: [f32; 1];
            scope 3 {
                debug arr => _5;
                let mut _13: Foo<f32>;
                scope 4 {
                    debug foo => _13;
                    let mut _14: Bar<f32>;
                    scope 5 {
                        debug bar => _14;
                        let mut _18: [Foo<f32>; 1];
                        scope 6 {
                            debug arr => _18;
                            let mut _27: [Bar<f32>; 1];
                            scope 7 {
                                debug arr => _27;
                                let mut _36: Foo<[f32; 1]>;
                                scope 8 {
                                    debug arr => _36;
                                    let mut _45: Bar<[f32; 1]>;
                                    scope 9 {
                                        debug arr => _45;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_2);
        _2 = (_1.0: f32);
        StorageLive(_3);
        StorageLive(_4);
        _4 = _2;
        _3 = Add(move _4, const 1f32);
        StorageDead(_4);
        _3 = Mul(_3, const 2f32);
        StorageLive(_5);
        _5 = [const 1f32];
        StorageLive(_6);
        _6 = const 0_usize;
        _7 = Len(_5);
        _8 = Lt(_6, _7);
        assert(move _8, "index out of bounds: the length is {} but the index is {}", move _7, _6) -> bb1;
    }

    bb1: {
        _5[_6] = Mul(_5[_6], const 2f32);
        StorageDead(_6);
        StorageLive(_9);
        StorageLive(_10);
        _10 = const 0_usize;
        _11 = Len(_5);
        _12 = Lt(_10, _11);
        assert(move _12, "index out of bounds: the length is {} but the index is {}", move _11, _10) -> bb2;
    }

    bb2: {
        _9 = _5[_10];
        _3 = Mul(_3, move _9);
        StorageDead(_9);
        StorageDead(_10);
        StorageLive(_13);
        _13 = Foo::<f32>(const 1f32);
        StorageLive(_14);
        _14 = Bar::<f32> { x: const 1f32 };
        (_13.0: f32) = Mul((_13.0: f32), const 2f32);
        (_14.0: f32) = Mul((_14.0: f32), const 2f32);
        StorageLive(_15);
        StorageLive(_16);
        _16 = (_13.0: f32);
        StorageLive(_17);
        _17 = (_14.0: f32);
        _15 = Add(move _16, move _17);
        StorageDead(_17);
        StorageDead(_16);
        _3 = Mul(_3, move _15);
        StorageDead(_15);
        StorageLive(_18);
        StorageLive(_19);
        _19 = Foo::<f32>(const 1f32);
        _18 = [move _19];
        StorageDead(_19);
        StorageLive(_20);
        _20 = const 0_usize;
        _21 = Len(_18);
        _22 = Lt(_20, _21);
        assert(move _22, "index out of bounds: the length is {} but the index is {}", move _21, _20) -> bb3;
    }

    bb3: {
        (_18[_20].0: f32) = Mul((_18[_20].0: f32), const 2f32);
        StorageDead(_20);
        StorageLive(_23);
        StorageLive(_24);
        _24 = const 0_usize;
        _25 = Len(_18);
        _26 = Lt(_24, _25);
        assert(move _26, "index out of bounds: the length is {} but the index is {}", move _25, _24) -> bb4;
    }

    bb4: {
        _23 = (_18[_24].0: f32);
        _3 = Mul(_3, move _23);
        StorageDead(_23);
        StorageDead(_24);
        StorageLive(_27);
        StorageLive(_28);
        _28 = Bar::<f32> { x: const 1f32 };
        _27 = [move _28];
        StorageDead(_28);
        StorageLive(_29);
        _29 = const 0_usize;
        _30 = Len(_27);
        _31 = Lt(_29, _30);
        assert(move _31, "index out of bounds: the length is {} but the index is {}", move _30, _29) -> bb5;
    }

    bb5: {
        (_27[_29].0: f32) = Mul((_27[_29].0: f32), const 2f32);
        StorageDead(_29);
        StorageLive(_32);
        StorageLive(_33);
        _33 = const 0_usize;
        _34 = Len(_27);
        _35 = Lt(_33, _34);
        assert(move _35, "index out of bounds: the length is {} but the index is {}", move _34, _33) -> bb6;
    }

    bb6: {
        _32 = (_27[_33].0: f32);
        _3 = Mul(_3, move _32);
        StorageDead(_32);
        StorageDead(_33);
        StorageLive(_36);
        StorageLive(_37);
        _37 = [const 1f32];
        _36 = Foo::<[f32; 1]>(move _37);
        StorageDead(_37);
        StorageLive(_38);
        _38 = const 0_usize;
        _39 = Len((_36.0: [f32; 1]));
        _40 = Lt(_38, _39);
        assert(move _40, "index out of bounds: the length is {} but the index is {}", move _39, _38) -> bb7;
    }

    bb7: {
        (_36.0: [f32; 1])[_38] = Mul((_36.0: [f32; 1])[_38], const 2f32);
        StorageDead(_38);
        StorageLive(_41);
        StorageLive(_42);
        _42 = const 0_usize;
        _43 = Len((_36.0: [f32; 1]));
        _44 = Lt(_42, _43);
        assert(move _44, "index out of bounds: the length is {} but the index is {}", move _43, _42) -> bb8;
    }

    bb8: {
        _41 = (_36.0: [f32; 1])[_42];
        _3 = Mul(_3, move _41);
        StorageDead(_41);
        StorageDead(_42);
        StorageLive(_45);
        StorageLive(_46);
        _46 = [const 1f32];
        _45 = Bar::<[f32; 1]> { x: move _46 };
        StorageDead(_46);
        StorageLive(_47);
        _47 = const 0_usize;
        _48 = Len((_45.0: [f32; 1]));
        _49 = Lt(_47, _48);
        assert(move _49, "index out of bounds: the length is {} but the index is {}", move _48, _47) -> bb9;
    }

    bb9: {
        (_45.0: [f32; 1])[_47] = Mul((_45.0: [f32; 1])[_47], const 2f32);
        StorageDead(_47);
        StorageLive(_50);
        StorageLive(_51);
        _51 = const 0_usize;
        _52 = Len((_45.0: [f32; 1]));
        _53 = Lt(_51, _52);
        assert(move _53, "index out of bounds: the length is {} but the index is {}", move _52, _51) -> bb10;
    }

    bb10: {
        _50 = (_45.0: [f32; 1])[_51];
        _3 = Mul(_3, move _50);
        StorageDead(_50);
        StorageDead(_51);
        _0 = _3;
        StorageDead(_45);
        StorageDead(_36);
        StorageDead(_27);
        StorageDead(_18);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_5);
        StorageDead(_3);
        StorageDead(_2);
        return;
    }
}

mul_assign::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

mul_assign::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

mul_assign::{constant#2}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

mul_assign::{constant#3}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

mul_assign::{constant#4}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

fn div_assign(_1: [f32; 1]) -> f32 {
    debug a => _1;
    let mut _0: f32;
    let _2: f32;
    let _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let _8: usize;
    let mut _9: usize;
    let mut _10: bool;
    let mut _11: f32;
    let _12: usize;
    let mut _13: usize;
    let mut _14: bool;
    let mut _17: f32;
    let mut _18: f32;
    let mut _20: Foo<f32>;
    let _21: usize;
    let mut _22: usize;
    let mut _23: bool;
    let mut _24: f32;
    let _25: usize;
    let mut _26: usize;
    let mut _27: bool;
    let mut _29: Bar<f32>;
    let _30: usize;
    let mut _31: usize;
    let mut _32: bool;
    let mut _33: f32;
    let _34: usize;
    let mut _35: usize;
    let mut _36: bool;
    let mut _38: [f32; 1];
    let _39: usize;
    let mut _40: usize;
    let mut _41: bool;
    let mut _42: f32;
    let _43: usize;
    let mut _44: usize;
    let mut _45: bool;
    let mut _47: [f32; 1];
    let _48: usize;
    let mut _49: usize;
    let mut _50: bool;
    let mut _51: f32;
    let _52: usize;
    let mut _53: usize;
    let mut _54: bool;
    scope 1 {
        debug a => _2;
        let mut _6: f32;
        scope 2 {
            debug d => _6;
            let mut _7: [f32; 1];
            scope 3 {
                debug arr => _7;
                let mut _15: Foo<f32>;
                scope 4 {
                    debug foo => _15;
                    let mut _16: Bar<f32>;
                    scope 5 {
                        debug bar => _16;
                        let mut _19: [Foo<f32>; 1];
                        scope 6 {
                            debug arr => _19;
                            let mut _28: [Bar<f32>; 1];
                            scope 7 {
                                debug arr => _28;
                                let mut _37: Foo<[f32; 1]>;
                                scope 8 {
                                    debug arr => _37;
                                    let mut _46: Bar<[f32; 1]>;
                                    scope 9 {
                                        debug arr => _46;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _3 = const 0_usize;
        _4 = const 1_usize;
        _5 = Lt(_3, _4);
        assert(move _5, "index out of bounds: the length is {} but the index is {}", move _4, _3) -> bb1;
    }

    bb1: {
        _2 = _1[_3];
        _6 = Mul(const 1024f32, _2);
        _6 = Div(_6, const 2f32);
        _7 = [const 4f32];
        _8 = const 0_usize;
        _9 = const 1_usize;
        _10 = Lt(_8, _9);
        assert(move _10, "index out of bounds: the length is {} but the index is {}", move _9, _8) -> bb2;
    }

    bb2: {
        _7[_8] = Div(_7[_8], const 2f32);
        _12 = const 0_usize;
        _13 = const 1_usize;
        _14 = Lt(_12, _13);
        assert(move _14, "index out of bounds: the length is {} but the index is {}", move _13, _12) -> bb3;
    }

    bb3: {
        _11 = _7[_12];
        _6 = Div(_6, move _11);
        _15 = Foo::<f32>(const 4f32);
        _16 = Bar::<f32> { x: const 4f32 };
        (_15.0: f32) = Div((_15.0: f32), const 2f32);
        (_16.0: f32) = Div((_16.0: f32), const 2f32);
        _17 = (_15.0: f32);
        _6 = Div(_6, move _17);
        _18 = (_16.0: f32);
        _6 = Div(_6, move _18);
        _20 = Foo::<f32>(const 4f32);
        _19 = [move _20];
        _21 = const 0_usize;
        _22 = const 1_usize;
        _23 = Lt(_21, _22);
        assert(move _23, "index out of bounds: the length is {} but the index is {}", move _22, _21) -> bb4;
    }

    bb4: {
        (_19[_21].0: f32) = Div((_19[_21].0: f32), const 2f32);
        _25 = const 0_usize;
        _26 = const 1_usize;
        _27 = Lt(_25, _26);
        assert(move _27, "index out of bounds: the length is {} but the index is {}", move _26, _25) -> bb5;
    }

    bb5: {
        _24 = (_19[_25].0: f32);
        _6 = Div(_6, move _24);
        _29 = Bar::<f32> { x: const 4f32 };
        _28 = [move _29];
        _30 = const 0_usize;
        _31 = const 1_usize;
        _32 = Lt(_30, _31);
        assert(move _32, "index out of bounds: the length is {} but the index is {}", move _31, _30) -> bb6;
    }

    bb6: {
        (_28[_30].0: f32) = Div((_28[_30].0: f32), const 2f32);
        _34 = const 0_usize;
        _35 = const 1_usize;
        _36 = Lt(_34, _35);
        assert(move _36, "index out of bounds: the length is {} but the index is {}", move _35, _34) -> bb7;
    }

    bb7: {
        _33 = (_28[_34].0: f32);
        _6 = Div(_6, move _33);
        _38 = [const 4f32];
        _37 = Foo::<[f32; 1]>(move _38);
        _39 = const 0_usize;
        _40 = const 1_usize;
        _41 = Lt(_39, _40);
        assert(move _41, "index out of bounds: the length is {} but the index is {}", move _40, _39) -> bb8;
    }

    bb8: {
        (_37.0: [f32; 1])[_39] = Div((_37.0: [f32; 1])[_39], const 2f32);
        _43 = const 0_usize;
        _44 = const 1_usize;
        _45 = Lt(_43, _44);
        assert(move _45, "index out of bounds: the length is {} but the index is {}", move _44, _43) -> bb9;
    }

    bb9: {
        _42 = (_37.0: [f32; 1])[_43];
        _6 = Div(_6, move _42);
        _47 = [const 4f32];
        _46 = Bar::<[f32; 1]> { x: move _47 };
        _48 = const 0_usize;
        _49 = const 1_usize;
        _50 = Lt(_48, _49);
        assert(move _50, "index out of bounds: the length is {} but the index is {}", move _49, _48) -> bb10;
    }

    bb10: {
        (_46.0: [f32; 1])[_48] = Div((_46.0: [f32; 1])[_48], const 2f32);
        _52 = const 0_usize;
        _53 = const 1_usize;
        _54 = Lt(_52, _53);
        assert(move _54, "index out of bounds: the length is {} but the index is {}", move _53, _52) -> bb11;
    }

    bb11: {
        _51 = (_46.0: [f32; 1])[_52];
        _6 = Div(_6, move _51);
        _0 = _6;
        return;
    }
}

// MIR FOR CTFE
fn div_assign(_1: [f32; 1]) -> f32 {
    debug a => _1;
    let mut _0: f32;
    let _2: f32;
    let _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _7: f32;
    let _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _12: f32;
    let _13: usize;
    let mut _14: usize;
    let mut _15: bool;
    let mut _18: f32;
    let mut _19: f32;
    let mut _21: Foo<f32>;
    let _22: usize;
    let mut _23: usize;
    let mut _24: bool;
    let mut _25: f32;
    let _26: usize;
    let mut _27: usize;
    let mut _28: bool;
    let mut _30: Bar<f32>;
    let _31: usize;
    let mut _32: usize;
    let mut _33: bool;
    let mut _34: f32;
    let _35: usize;
    let mut _36: usize;
    let mut _37: bool;
    let mut _39: [f32; 1];
    let _40: usize;
    let mut _41: usize;
    let mut _42: bool;
    let mut _43: f32;
    let _44: usize;
    let mut _45: usize;
    let mut _46: bool;
    let mut _48: [f32; 1];
    let _49: usize;
    let mut _50: usize;
    let mut _51: bool;
    let mut _52: f32;
    let _53: usize;
    let mut _54: usize;
    let mut _55: bool;
    scope 1 {
        debug a => _2;
        let mut _6: f32;
        scope 2 {
            debug d => _6;
            let mut _8: [f32; 1];
            scope 3 {
                debug arr => _8;
                let mut _16: Foo<f32>;
                scope 4 {
                    debug foo => _16;
                    let mut _17: Bar<f32>;
                    scope 5 {
                        debug bar => _17;
                        let mut _20: [Foo<f32>; 1];
                        scope 6 {
                            debug arr => _20;
                            let mut _29: [Bar<f32>; 1];
                            scope 7 {
                                debug arr => _29;
                                let mut _38: Foo<[f32; 1]>;
                                scope 8 {
                                    debug arr => _38;
                                    let mut _47: Bar<[f32; 1]>;
                                    scope 9 {
                                        debug arr => _47;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = const 0_usize;
        _4 = Len(_1);
        _5 = Lt(_3, _4);
        assert(move _5, "index out of bounds: the length is {} but the index is {}", move _4, _3) -> bb1;
    }

    bb1: {
        _2 = _1[_3];
        StorageDead(_3);
        StorageLive(_6);
        StorageLive(_7);
        _7 = _2;
        _6 = Mul(const 1024f32, move _7);
        StorageDead(_7);
        _6 = Div(_6, const 2f32);
        StorageLive(_8);
        _8 = [const 4f32];
        StorageLive(_9);
        _9 = const 0_usize;
        _10 = Len(_8);
        _11 = Lt(_9, _10);
        assert(move _11, "index out of bounds: the length is {} but the index is {}", move _10, _9) -> bb2;
    }

    bb2: {
        _8[_9] = Div(_8[_9], const 2f32);
        StorageDead(_9);
        StorageLive(_12);
        StorageLive(_13);
        _13 = const 0_usize;
        _14 = Len(_8);
        _15 = Lt(_13, _14);
        assert(move _15, "index out of bounds: the length is {} but the index is {}", move _14, _13) -> bb3;
    }

    bb3: {
        _12 = _8[_13];
        _6 = Div(_6, move _12);
        StorageDead(_12);
        StorageDead(_13);
        StorageLive(_16);
        _16 = Foo::<f32>(const 4f32);
        StorageLive(_17);
        _17 = Bar::<f32> { x: const 4f32 };
        (_16.0: f32) = Div((_16.0: f32), const 2f32);
        (_17.0: f32) = Div((_17.0: f32), const 2f32);
        StorageLive(_18);
        _18 = (_16.0: f32);
        _6 = Div(_6, move _18);
        StorageDead(_18);
        StorageLive(_19);
        _19 = (_17.0: f32);
        _6 = Div(_6, move _19);
        StorageDead(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = Foo::<f32>(const 4f32);
        _20 = [move _21];
        StorageDead(_21);
        StorageLive(_22);
        _22 = const 0_usize;
        _23 = Len(_20);
        _24 = Lt(_22, _23);
        assert(move _24, "index out of bounds: the length is {} but the index is {}", move _23, _22) -> bb4;
    }

    bb4: {
        (_20[_22].0: f32) = Div((_20[_22].0: f32), const 2f32);
        StorageDead(_22);
        StorageLive(_25);
        StorageLive(_26);
        _26 = const 0_usize;
        _27 = Len(_20);
        _28 = Lt(_26, _27);
        assert(move _28, "index out of bounds: the length is {} but the index is {}", move _27, _26) -> bb5;
    }

    bb5: {
        _25 = (_20[_26].0: f32);
        _6 = Div(_6, move _25);
        StorageDead(_25);
        StorageDead(_26);
        StorageLive(_29);
        StorageLive(_30);
        _30 = Bar::<f32> { x: const 4f32 };
        _29 = [move _30];
        StorageDead(_30);
        StorageLive(_31);
        _31 = const 0_usize;
        _32 = Len(_29);
        _33 = Lt(_31, _32);
        assert(move _33, "index out of bounds: the length is {} but the index is {}", move _32, _31) -> bb6;
    }

    bb6: {
        (_29[_31].0: f32) = Div((_29[_31].0: f32), const 2f32);
        StorageDead(_31);
        StorageLive(_34);
        StorageLive(_35);
        _35 = const 0_usize;
        _36 = Len(_29);
        _37 = Lt(_35, _36);
        assert(move _37, "index out of bounds: the length is {} but the index is {}", move _36, _35) -> bb7;
    }

    bb7: {
        _34 = (_29[_35].0: f32);
        _6 = Div(_6, move _34);
        StorageDead(_34);
        StorageDead(_35);
        StorageLive(_38);
        StorageLive(_39);
        _39 = [const 4f32];
        _38 = Foo::<[f32; 1]>(move _39);
        StorageDead(_39);
        StorageLive(_40);
        _40 = const 0_usize;
        _41 = Len((_38.0: [f32; 1]));
        _42 = Lt(_40, _41);
        assert(move _42, "index out of bounds: the length is {} but the index is {}", move _41, _40) -> bb8;
    }

    bb8: {
        (_38.0: [f32; 1])[_40] = Div((_38.0: [f32; 1])[_40], const 2f32);
        StorageDead(_40);
        StorageLive(_43);
        StorageLive(_44);
        _44 = const 0_usize;
        _45 = Len((_38.0: [f32; 1]));
        _46 = Lt(_44, _45);
        assert(move _46, "index out of bounds: the length is {} but the index is {}", move _45, _44) -> bb9;
    }

    bb9: {
        _43 = (_38.0: [f32; 1])[_44];
        _6 = Div(_6, move _43);
        StorageDead(_43);
        StorageDead(_44);
        StorageLive(_47);
        StorageLive(_48);
        _48 = [const 4f32];
        _47 = Bar::<[f32; 1]> { x: move _48 };
        StorageDead(_48);
        StorageLive(_49);
        _49 = const 0_usize;
        _50 = Len((_47.0: [f32; 1]));
        _51 = Lt(_49, _50);
        assert(move _51, "index out of bounds: the length is {} but the index is {}", move _50, _49) -> bb10;
    }

    bb10: {
        (_47.0: [f32; 1])[_49] = Div((_47.0: [f32; 1])[_49], const 2f32);
        StorageDead(_49);
        StorageLive(_52);
        StorageLive(_53);
        _53 = const 0_usize;
        _54 = Len((_47.0: [f32; 1]));
        _55 = Lt(_53, _54);
        assert(move _55, "index out of bounds: the length is {} but the index is {}", move _54, _53) -> bb11;
    }

    bb11: {
        _52 = (_47.0: [f32; 1])[_53];
        _6 = Div(_6, move _52);
        StorageDead(_52);
        StorageDead(_53);
        _0 = _6;
        StorageDead(_47);
        StorageDead(_38);
        StorageDead(_29);
        StorageDead(_20);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_8);
        StorageDead(_6);
        StorageDead(_2);
        return;
    }
}

div_assign::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

div_assign::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

div_assign::{constant#2}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

div_assign::{constant#3}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

div_assign::{constant#4}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

div_assign::{constant#5}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

fn rem_assign(_1: W) -> f32 {
    let mut _0: f32;
    let _2: f32;
    let _5: usize;
    let mut _6: usize;
    let mut _7: bool;
    let mut _8: f32;
    let mut _9: f32;
    let _10: usize;
    let mut _11: usize;
    let mut _12: bool;
    let mut _15: f32;
    let mut _16: f32;
    let mut _17: f32;
    let mut _18: f32;
    let mut _20: Foo<f32>;
    let _21: usize;
    let mut _22: usize;
    let mut _23: bool;
    let mut _24: f32;
    let mut _25: f32;
    let _26: usize;
    let mut _27: usize;
    let mut _28: bool;
    let mut _30: Bar<f32>;
    let _31: usize;
    let mut _32: usize;
    let mut _33: bool;
    let mut _34: f32;
    let mut _35: f32;
    let _36: usize;
    let mut _37: usize;
    let mut _38: bool;
    let mut _40: [f32; 1];
    let _41: usize;
    let mut _42: usize;
    let mut _43: bool;
    let mut _44: f32;
    let mut _45: f32;
    let _46: usize;
    let mut _47: usize;
    let mut _48: bool;
    let mut _50: [f32; 1];
    let _51: usize;
    let mut _52: usize;
    let mut _53: bool;
    let mut _54: f32;
    let mut _55: f32;
    let _56: usize;
    let mut _57: usize;
    let mut _58: bool;
    scope 1 {
        debug a => _2;
        let mut _3: f32;
        scope 2 {
            debug d => _3;
            let mut _4: [f32; 1];
            scope 3 {
                debug arr => _4;
                let mut _13: Foo<f32>;
                scope 4 {
                    debug foo => _13;
                    let mut _14: Bar<f32>;
                    scope 5 {
                        debug bar => _14;
                        let mut _19: [Foo<f32>; 1];
                        scope 6 {
                            debug arr => _19;
                            let mut _29: [Bar<f32>; 1];
                            scope 7 {
                                debug arr => _29;
                                let mut _39: Foo<[f32; 1]>;
                                scope 8 {
                                    debug arr => _39;
                                    let mut _49: Bar<[f32; 1]>;
                                    scope 9 {
                                        debug arr => _49;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = (_1.0: f32);
        _3 = _2;
        _3 = Rem(_3, const 10f32);
        _3 = Add(_3, const 10f32);
        _4 = [const 3f32];
        _5 = const 0_usize;
        _6 = const 1_usize;
        _7 = Lt(_5, _6);
        assert(move _7, "index out of bounds: the length is {} but the index is {}", move _6, _5) -> bb1;
    }

    bb1: {
        _4[_5] = Rem(_4[_5], const 2f32);
        _10 = const 0_usize;
        _11 = const 1_usize;
        _12 = Lt(_10, _11);
        assert(move _12, "index out of bounds: the length is {} but the index is {}", move _11, _10) -> bb2;
    }

    bb2: {
        _9 = _4[_10];
        _8 = Add(const 9f32, move _9);
        _3 = Rem(_3, move _8);
        _3 = Add(_3, const 10f32);
        _13 = Foo::<f32>(const 5f32);
        _14 = Bar::<f32> { x: const 7f32 };
        (_13.0: f32) = Rem((_13.0: f32), const 2f32);
        (_14.0: f32) = Rem((_14.0: f32), const 2f32);
        _17 = (_13.0: f32);
        _16 = Add(const 8f32, move _17);
        _18 = (_14.0: f32);
        _15 = Add(move _16, move _18);
        _3 = Rem(_3, move _15);
        _3 = Add(_3, const 10f32);
        _20 = Foo::<f32>(const 4f32);
        _19 = [move _20];
        _21 = const 0_usize;
        _22 = const 1_usize;
        _23 = Lt(_21, _22);
        assert(move _23, "index out of bounds: the length is {} but the index is {}", move _22, _21) -> bb3;
    }

    bb3: {
        (_19[_21].0: f32) = Rem((_19[_21].0: f32), const 3f32);
        _26 = const 0_usize;
        _27 = const 1_usize;
        _28 = Lt(_26, _27);
        assert(move _28, "index out of bounds: the length is {} but the index is {}", move _27, _26) -> bb4;
    }

    bb4: {
        _25 = (_19[_26].0: f32);
        _24 = Add(const 9f32, move _25);
        _3 = Rem(_3, move _24);
        _3 = Add(_3, const 10f32);
        _30 = Bar::<f32> { x: const 7f32 };
        _29 = [move _30];
        _31 = const 0_usize;
        _32 = const 1_usize;
        _33 = Lt(_31, _32);
        assert(move _33, "index out of bounds: the length is {} but the index is {}", move _32, _31) -> bb5;
    }

    bb5: {
        (_29[_31].0: f32) = Rem((_29[_31].0: f32), const 3f32);
        _36 = const 0_usize;
        _37 = const 1_usize;
        _38 = Lt(_36, _37);
        assert(move _38, "index out of bounds: the length is {} but the index is {}", move _37, _36) -> bb6;
    }

    bb6: {
        _35 = (_29[_36].0: f32);
        _34 = Add(const 9f32, move _35);
        _3 = Rem(_3, move _34);
        _3 = Add(_3, const 10f32);
        _40 = [const 6f32];
        _39 = Foo::<[f32; 1]>(move _40);
        _41 = const 0_usize;
        _42 = const 1_usize;
        _43 = Lt(_41, _42);
        assert(move _43, "index out of bounds: the length is {} but the index is {}", move _42, _41) -> bb7;
    }

    bb7: {
        (_39.0: [f32; 1])[_41] = Rem((_39.0: [f32; 1])[_41], const 5f32);
        _46 = const 0_usize;
        _47 = const 1_usize;
        _48 = Lt(_46, _47);
        assert(move _48, "index out of bounds: the length is {} but the index is {}", move _47, _46) -> bb8;
    }

    bb8: {
        _45 = (_39.0: [f32; 1])[_46];
        _44 = Add(const 9f32, move _45);
        _3 = Rem(_3, move _44);
        _50 = [const 11f32];
        _49 = Bar::<[f32; 1]> { x: move _50 };
        _51 = const 0_usize;
        _52 = const 1_usize;
        _53 = Lt(_51, _52);
        assert(move _53, "index out of bounds: the length is {} but the index is {}", move _52, _51) -> bb9;
    }

    bb9: {
        (_49.0: [f32; 1])[_51] = Rem((_49.0: [f32; 1])[_51], const 5f32);
        _56 = const 0_usize;
        _57 = const 1_usize;
        _58 = Lt(_56, _57);
        assert(move _58, "index out of bounds: the length is {} but the index is {}", move _57, _56) -> bb10;
    }

    bb10: {
        _55 = (_49.0: [f32; 1])[_56];
        _54 = Add(const 9f32, move _55);
        _3 = Rem(_3, move _54);
        _0 = _3;
        return;
    }
}

// MIR FOR CTFE
fn rem_assign(_1: W) -> f32 {
    let mut _0: f32;
    let _2: f32;
    let _5: usize;
    let mut _6: usize;
    let mut _7: bool;
    let mut _8: f32;
    let mut _9: f32;
    let _10: usize;
    let mut _11: usize;
    let mut _12: bool;
    let mut _15: f32;
    let mut _16: f32;
    let mut _17: f32;
    let mut _18: f32;
    let mut _20: Foo<f32>;
    let _21: usize;
    let mut _22: usize;
    let mut _23: bool;
    let mut _24: f32;
    let mut _25: f32;
    let _26: usize;
    let mut _27: usize;
    let mut _28: bool;
    let mut _30: Bar<f32>;
    let _31: usize;
    let mut _32: usize;
    let mut _33: bool;
    let mut _34: f32;
    let mut _35: f32;
    let _36: usize;
    let mut _37: usize;
    let mut _38: bool;
    let mut _40: [f32; 1];
    let _41: usize;
    let mut _42: usize;
    let mut _43: bool;
    let mut _44: f32;
    let mut _45: f32;
    let _46: usize;
    let mut _47: usize;
    let mut _48: bool;
    let mut _50: [f32; 1];
    let _51: usize;
    let mut _52: usize;
    let mut _53: bool;
    let mut _54: f32;
    let mut _55: f32;
    let _56: usize;
    let mut _57: usize;
    let mut _58: bool;
    scope 1 {
        debug a => _2;
        let mut _3: f32;
        scope 2 {
            debug d => _3;
            let mut _4: [f32; 1];
            scope 3 {
                debug arr => _4;
                let mut _13: Foo<f32>;
                scope 4 {
                    debug foo => _13;
                    let mut _14: Bar<f32>;
                    scope 5 {
                        debug bar => _14;
                        let mut _19: [Foo<f32>; 1];
                        scope 6 {
                            debug arr => _19;
                            let mut _29: [Bar<f32>; 1];
                            scope 7 {
                                debug arr => _29;
                                let mut _39: Foo<[f32; 1]>;
                                scope 8 {
                                    debug arr => _39;
                                    let mut _49: Bar<[f32; 1]>;
                                    scope 9 {
                                        debug arr => _49;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_2);
        _2 = (_1.0: f32);
        StorageLive(_3);
        _3 = _2;
        _3 = Rem(_3, const 10f32);
        _3 = Add(_3, const 10f32);
        StorageLive(_4);
        _4 = [const 3f32];
        StorageLive(_5);
        _5 = const 0_usize;
        _6 = Len(_4);
        _7 = Lt(_5, _6);
        assert(move _7, "index out of bounds: the length is {} but the index is {}", move _6, _5) -> bb1;
    }

    bb1: {
        _4[_5] = Rem(_4[_5], const 2f32);
        StorageDead(_5);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = const 0_usize;
        _11 = Len(_4);
        _12 = Lt(_10, _11);
        assert(move _12, "index out of bounds: the length is {} but the index is {}", move _11, _10) -> bb2;
    }

    bb2: {
        _9 = _4[_10];
        _8 = Add(const 9f32, move _9);
        StorageDead(_9);
        _3 = Rem(_3, move _8);
        StorageDead(_8);
        StorageDead(_10);
        _3 = Add(_3, const 10f32);
        StorageLive(_13);
        _13 = Foo::<f32>(const 5f32);
        StorageLive(_14);
        _14 = Bar::<f32> { x: const 7f32 };
        (_13.0: f32) = Rem((_13.0: f32), const 2f32);
        (_14.0: f32) = Rem((_14.0: f32), const 2f32);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = (_13.0: f32);
        _16 = Add(const 8f32, move _17);
        StorageDead(_17);
        StorageLive(_18);
        _18 = (_14.0: f32);
        _15 = Add(move _16, move _18);
        StorageDead(_18);
        StorageDead(_16);
        _3 = Rem(_3, move _15);
        StorageDead(_15);
        _3 = Add(_3, const 10f32);
        StorageLive(_19);
        StorageLive(_20);
        _20 = Foo::<f32>(const 4f32);
        _19 = [move _20];
        StorageDead(_20);
        StorageLive(_21);
        _21 = const 0_usize;
        _22 = Len(_19);
        _23 = Lt(_21, _22);
        assert(move _23, "index out of bounds: the length is {} but the index is {}", move _22, _21) -> bb3;
    }

    bb3: {
        (_19[_21].0: f32) = Rem((_19[_21].0: f32), const 3f32);
        StorageDead(_21);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = const 0_usize;
        _27 = Len(_19);
        _28 = Lt(_26, _27);
        assert(move _28, "index out of bounds: the length is {} but the index is {}", move _27, _26) -> bb4;
    }

    bb4: {
        _25 = (_19[_26].0: f32);
        _24 = Add(const 9f32, move _25);
        StorageDead(_25);
        _3 = Rem(_3, move _24);
        StorageDead(_24);
        StorageDead(_26);
        _3 = Add(_3, const 10f32);
        StorageLive(_29);
        StorageLive(_30);
        _30 = Bar::<f32> { x: const 7f32 };
        _29 = [move _30];
        StorageDead(_30);
        StorageLive(_31);
        _31 = const 0_usize;
        _32 = Len(_29);
        _33 = Lt(_31, _32);
        assert(move _33, "index out of bounds: the length is {} but the index is {}", move _32, _31) -> bb5;
    }

    bb5: {
        (_29[_31].0: f32) = Rem((_29[_31].0: f32), const 3f32);
        StorageDead(_31);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = const 0_usize;
        _37 = Len(_29);
        _38 = Lt(_36, _37);
        assert(move _38, "index out of bounds: the length is {} but the index is {}", move _37, _36) -> bb6;
    }

    bb6: {
        _35 = (_29[_36].0: f32);
        _34 = Add(const 9f32, move _35);
        StorageDead(_35);
        _3 = Rem(_3, move _34);
        StorageDead(_34);
        StorageDead(_36);
        _3 = Add(_3, const 10f32);
        StorageLive(_39);
        StorageLive(_40);
        _40 = [const 6f32];
        _39 = Foo::<[f32; 1]>(move _40);
        StorageDead(_40);
        StorageLive(_41);
        _41 = const 0_usize;
        _42 = Len((_39.0: [f32; 1]));
        _43 = Lt(_41, _42);
        assert(move _43, "index out of bounds: the length is {} but the index is {}", move _42, _41) -> bb7;
    }

    bb7: {
        (_39.0: [f32; 1])[_41] = Rem((_39.0: [f32; 1])[_41], const 5f32);
        StorageDead(_41);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = const 0_usize;
        _47 = Len((_39.0: [f32; 1]));
        _48 = Lt(_46, _47);
        assert(move _48, "index out of bounds: the length is {} but the index is {}", move _47, _46) -> bb8;
    }

    bb8: {
        _45 = (_39.0: [f32; 1])[_46];
        _44 = Add(const 9f32, move _45);
        StorageDead(_45);
        _3 = Rem(_3, move _44);
        StorageDead(_44);
        StorageDead(_46);
        StorageLive(_49);
        StorageLive(_50);
        _50 = [const 11f32];
        _49 = Bar::<[f32; 1]> { x: move _50 };
        StorageDead(_50);
        StorageLive(_51);
        _51 = const 0_usize;
        _52 = Len((_49.0: [f32; 1]));
        _53 = Lt(_51, _52);
        assert(move _53, "index out of bounds: the length is {} but the index is {}", move _52, _51) -> bb9;
    }

    bb9: {
        (_49.0: [f32; 1])[_51] = Rem((_49.0: [f32; 1])[_51], const 5f32);
        StorageDead(_51);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = const 0_usize;
        _57 = Len((_49.0: [f32; 1]));
        _58 = Lt(_56, _57);
        assert(move _58, "index out of bounds: the length is {} but the index is {}", move _57, _56) -> bb10;
    }

    bb10: {
        _55 = (_49.0: [f32; 1])[_56];
        _54 = Add(const 9f32, move _55);
        StorageDead(_55);
        _3 = Rem(_3, move _54);
        StorageDead(_54);
        StorageDead(_56);
        _0 = _3;
        StorageDead(_49);
        StorageDead(_39);
        StorageDead(_29);
        StorageDead(_19);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        return;
    }
}

rem_assign::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

rem_assign::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

rem_assign::{constant#2}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

rem_assign::{constant#3}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

rem_assign::{constant#4}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

fn sub_assign(_1: W) -> f32 {
    let mut _0: f32;
    let _2: f32;
    let _5: usize;
    let mut _6: usize;
    let mut _7: bool;
    let mut _8: f32;
    let _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _14: f32;
    let mut _15: f32;
    let mut _16: f32;
    let mut _18: Foo<f32>;
    let _19: usize;
    let mut _20: usize;
    let mut _21: bool;
    let mut _22: f32;
    let _23: usize;
    let mut _24: usize;
    let mut _25: bool;
    let mut _27: Bar<f32>;
    let _28: usize;
    let mut _29: usize;
    let mut _30: bool;
    let mut _31: f32;
    let _32: usize;
    let mut _33: usize;
    let mut _34: bool;
    let mut _36: [f32; 1];
    let _37: usize;
    let mut _38: usize;
    let mut _39: bool;
    let mut _40: f32;
    let _41: usize;
    let mut _42: usize;
    let mut _43: bool;
    let mut _45: [f32; 1];
    let _46: usize;
    let mut _47: usize;
    let mut _48: bool;
    let mut _49: f32;
    let _50: usize;
    let mut _51: usize;
    let mut _52: bool;
    scope 1 {
        debug a => _2;
        let mut _3: f32;
        scope 2 {
            debug d => _3;
            let mut _4: [f32; 1];
            scope 3 {
                debug arr => _4;
                let mut _12: Foo<f32>;
                scope 4 {
                    debug foo => _12;
                    let mut _13: Bar<f32>;
                    scope 5 {
                        debug bar => _13;
                        let mut _17: [Foo<f32>; 1];
                        scope 6 {
                            debug arr => _17;
                            let mut _26: [Bar<f32>; 1];
                            scope 7 {
                                debug arr => _26;
                                let mut _35: Foo<[f32; 1]>;
                                scope 8 {
                                    debug arr => _35;
                                    let mut _44: Bar<[f32; 1]>;
                                    scope 9 {
                                        debug arr => _44;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = (_1.0: f32);
        _3 = _2;
        _3 = Sub(_3, const 1f32);
        _4 = [const 2f32];
        _5 = const 0_usize;
        _6 = const 1_usize;
        _7 = Lt(_5, _6);
        assert(move _7, "index out of bounds: the length is {} but the index is {}", move _6, _5) -> bb1;
    }

    bb1: {
        _4[_5] = Sub(_4[_5], const 1f32);
        _9 = const 0_usize;
        _10 = const 1_usize;
        _11 = Lt(_9, _10);
        assert(move _11, "index out of bounds: the length is {} but the index is {}", move _10, _9) -> bb2;
    }

    bb2: {
        _8 = _4[_9];
        _3 = Sub(_3, move _8);
        _12 = Foo::<f32>(const 2f32);
        _13 = Bar::<f32> { x: const 2f32 };
        (_12.0: f32) = Sub((_12.0: f32), const 1f32);
        (_13.0: f32) = Sub((_13.0: f32), const 1f32);
        _15 = (_12.0: f32);
        _16 = (_13.0: f32);
        _14 = Add(move _15, move _16);
        _3 = Sub(_3, move _14);
        _18 = Foo::<f32>(const 2f32);
        _17 = [move _18];
        _19 = const 0_usize;
        _20 = const 1_usize;
        _21 = Lt(_19, _20);
        assert(move _21, "index out of bounds: the length is {} but the index is {}", move _20, _19) -> bb3;
    }

    bb3: {
        (_17[_19].0: f32) = Sub((_17[_19].0: f32), const 1f32);
        _23 = const 0_usize;
        _24 = const 1_usize;
        _25 = Lt(_23, _24);
        assert(move _25, "index out of bounds: the length is {} but the index is {}", move _24, _23) -> bb4;
    }

    bb4: {
        _22 = (_17[_23].0: f32);
        _3 = Sub(_3, move _22);
        _27 = Bar::<f32> { x: const 2f32 };
        _26 = [move _27];
        _28 = const 0_usize;
        _29 = const 1_usize;
        _30 = Lt(_28, _29);
        assert(move _30, "index out of bounds: the length is {} but the index is {}", move _29, _28) -> bb5;
    }

    bb5: {
        (_26[_28].0: f32) = Sub((_26[_28].0: f32), const 1f32);
        _32 = const 0_usize;
        _33 = const 1_usize;
        _34 = Lt(_32, _33);
        assert(move _34, "index out of bounds: the length is {} but the index is {}", move _33, _32) -> bb6;
    }

    bb6: {
        _31 = (_26[_32].0: f32);
        _3 = Sub(_3, move _31);
        _36 = [const 2f32];
        _35 = Foo::<[f32; 1]>(move _36);
        _37 = const 0_usize;
        _38 = const 1_usize;
        _39 = Lt(_37, _38);
        assert(move _39, "index out of bounds: the length is {} but the index is {}", move _38, _37) -> bb7;
    }

    bb7: {
        (_35.0: [f32; 1])[_37] = Sub((_35.0: [f32; 1])[_37], const 1f32);
        _41 = const 0_usize;
        _42 = const 1_usize;
        _43 = Lt(_41, _42);
        assert(move _43, "index out of bounds: the length is {} but the index is {}", move _42, _41) -> bb8;
    }

    bb8: {
        _40 = (_35.0: [f32; 1])[_41];
        _3 = Sub(_3, move _40);
        _45 = [const 2f32];
        _44 = Bar::<[f32; 1]> { x: move _45 };
        _46 = const 0_usize;
        _47 = const 1_usize;
        _48 = Lt(_46, _47);
        assert(move _48, "index out of bounds: the length is {} but the index is {}", move _47, _46) -> bb9;
    }

    bb9: {
        (_44.0: [f32; 1])[_46] = Sub((_44.0: [f32; 1])[_46], const 1f32);
        _50 = const 0_usize;
        _51 = const 1_usize;
        _52 = Lt(_50, _51);
        assert(move _52, "index out of bounds: the length is {} but the index is {}", move _51, _50) -> bb10;
    }

    bb10: {
        _49 = (_44.0: [f32; 1])[_50];
        _3 = Sub(_3, move _49);
        _0 = _3;
        return;
    }
}

// MIR FOR CTFE
fn sub_assign(_1: W) -> f32 {
    let mut _0: f32;
    let _2: f32;
    let _5: usize;
    let mut _6: usize;
    let mut _7: bool;
    let mut _8: f32;
    let _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _14: f32;
    let mut _15: f32;
    let mut _16: f32;
    let mut _18: Foo<f32>;
    let _19: usize;
    let mut _20: usize;
    let mut _21: bool;
    let mut _22: f32;
    let _23: usize;
    let mut _24: usize;
    let mut _25: bool;
    let mut _27: Bar<f32>;
    let _28: usize;
    let mut _29: usize;
    let mut _30: bool;
    let mut _31: f32;
    let _32: usize;
    let mut _33: usize;
    let mut _34: bool;
    let mut _36: [f32; 1];
    let _37: usize;
    let mut _38: usize;
    let mut _39: bool;
    let mut _40: f32;
    let _41: usize;
    let mut _42: usize;
    let mut _43: bool;
    let mut _45: [f32; 1];
    let _46: usize;
    let mut _47: usize;
    let mut _48: bool;
    let mut _49: f32;
    let _50: usize;
    let mut _51: usize;
    let mut _52: bool;
    scope 1 {
        debug a => _2;
        let mut _3: f32;
        scope 2 {
            debug d => _3;
            let mut _4: [f32; 1];
            scope 3 {
                debug arr => _4;
                let mut _12: Foo<f32>;
                scope 4 {
                    debug foo => _12;
                    let mut _13: Bar<f32>;
                    scope 5 {
                        debug bar => _13;
                        let mut _17: [Foo<f32>; 1];
                        scope 6 {
                            debug arr => _17;
                            let mut _26: [Bar<f32>; 1];
                            scope 7 {
                                debug arr => _26;
                                let mut _35: Foo<[f32; 1]>;
                                scope 8 {
                                    debug arr => _35;
                                    let mut _44: Bar<[f32; 1]>;
                                    scope 9 {
                                        debug arr => _44;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_2);
        _2 = (_1.0: f32);
        StorageLive(_3);
        _3 = _2;
        _3 = Sub(_3, const 1f32);
        StorageLive(_4);
        _4 = [const 2f32];
        StorageLive(_5);
        _5 = const 0_usize;
        _6 = Len(_4);
        _7 = Lt(_5, _6);
        assert(move _7, "index out of bounds: the length is {} but the index is {}", move _6, _5) -> bb1;
    }

    bb1: {
        _4[_5] = Sub(_4[_5], const 1f32);
        StorageDead(_5);
        StorageLive(_8);
        StorageLive(_9);
        _9 = const 0_usize;
        _10 = Len(_4);
        _11 = Lt(_9, _10);
        assert(move _11, "index out of bounds: the length is {} but the index is {}", move _10, _9) -> bb2;
    }

    bb2: {
        _8 = _4[_9];
        _3 = Sub(_3, move _8);
        StorageDead(_8);
        StorageDead(_9);
        StorageLive(_12);
        _12 = Foo::<f32>(const 2f32);
        StorageLive(_13);
        _13 = Bar::<f32> { x: const 2f32 };
        (_12.0: f32) = Sub((_12.0: f32), const 1f32);
        (_13.0: f32) = Sub((_13.0: f32), const 1f32);
        StorageLive(_14);
        StorageLive(_15);
        _15 = (_12.0: f32);
        StorageLive(_16);
        _16 = (_13.0: f32);
        _14 = Add(move _15, move _16);
        StorageDead(_16);
        StorageDead(_15);
        _3 = Sub(_3, move _14);
        StorageDead(_14);
        StorageLive(_17);
        StorageLive(_18);
        _18 = Foo::<f32>(const 2f32);
        _17 = [move _18];
        StorageDead(_18);
        StorageLive(_19);
        _19 = const 0_usize;
        _20 = Len(_17);
        _21 = Lt(_19, _20);
        assert(move _21, "index out of bounds: the length is {} but the index is {}", move _20, _19) -> bb3;
    }

    bb3: {
        (_17[_19].0: f32) = Sub((_17[_19].0: f32), const 1f32);
        StorageDead(_19);
        StorageLive(_22);
        StorageLive(_23);
        _23 = const 0_usize;
        _24 = Len(_17);
        _25 = Lt(_23, _24);
        assert(move _25, "index out of bounds: the length is {} but the index is {}", move _24, _23) -> bb4;
    }

    bb4: {
        _22 = (_17[_23].0: f32);
        _3 = Sub(_3, move _22);
        StorageDead(_22);
        StorageDead(_23);
        StorageLive(_26);
        StorageLive(_27);
        _27 = Bar::<f32> { x: const 2f32 };
        _26 = [move _27];
        StorageDead(_27);
        StorageLive(_28);
        _28 = const 0_usize;
        _29 = Len(_26);
        _30 = Lt(_28, _29);
        assert(move _30, "index out of bounds: the length is {} but the index is {}", move _29, _28) -> bb5;
    }

    bb5: {
        (_26[_28].0: f32) = Sub((_26[_28].0: f32), const 1f32);
        StorageDead(_28);
        StorageLive(_31);
        StorageLive(_32);
        _32 = const 0_usize;
        _33 = Len(_26);
        _34 = Lt(_32, _33);
        assert(move _34, "index out of bounds: the length is {} but the index is {}", move _33, _32) -> bb6;
    }

    bb6: {
        _31 = (_26[_32].0: f32);
        _3 = Sub(_3, move _31);
        StorageDead(_31);
        StorageDead(_32);
        StorageLive(_35);
        StorageLive(_36);
        _36 = [const 2f32];
        _35 = Foo::<[f32; 1]>(move _36);
        StorageDead(_36);
        StorageLive(_37);
        _37 = const 0_usize;
        _38 = Len((_35.0: [f32; 1]));
        _39 = Lt(_37, _38);
        assert(move _39, "index out of bounds: the length is {} but the index is {}", move _38, _37) -> bb7;
    }

    bb7: {
        (_35.0: [f32; 1])[_37] = Sub((_35.0: [f32; 1])[_37], const 1f32);
        StorageDead(_37);
        StorageLive(_40);
        StorageLive(_41);
        _41 = const 0_usize;
        _42 = Len((_35.0: [f32; 1]));
        _43 = Lt(_41, _42);
        assert(move _43, "index out of bounds: the length is {} but the index is {}", move _42, _41) -> bb8;
    }

    bb8: {
        _40 = (_35.0: [f32; 1])[_41];
        _3 = Sub(_3, move _40);
        StorageDead(_40);
        StorageDead(_41);
        StorageLive(_44);
        StorageLive(_45);
        _45 = [const 2f32];
        _44 = Bar::<[f32; 1]> { x: move _45 };
        StorageDead(_45);
        StorageLive(_46);
        _46 = const 0_usize;
        _47 = Len((_44.0: [f32; 1]));
        _48 = Lt(_46, _47);
        assert(move _48, "index out of bounds: the length is {} but the index is {}", move _47, _46) -> bb9;
    }

    bb9: {
        (_44.0: [f32; 1])[_46] = Sub((_44.0: [f32; 1])[_46], const 1f32);
        StorageDead(_46);
        StorageLive(_49);
        StorageLive(_50);
        _50 = const 0_usize;
        _51 = Len((_44.0: [f32; 1]));
        _52 = Lt(_50, _51);
        assert(move _52, "index out of bounds: the length is {} but the index is {}", move _51, _50) -> bb10;
    }

    bb10: {
        _49 = (_44.0: [f32; 1])[_50];
        _3 = Sub(_3, move _49);
        StorageDead(_49);
        StorageDead(_50);
        _0 = _3;
        StorageDead(_44);
        StorageDead(_35);
        StorageDead(_26);
        StorageDead(_17);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        return;
    }
}

sub_assign::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

sub_assign::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

sub_assign::{constant#2}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

sub_assign::{constant#3}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

sub_assign::{constant#4}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&f32, &f32);
    let mut _2: &f32;
    let _3: f32;
    let mut _4: &f32;
    let _5: f32;
    let _6: &f32;
    let _7: &f32;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: f32;
    let mut _11: f32;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&f32, &f32);
    let mut _16: &f32;
    let _17: f32;
    let mut _18: (f32,);
    let mut _19: &f32;
    let _20: f32;
    let _21: &f32;
    let _22: &f32;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: f32;
    let mut _26: f32;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _30: (&f32, &f32);
    let mut _31: &f32;
    let _32: f32;
    let mut _33: &f32;
    let _34: f32;
    let _35: &f32;
    let _36: &f32;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: f32;
    let mut _40: f32;
    let _42: !;
    let mut _43: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _44: (&f32, &f32);
    let mut _45: &f32;
    let _46: f32;
    let mut _47: W;
    let mut _48: &f32;
    let _49: f32;
    let _50: &f32;
    let _51: &f32;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: f32;
    let mut _55: f32;
    let _57: !;
    let mut _58: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _59: (&f32, &f32);
    let mut _60: &f32;
    let _61: f32;
    let mut _62: &f32;
    let _63: f32;
    let _64: &f32;
    let _65: &f32;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: f32;
    let mut _69: f32;
    let _71: !;
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _73: (&f32, &f32);
    let mut _74: &f32;
    let _75: f32;
    let mut _76: A;
    let mut _77: &f32;
    let _78: f32;
    let _79: &f32;
    let _80: &f32;
    let mut _81: bool;
    let mut _82: bool;
    let mut _83: f32;
    let mut _84: f32;
    let _86: !;
    let mut _87: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _88: (&f32, &f32);
    let mut _89: &f32;
    let _90: f32;
    let mut _91: &f32;
    let _92: f32;
    let _93: &f32;
    let _94: &f32;
    let mut _95: bool;
    let mut _96: bool;
    let mut _97: f32;
    let mut _98: f32;
    let _100: !;
    let mut _101: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _102: (&f32, &f32);
    let mut _103: &f32;
    let _104: f32;
    let mut _105: [f32; 1];
    let mut _106: &f32;
    let _107: f32;
    let _108: &f32;
    let _109: &f32;
    let mut _110: bool;
    let mut _111: bool;
    let mut _112: f32;
    let mut _113: f32;
    let _115: !;
    let mut _116: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _117: (&f32, &f32);
    let mut _118: &f32;
    let _119: f32;
    let mut _120: &f32;
    let _121: f32;
    let _122: &f32;
    let _123: &f32;
    let mut _124: bool;
    let mut _125: bool;
    let mut _126: f32;
    let mut _127: f32;
    let _129: !;
    let mut _130: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _131: (&f32, &f32);
    let mut _132: &f32;
    let _133: f32;
    let mut _134: W;
    let mut _135: &f32;
    let _136: f32;
    let _137: &f32;
    let _138: &f32;
    let mut _139: bool;
    let mut _140: bool;
    let mut _141: f32;
    let mut _142: f32;
    let _144: !;
    let mut _145: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _146: (&f32, &f32);
    let mut _147: &f32;
    let _148: f32;
    let mut _149: &f32;
    let _150: f32;
    let _151: &f32;
    let _152: &f32;
    let mut _153: bool;
    let mut _154: bool;
    let mut _155: f32;
    let mut _156: f32;
    let _158: !;
    let mut _159: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _160: (&f32, &f32);
    let mut _161: &f32;
    let _162: f32;
    let mut _163: W;
    let mut _164: &f32;
    let _165: f32;
    let _166: &f32;
    let _167: &f32;
    let mut _168: bool;
    let mut _169: bool;
    let mut _170: f32;
    let mut _171: f32;
    let _173: !;
    let mut _174: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }
    scope 3 {
        debug left_val => _21;
        debug right_val => _22;
        let _27: core::panicking::AssertKind;
        scope 4 {
            debug kind => _27;
        }
    }
    scope 5 {
        debug left_val => _35;
        debug right_val => _36;
        let _41: core::panicking::AssertKind;
        scope 6 {
            debug kind => _41;
        }
    }
    scope 7 {
        debug left_val => _50;
        debug right_val => _51;
        let _56: core::panicking::AssertKind;
        scope 8 {
            debug kind => _56;
        }
    }
    scope 9 {
        debug left_val => _64;
        debug right_val => _65;
        let _70: core::panicking::AssertKind;
        scope 10 {
            debug kind => _70;
        }
    }
    scope 11 {
        debug left_val => _79;
        debug right_val => _80;
        let _85: core::panicking::AssertKind;
        scope 12 {
            debug kind => _85;
        }
    }
    scope 13 {
        debug left_val => _93;
        debug right_val => _94;
        let _99: core::panicking::AssertKind;
        scope 14 {
            debug kind => _99;
        }
    }
    scope 15 {
        debug left_val => _108;
        debug right_val => _109;
        let _114: core::panicking::AssertKind;
        scope 16 {
            debug kind => _114;
        }
    }
    scope 17 {
        debug left_val => _122;
        debug right_val => _123;
        let _128: core::panicking::AssertKind;
        scope 18 {
            debug kind => _128;
        }
    }
    scope 19 {
        debug left_val => _137;
        debug right_val => _138;
        let _143: core::panicking::AssertKind;
        scope 20 {
            debug kind => _143;
        }
    }
    scope 21 {
        debug left_val => _151;
        debug right_val => _152;
        let _157: core::panicking::AssertKind;
        scope 22 {
            debug kind => _157;
        }
    }
    scope 23 {
        debug left_val => _166;
        debug right_val => _167;
        let _172: core::panicking::AssertKind;
        scope 24 {
            debug kind => _172;
        }
    }

    bb0: {
        _3 = const _;
        _2 = &_3;
        _5 = const 13f32;
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &f32);
        _7 = (_1.1: &f32);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<f32, f32>(move _12, _6, _7, move _14);
    }

    bb2: {
        _18 = (const 2f32,);
        _17 = basics(move _18) -> bb3;
    }

    bb3: {
        _16 = &_17;
        _20 = const 13f32;
        _19 = &_20;
        _15 = (move _16, move _19);
        _21 = (_15.0: &f32);
        _22 = (_15.1: &f32);
        _25 = (*_21);
        _26 = (*_22);
        _24 = Eq(move _25, move _26);
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<f32, f32>(move _27, _21, _22, move _29);
    }

    bb5: {
        _32 = const _;
        _31 = &_32;
        _34 = const 10f32;
        _33 = &_34;
        _30 = (move _31, move _33);
        _35 = (_30.0: &f32);
        _36 = (_30.1: &f32);
        _39 = (*_35);
        _40 = (*_36);
        _38 = Eq(move _39, move _40);
        _37 = Not(move _38);
        switchInt(move _37) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _41 = core::panicking::AssertKind::Eq;
        _43 = Option::<Arguments<'_>>::None;
        _42 = core::panicking::assert_failed::<f32, f32>(move _41, _35, _36, move _43);
    }

    bb7: {
        _47 = W(const 1f32);
        _46 = add_assign(move _47) -> bb8;
    }

    bb8: {
        _45 = &_46;
        _49 = const 10f32;
        _48 = &_49;
        _44 = (move _45, move _48);
        _50 = (_44.0: &f32);
        _51 = (_44.1: &f32);
        _54 = (*_50);
        _55 = (*_51);
        _53 = Eq(move _54, move _55);
        _52 = Not(move _53);
        switchInt(move _52) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _56 = core::panicking::AssertKind::Eq;
        _58 = Option::<Arguments<'_>>::None;
        _57 = core::panicking::assert_failed::<f32, f32>(move _56, _50, _51, move _58);
    }

    bb10: {
        _61 = const _;
        _60 = &_61;
        _63 = const 256f32;
        _62 = &_63;
        _59 = (move _60, move _62);
        _64 = (_59.0: &f32);
        _65 = (_59.1: &f32);
        _68 = (*_64);
        _69 = (*_65);
        _67 = Eq(move _68, move _69);
        _66 = Not(move _67);
        switchInt(move _66) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _70 = core::panicking::AssertKind::Eq;
        _72 = Option::<Arguments<'_>>::None;
        _71 = core::panicking::assert_failed::<f32, f32>(move _70, _64, _65, move _72);
    }

    bb12: {
        _76 = A { a: const 0f32 };
        _75 = mul_assign(move _76) -> bb13;
    }

    bb13: {
        _74 = &_75;
        _78 = const 256f32;
        _77 = &_78;
        _73 = (move _74, move _77);
        _79 = (_73.0: &f32);
        _80 = (_73.1: &f32);
        _83 = (*_79);
        _84 = (*_80);
        _82 = Eq(move _83, move _84);
        _81 = Not(move _82);
        switchInt(move _81) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _85 = core::panicking::AssertKind::Eq;
        _87 = Option::<Arguments<'_>>::None;
        _86 = core::panicking::assert_failed::<f32, f32>(move _85, _79, _80, move _87);
    }

    bb15: {
        _90 = const _;
        _89 = &_90;
        _92 = const 4f32;
        _91 = &_92;
        _88 = (move _89, move _91);
        _93 = (_88.0: &f32);
        _94 = (_88.1: &f32);
        _97 = (*_93);
        _98 = (*_94);
        _96 = Eq(move _97, move _98);
        _95 = Not(move _96);
        switchInt(move _95) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _99 = core::panicking::AssertKind::Eq;
        _101 = Option::<Arguments<'_>>::None;
        _100 = core::panicking::assert_failed::<f32, f32>(move _99, _93, _94, move _101);
    }

    bb17: {
        _105 = [const 1f32];
        _104 = div_assign(move _105) -> bb18;
    }

    bb18: {
        _103 = &_104;
        _107 = const 4f32;
        _106 = &_107;
        _102 = (move _103, move _106);
        _108 = (_102.0: &f32);
        _109 = (_102.1: &f32);
        _112 = (*_108);
        _113 = (*_109);
        _111 = Eq(move _112, move _113);
        _110 = Not(move _111);
        switchInt(move _110) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _114 = core::panicking::AssertKind::Eq;
        _116 = Option::<Arguments<'_>>::None;
        _115 = core::panicking::assert_failed::<f32, f32>(move _114, _108, _109, move _116);
    }

    bb20: {
        _119 = const _;
        _118 = &_119;
        _121 = const 5f32;
        _120 = &_121;
        _117 = (move _118, move _120);
        _122 = (_117.0: &f32);
        _123 = (_117.1: &f32);
        _126 = (*_122);
        _127 = (*_123);
        _125 = Eq(move _126, move _127);
        _124 = Not(move _125);
        switchInt(move _124) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _128 = core::panicking::AssertKind::Eq;
        _130 = Option::<Arguments<'_>>::None;
        _129 = core::panicking::assert_failed::<f32, f32>(move _128, _122, _123, move _130);
    }

    bb22: {
        _134 = W(const 5f32);
        _133 = rem_assign(move _134) -> bb23;
    }

    bb23: {
        _132 = &_133;
        _136 = const 5f32;
        _135 = &_136;
        _131 = (move _132, move _135);
        _137 = (_131.0: &f32);
        _138 = (_131.1: &f32);
        _141 = (*_137);
        _142 = (*_138);
        _140 = Eq(move _141, move _142);
        _139 = Not(move _140);
        switchInt(move _139) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _143 = core::panicking::AssertKind::Eq;
        _145 = Option::<Arguments<'_>>::None;
        _144 = core::panicking::assert_failed::<f32, f32>(move _143, _137, _138, move _145);
    }

    bb25: {
        _148 = const _;
        _147 = &_148;
        _150 = const 0f32;
        _149 = &_150;
        _146 = (move _147, move _149);
        _151 = (_146.0: &f32);
        _152 = (_146.1: &f32);
        _155 = (*_151);
        _156 = (*_152);
        _154 = Eq(move _155, move _156);
        _153 = Not(move _154);
        switchInt(move _153) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _157 = core::panicking::AssertKind::Eq;
        _159 = Option::<Arguments<'_>>::None;
        _158 = core::panicking::assert_failed::<f32, f32>(move _157, _151, _152, move _159);
    }

    bb27: {
        _163 = W(const 8f32);
        _162 = sub_assign(move _163) -> bb28;
    }

    bb28: {
        _161 = &_162;
        _165 = const 0f32;
        _164 = &_165;
        _160 = (move _161, move _164);
        _166 = (_160.0: &f32);
        _167 = (_160.1: &f32);
        _170 = (*_166);
        _171 = (*_167);
        _169 = Eq(move _170, move _171);
        _168 = Not(move _169);
        switchInt(move _168) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _172 = core::panicking::AssertKind::Eq;
        _174 = Option::<Arguments<'_>>::None;
        _173 = core::panicking::assert_failed::<f32, f32>(move _172, _166, _167, move _174);
    }

    bb30: {
        return;
    }
}

const BASICS: f32 = {
    let mut _0: f32;
    let mut _1: (f32,);

    bb0: {
        StorageLive(_1);
        _1 = (const 2f32,);
        ConstEvalCounter;
        _0 = basics(move _1) -> bb1;
    }

    bb1: {
        StorageDead(_1);
        return;
    }
}

const ADD: f32 = {
    let mut _0: f32;
    let mut _1: W;

    bb0: {
        StorageLive(_1);
        _1 = W(const 1f32);
        ConstEvalCounter;
        _0 = add_assign(move _1) -> bb1;
    }

    bb1: {
        StorageDead(_1);
        return;
    }
}

const MUL: f32 = {
    let mut _0: f32;
    let mut _1: A;

    bb0: {
        StorageLive(_1);
        _1 = A { a: const 0f32 };
        ConstEvalCounter;
        _0 = mul_assign(move _1) -> bb1;
    }

    bb1: {
        StorageDead(_1);
        return;
    }
}

const DIV: f32 = {
    let mut _0: f32;
    let mut _1: [f32; 1];

    bb0: {
        StorageLive(_1);
        _1 = [const 1f32];
        ConstEvalCounter;
        _0 = div_assign(move _1) -> bb1;
    }

    bb1: {
        StorageDead(_1);
        return;
    }
}

const REM: f32 = {
    let mut _0: f32;
    let mut _1: W;

    bb0: {
        StorageLive(_1);
        _1 = W(const 5f32);
        ConstEvalCounter;
        _0 = rem_assign(move _1) -> bb1;
    }

    bb1: {
        StorageDead(_1);
        return;
    }
}

const SUB: f32 = {
    let mut _0: f32;
    let mut _1: W;

    bb0: {
        StorageLive(_1);
        _1 = W(const 8f32);
        ConstEvalCounter;
        _0 = sub_assign(move _1) -> bb1;
    }

    bb1: {
        StorageDead(_1);
        return;
    }
}

fn Foo(_1: T) -> Foo<T> {
    let mut _0: Foo<T>;

    bb0: {
        _0 = Foo::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: T) -> Foo<T> {
    let mut _0: Foo<T>;

    bb0: {
        _0 = Foo::<T>(move _1);
        return;
    }
}

fn W(_1: f32) -> W {
    let mut _0: W;

    bb0: {
        _0 = W(move _1);
        return;
    }
}

// MIR FOR CTFE
fn W(_1: f32) -> W {
    let mut _0: W;

    bb0: {
        _0 = W(move _1);
        return;
    }
}
