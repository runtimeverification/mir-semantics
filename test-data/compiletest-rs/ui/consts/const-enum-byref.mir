// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static C: E = {
    let mut _0: E;

    bb0: {
        _0 = E::V;
        return;
    }
}

fn f(_1: &E) -> () {
    debug a => _1;
    let mut _0: ();
    let mut _2: isize;
    let mut _3: !;

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _3 = begin_panic::<&str>(const "explicit panic");
    }

    bb2: {
        unreachable;
    }

    bb3: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: &E;

    bb0: {
        _1 = const {alloc1: &E};
        _0 = f(_1) -> bb1;
    }

    bb1: {
        return;
    }
}

alloc1 (static: C, size: 16, align: 8) {
    00 00 00 00 00 00 00 00 __ __ __ __ __ __ __ __ │ ........░░░░░░░░
}

fn E::VV(_1: isize) -> E {
    let mut _0: E;

    bb0: {
        _0 = E::VV(move _1);
        return;
    }
}

// MIR FOR CTFE
fn E::VV(_1: isize) -> E {
    let mut _0: E;

    bb0: {
        _0 = E::VV(move _1);
        return;
    }
}
