// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const FOO: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 10_isize;
        return;
    }
}

const BAR: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 3_isize;
        return;
    }
}

const ZST: &() = {
    let mut _0: &();
    scope 1 {
    }

    bb0: {
        _0 = const 1_usize as &() (Transmute);
        return;
    }
}

const ZST_ARR: &[u8; 0] = {
    let mut _0: &[u8; 0];
    scope 1 {
    }

    bb0: {
        _0 = const 1_usize as &[u8; 0] (Transmute);
        return;
    }
}

ZST_ARR::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

fn foo() -> isize {
    let mut _0: isize;

    bb0: {
        _0 = const 4_isize;
        return;
    }
}

// MIR FOR CTFE
fn foo() -> isize {
    let mut _0: isize;

    bb0: {
        _0 = const 4_isize;
        return;
    }
}

const BOO: isize = {
    let mut _0: isize;

    bb0: {
        ConstEvalCounter;
        _0 = foo() -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: isize;
    let mut _3: (&i32, &i32);
    let mut _4: &i32;
    let mut _5: &i32;
    let _6: i32;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: i32;
    let mut _12: i32;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&i32, &i32);
    let mut _18: &i32;
    let mut _19: &i32;
    let _20: i32;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: i32;
    let mut _26: i32;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&i32, &i32);
    let mut _32: &i32;
    let mut _33: &i32;
    let _34: i32;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: i32;
    let mut _40: i32;
    let _42: !;
    let mut _43: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _2: i32;
        scope 2 {
            debug y => _2;
            let _7: &i32;
            let _8: &i32;
            let _16: i32;
            scope 3 {
                debug left_val => _7;
                debug right_val => _8;
                let _13: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _13;
                }
            }
            scope 5 {
                debug z => _16;
                let _21: &i32;
                let _22: &i32;
                let _30: i32;
                scope 6 {
                    debug left_val => _21;
                    debug right_val => _22;
                    let _27: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _27;
                    }
                }
                scope 8 {
                    debug z => _30;
                    let _35: &i32;
                    let _36: &i32;
                    scope 9 {
                        debug left_val => _35;
                        debug right_val => _36;
                        let _41: core::panicking::AssertKind;
                        scope 10 {
                            debug kind => _41;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const 3_isize;
        switchInt(_1) -> [10: bb2, 3: bb3, 4: bb4, otherwise: bb1];
    }

    bb1: {
        _2 = const 3_i32;
        goto -> bb5;
    }

    bb2: {
        _2 = const 1_i32;
        goto -> bb5;
    }

    bb3: {
        _2 = const 2_i32;
        goto -> bb5;
    }

    bb4: {
        _2 = const 4_i32;
        goto -> bb5;
    }

    bb5: {
        _4 = &_2;
        _6 = const 2_i32;
        _5 = &_6;
        _3 = (move _4, move _5);
        _7 = (_3.0: &i32);
        _8 = (_3.1: &i32);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<i32, i32>(move _13, _7, _8, move _15);
    }

    bb7: {
        _16 = const 9_i32;
        _18 = &_16;
        _20 = const 9_i32;
        _19 = &_20;
        _17 = (move _18, move _19);
        _21 = (_17.0: &i32);
        _22 = (_17.1: &i32);
        _25 = (*_21);
        _26 = (*_22);
        _24 = Eq(move _25, move _26);
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<i32, i32>(move _27, _21, _22, move _29);
    }

    bb9: {
        _30 = const 10_i32;
        _32 = &_30;
        _34 = const 10_i32;
        _33 = &_34;
        _31 = (move _32, move _33);
        _35 = (_31.0: &i32);
        _36 = (_31.1: &i32);
        _39 = (*_35);
        _40 = (*_36);
        _38 = Eq(move _39, move _40);
        _37 = Not(move _38);
        switchInt(move _37) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _41 = core::panicking::AssertKind::Eq;
        _43 = Option::<Arguments<'_>>::None;
        _42 = core::panicking::assert_failed::<i32, i32>(move _41, _35, _36, move _43);
    }

    bb11: {
        return;
    }
}
