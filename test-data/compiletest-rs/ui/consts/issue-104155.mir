// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const _: () = {
    let mut _0: ();

    bb0: {
        ConstEvalCounter;
        _0 = std::mem::forget::<fn() -> Box<u32> {<Box<u32> as Default>::default}>(<Box<u32> as Default>::default) -> bb1;
    }

    bb1: {
        return;
    }
}

const _: () = {
    let mut _0: ();
    let mut _1: [closure@ui/consts/issue-104155.rs:6:33: 6:35];

    bb0: {
        StorageLive(_1);
        _1 = [closure@ui/consts/issue-104155.rs:6:33: 6:35];
        ConstEvalCounter;
        _0 = std::mem::forget::<[closure@ui/consts/issue-104155.rs:6:33: 6:35]>(move _1) -> bb1;
    }

    bb1: {
        StorageDead(_1);
        return;
    }
}

fn _::{closure#0}(_1: &[closure@ui/consts/issue-104155.rs:6:33: 6:35]) -> Box<u32> {
    let mut _0: std::boxed::Box<u32>;

    bb0: {
        _0 = <Box<u32> as Default>::default() -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
