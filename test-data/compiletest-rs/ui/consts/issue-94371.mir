// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const C: (Demo, Demo) = {
    let mut _0: (Demo, Demo);
    let mut _1: Demo;
    let _3: ();
    let mut _4: &mut Demo;
    let mut _5: &mut Demo;
    let mut _6: &mut Demo;
    let mut _7: &mut Demo;
    let mut _8: Demo;
    let mut _9: Demo;
    scope 1 {
        debug x => _1;
        let mut _2: Demo;
        scope 2 {
            debug y => _2;
        }
    }

    bb0: {
        StorageLive(_1);
        _1 = Demo(const 1_u64, const true, const 3_u64, const 4_u32, const 5_u64, const 6_u64, const 7_u64);
        StorageLive(_2);
        _2 = Demo(const 10_u64, const false, const 12_u64, const 13_u32, const 14_u64, const 15_u64, const 16_u64);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &mut _1;
        _4 = &mut (*_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &mut _2;
        _6 = &mut (*_7);
        ConstEvalCounter;
        _3 = std::mem::swap::<Demo>(move _4, move _6) -> bb1;
    }

    bb1: {
        StorageDead(_6);
        StorageDead(_4);
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_3);
        StorageLive(_8);
        _8 = move _1;
        StorageLive(_9);
        _9 = move _2;
        _0 = (move _8, move _9);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn Demo(_1: u64, _2: bool, _3: u64, _4: u32, _5: u64, _6: u64, _7: u64) -> Demo {
    let mut _0: Demo;

    bb0: {
        _0 = Demo(move _1, move _2, move _3, move _4, move _5, move _6, move _7);
        return;
    }
}

// MIR FOR CTFE
fn Demo(_1: u64, _2: bool, _3: u64, _4: u32, _5: u64, _6: u64, _7: u64) -> Demo {
    let mut _0: Demo;

    bb0: {
        _0 = Demo(move _1, move _2, move _3, move _4, move _5, move _6, move _7);
        return;
    }
}
