// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const JSVAL_TAG_CLEAR: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const 4294967168_u32;
        return;
    }
}

const JSVAL_TYPE_INT32: u8 = {
    let mut _0: u8;

    bb0: {
        _0 = const 1_u8;
        return;
    }
}

const JSVAL_TYPE_UNDEFINED: u8 = {
    let mut _0: u8;

    bb0: {
        _0 = const 2_u8;
        return;
    }
}

ValueTag::JSVAL_TAG_INT32::{constant#0}: u32 = {
    let mut _0: u32;
    let mut _1: u32;

    bb0: {
        StorageLive(_1);
        _1 = const _ as u32 (IntToInt);
        _0 = BitOr(const _, move _1);
        StorageDead(_1);
        return;
    }
}

ValueTag::JSVAL_TAG_UNDEFINED::{constant#0}: u32 = {
    let mut _0: u32;
    let mut _1: u32;

    bb0: {
        StorageLive(_1);
        _1 = const _ as u32 (IntToInt);
        _0 = BitOr(const _, move _1);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}
