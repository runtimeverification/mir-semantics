// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/consts/match-const-fn-structs.rs:6:10: 6:12>::assert_receiver_is_total_eq(_1: &A) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn <impl at ui/consts/match-const-fn-structs.rs:6:14: 6:23>::eq(_1: &A, _2: &A) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: u32;
    let mut _4: u32;

    bb0: {
        _3 = ((*_1).0: u32);
        _4 = ((*_2).0: u32);
        _0 = Eq(move _3, move _4);
        return;
    }
}

fn new(_1: u32) -> A {
    debug value => _1;
    let mut _0: A;

    bb0: {
        _0 = A { value: _1 };
        return;
    }
}

// MIR FOR CTFE
fn new(_1: u32) -> A {
    debug value => _1;
    let mut _0: A;
    let mut _2: u32;

    bb0: {
        StorageLive(_2);
        _2 = _1;
        _0 = A { value: move _2 };
        StorageDead(_2);
        return;
    }
}

const A_1: A = {
    let mut _0: A;

    bb0: {
        ConstEvalCounter;
        _0 = new(const 1_u32) -> bb1;
    }

    bb1: {
        return;
    }
}

const A_2: A = {
    let mut _0: A;

    bb0: {
        ConstEvalCounter;
        _0 = new(const 2_u32) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: &str;
    let mut _2: A;
    let _3: &str;
    let _4: &str;
    scope 1 {
        debug a_str => _1;
    }

    bb0: {
        _2 = new(const 42_u32) -> bb1;
    }

    bb1: {
        switchInt((_2.0: u32)) -> [1: bb3, 2: bb4, otherwise: bb2];
    }

    bb2: {
        _4 = const "Unknown A";
        _1 = _4;
        goto -> bb5;
    }

    bb3: {
        _1 = const "A 1";
        goto -> bb5;
    }

    bb4: {
        _3 = const "A 2";
        _1 = _3;
        goto -> bb5;
    }

    bb5: {
        return;
    }
}
