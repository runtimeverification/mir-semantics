// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static C: &E = {
    let mut _0: &E;
    let _1: &E;
    let _2: E;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = E::V0;
        _1 = &_2;
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: &&E;
    let mut _2: isize;
    let mut _3: !;
    let mut _4: &E;

    bb0: {
        _1 = const {alloc1: &&E};
        _4 = deref_copy (*_1);
        _2 = discriminant((*_4));
        switchInt(move _2) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _3 = begin_panic::<&str>(const "explicit panic");
    }

    bb2: {
        return;
    }
}

alloc1 (static: C, size: 8, align: 8) {
    ╾───────alloc4────────╼                         │ ╾──────╼
}

alloc4 (size: 16, align: 8) {
    00 00 00 00 00 00 00 00 __ __ __ __ __ __ __ __ │ ........░░░░░░░░
}

fn E::V1(_1: isize) -> E {
    let mut _0: E;

    bb0: {
        _0 = E::V1(move _1);
        return;
    }
}

// MIR FOR CTFE
fn E::V1(_1: isize) -> E {
    let mut _0: E;

    bb0: {
        _0 = E::V1(move _1);
        return;
    }
}
