// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const A: [u8; 1] = {
    let mut _0: [u8; 1];
    let mut _1: u8;

    bb0: {
        StorageLive(_1);
        _1 = const 'h' as u8 (IntToInt);
        _0 = [move _1];
        StorageDead(_1);
        return;
    }
}

A::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

const B: u8 = {
    let mut _0: u8;
    let mut _1: &[u8; 1];
    let _2: [u8; 1];
    let _3: usize;
    let mut _4: usize;
    let mut _5: bool;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const _;
        _1 = &_2;
        StorageLive(_3);
        _3 = const 0_usize;
        _4 = Len((*_1));
        _5 = Lt(_3, _4);
        assert(move _5, "index out of bounds: the length is {} but the index is {}", move _4, _3) -> bb1;
    }

    bb1: {
        _0 = (*_1)[_3];
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

const C: &&&&[u8; 1] = {
    let mut _0: &&&&[u8; 1];
    let _1: &&&&[u8; 1];
    let _2: &&&[u8; 1];
    let _3: &&[u8; 1];
    let _4: &[u8; 1];
    let _5: [u8; 1];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = const _;
        _4 = &_5;
        _3 = &_4;
        _2 = &_3;
        _1 = &_2;
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

C::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

const D: u8 = {
    let mut _0: u8;
    let mut _1: &&&&&[u8; 1];
    let _2: &&&&[u8; 1];
    let _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: &&&&[u8; 1];
    let mut _7: &&&[u8; 1];
    let mut _8: &&[u8; 1];
    let mut _9: &[u8; 1];
    let mut _10: &&&&[u8; 1];
    let mut _11: &&&[u8; 1];
    let mut _12: &&[u8; 1];
    let mut _13: &[u8; 1];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const _;
        _1 = &_2;
        StorageLive(_3);
        _3 = const 0_usize;
        _6 = deref_copy (*_1);
        _7 = deref_copy (*_6);
        _8 = deref_copy (*_7);
        _9 = deref_copy (*_8);
        _4 = Len((*_9));
        _5 = Lt(_3, _4);
        assert(move _5, "index out of bounds: the length is {} but the index is {}", move _4, _3) -> bb1;
    }

    bb1: {
        _10 = deref_copy (*_1);
        _11 = deref_copy (*_10);
        _12 = deref_copy (*_11);
        _13 = deref_copy (*_12);
        _0 = (*_13)[_3];
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&u8, &u8);
    let mut _2: &u8;
    let _3: u8;
    let mut _4: &u8;
    let _5: [u8; 1];
    let _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let _9: &u8;
    let _10: &u8;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: u8;
    let mut _14: u8;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: (&u8, &u8);
    let mut _19: &u8;
    let _20: u8;
    let mut _21: &u8;
    let _22: [u8; 1];
    let _23: usize;
    let mut _24: usize;
    let mut _25: bool;
    let _26: &u8;
    let _27: &u8;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: u8;
    let mut _31: u8;
    let _33: !;
    let mut _34: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _9;
        debug right_val => _10;
        let _15: core::panicking::AssertKind;
        scope 2 {
            debug kind => _15;
        }
    }
    scope 3 {
        debug left_val => _26;
        debug right_val => _27;
        let _32: core::panicking::AssertKind;
        scope 4 {
            debug kind => _32;
        }
    }

    bb0: {
        _3 = const _;
        _2 = &_3;
        _5 = const _;
        _6 = const 0_usize;
        _7 = const 1_usize;
        _8 = Lt(_6, _7);
        assert(move _8, "index out of bounds: the length is {} but the index is {}", move _7, _6) -> bb1;
    }

    bb1: {
        _4 = &_5[_6];
        _1 = (move _2, move _4);
        _9 = (_1.0: &u8);
        _10 = (_1.1: &u8);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<u8, u8>(move _15, _9, _10, move _17);
    }

    bb3: {
        _20 = const _;
        _19 = &_20;
        _22 = const _;
        _23 = const 0_usize;
        _24 = const 1_usize;
        _25 = Lt(_23, _24);
        assert(move _25, "index out of bounds: the length is {} but the index is {}", move _24, _23) -> bb4;
    }

    bb4: {
        _21 = &_22[_23];
        _18 = (move _19, move _21);
        _26 = (_18.0: &u8);
        _27 = (_18.1: &u8);
        _30 = (*_26);
        _31 = (*_27);
        _29 = Eq(move _30, move _31);
        _28 = Not(move _29);
        switchInt(move _28) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _32 = core::panicking::AssertKind::Eq;
        _34 = Option::<Arguments<'_>>::None;
        _33 = core::panicking::assert_failed::<u8, u8>(move _32, _26, _27, move _34);
    }

    bb6: {
        return;
    }
}
