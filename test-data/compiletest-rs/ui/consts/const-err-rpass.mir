// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const X: *const u8 = {
    let mut _0: *const u8;
    let mut _1: *const u8;
    let mut _2: *const [u8; 0];
    let _3: &[u8; 0];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = const b"";
        _2 = &raw const (*_3);
        _1 = move _2 as *const u8 (Pointer(ArrayToPointer));
        _0 = _1;
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

alloc1 (size: 0, align: 1) {}

const Y: bool = {
    let mut _0: bool;

    bb0: {
        _0 = Eq(const 'A', const 'B');
        return;
    }
}

const Z: char = {
    let mut _0: char;

    bb0: {
        _0 = const 'A';
        return;
    }
}

const W: bool = {
    let mut _0: bool;

    bb0: {
        _0 = Le(const _, const 'B');
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                    scope 5 {
                        scope 6 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        return;
    }
}
