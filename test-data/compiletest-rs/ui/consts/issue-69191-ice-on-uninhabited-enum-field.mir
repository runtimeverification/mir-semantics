// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: UninhabitedUnivariant;
    scope 1 {
        debug _seed => const UninhabitedUnivariant::_Variant(ZeroSized: Void);
        scope 2 {
            debug _x => const ZeroSized: Void;
        }
        scope 3 {
            debug _seed => const UninhabitedMultivariant2::_Variant(ZeroSized: Void);
            scope 4 {
                debug _x => const ZeroSized: Void;
            }
            scope 5 {
                debug _x => const ZeroSized: Void;
            }
            scope 6 {
                debug _seed => const UninhabitedMultivariant2::_Variant(ZeroSized: Void);
                scope 7 {
                    debug _x => const ZeroSized: Void;
                }
                scope 8 {
                    debug _seed => const UninhabitedMultivariant2::_Variant(ZeroSized: Void);
                    scope 9 {
                        debug _x => const ZeroSized: Void;
                    }
                    scope 10 {
                        debug _seed => const UninhabitedMultivariant3::_Variant(ZeroSized: Void);
                        scope 11 {
                            debug _x => const ZeroSized: Void;
                        }
                        scope 12 {
                            debug _x => const ZeroSized: Void;
                        }
                        scope 13 {
                            debug _x => const ZeroSized: Void;
                        }
                        scope 14 {
                            debug _seed => const UninhabitedMultivariant3::_Variant(ZeroSized: Void);
                            scope 15 {
                                debug _x => const ZeroSized: Void;
                            }
                            scope 16 {
                                debug _seed => const UninhabitedMultivariant3::_Variant(ZeroSized: Void);
                                scope 17 {
                                    debug _x => const ZeroSized: Void;
                                }
                                scope 18 {
                                    debug _seed => const UninhabitedMultivariant3::_Variant(ZeroSized: Void);
                                    scope 19 {
                                        debug _x => const ZeroSized: Void;
                                    }
                                    scope 20 {
                                        debug _seed => const UninhabitedUnivariantC::_Variant(ZeroSized: Void);
                                        scope 21 {
                                            debug _x => const ZeroSized: Void;
                                        }
                                        scope 22 {
                                            debug _seed => const UninhabitedUnivariant32::_Variant(ZeroSized: Void);
                                            scope 23 {
                                                debug _x => const ZeroSized: Void;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = Option::<UninhabitedUnivariant>::unwrap(const Option::<UninhabitedUnivariant>::None);
    }
}

fn UninhabitedUnivariant::_Variant(_1: Void) -> UninhabitedUnivariant {
    let mut _0: UninhabitedUnivariant;

    bb0: {
        _0 = UninhabitedUnivariant::_Variant(move _1);
        return;
    }
}

// MIR FOR CTFE
fn UninhabitedUnivariant::_Variant(_1: Void) -> UninhabitedUnivariant {
    let mut _0: UninhabitedUnivariant;

    bb0: {
        _0 = UninhabitedUnivariant::_Variant(move _1);
        return;
    }
}

fn UninhabitedMultivariant2::_Variant(_1: Void) -> UninhabitedMultivariant2 {
    let mut _0: UninhabitedMultivariant2;

    bb0: {
        _0 = UninhabitedMultivariant2::_Variant(move _1);
        return;
    }
}

// MIR FOR CTFE
fn UninhabitedMultivariant2::_Variant(_1: Void) -> UninhabitedMultivariant2 {
    let mut _0: UninhabitedMultivariant2;

    bb0: {
        _0 = UninhabitedMultivariant2::_Variant(move _1);
        return;
    }
}

fn UninhabitedMultivariant2::_Warriont(_1: Void) -> UninhabitedMultivariant2 {
    let mut _0: UninhabitedMultivariant2;

    bb0: {
        _0 = UninhabitedMultivariant2::_Warriont(move _1);
        return;
    }
}

// MIR FOR CTFE
fn UninhabitedMultivariant2::_Warriont(_1: Void) -> UninhabitedMultivariant2 {
    let mut _0: UninhabitedMultivariant2;

    bb0: {
        _0 = UninhabitedMultivariant2::_Warriont(move _1);
        return;
    }
}

fn UninhabitedMultivariant3::_Variant(_1: Void) -> UninhabitedMultivariant3 {
    let mut _0: UninhabitedMultivariant3;

    bb0: {
        _0 = UninhabitedMultivariant3::_Variant(move _1);
        return;
    }
}

// MIR FOR CTFE
fn UninhabitedMultivariant3::_Variant(_1: Void) -> UninhabitedMultivariant3 {
    let mut _0: UninhabitedMultivariant3;

    bb0: {
        _0 = UninhabitedMultivariant3::_Variant(move _1);
        return;
    }
}

fn UninhabitedMultivariant3::_Warriont(_1: Void) -> UninhabitedMultivariant3 {
    let mut _0: UninhabitedMultivariant3;

    bb0: {
        _0 = UninhabitedMultivariant3::_Warriont(move _1);
        return;
    }
}

// MIR FOR CTFE
fn UninhabitedMultivariant3::_Warriont(_1: Void) -> UninhabitedMultivariant3 {
    let mut _0: UninhabitedMultivariant3;

    bb0: {
        _0 = UninhabitedMultivariant3::_Warriont(move _1);
        return;
    }
}

fn UninhabitedMultivariant3::_Worrynot(_1: Void) -> UninhabitedMultivariant3 {
    let mut _0: UninhabitedMultivariant3;

    bb0: {
        _0 = UninhabitedMultivariant3::_Worrynot(move _1);
        return;
    }
}

// MIR FOR CTFE
fn UninhabitedMultivariant3::_Worrynot(_1: Void) -> UninhabitedMultivariant3 {
    let mut _0: UninhabitedMultivariant3;

    bb0: {
        _0 = UninhabitedMultivariant3::_Worrynot(move _1);
        return;
    }
}

fn UninhabitedUnivariantC::_Variant(_1: Void) -> UninhabitedUnivariantC {
    let mut _0: UninhabitedUnivariantC;

    bb0: {
        _0 = UninhabitedUnivariantC::_Variant(move _1);
        return;
    }
}

// MIR FOR CTFE
fn UninhabitedUnivariantC::_Variant(_1: Void) -> UninhabitedUnivariantC {
    let mut _0: UninhabitedUnivariantC;

    bb0: {
        _0 = UninhabitedUnivariantC::_Variant(move _1);
        return;
    }
}

fn UninhabitedUnivariant32::_Variant(_1: Void) -> UninhabitedUnivariant32 {
    let mut _0: UninhabitedUnivariant32;

    bb0: {
        _0 = UninhabitedUnivariant32::_Variant(move _1);
        return;
    }
}

// MIR FOR CTFE
fn UninhabitedUnivariant32::_Variant(_1: Void) -> UninhabitedUnivariant32 {
    let mut _0: UninhabitedUnivariant32;

    bb0: {
        _0 = UninhabitedUnivariant32::_Variant(move _1);
        return;
    }
}
