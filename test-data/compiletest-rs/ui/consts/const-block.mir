// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: T) -> T {
    debug a => _1;
    let mut _0: T;

    bb0: {
        _0 = move _1;
        return;
    }
}

static BLOCK_INTEGRAL: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

static BLOCK_EXPLICIT_UNIT: () = {
    let mut _0: ();

    bb0: {
        _0 = ();
        return;
    }
}

static BLOCK_IMPLICIT_UNIT: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

static BLOCK_FLOAT: f64 = {
    let mut _0: f64;

    bb0: {
        _0 = const 1f64;
        return;
    }
}

static BLOCK_ENUM: Option<usize> = {
    let mut _0: std::option::Option<usize>;

    bb0: {
        _0 = Option::<usize>::Some(const 100_usize);
        return;
    }
}

static BLOCK_STRUCT: Foo = {
    let mut _0: Foo;
    let mut _1: *const ();

    bb0: {
        StorageLive(_1);
        ConstEvalCounter;
        _1 = null::<()>() -> bb1;
    }

    bb1: {
        _0 = Foo { a: const 12_usize, b: move _1 };
        StorageDead(_1);
        return;
    }
}

static BLOCK_UNSAFE: usize = {
    let mut _0: usize;
    scope 1 {
    }

    bb0: {
        _0 = const 1000_usize;
        return;
    }
}

static BLOCK_FN_INFERRED: fn(usize) -> usize = {
    let mut _0: fn(usize) -> usize;

    bb0: {
        _0 = foo::<usize> as fn(usize) -> usize (Pointer(ReifyFnPointer));
        return;
    }
}

static BLOCK_FN: fn(usize) -> usize = {
    let mut _0: fn(usize) -> usize;

    bb0: {
        _0 = foo::<usize> as fn(usize) -> usize (Pointer(ReifyFnPointer));
        return;
    }
}

static BLOCK_ENUM_CONSTRUCTOR: fn(usize) -> Option<usize> = {
    let mut _0: fn(usize) -> std::option::Option<usize>;

    bb0: {
        _0 = Option::<usize>::Some as fn(usize) -> std::option::Option<usize> (Pointer(ReifyFnPointer));
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let _2: &usize;
    let mut _3: &usize;
    let _4: usize;
    let _5: &usize;
    let _6: &usize;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: usize;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: (&(), &());
    let _15: &();
    let mut _16: &();
    let _17: ();
    let _18: &();
    let _19: &();
    let mut _20: bool;
    let mut _21: bool;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: (&(), &());
    let _26: &();
    let mut _27: &();
    let _28: ();
    let _29: &();
    let _30: &();
    let mut _31: bool;
    let mut _32: bool;
    let _34: !;
    let mut _35: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _36: (&f64, &f64);
    let _37: &f64;
    let mut _38: &f64;
    let _39: f64;
    let _40: &f64;
    let _41: &f64;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: f64;
    let mut _45: f64;
    let _47: !;
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _49: (&usize, &usize);
    let mut _50: &usize;
    let _51: &Foo;
    let mut _52: &usize;
    let _53: usize;
    let _54: &usize;
    let _55: &usize;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: usize;
    let mut _59: usize;
    let _61: !;
    let mut _62: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _63: (&*const (), &*const ());
    let mut _64: &*const ();
    let _65: &Foo;
    let mut _66: &*const ();
    let _67: *const ();
    let _68: &*const ();
    let _69: &*const ();
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: *const ();
    let mut _73: *const ();
    let _75: !;
    let mut _76: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _77: (&std::option::Option<usize>, &std::option::Option<usize>);
    let _78: &std::option::Option<usize>;
    let mut _79: &std::option::Option<usize>;
    let _80: std::option::Option<usize>;
    let _81: &std::option::Option<usize>;
    let _82: &std::option::Option<usize>;
    let mut _83: bool;
    let mut _84: bool;
    let _86: !;
    let mut _87: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _88: (&usize, &usize);
    let _89: &usize;
    let mut _90: &usize;
    let _91: usize;
    let _92: &usize;
    let _93: &usize;
    let mut _94: bool;
    let mut _95: bool;
    let mut _96: usize;
    let mut _97: usize;
    let _99: !;
    let mut _100: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _101: (&usize, &usize);
    let mut _102: &usize;
    let _103: usize;
    let mut _104: fn(usize) -> usize;
    let mut _105: &fn(usize) -> usize;
    let mut _106: &usize;
    let _107: usize;
    let _108: &usize;
    let _109: &usize;
    let mut _110: bool;
    let mut _111: bool;
    let mut _112: usize;
    let mut _113: usize;
    let _115: !;
    let mut _116: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _117: (&usize, &usize);
    let mut _118: &usize;
    let _119: usize;
    let mut _120: fn(usize) -> usize;
    let mut _121: &fn(usize) -> usize;
    let mut _122: &usize;
    let _123: usize;
    let _124: &usize;
    let _125: &usize;
    let mut _126: bool;
    let mut _127: bool;
    let mut _128: usize;
    let mut _129: usize;
    let _131: !;
    let mut _132: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _133: (&std::option::Option<usize>, &std::option::Option<usize>);
    let mut _134: &std::option::Option<usize>;
    let _135: std::option::Option<usize>;
    let mut _136: fn(usize) -> std::option::Option<usize>;
    let mut _137: &fn(usize) -> std::option::Option<usize>;
    let mut _138: &std::option::Option<usize>;
    let _139: std::option::Option<usize>;
    let _140: &std::option::Option<usize>;
    let _141: &std::option::Option<usize>;
    let mut _142: bool;
    let mut _143: bool;
    let _145: !;
    let mut _146: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _5;
        debug right_val => _6;
        let _11: core::panicking::AssertKind;
        scope 2 {
            debug kind => _11;
        }
    }
    scope 3 {
        debug left_val => _18;
        debug right_val => _19;
        let _22: core::panicking::AssertKind;
        scope 4 {
            debug kind => _22;
        }
    }
    scope 5 {
        debug left_val => _29;
        debug right_val => _30;
        let _33: core::panicking::AssertKind;
        scope 6 {
            debug kind => _33;
        }
    }
    scope 7 {
        debug left_val => _40;
        debug right_val => _41;
        let _46: core::panicking::AssertKind;
        scope 8 {
            debug kind => _46;
        }
    }
    scope 9 {
        debug left_val => _54;
        debug right_val => _55;
        let _60: core::panicking::AssertKind;
        scope 10 {
            debug kind => _60;
        }
    }
    scope 11 {
        debug left_val => _68;
        debug right_val => _69;
        let _74: core::panicking::AssertKind;
        scope 12 {
            debug kind => _74;
        }
    }
    scope 13 {
        debug left_val => _81;
        debug right_val => _82;
        let _85: core::panicking::AssertKind;
        scope 14 {
            debug kind => _85;
        }
    }
    scope 15 {
        debug left_val => _92;
        debug right_val => _93;
        let _98: core::panicking::AssertKind;
        scope 16 {
            debug kind => _98;
        }
    }
    scope 17 {
        debug left_val => _108;
        debug right_val => _109;
        let _114: core::panicking::AssertKind;
        scope 18 {
            debug kind => _114;
        }
    }
    scope 19 {
        debug left_val => _124;
        debug right_val => _125;
        let _130: core::panicking::AssertKind;
        scope 20 {
            debug kind => _130;
        }
    }
    scope 21 {
        debug left_val => _140;
        debug right_val => _141;
        let _144: core::panicking::AssertKind;
        scope 22 {
            debug kind => _144;
        }
    }

    bb0: {
        _2 = const {alloc1: &usize};
        _4 = const 1_usize;
        _3 = &_4;
        _1 = (_2, move _3);
        _5 = (_1.0: &usize);
        _6 = (_1.1: &usize);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<usize, usize>(move _11, _5, _6, move _13);
    }

    bb2: {
        _15 = const {alloc2: &()};
        _16 = &_17;
        _14 = (_15, move _16);
        _18 = (_14.0: &());
        _19 = (_14.1: &());
        _21 = <() as PartialEq>::eq(_18, _19) -> bb3;
    }

    bb3: {
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<(), ()>(move _22, _18, _19, move _24);
    }

    bb5: {
        _26 = const {alloc3: &()};
        _27 = &_28;
        _25 = (_26, move _27);
        _29 = (_25.0: &());
        _30 = (_25.1: &());
        _32 = <() as PartialEq>::eq(_29, _30) -> bb6;
    }

    bb6: {
        _31 = Not(move _32);
        switchInt(move _31) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _33 = core::panicking::AssertKind::Eq;
        _35 = Option::<Arguments<'_>>::None;
        _34 = core::panicking::assert_failed::<(), ()>(move _33, _29, _30, move _35);
    }

    bb8: {
        _37 = const {alloc4: &f64};
        _39 = const 1f64;
        _38 = &_39;
        _36 = (_37, move _38);
        _40 = (_36.0: &f64);
        _41 = (_36.1: &f64);
        _44 = (*_40);
        _45 = (*_41);
        _43 = Eq(move _44, move _45);
        _42 = Not(move _43);
        switchInt(move _42) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _46 = core::panicking::AssertKind::Eq;
        _48 = Option::<Arguments<'_>>::None;
        _47 = core::panicking::assert_failed::<f64, f64>(move _46, _40, _41, move _48);
    }

    bb10: {
        _51 = const {alloc5: &Foo};
        _50 = &((*_51).0: usize);
        _53 = const 12_usize;
        _52 = &_53;
        _49 = (move _50, move _52);
        _54 = (_49.0: &usize);
        _55 = (_49.1: &usize);
        _58 = (*_54);
        _59 = (*_55);
        _57 = Eq(move _58, move _59);
        _56 = Not(move _57);
        switchInt(move _56) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _60 = core::panicking::AssertKind::Eq;
        _62 = Option::<Arguments<'_>>::None;
        _61 = core::panicking::assert_failed::<usize, usize>(move _60, _54, _55, move _62);
    }

    bb12: {
        _65 = const {alloc5: &Foo};
        _64 = &((*_65).1: *const ());
        _67 = null::<()>() -> bb13;
    }

    bb13: {
        _66 = &_67;
        _63 = (move _64, move _66);
        _68 = (_63.0: &*const ());
        _69 = (_63.1: &*const ());
        _72 = (*_68);
        _73 = (*_69);
        _71 = Eq(move _72, move _73);
        _70 = Not(move _71);
        switchInt(move _70) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _74 = core::panicking::AssertKind::Eq;
        _76 = Option::<Arguments<'_>>::None;
        _75 = core::panicking::assert_failed::<*const (), *const ()>(move _74, _68, _69, move _76);
    }

    bb15: {
        _78 = const {alloc6: &Option<usize>};
        _80 = Option::<usize>::Some(const 100_usize);
        _79 = &_80;
        _77 = (_78, move _79);
        _81 = (_77.0: &std::option::Option<usize>);
        _82 = (_77.1: &std::option::Option<usize>);
        _84 = <Option<usize> as PartialEq>::eq(_81, _82) -> bb16;
    }

    bb16: {
        _83 = Not(move _84);
        switchInt(move _83) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _85 = core::panicking::AssertKind::Eq;
        _87 = Option::<Arguments<'_>>::None;
        _86 = core::panicking::assert_failed::<Option<usize>, Option<usize>>(move _85, _81, _82, move _87);
    }

    bb18: {
        _89 = const {alloc7: &usize};
        _91 = const 1000_usize;
        _90 = &_91;
        _88 = (_89, move _90);
        _92 = (_88.0: &usize);
        _93 = (_88.1: &usize);
        _96 = (*_92);
        _97 = (*_93);
        _95 = Eq(move _96, move _97);
        _94 = Not(move _95);
        switchInt(move _94) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _98 = core::panicking::AssertKind::Eq;
        _100 = Option::<Arguments<'_>>::None;
        _99 = core::panicking::assert_failed::<usize, usize>(move _98, _92, _93, move _100);
    }

    bb20: {
        _105 = const {alloc8: &fn(usize) -> usize};
        _104 = (*_105);
        _103 = move _104(const 300_usize) -> bb21;
    }

    bb21: {
        _102 = &_103;
        _107 = const 300_usize;
        _106 = &_107;
        _101 = (move _102, move _106);
        _108 = (_101.0: &usize);
        _109 = (_101.1: &usize);
        _112 = (*_108);
        _113 = (*_109);
        _111 = Eq(move _112, move _113);
        _110 = Not(move _111);
        switchInt(move _110) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        _114 = core::panicking::AssertKind::Eq;
        _116 = Option::<Arguments<'_>>::None;
        _115 = core::panicking::assert_failed::<usize, usize>(move _114, _108, _109, move _116);
    }

    bb23: {
        _121 = const {alloc9: &fn(usize) -> usize};
        _120 = (*_121);
        _119 = move _120(const 300_usize) -> bb24;
    }

    bb24: {
        _118 = &_119;
        _123 = const 300_usize;
        _122 = &_123;
        _117 = (move _118, move _122);
        _124 = (_117.0: &usize);
        _125 = (_117.1: &usize);
        _128 = (*_124);
        _129 = (*_125);
        _127 = Eq(move _128, move _129);
        _126 = Not(move _127);
        switchInt(move _126) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _130 = core::panicking::AssertKind::Eq;
        _132 = Option::<Arguments<'_>>::None;
        _131 = core::panicking::assert_failed::<usize, usize>(move _130, _124, _125, move _132);
    }

    bb26: {
        _137 = const {alloc10: &fn(usize) -> Option<usize>};
        _136 = (*_137);
        _135 = move _136(const 200_usize) -> bb27;
    }

    bb27: {
        _134 = &_135;
        _139 = Option::<usize>::Some(const 200_usize);
        _138 = &_139;
        _133 = (move _134, move _138);
        _140 = (_133.0: &std::option::Option<usize>);
        _141 = (_133.1: &std::option::Option<usize>);
        _143 = <Option<usize> as PartialEq>::eq(_140, _141) -> bb28;
    }

    bb28: {
        _142 = Not(move _143);
        switchInt(move _142) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _144 = core::panicking::AssertKind::Eq;
        _146 = Option::<Arguments<'_>>::None;
        _145 = core::panicking::assert_failed::<Option<usize>, Option<usize>>(move _144, _140, _141, move _146);
    }

    bb30: {
        return;
    }
}

alloc10 (static: BLOCK_ENUM_CONSTRUCTOR, size: 8, align: 8) {
    ╾───────alloc48───────╼                         │ ╾──────╼
}

alloc48 (fn: Option::<usize>::Some)

alloc9 (static: BLOCK_FN, size: 8, align: 8) {
    ╾───────alloc43───────╼                         │ ╾──────╼
}

alloc43 (fn: foo::<usize>)

alloc8 (static: BLOCK_FN_INFERRED, size: 8, align: 8) {
    ╾───────alloc38───────╼                         │ ╾──────╼
}

alloc38 (fn: foo::<usize>)

alloc7 (static: BLOCK_UNSAFE, size: 8, align: 8) {
    e8 03 00 00 00 00 00 00                         │ ........
}

alloc6 (static: BLOCK_ENUM, size: 16, align: 8) {
    01 00 00 00 00 00 00 00 64 00 00 00 00 00 00 00 │ ........d.......
}

alloc5 (static: BLOCK_STRUCT, size: 16, align: 8) {
    0c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 │ ................
}

alloc4 (static: BLOCK_FLOAT, size: 8, align: 8) {
    00 00 00 00 00 00 f0 3f                         │ .......?
}

alloc3 (static: BLOCK_IMPLICIT_UNIT, size: 0, align: 1) {}

alloc2 (static: BLOCK_EXPLICIT_UNIT, size: 0, align: 1) {}

alloc1 (static: BLOCK_INTEGRAL, size: 8, align: 8) {
    01 00 00 00 00 00 00 00                         │ ........
}
