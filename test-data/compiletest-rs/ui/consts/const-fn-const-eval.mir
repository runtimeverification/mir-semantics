// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn add(_1: usize, _2: usize) -> usize {
    debug x => _1;
    debug y => _2;
    let mut _0: usize;

    bb0: {
        _0 = Add(_1, _2);
        return;
    }
}

// MIR FOR CTFE
fn add(_1: usize, _2: usize) -> usize {
    debug x => _1;
    debug y => _2;
    let mut _0: usize;
    let mut _3: usize;
    let mut _4: usize;

    bb0: {
        StorageLive(_3);
        _3 = _1;
        StorageLive(_4);
        _4 = _2;
        _0 = Add(move _3, move _4);
        StorageDead(_4);
        StorageDead(_3);
        return;
    }
}

const ARR: [i32; 3] = {
    let mut _0: [i32; 3];

    bb0: {
        _0 = [const 5_i32, const 6_i32, const 7_i32];
        return;
    }
}

ARR::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        ConstEvalCounter;
        _0 = add(const 1_usize, const 2_usize) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
