// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const DANGLING: NonNull<u32> = {
    let mut _0: std::ptr::NonNull<u32>;

    bb0: {
        ConstEvalCounter;
        _0 = NonNull::<u32>::dangling() -> bb1;
    }

    bb1: {
        return;
    }
}

const CASTED: NonNull<u32> = {
    let mut _0: std::ptr::NonNull<u32>;
    let mut _1: std::ptr::NonNull<i32>;

    bb0: {
        StorageLive(_1);
        ConstEvalCounter;
        _1 = NonNull::<i32>::dangling() -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _0 = NonNull::<i32>::cast::<u32>(move _1) -> bb2;
    }

    bb2: {
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&std::ptr::NonNull<u32>, &std::ptr::NonNull<u32>);
    let mut _2: &std::ptr::NonNull<u32>;
    let _3: std::ptr::NonNull<u32>;
    let mut _4: &std::ptr::NonNull<u32>;
    let _5: std::ptr::NonNull<u32>;
    let mut _6: fn() -> std::ptr::NonNull<u32>;
    let mut _7: fn() -> std::ptr::NonNull<u32>;
    let _8: &std::ptr::NonNull<u32>;
    let _9: &std::ptr::NonNull<u32>;
    let mut _10: bool;
    let mut _11: bool;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&std::ptr::NonNull<u32>, &std::ptr::NonNull<u32>);
    let mut _16: &std::ptr::NonNull<u32>;
    let _17: std::ptr::NonNull<u32>;
    let mut _18: &std::ptr::NonNull<u32>;
    let _19: std::ptr::NonNull<u32>;
    let mut _20: fn() -> std::ptr::NonNull<u32>;
    let mut _21: fn() -> std::ptr::NonNull<u32>;
    let _22: &std::ptr::NonNull<u32>;
    let _23: &std::ptr::NonNull<u32>;
    let mut _24: bool;
    let mut _25: bool;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _8;
        debug right_val => _9;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }
    scope 3 {
        debug left_val => _22;
        debug right_val => _23;
        let _26: core::panicking::AssertKind;
        scope 4 {
            debug kind => _26;
        }
    }

    bb0: {
        _3 = const _;
        _2 = &_3;
        _7 = NonNull::<u32>::dangling as fn() -> std::ptr::NonNull<u32> (Pointer(ReifyFnPointer));
        _6 = test::black_box::<fn() -> NonNull<u32>>(move _7) -> bb1;
    }

    bb1: {
        _5 = move _6() -> bb2;
    }

    bb2: {
        _4 = &_5;
        _1 = (move _2, move _4);
        _8 = (_1.0: &std::ptr::NonNull<u32>);
        _9 = (_1.1: &std::ptr::NonNull<u32>);
        _11 = <NonNull<u32> as PartialEq>::eq(_8, _9) -> bb3;
    }

    bb3: {
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<NonNull<u32>, NonNull<u32>>(move _12, _8, _9, move _14);
    }

    bb5: {
        _17 = const _;
        _16 = &_17;
        _21 = NonNull::<u32>::dangling as fn() -> std::ptr::NonNull<u32> (Pointer(ReifyFnPointer));
        _20 = test::black_box::<fn() -> NonNull<u32>>(move _21) -> bb6;
    }

    bb6: {
        _19 = move _20() -> bb7;
    }

    bb7: {
        _18 = &_19;
        _15 = (move _16, move _18);
        _22 = (_15.0: &std::ptr::NonNull<u32>);
        _23 = (_15.1: &std::ptr::NonNull<u32>);
        _25 = <NonNull<u32> as PartialEq>::eq(_22, _23) -> bb8;
    }

    bb8: {
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<NonNull<u32>, NonNull<u32>>(move _26, _22, _23, move _28);
    }

    bb10: {
        return;
    }
}
