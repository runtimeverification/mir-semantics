// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn choice_u64(_1: bool, _2: u64, _3: u64) -> u64 {
    debug c => _1;
    debug a => _2;
    debug b => _3;
    let mut _0: u64;
    let mut _4: u64;
    let mut _5: u64;
    let mut _6: i64;
    let mut _7: i64;
    let mut _8: u64;
    let mut _9: u64;
    let mut _10: i64;
    let mut _11: i64;
    let mut _12: bool;

    bb0: {
        _7 = _1 as i64 (IntToInt);
        _6 = Neg(move _7);
        _5 = move _6 as u64 (IntToInt);
        _4 = BitAnd(move _5, _2);
        _12 = Not(_1);
        _11 = move _12 as i64 (IntToInt);
        _10 = Neg(move _11);
        _9 = move _10 as u64 (IntToInt);
        _8 = BitAnd(move _9, _3);
        _0 = BitOr(move _4, move _8);
        return;
    }
}

// MIR FOR CTFE
fn choice_u64(_1: bool, _2: u64, _3: u64) -> u64 {
    debug c => _1;
    debug a => _2;
    debug b => _3;
    let mut _0: u64;
    let mut _4: u64;
    let mut _5: u64;
    let mut _6: i64;
    let mut _7: i64;
    let mut _8: bool;
    let mut _9: u64;
    let mut _10: u64;
    let mut _11: u64;
    let mut _12: i64;
    let mut _13: i64;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: u64;

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _1;
        _7 = move _8 as i64 (IntToInt);
        StorageDead(_8);
        _6 = Neg(move _7);
        StorageDead(_7);
        _5 = move _6 as u64 (IntToInt);
        StorageDead(_6);
        StorageLive(_9);
        _9 = _2;
        _4 = BitAnd(move _5, move _9);
        StorageDead(_9);
        StorageDead(_5);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = _1;
        _14 = Not(move _15);
        StorageDead(_15);
        _13 = move _14 as i64 (IntToInt);
        StorageDead(_14);
        _12 = Neg(move _13);
        StorageDead(_13);
        _11 = move _12 as u64 (IntToInt);
        StorageDead(_12);
        StorageLive(_16);
        _16 = _3;
        _10 = BitAnd(move _11, move _16);
        StorageDead(_16);
        StorageDead(_11);
        _0 = BitOr(move _4, move _10);
        StorageDead(_10);
        StorageDead(_4);
        return;
    }
}

fn max_usize(_1: usize, _2: usize) -> usize {
    debug a => _1;
    debug b => _2;
    let mut _0: usize;
    let mut _3: u64;
    let mut _4: bool;
    let mut _5: u64;
    let mut _6: u64;

    bb0: {
        _4 = Gt(_1, _2);
        _5 = _1 as u64 (IntToInt);
        _6 = _2 as u64 (IntToInt);
        _3 = choice_u64(move _4, move _5, move _6) -> bb1;
    }

    bb1: {
        _0 = move _3 as usize (IntToInt);
        return;
    }
}

// MIR FOR CTFE
fn max_usize(_1: usize, _2: usize) -> usize {
    debug a => _1;
    debug b => _2;
    let mut _0: usize;
    let mut _3: u64;
    let mut _4: bool;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: u64;
    let mut _8: usize;
    let mut _9: u64;
    let mut _10: usize;

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = _1;
        StorageLive(_6);
        _6 = _2;
        _4 = Gt(move _5, move _6);
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _1;
        _7 = move _8 as u64 (IntToInt);
        StorageDead(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = _2;
        _9 = move _10 as u64 (IntToInt);
        StorageDead(_10);
        ConstEvalCounter;
        _3 = choice_u64(move _4, move _7, move _9) -> bb1;
    }

    bb1: {
        StorageDead(_9);
        StorageDead(_7);
        StorageDead(_4);
        _0 = move _3 as usize (IntToInt);
        StorageDead(_3);
        return;
    }
}

fn align_to(_1: usize, _2: usize) -> usize {
    debug size => _1;
    debug align => _2;
    let mut _0: usize;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: usize;

    bb0: {
        _4 = Sub(_2, const 1_usize);
        _3 = Add(_1, move _4);
        _6 = Sub(_2, const 1_usize);
        _5 = Not(move _6);
        _0 = BitAnd(move _3, move _5);
        return;
    }
}

// MIR FOR CTFE
fn align_to(_1: usize, _2: usize) -> usize {
    debug size => _1;
    debug align => _2;
    let mut _0: usize;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: usize;

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = _1;
        StorageLive(_5);
        StorageLive(_6);
        _6 = _2;
        _5 = Sub(move _6, const 1_usize);
        StorageDead(_6);
        _3 = Add(move _4, move _5);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = _2;
        _8 = Sub(move _9, const 1_usize);
        StorageDead(_9);
        _7 = Not(move _8);
        StorageDead(_8);
        _0 = BitAnd(move _3, move _7);
        StorageDead(_7);
        StorageDead(_3);
        return;
    }
}

fn packed_union_size_of() -> usize {
    let mut _0: usize;
    let mut _1: usize;
    let mut _2: usize;

    bb0: {
        _1 = std::mem::size_of::<A>() -> bb1;
    }

    bb1: {
        _2 = std::mem::size_of::<B>() -> bb2;
    }

    bb2: {
        _0 = max_usize(move _1, move _2) -> bb3;
    }

    bb3: {
        return;
    }
}

// MIR FOR CTFE
fn packed_union_size_of() -> usize {
    let mut _0: usize;
    let mut _1: usize;
    let mut _2: usize;

    bb0: {
        StorageLive(_1);
        ConstEvalCounter;
        _1 = std::mem::size_of::<A>() -> bb1;
    }

    bb1: {
        StorageLive(_2);
        ConstEvalCounter;
        _2 = std::mem::size_of::<B>() -> bb2;
    }

    bb2: {
        ConstEvalCounter;
        _0 = max_usize(move _1, move _2) -> bb3;
    }

    bb3: {
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

fn union_align_of() -> usize {
    let mut _0: usize;
    let mut _1: usize;
    let mut _2: usize;

    bb0: {
        _1 = align_of::<A>() -> bb1;
    }

    bb1: {
        _2 = align_of::<B>() -> bb2;
    }

    bb2: {
        _0 = max_usize(move _1, move _2) -> bb3;
    }

    bb3: {
        return;
    }
}

// MIR FOR CTFE
fn union_align_of() -> usize {
    let mut _0: usize;
    let mut _1: usize;
    let mut _2: usize;

    bb0: {
        StorageLive(_1);
        ConstEvalCounter;
        _1 = align_of::<A>() -> bb1;
    }

    bb1: {
        StorageLive(_2);
        ConstEvalCounter;
        _2 = align_of::<B>() -> bb2;
    }

    bb2: {
        ConstEvalCounter;
        _0 = max_usize(move _1, move _2) -> bb3;
    }

    bb3: {
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

fn union_size_of() -> usize {
    let mut _0: usize;
    let mut _1: usize;
    let mut _2: usize;

    bb0: {
        _1 = packed_union_size_of::<A, B>() -> bb1;
    }

    bb1: {
        _2 = union_align_of::<A, B>() -> bb2;
    }

    bb2: {
        _0 = align_to(move _1, move _2) -> bb3;
    }

    bb3: {
        return;
    }
}

// MIR FOR CTFE
fn union_size_of() -> usize {
    let mut _0: usize;
    let mut _1: usize;
    let mut _2: usize;

    bb0: {
        StorageLive(_1);
        ConstEvalCounter;
        _1 = packed_union_size_of::<A, B>() -> bb1;
    }

    bb1: {
        StorageLive(_2);
        ConstEvalCounter;
        _2 = union_align_of::<A, B>() -> bb2;
    }

    bb2: {
        ConstEvalCounter;
        _0 = align_to(move _1, move _2) -> bb3;
    }

    bb3: {
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

U::_align::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

U::_align::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

U::_align::{constant#2}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

U::_bytes::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        ConstEvalCounter;
        _0 = union_size_of::<u16, [u8; 3]>() -> bb1;
    }

    bb1: {
        return;
    }
}

U::_bytes::{constant#0}::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

fn test(_1: U) -> () {
    debug u => _1;
    let mut _0: ();
    let mut _2: (&usize, &usize);
    let mut _3: &usize;
    let _4: usize;
    let _5: &[u8; 4];
    let mut _6: &usize;
    let _7: usize;
    let _8: &usize;
    let _9: &usize;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _8;
        debug right_val => _9;
        let _14: core::panicking::AssertKind;
        scope 2 {
            debug kind => _14;
        }
    }

    bb0: {
        _5 = &(_1.1: [u8; 4]);
        _4 = std::mem::size_of_val::<[u8; 4]>(_5) -> bb1;
    }

    bb1: {
        _3 = &_4;
        _7 = const 4_usize;
        _6 = &_7;
        _2 = (move _3, move _6);
        _8 = (_2.0: &usize);
        _9 = (_2.1: &usize);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<usize, usize>(move _14, _8, _9, move _16);
    }

    bb3: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let mut _2: &usize;
    let _3: usize;
    let mut _4: &usize;
    let _5: usize;
    let _6: &usize;
    let _7: &usize;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: usize;
    let mut _11: usize;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&usize, &usize);
    let mut _16: &usize;
    let _17: usize;
    let mut _18: &usize;
    let _19: usize;
    let _20: &usize;
    let _21: &usize;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: usize;
    let mut _25: usize;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }
    scope 3 {
        debug left_val => _20;
        debug right_val => _21;
        let _26: core::panicking::AssertKind;
        scope 4 {
            debug kind => _26;
        }
    }

    bb0: {
        _3 = std::mem::size_of::<U>() -> bb1;
    }

    bb1: {
        _2 = &_3;
        _5 = const 4_usize;
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &usize);
        _7 = (_1.1: &usize);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<usize, usize>(move _12, _6, _7, move _14);
    }

    bb3: {
        _17 = align_of::<U>() -> bb4;
    }

    bb4: {
        _16 = &_17;
        _19 = const 2_usize;
        _18 = &_19;
        _15 = (move _16, move _18);
        _20 = (_15.0: &usize);
        _21 = (_15.1: &usize);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<usize, usize>(move _26, _20, _21, move _28);
    }

    bb6: {
        return;
    }
}
