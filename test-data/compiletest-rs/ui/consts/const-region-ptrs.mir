// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const x: &isize = {
    let mut _0: &isize;
    let _1: &isize;
    let _2: isize;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const 10_isize;
        _1 = &_2;
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

const y: &Pair<'_> = {
    let mut _0: &Pair<'_>;
    let _1: &Pair<'_>;
    let _2: Pair<'_>;
    let mut _3: &isize;
    let _4: &isize;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = const _;
        _3 = &(*_4);
        _2 = Pair::<'_> { a: const 15_isize, b: move _3 };
        StorageDead(_3);
        _1 = &_2;
        _0 = &(*_1);
        StorageDead(_4);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let _4: &[&str; 2];
    let _5: [&str; 2];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &isize;
    let _11: ();
    let mut _12: std::fmt::Arguments<'_>;
    let mut _13: &[&str];
    let _14: &[&str; 3];
    let _15: [&str; 3];
    let mut _16: &[core::fmt::rt::Argument<'_>];
    let _17: &[core::fmt::rt::Argument<'_>; 2];
    let _18: [core::fmt::rt::Argument<'_>; 2];
    let mut _19: core::fmt::rt::Argument<'_>;
    let _20: &isize;
    let _21: &Pair<'_>;
    let mut _22: core::fmt::rt::Argument<'_>;
    let _23: &Pair<'_>;
    let mut _24: (&isize, &isize);
    let _25: &isize;
    let mut _26: &isize;
    let _27: isize;
    let _28: &isize;
    let _29: &isize;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: isize;
    let mut _33: isize;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _37: (&isize, &isize);
    let _38: &Pair<'_>;
    let mut _39: &isize;
    let _40: isize;
    let _41: &isize;
    let _42: &isize;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: isize;
    let mut _46: isize;
    let _48: !;
    let mut _49: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _50: &isize;
    let mut _51: &isize;
    scope 1 {
        debug left_val => _28;
        debug right_val => _29;
        let _34: core::panicking::AssertKind;
        scope 2 {
            debug kind => _34;
        }
    }
    scope 3 {
        debug left_val => _41;
        debug right_val => _42;
        let _47: core::panicking::AssertKind;
        scope 4 {
            debug kind => _47;
        }
    }

    bb0: {
        _5 = [const "x = ", const "\n"];
        _4 = &_5;
        _3 = _4 as &[&str] (Pointer(Unsize));
        _10 = const _;
        _9 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_10) -> bb1;
    }

    bb1: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_v1(move _3, move _6) -> bb2;
    }

    bb2: {
        _1 = _print(move _2) -> bb3;
    }

    bb3: {
        _15 = [const "y = {a: ", const ", b: ", const "}\n"];
        _14 = &_15;
        _13 = _14 as &[&str] (Pointer(Unsize));
        _21 = const _;
        _20 = &((*_21).0: isize);
        _19 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_20) -> bb4;
    }

    bb4: {
        _23 = const _;
        _50 = deref_copy ((*_23).1: &isize);
        _22 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_50) -> bb5;
    }

    bb5: {
        _18 = [move _19, move _22];
        _17 = &_18;
        _16 = _17 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _12 = Arguments::<'_>::new_v1(move _13, move _16) -> bb6;
    }

    bb6: {
        _11 = _print(move _12) -> bb7;
    }

    bb7: {
        _25 = const _;
        _27 = const 10_isize;
        _26 = &_27;
        _24 = (_25, move _26);
        _28 = (_24.0: &isize);
        _29 = (_24.1: &isize);
        _32 = (*_28);
        _33 = (*_29);
        _31 = Eq(move _32, move _33);
        _30 = Not(move _31);
        switchInt(move _30) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = core::panicking::assert_failed::<isize, isize>(move _34, _28, _29, move _36);
    }

    bb9: {
        _38 = const _;
        _51 = deref_copy ((*_38).1: &isize);
        _40 = const 10_isize;
        _39 = &_40;
        _37 = (_51, move _39);
        _41 = (_37.0: &isize);
        _42 = (_37.1: &isize);
        _45 = (*_41);
        _46 = (*_42);
        _44 = Eq(move _45, move _46);
        _43 = Not(move _44);
        switchInt(move _43) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _47 = core::panicking::AssertKind::Eq;
        _49 = Option::<Arguments<'_>>::None;
        _48 = core::panicking::assert_failed::<isize, isize>(move _47, _41, _42, move _49);
    }

    bb11: {
        return;
    }
}
