// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn ret_i32_no_unsafe() -> i32 {
    let mut _0: i32;

    bb0: {
        _0 = const 42_i32;
        return;
    }
}

// MIR FOR CTFE
fn ret_i32_no_unsafe() -> i32 {
    let mut _0: i32;

    bb0: {
        _0 = const 42_i32;
        return;
    }
}

fn ret_null_ptr_no_unsafe() -> *const T {
    let mut _0: *const T;

    bb0: {
        _0 = null::<T>() -> bb1;
    }

    bb1: {
        return;
    }
}

// MIR FOR CTFE
fn ret_null_ptr_no_unsafe() -> *const T {
    let mut _0: *const T;

    bb0: {
        ConstEvalCounter;
        _0 = null::<T>() -> bb1;
    }

    bb1: {
        return;
    }
}

fn ret_null_mut_ptr_no_unsafe() -> *mut T {
    let mut _0: *mut T;

    bb0: {
        _0 = null_mut::<T>() -> bb1;
    }

    bb1: {
        return;
    }
}

// MIR FOR CTFE
fn ret_null_mut_ptr_no_unsafe() -> *mut T {
    let mut _0: *mut T;

    bb0: {
        ConstEvalCounter;
        _0 = null_mut::<T>() -> bb1;
    }

    bb1: {
        return;
    }
}

fn no_unsafe() -> () {
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

// MIR FOR CTFE
fn no_unsafe() -> () {
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        _0 = const ();
        return;
    }
}

fn call_unsafe_const_fn() -> i32 {
    let mut _0: i32;
    scope 1 {
    }

    bb0: {
        _0 = ret_i32_no_unsafe() -> bb1;
    }

    bb1: {
        return;
    }
}

// MIR FOR CTFE
fn call_unsafe_const_fn() -> i32 {
    let mut _0: i32;
    scope 1 {
    }

    bb0: {
        ConstEvalCounter;
        _0 = ret_i32_no_unsafe() -> bb1;
    }

    bb1: {
        return;
    }
}

fn call_unsafe_generic_const_fn() -> *const String {
    let mut _0: *const std::string::String;
    scope 1 {
    }

    bb0: {
        _0 = ret_null_ptr_no_unsafe::<String>() -> bb1;
    }

    bb1: {
        return;
    }
}

// MIR FOR CTFE
fn call_unsafe_generic_const_fn() -> *const String {
    let mut _0: *const std::string::String;
    scope 1 {
    }

    bb0: {
        ConstEvalCounter;
        _0 = ret_null_ptr_no_unsafe::<String>() -> bb1;
    }

    bb1: {
        return;
    }
}

fn call_unsafe_generic_cell_const_fn() -> *const Vec<Cell<u32>> {
    let mut _0: *const std::vec::Vec<std::cell::Cell<u32>>;
    let mut _1: *mut std::vec::Vec<std::cell::Cell<u32>>;
    scope 1 {
    }

    bb0: {
        _1 = ret_null_mut_ptr_no_unsafe::<Vec<Cell<u32>>>() -> bb1;
    }

    bb1: {
        _0 = move _1 as *const std::vec::Vec<std::cell::Cell<u32>> (Pointer(MutToConstPointer));
        return;
    }
}

// MIR FOR CTFE
fn call_unsafe_generic_cell_const_fn() -> *const Vec<Cell<u32>> {
    let mut _0: *const std::vec::Vec<std::cell::Cell<u32>>;
    let mut _1: *mut std::vec::Vec<std::cell::Cell<u32>>;
    scope 1 {
    }

    bb0: {
        StorageLive(_1);
        ConstEvalCounter;
        _1 = ret_null_mut_ptr_no_unsafe::<Vec<Cell<u32>>>() -> bb1;
    }

    bb1: {
        _0 = move _1 as *const std::vec::Vec<std::cell::Cell<u32>> (Pointer(MutToConstPointer));
        StorageDead(_1);
        return;
    }
}

fn call_unsafe_const_unsafe_fn() -> i32 {
    let mut _0: i32;
    scope 1 {
    }

    bb0: {
        _0 = ret_i32_no_unsafe() -> bb1;
    }

    bb1: {
        return;
    }
}

// MIR FOR CTFE
fn call_unsafe_const_unsafe_fn() -> i32 {
    let mut _0: i32;
    scope 1 {
    }

    bb0: {
        ConstEvalCounter;
        _0 = ret_i32_no_unsafe() -> bb1;
    }

    bb1: {
        return;
    }
}

fn call_unsafe_generic_const_unsafe_fn() -> *const String {
    let mut _0: *const std::string::String;
    scope 1 {
    }

    bb0: {
        _0 = ret_null_ptr_no_unsafe::<String>() -> bb1;
    }

    bb1: {
        return;
    }
}

// MIR FOR CTFE
fn call_unsafe_generic_const_unsafe_fn() -> *const String {
    let mut _0: *const std::string::String;
    scope 1 {
    }

    bb0: {
        ConstEvalCounter;
        _0 = ret_null_ptr_no_unsafe::<String>() -> bb1;
    }

    bb1: {
        return;
    }
}

fn call_unsafe_generic_cell_const_unsafe_fn() -> *const Vec<Cell<u32>> {
    let mut _0: *const std::vec::Vec<std::cell::Cell<u32>>;
    let mut _1: *mut std::vec::Vec<std::cell::Cell<u32>>;
    scope 1 {
    }

    bb0: {
        _1 = ret_null_mut_ptr_no_unsafe::<Vec<Cell<u32>>>() -> bb1;
    }

    bb1: {
        _0 = move _1 as *const std::vec::Vec<std::cell::Cell<u32>> (Pointer(MutToConstPointer));
        return;
    }
}

// MIR FOR CTFE
fn call_unsafe_generic_cell_const_unsafe_fn() -> *const Vec<Cell<u32>> {
    let mut _0: *const std::vec::Vec<std::cell::Cell<u32>>;
    let mut _1: *mut std::vec::Vec<std::cell::Cell<u32>>;
    scope 1 {
    }

    bb0: {
        StorageLive(_1);
        ConstEvalCounter;
        _1 = ret_null_mut_ptr_no_unsafe::<Vec<Cell<u32>>>() -> bb1;
    }

    bb1: {
        _0 = move _1 as *const std::vec::Vec<std::cell::Cell<u32>> (Pointer(MutToConstPointer));
        StorageDead(_1);
        return;
    }
}

fn call_unsafe_const_unsafe_fn_immediate() -> i32 {
    let mut _0: i32;

    bb0: {
        _0 = ret_i32_no_unsafe() -> bb1;
    }

    bb1: {
        return;
    }
}

// MIR FOR CTFE
fn call_unsafe_const_unsafe_fn_immediate() -> i32 {
    let mut _0: i32;

    bb0: {
        ConstEvalCounter;
        _0 = ret_i32_no_unsafe() -> bb1;
    }

    bb1: {
        return;
    }
}

fn call_unsafe_generic_const_unsafe_fn_immediate() -> *const String {
    let mut _0: *const std::string::String;

    bb0: {
        _0 = ret_null_ptr_no_unsafe::<String>() -> bb1;
    }

    bb1: {
        return;
    }
}

// MIR FOR CTFE
fn call_unsafe_generic_const_unsafe_fn_immediate() -> *const String {
    let mut _0: *const std::string::String;

    bb0: {
        ConstEvalCounter;
        _0 = ret_null_ptr_no_unsafe::<String>() -> bb1;
    }

    bb1: {
        return;
    }
}

fn call_unsafe_generic_cell_const_unsafe_fn_immediate() -> *const Vec<Cell<u32>> {
    let mut _0: *const std::vec::Vec<std::cell::Cell<u32>>;
    let mut _1: *mut std::vec::Vec<std::cell::Cell<u32>>;

    bb0: {
        _1 = ret_null_mut_ptr_no_unsafe::<Vec<Cell<u32>>>() -> bb1;
    }

    bb1: {
        _0 = move _1 as *const std::vec::Vec<std::cell::Cell<u32>> (Pointer(MutToConstPointer));
        return;
    }
}

// MIR FOR CTFE
fn call_unsafe_generic_cell_const_unsafe_fn_immediate() -> *const Vec<Cell<u32>> {
    let mut _0: *const std::vec::Vec<std::cell::Cell<u32>>;
    let mut _1: *mut std::vec::Vec<std::cell::Cell<u32>>;

    bb0: {
        StorageLive(_1);
        ConstEvalCounter;
        _1 = ret_null_mut_ptr_no_unsafe::<Vec<Cell<u32>>>() -> bb1;
    }

    bb1: {
        _0 = move _1 as *const std::vec::Vec<std::cell::Cell<u32>> (Pointer(MutToConstPointer));
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
