// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn const_address_of_in_const() -> () {
    let mut _0: ();
    let mut _1: i32;
    scope 1 {
        debug a => _1;
        let _2: *const i32;
        scope 2 {
            debug b => _2;
        }
    }

    bb0: {
        _1 = const 0_i32;
        _2 = &raw const _1;
        return;
    }
}

// MIR FOR CTFE
fn const_address_of_in_const() -> () {
    let mut _0: ();
    let mut _1: i32;
    scope 1 {
        debug a => _1;
        let _2: *const i32;
        scope 2 {
            debug b => _2;
        }
    }

    bb0: {
        StorageLive(_1);
        _1 = const 0_i32;
        StorageLive(_2);
        _2 = &raw const _1;
        _0 = const ();
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

fn <impl at ui/consts/min_const_fn/address_of_const.rs:12:1: 12:7>::inherent_const_address_of_in_const() -> () {
    let mut _0: ();
    let mut _1: i32;
    scope 1 {
        debug a => _1;
        let _2: *const i32;
        scope 2 {
            debug b => _2;
        }
    }

    bb0: {
        _1 = const 0_i32;
        _2 = &raw const _1;
        return;
    }
}

// MIR FOR CTFE
fn <impl at ui/consts/min_const_fn/address_of_const.rs:12:1: 12:7>::inherent_const_address_of_in_const() -> () {
    let mut _0: ();
    let mut _1: i32;
    scope 1 {
        debug a => _1;
        let _2: *const i32;
        scope 2 {
            debug b => _2;
        }
    }

    bb0: {
        StorageLive(_1);
        _1 = const 0_i32;
        StorageLive(_2);
        _2 = &raw const _1;
        _0 = const ();
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
