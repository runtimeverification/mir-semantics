// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn unsize(_1: &[u8; 3]) -> &[u8] {
    debug x => _1;
    let mut _0: &[u8];

    bb0: {
        _0 = _1 as &[u8] (Pointer(Unsize));
        return;
    }
}

// MIR FOR CTFE
fn unsize(_1: &[u8; 3]) -> &[u8] {
    debug x => _1;
    let mut _0: &[u8];
    let mut _2: &[u8; 3];

    bb0: {
        StorageLive(_2);
        _2 = &(*_1);
        _0 = move _2 as &[u8] (Pointer(Unsize));
        StorageDead(_2);
        return;
    }
}

unsize::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

fn closure() -> fn() {
    let mut _0: fn();

    bb0: {
        _0 = const ZeroSized: [closure@ui/consts/min_const_fn/cast_fn.rs:6:30: 6:32] as fn() (Pointer(ClosureFnPointer(Normal)));
        return;
    }
}

// MIR FOR CTFE
fn closure() -> fn() {
    let mut _0: fn();
    let mut _1: [closure@ui/consts/min_const_fn/cast_fn.rs:6:30: 6:32];

    bb0: {
        StorageLive(_1);
        _1 = [closure@ui/consts/min_const_fn/cast_fn.rs:6:30: 6:32];
        _0 = move _1 as fn() (Pointer(ClosureFnPointer(Normal)));
        StorageDead(_1);
        return;
    }
}

fn closure::{closure#0}(_1: &[closure@ui/consts/min_const_fn/cast_fn.rs:6:30: 6:32]) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn closure2() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

// MIR FOR CTFE
fn closure2() -> () {
    let mut _0: ();
    let _1: fn();
    let mut _2: [closure@ui/consts/min_const_fn/cast_fn.rs:8:6: 8:8];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = [closure@ui/consts/min_const_fn/cast_fn.rs:8:6: 8:8];
        _1 = move _2 as fn() (Pointer(ClosureFnPointer(Normal)));
        StorageDead(_2);
        StorageDead(_1);
        _0 = const ();
        return;
    }
}

fn closure2::{closure#0}(_1: &[closure@ui/consts/min_const_fn/cast_fn.rs:8:6: 8:8]) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn reify(_1: fn()) -> unsafe fn() {
    debug f => _1;
    let mut _0: unsafe fn();

    bb0: {
        _0 = _1 as unsafe fn() (Pointer(UnsafeFnPointer));
        return;
    }
}

// MIR FOR CTFE
fn reify(_1: fn()) -> unsafe fn() {
    debug f => _1;
    let mut _0: unsafe fn();
    let mut _2: fn();

    bb0: {
        StorageLive(_2);
        _2 = _1;
        _0 = move _2 as unsafe fn() (Pointer(UnsafeFnPointer));
        StorageDead(_2);
        return;
    }
}

fn reify2() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

// MIR FOR CTFE
fn reify2() -> () {
    let mut _0: ();
    let _1: unsafe fn();
    let mut _2: fn();

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = main as fn() (Pointer(ReifyFnPointer));
        _1 = move _2 as unsafe fn() (Pointer(UnsafeFnPointer));
        StorageDead(_2);
        StorageDead(_1);
        _0 = const ();
        return;
    }
}
