// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn takes_fn_ptr(_1: fn()) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

// MIR FOR CTFE
fn takes_fn_ptr(_1: fn()) -> () {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

const FN: fn() = {
    let mut _0: fn();
    let mut _1: [closure@ui/consts/min_const_fn/allow_const_fn_ptr_run_pass.rs:11:18: 11:20];

    bb0: {
        StorageLive(_1);
        _1 = [closure@ui/consts/min_const_fn/allow_const_fn_ptr_run_pass.rs:11:18: 11:20];
        _0 = move _1 as fn() (Pointer(ClosureFnPointer(Normal)));
        StorageDead(_1);
        return;
    }
}

fn FN::{closure#0}(_1: &[closure@ui/consts/min_const_fn/allow_const_fn_ptr_run_pass.rs:11:18: 11:20]) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn gives_fn_ptr() -> () {
    let mut _0: ();

    bb0: {
        _0 = takes_fn_ptr(const _) -> bb1;
    }

    bb1: {
        return;
    }
}

// MIR FOR CTFE
fn gives_fn_ptr() -> () {
    let mut _0: ();

    bb0: {
        ConstEvalCounter;
        _0 = takes_fn_ptr(const _) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();

    bb0: {
        _1 = gives_fn_ptr() -> bb1;
    }

    bb1: {
        return;
    }
}
