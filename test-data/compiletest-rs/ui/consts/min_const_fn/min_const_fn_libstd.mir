// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/consts/min_const_fn/min_const_fn_libstd.rs:13:16: 13:21>::clone(_1: &NoWait) -> NoWait {
    debug self => _1;
    let mut _0: NoWait;
    scope 1 {
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn <impl at ui/consts/min_const_fn/min_const_fn_libstd.rs:13:23: 13:25>::assert_receiver_is_total_eq(_1: &NoWait) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn <impl at ui/consts/min_const_fn/min_const_fn_libstd.rs:13:27: 13:36>::eq(_1: &NoWait, _2: &NoWait) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: u32;
    let mut _4: u32;

    bb0: {
        _3 = ((*_1).0: u32);
        _4 = ((*_2).0: u32);
        _0 = Eq(move _3, move _4);
        return;
    }
}

fn <impl at ui/consts/min_const_fn/min_const_fn_libstd.rs:13:38: 13:42>::hash(_1: &NoWait, _2: &mut __H) -> () {
    debug self => _1;
    debug state => _2;
    let mut _0: ();
    let _3: &u32;

    bb0: {
        _3 = &((*_1).0: u32);
        _0 = <u32 as Hash>::hash::<__H>(_3, _2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/consts/min_const_fn/min_const_fn_libstd.rs:13:44: 13:49>::fmt(_1: &NoWait, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&u32;
    let _6: &u32;

    bb0: {
        _3 = const "NoWait";
        _6 = &((*_1).0: u32);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> bb1;
    }

    bb1: {
        return;
    }
}

const CONDVAR_HAS_NO_WAITERS: NoWait = {
    let mut _0: NoWait;

    bb0: {
        _0 = NoWait(const 42_u32);
        return;
    }
}

fn <impl at ui/consts/min_const_fn/min_const_fn_libstd.rs:18:1: 18:13>::new() -> Condvar {
    let mut _0: Condvar;
    let mut _1: std::cell::UnsafeCell<std::sync::atomic::AtomicU32>;
    let mut _2: std::sync::atomic::AtomicU32;
    let mut _3: u32;
    let mut _4: NoWait;

    bb0: {
        _4 = const _;
        _3 = (_4.0: u32);
        _2 = AtomicU32::new(move _3) -> bb1;
    }

    bb1: {
        _1 = UnsafeCell::<AtomicU32>::new(move _2) -> bb2;
    }

    bb2: {
        _0 = Condvar { condvar: move _1 };
        return;
    }
}

// MIR FOR CTFE
fn <impl at ui/consts/min_const_fn/min_const_fn_libstd.rs:18:1: 18:13>::new() -> Condvar {
    let mut _0: Condvar;
    let mut _1: std::cell::UnsafeCell<std::sync::atomic::AtomicU32>;
    let mut _2: std::sync::atomic::AtomicU32;
    let mut _3: u32;
    let mut _4: NoWait;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = const _;
        _3 = (_4.0: u32);
        ConstEvalCounter;
        _2 = AtomicU32::new(move _3) -> bb1;
    }

    bb1: {
        StorageDead(_3);
        ConstEvalCounter;
        _1 = UnsafeCell::<AtomicU32>::new(move _2) -> bb2;
    }

    bb2: {
        StorageDead(_2);
        _0 = Condvar { condvar: move _1 };
        StorageDead(_1);
        StorageDead(_4);
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn NoWait(_1: u32) -> NoWait {
    let mut _0: NoWait;

    bb0: {
        _0 = NoWait(move _1);
        return;
    }
}

// MIR FOR CTFE
fn NoWait(_1: u32) -> NoWait {
    let mut _0: NoWait;

    bb0: {
        _0 = NoWait(move _1);
        return;
    }
}
