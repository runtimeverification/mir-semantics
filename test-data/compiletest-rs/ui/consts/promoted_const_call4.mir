// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static FLAG: std::sync::atomic::AtomicBool = {
    let mut _0: std::sync::atomic::AtomicBool;

    bb0: {
        ConstEvalCounter;
        _0 = std::sync::atomic::AtomicBool::new(const false) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/consts/promoted_const_call4.rs:8:1: 8:24>::drop(_1: &mut NoisyDrop) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let _3: &std::sync::atomic::AtomicBool;
    let mut _4: std::sync::atomic::Ordering;

    bb0: {
        _3 = const {alloc1: &std::sync::atomic::AtomicBool};
        _4 = SeqCst;
        _2 = std::sync::atomic::AtomicBool::store(_3, const true, move _4) -> bb1;
    }

    bb1: {
        return;
    }
}

alloc1 (static: FLAG, size: 1, align: 1) {
    00                                              │ .
}

fn main() -> () {
    let mut _0: ();
    let _1: &&i32;
    let _2: &i32;
    let _3: (NoisyDrop, i32);
    let mut _4: NoisyDrop;
    let mut _5: bool;
    let mut _6: bool;
    let _7: &std::sync::atomic::AtomicBool;
    let mut _8: std::sync::atomic::Ordering;
    let mut _9: !;
    scope 1 {
        debug _val => _1;
    }

    bb0: {
        _4 = NoisyDrop(const "drop!");
        _3 = (move _4, const 0_i32);
        _2 = &(_3.1: i32);
        _1 = &_2;
        drop(_3) -> bb1;
    }

    bb1: {
        _7 = const {alloc1: &std::sync::atomic::AtomicBool};
        _8 = SeqCst;
        _6 = std::sync::atomic::AtomicBool::load(_7, move _8) -> bb2;
    }

    bb2: {
        _5 = Not(move _6);
        switchInt(move _5) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _9 = core::panicking::panic(const "assertion failed: FLAG.load(Ordering::SeqCst)");
    }

    bb4: {
        return;
    }
}

alloc1 (static: FLAG, size: 1, align: 1) {
    00                                              │ .
}

fn NoisyDrop(_1: &str) -> NoisyDrop {
    let mut _0: NoisyDrop;

    bb0: {
        _0 = NoisyDrop(move _1);
        return;
    }
}

// MIR FOR CTFE
fn NoisyDrop(_1: &str) -> NoisyDrop {
    let mut _0: NoisyDrop;

    bb0: {
        _0 = NoisyDrop(move _1);
        return;
    }
}
