// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static lsl: isize = {
    let mut _0: isize;
    let mut _1: u32;
    let mut _2: bool;

    bb0: {
        _1 = const 2_i32 as u32 (IntToInt);
        _2 = Lt(move _1, const 64_u32);
        assert(move _2, "attempt to shift left by `{}`, which would overflow", const 2_i32) -> bb1;
    }

    bb1: {
        _0 = Shl(const 1_isize, const 2_i32);
        return;
    }
}

static add: isize = {
    let mut _0: isize;
    let mut _1: (isize, bool);

    bb0: {
        _1 = CheckedAdd(const 1_isize, const 2_isize);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const 1_isize, const 2_isize) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: isize);
        return;
    }
}

static addf: f64 = {
    let mut _0: f64;

    bb0: {
        _0 = Add(const 1f64, const 2f64);
        return;
    }
}

static not: isize = {
    let mut _0: isize;

    bb0: {
        _0 = Not(const 0_isize);
        return;
    }
}

static notb: bool = {
    let mut _0: bool;

    bb0: {
        _0 = Not(const true);
        return;
    }
}

static neg: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const -1_isize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&isize, &isize);
    let _2: &isize;
    let mut _3: &isize;
    let _4: isize;
    let _5: &isize;
    let _6: &isize;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: isize;
    let mut _10: isize;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: (&isize, &isize);
    let _15: &isize;
    let mut _16: &isize;
    let _17: isize;
    let _18: &isize;
    let _19: &isize;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: isize;
    let mut _23: isize;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _27: (&f64, &f64);
    let _28: &f64;
    let mut _29: &f64;
    let _30: f64;
    let _31: &f64;
    let _32: &f64;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: f64;
    let mut _36: f64;
    let _38: !;
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _40: (&isize, &isize);
    let _41: &isize;
    let mut _42: &isize;
    let _43: isize;
    let _44: &isize;
    let _45: &isize;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: isize;
    let mut _49: isize;
    let _51: !;
    let mut _52: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _53: (&bool, &bool);
    let _54: &bool;
    let mut _55: &bool;
    let _56: bool;
    let _57: &bool;
    let _58: &bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let _64: !;
    let mut _65: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _66: (&isize, &isize);
    let _67: &isize;
    let mut _68: &isize;
    let _69: isize;
    let _70: &isize;
    let _71: &isize;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: isize;
    let mut _75: isize;
    let _77: !;
    let mut _78: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _5;
        debug right_val => _6;
        let _11: core::panicking::AssertKind;
        scope 2 {
            debug kind => _11;
        }
    }
    scope 3 {
        debug left_val => _18;
        debug right_val => _19;
        let _24: core::panicking::AssertKind;
        scope 4 {
            debug kind => _24;
        }
    }
    scope 5 {
        debug left_val => _31;
        debug right_val => _32;
        let _37: core::panicking::AssertKind;
        scope 6 {
            debug kind => _37;
        }
    }
    scope 7 {
        debug left_val => _44;
        debug right_val => _45;
        let _50: core::panicking::AssertKind;
        scope 8 {
            debug kind => _50;
        }
    }
    scope 9 {
        debug left_val => _57;
        debug right_val => _58;
        let _63: core::panicking::AssertKind;
        scope 10 {
            debug kind => _63;
        }
    }
    scope 11 {
        debug left_val => _70;
        debug right_val => _71;
        let _76: core::panicking::AssertKind;
        scope 12 {
            debug kind => _76;
        }
    }

    bb0: {
        _2 = const {alloc1: &isize};
        _4 = const 4_isize;
        _3 = &_4;
        _1 = (_2, move _3);
        _5 = (_1.0: &isize);
        _6 = (_1.1: &isize);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<isize, isize>(move _11, _5, _6, move _13);
    }

    bb2: {
        _15 = const {alloc2: &isize};
        _17 = const 3_isize;
        _16 = &_17;
        _14 = (_15, move _16);
        _18 = (_14.0: &isize);
        _19 = (_14.1: &isize);
        _22 = (*_18);
        _23 = (*_19);
        _21 = Eq(move _22, move _23);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<isize, isize>(move _24, _18, _19, move _26);
    }

    bb4: {
        _28 = const {alloc3: &f64};
        _30 = const 3f64;
        _29 = &_30;
        _27 = (_28, move _29);
        _31 = (_27.0: &f64);
        _32 = (_27.1: &f64);
        _35 = (*_31);
        _36 = (*_32);
        _34 = Eq(move _35, move _36);
        _33 = Not(move _34);
        switchInt(move _33) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _37 = core::panicking::AssertKind::Eq;
        _39 = Option::<Arguments<'_>>::None;
        _38 = core::panicking::assert_failed::<f64, f64>(move _37, _31, _32, move _39);
    }

    bb6: {
        _41 = const {alloc4: &isize};
        _43 = const -1_isize;
        _42 = &_43;
        _40 = (_41, move _42);
        _44 = (_40.0: &isize);
        _45 = (_40.1: &isize);
        _48 = (*_44);
        _49 = (*_45);
        _47 = Eq(move _48, move _49);
        _46 = Not(move _47);
        switchInt(move _46) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _50 = core::panicking::AssertKind::Eq;
        _52 = Option::<Arguments<'_>>::None;
        _51 = core::panicking::assert_failed::<isize, isize>(move _50, _44, _45, move _52);
    }

    bb8: {
        _54 = const {alloc5: &bool};
        _56 = const false;
        _55 = &_56;
        _53 = (_54, move _55);
        _57 = (_53.0: &bool);
        _58 = (_53.1: &bool);
        _61 = (*_57);
        _62 = (*_58);
        _60 = Eq(move _61, move _62);
        _59 = Not(move _60);
        switchInt(move _59) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _63 = core::panicking::AssertKind::Eq;
        _65 = Option::<Arguments<'_>>::None;
        _64 = core::panicking::assert_failed::<bool, bool>(move _63, _57, _58, move _65);
    }

    bb10: {
        _67 = const {alloc6: &isize};
        _69 = const -1_isize;
        _68 = &_69;
        _66 = (_67, move _68);
        _70 = (_66.0: &isize);
        _71 = (_66.1: &isize);
        _74 = (*_70);
        _75 = (*_71);
        _73 = Eq(move _74, move _75);
        _72 = Not(move _73);
        switchInt(move _72) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _76 = core::panicking::AssertKind::Eq;
        _78 = Option::<Arguments<'_>>::None;
        _77 = core::panicking::assert_failed::<isize, isize>(move _76, _70, _71, move _78);
    }

    bb12: {
        return;
    }
}

alloc6 (static: neg, size: 8, align: 8) {
    ff ff ff ff ff ff ff ff                         │ ........
}

alloc5 (static: notb, size: 1, align: 1) {
    00                                              │ .
}

alloc4 (static: not, size: 8, align: 8) {
    ff ff ff ff ff ff ff ff                         │ ........
}

alloc3 (static: addf, size: 8, align: 8) {
    00 00 00 00 00 00 08 40                         │ .......@
}

alloc2 (static: add, size: 8, align: 8) {
    03 00 00 00 00 00 00 00                         │ ........
}

alloc1 (static: lsl, size: 8, align: 8) {
    04 00 00 00 00 00 00 00                         │ ........
}
