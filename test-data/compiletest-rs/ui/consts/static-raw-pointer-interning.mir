// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static FOO: Foo = {
    let mut _0: Foo;
    let mut _1: *const i32;
    let _2: &i32;
    let _3: i32;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = const 42_i32;
        _2 = &_3;
        _1 = &raw const (*_2);
        _0 = Foo { field: move _1 };
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&i32, &i32);
    let mut _2: &i32;
    let _3: i32;
    let mut _4: &Foo;
    let mut _5: &i32;
    let _6: i32;
    let _7: &i32;
    let _8: &i32;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: i32;
    let mut _12: i32;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: *const i32;
    scope 1 {
        let mut _17: *const ();
        let mut _18: usize;
        let mut _19: usize;
        let mut _20: usize;
        let mut _21: usize;
        let mut _22: bool;
    }
    scope 2 {
        debug left_val => _7;
        debug right_val => _8;
        let _13: core::panicking::AssertKind;
        scope 3 {
            debug kind => _13;
        }
    }

    bb0: {
        _4 = const {alloc1: &Foo};
        _16 = deref_copy ((*_4).0: *const i32);
        _17 = _16 as *const () (PtrToPtr);
        _18 = _17 as usize (Transmute);
        _19 = AlignOf(i32);
        _20 = Sub(_19, const 1_usize);
        _21 = BitAnd(_18, _20);
        _22 = Eq(_21, const 0_usize);
        assert(_22, "misaligned pointer dereference: address must be a multiple of {} but is {}", _19, _18) -> [success: bb3, unwind unreachable];
    }

    bb1: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<i32, i32>(move _13, _7, _8, move _15);
    }

    bb2: {
        return;
    }

    bb3: {
        _3 = (*_16);
        _2 = &_3;
        _6 = const 42_i32;
        _5 = &_6;
        _1 = (move _2, move _5);
        _7 = (_1.0: &i32);
        _8 = (_1.1: &i32);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb2, otherwise: bb1];
    }
}

alloc1 (static: FOO, size: 8, align: 8) {
    ╾───────alloc4────────╼                         │ ╾──────╼
}

alloc4 (size: 4, align: 4) {
    2a 00 00 00                                     │ *...
}
