// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static C: [E; 3] = {
    let mut _0: [E; 3];
    let mut _1: E;
    let mut _2: E;
    let mut _3: E;

    bb0: {
        StorageLive(_1);
        _1 = E::V0;
        StorageLive(_2);
        _2 = E::V1(const 233495534_isize);
        StorageLive(_3);
        _3 = E::V0;
        _0 = [move _1, move _2, move _3];
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

C::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: &[E; 3];
    let _2: usize;
    let mut _3: usize;
    let mut _4: bool;
    let mut _5: isize;
    let _6: isize;
    let mut _7: (&isize, &isize);
    let mut _8: &isize;
    let mut _9: &isize;
    let _10: isize;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: isize;
    let mut _16: isize;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _20: !;
    let mut _21: &[E; 3];
    let _22: usize;
    let mut _23: usize;
    let mut _24: bool;
    let mut _25: isize;
    let mut _26: !;
    scope 1 {
        debug n => _6;
        let _11: &isize;
        let _12: &isize;
        scope 2 {
            debug left_val => _11;
            debug right_val => _12;
            let _17: core::panicking::AssertKind;
            scope 3 {
                debug kind => _17;
            }
        }
    }

    bb0: {
        _1 = const {alloc1: &[E; 3]};
        _2 = const 1_usize;
        _3 = const 3_usize;
        _4 = Lt(_2, _3);
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> bb1;
    }

    bb1: {
        _5 = discriminant((*_1)[_2]);
        switchInt(move _5) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _20 = begin_panic::<&str>(const "explicit panic");
    }

    bb3: {
        _6 = (((*_1)[_2] as V1).0: isize);
        _8 = &_6;
        _10 = const 233495534_isize;
        _9 = &_10;
        _7 = (move _8, move _9);
        _11 = (_7.0: &isize);
        _12 = (_7.1: &isize);
        _15 = (*_11);
        _16 = (*_12);
        _14 = Eq(move _15, move _16);
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<isize, isize>(move _17, _11, _12, move _19);
    }

    bb5: {
        _21 = const {alloc1: &[E; 3]};
        _22 = const 2_usize;
        _23 = const 3_usize;
        _24 = Lt(_22, _23);
        assert(move _24, "index out of bounds: the length is {} but the index is {}", move _23, _22) -> bb6;
    }

    bb6: {
        _25 = discriminant((*_21)[_22]);
        switchInt(move _25) -> [1: bb8, otherwise: bb7];
    }

    bb7: {
        _26 = begin_panic::<&str>(const "explicit panic");
    }

    bb8: {
        return;
    }
}

alloc1 (static: C, size: 48, align: 8) {
    0x00 │ 01 00 00 00 00 00 00 00 __ __ __ __ __ __ __ __ │ ........░░░░░░░░
    0x10 │ 00 00 00 00 00 00 00 00 ee db ea 0d 00 00 00 00 │ ................
    0x20 │ 01 00 00 00 00 00 00 00 __ __ __ __ __ __ __ __ │ ........░░░░░░░░
}

fn E::V1(_1: isize) -> E {
    let mut _0: E;

    bb0: {
        _0 = E::V1(move _1);
        return;
    }
}

// MIR FOR CTFE
fn E::V1(_1: isize) -> E {
    let mut _0: E;

    bb0: {
        _0 = E::V1(move _1);
        return;
    }
}
