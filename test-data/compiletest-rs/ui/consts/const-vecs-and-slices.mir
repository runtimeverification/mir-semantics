// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static x: [isize; 4] = {
    let mut _0: [isize; 4];

    bb0: {
        _0 = [const 1_isize, const 2_isize, const 3_isize, const 4_isize];
        return;
    }
}

x::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}

static y: &[isize] = {
    let mut _0: &[isize];
    let mut _1: &[isize; 4];
    let _2: &[isize; 4];
    let _3: [isize; 4];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = [const 1_isize, const 2_isize, const 3_isize, const 4_isize];
        _2 = &_3;
        _1 = &(*_2);
        _0 = move _1 as &[isize] (Pointer(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

static z: &[isize; 4] = {
    let mut _0: &[isize; 4];
    let _1: &[isize; 4];
    let _2: [isize; 4];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = [const 1_isize, const 2_isize, const 3_isize, const 4_isize];
        _1 = &_2;
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

z::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}

static zz: &[isize] = {
    let mut _0: &[isize];
    let mut _1: &[isize; 4];
    let _2: &[isize; 4];
    let _3: [isize; 4];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = [const 1_isize, const 2_isize, const 3_isize, const 4_isize];
        _2 = &_3;
        _1 = &(*_2);
        _0 = move _1 as &[isize] (Pointer(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let _4: &[&str; 2];
    let _5: [&str; 2];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &isize;
    let _11: &[isize; 4];
    let _12: usize;
    let mut _13: usize;
    let mut _14: bool;
    let _15: ();
    let mut _16: std::fmt::Arguments<'_>;
    let mut _17: &[&str];
    let _18: &[&str; 2];
    let _19: [&str; 2];
    let mut _20: &[core::fmt::rt::Argument<'_>];
    let _21: &[core::fmt::rt::Argument<'_>; 1];
    let _22: [core::fmt::rt::Argument<'_>; 1];
    let mut _23: core::fmt::rt::Argument<'_>;
    let _24: &isize;
    let _25: &&[isize];
    let _26: usize;
    let mut _27: usize;
    let mut _28: bool;
    let _29: ();
    let mut _30: std::fmt::Arguments<'_>;
    let mut _31: &[&str];
    let _32: &[&str; 2];
    let _33: [&str; 2];
    let mut _34: &[core::fmt::rt::Argument<'_>];
    let _35: &[core::fmt::rt::Argument<'_>; 1];
    let _36: [core::fmt::rt::Argument<'_>; 1];
    let mut _37: core::fmt::rt::Argument<'_>;
    let _38: &isize;
    let _39: &&[isize; 4];
    let _40: usize;
    let mut _41: usize;
    let mut _42: bool;
    let _43: ();
    let mut _44: std::fmt::Arguments<'_>;
    let mut _45: &[&str];
    let _46: &[&str; 2];
    let _47: [&str; 2];
    let mut _48: &[core::fmt::rt::Argument<'_>];
    let _49: &[core::fmt::rt::Argument<'_>; 1];
    let _50: [core::fmt::rt::Argument<'_>; 1];
    let mut _51: core::fmt::rt::Argument<'_>;
    let _52: &isize;
    let _53: &&[isize];
    let _54: usize;
    let mut _55: usize;
    let mut _56: bool;
    let mut _57: (&isize, &isize);
    let mut _58: &isize;
    let _59: &[isize; 4];
    let _60: usize;
    let mut _61: usize;
    let mut _62: bool;
    let mut _63: &isize;
    let _64: isize;
    let _65: &isize;
    let _66: &isize;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: isize;
    let mut _70: isize;
    let _72: !;
    let mut _73: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _74: (&isize, &isize);
    let mut _75: &isize;
    let _76: &[isize; 4];
    let _77: usize;
    let mut _78: usize;
    let mut _79: bool;
    let mut _80: &isize;
    let _81: isize;
    let _82: &isize;
    let _83: &isize;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: isize;
    let mut _87: isize;
    let _89: !;
    let mut _90: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _91: (&isize, &isize);
    let mut _92: &isize;
    let _93: &[isize; 4];
    let _94: usize;
    let mut _95: usize;
    let mut _96: bool;
    let mut _97: &isize;
    let _98: &&[isize];
    let _99: usize;
    let mut _100: usize;
    let mut _101: bool;
    let _102: &isize;
    let _103: &isize;
    let mut _104: bool;
    let mut _105: bool;
    let mut _106: isize;
    let mut _107: isize;
    let _109: !;
    let mut _110: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _111: (&isize, &isize);
    let mut _112: &isize;
    let _113: &&[isize; 4];
    let _114: usize;
    let mut _115: usize;
    let mut _116: bool;
    let mut _117: &isize;
    let _118: isize;
    let _119: &isize;
    let _120: &isize;
    let mut _121: bool;
    let mut _122: bool;
    let mut _123: isize;
    let mut _124: isize;
    let _126: !;
    let mut _127: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _128: (&isize, &isize);
    let mut _129: &isize;
    let _130: &&[isize; 4];
    let _131: usize;
    let mut _132: usize;
    let mut _133: bool;
    let mut _134: &isize;
    let _135: isize;
    let _136: &isize;
    let _137: &isize;
    let mut _138: bool;
    let mut _139: bool;
    let mut _140: isize;
    let mut _141: isize;
    let _143: !;
    let mut _144: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _145: (&isize, &isize);
    let mut _146: &isize;
    let _147: &&[isize; 4];
    let _148: usize;
    let mut _149: usize;
    let mut _150: bool;
    let mut _151: &isize;
    let _152: &&[isize];
    let _153: usize;
    let mut _154: usize;
    let mut _155: bool;
    let _156: &isize;
    let _157: &isize;
    let mut _158: bool;
    let mut _159: bool;
    let mut _160: isize;
    let mut _161: isize;
    let _163: !;
    let mut _164: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _165: (&isize, &isize);
    let mut _166: &isize;
    let _167: &&[isize];
    let _168: usize;
    let mut _169: usize;
    let mut _170: bool;
    let mut _171: &isize;
    let _172: isize;
    let _173: &isize;
    let _174: &isize;
    let mut _175: bool;
    let mut _176: bool;
    let mut _177: isize;
    let mut _178: isize;
    let _180: !;
    let mut _181: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _182: (&isize, &isize);
    let mut _183: &isize;
    let _184: &&[isize];
    let _185: usize;
    let mut _186: usize;
    let mut _187: bool;
    let mut _188: &isize;
    let _189: isize;
    let _190: &isize;
    let _191: &isize;
    let mut _192: bool;
    let mut _193: bool;
    let mut _194: isize;
    let mut _195: isize;
    let _197: !;
    let mut _198: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _199: (&isize, &isize);
    let mut _200: &isize;
    let _201: &&[isize];
    let _202: usize;
    let mut _203: usize;
    let mut _204: bool;
    let mut _205: &isize;
    let _206: &&[isize];
    let _207: usize;
    let mut _208: usize;
    let mut _209: bool;
    let _210: &isize;
    let _211: &isize;
    let mut _212: bool;
    let mut _213: bool;
    let mut _214: isize;
    let mut _215: isize;
    let _217: !;
    let mut _218: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _219: &[isize];
    let mut _220: &[isize];
    let mut _221: &[isize; 4];
    let mut _222: &[isize];
    let mut _223: &[isize];
    let mut _224: &[isize];
    let mut _225: &[isize];
    let mut _226: &[isize; 4];
    let mut _227: &[isize; 4];
    let mut _228: &[isize; 4];
    let mut _229: &[isize];
    let mut _230: &[isize];
    let mut _231: &[isize];
    let mut _232: &[isize];
    let mut _233: &[isize];
    let mut _234: &[isize];
    let mut _235: &[isize];
    let mut _236: &[isize];
    let mut _237: &[isize];
    let mut _238: &[isize];
    scope 1 {
        debug left_val => _65;
        debug right_val => _66;
        let _71: core::panicking::AssertKind;
        scope 2 {
            debug kind => _71;
        }
    }
    scope 3 {
        debug left_val => _82;
        debug right_val => _83;
        let _88: core::panicking::AssertKind;
        scope 4 {
            debug kind => _88;
        }
    }
    scope 5 {
        debug left_val => _102;
        debug right_val => _103;
        let _108: core::panicking::AssertKind;
        scope 6 {
            debug kind => _108;
        }
    }
    scope 7 {
        debug left_val => _119;
        debug right_val => _120;
        let _125: core::panicking::AssertKind;
        scope 8 {
            debug kind => _125;
        }
    }
    scope 9 {
        debug left_val => _136;
        debug right_val => _137;
        let _142: core::panicking::AssertKind;
        scope 10 {
            debug kind => _142;
        }
    }
    scope 11 {
        debug left_val => _156;
        debug right_val => _157;
        let _162: core::panicking::AssertKind;
        scope 12 {
            debug kind => _162;
        }
    }
    scope 13 {
        debug left_val => _173;
        debug right_val => _174;
        let _179: core::panicking::AssertKind;
        scope 14 {
            debug kind => _179;
        }
    }
    scope 15 {
        debug left_val => _190;
        debug right_val => _191;
        let _196: core::panicking::AssertKind;
        scope 16 {
            debug kind => _196;
        }
    }
    scope 17 {
        debug left_val => _210;
        debug right_val => _211;
        let _216: core::panicking::AssertKind;
        scope 18 {
            debug kind => _216;
        }
    }

    bb0: {
        _5 = [const "", const "\n"];
        _4 = &_5;
        _3 = _4 as &[&str] (Pointer(Unsize));
        _11 = const {alloc1: &[isize; 4]};
        _12 = const 1_usize;
        _13 = const 4_usize;
        _14 = Lt(_12, _13);
        assert(move _14, "index out of bounds: the length is {} but the index is {}", move _13, _12) -> bb1;
    }

    bb1: {
        _10 = &(*_11)[_12];
        _9 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_10) -> bb2;
    }

    bb2: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_v1(move _3, move _6) -> bb3;
    }

    bb3: {
        _1 = _print(move _2) -> bb4;
    }

    bb4: {
        _19 = [const "", const "\n"];
        _18 = &_19;
        _17 = _18 as &[&str] (Pointer(Unsize));
        _25 = const {alloc2: &&[isize]};
        _26 = const 1_usize;
        _219 = deref_copy (*_25);
        _27 = Len((*_219));
        _28 = Lt(_26, _27);
        assert(move _28, "index out of bounds: the length is {} but the index is {}", move _27, _26) -> bb5;
    }

    bb5: {
        _220 = deref_copy (*_25);
        _24 = &(*_220)[_26];
        _23 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_24) -> bb6;
    }

    bb6: {
        _22 = [move _23];
        _21 = &_22;
        _20 = _21 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _16 = Arguments::<'_>::new_v1(move _17, move _20) -> bb7;
    }

    bb7: {
        _15 = _print(move _16) -> bb8;
    }

    bb8: {
        _33 = [const "", const "\n"];
        _32 = &_33;
        _31 = _32 as &[&str] (Pointer(Unsize));
        _39 = const {alloc3: &&[isize; 4]};
        _40 = const 1_usize;
        _41 = const 4_usize;
        _42 = Lt(_40, _41);
        assert(move _42, "index out of bounds: the length is {} but the index is {}", move _41, _40) -> bb9;
    }

    bb9: {
        _221 = deref_copy (*_39);
        _38 = &(*_221)[_40];
        _37 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_38) -> bb10;
    }

    bb10: {
        _36 = [move _37];
        _35 = &_36;
        _34 = _35 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _30 = Arguments::<'_>::new_v1(move _31, move _34) -> bb11;
    }

    bb11: {
        _29 = _print(move _30) -> bb12;
    }

    bb12: {
        _47 = [const "", const "\n"];
        _46 = &_47;
        _45 = _46 as &[&str] (Pointer(Unsize));
        _53 = const {alloc4: &&[isize]};
        _54 = const 1_usize;
        _222 = deref_copy (*_53);
        _55 = Len((*_222));
        _56 = Lt(_54, _55);
        assert(move _56, "index out of bounds: the length is {} but the index is {}", move _55, _54) -> bb13;
    }

    bb13: {
        _223 = deref_copy (*_53);
        _52 = &(*_223)[_54];
        _51 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_52) -> bb14;
    }

    bb14: {
        _50 = [move _51];
        _49 = &_50;
        _48 = _49 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _44 = Arguments::<'_>::new_v1(move _45, move _48) -> bb15;
    }

    bb15: {
        _43 = _print(move _44) -> bb16;
    }

    bb16: {
        _59 = const {alloc1: &[isize; 4]};
        _60 = const 1_usize;
        _61 = const 4_usize;
        _62 = Lt(_60, _61);
        assert(move _62, "index out of bounds: the length is {} but the index is {}", move _61, _60) -> bb17;
    }

    bb17: {
        _58 = &(*_59)[_60];
        _64 = const 2_isize;
        _63 = &_64;
        _57 = (move _58, move _63);
        _65 = (_57.0: &isize);
        _66 = (_57.1: &isize);
        _69 = (*_65);
        _70 = (*_66);
        _68 = Eq(move _69, move _70);
        _67 = Not(move _68);
        switchInt(move _67) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _71 = core::panicking::AssertKind::Eq;
        _73 = Option::<Arguments<'_>>::None;
        _72 = core::panicking::assert_failed::<isize, isize>(move _71, _65, _66, move _73);
    }

    bb19: {
        _76 = const {alloc1: &[isize; 4]};
        _77 = const 3_usize;
        _78 = const 4_usize;
        _79 = Lt(_77, _78);
        assert(move _79, "index out of bounds: the length is {} but the index is {}", move _78, _77) -> bb20;
    }

    bb20: {
        _75 = &(*_76)[_77];
        _81 = const 4_isize;
        _80 = &_81;
        _74 = (move _75, move _80);
        _82 = (_74.0: &isize);
        _83 = (_74.1: &isize);
        _86 = (*_82);
        _87 = (*_83);
        _85 = Eq(move _86, move _87);
        _84 = Not(move _85);
        switchInt(move _84) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _88 = core::panicking::AssertKind::Eq;
        _90 = Option::<Arguments<'_>>::None;
        _89 = core::panicking::assert_failed::<isize, isize>(move _88, _82, _83, move _90);
    }

    bb22: {
        _93 = const {alloc1: &[isize; 4]};
        _94 = const 3_usize;
        _95 = const 4_usize;
        _96 = Lt(_94, _95);
        assert(move _96, "index out of bounds: the length is {} but the index is {}", move _95, _94) -> bb23;
    }

    bb23: {
        _92 = &(*_93)[_94];
        _98 = const {alloc2: &&[isize]};
        _99 = const 3_usize;
        _224 = deref_copy (*_98);
        _100 = Len((*_224));
        _101 = Lt(_99, _100);
        assert(move _101, "index out of bounds: the length is {} but the index is {}", move _100, _99) -> bb24;
    }

    bb24: {
        _225 = deref_copy (*_98);
        _97 = &(*_225)[_99];
        _91 = (move _92, move _97);
        _102 = (_91.0: &isize);
        _103 = (_91.1: &isize);
        _106 = (*_102);
        _107 = (*_103);
        _105 = Eq(move _106, move _107);
        _104 = Not(move _105);
        switchInt(move _104) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _108 = core::panicking::AssertKind::Eq;
        _110 = Option::<Arguments<'_>>::None;
        _109 = core::panicking::assert_failed::<isize, isize>(move _108, _102, _103, move _110);
    }

    bb26: {
        _113 = const {alloc3: &&[isize; 4]};
        _114 = const 1_usize;
        _115 = const 4_usize;
        _116 = Lt(_114, _115);
        assert(move _116, "index out of bounds: the length is {} but the index is {}", move _115, _114) -> bb27;
    }

    bb27: {
        _226 = deref_copy (*_113);
        _112 = &(*_226)[_114];
        _118 = const 2_isize;
        _117 = &_118;
        _111 = (move _112, move _117);
        _119 = (_111.0: &isize);
        _120 = (_111.1: &isize);
        _123 = (*_119);
        _124 = (*_120);
        _122 = Eq(move _123, move _124);
        _121 = Not(move _122);
        switchInt(move _121) -> [0: bb29, otherwise: bb28];
    }

    bb28: {
        _125 = core::panicking::AssertKind::Eq;
        _127 = Option::<Arguments<'_>>::None;
        _126 = core::panicking::assert_failed::<isize, isize>(move _125, _119, _120, move _127);
    }

    bb29: {
        _130 = const {alloc3: &&[isize; 4]};
        _131 = const 3_usize;
        _132 = const 4_usize;
        _133 = Lt(_131, _132);
        assert(move _133, "index out of bounds: the length is {} but the index is {}", move _132, _131) -> bb30;
    }

    bb30: {
        _227 = deref_copy (*_130);
        _129 = &(*_227)[_131];
        _135 = const 4_isize;
        _134 = &_135;
        _128 = (move _129, move _134);
        _136 = (_128.0: &isize);
        _137 = (_128.1: &isize);
        _140 = (*_136);
        _141 = (*_137);
        _139 = Eq(move _140, move _141);
        _138 = Not(move _139);
        switchInt(move _138) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _142 = core::panicking::AssertKind::Eq;
        _144 = Option::<Arguments<'_>>::None;
        _143 = core::panicking::assert_failed::<isize, isize>(move _142, _136, _137, move _144);
    }

    bb32: {
        _147 = const {alloc3: &&[isize; 4]};
        _148 = const 3_usize;
        _149 = const 4_usize;
        _150 = Lt(_148, _149);
        assert(move _150, "index out of bounds: the length is {} but the index is {}", move _149, _148) -> bb33;
    }

    bb33: {
        _228 = deref_copy (*_147);
        _146 = &(*_228)[_148];
        _152 = const {alloc2: &&[isize]};
        _153 = const 3_usize;
        _229 = deref_copy (*_152);
        _154 = Len((*_229));
        _155 = Lt(_153, _154);
        assert(move _155, "index out of bounds: the length is {} but the index is {}", move _154, _153) -> bb34;
    }

    bb34: {
        _230 = deref_copy (*_152);
        _151 = &(*_230)[_153];
        _145 = (move _146, move _151);
        _156 = (_145.0: &isize);
        _157 = (_145.1: &isize);
        _160 = (*_156);
        _161 = (*_157);
        _159 = Eq(move _160, move _161);
        _158 = Not(move _159);
        switchInt(move _158) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _162 = core::panicking::AssertKind::Eq;
        _164 = Option::<Arguments<'_>>::None;
        _163 = core::panicking::assert_failed::<isize, isize>(move _162, _156, _157, move _164);
    }

    bb36: {
        _167 = const {alloc4: &&[isize]};
        _168 = const 1_usize;
        _231 = deref_copy (*_167);
        _169 = Len((*_231));
        _170 = Lt(_168, _169);
        assert(move _170, "index out of bounds: the length is {} but the index is {}", move _169, _168) -> bb37;
    }

    bb37: {
        _232 = deref_copy (*_167);
        _166 = &(*_232)[_168];
        _172 = const 2_isize;
        _171 = &_172;
        _165 = (move _166, move _171);
        _173 = (_165.0: &isize);
        _174 = (_165.1: &isize);
        _177 = (*_173);
        _178 = (*_174);
        _176 = Eq(move _177, move _178);
        _175 = Not(move _176);
        switchInt(move _175) -> [0: bb39, otherwise: bb38];
    }

    bb38: {
        _179 = core::panicking::AssertKind::Eq;
        _181 = Option::<Arguments<'_>>::None;
        _180 = core::panicking::assert_failed::<isize, isize>(move _179, _173, _174, move _181);
    }

    bb39: {
        _184 = const {alloc4: &&[isize]};
        _185 = const 3_usize;
        _233 = deref_copy (*_184);
        _186 = Len((*_233));
        _187 = Lt(_185, _186);
        assert(move _187, "index out of bounds: the length is {} but the index is {}", move _186, _185) -> bb40;
    }

    bb40: {
        _234 = deref_copy (*_184);
        _183 = &(*_234)[_185];
        _189 = const 4_isize;
        _188 = &_189;
        _182 = (move _183, move _188);
        _190 = (_182.0: &isize);
        _191 = (_182.1: &isize);
        _194 = (*_190);
        _195 = (*_191);
        _193 = Eq(move _194, move _195);
        _192 = Not(move _193);
        switchInt(move _192) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _196 = core::panicking::AssertKind::Eq;
        _198 = Option::<Arguments<'_>>::None;
        _197 = core::panicking::assert_failed::<isize, isize>(move _196, _190, _191, move _198);
    }

    bb42: {
        _201 = const {alloc4: &&[isize]};
        _202 = const 3_usize;
        _235 = deref_copy (*_201);
        _203 = Len((*_235));
        _204 = Lt(_202, _203);
        assert(move _204, "index out of bounds: the length is {} but the index is {}", move _203, _202) -> bb43;
    }

    bb43: {
        _236 = deref_copy (*_201);
        _200 = &(*_236)[_202];
        _206 = const {alloc2: &&[isize]};
        _207 = const 3_usize;
        _237 = deref_copy (*_206);
        _208 = Len((*_237));
        _209 = Lt(_207, _208);
        assert(move _209, "index out of bounds: the length is {} but the index is {}", move _208, _207) -> bb44;
    }

    bb44: {
        _238 = deref_copy (*_206);
        _205 = &(*_238)[_207];
        _199 = (move _200, move _205);
        _210 = (_199.0: &isize);
        _211 = (_199.1: &isize);
        _214 = (*_210);
        _215 = (*_211);
        _213 = Eq(move _214, move _215);
        _212 = Not(move _213);
        switchInt(move _212) -> [0: bb46, otherwise: bb45];
    }

    bb45: {
        _216 = core::panicking::AssertKind::Eq;
        _218 = Option::<Arguments<'_>>::None;
        _217 = core::panicking::assert_failed::<isize, isize>(move _216, _210, _211, move _218);
    }

    bb46: {
        return;
    }
}

alloc4 (static: zz, size: 16, align: 8) {
    ╾───────alloc19───────╼ 04 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc19 (size: 32, align: 8) {
    0x00 │ 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 │ ................
    0x10 │ 03 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 │ ................
}

alloc3 (static: z, size: 8, align: 8) {
    ╾───────alloc15───────╼                         │ ╾──────╼
}

alloc15 (size: 32, align: 8) {
    0x00 │ 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 │ ................
    0x10 │ 03 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 │ ................
}

alloc2 (static: y, size: 16, align: 8) {
    ╾───────alloc11───────╼ 04 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc11 (size: 32, align: 8) {
    0x00 │ 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 │ ................
    0x10 │ 03 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 │ ................
}

alloc1 (static: x, size: 32, align: 8) {
    0x00 │ 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 │ ................
    0x10 │ 03 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 │ ................
}
