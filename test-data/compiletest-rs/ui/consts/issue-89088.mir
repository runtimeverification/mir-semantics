// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const FOO: &A = {
    let mut _0: &A;
    let _1: &A;
    let _2: A;
    let mut _3: std::borrow::Cow<'_, str>;
    let mut _4: &str;
    let _5: &str;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = const "foo";
        _4 = &(*_5);
        _3 = Cow::<'_, str>::Borrowed(move _4);
        StorageDead(_4);
        _2 = A::Field(move _3);
        StorageDead(_3);
        _1 = &_2;
        _0 = &(*_1);
        StorageDead(_5);
        StorageDead(_1);
        return;
    }
}

fn <impl at ui/consts/issue-89088.rs:10:10: 10:19>::eq(_1: &A, _2: &A) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: (&A, &A);
    let _4: &std::borrow::Cow<'_, str>;
    let _5: &std::borrow::Cow<'_, str>;
    let mut _6: &A;
    let mut _7: &A;
    scope 1 {
        debug __self_0 => _4;
        debug __arg1_0 => _5;
    }

    bb0: {
        _3 = (_1, _2);
        _6 = deref_copy (_3.0: &A);
        _4 = &(((*_6) as Field).0: std::borrow::Cow<'_, str>);
        _7 = deref_copy (_3.1: &A);
        _5 = &(((*_7) as Field).0: std::borrow::Cow<'_, str>);
        _0 = <Cow<'_, str> as PartialEq>::eq(_4, _5) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/consts/issue-89088.rs:10:21: 10:23>::assert_receiver_is_total_eq(_1: &A) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: A;
    let mut _2: std::borrow::Cow<'_, str>;
    let _3: &str;
    let mut _4: &A;
    let mut _5: bool;
    let mut _6: !;
    let mut _7: !;
    scope 1 {
        debug var => _1;
    }

    bb0: {
        _3 = const "bar";
        _2 = Cow::<'_, str>::Borrowed(_3);
        _1 = A::Field(move _2);
        _4 = &_1;
        _5 = <A as PartialEq>::eq(_4, const &A::Field(Cow::<'static, str>::Borrowed("foo"))) -> [return: bb1, unwind: bb4];
    }

    bb1: {
        switchInt(move _5) -> [0: bb2, otherwise: bb3];
    }

    bb2: {
        _7 = core::panicking::panic(const "not yet implemented") -> bb4;
    }

    bb3: {
        _6 = core::panicking::panic(const "not yet implemented") -> bb4;
    }

    bb4 (cleanup): {
        drop(_1) -> [return: bb5, unwind terminate];
    }

    bb5 (cleanup): {
        resume;
    }
}

fn A::Field(_1: Cow<'_, str>) -> A {
    let mut _0: A;

    bb0: {
        _0 = A::Field(move _1);
        return;
    }
}

// MIR FOR CTFE
fn A::Field(_1: Cow<'_, str>) -> A {
    let mut _0: A;

    bb0: {
        _0 = A::Field(move _1);
        return;
    }
}
