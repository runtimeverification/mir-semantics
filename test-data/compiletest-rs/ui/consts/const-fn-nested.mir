// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn sub(_1: u32, _2: u32) -> u32 {
    debug x => _1;
    debug y => _2;
    let mut _0: u32;

    bb0: {
        _0 = Sub(_1, _2);
        return;
    }
}

// MIR FOR CTFE
fn sub(_1: u32, _2: u32) -> u32 {
    debug x => _1;
    debug y => _2;
    let mut _0: u32;
    let mut _3: u32;
    let mut _4: u32;

    bb0: {
        StorageLive(_3);
        _3 = _1;
        StorageLive(_4);
        _4 = _2;
        _0 = Sub(move _3, move _4);
        StorageDead(_4);
        StorageDead(_3);
        return;
    }
}

const X: u32 = {
    let mut _0: u32;
    let mut _1: u32;

    bb0: {
        StorageLive(_1);
        ConstEvalCounter;
        _1 = sub(const 88_u32, const 44_u32) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _0 = sub(move _1, const 22_u32) -> bb2;
    }

    bb2: {
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&u32, &u32);
    let mut _2: &u32;
    let _3: u32;
    let mut _4: &u32;
    let _5: u32;
    let _6: &u32;
    let _7: &u32;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: u32;
    let mut _11: u32;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }

    bb0: {
        _3 = const _;
        _2 = &_3;
        _5 = const 22_u32;
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &u32);
        _7 = (_1.1: &u32);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<u32, u32>(move _12, _6, _7, move _14);
    }

    bb2: {
        return;
    }
}
