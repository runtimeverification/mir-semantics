// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const TEST_A: Discriminant<Test> = {
    let mut _0: std::mem::Discriminant<Test>;
    let mut _1: &Test;
    let _2: &Test;
    let _3: Test;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = Test::A(const 5_u8);
        _2 = &_3;
        _1 = &(*_2);
        ConstEvalCounter;
        _0 = discriminant::<Test>(move _1) -> bb1;
    }

    bb1: {
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

const TEST_A_OTHER: Discriminant<Test> = {
    let mut _0: std::mem::Discriminant<Test>;
    let mut _1: &Test;
    let _2: &Test;
    let _3: Test;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = Test::A(const 17_u8);
        _2 = &_3;
        _1 = &(*_2);
        ConstEvalCounter;
        _0 = discriminant::<Test>(move _1) -> bb1;
    }

    bb1: {
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

const TEST_B: Discriminant<Test> = {
    let mut _0: std::mem::Discriminant<Test>;
    let mut _1: &Test;
    let _2: &Test;
    let _3: Test;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = Test::B;
        _2 = &_3;
        _1 = &(*_2);
        ConstEvalCounter;
        _0 = discriminant::<Test>(move _1) -> bb1;
    }

    bb1: {
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

const TEST_V: Discriminant<SingleVariant> = {
    let mut _0: std::mem::Discriminant<SingleVariant>;
    let mut _1: &SingleVariant;
    let _2: &SingleVariant;
    let _3: SingleVariant;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = SingleVariant::V;
        _2 = &_3;
        _1 = &(*_2);
        ConstEvalCounter;
        _0 = discriminant::<SingleVariant>(move _1) -> bb1;
    }

    bb1: {
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

const TEST_VOID: () = {
    let mut _0: ();
    let _1: ();
    let _2: std::mem::Discriminant<Void>;
    let mut _3: &Void;
    let _4: &Void;
    let _5: *const Void;
    let mut _6: *const ();
    let _7: &();
    let _8: ();
    scope 1 {
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = ();
        _7 = &_8;
        _6 = &raw const (*_7);
        _5 = move _6 as *const Void (PtrToPtr);
        StorageDead(_6);
        _4 = &(*_5);
        _3 = &(*_4);
        ConstEvalCounter;
        _2 = discriminant::<Void>(move _3) -> bb1;
    }

    bb1: {
        StorageDead(_3);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_2);
        _1 = const ();
        StorageDead(_1);
        _0 = const ();
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&std::mem::Discriminant<Test>, &std::mem::Discriminant<Test>);
    let mut _2: &std::mem::Discriminant<Test>;
    let _3: std::mem::Discriminant<Test>;
    let mut _4: &std::mem::Discriminant<Test>;
    let _5: std::mem::Discriminant<Test>;
    let _6: &std::mem::Discriminant<Test>;
    let _7: &std::mem::Discriminant<Test>;
    let mut _8: bool;
    let mut _9: bool;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: (&std::mem::Discriminant<Test>, &std::mem::Discriminant<Test>);
    let mut _14: &std::mem::Discriminant<Test>;
    let _15: std::mem::Discriminant<Test>;
    let mut _16: &std::mem::Discriminant<Test>;
    let _17: std::mem::Discriminant<Test>;
    let mut _18: &Test;
    let _19: &Test;
    let _20: &Test;
    let _21: Test;
    let _22: &std::mem::Discriminant<Test>;
    let _23: &std::mem::Discriminant<Test>;
    let mut _24: bool;
    let mut _25: bool;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: (&std::mem::Discriminant<Test>, &std::mem::Discriminant<Test>);
    let mut _30: &std::mem::Discriminant<Test>;
    let _31: std::mem::Discriminant<Test>;
    let mut _32: &std::mem::Discriminant<Test>;
    let _33: std::mem::Discriminant<Test>;
    let mut _34: &Test;
    let _35: &Test;
    let _36: &Test;
    let _37: Test;
    let _38: &std::mem::Discriminant<Test>;
    let _39: &std::mem::Discriminant<Test>;
    let mut _40: bool;
    let mut _41: bool;
    let _43: !;
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _45: (&std::mem::Discriminant<Test>, &std::mem::Discriminant<Test>);
    let mut _46: &std::mem::Discriminant<Test>;
    let _47: std::mem::Discriminant<Test>;
    let mut _48: &std::mem::Discriminant<Test>;
    let _49: std::mem::Discriminant<Test>;
    let _50: &std::mem::Discriminant<Test>;
    let _51: &std::mem::Discriminant<Test>;
    let mut _52: bool;
    let _54: !;
    let mut _55: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _56: (&std::mem::Discriminant<Test>, &std::mem::Discriminant<Test>);
    let mut _57: &std::mem::Discriminant<Test>;
    let _58: std::mem::Discriminant<Test>;
    let mut _59: &std::mem::Discriminant<Test>;
    let _60: std::mem::Discriminant<Test>;
    let mut _61: &Test;
    let _62: &Test;
    let _63: &Test;
    let _64: Test;
    let _65: &std::mem::Discriminant<Test>;
    let _66: &std::mem::Discriminant<Test>;
    let mut _67: bool;
    let _69: !;
    let mut _70: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _71: (&std::mem::Discriminant<SingleVariant>, &std::mem::Discriminant<SingleVariant>);
    let mut _72: &std::mem::Discriminant<SingleVariant>;
    let _73: std::mem::Discriminant<SingleVariant>;
    let mut _74: &std::mem::Discriminant<SingleVariant>;
    let _75: std::mem::Discriminant<SingleVariant>;
    let mut _76: &SingleVariant;
    let _77: &SingleVariant;
    let _78: &SingleVariant;
    let _79: SingleVariant;
    let _80: &std::mem::Discriminant<SingleVariant>;
    let _81: &std::mem::Discriminant<SingleVariant>;
    let mut _82: bool;
    let mut _83: bool;
    let _85: !;
    let mut _86: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }
    scope 3 {
        debug left_val => _22;
        debug right_val => _23;
        let _26: core::panicking::AssertKind;
        scope 4 {
            debug kind => _26;
        }
    }
    scope 5 {
        debug left_val => _38;
        debug right_val => _39;
        let _42: core::panicking::AssertKind;
        scope 6 {
            debug kind => _42;
        }
    }
    scope 7 {
        debug left_val => _50;
        debug right_val => _51;
        let _53: core::panicking::AssertKind;
        scope 8 {
            debug kind => _53;
        }
    }
    scope 9 {
        debug left_val => _65;
        debug right_val => _66;
        let _68: core::panicking::AssertKind;
        scope 10 {
            debug kind => _68;
        }
    }
    scope 11 {
        debug left_val => _80;
        debug right_val => _81;
        let _84: core::panicking::AssertKind;
        scope 12 {
            debug kind => _84;
        }
    }

    bb0: {
        _3 = const _;
        _2 = &_3;
        _5 = const _;
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &std::mem::Discriminant<Test>);
        _7 = (_1.1: &std::mem::Discriminant<Test>);
        _9 = <Discriminant<Test> as PartialEq>::eq(_6, _7) -> bb1;
    }

    bb1: {
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<Discriminant<Test>, Discriminant<Test>>(move _10, _6, _7, move _12);
    }

    bb3: {
        _15 = const _;
        _14 = &_15;
        _21 = Test::A(const 17_u8);
        _20 = &_21;
        _19 = std::hint::black_box::<&Test>(_20) -> bb4;
    }

    bb4: {
        _18 = _19;
        _17 = discriminant::<Test>(move _18) -> bb5;
    }

    bb5: {
        _16 = &_17;
        _13 = (move _14, move _16);
        _22 = (_13.0: &std::mem::Discriminant<Test>);
        _23 = (_13.1: &std::mem::Discriminant<Test>);
        _25 = <Discriminant<Test> as PartialEq>::eq(_22, _23) -> bb6;
    }

    bb6: {
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<Discriminant<Test>, Discriminant<Test>>(move _26, _22, _23, move _28);
    }

    bb8: {
        _31 = const _;
        _30 = &_31;
        _37 = Test::B;
        _36 = &_37;
        _35 = std::hint::black_box::<&Test>(_36) -> bb9;
    }

    bb9: {
        _34 = _35;
        _33 = discriminant::<Test>(move _34) -> bb10;
    }

    bb10: {
        _32 = &_33;
        _29 = (move _30, move _32);
        _38 = (_29.0: &std::mem::Discriminant<Test>);
        _39 = (_29.1: &std::mem::Discriminant<Test>);
        _41 = <Discriminant<Test> as PartialEq>::eq(_38, _39) -> bb11;
    }

    bb11: {
        _40 = Not(move _41);
        switchInt(move _40) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _42 = core::panicking::AssertKind::Eq;
        _44 = Option::<Arguments<'_>>::None;
        _43 = core::panicking::assert_failed::<Discriminant<Test>, Discriminant<Test>>(move _42, _38, _39, move _44);
    }

    bb13: {
        _47 = const _;
        _46 = &_47;
        _49 = const _;
        _48 = &_49;
        _45 = (move _46, move _48);
        _50 = (_45.0: &std::mem::Discriminant<Test>);
        _51 = (_45.1: &std::mem::Discriminant<Test>);
        _52 = <Discriminant<Test> as PartialEq>::eq(_50, _51) -> bb14;
    }

    bb14: {
        switchInt(move _52) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _53 = core::panicking::AssertKind::Ne;
        _55 = Option::<Arguments<'_>>::None;
        _54 = core::panicking::assert_failed::<Discriminant<Test>, Discriminant<Test>>(move _53, _50, _51, move _55);
    }

    bb16: {
        _58 = const _;
        _57 = &_58;
        _64 = Test::C { a: const 42_u8, b: const 7_u8 };
        _63 = &_64;
        _62 = std::hint::black_box::<&Test>(_63) -> bb17;
    }

    bb17: {
        _61 = _62;
        _60 = discriminant::<Test>(move _61) -> bb18;
    }

    bb18: {
        _59 = &_60;
        _56 = (move _57, move _59);
        _65 = (_56.0: &std::mem::Discriminant<Test>);
        _66 = (_56.1: &std::mem::Discriminant<Test>);
        _67 = <Discriminant<Test> as PartialEq>::eq(_65, _66) -> bb19;
    }

    bb19: {
        switchInt(move _67) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _68 = core::panicking::AssertKind::Ne;
        _70 = Option::<Arguments<'_>>::None;
        _69 = core::panicking::assert_failed::<Discriminant<Test>, Discriminant<Test>>(move _68, _65, _66, move _70);
    }

    bb21: {
        _73 = const _;
        _72 = &_73;
        _78 = &_79;
        _77 = std::hint::black_box::<&SingleVariant>(_78) -> bb22;
    }

    bb22: {
        _76 = _77;
        _75 = discriminant::<SingleVariant>(move _76) -> bb23;
    }

    bb23: {
        _74 = &_75;
        _71 = (move _72, move _74);
        _80 = (_71.0: &std::mem::Discriminant<SingleVariant>);
        _81 = (_71.1: &std::mem::Discriminant<SingleVariant>);
        _83 = <Discriminant<SingleVariant> as PartialEq>::eq(_80, _81) -> bb24;
    }

    bb24: {
        _82 = Not(move _83);
        switchInt(move _82) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _84 = core::panicking::AssertKind::Eq;
        _86 = Option::<Arguments<'_>>::None;
        _85 = core::panicking::assert_failed::<Discriminant<SingleVariant>, Discriminant<SingleVariant>>(move _84, _80, _81, move _86);
    }

    bb26: {
        return;
    }
}

fn Test::A(_1: u8) -> Test {
    let mut _0: Test;

    bb0: {
        _0 = Test::A(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Test::A(_1: u8) -> Test {
    let mut _0: Test;

    bb0: {
        _0 = Test::A(move _1);
        return;
    }
}

fn SingleVariant::Never(_1: Void) -> SingleVariant {
    let mut _0: SingleVariant;

    bb0: {
        _0 = SingleVariant::Never(move _1);
        return;
    }
}

// MIR FOR CTFE
fn SingleVariant::Never(_1: Void) -> SingleVariant {
    let mut _0: SingleVariant;

    bb0: {
        _0 = SingleVariant::Never(move _1);
        return;
    }
}
