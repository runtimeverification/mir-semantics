// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn foo() -> () {
    let mut _0: ();
    let _1: [i32; 5];
    let _3: &[i32; 5];
    let mut _5: [u8; 3];
    let _7: &foo::Foo<[u8; 3]>;
    scope 1 {
        debug x => _1;
        let _2: &[i32];
        scope 2 {
            debug y => _2;
            let _4: foo::Foo<[u8; 3]>;
            scope 3 {
                debug x => _4;
                let _6: &foo::Foo<[u8]>;
                scope 4 {
                    debug y => _6;
                }
            }
        }
    }

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32];
        _3 = &_1;
        _2 = _3 as &[i32] (Pointer(Unsize));
        _5 = [const 1_u8, const 2_u8, const 3_u8];
        _4 = Foo::<[u8; 3]>(const true, move _5);
        _7 = &_4;
        _6 = _7 as &foo::Foo<[u8]> (Pointer(Unsize));
        return;
    }
}

// MIR FOR CTFE
fn foo() -> () {
    let mut _0: ();
    let _1: [i32; 5];
    let mut _3: &[i32; 5];
    let _4: &[i32; 5];
    let mut _6: [u8; 3];
    let mut _8: &foo::Foo<[u8; 3]>;
    let _9: &foo::Foo<[u8; 3]>;
    scope 1 {
        debug x => _1;
        let _2: &[i32];
        scope 2 {
            debug y => _2;
            let _5: foo::Foo<[u8; 3]>;
            scope 3 {
                debug x => _5;
                let _7: &foo::Foo<[u8]>;
                scope 4 {
                    debug y => _7;
                }
            }
        }
    }

    bb0: {
        StorageLive(_1);
        _1 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32];
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = &_1;
        _3 = &(*_4);
        _2 = move _3 as &[i32] (Pointer(Unsize));
        StorageDead(_3);
        StorageDead(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = [const 1_u8, const 2_u8, const 3_u8];
        _5 = Foo::<[u8; 3]>(const true, move _6);
        StorageDead(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &_5;
        _8 = &(*_9);
        _7 = move _8 as &foo::Foo<[u8]> (Pointer(Unsize));
        StorageDead(_8);
        StorageDead(_9);
        _0 = const ();
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

foo::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

fn Foo(_1: bool, _2: T) -> Foo<T> {
    let mut _0: foo::Foo<T>;

    bb0: {
        _0 = Foo::<T>(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: bool, _2: T) -> Foo<T> {
    let mut _0: foo::Foo<T>;

    bb0: {
        _0 = Foo::<T>(move _1, move _2);
        return;
    }
}
