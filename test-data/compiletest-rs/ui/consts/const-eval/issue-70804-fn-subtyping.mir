// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn nested(_1: (for<'a> fn(&'a ()), String)) -> (fn(&()), String) {
    debug x => _1;
    let mut _0: (fn(&()), std::string::String);

    bb0: {
        _0 = move _1;
        return;
    }
}

// MIR FOR CTFE
fn nested(_1: (for<'a> fn(&'a ()), String)) -> (fn(&()), String) {
    debug x => _1;
    let mut _0: (fn(&()), std::string::String);

    bb0: {
        _0 = move _1;
        return;
    }
}

const TEST: (fn(&()), String) = {
    let mut _0: (fn(&()), std::string::String);
    let mut _1: (for<'a> fn(&'a ()), std::string::String);
    let mut _2: for<'a> fn(&'a ());
    let mut _3: [closure@ui/consts/const-eval/issue-70804-fn-subtyping.rs:7:53: 7:57];
    let mut _4: std::string::String;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = [closure@ui/consts/const-eval/issue-70804-fn-subtyping.rs:7:53: 7:57];
        _2 = move _3 as for<'a> fn(&'a ()) (Pointer(ClosureFnPointer(Normal)));
        StorageDead(_3);
        StorageLive(_4);
        ConstEvalCounter;
        _4 = String::new() -> bb1;
    }

    bb1: {
        _1 = (move _2, move _4);
        StorageDead(_4);
        StorageDead(_2);
        ConstEvalCounter;
        _0 = nested(move _1) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        StorageDead(_1);
        return;
    }

    bb3 (cleanup): {
        resume;
    }
}

fn TEST::{closure#0}(_1: &[closure@ui/consts/const-eval/issue-70804-fn-subtyping.rs:7:53: 7:57], _2: &()) -> () {
    debug _x => _2;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
