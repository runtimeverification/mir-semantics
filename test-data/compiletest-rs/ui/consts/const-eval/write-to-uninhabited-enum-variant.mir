// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn bar() -> Option<Empty> {
    let mut _0: std::option::Option<Empty>;

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: std::option::Option<Empty>;
    let mut _2: std::option::Option<Empty>;
    scope 1 {
        debug x => const ZeroSized: Empty;
    }
    scope 2 {
        debug x => const ZeroSized: Empty;
    }

    bb0: {
        _1 = bar() -> bb1;
    }

    bb1: {
        _2 = bar() -> bb2;
    }

    bb2: {
        return;
    }
}

fn Test1::A(_1: u8) -> Test1 {
    let mut _0: Test1;

    bb0: {
        _0 = Test1::A(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Test1::A(_1: u8) -> Test1 {
    let mut _0: Test1;

    bb0: {
        _0 = Test1::A(move _1);
        return;
    }
}

fn Test1::B(_1: Empty) -> Test1 {
    let mut _0: Test1;

    bb0: {
        _0 = Test1::B(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Test1::B(_1: Empty) -> Test1 {
    let mut _0: Test1;

    bb0: {
        _0 = Test1::B(move _1);
        return;
    }
}

fn Test2::A(_1: u8) -> Test2 {
    let mut _0: Test2;

    bb0: {
        _0 = Test2::A(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Test2::A(_1: u8) -> Test2 {
    let mut _0: Test2;

    bb0: {
        _0 = Test2::A(move _1);
        return;
    }
}

fn Test2::B(_1: Empty) -> Test2 {
    let mut _0: Test2;

    bb0: {
        _0 = Test2::B(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Test2::B(_1: Empty) -> Test2 {
    let mut _0: Test2;

    bb0: {
        _0 = Test2::B(move _1);
        return;
    }
}
