// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn g(_1: &S) -> &u32 {
    debug ss => _1;
    let mut _0: &u32;

    bb0: {
        _0 = &((*_1).1: u32);
        return;
    }
}

// MIR FOR CTFE
fn g(_1: &S) -> &u32 {
    debug ss => _1;
    let mut _0: &u32;
    let _2: &u32;

    bb0: {
        StorageLive(_2);
        _2 = &((*_1).1: u32);
        _0 = &(*_2);
        StorageDead(_2);
        return;
    }
}

static T: S = {
    let mut _0: S;
    let mut _1: &u32;
    let _2: &u32;
    let mut _3: &S;
    let _4: &S;
    let _5: &S;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = const {alloc1: &S};
        _4 = &(*_5);
        _3 = &(*_4);
        ConstEvalCounter;
        _2 = g(move _3) -> bb1;
    }

    bb1: {
        _1 = &(*_2);
        StorageDead(_3);
        _0 = S(move _1, const 0_u32);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

alloc1 (static: T, size: 16, align: 8) {
    ╾─────alloc1+0x8──────╼ 00 00 00 00 __ __ __ __ │ ╾──────╼....░░░░
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn S(_1: &u32, _2: u32) -> S {
    let mut _0: S;

    bb0: {
        _0 = S(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn S(_1: &u32, _2: u32) -> S {
    let mut _0: S;

    bb0: {
        _0 = S(move _1, move _2);
        return;
    }
}
