// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
i8x1_arr::0::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

f32x4::0::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&i8, &i8);
    let mut _2: &i8;
    let _3: i8;
    let mut _4: &i8;
    let _5: i8;
    let _6: &i8;
    let _7: &i8;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: i8;
    let mut _11: i8;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&i8, &i8);
    let mut _16: &i8;
    let _17: i8;
    let mut _18: &i8;
    let _19: i8;
    let _20: &i8;
    let _21: &i8;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: i8;
    let mut _25: i8;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: (&i8, &i8);
    let mut _30: &i8;
    let _31: i8;
    let mut _32: &i8;
    let _33: i8;
    let _34: &i8;
    let _35: &i8;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: i8;
    let mut _39: i8;
    let _41: !;
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _43: (&i8, &i8);
    let mut _44: &i8;
    let _45: i8;
    let mut _46: &i8;
    let _47: i8;
    let _48: &i8;
    let _49: &i8;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: i8;
    let mut _53: i8;
    let _55: !;
    let mut _56: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _57: (&u16, &u16);
    let mut _58: &u16;
    let _59: u16;
    let mut _60: &u16;
    let _61: u16;
    let _62: &u16;
    let _63: &u16;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: u16;
    let mut _67: u16;
    let _69: !;
    let mut _70: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _71: (&u16, &u16);
    let mut _72: &u16;
    let _73: u16;
    let mut _74: &u16;
    let _75: u16;
    let _76: &u16;
    let _77: &u16;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: u16;
    let mut _81: u16;
    let _83: !;
    let mut _84: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _85: (&u16, &u16);
    let mut _86: &u16;
    let _87: u16;
    let mut _88: &u16;
    let _89: u16;
    let _90: &u16;
    let _91: &u16;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: u16;
    let mut _95: u16;
    let _97: !;
    let mut _98: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _99: (&u16, &u16);
    let mut _100: &u16;
    let _101: u16;
    let mut _102: &u16;
    let _103: u16;
    let _104: &u16;
    let _105: &u16;
    let mut _106: bool;
    let mut _107: bool;
    let mut _108: u16;
    let mut _109: u16;
    let _111: !;
    let mut _112: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _113: (&f32, &f32);
    let mut _114: &f32;
    let _115: f32;
    let mut _116: &f32;
    let _117: f32;
    let _118: &f32;
    let _119: &f32;
    let mut _120: bool;
    let mut _121: bool;
    let mut _122: f32;
    let mut _123: f32;
    let _125: !;
    let mut _126: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _127: (&f32, &f32);
    let mut _128: &f32;
    let _129: f32;
    let mut _130: &f32;
    let _131: f32;
    let _132: &f32;
    let _133: &f32;
    let mut _134: bool;
    let mut _135: bool;
    let mut _136: f32;
    let mut _137: f32;
    let _139: !;
    let mut _140: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _141: (&f32, &f32);
    let mut _142: &f32;
    let _143: f32;
    let mut _144: &f32;
    let _145: f32;
    let _146: &f32;
    let _147: &f32;
    let mut _148: bool;
    let mut _149: bool;
    let mut _150: f32;
    let mut _151: f32;
    let _153: !;
    let mut _154: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _155: (&f32, &f32);
    let mut _156: &f32;
    let _157: f32;
    let mut _158: &f32;
    let _159: f32;
    let _160: &f32;
    let _161: &f32;
    let mut _162: bool;
    let mut _163: bool;
    let mut _164: f32;
    let mut _165: f32;
    let _167: !;
    let mut _168: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _169: (&f32, &f32);
    let mut _170: &f32;
    let _171: f32;
    let mut _172: &f32;
    let _173: f32;
    let _174: &f32;
    let _175: &f32;
    let mut _176: bool;
    let mut _177: bool;
    let mut _178: f32;
    let mut _179: f32;
    let _181: !;
    let mut _182: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _183: (&f32, &f32);
    let mut _184: &f32;
    let _185: f32;
    let mut _186: &f32;
    let _187: f32;
    let _188: &f32;
    let _189: &f32;
    let mut _190: bool;
    let mut _191: bool;
    let mut _192: f32;
    let mut _193: f32;
    let _195: !;
    let mut _196: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _197: (&f32, &f32);
    let mut _198: &f32;
    let _199: f32;
    let mut _200: &f32;
    let _201: f32;
    let _202: &f32;
    let _203: &f32;
    let mut _204: bool;
    let mut _205: bool;
    let mut _206: f32;
    let mut _207: f32;
    let _209: !;
    let mut _210: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _211: (&f32, &f32);
    let mut _212: &f32;
    let _213: f32;
    let mut _214: &f32;
    let _215: f32;
    let _216: &f32;
    let _217: &f32;
    let mut _218: bool;
    let mut _219: bool;
    let mut _220: f32;
    let mut _221: f32;
    let _223: !;
    let mut _224: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }
    scope 3 {
        debug left_val => _20;
        debug right_val => _21;
        let _26: core::panicking::AssertKind;
        scope 4 {
            debug kind => _26;
        }
    }
    scope 5 {
        debug left_val => _34;
        debug right_val => _35;
        let _40: core::panicking::AssertKind;
        scope 6 {
            debug kind => _40;
        }
    }
    scope 7 {
        debug left_val => _48;
        debug right_val => _49;
        let _54: core::panicking::AssertKind;
        scope 8 {
            debug kind => _54;
        }
    }
    scope 9 {
        debug left_val => _62;
        debug right_val => _63;
        let _68: core::panicking::AssertKind;
        scope 10 {
            debug kind => _68;
        }
    }
    scope 11 {
        debug left_val => _76;
        debug right_val => _77;
        let _82: core::panicking::AssertKind;
        scope 12 {
            debug kind => _82;
        }
    }
    scope 13 {
        debug left_val => _90;
        debug right_val => _91;
        let _96: core::panicking::AssertKind;
        scope 14 {
            debug kind => _96;
        }
    }
    scope 15 {
        debug left_val => _104;
        debug right_val => _105;
        let _110: core::panicking::AssertKind;
        scope 16 {
            debug kind => _110;
        }
    }
    scope 17 {
        debug left_val => _118;
        debug right_val => _119;
        let _124: core::panicking::AssertKind;
        scope 18 {
            debug kind => _124;
        }
    }
    scope 19 {
        debug left_val => _132;
        debug right_val => _133;
        let _138: core::panicking::AssertKind;
        scope 20 {
            debug kind => _138;
        }
    }
    scope 21 {
        debug left_val => _146;
        debug right_val => _147;
        let _152: core::panicking::AssertKind;
        scope 22 {
            debug kind => _152;
        }
    }
    scope 23 {
        debug left_val => _160;
        debug right_val => _161;
        let _166: core::panicking::AssertKind;
        scope 24 {
            debug kind => _166;
        }
    }
    scope 25 {
        debug left_val => _174;
        debug right_val => _175;
        let _180: core::panicking::AssertKind;
        scope 26 {
            debug kind => _180;
        }
    }
    scope 27 {
        debug left_val => _188;
        debug right_val => _189;
        let _194: core::panicking::AssertKind;
        scope 28 {
            debug kind => _194;
        }
    }
    scope 29 {
        debug left_val => _202;
        debug right_val => _203;
        let _208: core::panicking::AssertKind;
        scope 30 {
            debug kind => _208;
        }
    }
    scope 31 {
        debug left_val => _216;
        debug right_val => _217;
        let _222: core::panicking::AssertKind;
        scope 32 {
            debug kind => _222;
        }
    }

    bb0: {
        _3 = const _;
        _2 = &_3;
        _5 = const 42_i8;
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &i8);
        _7 = (_1.1: &i8);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<i8, i8>(move _12, _6, _7, move _14);
    }

    bb2: {
        _17 = const _;
        _16 = &_17;
        _19 = const 42_i8;
        _18 = &_19;
        _15 = (move _16, move _18);
        _20 = (_15.0: &i8);
        _21 = (_15.1: &i8);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<i8, i8>(move _26, _20, _21, move _28);
    }

    bb4: {
        _31 = const _;
        _30 = &_31;
        _33 = const 42_i8;
        _32 = &_33;
        _29 = (move _30, move _32);
        _34 = (_29.0: &i8);
        _35 = (_29.1: &i8);
        _38 = (*_34);
        _39 = (*_35);
        _37 = Eq(move _38, move _39);
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _40 = core::panicking::AssertKind::Eq;
        _42 = Option::<Arguments<'_>>::None;
        _41 = core::panicking::assert_failed::<i8, i8>(move _40, _34, _35, move _42);
    }

    bb6: {
        _45 = const _;
        _44 = &_45;
        _47 = const 42_i8;
        _46 = &_47;
        _43 = (move _44, move _46);
        _48 = (_43.0: &i8);
        _49 = (_43.1: &i8);
        _52 = (*_48);
        _53 = (*_49);
        _51 = Eq(move _52, move _53);
        _50 = Not(move _51);
        switchInt(move _50) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _54 = core::panicking::AssertKind::Eq;
        _56 = Option::<Arguments<'_>>::None;
        _55 = core::panicking::assert_failed::<i8, i8>(move _54, _48, _49, move _56);
    }

    bb8: {
        _59 = const _;
        _58 = &_59;
        _61 = const 13_u16;
        _60 = &_61;
        _57 = (move _58, move _60);
        _62 = (_57.0: &u16);
        _63 = (_57.1: &u16);
        _66 = (*_62);
        _67 = (*_63);
        _65 = Eq(move _66, move _67);
        _64 = Not(move _65);
        switchInt(move _64) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _68 = core::panicking::AssertKind::Eq;
        _70 = Option::<Arguments<'_>>::None;
        _69 = core::panicking::assert_failed::<u16, u16>(move _68, _62, _63, move _70);
    }

    bb10: {
        _73 = const _;
        _72 = &_73;
        _75 = const 42_u16;
        _74 = &_75;
        _71 = (move _72, move _74);
        _76 = (_71.0: &u16);
        _77 = (_71.1: &u16);
        _80 = (*_76);
        _81 = (*_77);
        _79 = Eq(move _80, move _81);
        _78 = Not(move _79);
        switchInt(move _78) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _82 = core::panicking::AssertKind::Eq;
        _84 = Option::<Arguments<'_>>::None;
        _83 = core::panicking::assert_failed::<u16, u16>(move _82, _76, _77, move _84);
    }

    bb12: {
        _87 = const _;
        _86 = &_87;
        _89 = const 13_u16;
        _88 = &_89;
        _85 = (move _86, move _88);
        _90 = (_85.0: &u16);
        _91 = (_85.1: &u16);
        _94 = (*_90);
        _95 = (*_91);
        _93 = Eq(move _94, move _95);
        _92 = Not(move _93);
        switchInt(move _92) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _96 = core::panicking::AssertKind::Eq;
        _98 = Option::<Arguments<'_>>::None;
        _97 = core::panicking::assert_failed::<u16, u16>(move _96, _90, _91, move _98);
    }

    bb14: {
        _101 = const _;
        _100 = &_101;
        _103 = const 42_u16;
        _102 = &_103;
        _99 = (move _100, move _102);
        _104 = (_99.0: &u16);
        _105 = (_99.1: &u16);
        _108 = (*_104);
        _109 = (*_105);
        _107 = Eq(move _108, move _109);
        _106 = Not(move _107);
        switchInt(move _106) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _110 = core::panicking::AssertKind::Eq;
        _112 = Option::<Arguments<'_>>::None;
        _111 = core::panicking::assert_failed::<u16, u16>(move _110, _104, _105, move _112);
    }

    bb16: {
        _115 = const _;
        _114 = &_115;
        _117 = const 13f32;
        _116 = &_117;
        _113 = (move _114, move _116);
        _118 = (_113.0: &f32);
        _119 = (_113.1: &f32);
        _122 = (*_118);
        _123 = (*_119);
        _121 = Eq(move _122, move _123);
        _120 = Not(move _121);
        switchInt(move _120) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _124 = core::panicking::AssertKind::Eq;
        _126 = Option::<Arguments<'_>>::None;
        _125 = core::panicking::assert_failed::<f32, f32>(move _124, _118, _119, move _126);
    }

    bb18: {
        _129 = const _;
        _128 = &_129;
        _131 = const 42f32;
        _130 = &_131;
        _127 = (move _128, move _130);
        _132 = (_127.0: &f32);
        _133 = (_127.1: &f32);
        _136 = (*_132);
        _137 = (*_133);
        _135 = Eq(move _136, move _137);
        _134 = Not(move _135);
        switchInt(move _134) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _138 = core::panicking::AssertKind::Eq;
        _140 = Option::<Arguments<'_>>::None;
        _139 = core::panicking::assert_failed::<f32, f32>(move _138, _132, _133, move _140);
    }

    bb20: {
        _143 = const _;
        _142 = &_143;
        _145 = const 15f32;
        _144 = &_145;
        _141 = (move _142, move _144);
        _146 = (_141.0: &f32);
        _147 = (_141.1: &f32);
        _150 = (*_146);
        _151 = (*_147);
        _149 = Eq(move _150, move _151);
        _148 = Not(move _149);
        switchInt(move _148) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _152 = core::panicking::AssertKind::Eq;
        _154 = Option::<Arguments<'_>>::None;
        _153 = core::panicking::assert_failed::<f32, f32>(move _152, _146, _147, move _154);
    }

    bb22: {
        _157 = const _;
        _156 = &_157;
        _159 = const 16f32;
        _158 = &_159;
        _155 = (move _156, move _158);
        _160 = (_155.0: &f32);
        _161 = (_155.1: &f32);
        _164 = (*_160);
        _165 = (*_161);
        _163 = Eq(move _164, move _165);
        _162 = Not(move _163);
        switchInt(move _162) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _166 = core::panicking::AssertKind::Eq;
        _168 = Option::<Arguments<'_>>::None;
        _167 = core::panicking::assert_failed::<f32, f32>(move _166, _160, _161, move _168);
    }

    bb24: {
        _171 = const _;
        _170 = &_171;
        _173 = const 13f32;
        _172 = &_173;
        _169 = (move _170, move _172);
        _174 = (_169.0: &f32);
        _175 = (_169.1: &f32);
        _178 = (*_174);
        _179 = (*_175);
        _177 = Eq(move _178, move _179);
        _176 = Not(move _177);
        switchInt(move _176) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _180 = core::panicking::AssertKind::Eq;
        _182 = Option::<Arguments<'_>>::None;
        _181 = core::panicking::assert_failed::<f32, f32>(move _180, _174, _175, move _182);
    }

    bb26: {
        _185 = const _;
        _184 = &_185;
        _187 = const 42f32;
        _186 = &_187;
        _183 = (move _184, move _186);
        _188 = (_183.0: &f32);
        _189 = (_183.1: &f32);
        _192 = (*_188);
        _193 = (*_189);
        _191 = Eq(move _192, move _193);
        _190 = Not(move _191);
        switchInt(move _190) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _194 = core::panicking::AssertKind::Eq;
        _196 = Option::<Arguments<'_>>::None;
        _195 = core::panicking::assert_failed::<f32, f32>(move _194, _188, _189, move _196);
    }

    bb28: {
        _199 = const _;
        _198 = &_199;
        _201 = const 15f32;
        _200 = &_201;
        _197 = (move _198, move _200);
        _202 = (_197.0: &f32);
        _203 = (_197.1: &f32);
        _206 = (*_202);
        _207 = (*_203);
        _205 = Eq(move _206, move _207);
        _204 = Not(move _205);
        switchInt(move _204) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _208 = core::panicking::AssertKind::Eq;
        _210 = Option::<Arguments<'_>>::None;
        _209 = core::panicking::assert_failed::<f32, f32>(move _208, _202, _203, move _210);
    }

    bb30: {
        _213 = const _;
        _212 = &_213;
        _215 = const 16f32;
        _214 = &_215;
        _211 = (move _212, move _214);
        _216 = (_211.0: &f32);
        _217 = (_211.1: &f32);
        _220 = (*_216);
        _221 = (*_217);
        _219 = Eq(move _220, move _221);
        _218 = Not(move _219);
        switchInt(move _218) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _222 = core::panicking::AssertKind::Eq;
        _224 = Option::<Arguments<'_>>::None;
        _223 = core::panicking::assert_failed::<f32, f32>(move _222, _216, _217, move _224);
    }

    bb32: {
        return;
    }
}

const main::U: i8x1 = {
    let mut _0: i8x1;

    bb0: {
        _0 = i8x1(const 13_i8);
        return;
    }
}

const main::V: i8x1 = {
    let mut _0: i8x1;
    scope 1 {
    }

    bb0: {
        ConstEvalCounter;
        _0 = simd_insert::<i8x1, i8>(const _, const 0_u32, const 42_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

const main::X0: i8 = {
    let mut _0: i8;
    let mut _1: i8x1;

    bb0: {
        StorageLive(_1);
        _1 = const _;
        _0 = (_1.0: i8);
        StorageDead(_1);
        return;
    }
}

const main::Y0: i8 = {
    let mut _0: i8;
    scope 1 {
    }

    bb0: {
        ConstEvalCounter;
        _0 = simd_extract::<i8x1, i8>(const _, const 0_u32) -> bb1;
    }

    bb1: {
        return;
    }
}

const main::U: i8x1_arr = {
    let mut _0: i8x1_arr;
    let mut _1: [i8; 1];

    bb0: {
        StorageLive(_1);
        _1 = [const 13_i8];
        _0 = i8x1_arr(move _1);
        StorageDead(_1);
        return;
    }
}

const main::V: i8x1_arr = {
    let mut _0: i8x1_arr;
    scope 1 {
    }

    bb0: {
        ConstEvalCounter;
        _0 = simd_insert::<i8x1_arr, i8>(const _, const 0_u32, const 42_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

const main::X0: i8 = {
    let mut _0: i8;
    let mut _1: i8x1_arr;
    let _2: usize;
    let mut _3: usize;
    let mut _4: bool;

    bb0: {
        StorageLive(_1);
        _1 = const _;
        StorageLive(_2);
        _2 = const 0_usize;
        _3 = Len((_1.0: [i8; 1]));
        _4 = Lt(_2, _3);
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> bb1;
    }

    bb1: {
        _0 = (_1.0: [i8; 1])[_2];
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

const main::Y0: i8 = {
    let mut _0: i8;
    scope 1 {
    }

    bb0: {
        ConstEvalCounter;
        _0 = simd_extract::<i8x1_arr, i8>(const _, const 0_u32) -> bb1;
    }

    bb1: {
        return;
    }
}

const main::U: u16x2 = {
    let mut _0: u16x2;

    bb0: {
        _0 = u16x2(const 13_u16, const 14_u16);
        return;
    }
}

const main::V: u16x2 = {
    let mut _0: u16x2;
    scope 1 {
    }

    bb0: {
        ConstEvalCounter;
        _0 = simd_insert::<u16x2, u16>(const _, const 1_u32, const 42_u16) -> bb1;
    }

    bb1: {
        return;
    }
}

const main::X0: u16 = {
    let mut _0: u16;
    let mut _1: u16x2;

    bb0: {
        StorageLive(_1);
        _1 = const _;
        _0 = (_1.0: u16);
        StorageDead(_1);
        return;
    }
}

const main::X1: u16 = {
    let mut _0: u16;
    let mut _1: u16x2;

    bb0: {
        StorageLive(_1);
        _1 = const _;
        _0 = (_1.1: u16);
        StorageDead(_1);
        return;
    }
}

const main::Y0: u16 = {
    let mut _0: u16;
    scope 1 {
    }

    bb0: {
        ConstEvalCounter;
        _0 = simd_extract::<u16x2, u16>(const _, const 0_u32) -> bb1;
    }

    bb1: {
        return;
    }
}

const main::Y1: u16 = {
    let mut _0: u16;
    scope 1 {
    }

    bb0: {
        ConstEvalCounter;
        _0 = simd_extract::<u16x2, u16>(const _, const 1_u32) -> bb1;
    }

    bb1: {
        return;
    }
}

const main::U: f32x4 = {
    let mut _0: f32x4;
    let mut _1: [f32; 4];

    bb0: {
        StorageLive(_1);
        _1 = [const 13f32, const 14f32, const 15f32, const 16f32];
        _0 = f32x4(move _1);
        StorageDead(_1);
        return;
    }
}

const main::V: f32x4 = {
    let mut _0: f32x4;
    scope 1 {
    }

    bb0: {
        ConstEvalCounter;
        _0 = simd_insert::<f32x4, f32>(const _, const 1_u32, const 42f32) -> bb1;
    }

    bb1: {
        return;
    }
}

const main::X0: f32 = {
    let mut _0: f32;
    let mut _1: f32x4;
    let _2: usize;
    let mut _3: usize;
    let mut _4: bool;

    bb0: {
        StorageLive(_1);
        _1 = const _;
        StorageLive(_2);
        _2 = const 0_usize;
        _3 = Len((_1.0: [f32; 4]));
        _4 = Lt(_2, _3);
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> bb1;
    }

    bb1: {
        _0 = (_1.0: [f32; 4])[_2];
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

const main::X1: f32 = {
    let mut _0: f32;
    let mut _1: f32x4;
    let _2: usize;
    let mut _3: usize;
    let mut _4: bool;

    bb0: {
        StorageLive(_1);
        _1 = const _;
        StorageLive(_2);
        _2 = const 1_usize;
        _3 = Len((_1.0: [f32; 4]));
        _4 = Lt(_2, _3);
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> bb1;
    }

    bb1: {
        _0 = (_1.0: [f32; 4])[_2];
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

const X2: f32 = {
    let mut _0: f32;
    let mut _1: f32x4;
    let _2: usize;
    let mut _3: usize;
    let mut _4: bool;

    bb0: {
        StorageLive(_1);
        _1 = const _;
        StorageLive(_2);
        _2 = const 2_usize;
        _3 = Len((_1.0: [f32; 4]));
        _4 = Lt(_2, _3);
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> bb1;
    }

    bb1: {
        _0 = (_1.0: [f32; 4])[_2];
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

const X3: f32 = {
    let mut _0: f32;
    let mut _1: f32x4;
    let _2: usize;
    let mut _3: usize;
    let mut _4: bool;

    bb0: {
        StorageLive(_1);
        _1 = const _;
        StorageLive(_2);
        _2 = const 3_usize;
        _3 = Len((_1.0: [f32; 4]));
        _4 = Lt(_2, _3);
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> bb1;
    }

    bb1: {
        _0 = (_1.0: [f32; 4])[_2];
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

const main::Y0: f32 = {
    let mut _0: f32;
    scope 1 {
    }

    bb0: {
        ConstEvalCounter;
        _0 = simd_extract::<f32x4, f32>(const _, const 0_u32) -> bb1;
    }

    bb1: {
        return;
    }
}

const main::Y1: f32 = {
    let mut _0: f32;
    scope 1 {
    }

    bb0: {
        ConstEvalCounter;
        _0 = simd_extract::<f32x4, f32>(const _, const 1_u32) -> bb1;
    }

    bb1: {
        return;
    }
}

const Y2: f32 = {
    let mut _0: f32;
    scope 1 {
    }

    bb0: {
        ConstEvalCounter;
        _0 = simd_extract::<f32x4, f32>(const _, const 2_u32) -> bb1;
    }

    bb1: {
        return;
    }
}

const Y3: f32 = {
    let mut _0: f32;
    scope 1 {
    }

    bb0: {
        ConstEvalCounter;
        _0 = simd_extract::<f32x4, f32>(const _, const 3_u32) -> bb1;
    }

    bb1: {
        return;
    }
}

fn i8x1(_1: i8) -> i8x1 {
    let mut _0: i8x1;

    bb0: {
        _0 = i8x1(move _1);
        return;
    }
}

// MIR FOR CTFE
fn i8x1(_1: i8) -> i8x1 {
    let mut _0: i8x1;

    bb0: {
        _0 = i8x1(move _1);
        return;
    }
}

fn u16x2(_1: u16, _2: u16) -> u16x2 {
    let mut _0: u16x2;

    bb0: {
        _0 = u16x2(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn u16x2(_1: u16, _2: u16) -> u16x2 {
    let mut _0: u16x2;

    bb0: {
        _0 = u16x2(move _1, move _2);
        return;
    }
}

fn i8x1_arr(_1: [i8; 1]) -> i8x1_arr {
    let mut _0: i8x1_arr;

    bb0: {
        _0 = i8x1_arr(move _1);
        return;
    }
}

// MIR FOR CTFE
fn i8x1_arr(_1: [i8; 1]) -> i8x1_arr {
    let mut _0: i8x1_arr;

    bb0: {
        _0 = i8x1_arr(move _1);
        return;
    }
}

fn f32x4(_1: [f32; 4]) -> f32x4 {
    let mut _0: f32x4;

    bb0: {
        _0 = f32x4(move _1);
        return;
    }
}

// MIR FOR CTFE
fn f32x4(_1: [f32; 4]) -> f32x4 {
    let mut _0: f32x4;

    bb0: {
        _0 = f32x4(move _1);
        return;
    }
}
