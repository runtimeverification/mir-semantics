// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn example(_1: &Box<dyn Foo>) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

const BARS: &[Bar] = {
    let mut _0: &[Bar];
    let mut _1: &[Bar; 2];
    let _2: &[Bar; 2];
    let _3: [Bar; 2];
    let mut _4: Bar;
    let mut _5: &[u8];
    let _6: &[u8];
    let mut _7: &str;
    let _8: &str;
    let mut _9: for<'a> fn(&'a std::boxed::Box<dyn Foo>);
    let mut _10: Bar;
    let mut _11: &[u8];
    let _12: &[u8];
    let mut _13: &str;
    let _14: &str;
    let mut _15: for<'a> fn(&'a std::boxed::Box<dyn Foo>);

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = const "0";
        _7 = &(*_8);
        ConstEvalCounter;
        _6 = core::str::<impl str>::as_bytes(move _7) -> bb1;
    }

    bb1: {
        _5 = &(*_6);
        StorageDead(_7);
        StorageLive(_9);
        _9 = example as for<'a> fn(&'a std::boxed::Box<dyn Foo>) (Pointer(ReifyFnPointer));
        _4 = Bar { bytes: move _5, func: move _9 };
        StorageDead(_9);
        StorageDead(_5);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = const "0";
        _13 = &(*_14);
        ConstEvalCounter;
        _12 = core::str::<impl str>::as_bytes(move _13) -> bb2;
    }

    bb2: {
        _11 = &(*_12);
        StorageDead(_13);
        StorageLive(_15);
        _15 = example as for<'a> fn(&'a std::boxed::Box<dyn Foo>) (Pointer(ReifyFnPointer));
        _10 = Bar { bytes: move _11, func: move _15 };
        StorageDead(_15);
        StorageDead(_11);
        _3 = [move _4, move _10];
        StorageDead(_10);
        StorageDead(_4);
        _2 = &_3;
        _1 = &(*_2);
        _0 = move _1 as &[Bar] (Pointer(Unsize));
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_8);
        StorageDead(_6);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::boxed::Box<dyn Foo>;
    let mut _2: !;
    scope 1 {
        debug x => _1;
        let mut _3: std::slice::Iter<'_, Bar>;
        scope 2 {
            debug iter => _3;
            let _4: &Bar;
            scope 3 {
                debug bar => _4;
            }
        }
    }

    bb0: {
        _2 = core::panicking::panic(const "not yet implemented");
    }
}
