// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: ();

    bb0: {
        _1 = foo(const 10_i32) -> bb1;
    }

    bb1: {
        return;
    }
}

fn foo(_1: i32) -> () {
    debug n => _1;
    let mut _0: ();
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: i32;
    let mut _5: i32;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: bool;
    scope 1 {
    }

    bb0: {
        _2 = const false;
        switchInt(move _2) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _1 = const 0_i32;
        goto -> bb2;
    }

    bb2: {
        _4 = _1;
        _3 = Gt(move _4, const 0_i32);
        switchInt(move _3) -> [0: bb5, otherwise: bb3];
    }

    bb3: {
        _5 = _1;
        _6 = Eq(_5, const 0_i32);
        assert(!move _6, "attempt to divide `{}` by zero", const 1_i32) -> bb4;
    }

    bb4: {
        _7 = Eq(_5, const -1_i32);
        _8 = Eq(const 1_i32, const i32::MIN);
        _9 = BitAnd(move _7, move _8);
        assert(!move _9, "attempt to compute `{} / {}`, which would overflow", const 1_i32, _5) -> bb5;
    }

    bb5: {
        return;
    }
}
