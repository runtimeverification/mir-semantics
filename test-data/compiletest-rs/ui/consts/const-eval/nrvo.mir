// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn init(_1: &mut [u8; 1024]) -> () {
    debug buf => _1;
    let mut _0: ();
    let _2: usize;
    let mut _3: usize;
    let mut _4: bool;
    let _5: usize;
    let mut _6: usize;
    let mut _7: bool;

    bb0: {
        _2 = const 33_usize;
        _3 = const 1024_usize;
        _4 = Lt(_2, _3);
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> bb1;
    }

    bb1: {
        (*_1)[_2] = const 3_u8;
        _5 = const 444_usize;
        _6 = const 1024_usize;
        _7 = Lt(_5, _6);
        assert(move _7, "index out of bounds: the length is {} but the index is {}", move _6, _5) -> bb2;
    }

    bb2: {
        (*_1)[_5] = const 4_u8;
        return;
    }
}

// MIR FOR CTFE
fn init(_1: &mut [u8; 1024]) -> () {
    debug buf => _1;
    let mut _0: ();
    let _2: usize;
    let mut _3: usize;
    let mut _4: bool;
    let _5: usize;
    let mut _6: usize;
    let mut _7: bool;

    bb0: {
        StorageLive(_2);
        _2 = const 33_usize;
        _3 = Len((*_1));
        _4 = Lt(_2, _3);
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> bb1;
    }

    bb1: {
        (*_1)[_2] = const 3_u8;
        StorageDead(_2);
        StorageLive(_5);
        _5 = const 444_usize;
        _6 = Len((*_1));
        _7 = Lt(_5, _6);
        assert(move _7, "index out of bounds: the length is {} but the index is {}", move _6, _5) -> bb2;
    }

    bb2: {
        (*_1)[_5] = const 4_u8;
        StorageDead(_5);
        _0 = const ();
        return;
    }
}

init::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1024_usize;
        return;
    }
}

fn nrvo() -> [u8; 1024] {
    let mut _0: [u8; 1024];
    let mut _1: [u8; 1024];
    let _2: ();
    let mut _3: &mut [u8; 1024];
    scope 1 {
        debug buf => _1;
    }

    bb0: {
        _1 = [const 0_u8; 1024];
        _3 = &mut _1;
        _2 = init(_3) -> bb1;
    }

    bb1: {
        _0 = _1;
        return;
    }
}

// MIR FOR CTFE
fn nrvo() -> [u8; 1024] {
    let mut _0: [u8; 1024];
    let mut _1: [u8; 1024];
    let _2: ();
    let mut _3: &mut [u8; 1024];
    let mut _4: &mut [u8; 1024];
    scope 1 {
        debug buf => _1;
    }

    bb0: {
        StorageLive(_1);
        _1 = [const 0_u8; 1024];
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = &mut _1;
        _3 = &mut (*_4);
        ConstEvalCounter;
        _2 = init(move _3) -> bb1;
    }

    bb1: {
        StorageDead(_3);
        StorageDead(_4);
        StorageDead(_2);
        _0 = _1;
        StorageDead(_1);
        return;
    }
}

nrvo::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1024_usize;
        return;
    }
}

nrvo::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1024_usize;
        return;
    }
}

const BUF: [u8; 1024] = {
    let mut _0: [u8; 1024];

    bb0: {
        ConstEvalCounter;
        _0 = nrvo() -> bb1;
    }

    bb1: {
        return;
    }
}

BUF::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1024_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&u8, &u8);
    let mut _2: &u8;
    let _3: [u8; 1024];
    let _4: usize;
    let mut _5: usize;
    let mut _6: bool;
    let mut _7: &u8;
    let _8: u8;
    let _9: &u8;
    let _10: &u8;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: u8;
    let mut _14: u8;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: (&u8, &u8);
    let mut _19: &u8;
    let _20: [u8; 1024];
    let _21: usize;
    let mut _22: usize;
    let mut _23: bool;
    let mut _24: &u8;
    let _25: u8;
    let _26: &u8;
    let _27: &u8;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: u8;
    let mut _31: u8;
    let _33: !;
    let mut _34: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _35: (&u8, &u8);
    let mut _36: &u8;
    let _37: [u8; 1024];
    let _38: usize;
    let mut _39: usize;
    let mut _40: bool;
    let mut _41: &u8;
    let _42: u8;
    let _43: &u8;
    let _44: &u8;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: u8;
    let mut _48: u8;
    let _50: !;
    let mut _51: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _9;
        debug right_val => _10;
        let _15: core::panicking::AssertKind;
        scope 2 {
            debug kind => _15;
        }
    }
    scope 3 {
        debug left_val => _26;
        debug right_val => _27;
        let _32: core::panicking::AssertKind;
        scope 4 {
            debug kind => _32;
        }
    }
    scope 5 {
        debug left_val => _43;
        debug right_val => _44;
        let _49: core::panicking::AssertKind;
        scope 6 {
            debug kind => _49;
        }
    }

    bb0: {
        _3 = const _;
        _4 = const 33_usize;
        _5 = const 1024_usize;
        _6 = Lt(_4, _5);
        assert(move _6, "index out of bounds: the length is {} but the index is {}", move _5, _4) -> bb1;
    }

    bb1: {
        _2 = &_3[_4];
        _8 = const 3_u8;
        _7 = &_8;
        _1 = (move _2, move _7);
        _9 = (_1.0: &u8);
        _10 = (_1.1: &u8);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<u8, u8>(move _15, _9, _10, move _17);
    }

    bb3: {
        _20 = const _;
        _21 = const 19_usize;
        _22 = const 1024_usize;
        _23 = Lt(_21, _22);
        assert(move _23, "index out of bounds: the length is {} but the index is {}", move _22, _21) -> bb4;
    }

    bb4: {
        _19 = &_20[_21];
        _25 = const 0_u8;
        _24 = &_25;
        _18 = (move _19, move _24);
        _26 = (_18.0: &u8);
        _27 = (_18.1: &u8);
        _30 = (*_26);
        _31 = (*_27);
        _29 = Eq(move _30, move _31);
        _28 = Not(move _29);
        switchInt(move _28) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _32 = core::panicking::AssertKind::Eq;
        _34 = Option::<Arguments<'_>>::None;
        _33 = core::panicking::assert_failed::<u8, u8>(move _32, _26, _27, move _34);
    }

    bb6: {
        _37 = const _;
        _38 = const 444_usize;
        _39 = const 1024_usize;
        _40 = Lt(_38, _39);
        assert(move _40, "index out of bounds: the length is {} but the index is {}", move _39, _38) -> bb7;
    }

    bb7: {
        _36 = &_37[_38];
        _42 = const 4_u8;
        _41 = &_42;
        _35 = (move _36, move _41);
        _43 = (_35.0: &u8);
        _44 = (_35.1: &u8);
        _47 = (*_43);
        _48 = (*_44);
        _46 = Eq(move _47, move _48);
        _45 = Not(move _46);
        switchInt(move _45) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _49 = core::panicking::AssertKind::Eq;
        _51 = Option::<Arguments<'_>>::None;
        _50 = core::panicking::assert_failed::<u8, u8>(move _49, _43, _44, move _51);
    }

    bb9: {
        return;
    }
}
