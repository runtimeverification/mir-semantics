// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/consts/const-eval/issue-50706.rs:5:10: 5:19>::eq(_1: &StatVariant, _2: &StatVariant) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: u8;
    let mut _5: u8;
    let mut _6: bool;
    let mut _7: &();
    let mut _8: &();

    bb0: {
        _4 = ((*_1).0: u8);
        _5 = ((*_2).0: u8);
        _3 = Eq(move _4, move _5);
        switchInt(move _3) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _7 = &((*_1).1: ());
        _8 = &((*_2).1: ());
        _6 = <() as PartialEq>::eq(move _7, move _8) -> bb4;
    }

    bb3: {
        return;
    }

    bb4: {
        _0 = move _6;
        goto -> bb3;
    }
}

fn <impl at ui/consts/const-eval/issue-50706.rs:5:21: 5:23>::assert_receiver_is_total_eq(_1: &StatVariant) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        return;
    }
}

fn <impl at ui/consts/const-eval/issue-50706.rs:11:10: 11:19>::eq(_1: &Stat, _2: &Stat) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: &StatVariant;
    let mut _6: &StatVariant;
    let mut _7: bool;
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: bool;
    let mut _11: &();
    let mut _12: &();

    bb0: {
        _5 = &((*_1).0: StatVariant);
        _6 = &((*_2).0: StatVariant);
        _4 = <StatVariant as PartialEq>::eq(move _5, move _6) -> bb7;
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _11 = &((*_1).2: ());
        _12 = &((*_2).2: ());
        _10 = <() as PartialEq>::eq(move _11, move _12) -> bb8;
    }

    bb3: {
        return;
    }

    bb4: {
        _3 = const false;
        goto -> bb6;
    }

    bb5: {
        _8 = ((*_1).1: usize);
        _9 = ((*_2).1: usize);
        _7 = Eq(move _8, move _9);
        _3 = move _7;
        goto -> bb6;
    }

    bb6: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2];
    }

    bb7: {
        switchInt(move _4) -> [0: bb4, otherwise: bb5];
    }

    bb8: {
        _0 = move _10;
        goto -> bb3;
    }
}

fn <impl at ui/consts/const-eval/issue-50706.rs:11:21: 11:23>::assert_receiver_is_total_eq(_1: &Stat) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
        scope 2 {
            scope 3 {
            }
        }
    }

    bb0: {
        return;
    }
}

const <impl at ui/consts/const-eval/issue-50706.rs:18:1: 18:11>::TEST: StatVariant = {
    let mut _0: StatVariant;
    let mut _1: ();

    bb0: {
        StorageLive(_1);
        _1 = ();
        _0 = StatVariant { id: const 0_u8, _priv: move _1 };
        StorageDead(_1);
        return;
    }
}

const <impl at ui/consts/const-eval/issue-50706.rs:18:1: 18:11>::A: Stat = {
    let mut _0: Stat;
    let mut _1: ();

    bb0: {
        StorageLive(_1);
        _1 = ();
        _0 = Stat { variant: const _, index: const 0_usize, _priv: move _1 };
        StorageDead(_1);
        return;
    }
}

fn <impl at ui/consts/const-eval/issue-50706.rs:27:1: 27:10>::from_index(_1: StatVariant, _2: usize) -> Option<Stat> {
    debug variant => _1;
    debug index => _2;
    let mut _0: std::option::Option<Stat>;
    let _3: Stat;
    scope 1 {
        debug stat => _3;
    }

    bb0: {
        _3 = Stat { variant: move _1, index: _2, _priv: const () };
        switchInt(((_3.0: StatVariant).0: u8)) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        switchInt((_3.1: usize)) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _0 = Option::<Stat>::None;
        goto -> bb4;
    }

    bb3: {
        _0 = Option::<Stat>::Some(const _);
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
