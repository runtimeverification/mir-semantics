// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Foo::X::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 42_isize;
        return;
    }
}

Foo::Y::{constant#0}: isize = {
    let mut _0: isize;
    let mut _1: isize;
    let mut _2: isize;
    let mut _3: (isize, bool);
    let mut _4: (isize, bool);

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _3 = CheckedAdd(const _, const 0_isize);
        assert(!move (_3.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 0_isize) -> bb1;
    }

    bb1: {
        _2 = move (_3.0: isize);
        _1 = move _2 as isize (IntToInt);
        StorageDead(_2);
        _4 = CheckedSub(_1, const 3_isize);
        assert(!move (_4.1: bool), "attempt to compute `{} - {}`, which would overflow", move _1, const 3_isize) -> bb2;
    }

    bb2: {
        _0 = move (_4.0: isize);
        StorageDead(_1);
        return;
    }
}

Bar::Y::{constant#0}: isize = {
    let mut _0: isize;
    let mut _1: isize;
    let mut _2: (isize, bool);

    bb0: {
        StorageLive(_1);
        _1 = const 0_isize as isize (IntToInt);
        _2 = CheckedAdd(_1, const 2_isize);
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", move _1, const 2_isize) -> bb1;
    }

    bb1: {
        _0 = move (_2.0: isize);
        StorageDead(_1);
        return;
    }
}

Boo::X::{constant#0}: isize = {
    let mut _0: isize;
    let mut _1: isize;
    let mut _2: isize;
    let mut _3: (isize, bool);
    let mut _4: (isize, bool);

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _3 = CheckedAdd(const _, const 0_isize);
        assert(!move (_3.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 0_isize) -> bb1;
    }

    bb1: {
        _2 = move (_3.0: isize);
        _1 = move _2 as isize (IntToInt);
        StorageDead(_2);
        _4 = CheckedMul(_1, const 2_isize);
        assert(!move (_4.1: bool), "attempt to compute `{} * {}`, which would overflow", move _1, const 2_isize) -> bb2;
    }

    bb2: {
        _0 = move (_4.0: isize);
        StorageDead(_1);
        return;
    }
}

Boo::Y::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 9_isize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&isize, &isize);
    let mut _2: &isize;
    let _3: isize;
    let mut _4: isize;
    let mut _5: &isize;
    let _6: isize;
    let _7: &isize;
    let _8: &isize;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: isize;
    let mut _12: isize;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&isize, &isize);
    let mut _17: &isize;
    let _18: isize;
    let mut _19: isize;
    let mut _20: &isize;
    let _21: isize;
    let _22: &isize;
    let _23: &isize;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: isize;
    let mut _27: isize;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&isize, &isize);
    let mut _32: &isize;
    let _33: isize;
    let mut _34: &isize;
    let _35: isize;
    let _36: &isize;
    let _37: &isize;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: isize;
    let mut _41: isize;
    let _43: !;
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _45: (&isize, &isize);
    let mut _46: &isize;
    let _47: isize;
    let mut _48: isize;
    let mut _49: &isize;
    let _50: isize;
    let _51: &isize;
    let _52: &isize;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: isize;
    let mut _56: isize;
    let _58: !;
    let mut _59: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _60: (&isize, &isize);
    let mut _61: &isize;
    let _62: isize;
    let mut _63: isize;
    let mut _64: &isize;
    let _65: isize;
    let _66: &isize;
    let _67: &isize;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: isize;
    let mut _71: isize;
    let _73: !;
    let mut _74: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _75: (&isize, &isize);
    let mut _76: &isize;
    let _77: isize;
    let mut _78: isize;
    let mut _79: &isize;
    let _80: isize;
    let _81: &isize;
    let _82: &isize;
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: isize;
    let mut _86: isize;
    let _88: !;
    let mut _89: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _7;
        debug right_val => _8;
        let _13: core::panicking::AssertKind;
        scope 2 {
            debug kind => _13;
        }
    }
    scope 3 {
        debug left_val => _22;
        debug right_val => _23;
        let _28: core::panicking::AssertKind;
        scope 4 {
            debug kind => _28;
        }
    }
    scope 5 {
        debug left_val => _36;
        debug right_val => _37;
        let _42: core::panicking::AssertKind;
        scope 6 {
            debug kind => _42;
        }
    }
    scope 7 {
        debug left_val => _51;
        debug right_val => _52;
        let _57: core::panicking::AssertKind;
        scope 8 {
            debug kind => _57;
        }
    }
    scope 9 {
        debug left_val => _66;
        debug right_val => _67;
        let _72: core::panicking::AssertKind;
        scope 10 {
            debug kind => _72;
        }
    }
    scope 11 {
        debug left_val => _81;
        debug right_val => _82;
        let _87: core::panicking::AssertKind;
        scope 12 {
            debug kind => _87;
        }
    }

    bb0: {
        _4 = Add(const _, const 0_isize);
        _3 = move _4;
        _2 = &_3;
        _6 = const 42_isize;
        _5 = &_6;
        _1 = (move _2, move _5);
        _7 = (_1.0: &isize);
        _8 = (_1.1: &isize);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<isize, isize>(move _13, _7, _8, move _15);
    }

    bb2: {
        _19 = Add(const _, const 0_isize);
        _18 = move _19;
        _17 = &_18;
        _21 = const 39_isize;
        _20 = &_21;
        _16 = (move _17, move _20);
        _22 = (_16.0: &isize);
        _23 = (_16.1: &isize);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<isize, isize>(move _28, _22, _23, move _30);
    }

    bb4: {
        _33 = const 0_isize;
        _32 = &_33;
        _35 = const 0_isize;
        _34 = &_35;
        _31 = (move _32, move _34);
        _36 = (_31.0: &isize);
        _37 = (_31.1: &isize);
        _40 = (*_36);
        _41 = (*_37);
        _39 = Eq(move _40, move _41);
        _38 = Not(move _39);
        switchInt(move _38) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _42 = core::panicking::AssertKind::Eq;
        _44 = Option::<Arguments<'_>>::None;
        _43 = core::panicking::assert_failed::<isize, isize>(move _42, _36, _37, move _44);
    }

    bb6: {
        _48 = Add(const _, const 0_isize);
        _47 = move _48;
        _46 = &_47;
        _50 = const 2_isize;
        _49 = &_50;
        _45 = (move _46, move _49);
        _51 = (_45.0: &isize);
        _52 = (_45.1: &isize);
        _55 = (*_51);
        _56 = (*_52);
        _54 = Eq(move _55, move _56);
        _53 = Not(move _54);
        switchInt(move _53) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _57 = core::panicking::AssertKind::Eq;
        _59 = Option::<Arguments<'_>>::None;
        _58 = core::panicking::assert_failed::<isize, isize>(move _57, _51, _52, move _59);
    }

    bb8: {
        _63 = Add(const _, const 0_isize);
        _62 = move _63;
        _61 = &_62;
        _65 = const 18_isize;
        _64 = &_65;
        _60 = (move _61, move _64);
        _66 = (_60.0: &isize);
        _67 = (_60.1: &isize);
        _70 = (*_66);
        _71 = (*_67);
        _69 = Eq(move _70, move _71);
        _68 = Not(move _69);
        switchInt(move _68) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _72 = core::panicking::AssertKind::Eq;
        _74 = Option::<Arguments<'_>>::None;
        _73 = core::panicking::assert_failed::<isize, isize>(move _72, _66, _67, move _74);
    }

    bb10: {
        _78 = Add(const _, const 0_isize);
        _77 = move _78;
        _76 = &_77;
        _80 = const 9_isize;
        _79 = &_80;
        _75 = (move _76, move _79);
        _81 = (_75.0: &isize);
        _82 = (_75.1: &isize);
        _85 = (*_81);
        _86 = (*_82);
        _84 = Eq(move _85, move _86);
        _83 = Not(move _84);
        switchInt(move _83) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _87 = core::panicking::AssertKind::Eq;
        _89 = Option::<Arguments<'_>>::None;
        _88 = core::panicking::assert_failed::<isize, isize>(move _87, _81, _82, move _89);
    }

    bb12: {
        return;
    }
}
