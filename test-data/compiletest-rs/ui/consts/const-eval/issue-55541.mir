// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static MAGIC_FFI_STATIC: u8 = {
    let mut _0: u8;

    bb0: {
        _0 = const 42_u8;
        return;
    }
}

static MAGIC_FFI_REF: &Wrapper = {
    let mut _0: &Wrapper;
    let mut _1: &u8;
    let _2: &u8;
    scope 1 {
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const {alloc1: &u8};
        _1 = &(*_2);
        _0 = move _1 as &Wrapper (Transmute);
        StorageDead(_1);
        StorageDead(_2);
        return;
    }
}

alloc1 (static: MAGIC_FFI_STATIC, size: 1, align: 1) {
    2a                                              │ *
}

static MAGIC_FFI_REF2: &Wrapper2 = {
    let mut _0: &Wrapper2;
    let mut _1: &u8;
    let _2: &u8;
    scope 1 {
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const {alloc1: &u8};
        _1 = &(*_2);
        _0 = move _1 as &Wrapper2 (Transmute);
        StorageDead(_1);
        StorageDead(_2);
        return;
    }
}

alloc1 (static: MAGIC_FFI_STATIC, size: 1, align: 1) {
    2a                                              │ *
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn Wrapper(_1: ExternType) -> Wrapper {
    let mut _0: Wrapper;

    bb0: {
        _0 = Wrapper(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Wrapper(_1: ExternType) -> Wrapper {
    let mut _0: Wrapper;

    bb0: {
        _0 = Wrapper(move _1);
        return;
    }
}

fn Wrapper2(_1: PhantomData<Vec<i32>>, _2: ExternType) -> Wrapper2 {
    let mut _0: Wrapper2;

    bb0: {
        _0 = Wrapper2(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn Wrapper2(_1: PhantomData<Vec<i32>>, _2: ExternType) -> Wrapper2 {
    let mut _0: Wrapper2;

    bb0: {
        _0 = Wrapper2(move _1, move _2);
        return;
    }
}
