// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static ASSERT: () = {
    let mut _0: ();
    let mut _1: [(); 1];
    let mut _2: ();
    let _3: usize;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = ();
        _1 = [move _2];
        StorageDead(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        ConstEvalCounter;
        _6 = std::mem::size_of::<u32>() -> bb1;
    }

    bb1: {
        _5 = Eq(move _6, const 4_usize);
        StorageDead(_6);
        _4 = Not(move _5);
        StorageDead(_5);
        _3 = move _4 as usize (IntToInt);
        StorageDead(_4);
        _7 = Len(_1);
        _8 = Lt(_3, _7);
        assert(move _8, "index out of bounds: the length is {} but the index is {}", move _7, _3) -> bb2;
    }

    bb2: {
        _0 = _1[_3];
        StorageDead(_3);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
