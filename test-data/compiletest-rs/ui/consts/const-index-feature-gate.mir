// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const ARR: [usize; 1] = {
    let mut _0: [usize; 1];

    bb0: {
        _0 = [const 2_usize];
        return;
    }
}

ARR::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

const ARR2: [i32; 2] = {
    let mut _0: [i32; 2];

    bb0: {
        _0 = [const 5_i32, const 6_i32];
        return;
    }
}

ARR2::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: [usize; 1];
    let _2: usize;
    let mut _3: usize;
    let mut _4: bool;

    bb0: {
        StorageLive(_1);
        _1 = const _;
        StorageLive(_2);
        _2 = const 0_usize;
        _3 = Len(_1);
        _4 = Lt(_2, _3);
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> bb1;
    }

    bb1: {
        _0 = _1[_2];
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
