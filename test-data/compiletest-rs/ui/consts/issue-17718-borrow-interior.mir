// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static A: S = {
    let mut _0: S;

    bb0: {
        _0 = S { a: const 3_usize };
        return;
    }
}

static B: &usize = {
    let mut _0: &usize;
    let _1: &usize;
    let _2: &S;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const {alloc1: &S};
        _1 = &((*_2).0: usize);
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

alloc1 (static: A, size: 8, align: 8) {
    03 00 00 00 00 00 00 00                         │ ........
}

static C: &usize = {
    let mut _0: &usize;
    let _1: &usize;
    let _2: &S;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const {alloc1: &S};
        _1 = &((*_2).0: usize);
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

alloc1 (static: A, size: 8, align: 8) {
    03 00 00 00 00 00 00 00                         │ ........
}

static D: [usize; 1] = {
    let mut _0: [usize; 1];

    bb0: {
        _0 = [const 1_usize];
        return;
    }
}

D::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

static E: usize = {
    let mut _0: usize;
    let mut _1: &[usize; 1];
    let _2: usize;
    let mut _3: usize;
    let mut _4: bool;

    bb0: {
        StorageLive(_1);
        _1 = const {alloc2: &[usize; 1]};
        StorageLive(_2);
        _2 = const 0_usize;
        _3 = Len((*_1));
        _4 = Lt(_2, _3);
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> bb1;
    }

    bb1: {
        _0 = (*_1)[_2];
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

alloc2 (static: D, size: 8, align: 8) {
    01 00 00 00 00 00 00 00                         │ ........
}

static F: &usize = {
    let mut _0: &usize;
    let _1: &usize;
    let _2: &[usize; 1];
    let _3: usize;
    let mut _4: usize;
    let mut _5: bool;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const {alloc2: &[usize; 1]};
        StorageLive(_3);
        _3 = const 0_usize;
        _4 = Len((*_2));
        _5 = Lt(_3, _4);
        assert(move _5, "index out of bounds: the length is {} but the index is {}", move _4, _3) -> bb1;
    }

    bb1: {
        _1 = &(*_2)[_3];
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

alloc2 (static: D, size: 8, align: 8) {
    01 00 00 00 00 00 00 00                         │ ........
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let _2: &&usize;
    let mut _3: &usize;
    let _4: &S;
    let _5: &usize;
    let _6: &usize;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: usize;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: (&usize, &usize);
    let _15: &&usize;
    let mut _16: &usize;
    let _17: &S;
    let _18: &usize;
    let _19: &usize;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: usize;
    let mut _23: usize;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _27: (&usize, &usize);
    let _28: &usize;
    let mut _29: &usize;
    let _30: &[usize; 1];
    let _31: usize;
    let mut _32: usize;
    let mut _33: bool;
    let _34: &usize;
    let _35: &usize;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: usize;
    let mut _39: usize;
    let _41: !;
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _43: (&usize, &usize);
    let _44: &&usize;
    let mut _45: &usize;
    let _46: &[usize; 1];
    let _47: usize;
    let mut _48: usize;
    let mut _49: bool;
    let _50: &usize;
    let _51: &usize;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: usize;
    let mut _55: usize;
    let _57: !;
    let mut _58: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _59: &usize;
    let mut _60: &usize;
    let mut _61: &usize;
    scope 1 {
        debug left_val => _5;
        debug right_val => _6;
        let _11: core::panicking::AssertKind;
        scope 2 {
            debug kind => _11;
        }
    }
    scope 3 {
        debug left_val => _18;
        debug right_val => _19;
        let _24: core::panicking::AssertKind;
        scope 4 {
            debug kind => _24;
        }
    }
    scope 5 {
        debug left_val => _34;
        debug right_val => _35;
        let _40: core::panicking::AssertKind;
        scope 6 {
            debug kind => _40;
        }
    }
    scope 7 {
        debug left_val => _50;
        debug right_val => _51;
        let _56: core::panicking::AssertKind;
        scope 8 {
            debug kind => _56;
        }
    }

    bb0: {
        _2 = const {alloc3: &&usize};
        _59 = deref_copy (*_2);
        _4 = const {alloc1: &S};
        _3 = &((*_4).0: usize);
        _1 = (_59, move _3);
        _5 = (_1.0: &usize);
        _6 = (_1.1: &usize);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<usize, usize>(move _11, _5, _6, move _13);
    }

    bb2: {
        _15 = const {alloc3: &&usize};
        _60 = deref_copy (*_15);
        _17 = const {alloc1: &S};
        _16 = &((*_17).0: usize);
        _14 = (_60, move _16);
        _18 = (_14.0: &usize);
        _19 = (_14.1: &usize);
        _22 = (*_18);
        _23 = (*_19);
        _21 = Eq(move _22, move _23);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<usize, usize>(move _24, _18, _19, move _26);
    }

    bb4: {
        _28 = const {alloc4: &usize};
        _30 = const {alloc2: &[usize; 1]};
        _31 = const 0_usize;
        _32 = const 1_usize;
        _33 = Lt(_31, _32);
        assert(move _33, "index out of bounds: the length is {} but the index is {}", move _32, _31) -> bb5;
    }

    bb5: {
        _29 = &(*_30)[_31];
        _27 = (_28, move _29);
        _34 = (_27.0: &usize);
        _35 = (_27.1: &usize);
        _38 = (*_34);
        _39 = (*_35);
        _37 = Eq(move _38, move _39);
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _40 = core::panicking::AssertKind::Eq;
        _42 = Option::<Arguments<'_>>::None;
        _41 = core::panicking::assert_failed::<usize, usize>(move _40, _34, _35, move _42);
    }

    bb7: {
        _44 = const {alloc5: &&usize};
        _61 = deref_copy (*_44);
        _46 = const {alloc2: &[usize; 1]};
        _47 = const 0_usize;
        _48 = const 1_usize;
        _49 = Lt(_47, _48);
        assert(move _49, "index out of bounds: the length is {} but the index is {}", move _48, _47) -> bb8;
    }

    bb8: {
        _45 = &(*_46)[_47];
        _43 = (_61, move _45);
        _50 = (_43.0: &usize);
        _51 = (_43.1: &usize);
        _54 = (*_50);
        _55 = (*_51);
        _53 = Eq(move _54, move _55);
        _52 = Not(move _53);
        switchInt(move _52) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _56 = core::panicking::AssertKind::Eq;
        _58 = Option::<Arguments<'_>>::None;
        _57 = core::panicking::assert_failed::<usize, usize>(move _56, _50, _51, move _58);
    }

    bb10: {
        return;
    }
}

alloc5 (static: F, size: 8, align: 8) {
    ╾───────alloc2────────╼                         │ ╾──────╼
}

alloc4 (static: E, size: 8, align: 8) {
    01 00 00 00 00 00 00 00                         │ ........
}

alloc3 (static: B, size: 8, align: 8) {
    ╾───────alloc1────────╼                         │ ╾──────╼
}

alloc2 (static: D, size: 8, align: 8) {
    01 00 00 00 00 00 00 00                         │ ........
}

alloc1 (static: A, size: 8, align: 8) {
    03 00 00 00 00 00 00 00                         │ ........
}
