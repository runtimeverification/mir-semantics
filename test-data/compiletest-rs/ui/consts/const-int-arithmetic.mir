// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn checked() -> () {
    let mut _0: ();
    let mut _1: (&std::option::Option<i8>, &std::option::Option<i8>);
    let mut _2: &std::option::Option<i8>;
    let _3: std::option::Option<i8>;
    let mut _4: &std::option::Option<i8>;
    let _5: std::option::Option<i8>;
    let _6: &std::option::Option<i8>;
    let _7: &std::option::Option<i8>;
    let mut _8: bool;
    let mut _9: bool;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: (&std::option::Option<i8>, &std::option::Option<i8>);
    let mut _14: &std::option::Option<i8>;
    let _15: std::option::Option<i8>;
    let mut _16: &std::option::Option<i8>;
    let _17: std::option::Option<i8>;
    let _18: &std::option::Option<i8>;
    let _19: &std::option::Option<i8>;
    let mut _20: bool;
    let mut _21: bool;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: (&std::option::Option<i8>, &std::option::Option<i8>);
    let mut _26: &std::option::Option<i8>;
    let _27: std::option::Option<i8>;
    let mut _28: &std::option::Option<i8>;
    let _29: std::option::Option<i8>;
    let _30: &std::option::Option<i8>;
    let _31: &std::option::Option<i8>;
    let mut _32: bool;
    let mut _33: bool;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _37: (&std::option::Option<i8>, &std::option::Option<i8>);
    let mut _38: &std::option::Option<i8>;
    let _39: std::option::Option<i8>;
    let mut _40: &std::option::Option<i8>;
    let _41: std::option::Option<i8>;
    let _42: &std::option::Option<i8>;
    let _43: &std::option::Option<i8>;
    let mut _44: bool;
    let mut _45: bool;
    let _47: !;
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _49: (&std::option::Option<i8>, &std::option::Option<i8>);
    let mut _50: &std::option::Option<i8>;
    let _51: std::option::Option<i8>;
    let mut _52: &std::option::Option<i8>;
    let _53: std::option::Option<i8>;
    let _54: &std::option::Option<i8>;
    let _55: &std::option::Option<i8>;
    let mut _56: bool;
    let mut _57: bool;
    let _59: !;
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _61: (&std::option::Option<i8>, &std::option::Option<i8>);
    let mut _62: &std::option::Option<i8>;
    let _63: std::option::Option<i8>;
    let mut _64: &std::option::Option<i8>;
    let _65: std::option::Option<i8>;
    let _66: &std::option::Option<i8>;
    let _67: &std::option::Option<i8>;
    let mut _68: bool;
    let mut _69: bool;
    let _71: !;
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _73: (&std::option::Option<i8>, &std::option::Option<i8>);
    let mut _74: &std::option::Option<i8>;
    let _75: std::option::Option<i8>;
    let mut _76: &std::option::Option<i8>;
    let _77: std::option::Option<i8>;
    let _78: &std::option::Option<i8>;
    let _79: &std::option::Option<i8>;
    let mut _80: bool;
    let mut _81: bool;
    let _83: !;
    let mut _84: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _85: (&std::option::Option<i8>, &std::option::Option<i8>);
    let mut _86: &std::option::Option<i8>;
    let _87: std::option::Option<i8>;
    let mut _88: &std::option::Option<i8>;
    let _89: std::option::Option<i8>;
    let _90: &std::option::Option<i8>;
    let _91: &std::option::Option<i8>;
    let mut _92: bool;
    let mut _93: bool;
    let _95: !;
    let mut _96: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _97: (&std::option::Option<i8>, &std::option::Option<i8>);
    let mut _98: &std::option::Option<i8>;
    let _99: std::option::Option<i8>;
    let mut _100: &std::option::Option<i8>;
    let _101: std::option::Option<i8>;
    let _102: &std::option::Option<i8>;
    let _103: &std::option::Option<i8>;
    let mut _104: bool;
    let mut _105: bool;
    let _107: !;
    let mut _108: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _109: (&std::option::Option<i8>, &std::option::Option<i8>);
    let mut _110: &std::option::Option<i8>;
    let _111: std::option::Option<i8>;
    let mut _112: &std::option::Option<i8>;
    let _113: std::option::Option<i8>;
    let _114: &std::option::Option<i8>;
    let _115: &std::option::Option<i8>;
    let mut _116: bool;
    let mut _117: bool;
    let _119: !;
    let mut _120: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _121: (&std::option::Option<i8>, &std::option::Option<i8>);
    let mut _122: &std::option::Option<i8>;
    let _123: std::option::Option<i8>;
    let mut _124: &std::option::Option<i8>;
    let _125: std::option::Option<i8>;
    let _126: &std::option::Option<i8>;
    let _127: &std::option::Option<i8>;
    let mut _128: bool;
    let mut _129: bool;
    let _131: !;
    let mut _132: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _133: (&std::option::Option<i8>, &std::option::Option<i8>);
    let mut _134: &std::option::Option<i8>;
    let _135: std::option::Option<i8>;
    let mut _136: &std::option::Option<i8>;
    let _137: std::option::Option<i8>;
    let _138: &std::option::Option<i8>;
    let _139: &std::option::Option<i8>;
    let mut _140: bool;
    let mut _141: bool;
    let _143: !;
    let mut _144: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _145: (&std::option::Option<i8>, &std::option::Option<i8>);
    let mut _146: &std::option::Option<i8>;
    let _147: std::option::Option<i8>;
    let mut _148: &std::option::Option<i8>;
    let _149: std::option::Option<i8>;
    let _150: &std::option::Option<i8>;
    let _151: &std::option::Option<i8>;
    let mut _152: bool;
    let mut _153: bool;
    let _155: !;
    let mut _156: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _157: (&std::option::Option<i8>, &std::option::Option<i8>);
    let mut _158: &std::option::Option<i8>;
    let _159: std::option::Option<i8>;
    let mut _160: &std::option::Option<i8>;
    let _161: std::option::Option<i8>;
    let _162: &std::option::Option<i8>;
    let _163: &std::option::Option<i8>;
    let mut _164: bool;
    let mut _165: bool;
    let _167: !;
    let mut _168: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _169: (&std::option::Option<i8>, &std::option::Option<i8>);
    let mut _170: &std::option::Option<i8>;
    let _171: std::option::Option<i8>;
    let mut _172: &std::option::Option<i8>;
    let _173: std::option::Option<i8>;
    let _174: &std::option::Option<i8>;
    let _175: &std::option::Option<i8>;
    let mut _176: bool;
    let mut _177: bool;
    let _179: !;
    let mut _180: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _181: (&std::option::Option<i8>, &std::option::Option<i8>);
    let mut _182: &std::option::Option<i8>;
    let _183: std::option::Option<i8>;
    let mut _184: &std::option::Option<i8>;
    let _185: std::option::Option<i8>;
    let _186: &std::option::Option<i8>;
    let _187: &std::option::Option<i8>;
    let mut _188: bool;
    let mut _189: bool;
    let _191: !;
    let mut _192: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _193: (&std::option::Option<i8>, &std::option::Option<i8>);
    let mut _194: &std::option::Option<i8>;
    let _195: std::option::Option<i8>;
    let mut _196: &std::option::Option<i8>;
    let _197: std::option::Option<i8>;
    let _198: &std::option::Option<i8>;
    let _199: &std::option::Option<i8>;
    let mut _200: bool;
    let mut _201: bool;
    let _203: !;
    let mut _204: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _205: (&std::option::Option<i8>, &std::option::Option<i8>);
    let mut _206: &std::option::Option<i8>;
    let _207: std::option::Option<i8>;
    let mut _208: &std::option::Option<i8>;
    let _209: std::option::Option<i8>;
    let _210: &std::option::Option<i8>;
    let _211: &std::option::Option<i8>;
    let mut _212: bool;
    let mut _213: bool;
    let _215: !;
    let mut _216: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _217: (&std::option::Option<i8>, &std::option::Option<i8>);
    let mut _218: &std::option::Option<i8>;
    let _219: std::option::Option<i8>;
    let mut _220: &std::option::Option<i8>;
    let _221: std::option::Option<i8>;
    let _222: &std::option::Option<i8>;
    let _223: &std::option::Option<i8>;
    let mut _224: bool;
    let mut _225: bool;
    let _227: !;
    let mut _228: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _229: (&std::option::Option<i8>, &std::option::Option<i8>);
    let mut _230: &std::option::Option<i8>;
    let _231: std::option::Option<i8>;
    let mut _232: &std::option::Option<i8>;
    let _233: std::option::Option<i8>;
    let _234: &std::option::Option<i8>;
    let _235: &std::option::Option<i8>;
    let mut _236: bool;
    let mut _237: bool;
    let _239: !;
    let mut _240: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _241: (&std::option::Option<i8>, &std::option::Option<i8>);
    let mut _242: &std::option::Option<i8>;
    let _243: std::option::Option<i8>;
    let mut _244: &std::option::Option<i8>;
    let _245: std::option::Option<i8>;
    let _246: &std::option::Option<i8>;
    let _247: &std::option::Option<i8>;
    let mut _248: bool;
    let mut _249: bool;
    let _251: !;
    let mut _252: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _253: (&std::option::Option<i8>, &std::option::Option<i8>);
    let mut _254: &std::option::Option<i8>;
    let _255: std::option::Option<i8>;
    let mut _256: &std::option::Option<i8>;
    let _257: std::option::Option<i8>;
    let _258: &std::option::Option<i8>;
    let _259: &std::option::Option<i8>;
    let mut _260: bool;
    let mut _261: bool;
    let _263: !;
    let mut _264: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _265: (&std::option::Option<i8>, &std::option::Option<i8>);
    let mut _266: &std::option::Option<i8>;
    let _267: std::option::Option<i8>;
    let mut _268: &std::option::Option<i8>;
    let _269: std::option::Option<i8>;
    let _270: &std::option::Option<i8>;
    let _271: &std::option::Option<i8>;
    let mut _272: bool;
    let mut _273: bool;
    let _275: !;
    let mut _276: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _277: (&std::option::Option<i8>, &std::option::Option<i8>);
    let mut _278: &std::option::Option<i8>;
    let _279: std::option::Option<i8>;
    let mut _280: &std::option::Option<i8>;
    let _281: std::option::Option<i8>;
    let _282: &std::option::Option<i8>;
    let _283: &std::option::Option<i8>;
    let mut _284: bool;
    let mut _285: bool;
    let _287: !;
    let mut _288: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _289: (&std::option::Option<i8>, &std::option::Option<i8>);
    let mut _290: &std::option::Option<i8>;
    let _291: std::option::Option<i8>;
    let mut _292: &std::option::Option<i8>;
    let _293: std::option::Option<i8>;
    let _294: &std::option::Option<i8>;
    let _295: &std::option::Option<i8>;
    let mut _296: bool;
    let mut _297: bool;
    let _299: !;
    let mut _300: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _301: (&std::option::Option<i8>, &std::option::Option<i8>);
    let mut _302: &std::option::Option<i8>;
    let _303: std::option::Option<i8>;
    let mut _304: &std::option::Option<i8>;
    let _305: std::option::Option<i8>;
    let _306: &std::option::Option<i8>;
    let _307: &std::option::Option<i8>;
    let mut _308: bool;
    let mut _309: bool;
    let _311: !;
    let mut _312: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _313: (&std::option::Option<i8>, &std::option::Option<i8>);
    let mut _314: &std::option::Option<i8>;
    let _315: std::option::Option<i8>;
    let mut _316: &std::option::Option<i8>;
    let _317: std::option::Option<i8>;
    let _318: &std::option::Option<i8>;
    let _319: &std::option::Option<i8>;
    let mut _320: bool;
    let mut _321: bool;
    let _323: !;
    let mut _324: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }
    scope 3 {
        debug left_val => _18;
        debug right_val => _19;
        let _22: core::panicking::AssertKind;
        scope 4 {
            debug kind => _22;
        }
    }
    scope 5 {
        debug left_val => _30;
        debug right_val => _31;
        let _34: core::panicking::AssertKind;
        scope 6 {
            debug kind => _34;
        }
    }
    scope 7 {
        debug left_val => _42;
        debug right_val => _43;
        let _46: core::panicking::AssertKind;
        scope 8 {
            debug kind => _46;
        }
    }
    scope 9 {
        debug left_val => _54;
        debug right_val => _55;
        let _58: core::panicking::AssertKind;
        scope 10 {
            debug kind => _58;
        }
    }
    scope 11 {
        debug left_val => _66;
        debug right_val => _67;
        let _70: core::panicking::AssertKind;
        scope 12 {
            debug kind => _70;
        }
    }
    scope 13 {
        debug left_val => _78;
        debug right_val => _79;
        let _82: core::panicking::AssertKind;
        scope 14 {
            debug kind => _82;
        }
    }
    scope 15 {
        debug left_val => _90;
        debug right_val => _91;
        let _94: core::panicking::AssertKind;
        scope 16 {
            debug kind => _94;
        }
    }
    scope 17 {
        debug left_val => _102;
        debug right_val => _103;
        let _106: core::panicking::AssertKind;
        scope 18 {
            debug kind => _106;
        }
    }
    scope 19 {
        debug left_val => _114;
        debug right_val => _115;
        let _118: core::panicking::AssertKind;
        scope 20 {
            debug kind => _118;
        }
    }
    scope 21 {
        debug left_val => _126;
        debug right_val => _127;
        let _130: core::panicking::AssertKind;
        scope 22 {
            debug kind => _130;
        }
    }
    scope 23 {
        debug left_val => _138;
        debug right_val => _139;
        let _142: core::panicking::AssertKind;
        scope 24 {
            debug kind => _142;
        }
    }
    scope 25 {
        debug left_val => _150;
        debug right_val => _151;
        let _154: core::panicking::AssertKind;
        scope 26 {
            debug kind => _154;
        }
    }
    scope 27 {
        debug left_val => _162;
        debug right_val => _163;
        let _166: core::panicking::AssertKind;
        scope 28 {
            debug kind => _166;
        }
    }
    scope 29 {
        debug left_val => _174;
        debug right_val => _175;
        let _178: core::panicking::AssertKind;
        scope 30 {
            debug kind => _178;
        }
    }
    scope 31 {
        debug left_val => _186;
        debug right_val => _187;
        let _190: core::panicking::AssertKind;
        scope 32 {
            debug kind => _190;
        }
    }
    scope 33 {
        debug left_val => _198;
        debug right_val => _199;
        let _202: core::panicking::AssertKind;
        scope 34 {
            debug kind => _202;
        }
    }
    scope 35 {
        debug left_val => _210;
        debug right_val => _211;
        let _214: core::panicking::AssertKind;
        scope 36 {
            debug kind => _214;
        }
    }
    scope 37 {
        debug left_val => _222;
        debug right_val => _223;
        let _226: core::panicking::AssertKind;
        scope 38 {
            debug kind => _226;
        }
    }
    scope 39 {
        debug left_val => _234;
        debug right_val => _235;
        let _238: core::panicking::AssertKind;
        scope 40 {
            debug kind => _238;
        }
    }
    scope 41 {
        debug left_val => _246;
        debug right_val => _247;
        let _250: core::panicking::AssertKind;
        scope 42 {
            debug kind => _250;
        }
    }
    scope 43 {
        debug left_val => _258;
        debug right_val => _259;
        let _262: core::panicking::AssertKind;
        scope 44 {
            debug kind => _262;
        }
    }
    scope 45 {
        debug left_val => _270;
        debug right_val => _271;
        let _274: core::panicking::AssertKind;
        scope 46 {
            debug kind => _274;
        }
    }
    scope 47 {
        debug left_val => _282;
        debug right_val => _283;
        let _286: core::panicking::AssertKind;
        scope 48 {
            debug kind => _286;
        }
    }
    scope 49 {
        debug left_val => _294;
        debug right_val => _295;
        let _298: core::panicking::AssertKind;
        scope 50 {
            debug kind => _298;
        }
    }
    scope 51 {
        debug left_val => _306;
        debug right_val => _307;
        let _310: core::panicking::AssertKind;
        scope 52 {
            debug kind => _310;
        }
    }
    scope 53 {
        debug left_val => _318;
        debug right_val => _319;
        let _322: core::panicking::AssertKind;
        scope 54 {
            debug kind => _322;
        }
    }

    bb0: {
        _3 = const _;
        _2 = &_3;
        _5 = Option::<i8>::Some(const 7_i8);
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &std::option::Option<i8>);
        _7 = (_1.1: &std::option::Option<i8>);
        _9 = <Option<i8> as PartialEq>::eq(_6, _7) -> bb1;
    }

    bb1: {
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _10, _6, _7, move _12);
    }

    bb3: {
        _15 = const _;
        _14 = &_15;
        _17 = Option::<i8>::None;
        _16 = &_17;
        _13 = (move _14, move _16);
        _18 = (_13.0: &std::option::Option<i8>);
        _19 = (_13.1: &std::option::Option<i8>);
        _21 = <Option<i8> as PartialEq>::eq(_18, _19) -> bb4;
    }

    bb4: {
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _22, _18, _19, move _24);
    }

    bb6: {
        _27 = const _;
        _26 = &_27;
        _29 = Option::<i8>::Some(const 3_i8);
        _28 = &_29;
        _25 = (move _26, move _28);
        _30 = (_25.0: &std::option::Option<i8>);
        _31 = (_25.1: &std::option::Option<i8>);
        _33 = <Option<i8> as PartialEq>::eq(_30, _31) -> bb7;
    }

    bb7: {
        _32 = Not(move _33);
        switchInt(move _32) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _34, _30, _31, move _36);
    }

    bb9: {
        _39 = const _;
        _38 = &_39;
        _41 = Option::<i8>::None;
        _40 = &_41;
        _37 = (move _38, move _40);
        _42 = (_37.0: &std::option::Option<i8>);
        _43 = (_37.1: &std::option::Option<i8>);
        _45 = <Option<i8> as PartialEq>::eq(_42, _43) -> bb10;
    }

    bb10: {
        _44 = Not(move _45);
        switchInt(move _44) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _46 = core::panicking::AssertKind::Eq;
        _48 = Option::<Arguments<'_>>::None;
        _47 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _46, _42, _43, move _48);
    }

    bb12: {
        _51 = const _;
        _50 = &_51;
        _53 = Option::<i8>::Some(const 3_i8);
        _52 = &_53;
        _49 = (move _50, move _52);
        _54 = (_49.0: &std::option::Option<i8>);
        _55 = (_49.1: &std::option::Option<i8>);
        _57 = <Option<i8> as PartialEq>::eq(_54, _55) -> bb13;
    }

    bb13: {
        _56 = Not(move _57);
        switchInt(move _56) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _58 = core::panicking::AssertKind::Eq;
        _60 = Option::<Arguments<'_>>::None;
        _59 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _58, _54, _55, move _60);
    }

    bb15: {
        _63 = const _;
        _62 = &_63;
        _65 = Option::<i8>::None;
        _64 = &_65;
        _61 = (move _62, move _64);
        _66 = (_61.0: &std::option::Option<i8>);
        _67 = (_61.1: &std::option::Option<i8>);
        _69 = <Option<i8> as PartialEq>::eq(_66, _67) -> bb16;
    }

    bb16: {
        _68 = Not(move _69);
        switchInt(move _68) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _70 = core::panicking::AssertKind::Eq;
        _72 = Option::<Arguments<'_>>::None;
        _71 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _70, _66, _67, move _72);
    }

    bb18: {
        _75 = const _;
        _74 = &_75;
        _77 = Option::<i8>::None;
        _76 = &_77;
        _73 = (move _74, move _76);
        _78 = (_73.0: &std::option::Option<i8>);
        _79 = (_73.1: &std::option::Option<i8>);
        _81 = <Option<i8> as PartialEq>::eq(_78, _79) -> bb19;
    }

    bb19: {
        _80 = Not(move _81);
        switchInt(move _80) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _82 = core::panicking::AssertKind::Eq;
        _84 = Option::<Arguments<'_>>::None;
        _83 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _82, _78, _79, move _84);
    }

    bb21: {
        _87 = const _;
        _86 = &_87;
        _89 = Option::<i8>::Some(const i8::MAX);
        _88 = &_89;
        _85 = (move _86, move _88);
        _90 = (_85.0: &std::option::Option<i8>);
        _91 = (_85.1: &std::option::Option<i8>);
        _93 = <Option<i8> as PartialEq>::eq(_90, _91) -> bb22;
    }

    bb22: {
        _92 = Not(move _93);
        switchInt(move _92) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _94 = core::panicking::AssertKind::Eq;
        _96 = Option::<Arguments<'_>>::None;
        _95 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _94, _90, _91, move _96);
    }

    bb24: {
        _99 = const _;
        _98 = &_99;
        _101 = Option::<i8>::None;
        _100 = &_101;
        _97 = (move _98, move _100);
        _102 = (_97.0: &std::option::Option<i8>);
        _103 = (_97.1: &std::option::Option<i8>);
        _105 = <Option<i8> as PartialEq>::eq(_102, _103) -> bb25;
    }

    bb25: {
        _104 = Not(move _105);
        switchInt(move _104) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _106 = core::panicking::AssertKind::Eq;
        _108 = Option::<Arguments<'_>>::None;
        _107 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _106, _102, _103, move _108);
    }

    bb27: {
        _111 = const _;
        _110 = &_111;
        _113 = Option::<i8>::None;
        _112 = &_113;
        _109 = (move _110, move _112);
        _114 = (_109.0: &std::option::Option<i8>);
        _115 = (_109.1: &std::option::Option<i8>);
        _117 = <Option<i8> as PartialEq>::eq(_114, _115) -> bb28;
    }

    bb28: {
        _116 = Not(move _117);
        switchInt(move _116) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _118 = core::panicking::AssertKind::Eq;
        _120 = Option::<Arguments<'_>>::None;
        _119 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _118, _114, _115, move _120);
    }

    bb30: {
        _123 = const _;
        _122 = &_123;
        _125 = Option::<i8>::Some(const 1_i8);
        _124 = &_125;
        _121 = (move _122, move _124);
        _126 = (_121.0: &std::option::Option<i8>);
        _127 = (_121.1: &std::option::Option<i8>);
        _129 = <Option<i8> as PartialEq>::eq(_126, _127) -> bb31;
    }

    bb31: {
        _128 = Not(move _129);
        switchInt(move _128) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _130 = core::panicking::AssertKind::Eq;
        _132 = Option::<Arguments<'_>>::None;
        _131 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _130, _126, _127, move _132);
    }

    bb33: {
        _135 = const _;
        _134 = &_135;
        _137 = Option::<i8>::None;
        _136 = &_137;
        _133 = (move _134, move _136);
        _138 = (_133.0: &std::option::Option<i8>);
        _139 = (_133.1: &std::option::Option<i8>);
        _141 = <Option<i8> as PartialEq>::eq(_138, _139) -> bb34;
    }

    bb34: {
        _140 = Not(move _141);
        switchInt(move _140) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _142 = core::panicking::AssertKind::Eq;
        _144 = Option::<Arguments<'_>>::None;
        _143 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _142, _138, _139, move _144);
    }

    bb36: {
        _147 = const _;
        _146 = &_147;
        _149 = Option::<i8>::None;
        _148 = &_149;
        _145 = (move _146, move _148);
        _150 = (_145.0: &std::option::Option<i8>);
        _151 = (_145.1: &std::option::Option<i8>);
        _153 = <Option<i8> as PartialEq>::eq(_150, _151) -> bb37;
    }

    bb37: {
        _152 = Not(move _153);
        switchInt(move _152) -> [0: bb39, otherwise: bb38];
    }

    bb38: {
        _154 = core::panicking::AssertKind::Eq;
        _156 = Option::<Arguments<'_>>::None;
        _155 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _154, _150, _151, move _156);
    }

    bb39: {
        _159 = const _;
        _158 = &_159;
        _161 = Option::<i8>::Some(const -5_i8);
        _160 = &_161;
        _157 = (move _158, move _160);
        _162 = (_157.0: &std::option::Option<i8>);
        _163 = (_157.1: &std::option::Option<i8>);
        _165 = <Option<i8> as PartialEq>::eq(_162, _163) -> bb40;
    }

    bb40: {
        _164 = Not(move _165);
        switchInt(move _164) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _166 = core::panicking::AssertKind::Eq;
        _168 = Option::<Arguments<'_>>::None;
        _167 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _166, _162, _163, move _168);
    }

    bb42: {
        _171 = const _;
        _170 = &_171;
        _173 = Option::<i8>::None;
        _172 = &_173;
        _169 = (move _170, move _172);
        _174 = (_169.0: &std::option::Option<i8>);
        _175 = (_169.1: &std::option::Option<i8>);
        _177 = <Option<i8> as PartialEq>::eq(_174, _175) -> bb43;
    }

    bb43: {
        _176 = Not(move _177);
        switchInt(move _176) -> [0: bb45, otherwise: bb44];
    }

    bb44: {
        _178 = core::panicking::AssertKind::Eq;
        _180 = Option::<Arguments<'_>>::None;
        _179 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _178, _174, _175, move _180);
    }

    bb45: {
        _183 = const _;
        _182 = &_183;
        _185 = Option::<i8>::Some(const 16_i8);
        _184 = &_185;
        _181 = (move _182, move _184);
        _186 = (_181.0: &std::option::Option<i8>);
        _187 = (_181.1: &std::option::Option<i8>);
        _189 = <Option<i8> as PartialEq>::eq(_186, _187) -> bb46;
    }

    bb46: {
        _188 = Not(move _189);
        switchInt(move _188) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _190 = core::panicking::AssertKind::Eq;
        _192 = Option::<Arguments<'_>>::None;
        _191 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _190, _186, _187, move _192);
    }

    bb48: {
        _195 = const _;
        _194 = &_195;
        _197 = Option::<i8>::None;
        _196 = &_197;
        _193 = (move _194, move _196);
        _198 = (_193.0: &std::option::Option<i8>);
        _199 = (_193.1: &std::option::Option<i8>);
        _201 = <Option<i8> as PartialEq>::eq(_198, _199) -> bb49;
    }

    bb49: {
        _200 = Not(move _201);
        switchInt(move _200) -> [0: bb51, otherwise: bb50];
    }

    bb50: {
        _202 = core::panicking::AssertKind::Eq;
        _204 = Option::<Arguments<'_>>::None;
        _203 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _202, _198, _199, move _204);
    }

    bb51: {
        _207 = const _;
        _206 = &_207;
        _209 = Option::<i8>::Some(const 1_i8);
        _208 = &_209;
        _205 = (move _206, move _208);
        _210 = (_205.0: &std::option::Option<i8>);
        _211 = (_205.1: &std::option::Option<i8>);
        _213 = <Option<i8> as PartialEq>::eq(_210, _211) -> bb52;
    }

    bb52: {
        _212 = Not(move _213);
        switchInt(move _212) -> [0: bb54, otherwise: bb53];
    }

    bb53: {
        _214 = core::panicking::AssertKind::Eq;
        _216 = Option::<Arguments<'_>>::None;
        _215 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _214, _210, _211, move _216);
    }

    bb54: {
        _219 = const _;
        _218 = &_219;
        _221 = Option::<i8>::None;
        _220 = &_221;
        _217 = (move _218, move _220);
        _222 = (_217.0: &std::option::Option<i8>);
        _223 = (_217.1: &std::option::Option<i8>);
        _225 = <Option<i8> as PartialEq>::eq(_222, _223) -> bb55;
    }

    bb55: {
        _224 = Not(move _225);
        switchInt(move _224) -> [0: bb57, otherwise: bb56];
    }

    bb56: {
        _226 = core::panicking::AssertKind::Eq;
        _228 = Option::<Arguments<'_>>::None;
        _227 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _226, _222, _223, move _228);
    }

    bb57: {
        _231 = const _;
        _230 = &_231;
        _233 = Option::<i8>::Some(const 5_i8);
        _232 = &_233;
        _229 = (move _230, move _232);
        _234 = (_229.0: &std::option::Option<i8>);
        _235 = (_229.1: &std::option::Option<i8>);
        _237 = <Option<i8> as PartialEq>::eq(_234, _235) -> bb58;
    }

    bb58: {
        _236 = Not(move _237);
        switchInt(move _236) -> [0: bb60, otherwise: bb59];
    }

    bb59: {
        _238 = core::panicking::AssertKind::Eq;
        _240 = Option::<Arguments<'_>>::None;
        _239 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _238, _234, _235, move _240);
    }

    bb60: {
        _243 = const _;
        _242 = &_243;
        _245 = Option::<i8>::None;
        _244 = &_245;
        _241 = (move _242, move _244);
        _246 = (_241.0: &std::option::Option<i8>);
        _247 = (_241.1: &std::option::Option<i8>);
        _249 = <Option<i8> as PartialEq>::eq(_246, _247) -> bb61;
    }

    bb61: {
        _248 = Not(move _249);
        switchInt(move _248) -> [0: bb63, otherwise: bb62];
    }

    bb62: {
        _250 = core::panicking::AssertKind::Eq;
        _252 = Option::<Arguments<'_>>::None;
        _251 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _250, _246, _247, move _252);
    }

    bb63: {
        _255 = const _;
        _254 = &_255;
        _257 = Option::<i8>::Some(const i8::MAX);
        _256 = &_257;
        _253 = (move _254, move _256);
        _258 = (_253.0: &std::option::Option<i8>);
        _259 = (_253.1: &std::option::Option<i8>);
        _261 = <Option<i8> as PartialEq>::eq(_258, _259) -> bb64;
    }

    bb64: {
        _260 = Not(move _261);
        switchInt(move _260) -> [0: bb66, otherwise: bb65];
    }

    bb65: {
        _262 = core::panicking::AssertKind::Eq;
        _264 = Option::<Arguments<'_>>::None;
        _263 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _262, _258, _259, move _264);
    }

    bb66: {
        _267 = const _;
        _266 = &_267;
        _269 = Option::<i8>::None;
        _268 = &_269;
        _265 = (move _266, move _268);
        _270 = (_265.0: &std::option::Option<i8>);
        _271 = (_265.1: &std::option::Option<i8>);
        _273 = <Option<i8> as PartialEq>::eq(_270, _271) -> bb67;
    }

    bb67: {
        _272 = Not(move _273);
        switchInt(move _272) -> [0: bb69, otherwise: bb68];
    }

    bb68: {
        _274 = core::panicking::AssertKind::Eq;
        _276 = Option::<Arguments<'_>>::None;
        _275 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _274, _270, _271, move _276);
    }

    bb69: {
        _279 = const _;
        _278 = &_279;
        _281 = Option::<i8>::None;
        _280 = &_281;
        _277 = (move _278, move _280);
        _282 = (_277.0: &std::option::Option<i8>);
        _283 = (_277.1: &std::option::Option<i8>);
        _285 = <Option<i8> as PartialEq>::eq(_282, _283) -> bb70;
    }

    bb70: {
        _284 = Not(move _285);
        switchInt(move _284) -> [0: bb72, otherwise: bb71];
    }

    bb71: {
        _286 = core::panicking::AssertKind::Eq;
        _288 = Option::<Arguments<'_>>::None;
        _287 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _286, _282, _283, move _288);
    }

    bb72: {
        _291 = const _;
        _290 = &_291;
        _293 = Option::<i8>::Some(const 1_i8);
        _292 = &_293;
        _289 = (move _290, move _292);
        _294 = (_289.0: &std::option::Option<i8>);
        _295 = (_289.1: &std::option::Option<i8>);
        _297 = <Option<i8> as PartialEq>::eq(_294, _295) -> bb73;
    }

    bb73: {
        _296 = Not(move _297);
        switchInt(move _296) -> [0: bb75, otherwise: bb74];
    }

    bb74: {
        _298 = core::panicking::AssertKind::Eq;
        _300 = Option::<Arguments<'_>>::None;
        _299 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _298, _294, _295, move _300);
    }

    bb75: {
        _303 = const _;
        _302 = &_303;
        _305 = Option::<i8>::None;
        _304 = &_305;
        _301 = (move _302, move _304);
        _306 = (_301.0: &std::option::Option<i8>);
        _307 = (_301.1: &std::option::Option<i8>);
        _309 = <Option<i8> as PartialEq>::eq(_306, _307) -> bb76;
    }

    bb76: {
        _308 = Not(move _309);
        switchInt(move _308) -> [0: bb78, otherwise: bb77];
    }

    bb77: {
        _310 = core::panicking::AssertKind::Eq;
        _312 = Option::<Arguments<'_>>::None;
        _311 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _310, _306, _307, move _312);
    }

    bb78: {
        _315 = const _;
        _314 = &_315;
        _317 = Option::<i8>::None;
        _316 = &_317;
        _313 = (move _314, move _316);
        _318 = (_313.0: &std::option::Option<i8>);
        _319 = (_313.1: &std::option::Option<i8>);
        _321 = <Option<i8> as PartialEq>::eq(_318, _319) -> bb79;
    }

    bb79: {
        _320 = Not(move _321);
        switchInt(move _320) -> [0: bb81, otherwise: bb80];
    }

    bb80: {
        _322 = core::panicking::AssertKind::Eq;
        _324 = Option::<Arguments<'_>>::None;
        _323 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _322, _318, _319, move _324);
    }

    bb81: {
        return;
    }
}

const C1: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_add(const 5_i8, const 2_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

const C2: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_add(const i8::MAX, const 2_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

const C3: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_sub(const 5_i8, const 2_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

const C4: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_sub(const -127_i8, const 2_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

const C5: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_mul(const 1_i8, const 3_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

const C6: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_mul(const 5_i8, const 122_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

const C7: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_mul(const -127_i8, const -99_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

const C8: Option<i8> = {
    let mut _0: std::option::Option<i8>;
    let mut _1: i8;
    let mut _2: (i8, bool);

    bb0: {
        StorageLive(_1);
        _2 = CheckedAdd(const _, const 1_i8);
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_i8) -> bb1;
    }

    bb1: {
        _1 = move (_2.0: i8);
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_div(move _1, const -1_i8) -> bb2;
    }

    bb2: {
        StorageDead(_1);
        return;
    }
}

const C9: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_div(const _, const -1_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

const C10: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_div(const 1_i8, const 0_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

const C11: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_rem(const 5_i8, const 2_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

const C12: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_rem(const 5_i8, const 0_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

const C13: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_rem(const _, const -1_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

const C14: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_neg(const 5_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

const C15: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_neg(const _) -> bb1;
    }

    bb1: {
        return;
    }
}

const C16: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_shl(const 1_i8, const 4_u32) -> bb1;
    }

    bb1: {
        return;
    }
}

const C17: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_shl(const 1_i8, const 129_u32) -> bb1;
    }

    bb1: {
        return;
    }
}

const C18: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_shr(const 16_i8, const 4_u32) -> bb1;
    }

    bb1: {
        return;
    }
}

const C19: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_shr(const 16_i8, const 128_u32) -> bb1;
    }

    bb1: {
        return;
    }
}

const C20: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_abs(const -5_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

const C21: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_abs(const _) -> bb1;
    }

    bb1: {
        return;
    }
}

const C22: Option<i8> = {
    let mut _0: std::option::Option<i8>;
    let mut _1: i8;
    let mut _2: (i8, bool);

    bb0: {
        StorageLive(_1);
        _2 = CheckedAdd(const _, const 1_i8);
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_i8) -> bb1;
    }

    bb1: {
        _1 = move (_2.0: i8);
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_div_euclid(move _1, const -1_i8) -> bb2;
    }

    bb2: {
        StorageDead(_1);
        return;
    }
}

const C23: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_div_euclid(const _, const -1_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

const C24: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_div_euclid(const 1_i8, const 0_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

const C25: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_rem_euclid(const 5_i8, const 2_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

const C26: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_rem_euclid(const 5_i8, const 0_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

const C27: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_rem_euclid(const _, const -1_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

fn checked_i128() -> () {
    let mut _0: ();
    let mut _1: (&std::option::Option<i128>, &std::option::Option<i128>);
    let mut _2: &std::option::Option<i128>;
    let _3: std::option::Option<i128>;
    let mut _4: &std::option::Option<i128>;
    let _5: std::option::Option<i128>;
    let _6: &std::option::Option<i128>;
    let _7: &std::option::Option<i128>;
    let mut _8: bool;
    let mut _9: bool;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: (&std::option::Option<i128>, &std::option::Option<i128>);
    let mut _14: &std::option::Option<i128>;
    let _15: std::option::Option<i128>;
    let mut _16: &std::option::Option<i128>;
    let _17: std::option::Option<i128>;
    let _18: &std::option::Option<i128>;
    let _19: &std::option::Option<i128>;
    let mut _20: bool;
    let mut _21: bool;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }
    scope 3 {
        debug left_val => _18;
        debug right_val => _19;
        let _22: core::panicking::AssertKind;
        scope 4 {
            debug kind => _22;
        }
    }

    bb0: {
        _3 = const _;
        _2 = &_3;
        _5 = Option::<i128>::None;
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &std::option::Option<i128>);
        _7 = (_1.1: &std::option::Option<i128>);
        _9 = <Option<i128> as PartialEq>::eq(_6, _7) -> bb1;
    }

    bb1: {
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<Option<i128>, Option<i128>>(move _10, _6, _7, move _12);
    }

    bb3: {
        _15 = const _;
        _14 = &_15;
        _17 = Option::<i128>::None;
        _16 = &_17;
        _13 = (move _14, move _16);
        _18 = (_13.0: &std::option::Option<i128>);
        _19 = (_13.1: &std::option::Option<i128>);
        _21 = <Option<i128> as PartialEq>::eq(_18, _19) -> bb4;
    }

    bb4: {
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<Option<i128>, Option<i128>>(move _22, _18, _19, move _24);
    }

    bb6: {
        return;
    }
}

const CHK_ADD_I128: Option<i128> = {
    let mut _0: std::option::Option<i128>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i128>::checked_add(const _, const 1_i128) -> bb1;
    }

    bb1: {
        return;
    }
}

const CHK_MUL_I128: Option<i128> = {
    let mut _0: std::option::Option<i128>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i128>::checked_mul(const _, const -1_i128) -> bb1;
    }

    bb1: {
        return;
    }
}

fn saturating_and_wrapping() -> () {
    let mut _0: ();
    let mut _1: (&i8, &i8);
    let mut _2: &i8;
    let _3: i8;
    let mut _4: &i8;
    let _5: i8;
    let _6: &i8;
    let _7: &i8;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: i8;
    let mut _11: i8;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&i8, &i8);
    let mut _16: &i8;
    let _17: i8;
    let mut _18: &i8;
    let _19: i8;
    let _20: &i8;
    let _21: &i8;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: i8;
    let mut _25: i8;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: (&i8, &i8);
    let mut _30: &i8;
    let _31: i8;
    let mut _32: &i8;
    let _33: i8;
    let _34: &i8;
    let _35: &i8;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: i8;
    let mut _39: i8;
    let _41: !;
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _43: (&i8, &i8);
    let mut _44: &i8;
    let _45: i8;
    let mut _46: &i8;
    let _47: i8;
    let _48: &i8;
    let _49: &i8;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: i8;
    let mut _53: i8;
    let _55: !;
    let mut _56: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _57: (&i8, &i8);
    let mut _58: &i8;
    let _59: i8;
    let mut _60: &i8;
    let _61: i8;
    let _62: &i8;
    let _63: &i8;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: i8;
    let mut _67: i8;
    let _69: !;
    let mut _70: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _71: (&i8, &i8);
    let mut _72: &i8;
    let _73: i8;
    let mut _74: &i8;
    let _75: i8;
    let _76: &i8;
    let _77: &i8;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: i8;
    let mut _81: i8;
    let _83: !;
    let mut _84: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _85: (&i8, &i8);
    let mut _86: &i8;
    let _87: i8;
    let mut _88: &i8;
    let _89: i8;
    let _90: &i8;
    let _91: &i8;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: i8;
    let mut _95: i8;
    let _97: !;
    let mut _98: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _99: (&i8, &i8);
    let mut _100: &i8;
    let _101: i8;
    let mut _102: &i8;
    let _103: i8;
    let _104: &i8;
    let _105: &i8;
    let mut _106: bool;
    let mut _107: bool;
    let mut _108: i8;
    let mut _109: i8;
    let _111: !;
    let mut _112: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _113: (&i8, &i8);
    let mut _114: &i8;
    let _115: i8;
    let mut _116: &i8;
    let _117: i8;
    let _118: &i8;
    let _119: &i8;
    let mut _120: bool;
    let mut _121: bool;
    let mut _122: i8;
    let mut _123: i8;
    let _125: !;
    let mut _126: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _127: (&i8, &i8);
    let mut _128: &i8;
    let _129: i8;
    let mut _130: &i8;
    let _131: i8;
    let _132: &i8;
    let _133: &i8;
    let mut _134: bool;
    let mut _135: bool;
    let mut _136: i8;
    let mut _137: i8;
    let _139: !;
    let mut _140: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _141: (&i8, &i8);
    let mut _142: &i8;
    let _143: i8;
    let mut _144: &i8;
    let _145: i8;
    let _146: &i8;
    let _147: &i8;
    let mut _148: bool;
    let mut _149: bool;
    let mut _150: i8;
    let mut _151: i8;
    let _153: !;
    let mut _154: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _155: (&i8, &i8);
    let mut _156: &i8;
    let _157: i8;
    let mut _158: &i8;
    let _159: i8;
    let _160: &i8;
    let _161: &i8;
    let mut _162: bool;
    let mut _163: bool;
    let mut _164: i8;
    let mut _165: i8;
    let _167: !;
    let mut _168: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _169: (&i8, &i8);
    let mut _170: &i8;
    let _171: i8;
    let mut _172: &i8;
    let _173: i8;
    let _174: &i8;
    let _175: &i8;
    let mut _176: bool;
    let mut _177: bool;
    let mut _178: i8;
    let mut _179: i8;
    let _181: !;
    let mut _182: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _183: (&i8, &i8);
    let mut _184: &i8;
    let _185: i8;
    let mut _186: &i8;
    let _187: i8;
    let _188: &i8;
    let _189: &i8;
    let mut _190: bool;
    let mut _191: bool;
    let mut _192: i8;
    let mut _193: i8;
    let _195: !;
    let mut _196: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _197: (&i8, &i8);
    let mut _198: &i8;
    let _199: i8;
    let mut _200: &i8;
    let _201: i8;
    let _202: &i8;
    let _203: &i8;
    let mut _204: bool;
    let mut _205: bool;
    let mut _206: i8;
    let mut _207: i8;
    let _209: !;
    let mut _210: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _211: (&i8, &i8);
    let mut _212: &i8;
    let _213: i8;
    let mut _214: &i8;
    let _215: i8;
    let _216: &i8;
    let _217: &i8;
    let mut _218: bool;
    let mut _219: bool;
    let mut _220: i8;
    let mut _221: i8;
    let _223: !;
    let mut _224: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _225: (&i8, &i8);
    let mut _226: &i8;
    let _227: i8;
    let mut _228: &i8;
    let _229: i8;
    let _230: &i8;
    let _231: &i8;
    let mut _232: bool;
    let mut _233: bool;
    let mut _234: i8;
    let mut _235: i8;
    let _237: !;
    let mut _238: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _239: (&i8, &i8);
    let mut _240: &i8;
    let _241: i8;
    let mut _242: &i8;
    let _243: i8;
    let _244: &i8;
    let _245: &i8;
    let mut _246: bool;
    let mut _247: bool;
    let mut _248: i8;
    let mut _249: i8;
    let _251: !;
    let mut _252: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _253: (&i8, &i8);
    let mut _254: &i8;
    let _255: i8;
    let mut _256: &i8;
    let _257: i8;
    let _258: &i8;
    let _259: &i8;
    let mut _260: bool;
    let mut _261: bool;
    let mut _262: i8;
    let mut _263: i8;
    let _265: !;
    let mut _266: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _267: (&i8, &i8);
    let mut _268: &i8;
    let _269: i8;
    let mut _270: &i8;
    let _271: i8;
    let _272: &i8;
    let _273: &i8;
    let mut _274: bool;
    let mut _275: bool;
    let mut _276: i8;
    let mut _277: i8;
    let _279: !;
    let mut _280: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _281: (&i8, &i8);
    let mut _282: &i8;
    let _283: i8;
    let mut _284: &i8;
    let _285: i8;
    let _286: &i8;
    let _287: &i8;
    let mut _288: bool;
    let mut _289: bool;
    let mut _290: i8;
    let mut _291: i8;
    let _293: !;
    let mut _294: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _295: (&i8, &i8);
    let mut _296: &i8;
    let _297: i8;
    let mut _298: &i8;
    let _299: i8;
    let _300: &i8;
    let _301: &i8;
    let mut _302: bool;
    let mut _303: bool;
    let mut _304: i8;
    let mut _305: i8;
    let _307: !;
    let mut _308: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _309: (&i8, &i8);
    let mut _310: &i8;
    let _311: i8;
    let mut _312: &i8;
    let _313: i8;
    let _314: &i8;
    let _315: &i8;
    let mut _316: bool;
    let mut _317: bool;
    let mut _318: i8;
    let mut _319: i8;
    let _321: !;
    let mut _322: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _323: (&i8, &i8);
    let mut _324: &i8;
    let _325: i8;
    let mut _326: &i8;
    let _327: i8;
    let _328: &i8;
    let _329: &i8;
    let mut _330: bool;
    let mut _331: bool;
    let mut _332: i8;
    let mut _333: i8;
    let _335: !;
    let mut _336: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _337: (&i8, &i8);
    let mut _338: &i8;
    let _339: i8;
    let mut _340: &i8;
    let _341: i8;
    let _342: &i8;
    let _343: &i8;
    let mut _344: bool;
    let mut _345: bool;
    let mut _346: i8;
    let mut _347: i8;
    let _349: !;
    let mut _350: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }
    scope 3 {
        debug left_val => _20;
        debug right_val => _21;
        let _26: core::panicking::AssertKind;
        scope 4 {
            debug kind => _26;
        }
    }
    scope 5 {
        debug left_val => _34;
        debug right_val => _35;
        let _40: core::panicking::AssertKind;
        scope 6 {
            debug kind => _40;
        }
    }
    scope 7 {
        debug left_val => _48;
        debug right_val => _49;
        let _54: core::panicking::AssertKind;
        scope 8 {
            debug kind => _54;
        }
    }
    scope 9 {
        debug left_val => _62;
        debug right_val => _63;
        let _68: core::panicking::AssertKind;
        scope 10 {
            debug kind => _68;
        }
    }
    scope 11 {
        debug left_val => _76;
        debug right_val => _77;
        let _82: core::panicking::AssertKind;
        scope 12 {
            debug kind => _82;
        }
    }
    scope 13 {
        debug left_val => _90;
        debug right_val => _91;
        let _96: core::panicking::AssertKind;
        scope 14 {
            debug kind => _96;
        }
    }
    scope 15 {
        debug left_val => _104;
        debug right_val => _105;
        let _110: core::panicking::AssertKind;
        scope 16 {
            debug kind => _110;
        }
    }
    scope 17 {
        debug left_val => _118;
        debug right_val => _119;
        let _124: core::panicking::AssertKind;
        scope 18 {
            debug kind => _124;
        }
    }
    scope 19 {
        debug left_val => _132;
        debug right_val => _133;
        let _138: core::panicking::AssertKind;
        scope 20 {
            debug kind => _138;
        }
    }
    scope 21 {
        debug left_val => _146;
        debug right_val => _147;
        let _152: core::panicking::AssertKind;
        scope 22 {
            debug kind => _152;
        }
    }
    scope 23 {
        debug left_val => _160;
        debug right_val => _161;
        let _166: core::panicking::AssertKind;
        scope 24 {
            debug kind => _166;
        }
    }
    scope 25 {
        debug left_val => _174;
        debug right_val => _175;
        let _180: core::panicking::AssertKind;
        scope 26 {
            debug kind => _180;
        }
    }
    scope 27 {
        debug left_val => _188;
        debug right_val => _189;
        let _194: core::panicking::AssertKind;
        scope 28 {
            debug kind => _194;
        }
    }
    scope 29 {
        debug left_val => _202;
        debug right_val => _203;
        let _208: core::panicking::AssertKind;
        scope 30 {
            debug kind => _208;
        }
    }
    scope 31 {
        debug left_val => _216;
        debug right_val => _217;
        let _222: core::panicking::AssertKind;
        scope 32 {
            debug kind => _222;
        }
    }
    scope 33 {
        debug left_val => _230;
        debug right_val => _231;
        let _236: core::panicking::AssertKind;
        scope 34 {
            debug kind => _236;
        }
    }
    scope 35 {
        debug left_val => _244;
        debug right_val => _245;
        let _250: core::panicking::AssertKind;
        scope 36 {
            debug kind => _250;
        }
    }
    scope 37 {
        debug left_val => _258;
        debug right_val => _259;
        let _264: core::panicking::AssertKind;
        scope 38 {
            debug kind => _264;
        }
    }
    scope 39 {
        debug left_val => _272;
        debug right_val => _273;
        let _278: core::panicking::AssertKind;
        scope 40 {
            debug kind => _278;
        }
    }
    scope 41 {
        debug left_val => _286;
        debug right_val => _287;
        let _292: core::panicking::AssertKind;
        scope 42 {
            debug kind => _292;
        }
    }
    scope 43 {
        debug left_val => _300;
        debug right_val => _301;
        let _306: core::panicking::AssertKind;
        scope 44 {
            debug kind => _306;
        }
    }
    scope 45 {
        debug left_val => _314;
        debug right_val => _315;
        let _320: core::panicking::AssertKind;
        scope 46 {
            debug kind => _320;
        }
    }
    scope 47 {
        debug left_val => _328;
        debug right_val => _329;
        let _334: core::panicking::AssertKind;
        scope 48 {
            debug kind => _334;
        }
    }
    scope 49 {
        debug left_val => _342;
        debug right_val => _343;
        let _348: core::panicking::AssertKind;
        scope 50 {
            debug kind => _348;
        }
    }

    bb0: {
        _3 = const _;
        _2 = &_3;
        _5 = const 101_i8;
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &i8);
        _7 = (_1.1: &i8);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<i8, i8>(move _12, _6, _7, move _14);
    }

    bb2: {
        _17 = const _;
        _16 = &_17;
        _19 = const _;
        _18 = &_19;
        _15 = (move _16, move _18);
        _20 = (_15.0: &i8);
        _21 = (_15.1: &i8);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<i8, i8>(move _26, _20, _21, move _28);
    }

    bb4: {
        _31 = const _;
        _30 = &_31;
        _33 = const _;
        _32 = &_33;
        _29 = (move _30, move _32);
        _34 = (_29.0: &i8);
        _35 = (_29.1: &i8);
        _38 = (*_34);
        _39 = (*_35);
        _37 = Eq(move _38, move _39);
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _40 = core::panicking::AssertKind::Eq;
        _42 = Option::<Arguments<'_>>::None;
        _41 = core::panicking::assert_failed::<i8, i8>(move _40, _34, _35, move _42);
    }

    bb6: {
        _45 = const _;
        _44 = &_45;
        _47 = const -27_i8;
        _46 = &_47;
        _43 = (move _44, move _46);
        _48 = (_43.0: &i8);
        _49 = (_43.1: &i8);
        _52 = (*_48);
        _53 = (*_49);
        _51 = Eq(move _52, move _53);
        _50 = Not(move _51);
        switchInt(move _50) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _54 = core::panicking::AssertKind::Eq;
        _56 = Option::<Arguments<'_>>::None;
        _55 = core::panicking::assert_failed::<i8, i8>(move _54, _48, _49, move _56);
    }

    bb8: {
        _59 = const _;
        _58 = &_59;
        _61 = const _;
        _60 = &_61;
        _57 = (move _58, move _60);
        _62 = (_57.0: &i8);
        _63 = (_57.1: &i8);
        _66 = (*_62);
        _67 = (*_63);
        _65 = Eq(move _66, move _67);
        _64 = Not(move _65);
        switchInt(move _64) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _68 = core::panicking::AssertKind::Eq;
        _70 = Option::<Arguments<'_>>::None;
        _69 = core::panicking::assert_failed::<i8, i8>(move _68, _62, _63, move _70);
    }

    bb10: {
        _73 = const _;
        _72 = &_73;
        _75 = const _;
        _74 = &_75;
        _71 = (move _72, move _74);
        _76 = (_71.0: &i8);
        _77 = (_71.1: &i8);
        _80 = (*_76);
        _81 = (*_77);
        _79 = Eq(move _80, move _81);
        _78 = Not(move _79);
        switchInt(move _78) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _82 = core::panicking::AssertKind::Eq;
        _84 = Option::<Arguments<'_>>::None;
        _83 = core::panicking::assert_failed::<i8, i8>(move _82, _76, _77, move _84);
    }

    bb12: {
        _87 = const _;
        _86 = &_87;
        _89 = const 120_i8;
        _88 = &_89;
        _85 = (move _86, move _88);
        _90 = (_85.0: &i8);
        _91 = (_85.1: &i8);
        _94 = (*_90);
        _95 = (*_91);
        _93 = Eq(move _94, move _95);
        _92 = Not(move _93);
        switchInt(move _92) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _96 = core::panicking::AssertKind::Eq;
        _98 = Option::<Arguments<'_>>::None;
        _97 = core::panicking::assert_failed::<i8, i8>(move _96, _90, _91, move _98);
    }

    bb14: {
        _101 = const _;
        _100 = &_101;
        _103 = const _;
        _102 = &_103;
        _99 = (move _100, move _102);
        _104 = (_99.0: &i8);
        _105 = (_99.1: &i8);
        _108 = (*_104);
        _109 = (*_105);
        _107 = Eq(move _108, move _109);
        _106 = Not(move _107);
        switchInt(move _106) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _110 = core::panicking::AssertKind::Eq;
        _112 = Option::<Arguments<'_>>::None;
        _111 = core::panicking::assert_failed::<i8, i8>(move _110, _104, _105, move _112);
    }

    bb16: {
        _115 = const _;
        _114 = &_115;
        _117 = const _;
        _116 = &_117;
        _113 = (move _114, move _116);
        _118 = (_113.0: &i8);
        _119 = (_113.1: &i8);
        _122 = (*_118);
        _123 = (*_119);
        _121 = Eq(move _122, move _123);
        _120 = Not(move _121);
        switchInt(move _120) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _124 = core::panicking::AssertKind::Eq;
        _126 = Option::<Arguments<'_>>::None;
        _125 = core::panicking::assert_failed::<i8, i8>(move _124, _118, _119, move _126);
    }

    bb18: {
        _129 = const _;
        _128 = &_129;
        _131 = const -100_i8;
        _130 = &_131;
        _127 = (move _128, move _130);
        _132 = (_127.0: &i8);
        _133 = (_127.1: &i8);
        _136 = (*_132);
        _137 = (*_133);
        _135 = Eq(move _136, move _137);
        _134 = Not(move _135);
        switchInt(move _134) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _138 = core::panicking::AssertKind::Eq;
        _140 = Option::<Arguments<'_>>::None;
        _139 = core::panicking::assert_failed::<i8, i8>(move _138, _132, _133, move _140);
    }

    bb20: {
        _143 = const _;
        _142 = &_143;
        _145 = const 100_i8;
        _144 = &_145;
        _141 = (move _142, move _144);
        _146 = (_141.0: &i8);
        _147 = (_141.1: &i8);
        _150 = (*_146);
        _151 = (*_147);
        _149 = Eq(move _150, move _151);
        _148 = Not(move _149);
        switchInt(move _148) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _152 = core::panicking::AssertKind::Eq;
        _154 = Option::<Arguments<'_>>::None;
        _153 = core::panicking::assert_failed::<i8, i8>(move _152, _146, _147, move _154);
    }

    bb22: {
        _157 = const _;
        _156 = &_157;
        _159 = const _;
        _158 = &_159;
        _155 = (move _156, move _158);
        _160 = (_155.0: &i8);
        _161 = (_155.1: &i8);
        _164 = (*_160);
        _165 = (*_161);
        _163 = Eq(move _164, move _165);
        _162 = Not(move _163);
        switchInt(move _162) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _166 = core::panicking::AssertKind::Eq;
        _168 = Option::<Arguments<'_>>::None;
        _167 = core::panicking::assert_failed::<i8, i8>(move _166, _160, _161, move _168);
    }

    bb24: {
        _171 = const _;
        _170 = &_171;
        _173 = Add(const _, const 1_i8);
        _172 = &_173;
        _169 = (move _170, move _172);
        _174 = (_169.0: &i8);
        _175 = (_169.1: &i8);
        _178 = (*_174);
        _179 = (*_175);
        _177 = Eq(move _178, move _179);
        _176 = Not(move _177);
        switchInt(move _176) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _180 = core::panicking::AssertKind::Eq;
        _182 = Option::<Arguments<'_>>::None;
        _181 = core::panicking::assert_failed::<i8, i8>(move _180, _174, _175, move _182);
    }

    bb26: {
        _185 = const _;
        _184 = &_185;
        _187 = const 100_i8;
        _186 = &_187;
        _183 = (move _184, move _186);
        _188 = (_183.0: &i8);
        _189 = (_183.1: &i8);
        _192 = (*_188);
        _193 = (*_189);
        _191 = Eq(move _192, move _193);
        _190 = Not(move _191);
        switchInt(move _190) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _194 = core::panicking::AssertKind::Eq;
        _196 = Option::<Arguments<'_>>::None;
        _195 = core::panicking::assert_failed::<i8, i8>(move _194, _188, _189, move _196);
    }

    bb28: {
        _199 = const _;
        _198 = &_199;
        _201 = const 100_i8;
        _200 = &_201;
        _197 = (move _198, move _200);
        _202 = (_197.0: &i8);
        _203 = (_197.1: &i8);
        _206 = (*_202);
        _207 = (*_203);
        _205 = Eq(move _206, move _207);
        _204 = Not(move _205);
        switchInt(move _204) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _208 = core::panicking::AssertKind::Eq;
        _210 = Option::<Arguments<'_>>::None;
        _209 = core::panicking::assert_failed::<i8, i8>(move _208, _202, _203, move _210);
    }

    bb30: {
        _213 = const _;
        _212 = &_213;
        _215 = const _;
        _214 = &_215;
        _211 = (move _212, move _214);
        _216 = (_211.0: &i8);
        _217 = (_211.1: &i8);
        _220 = (*_216);
        _221 = (*_217);
        _219 = Eq(move _220, move _221);
        _218 = Not(move _219);
        switchInt(move _218) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _222 = core::panicking::AssertKind::Eq;
        _224 = Option::<Arguments<'_>>::None;
        _223 = core::panicking::assert_failed::<i8, i8>(move _222, _216, _217, move _224);
    }

    bb32: {
        _227 = const _;
        _226 = &_227;
        _229 = const _;
        _228 = &_229;
        _225 = (move _226, move _228);
        _230 = (_225.0: &i8);
        _231 = (_225.1: &i8);
        _234 = (*_230);
        _235 = (*_231);
        _233 = Eq(move _234, move _235);
        _232 = Not(move _233);
        switchInt(move _232) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        _236 = core::panicking::AssertKind::Eq;
        _238 = Option::<Arguments<'_>>::None;
        _237 = core::panicking::assert_failed::<i8, i8>(move _236, _230, _231, move _238);
    }

    bb34: {
        _241 = const _;
        _240 = &_241;
        _243 = const 10_i8;
        _242 = &_243;
        _239 = (move _240, move _242);
        _244 = (_239.0: &i8);
        _245 = (_239.1: &i8);
        _248 = (*_244);
        _249 = (*_245);
        _247 = Eq(move _248, move _249);
        _246 = Not(move _247);
        switchInt(move _246) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _250 = core::panicking::AssertKind::Eq;
        _252 = Option::<Arguments<'_>>::None;
        _251 = core::panicking::assert_failed::<i8, i8>(move _250, _244, _245, move _252);
    }

    bb36: {
        _255 = const _;
        _254 = &_255;
        _257 = const i8::MIN;
        _256 = &_257;
        _253 = (move _254, move _256);
        _258 = (_253.0: &i8);
        _259 = (_253.1: &i8);
        _262 = (*_258);
        _263 = (*_259);
        _261 = Eq(move _262, move _263);
        _260 = Not(move _261);
        switchInt(move _260) -> [0: bb38, otherwise: bb37];
    }

    bb37: {
        _264 = core::panicking::AssertKind::Eq;
        _266 = Option::<Arguments<'_>>::None;
        _265 = core::panicking::assert_failed::<i8, i8>(move _264, _258, _259, move _266);
    }

    bb38: {
        _269 = const _;
        _268 = &_269;
        _271 = const 0_i8;
        _270 = &_271;
        _267 = (move _268, move _270);
        _272 = (_267.0: &i8);
        _273 = (_267.1: &i8);
        _276 = (*_272);
        _277 = (*_273);
        _275 = Eq(move _276, move _277);
        _274 = Not(move _275);
        switchInt(move _274) -> [0: bb40, otherwise: bb39];
    }

    bb39: {
        _278 = core::panicking::AssertKind::Eq;
        _280 = Option::<Arguments<'_>>::None;
        _279 = core::panicking::assert_failed::<i8, i8>(move _278, _272, _273, move _280);
    }

    bb40: {
        _283 = const _;
        _282 = &_283;
        _285 = const 0_i8;
        _284 = &_285;
        _281 = (move _282, move _284);
        _286 = (_281.0: &i8);
        _287 = (_281.1: &i8);
        _290 = (*_286);
        _291 = (*_287);
        _289 = Eq(move _290, move _291);
        _288 = Not(move _289);
        switchInt(move _288) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _292 = core::panicking::AssertKind::Eq;
        _294 = Option::<Arguments<'_>>::None;
        _293 = core::panicking::assert_failed::<i8, i8>(move _292, _286, _287, move _294);
    }

    bb42: {
        _297 = const _;
        _296 = &_297;
        _299 = const 10_i8;
        _298 = &_299;
        _295 = (move _296, move _298);
        _300 = (_295.0: &i8);
        _301 = (_295.1: &i8);
        _304 = (*_300);
        _305 = (*_301);
        _303 = Eq(move _304, move _305);
        _302 = Not(move _303);
        switchInt(move _302) -> [0: bb44, otherwise: bb43];
    }

    bb43: {
        _306 = core::panicking::AssertKind::Eq;
        _308 = Option::<Arguments<'_>>::None;
        _307 = core::panicking::assert_failed::<i8, i8>(move _306, _300, _301, move _308);
    }

    bb44: {
        _311 = const _;
        _310 = &_311;
        _313 = const i8::MIN;
        _312 = &_313;
        _309 = (move _310, move _312);
        _314 = (_309.0: &i8);
        _315 = (_309.1: &i8);
        _318 = (*_314);
        _319 = (*_315);
        _317 = Eq(move _318, move _319);
        _316 = Not(move _317);
        switchInt(move _316) -> [0: bb46, otherwise: bb45];
    }

    bb45: {
        _320 = core::panicking::AssertKind::Eq;
        _322 = Option::<Arguments<'_>>::None;
        _321 = core::panicking::assert_failed::<i8, i8>(move _320, _314, _315, move _322);
    }

    bb46: {
        _325 = const _;
        _324 = &_325;
        _327 = const 0_i8;
        _326 = &_327;
        _323 = (move _324, move _326);
        _328 = (_323.0: &i8);
        _329 = (_323.1: &i8);
        _332 = (*_328);
        _333 = (*_329);
        _331 = Eq(move _332, move _333);
        _330 = Not(move _331);
        switchInt(move _330) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _334 = core::panicking::AssertKind::Eq;
        _336 = Option::<Arguments<'_>>::None;
        _335 = core::panicking::assert_failed::<i8, i8>(move _334, _328, _329, move _336);
    }

    bb48: {
        _339 = const _;
        _338 = &_339;
        _341 = const 0_i8;
        _340 = &_341;
        _337 = (move _338, move _340);
        _342 = (_337.0: &i8);
        _343 = (_337.1: &i8);
        _346 = (*_342);
        _347 = (*_343);
        _345 = Eq(move _346, move _347);
        _344 = Not(move _345);
        switchInt(move _344) -> [0: bb50, otherwise: bb49];
    }

    bb49: {
        _348 = core::panicking::AssertKind::Eq;
        _350 = Option::<Arguments<'_>>::None;
        _349 = core::panicking::assert_failed::<i8, i8>(move _348, _342, _343, move _350);
    }

    bb50: {
        return;
    }
}

const C28: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::saturating_add(const 100_i8, const 1_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

const C29: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::saturating_add(const _, const 100_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

const C30: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::saturating_add(const _, const -1_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

const C31: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::saturating_sub(const 100_i8, const i8::MAX) -> bb1;
    }

    bb1: {
        return;
    }
}

const C32: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::saturating_sub(const _, const 100_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

const C33: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::saturating_sub(const _, const -1_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

const C34: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::saturating_mul(const 10_i8, const 12_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

const C35: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::saturating_mul(const _, const 10_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

const C36: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::saturating_mul(const _, const 10_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

const C37: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::saturating_neg(const 100_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

const C38: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::saturating_neg(const -100_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

const C39: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::saturating_neg(const _) -> bb1;
    }

    bb1: {
        return;
    }
}

const C40: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::saturating_neg(const _) -> bb1;
    }

    bb1: {
        return;
    }
}

const C57: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::saturating_abs(const 100_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

const C58: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::saturating_abs(const -100_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

const C59: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::saturating_abs(const _) -> bb1;
    }

    bb1: {
        return;
    }
}

const C60: i8 = {
    let mut _0: i8;
    let mut _1: i8;
    let mut _2: (i8, bool);

    bb0: {
        StorageLive(_1);
        _2 = CheckedAdd(const _, const 1_i8);
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_i8) -> bb1;
    }

    bb1: {
        _1 = move (_2.0: i8);
        ConstEvalCounter;
        _0 = core::num::<impl i8>::saturating_abs(move _1) -> bb2;
    }

    bb2: {
        StorageDead(_1);
        return;
    }
}

const C41: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::wrapping_div(const 100_i8, const 10_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

const C42: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::wrapping_div(const i8::MIN, const -1_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

const C43: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::wrapping_rem(const 100_i8, const 10_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

const C44: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::wrapping_rem(const i8::MIN, const -1_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

const C45: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::wrapping_div_euclid(const 100_i8, const 10_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

const C46: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::wrapping_div_euclid(const i8::MIN, const -1_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

const C47: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::wrapping_rem_euclid(const 100_i8, const 10_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

const C48: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::wrapping_rem_euclid(const i8::MIN, const -1_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

fn saturating_and_wrapping_i128() -> () {
    let mut _0: ();
    let mut _1: (&i128, &i128);
    let mut _2: &i128;
    let _3: i128;
    let mut _4: &i128;
    let _5: i128;
    let _6: &i128;
    let _7: &i128;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: i128;
    let mut _11: i128;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&i128, &i128);
    let mut _16: &i128;
    let _17: i128;
    let mut _18: &i128;
    let _19: i128;
    let _20: &i128;
    let _21: &i128;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: i128;
    let mut _25: i128;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: (&i128, &i128);
    let mut _30: &i128;
    let _31: i128;
    let mut _32: &i128;
    let _33: i128;
    let _34: &i128;
    let _35: &i128;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: i128;
    let mut _39: i128;
    let _41: !;
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _43: (&i128, &i128);
    let mut _44: &i128;
    let _45: i128;
    let mut _46: &i128;
    let _47: i128;
    let _48: &i128;
    let _49: &i128;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: i128;
    let mut _53: i128;
    let _55: !;
    let mut _56: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }
    scope 3 {
        debug left_val => _20;
        debug right_val => _21;
        let _26: core::panicking::AssertKind;
        scope 4 {
            debug kind => _26;
        }
    }
    scope 5 {
        debug left_val => _34;
        debug right_val => _35;
        let _40: core::panicking::AssertKind;
        scope 6 {
            debug kind => _40;
        }
    }
    scope 7 {
        debug left_val => _48;
        debug right_val => _49;
        let _54: core::panicking::AssertKind;
        scope 8 {
            debug kind => _54;
        }
    }

    bb0: {
        _3 = const _;
        _2 = &_3;
        _5 = const _;
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &i128);
        _7 = (_1.1: &i128);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<i128, i128>(move _12, _6, _7, move _14);
    }

    bb2: {
        _17 = const _;
        _16 = &_17;
        _19 = const _;
        _18 = &_19;
        _15 = (move _16, move _18);
        _20 = (_15.0: &i128);
        _21 = (_15.1: &i128);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<i128, i128>(move _26, _20, _21, move _28);
    }

    bb4: {
        _31 = const _;
        _30 = &_31;
        _33 = const _;
        _32 = &_33;
        _29 = (move _30, move _32);
        _34 = (_29.0: &i128);
        _35 = (_29.1: &i128);
        _38 = (*_34);
        _39 = (*_35);
        _37 = Eq(move _38, move _39);
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _40 = core::panicking::AssertKind::Eq;
        _42 = Option::<Arguments<'_>>::None;
        _41 = core::panicking::assert_failed::<i128, i128>(move _40, _34, _35, move _42);
    }

    bb6: {
        _45 = const _;
        _44 = &_45;
        _47 = Sub(const _, const 2_i128);
        _46 = &_47;
        _43 = (move _44, move _46);
        _48 = (_43.0: &i128);
        _49 = (_43.1: &i128);
        _52 = (*_48);
        _53 = (*_49);
        _51 = Eq(move _52, move _53);
        _50 = Not(move _51);
        switchInt(move _50) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _54 = core::panicking::AssertKind::Eq;
        _56 = Option::<Arguments<'_>>::None;
        _55 = core::panicking::assert_failed::<i128, i128>(move _54, _48, _49, move _56);
    }

    bb8: {
        return;
    }
}

const SAT_ADD_I128: i128 = {
    let mut _0: i128;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i128>::saturating_add(const _, const 1_i128) -> bb1;
    }

    bb1: {
        return;
    }
}

const SAT_MUL_I128: i128 = {
    let mut _0: i128;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i128>::saturating_mul(const _, const 2_i128) -> bb1;
    }

    bb1: {
        return;
    }
}

const WRP_ADD_I128: i128 = {
    let mut _0: i128;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i128>::wrapping_add(const _, const 1_i128) -> bb1;
    }

    bb1: {
        return;
    }
}

const WRP_MUL_I128: i128 = {
    let mut _0: i128;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i128>::wrapping_mul(const _, const 3_i128) -> bb1;
    }

    bb1: {
        return;
    }
}

fn overflowing() -> () {
    let mut _0: ();
    let mut _1: (&(i8, bool), &(i8, bool));
    let mut _2: &(i8, bool);
    let _3: (i8, bool);
    let mut _4: &(i8, bool);
    let _5: (i8, bool);
    let _6: &(i8, bool);
    let _7: &(i8, bool);
    let mut _8: bool;
    let mut _9: bool;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: (&(i8, bool), &(i8, bool));
    let mut _14: &(i8, bool);
    let _15: (i8, bool);
    let mut _16: &(i8, bool);
    let _17: (i8, bool);
    let _18: &(i8, bool);
    let _19: &(i8, bool);
    let mut _20: bool;
    let mut _21: bool;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: (&(i8, bool), &(i8, bool));
    let mut _26: &(i8, bool);
    let _27: (i8, bool);
    let mut _28: &(i8, bool);
    let _29: (i8, bool);
    let _30: &(i8, bool);
    let _31: &(i8, bool);
    let mut _32: bool;
    let mut _33: bool;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _37: (&(i8, bool), &(i8, bool));
    let mut _38: &(i8, bool);
    let _39: (i8, bool);
    let mut _40: &(i8, bool);
    let _41: (i8, bool);
    let _42: &(i8, bool);
    let _43: &(i8, bool);
    let mut _44: bool;
    let mut _45: bool;
    let _47: !;
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _49: (&(i8, bool), &(i8, bool));
    let mut _50: &(i8, bool);
    let _51: (i8, bool);
    let mut _52: &(i8, bool);
    let _53: (i8, bool);
    let _54: &(i8, bool);
    let _55: &(i8, bool);
    let mut _56: bool;
    let mut _57: bool;
    let _59: !;
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _61: (&(i8, bool), &(i8, bool));
    let mut _62: &(i8, bool);
    let _63: (i8, bool);
    let mut _64: &(i8, bool);
    let _65: (i8, bool);
    let _66: &(i8, bool);
    let _67: &(i8, bool);
    let mut _68: bool;
    let mut _69: bool;
    let _71: !;
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _73: (&(i8, bool), &(i8, bool));
    let mut _74: &(i8, bool);
    let _75: (i8, bool);
    let mut _76: &(i8, bool);
    let _77: (i8, bool);
    let _78: &(i8, bool);
    let _79: &(i8, bool);
    let mut _80: bool;
    let mut _81: bool;
    let _83: !;
    let mut _84: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _85: (&(i8, bool), &(i8, bool));
    let mut _86: &(i8, bool);
    let _87: (i8, bool);
    let mut _88: &(i8, bool);
    let _89: (i8, bool);
    let _90: &(i8, bool);
    let _91: &(i8, bool);
    let mut _92: bool;
    let mut _93: bool;
    let _95: !;
    let mut _96: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }
    scope 3 {
        debug left_val => _18;
        debug right_val => _19;
        let _22: core::panicking::AssertKind;
        scope 4 {
            debug kind => _22;
        }
    }
    scope 5 {
        debug left_val => _30;
        debug right_val => _31;
        let _34: core::panicking::AssertKind;
        scope 6 {
            debug kind => _34;
        }
    }
    scope 7 {
        debug left_val => _42;
        debug right_val => _43;
        let _46: core::panicking::AssertKind;
        scope 8 {
            debug kind => _46;
        }
    }
    scope 9 {
        debug left_val => _54;
        debug right_val => _55;
        let _58: core::panicking::AssertKind;
        scope 10 {
            debug kind => _58;
        }
    }
    scope 11 {
        debug left_val => _66;
        debug right_val => _67;
        let _70: core::panicking::AssertKind;
        scope 12 {
            debug kind => _70;
        }
    }
    scope 13 {
        debug left_val => _78;
        debug right_val => _79;
        let _82: core::panicking::AssertKind;
        scope 14 {
            debug kind => _82;
        }
    }
    scope 15 {
        debug left_val => _90;
        debug right_val => _91;
        let _94: core::panicking::AssertKind;
        scope 16 {
            debug kind => _94;
        }
    }

    bb0: {
        _3 = const _;
        _2 = &_3;
        _5 = (const 2_i8, const false);
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &(i8, bool));
        _7 = (_1.1: &(i8, bool));
        _9 = <(i8, bool) as PartialEq>::eq(_6, _7) -> bb1;
    }

    bb1: {
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<(i8, bool), (i8, bool)>(move _10, _6, _7, move _12);
    }

    bb3: {
        _15 = const _;
        _14 = &_15;
        _17 = (const _, const true);
        _16 = &_17;
        _13 = (move _14, move _16);
        _18 = (_13.0: &(i8, bool));
        _19 = (_13.1: &(i8, bool));
        _21 = <(i8, bool) as PartialEq>::eq(_18, _19) -> bb4;
    }

    bb4: {
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<(i8, bool), (i8, bool)>(move _22, _18, _19, move _24);
    }

    bb6: {
        _27 = const _;
        _26 = &_27;
        _29 = (const 1_i8, const false);
        _28 = &_29;
        _25 = (move _26, move _28);
        _30 = (_25.0: &(i8, bool));
        _31 = (_25.1: &(i8, bool));
        _33 = <(i8, bool) as PartialEq>::eq(_30, _31) -> bb7;
    }

    bb7: {
        _32 = Not(move _33);
        switchInt(move _32) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = core::panicking::assert_failed::<(i8, bool), (i8, bool)>(move _34, _30, _31, move _36);
    }

    bb9: {
        _39 = const _;
        _38 = &_39;
        _41 = (const 0_i8, const true);
        _40 = &_41;
        _37 = (move _38, move _40);
        _42 = (_37.0: &(i8, bool));
        _43 = (_37.1: &(i8, bool));
        _45 = <(i8, bool) as PartialEq>::eq(_42, _43) -> bb10;
    }

    bb10: {
        _44 = Not(move _45);
        switchInt(move _44) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _46 = core::panicking::AssertKind::Eq;
        _48 = Option::<Arguments<'_>>::None;
        _47 = core::panicking::assert_failed::<(i8, bool), (i8, bool)>(move _46, _42, _43, move _48);
    }

    bb12: {
        _51 = const _;
        _50 = &_51;
        _53 = (const 2_i8, const false);
        _52 = &_53;
        _49 = (move _50, move _52);
        _54 = (_49.0: &(i8, bool));
        _55 = (_49.1: &(i8, bool));
        _57 = <(i8, bool) as PartialEq>::eq(_54, _55) -> bb13;
    }

    bb13: {
        _56 = Not(move _57);
        switchInt(move _56) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _58 = core::panicking::AssertKind::Eq;
        _60 = Option::<Arguments<'_>>::None;
        _59 = core::panicking::assert_failed::<(i8, bool), (i8, bool)>(move _58, _54, _55, move _60);
    }

    bb15: {
        _63 = const _;
        _62 = &_63;
        _65 = (const _, const true);
        _64 = &_65;
        _61 = (move _62, move _64);
        _66 = (_61.0: &(i8, bool));
        _67 = (_61.1: &(i8, bool));
        _69 = <(i8, bool) as PartialEq>::eq(_66, _67) -> bb16;
    }

    bb16: {
        _68 = Not(move _69);
        switchInt(move _68) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _70 = core::panicking::AssertKind::Eq;
        _72 = Option::<Arguments<'_>>::None;
        _71 = core::panicking::assert_failed::<(i8, bool), (i8, bool)>(move _70, _66, _67, move _72);
    }

    bb18: {
        _75 = const _;
        _74 = &_75;
        _77 = (const 1_i8, const false);
        _76 = &_77;
        _73 = (move _74, move _76);
        _78 = (_73.0: &(i8, bool));
        _79 = (_73.1: &(i8, bool));
        _81 = <(i8, bool) as PartialEq>::eq(_78, _79) -> bb19;
    }

    bb19: {
        _80 = Not(move _81);
        switchInt(move _80) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _82 = core::panicking::AssertKind::Eq;
        _84 = Option::<Arguments<'_>>::None;
        _83 = core::panicking::assert_failed::<(i8, bool), (i8, bool)>(move _82, _78, _79, move _84);
    }

    bb21: {
        _87 = const _;
        _86 = &_87;
        _89 = (const 0_i8, const true);
        _88 = &_89;
        _85 = (move _86, move _88);
        _90 = (_85.0: &(i8, bool));
        _91 = (_85.1: &(i8, bool));
        _93 = <(i8, bool) as PartialEq>::eq(_90, _91) -> bb22;
    }

    bb22: {
        _92 = Not(move _93);
        switchInt(move _92) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _94 = core::panicking::AssertKind::Eq;
        _96 = Option::<Arguments<'_>>::None;
        _95 = core::panicking::assert_failed::<(i8, bool), (i8, bool)>(move _94, _90, _91, move _96);
    }

    bb24: {
        return;
    }
}

const C49: (i8, bool) = {
    let mut _0: (i8, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::overflowing_div(const 5_i8, const 2_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

const C50: (i8, bool) = {
    let mut _0: (i8, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::overflowing_div(const _, const -1_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

const C51: (i8, bool) = {
    let mut _0: (i8, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::overflowing_rem(const 5_i8, const 2_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

const C52: (i8, bool) = {
    let mut _0: (i8, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::overflowing_rem(const _, const -1_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

const C53: (i8, bool) = {
    let mut _0: (i8, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::overflowing_div_euclid(const 5_i8, const 2_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

const C54: (i8, bool) = {
    let mut _0: (i8, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::overflowing_div_euclid(const _, const -1_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

const C55: (i8, bool) = {
    let mut _0: (i8, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::overflowing_rem_euclid(const 5_i8, const 2_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

const C56: (i8, bool) = {
    let mut _0: (i8, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::overflowing_rem_euclid(const _, const -1_i8) -> bb1;
    }

    bb1: {
        return;
    }
}

fn overflowing_i128() -> () {
    let mut _0: ();
    let mut _1: (&(i128, bool), &(i128, bool));
    let mut _2: &(i128, bool);
    let _3: (i128, bool);
    let mut _4: &(i128, bool);
    let _5: (i128, bool);
    let _6: &(i128, bool);
    let _7: &(i128, bool);
    let mut _8: bool;
    let mut _9: bool;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: (&(i128, bool), &(i128, bool));
    let mut _14: &(i128, bool);
    let _15: (i128, bool);
    let mut _16: &(i128, bool);
    let _17: (i128, bool);
    let mut _18: i128;
    let _19: &(i128, bool);
    let _20: &(i128, bool);
    let mut _21: bool;
    let mut _22: bool;
    let _24: !;
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }
    scope 3 {
        debug left_val => _19;
        debug right_val => _20;
        let _23: core::panicking::AssertKind;
        scope 4 {
            debug kind => _23;
        }
    }

    bb0: {
        _3 = const _;
        _2 = &_3;
        _5 = (const _, const true);
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &(i128, bool));
        _7 = (_1.1: &(i128, bool));
        _9 = <(i128, bool) as PartialEq>::eq(_6, _7) -> bb1;
    }

    bb1: {
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<(i128, bool), (i128, bool)>(move _10, _6, _7, move _12);
    }

    bb3: {
        _15 = const _;
        _14 = &_15;
        _18 = Sub(const _, const 2_i128);
        _17 = (move _18, const true);
        _16 = &_17;
        _13 = (move _14, move _16);
        _19 = (_13.0: &(i128, bool));
        _20 = (_13.1: &(i128, bool));
        _22 = <(i128, bool) as PartialEq>::eq(_19, _20) -> bb4;
    }

    bb4: {
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _23 = core::panicking::AssertKind::Eq;
        _25 = Option::<Arguments<'_>>::None;
        _24 = core::panicking::assert_failed::<(i128, bool), (i128, bool)>(move _23, _19, _20, move _25);
    }

    bb6: {
        return;
    }
}

const OFL_ADD_I128: (i128, bool) = {
    let mut _0: (i128, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i128>::overflowing_add(const _, const 1_i128) -> bb1;
    }

    bb1: {
        return;
    }
}

const OFL_MUL_I128: (i128, bool) = {
    let mut _0: (i128, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i128>::overflowing_mul(const _, const 3_i128) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let _3: ();
    let _4: ();
    let _5: ();
    let _6: ();

    bb0: {
        _1 = checked() -> bb1;
    }

    bb1: {
        _2 = checked_i128() -> bb2;
    }

    bb2: {
        _3 = saturating_and_wrapping() -> bb3;
    }

    bb3: {
        _4 = saturating_and_wrapping_i128() -> bb4;
    }

    bb4: {
        _5 = overflowing() -> bb5;
    }

    bb5: {
        _6 = overflowing_i128() -> bb6;
    }

    bb6: {
        return;
    }
}
