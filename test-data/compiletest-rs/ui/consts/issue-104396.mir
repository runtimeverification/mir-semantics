// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn from_fn_1(_1: F) -> [f32; N] {
    debug f => _1;
    let mut _0: [f32; N];
    let mut _2: [f32; N];
    let mut _4: bool;
    let mut _5: usize;
    let mut _6: f32;
    let mut _7: &mut F;
    let mut _8: (usize,);
    let mut _9: usize;
    let _10: usize;
    let mut _11: usize;
    let mut _12: bool;
    scope 1 {
        debug result => _2;
        let mut _3: usize;
        scope 2 {
            debug i => _3;
        }
    }

    bb0: {
        _2 = [const 0f32; N];
        _3 = const 0_usize;
        goto -> bb1;
    }

    bb1: {
        _5 = _3;
        _4 = Lt(move _5, const N);
        switchInt(move _4) -> [0: bb5, otherwise: bb2];
    }

    bb2: {
        _7 = &mut _1;
        _9 = _3;
        _8 = (move _9,);
        _6 = <F as FnMut<(usize,)>>::call_mut(move _7, move _8) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _10 = _3;
        _11 = const N;
        _12 = Lt(_10, _11);
        assert(move _12, "index out of bounds: the length is {} but the index is {}", move _11, _10) -> [success: bb4, unwind: bb7];
    }

    bb4: {
        _2[_10] = move _6;
        _3 = Add(_3, const 1_usize);
        goto -> bb1;
    }

    bb5: {
        _0 = _2;
        drop(_1) -> bb6;
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_1) -> [return: bb8, unwind terminate];
    }

    bb8 (cleanup): {
        resume;
    }
}

from_fn_1::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

from_fn_1::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

TestArray::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: bool;

    bb0: {
        _1 = Eq(const 2_usize, const 0_usize);
        assert(!move _1, "attempt to divide `{}` by zero", const N) -> bb1;
    }

    bb1: {
        _0 = Div(const N, const 2_usize);
        return;
    }
}

TestArray::array::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: bool;

    bb0: {
        _1 = Eq(const 2_usize, const 0_usize);
        assert(!move _1, "attempt to divide `{}` by zero", const N) -> bb1;
    }

    bb1: {
        _0 = Div(const N, const 2_usize);
        return;
    }
}

<impl at ui/consts/issue-104396.rs:25:1: 25:34>::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: bool;

    bb0: {
        _1 = Eq(const 2_usize, const 0_usize);
        assert(!move _1, "attempt to divide `{}` by zero", const N) -> bb1;
    }

    bb1: {
        _0 = Div(const N, const 2_usize);
        return;
    }
}

<impl at ui/consts/issue-104396.rs:25:1: 25:34>::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn <impl at ui/consts/issue-104396.rs:25:1: 25:34>::from_fn_2(_1: F) -> TestArray<N> {
    debug f => _1;
    let mut _0: TestArray<N>;
    let mut _2: [f32; N / 2];

    bb0: {
        _2 = from_fn_1::<N / 2, F>(move _1) -> bb1;
    }

    bb1: {
        _0 = TestArray::<N> { array: move _2 };
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: TestArray<4>;

    bb0: {
        _1 = TestArray::<4>::from_fn_2::<[closure@ui/consts/issue-104396.rs:35:31: 35:34]>(const ZeroSized: [closure@ui/consts/issue-104396.rs:35:31: 35:34]) -> bb1;
    }

    bb1: {
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/consts/issue-104396.rs:35:31: 35:34], _2: usize) -> f32 {
    debug i => _2;
    let mut _0: f32;

    bb0: {
        _0 = const 0f32;
        return;
    }
}
