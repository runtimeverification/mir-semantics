// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const ARR: [usize; 5] = {
    let mut _0: [usize; 5];

    bb0: {
        _0 = [const 5_usize, const 4_usize, const 3_usize, const 2_usize, const 1_usize];
        return;
    }
}

ARR::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 5_usize;
        return;
    }
}

const BLA: usize = {
    let mut _0: usize;
    let mut _1: [usize; 5];
    let _2: usize;
    let mut _3: [usize; 5];
    let _4: usize;
    let mut _5: usize;
    let mut _6: bool;
    let mut _7: usize;
    let mut _8: bool;

    bb0: {
        StorageLive(_1);
        _1 = const _;
        StorageLive(_2);
        StorageLive(_3);
        _3 = const _;
        StorageLive(_4);
        _4 = const 3_usize;
        _5 = Len(_3);
        _6 = Lt(_4, _5);
        assert(move _6, "index out of bounds: the length is {} but the index is {}", move _5, _4) -> bb1;
    }

    bb1: {
        _2 = _3[_4];
        _7 = Len(_1);
        _8 = Lt(_2, _7);
        assert(move _8, "index out of bounds: the length is {} but the index is {}", move _7, _2) -> bb2;
    }

    bb2: {
        _0 = _1[_2];
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let mut _2: &usize;
    let _3: usize;
    let mut _4: &usize;
    let _5: usize;
    let _6: &usize;
    let _7: &usize;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: usize;
    let mut _11: usize;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }

    bb0: {
        _3 = const 3_usize;
        _2 = &_3;
        _5 = const _;
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &usize);
        _7 = (_1.1: &usize);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<usize, usize>(move _12, _6, _7, move _14);
    }

    bb2: {
        return;
    }
}
