// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static mut STDERR_BUFFER_SPACE: [u8; 42] = {
    let mut _0: [u8; 42];

    bb0: {
        _0 = [const 0_u8; 42];
        return;
    }
}

STDERR_BUFFER_SPACE::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 42_usize;
        return;
    }
}

STDERR_BUFFER_SPACE::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 42_usize;
        return;
    }
}

static mut STDERR_BUFFER: *mut [u8] = {
    let mut _0: *mut [u8];
    let mut _1: *mut [u8; 42];
    let mut _2: &mut [u8; 42];
    let mut _3: *mut [u8; 42];
    scope 1 {
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = const {alloc1: *mut [u8; 42]};
        _2 = &mut (*_3);
        _1 = &raw mut (*_2);
        _0 = move _1 as *mut [u8] (Pointer(Unsize));
        StorageDead(_1);
        StorageDead(_2);
        return;
    }
}

alloc1 (static: STDERR_BUFFER_SPACE, size: 42, align: 1) {
    0x00 │ 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 │ ................
    0x10 │ 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 │ ................
    0x20 │ 00 00 00 00 00 00 00 00 00 00                   │ ..........
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
