// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static C: (E, u16, u16) = {
    let mut _0: (E, u16, u16);
    let mut _1: E;

    bb0: {
        StorageLive(_1);
        _1 = E::V0;
        _0 = (move _1, const 24589_u16, const 2989_u16);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: u16;
    let mut _2: &(E, u16, u16);
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: u16;
    let mut _6: !;
    let mut _7: (&u16, &u16);
    let mut _8: &u16;
    let mut _9: &u16;
    let _10: u16;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: u16;
    let mut _16: u16;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug n => _1;
        let _11: &u16;
        let _12: &u16;
        scope 2 {
            debug left_val => _11;
            debug right_val => _12;
            let _17: core::panicking::AssertKind;
            scope 3 {
                debug kind => _17;
            }
        }
    }

    bb0: {
        _2 = const {alloc1: &(E, u16, u16)};
        _1 = ((*_2).1: u16);
        _5 = _1;
        _4 = Ne(move _5, const 2989_u16);
        _3 = Not(move _4);
        switchInt(move _3) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _6 = core::panicking::panic(const "assertion failed: n != 0xBAD");
    }

    bb2: {
        _8 = &_1;
        _10 = const 24589_u16;
        _9 = &_10;
        _7 = (move _8, move _9);
        _11 = (_7.0: &u16);
        _12 = (_7.1: &u16);
        _15 = (*_11);
        _16 = (*_12);
        _14 = Eq(move _15, move _16);
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<u16, u16>(move _17, _11, _12, move _19);
    }

    bb4: {
        return;
    }
}

alloc1 (static: C, size: 8, align: 2) {
    00 00 __ __ 0d 60 ad 0b                         │ ..░░.`..
}

fn E::V16(_1: u16) -> E {
    let mut _0: E;

    bb0: {
        _0 = E::V16(move _1);
        return;
    }
}

// MIR FOR CTFE
fn E::V16(_1: u16) -> E {
    let mut _0: E;

    bb0: {
        _0 = E::V16(move _1);
        return;
    }
}
