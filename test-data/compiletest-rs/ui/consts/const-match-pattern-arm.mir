// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const _: bool = {
    let mut _0: bool;
    let mut _1: std::option::Option<bool>;
    let mut _2: isize;
    let _3: bool;
    scope 1 {
        debug value => _3;
    }

    bb0: {
        StorageLive(_1);
        _1 = Option::<bool>::Some(const true);
        _2 = discriminant(_1);
        switchInt(move _2) -> [1: bb2, otherwise: bb1];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        StorageLive(_3);
        _3 = ((_1 as Some).0: bool);
        _0 = const true;
        StorageDead(_3);
        goto -> bb3;
    }

    bb3: {
        StorageDead(_1);
        return;
    }
}

const _: bool = {
    let mut _0: bool;
    let mut _1: std::option::Option<bool>;
    let mut _2: isize;
    let _3: bool;
    scope 1 {
        debug value => _3;
    }

    bb0: {
        StorageLive(_1);
        _1 = Option::<bool>::Some(const true);
        _2 = discriminant(_1);
        switchInt(move _2) -> [1: bb2, otherwise: bb1];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        StorageLive(_3);
        _3 = ((_1 as Some).0: bool);
        _0 = const true;
        StorageDead(_3);
        goto -> bb3;
    }

    bb3: {
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
