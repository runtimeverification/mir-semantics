// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/consts/issue-37222.rs:3:10: 3:15>::fmt(_1: &Bar, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &i64;
    let _5: &str;
    let mut _6: &dyn std::fmt::Debug;
    let _7: &&i64;
    let _8: &i32;
    let _9: &str;
    let mut _10: &dyn std::fmt::Debug;
    let _11: &&i32;
    let _12: &str;
    scope 1 {
        debug __self_0 => _4;
    }
    scope 2 {
        debug __self_0 => _8;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _12 = const "C";
        _0 = Formatter::<'_>::write_str(_2, _12) -> bb5;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as A).0: i64);
        _5 = const "A";
        _7 = &_4;
        _6 = _7 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _5, move _6) -> bb5;
    }

    bb4: {
        _8 = &(((*_1) as B).0: i32);
        _9 = const "B";
        _11 = &_8;
        _10 = _11 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _9, move _10) -> bb5;
    }

    bb5: {
        return;
    }
}

fn <impl at ui/consts/issue-37222.rs:3:17: 3:26>::eq(_1: &Bar, _2: &Bar) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: (&Bar, &Bar);
    let mut _8: isize;
    let mut _9: isize;
    let mut _10: isize;
    let mut _13: i64;
    let mut _14: i64;
    let mut _17: i32;
    let mut _18: i32;
    let mut _19: &Bar;
    let mut _20: &Bar;
    let mut _21: &Bar;
    let mut _22: &Bar;
    let mut _23: &Bar;
    let mut _24: &Bar;
    let mut _25: &Bar;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
            let _11: &i64;
            let _12: &i64;
            let _15: &i32;
            let _16: &i32;
            scope 3 {
                debug __self_0 => _11;
                debug __arg1_0 => _12;
            }
            scope 4 {
                debug __self_0 => _15;
                debug __arg1_0 => _16;
            }
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _5 = Eq(_3, _4);
        switchInt(move _5) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _7 = (_1, _2);
        _19 = deref_copy (_7.0: &Bar);
        _10 = discriminant((*_19));
        switchInt(move _10) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb3: {
        return;
    }

    bb4: {
        _20 = deref_copy (_7.1: &Bar);
        _8 = discriminant((*_20));
        switchInt(move _8) -> [0: bb7, otherwise: bb5];
    }

    bb5: {
        _6 = const true;
        goto -> bb9;
    }

    bb6: {
        _21 = deref_copy (_7.1: &Bar);
        _9 = discriminant((*_21));
        switchInt(move _9) -> [1: bb8, otherwise: bb5];
    }

    bb7: {
        _22 = deref_copy (_7.0: &Bar);
        _11 = &(((*_22) as A).0: i64);
        _23 = deref_copy (_7.1: &Bar);
        _12 = &(((*_23) as A).0: i64);
        _13 = (*_11);
        _14 = (*_12);
        _6 = Eq(move _13, move _14);
        goto -> bb9;
    }

    bb8: {
        _24 = deref_copy (_7.0: &Bar);
        _15 = &(((*_24) as B).0: i32);
        _25 = deref_copy (_7.1: &Bar);
        _16 = &(((*_25) as B).0: i32);
        _17 = (*_15);
        _18 = (*_16);
        _6 = Eq(move _17, move _18);
        goto -> bb9;
    }

    bb9: {
        _0 = move _6;
        goto -> bb3;
    }
}

fn <impl at ui/consts/issue-37222.rs:10:10: 10:15>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &Bar;
    let mut _6: &dyn std::fmt::Debug;
    let _7: &&u8;
    let _8: &u8;

    bb0: {
        _3 = const "Foo";
        _5 = &((*_1).0: Bar);
        _4 = _5 as &dyn std::fmt::Debug (Pointer(Unsize));
        _8 = &((*_1).1: u8);
        _7 = &_8;
        _6 = _7 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field2_finish(_2, _3, move _4, move _6) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/consts/issue-37222.rs:10:17: 10:26>::eq(_1: &Foo, _2: &Foo) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: &Bar;
    let mut _5: &Bar;
    let mut _6: bool;
    let mut _7: u8;
    let mut _8: u8;

    bb0: {
        _4 = &((*_1).0: Bar);
        _5 = &((*_2).0: Bar);
        _3 = <Bar as PartialEq>::eq(move _4, move _5) -> bb4;
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _7 = ((*_1).1: u8);
        _8 = ((*_2).1: u8);
        _6 = Eq(move _7, move _8);
        _0 = move _6;
        goto -> bb3;
    }

    bb3: {
        return;
    }

    bb4: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2];
    }
}

static FOO: [Foo; 2] = {
    let mut _0: [Foo; 2];
    let mut _1: Foo;
    let mut _2: Bar;
    let mut _3: Foo;
    let mut _4: Bar;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = Bar::C;
        _1 = Foo(move _2, const 0_u8);
        StorageDead(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Bar::C;
        _3 = Foo(move _4, const u8::MAX);
        StorageDead(_4);
        _0 = [move _1, move _3];
        StorageDead(_3);
        StorageDead(_1);
        return;
    }
}

FOO::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&&Foo, &&Foo);
    let mut _2: &&Foo;
    let _3: &Foo;
    let _4: &[Foo; 2];
    let _5: usize;
    let mut _6: usize;
    let mut _7: bool;
    let mut _8: &&Foo;
    let _9: &Foo;
    let _10: Foo;
    let mut _11: Bar;
    let _12: &&Foo;
    let _13: &&Foo;
    let mut _14: bool;
    let mut _15: bool;
    let _17: !;
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _12;
        debug right_val => _13;
        let _16: core::panicking::AssertKind;
        scope 2 {
            debug kind => _16;
        }
    }

    bb0: {
        _4 = const {alloc1: &[Foo; 2]};
        _5 = const 1_usize;
        _6 = const 2_usize;
        _7 = Lt(_5, _6);
        assert(move _7, "index out of bounds: the length is {} but the index is {}", move _6, _5) -> bb1;
    }

    bb1: {
        _3 = &(*_4)[_5];
        _2 = &_3;
        _11 = Bar::C;
        _10 = Foo(move _11, const u8::MAX);
        _9 = &_10;
        _8 = &_9;
        _1 = (move _2, move _8);
        _12 = (_1.0: &&Foo);
        _13 = (_1.1: &&Foo);
        _15 = <&Foo as PartialEq>::eq(_12, _13) -> bb2;
    }

    bb2: {
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _16 = core::panicking::AssertKind::Eq;
        _18 = Option::<Arguments<'_>>::None;
        _17 = core::panicking::assert_failed::<&Foo, &Foo>(move _16, _12, _13, move _18);
    }

    bb4: {
        return;
    }
}

alloc1 (static: FOO, size: 48, align: 8) {
    0x00 │ 02 00 00 00 __ __ __ __ __ __ __ __ __ __ __ __ │ ....░░░░░░░░░░░░
    0x10 │ 00 __ __ __ __ __ __ __ 02 00 00 00 __ __ __ __ │ .░░░░░░░....░░░░
    0x20 │ __ __ __ __ __ __ __ __ ff __ __ __ __ __ __ __ │ ░░░░░░░░.░░░░░░░
}

fn Bar::A(_1: i64) -> Bar {
    let mut _0: Bar;

    bb0: {
        _0 = Bar::A(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Bar::A(_1: i64) -> Bar {
    let mut _0: Bar;

    bb0: {
        _0 = Bar::A(move _1);
        return;
    }
}

fn Bar::B(_1: i32) -> Bar {
    let mut _0: Bar;

    bb0: {
        _0 = Bar::B(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Bar::B(_1: i32) -> Bar {
    let mut _0: Bar;

    bb0: {
        _0 = Bar::B(move _1);
        return;
    }
}

fn Foo(_1: Bar, _2: u8) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: Bar, _2: u8) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo(move _1, move _2);
        return;
    }
}
