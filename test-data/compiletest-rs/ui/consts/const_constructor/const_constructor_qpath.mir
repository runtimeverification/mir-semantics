// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19>::eq(_1: &E, _2: &E) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: (&E, &E);
    let mut _8: isize;
    let mut _9: isize;
    let mut _10: isize;
    let mut _13: i32;
    let mut _14: i32;
    let mut _17: usize;
    let mut _18: usize;
    let mut _19: &E;
    let mut _20: &E;
    let mut _21: &E;
    let mut _22: &E;
    let mut _23: &E;
    let mut _24: &E;
    let mut _25: &E;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
            let _11: &i32;
            let _12: &i32;
            let _15: &usize;
            let _16: &usize;
            scope 3 {
                debug __self_0 => _11;
                debug __arg1_0 => _12;
            }
            scope 4 {
                debug __self_0 => _15;
                debug __arg1_0 => _16;
            }
            scope 5 {
            }
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _5 = Eq(_3, _4);
        switchInt(move _5) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _7 = (_1, _2);
        _19 = deref_copy (_7.0: &E);
        _10 = discriminant((*_19));
        switchInt(move _10) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb3: {
        return;
    }

    bb4: {
        _20 = deref_copy (_7.1: &E);
        _8 = discriminant((*_20));
        switchInt(move _8) -> [0: bb7, otherwise: bb5];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _21 = deref_copy (_7.1: &E);
        _9 = discriminant((*_21));
        switchInt(move _9) -> [1: bb8, otherwise: bb5];
    }

    bb7: {
        _22 = deref_copy (_7.0: &E);
        _11 = &(((*_22) as V).0: i32);
        _23 = deref_copy (_7.1: &E);
        _12 = &(((*_23) as V).0: i32);
        _13 = (*_11);
        _14 = (*_12);
        _6 = Eq(move _13, move _14);
        goto -> bb9;
    }

    bb8: {
        _24 = deref_copy (_7.0: &E);
        _15 = &(((*_24) as W).0: usize);
        _25 = deref_copy (_7.1: &E);
        _16 = &(((*_25) as W).0: usize);
        _17 = (*_15);
        _18 = (*_16);
        _6 = Eq(move _17, move _18);
        goto -> bb9;
    }

    bb9: {
        _0 = move _6;
        goto -> bb3;
    }
}

const <impl at ui/consts/const_constructor/const_constructor_qpath.rs:13:1: 13:24>::DEFAULT: E = {
    let mut _0: E;

    bb0: {
        ConstEvalCounter;
        _0 = E::V(const 23_i32) -> bb1;
    }

    bb1: {
        return;
    }
}

const <impl at ui/consts/const_constructor/const_constructor_qpath.rs:17:1: 17:34>::DEFAULT: Option<i32> = {
    let mut _0: std::option::Option<i32>;

    bb0: {
        ConstEvalCounter;
        _0 = Option::<i32>::Some(const 23_i32) -> bb1;
    }

    bb1: {
        return;
    }
}

const <impl at ui/consts/const_constructor/const_constructor_qpath.rs:21:1: 21:7>::NON_DEFAULT: E = {
    let mut _0: E;

    bb0: {
        ConstEvalCounter;
        _0 = E::W(const 12_usize) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/consts/const_constructor/const_constructor_qpath.rs:21:1: 21:7>::local_fn() -> E {
    let mut _0: E;

    bb0: {
        _0 = E::V(const 23_i32) -> bb1;
    }

    bb1: {
        return;
    }
}

// MIR FOR CTFE
fn <impl at ui/consts/const_constructor/const_constructor_qpath.rs:21:1: 21:7>::local_fn() -> E {
    let mut _0: E;

    bb0: {
        ConstEvalCounter;
        _0 = E::V(const 23_i32) -> bb1;
    }

    bb1: {
        return;
    }
}

fn explicit_qpath() -> E {
    let mut _0: E;
    let _1: std::option::Option<usize>;
    scope 1 {
        debug _x => _1;
    }

    bb0: {
        _1 = Option::<usize>::Some(const 23_usize) -> bb1;
    }

    bb1: {
        _0 = E::W(const 12_usize) -> bb2;
    }

    bb2: {
        return;
    }
}

// MIR FOR CTFE
fn explicit_qpath() -> E {
    let mut _0: E;
    let _1: std::option::Option<usize>;
    scope 1 {
        debug _x => _1;
    }

    bb0: {
        StorageLive(_1);
        ConstEvalCounter;
        _1 = Option::<usize>::Some(const 23_usize) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _0 = E::W(const 12_usize) -> bb2;
    }

    bb2: {
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: &E;
    let _4: E;
    let mut _5: &E;
    let _6: E;
    let mut _7: !;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: &std::option::Option<i32>;
    let _11: std::option::Option<i32>;
    let mut _12: &std::option::Option<i32>;
    let _13: std::option::Option<i32>;
    let mut _14: !;
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: &E;
    let _18: E;
    let mut _19: &E;
    let _20: E;
    let mut _21: !;

    bb0: {
        _4 = const _;
        _3 = &_4;
        _6 = E::local_fn() -> bb1;
    }

    bb1: {
        _5 = &_6;
        _2 = <E as PartialEq>::eq(move _3, move _5) -> bb2;
    }

    bb2: {
        _1 = Not(move _2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _7 = core::panicking::panic(const "assertion failed: E::DEFAULT == E::local_fn()");
    }

    bb4: {
        _11 = const _;
        _10 = &_11;
        _13 = Option::<i32>::Some(const 23_i32);
        _12 = &_13;
        _9 = <Option<i32> as PartialEq>::eq(move _10, move _12) -> bb5;
    }

    bb5: {
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _14 = core::panicking::panic(const "assertion failed: Option::DEFAULT == Some(23)");
    }

    bb7: {
        _18 = const _;
        _17 = &_18;
        _20 = explicit_qpath() -> bb8;
    }

    bb8: {
        _19 = &_20;
        _16 = <E as PartialEq>::eq(move _17, move _19) -> bb9;
    }

    bb9: {
        _15 = Not(move _16);
        switchInt(move _15) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _21 = core::panicking::panic(const "assertion failed: E::NON_DEFAULT == explicit_qpath()");
    }

    bb11: {
        return;
    }
}

fn E::V(_1: i32) -> E {
    let mut _0: E;

    bb0: {
        _0 = E::V(move _1);
        return;
    }
}

// MIR FOR CTFE
fn E::V(_1: i32) -> E {
    let mut _0: E;

    bb0: {
        _0 = E::V(move _1);
        return;
    }
}

fn E::W(_1: usize) -> E {
    let mut _0: E;

    bb0: {
        _0 = E::W(move _1);
        return;
    }
}

// MIR FOR CTFE
fn E::W(_1: usize) -> E {
    let mut _0: E;

    bb0: {
        _0 = E::W(move _1);
        return;
    }
}
