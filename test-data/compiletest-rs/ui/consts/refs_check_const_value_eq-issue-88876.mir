// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const FOO_ARR: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let _1: &[&str; 2];
    let _2: [&str; 2];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = [const "Hello", const "Friend"];
        _1 = &_2;
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

FOO_ARR::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

main::{constant#0}: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 2];
    let _2: &[&str; 2];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const _;
        _1 = &(*_2);
        _0 = move _1 as &[&str] (Pointer(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}
