// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: bool) -> bool {
    debug x => _1;
    let mut _0: bool;
    let mut _2: !;

    bb0: {
        switchInt(_1) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _2 = unreachable_unchecked();
    }

    bb2: {
        _0 = const true;
        return;
    }
}

// MIR FOR CTFE
fn foo(_1: bool) -> bool {
    debug x => _1;
    let mut _0: bool;
    let mut _2: !;

    bb0: {
        switchInt(_1) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        StorageLive(_2);
        ConstEvalCounter;
        _2 = unreachable_unchecked();
    }

    bb2: {
        _0 = const true;
        return;
    }
}

const BAR: bool = {
    let mut _0: bool;
    scope 1 {
    }

    bb0: {
        ConstEvalCounter;
        _0 = foo(const true) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&bool, &bool);
    let mut _2: &bool;
    let _3: bool;
    let mut _4: &bool;
    let _5: bool;
    let _6: &bool;
    let _7: &bool;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: bool;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }

    bb0: {
        _3 = const _;
        _2 = &_3;
        _5 = const true;
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &bool);
        _7 = (_1.1: &bool);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<bool, bool>(move _12, _6, _7, move _14);
    }

    bb2: {
        return;
    }
}
