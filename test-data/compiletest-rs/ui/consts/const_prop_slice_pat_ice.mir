// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: &[i32];
    let _2: &[i32; 2];
    let _3: [i32; 2];
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: bool;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: bool;
    let _10: &[i32];
    let _11: &i32;
    scope 1 {
        debug a => _10;
        debug x => _11;
    }

    bb0: {
        _3 = [const 0_i32, const 1_i32];
        _2 = &_3;
        _1 = _2 as &[i32] (Pointer(Unsize));
        _7 = Len((*_1));
        _8 = const 1_usize;
        _9 = Ge(move _7, move _8);
        switchInt(move _9) -> [0: bb1, otherwise: bb3];
    }

    bb1: {
        _4 = Len((*_1));
        _5 = const 0_usize;
        _6 = Eq(move _4, move _5);
        switchInt(move _6) -> [0: bb2, otherwise: bb4];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _10 = &(*_1)[:-1];
        _11 = &(*_1)[-1 of 1];
        goto -> bb4;
    }

    bb4: {
        return;
    }
}
