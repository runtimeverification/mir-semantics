// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const I: std::iter::Empty<u32> = {
    let mut _0: std::iter::Empty<u32>;

    bb0: {
        ConstEvalCounter;
        _0 = std::iter::empty::<u32>() -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: std::iter::Empty<u32>;
    let mut _2: std::iter::Empty<u32>;
    let mut _3: std::option::Option<u32>;
    let mut _4: &mut std::iter::Empty<u32>;
    let mut _5: isize;
    let _7: !;
    let mut _8: std::fmt::Arguments<'_>;
    let mut _9: &[&str];
    let _10: &[&str; 1];
    let _11: [&str; 1];
    let mut _12: &[core::fmt::rt::Argument<'_>];
    let _13: &[core::fmt::rt::Argument<'_>; 1];
    let _14: [core::fmt::rt::Argument<'_>; 1];
    let mut _15: core::fmt::rt::Argument<'_>;
    let _16: &u32;
    scope 1 {
        debug iter => const std::iter::Empty::<u32>(PhantomData::<fn() -> u32>);
        let _6: u32;
        scope 2 {
            debug i => _6;
        }
    }

    bb0: {
        _1 = <std::iter::Empty<u32> as IntoIterator>::into_iter(const _) -> bb1;
    }

    bb1: {
        _4 = &mut _2;
        _3 = <std::iter::Empty<u32> as Iterator>::next(_4) -> bb2;
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _6 = ((_3 as Some).0: u32);
        _11 = [const "magical value creation: "];
        _10 = &_11;
        _9 = _10 as &[&str] (Pointer(Unsize));
        _16 = &_6;
        _15 = core::fmt::rt::Argument::<'_>::new_display::<u32>(_16) -> bb6;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        return;
    }

    bb6: {
        _14 = [move _15];
        _13 = &_14;
        _12 = _13 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _8 = Arguments::<'_>::new_v1(move _9, move _12) -> bb7;
    }

    bb7: {
        _7 = panic_fmt(move _8);
    }
}
