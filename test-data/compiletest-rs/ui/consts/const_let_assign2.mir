// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
AA::data::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 10_usize;
        return;
    }
}

fn <impl at ui/consts/const_let_assign2.rs:7:1: 7:8>::new() -> AA {
    let mut _0: AA;
    let mut _1: AA;
    let mut _2: [u8; 10];
    let _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    scope 1 {
        debug res => _1;
    }

    bb0: {
        _2 = [const 0_u8; 10];
        _1 = AA { data: move _2 };
        _3 = const 0_usize;
        _4 = const 10_usize;
        _5 = Lt(_3, _4);
        assert(move _5, "index out of bounds: the length is {} but the index is {}", move _4, _3) -> bb1;
    }

    bb1: {
        (_1.0: [u8; 10])[_3] = const 5_u8;
        _0 = move _1;
        return;
    }
}

// MIR FOR CTFE
fn <impl at ui/consts/const_let_assign2.rs:7:1: 7:8>::new() -> AA {
    let mut _0: AA;
    let mut _1: AA;
    let mut _2: [u8; 10];
    let _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    scope 1 {
        debug res => _1;
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = [const 0_u8; 10];
        _1 = AA { data: move _2 };
        StorageDead(_2);
        StorageLive(_3);
        _3 = const 0_usize;
        _4 = Len((_1.0: [u8; 10]));
        _5 = Lt(_3, _4);
        assert(move _5, "index out of bounds: the length is {} but the index is {}", move _4, _3) -> bb1;
    }

    bb1: {
        (_1.0: [u8; 10])[_3] = const 5_u8;
        StorageDead(_3);
        _0 = move _1;
        StorageDead(_1);
        return;
    }
}

<impl at ui/consts/const_let_assign2.rs:7:1: 7:8>::new::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 10_usize;
        return;
    }
}

static mut BB: AA = {
    let mut _0: AA;

    bb0: {
        ConstEvalCounter;
        _0 = AA::new() -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: &mut AA;
    let mut _2: *mut AA;
    let mut _3: std::slice::Iter<'_, u8>;
    let mut _4: std::slice::Iter<'_, u8>;
    let mut _5: &[u8];
    let mut _6: &[u8; 10];
    let mut _8: std::option::Option<&u8>;
    let mut _9: &mut std::slice::Iter<'_, u8>;
    let mut _10: isize;
    let _12: ();
    let mut _13: std::fmt::Arguments<'_>;
    let mut _14: &[&str];
    let _15: &[&str; 2];
    let _16: [&str; 2];
    let mut _17: &[core::fmt::rt::Argument<'_>];
    let _18: &[core::fmt::rt::Argument<'_>; 1];
    let _19: [core::fmt::rt::Argument<'_>; 1];
    let mut _20: core::fmt::rt::Argument<'_>;
    let _21: &&u8;
    scope 1 {
        debug ptr => _1;
        let mut _7: std::slice::Iter<'_, u8>;
        scope 3 {
            debug iter => _7;
            let _11: &u8;
            scope 4 {
                debug a => _11;
            }
        }
    }
    scope 2 {
        let mut _22: *const ();
        let mut _23: usize;
        let mut _24: usize;
        let mut _25: usize;
        let mut _26: usize;
        let mut _27: bool;
    }

    bb0: {
        _2 = const {alloc1: *mut AA};
        _22 = _2 as *const () (PtrToPtr);
        _23 = _22 as usize (Transmute);
        _24 = AlignOf(AA);
        _25 = Sub(_24, const 1_usize);
        _26 = BitAnd(_23, _25);
        _27 = Eq(_26, const 0_usize);
        assert(_27, "misaligned pointer dereference: address must be a multiple of {} but is {}", _24, _23) -> [success: bb10, unwind unreachable];
    }

    bb1: {
        _3 = <std::slice::Iter<'_, u8> as IntoIterator>::into_iter(move _4) -> bb2;
    }

    bb2: {
        _7 = move _3;
        goto -> bb3;
    }

    bb3: {
        _9 = &mut _7;
        _8 = <std::slice::Iter<'_, u8> as Iterator>::next(_9) -> bb4;
    }

    bb4: {
        _10 = discriminant(_8);
        switchInt(move _10) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        _11 = ((_8 as Some).0: &u8);
        _16 = [const "", const "\n"];
        _15 = &_16;
        _14 = _15 as &[&str] (Pointer(Unsize));
        _21 = &_11;
        _20 = core::fmt::rt::Argument::<'_>::new_display::<&u8>(_21) -> bb8;
    }

    bb6: {
        unreachable;
    }

    bb7: {
        return;
    }

    bb8: {
        _19 = [move _20];
        _18 = &_19;
        _17 = _18 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _13 = Arguments::<'_>::new_v1(move _14, move _17) -> bb9;
    }

    bb9: {
        _12 = _print(move _13) -> bb3;
    }

    bb10: {
        _1 = &mut (*_2);
        _6 = &((*_1).0: [u8; 10]);
        _5 = move _6 as &[u8] (Pointer(Unsize));
        _4 = core::slice::<impl [u8]>::iter(move _5) -> bb1;
    }
}

alloc1 (static: BB, size: 10, align: 1) {
    05 00 00 00 00 00 00 00 00 00                   â”‚ ..........
}
