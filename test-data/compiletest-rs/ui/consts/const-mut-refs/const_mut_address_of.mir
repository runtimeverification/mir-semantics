// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo { x: const 0_usize };
        return;
    }
}

// MIR FOR CTFE
fn foo() -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo { x: const 0_usize };
        return;
    }
}

fn <impl at ui/consts/const-mut-refs/const_mut_address_of.rs:13:1: 13:9>::bar(_1: &mut Foo) -> *mut usize {
    debug self => _1;
    let mut _0: *mut usize;

    bb0: {
        _0 = &raw mut ((*_1).0: usize);
        return;
    }
}

// MIR FOR CTFE
fn <impl at ui/consts/const-mut-refs/const_mut_address_of.rs:13:1: 13:9>::bar(_1: &mut Foo) -> *mut usize {
    debug self => _1;
    let mut _0: *mut usize;

    bb0: {
        _0 = &raw mut ((*_1).0: usize);
        return;
    }
}

fn baz(_1: &mut Foo) -> *mut usize {
    debug foo => _1;
    let mut _0: *mut usize;

    bb0: {
        _0 = &raw mut ((*_1).0: usize);
        return;
    }
}

// MIR FOR CTFE
fn baz(_1: &mut Foo) -> *mut usize {
    debug foo => _1;
    let mut _0: *mut usize;

    bb0: {
        _0 = &raw mut ((*_1).0: usize);
        return;
    }
}

const _: () = {
    let mut _0: ();
    let _1: *mut usize;
    let mut _2: &mut Foo;
    let mut _3: Foo;
    let _4: *mut usize;
    let mut _5: &mut Foo;
    let mut _6: &mut Foo;
    let mut _7: Foo;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = foo() -> bb1;
    }

    bb1: {
        _2 = &mut _3;
        ConstEvalCounter;
        _1 = Foo::bar(move _2) -> bb2;
    }

    bb2: {
        StorageDead(_2);
        StorageDead(_3);
        StorageDead(_1);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        ConstEvalCounter;
        _7 = foo() -> bb3;
    }

    bb3: {
        _6 = &mut _7;
        _5 = &mut (*_6);
        ConstEvalCounter;
        _4 = baz(move _5) -> bb4;
    }

    bb4: {
        StorageDead(_5);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_4);
        _0 = const ();
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
