// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo { x: const 0_usize };
        return;
    }
}

// MIR FOR CTFE
fn foo() -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo { x: const 0_usize };
        return;
    }
}

fn <impl at ui/consts/const-mut-refs/const_mut_refs.rs:12:1: 12:9>::bar(_1: &mut Foo) -> usize {
    debug self => _1;
    let mut _0: usize;

    bb0: {
        ((*_1).0: usize) = const 1_usize;
        _0 = ((*_1).0: usize);
        return;
    }
}

// MIR FOR CTFE
fn <impl at ui/consts/const-mut-refs/const_mut_refs.rs:12:1: 12:9>::bar(_1: &mut Foo) -> usize {
    debug self => _1;
    let mut _0: usize;

    bb0: {
        ((*_1).0: usize) = const 1_usize;
        _0 = ((*_1).0: usize);
        return;
    }
}

fn baz(_1: &mut Foo) -> usize {
    debug foo => _1;
    let mut _0: usize;
    let _2: &mut usize;
    scope 1 {
        debug x => _2;
    }

    bb0: {
        _2 = &mut ((*_1).0: usize);
        (*_2) = const 2_usize;
        _0 = (*_2);
        return;
    }
}

// MIR FOR CTFE
fn baz(_1: &mut Foo) -> usize {
    debug foo => _1;
    let mut _0: usize;
    let _2: &mut usize;
    scope 1 {
        debug x => _2;
    }

    bb0: {
        StorageLive(_2);
        _2 = &mut ((*_1).0: usize);
        (*_2) = const 2_usize;
        _0 = (*_2);
        StorageDead(_2);
        return;
    }
}

fn bazz(_1: &mut Foo) -> usize {
    debug foo => _1;
    let mut _0: usize;

    bb0: {
        ((*_1).0: usize) = const 3_usize;
        _0 = ((*_1).0: usize);
        return;
    }
}

// MIR FOR CTFE
fn bazz(_1: &mut Foo) -> usize {
    debug foo => _1;
    let mut _0: usize;

    bb0: {
        ((*_1).0: usize) = const 3_usize;
        _0 = ((*_1).0: usize);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    scope 1 {
        scope 2 {
            scope 3 {
            }
        }
    }

    bb0: {
        return;
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: &mut Foo;
    let mut _2: Foo;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        ConstEvalCounter;
        _2 = foo() -> bb1;
    }

    bb1: {
        _1 = &mut _2;
        ConstEvalCounter;
        _0 = Foo::bar(move _1) -> bb2;
    }

    bb2: {
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

main::{constant#3}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

main::{constant#2}: usize = {
    let mut _0: usize;
    let mut _1: &mut Foo;
    let mut _2: &mut Foo;
    let mut _3: Foo;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = foo() -> bb1;
    }

    bb1: {
        _2 = &mut _3;
        _1 = &mut (*_2);
        ConstEvalCounter;
        _0 = baz(move _1) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

main::{constant#5}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

main::{constant#4}: usize = {
    let mut _0: usize;
    let mut _1: &mut Foo;
    let mut _2: &mut Foo;
    let mut _3: Foo;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = foo() -> bb1;
    }

    bb1: {
        _2 = &mut _3;
        _1 = &mut (*_2);
        ConstEvalCounter;
        _0 = bazz(move _1) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}
