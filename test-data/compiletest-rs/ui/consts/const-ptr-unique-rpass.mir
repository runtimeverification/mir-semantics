// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const PTR: *mut u32 = {
    let mut _0: *mut u32;
    let mut _1: std::ptr::Unique<u32>;

    bb0: {
        StorageLive(_1);
        ConstEvalCounter;
        _1 = Unique::<u32>::dangling() -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _0 = Unique::<u32>::as_ptr(move _1) -> bb2;
    }

    bb2: {
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&*mut u32, &*mut u32);
    let mut _2: &*mut u32;
    let _3: *mut u32;
    let mut _4: &*mut u32;
    let _5: *mut u32;
    let mut _6: std::ptr::Unique<u32>;
    let mut _7: fn() -> std::ptr::Unique<u32>;
    let mut _8: fn() -> std::ptr::Unique<u32>;
    let _9: &*mut u32;
    let _10: &*mut u32;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: *mut u32;
    let mut _14: *mut u32;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _9;
        debug right_val => _10;
        let _15: core::panicking::AssertKind;
        scope 2 {
            debug kind => _15;
        }
    }

    bb0: {
        _3 = const _;
        _2 = &_3;
        _8 = Unique::<u32>::dangling as fn() -> std::ptr::Unique<u32> (Pointer(ReifyFnPointer));
        _7 = test::black_box::<fn() -> Unique<u32>>(move _8) -> bb1;
    }

    bb1: {
        _6 = move _7() -> bb2;
    }

    bb2: {
        _5 = Unique::<u32>::as_ptr(move _6) -> bb3;
    }

    bb3: {
        _4 = &_5;
        _1 = (move _2, move _4);
        _9 = (_1.0: &*mut u32);
        _10 = (_1.1: &*mut u32);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<*mut u32, *mut u32>(move _15, _9, _10, move _17);
    }

    bb5: {
        return;
    }
}
