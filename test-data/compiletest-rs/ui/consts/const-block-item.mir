// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static BLOCK_USE: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 100_usize;
        return;
    }
}

static BLOCK_STRUCT_DEF: usize = {
    let mut _0: usize;
    let mut _1: BLOCK_STRUCT_DEF::Foo;

    bb0: {
        StorageLive(_1);
        _1 = Foo { a: const 300_usize };
        _0 = (_1.0: usize);
        StorageDead(_1);
        return;
    }
}

static BLOCK_FN_DEF: fn(usize) -> usize = {
    let mut _0: fn(usize) -> usize;

    bb0: {
        _0 = foo as fn(usize) -> usize (Pointer(ReifyFnPointer));
        return;
    }
}

fn foo(_1: usize) -> usize {
    debug a => _1;
    let mut _0: usize;

    bb0: {
        _0 = Add(_1, const 10_usize);
        return;
    }
}

static BLOCK_MACRO_RULES: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 412_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let _2: &usize;
    let mut _3: &usize;
    let _4: usize;
    let _5: &usize;
    let _6: &usize;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: usize;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: (&usize, &usize);
    let _15: &usize;
    let mut _16: &usize;
    let _17: usize;
    let _18: &usize;
    let _19: &usize;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: usize;
    let mut _23: usize;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _27: (&usize, &usize);
    let mut _28: &usize;
    let _29: usize;
    let mut _30: fn(usize) -> usize;
    let mut _31: &fn(usize) -> usize;
    let mut _32: &usize;
    let _33: usize;
    let _34: &usize;
    let _35: &usize;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: usize;
    let mut _39: usize;
    let _41: !;
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _43: (&usize, &usize);
    let _44: &usize;
    let mut _45: &usize;
    let _46: usize;
    let _47: &usize;
    let _48: &usize;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: usize;
    let mut _52: usize;
    let _54: !;
    let mut _55: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _5;
        debug right_val => _6;
        let _11: core::panicking::AssertKind;
        scope 2 {
            debug kind => _11;
        }
    }
    scope 3 {
        debug left_val => _18;
        debug right_val => _19;
        let _24: core::panicking::AssertKind;
        scope 4 {
            debug kind => _24;
        }
    }
    scope 5 {
        debug left_val => _34;
        debug right_val => _35;
        let _40: core::panicking::AssertKind;
        scope 6 {
            debug kind => _40;
        }
    }
    scope 7 {
        debug left_val => _47;
        debug right_val => _48;
        let _53: core::panicking::AssertKind;
        scope 8 {
            debug kind => _53;
        }
    }

    bb0: {
        _2 = const {alloc1: &usize};
        _4 = const 100_usize;
        _3 = &_4;
        _1 = (_2, move _3);
        _5 = (_1.0: &usize);
        _6 = (_1.1: &usize);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<usize, usize>(move _11, _5, _6, move _13);
    }

    bb2: {
        _15 = const {alloc2: &usize};
        _17 = const 300_usize;
        _16 = &_17;
        _14 = (_15, move _16);
        _18 = (_14.0: &usize);
        _19 = (_14.1: &usize);
        _22 = (*_18);
        _23 = (*_19);
        _21 = Eq(move _22, move _23);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<usize, usize>(move _24, _18, _19, move _26);
    }

    bb4: {
        _31 = const {alloc3: &fn(usize) -> usize};
        _30 = (*_31);
        _29 = move _30(const 390_usize) -> bb5;
    }

    bb5: {
        _28 = &_29;
        _33 = const 400_usize;
        _32 = &_33;
        _27 = (move _28, move _32);
        _34 = (_27.0: &usize);
        _35 = (_27.1: &usize);
        _38 = (*_34);
        _39 = (*_35);
        _37 = Eq(move _38, move _39);
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _40 = core::panicking::AssertKind::Eq;
        _42 = Option::<Arguments<'_>>::None;
        _41 = core::panicking::assert_failed::<usize, usize>(move _40, _34, _35, move _42);
    }

    bb7: {
        _44 = const {alloc4: &usize};
        _46 = const 412_usize;
        _45 = &_46;
        _43 = (_44, move _45);
        _47 = (_43.0: &usize);
        _48 = (_43.1: &usize);
        _51 = (*_47);
        _52 = (*_48);
        _50 = Eq(move _51, move _52);
        _49 = Not(move _50);
        switchInt(move _49) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _53 = core::panicking::AssertKind::Eq;
        _55 = Option::<Arguments<'_>>::None;
        _54 = core::panicking::assert_failed::<usize, usize>(move _53, _47, _48, move _55);
    }

    bb9: {
        return;
    }
}

alloc4 (static: BLOCK_MACRO_RULES, size: 8, align: 8) {
    9c 01 00 00 00 00 00 00                         │ ........
}

alloc3 (static: BLOCK_FN_DEF, size: 8, align: 8) {
    ╾───────alloc14───────╼                         │ ╾──────╼
}

alloc14 (fn: foo)

alloc2 (static: BLOCK_STRUCT_DEF, size: 8, align: 8) {
    2c 01 00 00 00 00 00 00                         │ ,.......
}

alloc1 (static: BLOCK_USE, size: 8, align: 8) {
    64 00 00 00 00 00 00 00                         │ d.......
}
