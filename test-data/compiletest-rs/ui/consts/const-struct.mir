// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/consts/const-struct.rs:7:10: 7:15>::fmt(_1: &foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &isize;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &isize;
    let _10: &str;
    let mut _11: &dyn std::fmt::Debug;
    let _12: &&isize;
    let _13: &isize;

    bb0: {
        _3 = const "foo";
        _4 = const "a";
        _6 = &((*_1).0: isize);
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize));
        _7 = const "b";
        _9 = &((*_1).1: isize);
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize));
        _10 = const "c";
        _13 = &((*_1).2: isize);
        _12 = &_13;
        _11 = _12 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_struct_field3_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/consts/const-struct.rs:10:1: 10:28>::eq(_1: &foo, _2: &foo) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: isize;
    let mut _6: isize;
    let mut _7: bool;
    let mut _8: isize;
    let mut _9: isize;
    let mut _10: bool;
    let mut _11: isize;
    let mut _12: isize;

    bb0: {
        _5 = ((*_1).0: isize);
        _6 = ((*_2).0: isize);
        _4 = Eq(move _5, move _6);
        switchInt(move _4) -> [0: bb4, otherwise: bb5];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _11 = ((*_1).2: isize);
        _12 = ((*_2).2: isize);
        _10 = Eq(move _11, move _12);
        _0 = move _10;
        goto -> bb3;
    }

    bb3: {
        return;
    }

    bb4: {
        _3 = const false;
        goto -> bb6;
    }

    bb5: {
        _8 = ((*_1).1: isize);
        _9 = ((*_2).1: isize);
        _7 = Eq(move _8, move _9);
        _3 = move _7;
        goto -> bb6;
    }

    bb6: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2];
    }
}

fn <impl at ui/consts/const-struct.rs:10:1: 10:28>::ne(_1: &foo, _2: &foo) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;

    bb0: {
        _3 = <foo as PartialEq>::eq(_1, _2) -> bb1;
    }

    bb1: {
        _0 = Not(move _3);
        return;
    }
}

const x: foo = {
    let mut _0: foo;

    bb0: {
        _0 = foo { a: const 1_isize, b: const 2_isize, c: const 3_isize };
        return;
    }
}

const y: foo = {
    let mut _0: foo;

    bb0: {
        _0 = foo { a: const 1_isize, b: const 2_isize, c: const 3_isize };
        return;
    }
}

const z: &foo = {
    let mut _0: &foo;
    let _1: &foo;
    let _2: foo;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = foo { a: const 10_isize, b: const 22_isize, c: const 12_isize };
        _1 = &_2;
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

const w: foo = {
    let mut _0: foo;
    let mut _1: foo;

    bb0: {
        StorageLive(_1);
        _1 = const _;
        _0 = foo { a: const 5_isize, b: (_1.1: isize), c: (_1.2: isize) };
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&isize, &isize);
    let mut _2: &isize;
    let _3: foo;
    let mut _4: &isize;
    let _5: isize;
    let _6: &isize;
    let _7: &isize;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: isize;
    let mut _11: isize;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&foo, &foo);
    let mut _16: &foo;
    let _17: foo;
    let mut _18: &foo;
    let _19: foo;
    let _20: &foo;
    let _21: &foo;
    let mut _22: bool;
    let mut _23: bool;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _27: (&isize, &isize);
    let mut _28: &isize;
    let _29: &foo;
    let mut _30: &isize;
    let _31: isize;
    let _32: &isize;
    let _33: &isize;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: isize;
    let mut _37: isize;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _41: (&isize, &isize);
    let mut _42: &isize;
    let _43: foo;
    let mut _44: &isize;
    let _45: isize;
    let _46: &isize;
    let _47: &isize;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: isize;
    let mut _51: isize;
    let _53: !;
    let mut _54: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _55: (&isize, &isize);
    let mut _56: &isize;
    let _57: foo;
    let mut _58: &isize;
    let _59: isize;
    let _60: &isize;
    let _61: &isize;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: isize;
    let mut _65: isize;
    let _67: !;
    let mut _68: std::option::Option<std::fmt::Arguments<'_>>;
    let _69: ();
    let mut _70: std::fmt::Arguments<'_>;
    let mut _71: &[&str];
    let _72: &[&str; 2];
    let _73: [&str; 2];
    let mut _74: &[core::fmt::rt::Argument<'_>];
    let _75: &[core::fmt::rt::Argument<'_>; 1];
    let _76: [core::fmt::rt::Argument<'_>; 1];
    let mut _77: core::fmt::rt::Argument<'_>;
    let _78: &isize;
    let _79: foo;
    let mut _80: &[core::fmt::rt::Placeholder];
    let _81: &[core::fmt::rt::Placeholder; 1];
    let _82: [core::fmt::rt::Placeholder; 1];
    let mut _83: core::fmt::rt::Placeholder;
    let mut _84: core::fmt::rt::Alignment;
    let mut _85: core::fmt::rt::Count;
    let mut _86: core::fmt::rt::Count;
    let mut _87: core::fmt::rt::UnsafeArg;
    let _88: ();
    let mut _89: std::fmt::Arguments<'_>;
    let mut _90: &[&str];
    let _91: &[&str; 2];
    let _92: [&str; 2];
    let mut _93: &[core::fmt::rt::Argument<'_>];
    let _94: &[core::fmt::rt::Argument<'_>; 1];
    let _95: [core::fmt::rt::Argument<'_>; 1];
    let mut _96: core::fmt::rt::Argument<'_>;
    let _97: &isize;
    let _98: &foo;
    let mut _99: &[core::fmt::rt::Placeholder];
    let _100: &[core::fmt::rt::Placeholder; 1];
    let _101: [core::fmt::rt::Placeholder; 1];
    let mut _102: core::fmt::rt::Placeholder;
    let mut _103: core::fmt::rt::Alignment;
    let mut _104: core::fmt::rt::Count;
    let mut _105: core::fmt::rt::Count;
    let mut _106: core::fmt::rt::UnsafeArg;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }
    scope 3 {
        debug left_val => _20;
        debug right_val => _21;
        let _24: core::panicking::AssertKind;
        scope 4 {
            debug kind => _24;
        }
    }
    scope 5 {
        debug left_val => _32;
        debug right_val => _33;
        let _38: core::panicking::AssertKind;
        scope 6 {
            debug kind => _38;
        }
    }
    scope 7 {
        debug left_val => _46;
        debug right_val => _47;
        let _52: core::panicking::AssertKind;
        scope 8 {
            debug kind => _52;
        }
    }
    scope 9 {
        debug left_val => _60;
        debug right_val => _61;
        let _66: core::panicking::AssertKind;
        scope 10 {
            debug kind => _66;
        }
    }
    scope 11 {
    }
    scope 12 {
    }

    bb0: {
        _3 = const _;
        _2 = &(_3.1: isize);
        _5 = const 2_isize;
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &isize);
        _7 = (_1.1: &isize);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<isize, isize>(move _12, _6, _7, move _14);
    }

    bb2: {
        _17 = const _;
        _16 = &_17;
        _19 = const _;
        _18 = &_19;
        _15 = (move _16, move _18);
        _20 = (_15.0: &foo);
        _21 = (_15.1: &foo);
        _23 = <foo as PartialEq>::eq(_20, _21) -> bb3;
    }

    bb3: {
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<foo, foo>(move _24, _20, _21, move _26);
    }

    bb5: {
        _29 = const _;
        _28 = &((*_29).1: isize);
        _31 = const 22_isize;
        _30 = &_31;
        _27 = (move _28, move _30);
        _32 = (_27.0: &isize);
        _33 = (_27.1: &isize);
        _36 = (*_32);
        _37 = (*_33);
        _35 = Eq(move _36, move _37);
        _34 = Not(move _35);
        switchInt(move _34) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<isize, isize>(move _38, _32, _33, move _40);
    }

    bb7: {
        _43 = const _;
        _42 = &(_43.0: isize);
        _45 = const 5_isize;
        _44 = &_45;
        _41 = (move _42, move _44);
        _46 = (_41.0: &isize);
        _47 = (_41.1: &isize);
        _50 = (*_46);
        _51 = (*_47);
        _49 = Eq(move _50, move _51);
        _48 = Not(move _49);
        switchInt(move _48) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _52 = core::panicking::AssertKind::Eq;
        _54 = Option::<Arguments<'_>>::None;
        _53 = core::panicking::assert_failed::<isize, isize>(move _52, _46, _47, move _54);
    }

    bb9: {
        _57 = const _;
        _56 = &(_57.2: isize);
        _59 = const 3_isize;
        _58 = &_59;
        _55 = (move _56, move _58);
        _60 = (_55.0: &isize);
        _61 = (_55.1: &isize);
        _64 = (*_60);
        _65 = (*_61);
        _63 = Eq(move _64, move _65);
        _62 = Not(move _63);
        switchInt(move _62) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _66 = core::panicking::AssertKind::Eq;
        _68 = Option::<Arguments<'_>>::None;
        _67 = core::panicking::assert_failed::<isize, isize>(move _66, _60, _61, move _68);
    }

    bb11: {
        _73 = [const "", const "\n"];
        _72 = &_73;
        _71 = _72 as &[&str] (Pointer(Unsize));
        _79 = const _;
        _78 = &(_79.1: isize);
        _77 = core::fmt::rt::Argument::<'_>::new_lower_hex::<isize>(_78) -> bb12;
    }

    bb12: {
        _76 = [move _77];
        _75 = &_76;
        _74 = _75 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _84 = core::fmt::rt::Alignment::Unknown;
        _85 = core::fmt::rt::Count::Implied;
        _86 = core::fmt::rt::Count::Implied;
        _83 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _84, const 4_u32, move _85, move _86) -> bb13;
    }

    bb13: {
        _82 = [move _83];
        _81 = &_82;
        _80 = _81 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _87 = core::fmt::rt::UnsafeArg::new() -> bb14;
    }

    bb14: {
        _70 = Arguments::<'_>::new_v1_formatted(move _71, move _74, move _80, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> bb15;
    }

    bb15: {
        _69 = _print(move _70) -> bb16;
    }

    bb16: {
        _92 = [const "", const "\n"];
        _91 = &_92;
        _90 = _91 as &[&str] (Pointer(Unsize));
        _98 = const _;
        _97 = &((*_98).2: isize);
        _96 = core::fmt::rt::Argument::<'_>::new_lower_hex::<isize>(_97) -> bb17;
    }

    bb17: {
        _95 = [move _96];
        _94 = &_95;
        _93 = _94 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _103 = core::fmt::rt::Alignment::Unknown;
        _104 = core::fmt::rt::Count::Implied;
        _105 = core::fmt::rt::Count::Implied;
        _102 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _103, const 4_u32, move _104, move _105) -> bb18;
    }

    bb18: {
        _101 = [move _102];
        _100 = &_101;
        _99 = _100 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _106 = core::fmt::rt::UnsafeArg::new() -> bb19;
    }

    bb19: {
        _89 = Arguments::<'_>::new_v1_formatted(move _90, move _93, move _99, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> bb20;
    }

    bb20: {
        _88 = _print(move _89) -> bb21;
    }

    bb21: {
        return;
    }
}
