// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const ADD_A: (u32, bool) = {
    let mut _0: (u32, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u32>::overflowing_add(const 5_u32, const 2_u32) -> bb1;
    }

    bb1: {
        return;
    }
}

const ADD_B: (u32, bool) = {
    let mut _0: (u32, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u32>::overflowing_add(const _, const 1_u32) -> bb1;
    }

    bb1: {
        return;
    }
}

const SUB_A: (u32, bool) = {
    let mut _0: (u32, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u32>::overflowing_sub(const 5_u32, const 2_u32) -> bb1;
    }

    bb1: {
        return;
    }
}

const SUB_B: (u32, bool) = {
    let mut _0: (u32, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u32>::overflowing_sub(const 0_u32, const 1_u32) -> bb1;
    }

    bb1: {
        return;
    }
}

const MUL_A: (u32, bool) = {
    let mut _0: (u32, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u32>::overflowing_mul(const 5_u32, const 2_u32) -> bb1;
    }

    bb1: {
        return;
    }
}

const MUL_B: (u32, bool) = {
    let mut _0: (u32, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u32>::overflowing_mul(const 1000000000_u32, const 10_u32) -> bb1;
    }

    bb1: {
        return;
    }
}

const SHL_A: (u32, bool) = {
    let mut _0: (u32, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u32>::overflowing_shl(const 1_u32, const 4_u32) -> bb1;
    }

    bb1: {
        return;
    }
}

const SHL_B: (u32, bool) = {
    let mut _0: (u32, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u32>::overflowing_shl(const 1_u32, const 132_u32) -> bb1;
    }

    bb1: {
        return;
    }
}

const SHR_A: (u32, bool) = {
    let mut _0: (u32, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u32>::overflowing_shr(const 16_u32, const 4_u32) -> bb1;
    }

    bb1: {
        return;
    }
}

const SHR_B: (u32, bool) = {
    let mut _0: (u32, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u32>::overflowing_shr(const 16_u32, const 132_u32) -> bb1;
    }

    bb1: {
        return;
    }
}

const NEG_A: (u32, bool) = {
    let mut _0: (u32, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u32>::overflowing_neg(const 0_u32) -> bb1;
    }

    bb1: {
        return;
    }
}

const NEG_B: (u32, bool) = {
    let mut _0: (u32, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u32>::overflowing_neg(const _) -> bb1;
    }

    bb1: {
        return;
    }
}

const ABS_POS: (i32, bool) = {
    let mut _0: (i32, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i32>::overflowing_abs(const 10_i32) -> bb1;
    }

    bb1: {
        return;
    }
}

const ABS_NEG: (i32, bool) = {
    let mut _0: (i32, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i32>::overflowing_abs(const -10_i32) -> bb1;
    }

    bb1: {
        return;
    }
}

const ABS_MIN: (i32, bool) = {
    let mut _0: (i32, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i32>::overflowing_abs(const _) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&(u32, bool), &(u32, bool));
    let mut _2: &(u32, bool);
    let _3: (u32, bool);
    let mut _4: &(u32, bool);
    let _5: (u32, bool);
    let _6: &(u32, bool);
    let _7: &(u32, bool);
    let mut _8: bool;
    let mut _9: bool;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: (&(u32, bool), &(u32, bool));
    let mut _14: &(u32, bool);
    let _15: (u32, bool);
    let mut _16: &(u32, bool);
    let _17: (u32, bool);
    let _18: &(u32, bool);
    let _19: &(u32, bool);
    let mut _20: bool;
    let mut _21: bool;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: (&(u32, bool), &(u32, bool));
    let mut _26: &(u32, bool);
    let _27: (u32, bool);
    let mut _28: &(u32, bool);
    let _29: (u32, bool);
    let _30: &(u32, bool);
    let _31: &(u32, bool);
    let mut _32: bool;
    let mut _33: bool;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _37: (&(u32, bool), &(u32, bool));
    let mut _38: &(u32, bool);
    let _39: (u32, bool);
    let mut _40: &(u32, bool);
    let _41: (u32, bool);
    let _42: &(u32, bool);
    let _43: &(u32, bool);
    let mut _44: bool;
    let mut _45: bool;
    let _47: !;
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _49: (&(u32, bool), &(u32, bool));
    let mut _50: &(u32, bool);
    let _51: (u32, bool);
    let mut _52: &(u32, bool);
    let _53: (u32, bool);
    let _54: &(u32, bool);
    let _55: &(u32, bool);
    let mut _56: bool;
    let mut _57: bool;
    let _59: !;
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _61: (&(u32, bool), &(u32, bool));
    let mut _62: &(u32, bool);
    let _63: (u32, bool);
    let mut _64: &(u32, bool);
    let _65: (u32, bool);
    let _66: &(u32, bool);
    let _67: &(u32, bool);
    let mut _68: bool;
    let mut _69: bool;
    let _71: !;
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _73: (&(u32, bool), &(u32, bool));
    let mut _74: &(u32, bool);
    let _75: (u32, bool);
    let mut _76: &(u32, bool);
    let _77: (u32, bool);
    let _78: &(u32, bool);
    let _79: &(u32, bool);
    let mut _80: bool;
    let mut _81: bool;
    let _83: !;
    let mut _84: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _85: (&(u32, bool), &(u32, bool));
    let mut _86: &(u32, bool);
    let _87: (u32, bool);
    let mut _88: &(u32, bool);
    let _89: (u32, bool);
    let _90: &(u32, bool);
    let _91: &(u32, bool);
    let mut _92: bool;
    let mut _93: bool;
    let _95: !;
    let mut _96: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _97: (&(u32, bool), &(u32, bool));
    let mut _98: &(u32, bool);
    let _99: (u32, bool);
    let mut _100: &(u32, bool);
    let _101: (u32, bool);
    let _102: &(u32, bool);
    let _103: &(u32, bool);
    let mut _104: bool;
    let mut _105: bool;
    let _107: !;
    let mut _108: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _109: (&(u32, bool), &(u32, bool));
    let mut _110: &(u32, bool);
    let _111: (u32, bool);
    let mut _112: &(u32, bool);
    let _113: (u32, bool);
    let _114: &(u32, bool);
    let _115: &(u32, bool);
    let mut _116: bool;
    let mut _117: bool;
    let _119: !;
    let mut _120: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _121: (&(u32, bool), &(u32, bool));
    let mut _122: &(u32, bool);
    let _123: (u32, bool);
    let mut _124: &(u32, bool);
    let _125: (u32, bool);
    let _126: &(u32, bool);
    let _127: &(u32, bool);
    let mut _128: bool;
    let mut _129: bool;
    let _131: !;
    let mut _132: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _133: (&(u32, bool), &(u32, bool));
    let mut _134: &(u32, bool);
    let _135: (u32, bool);
    let mut _136: &(u32, bool);
    let _137: (u32, bool);
    let _138: &(u32, bool);
    let _139: &(u32, bool);
    let mut _140: bool;
    let mut _141: bool;
    let _143: !;
    let mut _144: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _145: (&(i32, bool), &(i32, bool));
    let mut _146: &(i32, bool);
    let _147: (i32, bool);
    let mut _148: &(i32, bool);
    let _149: (i32, bool);
    let _150: &(i32, bool);
    let _151: &(i32, bool);
    let mut _152: bool;
    let mut _153: bool;
    let _155: !;
    let mut _156: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _157: (&(i32, bool), &(i32, bool));
    let mut _158: &(i32, bool);
    let _159: (i32, bool);
    let mut _160: &(i32, bool);
    let _161: (i32, bool);
    let _162: &(i32, bool);
    let _163: &(i32, bool);
    let mut _164: bool;
    let mut _165: bool;
    let _167: !;
    let mut _168: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _169: (&(i32, bool), &(i32, bool));
    let mut _170: &(i32, bool);
    let _171: (i32, bool);
    let mut _172: &(i32, bool);
    let _173: (i32, bool);
    let _174: &(i32, bool);
    let _175: &(i32, bool);
    let mut _176: bool;
    let mut _177: bool;
    let _179: !;
    let mut _180: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }
    scope 3 {
        debug left_val => _18;
        debug right_val => _19;
        let _22: core::panicking::AssertKind;
        scope 4 {
            debug kind => _22;
        }
    }
    scope 5 {
        debug left_val => _30;
        debug right_val => _31;
        let _34: core::panicking::AssertKind;
        scope 6 {
            debug kind => _34;
        }
    }
    scope 7 {
        debug left_val => _42;
        debug right_val => _43;
        let _46: core::panicking::AssertKind;
        scope 8 {
            debug kind => _46;
        }
    }
    scope 9 {
        debug left_val => _54;
        debug right_val => _55;
        let _58: core::panicking::AssertKind;
        scope 10 {
            debug kind => _58;
        }
    }
    scope 11 {
        debug left_val => _66;
        debug right_val => _67;
        let _70: core::panicking::AssertKind;
        scope 12 {
            debug kind => _70;
        }
    }
    scope 13 {
        debug left_val => _78;
        debug right_val => _79;
        let _82: core::panicking::AssertKind;
        scope 14 {
            debug kind => _82;
        }
    }
    scope 15 {
        debug left_val => _90;
        debug right_val => _91;
        let _94: core::panicking::AssertKind;
        scope 16 {
            debug kind => _94;
        }
    }
    scope 17 {
        debug left_val => _102;
        debug right_val => _103;
        let _106: core::panicking::AssertKind;
        scope 18 {
            debug kind => _106;
        }
    }
    scope 19 {
        debug left_val => _114;
        debug right_val => _115;
        let _118: core::panicking::AssertKind;
        scope 20 {
            debug kind => _118;
        }
    }
    scope 21 {
        debug left_val => _126;
        debug right_val => _127;
        let _130: core::panicking::AssertKind;
        scope 22 {
            debug kind => _130;
        }
    }
    scope 23 {
        debug left_val => _138;
        debug right_val => _139;
        let _142: core::panicking::AssertKind;
        scope 24 {
            debug kind => _142;
        }
    }
    scope 25 {
        debug left_val => _150;
        debug right_val => _151;
        let _154: core::panicking::AssertKind;
        scope 26 {
            debug kind => _154;
        }
    }
    scope 27 {
        debug left_val => _162;
        debug right_val => _163;
        let _166: core::panicking::AssertKind;
        scope 28 {
            debug kind => _166;
        }
    }
    scope 29 {
        debug left_val => _174;
        debug right_val => _175;
        let _178: core::panicking::AssertKind;
        scope 30 {
            debug kind => _178;
        }
    }

    bb0: {
        _3 = const _;
        _2 = &_3;
        _5 = (const 7_u32, const false);
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &(u32, bool));
        _7 = (_1.1: &(u32, bool));
        _9 = <(u32, bool) as PartialEq>::eq(_6, _7) -> bb1;
    }

    bb1: {
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<(u32, bool), (u32, bool)>(move _10, _6, _7, move _12);
    }

    bb3: {
        _15 = const _;
        _14 = &_15;
        _17 = (const 0_u32, const true);
        _16 = &_17;
        _13 = (move _14, move _16);
        _18 = (_13.0: &(u32, bool));
        _19 = (_13.1: &(u32, bool));
        _21 = <(u32, bool) as PartialEq>::eq(_18, _19) -> bb4;
    }

    bb4: {
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<(u32, bool), (u32, bool)>(move _22, _18, _19, move _24);
    }

    bb6: {
        _27 = const _;
        _26 = &_27;
        _29 = (const 3_u32, const false);
        _28 = &_29;
        _25 = (move _26, move _28);
        _30 = (_25.0: &(u32, bool));
        _31 = (_25.1: &(u32, bool));
        _33 = <(u32, bool) as PartialEq>::eq(_30, _31) -> bb7;
    }

    bb7: {
        _32 = Not(move _33);
        switchInt(move _32) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = core::panicking::assert_failed::<(u32, bool), (u32, bool)>(move _34, _30, _31, move _36);
    }

    bb9: {
        _39 = const _;
        _38 = &_39;
        _41 = (const _, const true);
        _40 = &_41;
        _37 = (move _38, move _40);
        _42 = (_37.0: &(u32, bool));
        _43 = (_37.1: &(u32, bool));
        _45 = <(u32, bool) as PartialEq>::eq(_42, _43) -> bb10;
    }

    bb10: {
        _44 = Not(move _45);
        switchInt(move _44) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _46 = core::panicking::AssertKind::Eq;
        _48 = Option::<Arguments<'_>>::None;
        _47 = core::panicking::assert_failed::<(u32, bool), (u32, bool)>(move _46, _42, _43, move _48);
    }

    bb12: {
        _51 = const _;
        _50 = &_51;
        _53 = (const 10_u32, const false);
        _52 = &_53;
        _49 = (move _50, move _52);
        _54 = (_49.0: &(u32, bool));
        _55 = (_49.1: &(u32, bool));
        _57 = <(u32, bool) as PartialEq>::eq(_54, _55) -> bb13;
    }

    bb13: {
        _56 = Not(move _57);
        switchInt(move _56) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _58 = core::panicking::AssertKind::Eq;
        _60 = Option::<Arguments<'_>>::None;
        _59 = core::panicking::assert_failed::<(u32, bool), (u32, bool)>(move _58, _54, _55, move _60);
    }

    bb15: {
        _63 = const _;
        _62 = &_63;
        _65 = (const 1410065408_u32, const true);
        _64 = &_65;
        _61 = (move _62, move _64);
        _66 = (_61.0: &(u32, bool));
        _67 = (_61.1: &(u32, bool));
        _69 = <(u32, bool) as PartialEq>::eq(_66, _67) -> bb16;
    }

    bb16: {
        _68 = Not(move _69);
        switchInt(move _68) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _70 = core::panicking::AssertKind::Eq;
        _72 = Option::<Arguments<'_>>::None;
        _71 = core::panicking::assert_failed::<(u32, bool), (u32, bool)>(move _70, _66, _67, move _72);
    }

    bb18: {
        _75 = const _;
        _74 = &_75;
        _77 = (const 16_u32, const false);
        _76 = &_77;
        _73 = (move _74, move _76);
        _78 = (_73.0: &(u32, bool));
        _79 = (_73.1: &(u32, bool));
        _81 = <(u32, bool) as PartialEq>::eq(_78, _79) -> bb19;
    }

    bb19: {
        _80 = Not(move _81);
        switchInt(move _80) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _82 = core::panicking::AssertKind::Eq;
        _84 = Option::<Arguments<'_>>::None;
        _83 = core::panicking::assert_failed::<(u32, bool), (u32, bool)>(move _82, _78, _79, move _84);
    }

    bb21: {
        _87 = const _;
        _86 = &_87;
        _89 = (const 16_u32, const true);
        _88 = &_89;
        _85 = (move _86, move _88);
        _90 = (_85.0: &(u32, bool));
        _91 = (_85.1: &(u32, bool));
        _93 = <(u32, bool) as PartialEq>::eq(_90, _91) -> bb22;
    }

    bb22: {
        _92 = Not(move _93);
        switchInt(move _92) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _94 = core::panicking::AssertKind::Eq;
        _96 = Option::<Arguments<'_>>::None;
        _95 = core::panicking::assert_failed::<(u32, bool), (u32, bool)>(move _94, _90, _91, move _96);
    }

    bb24: {
        _99 = const _;
        _98 = &_99;
        _101 = (const 1_u32, const false);
        _100 = &_101;
        _97 = (move _98, move _100);
        _102 = (_97.0: &(u32, bool));
        _103 = (_97.1: &(u32, bool));
        _105 = <(u32, bool) as PartialEq>::eq(_102, _103) -> bb25;
    }

    bb25: {
        _104 = Not(move _105);
        switchInt(move _104) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _106 = core::panicking::AssertKind::Eq;
        _108 = Option::<Arguments<'_>>::None;
        _107 = core::panicking::assert_failed::<(u32, bool), (u32, bool)>(move _106, _102, _103, move _108);
    }

    bb27: {
        _111 = const _;
        _110 = &_111;
        _113 = (const 1_u32, const true);
        _112 = &_113;
        _109 = (move _110, move _112);
        _114 = (_109.0: &(u32, bool));
        _115 = (_109.1: &(u32, bool));
        _117 = <(u32, bool) as PartialEq>::eq(_114, _115) -> bb28;
    }

    bb28: {
        _116 = Not(move _117);
        switchInt(move _116) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _118 = core::panicking::AssertKind::Eq;
        _120 = Option::<Arguments<'_>>::None;
        _119 = core::panicking::assert_failed::<(u32, bool), (u32, bool)>(move _118, _114, _115, move _120);
    }

    bb30: {
        _123 = const _;
        _122 = &_123;
        _125 = (const 0_u32, const false);
        _124 = &_125;
        _121 = (move _122, move _124);
        _126 = (_121.0: &(u32, bool));
        _127 = (_121.1: &(u32, bool));
        _129 = <(u32, bool) as PartialEq>::eq(_126, _127) -> bb31;
    }

    bb31: {
        _128 = Not(move _129);
        switchInt(move _128) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _130 = core::panicking::AssertKind::Eq;
        _132 = Option::<Arguments<'_>>::None;
        _131 = core::panicking::assert_failed::<(u32, bool), (u32, bool)>(move _130, _126, _127, move _132);
    }

    bb33: {
        _135 = const _;
        _134 = &_135;
        _137 = (const 1_u32, const true);
        _136 = &_137;
        _133 = (move _134, move _136);
        _138 = (_133.0: &(u32, bool));
        _139 = (_133.1: &(u32, bool));
        _141 = <(u32, bool) as PartialEq>::eq(_138, _139) -> bb34;
    }

    bb34: {
        _140 = Not(move _141);
        switchInt(move _140) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _142 = core::panicking::AssertKind::Eq;
        _144 = Option::<Arguments<'_>>::None;
        _143 = core::panicking::assert_failed::<(u32, bool), (u32, bool)>(move _142, _138, _139, move _144);
    }

    bb36: {
        _147 = const _;
        _146 = &_147;
        _149 = (const 10_i32, const false);
        _148 = &_149;
        _145 = (move _146, move _148);
        _150 = (_145.0: &(i32, bool));
        _151 = (_145.1: &(i32, bool));
        _153 = <(i32, bool) as PartialEq>::eq(_150, _151) -> bb37;
    }

    bb37: {
        _152 = Not(move _153);
        switchInt(move _152) -> [0: bb39, otherwise: bb38];
    }

    bb38: {
        _154 = core::panicking::AssertKind::Eq;
        _156 = Option::<Arguments<'_>>::None;
        _155 = core::panicking::assert_failed::<(i32, bool), (i32, bool)>(move _154, _150, _151, move _156);
    }

    bb39: {
        _159 = const _;
        _158 = &_159;
        _161 = (const 10_i32, const false);
        _160 = &_161;
        _157 = (move _158, move _160);
        _162 = (_157.0: &(i32, bool));
        _163 = (_157.1: &(i32, bool));
        _165 = <(i32, bool) as PartialEq>::eq(_162, _163) -> bb40;
    }

    bb40: {
        _164 = Not(move _165);
        switchInt(move _164) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _166 = core::panicking::AssertKind::Eq;
        _168 = Option::<Arguments<'_>>::None;
        _167 = core::panicking::assert_failed::<(i32, bool), (i32, bool)>(move _166, _162, _163, move _168);
    }

    bb42: {
        _171 = const _;
        _170 = &_171;
        _173 = (const _, const true);
        _172 = &_173;
        _169 = (move _170, move _172);
        _174 = (_169.0: &(i32, bool));
        _175 = (_169.1: &(i32, bool));
        _177 = <(i32, bool) as PartialEq>::eq(_174, _175) -> bb43;
    }

    bb43: {
        _176 = Not(move _177);
        switchInt(move _176) -> [0: bb45, otherwise: bb44];
    }

    bb44: {
        _178 = core::panicking::AssertKind::Eq;
        _180 = Option::<Arguments<'_>>::None;
        _179 = core::panicking::assert_failed::<(i32, bool), (i32, bool)>(move _178, _174, _175, move _180);
    }

    bb45: {
        return;
    }
}
