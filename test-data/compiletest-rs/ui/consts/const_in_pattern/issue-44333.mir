// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: usize, _2: usize) -> usize {
    debug a => _1;
    debug b => _2;
    let mut _0: usize;

    bb0: {
        _0 = Add(_1, _2);
        return;
    }
}

fn bar(_1: usize, _2: usize) -> usize {
    debug a => _1;
    debug b => _2;
    let mut _0: usize;

    bb0: {
        _0 = Mul(_1, _2);
        return;
    }
}

fn test(_1: usize) -> fn(usize, usize) -> usize {
    debug x => _1;
    let mut _0: fn(usize, usize) -> usize;
    let mut _2: usize;
    let mut _3: bool;

    bb0: {
        _3 = Eq(const 2_usize, const 0_usize);
        assert(!move _3, "attempt to calculate the remainder of `{}` with a divisor of zero", _1) -> bb1;
    }

    bb1: {
        _2 = Rem(_1, const 2_usize);
        switchInt(move _2) -> [0: bb2, otherwise: bb3];
    }

    bb2: {
        _0 = foo as fn(usize, usize) -> usize (Pointer(ReifyFnPointer));
        goto -> bb4;
    }

    bb3: {
        _0 = bar as fn(usize, usize) -> usize (Pointer(ReifyFnPointer));
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

const FOO: fn(usize, usize) -> usize = {
    let mut _0: fn(usize, usize) -> usize;

    bb0: {
        _0 = foo as fn(usize, usize) -> usize (Pointer(ReifyFnPointer));
        return;
    }
}

const BAR: fn(usize, usize) -> usize = {
    let mut _0: fn(usize, usize) -> usize;

    bb0: {
        _0 = bar as fn(usize, usize) -> usize (Pointer(ReifyFnPointer));
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: fn(usize, usize) -> usize;
    let mut _2: usize;
    let _3: &str;
    let mut _4: bool;
    let mut _5: bool;
    let _6: ();
    let mut _7: std::fmt::Arguments<'_>;
    let mut _8: &[&str];
    let _9: &[&str; 1];
    let _10: [&str; 1];
    let _11: ();
    let mut _12: std::fmt::Arguments<'_>;
    let mut _13: &[&str];
    let _14: &[&str; 1];
    let _15: [&str; 1];
    let mut _16: !;

    bb0: {
        _3 = const _;
        _2 = core::str::<impl str>::len(_3) -> bb1;
    }

    bb1: {
        _1 = test(move _2) -> bb2;
    }

    bb2: {
        _5 = Eq(const {foo as fn(usize, usize) -> usize}, _1);
        switchInt(move _5) -> [0: bb3, otherwise: bb5];
    }

    bb3: {
        _4 = Eq(const {bar as fn(usize, usize) -> usize}, _1);
        switchInt(move _4) -> [0: bb4, otherwise: bb7];
    }

    bb4: {
        _16 = core::panicking::panic(const "internal error: entered unreachable code");
    }

    bb5: {
        _10 = [const "foo\n"];
        _9 = &_10;
        _8 = _9 as &[&str] (Pointer(Unsize));
        _7 = Arguments::<'_>::new_const(move _8) -> bb6;
    }

    bb6: {
        _6 = _print(move _7) -> bb9;
    }

    bb7: {
        _15 = [const "bar\n"];
        _14 = &_15;
        _13 = _14 as &[&str] (Pointer(Unsize));
        _12 = Arguments::<'_>::new_const(move _13) -> bb8;
    }

    bb8: {
        _11 = _print(move _12) -> bb9;
    }

    bb9: {
        return;
    }
}

alloc4 (fn: bar)

alloc2 (fn: foo)
