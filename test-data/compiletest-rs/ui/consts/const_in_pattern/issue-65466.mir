// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/consts/const_in_pattern/issue-65466.rs:5:10: 5:19>::eq(_1: &O<T>, _2: &O<T>) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: (&O<T>, &O<T>);
    let mut _8: isize;
    let mut _9: isize;
    let mut _12: *const T;
    let mut _13: *const T;
    let mut _14: &O<T>;
    let mut _15: &O<T>;
    let mut _16: &O<T>;
    let mut _17: &O<T>;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
            let _10: &*const T;
            let _11: &*const T;
            scope 3 {
                debug __self_0 => _10;
                debug __arg1_0 => _11;
            }
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _5 = Eq(_3, _4);
        switchInt(move _5) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _7 = (_1, _2);
        _14 = deref_copy (_7.0: &O<T>);
        _9 = discriminant((*_14));
        switchInt(move _9) -> [0: bb4, otherwise: bb5];
    }

    bb3: {
        return;
    }

    bb4: {
        _15 = deref_copy (_7.1: &O<T>);
        _8 = discriminant((*_15));
        switchInt(move _8) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _6 = const true;
        goto -> bb7;
    }

    bb6: {
        _16 = deref_copy (_7.0: &O<T>);
        _10 = &(((*_16) as Some).0: *const T);
        _17 = deref_copy (_7.1: &O<T>);
        _11 = &(((*_17) as Some).0: *const T);
        _12 = (*_10);
        _13 = (*_11);
        _6 = Eq(move _12, move _13);
        goto -> bb7;
    }

    bb7: {
        _0 = move _6;
        goto -> bb3;
    }
}

fn <impl at ui/consts/const_in_pattern/issue-65466.rs:5:21: 5:23>::assert_receiver_is_total_eq(_1: &O<T>) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

const C: &[O<B>] = {
    let mut _0: &[O<B>];
    let mut _1: &[O<B>; 1];
    let _2: &[O<B>; 1];
    let _3: [O<B>; 1];
    let mut _4: O<B>;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = O::<B>::None;
        _3 = [move _4];
        StorageDead(_4);
        _2 = &_3;
        _1 = &(*_2);
        _0 = move _1 as &[O<B>] (Pointer(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: O<B>;
    let _2: &[O<B>];
    let mut _3: &[O<B>; 1];
    let _4: [O<B>; 1];
    scope 1 {
        debug x => _1;
    }

    bb0: {
        _1 = O::<B>::None;
        _4 = [move _1];
        _3 = &_4;
        _2 = <[O<B>; 1] as Index<RangeFull>>::index(move _3, const RangeFull) -> bb1;
    }

    bb1: {
        return;
    }
}

fn O::Some(_1: *const T) -> O<T> {
    let mut _0: O<T>;

    bb0: {
        _0 = O::<T>::Some(move _1);
        return;
    }
}

// MIR FOR CTFE
fn O::Some(_1: *const T) -> O<T> {
    let mut _0: O<T>;

    bb0: {
        _0 = O::<T>::Some(move _1);
        return;
    }
}
