// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/consts/const_in_pattern/issue-62614.rs:5:1: 5:23>::eq(_1: &Sum, _2: &Sum) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: u32;
    let mut _4: u32;
    let mut _5: u32;
    let mut _6: u32;
    let mut _7: u32;
    let mut _8: u32;

    bb0: {
        _4 = ((*_1).0: u32);
        _5 = ((*_1).1: u32);
        _3 = Add(move _4, move _5);
        _7 = ((*_2).0: u32);
        _8 = ((*_2).1: u32);
        _6 = Add(move _7, move _8);
        _0 = Eq(move _3, move _6);
        return;
    }
}

fn <impl at ui/consts/const_in_pattern/issue-62614.rs:11:10: 11:19>::eq(_1: &Eek, _2: &Eek) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: (&Eek, &Eek);
    let mut _8: isize;
    let mut _9: isize;
    let mut _12: &Eek;
    let mut _13: &Eek;
    let mut _14: &Eek;
    let mut _15: &Eek;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
            let _10: &Sum;
            let _11: &Sum;
            scope 3 {
                debug __self_0 => _10;
                debug __arg1_0 => _11;
            }
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _5 = Eq(_3, _4);
        switchInt(move _5) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _7 = (_1, _2);
        _12 = deref_copy (_7.0: &Eek);
        _9 = discriminant((*_12));
        switchInt(move _9) -> [1: bb5, otherwise: bb4];
    }

    bb3: {
        return;
    }

    bb4: {
        _6 = const true;
        goto -> bb7;
    }

    bb5: {
        _13 = deref_copy (_7.1: &Eek);
        _8 = discriminant((*_13));
        switchInt(move _8) -> [1: bb6, otherwise: bb4];
    }

    bb6: {
        _14 = deref_copy (_7.0: &Eek);
        _10 = &(((*_14) as UnusedByTheConst).0: Sum);
        _15 = deref_copy (_7.1: &Eek);
        _11 = &(((*_15) as UnusedByTheConst).0: Sum);
        _6 = <Sum as PartialEq>::eq(_10, _11) -> bb7;
    }

    bb7: {
        _0 = move _6;
        goto -> bb3;
    }
}

fn <impl at ui/consts/const_in_pattern/issue-62614.rs:11:21: 11:23>::assert_receiver_is_total_eq(_1: &Eek) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

const THE_CONST: Eek = {
    let mut _0: Eek;

    bb0: {
        _0 = Eek::TheConst;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: Eek;
    let mut _2: Sum;
    let mut _3: isize;
    let mut _4: !;

    bb0: {
        _2 = Sum(const 1_u32, const 2_u32);
        _1 = Eek::UnusedByTheConst(move _2);
        _3 = discriminant(_1);
        switchInt(move _3) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        return;
    }

    bb2: {
        _4 = begin_panic::<&str>(const "explicit panic");
    }
}

fn Sum(_1: u32, _2: u32) -> Sum {
    let mut _0: Sum;

    bb0: {
        _0 = Sum(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn Sum(_1: u32, _2: u32) -> Sum {
    let mut _0: Sum;

    bb0: {
        _0 = Sum(move _1, move _2);
        return;
    }
}

fn Eek::UnusedByTheConst(_1: Sum) -> Eek {
    let mut _0: Eek;

    bb0: {
        _0 = Eek::UnusedByTheConst(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Eek::UnusedByTheConst(_1: Sum) -> Eek {
    let mut _0: Eek;

    bb0: {
        _0 = Eek::UnusedByTheConst(move _1);
        return;
    }
}
