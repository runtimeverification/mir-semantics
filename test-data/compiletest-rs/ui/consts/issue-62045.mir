// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (&&mut [i32], &&mut [i32; 0]);
    let mut _2: &&mut [i32];
    let _3: &mut [i32];
    let mut _4: &mut [i32];
    let mut _5: &mut [i32; 1];
    let mut _6: [i32; 1];
    let mut _7: &&mut [i32; 0];
    let _8: &mut [i32; 0];
    let mut _9: [i32; 0];
    let _10: &&mut [i32];
    let _11: &&mut [i32; 0];
    let mut _12: bool;
    let mut _13: bool;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _10;
        debug right_val => _11;
        let _14: core::panicking::AssertKind;
        scope 2 {
            debug kind => _14;
        }
    }

    bb0: {
        _6 = [const 0_i32; 1];
        _5 = &mut _6;
        _4 = <[i32; 1] as IndexMut<RangeFull>>::index_mut(move _5, const RangeFull) -> bb1;
    }

    bb1: {
        _3 = _4;
        _2 = &_3;
        _8 = &mut _9;
        _7 = &_8;
        _1 = (move _2, move _7);
        _10 = (_1.0: &&mut [i32]);
        _11 = (_1.1: &&mut [i32; 0]);
        _13 = <&mut [i32] as PartialEq<&mut [i32; 0]>>::eq(_10, _11) -> bb2;
    }

    bb2: {
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<&mut [i32], &mut [i32; 0]>(move _14, _10, _11, move _16);
    }

    bb4: {
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}
