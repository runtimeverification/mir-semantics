// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn testfn(_1: &mut [(); 0]) -> () {
    debug _arr => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

testfn::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

<impl at ui/consts/self_normalization.rs:9:1: 9:27>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

fn <impl at ui/consts/self_normalization.rs:9:1: 9:27>::method() -> () {
    let mut _0: ();
    let mut _1: [(); 0];
    let _2: ();
    let mut _3: &mut [(); 0];
    scope 1 {
        debug arr => const [];
    }

    bb0: {
        _3 = &mut _1;
        _2 = testfn(_3) -> bb1;
    }

    bb1: {
        return;
    }
}

<impl at ui/consts/self_normalization.rs:9:1: 9:27>::method::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
