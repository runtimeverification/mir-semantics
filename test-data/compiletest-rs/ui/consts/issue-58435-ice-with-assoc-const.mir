// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const <impl at ui/consts/issue-58435-ice-with-assoc-const.rs:7:1: 7:13>::ID: for<'a> fn(&'a S<T>) -> &'a S<T> = {
    let mut _0: for<'a> fn(&'a S<T>) -> &'a S<T>;
    let mut _1: [closure@ui/consts/issue-58435-ice-with-assoc-const.rs:8:36: 8:39];

    bb0: {
        StorageLive(_1);
        _1 = [closure@ui/consts/issue-58435-ice-with-assoc-const.rs:8:36: 8:39];
        _0 = move _1 as for<'a> fn(&'a S<T>) -> &'a S<T> (Pointer(ClosureFnPointer(Normal)));
        StorageDead(_1);
        return;
    }
}

fn <impl at ui/consts/issue-58435-ice-with-assoc-const.rs:7:1: 7:13>::ID::{closure#0}(_1: &[closure@ui/consts/issue-58435-ice-with-assoc-const.rs:8:36: 8:39], _2: &S<T>) -> &S<T> {
    debug s => _2;
    let mut _0: &S<T>;

    bb0: {
        _0 = _2;
        return;
    }
}

fn <impl at ui/consts/issue-58435-ice-with-assoc-const.rs:7:1: 7:13>::id(_1: &S<T>) -> &S<T> {
    debug self => _1;
    let mut _0: &S<T>;
    let _2: &S<T>;

    bb0: {
        _2 = const _(_1) -> bb1;
    }

    bb1: {
        _0 = _2;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: S<u32>;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: u32;
    let mut _5: &S<u32>;
    let _6: &S<u32>;
    let mut _7: !;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: u32;
    let mut _11: &S<u32>;
    let mut _12: &S<u32>;
    let mut _13: !;
    scope 1 {
        debug s => _1;
    }

    bb0: {
        _1 = S::<u32>(const 10_u32);
        _6 = &_1;
        _5 = const _(_6) -> bb1;
    }

    bb1: {
        _4 = ((*_5).0: u32);
        _3 = Eq(move _4, const 10_u32);
        _2 = Not(move _3);
        switchInt(move _2) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _7 = core::panicking::panic(const "assertion failed: S::<u32>::ID(&s).0 == 10");
    }

    bb3: {
        _12 = &_1;
        _11 = S::<u32>::id(move _12) -> bb4;
    }

    bb4: {
        _10 = ((*_11).0: u32);
        _9 = Eq(move _10, const 10_u32);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _13 = core::panicking::panic(const "assertion failed: s.id().0 == 10");
    }

    bb6: {
        return;
    }
}

fn S(_1: T) -> S<T> {
    let mut _0: S<T>;

    bb0: {
        _0 = S::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn S(_1: T) -> S<T> {
    let mut _0: S<T>;

    bb0: {
        _0 = S::<T>(move _1);
        return;
    }
}
