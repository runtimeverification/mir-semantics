// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: &[&dyn Trait];
    let _2: &[&dyn Trait; 1];
    let _3: [&dyn Trait; 1];
    let _4: &dyn Trait;
    let _5: &Bar;
    let _6: Bar;
    scope 1 {
        debug x => _1;
    }

    bb0: {
        _5 = &_6;
        _4 = _5 as &dyn Trait (Pointer(Unsize));
        _3 = [_4];
        _2 = &_3;
        _1 = _2 as &[&dyn Trait] (Pointer(Unsize));
        return;
    }
}

const UTF_8: &UTF8Encoding = {
    let mut _0: &UTF8Encoding;
    let _1: &UTF8Encoding;
    let _2: UTF8Encoding;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = UTF8Encoding;
        _1 = &_2;
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

fn f() -> &dyn Encoding {
    let mut _0: &dyn Encoding;
    let _1: &UTF8Encoding;

    bb0: {
        _1 = const _;
        _0 = _1 as &dyn Encoding (Pointer(Unsize));
        return;
    }
}

const FOO: &dyn Trait = {
    let mut _0: &dyn Trait;
    let mut _1: &Bar;
    let _2: &Bar;
    let _3: Bar;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = Bar;
        _2 = &_3;
        _1 = &(*_2);
        _0 = move _1 as &dyn Trait (Pointer(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

const BAR: &dyn Trait = {
    let mut _0: &dyn Trait;
    let mut _1: &dyn Trait;
    let _2: &dyn Trait;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const _;
        _1 = &(*_2);
        _0 = move _1 as &dyn Trait (Pointer(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

fn foo() -> () {
    let mut _0: ();
    let _1: &dyn Trait;
    scope 1 {
        debug _x => _1;
    }

    bb0: {
        _1 = const _;
        return;
    }
}
