// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

static bare_fns: &[fn()] = {
    let mut _0: &[fn()];
    let mut _1: &[fn(); 2];
    let _2: &[fn(); 2];
    let _3: [fn(); 2];
    let mut _4: fn();
    let mut _5: fn();

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = f as fn() (Pointer(ReifyFnPointer));
        StorageLive(_5);
        _5 = f as fn() (Pointer(ReifyFnPointer));
        _3 = [move _4, move _5];
        StorageDead(_5);
        StorageDead(_4);
        _2 = &_3;
        _1 = &(*_2);
        _0 = move _1 as &[fn()] (Pointer(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

static mut closures: &mut [S<fn()>] = {
    let mut _0: &mut [S<fn()>];
    let mut _1: &mut [S<fn()>; 2];
    let mut _2: &mut [S<fn()>; 2];
    let mut _3: [S<fn()>; 2];
    let mut _4: S<fn()>;
    let mut _5: fn();
    let mut _6: S<fn()>;
    let mut _7: fn();

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = f as fn() (Pointer(ReifyFnPointer));
        _4 = S::<fn()>(move _5);
        StorageDead(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = f as fn() (Pointer(ReifyFnPointer));
        _6 = S::<fn()>(move _7);
        StorageDead(_7);
        _3 = [move _4, move _6];
        StorageDead(_6);
        StorageDead(_4);
        _2 = &mut _3;
        _1 = &mut (*_2);
        _0 = move _1 as &mut [S<fn()>] (Pointer(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: std::slice::Iter<'_, fn()>;
    let mut _2: &[fn()];
    let mut _3: &&[fn()];
    let _5: ();
    let mut _6: std::option::Option<&fn()>;
    let mut _7: &mut std::slice::Iter<'_, fn()>;
    let mut _8: isize;
    let mut _10: std::slice::IterMut<'_, S<fn()>>;
    let mut _11: *mut &mut [S<fn()>];
    let _13: ();
    let mut _14: std::option::Option<&mut S<fn()>>;
    let mut _15: &mut std::slice::IterMut<'_, S<fn()>>;
    let mut _16: isize;
    let mut _19: fn();
    let mut _20: &fn();
    let mut _21: &mut [S<fn()>];
    scope 1 {
        let mut _4: std::slice::Iter<'_, fn()>;
        let mut _12: std::slice::IterMut<'_, S<fn()>>;
        let mut _22: *const ();
        let mut _23: usize;
        let mut _24: usize;
        let mut _25: usize;
        let mut _26: usize;
        let mut _27: bool;
        scope 2 {
            debug iter => _4;
            let _9: fn();
            scope 3 {
                debug bare_fn => _9;
            }
        }
        scope 4 {
            debug iter => _12;
            let _17: &mut S<fn()>;
            scope 5 {
                debug closure => _17;
                let _18: &mut fn();
                scope 6 {
                    debug closure => _18;
                }
            }
        }
    }

    bb0: {
        _3 = const {alloc1: &&[fn()]};
        _2 = (*_3);
        _1 = <&[fn()] as IntoIterator>::into_iter(move _2) -> bb1;
    }

    bb1: {
        _4 = move _1;
        goto -> bb2;
    }

    bb2: {
        _7 = &mut _4;
        _6 = <std::slice::Iter<'_, fn()> as Iterator>::next(_7) -> bb3;
    }

    bb3: {
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        _20 = deref_copy ((_6 as Some).0: &fn());
        _9 = (*_20);
        _5 = _9() -> bb2;
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _11 = const {alloc2: *mut &mut [S<fn()>]};
        _22 = _11 as *const () (PtrToPtr);
        _23 = _22 as usize (Transmute);
        _24 = AlignOf(&mut [S<fn()>]);
        _25 = Sub(_24, const 1_usize);
        _26 = BitAnd(_23, _25);
        _27 = Eq(_26, const 0_usize);
        assert(_27, "misaligned pointer dereference: address must be a multiple of {} but is {}", _24, _23) -> [success: bb12, unwind unreachable];
    }

    bb7: {
        _12 = move _10;
        goto -> bb8;
    }

    bb8: {
        _15 = &mut _12;
        _14 = <std::slice::IterMut<'_, S<fn()>> as Iterator>::next(_15) -> bb9;
    }

    bb9: {
        _16 = discriminant(_14);
        switchInt(move _16) -> [0: bb11, 1: bb10, otherwise: bb5];
    }

    bb10: {
        _17 = move ((_14 as Some).0: &mut S<fn()>);
        _18 = &mut ((*_17).0: fn());
        _19 = (*_18);
        _13 = move _19() -> bb8;
    }

    bb11: {
        return;
    }

    bb12: {
        _21 = deref_copy (*_11);
        _10 = <&mut [S<fn()>] as IntoIterator>::into_iter(_21) -> bb7;
    }
}

alloc2 (static: closures, size: 16, align: 8) {
    ╾───────alloc11───────╼ 02 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc11 (size: 16, align: 8) {
    ╾───────alloc6────────╼ ╾───────alloc6────────╼ │ ╾──────╼╾──────╼
}

alloc6 (fn: f)

alloc1 (static: bare_fns, size: 16, align: 8) {
    ╾───────alloc7────────╼ 02 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc7 (size: 16, align: 8) {
    ╾───────alloc6────────╼ ╾───────alloc6────────╼ │ ╾──────╼╾──────╼
}

fn S(_1: F) -> S<F> {
    let mut _0: S<F>;

    bb0: {
        _0 = S::<F>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn S(_1: F) -> S<F> {
    let mut _0: S<F>;

    bb0: {
        _0 = S::<F>(move _1);
        return;
    }
}
