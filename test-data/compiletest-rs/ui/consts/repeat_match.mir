// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const X: [u8; 1] = {
    let mut _0: [u8; 1];

    bb0: {
        _0 = [const 0_u8; 1];
        return;
    }
}

X::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

X::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: &[u8; 1];
    let _2: [u8; 1];
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let _6: &[&str; 1];
    let _7: [&str; 1];
    let _8: ();
    let mut _9: std::fmt::Arguments<'_>;
    let mut _10: &[&str];
    let _11: &[&str; 1];
    let _12: [&str; 1];

    bb0: {
        _2 = const _;
        _1 = &_2;
        switchInt((*_1)[0 of 1]) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _12 = [const "b\n"];
        _11 = &_12;
        _10 = _11 as &[&str] (Pointer(Unsize));
        _9 = Arguments::<'_>::new_const(move _10) -> bb4;
    }

    bb2: {
        _7 = [const "a\n"];
        _6 = &_7;
        _5 = _6 as &[&str] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_const(move _5) -> bb3;
    }

    bb3: {
        _3 = _print(move _4) -> bb5;
    }

    bb4: {
        _8 = _print(move _9) -> bb5;
    }

    bb5: {
        return;
    }
}
