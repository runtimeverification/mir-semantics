// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo1(_1: u8) -> u8 {
    debug val => _1;
    let mut _0: u8;

    bb0: {
        _0 = Add(_1, const 1_u8);
        return;
    }
}

// MIR FOR CTFE
fn foo1(_1: u8) -> u8 {
    debug val => _1;
    let mut _0: u8;
    let mut _2: u8;

    bb0: {
        StorageLive(_2);
        _2 = _1;
        _0 = Add(move _2, const 1_u8);
        StorageDead(_2);
        return;
    }
}

fn foo2(_1: u8) -> u8 {
    debug val => _1;
    let mut _0: u8;

    bb0: {
        _0 = Add(_1, const 1_u8);
        return;
    }
}

// MIR FOR CTFE
fn foo2(_1: u8) -> u8 {
    debug val => _1;
    let mut _0: u8;
    let mut _2: u8;

    bb0: {
        StorageLive(_2);
        _2 = _1;
        _0 = Add(move _2, const 1_u8);
        StorageDead(_2);
        return;
    }
}

fn bar1(_1: bool) -> bool {
    debug val => _1;
    let mut _0: bool;

    bb0: {
        _0 = Not(_1);
        return;
    }
}

// MIR FOR CTFE
fn bar1(_1: bool) -> bool {
    debug val => _1;
    let mut _0: bool;
    let mut _2: bool;

    bb0: {
        StorageLive(_2);
        _2 = _1;
        _0 = Not(move _2);
        StorageDead(_2);
        return;
    }
}

fn bar2(_1: bool) -> bool {
    debug val => _1;
    let mut _0: bool;

    bb0: {
        _0 = Not(_1);
        return;
    }
}

// MIR FOR CTFE
fn bar2(_1: bool) -> bool {
    debug val => _1;
    let mut _0: bool;
    let mut _2: bool;

    bb0: {
        StorageLive(_2);
        _2 = _1;
        _0 = Not(move _2);
        StorageDead(_2);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: [u8; 26];
    let mut _3: (&[u8; 26], &[u8; 26]);
    let mut _4: &[u8; 26];
    let mut _5: &[u8; 26];
    let mut _8: bool;
    let mut _9: bool;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: !;
    let mut _18: (&bool, &bool);
    let mut _19: &bool;
    let mut _20: &bool;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: bool;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug a => _1;
        let _2: [u8; 26];
        scope 2 {
            debug b => _2;
            let _6: &[u8; 26];
            let _7: &[u8; 26];
            let _13: bool;
            scope 3 {
                debug left_val => _6;
                debug right_val => _7;
                let _10: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _10;
                }
            }
            scope 5 {
                debug bar1_res => _13;
                let _14: bool;
                scope 7 {
                    debug bar2_res => _14;
                    let _21: &bool;
                    let _22: &bool;
                    let _30: extern "C" fn(u8) -> u8;
                    scope 9 {
                        debug left_val => _21;
                        debug right_val => _22;
                        let _27: core::panicking::AssertKind;
                        scope 10 {
                            debug kind => _27;
                        }
                    }
                    scope 11 {
                        debug _foo1_cast => _30;
                        let _31: extern "C" fn(u8) -> u8;
                        scope 12 {
                            debug _foo2_cast => _31;
                            let _32: unsafe extern "C" fn(bool) -> bool;
                            scope 13 {
                                debug _bar1_cast => _32;
                                let _33: unsafe extern "C" fn(bool) -> bool;
                                scope 14 {
                                    debug _bar2_cast => _33;
                                }
                            }
                        }
                    }
                }
                scope 8 {
                }
            }
            scope 6 {
            }
        }
    }

    bb0: {
        _1 = [const 0_u8; 26];
        _2 = [const 0_u8; 26];
        _4 = &_1;
        _5 = &_2;
        _3 = (move _4, move _5);
        _6 = (_3.0: &[u8; 26]);
        _7 = (_3.1: &[u8; 26]);
        _9 = <[u8; 26] as PartialEq>::eq(_6, _7) -> bb1;
    }

    bb1: {
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<[u8; 26], [u8; 26]>(move _10, _6, _7, move _12);
    }

    bb3: {
        _13 = bar1(const false) -> bb4;
    }

    bb4: {
        _14 = bar2(const false) -> bb5;
    }

    bb5: {
        _16 = _13;
        _15 = Not(move _16);
        switchInt(move _15) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _17 = core::panicking::panic(const "assertion failed: bar1_res");
    }

    bb7: {
        _19 = &_13;
        _20 = &_14;
        _18 = (move _19, move _20);
        _21 = (_18.0: &bool);
        _22 = (_18.1: &bool);
        _25 = (*_21);
        _26 = (*_22);
        _24 = Eq(move _25, move _26);
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<bool, bool>(move _27, _21, _22, move _29);
    }

    bb9: {
        _30 = foo1 as extern "C" fn(u8) -> u8 (Pointer(ReifyFnPointer));
        _31 = foo2 as extern "C" fn(u8) -> u8 (Pointer(ReifyFnPointer));
        _32 = bar1 as unsafe extern "C" fn(bool) -> bool (Pointer(ReifyFnPointer));
        _33 = bar2 as unsafe extern "C" fn(bool) -> bool (Pointer(ReifyFnPointer));
        return;
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 26_usize;
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: u8;

    bb0: {
        StorageLive(_1);
        ConstEvalCounter;
        _1 = foo1(const 25_u8) -> bb1;
    }

    bb1: {
        _0 = move _1 as usize (IntToInt);
        StorageDead(_1);
        return;
    }
}

main::{constant#3}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 26_usize;
        return;
    }
}

main::{constant#2}: usize = {
    let mut _0: usize;
    let mut _1: u8;

    bb0: {
        StorageLive(_1);
        ConstEvalCounter;
        _1 = foo2(const 25_u8) -> bb1;
    }

    bb1: {
        _0 = move _1 as usize (IntToInt);
        StorageDead(_1);
        return;
    }
}
