// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/consts/unstable-precise-live-drops-in-libcore.rs:12:1: 12:21>::unwrap(_1: Either<T, T>) -> T {
    debug self => _1;
    let mut _0: T;
    let mut _2: isize;
    let _3: T;
    let _4: T;
    scope 1 {
        debug t => _3;
    }
    scope 2 {
        debug t => _4;
    }

    bb0: {
        _2 = discriminant(_1);
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _4 = move ((_1 as Right).0: T);
        _0 = move _4;
        goto -> bb4;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _3 = move ((_1 as Left).0: T);
        _0 = move _3;
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

// MIR FOR CTFE
fn <impl at ui/consts/unstable-precise-live-drops-in-libcore.rs:12:1: 12:21>::unwrap(_1: Either<T, T>) -> T {
    debug self => _1;
    let mut _0: T;
    let mut _2: isize;
    let _3: T;
    let _4: T;
    scope 1 {
        debug t => _3;
    }
    scope 2 {
        debug t => _4;
    }

    bb0: {
        _2 = discriminant(_1);
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        StorageLive(_4);
        _4 = move ((_1 as Right).0: T);
        _0 = move _4;
        StorageDead(_4);
        goto -> bb4;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        StorageLive(_3);
        _3 = move ((_1 as Left).0: T);
        _0 = move _3;
        StorageDead(_3);
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn Either::Left(_1: T) -> Either<T, S> {
    let mut _0: Either<T, S>;

    bb0: {
        _0 = Either::<T, S>::Left(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Either::Left(_1: T) -> Either<T, S> {
    let mut _0: Either<T, S>;

    bb0: {
        _0 = Either::<T, S>::Left(move _1);
        return;
    }
}

fn Either::Right(_1: S) -> Either<T, S> {
    let mut _0: Either<T, S>;

    bb0: {
        _0 = Either::<T, S>::Right(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Either::Right(_1: S) -> Either<T, S> {
    let mut _0: Either<T, S>;

    bb0: {
        _0 = Either::<T, S>::Right(move _1);
        return;
    }
}
