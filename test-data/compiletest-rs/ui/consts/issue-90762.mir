// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/consts/issue-90762.rs:8:1: 8:20>::drop(_1: &mut Print) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 2];
    let _6: [&str; 2];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &usize;
    let _12: ();
    let mut _13: &std::sync::atomic::AtomicBool;
    let _14: &[std::sync::atomic::AtomicBool; 3];
    let _15: usize;
    let mut _16: usize;
    let mut _17: bool;
    let mut _18: std::sync::atomic::Ordering;
    let mut _19: (&usize, &usize);
    let mut _20: &usize;
    let _21: usize;
    let _22: &std::sync::atomic::AtomicUsize;
    let mut _23: std::sync::atomic::Ordering;
    let mut _24: &usize;
    let _25: &usize;
    let _26: &usize;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: usize;
    let mut _30: usize;
    let _32: !;
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _25;
        debug right_val => _26;
        let _31: core::panicking::AssertKind;
        scope 2 {
            debug kind => _31;
        }
    }

    bb0: {
        _6 = [const "", const "\n"];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _11 = &((*_1).0: usize);
        _10 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_11) -> bb1;
    }

    bb1: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb2;
    }

    bb2: {
        _2 = _print(move _3) -> bb3;
    }

    bb3: {
        _14 = const {alloc1: &[AtomicBool; 3]};
        _15 = ((*_1).0: usize);
        _16 = const 3_usize;
        _17 = Lt(_15, _16);
        assert(move _17, "index out of bounds: the length is {} but the index is {}", move _16, _15) -> bb4;
    }

    bb4: {
        _13 = &(*_14)[_15];
        _18 = Relaxed;
        _12 = AtomicBool::store(move _13, const true, move _18) -> bb5;
    }

    bb5: {
        _22 = const {alloc2: &AtomicUsize};
        _23 = Relaxed;
        _21 = AtomicUsize::fetch_sub(_22, const 1_usize, move _23) -> bb6;
    }

    bb6: {
        _20 = &_21;
        _24 = &((*_1).0: usize);
        _19 = (move _20, move _24);
        _25 = (_19.0: &usize);
        _26 = (_19.1: &usize);
        _29 = (*_25);
        _30 = (*_26);
        _28 = Eq(move _29, move _30);
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _31 = core::panicking::AssertKind::Eq;
        _33 = Option::<Arguments<'_>>::None;
        _32 = core::panicking::assert_failed::<usize, usize>(move _31, _25, _26, move _33);
    }

    bb8: {
        return;
    }
}

alloc2 (static: BAR, size: 8, align: 8) {
    02 00 00 00 00 00 00 00                         │ ........
}

alloc1 (static: FOO, size: 3, align: 1) {
    00 00 00                                        │ ...
}

const A: Print = {
    let mut _0: Print;

    bb0: {
        _0 = Print(const 0_usize);
        return;
    }
}

const B: Print = {
    let mut _0: Print;

    bb0: {
        _0 = Print(const 1_usize);
        return;
    }
}

static FOO: [AtomicBool; 3] = {
    let mut _0: [std::sync::atomic::AtomicBool; 3];
    let mut _1: std::sync::atomic::AtomicBool;
    let mut _2: std::sync::atomic::AtomicBool;
    let mut _3: std::sync::atomic::AtomicBool;

    bb0: {
        StorageLive(_1);
        ConstEvalCounter;
        _1 = AtomicBool::new(const false) -> bb1;
    }

    bb1: {
        StorageLive(_2);
        ConstEvalCounter;
        _2 = AtomicBool::new(const false) -> bb2;
    }

    bb2: {
        StorageLive(_3);
        ConstEvalCounter;
        _3 = AtomicBool::new(const false) -> bb3;
    }

    bb3: {
        _0 = [move _1, move _2, move _3];
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

FOO::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

static BAR: AtomicUsize = {
    let mut _0: std::sync::atomic::AtomicUsize;

    bb0: {
        ConstEvalCounter;
        _0 = AtomicUsize::new(const 2_usize) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: Print;
    let mut _2: Print;
    let mut _3: Print;
    let mut _4: std::iter::Enumerate<std::slice::Iter<'_, std::sync::atomic::AtomicBool>>;
    let mut _5: std::iter::Enumerate<std::slice::Iter<'_, std::sync::atomic::AtomicBool>>;
    let mut _6: std::slice::Iter<'_, std::sync::atomic::AtomicBool>;
    let mut _7: &[std::sync::atomic::AtomicBool];
    let _8: &[std::sync::atomic::AtomicBool; 3];
    let mut _9: std::iter::Enumerate<std::slice::Iter<'_, std::sync::atomic::AtomicBool>>;
    let mut _10: std::option::Option<(usize, &std::sync::atomic::AtomicBool)>;
    let mut _11: &mut std::iter::Enumerate<std::slice::Iter<'_, std::sync::atomic::AtomicBool>>;
    let mut _12: isize;
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: std::sync::atomic::Ordering;
    let _18: !;
    let mut _19: std::fmt::Arguments<'_>;
    let mut _20: &[&str];
    let _21: &[&str; 2];
    let _22: [&str; 2];
    let mut _23: &[core::fmt::rt::Argument<'_>];
    let _24: &[core::fmt::rt::Argument<'_>; 1];
    let _25: [core::fmt::rt::Argument<'_>; 1];
    let mut _26: core::fmt::rt::Argument<'_>;
    let _27: &usize;
    let mut _28: (&usize, &usize);
    let mut _29: &usize;
    let _30: usize;
    let _31: &std::sync::atomic::AtomicUsize;
    let mut _32: std::sync::atomic::Ordering;
    let mut _33: &usize;
    let _34: usize;
    let _35: &usize;
    let _36: &usize;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: usize;
    let mut _40: usize;
    let _42: !;
    let mut _43: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug iter => _9;
        let _13: usize;
        let _14: &std::sync::atomic::AtomicBool;
        scope 2 {
            debug i => _13;
            debug b => _14;
        }
    }
    scope 3 {
        debug left_val => _35;
        debug right_val => _36;
        let _41: core::panicking::AssertKind;
        scope 4 {
            debug kind => _41;
        }
    }

    bb0: {
        _1 = const _;
        _2 = const _;
        _3 = Print(const 2_usize);
        drop(_3) -> [return: bb1, unwind: bb20];
    }

    bb1: {
        drop(_2) -> [return: bb2, unwind: bb21];
    }

    bb2: {
        drop(_1) -> bb3;
    }

    bb3: {
        _8 = const {alloc1: &[AtomicBool; 3]};
        _7 = _8 as &[std::sync::atomic::AtomicBool] (Pointer(Unsize));
        _6 = core::slice::<impl [AtomicBool]>::iter(move _7) -> bb4;
    }

    bb4: {
        _5 = <std::slice::Iter<'_, AtomicBool> as Iterator>::enumerate(move _6) -> bb5;
    }

    bb5: {
        _4 = <Enumerate<std::slice::Iter<'_, AtomicBool>> as IntoIterator>::into_iter(move _5) -> bb6;
    }

    bb6: {
        _9 = move _4;
        goto -> bb7;
    }

    bb7: {
        _11 = &mut _9;
        _10 = <Enumerate<std::slice::Iter<'_, AtomicBool>> as Iterator>::next(_11) -> bb8;
    }

    bb8: {
        _12 = discriminant(_10);
        switchInt(move _12) -> [0: bb11, 1: bb9, otherwise: bb10];
    }

    bb9: {
        _13 = (((_10 as Some).0: (usize, &std::sync::atomic::AtomicBool)).0: usize);
        _14 = (((_10 as Some).0: (usize, &std::sync::atomic::AtomicBool)).1: &std::sync::atomic::AtomicBool);
        _17 = Relaxed;
        _16 = AtomicBool::load(_14, move _17) -> bb12;
    }

    bb10: {
        unreachable;
    }

    bb11: {
        _31 = const {alloc2: &AtomicUsize};
        _32 = Relaxed;
        _30 = AtomicUsize::fetch_add(_31, const 1_usize, move _32) -> bb16;
    }

    bb12: {
        _15 = Not(move _16);
        switchInt(move _15) -> [0: bb7, otherwise: bb13];
    }

    bb13: {
        _22 = [const "", const " not set"];
        _21 = &_22;
        _20 = _21 as &[&str] (Pointer(Unsize));
        _27 = &_13;
        _26 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_27) -> bb14;
    }

    bb14: {
        _25 = [move _26];
        _24 = &_25;
        _23 = _24 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _19 = Arguments::<'_>::new_v1(move _20, move _23) -> bb15;
    }

    bb15: {
        _18 = panic_fmt(move _19);
    }

    bb16: {
        _29 = &_30;
        _34 = core::num::<impl usize>::max_value() -> bb17;
    }

    bb17: {
        _33 = &_34;
        _28 = (move _29, move _33);
        _35 = (_28.0: &usize);
        _36 = (_28.1: &usize);
        _39 = (*_35);
        _40 = (*_36);
        _38 = Eq(move _39, move _40);
        _37 = Not(move _38);
        switchInt(move _37) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _41 = core::panicking::AssertKind::Eq;
        _43 = Option::<Arguments<'_>>::None;
        _42 = core::panicking::assert_failed::<usize, usize>(move _41, _35, _36, move _43);
    }

    bb19: {
        return;
    }

    bb20 (cleanup): {
        drop(_2) -> [return: bb21, unwind terminate];
    }

    bb21 (cleanup): {
        drop(_1) -> [return: bb22, unwind terminate];
    }

    bb22 (cleanup): {
        resume;
    }
}

alloc2 (static: BAR, size: 8, align: 8) {
    02 00 00 00 00 00 00 00                         │ ........
}

alloc1 (static: FOO, size: 3, align: 1) {
    00 00 00                                        │ ...
}

fn Print(_1: usize) -> Print {
    let mut _0: Print;

    bb0: {
        _0 = Print(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Print(_1: usize) -> Print {
    let mut _0: Print;

    bb0: {
        _0 = Print(move _1);
        return;
    }
}
