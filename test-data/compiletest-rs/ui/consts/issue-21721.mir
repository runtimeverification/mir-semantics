// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: *const u8;
    let mut _2: *const *const u8;
    let mut _3: *const std::option::Option<((), &u8)>;
    let _4: &std::option::Option<((), &u8)>;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: !;
    scope 1 {
        debug ptr => _1;
    }
    scope 2 {
        let mut _8: *const ();
        let mut _9: usize;
        let mut _10: usize;
        let mut _11: usize;
        let mut _12: usize;
        let mut _13: bool;
    }

    bb0: {
        _4 = const {alloc1: &Option<((), &u8)>};
        _3 = &raw const (*_4);
        _2 = _3 as *const *const u8 (PtrToPtr);
        _8 = _2 as *const () (PtrToPtr);
        _9 = _8 as usize (Transmute);
        _10 = AlignOf(*const u8);
        _11 = Sub(_10, const 1_usize);
        _12 = BitAnd(_9, _11);
        _13 = Eq(_12, const 0_usize);
        assert(_13, "misaligned pointer dereference: address must be a multiple of {} but is {}", _10, _9) -> [success: bb4, unwind unreachable];
    }

    bb1: {
        _5 = Not(move _6);
        switchInt(move _5) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _7 = core::panicking::panic(const "assertion failed: ptr.is_null()");
    }

    bb3: {
        return;
    }

    bb4: {
        _1 = (*_2);
        _6 = ptr::const_ptr::<impl *const u8>::is_null(_1) -> bb1;
    }
}

alloc1 (static: NONE, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         â”‚ ........
}

static NONE: Option<((), &u8)> = {
    let mut _0: std::option::Option<((), &u8)>;

    bb0: {
        _0 = Option::<((), &u8)>::None;
        return;
    }
}
