// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (&i32, &i32);
    let mut _2: &i32;
    let _3: i32;
    let mut _4: &i32;
    let _5: i32;
    let mut _6: &u32;
    let _7: u32;
    let _8: &i32;
    let _9: &i32;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: i32;
    let mut _13: i32;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _8;
        debug right_val => _9;
        let _14: core::panicking::AssertKind;
        scope 2 {
            debug kind => _14;
        }
    }

    bb0: {
        _3 = const 0_i32;
        _2 = &_3;
        _7 = const 22_u32;
        _6 = &_7;
        switchInt((*_6)) -> [22: bb2, otherwise: bb1];
    }

    bb1: {
        _5 = const 1_i32;
        goto -> bb3;
    }

    bb2: {
        _5 = const 0_i32;
        goto -> bb3;
    }

    bb3: {
        _4 = &_5;
        _1 = (move _2, move _4);
        _8 = (_1.0: &i32);
        _9 = (_1.1: &i32);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<i32, i32>(move _14, _8, _9, move _16);
    }

    bb5: {
        return;
    }
}

const X: &u32 = {
    let mut _0: &u32;
    let _1: &u32;
    let _2: u32;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const 22_u32;
        _1 = &_2;
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}
