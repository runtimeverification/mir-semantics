// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const CustomAutoTraceable::vftable: CustomAutoRooterVFTable = {
    let mut _0: CustomAutoRooterVFTable;
    let mut _1: unsafe extern "C" fn(*mut i32, *mut u32);

    bb0: {
        StorageLive(_1);
        _1 = <Self as CustomAutoTraceable>::trace as unsafe extern "C" fn(*mut i32, *mut u32) (Pointer(ReifyFnPointer));
        _0 = CustomAutoRooterVFTable { trace: move _1 };
        StorageDead(_1);
        return;
    }
}

fn CustomAutoTraceable::trace(_1: *mut i32, _2: *mut u32) -> () {
    debug this => _1;
    debug trc => _2;
    let mut _0: ();
    let _3: *const Self;
    let mut _5: std::option::Option<&Self>;
    let _6: ();
    let mut _7: &Self;
    scope 1 {
        debug this => _3;
        let _4: &Self;
        scope 2 {
            debug this => _4;
        }
    }

    bb0: {
        _3 = _1 as *const Self (PtrToPtr);
        _5 = ptr::const_ptr::<impl *const Self>::as_ref::<'_>(_3) -> bb1;
    }

    bb1: {
        _4 = Option::<&Self>::unwrap(move _5) -> bb2;
    }

    bb2: {
        _7 = _4;
        _6 = <Self as CustomAutoTraceable>::do_trace(move _7, _2) -> bb3;
    }

    bb3: {
        return;
    }
}

fn <impl at ui/consts/mozjs-error.rs:23:1: 23:39>::do_trace(_1: &(), _2: *mut u32) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}
