// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn make_1u8_bag() -> BagOfBits<T> {
    let mut _0: BagOfBits<T>;
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: usize;
    let mut _4: !;
    let mut _5: BagOfBits<T>;
    let _6: ();
    let mut _7: *mut u8;
    let mut _8: *mut BagOfBits<T>;
    let mut _9: &mut BagOfBits<T>;
    scope 1 {
        debug bag => _5;
        scope 2 {
        }
    }

    bb0: {
        _3 = std::mem::size_of::<T>() -> bb1;
    }

    bb1: {
        _2 = Ge(move _3, const 1_usize);
        _1 = Not(move _2);
        switchInt(move _1) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _4 = panic(const "assertion failed: core::mem::size_of::<T>() >= 1");
    }

    bb3: {
        _5 = BagOfBits::<T> { uninit: const () };
        _9 = &mut _5;
        _8 = &raw mut (*_9);
        _7 = _8 as *mut u8 (PtrToPtr);
        _6 = ptr::mut_ptr::<impl *mut u8>::write(move _7, const 1_u8) -> bb4;
    }

    bb4: {
        _0 = move _5;
        return;
    }
}

// MIR FOR CTFE
fn make_1u8_bag() -> BagOfBits<T> {
    let mut _0: BagOfBits<T>;
    let _1: ();
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: usize;
    let mut _5: !;
    let mut _6: BagOfBits<T>;
    let mut _7: ();
    let _8: ();
    let _9: ();
    let mut _10: *mut u8;
    let mut _11: *mut BagOfBits<T>;
    let mut _12: *mut BagOfBits<T>;
    let mut _13: &mut BagOfBits<T>;
    scope 1 {
        debug bag => _6;
        scope 2 {
        }
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        ConstEvalCounter;
        _4 = std::mem::size_of::<T>() -> bb1;
    }

    bb1: {
        _3 = Ge(move _4, const 1_usize);
        StorageDead(_4);
        _2 = Not(move _3);
        StorageDead(_3);
        switchInt(move _2) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageLive(_5);
        ConstEvalCounter;
        _5 = panic(const "assertion failed: core::mem::size_of::<T>() >= 1");
    }

    bb3: {
        _1 = const ();
        StorageDead(_2);
        StorageDead(_1);
        StorageLive(_6);
        StorageLive(_7);
        _7 = ();
        _6 = BagOfBits::<T> { uninit: move _7 };
        StorageDead(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &mut _6;
        _12 = &raw mut (*_13);
        _11 = _12;
        _10 = move _11 as *mut u8 (PtrToPtr);
        StorageDead(_11);
        ConstEvalCounter;
        _9 = ptr::mut_ptr::<impl *mut u8>::write(move _10, const 1_u8) -> bb4;
    }

    bb4: {
        StorageDead(_10);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_9);
        _8 = const ();
        StorageDead(_8);
        _0 = move _6;
        StorageDead(_6);
        return;
    }
}

fn check_bag(_1: &BagOfBits<T>) -> () {
    debug bag => _1;
    let mut _0: ();
    let _2: u8;
    let mut _3: *const u8;
    let mut _4: *const BagOfBits<T>;
    let mut _5: (&u8, &u8);
    let mut _6: &u8;
    let mut _7: &u8;
    let _8: u8;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: u8;
    let mut _14: u8;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug val => _2;
        let _9: &u8;
        let _10: &u8;
        scope 3 {
            debug left_val => _9;
            debug right_val => _10;
            let _15: core::panicking::AssertKind;
            scope 4 {
                debug kind => _15;
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _4 = &raw const (*_1);
        _3 = _4 as *const u8 (PtrToPtr);
        _2 = ptr::const_ptr::<impl *const u8>::read(move _3) -> bb1;
    }

    bb1: {
        _6 = &_2;
        _8 = const 1_u8;
        _7 = &_8;
        _5 = (move _6, move _7);
        _9 = (_5.0: &u8);
        _10 = (_5.1: &u8);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = assert_failed::<u8, u8>(move _15, _9, _10, move _17);
    }

    bb3: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: &BagOfBits<[usize; 1]>;
    let _3: BagOfBits<[usize; 1]>;
    let _4: ();
    let _5: &BagOfBits<usize>;
    let _6: BagOfBits<usize>;
    let _7: ();
    let _8: &BagOfBits<[usize; 1]>;
    let _9: BagOfBits<[usize; 1]>;
    let _10: ();
    let _11: &BagOfBits<usize>;
    let _12: BagOfBits<usize>;

    bb0: {
        _3 = make_1u8_bag::<[usize; 1]>() -> bb1;
    }

    bb1: {
        _2 = &_3;
        _1 = check_bag::<[usize; 1]>(_2) -> bb2;
    }

    bb2: {
        _6 = make_1u8_bag::<usize>() -> bb3;
    }

    bb3: {
        _5 = &_6;
        _4 = check_bag::<usize>(_5) -> bb4;
    }

    bb4: {
        _9 = const _;
        _8 = &_9;
        _7 = check_bag::<[usize; 1]>(_8) -> bb5;
    }

    bb5: {
        _12 = const _;
        _11 = &_12;
        _10 = check_bag::<usize>(_11) -> bb6;
    }

    bb6: {
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

const CONST_ARRAY_BAG: BagOfBits<[usize; 1]> = {
    let mut _0: BagOfBits<[usize; 1]>;

    bb0: {
        ConstEvalCounter;
        _0 = make_1u8_bag::<[usize; 1]>() -> bb1;
    }

    bb1: {
        return;
    }
}

CONST_ARRAY_BAG::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

const CONST_USIZE_BAG: BagOfBits<usize> = {
    let mut _0: BagOfBits<usize>;

    bb0: {
        ConstEvalCounter;
        _0 = make_1u8_bag::<usize>() -> bb1;
    }

    bb1: {
        return;
    }
}
