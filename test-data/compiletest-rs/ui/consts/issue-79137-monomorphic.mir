// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const <impl at ui/consts/issue-79137-monomorphic.rs:9:1: 9:27>::VALUE: usize = {
    let mut _0: usize;

    bb0: {
        ConstEvalCounter;
        _0 = std::mem::variant_count::<T>() -> bb1;
    }

    bb1: {
        return;
    }
}

fn check_variant_count() -> bool {
    let mut _0: bool;
    let mut _1: usize;

    bb0: {
        _1 = const _;
        _0 = Eq(_1, const 2_usize);
        return;
    }
}

// MIR FOR CTFE
fn check_variant_count() -> bool {
    let mut _0: bool;
    let mut _1: usize;

    bb0: {
        StorageLive(_1);
        _1 = const _;
        switchInt(_1) -> [2: bb2, otherwise: bb1];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _0 = const true;
        goto -> bb3;
    }

    bb3: {
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: !;

    bb0: {
        _2 = check_variant_count::<()>() -> bb1;
    }

    bb1: {
        _1 = Not(move _2);
        switchInt(move _1) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _3 = core::panicking::panic(const "assertion failed: check_variant_count::<()>()");
    }

    bb3: {
        return;
    }
}

fn GetVariantCount(_1: T) -> GetVariantCount<T> {
    let mut _0: GetVariantCount<T>;

    bb0: {
        _0 = GetVariantCount::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn GetVariantCount(_1: T) -> GetVariantCount<T> {
    let mut _0: GetVariantCount<T>;

    bb0: {
        _0 = GetVariantCount::<T>(move _1);
        return;
    }
}
