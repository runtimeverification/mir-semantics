// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const _: () = {
    let mut _0: ();

    bb0: {
        ConstEvalCounter;
        _0 = std::mem::forget::<i32>(const 0_i32) -> bb1;
    }

    bb1: {
        return;
    }
}

const _: () = {
    let mut _0: ();
    let mut _1: std::vec::Vec<std::vec::Vec<std::boxed::Box<i32>>>;

    bb0: {
        StorageLive(_1);
        ConstEvalCounter;
        _1 = Vec::<Vec<Box<i32>>>::new() -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _0 = std::mem::forget::<Vec<Vec<Box<i32>>>>(move _1) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        StorageDead(_1);
        return;
    }

    bb3 (cleanup): {
        resume;
    }
}

fn const_forget_box(_1: Box<T>) -> () {
    debug b => _1;
    let mut _0: ();
    let _2: ();

    bb0: {
        _2 = std::mem::forget::<Box<T>>(move _1) -> bb1;
    }

    bb1: {
        return;
    }
}

// MIR FOR CTFE
fn const_forget_box(_1: Box<T>) -> () {
    debug b => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: std::boxed::Box<T>;

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = move _1;
        ConstEvalCounter;
        _2 = std::mem::forget::<Box<T>>(move _3) -> [return: bb1, unwind: bb2];
    }

    bb1: {
        StorageDead(_3);
        StorageDead(_2);
        _0 = const ();
        return;
    }

    bb2 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
