// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
A::B::{constant#0}: i8 = {
    let mut _0: i8;

    bb0: {
        _0 = const -1_i8;
        return;
    }
}

A::C::{constant#0}: i8 = {
    let mut _0: i8;

    bb0: {
        _0 = const 1_i8;
        return;
    }
}

fn <impl at ui/consts/signed_enum_discr.rs:5:10: 5:12>::assert_receiver_is_total_eq(_1: &A) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/consts/signed_enum_discr.rs:5:14: 5:23>::eq(_1: &A, _2: &A) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: i8;
    scope 1 {
        debug __self_tag => _3;
        let _4: i8;
        scope 2 {
            debug __arg1_tag => _4;
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _0 = Eq(_3, _4);
        return;
    }
}

const D: A = {
    let mut _0: A;

    bb0: {
        _0 = A::B;
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
