// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> isize {
    let mut _0: isize;

    bb0: {
        _0 = const 3397320717_isize;
        return;
    }
}

static mut b: Bar<fn() -> isize> = {
    let mut _0: Bar<fn() -> isize>;
    let mut _1: fn() -> isize;

    bb0: {
        StorageLive(_1);
        _1 = foo as fn() -> isize (Pointer(ReifyFnPointer));
        _0 = Bar::<fn() -> isize> { f: move _1 };
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&isize, &isize);
    let mut _2: &isize;
    let _3: isize;
    let mut _4: fn() -> isize;
    let mut _5: *mut Bar<fn() -> isize>;
    let mut _6: &isize;
    let _7: isize;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: isize;
    let mut _13: isize;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        let _8: &isize;
        let _9: &isize;
        let mut _17: *const ();
        let mut _18: usize;
        let mut _19: usize;
        let mut _20: usize;
        let mut _21: usize;
        let mut _22: bool;
        scope 2 {
            debug left_val => _8;
            debug right_val => _9;
            let _14: core::panicking::AssertKind;
            scope 3 {
                debug kind => _14;
            }
        }
    }

    bb0: {
        _5 = const {alloc1: *mut Bar<fn() -> isize>};
        _17 = _5 as *const () (PtrToPtr);
        _18 = _17 as usize (Transmute);
        _19 = AlignOf(Bar<fn() -> isize>);
        _20 = Sub(_19, const 1_usize);
        _21 = BitAnd(_18, _20);
        _22 = Eq(_21, const 0_usize);
        assert(_22, "misaligned pointer dereference: address must be a multiple of {} but is {}", _19, _18) -> [success: bb4, unwind unreachable];
    }

    bb1: {
        _2 = &_3;
        _7 = const 3397320717_isize;
        _6 = &_7;
        _1 = (move _2, move _6);
        _8 = (_1.0: &isize);
        _9 = (_1.1: &isize);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<isize, isize>(move _14, _8, _9, move _16);
    }

    bb3: {
        return;
    }

    bb4: {
        _4 = ((*_5).0: fn() -> isize);
        _3 = move _4() -> bb1;
    }
}

alloc1 (static: b, size: 8, align: 8) {
    ╾───────alloc5────────╼                         │ ╾──────╼
}

alloc5 (fn: foo)
