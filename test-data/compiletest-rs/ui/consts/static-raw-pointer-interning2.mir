// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static mut FOO: Foo = {
    let mut _0: Foo;
    let mut _1: *mut i32;
    let mut _2: *mut [i32];
    let mut _3: *mut [i32; 1];
    let mut _4: &mut [i32; 1];
    let mut _5: [i32; 1];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = [const 42_i32];
        _4 = &mut _5;
        _3 = &raw mut (*_4);
        _2 = move _3 as *mut [i32] (Pointer(Unsize));
        StorageDead(_3);
        _1 = move _2 as *mut i32 (PtrToPtr);
        StorageDead(_2);
        _0 = Foo { field: move _1 };
        StorageDead(_4);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&i32, &i32);
    let mut _2: &i32;
    let _3: i32;
    let mut _4: *mut Foo;
    let mut _5: *mut Foo;
    let mut _6: &i32;
    let _7: i32;
    let _8: &i32;
    let _9: &i32;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: i32;
    let mut _13: i32;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: *mut i32;
    let mut _18: *mut i32;
    scope 1 {
        let mut _19: *const ();
        let mut _20: usize;
        let mut _21: usize;
        let mut _22: usize;
        let mut _23: usize;
        let mut _24: bool;
        let mut _25: *const ();
        let mut _26: usize;
        let mut _27: usize;
        let mut _28: usize;
        let mut _29: usize;
        let mut _30: bool;
        let mut _31: *const ();
        let mut _32: usize;
        let mut _33: usize;
        let mut _34: usize;
        let mut _35: usize;
        let mut _36: bool;
        let mut _37: *const ();
        let mut _38: usize;
        let mut _39: usize;
        let mut _40: usize;
        let mut _41: usize;
        let mut _42: bool;
    }
    scope 2 {
        debug left_val => _8;
        debug right_val => _9;
        let _14: core::panicking::AssertKind;
        scope 3 {
            debug kind => _14;
        }
    }

    bb0: {
        _4 = const {alloc1: *mut Foo};
        _37 = _4 as *const () (PtrToPtr);
        _38 = _37 as usize (Transmute);
        _39 = AlignOf(Foo);
        _40 = Sub(_39, const 1_usize);
        _41 = BitAnd(_38, _40);
        _42 = Eq(_41, const 0_usize);
        assert(_42, "misaligned pointer dereference: address must be a multiple of {} but is {}", _39, _38) -> [success: bb6, unwind unreachable];
    }

    bb1: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<i32, i32>(move _14, _8, _9, move _16);
    }

    bb2: {
        return;
    }

    bb3: {
        _3 = (*_18);
        _2 = &_3;
        _7 = const 69_i32;
        _6 = &_7;
        _1 = (move _2, move _6);
        _8 = (_1.0: &i32);
        _9 = (_1.1: &i32);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb2, otherwise: bb1];
    }

    bb4: {
        _18 = deref_copy ((*_5).0: *mut i32);
        _19 = _18 as *const () (PtrToPtr);
        _20 = _19 as usize (Transmute);
        _21 = AlignOf(i32);
        _22 = Sub(_21, const 1_usize);
        _23 = BitAnd(_20, _22);
        _24 = Eq(_23, const 0_usize);
        assert(_24, "misaligned pointer dereference: address must be a multiple of {} but is {}", _21, _20) -> [success: bb3, unwind unreachable];
    }

    bb5: {
        (*_17) = const 69_i32;
        _5 = const {alloc1: *mut Foo};
        _25 = _5 as *const () (PtrToPtr);
        _26 = _25 as usize (Transmute);
        _27 = AlignOf(Foo);
        _28 = Sub(_27, const 1_usize);
        _29 = BitAnd(_26, _28);
        _30 = Eq(_29, const 0_usize);
        assert(_30, "misaligned pointer dereference: address must be a multiple of {} but is {}", _27, _26) -> [success: bb4, unwind unreachable];
    }

    bb6: {
        _17 = deref_copy ((*_4).0: *mut i32);
        _31 = _17 as *const () (PtrToPtr);
        _32 = _31 as usize (Transmute);
        _33 = AlignOf(i32);
        _34 = Sub(_33, const 1_usize);
        _35 = BitAnd(_32, _34);
        _36 = Eq(_35, const 0_usize);
        assert(_36, "misaligned pointer dereference: address must be a multiple of {} but is {}", _33, _32) -> [success: bb5, unwind unreachable];
    }
}

alloc1 (static: FOO, size: 8, align: 8) {
    ╾───────alloc4────────╼                         │ ╾──────╼
}

alloc4 (size: 4, align: 4) {
    2a 00 00 00                                     │ *...
}
