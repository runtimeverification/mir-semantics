// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> *const i8 {
    let mut _0: *const i8;
    let mut _1: *const [u8; 3];
    let _2: &[u8; 3];

    bb0: {
        _2 = const b"foo";
        _1 = &raw const (*_2);
        _0 = _1 as *const i8 (PtrToPtr);
        return;
    }
}

alloc1 (size: 3, align: 1) {
    66 6f 6f                                        │ foo
}

// MIR FOR CTFE
fn foo() -> *const i8 {
    let mut _0: *const i8;
    let mut _1: *const [u8; 3];
    let mut _2: *const [u8; 3];
    let _3: &[u8; 3];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = const b"foo";
        _2 = &raw const (*_3);
        _1 = _2;
        _0 = move _1 as *const i8 (PtrToPtr);
        StorageDead(_1);
        StorageDead(_3);
        StorageDead(_2);
        return;
    }
}

alloc1 (size: 3, align: 1) {
    66 6f 6f                                        │ foo
}

fn bar() -> i32 {
    let mut _0: i32;
    let mut _1: &i32;
    let _2: i32;
    let mut _3: (i32, i32, i32);

    bb0: {
        _3 = (const 1_i32, const 2_i32, const 3_i32);
        _2 = (_3.1: i32);
        _1 = &_2;
        _0 = (*_1);
        return;
    }
}

// MIR FOR CTFE
fn bar() -> i32 {
    let mut _0: i32;
    let mut _1: &i32;
    let _2: i32;
    let mut _3: (i32, i32, i32);

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = (const 1_i32, const 2_i32, const 3_i32);
        _2 = (_3.1: i32);
        _1 = &_2;
        _0 = (*_1);
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&*const i8, &*const i8);
    let mut _2: &*const i8;
    let _3: *const i8;
    let mut _4: &*const i8;
    let _5: *const i8;
    let mut _6: *const [u8; 3];
    let _7: &[u8; 3];
    let _8: &*const i8;
    let _9: &*const i8;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: *const i8;
    let mut _13: *const i8;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&i32, &i32);
    let mut _18: &i32;
    let _19: i32;
    let mut _20: &i32;
    let _21: i32;
    let _22: &i32;
    let _23: &i32;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: i32;
    let mut _27: i32;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _8;
        debug right_val => _9;
        let _14: core::panicking::AssertKind;
        scope 2 {
            debug kind => _14;
        }
    }
    scope 3 {
        debug left_val => _22;
        debug right_val => _23;
        let _28: core::panicking::AssertKind;
        scope 4 {
            debug kind => _28;
        }
    }

    bb0: {
        _3 = foo() -> bb1;
    }

    bb1: {
        _2 = &_3;
        _7 = const b"foo";
        _6 = &raw const (*_7);
        _5 = _6 as *const i8 (PtrToPtr);
        _4 = &_5;
        _1 = (move _2, move _4);
        _8 = (_1.0: &*const i8);
        _9 = (_1.1: &*const i8);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<*const i8, *const i8>(move _14, _8, _9, move _16);
    }

    bb3: {
        _19 = bar() -> bb4;
    }

    bb4: {
        _18 = &_19;
        _21 = const 2_i32;
        _20 = &_21;
        _17 = (move _18, move _20);
        _22 = (_17.0: &i32);
        _23 = (_17.1: &i32);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<i32, i32>(move _28, _22, _23, move _30);
    }

    bb6: {
        return;
    }
}

alloc2 (size: 3, align: 1) {
    66 6f 6f                                        │ foo
}
