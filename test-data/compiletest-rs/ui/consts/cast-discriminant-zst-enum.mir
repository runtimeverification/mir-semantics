// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Nums::NegOne::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const -1_isize;
        return;
    }
}

fn <impl at ui/consts/cast-discriminant-zst-enum.rs:5:16: 5:21>::clone(_1: &Nums) -> Nums {
    debug self => _1;
    let mut _0: Nums;

    bb0: {
        return;
    }
}

const NEG_ONE_I8: i8 = {
    let mut _0: i8;
    let mut _1: isize;
    let mut _2: (isize, bool);

    bb0: {
        StorageLive(_1);
        _2 = CheckedAdd(const _, const 0_isize);
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 0_isize) -> bb1;
    }

    bb1: {
        _1 = move (_2.0: isize);
        _0 = move _1 as i8 (IntToInt);
        StorageDead(_1);
        return;
    }
}

const NEG_ONE_I16: i16 = {
    let mut _0: i16;
    let mut _1: isize;
    let mut _2: (isize, bool);

    bb0: {
        StorageLive(_1);
        _2 = CheckedAdd(const _, const 0_isize);
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 0_isize) -> bb1;
    }

    bb1: {
        _1 = move (_2.0: isize);
        _0 = move _1 as i16 (IntToInt);
        StorageDead(_1);
        return;
    }
}

const NEG_ONE_I32: i32 = {
    let mut _0: i32;
    let mut _1: isize;
    let mut _2: (isize, bool);

    bb0: {
        StorageLive(_1);
        _2 = CheckedAdd(const _, const 0_isize);
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 0_isize) -> bb1;
    }

    bb1: {
        _1 = move (_2.0: isize);
        _0 = move _1 as i32 (IntToInt);
        StorageDead(_1);
        return;
    }
}

const NEG_ONE_I64: i64 = {
    let mut _0: i64;
    let mut _1: isize;
    let mut _2: (isize, bool);

    bb0: {
        StorageLive(_1);
        _2 = CheckedAdd(const _, const 0_isize);
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 0_isize) -> bb1;
    }

    bb1: {
        _1 = move (_2.0: isize);
        _0 = move _1 as i64 (IntToInt);
        StorageDead(_1);
        return;
    }
}

const NEG_ONE_I128: i128 = {
    let mut _0: i128;
    let mut _1: isize;
    let mut _2: (isize, bool);

    bb0: {
        StorageLive(_1);
        _2 = CheckedAdd(const _, const 0_isize);
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 0_isize) -> bb1;
    }

    bb1: {
        _1 = move (_2.0: isize);
        _0 = move _1 as i128 (IntToInt);
        StorageDead(_1);
        return;
    }
}

fn test_as_arg(_1: Nums) -> () {
    debug n => const Nums::NegOne;
    let mut _0: ();
    let mut _2: (&i8, &i8);
    let mut _3: &i8;
    let _4: i8;
    let mut _5: &i8;
    let _6: i8;
    let _7: Nums;
    let mut _8: isize;
    let _9: &i8;
    let _10: &i8;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: i8;
    let mut _14: i8;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: (&i16, &i16);
    let mut _19: &i16;
    let _20: i16;
    let mut _21: &i16;
    let _22: i16;
    let _23: Nums;
    let mut _24: isize;
    let _25: &i16;
    let _26: &i16;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: i16;
    let mut _30: i16;
    let _32: !;
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _34: (&i32, &i32);
    let mut _35: &i32;
    let _36: i32;
    let mut _37: &i32;
    let _38: i32;
    let _39: Nums;
    let mut _40: isize;
    let _41: &i32;
    let _42: &i32;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: i32;
    let mut _46: i32;
    let _48: !;
    let mut _49: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _50: (&i64, &i64);
    let mut _51: &i64;
    let _52: i64;
    let mut _53: &i64;
    let _54: i64;
    let _55: Nums;
    let mut _56: isize;
    let _57: &i64;
    let _58: &i64;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: i64;
    let mut _62: i64;
    let _64: !;
    let mut _65: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _66: (&i128, &i128);
    let mut _67: &i128;
    let _68: i128;
    let mut _69: &i128;
    let _70: i128;
    let _71: Nums;
    let mut _72: isize;
    let _73: &i128;
    let _74: &i128;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: i128;
    let mut _78: i128;
    let _80: !;
    let mut _81: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _9;
        debug right_val => _10;
        let _15: core::panicking::AssertKind;
        scope 2 {
            debug kind => _15;
        }
    }
    scope 3 {
        debug left_val => _25;
        debug right_val => _26;
        let _31: core::panicking::AssertKind;
        scope 4 {
            debug kind => _31;
        }
    }
    scope 5 {
        debug left_val => _41;
        debug right_val => _42;
        let _47: core::panicking::AssertKind;
        scope 6 {
            debug kind => _47;
        }
    }
    scope 7 {
        debug left_val => _57;
        debug right_val => _58;
        let _63: core::panicking::AssertKind;
        scope 8 {
            debug kind => _63;
        }
    }
    scope 9 {
        debug left_val => _73;
        debug right_val => _74;
        let _79: core::panicking::AssertKind;
        scope 10 {
            debug kind => _79;
        }
    }

    bb0: {
        _4 = const -1_i8;
        _3 = &_4;
        _8 = discriminant(_7);
        _6 = move _8 as i8 (IntToInt);
        _5 = &_6;
        _2 = (move _3, move _5);
        _9 = (_2.0: &i8);
        _10 = (_2.1: &i8);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<i8, i8>(move _15, _9, _10, move _17);
    }

    bb2: {
        _20 = const -1_i16;
        _19 = &_20;
        _24 = discriminant(_23);
        _22 = move _24 as i16 (IntToInt);
        _21 = &_22;
        _18 = (move _19, move _21);
        _25 = (_18.0: &i16);
        _26 = (_18.1: &i16);
        _29 = (*_25);
        _30 = (*_26);
        _28 = Eq(move _29, move _30);
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _31 = core::panicking::AssertKind::Eq;
        _33 = Option::<Arguments<'_>>::None;
        _32 = core::panicking::assert_failed::<i16, i16>(move _31, _25, _26, move _33);
    }

    bb4: {
        _36 = const -1_i32;
        _35 = &_36;
        _40 = discriminant(_39);
        _38 = move _40 as i32 (IntToInt);
        _37 = &_38;
        _34 = (move _35, move _37);
        _41 = (_34.0: &i32);
        _42 = (_34.1: &i32);
        _45 = (*_41);
        _46 = (*_42);
        _44 = Eq(move _45, move _46);
        _43 = Not(move _44);
        switchInt(move _43) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _47 = core::panicking::AssertKind::Eq;
        _49 = Option::<Arguments<'_>>::None;
        _48 = core::panicking::assert_failed::<i32, i32>(move _47, _41, _42, move _49);
    }

    bb6: {
        _52 = const -1_i64;
        _51 = &_52;
        _56 = discriminant(_55);
        _54 = move _56 as i64 (IntToInt);
        _53 = &_54;
        _50 = (move _51, move _53);
        _57 = (_50.0: &i64);
        _58 = (_50.1: &i64);
        _61 = (*_57);
        _62 = (*_58);
        _60 = Eq(move _61, move _62);
        _59 = Not(move _60);
        switchInt(move _59) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _63 = core::panicking::AssertKind::Eq;
        _65 = Option::<Arguments<'_>>::None;
        _64 = core::panicking::assert_failed::<i64, i64>(move _63, _57, _58, move _65);
    }

    bb8: {
        _68 = const -1_i128;
        _67 = &_68;
        _72 = discriminant(_71);
        _70 = move _72 as i128 (IntToInt);
        _69 = &_70;
        _66 = (move _67, move _69);
        _73 = (_66.0: &i128);
        _74 = (_66.1: &i128);
        _77 = (*_73);
        _78 = (*_74);
        _76 = Eq(move _77, move _78);
        _75 = Not(move _76);
        switchInt(move _75) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _79 = core::panicking::AssertKind::Eq;
        _81 = Option::<Arguments<'_>>::None;
        _80 = core::panicking::assert_failed::<i128, i128>(move _79, _73, _74, move _81);
    }

    bb10: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&i8, &i8);
    let mut _2: &i8;
    let _3: i8;
    let mut _4: &i8;
    let _5: i8;
    let _6: Nums;
    let mut _7: isize;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: i8;
    let mut _13: i8;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&i16, &i16);
    let mut _18: &i16;
    let _19: i16;
    let mut _20: &i16;
    let _21: i16;
    let _22: Nums;
    let mut _23: isize;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: i16;
    let mut _29: i16;
    let _31: !;
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _33: (&i32, &i32);
    let mut _34: &i32;
    let _35: i32;
    let mut _36: &i32;
    let _37: i32;
    let _38: Nums;
    let mut _39: isize;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: i32;
    let mut _45: i32;
    let _47: !;
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _49: (&i64, &i64);
    let mut _50: &i64;
    let _51: i64;
    let mut _52: &i64;
    let _53: i64;
    let _54: Nums;
    let mut _55: isize;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: i64;
    let mut _61: i64;
    let _63: !;
    let mut _64: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _65: (&i128, &i128);
    let mut _66: &i128;
    let _67: i128;
    let mut _68: &i128;
    let _69: i128;
    let _70: Nums;
    let mut _71: isize;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: i128;
    let mut _77: i128;
    let _79: !;
    let mut _80: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _81: (&i8, &i8);
    let mut _82: &i8;
    let _83: i8;
    let mut _84: &i8;
    let _85: i8;
    let _86: Nums;
    let mut _87: isize;
    let mut _90: bool;
    let mut _91: bool;
    let mut _92: i8;
    let mut _93: i8;
    let _95: !;
    let mut _96: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _97: (&i16, &i16);
    let mut _98: &i16;
    let _99: i16;
    let mut _100: &i16;
    let _101: i16;
    let _102: Nums;
    let mut _103: isize;
    let mut _106: bool;
    let mut _107: bool;
    let mut _108: i16;
    let mut _109: i16;
    let _111: !;
    let mut _112: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _113: (&i32, &i32);
    let mut _114: &i32;
    let _115: i32;
    let mut _116: &i32;
    let _117: i32;
    let _118: Nums;
    let mut _119: isize;
    let mut _122: bool;
    let mut _123: bool;
    let mut _124: i32;
    let mut _125: i32;
    let _127: !;
    let mut _128: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _129: (&i64, &i64);
    let mut _130: &i64;
    let _131: i64;
    let mut _132: &i64;
    let _133: i64;
    let _134: Nums;
    let mut _135: isize;
    let mut _138: bool;
    let mut _139: bool;
    let mut _140: i64;
    let mut _141: i64;
    let _143: !;
    let mut _144: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _145: (&i128, &i128);
    let mut _146: &i128;
    let _147: i128;
    let mut _148: &i128;
    let _149: i128;
    let _150: Nums;
    let mut _151: isize;
    let mut _154: bool;
    let mut _155: bool;
    let mut _156: i128;
    let mut _157: i128;
    let _159: !;
    let mut _160: std::option::Option<std::fmt::Arguments<'_>>;
    let _161: ();
    let mut _162: (&i8, &i8);
    let mut _163: &i8;
    let _164: i8;
    let mut _165: &i8;
    let _166: i8;
    let mut _169: bool;
    let mut _170: bool;
    let mut _171: i8;
    let mut _172: i8;
    let _174: !;
    let mut _175: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _176: (&i16, &i16);
    let mut _177: &i16;
    let _178: i16;
    let mut _179: &i16;
    let _180: i16;
    let mut _183: bool;
    let mut _184: bool;
    let mut _185: i16;
    let mut _186: i16;
    let _188: !;
    let mut _189: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _190: (&i32, &i32);
    let mut _191: &i32;
    let _192: i32;
    let mut _193: &i32;
    let _194: i32;
    let mut _197: bool;
    let mut _198: bool;
    let mut _199: i32;
    let mut _200: i32;
    let _202: !;
    let mut _203: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _204: (&i64, &i64);
    let mut _205: &i64;
    let _206: i64;
    let mut _207: &i64;
    let _208: i64;
    let mut _211: bool;
    let mut _212: bool;
    let mut _213: i64;
    let mut _214: i64;
    let _216: !;
    let mut _217: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _218: (&i128, &i128);
    let mut _219: &i128;
    let _220: i128;
    let mut _221: &i128;
    let _222: i128;
    let mut _225: bool;
    let mut _226: bool;
    let mut _227: i128;
    let mut _228: i128;
    let _230: !;
    let mut _231: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug kind => const Nums::NegOne;
        let _8: &i8;
        let _9: &i8;
        let _24: &i16;
        let _25: &i16;
        let _40: &i32;
        let _41: &i32;
        let _56: &i64;
        let _57: &i64;
        let _72: &i128;
        let _73: &i128;
        let _88: &i8;
        let _89: &i8;
        let _104: &i16;
        let _105: &i16;
        let _120: &i32;
        let _121: &i32;
        let _136: &i64;
        let _137: &i64;
        let _152: &i128;
        let _153: &i128;
        let _167: &i8;
        let _168: &i8;
        let _181: &i16;
        let _182: &i16;
        let _195: &i32;
        let _196: &i32;
        let _209: &i64;
        let _210: &i64;
        let _223: &i128;
        let _224: &i128;
        scope 2 {
            debug left_val => _8;
            debug right_val => _9;
            let _14: core::panicking::AssertKind;
            scope 3 {
                debug kind => _14;
            }
        }
        scope 4 {
            debug left_val => _24;
            debug right_val => _25;
            let _30: core::panicking::AssertKind;
            scope 5 {
                debug kind => _30;
            }
        }
        scope 6 {
            debug left_val => _40;
            debug right_val => _41;
            let _46: core::panicking::AssertKind;
            scope 7 {
                debug kind => _46;
            }
        }
        scope 8 {
            debug left_val => _56;
            debug right_val => _57;
            let _62: core::panicking::AssertKind;
            scope 9 {
                debug kind => _62;
            }
        }
        scope 10 {
            debug left_val => _72;
            debug right_val => _73;
            let _78: core::panicking::AssertKind;
            scope 11 {
                debug kind => _78;
            }
        }
        scope 12 {
            debug left_val => _88;
            debug right_val => _89;
            let _94: core::panicking::AssertKind;
            scope 13 {
                debug kind => _94;
            }
        }
        scope 14 {
            debug left_val => _104;
            debug right_val => _105;
            let _110: core::panicking::AssertKind;
            scope 15 {
                debug kind => _110;
            }
        }
        scope 16 {
            debug left_val => _120;
            debug right_val => _121;
            let _126: core::panicking::AssertKind;
            scope 17 {
                debug kind => _126;
            }
        }
        scope 18 {
            debug left_val => _136;
            debug right_val => _137;
            let _142: core::panicking::AssertKind;
            scope 19 {
                debug kind => _142;
            }
        }
        scope 20 {
            debug left_val => _152;
            debug right_val => _153;
            let _158: core::panicking::AssertKind;
            scope 21 {
                debug kind => _158;
            }
        }
        scope 22 {
            debug left_val => _167;
            debug right_val => _168;
            let _173: core::panicking::AssertKind;
            scope 23 {
                debug kind => _173;
            }
        }
        scope 24 {
            debug left_val => _181;
            debug right_val => _182;
            let _187: core::panicking::AssertKind;
            scope 25 {
                debug kind => _187;
            }
        }
        scope 26 {
            debug left_val => _195;
            debug right_val => _196;
            let _201: core::panicking::AssertKind;
            scope 27 {
                debug kind => _201;
            }
        }
        scope 28 {
            debug left_val => _209;
            debug right_val => _210;
            let _215: core::panicking::AssertKind;
            scope 29 {
                debug kind => _215;
            }
        }
        scope 30 {
            debug left_val => _223;
            debug right_val => _224;
            let _229: core::panicking::AssertKind;
            scope 31 {
                debug kind => _229;
            }
        }
    }

    bb0: {
        _3 = const -1_i8;
        _2 = &_3;
        _7 = discriminant(_6);
        _5 = move _7 as i8 (IntToInt);
        _4 = &_5;
        _1 = (move _2, move _4);
        _8 = (_1.0: &i8);
        _9 = (_1.1: &i8);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<i8, i8>(move _14, _8, _9, move _16);
    }

    bb2: {
        _19 = const -1_i16;
        _18 = &_19;
        _23 = discriminant(_22);
        _21 = move _23 as i16 (IntToInt);
        _20 = &_21;
        _17 = (move _18, move _20);
        _24 = (_17.0: &i16);
        _25 = (_17.1: &i16);
        _28 = (*_24);
        _29 = (*_25);
        _27 = Eq(move _28, move _29);
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _30 = core::panicking::AssertKind::Eq;
        _32 = Option::<Arguments<'_>>::None;
        _31 = core::panicking::assert_failed::<i16, i16>(move _30, _24, _25, move _32);
    }

    bb4: {
        _35 = const -1_i32;
        _34 = &_35;
        _39 = discriminant(_38);
        _37 = move _39 as i32 (IntToInt);
        _36 = &_37;
        _33 = (move _34, move _36);
        _40 = (_33.0: &i32);
        _41 = (_33.1: &i32);
        _44 = (*_40);
        _45 = (*_41);
        _43 = Eq(move _44, move _45);
        _42 = Not(move _43);
        switchInt(move _42) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _46 = core::panicking::AssertKind::Eq;
        _48 = Option::<Arguments<'_>>::None;
        _47 = core::panicking::assert_failed::<i32, i32>(move _46, _40, _41, move _48);
    }

    bb6: {
        _51 = const -1_i64;
        _50 = &_51;
        _55 = discriminant(_54);
        _53 = move _55 as i64 (IntToInt);
        _52 = &_53;
        _49 = (move _50, move _52);
        _56 = (_49.0: &i64);
        _57 = (_49.1: &i64);
        _60 = (*_56);
        _61 = (*_57);
        _59 = Eq(move _60, move _61);
        _58 = Not(move _59);
        switchInt(move _58) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _62 = core::panicking::AssertKind::Eq;
        _64 = Option::<Arguments<'_>>::None;
        _63 = core::panicking::assert_failed::<i64, i64>(move _62, _56, _57, move _64);
    }

    bb8: {
        _67 = const -1_i128;
        _66 = &_67;
        _71 = discriminant(_70);
        _69 = move _71 as i128 (IntToInt);
        _68 = &_69;
        _65 = (move _66, move _68);
        _72 = (_65.0: &i128);
        _73 = (_65.1: &i128);
        _76 = (*_72);
        _77 = (*_73);
        _75 = Eq(move _76, move _77);
        _74 = Not(move _75);
        switchInt(move _74) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _78 = core::panicking::AssertKind::Eq;
        _80 = Option::<Arguments<'_>>::None;
        _79 = core::panicking::assert_failed::<i128, i128>(move _78, _72, _73, move _80);
    }

    bb10: {
        _83 = const -1_i8;
        _82 = &_83;
        _86 = std::hint::black_box::<Nums>(const Nums::NegOne) -> bb11;
    }

    bb11: {
        _87 = discriminant(_86);
        _85 = move _87 as i8 (IntToInt);
        _84 = &_85;
        _81 = (move _82, move _84);
        _88 = (_81.0: &i8);
        _89 = (_81.1: &i8);
        _92 = (*_88);
        _93 = (*_89);
        _91 = Eq(move _92, move _93);
        _90 = Not(move _91);
        switchInt(move _90) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _94 = core::panicking::AssertKind::Eq;
        _96 = Option::<Arguments<'_>>::None;
        _95 = core::panicking::assert_failed::<i8, i8>(move _94, _88, _89, move _96);
    }

    bb13: {
        _99 = const -1_i16;
        _98 = &_99;
        _102 = std::hint::black_box::<Nums>(const Nums::NegOne) -> bb14;
    }

    bb14: {
        _103 = discriminant(_102);
        _101 = move _103 as i16 (IntToInt);
        _100 = &_101;
        _97 = (move _98, move _100);
        _104 = (_97.0: &i16);
        _105 = (_97.1: &i16);
        _108 = (*_104);
        _109 = (*_105);
        _107 = Eq(move _108, move _109);
        _106 = Not(move _107);
        switchInt(move _106) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _110 = core::panicking::AssertKind::Eq;
        _112 = Option::<Arguments<'_>>::None;
        _111 = core::panicking::assert_failed::<i16, i16>(move _110, _104, _105, move _112);
    }

    bb16: {
        _115 = const -1_i32;
        _114 = &_115;
        _118 = std::hint::black_box::<Nums>(const Nums::NegOne) -> bb17;
    }

    bb17: {
        _119 = discriminant(_118);
        _117 = move _119 as i32 (IntToInt);
        _116 = &_117;
        _113 = (move _114, move _116);
        _120 = (_113.0: &i32);
        _121 = (_113.1: &i32);
        _124 = (*_120);
        _125 = (*_121);
        _123 = Eq(move _124, move _125);
        _122 = Not(move _123);
        switchInt(move _122) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _126 = core::panicking::AssertKind::Eq;
        _128 = Option::<Arguments<'_>>::None;
        _127 = core::panicking::assert_failed::<i32, i32>(move _126, _120, _121, move _128);
    }

    bb19: {
        _131 = const -1_i64;
        _130 = &_131;
        _134 = std::hint::black_box::<Nums>(const Nums::NegOne) -> bb20;
    }

    bb20: {
        _135 = discriminant(_134);
        _133 = move _135 as i64 (IntToInt);
        _132 = &_133;
        _129 = (move _130, move _132);
        _136 = (_129.0: &i64);
        _137 = (_129.1: &i64);
        _140 = (*_136);
        _141 = (*_137);
        _139 = Eq(move _140, move _141);
        _138 = Not(move _139);
        switchInt(move _138) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _142 = core::panicking::AssertKind::Eq;
        _144 = Option::<Arguments<'_>>::None;
        _143 = core::panicking::assert_failed::<i64, i64>(move _142, _136, _137, move _144);
    }

    bb22: {
        _147 = const -1_i128;
        _146 = &_147;
        _150 = std::hint::black_box::<Nums>(const Nums::NegOne) -> bb23;
    }

    bb23: {
        _151 = discriminant(_150);
        _149 = move _151 as i128 (IntToInt);
        _148 = &_149;
        _145 = (move _146, move _148);
        _152 = (_145.0: &i128);
        _153 = (_145.1: &i128);
        _156 = (*_152);
        _157 = (*_153);
        _155 = Eq(move _156, move _157);
        _154 = Not(move _155);
        switchInt(move _154) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _158 = core::panicking::AssertKind::Eq;
        _160 = Option::<Arguments<'_>>::None;
        _159 = core::panicking::assert_failed::<i128, i128>(move _158, _152, _153, move _160);
    }

    bb25: {
        _161 = test_as_arg(const Nums::NegOne) -> bb26;
    }

    bb26: {
        _164 = const -1_i8;
        _163 = &_164;
        _166 = const _;
        _165 = &_166;
        _162 = (move _163, move _165);
        _167 = (_162.0: &i8);
        _168 = (_162.1: &i8);
        _171 = (*_167);
        _172 = (*_168);
        _170 = Eq(move _171, move _172);
        _169 = Not(move _170);
        switchInt(move _169) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _173 = core::panicking::AssertKind::Eq;
        _175 = Option::<Arguments<'_>>::None;
        _174 = core::panicking::assert_failed::<i8, i8>(move _173, _167, _168, move _175);
    }

    bb28: {
        _178 = const -1_i16;
        _177 = &_178;
        _180 = const _;
        _179 = &_180;
        _176 = (move _177, move _179);
        _181 = (_176.0: &i16);
        _182 = (_176.1: &i16);
        _185 = (*_181);
        _186 = (*_182);
        _184 = Eq(move _185, move _186);
        _183 = Not(move _184);
        switchInt(move _183) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _187 = core::panicking::AssertKind::Eq;
        _189 = Option::<Arguments<'_>>::None;
        _188 = core::panicking::assert_failed::<i16, i16>(move _187, _181, _182, move _189);
    }

    bb30: {
        _192 = const -1_i32;
        _191 = &_192;
        _194 = const _;
        _193 = &_194;
        _190 = (move _191, move _193);
        _195 = (_190.0: &i32);
        _196 = (_190.1: &i32);
        _199 = (*_195);
        _200 = (*_196);
        _198 = Eq(move _199, move _200);
        _197 = Not(move _198);
        switchInt(move _197) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _201 = core::panicking::AssertKind::Eq;
        _203 = Option::<Arguments<'_>>::None;
        _202 = core::panicking::assert_failed::<i32, i32>(move _201, _195, _196, move _203);
    }

    bb32: {
        _206 = const -1_i64;
        _205 = &_206;
        _208 = const _;
        _207 = &_208;
        _204 = (move _205, move _207);
        _209 = (_204.0: &i64);
        _210 = (_204.1: &i64);
        _213 = (*_209);
        _214 = (*_210);
        _212 = Eq(move _213, move _214);
        _211 = Not(move _212);
        switchInt(move _211) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        _215 = core::panicking::AssertKind::Eq;
        _217 = Option::<Arguments<'_>>::None;
        _216 = core::panicking::assert_failed::<i64, i64>(move _215, _209, _210, move _217);
    }

    bb34: {
        _220 = const -1_i128;
        _219 = &_220;
        _222 = const _;
        _221 = &_222;
        _218 = (move _219, move _221);
        _223 = (_218.0: &i128);
        _224 = (_218.1: &i128);
        _227 = (*_223);
        _228 = (*_224);
        _226 = Eq(move _227, move _228);
        _225 = Not(move _226);
        switchInt(move _225) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _229 = core::panicking::AssertKind::Eq;
        _231 = Option::<Arguments<'_>>::None;
        _230 = core::panicking::assert_failed::<i128, i128>(move _229, _223, _224, move _231);
    }

    bb36: {
        return;
    }
}
