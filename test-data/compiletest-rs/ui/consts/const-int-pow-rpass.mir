// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const IS_POWER_OF_TWO_A: bool = {
    let mut _0: bool;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u32>::is_power_of_two(const 0_u32) -> bb1;
    }

    bb1: {
        return;
    }
}

const IS_POWER_OF_TWO_B: bool = {
    let mut _0: bool;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u32>::is_power_of_two(const 32_u32) -> bb1;
    }

    bb1: {
        return;
    }
}

const IS_POWER_OF_TWO_C: bool = {
    let mut _0: bool;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u32>::is_power_of_two(const 33_u32) -> bb1;
    }

    bb1: {
        return;
    }
}

const POW: u8 = {
    let mut _0: u8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u8>::pow(const 3_u8, const 5_u32) -> bb1;
    }

    bb1: {
        return;
    }
}

const CHECKED_POW_OK: Option<u8> = {
    let mut _0: std::option::Option<u8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u8>::checked_pow(const 3_u8, const 5_u32) -> bb1;
    }

    bb1: {
        return;
    }
}

const CHECKED_POW_OVERFLOW: Option<u8> = {
    let mut _0: std::option::Option<u8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u8>::checked_pow(const 3_u8, const 6_u32) -> bb1;
    }

    bb1: {
        return;
    }
}

const WRAPPING_POW: u8 = {
    let mut _0: u8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u8>::wrapping_pow(const 3_u8, const 6_u32) -> bb1;
    }

    bb1: {
        return;
    }
}

const OVERFLOWING_POW: (u8, bool) = {
    let mut _0: (u8, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u8>::overflowing_pow(const 3_u8, const 6_u32) -> bb1;
    }

    bb1: {
        return;
    }
}

const SATURATING_POW: u8 = {
    let mut _0: u8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u8>::saturating_pow(const 3_u8, const 6_u32) -> bb1;
    }

    bb1: {
        return;
    }
}

const NEXT_POWER_OF_TWO: u32 = {
    let mut _0: u32;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u32>::next_power_of_two(const 3_u32) -> bb1;
    }

    bb1: {
        return;
    }
}

const CHECKED_NEXT_POWER_OF_TWO_OK: Option<u32> = {
    let mut _0: std::option::Option<u32>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u32>::checked_next_power_of_two(const 3_u32) -> bb1;
    }

    bb1: {
        return;
    }
}

const CHECKED_NEXT_POWER_OF_TWO_OVERFLOW: Option<u32> = {
    let mut _0: std::option::Option<u32>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u32>::checked_next_power_of_two(const _) -> bb1;
    }

    bb1: {
        return;
    }
}

const WRAPPING_NEXT_POWER_OF_TWO: u32 = {
    let mut _0: u32;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u32>::wrapping_next_power_of_two(const _) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: !;
    let mut _4: bool;
    let mut _5: !;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: !;
    let mut _9: (&u8, &u8);
    let mut _10: &u8;
    let _11: u8;
    let mut _12: &u8;
    let _13: u8;
    let _14: &u8;
    let _15: &u8;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: u8;
    let mut _19: u8;
    let _21: !;
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _23: (&std::option::Option<u8>, &std::option::Option<u8>);
    let mut _24: &std::option::Option<u8>;
    let _25: std::option::Option<u8>;
    let mut _26: &std::option::Option<u8>;
    let _27: std::option::Option<u8>;
    let _28: &std::option::Option<u8>;
    let _29: &std::option::Option<u8>;
    let mut _30: bool;
    let mut _31: bool;
    let _33: !;
    let mut _34: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _35: (&std::option::Option<u8>, &std::option::Option<u8>);
    let mut _36: &std::option::Option<u8>;
    let _37: std::option::Option<u8>;
    let mut _38: &std::option::Option<u8>;
    let _39: std::option::Option<u8>;
    let _40: &std::option::Option<u8>;
    let _41: &std::option::Option<u8>;
    let mut _42: bool;
    let mut _43: bool;
    let _45: !;
    let mut _46: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _47: (&u8, &u8);
    let mut _48: &u8;
    let _49: u8;
    let mut _50: &u8;
    let _51: u8;
    let _52: &u8;
    let _53: &u8;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: u8;
    let mut _57: u8;
    let _59: !;
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _61: (&(u8, bool), &(u8, bool));
    let mut _62: &(u8, bool);
    let _63: (u8, bool);
    let mut _64: &(u8, bool);
    let _65: (u8, bool);
    let _66: &(u8, bool);
    let _67: &(u8, bool);
    let mut _68: bool;
    let mut _69: bool;
    let _71: !;
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _73: (&u8, &u8);
    let mut _74: &u8;
    let _75: u8;
    let mut _76: &u8;
    let _77: u8;
    let _78: &u8;
    let _79: &u8;
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: u8;
    let mut _83: u8;
    let _85: !;
    let mut _86: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _87: (&u32, &u32);
    let mut _88: &u32;
    let _89: u32;
    let mut _90: &u32;
    let _91: u32;
    let _92: &u32;
    let _93: &u32;
    let mut _94: bool;
    let mut _95: bool;
    let mut _96: u32;
    let mut _97: u32;
    let _99: !;
    let mut _100: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _101: (&std::option::Option<u32>, &std::option::Option<u32>);
    let mut _102: &std::option::Option<u32>;
    let _103: std::option::Option<u32>;
    let mut _104: &std::option::Option<u32>;
    let _105: std::option::Option<u32>;
    let _106: &std::option::Option<u32>;
    let _107: &std::option::Option<u32>;
    let mut _108: bool;
    let mut _109: bool;
    let _111: !;
    let mut _112: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _113: (&std::option::Option<u32>, &std::option::Option<u32>);
    let mut _114: &std::option::Option<u32>;
    let _115: std::option::Option<u32>;
    let mut _116: &std::option::Option<u32>;
    let _117: std::option::Option<u32>;
    let _118: &std::option::Option<u32>;
    let _119: &std::option::Option<u32>;
    let mut _120: bool;
    let mut _121: bool;
    let _123: !;
    let mut _124: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _125: (&u32, &u32);
    let mut _126: &u32;
    let _127: u32;
    let mut _128: &u32;
    let _129: u32;
    let _130: &u32;
    let _131: &u32;
    let mut _132: bool;
    let mut _133: bool;
    let mut _134: u32;
    let mut _135: u32;
    let _137: !;
    let mut _138: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _14;
        debug right_val => _15;
        let _20: core::panicking::AssertKind;
        scope 2 {
            debug kind => _20;
        }
    }
    scope 3 {
        debug left_val => _28;
        debug right_val => _29;
        let _32: core::panicking::AssertKind;
        scope 4 {
            debug kind => _32;
        }
    }
    scope 5 {
        debug left_val => _40;
        debug right_val => _41;
        let _44: core::panicking::AssertKind;
        scope 6 {
            debug kind => _44;
        }
    }
    scope 7 {
        debug left_val => _52;
        debug right_val => _53;
        let _58: core::panicking::AssertKind;
        scope 8 {
            debug kind => _58;
        }
    }
    scope 9 {
        debug left_val => _66;
        debug right_val => _67;
        let _70: core::panicking::AssertKind;
        scope 10 {
            debug kind => _70;
        }
    }
    scope 11 {
        debug left_val => _78;
        debug right_val => _79;
        let _84: core::panicking::AssertKind;
        scope 12 {
            debug kind => _84;
        }
    }
    scope 13 {
        debug left_val => _92;
        debug right_val => _93;
        let _98: core::panicking::AssertKind;
        scope 14 {
            debug kind => _98;
        }
    }
    scope 15 {
        debug left_val => _106;
        debug right_val => _107;
        let _110: core::panicking::AssertKind;
        scope 16 {
            debug kind => _110;
        }
    }
    scope 17 {
        debug left_val => _118;
        debug right_val => _119;
        let _122: core::panicking::AssertKind;
        scope 18 {
            debug kind => _122;
        }
    }
    scope 19 {
        debug left_val => _130;
        debug right_val => _131;
        let _136: core::panicking::AssertKind;
        scope 20 {
            debug kind => _136;
        }
    }

    bb0: {
        _2 = Not(const _);
        _1 = Not(move _2);
        switchInt(move _1) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _3 = core::panicking::panic(const "assertion failed: !IS_POWER_OF_TWO_A");
    }

    bb2: {
        _4 = Not(const _);
        switchInt(move _4) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _5 = core::panicking::panic(const "assertion failed: IS_POWER_OF_TWO_B");
    }

    bb4: {
        _7 = Not(const _);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _8 = core::panicking::panic(const "assertion failed: !IS_POWER_OF_TWO_C");
    }

    bb6: {
        _11 = const _;
        _10 = &_11;
        _13 = const 243_u8;
        _12 = &_13;
        _9 = (move _10, move _12);
        _14 = (_9.0: &u8);
        _15 = (_9.1: &u8);
        _18 = (*_14);
        _19 = (*_15);
        _17 = Eq(move _18, move _19);
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _20 = core::panicking::AssertKind::Eq;
        _22 = Option::<Arguments<'_>>::None;
        _21 = core::panicking::assert_failed::<u8, u8>(move _20, _14, _15, move _22);
    }

    bb8: {
        _25 = const _;
        _24 = &_25;
        _27 = Option::<u8>::Some(const 243_u8);
        _26 = &_27;
        _23 = (move _24, move _26);
        _28 = (_23.0: &std::option::Option<u8>);
        _29 = (_23.1: &std::option::Option<u8>);
        _31 = <Option<u8> as PartialEq>::eq(_28, _29) -> bb9;
    }

    bb9: {
        _30 = Not(move _31);
        switchInt(move _30) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _32 = core::panicking::AssertKind::Eq;
        _34 = Option::<Arguments<'_>>::None;
        _33 = core::panicking::assert_failed::<Option<u8>, Option<u8>>(move _32, _28, _29, move _34);
    }

    bb11: {
        _37 = const _;
        _36 = &_37;
        _39 = Option::<u8>::None;
        _38 = &_39;
        _35 = (move _36, move _38);
        _40 = (_35.0: &std::option::Option<u8>);
        _41 = (_35.1: &std::option::Option<u8>);
        _43 = <Option<u8> as PartialEq>::eq(_40, _41) -> bb12;
    }

    bb12: {
        _42 = Not(move _43);
        switchInt(move _42) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _44 = core::panicking::AssertKind::Eq;
        _46 = Option::<Arguments<'_>>::None;
        _45 = core::panicking::assert_failed::<Option<u8>, Option<u8>>(move _44, _40, _41, move _46);
    }

    bb14: {
        _49 = const _;
        _48 = &_49;
        _51 = const 217_u8;
        _50 = &_51;
        _47 = (move _48, move _50);
        _52 = (_47.0: &u8);
        _53 = (_47.1: &u8);
        _56 = (*_52);
        _57 = (*_53);
        _55 = Eq(move _56, move _57);
        _54 = Not(move _55);
        switchInt(move _54) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _58 = core::panicking::AssertKind::Eq;
        _60 = Option::<Arguments<'_>>::None;
        _59 = core::panicking::assert_failed::<u8, u8>(move _58, _52, _53, move _60);
    }

    bb16: {
        _63 = const _;
        _62 = &_63;
        _65 = (const 217_u8, const true);
        _64 = &_65;
        _61 = (move _62, move _64);
        _66 = (_61.0: &(u8, bool));
        _67 = (_61.1: &(u8, bool));
        _69 = <(u8, bool) as PartialEq>::eq(_66, _67) -> bb17;
    }

    bb17: {
        _68 = Not(move _69);
        switchInt(move _68) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _70 = core::panicking::AssertKind::Eq;
        _72 = Option::<Arguments<'_>>::None;
        _71 = core::panicking::assert_failed::<(u8, bool), (u8, bool)>(move _70, _66, _67, move _72);
    }

    bb19: {
        _75 = const _;
        _74 = &_75;
        _77 = const _;
        _76 = &_77;
        _73 = (move _74, move _76);
        _78 = (_73.0: &u8);
        _79 = (_73.1: &u8);
        _82 = (*_78);
        _83 = (*_79);
        _81 = Eq(move _82, move _83);
        _80 = Not(move _81);
        switchInt(move _80) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _84 = core::panicking::AssertKind::Eq;
        _86 = Option::<Arguments<'_>>::None;
        _85 = core::panicking::assert_failed::<u8, u8>(move _84, _78, _79, move _86);
    }

    bb21: {
        _89 = const _;
        _88 = &_89;
        _91 = const 4_u32;
        _90 = &_91;
        _87 = (move _88, move _90);
        _92 = (_87.0: &u32);
        _93 = (_87.1: &u32);
        _96 = (*_92);
        _97 = (*_93);
        _95 = Eq(move _96, move _97);
        _94 = Not(move _95);
        switchInt(move _94) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        _98 = core::panicking::AssertKind::Eq;
        _100 = Option::<Arguments<'_>>::None;
        _99 = core::panicking::assert_failed::<u32, u32>(move _98, _92, _93, move _100);
    }

    bb23: {
        _103 = const _;
        _102 = &_103;
        _105 = Option::<u32>::Some(const 4_u32);
        _104 = &_105;
        _101 = (move _102, move _104);
        _106 = (_101.0: &std::option::Option<u32>);
        _107 = (_101.1: &std::option::Option<u32>);
        _109 = <Option<u32> as PartialEq>::eq(_106, _107) -> bb24;
    }

    bb24: {
        _108 = Not(move _109);
        switchInt(move _108) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _110 = core::panicking::AssertKind::Eq;
        _112 = Option::<Arguments<'_>>::None;
        _111 = core::panicking::assert_failed::<Option<u32>, Option<u32>>(move _110, _106, _107, move _112);
    }

    bb26: {
        _115 = const _;
        _114 = &_115;
        _117 = Option::<u32>::None;
        _116 = &_117;
        _113 = (move _114, move _116);
        _118 = (_113.0: &std::option::Option<u32>);
        _119 = (_113.1: &std::option::Option<u32>);
        _121 = <Option<u32> as PartialEq>::eq(_118, _119) -> bb27;
    }

    bb27: {
        _120 = Not(move _121);
        switchInt(move _120) -> [0: bb29, otherwise: bb28];
    }

    bb28: {
        _122 = core::panicking::AssertKind::Eq;
        _124 = Option::<Arguments<'_>>::None;
        _123 = core::panicking::assert_failed::<Option<u32>, Option<u32>>(move _122, _118, _119, move _124);
    }

    bb29: {
        _127 = const _;
        _126 = &_127;
        _129 = const 0_u32;
        _128 = &_129;
        _125 = (move _126, move _128);
        _130 = (_125.0: &u32);
        _131 = (_125.1: &u32);
        _134 = (*_130);
        _135 = (*_131);
        _133 = Eq(move _134, move _135);
        _132 = Not(move _133);
        switchInt(move _132) -> [0: bb31, otherwise: bb30];
    }

    bb30: {
        _136 = core::panicking::AssertKind::Eq;
        _138 = Option::<Arguments<'_>>::None;
        _137 = core::panicking::assert_failed::<u32, u32>(move _136, _130, _131, move _138);
    }

    bb31: {
        return;
    }
}
