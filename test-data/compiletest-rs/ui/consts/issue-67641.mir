// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
B::a::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

fn <impl at ui/consts/issue-67641.rs:6:10: 6:15>::fmt(_1: &B<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &&[std::cell::Cell<std::option::Option<&B<'_>>>; 2];
    let _7: &[std::cell::Cell<std::option::Option<&B<'_>>>; 2];

    bb0: {
        _3 = const "B";
        _4 = const "a";
        _7 = &((*_1).0: [std::cell::Cell<std::option::Option<&B<'_>>>; 2]);
        _6 = &_7;
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _3, _4, move _5) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/consts/issue-67641.rs:11:1: 11:15>::new() -> B<'_> {
    let mut _0: B<'_>;
    let mut _1: [std::cell::Cell<std::option::Option<&B<'_>>>; 2];
    let mut _2: std::cell::Cell<std::option::Option<&B<'_>>>;
    let mut _3: std::option::Option<&B<'_>>;
    let mut _4: std::cell::Cell<std::option::Option<&B<'_>>>;
    let mut _5: std::option::Option<&B<'_>>;

    bb0: {
        _3 = Option::<&B<'_>>::None;
        _2 = Cell::<Option<&B<'_>>>::new(move _3) -> bb1;
    }

    bb1: {
        _5 = Option::<&B<'_>>::None;
        _4 = Cell::<Option<&B<'_>>>::new(move _5) -> bb2;
    }

    bb2: {
        _1 = [move _2, move _4];
        _0 = B::<'_> { a: move _1 };
        return;
    }
}

fn f() -> () {
    let mut _0: ();
    let _1: B<'_>;
    let _2: ();
    let mut _3: &std::cell::Cell<std::option::Option<&B<'_>>>;
    let _4: usize;
    let mut _5: usize;
    let mut _6: bool;
    let mut _7: std::option::Option<&B<'_>>;
    let _8: &B<'_>;
    scope 1 {
        debug b2 => _1;
    }

    bb0: {
        _1 = B::<'_>::new() -> bb1;
    }

    bb1: {
        _4 = const 0_usize;
        _5 = const 2_usize;
        _6 = Lt(_4, _5);
        assert(move _6, "index out of bounds: the length is {} but the index is {}", move _5, _4) -> bb2;
    }

    bb2: {
        _3 = &(_1.0: [std::cell::Cell<std::option::Option<&B<'_>>>; 2])[_4];
        _8 = &_1;
        _7 = Option::<&B<'_>>::Some(_8);
        _2 = Cell::<Option<&B<'_>>>::set(move _3, move _7) -> bb3;
    }

    bb3: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();

    bb0: {
        _1 = f() -> bb1;
    }

    bb1: {
        return;
    }
}
