// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static PLUS_ONE: &dyn Fn(i32) -> i32 + Sync = {
    let mut _0: &dyn std::ops::Fn(i32) -> i32 + std::marker::Sync;
    let mut _1: &dyn std::ops::Fn(i32) -> i32 + std::marker::Sync;
    let _2: &dyn std::ops::Fn(i32) -> i32 + std::marker::Sync;
    let mut _3: &[closure@ui/consts/issue-27890.rs:2:59: 2:67];
    let _4: &[closure@ui/consts/issue-27890.rs:2:59: 2:67];
    let _5: [closure@ui/consts/issue-27890.rs:2:59: 2:67];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = [closure@ui/consts/issue-27890.rs:2:59: 2:67];
        _4 = &_5;
        _3 = &(*_4);
        _2 = move _3 as &dyn std::ops::Fn(i32) -> i32 + std::marker::Sync (Pointer(Unsize));
        StorageDead(_3);
        _1 = &(*_2);
        _0 = move _1 as &dyn std::ops::Fn(i32) -> i32 + std::marker::Sync (Pointer(Unsize));
        StorageDead(_4);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

fn PLUS_ONE::{closure#0}(_1: &[closure@ui/consts/issue-27890.rs:2:59: 2:67], _2: i32) -> i32 {
    debug x => _2;
    let mut _0: i32;

    bb0: {
        _0 = Add(_2, const 1_i32);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&i32, &i32);
    let mut _2: &i32;
    let _3: i32;
    let _4: &&dyn std::ops::Fn(i32) -> i32 + std::marker::Sync;
    let mut _5: (i32,);
    let mut _6: &i32;
    let _7: i32;
    let _8: &i32;
    let _9: &i32;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: i32;
    let mut _13: i32;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: &dyn std::ops::Fn(i32) -> i32 + std::marker::Sync;
    scope 1 {
        debug left_val => _8;
        debug right_val => _9;
        let _14: core::panicking::AssertKind;
        scope 2 {
            debug kind => _14;
        }
    }

    bb0: {
        _4 = const {alloc1: &&dyn Fn(i32) -> i32 + Sync};
        _17 = deref_copy (*_4);
        _5 = (const 2_i32,);
        _3 = <dyn Fn(i32) -> i32 + Sync as Fn<(i32,)>>::call(_17, move _5) -> bb1;
    }

    bb1: {
        _2 = &_3;
        _7 = const 3_i32;
        _6 = &_7;
        _1 = (move _2, move _6);
        _8 = (_1.0: &i32);
        _9 = (_1.1: &i32);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<i32, i32>(move _14, _8, _9, move _16);
    }

    bb3: {
        return;
    }
}

alloc1 (static: PLUS_ONE, size: 16, align: 8) {
    ╾───────alloc5────────╼ ╾───────alloc6────────╼ │ ╾──────╼╾──────╼
}

alloc5 (size: 0, align: 1) {}

alloc6 (vtable: impl Fn<(i32,)> for [closure@ui/consts/issue-27890.rs:2:59: 2:67])
