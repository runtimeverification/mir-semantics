// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const ARR: [usize; 5] = {
    let mut _0: [usize; 5];

    bb0: {
        _0 = [const 5_usize, const 4_usize, const 3_usize, const 2_usize, const 1_usize];
        return;
    }
}

ARR::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 5_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let mut _2: &usize;
    let _3: usize;
    let mut _4: &usize;
    let _5: [usize; 5];
    let _6: usize;
    let mut _7: [usize; 5];
    let _8: usize;
    let mut _9: usize;
    let mut _10: bool;
    let mut _11: usize;
    let mut _12: bool;
    let _13: &usize;
    let _14: &usize;
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: usize;
    let mut _18: usize;
    let _20: !;
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _13;
        debug right_val => _14;
        let _19: core::panicking::AssertKind;
        scope 2 {
            debug kind => _19;
        }
    }

    bb0: {
        _3 = const 3_usize;
        _2 = &_3;
        _5 = const _;
        _7 = const _;
        _8 = const 3_usize;
        _9 = const 5_usize;
        _10 = Lt(_8, _9);
        assert(move _10, "index out of bounds: the length is {} but the index is {}", move _9, _8) -> bb1;
    }

    bb1: {
        _6 = _7[_8];
        _11 = const 5_usize;
        _12 = Lt(_6, _11);
        assert(move _12, "index out of bounds: the length is {} but the index is {}", move _11, _6) -> bb2;
    }

    bb2: {
        _4 = &_5[_6];
        _1 = (move _2, move _4);
        _13 = (_1.0: &usize);
        _14 = (_1.1: &usize);
        _17 = (*_13);
        _18 = (*_14);
        _16 = Eq(move _17, move _18);
        _15 = Not(move _16);
        switchInt(move _15) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _19 = core::panicking::AssertKind::Eq;
        _21 = Option::<Arguments<'_>>::None;
        _20 = core::panicking::assert_failed::<usize, usize>(move _19, _13, _14, move _21);
    }

    bb4: {
        return;
    }
}
