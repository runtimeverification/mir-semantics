// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static ID_ISIZE: TypeId = {
    let mut _0: std::any::TypeId;

    bb0: {
        ConstEvalCounter;
        _0 = TypeId::of::<isize>() -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&std::any::TypeId, &std::any::TypeId);
    let _2: &std::any::TypeId;
    let mut _3: &std::any::TypeId;
    let _4: std::any::TypeId;
    let _5: &std::any::TypeId;
    let _6: &std::any::TypeId;
    let mut _7: bool;
    let mut _8: bool;
    let _10: !;
    let mut _11: std::option::Option<std::fmt::Arguments<'_>>;
    let _12: std::any::TypeId;
    let _13: std::any::TypeId;
    let _14: std::any::TypeId;
    let mut _15: (std::any::TypeId, std::any::TypeId, std::any::TypeId);
    let mut _16: std::any::TypeId;
    let mut _17: std::any::TypeId;
    let mut _18: std::any::TypeId;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: &std::any::TypeId;
    let _22: (std::any::TypeId, std::any::TypeId, std::any::TypeId);
    let mut _23: &std::any::TypeId;
    let _24: (std::any::TypeId, std::any::TypeId, std::any::TypeId);
    let mut _25: !;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: &std::any::TypeId;
    let _29: (std::any::TypeId, std::any::TypeId, std::any::TypeId);
    let mut _30: &std::any::TypeId;
    let _31: (std::any::TypeId, std::any::TypeId, std::any::TypeId);
    let mut _32: !;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: &std::any::TypeId;
    let _36: (std::any::TypeId, std::any::TypeId, std::any::TypeId);
    let mut _37: &std::any::TypeId;
    let _38: (std::any::TypeId, std::any::TypeId, std::any::TypeId);
    let mut _39: !;
    let mut _40: (&std::any::TypeId, &std::any::TypeId);
    let mut _41: &std::any::TypeId;
    let _42: (std::any::TypeId, std::any::TypeId, std::any::TypeId);
    let mut _43: &std::any::TypeId;
    let mut _46: bool;
    let mut _47: bool;
    let _49: !;
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _51: (&std::any::TypeId, &std::any::TypeId);
    let mut _52: &std::any::TypeId;
    let _53: (std::any::TypeId, std::any::TypeId, std::any::TypeId);
    let mut _54: &std::any::TypeId;
    let mut _57: bool;
    let mut _58: bool;
    let _60: !;
    let mut _61: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _62: (&std::any::TypeId, &std::any::TypeId);
    let mut _63: &std::any::TypeId;
    let _64: (std::any::TypeId, std::any::TypeId, std::any::TypeId);
    let mut _65: &std::any::TypeId;
    let mut _68: bool;
    let mut _69: bool;
    let _71: !;
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: &std::any::TypeId;
    let _76: (std::any::TypeId, std::any::TypeId);
    let mut _77: &std::any::TypeId;
    let _78: (std::any::TypeId, std::any::TypeId);
    let mut _79: !;
    scope 1 {
        debug left_val => _5;
        debug right_val => _6;
        let _9: core::panicking::AssertKind;
        scope 2 {
            debug kind => _9;
        }
    }
    scope 3 {
        debug d => _12;
        debug e => _13;
        debug f => _14;
        let _44: &std::any::TypeId;
        let _45: &std::any::TypeId;
        let _55: &std::any::TypeId;
        let _56: &std::any::TypeId;
        let _66: &std::any::TypeId;
        let _67: &std::any::TypeId;
        scope 4 {
            debug left_val => _44;
            debug right_val => _45;
            let _48: core::panicking::AssertKind;
            scope 5 {
                debug kind => _48;
            }
        }
        scope 6 {
            debug left_val => _55;
            debug right_val => _56;
            let _59: core::panicking::AssertKind;
            scope 7 {
                debug kind => _59;
            }
        }
        scope 8 {
            debug left_val => _66;
            debug right_val => _67;
            let _70: core::panicking::AssertKind;
            scope 9 {
                debug kind => _70;
            }
        }
    }

    bb0: {
        _2 = const {alloc1: &TypeId};
        _4 = TypeId::of::<isize>() -> bb1;
    }

    bb1: {
        _3 = &_4;
        _1 = (_2, move _3);
        _5 = (_1.0: &std::any::TypeId);
        _6 = (_1.1: &std::any::TypeId);
        _8 = <TypeId as PartialEq>::eq(_5, _6) -> bb2;
    }

    bb2: {
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _9 = core::panicking::AssertKind::Eq;
        _11 = Option::<Arguments<'_>>::None;
        _10 = core::panicking::assert_failed::<TypeId, TypeId>(move _9, _5, _6, move _11);
    }

    bb4: {
        _16 = TypeId::of::<usize>() -> bb5;
    }

    bb5: {
        _17 = TypeId::of::<&str>() -> bb6;
    }

    bb6: {
        _18 = TypeId::of::<A>() -> bb7;
    }

    bb7: {
        _15 = (move _16, move _17, move _18);
        _12 = (_15.0: std::any::TypeId);
        _13 = (_15.1: std::any::TypeId);
        _14 = (_15.2: std::any::TypeId);
        _22 = const _;
        _21 = &(_22.0: std::any::TypeId);
        _24 = const _;
        _23 = &(_24.1: std::any::TypeId);
        _20 = <TypeId as PartialEq>::ne(move _21, move _23) -> bb8;
    }

    bb8: {
        _19 = Not(move _20);
        switchInt(move _19) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _25 = core::panicking::panic(const "assertion failed: T.0 != T.1");
    }

    bb10: {
        _29 = const _;
        _28 = &(_29.0: std::any::TypeId);
        _31 = const _;
        _30 = &(_31.2: std::any::TypeId);
        _27 = <TypeId as PartialEq>::ne(move _28, move _30) -> bb11;
    }

    bb11: {
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _32 = core::panicking::panic(const "assertion failed: T.0 != T.2");
    }

    bb13: {
        _36 = const _;
        _35 = &(_36.1: std::any::TypeId);
        _38 = const _;
        _37 = &(_38.2: std::any::TypeId);
        _34 = <TypeId as PartialEq>::ne(move _35, move _37) -> bb14;
    }

    bb14: {
        _33 = Not(move _34);
        switchInt(move _33) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _39 = core::panicking::panic(const "assertion failed: T.1 != T.2");
    }

    bb16: {
        _42 = const _;
        _41 = &(_42.0: std::any::TypeId);
        _43 = &_12;
        _40 = (move _41, move _43);
        _44 = (_40.0: &std::any::TypeId);
        _45 = (_40.1: &std::any::TypeId);
        _47 = <TypeId as PartialEq>::eq(_44, _45) -> bb17;
    }

    bb17: {
        _46 = Not(move _47);
        switchInt(move _46) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _48 = core::panicking::AssertKind::Eq;
        _50 = Option::<Arguments<'_>>::None;
        _49 = core::panicking::assert_failed::<TypeId, TypeId>(move _48, _44, _45, move _50);
    }

    bb19: {
        _53 = const _;
        _52 = &(_53.1: std::any::TypeId);
        _54 = &_13;
        _51 = (move _52, move _54);
        _55 = (_51.0: &std::any::TypeId);
        _56 = (_51.1: &std::any::TypeId);
        _58 = <TypeId as PartialEq>::eq(_55, _56) -> bb20;
    }

    bb20: {
        _57 = Not(move _58);
        switchInt(move _57) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _59 = core::panicking::AssertKind::Eq;
        _61 = Option::<Arguments<'_>>::None;
        _60 = core::panicking::assert_failed::<TypeId, TypeId>(move _59, _55, _56, move _61);
    }

    bb22: {
        _64 = const _;
        _63 = &(_64.2: std::any::TypeId);
        _65 = &_14;
        _62 = (move _63, move _65);
        _66 = (_62.0: &std::any::TypeId);
        _67 = (_62.1: &std::any::TypeId);
        _69 = <TypeId as PartialEq>::eq(_66, _67) -> bb23;
    }

    bb23: {
        _68 = Not(move _69);
        switchInt(move _68) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _70 = core::panicking::AssertKind::Eq;
        _72 = Option::<Arguments<'_>>::None;
        _71 = core::panicking::assert_failed::<TypeId, TypeId>(move _70, _66, _67, move _72);
    }

    bb25: {
        _76 = const _;
        _75 = &(_76.0: std::any::TypeId);
        _78 = const _;
        _77 = &(_78.1: std::any::TypeId);
        _74 = <TypeId as PartialEq>::ne(move _75, move _77) -> bb26;
    }

    bb26: {
        _73 = Not(move _74);
        switchInt(move _73) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _79 = core::panicking::panic(const "assertion failed: F.0 != F.1");
    }

    bb28: {
        return;
    }
}

alloc1 (static: ID_ISIZE, size: 16, align: 8) {
    b0 60 2e a2 80 b9 58 86 ac 0a 56 1c 83 92 5f 1e â”‚ .`....X...V..._.
}

const T: (TypeId, TypeId, TypeId) = {
    let mut _0: (std::any::TypeId, std::any::TypeId, std::any::TypeId);
    let mut _1: std::any::TypeId;
    let mut _2: std::any::TypeId;
    let mut _3: std::any::TypeId;

    bb0: {
        StorageLive(_1);
        ConstEvalCounter;
        _1 = TypeId::of::<usize>() -> bb1;
    }

    bb1: {
        StorageLive(_2);
        ConstEvalCounter;
        _2 = TypeId::of::<&str>() -> bb2;
    }

    bb2: {
        StorageLive(_3);
        ConstEvalCounter;
        _3 = TypeId::of::<A>() -> bb3;
    }

    bb3: {
        _0 = (move _1, move _2, move _3);
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

const F: (TypeId, TypeId) = {
    let mut _0: (std::any::TypeId, std::any::TypeId);
    let mut _1: std::any::TypeId;
    let mut _2: std::any::TypeId;

    bb0: {
        StorageLive(_1);
        ConstEvalCounter;
        _1 = TypeId::of::<fn(fn(A) -> A) -> A>() -> bb1;
    }

    bb1: {
        StorageLive(_2);
        ConstEvalCounter;
        _2 = TypeId::of::<fn(fn() -> A, A) -> A>() -> bb2;
    }

    bb2: {
        _0 = (move _1, move _2);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}
