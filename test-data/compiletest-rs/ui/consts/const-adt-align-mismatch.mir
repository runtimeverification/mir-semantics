// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Foo::Bar::0::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}

fn <impl at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19>::eq(_1: &Foo, _2: &Foo) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: (&Foo, &Foo);
    let mut _8: isize;
    let mut _9: isize;
    let mut _10: isize;
    let mut _13: u32;
    let mut _14: u32;
    let mut _17: &Foo;
    let mut _18: &Foo;
    let mut _19: &Foo;
    let mut _20: &Foo;
    let mut _21: &Foo;
    let mut _22: &Foo;
    let mut _23: &Foo;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
            let _11: &u32;
            let _12: &u32;
            let _15: &[u16; 4];
            let _16: &[u16; 4];
            scope 3 {
                debug __self_0 => _11;
                debug __arg1_0 => _12;
            }
            scope 4 {
                debug __self_0 => _15;
                debug __arg1_0 => _16;
            }
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _5 = Eq(_3, _4);
        switchInt(move _5) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _7 = (_1, _2);
        _17 = deref_copy (_7.0: &Foo);
        _10 = discriminant((*_17));
        switchInt(move _10) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb3: {
        return;
    }

    bb4: {
        _18 = deref_copy (_7.1: &Foo);
        _8 = discriminant((*_18));
        switchInt(move _8) -> [0: bb7, otherwise: bb5];
    }

    bb5: {
        _6 = const true;
        goto -> bb9;
    }

    bb6: {
        _19 = deref_copy (_7.1: &Foo);
        _9 = discriminant((*_19));
        switchInt(move _9) -> [1: bb8, otherwise: bb5];
    }

    bb7: {
        _20 = deref_copy (_7.0: &Foo);
        _11 = &(((*_20) as A).0: u32);
        _21 = deref_copy (_7.1: &Foo);
        _12 = &(((*_21) as A).0: u32);
        _13 = (*_11);
        _14 = (*_12);
        _6 = Eq(move _13, move _14);
        goto -> bb9;
    }

    bb8: {
        _22 = deref_copy (_7.0: &Foo);
        _15 = &(((*_22) as Bar).0: [u16; 4]);
        _23 = deref_copy (_7.1: &Foo);
        _16 = &(((*_23) as Bar).0: [u16; 4]);
        _6 = <[u16; 4] as PartialEq>::eq(_15, _16) -> bb9;
    }

    bb9: {
        _0 = move _6;
        goto -> bb3;
    }
}

fn <impl at ui/consts/const-adt-align-mismatch.rs:7:21: 7:26>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &u32;
    let _5: &str;
    let mut _6: &dyn std::fmt::Debug;
    let _7: &&u32;
    let _8: &[u16; 4];
    let _9: &str;
    let mut _10: &dyn std::fmt::Debug;
    let _11: &&[u16; 4];
    let _12: &str;
    scope 1 {
        debug __self_0 => _4;
    }
    scope 2 {
        debug __self_0 => _8;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _12 = const "C";
        _0 = Formatter::<'_>::write_str(_2, _12) -> bb5;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as A).0: u32);
        _5 = const "A";
        _7 = &_4;
        _6 = _7 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _5, move _6) -> bb5;
    }

    bb4: {
        _8 = &(((*_1) as Bar).0: [u16; 4]);
        _9 = const "Bar";
        _11 = &_8;
        _10 = _11 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _9, move _10) -> bb5;
    }

    bb5: {
        return;
    }
}

static FOO: Foo = {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::C;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&Foo, &Foo);
    let _2: &Foo;
    let mut _3: &Foo;
    let _4: Foo;
    let _5: &Foo;
    let _6: &Foo;
    let mut _7: bool;
    let mut _8: bool;
    let _10: !;
    let mut _11: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _12: (&usize, &usize);
    let mut _13: &usize;
    let _14: usize;
    let mut _15: &usize;
    let _16: usize;
    let _17: &usize;
    let _18: &usize;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: usize;
    let mut _22: usize;
    let _24: !;
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _26: (&usize, &usize);
    let mut _27: &usize;
    let _28: usize;
    let mut _29: &usize;
    let _30: usize;
    let _31: &usize;
    let _32: &usize;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: usize;
    let mut _36: usize;
    let _38: !;
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _5;
        debug right_val => _6;
        let _9: core::panicking::AssertKind;
        scope 2 {
            debug kind => _9;
        }
    }
    scope 3 {
        debug left_val => _17;
        debug right_val => _18;
        let _23: core::panicking::AssertKind;
        scope 4 {
            debug kind => _23;
        }
    }
    scope 5 {
        debug left_val => _31;
        debug right_val => _32;
        let _37: core::panicking::AssertKind;
        scope 6 {
            debug kind => _37;
        }
    }

    bb0: {
        _2 = const {alloc1: &Foo};
        _4 = Foo::C;
        _3 = &_4;
        _1 = (_2, move _3);
        _5 = (_1.0: &Foo);
        _6 = (_1.1: &Foo);
        _8 = <Foo as PartialEq>::eq(_5, _6) -> bb1;
    }

    bb1: {
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _9 = core::panicking::AssertKind::Eq;
        _11 = Option::<Arguments<'_>>::None;
        _10 = core::panicking::assert_failed::<Foo, Foo>(move _9, _5, _6, move _11);
    }

    bb3: {
        _14 = std::mem::size_of::<Foo>() -> bb4;
    }

    bb4: {
        _13 = &_14;
        _16 = const 12_usize;
        _15 = &_16;
        _12 = (move _13, move _15);
        _17 = (_12.0: &usize);
        _18 = (_12.1: &usize);
        _21 = (*_17);
        _22 = (*_18);
        _20 = Eq(move _21, move _22);
        _19 = Not(move _20);
        switchInt(move _19) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _23 = core::panicking::AssertKind::Eq;
        _25 = Option::<Arguments<'_>>::None;
        _24 = core::panicking::assert_failed::<usize, usize>(move _23, _17, _18, move _25);
    }

    bb6: {
        _28 = std::mem::min_align_of::<Foo>() -> bb7;
    }

    bb7: {
        _27 = &_28;
        _30 = const 4_usize;
        _29 = &_30;
        _26 = (move _27, move _29);
        _31 = (_26.0: &usize);
        _32 = (_26.1: &usize);
        _35 = (*_31);
        _36 = (*_32);
        _34 = Eq(move _35, move _36);
        _33 = Not(move _34);
        switchInt(move _33) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _37 = core::panicking::AssertKind::Eq;
        _39 = Option::<Arguments<'_>>::None;
        _38 = core::panicking::assert_failed::<usize, usize>(move _37, _31, _32, move _39);
    }

    bb9: {
        return;
    }
}

alloc1 (static: FOO, size: 12, align: 4) {
    02 00 __ __ __ __ __ __ __ __ __ __             │ ..░░░░░░░░░░
}

fn Foo::A(_1: u32) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::A(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo::A(_1: u32) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::A(move _1);
        return;
    }
}

fn Foo::Bar(_1: [u16; 4]) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::Bar(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo::Bar(_1: [u16; 4]) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::Bar(move _1);
        return;
    }
}
