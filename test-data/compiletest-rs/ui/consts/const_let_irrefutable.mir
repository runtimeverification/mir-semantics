// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn tup(_1: (i32, i32)) -> i32 {
    let mut _0: i32;
    let _2: i32;
    let _3: i32;
    scope 1 {
        debug a => _2;
        debug b => _3;
    }

    bb0: {
        _2 = (_1.0: i32);
        _3 = (_1.1: i32);
        _0 = Add(_2, _3);
        return;
    }
}

// MIR FOR CTFE
fn tup(_1: (i32, i32)) -> i32 {
    let mut _0: i32;
    let _2: i32;
    let _3: i32;
    let mut _4: i32;
    let mut _5: i32;
    scope 1 {
        debug a => _2;
        debug b => _3;
    }

    bb0: {
        StorageLive(_2);
        _2 = (_1.0: i32);
        StorageLive(_3);
        _3 = (_1.1: i32);
        StorageLive(_4);
        _4 = _2;
        StorageLive(_5);
        _5 = _3;
        _0 = Add(move _4, move _5);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        return;
    }
}

fn array(_1: [i32; 2]) -> i32 {
    let mut _0: i32;
    let _2: i32;
    let _3: i32;
    scope 1 {
        debug a => _2;
        debug b => _3;
    }

    bb0: {
        _2 = _1[0 of 2];
        _3 = _1[1 of 2];
        _0 = Add(_2, _3);
        return;
    }
}

// MIR FOR CTFE
fn array(_1: [i32; 2]) -> i32 {
    let mut _0: i32;
    let _2: i32;
    let _3: i32;
    let mut _4: i32;
    let mut _5: i32;
    scope 1 {
        debug a => _2;
        debug b => _3;
    }

    bb0: {
        StorageLive(_2);
        _2 = _1[0 of 2];
        StorageLive(_3);
        _3 = _1[1 of 2];
        StorageLive(_4);
        _4 = _2;
        StorageLive(_5);
        _5 = _3;
        _0 = Add(move _4, move _5);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        return;
    }
}

array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}
