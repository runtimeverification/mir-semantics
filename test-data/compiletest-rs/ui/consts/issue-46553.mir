// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/consts/issue-46553.rs:7:1: 7:16>::new(_1: fn() -> T) -> Data<T> {
    debug function => _1;
    let mut _0: Data<T>;

    bb0: {
        _0 = Data::<T> { function: _1 };
        return;
    }
}

// MIR FOR CTFE
fn <impl at ui/consts/issue-46553.rs:7:1: 7:16>::new(_1: fn() -> T) -> Data<T> {
    debug function => _1;
    let mut _0: Data<T>;
    let mut _2: fn() -> T;

    bb0: {
        StorageLive(_2);
        _2 = _1;
        _0 = Data::<T> { function: move _2 };
        StorageDead(_2);
        return;
    }
}

static DATA: Data<i32> = {
    let mut _0: Data<i32>;
    let mut _1: fn() -> i32;
    let mut _2: [closure@ui/consts/issue-46553.rs:15:40: 15:42];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = [closure@ui/consts/issue-46553.rs:15:40: 15:42];
        _1 = move _2 as fn() -> i32 (Pointer(ClosureFnPointer(Normal)));
        StorageDead(_2);
        ConstEvalCounter;
        _0 = Data::<i32>::new(move _1) -> bb1;
    }

    bb1: {
        StorageDead(_1);
        return;
    }
}

fn DATA::{closure#0}(_1: &[closure@ui/consts/issue-46553.rs:15:40: 15:42]) -> i32 {
    let mut _0: i32;

    bb0: {
        _0 = const 413_i32;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let _4: &[&str; 1];
    let _5: [&str; 1];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &i32;
    let _11: i32;
    let mut _12: fn() -> i32;
    let mut _13: &Data<i32>;

    bb0: {
        _5 = [const ""];
        _4 = &_5;
        _3 = _4 as &[&str] (Pointer(Unsize));
        _13 = const {alloc1: &Data<i32>};
        _12 = ((*_13).0: fn() -> i32);
        _11 = move _12() -> bb1;
    }

    bb1: {
        _10 = &_11;
        _9 = core::fmt::rt::Argument::<'_>::new_debug::<i32>(_10) -> bb2;
    }

    bb2: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_v1(move _3, move _6) -> bb3;
    }

    bb3: {
        _1 = _print(move _2) -> bb4;
    }

    bb4: {
        return;
    }
}

alloc1 (static: DATA, size: 8, align: 8) {
    ╾───────alloc7────────╼                         │ ╾──────╼
}

alloc7 (fn: <[closure@ui/consts/issue-46553.rs:15:40: 15:42] as FnOnce<()>>::call_once - shim)
