// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> [u8; 4398046511104] {
    let mut _0: [u8; 4398046511104];
    let mut _1: !;

    bb0: {
        _1 = core::panicking::panic(const "not implemented");
    }
}

foo::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: usize;
    let mut _2: usize;
    let mut _3: usize;
    let mut _4: (usize, bool);
    let mut _5: (usize, bool);
    let mut _6: (usize, bool);
    let mut _7: (usize, bool);

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _4 = CheckedMul(const 4_usize, const 1024_usize);
        assert(!move (_4.1: bool), "attempt to compute `{} * {}`, which would overflow", const 4_usize, const 1024_usize) -> bb1;
    }

    bb1: {
        _3 = move (_4.0: usize);
        _5 = CheckedMul(_3, const 1024_usize);
        assert(!move (_5.1: bool), "attempt to compute `{} * {}`, which would overflow", move _3, const 1024_usize) -> bb2;
    }

    bb2: {
        _2 = move (_5.0: usize);
        StorageDead(_3);
        _6 = CheckedMul(_2, const 1024_usize);
        assert(!move (_6.1: bool), "attempt to compute `{} * {}`, which would overflow", move _2, const 1024_usize) -> bb3;
    }

    bb3: {
        _1 = move (_6.0: usize);
        StorageDead(_2);
        _7 = CheckedMul(_1, const 1024_usize);
        assert(!move (_7.1: bool), "attempt to compute `{} * {}`, which would overflow", move _1, const 1024_usize) -> bb4;
    }

    bb4: {
        _0 = move (_7.0: usize);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: [u8; 4398046511104];

    bb0: {
        _1 = foo() -> bb1;
    }

    bb1: {
        return;
    }
}
