// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn nop(_1: T) -> T {
    debug x => _1;
    let mut _0: T;

    bb0: {
        _0 = move _1;
        return;
    }
}

// MIR FOR CTFE
fn nop(_1: T) -> T {
    debug x => _1;
    let mut _0: T;

    bb0: {
        _0 = move _1;
        return;
    }
}

fn <impl at ui/consts/const-float-classify.rs:17:1: 17:31>::eq(_1: bool, _2: bool) -> bool {
    debug self => _1;
    debug b => _2;
    let mut _0: bool;

    bb0: {
        _0 = Eq(_1, _2);
        return;
    }
}

// MIR FOR CTFE
fn <impl at ui/consts/const-float-classify.rs:17:1: 17:31>::eq(_1: bool, _2: bool) -> bool {
    debug self => _1;
    debug b => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: bool;

    bb0: {
        StorageLive(_3);
        _3 = _1;
        StorageLive(_4);
        _4 = _2;
        _0 = Eq(move _3, move _4);
        StorageDead(_4);
        StorageDead(_3);
        return;
    }
}

fn <impl at ui/consts/const-float-classify.rs:23:1: 23:33>::eq(_1: bool, _2: NonDet) -> bool {
    debug self => _1;
    let mut _0: bool;

    bb0: {
        _0 = const true;
        return;
    }
}

// MIR FOR CTFE
fn <impl at ui/consts/const-float-classify.rs:23:1: 23:33>::eq(_1: bool, _2: NonDet) -> bool {
    debug self => _1;
    let mut _0: bool;

    bb0: {
        _0 = const true;
        return;
    }
}

fn eq(_1: A, _2: B) -> bool {
    debug x => _1;
    debug y => _2;
    let mut _0: bool;

    bb0: {
        _0 = <A as MyEq<B>>::eq(move _1, move _2) -> bb1;
    }

    bb1: {
        return;
    }
}

// MIR FOR CTFE
fn eq(_1: A, _2: B) -> bool {
    debug x => _1;
    debug y => _2;
    let mut _0: bool;
    let mut _3: A;
    let mut _4: B;

    bb0: {
        StorageLive(_3);
        _3 = move _1;
        StorageLive(_4);
        _4 = move _2;
        ConstEvalCounter;
        _0 = <A as MyEq<B>>::eq(move _3, move _4) -> [return: bb1, unwind: bb2];
    }

    bb1: {
        StorageDead(_4);
        StorageDead(_3);
        return;
    }

    bb2 (cleanup): {
        resume;
    }
}

fn <impl at ui/consts/const-float-classify.rs:69:10: 69:15>::fmt(_1: &NonDet, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "NonDet";
        _0 = Formatter::<'_>::write_str(_2, _3) -> bb1;
    }

    bb1: {
        return;
    }
}

fn f32() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: f32;
    let mut _6: bool;
    let mut _7: !;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: f32;
    let mut _13: bool;
    let mut _14: !;
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: f32;
    let mut _20: bool;
    let mut _21: !;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: f32;
    let mut _27: bool;
    let mut _28: !;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: f32;
    let mut _34: NonDet;
    let mut _35: !;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: f32;
    let mut _41: NonDet;
    let mut _42: !;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: f32;
    let mut _48: bool;
    let mut _49: !;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: f32;
    let mut _55: bool;
    let mut _56: !;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: f32;
    let mut _62: bool;
    let mut _63: !;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: f32;
    let mut _69: bool;
    let mut _70: !;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: f32;
    let mut _76: NonDet;
    let mut _77: !;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: f32;
    let mut _83: NonDet;
    let mut _84: !;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: bool;
    let mut _88: bool;
    let mut _89: bool;
    let mut _90: !;
    let mut _91: bool;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: bool;
    let mut _95: bool;
    let mut _96: !;
    let mut _97: bool;
    let mut _98: bool;
    let mut _99: bool;
    let mut _100: bool;
    let mut _101: bool;
    let mut _102: !;
    let mut _103: bool;
    let mut _104: bool;
    let mut _105: bool;
    let mut _106: bool;
    let mut _107: bool;
    let mut _108: !;
    let mut _109: bool;
    let mut _110: bool;
    let mut _111: bool;
    let mut _112: bool;
    let mut _113: bool;
    let mut _114: !;
    let mut _115: bool;
    let mut _116: bool;
    let mut _117: bool;
    let mut _118: bool;
    let mut _119: bool;
    let mut _120: !;
    let mut _121: bool;
    let mut _122: bool;
    let mut _123: bool;
    let mut _124: bool;
    let mut _125: bool;
    let mut _126: !;
    let mut _127: bool;
    let mut _128: bool;
    let mut _129: bool;
    let mut _130: bool;
    let mut _131: bool;
    let mut _132: !;
    let mut _133: bool;
    let mut _134: bool;
    let mut _135: bool;
    let mut _136: bool;
    let mut _137: bool;
    let mut _138: !;
    let mut _139: bool;
    let mut _140: bool;
    let mut _141: bool;
    let mut _142: bool;
    let mut _143: bool;
    let mut _144: !;
    let mut _145: bool;
    let mut _146: bool;
    let mut _147: bool;
    let mut _148: bool;
    let mut _149: bool;
    let mut _150: !;
    let mut _151: bool;
    let mut _152: bool;
    let mut _153: bool;
    let mut _154: bool;
    let mut _155: bool;
    let mut _156: !;
    let mut _157: bool;
    let mut _158: bool;
    let mut _159: bool;
    let mut _160: bool;
    let mut _161: bool;
    let mut _162: !;
    let mut _163: bool;
    let mut _164: bool;
    let mut _165: bool;
    let mut _166: bool;
    let mut _167: bool;
    let mut _168: !;
    let mut _169: bool;
    let mut _170: bool;
    let mut _171: bool;
    let mut _172: bool;
    let mut _173: bool;
    let mut _174: !;
    let mut _175: bool;
    let mut _176: bool;
    let mut _177: bool;
    let mut _178: bool;
    let mut _179: bool;
    let mut _180: !;
    let mut _181: bool;
    let mut _182: bool;
    let mut _183: bool;
    let mut _184: bool;
    let mut _185: bool;
    let mut _186: !;
    let mut _187: bool;
    let mut _188: bool;
    let mut _189: bool;
    let mut _190: bool;
    let mut _191: bool;
    let mut _192: !;
    let mut _193: bool;
    let mut _194: bool;
    let mut _195: bool;
    let mut _196: bool;
    let mut _197: bool;
    let mut _198: !;
    let mut _199: bool;
    let mut _200: bool;
    let mut _201: bool;
    let mut _202: bool;
    let mut _203: bool;
    let mut _204: !;
    let mut _205: bool;
    let mut _206: bool;
    let mut _207: bool;
    let mut _208: bool;
    let mut _209: bool;
    let mut _210: !;
    let mut _211: bool;
    let mut _212: bool;
    let mut _213: bool;
    let mut _214: bool;
    let mut _215: bool;
    let mut _216: !;
    let mut _217: bool;
    let mut _218: bool;
    let mut _219: bool;
    let mut _220: bool;
    let mut _221: bool;
    let mut _222: !;
    let mut _223: bool;
    let mut _224: bool;
    let mut _225: bool;
    let mut _226: bool;
    let mut _227: bool;
    let mut _228: !;
    let mut _229: bool;
    let mut _230: bool;
    let mut _231: bool;
    let mut _232: bool;
    let mut _233: f32;
    let mut _234: bool;
    let mut _235: !;
    let mut _236: bool;
    let mut _237: bool;
    let mut _238: bool;
    let mut _239: bool;
    let mut _240: f32;
    let mut _241: bool;
    let mut _242: !;
    let mut _243: bool;
    let mut _244: bool;
    let mut _245: bool;
    let mut _246: bool;
    let mut _247: f32;
    let mut _248: bool;
    let mut _249: !;
    let mut _250: bool;
    let mut _251: bool;
    let mut _252: bool;
    let mut _253: bool;
    let mut _254: f32;
    let mut _255: bool;
    let mut _256: !;
    let mut _257: bool;
    let mut _258: bool;
    let mut _259: bool;
    let mut _260: bool;
    let mut _261: f32;
    let mut _262: bool;
    let mut _263: !;
    let mut _264: bool;
    let mut _265: bool;
    let mut _266: bool;
    let mut _267: bool;
    let mut _268: f32;
    let mut _269: bool;
    let mut _270: !;
    let mut _271: bool;
    let mut _272: bool;
    let mut _273: bool;
    let mut _274: bool;
    let mut _275: f32;
    let mut _276: bool;
    let mut _277: !;
    let mut _278: bool;
    let mut _279: bool;
    let mut _280: bool;
    let mut _281: bool;
    let mut _282: f32;
    let mut _283: bool;
    let mut _284: !;
    let mut _285: bool;
    let mut _286: bool;
    let mut _287: bool;
    let mut _288: bool;
    let mut _289: f32;
    let mut _290: bool;
    let mut _291: !;
    let mut _292: bool;
    let mut _293: bool;
    let mut _294: bool;
    let mut _295: bool;
    let mut _296: f32;
    let mut _297: bool;
    let mut _298: !;
    let mut _299: bool;
    let mut _300: bool;
    let mut _301: bool;
    let mut _302: bool;
    let mut _303: f32;
    let mut _304: bool;
    let mut _305: !;
    let mut _306: bool;
    let mut _307: bool;
    let mut _308: bool;
    let mut _309: bool;
    let mut _310: f32;
    let mut _311: bool;
    let mut _312: !;

    bb0: {
        _5 = Div(const -0f32, const 0f32);
        _4 = core::f32::<impl f32>::is_nan(move _5) -> bb1;
    }

    bb1: {
        _3 = nop::<bool>(move _4) -> bb2;
    }

    bb2: {
        _6 = nop::<bool>(const true) -> bb3;
    }

    bb3: {
        _2 = eq::<bool, bool>(move _3, move _6) -> bb4;
    }

    bb4: {
        _1 = Not(move _2);
        switchInt(move _1) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _7 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_nan(-0.0 / 0.0)), nop(true))");
    }

    bb6: {
        _12 = Div(const -0f32, const 0f32);
        _11 = core::f32::<impl f32>::is_infinite(move _12) -> bb7;
    }

    bb7: {
        _10 = nop::<bool>(move _11) -> bb8;
    }

    bb8: {
        _13 = nop::<bool>(const false) -> bb9;
    }

    bb9: {
        _9 = eq::<bool, bool>(move _10, move _13) -> bb10;
    }

    bb10: {
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _14 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_infinite(-0.0 / 0.0)), nop(false))");
    }

    bb12: {
        _19 = Div(const -0f32, const 0f32);
        _18 = core::f32::<impl f32>::is_finite(move _19) -> bb13;
    }

    bb13: {
        _17 = nop::<bool>(move _18) -> bb14;
    }

    bb14: {
        _20 = nop::<bool>(const false) -> bb15;
    }

    bb15: {
        _16 = eq::<bool, bool>(move _17, move _20) -> bb16;
    }

    bb16: {
        _15 = Not(move _16);
        switchInt(move _15) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _21 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_finite(-0.0 / 0.0)), nop(false))");
    }

    bb18: {
        _26 = Div(const -0f32, const 0f32);
        _25 = core::f32::<impl f32>::is_normal(move _26) -> bb19;
    }

    bb19: {
        _24 = nop::<bool>(move _25) -> bb20;
    }

    bb20: {
        _27 = nop::<bool>(const false) -> bb21;
    }

    bb21: {
        _23 = eq::<bool, bool>(move _24, move _27) -> bb22;
    }

    bb22: {
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _28 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_normal(-0.0 / 0.0)), nop(false))");
    }

    bb24: {
        _33 = Div(const -0f32, const 0f32);
        _32 = core::f32::<impl f32>::is_sign_positive(move _33) -> bb25;
    }

    bb25: {
        _31 = nop::<bool>(move _32) -> bb26;
    }

    bb26: {
        _34 = nop::<NonDet>(const NonDet) -> bb27;
    }

    bb27: {
        _30 = eq::<bool, NonDet>(move _31, const NonDet) -> bb28;
    }

    bb28: {
        _29 = Not(move _30);
        switchInt(move _29) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _35 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_sign_positive(-0.0 / 0.0)), nop(NonDet))");
    }

    bb30: {
        _40 = Div(const -0f32, const 0f32);
        _39 = core::f32::<impl f32>::is_sign_negative(move _40) -> bb31;
    }

    bb31: {
        _38 = nop::<bool>(move _39) -> bb32;
    }

    bb32: {
        _41 = nop::<NonDet>(const NonDet) -> bb33;
    }

    bb33: {
        _37 = eq::<bool, NonDet>(move _38, const NonDet) -> bb34;
    }

    bb34: {
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _42 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_sign_negative(-0.0 / 0.0)), nop(NonDet))");
    }

    bb36: {
        _47 = Div(const 0f32, const 0f32);
        _46 = core::f32::<impl f32>::is_nan(move _47) -> bb37;
    }

    bb37: {
        _45 = nop::<bool>(move _46) -> bb38;
    }

    bb38: {
        _48 = nop::<bool>(const true) -> bb39;
    }

    bb39: {
        _44 = eq::<bool, bool>(move _45, move _48) -> bb40;
    }

    bb40: {
        _43 = Not(move _44);
        switchInt(move _43) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _49 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_nan(0.0 / 0.0)), nop(true))");
    }

    bb42: {
        _54 = Div(const 0f32, const 0f32);
        _53 = core::f32::<impl f32>::is_infinite(move _54) -> bb43;
    }

    bb43: {
        _52 = nop::<bool>(move _53) -> bb44;
    }

    bb44: {
        _55 = nop::<bool>(const false) -> bb45;
    }

    bb45: {
        _51 = eq::<bool, bool>(move _52, move _55) -> bb46;
    }

    bb46: {
        _50 = Not(move _51);
        switchInt(move _50) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _56 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_infinite(0.0 / 0.0)), nop(false))");
    }

    bb48: {
        _61 = Div(const 0f32, const 0f32);
        _60 = core::f32::<impl f32>::is_finite(move _61) -> bb49;
    }

    bb49: {
        _59 = nop::<bool>(move _60) -> bb50;
    }

    bb50: {
        _62 = nop::<bool>(const false) -> bb51;
    }

    bb51: {
        _58 = eq::<bool, bool>(move _59, move _62) -> bb52;
    }

    bb52: {
        _57 = Not(move _58);
        switchInt(move _57) -> [0: bb54, otherwise: bb53];
    }

    bb53: {
        _63 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_finite(0.0 / 0.0)), nop(false))");
    }

    bb54: {
        _68 = Div(const 0f32, const 0f32);
        _67 = core::f32::<impl f32>::is_normal(move _68) -> bb55;
    }

    bb55: {
        _66 = nop::<bool>(move _67) -> bb56;
    }

    bb56: {
        _69 = nop::<bool>(const false) -> bb57;
    }

    bb57: {
        _65 = eq::<bool, bool>(move _66, move _69) -> bb58;
    }

    bb58: {
        _64 = Not(move _65);
        switchInt(move _64) -> [0: bb60, otherwise: bb59];
    }

    bb59: {
        _70 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_normal(0.0 / 0.0)), nop(false))");
    }

    bb60: {
        _75 = Div(const 0f32, const 0f32);
        _74 = core::f32::<impl f32>::is_sign_positive(move _75) -> bb61;
    }

    bb61: {
        _73 = nop::<bool>(move _74) -> bb62;
    }

    bb62: {
        _76 = nop::<NonDet>(const NonDet) -> bb63;
    }

    bb63: {
        _72 = eq::<bool, NonDet>(move _73, const NonDet) -> bb64;
    }

    bb64: {
        _71 = Not(move _72);
        switchInt(move _71) -> [0: bb66, otherwise: bb65];
    }

    bb65: {
        _77 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_sign_positive(0.0 / 0.0)), nop(NonDet))");
    }

    bb66: {
        _82 = Div(const 0f32, const 0f32);
        _81 = core::f32::<impl f32>::is_sign_negative(move _82) -> bb67;
    }

    bb67: {
        _80 = nop::<bool>(move _81) -> bb68;
    }

    bb68: {
        _83 = nop::<NonDet>(const NonDet) -> bb69;
    }

    bb69: {
        _79 = eq::<bool, NonDet>(move _80, const NonDet) -> bb70;
    }

    bb70: {
        _78 = Not(move _79);
        switchInt(move _78) -> [0: bb72, otherwise: bb71];
    }

    bb71: {
        _84 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_sign_negative(0.0 / 0.0)), nop(NonDet))");
    }

    bb72: {
        _88 = core::f32::<impl f32>::is_nan(const 1f32) -> bb73;
    }

    bb73: {
        _87 = nop::<bool>(move _88) -> bb74;
    }

    bb74: {
        _89 = nop::<bool>(const false) -> bb75;
    }

    bb75: {
        _86 = eq::<bool, bool>(move _87, move _89) -> bb76;
    }

    bb76: {
        _85 = Not(move _86);
        switchInt(move _85) -> [0: bb78, otherwise: bb77];
    }

    bb77: {
        _90 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_nan(1.0)), nop(false))");
    }

    bb78: {
        _94 = core::f32::<impl f32>::is_infinite(const 1f32) -> bb79;
    }

    bb79: {
        _93 = nop::<bool>(move _94) -> bb80;
    }

    bb80: {
        _95 = nop::<bool>(const false) -> bb81;
    }

    bb81: {
        _92 = eq::<bool, bool>(move _93, move _95) -> bb82;
    }

    bb82: {
        _91 = Not(move _92);
        switchInt(move _91) -> [0: bb84, otherwise: bb83];
    }

    bb83: {
        _96 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_infinite(1.0)), nop(false))");
    }

    bb84: {
        _100 = core::f32::<impl f32>::is_finite(const 1f32) -> bb85;
    }

    bb85: {
        _99 = nop::<bool>(move _100) -> bb86;
    }

    bb86: {
        _101 = nop::<bool>(const true) -> bb87;
    }

    bb87: {
        _98 = eq::<bool, bool>(move _99, move _101) -> bb88;
    }

    bb88: {
        _97 = Not(move _98);
        switchInt(move _97) -> [0: bb90, otherwise: bb89];
    }

    bb89: {
        _102 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_finite(1.0)), nop(true))");
    }

    bb90: {
        _106 = core::f32::<impl f32>::is_normal(const 1f32) -> bb91;
    }

    bb91: {
        _105 = nop::<bool>(move _106) -> bb92;
    }

    bb92: {
        _107 = nop::<bool>(const true) -> bb93;
    }

    bb93: {
        _104 = eq::<bool, bool>(move _105, move _107) -> bb94;
    }

    bb94: {
        _103 = Not(move _104);
        switchInt(move _103) -> [0: bb96, otherwise: bb95];
    }

    bb95: {
        _108 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_normal(1.0)), nop(true))");
    }

    bb96: {
        _112 = core::f32::<impl f32>::is_sign_positive(const 1f32) -> bb97;
    }

    bb97: {
        _111 = nop::<bool>(move _112) -> bb98;
    }

    bb98: {
        _113 = nop::<bool>(const true) -> bb99;
    }

    bb99: {
        _110 = eq::<bool, bool>(move _111, move _113) -> bb100;
    }

    bb100: {
        _109 = Not(move _110);
        switchInt(move _109) -> [0: bb102, otherwise: bb101];
    }

    bb101: {
        _114 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_sign_positive(1.0)), nop(true))");
    }

    bb102: {
        _118 = core::f32::<impl f32>::is_sign_negative(const 1f32) -> bb103;
    }

    bb103: {
        _117 = nop::<bool>(move _118) -> bb104;
    }

    bb104: {
        _119 = nop::<bool>(const false) -> bb105;
    }

    bb105: {
        _116 = eq::<bool, bool>(move _117, move _119) -> bb106;
    }

    bb106: {
        _115 = Not(move _116);
        switchInt(move _115) -> [0: bb108, otherwise: bb107];
    }

    bb107: {
        _120 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_sign_negative(1.0)), nop(false))");
    }

    bb108: {
        _124 = core::f32::<impl f32>::is_nan(const -1f32) -> bb109;
    }

    bb109: {
        _123 = nop::<bool>(move _124) -> bb110;
    }

    bb110: {
        _125 = nop::<bool>(const false) -> bb111;
    }

    bb111: {
        _122 = eq::<bool, bool>(move _123, move _125) -> bb112;
    }

    bb112: {
        _121 = Not(move _122);
        switchInt(move _121) -> [0: bb114, otherwise: bb113];
    }

    bb113: {
        _126 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_nan(-1.0)), nop(false))");
    }

    bb114: {
        _130 = core::f32::<impl f32>::is_infinite(const -1f32) -> bb115;
    }

    bb115: {
        _129 = nop::<bool>(move _130) -> bb116;
    }

    bb116: {
        _131 = nop::<bool>(const false) -> bb117;
    }

    bb117: {
        _128 = eq::<bool, bool>(move _129, move _131) -> bb118;
    }

    bb118: {
        _127 = Not(move _128);
        switchInt(move _127) -> [0: bb120, otherwise: bb119];
    }

    bb119: {
        _132 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_infinite(-1.0)), nop(false))");
    }

    bb120: {
        _136 = core::f32::<impl f32>::is_finite(const -1f32) -> bb121;
    }

    bb121: {
        _135 = nop::<bool>(move _136) -> bb122;
    }

    bb122: {
        _137 = nop::<bool>(const true) -> bb123;
    }

    bb123: {
        _134 = eq::<bool, bool>(move _135, move _137) -> bb124;
    }

    bb124: {
        _133 = Not(move _134);
        switchInt(move _133) -> [0: bb126, otherwise: bb125];
    }

    bb125: {
        _138 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_finite(-1.0)), nop(true))");
    }

    bb126: {
        _142 = core::f32::<impl f32>::is_normal(const -1f32) -> bb127;
    }

    bb127: {
        _141 = nop::<bool>(move _142) -> bb128;
    }

    bb128: {
        _143 = nop::<bool>(const true) -> bb129;
    }

    bb129: {
        _140 = eq::<bool, bool>(move _141, move _143) -> bb130;
    }

    bb130: {
        _139 = Not(move _140);
        switchInt(move _139) -> [0: bb132, otherwise: bb131];
    }

    bb131: {
        _144 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_normal(-1.0)), nop(true))");
    }

    bb132: {
        _148 = core::f32::<impl f32>::is_sign_positive(const -1f32) -> bb133;
    }

    bb133: {
        _147 = nop::<bool>(move _148) -> bb134;
    }

    bb134: {
        _149 = nop::<bool>(const false) -> bb135;
    }

    bb135: {
        _146 = eq::<bool, bool>(move _147, move _149) -> bb136;
    }

    bb136: {
        _145 = Not(move _146);
        switchInt(move _145) -> [0: bb138, otherwise: bb137];
    }

    bb137: {
        _150 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_sign_positive(-1.0)), nop(false))");
    }

    bb138: {
        _154 = core::f32::<impl f32>::is_sign_negative(const -1f32) -> bb139;
    }

    bb139: {
        _153 = nop::<bool>(move _154) -> bb140;
    }

    bb140: {
        _155 = nop::<bool>(const true) -> bb141;
    }

    bb141: {
        _152 = eq::<bool, bool>(move _153, move _155) -> bb142;
    }

    bb142: {
        _151 = Not(move _152);
        switchInt(move _151) -> [0: bb144, otherwise: bb143];
    }

    bb143: {
        _156 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_sign_negative(-1.0)), nop(true))");
    }

    bb144: {
        _160 = core::f32::<impl f32>::is_nan(const 0f32) -> bb145;
    }

    bb145: {
        _159 = nop::<bool>(move _160) -> bb146;
    }

    bb146: {
        _161 = nop::<bool>(const false) -> bb147;
    }

    bb147: {
        _158 = eq::<bool, bool>(move _159, move _161) -> bb148;
    }

    bb148: {
        _157 = Not(move _158);
        switchInt(move _157) -> [0: bb150, otherwise: bb149];
    }

    bb149: {
        _162 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_nan(0.0)), nop(false))");
    }

    bb150: {
        _166 = core::f32::<impl f32>::is_infinite(const 0f32) -> bb151;
    }

    bb151: {
        _165 = nop::<bool>(move _166) -> bb152;
    }

    bb152: {
        _167 = nop::<bool>(const false) -> bb153;
    }

    bb153: {
        _164 = eq::<bool, bool>(move _165, move _167) -> bb154;
    }

    bb154: {
        _163 = Not(move _164);
        switchInt(move _163) -> [0: bb156, otherwise: bb155];
    }

    bb155: {
        _168 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_infinite(0.0)), nop(false))");
    }

    bb156: {
        _172 = core::f32::<impl f32>::is_finite(const 0f32) -> bb157;
    }

    bb157: {
        _171 = nop::<bool>(move _172) -> bb158;
    }

    bb158: {
        _173 = nop::<bool>(const true) -> bb159;
    }

    bb159: {
        _170 = eq::<bool, bool>(move _171, move _173) -> bb160;
    }

    bb160: {
        _169 = Not(move _170);
        switchInt(move _169) -> [0: bb162, otherwise: bb161];
    }

    bb161: {
        _174 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_finite(0.0)), nop(true))");
    }

    bb162: {
        _178 = core::f32::<impl f32>::is_normal(const 0f32) -> bb163;
    }

    bb163: {
        _177 = nop::<bool>(move _178) -> bb164;
    }

    bb164: {
        _179 = nop::<bool>(const false) -> bb165;
    }

    bb165: {
        _176 = eq::<bool, bool>(move _177, move _179) -> bb166;
    }

    bb166: {
        _175 = Not(move _176);
        switchInt(move _175) -> [0: bb168, otherwise: bb167];
    }

    bb167: {
        _180 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_normal(0.0)), nop(false))");
    }

    bb168: {
        _184 = core::f32::<impl f32>::is_sign_positive(const 0f32) -> bb169;
    }

    bb169: {
        _183 = nop::<bool>(move _184) -> bb170;
    }

    bb170: {
        _185 = nop::<bool>(const true) -> bb171;
    }

    bb171: {
        _182 = eq::<bool, bool>(move _183, move _185) -> bb172;
    }

    bb172: {
        _181 = Not(move _182);
        switchInt(move _181) -> [0: bb174, otherwise: bb173];
    }

    bb173: {
        _186 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_sign_positive(0.0)), nop(true))");
    }

    bb174: {
        _190 = core::f32::<impl f32>::is_sign_negative(const 0f32) -> bb175;
    }

    bb175: {
        _189 = nop::<bool>(move _190) -> bb176;
    }

    bb176: {
        _191 = nop::<bool>(const false) -> bb177;
    }

    bb177: {
        _188 = eq::<bool, bool>(move _189, move _191) -> bb178;
    }

    bb178: {
        _187 = Not(move _188);
        switchInt(move _187) -> [0: bb180, otherwise: bb179];
    }

    bb179: {
        _192 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_sign_negative(0.0)), nop(false))");
    }

    bb180: {
        _196 = core::f32::<impl f32>::is_nan(const -0f32) -> bb181;
    }

    bb181: {
        _195 = nop::<bool>(move _196) -> bb182;
    }

    bb182: {
        _197 = nop::<bool>(const false) -> bb183;
    }

    bb183: {
        _194 = eq::<bool, bool>(move _195, move _197) -> bb184;
    }

    bb184: {
        _193 = Not(move _194);
        switchInt(move _193) -> [0: bb186, otherwise: bb185];
    }

    bb185: {
        _198 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_nan(-0.0)), nop(false))");
    }

    bb186: {
        _202 = core::f32::<impl f32>::is_infinite(const -0f32) -> bb187;
    }

    bb187: {
        _201 = nop::<bool>(move _202) -> bb188;
    }

    bb188: {
        _203 = nop::<bool>(const false) -> bb189;
    }

    bb189: {
        _200 = eq::<bool, bool>(move _201, move _203) -> bb190;
    }

    bb190: {
        _199 = Not(move _200);
        switchInt(move _199) -> [0: bb192, otherwise: bb191];
    }

    bb191: {
        _204 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_infinite(-0.0)), nop(false))");
    }

    bb192: {
        _208 = core::f32::<impl f32>::is_finite(const -0f32) -> bb193;
    }

    bb193: {
        _207 = nop::<bool>(move _208) -> bb194;
    }

    bb194: {
        _209 = nop::<bool>(const true) -> bb195;
    }

    bb195: {
        _206 = eq::<bool, bool>(move _207, move _209) -> bb196;
    }

    bb196: {
        _205 = Not(move _206);
        switchInt(move _205) -> [0: bb198, otherwise: bb197];
    }

    bb197: {
        _210 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_finite(-0.0)), nop(true))");
    }

    bb198: {
        _214 = core::f32::<impl f32>::is_normal(const -0f32) -> bb199;
    }

    bb199: {
        _213 = nop::<bool>(move _214) -> bb200;
    }

    bb200: {
        _215 = nop::<bool>(const false) -> bb201;
    }

    bb201: {
        _212 = eq::<bool, bool>(move _213, move _215) -> bb202;
    }

    bb202: {
        _211 = Not(move _212);
        switchInt(move _211) -> [0: bb204, otherwise: bb203];
    }

    bb203: {
        _216 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_normal(-0.0)), nop(false))");
    }

    bb204: {
        _220 = core::f32::<impl f32>::is_sign_positive(const -0f32) -> bb205;
    }

    bb205: {
        _219 = nop::<bool>(move _220) -> bb206;
    }

    bb206: {
        _221 = nop::<bool>(const false) -> bb207;
    }

    bb207: {
        _218 = eq::<bool, bool>(move _219, move _221) -> bb208;
    }

    bb208: {
        _217 = Not(move _218);
        switchInt(move _217) -> [0: bb210, otherwise: bb209];
    }

    bb209: {
        _222 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_sign_positive(-0.0)), nop(false))");
    }

    bb210: {
        _226 = core::f32::<impl f32>::is_sign_negative(const -0f32) -> bb211;
    }

    bb211: {
        _225 = nop::<bool>(move _226) -> bb212;
    }

    bb212: {
        _227 = nop::<bool>(const true) -> bb213;
    }

    bb213: {
        _224 = eq::<bool, bool>(move _225, move _227) -> bb214;
    }

    bb214: {
        _223 = Not(move _224);
        switchInt(move _223) -> [0: bb216, otherwise: bb215];
    }

    bb215: {
        _228 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_sign_negative(-0.0)), nop(true))");
    }

    bb216: {
        _233 = Div(const 1f32, const 0f32);
        _232 = core::f32::<impl f32>::is_nan(move _233) -> bb217;
    }

    bb217: {
        _231 = nop::<bool>(move _232) -> bb218;
    }

    bb218: {
        _234 = nop::<bool>(const false) -> bb219;
    }

    bb219: {
        _230 = eq::<bool, bool>(move _231, move _234) -> bb220;
    }

    bb220: {
        _229 = Not(move _230);
        switchInt(move _229) -> [0: bb222, otherwise: bb221];
    }

    bb221: {
        _235 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_nan(1.0 / 0.0)), nop(false))");
    }

    bb222: {
        _240 = Div(const 1f32, const 0f32);
        _239 = core::f32::<impl f32>::is_infinite(move _240) -> bb223;
    }

    bb223: {
        _238 = nop::<bool>(move _239) -> bb224;
    }

    bb224: {
        _241 = nop::<bool>(const true) -> bb225;
    }

    bb225: {
        _237 = eq::<bool, bool>(move _238, move _241) -> bb226;
    }

    bb226: {
        _236 = Not(move _237);
        switchInt(move _236) -> [0: bb228, otherwise: bb227];
    }

    bb227: {
        _242 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_infinite(1.0 / 0.0)), nop(true))");
    }

    bb228: {
        _247 = Div(const 1f32, const 0f32);
        _246 = core::f32::<impl f32>::is_finite(move _247) -> bb229;
    }

    bb229: {
        _245 = nop::<bool>(move _246) -> bb230;
    }

    bb230: {
        _248 = nop::<bool>(const false) -> bb231;
    }

    bb231: {
        _244 = eq::<bool, bool>(move _245, move _248) -> bb232;
    }

    bb232: {
        _243 = Not(move _244);
        switchInt(move _243) -> [0: bb234, otherwise: bb233];
    }

    bb233: {
        _249 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_finite(1.0 / 0.0)), nop(false))");
    }

    bb234: {
        _254 = Div(const 1f32, const 0f32);
        _253 = core::f32::<impl f32>::is_normal(move _254) -> bb235;
    }

    bb235: {
        _252 = nop::<bool>(move _253) -> bb236;
    }

    bb236: {
        _255 = nop::<bool>(const false) -> bb237;
    }

    bb237: {
        _251 = eq::<bool, bool>(move _252, move _255) -> bb238;
    }

    bb238: {
        _250 = Not(move _251);
        switchInt(move _250) -> [0: bb240, otherwise: bb239];
    }

    bb239: {
        _256 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_normal(1.0 / 0.0)), nop(false))");
    }

    bb240: {
        _261 = Div(const 1f32, const 0f32);
        _260 = core::f32::<impl f32>::is_sign_positive(move _261) -> bb241;
    }

    bb241: {
        _259 = nop::<bool>(move _260) -> bb242;
    }

    bb242: {
        _262 = nop::<bool>(const true) -> bb243;
    }

    bb243: {
        _258 = eq::<bool, bool>(move _259, move _262) -> bb244;
    }

    bb244: {
        _257 = Not(move _258);
        switchInt(move _257) -> [0: bb246, otherwise: bb245];
    }

    bb245: {
        _263 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_sign_positive(1.0 / 0.0)), nop(true))");
    }

    bb246: {
        _268 = Div(const 1f32, const 0f32);
        _267 = core::f32::<impl f32>::is_sign_negative(move _268) -> bb247;
    }

    bb247: {
        _266 = nop::<bool>(move _267) -> bb248;
    }

    bb248: {
        _269 = nop::<bool>(const false) -> bb249;
    }

    bb249: {
        _265 = eq::<bool, bool>(move _266, move _269) -> bb250;
    }

    bb250: {
        _264 = Not(move _265);
        switchInt(move _264) -> [0: bb252, otherwise: bb251];
    }

    bb251: {
        _270 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_sign_negative(1.0 / 0.0)), nop(false))");
    }

    bb252: {
        _275 = Div(const -1f32, const 0f32);
        _274 = core::f32::<impl f32>::is_nan(move _275) -> bb253;
    }

    bb253: {
        _273 = nop::<bool>(move _274) -> bb254;
    }

    bb254: {
        _276 = nop::<bool>(const false) -> bb255;
    }

    bb255: {
        _272 = eq::<bool, bool>(move _273, move _276) -> bb256;
    }

    bb256: {
        _271 = Not(move _272);
        switchInt(move _271) -> [0: bb258, otherwise: bb257];
    }

    bb257: {
        _277 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_nan(-1.0 / 0.0)), nop(false))");
    }

    bb258: {
        _282 = Div(const -1f32, const 0f32);
        _281 = core::f32::<impl f32>::is_infinite(move _282) -> bb259;
    }

    bb259: {
        _280 = nop::<bool>(move _281) -> bb260;
    }

    bb260: {
        _283 = nop::<bool>(const true) -> bb261;
    }

    bb261: {
        _279 = eq::<bool, bool>(move _280, move _283) -> bb262;
    }

    bb262: {
        _278 = Not(move _279);
        switchInt(move _278) -> [0: bb264, otherwise: bb263];
    }

    bb263: {
        _284 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_infinite(-1.0 / 0.0)), nop(true))");
    }

    bb264: {
        _289 = Div(const -1f32, const 0f32);
        _288 = core::f32::<impl f32>::is_finite(move _289) -> bb265;
    }

    bb265: {
        _287 = nop::<bool>(move _288) -> bb266;
    }

    bb266: {
        _290 = nop::<bool>(const false) -> bb267;
    }

    bb267: {
        _286 = eq::<bool, bool>(move _287, move _290) -> bb268;
    }

    bb268: {
        _285 = Not(move _286);
        switchInt(move _285) -> [0: bb270, otherwise: bb269];
    }

    bb269: {
        _291 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_finite(-1.0 / 0.0)), nop(false))");
    }

    bb270: {
        _296 = Div(const -1f32, const 0f32);
        _295 = core::f32::<impl f32>::is_normal(move _296) -> bb271;
    }

    bb271: {
        _294 = nop::<bool>(move _295) -> bb272;
    }

    bb272: {
        _297 = nop::<bool>(const false) -> bb273;
    }

    bb273: {
        _293 = eq::<bool, bool>(move _294, move _297) -> bb274;
    }

    bb274: {
        _292 = Not(move _293);
        switchInt(move _292) -> [0: bb276, otherwise: bb275];
    }

    bb275: {
        _298 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_normal(-1.0 / 0.0)), nop(false))");
    }

    bb276: {
        _303 = Div(const -1f32, const 0f32);
        _302 = core::f32::<impl f32>::is_sign_positive(move _303) -> bb277;
    }

    bb277: {
        _301 = nop::<bool>(move _302) -> bb278;
    }

    bb278: {
        _304 = nop::<bool>(const false) -> bb279;
    }

    bb279: {
        _300 = eq::<bool, bool>(move _301, move _304) -> bb280;
    }

    bb280: {
        _299 = Not(move _300);
        switchInt(move _299) -> [0: bb282, otherwise: bb281];
    }

    bb281: {
        _305 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_sign_positive(-1.0 / 0.0)), nop(false))");
    }

    bb282: {
        _310 = Div(const -1f32, const 0f32);
        _309 = core::f32::<impl f32>::is_sign_negative(move _310) -> bb283;
    }

    bb283: {
        _308 = nop::<bool>(move _309) -> bb284;
    }

    bb284: {
        _311 = nop::<bool>(const true) -> bb285;
    }

    bb285: {
        _307 = eq::<bool, bool>(move _308, move _311) -> bb286;
    }

    bb286: {
        _306 = Not(move _307);
        switchInt(move _306) -> [0: bb288, otherwise: bb287];
    }

    bb287: {
        _312 = core::panicking::panic(const "assertion failed: eq(nop(f32::is_sign_negative(-1.0 / 0.0)), nop(true))");
    }

    bb288: {
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f32;
    let mut _5: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const -0f32, const 0f32);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_nan(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const true) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_5);
        ConstEvalCounter;
        _5 = core::panicking::panic(const "assertion failed: eq(f32::is_nan(-0.0 / 0.0), true)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f32;
    let mut _5: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const -0f32, const 0f32);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_infinite(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_5);
        ConstEvalCounter;
        _5 = core::panicking::panic(const "assertion failed: eq(f32::is_infinite(-0.0 / 0.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f32;
    let mut _5: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const -0f32, const 0f32);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_finite(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_5);
        ConstEvalCounter;
        _5 = core::panicking::panic(const "assertion failed: eq(f32::is_finite(-0.0 / 0.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f32;
    let mut _5: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const -0f32, const 0f32);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_normal(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_5);
        ConstEvalCounter;
        _5 = core::panicking::panic(const "assertion failed: eq(f32::is_normal(-0.0 / 0.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f32;
    let mut _5: NonDet;
    let mut _6: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const -0f32, const 0f32);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_sign_positive(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        StorageLive(_5);
        _5 = NonDet;
        ConstEvalCounter;
        _2 = eq::<bool, NonDet>(move _3, move _5) -> bb2;
    }

    bb2: {
        StorageDead(_5);
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_6);
        ConstEvalCounter;
        _6 = core::panicking::panic(const "assertion failed: eq(f32::is_sign_positive(-0.0 / 0.0), NonDet)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f32;
    let mut _5: NonDet;
    let mut _6: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const -0f32, const 0f32);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_sign_negative(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        StorageLive(_5);
        _5 = NonDet;
        ConstEvalCounter;
        _2 = eq::<bool, NonDet>(move _3, move _5) -> bb2;
    }

    bb2: {
        StorageDead(_5);
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_6);
        ConstEvalCounter;
        _6 = core::panicking::panic(const "assertion failed: eq(f32::is_sign_negative(-0.0 / 0.0), NonDet)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f32;
    let mut _5: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const 0f32, const 0f32);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_nan(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const true) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_5);
        ConstEvalCounter;
        _5 = core::panicking::panic(const "assertion failed: eq(f32::is_nan(0.0 / 0.0), true)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f32;
    let mut _5: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const 0f32, const 0f32);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_infinite(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_5);
        ConstEvalCounter;
        _5 = core::panicking::panic(const "assertion failed: eq(f32::is_infinite(0.0 / 0.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f32;
    let mut _5: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const 0f32, const 0f32);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_finite(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_5);
        ConstEvalCounter;
        _5 = core::panicking::panic(const "assertion failed: eq(f32::is_finite(0.0 / 0.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f32;
    let mut _5: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const 0f32, const 0f32);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_normal(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_5);
        ConstEvalCounter;
        _5 = core::panicking::panic(const "assertion failed: eq(f32::is_normal(0.0 / 0.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f32;
    let mut _5: NonDet;
    let mut _6: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const 0f32, const 0f32);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_sign_positive(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        StorageLive(_5);
        _5 = NonDet;
        ConstEvalCounter;
        _2 = eq::<bool, NonDet>(move _3, move _5) -> bb2;
    }

    bb2: {
        StorageDead(_5);
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_6);
        ConstEvalCounter;
        _6 = core::panicking::panic(const "assertion failed: eq(f32::is_sign_positive(0.0 / 0.0), NonDet)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f32;
    let mut _5: NonDet;
    let mut _6: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const 0f32, const 0f32);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_sign_negative(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        StorageLive(_5);
        _5 = NonDet;
        ConstEvalCounter;
        _2 = eq::<bool, NonDet>(move _3, move _5) -> bb2;
    }

    bb2: {
        StorageDead(_5);
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_6);
        ConstEvalCounter;
        _6 = core::panicking::panic(const "assertion failed: eq(f32::is_sign_negative(0.0 / 0.0), NonDet)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_nan(const 1f32) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f32::is_nan(1.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_infinite(const 1f32) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f32::is_infinite(1.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_finite(const 1f32) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const true) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f32::is_finite(1.0), true)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_normal(const 1f32) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const true) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f32::is_normal(1.0), true)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_sign_positive(const 1f32) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const true) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f32::is_sign_positive(1.0), true)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_sign_negative(const 1f32) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f32::is_sign_negative(1.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_nan(const -1f32) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f32::is_nan(-1.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_infinite(const -1f32) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f32::is_infinite(-1.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_finite(const -1f32) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const true) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f32::is_finite(-1.0), true)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_normal(const -1f32) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const true) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f32::is_normal(-1.0), true)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_sign_positive(const -1f32) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f32::is_sign_positive(-1.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_sign_negative(const -1f32) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const true) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f32::is_sign_negative(-1.0), true)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_nan(const 0f32) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f32::is_nan(0.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_infinite(const 0f32) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f32::is_infinite(0.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_finite(const 0f32) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const true) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f32::is_finite(0.0), true)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_normal(const 0f32) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f32::is_normal(0.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_sign_positive(const 0f32) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const true) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f32::is_sign_positive(0.0), true)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_sign_negative(const 0f32) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f32::is_sign_negative(0.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_nan(const -0f32) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f32::is_nan(-0.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_infinite(const -0f32) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f32::is_infinite(-0.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_finite(const -0f32) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const true) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f32::is_finite(-0.0), true)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_normal(const -0f32) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f32::is_normal(-0.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_sign_positive(const -0f32) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f32::is_sign_positive(-0.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_sign_negative(const -0f32) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const true) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f32::is_sign_negative(-0.0), true)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f32;
    let mut _5: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const 1f32, const 0f32);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_nan(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_5);
        ConstEvalCounter;
        _5 = core::panicking::panic(const "assertion failed: eq(f32::is_nan(1.0 / 0.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f32;
    let mut _5: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const 1f32, const 0f32);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_infinite(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const true) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_5);
        ConstEvalCounter;
        _5 = core::panicking::panic(const "assertion failed: eq(f32::is_infinite(1.0 / 0.0), true)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f32;
    let mut _5: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const 1f32, const 0f32);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_finite(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_5);
        ConstEvalCounter;
        _5 = core::panicking::panic(const "assertion failed: eq(f32::is_finite(1.0 / 0.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f32;
    let mut _5: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const 1f32, const 0f32);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_normal(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_5);
        ConstEvalCounter;
        _5 = core::panicking::panic(const "assertion failed: eq(f32::is_normal(1.0 / 0.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f32;
    let mut _5: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const 1f32, const 0f32);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_sign_positive(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const true) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_5);
        ConstEvalCounter;
        _5 = core::panicking::panic(const "assertion failed: eq(f32::is_sign_positive(1.0 / 0.0), true)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f32;
    let mut _5: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const 1f32, const 0f32);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_sign_negative(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_5);
        ConstEvalCounter;
        _5 = core::panicking::panic(const "assertion failed: eq(f32::is_sign_negative(1.0 / 0.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f32;
    let mut _5: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const -1f32, const 0f32);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_nan(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_5);
        ConstEvalCounter;
        _5 = core::panicking::panic(const "assertion failed: eq(f32::is_nan(-1.0 / 0.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f32;
    let mut _5: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const -1f32, const 0f32);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_infinite(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const true) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_5);
        ConstEvalCounter;
        _5 = core::panicking::panic(const "assertion failed: eq(f32::is_infinite(-1.0 / 0.0), true)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f32;
    let mut _5: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const -1f32, const 0f32);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_finite(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_5);
        ConstEvalCounter;
        _5 = core::panicking::panic(const "assertion failed: eq(f32::is_finite(-1.0 / 0.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f32;
    let mut _5: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const -1f32, const 0f32);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_normal(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_5);
        ConstEvalCounter;
        _5 = core::panicking::panic(const "assertion failed: eq(f32::is_normal(-1.0 / 0.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f32;
    let mut _5: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const -1f32, const 0f32);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_sign_positive(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_5);
        ConstEvalCounter;
        _5 = core::panicking::panic(const "assertion failed: eq(f32::is_sign_positive(-1.0 / 0.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f32::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f32;
    let mut _5: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const -1f32, const 0f32);
        ConstEvalCounter;
        _3 = core::f32::<impl f32>::is_sign_negative(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const true) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_5);
        ConstEvalCounter;
        _5 = core::panicking::panic(const "assertion failed: eq(f32::is_sign_negative(-1.0 / 0.0), true)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

fn f64() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: f64;
    let mut _6: bool;
    let mut _7: !;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: f64;
    let mut _13: bool;
    let mut _14: !;
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: f64;
    let mut _20: bool;
    let mut _21: !;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: f64;
    let mut _27: bool;
    let mut _28: !;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: f64;
    let mut _34: NonDet;
    let mut _35: !;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: f64;
    let mut _41: NonDet;
    let mut _42: !;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: f64;
    let mut _48: bool;
    let mut _49: !;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: f64;
    let mut _55: bool;
    let mut _56: !;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: f64;
    let mut _62: bool;
    let mut _63: !;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: f64;
    let mut _69: bool;
    let mut _70: !;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: f64;
    let mut _76: NonDet;
    let mut _77: !;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: f64;
    let mut _83: NonDet;
    let mut _84: !;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: bool;
    let mut _88: bool;
    let mut _89: bool;
    let mut _90: !;
    let mut _91: bool;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: bool;
    let mut _95: bool;
    let mut _96: !;
    let mut _97: bool;
    let mut _98: bool;
    let mut _99: bool;
    let mut _100: bool;
    let mut _101: bool;
    let mut _102: !;
    let mut _103: bool;
    let mut _104: bool;
    let mut _105: bool;
    let mut _106: bool;
    let mut _107: bool;
    let mut _108: !;
    let mut _109: bool;
    let mut _110: bool;
    let mut _111: bool;
    let mut _112: bool;
    let mut _113: bool;
    let mut _114: !;
    let mut _115: bool;
    let mut _116: bool;
    let mut _117: bool;
    let mut _118: bool;
    let mut _119: bool;
    let mut _120: !;
    let mut _121: bool;
    let mut _122: bool;
    let mut _123: bool;
    let mut _124: bool;
    let mut _125: bool;
    let mut _126: !;
    let mut _127: bool;
    let mut _128: bool;
    let mut _129: bool;
    let mut _130: bool;
    let mut _131: bool;
    let mut _132: !;
    let mut _133: bool;
    let mut _134: bool;
    let mut _135: bool;
    let mut _136: bool;
    let mut _137: bool;
    let mut _138: !;
    let mut _139: bool;
    let mut _140: bool;
    let mut _141: bool;
    let mut _142: bool;
    let mut _143: bool;
    let mut _144: !;
    let mut _145: bool;
    let mut _146: bool;
    let mut _147: bool;
    let mut _148: bool;
    let mut _149: bool;
    let mut _150: !;
    let mut _151: bool;
    let mut _152: bool;
    let mut _153: bool;
    let mut _154: bool;
    let mut _155: bool;
    let mut _156: !;
    let mut _157: bool;
    let mut _158: bool;
    let mut _159: bool;
    let mut _160: bool;
    let mut _161: bool;
    let mut _162: !;
    let mut _163: bool;
    let mut _164: bool;
    let mut _165: bool;
    let mut _166: bool;
    let mut _167: bool;
    let mut _168: !;
    let mut _169: bool;
    let mut _170: bool;
    let mut _171: bool;
    let mut _172: bool;
    let mut _173: bool;
    let mut _174: !;
    let mut _175: bool;
    let mut _176: bool;
    let mut _177: bool;
    let mut _178: bool;
    let mut _179: bool;
    let mut _180: !;
    let mut _181: bool;
    let mut _182: bool;
    let mut _183: bool;
    let mut _184: bool;
    let mut _185: bool;
    let mut _186: !;
    let mut _187: bool;
    let mut _188: bool;
    let mut _189: bool;
    let mut _190: bool;
    let mut _191: bool;
    let mut _192: !;
    let mut _193: bool;
    let mut _194: bool;
    let mut _195: bool;
    let mut _196: bool;
    let mut _197: bool;
    let mut _198: !;
    let mut _199: bool;
    let mut _200: bool;
    let mut _201: bool;
    let mut _202: bool;
    let mut _203: bool;
    let mut _204: !;
    let mut _205: bool;
    let mut _206: bool;
    let mut _207: bool;
    let mut _208: bool;
    let mut _209: bool;
    let mut _210: !;
    let mut _211: bool;
    let mut _212: bool;
    let mut _213: bool;
    let mut _214: bool;
    let mut _215: bool;
    let mut _216: !;
    let mut _217: bool;
    let mut _218: bool;
    let mut _219: bool;
    let mut _220: bool;
    let mut _221: bool;
    let mut _222: !;
    let mut _223: bool;
    let mut _224: bool;
    let mut _225: bool;
    let mut _226: bool;
    let mut _227: bool;
    let mut _228: !;
    let mut _229: bool;
    let mut _230: bool;
    let mut _231: bool;
    let mut _232: bool;
    let mut _233: f64;
    let mut _234: bool;
    let mut _235: !;
    let mut _236: bool;
    let mut _237: bool;
    let mut _238: bool;
    let mut _239: bool;
    let mut _240: f64;
    let mut _241: bool;
    let mut _242: !;
    let mut _243: bool;
    let mut _244: bool;
    let mut _245: bool;
    let mut _246: bool;
    let mut _247: f64;
    let mut _248: bool;
    let mut _249: !;
    let mut _250: bool;
    let mut _251: bool;
    let mut _252: bool;
    let mut _253: bool;
    let mut _254: f64;
    let mut _255: bool;
    let mut _256: !;
    let mut _257: bool;
    let mut _258: bool;
    let mut _259: bool;
    let mut _260: bool;
    let mut _261: f64;
    let mut _262: bool;
    let mut _263: !;
    let mut _264: bool;
    let mut _265: bool;
    let mut _266: bool;
    let mut _267: bool;
    let mut _268: f64;
    let mut _269: bool;
    let mut _270: !;
    let mut _271: bool;
    let mut _272: bool;
    let mut _273: bool;
    let mut _274: bool;
    let mut _275: f64;
    let mut _276: bool;
    let mut _277: !;
    let mut _278: bool;
    let mut _279: bool;
    let mut _280: bool;
    let mut _281: bool;
    let mut _282: f64;
    let mut _283: bool;
    let mut _284: !;
    let mut _285: bool;
    let mut _286: bool;
    let mut _287: bool;
    let mut _288: bool;
    let mut _289: f64;
    let mut _290: bool;
    let mut _291: !;
    let mut _292: bool;
    let mut _293: bool;
    let mut _294: bool;
    let mut _295: bool;
    let mut _296: f64;
    let mut _297: bool;
    let mut _298: !;
    let mut _299: bool;
    let mut _300: bool;
    let mut _301: bool;
    let mut _302: bool;
    let mut _303: f64;
    let mut _304: bool;
    let mut _305: !;
    let mut _306: bool;
    let mut _307: bool;
    let mut _308: bool;
    let mut _309: bool;
    let mut _310: f64;
    let mut _311: bool;
    let mut _312: !;

    bb0: {
        _5 = Div(const -0f64, const 0f64);
        _4 = core::f64::<impl f64>::is_nan(move _5) -> bb1;
    }

    bb1: {
        _3 = nop::<bool>(move _4) -> bb2;
    }

    bb2: {
        _6 = nop::<bool>(const true) -> bb3;
    }

    bb3: {
        _2 = eq::<bool, bool>(move _3, move _6) -> bb4;
    }

    bb4: {
        _1 = Not(move _2);
        switchInt(move _1) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _7 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_nan(-0.0 / 0.0)), nop(true))");
    }

    bb6: {
        _12 = Div(const -0f64, const 0f64);
        _11 = core::f64::<impl f64>::is_infinite(move _12) -> bb7;
    }

    bb7: {
        _10 = nop::<bool>(move _11) -> bb8;
    }

    bb8: {
        _13 = nop::<bool>(const false) -> bb9;
    }

    bb9: {
        _9 = eq::<bool, bool>(move _10, move _13) -> bb10;
    }

    bb10: {
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _14 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_infinite(-0.0 / 0.0)), nop(false))");
    }

    bb12: {
        _19 = Div(const -0f64, const 0f64);
        _18 = core::f64::<impl f64>::is_finite(move _19) -> bb13;
    }

    bb13: {
        _17 = nop::<bool>(move _18) -> bb14;
    }

    bb14: {
        _20 = nop::<bool>(const false) -> bb15;
    }

    bb15: {
        _16 = eq::<bool, bool>(move _17, move _20) -> bb16;
    }

    bb16: {
        _15 = Not(move _16);
        switchInt(move _15) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _21 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_finite(-0.0 / 0.0)), nop(false))");
    }

    bb18: {
        _26 = Div(const -0f64, const 0f64);
        _25 = core::f64::<impl f64>::is_normal(move _26) -> bb19;
    }

    bb19: {
        _24 = nop::<bool>(move _25) -> bb20;
    }

    bb20: {
        _27 = nop::<bool>(const false) -> bb21;
    }

    bb21: {
        _23 = eq::<bool, bool>(move _24, move _27) -> bb22;
    }

    bb22: {
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _28 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_normal(-0.0 / 0.0)), nop(false))");
    }

    bb24: {
        _33 = Div(const -0f64, const 0f64);
        _32 = core::f64::<impl f64>::is_sign_positive(move _33) -> bb25;
    }

    bb25: {
        _31 = nop::<bool>(move _32) -> bb26;
    }

    bb26: {
        _34 = nop::<NonDet>(const NonDet) -> bb27;
    }

    bb27: {
        _30 = eq::<bool, NonDet>(move _31, const NonDet) -> bb28;
    }

    bb28: {
        _29 = Not(move _30);
        switchInt(move _29) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _35 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_sign_positive(-0.0 / 0.0)), nop(NonDet))");
    }

    bb30: {
        _40 = Div(const -0f64, const 0f64);
        _39 = core::f64::<impl f64>::is_sign_negative(move _40) -> bb31;
    }

    bb31: {
        _38 = nop::<bool>(move _39) -> bb32;
    }

    bb32: {
        _41 = nop::<NonDet>(const NonDet) -> bb33;
    }

    bb33: {
        _37 = eq::<bool, NonDet>(move _38, const NonDet) -> bb34;
    }

    bb34: {
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _42 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_sign_negative(-0.0 / 0.0)), nop(NonDet))");
    }

    bb36: {
        _47 = Div(const 0f64, const 0f64);
        _46 = core::f64::<impl f64>::is_nan(move _47) -> bb37;
    }

    bb37: {
        _45 = nop::<bool>(move _46) -> bb38;
    }

    bb38: {
        _48 = nop::<bool>(const true) -> bb39;
    }

    bb39: {
        _44 = eq::<bool, bool>(move _45, move _48) -> bb40;
    }

    bb40: {
        _43 = Not(move _44);
        switchInt(move _43) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _49 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_nan(0.0 / 0.0)), nop(true))");
    }

    bb42: {
        _54 = Div(const 0f64, const 0f64);
        _53 = core::f64::<impl f64>::is_infinite(move _54) -> bb43;
    }

    bb43: {
        _52 = nop::<bool>(move _53) -> bb44;
    }

    bb44: {
        _55 = nop::<bool>(const false) -> bb45;
    }

    bb45: {
        _51 = eq::<bool, bool>(move _52, move _55) -> bb46;
    }

    bb46: {
        _50 = Not(move _51);
        switchInt(move _50) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _56 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_infinite(0.0 / 0.0)), nop(false))");
    }

    bb48: {
        _61 = Div(const 0f64, const 0f64);
        _60 = core::f64::<impl f64>::is_finite(move _61) -> bb49;
    }

    bb49: {
        _59 = nop::<bool>(move _60) -> bb50;
    }

    bb50: {
        _62 = nop::<bool>(const false) -> bb51;
    }

    bb51: {
        _58 = eq::<bool, bool>(move _59, move _62) -> bb52;
    }

    bb52: {
        _57 = Not(move _58);
        switchInt(move _57) -> [0: bb54, otherwise: bb53];
    }

    bb53: {
        _63 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_finite(0.0 / 0.0)), nop(false))");
    }

    bb54: {
        _68 = Div(const 0f64, const 0f64);
        _67 = core::f64::<impl f64>::is_normal(move _68) -> bb55;
    }

    bb55: {
        _66 = nop::<bool>(move _67) -> bb56;
    }

    bb56: {
        _69 = nop::<bool>(const false) -> bb57;
    }

    bb57: {
        _65 = eq::<bool, bool>(move _66, move _69) -> bb58;
    }

    bb58: {
        _64 = Not(move _65);
        switchInt(move _64) -> [0: bb60, otherwise: bb59];
    }

    bb59: {
        _70 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_normal(0.0 / 0.0)), nop(false))");
    }

    bb60: {
        _75 = Div(const 0f64, const 0f64);
        _74 = core::f64::<impl f64>::is_sign_positive(move _75) -> bb61;
    }

    bb61: {
        _73 = nop::<bool>(move _74) -> bb62;
    }

    bb62: {
        _76 = nop::<NonDet>(const NonDet) -> bb63;
    }

    bb63: {
        _72 = eq::<bool, NonDet>(move _73, const NonDet) -> bb64;
    }

    bb64: {
        _71 = Not(move _72);
        switchInt(move _71) -> [0: bb66, otherwise: bb65];
    }

    bb65: {
        _77 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_sign_positive(0.0 / 0.0)), nop(NonDet))");
    }

    bb66: {
        _82 = Div(const 0f64, const 0f64);
        _81 = core::f64::<impl f64>::is_sign_negative(move _82) -> bb67;
    }

    bb67: {
        _80 = nop::<bool>(move _81) -> bb68;
    }

    bb68: {
        _83 = nop::<NonDet>(const NonDet) -> bb69;
    }

    bb69: {
        _79 = eq::<bool, NonDet>(move _80, const NonDet) -> bb70;
    }

    bb70: {
        _78 = Not(move _79);
        switchInt(move _78) -> [0: bb72, otherwise: bb71];
    }

    bb71: {
        _84 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_sign_negative(0.0 / 0.0)), nop(NonDet))");
    }

    bb72: {
        _88 = core::f64::<impl f64>::is_nan(const 1f64) -> bb73;
    }

    bb73: {
        _87 = nop::<bool>(move _88) -> bb74;
    }

    bb74: {
        _89 = nop::<bool>(const false) -> bb75;
    }

    bb75: {
        _86 = eq::<bool, bool>(move _87, move _89) -> bb76;
    }

    bb76: {
        _85 = Not(move _86);
        switchInt(move _85) -> [0: bb78, otherwise: bb77];
    }

    bb77: {
        _90 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_nan(1.0)), nop(false))");
    }

    bb78: {
        _94 = core::f64::<impl f64>::is_infinite(const 1f64) -> bb79;
    }

    bb79: {
        _93 = nop::<bool>(move _94) -> bb80;
    }

    bb80: {
        _95 = nop::<bool>(const false) -> bb81;
    }

    bb81: {
        _92 = eq::<bool, bool>(move _93, move _95) -> bb82;
    }

    bb82: {
        _91 = Not(move _92);
        switchInt(move _91) -> [0: bb84, otherwise: bb83];
    }

    bb83: {
        _96 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_infinite(1.0)), nop(false))");
    }

    bb84: {
        _100 = core::f64::<impl f64>::is_finite(const 1f64) -> bb85;
    }

    bb85: {
        _99 = nop::<bool>(move _100) -> bb86;
    }

    bb86: {
        _101 = nop::<bool>(const true) -> bb87;
    }

    bb87: {
        _98 = eq::<bool, bool>(move _99, move _101) -> bb88;
    }

    bb88: {
        _97 = Not(move _98);
        switchInt(move _97) -> [0: bb90, otherwise: bb89];
    }

    bb89: {
        _102 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_finite(1.0)), nop(true))");
    }

    bb90: {
        _106 = core::f64::<impl f64>::is_normal(const 1f64) -> bb91;
    }

    bb91: {
        _105 = nop::<bool>(move _106) -> bb92;
    }

    bb92: {
        _107 = nop::<bool>(const true) -> bb93;
    }

    bb93: {
        _104 = eq::<bool, bool>(move _105, move _107) -> bb94;
    }

    bb94: {
        _103 = Not(move _104);
        switchInt(move _103) -> [0: bb96, otherwise: bb95];
    }

    bb95: {
        _108 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_normal(1.0)), nop(true))");
    }

    bb96: {
        _112 = core::f64::<impl f64>::is_sign_positive(const 1f64) -> bb97;
    }

    bb97: {
        _111 = nop::<bool>(move _112) -> bb98;
    }

    bb98: {
        _113 = nop::<bool>(const true) -> bb99;
    }

    bb99: {
        _110 = eq::<bool, bool>(move _111, move _113) -> bb100;
    }

    bb100: {
        _109 = Not(move _110);
        switchInt(move _109) -> [0: bb102, otherwise: bb101];
    }

    bb101: {
        _114 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_sign_positive(1.0)), nop(true))");
    }

    bb102: {
        _118 = core::f64::<impl f64>::is_sign_negative(const 1f64) -> bb103;
    }

    bb103: {
        _117 = nop::<bool>(move _118) -> bb104;
    }

    bb104: {
        _119 = nop::<bool>(const false) -> bb105;
    }

    bb105: {
        _116 = eq::<bool, bool>(move _117, move _119) -> bb106;
    }

    bb106: {
        _115 = Not(move _116);
        switchInt(move _115) -> [0: bb108, otherwise: bb107];
    }

    bb107: {
        _120 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_sign_negative(1.0)), nop(false))");
    }

    bb108: {
        _124 = core::f64::<impl f64>::is_nan(const -1f64) -> bb109;
    }

    bb109: {
        _123 = nop::<bool>(move _124) -> bb110;
    }

    bb110: {
        _125 = nop::<bool>(const false) -> bb111;
    }

    bb111: {
        _122 = eq::<bool, bool>(move _123, move _125) -> bb112;
    }

    bb112: {
        _121 = Not(move _122);
        switchInt(move _121) -> [0: bb114, otherwise: bb113];
    }

    bb113: {
        _126 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_nan(-1.0)), nop(false))");
    }

    bb114: {
        _130 = core::f64::<impl f64>::is_infinite(const -1f64) -> bb115;
    }

    bb115: {
        _129 = nop::<bool>(move _130) -> bb116;
    }

    bb116: {
        _131 = nop::<bool>(const false) -> bb117;
    }

    bb117: {
        _128 = eq::<bool, bool>(move _129, move _131) -> bb118;
    }

    bb118: {
        _127 = Not(move _128);
        switchInt(move _127) -> [0: bb120, otherwise: bb119];
    }

    bb119: {
        _132 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_infinite(-1.0)), nop(false))");
    }

    bb120: {
        _136 = core::f64::<impl f64>::is_finite(const -1f64) -> bb121;
    }

    bb121: {
        _135 = nop::<bool>(move _136) -> bb122;
    }

    bb122: {
        _137 = nop::<bool>(const true) -> bb123;
    }

    bb123: {
        _134 = eq::<bool, bool>(move _135, move _137) -> bb124;
    }

    bb124: {
        _133 = Not(move _134);
        switchInt(move _133) -> [0: bb126, otherwise: bb125];
    }

    bb125: {
        _138 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_finite(-1.0)), nop(true))");
    }

    bb126: {
        _142 = core::f64::<impl f64>::is_normal(const -1f64) -> bb127;
    }

    bb127: {
        _141 = nop::<bool>(move _142) -> bb128;
    }

    bb128: {
        _143 = nop::<bool>(const true) -> bb129;
    }

    bb129: {
        _140 = eq::<bool, bool>(move _141, move _143) -> bb130;
    }

    bb130: {
        _139 = Not(move _140);
        switchInt(move _139) -> [0: bb132, otherwise: bb131];
    }

    bb131: {
        _144 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_normal(-1.0)), nop(true))");
    }

    bb132: {
        _148 = core::f64::<impl f64>::is_sign_positive(const -1f64) -> bb133;
    }

    bb133: {
        _147 = nop::<bool>(move _148) -> bb134;
    }

    bb134: {
        _149 = nop::<bool>(const false) -> bb135;
    }

    bb135: {
        _146 = eq::<bool, bool>(move _147, move _149) -> bb136;
    }

    bb136: {
        _145 = Not(move _146);
        switchInt(move _145) -> [0: bb138, otherwise: bb137];
    }

    bb137: {
        _150 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_sign_positive(-1.0)), nop(false))");
    }

    bb138: {
        _154 = core::f64::<impl f64>::is_sign_negative(const -1f64) -> bb139;
    }

    bb139: {
        _153 = nop::<bool>(move _154) -> bb140;
    }

    bb140: {
        _155 = nop::<bool>(const true) -> bb141;
    }

    bb141: {
        _152 = eq::<bool, bool>(move _153, move _155) -> bb142;
    }

    bb142: {
        _151 = Not(move _152);
        switchInt(move _151) -> [0: bb144, otherwise: bb143];
    }

    bb143: {
        _156 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_sign_negative(-1.0)), nop(true))");
    }

    bb144: {
        _160 = core::f64::<impl f64>::is_nan(const 0f64) -> bb145;
    }

    bb145: {
        _159 = nop::<bool>(move _160) -> bb146;
    }

    bb146: {
        _161 = nop::<bool>(const false) -> bb147;
    }

    bb147: {
        _158 = eq::<bool, bool>(move _159, move _161) -> bb148;
    }

    bb148: {
        _157 = Not(move _158);
        switchInt(move _157) -> [0: bb150, otherwise: bb149];
    }

    bb149: {
        _162 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_nan(0.0)), nop(false))");
    }

    bb150: {
        _166 = core::f64::<impl f64>::is_infinite(const 0f64) -> bb151;
    }

    bb151: {
        _165 = nop::<bool>(move _166) -> bb152;
    }

    bb152: {
        _167 = nop::<bool>(const false) -> bb153;
    }

    bb153: {
        _164 = eq::<bool, bool>(move _165, move _167) -> bb154;
    }

    bb154: {
        _163 = Not(move _164);
        switchInt(move _163) -> [0: bb156, otherwise: bb155];
    }

    bb155: {
        _168 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_infinite(0.0)), nop(false))");
    }

    bb156: {
        _172 = core::f64::<impl f64>::is_finite(const 0f64) -> bb157;
    }

    bb157: {
        _171 = nop::<bool>(move _172) -> bb158;
    }

    bb158: {
        _173 = nop::<bool>(const true) -> bb159;
    }

    bb159: {
        _170 = eq::<bool, bool>(move _171, move _173) -> bb160;
    }

    bb160: {
        _169 = Not(move _170);
        switchInt(move _169) -> [0: bb162, otherwise: bb161];
    }

    bb161: {
        _174 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_finite(0.0)), nop(true))");
    }

    bb162: {
        _178 = core::f64::<impl f64>::is_normal(const 0f64) -> bb163;
    }

    bb163: {
        _177 = nop::<bool>(move _178) -> bb164;
    }

    bb164: {
        _179 = nop::<bool>(const false) -> bb165;
    }

    bb165: {
        _176 = eq::<bool, bool>(move _177, move _179) -> bb166;
    }

    bb166: {
        _175 = Not(move _176);
        switchInt(move _175) -> [0: bb168, otherwise: bb167];
    }

    bb167: {
        _180 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_normal(0.0)), nop(false))");
    }

    bb168: {
        _184 = core::f64::<impl f64>::is_sign_positive(const 0f64) -> bb169;
    }

    bb169: {
        _183 = nop::<bool>(move _184) -> bb170;
    }

    bb170: {
        _185 = nop::<bool>(const true) -> bb171;
    }

    bb171: {
        _182 = eq::<bool, bool>(move _183, move _185) -> bb172;
    }

    bb172: {
        _181 = Not(move _182);
        switchInt(move _181) -> [0: bb174, otherwise: bb173];
    }

    bb173: {
        _186 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_sign_positive(0.0)), nop(true))");
    }

    bb174: {
        _190 = core::f64::<impl f64>::is_sign_negative(const 0f64) -> bb175;
    }

    bb175: {
        _189 = nop::<bool>(move _190) -> bb176;
    }

    bb176: {
        _191 = nop::<bool>(const false) -> bb177;
    }

    bb177: {
        _188 = eq::<bool, bool>(move _189, move _191) -> bb178;
    }

    bb178: {
        _187 = Not(move _188);
        switchInt(move _187) -> [0: bb180, otherwise: bb179];
    }

    bb179: {
        _192 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_sign_negative(0.0)), nop(false))");
    }

    bb180: {
        _196 = core::f64::<impl f64>::is_nan(const -0f64) -> bb181;
    }

    bb181: {
        _195 = nop::<bool>(move _196) -> bb182;
    }

    bb182: {
        _197 = nop::<bool>(const false) -> bb183;
    }

    bb183: {
        _194 = eq::<bool, bool>(move _195, move _197) -> bb184;
    }

    bb184: {
        _193 = Not(move _194);
        switchInt(move _193) -> [0: bb186, otherwise: bb185];
    }

    bb185: {
        _198 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_nan(-0.0)), nop(false))");
    }

    bb186: {
        _202 = core::f64::<impl f64>::is_infinite(const -0f64) -> bb187;
    }

    bb187: {
        _201 = nop::<bool>(move _202) -> bb188;
    }

    bb188: {
        _203 = nop::<bool>(const false) -> bb189;
    }

    bb189: {
        _200 = eq::<bool, bool>(move _201, move _203) -> bb190;
    }

    bb190: {
        _199 = Not(move _200);
        switchInt(move _199) -> [0: bb192, otherwise: bb191];
    }

    bb191: {
        _204 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_infinite(-0.0)), nop(false))");
    }

    bb192: {
        _208 = core::f64::<impl f64>::is_finite(const -0f64) -> bb193;
    }

    bb193: {
        _207 = nop::<bool>(move _208) -> bb194;
    }

    bb194: {
        _209 = nop::<bool>(const true) -> bb195;
    }

    bb195: {
        _206 = eq::<bool, bool>(move _207, move _209) -> bb196;
    }

    bb196: {
        _205 = Not(move _206);
        switchInt(move _205) -> [0: bb198, otherwise: bb197];
    }

    bb197: {
        _210 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_finite(-0.0)), nop(true))");
    }

    bb198: {
        _214 = core::f64::<impl f64>::is_normal(const -0f64) -> bb199;
    }

    bb199: {
        _213 = nop::<bool>(move _214) -> bb200;
    }

    bb200: {
        _215 = nop::<bool>(const false) -> bb201;
    }

    bb201: {
        _212 = eq::<bool, bool>(move _213, move _215) -> bb202;
    }

    bb202: {
        _211 = Not(move _212);
        switchInt(move _211) -> [0: bb204, otherwise: bb203];
    }

    bb203: {
        _216 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_normal(-0.0)), nop(false))");
    }

    bb204: {
        _220 = core::f64::<impl f64>::is_sign_positive(const -0f64) -> bb205;
    }

    bb205: {
        _219 = nop::<bool>(move _220) -> bb206;
    }

    bb206: {
        _221 = nop::<bool>(const false) -> bb207;
    }

    bb207: {
        _218 = eq::<bool, bool>(move _219, move _221) -> bb208;
    }

    bb208: {
        _217 = Not(move _218);
        switchInt(move _217) -> [0: bb210, otherwise: bb209];
    }

    bb209: {
        _222 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_sign_positive(-0.0)), nop(false))");
    }

    bb210: {
        _226 = core::f64::<impl f64>::is_sign_negative(const -0f64) -> bb211;
    }

    bb211: {
        _225 = nop::<bool>(move _226) -> bb212;
    }

    bb212: {
        _227 = nop::<bool>(const true) -> bb213;
    }

    bb213: {
        _224 = eq::<bool, bool>(move _225, move _227) -> bb214;
    }

    bb214: {
        _223 = Not(move _224);
        switchInt(move _223) -> [0: bb216, otherwise: bb215];
    }

    bb215: {
        _228 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_sign_negative(-0.0)), nop(true))");
    }

    bb216: {
        _233 = Div(const 1f64, const 0f64);
        _232 = core::f64::<impl f64>::is_nan(move _233) -> bb217;
    }

    bb217: {
        _231 = nop::<bool>(move _232) -> bb218;
    }

    bb218: {
        _234 = nop::<bool>(const false) -> bb219;
    }

    bb219: {
        _230 = eq::<bool, bool>(move _231, move _234) -> bb220;
    }

    bb220: {
        _229 = Not(move _230);
        switchInt(move _229) -> [0: bb222, otherwise: bb221];
    }

    bb221: {
        _235 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_nan(1.0 / 0.0)), nop(false))");
    }

    bb222: {
        _240 = Div(const 1f64, const 0f64);
        _239 = core::f64::<impl f64>::is_infinite(move _240) -> bb223;
    }

    bb223: {
        _238 = nop::<bool>(move _239) -> bb224;
    }

    bb224: {
        _241 = nop::<bool>(const true) -> bb225;
    }

    bb225: {
        _237 = eq::<bool, bool>(move _238, move _241) -> bb226;
    }

    bb226: {
        _236 = Not(move _237);
        switchInt(move _236) -> [0: bb228, otherwise: bb227];
    }

    bb227: {
        _242 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_infinite(1.0 / 0.0)), nop(true))");
    }

    bb228: {
        _247 = Div(const 1f64, const 0f64);
        _246 = core::f64::<impl f64>::is_finite(move _247) -> bb229;
    }

    bb229: {
        _245 = nop::<bool>(move _246) -> bb230;
    }

    bb230: {
        _248 = nop::<bool>(const false) -> bb231;
    }

    bb231: {
        _244 = eq::<bool, bool>(move _245, move _248) -> bb232;
    }

    bb232: {
        _243 = Not(move _244);
        switchInt(move _243) -> [0: bb234, otherwise: bb233];
    }

    bb233: {
        _249 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_finite(1.0 / 0.0)), nop(false))");
    }

    bb234: {
        _254 = Div(const 1f64, const 0f64);
        _253 = core::f64::<impl f64>::is_normal(move _254) -> bb235;
    }

    bb235: {
        _252 = nop::<bool>(move _253) -> bb236;
    }

    bb236: {
        _255 = nop::<bool>(const false) -> bb237;
    }

    bb237: {
        _251 = eq::<bool, bool>(move _252, move _255) -> bb238;
    }

    bb238: {
        _250 = Not(move _251);
        switchInt(move _250) -> [0: bb240, otherwise: bb239];
    }

    bb239: {
        _256 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_normal(1.0 / 0.0)), nop(false))");
    }

    bb240: {
        _261 = Div(const 1f64, const 0f64);
        _260 = core::f64::<impl f64>::is_sign_positive(move _261) -> bb241;
    }

    bb241: {
        _259 = nop::<bool>(move _260) -> bb242;
    }

    bb242: {
        _262 = nop::<bool>(const true) -> bb243;
    }

    bb243: {
        _258 = eq::<bool, bool>(move _259, move _262) -> bb244;
    }

    bb244: {
        _257 = Not(move _258);
        switchInt(move _257) -> [0: bb246, otherwise: bb245];
    }

    bb245: {
        _263 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_sign_positive(1.0 / 0.0)), nop(true))");
    }

    bb246: {
        _268 = Div(const 1f64, const 0f64);
        _267 = core::f64::<impl f64>::is_sign_negative(move _268) -> bb247;
    }

    bb247: {
        _266 = nop::<bool>(move _267) -> bb248;
    }

    bb248: {
        _269 = nop::<bool>(const false) -> bb249;
    }

    bb249: {
        _265 = eq::<bool, bool>(move _266, move _269) -> bb250;
    }

    bb250: {
        _264 = Not(move _265);
        switchInt(move _264) -> [0: bb252, otherwise: bb251];
    }

    bb251: {
        _270 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_sign_negative(1.0 / 0.0)), nop(false))");
    }

    bb252: {
        _275 = Div(const -1f64, const 0f64);
        _274 = core::f64::<impl f64>::is_nan(move _275) -> bb253;
    }

    bb253: {
        _273 = nop::<bool>(move _274) -> bb254;
    }

    bb254: {
        _276 = nop::<bool>(const false) -> bb255;
    }

    bb255: {
        _272 = eq::<bool, bool>(move _273, move _276) -> bb256;
    }

    bb256: {
        _271 = Not(move _272);
        switchInt(move _271) -> [0: bb258, otherwise: bb257];
    }

    bb257: {
        _277 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_nan(-1.0 / 0.0)), nop(false))");
    }

    bb258: {
        _282 = Div(const -1f64, const 0f64);
        _281 = core::f64::<impl f64>::is_infinite(move _282) -> bb259;
    }

    bb259: {
        _280 = nop::<bool>(move _281) -> bb260;
    }

    bb260: {
        _283 = nop::<bool>(const true) -> bb261;
    }

    bb261: {
        _279 = eq::<bool, bool>(move _280, move _283) -> bb262;
    }

    bb262: {
        _278 = Not(move _279);
        switchInt(move _278) -> [0: bb264, otherwise: bb263];
    }

    bb263: {
        _284 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_infinite(-1.0 / 0.0)), nop(true))");
    }

    bb264: {
        _289 = Div(const -1f64, const 0f64);
        _288 = core::f64::<impl f64>::is_finite(move _289) -> bb265;
    }

    bb265: {
        _287 = nop::<bool>(move _288) -> bb266;
    }

    bb266: {
        _290 = nop::<bool>(const false) -> bb267;
    }

    bb267: {
        _286 = eq::<bool, bool>(move _287, move _290) -> bb268;
    }

    bb268: {
        _285 = Not(move _286);
        switchInt(move _285) -> [0: bb270, otherwise: bb269];
    }

    bb269: {
        _291 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_finite(-1.0 / 0.0)), nop(false))");
    }

    bb270: {
        _296 = Div(const -1f64, const 0f64);
        _295 = core::f64::<impl f64>::is_normal(move _296) -> bb271;
    }

    bb271: {
        _294 = nop::<bool>(move _295) -> bb272;
    }

    bb272: {
        _297 = nop::<bool>(const false) -> bb273;
    }

    bb273: {
        _293 = eq::<bool, bool>(move _294, move _297) -> bb274;
    }

    bb274: {
        _292 = Not(move _293);
        switchInt(move _292) -> [0: bb276, otherwise: bb275];
    }

    bb275: {
        _298 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_normal(-1.0 / 0.0)), nop(false))");
    }

    bb276: {
        _303 = Div(const -1f64, const 0f64);
        _302 = core::f64::<impl f64>::is_sign_positive(move _303) -> bb277;
    }

    bb277: {
        _301 = nop::<bool>(move _302) -> bb278;
    }

    bb278: {
        _304 = nop::<bool>(const false) -> bb279;
    }

    bb279: {
        _300 = eq::<bool, bool>(move _301, move _304) -> bb280;
    }

    bb280: {
        _299 = Not(move _300);
        switchInt(move _299) -> [0: bb282, otherwise: bb281];
    }

    bb281: {
        _305 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_sign_positive(-1.0 / 0.0)), nop(false))");
    }

    bb282: {
        _310 = Div(const -1f64, const 0f64);
        _309 = core::f64::<impl f64>::is_sign_negative(move _310) -> bb283;
    }

    bb283: {
        _308 = nop::<bool>(move _309) -> bb284;
    }

    bb284: {
        _311 = nop::<bool>(const true) -> bb285;
    }

    bb285: {
        _307 = eq::<bool, bool>(move _308, move _311) -> bb286;
    }

    bb286: {
        _306 = Not(move _307);
        switchInt(move _306) -> [0: bb288, otherwise: bb287];
    }

    bb287: {
        _312 = core::panicking::panic(const "assertion failed: eq(nop(f64::is_sign_negative(-1.0 / 0.0)), nop(true))");
    }

    bb288: {
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f64;
    let mut _5: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const -0f64, const 0f64);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_nan(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const true) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_5);
        ConstEvalCounter;
        _5 = core::panicking::panic(const "assertion failed: eq(f64::is_nan(-0.0 / 0.0), true)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f64;
    let mut _5: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const -0f64, const 0f64);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_infinite(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_5);
        ConstEvalCounter;
        _5 = core::panicking::panic(const "assertion failed: eq(f64::is_infinite(-0.0 / 0.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f64;
    let mut _5: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const -0f64, const 0f64);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_finite(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_5);
        ConstEvalCounter;
        _5 = core::panicking::panic(const "assertion failed: eq(f64::is_finite(-0.0 / 0.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f64;
    let mut _5: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const -0f64, const 0f64);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_normal(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_5);
        ConstEvalCounter;
        _5 = core::panicking::panic(const "assertion failed: eq(f64::is_normal(-0.0 / 0.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f64;
    let mut _5: NonDet;
    let mut _6: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const -0f64, const 0f64);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_sign_positive(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        StorageLive(_5);
        _5 = NonDet;
        ConstEvalCounter;
        _2 = eq::<bool, NonDet>(move _3, move _5) -> bb2;
    }

    bb2: {
        StorageDead(_5);
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_6);
        ConstEvalCounter;
        _6 = core::panicking::panic(const "assertion failed: eq(f64::is_sign_positive(-0.0 / 0.0), NonDet)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f64;
    let mut _5: NonDet;
    let mut _6: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const -0f64, const 0f64);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_sign_negative(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        StorageLive(_5);
        _5 = NonDet;
        ConstEvalCounter;
        _2 = eq::<bool, NonDet>(move _3, move _5) -> bb2;
    }

    bb2: {
        StorageDead(_5);
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_6);
        ConstEvalCounter;
        _6 = core::panicking::panic(const "assertion failed: eq(f64::is_sign_negative(-0.0 / 0.0), NonDet)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f64;
    let mut _5: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const 0f64, const 0f64);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_nan(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const true) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_5);
        ConstEvalCounter;
        _5 = core::panicking::panic(const "assertion failed: eq(f64::is_nan(0.0 / 0.0), true)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f64;
    let mut _5: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const 0f64, const 0f64);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_infinite(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_5);
        ConstEvalCounter;
        _5 = core::panicking::panic(const "assertion failed: eq(f64::is_infinite(0.0 / 0.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f64;
    let mut _5: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const 0f64, const 0f64);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_finite(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_5);
        ConstEvalCounter;
        _5 = core::panicking::panic(const "assertion failed: eq(f64::is_finite(0.0 / 0.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f64;
    let mut _5: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const 0f64, const 0f64);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_normal(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_5);
        ConstEvalCounter;
        _5 = core::panicking::panic(const "assertion failed: eq(f64::is_normal(0.0 / 0.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f64;
    let mut _5: NonDet;
    let mut _6: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const 0f64, const 0f64);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_sign_positive(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        StorageLive(_5);
        _5 = NonDet;
        ConstEvalCounter;
        _2 = eq::<bool, NonDet>(move _3, move _5) -> bb2;
    }

    bb2: {
        StorageDead(_5);
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_6);
        ConstEvalCounter;
        _6 = core::panicking::panic(const "assertion failed: eq(f64::is_sign_positive(0.0 / 0.0), NonDet)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f64;
    let mut _5: NonDet;
    let mut _6: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const 0f64, const 0f64);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_sign_negative(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        StorageLive(_5);
        _5 = NonDet;
        ConstEvalCounter;
        _2 = eq::<bool, NonDet>(move _3, move _5) -> bb2;
    }

    bb2: {
        StorageDead(_5);
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_6);
        ConstEvalCounter;
        _6 = core::panicking::panic(const "assertion failed: eq(f64::is_sign_negative(0.0 / 0.0), NonDet)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_nan(const 1f64) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f64::is_nan(1.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_infinite(const 1f64) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f64::is_infinite(1.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_finite(const 1f64) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const true) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f64::is_finite(1.0), true)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_normal(const 1f64) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const true) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f64::is_normal(1.0), true)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_sign_positive(const 1f64) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const true) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f64::is_sign_positive(1.0), true)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_sign_negative(const 1f64) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f64::is_sign_negative(1.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_nan(const -1f64) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f64::is_nan(-1.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_infinite(const -1f64) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f64::is_infinite(-1.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_finite(const -1f64) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const true) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f64::is_finite(-1.0), true)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_normal(const -1f64) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const true) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f64::is_normal(-1.0), true)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_sign_positive(const -1f64) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f64::is_sign_positive(-1.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_sign_negative(const -1f64) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const true) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f64::is_sign_negative(-1.0), true)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_nan(const 0f64) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f64::is_nan(0.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_infinite(const 0f64) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f64::is_infinite(0.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_finite(const 0f64) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const true) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f64::is_finite(0.0), true)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_normal(const 0f64) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f64::is_normal(0.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_sign_positive(const 0f64) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const true) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f64::is_sign_positive(0.0), true)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_sign_negative(const 0f64) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f64::is_sign_negative(0.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_nan(const -0f64) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f64::is_nan(-0.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_infinite(const -0f64) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f64::is_infinite(-0.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_finite(const -0f64) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const true) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f64::is_finite(-0.0), true)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_normal(const -0f64) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f64::is_normal(-0.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_sign_positive(const -0f64) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f64::is_sign_positive(-0.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_sign_negative(const -0f64) -> bb1;
    }

    bb1: {
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const true) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: eq(f64::is_sign_negative(-0.0), true)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f64;
    let mut _5: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const 1f64, const 0f64);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_nan(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_5);
        ConstEvalCounter;
        _5 = core::panicking::panic(const "assertion failed: eq(f64::is_nan(1.0 / 0.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f64;
    let mut _5: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const 1f64, const 0f64);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_infinite(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const true) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_5);
        ConstEvalCounter;
        _5 = core::panicking::panic(const "assertion failed: eq(f64::is_infinite(1.0 / 0.0), true)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f64;
    let mut _5: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const 1f64, const 0f64);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_finite(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_5);
        ConstEvalCounter;
        _5 = core::panicking::panic(const "assertion failed: eq(f64::is_finite(1.0 / 0.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f64;
    let mut _5: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const 1f64, const 0f64);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_normal(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_5);
        ConstEvalCounter;
        _5 = core::panicking::panic(const "assertion failed: eq(f64::is_normal(1.0 / 0.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f64;
    let mut _5: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const 1f64, const 0f64);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_sign_positive(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const true) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_5);
        ConstEvalCounter;
        _5 = core::panicking::panic(const "assertion failed: eq(f64::is_sign_positive(1.0 / 0.0), true)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f64;
    let mut _5: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const 1f64, const 0f64);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_sign_negative(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_5);
        ConstEvalCounter;
        _5 = core::panicking::panic(const "assertion failed: eq(f64::is_sign_negative(1.0 / 0.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f64;
    let mut _5: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const -1f64, const 0f64);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_nan(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_5);
        ConstEvalCounter;
        _5 = core::panicking::panic(const "assertion failed: eq(f64::is_nan(-1.0 / 0.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f64;
    let mut _5: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const -1f64, const 0f64);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_infinite(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const true) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_5);
        ConstEvalCounter;
        _5 = core::panicking::panic(const "assertion failed: eq(f64::is_infinite(-1.0 / 0.0), true)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f64;
    let mut _5: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const -1f64, const 0f64);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_finite(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_5);
        ConstEvalCounter;
        _5 = core::panicking::panic(const "assertion failed: eq(f64::is_finite(-1.0 / 0.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f64;
    let mut _5: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const -1f64, const 0f64);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_normal(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_5);
        ConstEvalCounter;
        _5 = core::panicking::panic(const "assertion failed: eq(f64::is_normal(-1.0 / 0.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f64;
    let mut _5: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const -1f64, const 0f64);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_sign_positive(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const false) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_5);
        ConstEvalCounter;
        _5 = core::panicking::panic(const "assertion failed: eq(f64::is_sign_positive(-1.0 / 0.0), false)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const f64::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f64;
    let mut _5: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Div(const -1f64, const 0f64);
        ConstEvalCounter;
        _3 = core::f64::<impl f64>::is_sign_negative(move _4) -> bb1;
    }

    bb1: {
        StorageDead(_4);
        ConstEvalCounter;
        _2 = eq::<bool, bool>(move _3, const true) -> bb2;
    }

    bb2: {
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_5);
        ConstEvalCounter;
        _5 = core::panicking::panic(const "assertion failed: eq(f64::is_sign_negative(-1.0 / 0.0), true)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();

    bb0: {
        _1 = f32() -> bb1;
    }

    bb1: {
        _2 = f64() -> bb2;
    }

    bb2: {
        return;
    }
}
