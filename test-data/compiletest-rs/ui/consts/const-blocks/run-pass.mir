// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/consts/const-blocks/run-pass.rs:3:10: 3:15>::fmt(_1: &Bar, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "Bar";
        _0 = Formatter::<'_>::write_str(_2, _3) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/consts/const-blocks/run-pass.rs:3:17: 3:19>::assert_receiver_is_total_eq(_1: &Bar) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/consts/const-blocks/run-pass.rs:3:21: 3:30>::eq(_1: &Bar, _2: &Bar) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;

    bb0: {
        _0 = const true;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&[std::option::Option<Bar>; 2], &[std::option::Option<Bar>; 2]);
    let mut _2: &[std::option::Option<Bar>; 2];
    let _3: [std::option::Option<Bar>; 2];
    let mut _4: &[std::option::Option<Bar>; 2];
    let _5: [std::option::Option<Bar>; 2];
    let mut _6: std::option::Option<Bar>;
    let mut _7: std::option::Option<Bar>;
    let _8: &[std::option::Option<Bar>; 2];
    let _9: &[std::option::Option<Bar>; 2];
    let mut _10: bool;
    let mut _11: bool;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _8;
        debug right_val => _9;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }

    bb0: {
        _3 = const _;
        _2 = &_3;
        _6 = Option::<Bar>::None;
        _7 = Option::<Bar>::None;
        _5 = [move _6, move _7];
        _4 = &_5;
        _1 = (move _2, move _4);
        _8 = (_1.0: &[std::option::Option<Bar>; 2]);
        _9 = (_1.1: &[std::option::Option<Bar>; 2]);
        _11 = <[Option<Bar>; 2] as PartialEq>::eq(_8, _9) -> bb1;
    }

    bb1: {
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<[Option<Bar>; 2], [Option<Bar>; 2]>(move _12, _8, _9, move _14);
    }

    bb3: {
        return;
    }
}

const FOO: Option<Bar> = {
    let mut _0: std::option::Option<Bar>;

    bb0: {
        _0 = Option::<Bar>::None;
        return;
    }
}

const ARR: [Option<Bar>; 2] = {
    let mut _0: [std::option::Option<Bar>; 2];

    bb0: {
        _0 = [const _; 2];
        return;
    }
}

ARR::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

ARR::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}
