// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const EMPTY: Vec<i32> = {
    let mut _0: std::vec::Vec<i32>;

    bb0: {
        ConstEvalCounter;
        _0 = Vec::<i32>::new() -> bb1;
    }

    bb1: {
        return;
    }
}

fn bar() -> [Vec<i32>; 2] {
    let mut _0: [std::vec::Vec<i32>; 2];

    bb0: {
        _0 = [const _; 2];
        return;
    }
}

bar::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

bar::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

fn <impl at ui/consts/const-blocks/const-repeat.rs:13:1: 13:19>::drop(_1: &mut Bomb) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: !;

    bb0: {
        _2 = begin_panic::<&str>(const "BOOM!");
    }
}

const BOOM: Bomb = {
    let mut _0: Bomb;

    bb0: {
        _0 = Bomb;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: [std::vec::Vec<i32>; 2];
    scope 1 {
        debug _x => _1;
        scope 2 {
            debug _x => const [];
        }
    }

    bb0: {
        _1 = bar() -> bb1;
    }

    bb1: {
        drop(_1) -> bb2;
    }

    bb2: {
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}
