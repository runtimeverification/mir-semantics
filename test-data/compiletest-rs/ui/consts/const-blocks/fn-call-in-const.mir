// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn type_no_copy() -> Option<Bar> {
    let mut _0: std::option::Option<Bar>;

    bb0: {
        _0 = Option::<Bar>::None;
        return;
    }
}

// MIR FOR CTFE
fn type_no_copy() -> Option<Bar> {
    let mut _0: std::option::Option<Bar>;

    bb0: {
        _0 = Option::<Bar>::None;
        return;
    }
}

fn type_copy() -> u32 {
    let mut _0: u32;

    bb0: {
        _0 = const 3_u32;
        return;
    }
}

// MIR FOR CTFE
fn type_copy() -> u32 {
    let mut _0: u32;

    bb0: {
        _0 = const 3_u32;
        return;
    }
}

const _: [u32; 2] = {
    let mut _0: [u32; 2];
    let mut _1: u32;

    bb0: {
        StorageLive(_1);
        ConstEvalCounter;
        _1 = type_copy() -> bb1;
    }

    bb1: {
        _0 = [move _1; 2];
        StorageDead(_1);
        return;
    }
}

_::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

_::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

const _: [Option<Bar>; 2] = {
    let mut _0: [std::option::Option<Bar>; 2];

    bb0: {
        _0 = [const _; 2];
        return;
    }
}

_::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

_::{constant#1}: Option<Bar> = {
    let mut _0: std::option::Option<Bar>;

    bb0: {
        ConstEvalCounter;
        _0 = type_no_copy() -> bb1;
    }

    bb1: {
        return;
    }
}

_::{constant#2}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
