// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const X: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const 4_u32;
        return;
    }
}

const Y: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const 5_u32;
        return;
    }
}

const ABS_DIFF: u32 = {
    let mut _0: u32;
    let mut _1: bool;
    let mut _2: (u32, bool);
    let mut _3: (u32, bool);

    bb0: {
        StorageLive(_1);
        _1 = Lt(const _, const _);
        switchInt(move _1) -> [0: bb3, otherwise: bb1];
    }

    bb1: {
        _2 = CheckedSub(const _, const _);
        assert(!move (_2.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, const _) -> bb2;
    }

    bb2: {
        _0 = move (_2.0: u32);
        goto -> bb5;
    }

    bb3: {
        _3 = CheckedSub(const _, const _);
        assert(!move (_3.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, const _) -> bb4;
    }

    bb4: {
        _0 = move (_3.0: u32);
        goto -> bb5;
    }

    bb5: {
        StorageDead(_1);
        return;
    }
}

fn abs_diff(_1: u32, _2: u32) -> u32 {
    debug a => _1;
    debug b => _2;
    let mut _0: u32;
    let mut _3: (u32, u32);
    let _4: u32;
    let _5: &u32;
    let _6: u32;
    let _7: &u32;
    let mut _8: bool;
    let mut _9: u32;
    let mut _10: u32;
    let _11: u32;
    let _12: u32;
    scope 1 {
        debug big => _4;
        debug big => _5;
        debug little => _6;
        debug little => _7;
    }
    scope 2 {
        debug little => _11;
        debug big => _12;
    }

    bb0: {
        _3 = (_1, _2);
        _5 = &(_3.0: u32);
        _7 = &(_3.1: u32);
        _9 = (*_5);
        _10 = (*_7);
        _8 = Gt(move _9, move _10);
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _4 = (_3.0: u32);
        _6 = (_3.1: u32);
        _0 = Sub(_4, _6);
        goto -> bb3;
    }

    bb2: {
        _11 = (_3.0: u32);
        _12 = (_3.1: u32);
        _0 = Sub(_12, _11);
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

// MIR FOR CTFE
fn abs_diff(_1: u32, _2: u32) -> u32 {
    debug a => _1;
    debug b => _2;
    let mut _0: u32;
    let mut _3: (u32, u32);
    let mut _4: u32;
    let mut _5: u32;
    let _6: u32;
    let _7: &u32;
    let _8: u32;
    let _9: &u32;
    let mut _10: bool;
    let mut _11: u32;
    let mut _12: u32;
    let mut _13: u32;
    let mut _14: u32;
    let _15: u32;
    let _16: u32;
    let mut _17: u32;
    let mut _18: u32;
    scope 1 {
        debug big => _6;
        debug big => _7;
        debug little => _8;
        debug little => _9;
    }
    scope 2 {
        debug little => _15;
        debug big => _16;
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = _1;
        StorageLive(_5);
        _5 = _2;
        _3 = (move _4, move _5);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_7);
        _7 = &(_3.0: u32);
        StorageLive(_9);
        _9 = &(_3.1: u32);
        StorageLive(_10);
        StorageLive(_11);
        _11 = (*_7);
        StorageLive(_12);
        _12 = (*_9);
        _10 = Gt(move _11, move _12);
        switchInt(move _10) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_6);
        _6 = (_3.0: u32);
        StorageLive(_8);
        _8 = (_3.1: u32);
        StorageLive(_13);
        _13 = _6;
        StorageLive(_14);
        _14 = _8;
        _0 = Sub(move _13, move _14);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_8);
        StorageDead(_6);
        StorageDead(_9);
        StorageDead(_7);
        goto -> bb3;
    }

    bb2: {
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_7);
        StorageLive(_15);
        _15 = (_3.0: u32);
        StorageLive(_16);
        _16 = (_3.1: u32);
        StorageLive(_17);
        _17 = _16;
        StorageLive(_18);
        _18 = _15;
        _0 = Sub(move _17, move _18);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb3;
    }

    bb3: {
        StorageDead(_3);
        return;
    }
}

fn gcd(_1: u32, _2: u32) -> u32 {
    debug a => _1;
    debug b => _2;
    let mut _0: u32;
    let mut _3: u32;
    let mut _4: bool;

    bb0: {
        switchInt(move _2) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = _1;
        goto -> bb4;
    }

    bb2: {
        _4 = Eq(_2, const 0_u32);
        assert(!move _4, "attempt to calculate the remainder of `{}` with a divisor of zero", _1) -> bb3;
    }

    bb3: {
        _3 = Rem(_1, _2);
        _0 = gcd(_2, move _3) -> bb4;
    }

    bb4: {
        return;
    }
}

// MIR FOR CTFE
fn gcd(_1: u32, _2: u32) -> u32 {
    debug a => _1;
    debug b => _2;
    let mut _0: u32;
    let _3: ();
    let mut _4: bool;
    let mut _5: u32;
    let mut _6: !;
    let mut _7: u32;
    let mut _8: u32;
    let mut _9: u32;
    let mut _10: u32;
    let mut _11: bool;

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = _2;
        _4 = Eq(move _5, const 0_u32);
        StorageDead(_5);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _0 = _1;
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb5;
    }

    bb2: {
        _3 = const ();
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_7);
        _7 = _2;
        StorageLive(_8);
        StorageLive(_9);
        _9 = _1;
        StorageLive(_10);
        _10 = _2;
        _11 = Eq(_10, const 0_u32);
        assert(!move _11, "attempt to calculate the remainder of `{}` with a divisor of zero", _9) -> bb3;
    }

    bb3: {
        _8 = Rem(move _9, move _10);
        StorageDead(_10);
        StorageDead(_9);
        ConstEvalCounter;
        _0 = gcd(move _7, move _8) -> bb4;
    }

    bb4: {
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb5;
    }

    bb5: {
        return;
    }
}

fn fib(_1: u64) -> u64 {
    debug n => _1;
    let mut _0: u64;
    let mut _2: (u64, u64);
    let mut _4: bool;
    let mut _5: u64;
    let mut _6: u64;
    let mut _7: u64;
    let mut _8: u64;
    let mut _9: u64;
    scope 1 {
        debug fib => _2;
        let mut _3: u64;
        scope 2 {
            debug i => _3;
        }
    }

    bb0: {
        switchInt(move _1) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const 0_u64;
        goto -> bb6;
    }

    bb2: {
        _2 = (const 0_u64, const 1_u64);
        _3 = const 1_u64;
        goto -> bb3;
    }

    bb3: {
        _5 = _3;
        _4 = Lt(move _5, _1);
        switchInt(move _4) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _6 = (_2.1: u64);
        _8 = (_2.0: u64);
        _9 = (_2.1: u64);
        _7 = Add(move _8, move _9);
        _2 = (move _6, move _7);
        _3 = Add(_3, const 1_u64);
        goto -> bb3;
    }

    bb5: {
        _0 = (_2.1: u64);
        goto -> bb6;
    }

    bb6: {
        return;
    }
}

// MIR FOR CTFE
fn fib(_1: u64) -> u64 {
    debug n => _1;
    let mut _0: u64;
    let _2: ();
    let mut _3: bool;
    let mut _4: u64;
    let mut _5: !;
    let mut _6: (u64, u64);
    let _8: ();
    let mut _9: ();
    let mut _10: bool;
    let mut _11: u64;
    let mut _12: u64;
    let mut _13: u64;
    let mut _14: u64;
    let mut _15: u64;
    let mut _16: u64;
    let mut _17: !;
    let _18: ();
    let mut _19: !;
    scope 1 {
        debug fib => _6;
        let mut _7: u64;
        scope 2 {
            debug i => _7;
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = _1;
        _3 = Eq(move _4, const 0_u64);
        StorageDead(_4);
        switchInt(move _3) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _0 = const 0_u64;
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb6;
    }

    bb2: {
        _2 = const ();
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_6);
        _6 = (const 0_u64, const 1_u64);
        StorageLive(_7);
        _7 = const 1_u64;
        StorageLive(_8);
        goto -> bb3;
    }

    bb3: {
        StorageLive(_10);
        StorageLive(_11);
        _11 = _7;
        StorageLive(_12);
        _12 = _1;
        _10 = Lt(move _11, move _12);
        StorageDead(_12);
        StorageDead(_11);
        switchInt(move _10) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        StorageLive(_13);
        _13 = (_6.1: u64);
        StorageLive(_14);
        StorageLive(_15);
        _15 = (_6.0: u64);
        StorageLive(_16);
        _16 = (_6.1: u64);
        _14 = Add(move _15, move _16);
        StorageDead(_16);
        StorageDead(_15);
        _6 = (move _13, move _14);
        StorageDead(_14);
        StorageDead(_13);
        _7 = Add(_7, const 1_u64);
        _9 = const ();
        StorageDead(_10);
        ConstEvalCounter;
        goto -> bb3;
    }

    bb5: {
        StorageLive(_18);
        _8 = const ();
        StorageDead(_18);
        StorageDead(_10);
        StorageDead(_8);
        _0 = (_6.1: u64);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb6;
    }

    bb6: {
        return;
    }
}

fn is_prime(_1: u64) -> bool {
    debug n => _1;
    let mut _0: bool;
    let mut _2: u64;
    let mut _3: bool;
    let mut _4: u64;
    let mut _5: u64;
    let mut _6: u64;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: u64;
    let mut _10: u64;
    let mut _11: u64;
    scope 1 {
        debug div => _4;
    }

    bb0: {
        _3 = Eq(const 2_u64, const 0_u64);
        assert(!move _3, "attempt to calculate the remainder of `{}` with a divisor of zero", _1) -> bb1;
    }

    bb1: {
        _2 = Rem(_1, const 2_u64);
        switchInt(move _2) -> [0: bb2, otherwise: bb3];
    }

    bb2: {
        _0 = const false;
        goto -> bb10;
    }

    bb3: {
        _4 = const 3_u64;
        goto -> bb4;
    }

    bb4: {
        _6 = _4;
        _7 = Eq(_6, const 0_u64);
        assert(!move _7, "attempt to calculate the remainder of `{}` with a divisor of zero", _1) -> bb5;
    }

    bb5: {
        _5 = Rem(_1, move _6);
        switchInt(move _5) -> [0: bb6, otherwise: bb7];
    }

    bb6: {
        _0 = const false;
        goto -> bb10;
    }

    bb7: {
        _10 = _4;
        _11 = _4;
        _9 = Mul(move _10, move _11);
        _8 = Gt(move _9, _1);
        switchInt(move _8) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _0 = const true;
        goto -> bb10;
    }

    bb9: {
        _4 = Add(_4, const 2_u64);
        goto -> bb4;
    }

    bb10: {
        return;
    }
}

// MIR FOR CTFE
fn is_prime(_1: u64) -> bool {
    debug n => _1;
    let mut _0: bool;
    let _2: ();
    let mut _3: bool;
    let mut _4: u64;
    let mut _5: u64;
    let mut _6: bool;
    let mut _7: !;
    let mut _8: u64;
    let mut _9: !;
    let mut _10: ();
    let _11: ();
    let mut _12: bool;
    let mut _13: u64;
    let mut _14: u64;
    let mut _15: u64;
    let mut _16: bool;
    let mut _17: !;
    let _18: ();
    let mut _19: bool;
    let mut _20: u64;
    let mut _21: u64;
    let mut _22: u64;
    let mut _23: u64;
    let mut _24: !;
    scope 1 {
        debug div => _8;
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = _1;
        _6 = Eq(const 2_u64, const 0_u64);
        assert(!move _6, "attempt to calculate the remainder of `{}` with a divisor of zero", _5) -> bb1;
    }

    bb1: {
        _4 = Rem(move _5, const 2_u64);
        StorageDead(_5);
        _3 = Eq(move _4, const 0_u64);
        StorageDead(_4);
        switchInt(move _3) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _0 = const false;
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb11;
    }

    bb3: {
        _2 = const ();
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_8);
        _8 = const 3_u64;
        StorageLive(_9);
        goto -> bb4;
    }

    bb4: {
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = _1;
        StorageLive(_15);
        _15 = _8;
        _16 = Eq(_15, const 0_u64);
        assert(!move _16, "attempt to calculate the remainder of `{}` with a divisor of zero", _14) -> bb5;
    }

    bb5: {
        _13 = Rem(move _14, move _15);
        StorageDead(_15);
        StorageDead(_14);
        _12 = Eq(move _13, const 0_u64);
        StorageDead(_13);
        switchInt(move _12) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _0 = const false;
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb10;
    }

    bb7: {
        _11 = const ();
        StorageDead(_12);
        StorageDead(_11);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = _8;
        StorageLive(_22);
        _22 = _8;
        _20 = Mul(move _21, move _22);
        StorageDead(_22);
        StorageDead(_21);
        StorageLive(_23);
        _23 = _1;
        _19 = Gt(move _20, move _23);
        StorageDead(_23);
        StorageDead(_20);
        switchInt(move _19) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _0 = const true;
        StorageDead(_19);
        StorageDead(_18);
        goto -> bb10;
    }

    bb9: {
        _18 = const ();
        StorageDead(_19);
        StorageDead(_18);
        _8 = Add(_8, const 2_u64);
        _10 = const ();
        ConstEvalCounter;
        goto -> bb4;
    }

    bb10: {
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb11;
    }

    bb11: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: u32;
    let mut _4: u32;
    let mut _5: !;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: u32;
    let mut _9: !;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: u32;
    let mut _13: !;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: u32;
    let mut _17: !;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: u64;
    let mut _21: !;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: u64;
    let mut _25: !;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: !;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: !;

    bb0: {
        _3 = abs_diff(const 4_u32, const 5_u32) -> bb1;
    }

    bb1: {
        _4 = abs_diff(const 5_u32, const 4_u32) -> bb2;
    }

    bb2: {
        _2 = Eq(move _3, move _4);
        _1 = Not(move _2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _5 = core::panicking::panic(const "assertion failed: abs_diff(4, 5) == abs_diff(5, 4)");
    }

    bb4: {
        _8 = abs_diff(const 5_u32, const 4_u32) -> bb5;
    }

    bb5: {
        _7 = Eq(const _, move _8);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _9 = core::panicking::panic(const "assertion failed: ABS_DIFF == abs_diff(5, 4)");
    }

    bb7: {
        _12 = gcd(const 48_u32, const 18_u32) -> bb8;
    }

    bb8: {
        _11 = Eq(move _12, const 6_u32);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _13 = core::panicking::panic(const "assertion failed: gcd(48, 18) == 6");
    }

    bb10: {
        _16 = gcd(const 18_u32, const 48_u32) -> bb11;
    }

    bb11: {
        _15 = Eq(move _16, const 6_u32);
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _17 = core::panicking::panic(const "assertion failed: gcd(18, 48) == 6");
    }

    bb13: {
        _20 = fib(const 2_u64) -> bb14;
    }

    bb14: {
        _19 = Eq(move _20, const 1_u64);
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _21 = core::panicking::panic(const "assertion failed: fib(2) == 1");
    }

    bb16: {
        _24 = fib(const 8_u64) -> bb17;
    }

    bb17: {
        _23 = Eq(move _24, const 21_u64);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _25 = core::panicking::panic(const "assertion failed: fib(8) == 21");
    }

    bb19: {
        _27 = is_prime(const 113_u64) -> bb20;
    }

    bb20: {
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _28 = core::panicking::panic(const "assertion failed: is_prime(113)");
    }

    bb22: {
        _31 = is_prime(const 117_u64) -> bb23;
    }

    bb23: {
        _30 = Not(move _31);
        _29 = Not(move _30);
        switchInt(move _29) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _32 = core::panicking::panic(const "assertion failed: !is_prime(117)");
    }

    bb25: {
        return;
    }
}

const main::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: u32;
    let mut _4: u32;
    let mut _5: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = abs_diff(const 4_u32, const 5_u32) -> bb1;
    }

    bb1: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = abs_diff(const 5_u32, const 4_u32) -> bb2;
    }

    bb2: {
        _2 = Eq(move _3, move _4);
        StorageDead(_4);
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_5);
        ConstEvalCounter;
        _5 = core::panicking::panic(const "assertion failed: abs_diff(4, 5) == abs_diff(5, 4)");
    }

    bb4: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const main::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: u32;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = abs_diff(const 5_u32, const 4_u32) -> bb1;
    }

    bb1: {
        _2 = Eq(const _, move _3);
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: ABS_DIFF == abs_diff(5, 4)");
    }

    bb3: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const main::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: u32;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = gcd(const 48_u32, const 18_u32) -> bb1;
    }

    bb1: {
        _2 = Eq(move _3, const 6_u32);
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: gcd(48, 18) == 6");
    }

    bb3: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const main::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: u32;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = gcd(const 18_u32, const 48_u32) -> bb1;
    }

    bb1: {
        _2 = Eq(move _3, const 6_u32);
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: gcd(18, 48) == 6");
    }

    bb3: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const main::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: u64;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = fib(const 2_u64) -> bb1;
    }

    bb1: {
        _2 = Eq(move _3, const 1_u64);
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: fib(2) == 1");
    }

    bb3: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const main::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: u64;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = fib(const 8_u64) -> bb1;
    }

    bb1: {
        _2 = Eq(move _3, const 21_u64);
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: fib(8) == 21");
    }

    bb3: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const main::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        ConstEvalCounter;
        _2 = is_prime(const 113_u64) -> bb1;
    }

    bb1: {
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::panicking::panic(const "assertion failed: is_prime(113)");
    }

    bb3: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const main::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = is_prime(const 117_u64) -> bb1;
    }

    bb1: {
        _2 = Not(move _3);
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: !is_prime(117)");
    }

    bb3: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}
