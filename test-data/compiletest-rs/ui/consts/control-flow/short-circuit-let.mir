// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const X: i32 = {
    let mut _0: i32;
    let mut _1: i32;
    let mut _2: bool;
    let mut _3: bool;
    scope 1 {
        debug x => _1;
        scope 2 {
        }
    }

    bb0: {
        StorageLive(_1);
        _1 = const 0_i32;
        StorageLive(_2);
        switchInt(const true) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _2 = const false;
        goto -> bb3;
    }

    bb2: {
        StorageLive(_3);
        _1 = const 1_i32;
        _3 = const false;
        _2 = move _3;
        goto -> bb3;
    }

    bb3: {
        StorageDead(_3);
        StorageDead(_2);
        _0 = _1;
        StorageDead(_1);
        return;
    }
}

const Y: bool = {
    let mut _0: bool;
    let _1: bool;
    let mut _2: bool;
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        switchInt(const true) -> [0: bb4, otherwise: bb5];
    }

    bb1: {
        _1 = const true;
        goto -> bb3;
    }

    bb2: {
        _1 = const true;
        goto -> bb3;
    }

    bb3: {
        StorageDead(_2);
        _0 = _1;
        StorageDead(_1);
        return;
    }

    bb4: {
        _2 = const false;
        goto -> bb6;
    }

    bb5: {
        _2 = const false;
        goto -> bb6;
    }

    bb6: {
        switchInt(move _2) -> [0: bb2, otherwise: bb1];
    }
}

fn truthy() -> bool {
    let mut _0: bool;
    let _1: bool;
    scope 1 {
        debug x => _1;
    }

    bb0: {
        _1 = const true;
        _0 = _1;
        return;
    }
}

// MIR FOR CTFE
fn truthy() -> bool {
    let mut _0: bool;
    let _1: bool;
    let mut _2: bool;
    let mut _3: !;
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_1);
        switchInt(const true) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _1 = const true;
        StorageDead(_2);
        _0 = _1;
        StorageDead(_1);
        goto -> bb3;
    }

    bb2: {
        StorageLive(_2);
        _0 = const false;
        StorageDead(_2);
        StorageDead(_1);
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn falsy() -> bool {
    let mut _0: bool;
    let _1: bool;
    scope 1 {
        debug x => _1;
    }

    bb0: {
        _0 = const false;
        return;
    }
}

// MIR FOR CTFE
fn falsy() -> bool {
    let mut _0: bool;
    let _1: bool;
    let mut _2: bool;
    let mut _3: !;
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_1);
        switchInt(const true) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _1 = const false;
        StorageDead(_2);
        _0 = _1;
        StorageDead(_1);
        goto -> bb3;
    }

    bb2: {
        StorageLive(_2);
        _0 = const false;
        StorageDead(_2);
        StorageDead(_1);
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: !;
    let mut _3: (&i32, &i32);
    let mut _4: &i32;
    let _5: i32;
    let mut _6: &i32;
    let _7: i32;
    let _8: &i32;
    let _9: &i32;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: i32;
    let mut _13: i32;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: !;
    scope 1 {
        debug left_val => _8;
        debug right_val => _9;
        let _14: core::panicking::AssertKind;
        scope 2 {
            debug kind => _14;
        }
    }

    bb0: {
        _1 = Not(const _);
        switchInt(move _1) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _2 = core::panicking::panic(const "assertion failed: Y");
    }

    bb2: {
        _5 = const _;
        _4 = &_5;
        _7 = const 1_i32;
        _6 = &_7;
        _3 = (move _4, move _6);
        _8 = (_3.0: &i32);
        _9 = (_3.1: &i32);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<i32, i32>(move _14, _8, _9, move _16);
    }

    bb4: {
        _19 = truthy() -> bb8;
    }

    bb5: {
        _18 = const false;
        goto -> bb7;
    }

    bb6: {
        _21 = falsy() -> bb9;
    }

    bb7: {
        _17 = Not(move _18);
        switchInt(move _17) -> [0: bb11, otherwise: bb10];
    }

    bb8: {
        switchInt(move _19) -> [0: bb5, otherwise: bb6];
    }

    bb9: {
        _20 = Not(move _21);
        _18 = move _20;
        goto -> bb7;
    }

    bb10: {
        _22 = core::panicking::panic(const "assertion failed: truthy() && !falsy()");
    }

    bb11: {
        return;
    }
}

const main::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: !;

    bb0: {
        StorageLive(_1);
        _1 = Not(const _);
        switchInt(move _1) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageLive(_2);
        ConstEvalCounter;
        _2 = core::panicking::panic(const "assertion failed: Y");
    }

    bb2: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const main::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = Eq(const _, const 1_i32);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::panicking::panic(const "assertion failed: X == 1");
    }

    bb2: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const main::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        ConstEvalCounter;
        _2 = truthy() -> bb1;
    }

    bb1: {
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::panicking::panic(const "assertion failed: truthy()");
    }

    bb3: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const main::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = falsy() -> bb1;
    }

    bb1: {
        _2 = Not(move _3);
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: !falsy()");
    }

    bb3: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}
