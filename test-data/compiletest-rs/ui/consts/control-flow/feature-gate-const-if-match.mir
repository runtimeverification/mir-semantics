// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const _: i32 = {
    let mut _0: i32;
    let mut _1: bool;

    bb0: {
        StorageLive(_1);
        _1 = const true;
        switchInt(move _1) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _0 = const 5_i32;
        goto -> bb3;
    }

    bb2: {
        _0 = const 6_i32;
        goto -> bb3;
    }

    bb3: {
        StorageDead(_1);
        return;
    }
}

const _: i32 = {
    let mut _0: i32;
    let mut _1: std::option::Option<bool>;
    let mut _2: isize;
    scope 1 {
    }

    bb0: {
        StorageLive(_1);
        _1 = Option::<bool>::Some(const false);
        _2 = discriminant(_1);
        switchInt(move _2) -> [1: bb1, otherwise: bb3];
    }

    bb1: {
        switchInt(((_1 as Some).0: bool)) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _0 = const 0_i32;
        goto -> bb4;
    }

    bb3: {
        _0 = const 1_i32;
        goto -> bb4;
    }

    bb4: {
        StorageDead(_1);
        return;
    }
}

const _: i32 = {
    let mut _0: i32;
    let mut _1: i32;

    bb0: {
        StorageLive(_1);
        _1 = const 1_i32;
        switchInt(_1) -> [2: bb2, 4: bb3, otherwise: bb1];
    }

    bb1: {
        _0 = const 0_i32;
        goto -> bb4;
    }

    bb2: {
        _0 = const 3_i32;
        goto -> bb4;
    }

    bb3: {
        _0 = const 5_i32;
        goto -> bb4;
    }

    bb4: {
        StorageDead(_1);
        return;
    }
}

static FOO: i32 = {
    let mut _0: i32;
    let _1: i32;
    let mut _2: bool;
    let mut _4: std::option::Option<i32>;
    let mut _5: i32;
    let mut _6: isize;
    scope 1 {
        debug x => _1;
        let _3: i32;
        scope 2 {
            debug x => _3;
            scope 3 {
                debug x => _7;
                let _7: i32;
            }
        }
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const true;
        switchInt(move _2) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _1 = const 0_i32;
        goto -> bb3;
    }

    bb2: {
        _1 = const 1_i32;
        goto -> bb3;
    }

    bb3: {
        StorageDead(_2);
        StorageLive(_3);
        switchInt(_1) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _3 = const 0_i32;
        goto -> bb6;
    }

    bb5: {
        _3 = const 1_i32;
        goto -> bb6;
    }

    bb6: {
        StorageLive(_4);
        StorageLive(_5);
        _5 = _3;
        _4 = Option::<i32>::Some(move _5);
        StorageDead(_5);
        _6 = discriminant(_4);
        switchInt(move _6) -> [1: bb7, otherwise: bb8];
    }

    bb7: {
        StorageLive(_7);
        _7 = ((_4 as Some).0: i32);
        _0 = _7;
        StorageDead(_7);
        goto -> bb9;
    }

    bb8: {
        _0 = const 1_i32;
        goto -> bb9;
    }

    bb9: {
        StorageDead(_3);
        StorageDead(_1);
        StorageDead(_4);
        return;
    }
}

static mut BAR: i32 = {
    let mut _0: i32;
    let _1: i32;
    let mut _2: bool;
    let mut _4: std::option::Option<i32>;
    let mut _5: i32;
    let mut _6: isize;
    scope 1 {
        debug x => _1;
        let _3: i32;
        scope 2 {
            debug x => _3;
            scope 3 {
                debug x => _7;
                let _7: i32;
            }
        }
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const true;
        switchInt(move _2) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _1 = const 0_i32;
        goto -> bb3;
    }

    bb2: {
        _1 = const 1_i32;
        goto -> bb3;
    }

    bb3: {
        StorageDead(_2);
        StorageLive(_3);
        switchInt(_1) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _3 = const 0_i32;
        goto -> bb6;
    }

    bb5: {
        _3 = const 1_i32;
        goto -> bb6;
    }

    bb6: {
        StorageLive(_4);
        StorageLive(_5);
        _5 = _3;
        _4 = Option::<i32>::Some(move _5);
        StorageDead(_5);
        _6 = discriminant(_4);
        switchInt(move _6) -> [1: bb7, otherwise: bb8];
    }

    bb7: {
        StorageLive(_7);
        _7 = ((_4 as Some).0: i32);
        _0 = _7;
        StorageDead(_7);
        goto -> bb9;
    }

    bb8: {
        _0 = const 1_i32;
        goto -> bb9;
    }

    bb9: {
        StorageDead(_3);
        StorageDead(_1);
        StorageDead(_4);
        return;
    }
}

fn if_() -> i32 {
    let mut _0: i32;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        switchInt(move _1) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _0 = const 5_i32;
        goto -> bb3;
    }

    bb2: {
        _0 = const 6_i32;
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

// MIR FOR CTFE
fn if_() -> i32 {
    let mut _0: i32;
    let mut _1: bool;

    bb0: {
        StorageLive(_1);
        _1 = const true;
        switchInt(move _1) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _0 = const 5_i32;
        goto -> bb3;
    }

    bb2: {
        _0 = const 6_i32;
        goto -> bb3;
    }

    bb3: {
        StorageDead(_1);
        return;
    }
}

fn if_let(_1: Option<bool>) -> i32 {
    debug a => _1;
    let mut _0: i32;
    let mut _2: isize;
    scope 1 {
    }

    bb0: {
        _2 = discriminant(_1);
        switchInt(move _2) -> [1: bb1, otherwise: bb3];
    }

    bb1: {
        switchInt(((_1 as Some).0: bool)) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _0 = const 0_i32;
        goto -> bb4;
    }

    bb3: {
        _0 = const 1_i32;
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

// MIR FOR CTFE
fn if_let(_1: Option<bool>) -> i32 {
    debug a => _1;
    let mut _0: i32;
    let mut _2: isize;
    scope 1 {
    }

    bb0: {
        _2 = discriminant(_1);
        switchInt(move _2) -> [1: bb1, otherwise: bb3];
    }

    bb1: {
        switchInt(((_1 as Some).0: bool)) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _0 = const 0_i32;
        goto -> bb4;
    }

    bb3: {
        _0 = const 1_i32;
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

fn match_(_1: i32) -> i32 {
    debug i => _1;
    let mut _0: i32;
    let _2: i32;
    let _3: &i32;
    let mut _4: bool;
    let mut _5: i32;
    scope 1 {
        debug i => _2;
        debug i => _3;
    }

    bb0: {
        _3 = &_1;
        _5 = (*_3);
        _4 = Gt(move _5, const 10_i32);
        switchInt(move _4) -> [0: bb3, otherwise: bb2];
    }

    bb1: {
        _0 = const 0_i32;
        goto -> bb5;
    }

    bb2: {
        _2 = _1;
        _0 = _2;
        goto -> bb5;
    }

    bb3: {
        switchInt(_1) -> [1: bb4, otherwise: bb1];
    }

    bb4: {
        _0 = const 2_i32;
        goto -> bb5;
    }

    bb5: {
        return;
    }
}

// MIR FOR CTFE
fn match_(_1: i32) -> i32 {
    debug i => _1;
    let mut _0: i32;
    let mut _2: &i32;
    let _3: i32;
    let _4: &i32;
    let mut _5: bool;
    let mut _6: i32;
    scope 1 {
        debug i => _3;
        debug i => _4;
    }

    bb0: {
        StorageLive(_4);
        _4 = &_1;
        StorageLive(_5);
        StorageLive(_6);
        _6 = (*_4);
        _5 = Gt(move _6, const 10_i32);
        switchInt(move _5) -> [0: bb3, otherwise: bb2];
    }

    bb1: {
        _0 = const 0_i32;
        goto -> bb5;
    }

    bb2: {
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_3);
        _3 = _1;
        _0 = _3;
        StorageDead(_3);
        StorageDead(_4);
        goto -> bb5;
    }

    bb3: {
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        switchInt(_1) -> [1: bb4, otherwise: bb1];
    }

    bb4: {
        _0 = const 2_i32;
        goto -> bb5;
    }

    bb5: {
        return;
    }
}

const Foo::IF: i32 = {
    let mut _0: i32;
    let mut _1: bool;

    bb0: {
        StorageLive(_1);
        _1 = const true;
        switchInt(move _1) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _0 = const 5_i32;
        goto -> bb3;
    }

    bb2: {
        _0 = const 6_i32;
        goto -> bb3;
    }

    bb3: {
        StorageDead(_1);
        return;
    }
}

const Foo::IF_LET: i32 = {
    let mut _0: i32;
    let mut _1: std::option::Option<bool>;
    let mut _2: isize;
    scope 1 {
    }

    bb0: {
        StorageLive(_1);
        _1 = Option::<bool>::None;
        _2 = discriminant(_1);
        switchInt(move _2) -> [1: bb1, otherwise: bb3];
    }

    bb1: {
        switchInt(((_1 as Some).0: bool)) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _0 = const 5_i32;
        goto -> bb4;
    }

    bb3: {
        _0 = const 6_i32;
        goto -> bb4;
    }

    bb4: {
        StorageDead(_1);
        return;
    }
}

const Foo::MATCH: i32 = {
    let mut _0: i32;
    let mut _1: i32;

    bb0: {
        StorageLive(_1);
        _1 = const 0_i32;
        switchInt(_1) -> [1: bb2, otherwise: bb1];
    }

    bb1: {
        _0 = const 0_i32;
        goto -> bb3;
    }

    bb2: {
        _0 = const 2_i32;
        goto -> bb3;
    }

    bb3: {
        StorageDead(_1);
        return;
    }
}

const <impl at ui/consts/control-flow/feature-gate-const-if-match.rs:56:1: 56:16>::IF: i32 = {
    let mut _0: i32;
    let mut _1: bool;

    bb0: {
        StorageLive(_1);
        _1 = const true;
        switchInt(move _1) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _0 = const 5_i32;
        goto -> bb3;
    }

    bb2: {
        _0 = const 6_i32;
        goto -> bb3;
    }

    bb3: {
        StorageDead(_1);
        return;
    }
}

const <impl at ui/consts/control-flow/feature-gate-const-if-match.rs:56:1: 56:16>::IF_LET: i32 = {
    let mut _0: i32;
    let mut _1: std::option::Option<bool>;
    let mut _2: isize;
    scope 1 {
    }

    bb0: {
        StorageLive(_1);
        _1 = Option::<bool>::None;
        _2 = discriminant(_1);
        switchInt(move _2) -> [1: bb1, otherwise: bb3];
    }

    bb1: {
        switchInt(((_1 as Some).0: bool)) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _0 = const 5_i32;
        goto -> bb4;
    }

    bb3: {
        _0 = const 6_i32;
        goto -> bb4;
    }

    bb4: {
        StorageDead(_1);
        return;
    }
}

const <impl at ui/consts/control-flow/feature-gate-const-if-match.rs:56:1: 56:16>::MATCH: i32 = {
    let mut _0: i32;
    let mut _1: i32;

    bb0: {
        StorageLive(_1);
        _1 = const 0_i32;
        switchInt(_1) -> [1: bb2, otherwise: bb1];
    }

    bb1: {
        _0 = const 0_i32;
        goto -> bb3;
    }

    bb2: {
        _0 = const 2_i32;
        goto -> bb3;
    }

    bb3: {
        StorageDead(_1);
        return;
    }
}

fn non_const_outside() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn const_inside(_1: bool) -> i32 {
    debug y => _1;
    let mut _0: i32;
    let _2: i32;
    let mut _4: std::option::Option<i32>;
    let mut _5: i32;
    let mut _6: isize;
    scope 1 {
        debug x => _2;
        let _3: i32;
        scope 2 {
            debug x => _3;
            scope 3 {
                debug x => _7;
                let _7: i32;
            }
        }
    }

    bb0: {
        switchInt(_1) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _2 = const 0_i32;
        goto -> bb3;
    }

    bb2: {
        _2 = const 1_i32;
        goto -> bb3;
    }

    bb3: {
        switchInt(_2) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _3 = const 0_i32;
        goto -> bb6;
    }

    bb5: {
        _3 = const 1_i32;
        goto -> bb6;
    }

    bb6: {
        _5 = _3;
        _4 = Option::<i32>::Some(move _5);
        _6 = discriminant(_4);
        switchInt(move _6) -> [1: bb7, otherwise: bb8];
    }

    bb7: {
        _7 = ((_4 as Some).0: i32);
        _0 = _7;
        goto -> bb9;
    }

    bb8: {
        _0 = const 1_i32;
        goto -> bb9;
    }

    bb9: {
        return;
    }
}

// MIR FOR CTFE
fn const_inside(_1: bool) -> i32 {
    debug y => _1;
    let mut _0: i32;
    let _2: i32;
    let mut _3: bool;
    let mut _5: std::option::Option<i32>;
    let mut _6: i32;
    let mut _7: isize;
    scope 1 {
        debug x => _2;
        let _4: i32;
        scope 2 {
            debug x => _4;
            scope 3 {
                debug x => _8;
                let _8: i32;
            }
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = _1;
        switchInt(move _3) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _2 = const 0_i32;
        goto -> bb3;
    }

    bb2: {
        _2 = const 1_i32;
        goto -> bb3;
    }

    bb3: {
        StorageDead(_3);
        StorageLive(_4);
        switchInt(_2) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _4 = const 0_i32;
        goto -> bb6;
    }

    bb5: {
        _4 = const 1_i32;
        goto -> bb6;
    }

    bb6: {
        StorageLive(_5);
        StorageLive(_6);
        _6 = _4;
        _5 = Option::<i32>::Some(move _6);
        StorageDead(_6);
        _7 = discriminant(_5);
        switchInt(move _7) -> [1: bb7, otherwise: bb8];
    }

    bb7: {
        StorageLive(_8);
        _8 = ((_5 as Some).0: i32);
        _0 = _8;
        StorageDead(_8);
        goto -> bb9;
    }

    bb8: {
        _0 = const 1_i32;
        goto -> bb9;
    }

    bb9: {
        StorageDead(_4);
        StorageDead(_2);
        StorageDead(_5);
        return;
    }
}

fn const_outside() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

// MIR FOR CTFE
fn const_outside() -> () {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn non_const_inside(_1: bool) -> i32 {
    debug y => _1;
    let mut _0: i32;
    let _2: i32;
    let mut _4: std::option::Option<i32>;
    let mut _5: i32;
    let mut _6: isize;
    scope 1 {
        debug x => _2;
        let _3: i32;
        scope 2 {
            debug x => _3;
            scope 3 {
                debug x => _7;
                let _7: i32;
            }
        }
    }

    bb0: {
        switchInt(_1) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _2 = const 0_i32;
        goto -> bb3;
    }

    bb2: {
        _2 = const 1_i32;
        goto -> bb3;
    }

    bb3: {
        switchInt(_2) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _3 = const 0_i32;
        goto -> bb6;
    }

    bb5: {
        _3 = const 1_i32;
        goto -> bb6;
    }

    bb6: {
        _5 = _3;
        _4 = Option::<i32>::Some(move _5);
        _6 = discriminant(_4);
        switchInt(move _6) -> [1: bb7, otherwise: bb8];
    }

    bb7: {
        _7 = ((_4 as Some).0: i32);
        _0 = _7;
        goto -> bb9;
    }

    bb8: {
        _0 = const 1_i32;
        goto -> bb9;
    }

    bb9: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;
    let _1: i32;
    let mut _2: bool;
    let mut _4: std::option::Option<usize>;
    let mut _5: usize;
    let mut _6: isize;
    scope 1 {
        debug x => _1;
        let _3: usize;
        scope 2 {
            debug x => _3;
            scope 3 {
                debug x => _7;
                let _7: usize;
            }
        }
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const false;
        switchInt(move _2) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _1 = const 0_i32;
        goto -> bb3;
    }

    bb2: {
        _1 = const 1_i32;
        goto -> bb3;
    }

    bb3: {
        StorageDead(_2);
        StorageLive(_3);
        switchInt(_1) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _3 = const 0_usize;
        goto -> bb6;
    }

    bb5: {
        _3 = const 1_usize;
        goto -> bb6;
    }

    bb6: {
        StorageLive(_4);
        StorageLive(_5);
        _5 = _3;
        _4 = Option::<usize>::Some(move _5);
        StorageDead(_5);
        _6 = discriminant(_4);
        switchInt(move _6) -> [1: bb7, otherwise: bb8];
    }

    bb7: {
        StorageLive(_7);
        _7 = ((_4 as Some).0: usize);
        _0 = _7;
        StorageDead(_7);
        goto -> bb9;
    }

    bb8: {
        _0 = const 1_usize;
        goto -> bb9;
    }

    bb9: {
        StorageDead(_3);
        StorageDead(_1);
        StorageDead(_4);
        return;
    }
}
