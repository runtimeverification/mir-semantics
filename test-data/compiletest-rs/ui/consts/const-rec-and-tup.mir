// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static x: (i32, i32) = {
    let mut _0: (i32, i32);

    bb0: {
        _0 = (const -287375139_i32, const -904811746_i32);
        return;
    }
}

static y: AnotherPair = {
    let mut _0: AnotherPair;
    let mut _1: (i64, i64);
    let mut _2: Pair;

    bb0: {
        StorageLive(_1);
        _1 = (const -1085102592571150096_i64, const -6076574518398440533_i64);
        StorageLive(_2);
        _2 = Pair { a: const 3.1415926535897931f64, b: const 2.7182818284590451f64 };
        _0 = AnotherPair { x: move _1, y: move _2 };
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: i64;
    let mut _2: &AnotherPair;
    let mut _3: (&i64, &i64);
    let mut _4: &i64;
    let mut _5: &i64;
    let _6: i64;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: i64;
    let mut _12: i64;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let _16: ();
    let mut _17: std::fmt::Arguments<'_>;
    let mut _18: &[&str];
    let _19: &[&str; 2];
    let _20: [&str; 2];
    let mut _21: &[core::fmt::rt::Argument<'_>];
    let _22: &[core::fmt::rt::Argument<'_>; 1];
    let _23: [core::fmt::rt::Argument<'_>; 1];
    let mut _24: core::fmt::rt::Argument<'_>;
    let _25: &i64;
    let mut _26: &[core::fmt::rt::Placeholder];
    let _27: &[core::fmt::rt::Placeholder; 1];
    let _28: [core::fmt::rt::Placeholder; 1];
    let mut _29: core::fmt::rt::Placeholder;
    let mut _30: core::fmt::rt::Alignment;
    let mut _31: core::fmt::rt::Count;
    let mut _32: core::fmt::rt::Count;
    let mut _33: core::fmt::rt::UnsafeArg;
    scope 1 {
        debug p => _1;
        let _7: &i64;
        let _8: &i64;
        scope 2 {
            debug left_val => _7;
            debug right_val => _8;
            let _13: core::panicking::AssertKind;
            scope 3 {
                debug kind => _13;
            }
        }
        scope 4 {
        }
    }

    bb0: {
        _2 = const {alloc1: &AnotherPair};
        _1 = (((*_2).0: (i64, i64)).0: i64);
        _4 = &_1;
        _6 = const -1085102592571150096_i64;
        _5 = &_6;
        _3 = (move _4, move _5);
        _7 = (_3.0: &i64);
        _8 = (_3.1: &i64);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<i64, i64>(move _13, _7, _8, move _15);
    }

    bb2: {
        _20 = [const "", const "\n"];
        _19 = &_20;
        _18 = _19 as &[&str] (Pointer(Unsize));
        _25 = &_1;
        _24 = core::fmt::rt::Argument::<'_>::new_lower_hex::<i64>(_25) -> bb3;
    }

    bb3: {
        _23 = [move _24];
        _22 = &_23;
        _21 = _22 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _30 = core::fmt::rt::Alignment::Unknown;
        _31 = core::fmt::rt::Count::Implied;
        _32 = core::fmt::rt::Count::Implied;
        _29 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _30, const 4_u32, move _31, move _32) -> bb4;
    }

    bb4: {
        _28 = [move _29];
        _27 = &_28;
        _26 = _27 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _33 = core::fmt::rt::UnsafeArg::new() -> bb5;
    }

    bb5: {
        _17 = Arguments::<'_>::new_v1_formatted(move _18, move _21, move _26, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> bb6;
    }

    bb6: {
        _16 = _print(move _17) -> bb7;
    }

    bb7: {
        return;
    }
}

alloc1 (static: y, size: 32, align: 8) {
    0x00 │ f0 f0 f0 f0 f0 f0 f0 f0 ab ab ab ab ab ab ab ab │ ................
    0x10 │ 18 2d 44 54 fb 21 09 40 69 57 14 8b 0a bf 05 40 │ .-DT.!.@iW.....@
}
