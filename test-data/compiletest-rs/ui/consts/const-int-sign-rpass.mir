// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const NEGATIVE_A: bool = {
    let mut _0: bool;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i32>::is_negative(const -10_i32) -> bb1;
    }

    bb1: {
        return;
    }
}

const NEGATIVE_B: bool = {
    let mut _0: bool;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i32>::is_negative(const 10_i32) -> bb1;
    }

    bb1: {
        return;
    }
}

const POSITIVE_A: bool = {
    let mut _0: bool;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i32>::is_positive(const -10_i32) -> bb1;
    }

    bb1: {
        return;
    }
}

const POSITIVE_B: bool = {
    let mut _0: bool;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i32>::is_positive(const 10_i32) -> bb1;
    }

    bb1: {
        return;
    }
}

const SIGNUM_POS: i32 = {
    let mut _0: i32;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i32>::signum(const 10_i32) -> bb1;
    }

    bb1: {
        return;
    }
}

const SIGNUM_NIL: i32 = {
    let mut _0: i32;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i32>::signum(const 0_i32) -> bb1;
    }

    bb1: {
        return;
    }
}

const SIGNUM_NEG: i32 = {
    let mut _0: i32;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i32>::signum(const -42_i32) -> bb1;
    }

    bb1: {
        return;
    }
}

const ABS_A: i32 = {
    let mut _0: i32;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i32>::abs(const 10_i32) -> bb1;
    }

    bb1: {
        return;
    }
}

const ABS_B: i32 = {
    let mut _0: i32;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i32>::abs(const -10_i32) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: !;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: !;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: !;
    let mut _9: bool;
    let mut _10: !;
    let mut _11: (&i32, &i32);
    let mut _12: &i32;
    let _13: i32;
    let mut _14: &i32;
    let _15: i32;
    let _16: &i32;
    let _17: &i32;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: i32;
    let mut _21: i32;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: (&i32, &i32);
    let mut _26: &i32;
    let _27: i32;
    let mut _28: &i32;
    let _29: i32;
    let _30: &i32;
    let _31: &i32;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: i32;
    let mut _35: i32;
    let _37: !;
    let mut _38: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _39: (&i32, &i32);
    let mut _40: &i32;
    let _41: i32;
    let mut _42: &i32;
    let _43: i32;
    let _44: &i32;
    let _45: &i32;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: i32;
    let mut _49: i32;
    let _51: !;
    let mut _52: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _53: (&i32, &i32);
    let mut _54: &i32;
    let _55: i32;
    let mut _56: &i32;
    let _57: i32;
    let _58: &i32;
    let _59: &i32;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: i32;
    let mut _63: i32;
    let _65: !;
    let mut _66: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _67: (&i32, &i32);
    let mut _68: &i32;
    let _69: i32;
    let mut _70: &i32;
    let _71: i32;
    let _72: &i32;
    let _73: &i32;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: i32;
    let mut _77: i32;
    let _79: !;
    let mut _80: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _16;
        debug right_val => _17;
        let _22: core::panicking::AssertKind;
        scope 2 {
            debug kind => _22;
        }
    }
    scope 3 {
        debug left_val => _30;
        debug right_val => _31;
        let _36: core::panicking::AssertKind;
        scope 4 {
            debug kind => _36;
        }
    }
    scope 5 {
        debug left_val => _44;
        debug right_val => _45;
        let _50: core::panicking::AssertKind;
        scope 6 {
            debug kind => _50;
        }
    }
    scope 7 {
        debug left_val => _58;
        debug right_val => _59;
        let _64: core::panicking::AssertKind;
        scope 8 {
            debug kind => _64;
        }
    }
    scope 9 {
        debug left_val => _72;
        debug right_val => _73;
        let _78: core::panicking::AssertKind;
        scope 10 {
            debug kind => _78;
        }
    }

    bb0: {
        _1 = Not(const _);
        switchInt(move _1) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _2 = core::panicking::panic(const "assertion failed: NEGATIVE_A");
    }

    bb2: {
        _4 = Not(const _);
        _3 = Not(move _4);
        switchInt(move _3) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _5 = core::panicking::panic(const "assertion failed: !NEGATIVE_B");
    }

    bb4: {
        _7 = Not(const _);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _8 = core::panicking::panic(const "assertion failed: !POSITIVE_A");
    }

    bb6: {
        _9 = Not(const _);
        switchInt(move _9) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _10 = core::panicking::panic(const "assertion failed: POSITIVE_B");
    }

    bb8: {
        _13 = const _;
        _12 = &_13;
        _15 = const 1_i32;
        _14 = &_15;
        _11 = (move _12, move _14);
        _16 = (_11.0: &i32);
        _17 = (_11.1: &i32);
        _20 = (*_16);
        _21 = (*_17);
        _19 = Eq(move _20, move _21);
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<i32, i32>(move _22, _16, _17, move _24);
    }

    bb10: {
        _27 = const _;
        _26 = &_27;
        _29 = const 0_i32;
        _28 = &_29;
        _25 = (move _26, move _28);
        _30 = (_25.0: &i32);
        _31 = (_25.1: &i32);
        _34 = (*_30);
        _35 = (*_31);
        _33 = Eq(move _34, move _35);
        _32 = Not(move _33);
        switchInt(move _32) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _36 = core::panicking::AssertKind::Eq;
        _38 = Option::<Arguments<'_>>::None;
        _37 = core::panicking::assert_failed::<i32, i32>(move _36, _30, _31, move _38);
    }

    bb12: {
        _41 = const _;
        _40 = &_41;
        _43 = const -1_i32;
        _42 = &_43;
        _39 = (move _40, move _42);
        _44 = (_39.0: &i32);
        _45 = (_39.1: &i32);
        _48 = (*_44);
        _49 = (*_45);
        _47 = Eq(move _48, move _49);
        _46 = Not(move _47);
        switchInt(move _46) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _50 = core::panicking::AssertKind::Eq;
        _52 = Option::<Arguments<'_>>::None;
        _51 = core::panicking::assert_failed::<i32, i32>(move _50, _44, _45, move _52);
    }

    bb14: {
        _55 = const _;
        _54 = &_55;
        _57 = const 10_i32;
        _56 = &_57;
        _53 = (move _54, move _56);
        _58 = (_53.0: &i32);
        _59 = (_53.1: &i32);
        _62 = (*_58);
        _63 = (*_59);
        _61 = Eq(move _62, move _63);
        _60 = Not(move _61);
        switchInt(move _60) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _64 = core::panicking::AssertKind::Eq;
        _66 = Option::<Arguments<'_>>::None;
        _65 = core::panicking::assert_failed::<i32, i32>(move _64, _58, _59, move _66);
    }

    bb16: {
        _69 = const _;
        _68 = &_69;
        _71 = const 10_i32;
        _70 = &_71;
        _67 = (move _68, move _70);
        _72 = (_67.0: &i32);
        _73 = (_67.1: &i32);
        _76 = (*_72);
        _77 = (*_73);
        _75 = Eq(move _76, move _77);
        _74 = Not(move _75);
        switchInt(move _74) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _78 = core::panicking::AssertKind::Eq;
        _80 = Option::<Arguments<'_>>::None;
        _79 = core::panicking::assert_failed::<i32, i32>(move _78, _72, _73, move _80);
    }

    bb18: {
        return;
    }
}
