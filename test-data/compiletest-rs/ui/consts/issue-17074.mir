// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static X2: u64 = {
    let mut _0: u64;
    let mut _1: u16;

    bb0: {
        StorageLive(_1);
        _1 = Not(const 0_u16);
        _0 = move _1 as u64 (IntToInt);
        StorageDead(_1);
        return;
    }
}

static Y2: u64 = {
    let mut _0: u64;
    let mut _1: u32;

    bb0: {
        StorageLive(_1);
        _1 = Not(const 0_u32);
        _0 = move _1 as u64 (IntToInt);
        StorageDead(_1);
        return;
    }
}

const X: u64 = {
    let mut _0: u64;
    let mut _1: u16;

    bb0: {
        StorageLive(_1);
        _1 = Not(const 0_u16);
        _0 = move _1 as u64 (IntToInt);
        StorageDead(_1);
        return;
    }
}

const Y: u64 = {
    let mut _0: u64;
    let mut _1: u32;

    bb0: {
        StorageLive(_1);
        _1 = Not(const 0_u32);
        _0 = move _1 as u64 (IntToInt);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&i32, &i32);
    let mut _2: &i32;
    let _3: i32;
    let mut _4: u64;
    let mut _5: !;
    let mut _6: !;
    let mut _7: &i32;
    let _8: i32;
    let _9: &i32;
    let _10: &i32;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: i32;
    let mut _14: i32;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _9;
        debug right_val => _10;
        let _15: core::panicking::AssertKind;
        scope 2 {
            debug kind => _15;
        }
    }

    bb0: {
        _4 = const 1_u64;
        switchInt(_4) -> [65535: bb2, 4294967295: bb3, otherwise: bb1];
    }

    bb1: {
        _3 = const 1_i32;
        _2 = &_3;
        _8 = const 1_i32;
        _7 = &_8;
        _1 = (move _2, move _7);
        _9 = (_1.0: &i32);
        _10 = (_1.1: &i32);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb5, otherwise: bb4];
    }

    bb2: {
        _5 = core::panicking::panic(const "internal error: entered unreachable code");
    }

    bb3: {
        _6 = core::panicking::panic(const "internal error: entered unreachable code");
    }

    bb4: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<i32, i32>(move _15, _9, _10, move _17);
    }

    bb5: {
        return;
    }
}
