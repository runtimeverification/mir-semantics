// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const _: () = {
    let mut _0: ();

    bb0: {
        _0 = ();
        return;
    }
}

const _: i32 = {
    let mut _0: i32;

    bb0: {
        _0 = const 42_i32;
        return;
    }
}

const _: Str = {
    let mut _0: Str;

    bb0: {
        _0 = Str;
        return;
    }
}

const _: () = {
    let mut _0: ();
    let mut _1: _::ImplementsTrait<Str>;
    let mut _2: std::marker::PhantomData<Str>;
    scope 1 {
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = PhantomData::<Str>;
        _1 = _::ImplementsTrait::<Str>(move _2);
        StorageDead(_2);
        StorageDead(_1);
        _0 = ();
        return;
    }
}

const _: () = {
    let mut _0: ();
    let mut _1: _::ImplementsTrait<Str>;
    let mut _2: std::marker::PhantomData<Str>;
    scope 1 {
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = PhantomData::<Str>;
        _1 = _::ImplementsTrait::<Str>(move _2);
        StorageDead(_2);
        StorageDead(_1);
        _0 = ();
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

const main::_: () = {
    let mut _0: ();
    let mut _1: main::_::ImplementsTrait<Str>;
    let mut _2: std::marker::PhantomData<Str>;
    scope 1 {
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = PhantomData::<Str>;
        _1 = main::_::ImplementsTrait::<Str>(move _2);
        StorageDead(_2);
        StorageDead(_1);
        _0 = ();
        return;
    }
}

const main::_: () = {
    let mut _0: ();
    let mut _1: main::_::ImplementsTrait<Str>;
    let mut _2: std::marker::PhantomData<Str>;
    scope 1 {
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = PhantomData::<Str>;
        _1 = main::_::ImplementsTrait::<Str>(move _2);
        StorageDead(_2);
        StorageDead(_1);
        _0 = ();
        return;
    }
}

fn _::ImplementsTrait(_1: PhantomData<T>) -> _::ImplementsTrait<T> {
    let mut _0: _::ImplementsTrait<T>;

    bb0: {
        _0 = _::ImplementsTrait::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn _::ImplementsTrait(_1: PhantomData<T>) -> _::ImplementsTrait<T> {
    let mut _0: _::ImplementsTrait<T>;

    bb0: {
        _0 = _::ImplementsTrait::<T>(move _1);
        return;
    }
}

fn _::ImplementsTrait(_1: PhantomData<T>) -> _::ImplementsTrait<T> {
    let mut _0: _::ImplementsTrait<T>;

    bb0: {
        _0 = _::ImplementsTrait::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn _::ImplementsTrait(_1: PhantomData<T>) -> _::ImplementsTrait<T> {
    let mut _0: _::ImplementsTrait<T>;

    bb0: {
        _0 = _::ImplementsTrait::<T>(move _1);
        return;
    }
}

fn main::_::ImplementsTrait(_1: PhantomData<T>) -> main::_::ImplementsTrait<T> {
    let mut _0: main::_::ImplementsTrait<T>;

    bb0: {
        _0 = main::_::ImplementsTrait::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn main::_::ImplementsTrait(_1: PhantomData<T>) -> main::_::ImplementsTrait<T> {
    let mut _0: main::_::ImplementsTrait<T>;

    bb0: {
        _0 = main::_::ImplementsTrait::<T>(move _1);
        return;
    }
}

fn main::_::ImplementsTrait(_1: PhantomData<T>) -> main::_::ImplementsTrait<T> {
    let mut _0: main::_::ImplementsTrait<T>;

    bb0: {
        _0 = main::_::ImplementsTrait::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn main::_::ImplementsTrait(_1: PhantomData<T>) -> main::_::ImplementsTrait<T> {
    let mut _0: main::_::ImplementsTrait<T>;

    bb0: {
        _0 = main::_::ImplementsTrait::<T>(move _1);
        return;
    }
}
