// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f(_1: isize, _2: F) -> isize {
    debug i => _1;
    debug f => _2;
    let mut _0: isize;
    let mut _3: (isize,);

    bb0: {
        _3 = (_1,);
        _0 = <F as FnOnce<(isize,)>>::call_once(move _2, move _3) -> bb1;
    }

    bb1: {
        return;
    }
}

fn g(_1: G) -> () {
    debug _g => _1;
    let mut _0: ();

    bb0: {
        drop(_1) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&isize, &isize);
    let mut _2: &isize;
    let _3: isize;
    let mut _4: &isize;
    let _5: isize;
    let _6: &isize;
    let _7: &isize;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: isize;
    let mut _11: isize;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let _15: ();
    let mut _16: (&isize, &isize);
    let mut _17: &isize;
    let _18: isize;
    let mut _19: &isize;
    let _20: isize;
    let _21: &isize;
    let _22: &isize;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: isize;
    let mut _26: isize;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    let _30: ();
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }
    scope 3 {
        debug left_val => _21;
        debug right_val => _22;
        let _27: core::panicking::AssertKind;
        scope 4 {
            debug kind => _27;
        }
    }

    bb0: {
        _3 = f::<[closure@ui/newlambdas.rs:10:22: 10:25]>(const 10_isize, const ZeroSized: [closure@ui/newlambdas.rs:10:22: 10:25]) -> bb1;
    }

    bb1: {
        _2 = &_3;
        _5 = const 10_isize;
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &isize);
        _7 = (_1.1: &isize);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<isize, isize>(move _12, _6, _7, move _14);
    }

    bb3: {
        _15 = g::<[closure@ui/newlambdas.rs:11:7: 11:9]>(const ZeroSized: [closure@ui/newlambdas.rs:11:7: 11:9]) -> bb4;
    }

    bb4: {
        _18 = f::<[closure@ui/newlambdas.rs:12:22: 12:25]>(const 10_isize, const ZeroSized: [closure@ui/newlambdas.rs:12:22: 12:25]) -> bb5;
    }

    bb5: {
        _17 = &_18;
        _20 = const 10_isize;
        _19 = &_20;
        _16 = (move _17, move _19);
        _21 = (_16.0: &isize);
        _22 = (_16.1: &isize);
        _25 = (*_21);
        _26 = (*_22);
        _24 = Eq(move _25, move _26);
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<isize, isize>(move _27, _21, _22, move _29);
    }

    bb7: {
        _30 = g::<[closure@ui/newlambdas.rs:13:7: 13:9]>(const ZeroSized: [closure@ui/newlambdas.rs:13:7: 13:9]) -> bb8;
    }

    bb8: {
        return;
    }
}

fn main::{closure#2}(_1: [closure@ui/newlambdas.rs:10:22: 10:25], _2: isize) -> isize {
    debug a => _2;
    let mut _0: isize;

    bb0: {
        _0 = _2;
        return;
    }
}

fn main::{closure#0}(_1: [closure@ui/newlambdas.rs:11:7: 11:9]) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main::{closure#3}(_1: [closure@ui/newlambdas.rs:12:22: 12:25], _2: isize) -> isize {
    debug a => _2;
    let mut _0: isize;

    bb0: {
        _0 = _2;
        return;
    }
}

fn main::{closure#1}(_1: [closure@ui/newlambdas.rs:13:7: 13:9]) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
