// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Enum::Unit::{constant#0}: u8 = {
    let mut _0: u8;

    bb0: {
        _0 = const 3_u8;
        return;
    }
}

Enum::Tuple::{constant#0}: u8 = {
    let mut _0: u8;

    bb0: {
        _0 = const 2_u8;
        return;
    }
}

Enum::Struct::{constant#0}: u8 = {
    let mut _0: u8;

    bb0: {
        _0 = const 1_u8;
        return;
    }
}

fn <impl at ui/enum-discriminant/arbitrary_enum_discriminant.rs:19:1: 19:10>::tag(_1: &Enum) -> u8 {
    debug self => _1;
    let mut _0: u8;
    let mut _2: *const u8;
    let mut _3: *const Enum;

    bb0: {
        _3 = &raw const (*_1);
        _2 = move _3 as *const u8 (PtrToPtr);
        _0 = (*_2);
        return;
    }
}

// MIR FOR CTFE
fn <impl at ui/enum-discriminant/arbitrary_enum_discriminant.rs:19:1: 19:10>::tag(_1: &Enum) -> u8 {
    debug self => _1;
    let mut _0: u8;
    let mut _2: *const u8;
    let mut _3: *const Enum;

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = &raw const (*_1);
        _2 = move _3 as *const u8 (PtrToPtr);
        StorageDead(_3);
        _0 = (*_2);
        StorageDead(_2);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&u8, &u8);
    let mut _2: &u8;
    let _3: u8;
    let mut _4: &u8;
    let _5: u8;
    let mut _6: &Enum;
    let _7: Enum;
    let _8: &u8;
    let _9: &u8;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: u8;
    let mut _13: u8;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&u8, &u8);
    let mut _18: &u8;
    let _19: u8;
    let mut _20: &u8;
    let _21: u8;
    let mut _22: &Enum;
    let _23: Enum;
    let _24: &u8;
    let _25: &u8;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: u8;
    let mut _29: u8;
    let _31: !;
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _33: (&u8, &u8);
    let mut _34: &u8;
    let _35: u8;
    let mut _36: &u8;
    let _37: u8;
    let mut _38: &Enum;
    let _39: Enum;
    let _40: &u8;
    let _41: &u8;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: u8;
    let mut _45: u8;
    let _47: !;
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _49: (&u8, &u8);
    let mut _50: &u8;
    let _51: u8;
    let mut _52: &u8;
    let _53: u8;
    let _54: &u8;
    let _55: &u8;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: u8;
    let mut _59: u8;
    let _61: !;
    let mut _62: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _63: (&u8, &u8);
    let mut _64: &u8;
    let _65: u8;
    let mut _66: &u8;
    let _67: u8;
    let _68: &u8;
    let _69: &u8;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: u8;
    let mut _73: u8;
    let _75: !;
    let mut _76: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _77: (&u8, &u8);
    let mut _78: &u8;
    let _79: u8;
    let mut _80: &u8;
    let _81: u8;
    let _82: &u8;
    let _83: &u8;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: u8;
    let mut _87: u8;
    let _89: !;
    let mut _90: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
    }
    scope 2 {
        debug left_val => _8;
        debug right_val => _9;
        let _14: core::panicking::AssertKind;
        scope 3 {
            debug kind => _14;
        }
    }
    scope 4 {
    }
    scope 5 {
        debug left_val => _24;
        debug right_val => _25;
        let _30: core::panicking::AssertKind;
        scope 6 {
            debug kind => _30;
        }
    }
    scope 7 {
    }
    scope 8 {
        debug left_val => _40;
        debug right_val => _41;
        let _46: core::panicking::AssertKind;
        scope 9 {
            debug kind => _46;
        }
    }
    scope 10 {
        debug left_val => _54;
        debug right_val => _55;
        let _60: core::panicking::AssertKind;
        scope 11 {
            debug kind => _60;
        }
    }
    scope 12 {
        debug left_val => _68;
        debug right_val => _69;
        let _74: core::panicking::AssertKind;
        scope 13 {
            debug kind => _74;
        }
    }
    scope 14 {
        debug left_val => _82;
        debug right_val => _83;
        let _88: core::panicking::AssertKind;
        scope 15 {
            debug kind => _88;
        }
    }

    bb0: {
        _3 = const 3_u8;
        _2 = &_3;
        _7 = test::black_box::<Enum>(const _) -> bb1;
    }

    bb1: {
        _6 = &_7;
        _5 = Enum::tag(move _6) -> bb2;
    }

    bb2: {
        _4 = &_5;
        _1 = (move _2, move _4);
        _8 = (_1.0: &u8);
        _9 = (_1.1: &u8);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<u8, u8>(move _14, _8, _9, move _16);
    }

    bb4: {
        _19 = const 2_u8;
        _18 = &_19;
        _23 = test::black_box::<Enum>(const _) -> bb5;
    }

    bb5: {
        _22 = &_23;
        _21 = Enum::tag(move _22) -> bb6;
    }

    bb6: {
        _20 = &_21;
        _17 = (move _18, move _20);
        _24 = (_17.0: &u8);
        _25 = (_17.1: &u8);
        _28 = (*_24);
        _29 = (*_25);
        _27 = Eq(move _28, move _29);
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _30 = core::panicking::AssertKind::Eq;
        _32 = Option::<Arguments<'_>>::None;
        _31 = core::panicking::assert_failed::<u8, u8>(move _30, _24, _25, move _32);
    }

    bb8: {
        _35 = const 1_u8;
        _34 = &_35;
        _39 = test::black_box::<Enum>(const _) -> bb9;
    }

    bb9: {
        _38 = &_39;
        _37 = Enum::tag(move _38) -> bb10;
    }

    bb10: {
        _36 = &_37;
        _33 = (move _34, move _36);
        _40 = (_33.0: &u8);
        _41 = (_33.1: &u8);
        _44 = (*_40);
        _45 = (*_41);
        _43 = Eq(move _44, move _45);
        _42 = Not(move _43);
        switchInt(move _42) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _46 = core::panicking::AssertKind::Eq;
        _48 = Option::<Arguments<'_>>::None;
        _47 = core::panicking::assert_failed::<u8, u8>(move _46, _40, _41, move _48);
    }

    bb12: {
        _51 = const 3_u8;
        _50 = &_51;
        _53 = const _;
        _52 = &_53;
        _49 = (move _50, move _52);
        _54 = (_49.0: &u8);
        _55 = (_49.1: &u8);
        _58 = (*_54);
        _59 = (*_55);
        _57 = Eq(move _58, move _59);
        _56 = Not(move _57);
        switchInt(move _56) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _60 = core::panicking::AssertKind::Eq;
        _62 = Option::<Arguments<'_>>::None;
        _61 = core::panicking::assert_failed::<u8, u8>(move _60, _54, _55, move _62);
    }

    bb14: {
        _65 = const 2_u8;
        _64 = &_65;
        _67 = const _;
        _66 = &_67;
        _63 = (move _64, move _66);
        _68 = (_63.0: &u8);
        _69 = (_63.1: &u8);
        _72 = (*_68);
        _73 = (*_69);
        _71 = Eq(move _72, move _73);
        _70 = Not(move _71);
        switchInt(move _70) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _74 = core::panicking::AssertKind::Eq;
        _76 = Option::<Arguments<'_>>::None;
        _75 = core::panicking::assert_failed::<u8, u8>(move _74, _68, _69, move _76);
    }

    bb16: {
        _79 = const 1_u8;
        _78 = &_79;
        _81 = const _;
        _80 = &_81;
        _77 = (move _78, move _80);
        _82 = (_77.0: &u8);
        _83 = (_77.1: &u8);
        _86 = (*_82);
        _87 = (*_83);
        _85 = Eq(move _86, move _87);
        _84 = Not(move _85);
        switchInt(move _84) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _88 = core::panicking::AssertKind::Eq;
        _90 = Option::<Arguments<'_>>::None;
        _89 = core::panicking::assert_failed::<u8, u8>(move _88, _82, _83, move _90);
    }

    bb18: {
        return;
    }
}

const UNIT: Enum = {
    let mut _0: Enum;

    bb0: {
        _0 = Enum::Unit;
        return;
    }
}

const TUPLE: Enum = {
    let mut _0: Enum;

    bb0: {
        _0 = Enum::Tuple(const 5_u16);
        return;
    }
}

const STRUCT: Enum = {
    let mut _0: Enum;

    bb0: {
        _0 = Enum::Struct { a: const 7_u8, b: const 11_u16 };
        return;
    }
}

const UNIT_TAG: u8 = {
    let mut _0: u8;
    let mut _1: &Enum;
    let _2: Enum;
    scope 1 {
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const _;
        _1 = &_2;
        ConstEvalCounter;
        _0 = Enum::tag(move _1) -> bb1;
    }

    bb1: {
        StorageDead(_1);
        StorageDead(_2);
        return;
    }
}

const TUPLE_TAG: u8 = {
    let mut _0: u8;
    let mut _1: &Enum;
    let _2: Enum;
    scope 1 {
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const _;
        _1 = &_2;
        ConstEvalCounter;
        _0 = Enum::tag(move _1) -> bb1;
    }

    bb1: {
        StorageDead(_1);
        StorageDead(_2);
        return;
    }
}

const STRUCT_TAG: u8 = {
    let mut _0: u8;
    let mut _1: &Enum;
    let _2: Enum;
    scope 1 {
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const _;
        _1 = &_2;
        ConstEvalCounter;
        _0 = Enum::tag(move _1) -> bb1;
    }

    bb1: {
        StorageDead(_1);
        StorageDead(_2);
        return;
    }
}

fn Enum::Tuple(_1: u16) -> Enum {
    let mut _0: Enum;

    bb0: {
        _0 = Enum::Tuple(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Enum::Tuple(_1: u16) -> Enum {
    let mut _0: Enum;

    bb0: {
        _0 = Enum::Tuple(move _1);
        return;
    }
}
