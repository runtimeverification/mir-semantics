// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn make_b() -> Enum {
    let mut _0: Enum;

    bb0: {
        _0 = Enum::VariantB;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&i8, &i8);
    let mut _2: &i8;
    let _3: i8;
    let mut _4: &i8;
    let _5: i8;
    let _6: Enum;
    let mut _7: i8;
    let mut _8: u8;
    let mut _9: bool;
    let _10: &i8;
    let _11: &i8;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: i8;
    let mut _15: i8;
    let _17: !;
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _19: (&u8, &u8);
    let mut _20: &u8;
    let _21: u8;
    let mut _22: &u8;
    let _23: u8;
    let _24: Enum;
    let mut _25: i8;
    let mut _26: u8;
    let mut _27: bool;
    let _28: &u8;
    let _29: &u8;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: u8;
    let mut _33: u8;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _37: (&i32, &i32);
    let mut _38: &i32;
    let _39: i32;
    let mut _40: &i32;
    let _41: i32;
    let _42: Enum;
    let mut _43: i8;
    let mut _44: u8;
    let mut _45: bool;
    let _46: &i32;
    let _47: &i32;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: i32;
    let mut _51: i32;
    let _53: !;
    let mut _54: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _55: (&u32, &u32);
    let mut _56: &u32;
    let _57: u32;
    let mut _58: &u32;
    let _59: u32;
    let _60: Enum;
    let mut _61: i8;
    let mut _62: u8;
    let mut _63: bool;
    let _64: &u32;
    let _65: &u32;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: u32;
    let mut _69: u32;
    let _71: !;
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _73: (&i8, &i8);
    let mut _74: &i8;
    let _75: i8;
    let mut _76: &i8;
    let _77: i8;
    let _78: &Enum;
    let _79: Enum;
    let _80: &i8;
    let _81: &i8;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: i8;
    let mut _85: i8;
    let _87: !;
    let mut _88: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _10;
        debug right_val => _11;
        let _16: core::panicking::AssertKind;
        scope 2 {
            debug kind => _16;
        }
    }
    scope 3 {
        debug left_val => _28;
        debug right_val => _29;
        let _34: core::panicking::AssertKind;
        scope 4 {
            debug kind => _34;
        }
    }
    scope 5 {
        debug left_val => _46;
        debug right_val => _47;
        let _52: core::panicking::AssertKind;
        scope 6 {
            debug kind => _52;
        }
    }
    scope 7 {
        debug left_val => _64;
        debug right_val => _65;
        let _70: core::panicking::AssertKind;
        scope 8 {
            debug kind => _70;
        }
    }
    scope 9 {
        debug left_val => _80;
        debug right_val => _81;
        let _86: core::panicking::AssertKind;
        scope 10 {
            debug kind => _86;
        }
    }

    bb0: {
        _3 = const 1_i8;
        _2 = &_3;
        _6 = make_b() -> bb1;
    }

    bb1: {
        _7 = discriminant(_6);
        _8 = _7 as u8 (IntToInt);
        _9 = Le(_8, const 1_u8);
        assume(move _9);
        _5 = move _7;
        _4 = &_5;
        _1 = (move _2, move _4);
        _10 = (_1.0: &i8);
        _11 = (_1.1: &i8);
        _14 = (*_10);
        _15 = (*_11);
        _13 = Eq(move _14, move _15);
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _16 = core::panicking::AssertKind::Eq;
        _18 = Option::<Arguments<'_>>::None;
        _17 = core::panicking::assert_failed::<i8, i8>(move _16, _10, _11, move _18);
    }

    bb3: {
        _21 = const 1_u8;
        _20 = &_21;
        _24 = make_b() -> bb4;
    }

    bb4: {
        _25 = discriminant(_24);
        _26 = _25 as u8 (IntToInt);
        _27 = Le(_26, const 1_u8);
        assume(move _27);
        _23 = move _25 as u8 (IntToInt);
        _22 = &_23;
        _19 = (move _20, move _22);
        _28 = (_19.0: &u8);
        _29 = (_19.1: &u8);
        _32 = (*_28);
        _33 = (*_29);
        _31 = Eq(move _32, move _33);
        _30 = Not(move _31);
        switchInt(move _30) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = core::panicking::assert_failed::<u8, u8>(move _34, _28, _29, move _36);
    }

    bb6: {
        _39 = const 1_i32;
        _38 = &_39;
        _42 = make_b() -> bb7;
    }

    bb7: {
        _43 = discriminant(_42);
        _44 = _43 as u8 (IntToInt);
        _45 = Le(_44, const 1_u8);
        assume(move _45);
        _41 = move _43 as i32 (IntToInt);
        _40 = &_41;
        _37 = (move _38, move _40);
        _46 = (_37.0: &i32);
        _47 = (_37.1: &i32);
        _50 = (*_46);
        _51 = (*_47);
        _49 = Eq(move _50, move _51);
        _48 = Not(move _49);
        switchInt(move _48) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _52 = core::panicking::AssertKind::Eq;
        _54 = Option::<Arguments<'_>>::None;
        _53 = core::panicking::assert_failed::<i32, i32>(move _52, _46, _47, move _54);
    }

    bb9: {
        _57 = const 1_u32;
        _56 = &_57;
        _60 = make_b() -> bb10;
    }

    bb10: {
        _61 = discriminant(_60);
        _62 = _61 as u8 (IntToInt);
        _63 = Le(_62, const 1_u8);
        assume(move _63);
        _59 = move _61 as u32 (IntToInt);
        _58 = &_59;
        _55 = (move _56, move _58);
        _64 = (_55.0: &u32);
        _65 = (_55.1: &u32);
        _68 = (*_64);
        _69 = (*_65);
        _67 = Eq(move _68, move _69);
        _66 = Not(move _67);
        switchInt(move _66) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _70 = core::panicking::AssertKind::Eq;
        _72 = Option::<Arguments<'_>>::None;
        _71 = core::panicking::assert_failed::<u32, u32>(move _70, _64, _65, move _72);
    }

    bb12: {
        _75 = const 1_i8;
        _74 = &_75;
        _79 = make_b() -> bb13;
    }

    bb13: {
        _78 = &_79;
        _77 = discriminant((*_78));
        _76 = &_77;
        _73 = (move _74, move _76);
        _80 = (_73.0: &i8);
        _81 = (_73.1: &i8);
        _84 = (*_80);
        _85 = (*_81);
        _83 = Eq(move _84, move _85);
        _82 = Not(move _83);
        switchInt(move _82) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _86 = core::panicking::AssertKind::Eq;
        _88 = Option::<Arguments<'_>>::None;
        _87 = core::panicking::assert_failed::<i8, i8>(move _86, _80, _81, move _88);
    }

    bb15: {
        return;
    }
}
