// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
TransportErr::UnknownMethod::{constant#0}: i32 = {
    let mut _0: i32;

    bb0: {
        _0 = const -2_i32;
        return;
    }
}

fn some_match(_1: OpenResult) -> u8 {
    debug result => _1;
    let mut _0: u8;
    let mut _2: isize;

    bb0: {
        _2 = discriminant(_1);
        switchInt(move _2) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _0 = const 1_u8;
        goto -> bb3;
    }

    bb2: {
        _0 = const 0_u8;
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: OpenResult;
    let mut _2: (&u8, &u8);
    let mut _3: &u8;
    let _4: u8;
    let mut _5: &u8;
    let _6: u8;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: u8;
    let mut _12: u8;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug result => _1;
        let _7: &u8;
        let _8: &u8;
        scope 2 {
            debug left_val => _7;
            debug right_val => _8;
            let _13: core::panicking::AssertKind;
            scope 3 {
                debug kind => _13;
            }
        }
    }

    bb0: {
        _1 = OpenResult::Ok(const ());
        _4 = some_match(move _1) -> bb1;
    }

    bb1: {
        _3 = &_4;
        _6 = const 0_u8;
        _5 = &_6;
        _2 = (move _3, move _5);
        _7 = (_2.0: &u8);
        _8 = (_2.1: &u8);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<u8, u8>(move _13, _7, _8, move _15);
    }

    bb3: {
        return;
    }
}

fn OpenResult::Ok(_1: ()) -> OpenResult {
    let mut _0: OpenResult;

    bb0: {
        _0 = OpenResult::Ok(move _1);
        return;
    }
}

// MIR FOR CTFE
fn OpenResult::Ok(_1: ()) -> OpenResult {
    let mut _0: OpenResult;

    bb0: {
        _0 = OpenResult::Ok(move _1);
        return;
    }
}

fn OpenResult::Err(_1: ()) -> OpenResult {
    let mut _0: OpenResult;

    bb0: {
        _0 = OpenResult::Err(move _1);
        return;
    }
}

// MIR FOR CTFE
fn OpenResult::Err(_1: ()) -> OpenResult {
    let mut _0: OpenResult;

    bb0: {
        _0 = OpenResult::Err(move _1);
        return;
    }
}

fn OpenResult::TransportErr(_1: TransportErr) -> OpenResult {
    let mut _0: OpenResult;

    bb0: {
        _0 = OpenResult::TransportErr(move _1);
        return;
    }
}

// MIR FOR CTFE
fn OpenResult::TransportErr(_1: TransportErr) -> OpenResult {
    let mut _0: OpenResult;

    bb0: {
        _0 = OpenResult::TransportErr(move _1);
        return;
    }
}
