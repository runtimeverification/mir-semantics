// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Size::One::{constant#0}: u8 = {
    let mut _0: u8;

    bb0: {
        _0 = const 1_u8;
        return;
    }
}

Size::Two::{constant#0}: u8 = {
    let mut _0: u8;

    bb0: {
        _0 = const 2_u8;
        return;
    }
}

Size::Three::{constant#0}: u8 = {
    let mut _0: u8;

    bb0: {
        _0 = const 3_u8;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&u8, &u8);
    let mut _2: &u8;
    let _3: u8;
    let mut _4: &u8;
    let _5: u8;
    let mut _6: std::option::Option<Size>;
    let _7: &u8;
    let _8: &u8;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: u8;
    let mut _12: u8;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
    }
    scope 2 {
        debug left_val => _7;
        debug right_val => _8;
        let _13: core::panicking::AssertKind;
        scope 3 {
            debug kind => _13;
        }
    }

    bb0: {
        _3 = const 0_u8;
        _2 = &_3;
        _6 = Option::<Size>::None;
        _5 = move _6 as u8 (Transmute);
        _4 = &_5;
        _1 = (move _2, move _4);
        _7 = (_1.0: &u8);
        _8 = (_1.1: &u8);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<u8, u8>(move _13, _7, _8, move _15);
    }

    bb2: {
        return;
    }
}
