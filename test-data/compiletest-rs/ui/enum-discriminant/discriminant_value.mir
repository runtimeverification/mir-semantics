// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
CLike2::A::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 5_isize;
        return;
    }
}

CLike2::B::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 2_isize;
        return;
    }
}

CLike2::C::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 19_isize;
        return;
    }
}

CLike3::A::{constant#0}: i8 = {
    let mut _0: i8;

    bb0: {
        _0 = const 5_i8;
        return;
    }
}

CLike3::C::{constant#0}: i8 = {
    let mut _0: i8;

    bb0: {
        _0 = const -1_i8;
        return;
    }
}

static CONST: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const 48879_u32;
        return;
    }
}

Mixed::Unit::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 3_isize;
        return;
    }
}

Mixed::Tuple::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 2_isize;
        return;
    }
}

Mixed::Struct::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 1_isize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&isize, &isize);
    let mut _2: &isize;
    let _3: isize;
    let _4: &CLike1;
    let _5: CLike1;
    let mut _6: &isize;
    let _7: isize;
    let _8: &isize;
    let _9: &isize;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: isize;
    let mut _13: isize;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&isize, &isize);
    let mut _18: &isize;
    let _19: isize;
    let _20: &CLike1;
    let _21: CLike1;
    let mut _22: &isize;
    let _23: isize;
    let _24: &isize;
    let _25: &isize;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: isize;
    let mut _29: isize;
    let _31: !;
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _33: (&isize, &isize);
    let mut _34: &isize;
    let _35: isize;
    let _36: &CLike1;
    let _37: CLike1;
    let mut _38: &isize;
    let _39: isize;
    let _40: &isize;
    let _41: &isize;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: isize;
    let mut _45: isize;
    let _47: !;
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _49: (&isize, &isize);
    let mut _50: &isize;
    let _51: isize;
    let _52: &CLike1;
    let _53: CLike1;
    let mut _54: &isize;
    let _55: isize;
    let _56: &isize;
    let _57: &isize;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: isize;
    let mut _61: isize;
    let _63: !;
    let mut _64: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _65: (&isize, &isize);
    let mut _66: &isize;
    let _67: isize;
    let _68: &CLike2;
    let _69: CLike2;
    let mut _70: &isize;
    let _71: isize;
    let _72: &isize;
    let _73: &isize;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: isize;
    let mut _77: isize;
    let _79: !;
    let mut _80: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _81: (&isize, &isize);
    let mut _82: &isize;
    let _83: isize;
    let _84: &CLike2;
    let _85: CLike2;
    let mut _86: &isize;
    let _87: isize;
    let _88: &isize;
    let _89: &isize;
    let mut _90: bool;
    let mut _91: bool;
    let mut _92: isize;
    let mut _93: isize;
    let _95: !;
    let mut _96: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _97: (&isize, &isize);
    let mut _98: &isize;
    let _99: isize;
    let _100: &CLike2;
    let _101: CLike2;
    let mut _102: &isize;
    let _103: isize;
    let _104: &isize;
    let _105: &isize;
    let mut _106: bool;
    let mut _107: bool;
    let mut _108: isize;
    let mut _109: isize;
    let _111: !;
    let mut _112: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _113: (&isize, &isize);
    let mut _114: &isize;
    let _115: isize;
    let _116: &CLike2;
    let _117: CLike2;
    let mut _118: &isize;
    let _119: isize;
    let _120: &isize;
    let _121: &isize;
    let mut _122: bool;
    let mut _123: bool;
    let mut _124: isize;
    let mut _125: isize;
    let _127: !;
    let mut _128: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _129: (&i8, &i8);
    let mut _130: &i8;
    let _131: i8;
    let _132: &CLike3;
    let _133: CLike3;
    let mut _134: &i8;
    let _135: i8;
    let _136: &i8;
    let _137: &i8;
    let mut _138: bool;
    let mut _139: bool;
    let mut _140: i8;
    let mut _141: i8;
    let _143: !;
    let mut _144: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _145: (&i8, &i8);
    let mut _146: &i8;
    let _147: i8;
    let _148: &CLike3;
    let _149: CLike3;
    let mut _150: &i8;
    let _151: i8;
    let _152: &i8;
    let _153: &i8;
    let mut _154: bool;
    let mut _155: bool;
    let mut _156: i8;
    let mut _157: i8;
    let _159: !;
    let mut _160: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _161: (&i8, &i8);
    let mut _162: &i8;
    let _163: i8;
    let _164: &CLike3;
    let _165: CLike3;
    let mut _166: &i8;
    let _167: i8;
    let _168: &i8;
    let _169: &i8;
    let mut _170: bool;
    let mut _171: bool;
    let mut _172: i8;
    let mut _173: i8;
    let _175: !;
    let mut _176: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _177: (&i8, &i8);
    let mut _178: &i8;
    let _179: i8;
    let _180: &CLike3;
    let _181: CLike3;
    let mut _182: &i8;
    let _183: i8;
    let _184: &i8;
    let _185: &i8;
    let mut _186: bool;
    let mut _187: bool;
    let mut _188: i8;
    let mut _189: i8;
    let _191: !;
    let mut _192: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _193: (&isize, &isize);
    let mut _194: &isize;
    let _195: isize;
    let _196: &ADT;
    let _197: ADT;
    let mut _198: &isize;
    let _199: isize;
    let _200: &isize;
    let _201: &isize;
    let mut _202: bool;
    let mut _203: bool;
    let mut _204: isize;
    let mut _205: isize;
    let _207: !;
    let mut _208: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _209: (&isize, &isize);
    let mut _210: &isize;
    let _211: isize;
    let _212: &ADT;
    let _213: ADT;
    let mut _214: &isize;
    let _215: isize;
    let _216: &isize;
    let _217: &isize;
    let mut _218: bool;
    let mut _219: bool;
    let mut _220: isize;
    let mut _221: isize;
    let _223: !;
    let mut _224: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _225: (&isize, &isize);
    let mut _226: &isize;
    let _227: isize;
    let _228: &NullablePointer;
    let _229: NullablePointer;
    let mut _230: &isize;
    let _231: isize;
    let _232: &isize;
    let _233: &isize;
    let mut _234: bool;
    let mut _235: bool;
    let mut _236: isize;
    let mut _237: isize;
    let _239: !;
    let mut _240: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _241: (&isize, &isize);
    let mut _242: &isize;
    let _243: isize;
    let _244: &NullablePointer;
    let _245: NullablePointer;
    let _246: &u32;
    let mut _247: &isize;
    let _248: isize;
    let _249: &isize;
    let _250: &isize;
    let mut _251: bool;
    let mut _252: bool;
    let mut _253: isize;
    let mut _254: isize;
    let _256: !;
    let mut _257: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _258: (&u8, &u8);
    let mut _259: &u8;
    let _260: u8;
    let _261: &i32;
    let _262: i32;
    let mut _263: &u8;
    let _264: u8;
    let _265: &u8;
    let _266: &u8;
    let mut _267: bool;
    let mut _268: bool;
    let mut _269: u8;
    let mut _270: u8;
    let _272: !;
    let mut _273: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _274: (&u8, &u8);
    let mut _275: &u8;
    let _276: u8;
    let _277: &&str;
    let _278: &str;
    let mut _279: &u8;
    let _280: u8;
    let _281: &u8;
    let _282: &u8;
    let mut _283: bool;
    let mut _284: bool;
    let mut _285: u8;
    let mut _286: u8;
    let _288: !;
    let mut _289: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _290: (&isize, &isize);
    let mut _291: &isize;
    let _292: isize;
    let _293: &Mixed;
    let _294: Mixed;
    let mut _295: &isize;
    let _296: isize;
    let _297: &isize;
    let _298: &isize;
    let mut _299: bool;
    let mut _300: bool;
    let mut _301: isize;
    let mut _302: isize;
    let _304: !;
    let mut _305: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _306: (&isize, &isize);
    let mut _307: &isize;
    let _308: isize;
    let _309: &Mixed;
    let _310: Mixed;
    let mut _311: &isize;
    let _312: isize;
    let _313: &isize;
    let _314: &isize;
    let mut _315: bool;
    let mut _316: bool;
    let mut _317: isize;
    let mut _318: isize;
    let _320: !;
    let mut _321: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _322: (&isize, &isize);
    let mut _323: &isize;
    let _324: isize;
    let _325: &Mixed;
    let _326: Mixed;
    let mut _327: &isize;
    let _328: isize;
    let _329: &isize;
    let _330: &isize;
    let mut _331: bool;
    let mut _332: bool;
    let mut _333: isize;
    let mut _334: isize;
    let _336: !;
    let mut _337: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _8;
        debug right_val => _9;
        let _14: core::panicking::AssertKind;
        scope 2 {
            debug kind => _14;
        }
    }
    scope 3 {
        debug left_val => _24;
        debug right_val => _25;
        let _30: core::panicking::AssertKind;
        scope 4 {
            debug kind => _30;
        }
    }
    scope 5 {
        debug left_val => _40;
        debug right_val => _41;
        let _46: core::panicking::AssertKind;
        scope 6 {
            debug kind => _46;
        }
    }
    scope 7 {
        debug left_val => _56;
        debug right_val => _57;
        let _62: core::panicking::AssertKind;
        scope 8 {
            debug kind => _62;
        }
    }
    scope 9 {
        debug left_val => _72;
        debug right_val => _73;
        let _78: core::panicking::AssertKind;
        scope 10 {
            debug kind => _78;
        }
    }
    scope 11 {
        debug left_val => _88;
        debug right_val => _89;
        let _94: core::panicking::AssertKind;
        scope 12 {
            debug kind => _94;
        }
    }
    scope 13 {
        debug left_val => _104;
        debug right_val => _105;
        let _110: core::panicking::AssertKind;
        scope 14 {
            debug kind => _110;
        }
    }
    scope 15 {
        debug left_val => _120;
        debug right_val => _121;
        let _126: core::panicking::AssertKind;
        scope 16 {
            debug kind => _126;
        }
    }
    scope 17 {
        debug left_val => _136;
        debug right_val => _137;
        let _142: core::panicking::AssertKind;
        scope 18 {
            debug kind => _142;
        }
    }
    scope 19 {
        debug left_val => _152;
        debug right_val => _153;
        let _158: core::panicking::AssertKind;
        scope 20 {
            debug kind => _158;
        }
    }
    scope 21 {
        debug left_val => _168;
        debug right_val => _169;
        let _174: core::panicking::AssertKind;
        scope 22 {
            debug kind => _174;
        }
    }
    scope 23 {
        debug left_val => _184;
        debug right_val => _185;
        let _190: core::panicking::AssertKind;
        scope 24 {
            debug kind => _190;
        }
    }
    scope 25 {
        debug left_val => _200;
        debug right_val => _201;
        let _206: core::panicking::AssertKind;
        scope 26 {
            debug kind => _206;
        }
    }
    scope 27 {
        debug left_val => _216;
        debug right_val => _217;
        let _222: core::panicking::AssertKind;
        scope 28 {
            debug kind => _222;
        }
    }
    scope 29 {
        debug left_val => _232;
        debug right_val => _233;
        let _238: core::panicking::AssertKind;
        scope 30 {
            debug kind => _238;
        }
    }
    scope 31 {
        debug left_val => _249;
        debug right_val => _250;
        let _255: core::panicking::AssertKind;
        scope 32 {
            debug kind => _255;
        }
    }
    scope 33 {
        debug left_val => _265;
        debug right_val => _266;
        let _271: core::panicking::AssertKind;
        scope 34 {
            debug kind => _271;
        }
    }
    scope 35 {
        debug left_val => _281;
        debug right_val => _282;
        let _287: core::panicking::AssertKind;
        scope 36 {
            debug kind => _287;
        }
    }
    scope 37 {
        debug left_val => _297;
        debug right_val => _298;
        let _303: core::panicking::AssertKind;
        scope 38 {
            debug kind => _303;
        }
    }
    scope 39 {
        debug left_val => _313;
        debug right_val => _314;
        let _319: core::panicking::AssertKind;
        scope 40 {
            debug kind => _319;
        }
    }
    scope 41 {
        debug left_val => _329;
        debug right_val => _330;
        let _335: core::panicking::AssertKind;
        scope 42 {
            debug kind => _335;
        }
    }

    bb0: {
        _5 = CLike1::A;
        _4 = &_5;
        _3 = discriminant((*_4));
        _2 = &_3;
        _7 = const 0_isize;
        _6 = &_7;
        _1 = (move _2, move _6);
        _8 = (_1.0: &isize);
        _9 = (_1.1: &isize);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = assert_failed::<isize, isize>(move _14, _8, _9, move _16);
    }

    bb2: {
        _21 = CLike1::B;
        _20 = &_21;
        _19 = discriminant((*_20));
        _18 = &_19;
        _23 = const 1_isize;
        _22 = &_23;
        _17 = (move _18, move _22);
        _24 = (_17.0: &isize);
        _25 = (_17.1: &isize);
        _28 = (*_24);
        _29 = (*_25);
        _27 = Eq(move _28, move _29);
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _30 = core::panicking::AssertKind::Eq;
        _32 = Option::<Arguments<'_>>::None;
        _31 = assert_failed::<isize, isize>(move _30, _24, _25, move _32);
    }

    bb4: {
        _37 = CLike1::C;
        _36 = &_37;
        _35 = discriminant((*_36));
        _34 = &_35;
        _39 = const 2_isize;
        _38 = &_39;
        _33 = (move _34, move _38);
        _40 = (_33.0: &isize);
        _41 = (_33.1: &isize);
        _44 = (*_40);
        _45 = (*_41);
        _43 = Eq(move _44, move _45);
        _42 = Not(move _43);
        switchInt(move _42) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _46 = core::panicking::AssertKind::Eq;
        _48 = Option::<Arguments<'_>>::None;
        _47 = assert_failed::<isize, isize>(move _46, _40, _41, move _48);
    }

    bb6: {
        _53 = CLike1::D;
        _52 = &_53;
        _51 = discriminant((*_52));
        _50 = &_51;
        _55 = const 3_isize;
        _54 = &_55;
        _49 = (move _50, move _54);
        _56 = (_49.0: &isize);
        _57 = (_49.1: &isize);
        _60 = (*_56);
        _61 = (*_57);
        _59 = Eq(move _60, move _61);
        _58 = Not(move _59);
        switchInt(move _58) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _62 = core::panicking::AssertKind::Eq;
        _64 = Option::<Arguments<'_>>::None;
        _63 = assert_failed::<isize, isize>(move _62, _56, _57, move _64);
    }

    bb8: {
        _69 = CLike2::A;
        _68 = &_69;
        _67 = discriminant((*_68));
        _66 = &_67;
        _71 = const 5_isize;
        _70 = &_71;
        _65 = (move _66, move _70);
        _72 = (_65.0: &isize);
        _73 = (_65.1: &isize);
        _76 = (*_72);
        _77 = (*_73);
        _75 = Eq(move _76, move _77);
        _74 = Not(move _75);
        switchInt(move _74) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _78 = core::panicking::AssertKind::Eq;
        _80 = Option::<Arguments<'_>>::None;
        _79 = assert_failed::<isize, isize>(move _78, _72, _73, move _80);
    }

    bb10: {
        _85 = CLike2::B;
        _84 = &_85;
        _83 = discriminant((*_84));
        _82 = &_83;
        _87 = const 2_isize;
        _86 = &_87;
        _81 = (move _82, move _86);
        _88 = (_81.0: &isize);
        _89 = (_81.1: &isize);
        _92 = (*_88);
        _93 = (*_89);
        _91 = Eq(move _92, move _93);
        _90 = Not(move _91);
        switchInt(move _90) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _94 = core::panicking::AssertKind::Eq;
        _96 = Option::<Arguments<'_>>::None;
        _95 = assert_failed::<isize, isize>(move _94, _88, _89, move _96);
    }

    bb12: {
        _101 = CLike2::C;
        _100 = &_101;
        _99 = discriminant((*_100));
        _98 = &_99;
        _103 = const 19_isize;
        _102 = &_103;
        _97 = (move _98, move _102);
        _104 = (_97.0: &isize);
        _105 = (_97.1: &isize);
        _108 = (*_104);
        _109 = (*_105);
        _107 = Eq(move _108, move _109);
        _106 = Not(move _107);
        switchInt(move _106) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _110 = core::panicking::AssertKind::Eq;
        _112 = Option::<Arguments<'_>>::None;
        _111 = assert_failed::<isize, isize>(move _110, _104, _105, move _112);
    }

    bb14: {
        _117 = CLike2::D;
        _116 = &_117;
        _115 = discriminant((*_116));
        _114 = &_115;
        _119 = const 20_isize;
        _118 = &_119;
        _113 = (move _114, move _118);
        _120 = (_113.0: &isize);
        _121 = (_113.1: &isize);
        _124 = (*_120);
        _125 = (*_121);
        _123 = Eq(move _124, move _125);
        _122 = Not(move _123);
        switchInt(move _122) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _126 = core::panicking::AssertKind::Eq;
        _128 = Option::<Arguments<'_>>::None;
        _127 = assert_failed::<isize, isize>(move _126, _120, _121, move _128);
    }

    bb16: {
        _133 = CLike3::A;
        _132 = &_133;
        _131 = discriminant((*_132));
        _130 = &_131;
        _135 = const 5_i8;
        _134 = &_135;
        _129 = (move _130, move _134);
        _136 = (_129.0: &i8);
        _137 = (_129.1: &i8);
        _140 = (*_136);
        _141 = (*_137);
        _139 = Eq(move _140, move _141);
        _138 = Not(move _139);
        switchInt(move _138) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _142 = core::panicking::AssertKind::Eq;
        _144 = Option::<Arguments<'_>>::None;
        _143 = assert_failed::<i8, i8>(move _142, _136, _137, move _144);
    }

    bb18: {
        _149 = CLike3::B;
        _148 = &_149;
        _147 = discriminant((*_148));
        _146 = &_147;
        _151 = const 6_i8;
        _150 = &_151;
        _145 = (move _146, move _150);
        _152 = (_145.0: &i8);
        _153 = (_145.1: &i8);
        _156 = (*_152);
        _157 = (*_153);
        _155 = Eq(move _156, move _157);
        _154 = Not(move _155);
        switchInt(move _154) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _158 = core::panicking::AssertKind::Eq;
        _160 = Option::<Arguments<'_>>::None;
        _159 = assert_failed::<i8, i8>(move _158, _152, _153, move _160);
    }

    bb20: {
        _165 = CLike3::C;
        _164 = &_165;
        _163 = discriminant((*_164));
        _162 = &_163;
        _167 = const -1_i8;
        _166 = &_167;
        _161 = (move _162, move _166);
        _168 = (_161.0: &i8);
        _169 = (_161.1: &i8);
        _172 = (*_168);
        _173 = (*_169);
        _171 = Eq(move _172, move _173);
        _170 = Not(move _171);
        switchInt(move _170) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _174 = core::panicking::AssertKind::Eq;
        _176 = Option::<Arguments<'_>>::None;
        _175 = assert_failed::<i8, i8>(move _174, _168, _169, move _176);
    }

    bb22: {
        _181 = CLike3::D;
        _180 = &_181;
        _179 = discriminant((*_180));
        _178 = &_179;
        _183 = const 0_i8;
        _182 = &_183;
        _177 = (move _178, move _182);
        _184 = (_177.0: &i8);
        _185 = (_177.1: &i8);
        _188 = (*_184);
        _189 = (*_185);
        _187 = Eq(move _188, move _189);
        _186 = Not(move _187);
        switchInt(move _186) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _190 = core::panicking::AssertKind::Eq;
        _192 = Option::<Arguments<'_>>::None;
        _191 = assert_failed::<i8, i8>(move _190, _184, _185, move _192);
    }

    bb24: {
        _197 = ADT::First(const 0_u32, const 0_u32);
        _196 = &_197;
        _195 = discriminant((*_196));
        _194 = &_195;
        _199 = const 0_isize;
        _198 = &_199;
        _193 = (move _194, move _198);
        _200 = (_193.0: &isize);
        _201 = (_193.1: &isize);
        _204 = (*_200);
        _205 = (*_201);
        _203 = Eq(move _204, move _205);
        _202 = Not(move _203);
        switchInt(move _202) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _206 = core::panicking::AssertKind::Eq;
        _208 = Option::<Arguments<'_>>::None;
        _207 = assert_failed::<isize, isize>(move _206, _200, _201, move _208);
    }

    bb26: {
        _213 = ADT::Second(const 5_u64);
        _212 = &_213;
        _211 = discriminant((*_212));
        _210 = &_211;
        _215 = const 1_isize;
        _214 = &_215;
        _209 = (move _210, move _214);
        _216 = (_209.0: &isize);
        _217 = (_209.1: &isize);
        _220 = (*_216);
        _221 = (*_217);
        _219 = Eq(move _220, move _221);
        _218 = Not(move _219);
        switchInt(move _218) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _222 = core::panicking::AssertKind::Eq;
        _224 = Option::<Arguments<'_>>::None;
        _223 = assert_failed::<isize, isize>(move _222, _216, _217, move _224);
    }

    bb28: {
        _229 = NullablePointer::Nothing;
        _228 = &_229;
        _227 = discriminant((*_228));
        _226 = &_227;
        _231 = const 1_isize;
        _230 = &_231;
        _225 = (move _226, move _230);
        _232 = (_225.0: &isize);
        _233 = (_225.1: &isize);
        _236 = (*_232);
        _237 = (*_233);
        _235 = Eq(move _236, move _237);
        _234 = Not(move _235);
        switchInt(move _234) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _238 = core::panicking::AssertKind::Eq;
        _240 = Option::<Arguments<'_>>::None;
        _239 = assert_failed::<isize, isize>(move _238, _232, _233, move _240);
    }

    bb30: {
        _246 = const {alloc9: &u32};
        _245 = NullablePointer::Something(_246);
        _244 = &_245;
        _243 = discriminant((*_244));
        _242 = &_243;
        _248 = const 0_isize;
        _247 = &_248;
        _241 = (move _242, move _247);
        _249 = (_241.0: &isize);
        _250 = (_241.1: &isize);
        _253 = (*_249);
        _254 = (*_250);
        _252 = Eq(move _253, move _254);
        _251 = Not(move _252);
        switchInt(move _251) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _255 = core::panicking::AssertKind::Eq;
        _257 = Option::<Arguments<'_>>::None;
        _256 = assert_failed::<isize, isize>(move _255, _249, _250, move _257);
    }

    bb32: {
        _262 = const 10_i32;
        _261 = &_262;
        _260 = discriminant((*_261));
        _259 = &_260;
        _264 = const 0_u8;
        _263 = &_264;
        _258 = (move _259, move _263);
        _265 = (_258.0: &u8);
        _266 = (_258.1: &u8);
        _269 = (*_265);
        _270 = (*_266);
        _268 = Eq(move _269, move _270);
        _267 = Not(move _268);
        switchInt(move _267) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        _271 = core::panicking::AssertKind::Eq;
        _273 = Option::<Arguments<'_>>::None;
        _272 = assert_failed::<u8, u8>(move _271, _265, _266, move _273);
    }

    bb34: {
        _278 = const "test";
        _277 = &_278;
        _276 = discriminant((*_277));
        _275 = &_276;
        _280 = const 0_u8;
        _279 = &_280;
        _274 = (move _275, move _279);
        _281 = (_274.0: &u8);
        _282 = (_274.1: &u8);
        _285 = (*_281);
        _286 = (*_282);
        _284 = Eq(move _285, move _286);
        _283 = Not(move _284);
        switchInt(move _283) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _287 = core::panicking::AssertKind::Eq;
        _289 = Option::<Arguments<'_>>::None;
        _288 = assert_failed::<u8, u8>(move _287, _281, _282, move _289);
    }

    bb36: {
        _294 = Mixed::Unit;
        _293 = &_294;
        _292 = discriminant((*_293));
        _291 = &_292;
        _296 = const 3_isize;
        _295 = &_296;
        _290 = (move _291, move _295);
        _297 = (_290.0: &isize);
        _298 = (_290.1: &isize);
        _301 = (*_297);
        _302 = (*_298);
        _300 = Eq(move _301, move _302);
        _299 = Not(move _300);
        switchInt(move _299) -> [0: bb38, otherwise: bb37];
    }

    bb37: {
        _303 = core::panicking::AssertKind::Eq;
        _305 = Option::<Arguments<'_>>::None;
        _304 = assert_failed::<isize, isize>(move _303, _297, _298, move _305);
    }

    bb38: {
        _310 = Mixed::Tuple(const 5_u16);
        _309 = &_310;
        _308 = discriminant((*_309));
        _307 = &_308;
        _312 = const 2_isize;
        _311 = &_312;
        _306 = (move _307, move _311);
        _313 = (_306.0: &isize);
        _314 = (_306.1: &isize);
        _317 = (*_313);
        _318 = (*_314);
        _316 = Eq(move _317, move _318);
        _315 = Not(move _316);
        switchInt(move _315) -> [0: bb40, otherwise: bb39];
    }

    bb39: {
        _319 = core::panicking::AssertKind::Eq;
        _321 = Option::<Arguments<'_>>::None;
        _320 = assert_failed::<isize, isize>(move _319, _313, _314, move _321);
    }

    bb40: {
        _326 = Mixed::Struct { a: const 7_u8, b: const 11_u16 };
        _325 = &_326;
        _324 = discriminant((*_325));
        _323 = &_324;
        _328 = const 1_isize;
        _327 = &_328;
        _322 = (move _323, move _327);
        _329 = (_322.0: &isize);
        _330 = (_322.1: &isize);
        _333 = (*_329);
        _334 = (*_330);
        _332 = Eq(move _333, move _334);
        _331 = Not(move _332);
        switchInt(move _331) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _335 = core::panicking::AssertKind::Eq;
        _337 = Option::<Arguments<'_>>::None;
        _336 = assert_failed::<isize, isize>(move _335, _329, _330, move _337);
    }

    bb42: {
        return;
    }
}

alloc9 (static: CONST, size: 4, align: 4) {
    ef be 00 00                                     │ ....
}

fn ADT::First(_1: u32, _2: u32) -> ADT {
    let mut _0: ADT;

    bb0: {
        _0 = ADT::First(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn ADT::First(_1: u32, _2: u32) -> ADT {
    let mut _0: ADT;

    bb0: {
        _0 = ADT::First(move _1, move _2);
        return;
    }
}

fn ADT::Second(_1: u64) -> ADT {
    let mut _0: ADT;

    bb0: {
        _0 = ADT::Second(move _1);
        return;
    }
}

// MIR FOR CTFE
fn ADT::Second(_1: u64) -> ADT {
    let mut _0: ADT;

    bb0: {
        _0 = ADT::Second(move _1);
        return;
    }
}

fn NullablePointer::Something(_1: &u32) -> NullablePointer {
    let mut _0: NullablePointer;

    bb0: {
        _0 = NullablePointer::Something(move _1);
        return;
    }
}

// MIR FOR CTFE
fn NullablePointer::Something(_1: &u32) -> NullablePointer {
    let mut _0: NullablePointer;

    bb0: {
        _0 = NullablePointer::Something(move _1);
        return;
    }
}

fn Mixed::Tuple(_1: u16) -> Mixed {
    let mut _0: Mixed;

    bb0: {
        _0 = Mixed::Tuple(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Mixed::Tuple(_1: u16) -> Mixed {
    let mut _0: Mixed;

    bb0: {
        _0 = Mixed::Tuple(move _1);
        return;
    }
}
