// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: &std::mem::Discriminant<ADT>;
    let _4: std::mem::Discriminant<ADT>;
    let _5: &ADT;
    let _6: ADT;
    let mut _7: &std::mem::Discriminant<ADT>;
    let _8: std::mem::Discriminant<ADT>;
    let _9: &ADT;
    let _10: ADT;
    let mut _11: !;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: &std::mem::Discriminant<ADT>;
    let _15: std::mem::Discriminant<ADT>;
    let _16: &ADT;
    let _17: ADT;
    let mut _18: &std::mem::Discriminant<ADT>;
    let _19: std::mem::Discriminant<ADT>;
    let _20: &ADT;
    let _21: ADT;
    let mut _22: !;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: &std::mem::Discriminant<ADT>;
    let _26: std::mem::Discriminant<ADT>;
    let _27: &ADT;
    let _28: ADT;
    let mut _29: &std::mem::Discriminant<ADT>;
    let _30: std::mem::Discriminant<ADT>;
    let _31: &ADT;
    let _32: ADT;
    let mut _33: !;
    let mut _34: std::mem::Discriminant<i32>;
    let _35: &i32;
    let _36: i32;
    let mut _37: std::mem::Discriminant<&str>;
    let _38: &&str;
    let _39: &str;
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        _6 = ADT::First(const 0_u32, const 0_u32);
        _5 = &_6;
        _4 = discriminant::<ADT>(_5) -> bb1;
    }

    bb1: {
        _3 = &_4;
        _10 = ADT::First(const 1_u32, const 1_u32);
        _9 = &_10;
        _8 = discriminant::<ADT>(_9) -> bb2;
    }

    bb2: {
        _7 = &_8;
        _2 = <Discriminant<ADT> as PartialEq>::eq(move _3, move _7) -> bb3;
    }

    bb3: {
        _1 = Not(move _2);
        switchInt(move _1) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _11 = core::panicking::panic(const "assertion failed: mem::discriminant(&ADT::First(0, 0)) == mem::discriminant(&ADT::First(1, 1))");
    }

    bb5: {
        _17 = ADT::Second(const 5_u64);
        _16 = &_17;
        _15 = discriminant::<ADT>(_16) -> bb6;
    }

    bb6: {
        _14 = &_15;
        _21 = ADT::Second(const 6_u64);
        _20 = &_21;
        _19 = discriminant::<ADT>(_20) -> bb7;
    }

    bb7: {
        _18 = &_19;
        _13 = <Discriminant<ADT> as PartialEq>::eq(move _14, move _18) -> bb8;
    }

    bb8: {
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _22 = core::panicking::panic(const "assertion failed: mem::discriminant(&ADT::Second(5)) == mem::discriminant(&ADT::Second(6))");
    }

    bb10: {
        _28 = ADT::First(const 2_u32, const 2_u32);
        _27 = &_28;
        _26 = discriminant::<ADT>(_27) -> bb11;
    }

    bb11: {
        _25 = &_26;
        _32 = ADT::Second(const 2_u64);
        _31 = &_32;
        _30 = discriminant::<ADT>(_31) -> bb12;
    }

    bb12: {
        _29 = &_30;
        _24 = <Discriminant<ADT> as PartialEq>::ne(move _25, move _29) -> bb13;
    }

    bb13: {
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _33 = core::panicking::panic(const "assertion failed: mem::discriminant(&ADT::First(2, 2)) != mem::discriminant(&ADT::Second(2))");
    }

    bb15: {
        _36 = const 10_i32;
        _35 = &_36;
        _34 = discriminant::<i32>(_35) -> bb16;
    }

    bb16: {
        _39 = const "test";
        _38 = &_39;
        _37 = discriminant::<&str>(_38) -> bb17;
    }

    bb17: {
        return;
    }
}

fn ADT::First(_1: u32, _2: u32) -> ADT {
    let mut _0: ADT;

    bb0: {
        _0 = ADT::First(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn ADT::First(_1: u32, _2: u32) -> ADT {
    let mut _0: ADT;

    bb0: {
        _0 = ADT::First(move _1, move _2);
        return;
    }
}

fn ADT::Second(_1: u64) -> ADT {
    let mut _0: ADT;

    bb0: {
        _0 = ADT::Second(move _1);
        return;
    }
}

// MIR FOR CTFE
fn ADT::Second(_1: u64) -> ADT {
    let mut _0: ADT;

    bb0: {
        _0 = ADT::Second(move _1);
        return;
    }
}
