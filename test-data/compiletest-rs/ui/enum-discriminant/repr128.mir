// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Signed::Zero::{constant#0}: i128 = {
    let mut _0: i128;

    bb0: {
        _0 = const 0_i128;
        return;
    }
}

Signed::Staircase::{constant#0}: i128 = {
    let mut _0: i128;

    bb0: {
        _0 = const 5233100606242806050955395731361295_i128;
        return;
    }
}

Signed::U64Limit::{constant#0}: i128 = {
    let mut _0: i128;
    let mut _1: i128;
    let mut _2: (i128, bool);

    bb0: {
        StorageLive(_1);
        _1 = const _ as i128 (IntToInt);
        _2 = CheckedAdd(_1, const 1_i128);
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", move _1, const 1_i128) -> bb1;
    }

    bb1: {
        _0 = move (_2.0: i128);
        StorageDead(_1);
        return;
    }
}

Signed::SmallNegative::{constant#0}: i128 = {
    let mut _0: i128;

    bb0: {
        _0 = const -1_i128;
        return;
    }
}

Signed::BigNegative::{constant#0}: i128 = {
    let mut _0: i128;

    bb0: {
        _0 = const _;
        return;
    }
}

Unsigned::Zero::{constant#0}: u128 = {
    let mut _0: u128;

    bb0: {
        _0 = const 0_u128;
        return;
    }
}

Unsigned::Staircase::{constant#0}: u128 = {
    let mut _0: u128;

    bb0: {
        _0 = const 5233100606242806050955395731361295_u128;
        return;
    }
}

Unsigned::U64Limit::{constant#0}: u128 = {
    let mut _0: u128;
    let mut _1: u128;
    let mut _2: (u128, bool);

    bb0: {
        StorageLive(_1);
        _1 = const _ as u128 (IntToInt);
        _2 = CheckedAdd(_1, const 1_u128);
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", move _1, const 1_u128) -> bb1;
    }

    bb1: {
        _0 = move (_2.0: u128);
        StorageDead(_1);
        return;
    }
}

fn discr(_1: T, _2: U) -> () {
    debug v => _1;
    debug value => _2;
    let mut _0: ();
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: &<T as std::marker::DiscriminantKind>::Discriminant;
    let _6: <T as std::marker::DiscriminantKind>::Discriminant;
    let _7: &T;
    let mut _8: &U;
    let mut _9: !;

    bb0: {
        _7 = &_1;
        _6 = discriminant((*_7));
        _5 = &_6;
        _8 = &_2;
        _4 = <<T as DiscriminantKind>::Discriminant as PartialEq<U>>::eq(move _5, move _8) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _3 = Not(move _4);
        switchInt(move _3) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _9 = core::panicking::panic(const "assertion failed: discriminant_value(&v) == value") -> bb6;
    }

    bb3: {
        drop(_2) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        drop(_1) -> bb5;
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        drop(_1) -> [return: bb8, unwind terminate];
    }

    bb8 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: Signed;
    let _3: ();
    let mut _4: Signed;
    let _5: ();
    let mut _6: Signed;
    let mut _7: i128;
    let mut _8: i128;
    let _9: ();
    let mut _10: Signed;
    let _11: ();
    let mut _12: Signed;
    let _13: ();
    let mut _14: Signed;
    let mut _15: i128;
    let _16: ();
    let mut _17: Unsigned;
    let _18: ();
    let mut _19: Unsigned;
    let _20: ();
    let mut _21: Unsigned;
    let mut _22: u128;
    let mut _23: u128;
    let _24: ();
    let mut _25: Unsigned;
    let mut _26: u128;
    let mut _27: u128;

    bb0: {
        _2 = Signed::Zero;
        _1 = discr::<Signed, i128>(move _2, const 0_i128) -> bb1;
    }

    bb1: {
        _4 = Signed::Staircase;
        _3 = discr::<Signed, i128>(move _4, const 5233100606242806050955395731361295_i128) -> bb2;
    }

    bb2: {
        _6 = Signed::U64Limit;
        _8 = const _ as i128 (IntToInt);
        _7 = Add(move _8, const 1_i128);
        _5 = discr::<Signed, i128>(move _6, move _7) -> bb3;
    }

    bb3: {
        _10 = Signed::SmallNegative;
        _9 = discr::<Signed, i128>(move _10, const -1_i128) -> bb4;
    }

    bb4: {
        _12 = Signed::BigNegative;
        _11 = discr::<Signed, i128>(move _12, const _) -> bb5;
    }

    bb5: {
        _14 = Signed::Next;
        _15 = Add(const _, const 1_i128);
        _13 = discr::<Signed, i128>(move _14, move _15) -> bb6;
    }

    bb6: {
        _17 = Unsigned::Zero;
        _16 = discr::<Unsigned, u128>(move _17, const 0_u128) -> bb7;
    }

    bb7: {
        _19 = Unsigned::Staircase;
        _18 = discr::<Unsigned, u128>(move _19, const 5233100606242806050955395731361295_u128) -> bb8;
    }

    bb8: {
        _21 = Unsigned::U64Limit;
        _23 = const _ as u128 (IntToInt);
        _22 = Add(move _23, const 1_u128);
        _20 = discr::<Unsigned, u128>(move _21, move _22) -> bb9;
    }

    bb9: {
        _25 = Unsigned::Next;
        _27 = const _ as u128 (IntToInt);
        _26 = Add(move _27, const 2_u128);
        _24 = discr::<Unsigned, u128>(move _25, move _26) -> bb10;
    }

    bb10: {
        return;
    }
}
