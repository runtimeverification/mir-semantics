// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
E2::A::{constant#0}: i8 = {
    let mut _0: i8;

    bb0: {
        _0 = const 7_i8;
        return;
    }
}

E2::B::{constant#0}: i8 = {
    let mut _0: i8;

    bb0: {
        _0 = const -2_i8;
        return;
    }
}

E3::A::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 42_isize;
        return;
    }
}

E3::B::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 100_isize;
        return;
    }
}

E4::A::{constant#0}: i128 = {
    let mut _0: i128;

    bb0: {
        _0 = const 1306945789274585225_i128;
        return;
    }
}

E4::B::{constant#0}: i128 = {
    let mut _0: i128;

    bb0: {
        _0 = const -1306945789274585225_i128;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: [isize; 3];
    let mut _2: isize;
    let _3: &E1;
    let _4: E1;
    let _5: usize;
    let mut _6: usize;
    let mut _7: bool;
    let mut _8: (&[isize; 3], &[isize; 3]);
    let mut _9: &[isize; 3];
    let mut _10: &[isize; 3];
    let _11: [isize; 3];
    let mut _14: bool;
    let mut _15: bool;
    let _17: !;
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _19: isize;
    let _20: &E1;
    let _21: E1;
    let _22: usize;
    let mut _23: usize;
    let mut _24: bool;
    let mut _25: (&[isize; 3], &[isize; 3]);
    let mut _26: &[isize; 3];
    let mut _27: &[isize; 3];
    let _28: [isize; 3];
    let mut _31: bool;
    let mut _32: bool;
    let _34: !;
    let mut _35: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _37: i8;
    let _38: &E2;
    let _39: E2;
    let _40: usize;
    let mut _41: usize;
    let mut _42: bool;
    let mut _43: (&[i8; 3], &[i8; 3]);
    let mut _44: &[i8; 3];
    let mut _45: &[i8; 3];
    let _46: [i8; 3];
    let mut _49: bool;
    let mut _50: bool;
    let _52: !;
    let mut _53: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _54: i8;
    let _55: &E2;
    let _56: E2;
    let _57: usize;
    let mut _58: usize;
    let mut _59: bool;
    let mut _60: (&[i8; 3], &[i8; 3]);
    let mut _61: &[i8; 3];
    let mut _62: &[i8; 3];
    let _63: [i8; 3];
    let mut _66: bool;
    let mut _67: bool;
    let _69: !;
    let mut _70: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _72: isize;
    let _73: &E3;
    let _74: E3;
    let _75: usize;
    let mut _76: usize;
    let mut _77: bool;
    let mut _78: (&[isize; 3], &[isize; 3]);
    let mut _79: &[isize; 3];
    let mut _80: &[isize; 3];
    let _81: [isize; 3];
    let mut _84: bool;
    let mut _85: bool;
    let _87: !;
    let mut _88: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _89: isize;
    let _90: &E3;
    let _91: E3;
    let _92: usize;
    let mut _93: usize;
    let mut _94: bool;
    let mut _95: (&[isize; 3], &[isize; 3]);
    let mut _96: &[isize; 3];
    let mut _97: &[isize; 3];
    let _98: [isize; 3];
    let mut _101: bool;
    let mut _102: bool;
    let _104: !;
    let mut _105: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _107: i128;
    let _108: &E4;
    let _109: E4;
    let _110: usize;
    let mut _111: usize;
    let mut _112: bool;
    let mut _113: (&[i128; 3], &[i128; 3]);
    let mut _114: &[i128; 3];
    let mut _115: &[i128; 3];
    let _116: [i128; 3];
    let mut _119: bool;
    let mut _120: bool;
    let _122: !;
    let mut _123: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _124: i128;
    let _125: &E4;
    let _126: E4;
    let _127: usize;
    let mut _128: usize;
    let mut _129: bool;
    let mut _130: (&[i128; 3], &[i128; 3]);
    let mut _131: &[i128; 3];
    let mut _132: &[i128; 3];
    let _133: [i128; 3];
    let mut _136: bool;
    let mut _137: bool;
    let _139: !;
    let mut _140: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug target => _1;
        let _12: &[isize; 3];
        let _13: &[isize; 3];
        let _29: &[isize; 3];
        let _30: &[isize; 3];
        let mut _36: [i8; 3];
        scope 2 {
            debug left_val => _12;
            debug right_val => _13;
            let _16: core::panicking::AssertKind;
            scope 3 {
                debug kind => _16;
            }
        }
        scope 4 {
            debug left_val => _29;
            debug right_val => _30;
            let _33: core::panicking::AssertKind;
            scope 5 {
                debug kind => _33;
            }
        }
        scope 6 {
            debug target => _36;
            let _47: &[i8; 3];
            let _48: &[i8; 3];
            let _64: &[i8; 3];
            let _65: &[i8; 3];
            let mut _71: [isize; 3];
            scope 7 {
                debug left_val => _47;
                debug right_val => _48;
                let _51: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _51;
                }
            }
            scope 9 {
                debug left_val => _64;
                debug right_val => _65;
                let _68: core::panicking::AssertKind;
                scope 10 {
                    debug kind => _68;
                }
            }
            scope 11 {
                debug target => _71;
                let _82: &[isize; 3];
                let _83: &[isize; 3];
                let _99: &[isize; 3];
                let _100: &[isize; 3];
                let mut _106: [i128; 3];
                scope 12 {
                    debug left_val => _82;
                    debug right_val => _83;
                    let _86: core::panicking::AssertKind;
                    scope 13 {
                        debug kind => _86;
                    }
                }
                scope 14 {
                    debug left_val => _99;
                    debug right_val => _100;
                    let _103: core::panicking::AssertKind;
                    scope 15 {
                        debug kind => _103;
                    }
                }
                scope 16 {
                    debug target => _106;
                    let _117: &[i128; 3];
                    let _118: &[i128; 3];
                    let _134: &[i128; 3];
                    let _135: &[i128; 3];
                    scope 17 {
                        debug left_val => _117;
                        debug right_val => _118;
                        let _121: core::panicking::AssertKind;
                        scope 18 {
                            debug kind => _121;
                        }
                    }
                    scope 19 {
                        debug left_val => _134;
                        debug right_val => _135;
                        let _138: core::panicking::AssertKind;
                        scope 20 {
                            debug kind => _138;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = [const 0_isize, const 0_isize, const 0_isize];
        _4 = E1::A;
        _3 = &_4;
        _2 = discriminant((*_3));
        _5 = const 1_usize;
        _6 = const 3_usize;
        _7 = Lt(_5, _6);
        assert(move _7, "index out of bounds: the length is {} but the index is {}", move _6, _5) -> bb1;
    }

    bb1: {
        _1[_5] = move _2;
        _9 = &_1;
        _11 = [const 0_isize, const 0_isize, const 0_isize];
        _10 = &_11;
        _8 = (move _9, move _10);
        _12 = (_8.0: &[isize; 3]);
        _13 = (_8.1: &[isize; 3]);
        _15 = <[isize; 3] as PartialEq>::eq(_12, _13) -> bb2;
    }

    bb2: {
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _16 = core::panicking::AssertKind::Eq;
        _18 = Option::<Arguments<'_>>::None;
        _17 = core::panicking::assert_failed::<[isize; 3], [isize; 3]>(move _16, _12, _13, move _18);
    }

    bb4: {
        _21 = E1::B;
        _20 = &_21;
        _19 = discriminant((*_20));
        _22 = const 1_usize;
        _23 = const 3_usize;
        _24 = Lt(_22, _23);
        assert(move _24, "index out of bounds: the length is {} but the index is {}", move _23, _22) -> bb5;
    }

    bb5: {
        _1[_22] = move _19;
        _26 = &_1;
        _28 = [const 0_isize, const 1_isize, const 0_isize];
        _27 = &_28;
        _25 = (move _26, move _27);
        _29 = (_25.0: &[isize; 3]);
        _30 = (_25.1: &[isize; 3]);
        _32 = <[isize; 3] as PartialEq>::eq(_29, _30) -> bb6;
    }

    bb6: {
        _31 = Not(move _32);
        switchInt(move _31) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _33 = core::panicking::AssertKind::Eq;
        _35 = Option::<Arguments<'_>>::None;
        _34 = core::panicking::assert_failed::<[isize; 3], [isize; 3]>(move _33, _29, _30, move _35);
    }

    bb8: {
        _36 = [const 0_i8, const 0_i8, const 0_i8];
        _39 = E2::A;
        _38 = &_39;
        _37 = discriminant((*_38));
        _40 = const 1_usize;
        _41 = const 3_usize;
        _42 = Lt(_40, _41);
        assert(move _42, "index out of bounds: the length is {} but the index is {}", move _41, _40) -> bb9;
    }

    bb9: {
        _36[_40] = move _37;
        _44 = &_36;
        _46 = [const 0_i8, const 7_i8, const 0_i8];
        _45 = &_46;
        _43 = (move _44, move _45);
        _47 = (_43.0: &[i8; 3]);
        _48 = (_43.1: &[i8; 3]);
        _50 = <[i8; 3] as PartialEq>::eq(_47, _48) -> bb10;
    }

    bb10: {
        _49 = Not(move _50);
        switchInt(move _49) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _51 = core::panicking::AssertKind::Eq;
        _53 = Option::<Arguments<'_>>::None;
        _52 = core::panicking::assert_failed::<[i8; 3], [i8; 3]>(move _51, _47, _48, move _53);
    }

    bb12: {
        _56 = E2::B;
        _55 = &_56;
        _54 = discriminant((*_55));
        _57 = const 1_usize;
        _58 = const 3_usize;
        _59 = Lt(_57, _58);
        assert(move _59, "index out of bounds: the length is {} but the index is {}", move _58, _57) -> bb13;
    }

    bb13: {
        _36[_57] = move _54;
        _61 = &_36;
        _63 = [const 0_i8, const -2_i8, const 0_i8];
        _62 = &_63;
        _60 = (move _61, move _62);
        _64 = (_60.0: &[i8; 3]);
        _65 = (_60.1: &[i8; 3]);
        _67 = <[i8; 3] as PartialEq>::eq(_64, _65) -> bb14;
    }

    bb14: {
        _66 = Not(move _67);
        switchInt(move _66) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _68 = core::panicking::AssertKind::Eq;
        _70 = Option::<Arguments<'_>>::None;
        _69 = core::panicking::assert_failed::<[i8; 3], [i8; 3]>(move _68, _64, _65, move _70);
    }

    bb16: {
        _71 = [const 0_isize, const 0_isize, const 0_isize];
        _74 = E3::A;
        _73 = &_74;
        _72 = discriminant((*_73));
        _75 = const 1_usize;
        _76 = const 3_usize;
        _77 = Lt(_75, _76);
        assert(move _77, "index out of bounds: the length is {} but the index is {}", move _76, _75) -> bb17;
    }

    bb17: {
        _71[_75] = move _72;
        _79 = &_71;
        _81 = [const 0_isize, const 42_isize, const 0_isize];
        _80 = &_81;
        _78 = (move _79, move _80);
        _82 = (_78.0: &[isize; 3]);
        _83 = (_78.1: &[isize; 3]);
        _85 = <[isize; 3] as PartialEq>::eq(_82, _83) -> bb18;
    }

    bb18: {
        _84 = Not(move _85);
        switchInt(move _84) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _86 = core::panicking::AssertKind::Eq;
        _88 = Option::<Arguments<'_>>::None;
        _87 = core::panicking::assert_failed::<[isize; 3], [isize; 3]>(move _86, _82, _83, move _88);
    }

    bb20: {
        _91 = E3::B;
        _90 = &_91;
        _89 = discriminant((*_90));
        _92 = const 1_usize;
        _93 = const 3_usize;
        _94 = Lt(_92, _93);
        assert(move _94, "index out of bounds: the length is {} but the index is {}", move _93, _92) -> bb21;
    }

    bb21: {
        _71[_92] = move _89;
        _96 = &_71;
        _98 = [const 0_isize, const 100_isize, const 0_isize];
        _97 = &_98;
        _95 = (move _96, move _97);
        _99 = (_95.0: &[isize; 3]);
        _100 = (_95.1: &[isize; 3]);
        _102 = <[isize; 3] as PartialEq>::eq(_99, _100) -> bb22;
    }

    bb22: {
        _101 = Not(move _102);
        switchInt(move _101) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _103 = core::panicking::AssertKind::Eq;
        _105 = Option::<Arguments<'_>>::None;
        _104 = core::panicking::assert_failed::<[isize; 3], [isize; 3]>(move _103, _99, _100, move _105);
    }

    bb24: {
        _106 = [const 0_i128, const 0_i128, const 0_i128];
        _109 = E4::A;
        _108 = &_109;
        _107 = discriminant((*_108));
        _110 = const 1_usize;
        _111 = const 3_usize;
        _112 = Lt(_110, _111);
        assert(move _112, "index out of bounds: the length is {} but the index is {}", move _111, _110) -> bb25;
    }

    bb25: {
        _106[_110] = move _107;
        _114 = &_106;
        _116 = [const 0_i128, const 1306945789274585225_i128, const 0_i128];
        _115 = &_116;
        _113 = (move _114, move _115);
        _117 = (_113.0: &[i128; 3]);
        _118 = (_113.1: &[i128; 3]);
        _120 = <[i128; 3] as PartialEq>::eq(_117, _118) -> bb26;
    }

    bb26: {
        _119 = Not(move _120);
        switchInt(move _119) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _121 = core::panicking::AssertKind::Eq;
        _123 = Option::<Arguments<'_>>::None;
        _122 = core::panicking::assert_failed::<[i128; 3], [i128; 3]>(move _121, _117, _118, move _123);
    }

    bb28: {
        _126 = E4::B;
        _125 = &_126;
        _124 = discriminant((*_125));
        _127 = const 1_usize;
        _128 = const 3_usize;
        _129 = Lt(_127, _128);
        assert(move _129, "index out of bounds: the length is {} but the index is {}", move _128, _127) -> bb29;
    }

    bb29: {
        _106[_127] = move _124;
        _131 = &_106;
        _133 = [const 0_i128, const -1306945789274585225_i128, const 0_i128];
        _132 = &_133;
        _130 = (move _131, move _132);
        _134 = (_130.0: &[i128; 3]);
        _135 = (_130.1: &[i128; 3]);
        _137 = <[i128; 3] as PartialEq>::eq(_134, _135) -> bb30;
    }

    bb30: {
        _136 = Not(move _137);
        switchInt(move _136) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _138 = core::panicking::AssertKind::Eq;
        _140 = Option::<Arguments<'_>>::None;
        _139 = core::panicking::assert_failed::<[i128; 3], [i128; 3]>(move _138, _134, _135, move _140);
    }

    bb32: {
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

main::{constant#2}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

main::{constant#3}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}
