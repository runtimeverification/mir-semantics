// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn p_foo(_1: T) -> () {
    debug _pinned => _1;
    let mut _0: ();

    bb0: {
        drop(_1) -> bb1;
    }

    bb1: {
        return;
    }
}

fn s_foo(_1: T) -> () {
    debug _shared => _1;
    let mut _0: ();

    bb0: {
        drop(_1) -> bb1;
    }

    bb1: {
        return;
    }
}

fn u_foo(_1: T) -> () {
    debug _unique => _1;
    let mut _0: ();

    bb0: {
        drop(_1) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/type-param-constraints.rs:15:1: 15:16>::drop(_1: &mut r) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn r(_1: isize) -> r {
    debug i => _1;
    let mut _0: r;

    bb0: {
        _0 = r { i: _1 };
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: r;
    let _3: ();
    let mut _4: std::boxed::Box<r>;
    let mut _5: r;
    let _6: ();
    let mut _7: std::boxed::Box<i32>;
    let _8: ();
    let _9: ();
    let mut _10: std::boxed::Box<i32>;
    let _11: ();
    let _12: ();
    let mut _13: std::boxed::Box<i32>;
    let _14: ();

    bb0: {
        _2 = r(const 10_isize) -> bb1;
    }

    bb1: {
        _1 = p_foo::<r>(move _2) -> bb2;
    }

    bb2: {
        _5 = r(const 10_isize) -> bb3;
    }

    bb3: {
        _4 = Box::<r>::new(move _5) -> bb4;
    }

    bb4: {
        _3 = p_foo::<Box<r>>(move _4) -> bb5;
    }

    bb5: {
        _7 = Box::<i32>::new(const 10_i32) -> bb6;
    }

    bb6: {
        _6 = p_foo::<Box<i32>>(move _7) -> bb7;
    }

    bb7: {
        _8 = p_foo::<i32>(const 10_i32) -> bb8;
    }

    bb8: {
        _10 = Box::<i32>::new(const 10_i32) -> bb9;
    }

    bb9: {
        _9 = s_foo::<Box<i32>>(move _10) -> bb10;
    }

    bb10: {
        _11 = s_foo::<i32>(const 10_i32) -> bb11;
    }

    bb11: {
        _13 = Box::<i32>::new(const 10_i32) -> bb12;
    }

    bb12: {
        _12 = u_foo::<Box<i32>>(move _13) -> bb13;
    }

    bb13: {
        _14 = u_foo::<i32>(const 10_i32) -> bb14;
    }

    bb14: {
        return;
    }
}
