// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: i32;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: &*const i32;
    let mut _8: &*const i32;
    let _9: *const i32;
    let mut _10: !;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: *const i32;
    let mut _14: *const i32;
    let mut _15: !;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: i32;
    let mut _19: i32;
    let mut _20: !;
    scope 1 {
        debug x => _1;
        let _2: *const i32;
        scope 2 {
            debug c_p => _2;
            let _3: *mut i32;
            scope 3 {
                debug m_p => _3;
                let _4: &i32;
                scope 4 {
                    debug i_r => _4;
                    scope 5 {
                        let mut _21: *const ();
                        let mut _22: usize;
                        let mut _23: usize;
                        let mut _24: usize;
                        let mut _25: usize;
                        let mut _26: bool;
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const 123_i32;
        _2 = &raw const _1;
        _3 = &raw mut _1;
        _4 = &_1;
        _7 = &_2;
        _9 = &raw const (*_4);
        _8 = &_9;
        _6 = <*const i32 as PartialEq>::eq(move _7, move _8) -> bb1;
    }

    bb1: {
        _5 = Not(move _6);
        switchInt(move _5) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = core::panicking::panic(const "assertion failed: c_p == i_r");
    }

    bb3: {
        _13 = _2;
        _14 = _3 as *const i32 (Pointer(MutToConstPointer));
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _15 = core::panicking::panic(const "assertion failed: c_p == m_p");
    }

    bb5: {
        _21 = _2 as *const () (PtrToPtr);
        _22 = _21 as usize (Transmute);
        _23 = AlignOf(i32);
        _24 = Sub(_23, const 1_usize);
        _25 = BitAnd(_22, _24);
        _26 = Eq(_25, const 0_usize);
        assert(_26, "misaligned pointer dereference: address must be a multiple of {} but is {}", _23, _22) -> [success: bb8, unwind unreachable];
    }

    bb6: {
        _20 = core::panicking::panic(const "assertion failed: *c_p == *i_r");
    }

    bb7: {
        return;
    }

    bb8: {
        _18 = (*_2);
        _19 = (*_4);
        _17 = Eq(move _18, move _19);
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb7, otherwise: bb6];
    }
}
