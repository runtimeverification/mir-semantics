// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const PAIR_REF: &(i32, i64) = {
    let mut _0: &(i32, i64);
    let _1: &(i32, i64);
    let _2: (i32, i64);

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = (const 1_i32, const 2_i64);
        _1 = &_2;
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

const ARRAY_REF: &[i32; 2] = {
    let mut _0: &[i32; 2];
    let _1: &[i32; 2];
    let _2: [i32; 2];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = [const 3_i32, const 4_i32];
        _1 = &_2;
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

ARRAY_REF::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

const SLICE_REF: &[i32] = {
    let mut _0: &[i32];
    let mut _1: &[i32; 2];
    let _2: &[i32; 2];
    let _3: [i32; 2];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = [const 5_i32, const 6_i32];
        _2 = &_3;
        _1 = &(*_2);
        _0 = move _1 as &[i32] (Pointer(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: *const (i32, i64);
    let _2: &(i32, i64);
    let _4: &(i32, i64);
    let _6: &[i32; 2];
    let _8: &[i32; 2];
    let _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let _13: &[i32];
    let _15: &[i32];
    let _16: usize;
    let mut _17: usize;
    let mut _18: bool;
    let _22: &[i32; 2];
    let _24: &[i32; 2];
    let _25: usize;
    let mut _26: usize;
    let mut _27: bool;
    scope 1 {
        debug deref_ref => _1;
        let _3: *const i32;
        scope 2 {
            debug field_deref_ref => _3;
            let _5: *const [i32; 2];
            scope 3 {
                debug deref_ref => _5;
                let _7: *const i32;
                scope 4 {
                    debug index_deref_ref => _7;
                    let _12: *const [i32];
                    scope 5 {
                        debug deref_ref => _12;
                        let _14: *const i32;
                        scope 6 {
                            debug index_deref_ref => _14;
                            let _19: i32;
                            scope 7 {
                                debug x => _19;
                                let _20: *const i32;
                                scope 8 {
                                    debug ascribe_ref => _20;
                                    let _21: *const [i32; 2];
                                    scope 9 {
                                        debug ascribe_deref => _21;
                                        let _23: *const i32;
                                        scope 10 {
                                            debug ascribe_index_deref => _23;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = const _;
        _1 = &raw const (*_2);
        _4 = const _;
        _3 = &raw const ((*_4).0: i32);
        _6 = const _;
        _5 = &raw const (*_6);
        _8 = const _;
        _9 = const 0_usize;
        _10 = const 2_usize;
        _11 = Lt(_9, _10);
        assert(move _11, "index out of bounds: the length is {} but the index is {}", move _10, _9) -> bb1;
    }

    bb1: {
        _7 = &raw const (*_8)[_9];
        _13 = const _;
        _12 = &raw const (*_13);
        _15 = const _;
        _16 = const 1_usize;
        _17 = Len((*_15));
        _18 = Lt(_16, _17);
        assert(move _18, "index out of bounds: the length is {} but the index is {}", move _17, _16) -> bb2;
    }

    bb2: {
        _14 = &raw const (*_15)[_16];
        _19 = const 0_i32;
        _20 = &raw const _19;
        _22 = const _;
        _21 = &raw const (*_22);
        _24 = const _;
        _25 = const 0_usize;
        _26 = const 2_usize;
        _27 = Lt(_25, _26);
        assert(move _27, "index out of bounds: the length is {} but the index is {}", move _26, _25) -> bb3;
    }

    bb3: {
        _23 = &raw const (*_24)[_25];
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}
