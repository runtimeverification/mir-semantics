// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static TRACKER: AtomicU8 = {
    let mut _0: std::sync::atomic::AtomicU8;

    bb0: {
        ConstEvalCounter;
        _0 = AtomicU8::new(const 0_u8) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/let-else/let-else-temporary-lifetime.rs:10:10: 10:17>::default() -> Droppy {
    let mut _0: Droppy;
    let mut _1: u32;

    bb0: {
        _1 = <u32 as Default>::default() -> bb1;
    }

    bb1: {
        _0 = Droppy { inner: move _1 };
        return;
    }
}

fn <impl at ui/let-else/let-else-temporary-lifetime.rs:15:1: 15:21>::drop(_1: &mut Droppy) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let _3: &std::sync::atomic::AtomicU8;
    let mut _4: std::sync::atomic::Ordering;
    let _5: ();
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str];
    let _8: &[&str; 1];
    let _9: [&str; 1];

    bb0: {
        _3 = const {alloc1: &AtomicU8};
        _4 = Release;
        _2 = AtomicU8::store(_3, const 1_u8, move _4) -> bb1;
    }

    bb1: {
        _9 = [const "I've been dropped\n"];
        _8 = &_9;
        _7 = _8 as &[&str] (Pointer(Unsize));
        _6 = Arguments::<'_>::new_const(move _7) -> bb2;
    }

    bb2: {
        _5 = _print(move _6) -> bb3;
    }

    bb3: {
        return;
    }
}

alloc1 (static: TRACKER, size: 1, align: 1) {
    00                                              â”‚ .
}

fn foo(_1: &str) -> Result<impl std::fmt::Display + '_, ()> {
    debug x => _1;
    let mut _0: std::result::Result<impl std::fmt::Display + '_, ()>;

    bb0: {
        _0 = Result::<&str, ()>::Ok(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&u8, &u8);
    let mut _2: &u8;
    let _3: u8;
    let _4: &std::sync::atomic::AtomicU8;
    let mut _5: std::sync::atomic::Ordering;
    let mut _6: &u8;
    let _7: u8;
    let _8: &u8;
    let _9: &u8;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: u8;
    let mut _13: u8;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: Droppy;
    let mut _18: (&u8, &u8);
    let mut _19: &u8;
    let _20: u8;
    let _21: &std::sync::atomic::AtomicU8;
    let mut _22: std::sync::atomic::Ordering;
    let mut _23: &u8;
    let _24: u8;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: u8;
    let mut _30: u8;
    let _32: !;
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>;
    let _34: ();
    let mut _35: std::fmt::Arguments<'_>;
    let mut _36: &[&str];
    let _37: &[&str; 1];
    let _38: [&str; 1];
    let mut _40: !;
    let mut _41: &mut u32;
    let mut _42: main::Foo<'_>;
    let mut _43: &mut u32;
    let mut _45: !;
    let mut _47: std::result::Result<impl std::fmt::Display + '_, ()>;
    let mut _48: &str;
    let _49: &str;
    let _50: &std::string::String;
    let mut _51: isize;
    let mut _52: (&std::string::String, &std::string::String);
    let mut _53: &std::string::String;
    let _54: std::string::String;
    let mut _55: &impl std::fmt::Display + '_;
    let mut _56: &std::string::String;
    let mut _59: bool;
    let mut _60: bool;
    let _62: !;
    let mut _63: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _65: !;
    let mut _66: &i32;
    let mut _67: &std::rc::Rc<i32>;
    let _68: std::rc::Rc<i32>;
    let mut _69: &std::rc::Rc<i32>;
    let _70: i32;
    let mut _71: std::result::Result<i32, std::rc::Rc<i32>>;
    let mut _72: std::rc::Rc<i32>;
    let mut _75: bool;
    let mut _76: i32;
    let mut _77: std::result::Result<i32, std::rc::Rc<i32>>;
    let mut _78: std::rc::Rc<i32>;
    let mut _79: isize;
    let mut _81: std::rc::Rc<i32>;
    let mut _82: !;
    let mut _83: &i32;
    let mut _84: &std::rc::Rc<i32>;
    let _85: std::rc::Rc<i32>;
    let mut _86: &std::rc::Rc<i32>;
    let _87: ();
    let _89: i32;
    let mut _90: std::result::Result<i32, std::rc::Rc<i32>>;
    let mut _91: std::rc::Rc<i32>;
    let mut _92: &i32;
    let mut _93: &std::rc::Rc<i32>;
    let _94: std::rc::Rc<i32>;
    let mut _95: &std::rc::Rc<i32>;
    let _96: !;
    let mut _97: &mut u32;
    let mut _98: bool;
    let mut _99: bool;
    let mut _100: bool;
    scope 1 {
        debug left_val => _8;
        debug right_val => _9;
        let _14: core::panicking::AssertKind;
        scope 2 {
            debug kind => _14;
        }
    }
    scope 3 {
        let _25: &u8;
        let _26: &u8;
        let mut _39: u32;
        let _44: std::string::String;
        let _64: std::rc::Rc<i32>;
        let mut _73: std::rc::Rc<i32>;
        let _88: std::rc::Rc<i32>;
        scope 4 {
            debug left_val => _25;
            debug right_val => _26;
            let _31: core::panicking::AssertKind;
            scope 5 {
                debug kind => _31;
            }
        }
        scope 6 {
            debug foo => _39;
            scope 7 {
            }
        }
        scope 8 {
            debug x => _44;
            let _46: impl std::fmt::Display + '_;
            scope 9 {
                debug s => _46;
                let _57: &std::string::String;
                let _58: &std::string::String;
                scope 10 {
                    debug left_val => _57;
                    debug right_val => _58;
                    let _61: core::panicking::AssertKind;
                    scope 11 {
                        debug kind => _61;
                    }
                }
            }
        }
        scope 12 {
            debug rc => _64;
            scope 13 {
            }
        }
        scope 14 {
            debug rc => _73;
            let mut _74: i32;
            scope 15 {
                debug i => _74;
                scope 16 {
                    debug v => _80;
                    let _80: i32;
                }
                scope 17 {
                }
            }
        }
        scope 18 {
            debug rc => _88;
            scope 19 {
            }
        }
    }

    bb0: {
        _100 = const false;
        _99 = const false;
        _98 = const false;
        _4 = const {alloc1: &AtomicU8};
        _5 = Acquire;
        _3 = AtomicU8::load(_4, move _5) -> bb1;
    }

    bb1: {
        _2 = &_3;
        _7 = const 0_u8;
        _6 = &_7;
        _1 = (move _2, move _6);
        _8 = (_1.0: &u8);
        _9 = (_1.1: &u8);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<u8, u8>(move _14, _8, _9, move _16);
    }

    bb3: {
        _17 = <Droppy as Default>::default() -> bb4;
    }

    bb4: {
        switchInt((_17.0: u32)) -> [0: bb5, otherwise: bb6];
    }

    bb5: {
        drop(_17) -> bb7;
    }

    bb6: {
        drop(_17) -> bb62;
    }

    bb7: {
        _21 = const {alloc1: &AtomicU8};
        _22 = Acquire;
        _20 = AtomicU8::load(_21, move _22) -> bb8;
    }

    bb8: {
        _19 = &_20;
        _24 = const 1_u8;
        _23 = &_24;
        _18 = (move _19, move _23);
        _25 = (_18.0: &u8);
        _26 = (_18.1: &u8);
        _29 = (*_25);
        _30 = (*_26);
        _28 = Eq(move _29, move _30);
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _31 = core::panicking::AssertKind::Eq;
        _33 = Option::<Arguments<'_>>::None;
        _32 = core::panicking::assert_failed::<u8, u8>(move _31, _25, _26, move _33);
    }

    bb10: {
        _38 = [const "Should have dropped ðŸ‘†\n"];
        _37 = &_38;
        _36 = _37 as &[&str] (Pointer(Unsize));
        _35 = Arguments::<'_>::new_const(move _36) -> bb11;
    }

    bb11: {
        _34 = _print(move _35) -> bb12;
    }

    bb12: {
        _39 = const 0_u32;
        _43 = &mut _39;
        _42 = Foo::<'_>(_43);
        _97 = deref_copy (_42.0: &mut u32);
        switchInt((*_97)) -> [0: bb13, otherwise: bb14];
    }

    bb13: {
        drop(_42) -> bb16;
    }

    bb14: {
        drop(_42) -> bb15;
    }

    bb15: {
        _41 = &mut _39;
        (*_41) = const 1_u32;
        _40 = core::panicking::panic(const "not yet implemented");
    }

    bb16: {
        _44 = <String as From<&str>>::from(const "Hey") -> bb17;
    }

    bb17: {
        _50 = &_44;
        _49 = <String as Deref>::deref(_50) -> [return: bb18, unwind: bb68];
    }

    bb18: {
        _48 = _49;
        _47 = foo(move _48) -> [return: bb19, unwind: bb68];
    }

    bb19: {
        _51 = discriminant(_47);
        switchInt(move _51) -> [0: bb20, otherwise: bb21];
    }

    bb20: {
        _46 = move ((_47 as Ok).0: impl std::fmt::Display + '_);
        _55 = &_46;
        _54 = <impl std::fmt::Display + '_ as ToString>::to_string(move _55) -> [return: bb22, unwind: bb68];
    }

    bb21: {
        _45 = begin_panic::<&str>(const "explicit panic") -> bb68;
    }

    bb22: {
        _53 = &_54;
        _56 = &_44;
        _52 = (move _53, move _56);
        _57 = (_52.0: &std::string::String);
        _58 = (_52.1: &std::string::String);
        _60 = <String as PartialEq>::eq(_57, _58) -> [return: bb23, unwind: bb67];
    }

    bb23: {
        _59 = Not(move _60);
        switchInt(move _59) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _61 = core::panicking::AssertKind::Eq;
        _63 = Option::<Arguments<'_>>::None;
        _62 = core::panicking::assert_failed::<String, String>(move _61, _57, _58, move _63) -> bb67;
    }

    bb25: {
        drop(_54) -> [return: bb26, unwind: bb68];
    }

    bb26: {
        drop(_44) -> bb27;
    }

    bb27: {
        _100 = const true;
        _64 = Rc::<i32>::new(const 0_i32) -> bb28;
    }

    bb28: {
        _69 = &_64;
        _68 = <Rc<i32> as Clone>::clone(move _69) -> [return: bb29, unwind: bb75];
    }

    bb29: {
        _67 = &_68;
        _66 = <Rc<i32> as Deref>::deref(move _67) -> [return: bb30, unwind: bb66];
    }

    bb30: {
        switchInt((*_66)) -> [0: bb31, otherwise: bb32];
    }

    bb31: {
        drop(_68) -> [return: bb34, unwind: bb75];
    }

    bb32: {
        drop(_68) -> [return: bb33, unwind: bb75];
    }

    bb33: {
        _65 = core::panicking::panic(const "internal error: entered unreachable code") -> bb75;
    }

    bb34: {
        _100 = const false;
        _72 = move _64;
        _71 = Rc::<i32>::try_unwrap(move _72) -> [return: bb35, unwind: bb75];
    }

    bb35: {
        _70 = Result::<i32, Rc<i32>>::unwrap(move _71) -> [return: bb36, unwind: bb75];
    }

    bb36: {
        _100 = const false;
        _99 = const true;
        _73 = Rc::<i32>::new(const 0_i32) -> bb37;
    }

    bb37: {
        _74 = const 0_i32;
        goto -> bb38;
    }

    bb38: {
        _76 = _74;
        _75 = Gt(move _76, const 3_i32);
        switchInt(move _75) -> [0: bb40, otherwise: bb39];
    }

    bb39: {
        drop(_73) -> bb51;
    }

    bb40: {
        _86 = &_73;
        _85 = <Rc<i32> as Clone>::clone(move _86) -> [return: bb46, unwind: bb73];
    }

    bb41: {
        _79 = discriminant(_77);
        switchInt(move _79) -> [0: bb42, otherwise: bb44];
    }

    bb42: {
        _80 = ((_77 as Ok).0: i32);
        _81 = Rc::<i32>::new(_80) -> [return: bb43, unwind: bb65];
    }

    bb43: {
        _99 = const true;
        _73 = move _81;
        drop(_77) -> [return: bb45, unwind: bb73];
    }

    bb44: {
        _82 = begin_panic::<&str>(const "explicit panic") -> bb65;
    }

    bb45: {
        _74 = Add(_74, const 1_i32);
        goto -> bb38;
    }

    bb46: {
        _84 = &_85;
        _83 = <Rc<i32> as Deref>::deref(move _84) -> [return: bb47, unwind: bb64];
    }

    bb47: {
        switchInt((*_83)) -> [1: bb48, otherwise: bb49];
    }

    bb48: {
        drop(_85) -> [return: bb38, unwind: bb73];
    }

    bb49: {
        drop(_85) -> [return: bb50, unwind: bb73];
    }

    bb50: {
        _99 = const false;
        _78 = move _73;
        _77 = Rc::<i32>::try_unwrap(move _78) -> [return: bb41, unwind: bb73];
    }

    bb51: {
        _99 = const false;
        _87 = must_pass() -> bb52;
    }

    bb52: {
        _98 = const true;
        _88 = Rc::<i32>::new(const 0_i32) -> bb53;
    }

    bb53: {
        _95 = &_88;
        _94 = <Rc<i32> as Clone>::clone(move _95) -> [return: bb56, unwind: bb71];
    }

    bb54: {
        _89 = Result::<i32, Rc<i32>>::unwrap(move _90) -> [return: bb55, unwind: bb71];
    }

    bb55: {
        _98 = const false;
        goto -> bb62;
    }

    bb56: {
        _93 = &_94;
        _92 = <Rc<i32> as Deref>::deref(move _93) -> [return: bb57, unwind: bb63];
    }

    bb57: {
        switchInt((*_92)) -> [1: bb58, otherwise: bb59];
    }

    bb58: {
        drop(_94) -> [return: bb61, unwind: bb71];
    }

    bb59: {
        drop(_94) -> [return: bb60, unwind: bb71];
    }

    bb60: {
        _98 = const false;
        _91 = move _88;
        _90 = Rc::<i32>::try_unwrap(move _91) -> [return: bb54, unwind: bb71];
    }

    bb61: {
        _96 = core::panicking::panic(const "internal error: entered unreachable code") -> bb71;
    }

    bb62: {
        return;
    }

    bb63 (cleanup): {
        drop(_94) -> [return: bb71, unwind terminate];
    }

    bb64 (cleanup): {
        drop(_85) -> [return: bb73, unwind terminate];
    }

    bb65 (cleanup): {
        drop(_77) -> [return: bb73, unwind terminate];
    }

    bb66 (cleanup): {
        drop(_68) -> [return: bb75, unwind terminate];
    }

    bb67 (cleanup): {
        drop(_54) -> [return: bb68, unwind terminate];
    }

    bb68 (cleanup): {
        drop(_44) -> [return: bb69, unwind terminate];
    }

    bb69 (cleanup): {
        resume;
    }

    bb70 (cleanup): {
        drop(_88) -> [return: bb69, unwind terminate];
    }

    bb71 (cleanup): {
        switchInt(_98) -> [0: bb69, otherwise: bb70];
    }

    bb72 (cleanup): {
        drop(_73) -> [return: bb69, unwind terminate];
    }

    bb73 (cleanup): {
        switchInt(_99) -> [0: bb69, otherwise: bb72];
    }

    bb74 (cleanup): {
        drop(_64) -> [return: bb69, unwind terminate];
    }

    bb75 (cleanup): {
        switchInt(_100) -> [0: bb69, otherwise: bb74];
    }
}

alloc1 (static: TRACKER, size: 1, align: 1) {
    00                                              â”‚ .
}

fn main::<impl at ui/let-else/let-else-temporary-lifetime.rs:36:9: 36:34>::drop(_1: &mut Foo<'_>) -> () {
    debug self => _1;
    let mut _0: ();
    let mut _2: &mut u32;

    bb0: {
        _2 = deref_copy ((*_1).0: &mut u32);
        (*_2) = const 0_u32;
        return;
    }
}

fn must_pass() -> () {
    let mut _0: ();
    let _1: std::rc::Rc<()>;
    let _2: ();
    let mut _3: std::result::Result<(), std::rc::Rc<()>>;
    let mut _4: std::rc::Rc<()>;
    let mut _5: &std::option::Option<std::rc::Rc<()>>;
    let _6: std::option::Option<std::rc::Rc<()>>;
    let mut _7: std::rc::Rc<()>;
    let _8: &std::rc::Rc<()>;
    let mut _9: isize;
    let _10: !;
    let mut _11: bool;
    scope 1 {
        debug rc => _1;
        scope 2 {
        }
    }

    bb0: {
        _11 = const false;
        _11 = const true;
        _1 = Rc::<()>::new(const ()) -> bb1;
    }

    bb1: {
        _8 = &_1;
        _7 = <Rc<()> as Clone>::clone(_8) -> [return: bb4, unwind: bb11];
    }

    bb2: {
        _2 = Result::<(), Rc<()>>::unwrap(move _3) -> [return: bb3, unwind: bb11];
    }

    bb3: {
        _11 = const false;
        return;
    }

    bb4: {
        _6 = Option::<Rc<()>>::Some(move _7);
        _5 = &_6;
        _9 = discriminant((*_5));
        switchInt(move _9) -> [0: bb5, otherwise: bb6];
    }

    bb5: {
        _10 = core::panicking::panic(const "internal error: entered unreachable code") -> bb8;
    }

    bb6: {
        drop(_6) -> [return: bb7, unwind: bb11];
    }

    bb7: {
        _11 = const false;
        _4 = move _1;
        _3 = Rc::<()>::try_unwrap(move _4) -> [return: bb2, unwind: bb11];
    }

    bb8 (cleanup): {
        drop(_6) -> [return: bb11, unwind terminate];
    }

    bb9 (cleanup): {
        resume;
    }

    bb10 (cleanup): {
        drop(_1) -> [return: bb9, unwind terminate];
    }

    bb11 (cleanup): {
        switchInt(_11) -> [0: bb9, otherwise: bb10];
    }
}

fn Foo(_1: &mut u32) -> Foo<'_> {
    let mut _0: main::Foo<'_>;

    bb0: {
        _0 = Foo::<'_>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: &mut u32) -> Foo<'_> {
    let mut _0: main::Foo<'_>;

    bb0: {
        _0 = Foo::<'_>(move _1);
        return;
    }
}
