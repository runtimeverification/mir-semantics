// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: &str) -> Result<impl Debug + '_, ()> {
    debug x => _1;
    let mut _0: std::result::Result<impl std::fmt::Debug + '_, ()>;

    bb0: {
        _0 = Result::<&str, ()>::Ok(_1);
        return;
    }
}

fn let_else() -> () {
    let mut _0: ();
    let _1: std::string::String;
    let mut _2: std::result::Result<impl std::fmt::Debug + '_, ()>;
    let mut _3: &str;
    let _4: &str;
    let _5: &std::string::String;
    let mut _6: isize;
    scope 1 {
        debug x => _1;
        scope 2 {
        }
    }

    bb0: {
        _1 = <String as From<&str>>::from(const "Hey") -> bb1;
    }

    bb1: {
        _5 = &_1;
        _4 = <String as Deref>::deref(_5) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _3 = _4;
        _2 = foo(move _3) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _6 = discriminant(_2);
        switchInt(move _6) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        drop(_1) -> bb6;
    }

    bb5: {
        drop(_1) -> bb6;
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_1) -> [return: bb8, unwind terminate];
    }

    bb8 (cleanup): {
        resume;
    }
}

fn if_let() -> () {
    let mut _0: ();
    let _1: std::string::String;
    let mut _2: std::result::Result<impl std::fmt::Debug + '_, ()>;
    let mut _3: &str;
    let _4: &str;
    let _5: &std::string::String;
    let mut _6: isize;
    scope 1 {
        debug x => _1;
        scope 2 {
        }
        scope 3 {
            debug s => _7;
            let _7: impl std::fmt::Debug + '_;
        }
    }

    bb0: {
        _1 = <String as From<&str>>::from(const "Hey") -> bb1;
    }

    bb1: {
        _5 = &_1;
        _4 = <String as Deref>::deref(_5) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _3 = _4;
        _2 = foo(move _3) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _6 = discriminant(_2);
        switchInt(move _6) -> [0: bb4, otherwise: bb5];
    }

    bb4: {
        _7 = move ((_2 as Ok).0: impl std::fmt::Debug + '_);
        drop(_1) -> bb6;
    }

    bb5: {
        drop(_1) -> bb6;
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_1) -> [return: bb8, unwind terminate];
    }

    bb8 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();

    bb0: {
        _1 = let_else() -> bb1;
    }

    bb1: {
        _2 = if_let() -> bb2;
    }

    bb2: {
        return;
    }
}
