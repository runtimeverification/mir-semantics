// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/let-else/let-else-drop-order.rs:25:10: 25:15>::clone(_1: &DropAccountant) -> DropAccountant {
    debug self => _1;
    let mut _0: DropAccountant;
    let mut _2: std::rc::Rc<std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>>;
    let _3: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>>;

    bb0: {
        _3 = &((*_1).0: std::rc::Rc<std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>>);
        _2 = <Rc<RefCell<Vec<Vec<String>>>> as Clone>::clone(_3) -> bb1;
    }

    bb1: {
        _0 = DropAccountant(move _2);
        return;
    }
}

fn <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::new() -> DropAccountant {
    let mut _0: DropAccountant;
    let mut _1: std::rc::Rc<std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>>;

    bb0: {
        _1 = <Rc<RefCell<Vec<Vec<String>>>> as Default>::default() -> bb1;
    }

    bb1: {
        _0 = DropAccountant(move _1);
        return;
    }
}

fn <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::build_droppy(_1: &DropAccountant, _2: u32) -> Droppy<u32> {
    debug self => _1;
    debug v => _2;
    let mut _0: Droppy<u32>;
    let mut _3: DropAccountant;

    bb0: {
        _3 = <DropAccountant as Clone>::clone(_1) -> bb1;
    }

    bb1: {
        _0 = Droppy::<u32>(move _3, _2);
        return;
    }
}

fn <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::build_droppy_enum_none(_1: &DropAccountant, _2: u32) -> ((), DroppyEnum<u32>) {
    debug self => _1;
    debug _v => _2;
    let mut _0: ((), DroppyEnum<u32>);
    let mut _3: DroppyEnum<u32>;
    let mut _4: DropAccountant;

    bb0: {
        _4 = <DropAccountant as Clone>::clone(_1) -> bb1;
    }

    bb1: {
        _3 = DroppyEnum::<u32>::None(move _4);
        _0 = (const (), move _3);
        return;
    }
}

fn <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::new_list(_1: &DropAccountant, _2: impl ToString) -> () {
    debug self => _1;
    debug s => _2;
    let mut _0: ();
    let _3: ();
    let mut _4: &mut std::vec::Vec<std::vec::Vec<std::string::String>>;
    let mut _5: &mut std::vec::Vec<std::vec::Vec<std::string::String>>;
    let mut _6: &mut std::cell::RefMut<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let mut _7: std::cell::RefMut<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let mut _8: &std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let _9: &std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let mut _10: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>>;
    let mut _11: std::vec::Vec<std::string::String>;
    let mut _12: std::boxed::Box<[std::string::String]>;
    let mut _13: std::boxed::Box<[std::string::String; 1]>;
    let mut _14: usize;
    let mut _15: usize;
    let mut _16: *mut u8;
    let mut _17: std::boxed::Box<[std::string::String; 1]>;
    let mut _18: std::string::String;
    let mut _19: &impl ToString;
    let mut _20: &mut std::boxed::Box<[std::string::String; 1]>;
    let mut _21: ();
    let mut _22: *const [std::string::String; 1];
    let mut _23: *const ();
    let mut _24: usize;
    let mut _25: usize;
    let mut _26: usize;
    let mut _27: usize;
    let mut _28: bool;
    scope 1 {
    }

    bb0: {
        _10 = &((*_1).0: std::rc::Rc<std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>>);
        _9 = <Rc<RefCell<Vec<Vec<String>>>> as Deref>::deref(move _10) -> [return: bb1, unwind: bb11];
    }

    bb1: {
        _8 = _9;
        _7 = RefCell::<Vec<Vec<String>>>::borrow_mut(move _8) -> [return: bb2, unwind: bb11];
    }

    bb2: {
        _6 = &mut _7;
        _5 = <RefMut<'_, Vec<Vec<String>>> as DerefMut>::deref_mut(move _6) -> [return: bb3, unwind: bb10];
    }

    bb3: {
        _4 = _5;
        _14 = SizeOf([std::string::String; 1]);
        _15 = AlignOf([std::string::String; 1]);
        _16 = alloc::alloc::exchange_malloc(move _14, move _15) -> [return: bb4, unwind: bb10];
    }

    bb4: {
        _17 = ShallowInitBox(move _16, [std::string::String; 1]);
        _19 = &_2;
        _18 = <impl ToString as ToString>::to_string(move _19) -> [return: bb5, unwind: bb13];
    }

    bb5: {
        _22 = (((_17.0: std::ptr::Unique<[std::string::String; 1]>).0: std::ptr::NonNull<[std::string::String; 1]>).0: *const [std::string::String; 1]);
        _23 = _22 as *const () (PtrToPtr);
        _24 = _23 as usize (Transmute);
        _25 = AlignOf(std::string::String);
        _26 = Sub(_25, const 1_usize);
        _27 = BitAnd(_24, _26);
        _28 = Eq(_27, const 0_usize);
        assert(_28, "misaligned pointer dereference: address must be a multiple of {} but is {}", _25, _24) -> [success: bb14, unwind unreachable];
    }

    bb6: {
        _3 = Vec::<Vec<String>>::push(move _4, move _11) -> [return: bb7, unwind: bb10];
    }

    bb7: {
        drop(_7) -> [return: bb8, unwind: bb11];
    }

    bb8: {
        drop(_2) -> bb9;
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_7) -> [return: bb11, unwind terminate];
    }

    bb11 (cleanup): {
        drop(_2) -> [return: bb12, unwind terminate];
    }

    bb12 (cleanup): {
        resume;
    }

    bb13 (cleanup): {
        _20 = &mut _17;
        _21 = <Box<[String; 1]> as Drop>::drop(move _20) -> [return: bb15, unwind terminate];
    }

    bb14: {
        (*_22) = [move _18];
        _13 = move _17;
        _12 = move _13 as std::boxed::Box<[std::string::String]> (Pointer(Unsize));
        _11 = slice::<impl [String]>::into_vec::<std::alloc::Global>(move _12) -> [return: bb6, unwind: bb10];
    }

    bb15 (cleanup): {
        goto -> bb10;
    }
}

fn <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::push(_1: &DropAccountant, _2: impl ToString) -> () {
    debug self => _1;
    debug s => _2;
    let mut _0: ();
    let _3: std::string::String;
    let mut _4: &impl ToString;
    let mut _6: &std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let _7: &std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let mut _8: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>>;
    let _9: ();
    let mut _10: &mut std::vec::Vec<std::string::String>;
    let mut _11: &mut std::vec::Vec<std::string::String>;
    let mut _12: std::option::Option<&mut std::vec::Vec<std::string::String>>;
    let mut _13: &mut [std::vec::Vec<std::string::String>];
    let mut _14: &mut [std::vec::Vec<std::string::String>];
    let mut _15: &mut std::vec::Vec<std::vec::Vec<std::string::String>>;
    let mut _16: &mut std::vec::Vec<std::vec::Vec<std::string::String>>;
    let mut _17: &mut std::cell::RefMut<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let mut _18: std::string::String;
    let mut _19: bool;
    scope 1 {
        debug s => _3;
        let mut _5: std::cell::RefMut<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>;
        scope 2 {
            debug accounts => _5;
        }
    }

    bb0: {
        _19 = const false;
        _4 = &_2;
        _3 = <impl ToString as ToString>::to_string(move _4) -> [return: bb1, unwind: bb12];
    }

    bb1: {
        _19 = const true;
        _8 = &((*_1).0: std::rc::Rc<std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>>);
        _7 = <Rc<RefCell<Vec<Vec<String>>>> as Deref>::deref(move _8) -> [return: bb2, unwind: bb15];
    }

    bb2: {
        _6 = _7;
        _5 = RefCell::<Vec<Vec<String>>>::borrow_mut(move _6) -> [return: bb3, unwind: bb15];
    }

    bb3: {
        _17 = &mut _5;
        _16 = <RefMut<'_, Vec<Vec<String>>> as DerefMut>::deref_mut(move _17) -> [return: bb4, unwind: bb11];
    }

    bb4: {
        _15 = _16;
        _14 = <Vec<Vec<String>> as DerefMut>::deref_mut(move _15) -> [return: bb5, unwind: bb11];
    }

    bb5: {
        _13 = _14;
        _12 = core::slice::<impl [Vec<String>]>::last_mut(move _13) -> [return: bb6, unwind: bb11];
    }

    bb6: {
        _11 = Option::<&mut Vec<String>>::unwrap(move _12) -> [return: bb7, unwind: bb11];
    }

    bb7: {
        _10 = _11;
        _19 = const false;
        _18 = move _3;
        _9 = Vec::<String>::push(move _10, move _18) -> [return: bb8, unwind: bb11];
    }

    bb8: {
        drop(_5) -> [return: bb9, unwind: bb15];
    }

    bb9: {
        _19 = const false;
        drop(_2) -> bb10;
    }

    bb10: {
        return;
    }

    bb11 (cleanup): {
        drop(_5) -> [return: bb15, unwind terminate];
    }

    bb12 (cleanup): {
        drop(_2) -> [return: bb13, unwind terminate];
    }

    bb13 (cleanup): {
        resume;
    }

    bb14 (cleanup): {
        drop(_3) -> [return: bb12, unwind terminate];
    }

    bb15 (cleanup): {
        switchInt(_19) -> [0: bb12, otherwise: bb14];
    }
}

fn <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::print_table(_1: &DropAccountant) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 1];
    let _6: [&str; 1];
    let _7: std::cell::Ref<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let mut _8: &std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let _9: &std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let mut _10: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>>;
    let _12: &std::vec::Vec<std::string::String>;
    let mut _13: &std::vec::Vec<std::vec::Vec<std::string::String>>;
    let _14: &std::vec::Vec<std::vec::Vec<std::string::String>>;
    let mut _15: &std::cell::Ref<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let mut _16: usize;
    let mut _17: usize;
    let mut _18: &std::vec::Vec<std::vec::Vec<std::string::String>>;
    let _19: &std::vec::Vec<std::vec::Vec<std::string::String>>;
    let mut _20: &std::cell::Ref<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let _22: &std::vec::Vec<std::string::String>;
    let mut _23: &std::vec::Vec<std::vec::Vec<std::string::String>>;
    let _24: &std::vec::Vec<std::vec::Vec<std::string::String>>;
    let mut _25: &std::cell::Ref<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let mut _26: usize;
    let mut _27: usize;
    let mut _28: &std::vec::Vec<std::vec::Vec<std::string::String>>;
    let _29: &std::vec::Vec<std::vec::Vec<std::string::String>>;
    let mut _30: &std::cell::Ref<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let mut _32: &[std::string::String];
    let _33: &[std::string::String];
    let mut _35: &[std::string::String];
    let _36: &[std::string::String];
    let mut _38: std::option::Option<usize>;
    let mut _39: std::iter::Map<std::slice::Iter<'_, &str>, [closure@ui/let-else/let-else-drop-order.rs:65:40: 65:43]>;
    let mut _40: std::slice::Iter<'_, &str>;
    let _41: &[&str];
    let mut _43: std::option::Option<usize>;
    let mut _44: std::iter::Map<std::slice::Iter<'_, std::string::String>, [closure@ui/let-else/let-else-drop-order.rs:66:53: 66:56]>;
    let mut _45: std::slice::Iter<'_, std::string::String>;
    let mut _46: &[std::string::String];
    let _47: &[std::string::String];
    let mut _48: &std::vec::Vec<std::string::String>;
    let mut _50: std::option::Option<usize>;
    let mut _51: std::iter::Map<std::slice::Iter<'_, std::string::String>, [closure@ui/let-else/let-else-drop-order.rs:67:44: 67:47]>;
    let mut _52: std::slice::Iter<'_, std::string::String>;
    let mut _53: &[std::string::String];
    let _54: &[std::string::String];
    let mut _55: &std::vec::Vec<std::string::String>;
    let _56: ();
    let mut _57: std::fmt::Arguments<'_>;
    let mut _58: &[&str];
    let _59: &[&str; 4];
    let _60: [&str; 4];
    let mut _61: &[core::fmt::rt::Argument<'_>];
    let _62: &[core::fmt::rt::Argument<'_>; 6];
    let _63: [core::fmt::rt::Argument<'_>; 6];
    let mut _64: core::fmt::rt::Argument<'_>;
    let _65: &&str;
    let _66: &str;
    let mut _67: core::fmt::rt::Argument<'_>;
    let _68: &std::string::String;
    let _69: &std::string::String;
    let mut _70: &std::vec::Vec<std::string::String>;
    let mut _71: core::fmt::rt::Argument<'_>;
    let _72: &std::string::String;
    let _73: &std::string::String;
    let mut _74: &std::vec::Vec<std::string::String>;
    let mut _75: core::fmt::rt::Argument<'_>;
    let _76: &usize;
    let mut _77: core::fmt::rt::Argument<'_>;
    let _78: &usize;
    let mut _79: core::fmt::rt::Argument<'_>;
    let _80: &usize;
    let mut _81: &[core::fmt::rt::Placeholder];
    let _82: &[core::fmt::rt::Placeholder; 3];
    let _83: [core::fmt::rt::Placeholder; 3];
    let mut _84: core::fmt::rt::Placeholder;
    let mut _85: core::fmt::rt::Alignment;
    let mut _86: core::fmt::rt::Count;
    let mut _87: core::fmt::rt::Count;
    let mut _88: core::fmt::rt::Placeholder;
    let mut _89: core::fmt::rt::Alignment;
    let mut _90: core::fmt::rt::Count;
    let mut _91: core::fmt::rt::Count;
    let mut _92: core::fmt::rt::Placeholder;
    let mut _93: core::fmt::rt::Alignment;
    let mut _94: core::fmt::rt::Count;
    let mut _95: core::fmt::rt::Count;
    let mut _96: core::fmt::rt::UnsafeArg;
    let _97: ();
    let mut _98: std::fmt::Arguments<'_>;
    let mut _99: &[&str];
    let _100: &[&str; 4];
    let _101: [&str; 4];
    let mut _102: &[core::fmt::rt::Argument<'_>];
    let _103: &[core::fmt::rt::Argument<'_>; 6];
    let _104: [core::fmt::rt::Argument<'_>; 6];
    let mut _105: core::fmt::rt::Argument<'_>;
    let _106: &&str;
    let _107: &str;
    let mut _108: core::fmt::rt::Argument<'_>;
    let _109: &&str;
    let _110: &str;
    let mut _111: core::fmt::rt::Argument<'_>;
    let _112: &&str;
    let _113: &str;
    let mut _114: core::fmt::rt::Argument<'_>;
    let _115: &usize;
    let mut _116: core::fmt::rt::Argument<'_>;
    let _117: &usize;
    let mut _118: core::fmt::rt::Argument<'_>;
    let _119: &usize;
    let mut _120: &[core::fmt::rt::Placeholder];
    let _121: &[core::fmt::rt::Placeholder; 3];
    let _122: [core::fmt::rt::Placeholder; 3];
    let mut _123: core::fmt::rt::Placeholder;
    let mut _124: core::fmt::rt::Alignment;
    let mut _125: core::fmt::rt::Count;
    let mut _126: core::fmt::rt::Count;
    let mut _127: core::fmt::rt::Placeholder;
    let mut _128: core::fmt::rt::Alignment;
    let mut _129: core::fmt::rt::Count;
    let mut _130: core::fmt::rt::Count;
    let mut _131: core::fmt::rt::Placeholder;
    let mut _132: core::fmt::rt::Alignment;
    let mut _133: core::fmt::rt::Count;
    let mut _134: core::fmt::rt::Count;
    let mut _135: core::fmt::rt::UnsafeArg;
    let mut _136: std::iter::Zip<std::iter::Zip<std::slice::Iter<'_, &str>, std::slice::Iter<'_, std::string::String>>, std::slice::Iter<'_, std::string::String>>;
    let mut _137: std::iter::Zip<std::iter::Zip<std::slice::Iter<'_, &str>, std::slice::Iter<'_, std::string::String>>, std::slice::Iter<'_, std::string::String>>;
    let mut _138: std::iter::Zip<std::slice::Iter<'_, &str>, std::slice::Iter<'_, std::string::String>>;
    let mut _139: std::slice::Iter<'_, &str>;
    let _140: &[&str];
    let mut _141: std::slice::Iter<'_, std::string::String>;
    let mut _142: &[std::string::String];
    let _143: &[std::string::String];
    let mut _144: &std::vec::Vec<std::string::String>;
    let mut _145: std::ops::RangeFrom<usize>;
    let mut _146: std::slice::Iter<'_, std::string::String>;
    let mut _147: &[std::string::String];
    let _148: &[std::string::String];
    let mut _149: &std::vec::Vec<std::string::String>;
    let mut _150: std::ops::RangeFrom<usize>;
    let mut _152: std::option::Option<((&&str, &std::string::String), &std::string::String)>;
    let mut _153: &mut std::iter::Zip<std::iter::Zip<std::slice::Iter<'_, &str>, std::slice::Iter<'_, std::string::String>>, std::slice::Iter<'_, std::string::String>>;
    let mut _154: isize;
    let _158: ();
    let mut _159: std::fmt::Arguments<'_>;
    let mut _160: &[&str];
    let _161: &[&str; 4];
    let _162: [&str; 4];
    let mut _163: &[core::fmt::rt::Argument<'_>];
    let _164: &[core::fmt::rt::Argument<'_>; 6];
    let _165: [core::fmt::rt::Argument<'_>; 6];
    let mut _166: core::fmt::rt::Argument<'_>;
    let _167: &&&str;
    let mut _168: core::fmt::rt::Argument<'_>;
    let _169: &&std::string::String;
    let mut _170: core::fmt::rt::Argument<'_>;
    let _171: &&std::string::String;
    let mut _172: core::fmt::rt::Argument<'_>;
    let _173: &usize;
    let mut _174: core::fmt::rt::Argument<'_>;
    let _175: &usize;
    let mut _176: core::fmt::rt::Argument<'_>;
    let _177: &usize;
    let mut _178: &[core::fmt::rt::Placeholder];
    let _179: &[core::fmt::rt::Placeholder; 3];
    let _180: [core::fmt::rt::Placeholder; 3];
    let mut _181: core::fmt::rt::Placeholder;
    let mut _182: core::fmt::rt::Alignment;
    let mut _183: core::fmt::rt::Count;
    let mut _184: core::fmt::rt::Count;
    let mut _185: core::fmt::rt::Placeholder;
    let mut _186: core::fmt::rt::Alignment;
    let mut _187: core::fmt::rt::Count;
    let mut _188: core::fmt::rt::Count;
    let mut _189: core::fmt::rt::Placeholder;
    let mut _190: core::fmt::rt::Alignment;
    let mut _191: core::fmt::rt::Count;
    let mut _192: core::fmt::rt::Count;
    let mut _193: core::fmt::rt::UnsafeArg;
    scope 1 {
        debug accounts => _7;
        let _11: &std::vec::Vec<std::string::String>;
        scope 2 {
            debug before_last => _11;
            let _21: &std::vec::Vec<std::string::String>;
            scope 3 {
                debug last => _21;
                let _31: std::vec::Vec<std::string::String>;
                scope 4 {
                    debug before_last => _31;
                    let _34: std::vec::Vec<std::string::String>;
                    scope 5 {
                        debug last => _34;
                        let _37: usize;
                        scope 6 {
                            debug max_len => _37;
                            let _42: usize;
                            scope 7 {
                                debug max_len_before => _42;
                                let _49: usize;
                                scope 8 {
                                    debug max_len_last => _49;
                                    let mut _151: std::iter::Zip<std::iter::Zip<std::slice::Iter<'_, &str>, std::slice::Iter<'_, std::string::String>>, std::slice::Iter<'_, std::string::String>>;
                                    scope 9 {
                                    }
                                    scope 10 {
                                    }
                                    scope 11 {
                                        debug iter => _151;
                                        let _155: &&str;
                                        let _156: &std::string::String;
                                        let _157: &std::string::String;
                                        scope 12 {
                                            debug l => _155;
                                            debug l_before => _156;
                                            debug l_last => _157;
                                            scope 13 {
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _6 = [const "\n"];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_const(move _4) -> bb1;
    }

    bb1: {
        _2 = _print(move _3) -> bb2;
    }

    bb2: {
        _10 = &((*_1).0: std::rc::Rc<std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>>);
        _9 = <Rc<RefCell<Vec<Vec<String>>>> as Deref>::deref(move _10) -> bb3;
    }

    bb3: {
        _8 = _9;
        _7 = RefCell::<Vec<Vec<String>>>::borrow(move _8) -> bb4;
    }

    bb4: {
        _15 = &_7;
        _14 = <Ref<'_, Vec<Vec<String>>> as Deref>::deref(move _15) -> [return: bb5, unwind: bb95];
    }

    bb5: {
        _13 = _14;
        _20 = &_7;
        _19 = <Ref<'_, Vec<Vec<String>>> as Deref>::deref(move _20) -> [return: bb6, unwind: bb95];
    }

    bb6: {
        _18 = _19;
        _17 = Vec::<Vec<String>>::len(move _18) -> [return: bb7, unwind: bb95];
    }

    bb7: {
        _16 = Sub(move _17, const 2_usize);
        _12 = <Vec<Vec<String>> as Index<usize>>::index(move _13, move _16) -> [return: bb8, unwind: bb95];
    }

    bb8: {
        _11 = _12;
        _25 = &_7;
        _24 = <Ref<'_, Vec<Vec<String>>> as Deref>::deref(move _25) -> [return: bb9, unwind: bb95];
    }

    bb9: {
        _23 = _24;
        _30 = &_7;
        _29 = <Ref<'_, Vec<Vec<String>>> as Deref>::deref(move _30) -> [return: bb10, unwind: bb95];
    }

    bb10: {
        _28 = _29;
        _27 = Vec::<Vec<String>>::len(move _28) -> [return: bb11, unwind: bb95];
    }

    bb11: {
        _26 = Sub(move _27, const 1_usize);
        _22 = <Vec<Vec<String>> as Index<usize>>::index(move _23, move _26) -> [return: bb12, unwind: bb95];
    }

    bb12: {
        _21 = _22;
        _33 = <Vec<String> as Deref>::deref(_11) -> [return: bb13, unwind: bb95];
    }

    bb13: {
        _32 = _33;
        _31 = get_comma_list(move _32) -> [return: bb14, unwind: bb95];
    }

    bb14: {
        _36 = <Vec<String> as Deref>::deref(_21) -> [return: bb15, unwind: bb94];
    }

    bb15: {
        _35 = _36;
        _34 = get_comma_list(move _35) -> [return: bb16, unwind: bb94];
    }

    bb16: {
        _41 = const _;
        _40 = core::slice::<impl [&str]>::iter(_41) -> [return: bb17, unwind: bb93];
    }

    bb17: {
        _39 = <std::slice::Iter<'_, &str> as Iterator>::map::<usize, [closure@ui/let-else/let-else-drop-order.rs:65:40: 65:43]>(move _40, const ZeroSized: [closure@ui/let-else/let-else-drop-order.rs:65:40: 65:43]) -> [return: bb18, unwind: bb93];
    }

    bb18: {
        _38 = <Map<std::slice::Iter<'_, &str>, [closure@ui/let-else/let-else-drop-order.rs:65:40: 65:43]> as Iterator>::max(move _39) -> [return: bb19, unwind: bb93];
    }

    bb19: {
        _37 = Option::<usize>::unwrap(move _38) -> [return: bb20, unwind: bb93];
    }

    bb20: {
        _48 = &_31;
        _47 = <Vec<String> as Deref>::deref(move _48) -> [return: bb21, unwind: bb93];
    }

    bb21: {
        _46 = _47;
        _45 = core::slice::<impl [String]>::iter(move _46) -> [return: bb22, unwind: bb93];
    }

    bb22: {
        _44 = <std::slice::Iter<'_, String> as Iterator>::map::<usize, [closure@ui/let-else/let-else-drop-order.rs:66:53: 66:56]>(move _45, const ZeroSized: [closure@ui/let-else/let-else-drop-order.rs:66:53: 66:56]) -> [return: bb23, unwind: bb93];
    }

    bb23: {
        _43 = <Map<std::slice::Iter<'_, String>, [closure@ui/let-else/let-else-drop-order.rs:66:53: 66:56]> as Iterator>::max(move _44) -> [return: bb24, unwind: bb93];
    }

    bb24: {
        _42 = Option::<usize>::unwrap(move _43) -> [return: bb25, unwind: bb93];
    }

    bb25: {
        _55 = &_34;
        _54 = <Vec<String> as Deref>::deref(move _55) -> [return: bb26, unwind: bb93];
    }

    bb26: {
        _53 = _54;
        _52 = core::slice::<impl [String]>::iter(move _53) -> [return: bb27, unwind: bb93];
    }

    bb27: {
        _51 = <std::slice::Iter<'_, String> as Iterator>::map::<usize, [closure@ui/let-else/let-else-drop-order.rs:67:44: 67:47]>(move _52, const ZeroSized: [closure@ui/let-else/let-else-drop-order.rs:67:44: 67:47]) -> [return: bb28, unwind: bb93];
    }

    bb28: {
        _50 = <Map<std::slice::Iter<'_, String>, [closure@ui/let-else/let-else-drop-order.rs:67:44: 67:47]> as Iterator>::max(move _51) -> [return: bb29, unwind: bb93];
    }

    bb29: {
        _49 = Option::<usize>::unwrap(move _50) -> [return: bb30, unwind: bb93];
    }

    bb30: {
        _60 = [const "| ", const " | ", const " | ", const " |\n"];
        _59 = &_60;
        _58 = _59 as &[&str] (Pointer(Unsize));
        _66 = const "construct";
        _65 = &_66;
        _64 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_65) -> [return: bb31, unwind: bb93];
    }

    bb31: {
        _70 = &_31;
        _69 = <Vec<String> as Index<usize>>::index(move _70, const 0_usize) -> [return: bb32, unwind: bb93];
    }

    bb32: {
        _68 = _69;
        _67 = core::fmt::rt::Argument::<'_>::new_display::<String>(_68) -> [return: bb33, unwind: bb93];
    }

    bb33: {
        _74 = &_34;
        _73 = <Vec<String> as Index<usize>>::index(move _74, const 0_usize) -> [return: bb34, unwind: bb93];
    }

    bb34: {
        _72 = _73;
        _71 = core::fmt::rt::Argument::<'_>::new_display::<String>(_72) -> [return: bb35, unwind: bb93];
    }

    bb35: {
        _76 = &_37;
        _75 = core::fmt::rt::Argument::<'_>::from_usize(_76) -> [return: bb36, unwind: bb93];
    }

    bb36: {
        _78 = &_42;
        _77 = core::fmt::rt::Argument::<'_>::from_usize(_78) -> [return: bb37, unwind: bb93];
    }

    bb37: {
        _80 = &_49;
        _79 = core::fmt::rt::Argument::<'_>::from_usize(_80) -> [return: bb38, unwind: bb93];
    }

    bb38: {
        _63 = [move _64, move _67, move _71, move _75, move _77, move _79];
        _62 = &_63;
        _61 = _62 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _85 = core::fmt::rt::Alignment::Left;
        _86 = core::fmt::rt::Count::Implied;
        _87 = core::fmt::rt::Count::Param(const 3_usize) -> [return: bb39, unwind: bb93];
    }

    bb39: {
        _84 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _85, const 0_u32, move _86, move _87) -> [return: bb40, unwind: bb93];
    }

    bb40: {
        _89 = core::fmt::rt::Alignment::Left;
        _90 = core::fmt::rt::Count::Implied;
        _91 = core::fmt::rt::Count::Param(const 4_usize) -> [return: bb41, unwind: bb93];
    }

    bb41: {
        _88 = core::fmt::rt::Placeholder::new(const 1_usize, const ' ', move _89, const 0_u32, move _90, move _91) -> [return: bb42, unwind: bb93];
    }

    bb42: {
        _93 = core::fmt::rt::Alignment::Left;
        _94 = core::fmt::rt::Count::Implied;
        _95 = core::fmt::rt::Count::Param(const 5_usize) -> [return: bb43, unwind: bb93];
    }

    bb43: {
        _92 = core::fmt::rt::Placeholder::new(const 2_usize, const ' ', move _93, const 0_u32, move _94, move _95) -> [return: bb44, unwind: bb93];
    }

    bb44: {
        _83 = [move _84, move _88, move _92];
        _82 = &_83;
        _81 = _82 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _96 = core::fmt::rt::UnsafeArg::new() -> [return: bb45, unwind: bb93];
    }

    bb45: {
        _57 = Arguments::<'_>::new_v1_formatted(move _58, move _61, move _81, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb46, unwind: bb93];
    }

    bb46: {
        _56 = _print(move _57) -> [return: bb47, unwind: bb93];
    }

    bb47: {
        _101 = [const "| ", const " | ", const " | ", const " |\n"];
        _100 = &_101;
        _99 = _100 as &[&str] (Pointer(Unsize));
        _107 = const "";
        _106 = &_107;
        _105 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_106) -> [return: bb48, unwind: bb93];
    }

    bb48: {
        _110 = const "";
        _109 = &_110;
        _108 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_109) -> [return: bb49, unwind: bb93];
    }

    bb49: {
        _113 = const "";
        _112 = &_113;
        _111 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_112) -> [return: bb50, unwind: bb93];
    }

    bb50: {
        _115 = &_37;
        _114 = core::fmt::rt::Argument::<'_>::from_usize(_115) -> [return: bb51, unwind: bb93];
    }

    bb51: {
        _117 = &_42;
        _116 = core::fmt::rt::Argument::<'_>::from_usize(_117) -> [return: bb52, unwind: bb93];
    }

    bb52: {
        _119 = &_49;
        _118 = core::fmt::rt::Argument::<'_>::from_usize(_119) -> [return: bb53, unwind: bb93];
    }

    bb53: {
        _104 = [move _105, move _108, move _111, move _114, move _116, move _118];
        _103 = &_104;
        _102 = _103 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _124 = core::fmt::rt::Alignment::Left;
        _125 = core::fmt::rt::Count::Implied;
        _126 = core::fmt::rt::Count::Param(const 3_usize) -> [return: bb54, unwind: bb93];
    }

    bb54: {
        _123 = core::fmt::rt::Placeholder::new(const 0_usize, const '-', move _124, const 0_u32, move _125, move _126) -> [return: bb55, unwind: bb93];
    }

    bb55: {
        _128 = core::fmt::rt::Alignment::Left;
        _129 = core::fmt::rt::Count::Implied;
        _130 = core::fmt::rt::Count::Param(const 4_usize) -> [return: bb56, unwind: bb93];
    }

    bb56: {
        _127 = core::fmt::rt::Placeholder::new(const 1_usize, const '-', move _128, const 0_u32, move _129, move _130) -> [return: bb57, unwind: bb93];
    }

    bb57: {
        _132 = core::fmt::rt::Alignment::Left;
        _133 = core::fmt::rt::Count::Implied;
        _134 = core::fmt::rt::Count::Param(const 5_usize) -> [return: bb58, unwind: bb93];
    }

    bb58: {
        _131 = core::fmt::rt::Placeholder::new(const 2_usize, const '-', move _132, const 0_u32, move _133, move _134) -> [return: bb59, unwind: bb93];
    }

    bb59: {
        _122 = [move _123, move _127, move _131];
        _121 = &_122;
        _120 = _121 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _135 = core::fmt::rt::UnsafeArg::new() -> [return: bb60, unwind: bb93];
    }

    bb60: {
        _98 = Arguments::<'_>::new_v1_formatted(move _99, move _102, move _120, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb61, unwind: bb93];
    }

    bb61: {
        _97 = _print(move _98) -> [return: bb62, unwind: bb93];
    }

    bb62: {
        _140 = const _;
        _139 = core::slice::<impl [&str]>::iter(_140) -> [return: bb63, unwind: bb93];
    }

    bb63: {
        _144 = &_31;
        _145 = RangeFrom::<usize> { start: const 1_usize };
        _143 = <Vec<String> as Index<RangeFrom<usize>>>::index(move _144, move _145) -> [return: bb64, unwind: bb93];
    }

    bb64: {
        _142 = _143;
        _141 = core::slice::<impl [String]>::iter(move _142) -> [return: bb65, unwind: bb93];
    }

    bb65: {
        _138 = <std::slice::Iter<'_, &str> as Iterator>::zip::<std::slice::Iter<'_, String>>(move _139, move _141) -> [return: bb66, unwind: bb93];
    }

    bb66: {
        _149 = &_34;
        _150 = RangeFrom::<usize> { start: const 1_usize };
        _148 = <Vec<String> as Index<RangeFrom<usize>>>::index(move _149, move _150) -> [return: bb67, unwind: bb93];
    }

    bb67: {
        _147 = _148;
        _146 = core::slice::<impl [String]>::iter(move _147) -> [return: bb68, unwind: bb93];
    }

    bb68: {
        _137 = <Zip<std::slice::Iter<'_, &str>, std::slice::Iter<'_, String>> as Iterator>::zip::<std::slice::Iter<'_, String>>(move _138, move _146) -> [return: bb69, unwind: bb93];
    }

    bb69: {
        _136 = <Zip<Zip<std::slice::Iter<'_, &str>, std::slice::Iter<'_, String>>, std::slice::Iter<'_, String>> as IntoIterator>::into_iter(move _137) -> [return: bb70, unwind: bb93];
    }

    bb70: {
        _151 = move _136;
        goto -> bb71;
    }

    bb71: {
        _153 = &mut _151;
        _152 = <Zip<Zip<std::slice::Iter<'_, &str>, std::slice::Iter<'_, String>>, std::slice::Iter<'_, String>> as Iterator>::next(_153) -> [return: bb72, unwind: bb93];
    }

    bb72: {
        _154 = discriminant(_152);
        switchInt(move _154) -> [0: bb75, 1: bb73, otherwise: bb74];
    }

    bb73: {
        _155 = ((((_152 as Some).0: ((&&str, &std::string::String), &std::string::String)).0: (&&str, &std::string::String)).0: &&str);
        _156 = ((((_152 as Some).0: ((&&str, &std::string::String), &std::string::String)).0: (&&str, &std::string::String)).1: &std::string::String);
        _157 = (((_152 as Some).0: ((&&str, &std::string::String), &std::string::String)).1: &std::string::String);
        _162 = [const "| ", const " | ", const " | ", const " |\n"];
        _161 = &_162;
        _160 = _161 as &[&str] (Pointer(Unsize));
        _167 = &_155;
        _166 = core::fmt::rt::Argument::<'_>::new_display::<&&str>(_167) -> [return: bb76, unwind: bb93];
    }

    bb74: {
        unreachable;
    }

    bb75: {
        drop(_34) -> [return: bb90, unwind: bb94];
    }

    bb76: {
        _169 = &_156;
        _168 = core::fmt::rt::Argument::<'_>::new_display::<&String>(_169) -> [return: bb77, unwind: bb93];
    }

    bb77: {
        _171 = &_157;
        _170 = core::fmt::rt::Argument::<'_>::new_display::<&String>(_171) -> [return: bb78, unwind: bb93];
    }

    bb78: {
        _173 = &_37;
        _172 = core::fmt::rt::Argument::<'_>::from_usize(_173) -> [return: bb79, unwind: bb93];
    }

    bb79: {
        _175 = &_42;
        _174 = core::fmt::rt::Argument::<'_>::from_usize(_175) -> [return: bb80, unwind: bb93];
    }

    bb80: {
        _177 = &_49;
        _176 = core::fmt::rt::Argument::<'_>::from_usize(_177) -> [return: bb81, unwind: bb93];
    }

    bb81: {
        _165 = [move _166, move _168, move _170, move _172, move _174, move _176];
        _164 = &_165;
        _163 = _164 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _182 = core::fmt::rt::Alignment::Left;
        _183 = core::fmt::rt::Count::Implied;
        _184 = core::fmt::rt::Count::Param(const 3_usize) -> [return: bb82, unwind: bb93];
    }

    bb82: {
        _181 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _182, const 0_u32, move _183, move _184) -> [return: bb83, unwind: bb93];
    }

    bb83: {
        _186 = core::fmt::rt::Alignment::Left;
        _187 = core::fmt::rt::Count::Implied;
        _188 = core::fmt::rt::Count::Param(const 4_usize) -> [return: bb84, unwind: bb93];
    }

    bb84: {
        _185 = core::fmt::rt::Placeholder::new(const 1_usize, const ' ', move _186, const 0_u32, move _187, move _188) -> [return: bb85, unwind: bb93];
    }

    bb85: {
        _190 = core::fmt::rt::Alignment::Left;
        _191 = core::fmt::rt::Count::Implied;
        _192 = core::fmt::rt::Count::Param(const 5_usize) -> [return: bb86, unwind: bb93];
    }

    bb86: {
        _189 = core::fmt::rt::Placeholder::new(const 2_usize, const ' ', move _190, const 0_u32, move _191, move _192) -> [return: bb87, unwind: bb93];
    }

    bb87: {
        _180 = [move _181, move _185, move _189];
        _179 = &_180;
        _178 = _179 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _193 = core::fmt::rt::UnsafeArg::new() -> [return: bb88, unwind: bb93];
    }

    bb88: {
        _159 = Arguments::<'_>::new_v1_formatted(move _160, move _163, move _178, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb89, unwind: bb93];
    }

    bb89: {
        _158 = _print(move _159) -> [return: bb97, unwind: bb93];
    }

    bb90: {
        drop(_31) -> [return: bb91, unwind: bb95];
    }

    bb91: {
        drop(_7) -> bb92;
    }

    bb92: {
        return;
    }

    bb93 (cleanup): {
        drop(_34) -> [return: bb94, unwind terminate];
    }

    bb94 (cleanup): {
        drop(_31) -> [return: bb95, unwind terminate];
    }

    bb95 (cleanup): {
        drop(_7) -> [return: bb96, unwind terminate];
    }

    bb96 (cleanup): {
        resume;
    }

    bb97: {
        goto -> bb71;
    }
}

const LINES: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 9];
    let _2: &[&str; 9];
    let _3: [&str; 9];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = [const "vanilla", const "&", const "&mut", const "move", const "fn(this)", const "tuple", const "array", const "ref &", const "ref mut &mut"];
        _2 = &_3;
        _1 = &(*_2);
        _0 = move _1 as &[&str] (Pointer(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

fn <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::print_table::{closure#0}(_1: &mut [closure@ui/let-else/let-else-drop-order.rs:65:40: 65:43], _2: &&str) -> usize {
    debug v => _2;
    let mut _0: usize;
    let mut _3: &str;

    bb0: {
        _3 = deref_copy (*_2);
        _0 = core::str::<impl str>::len(_3) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::print_table::{closure#1}(_1: &mut [closure@ui/let-else/let-else-drop-order.rs:66:53: 66:56], _2: &String) -> usize {
    debug v => _2;
    let mut _0: usize;

    bb0: {
        _0 = String::len(_2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::print_table::{closure#2}(_1: &mut [closure@ui/let-else/let-else-drop-order.rs:67:44: 67:47], _2: &String) -> usize {
    debug v => _2;
    let mut _0: usize;

    bb0: {
        _0 = String::len(_2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::assert_all_equal_to(_1: &DropAccountant, _2: &str) -> () {
    debug self => _1;
    debug st => _2;
    let mut _0: ();
    let _3: std::cell::Ref<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let mut _4: &std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let _5: &std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let mut _6: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>>;
    let _8: &std::vec::Vec<std::string::String>;
    let mut _9: &std::vec::Vec<std::vec::Vec<std::string::String>>;
    let _10: &std::vec::Vec<std::vec::Vec<std::string::String>>;
    let mut _11: &std::cell::Ref<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: &std::vec::Vec<std::vec::Vec<std::string::String>>;
    let _15: &std::vec::Vec<std::vec::Vec<std::string::String>>;
    let mut _16: &std::cell::Ref<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let mut _18: &[std::string::String];
    let _19: &[std::string::String];
    let mut _20: std::slice::Iter<'_, std::string::String>;
    let mut _21: std::slice::Iter<'_, std::string::String>;
    let mut _22: &[std::string::String];
    let _23: &[std::string::String];
    let mut _24: &std::vec::Vec<std::string::String>;
    let mut _25: std::ops::RangeFrom<usize>;
    let mut _27: std::option::Option<&std::string::String>;
    let mut _28: &mut std::slice::Iter<'_, std::string::String>;
    let mut _29: isize;
    let mut _31: (&&str, &&str);
    let mut _32: &&str;
    let _33: &str;
    let mut _34: &str;
    let _35: &str;
    let mut _36: &&str;
    let _37: &str;
    let mut _40: bool;
    let mut _41: bool;
    let _43: !;
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug accounts => _3;
        let _7: &std::vec::Vec<std::string::String>;
        scope 2 {
            debug last => _7;
            let _17: std::vec::Vec<std::string::String>;
            scope 3 {
                debug last => _17;
                let mut _26: std::slice::Iter<'_, std::string::String>;
                scope 4 {
                    debug iter => _26;
                    let _30: &std::string::String;
                    scope 5 {
                        debug line => _30;
                        let _38: &&str;
                        let _39: &&str;
                        scope 6 {
                            debug left_val => _38;
                            debug right_val => _39;
                            let _42: core::panicking::AssertKind;
                            scope 7 {
                                debug kind => _42;
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _6 = &((*_1).0: std::rc::Rc<std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>>);
        _5 = <Rc<RefCell<Vec<Vec<String>>>> as Deref>::deref(move _6) -> bb1;
    }

    bb1: {
        _4 = _5;
        _3 = RefCell::<Vec<Vec<String>>>::borrow(move _4) -> bb2;
    }

    bb2: {
        _11 = &_3;
        _10 = <Ref<'_, Vec<Vec<String>>> as Deref>::deref(move _11) -> [return: bb3, unwind: bb25];
    }

    bb3: {
        _9 = _10;
        _16 = &_3;
        _15 = <Ref<'_, Vec<Vec<String>>> as Deref>::deref(move _16) -> [return: bb4, unwind: bb25];
    }

    bb4: {
        _14 = _15;
        _13 = Vec::<Vec<String>>::len(move _14) -> [return: bb5, unwind: bb25];
    }

    bb5: {
        _12 = Sub(move _13, const 1_usize);
        _8 = <Vec<Vec<String>> as Index<usize>>::index(move _9, move _12) -> [return: bb6, unwind: bb25];
    }

    bb6: {
        _7 = _8;
        _19 = <Vec<String> as Deref>::deref(_7) -> [return: bb7, unwind: bb25];
    }

    bb7: {
        _18 = _19;
        _17 = get_comma_list(move _18) -> [return: bb8, unwind: bb25];
    }

    bb8: {
        _24 = &_17;
        _25 = RangeFrom::<usize> { start: const 1_usize };
        _23 = <Vec<String> as Index<RangeFrom<usize>>>::index(move _24, move _25) -> [return: bb9, unwind: bb24];
    }

    bb9: {
        _22 = _23;
        _21 = core::slice::<impl [String]>::iter(move _22) -> [return: bb10, unwind: bb24];
    }

    bb10: {
        _20 = <std::slice::Iter<'_, String> as IntoIterator>::into_iter(move _21) -> [return: bb11, unwind: bb24];
    }

    bb11: {
        _26 = move _20;
        goto -> bb12;
    }

    bb12: {
        _28 = &mut _26;
        _27 = <std::slice::Iter<'_, String> as Iterator>::next(_28) -> [return: bb13, unwind: bb24];
    }

    bb13: {
        _29 = discriminant(_27);
        switchInt(move _29) -> [0: bb16, 1: bb14, otherwise: bb15];
    }

    bb14: {
        _30 = ((_27 as Some).0: &std::string::String);
        _35 = <String as Deref>::deref(_30) -> [return: bb17, unwind: bb24];
    }

    bb15: {
        unreachable;
    }

    bb16: {
        drop(_17) -> [return: bb22, unwind: bb25];
    }

    bb17: {
        _34 = _35;
        _33 = core::str::<impl str>::trim(move _34) -> [return: bb18, unwind: bb24];
    }

    bb18: {
        _32 = &_33;
        _37 = core::str::<impl str>::trim(_2) -> [return: bb19, unwind: bb24];
    }

    bb19: {
        _36 = &_37;
        _31 = (move _32, move _36);
        _38 = (_31.0: &&str);
        _39 = (_31.1: &&str);
        _41 = <&str as PartialEq>::eq(_38, _39) -> [return: bb20, unwind: bb24];
    }

    bb20: {
        _40 = Not(move _41);
        switchInt(move _40) -> [0: bb12, otherwise: bb21];
    }

    bb21: {
        _42 = core::panicking::AssertKind::Eq;
        _44 = Option::<Arguments<'_>>::None;
        _43 = core::panicking::assert_failed::<&str, &str>(move _42, _38, _39, move _44) -> bb24;
    }

    bb22: {
        drop(_3) -> bb23;
    }

    bb23: {
        return;
    }

    bb24 (cleanup): {
        drop(_17) -> [return: bb25, unwind terminate];
    }

    bb25 (cleanup): {
        drop(_3) -> [return: bb26, unwind terminate];
    }

    bb26 (cleanup): {
        resume;
    }
}

fn <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::assert_equality_last_two_lists(_1: &DropAccountant) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: std::cell::Ref<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let mut _3: &std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let _4: &std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let mut _5: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>>;
    let _7: &std::vec::Vec<std::string::String>;
    let mut _8: &std::vec::Vec<std::vec::Vec<std::string::String>>;
    let _9: &std::vec::Vec<std::vec::Vec<std::string::String>>;
    let mut _10: &std::cell::Ref<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let mut _11: usize;
    let mut _12: usize;
    let mut _13: &std::vec::Vec<std::vec::Vec<std::string::String>>;
    let _14: &std::vec::Vec<std::vec::Vec<std::string::String>>;
    let mut _15: &std::cell::Ref<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let _17: &std::vec::Vec<std::string::String>;
    let mut _18: &std::vec::Vec<std::vec::Vec<std::string::String>>;
    let _19: &std::vec::Vec<std::vec::Vec<std::string::String>>;
    let mut _20: &std::cell::Ref<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let mut _21: usize;
    let mut _22: usize;
    let mut _23: &std::vec::Vec<std::vec::Vec<std::string::String>>;
    let _24: &std::vec::Vec<std::vec::Vec<std::string::String>>;
    let mut _25: &std::cell::Ref<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let mut _26: std::iter::Zip<std::slice::Iter<'_, std::string::String>, std::slice::Iter<'_, std::string::String>>;
    let mut _27: std::iter::Zip<std::slice::Iter<'_, std::string::String>, std::slice::Iter<'_, std::string::String>>;
    let mut _28: std::slice::Iter<'_, std::string::String>;
    let mut _29: &[std::string::String];
    let _30: &[std::string::String];
    let mut _31: std::ops::RangeFrom<usize>;
    let mut _32: std::slice::Iter<'_, std::string::String>;
    let mut _33: &[std::string::String];
    let _34: &[std::string::String];
    let mut _35: std::ops::RangeFrom<usize>;
    let mut _37: std::option::Option<(&std::string::String, &std::string::String)>;
    let mut _38: &mut std::iter::Zip<std::slice::Iter<'_, std::string::String>, std::slice::Iter<'_, std::string::String>>;
    let mut _39: isize;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: &&std::string::String;
    let mut _47: &&std::string::String;
    let mut _48: bool;
    let mut _49: &&std::string::String;
    let mut _50: &&str;
    let _51: &str;
    let mut _52: bool;
    let mut _53: &&std::string::String;
    let mut _54: &&str;
    let _55: &str;
    let _56: !;
    scope 1 {
        debug accounts => _2;
        let _6: &std::vec::Vec<std::string::String>;
        scope 2 {
            debug last => _6;
            let _16: &std::vec::Vec<std::string::String>;
            scope 3 {
                debug before_last => _16;
                let mut _36: std::iter::Zip<std::slice::Iter<'_, std::string::String>, std::slice::Iter<'_, std::string::String>>;
                scope 4 {
                    debug iter => _36;
                    let _40: &std::string::String;
                    let _41: &std::string::String;
                    scope 5 {
                        debug l => _40;
                        debug b => _41;
                    }
                }
            }
        }
    }

    bb0: {
        _5 = &((*_1).0: std::rc::Rc<std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>>);
        _4 = <Rc<RefCell<Vec<Vec<String>>>> as Deref>::deref(move _5) -> bb1;
    }

    bb1: {
        _3 = _4;
        _2 = RefCell::<Vec<Vec<String>>>::borrow(move _3) -> bb2;
    }

    bb2: {
        _10 = &_2;
        _9 = <Ref<'_, Vec<Vec<String>>> as Deref>::deref(move _10) -> [return: bb3, unwind: bb33];
    }

    bb3: {
        _8 = _9;
        _15 = &_2;
        _14 = <Ref<'_, Vec<Vec<String>>> as Deref>::deref(move _15) -> [return: bb4, unwind: bb33];
    }

    bb4: {
        _13 = _14;
        _12 = Vec::<Vec<String>>::len(move _13) -> [return: bb5, unwind: bb33];
    }

    bb5: {
        _11 = Sub(move _12, const 1_usize);
        _7 = <Vec<Vec<String>> as Index<usize>>::index(move _8, move _11) -> [return: bb6, unwind: bb33];
    }

    bb6: {
        _6 = _7;
        _20 = &_2;
        _19 = <Ref<'_, Vec<Vec<String>>> as Deref>::deref(move _20) -> [return: bb7, unwind: bb33];
    }

    bb7: {
        _18 = _19;
        _25 = &_2;
        _24 = <Ref<'_, Vec<Vec<String>>> as Deref>::deref(move _25) -> [return: bb8, unwind: bb33];
    }

    bb8: {
        _23 = _24;
        _22 = Vec::<Vec<String>>::len(move _23) -> [return: bb9, unwind: bb33];
    }

    bb9: {
        _21 = Sub(move _22, const 2_usize);
        _17 = <Vec<Vec<String>> as Index<usize>>::index(move _18, move _21) -> [return: bb10, unwind: bb33];
    }

    bb10: {
        _16 = _17;
        _31 = RangeFrom::<usize> { start: const 1_usize };
        _30 = <Vec<String> as Index<RangeFrom<usize>>>::index(_6, move _31) -> [return: bb11, unwind: bb33];
    }

    bb11: {
        _29 = _30;
        _28 = core::slice::<impl [String]>::iter(move _29) -> [return: bb12, unwind: bb33];
    }

    bb12: {
        _35 = RangeFrom::<usize> { start: const 1_usize };
        _34 = <Vec<String> as Index<RangeFrom<usize>>>::index(_16, move _35) -> [return: bb13, unwind: bb33];
    }

    bb13: {
        _33 = _34;
        _32 = core::slice::<impl [String]>::iter(move _33) -> [return: bb14, unwind: bb33];
    }

    bb14: {
        _27 = <std::slice::Iter<'_, String> as Iterator>::zip::<std::slice::Iter<'_, String>>(move _28, move _32) -> [return: bb15, unwind: bb33];
    }

    bb15: {
        _26 = <Zip<std::slice::Iter<'_, String>, std::slice::Iter<'_, String>> as IntoIterator>::into_iter(move _27) -> [return: bb16, unwind: bb33];
    }

    bb16: {
        _36 = move _26;
        goto -> bb17;
    }

    bb17: {
        _38 = &mut _36;
        _37 = <Zip<std::slice::Iter<'_, String>, std::slice::Iter<'_, String>> as Iterator>::next(_38) -> [return: bb18, unwind: bb33];
    }

    bb18: {
        _39 = discriminant(_37);
        switchInt(move _39) -> [0: bb21, 1: bb19, otherwise: bb20];
    }

    bb19: {
        _40 = (((_37 as Some).0: (&std::string::String, &std::string::String)).0: &std::string::String);
        _41 = (((_37 as Some).0: (&std::string::String, &std::string::String)).1: &std::string::String);
        _46 = &_40;
        _47 = &_41;
        _45 = <&String as PartialEq>::eq(move _46, move _47) -> [return: bb28, unwind: bb33];
    }

    bb20: {
        unreachable;
    }

    bb21: {
        drop(_2) -> bb32;
    }

    bb22: {
        _43 = const true;
        goto -> bb24;
    }

    bb23: {
        _53 = &_41;
        _55 = const "n/a";
        _54 = &_55;
        _52 = <&String as PartialEq<&str>>::eq(move _53, move _54) -> [return: bb30, unwind: bb33];
    }

    bb24: {
        _42 = Not(move _43);
        switchInt(move _42) -> [0: bb17, otherwise: bb31];
    }

    bb25: {
        _44 = const true;
        goto -> bb27;
    }

    bb26: {
        _49 = &_40;
        _51 = const "n/a";
        _50 = &_51;
        _48 = <&String as PartialEq<&str>>::eq(move _49, move _50) -> [return: bb29, unwind: bb33];
    }

    bb27: {
        switchInt(move _44) -> [0: bb23, otherwise: bb22];
    }

    bb28: {
        switchInt(move _45) -> [0: bb26, otherwise: bb25];
    }

    bb29: {
        _44 = move _48;
        goto -> bb27;
    }

    bb30: {
        _43 = move _52;
        goto -> bb24;
    }

    bb31: {
        _56 = begin_panic::<&str>(const "not equal: '{last:?}' != '{before_last:?}'") -> bb33;
    }

    bb32: {
        return;
    }

    bb33 (cleanup): {
        drop(_2) -> [return: bb34, unwind terminate];
    }

    bb34 (cleanup): {
        resume;
    }
}

fn get_comma_list(_1: &[String]) -> Vec<String> {
    debug sl => _1;
    let mut _0: std::vec::Vec<std::string::String>;
    let mut _2: std::iter::Chain<std::iter::Once<std::string::String>, std::iter::Map<std::slice::Chunks<'_, std::string::String>, [closure@ui/let-else/let-else-drop-order.rs:108:38: 108:41]>>;
    let mut _3: std::iter::Once<std::string::String>;
    let mut _4: std::string::String;
    let mut _5: &std::string::String;
    let _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: std::iter::Map<std::slice::Chunks<'_, std::string::String>, [closure@ui/let-else/let-else-drop-order.rs:108:38: 108:41]>;
    let mut _10: std::slice::Chunks<'_, std::string::String>;
    let mut _11: &[std::string::String];
    let _12: &[std::string::String];
    let mut _13: std::ops::RangeFrom<usize>;
    let mut _14: bool;

    bb0: {
        _14 = const false;
        _6 = const 0_usize;
        _7 = Len((*_1));
        _8 = Lt(_6, _7);
        assert(move _8, "index out of bounds: the length is {} but the index is {}", move _7, _6) -> bb1;
    }

    bb1: {
        _5 = &(*_1)[_6];
        _4 = <String as Clone>::clone(move _5) -> bb2;
    }

    bb2: {
        _3 = once::<String>(move _4) -> bb3;
    }

    bb3: {
        _14 = const true;
        _13 = RangeFrom::<usize> { start: const 1_usize };
        _12 = <[String] as Index<RangeFrom<usize>>>::index(_1, move _13) -> [return: bb4, unwind: bb11];
    }

    bb4: {
        _11 = _12;
        _10 = core::slice::<impl [String]>::chunks(move _11, const 2_usize) -> [return: bb5, unwind: bb11];
    }

    bb5: {
        _9 = <Chunks<'_, String> as Iterator>::map::<String, [closure@ui/let-else/let-else-drop-order.rs:108:38: 108:41]>(move _10, const ZeroSized: [closure@ui/let-else/let-else-drop-order.rs:108:38: 108:41]) -> [return: bb6, unwind: bb11];
    }

    bb6: {
        _14 = const false;
        _2 = <std::iter::Once<String> as Iterator>::chain::<Map<Chunks<'_, String>, [closure@ui/let-else/let-else-drop-order.rs:108:38: 108:41]>>(move _3, move _9) -> [return: bb7, unwind: bb11];
    }

    bb7: {
        _14 = const false;
        _0 = <std::iter::Chain<std::iter::Once<String>, Map<Chunks<'_, String>, [closure@ui/let-else/let-else-drop-order.rs:108:38: 108:41]>> as Iterator>::collect::<Vec<String>>(move _2) -> bb8;
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        resume;
    }

    bb10 (cleanup): {
        drop(_3) -> [return: bb9, unwind terminate];
    }

    bb11 (cleanup): {
        switchInt(_14) -> [0: bb9, otherwise: bb10];
    }
}

fn get_comma_list::{closure#0}(_1: &mut [closure@ui/let-else/let-else-drop-order.rs:108:38: 108:41], _2: &[String]) -> String {
    debug c => _2;
    let mut _0: std::string::String;
    let _3: &str;

    bb0: {
        _3 = const ",";
        _0 = slice::<impl [String]>::join::<&str>(_2, _3) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/let-else/let-else-drop-order.rs:114:1: 114:27>::drop(_1: &mut Droppy<T>) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: &DropAccountant;

    bb0: {
        _3 = &((*_1).0: DropAccountant);
        _2 = DropAccountant::push::<&str>(move _3, const "drop") -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/let-else/let-else-drop-order.rs:126:1: 126:31>::drop(_1: &mut DroppyEnum<T>) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: &DropAccountant;
    let _4: &mut DropAccountant;
    let mut _5: isize;
    let _6: &mut DropAccountant;
    let _7: &mut T;
    let _8: &mut DropAccountant;
    scope 1 {
        debug acc => _6;
        debug _inner => _7;
    }
    scope 2 {
        debug acc => _8;
    }

    bb0: {
        _5 = discriminant((*_1));
        switchInt(move _5) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _8 = &mut (((*_1) as None).0: DropAccountant);
        _4 = _8;
        goto -> bb4;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _6 = &mut (((*_1) as Some).0: DropAccountant);
        _7 = &mut (((*_1) as Some).1: T);
        _4 = move _6;
        goto -> bb4;
    }

    bb4: {
        _3 = &(*_4);
        _2 = DropAccountant::push::<&str>(move _3, const "drop") -> bb5;
    }

    bb5: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: DropAccountant;
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 1];
    let _6: [&str; 1];
    let _7: ();
    let mut _8: &DropAccountant;
    let mut _11: Droppy<u32>;
    let _12: ();
    let _13: Droppy<u32>;
    let _14: ();
    let mut _15: Droppy<u32>;
    let _16: ();
    let mut _18: Droppy<u32>;
    let _20: ();
    let mut _21: Droppy<u32>;
    let mut _22: Droppy<u32>;
    let _23: ();
    let _24: ();
    let _25: ();
    let _26: ();
    let _27: ();
    let _28: Droppy<u32>;
    let _29: ();
    let mut _30: Droppy<u32>;
    let _31: ();
    let _32: ();
    let mut _33: &DropAccountant;
    let mut _36: Droppy<u32>;
    let _37: ();
    let _38: Droppy<u32>;
    let _39: ();
    let mut _40: Droppy<u32>;
    let _41: ();
    let mut _43: Droppy<u32>;
    let _45: ();
    let mut _46: Droppy<u32>;
    let mut _47: Droppy<u32>;
    let _48: ();
    let _49: ();
    let mut _50: (u32, i32);
    let mut _51: u32;
    let mut _52: Droppy<u32>;
    let _53: ();
    let mut _54: Droppy<u32>;
    let _55: ();
    let _56: Droppy<u32>;
    let _57: ();
    let mut _58: Droppy<u32>;
    let _59: ();
    let _60: ();
    let mut _61: &DropAccountant;
    let _62: ();
    let mut _63: &DropAccountant;
    let _64: ();
    let mut _65: &DropAccountant;
    let mut _69: Droppy<u32>;
    let _70: ();
    let mut _72: &u32;
    let _73: Droppy<u32>;
    let _74: ();
    let mut _76: &mut u32;
    let mut _77: Droppy<u32>;
    let _78: ();
    let mut _81: Droppy<u32>;
    let _83: ();
    let mut _85: Droppy<u32>;
    let mut _86: Droppy<u32>;
    let _87: ();
    let _88: ();
    let _89: ();
    let _90: ();
    let _91: ();
    let _93: Droppy<u32>;
    let _94: ();
    let mut _96: Droppy<u32>;
    let _97: ();
    let _98: ();
    let mut _99: &DropAccountant;
    let mut _103: Droppy<u32>;
    let _104: ();
    let mut _106: &u32;
    let _107: Droppy<u32>;
    let _108: ();
    let mut _110: &mut u32;
    let mut _111: Droppy<u32>;
    let _112: ();
    let mut _115: Droppy<u32>;
    let _117: ();
    let mut _119: Droppy<u32>;
    let mut _120: Droppy<u32>;
    let _121: ();
    let _122: ();
    let mut _124: (u32, i32);
    let mut _125: u32;
    let mut _126: Droppy<u32>;
    let _127: ();
    let mut _129: [u32; 1];
    let mut _130: u32;
    let mut _131: Droppy<u32>;
    let _132: ();
    let mut _133: &u32;
    let _134: Droppy<u32>;
    let _135: ();
    let mut _136: &mut u32;
    let mut _137: Droppy<u32>;
    let _138: ();
    let _139: ();
    let mut _140: &DropAccountant;
    let _141: ();
    let mut _142: &DropAccountant;
    let _143: ();
    let mut _144: std::fmt::Arguments<'_>;
    let mut _145: &[&str];
    let _146: &[&str; 1];
    let _147: [&str; 1];
    let _148: ();
    let mut _149: std::fmt::Arguments<'_>;
    let mut _150: &[&str];
    let _151: &[&str; 1];
    let _152: [&str; 1];
    let _153: ();
    let mut _154: &DropAccountant;
    let _157: ();
    let mut _158: ((), DroppyEnum<u32>);
    let mut _159: isize;
    let _160: ();
    let _161: ();
    let mut _162: &DroppyEnum<u32>;
    let _163: ((), DroppyEnum<u32>);
    let mut _164: isize;
    let _165: ();
    let _166: ();
    let mut _167: &mut DroppyEnum<u32>;
    let mut _168: ((), DroppyEnum<u32>);
    let mut _169: isize;
    let _170: ();
    let _172: ();
    let mut _173: ((), DroppyEnum<u32>);
    let mut _175: isize;
    let _176: ();
    let _177: ();
    let mut _178: ((), DroppyEnum<u32>);
    let mut _179: ((), DroppyEnum<u32>);
    let mut _180: isize;
    let _181: ();
    let _182: ();
    let mut _183: (DroppyEnum<u32>, i32);
    let mut _184: DroppyEnum<u32>;
    let mut _185: ((), DroppyEnum<u32>);
    let mut _186: isize;
    let _187: ();
    let _188: ();
    let mut _189: [DroppyEnum<u32>; 1];
    let mut _190: DroppyEnum<u32>;
    let mut _191: ((), DroppyEnum<u32>);
    let mut _192: isize;
    let _193: ();
    let _194: ();
    let mut _195: &DroppyEnum<u32>;
    let _196: ((), DroppyEnum<u32>);
    let mut _197: isize;
    let _198: ();
    let _199: ();
    let mut _200: &mut DroppyEnum<u32>;
    let mut _201: ((), DroppyEnum<u32>);
    let mut _202: isize;
    let _203: ();
    let _204: ();
    let mut _205: &DropAccountant;
    let _208: ();
    let mut _210: ((), DroppyEnum<u32>);
    let mut _211: isize;
    let _212: ();
    let _213: ();
    let mut _215: &DroppyEnum<u32>;
    let _216: ((), DroppyEnum<u32>);
    let mut _217: isize;
    let _218: ();
    let _219: ();
    let mut _221: &mut DroppyEnum<u32>;
    let mut _222: ((), DroppyEnum<u32>);
    let mut _223: isize;
    let _224: ();
    let _226: ();
    let mut _228: ((), DroppyEnum<u32>);
    let mut _230: isize;
    let _231: ();
    let _232: ();
    let mut _234: ((), DroppyEnum<u32>);
    let mut _235: ((), DroppyEnum<u32>);
    let mut _236: isize;
    let _237: ();
    let _238: ();
    let mut _240: (DroppyEnum<u32>, i32);
    let mut _241: DroppyEnum<u32>;
    let mut _242: ((), DroppyEnum<u32>);
    let mut _243: isize;
    let _244: ();
    let _245: ();
    let mut _247: [DroppyEnum<u32>; 1];
    let mut _248: DroppyEnum<u32>;
    let mut _249: ((), DroppyEnum<u32>);
    let mut _250: isize;
    let _251: ();
    let _252: ();
    let mut _254: &DroppyEnum<u32>;
    let _255: ((), DroppyEnum<u32>);
    let mut _256: isize;
    let _257: ();
    let _258: ();
    let mut _260: &mut DroppyEnum<u32>;
    let mut _261: ((), DroppyEnum<u32>);
    let mut _262: isize;
    let _263: ();
    let _264: ();
    let mut _265: &DropAccountant;
    let _266: ();
    let mut _267: &DropAccountant;
    let _268: &str;
    let _269: ();
    let mut _270: &DropAccountant;
    let _273: ();
    let mut _274: Droppy<u32>;
    let _275: ();
    let _276: ();
    let mut _277: &u32;
    let _278: Droppy<u32>;
    let _279: ();
    let _280: ();
    let mut _281: &mut u32;
    let mut _282: Droppy<u32>;
    let _283: ();
    let _285: ();
    let mut _286: Droppy<u32>;
    let _288: ();
    let _289: ();
    let mut _290: Droppy<u32>;
    let mut _291: Droppy<u32>;
    let _292: ();
    let _293: ();
    let mut _294: (u32, i32);
    let mut _295: u32;
    let mut _296: Droppy<u32>;
    let _297: ();
    let _298: ();
    let mut _299: [u32; 1];
    let mut _300: u32;
    let mut _301: Droppy<u32>;
    let _302: ();
    let _303: ();
    let mut _304: &u32;
    let _305: Droppy<u32>;
    let _306: ();
    let _307: ();
    let mut _308: &mut u32;
    let mut _309: Droppy<u32>;
    let _310: ();
    let _311: ();
    let mut _312: &DropAccountant;
    let _315: ();
    let mut _316: Droppy<u32>;
    let _317: ();
    let _318: ();
    let mut _319: &u32;
    let _320: Droppy<u32>;
    let _321: ();
    let _322: ();
    let mut _323: &mut u32;
    let mut _324: Droppy<u32>;
    let _325: ();
    let _327: ();
    let mut _328: Droppy<u32>;
    let _330: ();
    let _331: ();
    let mut _332: Droppy<u32>;
    let mut _333: Droppy<u32>;
    let _334: ();
    let _335: ();
    let mut _336: (u32, i32);
    let mut _337: u32;
    let mut _338: Droppy<u32>;
    let _339: ();
    let _340: ();
    let mut _341: [u32; 1];
    let mut _342: u32;
    let mut _343: Droppy<u32>;
    let _344: ();
    let _345: ();
    let mut _346: &u32;
    let _347: Droppy<u32>;
    let _348: ();
    let _349: ();
    let mut _350: &mut u32;
    let mut _351: Droppy<u32>;
    let _352: ();
    let _353: ();
    let mut _354: &DropAccountant;
    let _355: ();
    let mut _356: &DropAccountant;
    let _357: &str;
    scope 1 {
        debug acc => _1;
        let _9: &DropAccountant;
        scope 2 {
            debug acc => _9;
            let _10: u32;
            scope 3 {
                debug v => _10;
                let _17: Droppy<u32>;
                let _34: &DropAccountant;
                scope 4 {
                }
                scope 5 {
                }
                scope 6 {
                }
                scope 7 {
                    debug w => _17;
                    let _19: Droppy<u32>;
                    scope 8 {
                    }
                    scope 9 {
                        debug w => _19;
                    }
                }
                scope 10 {
                }
                scope 11 {
                }
                scope 12 {
                }
                scope 13 {
                    debug acc => _34;
                    let _35: u32;
                    scope 14 {
                        debug v => _35;
                        let _42: Droppy<u32>;
                        let _66: &DropAccountant;
                        scope 15 {
                        }
                        scope 16 {
                        }
                        scope 17 {
                        }
                        scope 18 {
                            debug w => _42;
                            let _44: Droppy<u32>;
                            scope 19 {
                            }
                            scope 20 {
                                debug w => _44;
                            }
                        }
                        scope 21 {
                        }
                        scope 22 {
                        }
                        scope 23 {
                        }
                        scope 24 {
                        }
                        scope 25 {
                        }
                        scope 26 {
                            debug acc => _66;
                            let _67: u32;
                            scope 27 {
                                debug v => _67;
                                let _68: u32;
                                let _71: u32;
                                let _75: u32;
                                let _79: Droppy<u32>;
                                let _84: u32;
                                let _92: &u32;
                                let _95: &mut u32;
                                let _100: &DropAccountant;
                                scope 28 {
                                    debug _v => _68;
                                }
                                scope 29 {
                                    debug _v => _71;
                                }
                                scope 30 {
                                    debug _v => _75;
                                }
                                scope 31 {
                                    debug w => _79;
                                    let _80: u32;
                                    let _82: Droppy<u32>;
                                    scope 32 {
                                        debug _v => _80;
                                    }
                                    scope 33 {
                                        debug w => _82;
                                    }
                                }
                                scope 34 {
                                    debug _v => _84;
                                }
                                scope 35 {
                                    debug _v => _92;
                                }
                                scope 36 {
                                    debug _v => _95;
                                }
                                scope 37 {
                                    debug acc => _100;
                                    let _101: u32;
                                    scope 38 {
                                        debug v => _101;
                                        let _102: u32;
                                        let _105: u32;
                                        let _109: u32;
                                        let _113: Droppy<u32>;
                                        let _118: u32;
                                        let _123: u32;
                                        let _128: u32;
                                        let _155: &DropAccountant;
                                        scope 39 {
                                            debug _v => _102;
                                        }
                                        scope 40 {
                                            debug _v => _105;
                                        }
                                        scope 41 {
                                            debug _v => _109;
                                        }
                                        scope 42 {
                                            debug w => _113;
                                            let _114: u32;
                                            let _116: Droppy<u32>;
                                            scope 43 {
                                                debug _v => _114;
                                            }
                                            scope 44 {
                                                debug w => _116;
                                            }
                                        }
                                        scope 45 {
                                            debug _v => _118;
                                        }
                                        scope 46 {
                                            debug _v => _123;
                                        }
                                        scope 47 {
                                            debug _v => _128;
                                        }
                                        scope 48 {
                                            debug _v => _133;
                                        }
                                        scope 49 {
                                            debug _v => _136;
                                        }
                                        scope 50 {
                                            debug acc => _155;
                                            let _156: u32;
                                            scope 51 {
                                                debug v => _156;
                                                let _171: ((), DroppyEnum<u32>);
                                                let _206: &DropAccountant;
                                                scope 52 {
                                                }
                                                scope 53 {
                                                }
                                                scope 54 {
                                                }
                                                scope 55 {
                                                    debug w => _171;
                                                    let _174: ((), DroppyEnum<u32>);
                                                    scope 56 {
                                                    }
                                                    scope 57 {
                                                        debug w => _174;
                                                    }
                                                }
                                                scope 58 {
                                                }
                                                scope 59 {
                                                }
                                                scope 60 {
                                                }
                                                scope 61 {
                                                }
                                                scope 62 {
                                                }
                                                scope 63 {
                                                    debug acc => _206;
                                                    let _207: u32;
                                                    scope 64 {
                                                        debug v => _207;
                                                        let _209: u32;
                                                        let _214: u32;
                                                        let _220: u32;
                                                        let _225: ((), DroppyEnum<u32>);
                                                        let _233: u32;
                                                        let _239: u32;
                                                        let _246: u32;
                                                        let _253: &u32;
                                                        let _259: &mut u32;
                                                        let _271: &DropAccountant;
                                                        scope 65 {
                                                            debug _v => _209;
                                                        }
                                                        scope 66 {
                                                            debug _v => _214;
                                                        }
                                                        scope 67 {
                                                            debug _v => _220;
                                                        }
                                                        scope 68 {
                                                            debug w => _225;
                                                            let _227: u32;
                                                            let _229: ((), DroppyEnum<u32>);
                                                            scope 69 {
                                                                debug _v => _227;
                                                            }
                                                            scope 70 {
                                                                debug w => _229;
                                                            }
                                                        }
                                                        scope 71 {
                                                            debug _v => _233;
                                                        }
                                                        scope 72 {
                                                            debug _v => _239;
                                                        }
                                                        scope 73 {
                                                            debug _v => _246;
                                                        }
                                                        scope 74 {
                                                            debug _v => _253;
                                                        }
                                                        scope 75 {
                                                            debug _v => _259;
                                                        }
                                                        scope 76 {
                                                            debug acc => _271;
                                                            let _272: u32;
                                                            scope 77 {
                                                                debug v => _272;
                                                                let _284: Droppy<u32>;
                                                                let _313: &DropAccountant;
                                                                scope 78 {
                                                                }
                                                                scope 79 {
                                                                }
                                                                scope 80 {
                                                                }
                                                                scope 81 {
                                                                    debug w => _284;
                                                                    let _287: Droppy<u32>;
                                                                    scope 82 {
                                                                    }
                                                                    scope 83 {
                                                                        debug w => _287;
                                                                    }
                                                                }
                                                                scope 84 {
                                                                }
                                                                scope 85 {
                                                                }
                                                                scope 86 {
                                                                }
                                                                scope 87 {
                                                                }
                                                                scope 88 {
                                                                }
                                                                scope 89 {
                                                                    debug acc => _313;
                                                                    let _314: u32;
                                                                    scope 90 {
                                                                        debug v => _314;
                                                                        let _326: Droppy<u32>;
                                                                        scope 91 {
                                                                        }
                                                                        scope 92 {
                                                                        }
                                                                        scope 93 {
                                                                        }
                                                                        scope 94 {
                                                                            debug w => _326;
                                                                            let _329: Droppy<u32>;
                                                                            scope 95 {
                                                                            }
                                                                            scope 96 {
                                                                                debug w => _329;
                                                                            }
                                                                        }
                                                                        scope 97 {
                                                                        }
                                                                        scope 98 {
                                                                        }
                                                                        scope 99 {
                                                                        }
                                                                        scope 100 {
                                                                        }
                                                                        scope 101 {
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = DropAccountant::new() -> bb1;
    }

    bb1: {
        _6 = [const " --- matching cases ---\n"];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_const(move _4) -> [return: bb2, unwind: bb395];
    }

    bb2: {
        _2 = _print(move _3) -> [return: bb3, unwind: bb395];
    }

    bb3: {
        _8 = &_1;
        _7 = DropAccountant::new_list::<&str>(move _8, const "let _") -> [return: bb4, unwind: bb395];
    }

    bb4: {
        _9 = &_1;
        _10 = const 0_u32;
        _11 = DropAccountant::build_droppy(_9, _10) -> [return: bb5, unwind: bb395];
    }

    bb5: {
        drop(_11) -> [return: bb6, unwind: bb395];
    }

    bb6: {
        _12 = DropAccountant::push::<&str>(_9, const "body") -> [return: bb7, unwind: bb395];
    }

    bb7: {
        _13 = DropAccountant::build_droppy(_9, _10) -> [return: bb8, unwind: bb395];
    }

    bb8: {
        _14 = DropAccountant::push::<&str>(_9, const "body") -> [return: bb9, unwind: bb394];
    }

    bb9: {
        drop(_13) -> [return: bb10, unwind: bb395];
    }

    bb10: {
        _15 = DropAccountant::build_droppy(_9, _10) -> [return: bb11, unwind: bb395];
    }

    bb11: {
        _16 = DropAccountant::push::<&str>(_9, const "body") -> [return: bb12, unwind: bb393];
    }

    bb12: {
        drop(_15) -> [return: bb13, unwind: bb395];
    }

    bb13: {
        _17 = DropAccountant::build_droppy(_9, _10) -> [return: bb14, unwind: bb395];
    }

    bb14: {
        _19 = move _17;
        _18 = move _19;
        drop(_18) -> [return: bb15, unwind: bb395];
    }

    bb15: {
        _20 = DropAccountant::push::<&str>(_9, const "body") -> [return: bb16, unwind: bb395];
    }

    bb16: {
        _22 = DropAccountant::build_droppy(_9, _10) -> [return: bb17, unwind: bb395];
    }

    bb17: {
        _21 = identity::<Droppy<u32>>(move _22) -> [return: bb18, unwind: bb395];
    }

    bb18: {
        drop(_21) -> [return: bb19, unwind: bb395];
    }

    bb19: {
        _23 = DropAccountant::push::<&str>(_9, const "body") -> [return: bb20, unwind: bb395];
    }

    bb20: {
        _24 = DropAccountant::push::<&str>(_9, const "n/a") -> [return: bb21, unwind: bb395];
    }

    bb21: {
        _25 = DropAccountant::push::<&str>(_9, const "n/a") -> [return: bb22, unwind: bb395];
    }

    bb22: {
        _26 = DropAccountant::push::<&str>(_9, const "n/a") -> [return: bb23, unwind: bb395];
    }

    bb23: {
        _27 = DropAccountant::push::<&str>(_9, const "n/a") -> [return: bb24, unwind: bb395];
    }

    bb24: {
        _28 = DropAccountant::build_droppy(_9, _10) -> [return: bb25, unwind: bb395];
    }

    bb25: {
        _29 = DropAccountant::push::<&str>(_9, const "body") -> [return: bb26, unwind: bb392];
    }

    bb26: {
        drop(_28) -> [return: bb27, unwind: bb395];
    }

    bb27: {
        _30 = DropAccountant::build_droppy(_9, _10) -> [return: bb28, unwind: bb395];
    }

    bb28: {
        _31 = DropAccountant::push::<&str>(_9, const "body") -> [return: bb29, unwind: bb391];
    }

    bb29: {
        drop(_30) -> [return: bb30, unwind: bb395];
    }

    bb30: {
        _33 = &_1;
        _32 = DropAccountant::new_list::<&str>(move _33, const "let else _") -> [return: bb31, unwind: bb395];
    }

    bb31: {
        _34 = &_1;
        _35 = const 0_u32;
        _36 = DropAccountant::build_droppy(_34, _35) -> [return: bb32, unwind: bb395];
    }

    bb32: {
        drop(_36) -> [return: bb33, unwind: bb395];
    }

    bb33: {
        _37 = DropAccountant::push::<&str>(_34, const "body") -> [return: bb34, unwind: bb395];
    }

    bb34: {
        _38 = DropAccountant::build_droppy(_34, _35) -> [return: bb35, unwind: bb395];
    }

    bb35: {
        _39 = DropAccountant::push::<&str>(_34, const "body") -> [return: bb36, unwind: bb390];
    }

    bb36: {
        drop(_38) -> [return: bb37, unwind: bb395];
    }

    bb37: {
        _40 = DropAccountant::build_droppy(_34, _35) -> [return: bb38, unwind: bb395];
    }

    bb38: {
        _41 = DropAccountant::push::<&str>(_34, const "body") -> [return: bb39, unwind: bb389];
    }

    bb39: {
        drop(_40) -> [return: bb40, unwind: bb395];
    }

    bb40: {
        _42 = DropAccountant::build_droppy(_34, _35) -> [return: bb41, unwind: bb395];
    }

    bb41: {
        _44 = move _42;
        _43 = move _44;
        drop(_43) -> [return: bb42, unwind: bb395];
    }

    bb42: {
        _45 = DropAccountant::push::<&str>(_34, const "body") -> [return: bb43, unwind: bb395];
    }

    bb43: {
        _47 = DropAccountant::build_droppy(_34, _35) -> [return: bb44, unwind: bb395];
    }

    bb44: {
        _46 = identity::<Droppy<u32>>(move _47) -> [return: bb45, unwind: bb395];
    }

    bb45: {
        drop(_46) -> [return: bb46, unwind: bb395];
    }

    bb46: {
        _48 = DropAccountant::push::<&str>(_34, const "body") -> [return: bb47, unwind: bb395];
    }

    bb47: {
        _52 = DropAccountant::build_droppy(_34, _35) -> [return: bb48, unwind: bb395];
    }

    bb48: {
        _51 = (_52.1: u32);
        _50 = (move _51, const 77_i32);
        switchInt((_50.1: i32)) -> [77: bb49, otherwise: bb50];
    }

    bb49: {
        drop(_52) -> [return: bb52, unwind: bb395];
    }

    bb50: {
        drop(_52) -> [return: bb51, unwind: bb395];
    }

    bb51: {
        _49 = DropAccountant::push::<&str>(_34, const "else") -> [return: bb397, unwind: bb395];
    }

    bb52: {
        _53 = DropAccountant::push::<&str>(_34, const "body") -> [return: bb398, unwind: bb395];
    }

    bb53: {
        _54 = DropAccountant::build_droppy(_34, _35) -> [return: bb54, unwind: bb395];
    }

    bb54: {
        drop(_54) -> [return: bb55, unwind: bb395];
    }

    bb55: {
        _55 = DropAccountant::push::<&str>(_34, const "body") -> [return: bb56, unwind: bb395];
    }

    bb56: {
        _56 = DropAccountant::build_droppy(_34, _35) -> [return: bb57, unwind: bb395];
    }

    bb57: {
        _57 = DropAccountant::push::<&str>(_34, const "body") -> [return: bb58, unwind: bb388];
    }

    bb58: {
        drop(_56) -> [return: bb59, unwind: bb395];
    }

    bb59: {
        _58 = DropAccountant::build_droppy(_34, _35) -> [return: bb60, unwind: bb395];
    }

    bb60: {
        _59 = DropAccountant::push::<&str>(_34, const "body") -> [return: bb61, unwind: bb387];
    }

    bb61: {
        drop(_58) -> [return: bb62, unwind: bb395];
    }

    bb62: {
        _61 = &_1;
        _60 = DropAccountant::assert_equality_last_two_lists(move _61) -> [return: bb63, unwind: bb395];
    }

    bb63: {
        _63 = &_1;
        _62 = DropAccountant::print_table(move _63) -> [return: bb64, unwind: bb395];
    }

    bb64: {
        _65 = &_1;
        _64 = DropAccountant::new_list::<&str>(move _65, const "let _v") -> [return: bb65, unwind: bb395];
    }

    bb65: {
        _66 = &_1;
        _67 = const 0_u32;
        _69 = DropAccountant::build_droppy(_66, _67) -> [return: bb66, unwind: bb395];
    }

    bb66: {
        _68 = (_69.1: u32);
        drop(_69) -> [return: bb67, unwind: bb395];
    }

    bb67: {
        _70 = DropAccountant::push::<&str>(_66, const "body") -> [return: bb68, unwind: bb395];
    }

    bb68: {
        _73 = DropAccountant::build_droppy(_66, _67) -> [return: bb69, unwind: bb395];
    }

    bb69: {
        _72 = &(_73.1: u32);
        _71 = (*_72);
        _74 = DropAccountant::push::<&str>(_66, const "body") -> [return: bb70, unwind: bb386];
    }

    bb70: {
        drop(_73) -> [return: bb71, unwind: bb395];
    }

    bb71: {
        _77 = DropAccountant::build_droppy(_66, _67) -> [return: bb72, unwind: bb395];
    }

    bb72: {
        _76 = &mut (_77.1: u32);
        _75 = (*_76);
        _78 = DropAccountant::push::<&str>(_66, const "body") -> [return: bb73, unwind: bb385];
    }

    bb73: {
        drop(_77) -> [return: bb74, unwind: bb395];
    }

    bb74: {
        _79 = DropAccountant::build_droppy(_66, _67) -> [return: bb75, unwind: bb395];
    }

    bb75: {
        _82 = move _79;
        _81 = move _82;
        _80 = (_81.1: u32);
        drop(_81) -> [return: bb76, unwind: bb395];
    }

    bb76: {
        _83 = DropAccountant::push::<&str>(_66, const "body") -> [return: bb77, unwind: bb395];
    }

    bb77: {
        _86 = DropAccountant::build_droppy(_66, _67) -> [return: bb78, unwind: bb395];
    }

    bb78: {
        _85 = identity::<Droppy<u32>>(move _86) -> [return: bb79, unwind: bb395];
    }

    bb79: {
        _84 = (_85.1: u32);
        drop(_85) -> [return: bb80, unwind: bb395];
    }

    bb80: {
        _87 = DropAccountant::push::<&str>(_66, const "body") -> [return: bb81, unwind: bb395];
    }

    bb81: {
        _88 = DropAccountant::push::<&str>(_66, const "n/a") -> [return: bb82, unwind: bb395];
    }

    bb82: {
        _89 = DropAccountant::push::<&str>(_66, const "n/a") -> [return: bb83, unwind: bb395];
    }

    bb83: {
        _90 = DropAccountant::push::<&str>(_66, const "n/a") -> [return: bb84, unwind: bb395];
    }

    bb84: {
        _91 = DropAccountant::push::<&str>(_66, const "n/a") -> [return: bb85, unwind: bb395];
    }

    bb85: {
        _93 = DropAccountant::build_droppy(_66, _67) -> [return: bb86, unwind: bb395];
    }

    bb86: {
        _92 = &(_93.1: u32);
        _94 = DropAccountant::push::<&str>(_66, const "body") -> [return: bb87, unwind: bb384];
    }

    bb87: {
        drop(_93) -> [return: bb88, unwind: bb395];
    }

    bb88: {
        _96 = DropAccountant::build_droppy(_66, _67) -> [return: bb89, unwind: bb395];
    }

    bb89: {
        _95 = &mut (_96.1: u32);
        _97 = DropAccountant::push::<&str>(_66, const "body") -> [return: bb90, unwind: bb383];
    }

    bb90: {
        drop(_96) -> [return: bb91, unwind: bb395];
    }

    bb91: {
        _99 = &_1;
        _98 = DropAccountant::new_list::<&str>(move _99, const "let else _v") -> [return: bb92, unwind: bb395];
    }

    bb92: {
        _100 = &_1;
        _101 = const 0_u32;
        _103 = DropAccountant::build_droppy(_100, _101) -> [return: bb93, unwind: bb395];
    }

    bb93: {
        _102 = (_103.1: u32);
        drop(_103) -> [return: bb94, unwind: bb395];
    }

    bb94: {
        _104 = DropAccountant::push::<&str>(_100, const "body") -> [return: bb95, unwind: bb395];
    }

    bb95: {
        _107 = DropAccountant::build_droppy(_100, _101) -> [return: bb96, unwind: bb395];
    }

    bb96: {
        _106 = &(_107.1: u32);
        _105 = (*_106);
        _108 = DropAccountant::push::<&str>(_100, const "body") -> [return: bb97, unwind: bb382];
    }

    bb97: {
        drop(_107) -> [return: bb98, unwind: bb395];
    }

    bb98: {
        _111 = DropAccountant::build_droppy(_100, _101) -> [return: bb99, unwind: bb395];
    }

    bb99: {
        _110 = &mut (_111.1: u32);
        _109 = (*_110);
        _112 = DropAccountant::push::<&str>(_100, const "body") -> [return: bb100, unwind: bb381];
    }

    bb100: {
        drop(_111) -> [return: bb101, unwind: bb395];
    }

    bb101: {
        _113 = DropAccountant::build_droppy(_100, _101) -> [return: bb102, unwind: bb395];
    }

    bb102: {
        _116 = move _113;
        _115 = move _116;
        _114 = (_115.1: u32);
        drop(_115) -> [return: bb103, unwind: bb395];
    }

    bb103: {
        _117 = DropAccountant::push::<&str>(_100, const "body") -> [return: bb104, unwind: bb395];
    }

    bb104: {
        _120 = DropAccountant::build_droppy(_100, _101) -> [return: bb105, unwind: bb395];
    }

    bb105: {
        _119 = identity::<Droppy<u32>>(move _120) -> [return: bb106, unwind: bb395];
    }

    bb106: {
        _118 = (_119.1: u32);
        drop(_119) -> [return: bb107, unwind: bb395];
    }

    bb107: {
        _121 = DropAccountant::push::<&str>(_100, const "body") -> [return: bb108, unwind: bb395];
    }

    bb108: {
        _126 = DropAccountant::build_droppy(_100, _101) -> [return: bb109, unwind: bb395];
    }

    bb109: {
        _125 = (_126.1: u32);
        _124 = (move _125, const 77_i32);
        switchInt((_124.1: i32)) -> [77: bb110, otherwise: bb111];
    }

    bb110: {
        _123 = (_124.0: u32);
        drop(_126) -> [return: bb113, unwind: bb395];
    }

    bb111: {
        drop(_126) -> [return: bb112, unwind: bb395];
    }

    bb112: {
        _122 = DropAccountant::push::<&str>(_100, const "else") -> [return: bb399, unwind: bb395];
    }

    bb113: {
        _127 = DropAccountant::push::<&str>(_100, const "body") -> [return: bb400, unwind: bb395];
    }

    bb114: {
        _131 = DropAccountant::build_droppy(_100, _101) -> [return: bb115, unwind: bb395];
    }

    bb115: {
        _130 = (_131.1: u32);
        _129 = [move _130];
        _128 = _129[0 of 1];
        drop(_131) -> [return: bb116, unwind: bb395];
    }

    bb116: {
        _132 = DropAccountant::push::<&str>(_100, const "body") -> [return: bb117, unwind: bb395];
    }

    bb117: {
        _134 = DropAccountant::build_droppy(_100, _101) -> [return: bb118, unwind: bb395];
    }

    bb118: {
        _133 = &(_134.1: u32);
        _135 = DropAccountant::push::<&str>(_100, const "body") -> [return: bb119, unwind: bb380];
    }

    bb119: {
        drop(_134) -> [return: bb120, unwind: bb395];
    }

    bb120: {
        _137 = DropAccountant::build_droppy(_100, _101) -> [return: bb121, unwind: bb395];
    }

    bb121: {
        _136 = &mut (_137.1: u32);
        _138 = DropAccountant::push::<&str>(_100, const "body") -> [return: bb122, unwind: bb379];
    }

    bb122: {
        drop(_137) -> [return: bb123, unwind: bb395];
    }

    bb123: {
        _140 = &_1;
        _139 = DropAccountant::assert_equality_last_two_lists(move _140) -> [return: bb124, unwind: bb395];
    }

    bb124: {
        _142 = &_1;
        _141 = DropAccountant::print_table(move _142) -> [return: bb125, unwind: bb395];
    }

    bb125: {
        _147 = [const "\n"];
        _146 = &_147;
        _145 = _146 as &[&str] (Pointer(Unsize));
        _144 = Arguments::<'_>::new_const(move _145) -> [return: bb126, unwind: bb395];
    }

    bb126: {
        _143 = _print(move _144) -> [return: bb127, unwind: bb395];
    }

    bb127: {
        _152 = [const " --- mismatching cases ---\n"];
        _151 = &_152;
        _150 = _151 as &[&str] (Pointer(Unsize));
        _149 = Arguments::<'_>::new_const(move _150) -> [return: bb128, unwind: bb395];
    }

    bb128: {
        _148 = _print(move _149) -> [return: bb129, unwind: bb395];
    }

    bb129: {
        _154 = &_1;
        _153 = DropAccountant::new_list::<&str>(move _154, const "let else _ mismatch") -> [return: bb130, unwind: bb395];
    }

    bb130: {
        _155 = &_1;
        _156 = const 1_u32;
        _158 = DropAccountant::build_droppy_enum_none(_155, _156) -> [return: bb131, unwind: bb395];
    }

    bb131: {
        _159 = discriminant((_158.1: DroppyEnum<u32>));
        switchInt(move _159) -> [0: bb132, otherwise: bb133];
    }

    bb132: {
        drop(_158) -> [return: bb135, unwind: bb395];
    }

    bb133: {
        drop(_158) -> [return: bb134, unwind: bb395];
    }

    bb134: {
        _157 = DropAccountant::push::<&str>(_155, const "else") -> [return: bb401, unwind: bb395];
    }

    bb135: {
        _160 = DropAccountant::push::<&str>(_155, const "body") -> [return: bb402, unwind: bb395];
    }

    bb136: {
        _163 = DropAccountant::build_droppy_enum_none(_155, _156) -> [return: bb137, unwind: bb395];
    }

    bb137: {
        _162 = &(_163.1: DroppyEnum<u32>);
        _164 = discriminant((*_162));
        switchInt(move _164) -> [0: bb138, otherwise: bb139];
    }

    bb138: {
        _165 = DropAccountant::push::<&str>(_155, const "body") -> [return: bb141, unwind: bb378];
    }

    bb139: {
        drop(_163) -> [return: bb140, unwind: bb395];
    }

    bb140: {
        _161 = DropAccountant::push::<&str>(_155, const "else") -> [return: bb403, unwind: bb395];
    }

    bb141: {
        drop(_163) -> [return: bb142, unwind: bb395];
    }

    bb142: {
        _168 = DropAccountant::build_droppy_enum_none(_155, _156) -> [return: bb143, unwind: bb395];
    }

    bb143: {
        _167 = &mut (_168.1: DroppyEnum<u32>);
        _169 = discriminant((*_167));
        switchInt(move _169) -> [0: bb144, otherwise: bb145];
    }

    bb144: {
        _170 = DropAccountant::push::<&str>(_155, const "body") -> [return: bb147, unwind: bb377];
    }

    bb145: {
        drop(_168) -> [return: bb146, unwind: bb395];
    }

    bb146: {
        _166 = DropAccountant::push::<&str>(_155, const "else") -> [return: bb404, unwind: bb395];
    }

    bb147: {
        drop(_168) -> [return: bb148, unwind: bb395];
    }

    bb148: {
        _171 = DropAccountant::build_droppy_enum_none(_155, _156) -> [return: bb149, unwind: bb395];
    }

    bb149: {
        _174 = move _171;
        _173 = move _174;
        _175 = discriminant((_173.1: DroppyEnum<u32>));
        switchInt(move _175) -> [0: bb150, otherwise: bb151];
    }

    bb150: {
        drop(_173) -> [return: bb153, unwind: bb395];
    }

    bb151: {
        drop(_173) -> [return: bb152, unwind: bb395];
    }

    bb152: {
        _172 = DropAccountant::push::<&str>(_155, const "else") -> [return: bb405, unwind: bb395];
    }

    bb153: {
        _176 = DropAccountant::push::<&str>(_155, const "body") -> [return: bb406, unwind: bb395];
    }

    bb154: {
        _179 = DropAccountant::build_droppy_enum_none(_155, _156) -> [return: bb155, unwind: bb395];
    }

    bb155: {
        _178 = identity::<((), DroppyEnum<u32>)>(move _179) -> [return: bb156, unwind: bb395];
    }

    bb156: {
        _180 = discriminant((_178.1: DroppyEnum<u32>));
        switchInt(move _180) -> [0: bb157, otherwise: bb158];
    }

    bb157: {
        drop(_178) -> [return: bb160, unwind: bb395];
    }

    bb158: {
        drop(_178) -> [return: bb159, unwind: bb395];
    }

    bb159: {
        _177 = DropAccountant::push::<&str>(_155, const "else") -> [return: bb407, unwind: bb395];
    }

    bb160: {
        _181 = DropAccountant::push::<&str>(_155, const "body") -> [return: bb408, unwind: bb395];
    }

    bb161: {
        _185 = DropAccountant::build_droppy_enum_none(_155, _156) -> [return: bb162, unwind: bb395];
    }

    bb162: {
        _184 = move (_185.1: DroppyEnum<u32>);
        _183 = (move _184, const 77_i32);
        _186 = discriminant((_183.0: DroppyEnum<u32>));
        switchInt(move _186) -> [0: bb163, otherwise: bb165];
    }

    bb163: {
        switchInt((_183.1: i32)) -> [77: bb164, otherwise: bb165];
    }

    bb164: {
        drop(_183) -> [return: bb167, unwind: bb395];
    }

    bb165: {
        drop(_183) -> [return: bb166, unwind: bb395];
    }

    bb166: {
        _182 = DropAccountant::push::<&str>(_155, const "else") -> [return: bb409, unwind: bb395];
    }

    bb167: {
        _187 = DropAccountant::push::<&str>(_155, const "body") -> [return: bb410, unwind: bb395];
    }

    bb168: {
        _191 = DropAccountant::build_droppy_enum_none(_155, _156) -> [return: bb169, unwind: bb395];
    }

    bb169: {
        _190 = move (_191.1: DroppyEnum<u32>);
        _189 = [move _190];
        _192 = discriminant(_189[0 of 1]);
        switchInt(move _192) -> [0: bb170, otherwise: bb171];
    }

    bb170: {
        drop(_189) -> [return: bb173, unwind: bb395];
    }

    bb171: {
        drop(_189) -> [return: bb172, unwind: bb395];
    }

    bb172: {
        _188 = DropAccountant::push::<&str>(_155, const "else") -> [return: bb411, unwind: bb395];
    }

    bb173: {
        _193 = DropAccountant::push::<&str>(_155, const "body") -> [return: bb412, unwind: bb395];
    }

    bb174: {
        _196 = DropAccountant::build_droppy_enum_none(_155, _156) -> [return: bb175, unwind: bb395];
    }

    bb175: {
        _195 = &(_196.1: DroppyEnum<u32>);
        _197 = discriminant((*_195));
        switchInt(move _197) -> [0: bb176, otherwise: bb177];
    }

    bb176: {
        _198 = DropAccountant::push::<&str>(_155, const "body") -> [return: bb179, unwind: bb376];
    }

    bb177: {
        drop(_196) -> [return: bb178, unwind: bb395];
    }

    bb178: {
        _194 = DropAccountant::push::<&str>(_155, const "else") -> [return: bb413, unwind: bb395];
    }

    bb179: {
        drop(_196) -> [return: bb180, unwind: bb395];
    }

    bb180: {
        _201 = DropAccountant::build_droppy_enum_none(_155, _156) -> [return: bb181, unwind: bb395];
    }

    bb181: {
        _200 = &mut (_201.1: DroppyEnum<u32>);
        _202 = discriminant((*_200));
        switchInt(move _202) -> [0: bb182, otherwise: bb183];
    }

    bb182: {
        _203 = DropAccountant::push::<&str>(_155, const "body") -> [return: bb185, unwind: bb375];
    }

    bb183: {
        drop(_201) -> [return: bb184, unwind: bb395];
    }

    bb184: {
        _199 = DropAccountant::push::<&str>(_155, const "else") -> [return: bb414, unwind: bb395];
    }

    bb185: {
        drop(_201) -> [return: bb186, unwind: bb395];
    }

    bb186: {
        _205 = &_1;
        _204 = DropAccountant::new_list::<&str>(move _205, const "let else _v mismatch") -> [return: bb187, unwind: bb395];
    }

    bb187: {
        _206 = &_1;
        _207 = const 1_u32;
        _210 = DropAccountant::build_droppy_enum_none(_206, _207) -> [return: bb188, unwind: bb395];
    }

    bb188: {
        _211 = discriminant((_210.1: DroppyEnum<u32>));
        switchInt(move _211) -> [0: bb189, otherwise: bb190];
    }

    bb189: {
        _209 = (((_210.1: DroppyEnum<u32>) as Some).1: u32);
        drop(_210) -> [return: bb192, unwind: bb395];
    }

    bb190: {
        drop(_210) -> [return: bb191, unwind: bb395];
    }

    bb191: {
        _208 = DropAccountant::push::<&str>(_206, const "else") -> [return: bb415, unwind: bb395];
    }

    bb192: {
        _212 = DropAccountant::push::<&str>(_206, const "body") -> [return: bb416, unwind: bb395];
    }

    bb193: {
        _216 = DropAccountant::build_droppy_enum_none(_206, _207) -> [return: bb194, unwind: bb395];
    }

    bb194: {
        _215 = &(_216.1: DroppyEnum<u32>);
        _217 = discriminant((*_215));
        switchInt(move _217) -> [0: bb195, otherwise: bb196];
    }

    bb195: {
        _214 = (((*_215) as Some).1: u32);
        _218 = DropAccountant::push::<&str>(_206, const "body") -> [return: bb198, unwind: bb374];
    }

    bb196: {
        drop(_216) -> [return: bb197, unwind: bb395];
    }

    bb197: {
        _213 = DropAccountant::push::<&str>(_206, const "else") -> [return: bb417, unwind: bb395];
    }

    bb198: {
        drop(_216) -> [return: bb199, unwind: bb395];
    }

    bb199: {
        _222 = DropAccountant::build_droppy_enum_none(_206, _207) -> [return: bb200, unwind: bb395];
    }

    bb200: {
        _221 = &mut (_222.1: DroppyEnum<u32>);
        _223 = discriminant((*_221));
        switchInt(move _223) -> [0: bb201, otherwise: bb202];
    }

    bb201: {
        _220 = (((*_221) as Some).1: u32);
        _224 = DropAccountant::push::<&str>(_206, const "body") -> [return: bb204, unwind: bb373];
    }

    bb202: {
        drop(_222) -> [return: bb203, unwind: bb395];
    }

    bb203: {
        _219 = DropAccountant::push::<&str>(_206, const "else") -> [return: bb418, unwind: bb395];
    }

    bb204: {
        drop(_222) -> [return: bb205, unwind: bb395];
    }

    bb205: {
        _225 = DropAccountant::build_droppy_enum_none(_206, _207) -> [return: bb206, unwind: bb395];
    }

    bb206: {
        _229 = move _225;
        _228 = move _229;
        _230 = discriminant((_228.1: DroppyEnum<u32>));
        switchInt(move _230) -> [0: bb207, otherwise: bb208];
    }

    bb207: {
        _227 = (((_228.1: DroppyEnum<u32>) as Some).1: u32);
        drop(_228) -> [return: bb210, unwind: bb395];
    }

    bb208: {
        drop(_228) -> [return: bb209, unwind: bb395];
    }

    bb209: {
        _226 = DropAccountant::push::<&str>(_206, const "else") -> [return: bb419, unwind: bb395];
    }

    bb210: {
        _231 = DropAccountant::push::<&str>(_206, const "body") -> [return: bb420, unwind: bb395];
    }

    bb211: {
        _235 = DropAccountant::build_droppy_enum_none(_206, _207) -> [return: bb212, unwind: bb395];
    }

    bb212: {
        _234 = identity::<((), DroppyEnum<u32>)>(move _235) -> [return: bb213, unwind: bb395];
    }

    bb213: {
        _236 = discriminant((_234.1: DroppyEnum<u32>));
        switchInt(move _236) -> [0: bb214, otherwise: bb215];
    }

    bb214: {
        _233 = (((_234.1: DroppyEnum<u32>) as Some).1: u32);
        drop(_234) -> [return: bb217, unwind: bb395];
    }

    bb215: {
        drop(_234) -> [return: bb216, unwind: bb395];
    }

    bb216: {
        _232 = DropAccountant::push::<&str>(_206, const "else") -> [return: bb421, unwind: bb395];
    }

    bb217: {
        _237 = DropAccountant::push::<&str>(_206, const "body") -> [return: bb422, unwind: bb395];
    }

    bb218: {
        _242 = DropAccountant::build_droppy_enum_none(_206, _207) -> [return: bb219, unwind: bb395];
    }

    bb219: {
        _241 = move (_242.1: DroppyEnum<u32>);
        _240 = (move _241, const 77_i32);
        _243 = discriminant((_240.0: DroppyEnum<u32>));
        switchInt(move _243) -> [0: bb220, otherwise: bb222];
    }

    bb220: {
        switchInt((_240.1: i32)) -> [77: bb221, otherwise: bb222];
    }

    bb221: {
        _239 = (((_240.0: DroppyEnum<u32>) as Some).1: u32);
        drop(_240) -> [return: bb224, unwind: bb395];
    }

    bb222: {
        drop(_240) -> [return: bb223, unwind: bb395];
    }

    bb223: {
        _238 = DropAccountant::push::<&str>(_206, const "else") -> [return: bb423, unwind: bb395];
    }

    bb224: {
        _244 = DropAccountant::push::<&str>(_206, const "body") -> [return: bb424, unwind: bb395];
    }

    bb225: {
        _249 = DropAccountant::build_droppy_enum_none(_206, _207) -> [return: bb226, unwind: bb395];
    }

    bb226: {
        _248 = move (_249.1: DroppyEnum<u32>);
        _247 = [move _248];
        _250 = discriminant(_247[0 of 1]);
        switchInt(move _250) -> [0: bb227, otherwise: bb228];
    }

    bb227: {
        _246 = ((_247[0 of 1] as Some).1: u32);
        drop(_247) -> [return: bb230, unwind: bb395];
    }

    bb228: {
        drop(_247) -> [return: bb229, unwind: bb395];
    }

    bb229: {
        _245 = DropAccountant::push::<&str>(_206, const "else") -> [return: bb425, unwind: bb395];
    }

    bb230: {
        _251 = DropAccountant::push::<&str>(_206, const "body") -> [return: bb426, unwind: bb395];
    }

    bb231: {
        _255 = DropAccountant::build_droppy_enum_none(_206, _207) -> [return: bb232, unwind: bb395];
    }

    bb232: {
        _254 = &(_255.1: DroppyEnum<u32>);
        _256 = discriminant((*_254));
        switchInt(move _256) -> [0: bb233, otherwise: bb234];
    }

    bb233: {
        _253 = &(((*_254) as Some).1: u32);
        _257 = DropAccountant::push::<&str>(_206, const "body") -> [return: bb236, unwind: bb372];
    }

    bb234: {
        drop(_255) -> [return: bb235, unwind: bb395];
    }

    bb235: {
        _252 = DropAccountant::push::<&str>(_206, const "else") -> [return: bb427, unwind: bb395];
    }

    bb236: {
        drop(_255) -> [return: bb237, unwind: bb395];
    }

    bb237: {
        _261 = DropAccountant::build_droppy_enum_none(_206, _207) -> [return: bb238, unwind: bb395];
    }

    bb238: {
        _260 = &mut (_261.1: DroppyEnum<u32>);
        _262 = discriminant((*_260));
        switchInt(move _262) -> [0: bb239, otherwise: bb240];
    }

    bb239: {
        _259 = &mut (((*_260) as Some).1: u32);
        _263 = DropAccountant::push::<&str>(_206, const "body") -> [return: bb242, unwind: bb371];
    }

    bb240: {
        drop(_261) -> [return: bb241, unwind: bb395];
    }

    bb241: {
        _258 = DropAccountant::push::<&str>(_206, const "else") -> [return: bb428, unwind: bb395];
    }

    bb242: {
        drop(_261) -> [return: bb243, unwind: bb395];
    }

    bb243: {
        _265 = &_1;
        _264 = DropAccountant::print_table(move _265) -> [return: bb244, unwind: bb395];
    }

    bb244: {
        _267 = &_1;
        _268 = const "drop,else";
        _266 = DropAccountant::assert_all_equal_to(move _267, _268) -> [return: bb245, unwind: bb395];
    }

    bb245: {
        _270 = &_1;
        _269 = DropAccountant::new_list::<&str>(move _270, const "let else 0 mismatch") -> [return: bb246, unwind: bb395];
    }

    bb246: {
        _271 = &_1;
        _272 = const 1_u32;
        _274 = DropAccountant::build_droppy(_271, _272) -> [return: bb247, unwind: bb395];
    }

    bb247: {
        switchInt((_274.1: u32)) -> [0: bb248, otherwise: bb249];
    }

    bb248: {
        drop(_274) -> [return: bb251, unwind: bb395];
    }

    bb249: {
        drop(_274) -> [return: bb250, unwind: bb395];
    }

    bb250: {
        _273 = DropAccountant::push::<&str>(_271, const "else") -> [return: bb429, unwind: bb395];
    }

    bb251: {
        _275 = DropAccountant::push::<&str>(_271, const "body") -> [return: bb430, unwind: bb395];
    }

    bb252: {
        _278 = DropAccountant::build_droppy(_271, _272) -> [return: bb253, unwind: bb395];
    }

    bb253: {
        _277 = &(_278.1: u32);
        switchInt((*_277)) -> [0: bb254, otherwise: bb255];
    }

    bb254: {
        _279 = DropAccountant::push::<&str>(_271, const "body") -> [return: bb257, unwind: bb370];
    }

    bb255: {
        drop(_278) -> [return: bb256, unwind: bb395];
    }

    bb256: {
        _276 = DropAccountant::push::<&str>(_271, const "else") -> [return: bb431, unwind: bb395];
    }

    bb257: {
        drop(_278) -> [return: bb258, unwind: bb395];
    }

    bb258: {
        _282 = DropAccountant::build_droppy(_271, _272) -> [return: bb259, unwind: bb395];
    }

    bb259: {
        _281 = &mut (_282.1: u32);
        switchInt((*_281)) -> [0: bb260, otherwise: bb261];
    }

    bb260: {
        _283 = DropAccountant::push::<&str>(_271, const "body") -> [return: bb263, unwind: bb369];
    }

    bb261: {
        drop(_282) -> [return: bb262, unwind: bb395];
    }

    bb262: {
        _280 = DropAccountant::push::<&str>(_271, const "else") -> [return: bb432, unwind: bb395];
    }

    bb263: {
        drop(_282) -> [return: bb264, unwind: bb395];
    }

    bb264: {
        _284 = DropAccountant::build_droppy(_271, _272) -> [return: bb265, unwind: bb395];
    }

    bb265: {
        _287 = move _284;
        _286 = move _287;
        switchInt((_286.1: u32)) -> [0: bb266, otherwise: bb267];
    }

    bb266: {
        drop(_286) -> [return: bb269, unwind: bb395];
    }

    bb267: {
        drop(_286) -> [return: bb268, unwind: bb395];
    }

    bb268: {
        _285 = DropAccountant::push::<&str>(_271, const "else") -> [return: bb433, unwind: bb395];
    }

    bb269: {
        _288 = DropAccountant::push::<&str>(_271, const "body") -> [return: bb434, unwind: bb395];
    }

    bb270: {
        _291 = DropAccountant::build_droppy(_271, _272) -> [return: bb271, unwind: bb395];
    }

    bb271: {
        _290 = identity::<Droppy<u32>>(move _291) -> [return: bb272, unwind: bb395];
    }

    bb272: {
        switchInt((_290.1: u32)) -> [0: bb273, otherwise: bb274];
    }

    bb273: {
        drop(_290) -> [return: bb276, unwind: bb395];
    }

    bb274: {
        drop(_290) -> [return: bb275, unwind: bb395];
    }

    bb275: {
        _289 = DropAccountant::push::<&str>(_271, const "else") -> [return: bb435, unwind: bb395];
    }

    bb276: {
        _292 = DropAccountant::push::<&str>(_271, const "body") -> [return: bb436, unwind: bb395];
    }

    bb277: {
        _296 = DropAccountant::build_droppy(_271, _272) -> [return: bb278, unwind: bb395];
    }

    bb278: {
        _295 = (_296.1: u32);
        _294 = (move _295, const 77_i32);
        switchInt((_294.0: u32)) -> [0: bb279, otherwise: bb281];
    }

    bb279: {
        switchInt((_294.1: i32)) -> [77: bb280, otherwise: bb281];
    }

    bb280: {
        drop(_296) -> [return: bb283, unwind: bb395];
    }

    bb281: {
        drop(_296) -> [return: bb282, unwind: bb395];
    }

    bb282: {
        _293 = DropAccountant::push::<&str>(_271, const "else") -> [return: bb437, unwind: bb395];
    }

    bb283: {
        _297 = DropAccountant::push::<&str>(_271, const "body") -> [return: bb438, unwind: bb395];
    }

    bb284: {
        _301 = DropAccountant::build_droppy(_271, _272) -> [return: bb285, unwind: bb395];
    }

    bb285: {
        _300 = (_301.1: u32);
        _299 = [move _300];
        switchInt(_299[0 of 1]) -> [0: bb286, otherwise: bb287];
    }

    bb286: {
        drop(_301) -> [return: bb289, unwind: bb395];
    }

    bb287: {
        drop(_301) -> [return: bb288, unwind: bb395];
    }

    bb288: {
        _298 = DropAccountant::push::<&str>(_271, const "else") -> [return: bb439, unwind: bb395];
    }

    bb289: {
        _302 = DropAccountant::push::<&str>(_271, const "body") -> [return: bb440, unwind: bb395];
    }

    bb290: {
        _305 = DropAccountant::build_droppy(_271, _272) -> [return: bb291, unwind: bb395];
    }

    bb291: {
        _304 = &(_305.1: u32);
        switchInt((*_304)) -> [0: bb292, otherwise: bb293];
    }

    bb292: {
        _306 = DropAccountant::push::<&str>(_271, const "body") -> [return: bb295, unwind: bb368];
    }

    bb293: {
        drop(_305) -> [return: bb294, unwind: bb395];
    }

    bb294: {
        _303 = DropAccountant::push::<&str>(_271, const "else") -> [return: bb441, unwind: bb395];
    }

    bb295: {
        drop(_305) -> [return: bb296, unwind: bb395];
    }

    bb296: {
        _309 = DropAccountant::build_droppy(_271, _272) -> [return: bb297, unwind: bb395];
    }

    bb297: {
        _308 = &mut (_309.1: u32);
        switchInt((*_308)) -> [0: bb298, otherwise: bb299];
    }

    bb298: {
        _310 = DropAccountant::push::<&str>(_271, const "body") -> [return: bb301, unwind: bb367];
    }

    bb299: {
        drop(_309) -> [return: bb300, unwind: bb395];
    }

    bb300: {
        _307 = DropAccountant::push::<&str>(_271, const "else") -> [return: bb442, unwind: bb395];
    }

    bb301: {
        drop(_309) -> [return: bb302, unwind: bb395];
    }

    bb302: {
        _312 = &_1;
        _311 = DropAccountant::new_list::<&str>(move _312, const "let else 0 mismatch") -> [return: bb303, unwind: bb395];
    }

    bb303: {
        _313 = &_1;
        _314 = const 1_u32;
        _316 = DropAccountant::build_droppy(_313, _314) -> [return: bb304, unwind: bb395];
    }

    bb304: {
        switchInt((_316.1: u32)) -> [0: bb305, otherwise: bb306];
    }

    bb305: {
        drop(_316) -> [return: bb308, unwind: bb395];
    }

    bb306: {
        drop(_316) -> [return: bb307, unwind: bb395];
    }

    bb307: {
        _315 = DropAccountant::push::<&str>(_313, const "else") -> [return: bb443, unwind: bb395];
    }

    bb308: {
        _317 = DropAccountant::push::<&str>(_313, const "body") -> [return: bb444, unwind: bb395];
    }

    bb309: {
        _320 = DropAccountant::build_droppy(_313, _314) -> [return: bb310, unwind: bb395];
    }

    bb310: {
        _319 = &(_320.1: u32);
        switchInt((*_319)) -> [0: bb311, otherwise: bb312];
    }

    bb311: {
        _321 = DropAccountant::push::<&str>(_313, const "body") -> [return: bb314, unwind: bb366];
    }

    bb312: {
        drop(_320) -> [return: bb313, unwind: bb395];
    }

    bb313: {
        _318 = DropAccountant::push::<&str>(_313, const "else") -> [return: bb445, unwind: bb395];
    }

    bb314: {
        drop(_320) -> [return: bb315, unwind: bb395];
    }

    bb315: {
        _324 = DropAccountant::build_droppy(_313, _314) -> [return: bb316, unwind: bb395];
    }

    bb316: {
        _323 = &mut (_324.1: u32);
        switchInt((*_323)) -> [0: bb317, otherwise: bb318];
    }

    bb317: {
        _325 = DropAccountant::push::<&str>(_313, const "body") -> [return: bb320, unwind: bb365];
    }

    bb318: {
        drop(_324) -> [return: bb319, unwind: bb395];
    }

    bb319: {
        _322 = DropAccountant::push::<&str>(_313, const "else") -> [return: bb446, unwind: bb395];
    }

    bb320: {
        drop(_324) -> [return: bb321, unwind: bb395];
    }

    bb321: {
        _326 = DropAccountant::build_droppy(_313, _314) -> [return: bb322, unwind: bb395];
    }

    bb322: {
        _329 = move _326;
        _328 = move _329;
        switchInt((_328.1: u32)) -> [0: bb323, otherwise: bb324];
    }

    bb323: {
        drop(_328) -> [return: bb326, unwind: bb395];
    }

    bb324: {
        drop(_328) -> [return: bb325, unwind: bb395];
    }

    bb325: {
        _327 = DropAccountant::push::<&str>(_313, const "else") -> [return: bb447, unwind: bb395];
    }

    bb326: {
        _330 = DropAccountant::push::<&str>(_313, const "body") -> [return: bb448, unwind: bb395];
    }

    bb327: {
        _333 = DropAccountant::build_droppy(_313, _314) -> [return: bb328, unwind: bb395];
    }

    bb328: {
        _332 = identity::<Droppy<u32>>(move _333) -> [return: bb329, unwind: bb395];
    }

    bb329: {
        switchInt((_332.1: u32)) -> [0: bb330, otherwise: bb331];
    }

    bb330: {
        drop(_332) -> [return: bb333, unwind: bb395];
    }

    bb331: {
        drop(_332) -> [return: bb332, unwind: bb395];
    }

    bb332: {
        _331 = DropAccountant::push::<&str>(_313, const "else") -> [return: bb449, unwind: bb395];
    }

    bb333: {
        _334 = DropAccountant::push::<&str>(_313, const "body") -> [return: bb450, unwind: bb395];
    }

    bb334: {
        _338 = DropAccountant::build_droppy(_313, _314) -> [return: bb335, unwind: bb395];
    }

    bb335: {
        _337 = (_338.1: u32);
        _336 = (move _337, const 77_i32);
        switchInt((_336.0: u32)) -> [0: bb336, otherwise: bb338];
    }

    bb336: {
        switchInt((_336.1: i32)) -> [77: bb337, otherwise: bb338];
    }

    bb337: {
        drop(_338) -> [return: bb340, unwind: bb395];
    }

    bb338: {
        drop(_338) -> [return: bb339, unwind: bb395];
    }

    bb339: {
        _335 = DropAccountant::push::<&str>(_313, const "else") -> [return: bb451, unwind: bb395];
    }

    bb340: {
        _339 = DropAccountant::push::<&str>(_313, const "body") -> [return: bb452, unwind: bb395];
    }

    bb341: {
        _343 = DropAccountant::build_droppy(_313, _314) -> [return: bb342, unwind: bb395];
    }

    bb342: {
        _342 = (_343.1: u32);
        _341 = [move _342];
        switchInt(_341[0 of 1]) -> [0: bb343, otherwise: bb344];
    }

    bb343: {
        drop(_343) -> [return: bb346, unwind: bb395];
    }

    bb344: {
        drop(_343) -> [return: bb345, unwind: bb395];
    }

    bb345: {
        _340 = DropAccountant::push::<&str>(_313, const "else") -> [return: bb453, unwind: bb395];
    }

    bb346: {
        _344 = DropAccountant::push::<&str>(_313, const "body") -> [return: bb454, unwind: bb395];
    }

    bb347: {
        _347 = DropAccountant::build_droppy(_313, _314) -> [return: bb348, unwind: bb395];
    }

    bb348: {
        _346 = &(_347.1: u32);
        switchInt((*_346)) -> [0: bb349, otherwise: bb350];
    }

    bb349: {
        _348 = DropAccountant::push::<&str>(_313, const "body") -> [return: bb352, unwind: bb364];
    }

    bb350: {
        drop(_347) -> [return: bb351, unwind: bb395];
    }

    bb351: {
        _345 = DropAccountant::push::<&str>(_313, const "else") -> [return: bb455, unwind: bb395];
    }

    bb352: {
        drop(_347) -> [return: bb353, unwind: bb395];
    }

    bb353: {
        _351 = DropAccountant::build_droppy(_313, _314) -> [return: bb354, unwind: bb395];
    }

    bb354: {
        _350 = &mut (_351.1: u32);
        switchInt((*_350)) -> [0: bb355, otherwise: bb356];
    }

    bb355: {
        _352 = DropAccountant::push::<&str>(_313, const "body") -> [return: bb358, unwind: bb363];
    }

    bb356: {
        drop(_351) -> [return: bb357, unwind: bb395];
    }

    bb357: {
        _349 = DropAccountant::push::<&str>(_313, const "else") -> [return: bb456, unwind: bb395];
    }

    bb358: {
        drop(_351) -> [return: bb359, unwind: bb395];
    }

    bb359: {
        _354 = &_1;
        _353 = DropAccountant::print_table(move _354) -> [return: bb360, unwind: bb395];
    }

    bb360: {
        _356 = &_1;
        _357 = const "drop,else";
        _355 = DropAccountant::assert_all_equal_to(move _356, _357) -> [return: bb361, unwind: bb395];
    }

    bb361: {
        drop(_1) -> bb362;
    }

    bb362: {
        return;
    }

    bb363 (cleanup): {
        drop(_351) -> [return: bb395, unwind terminate];
    }

    bb364 (cleanup): {
        drop(_347) -> [return: bb395, unwind terminate];
    }

    bb365 (cleanup): {
        drop(_324) -> [return: bb395, unwind terminate];
    }

    bb366 (cleanup): {
        drop(_320) -> [return: bb395, unwind terminate];
    }

    bb367 (cleanup): {
        drop(_309) -> [return: bb395, unwind terminate];
    }

    bb368 (cleanup): {
        drop(_305) -> [return: bb395, unwind terminate];
    }

    bb369 (cleanup): {
        drop(_282) -> [return: bb395, unwind terminate];
    }

    bb370 (cleanup): {
        drop(_278) -> [return: bb395, unwind terminate];
    }

    bb371 (cleanup): {
        drop(_261) -> [return: bb395, unwind terminate];
    }

    bb372 (cleanup): {
        drop(_255) -> [return: bb395, unwind terminate];
    }

    bb373 (cleanup): {
        drop(_222) -> [return: bb395, unwind terminate];
    }

    bb374 (cleanup): {
        drop(_216) -> [return: bb395, unwind terminate];
    }

    bb375 (cleanup): {
        drop(_201) -> [return: bb395, unwind terminate];
    }

    bb376 (cleanup): {
        drop(_196) -> [return: bb395, unwind terminate];
    }

    bb377 (cleanup): {
        drop(_168) -> [return: bb395, unwind terminate];
    }

    bb378 (cleanup): {
        drop(_163) -> [return: bb395, unwind terminate];
    }

    bb379 (cleanup): {
        drop(_137) -> [return: bb395, unwind terminate];
    }

    bb380 (cleanup): {
        drop(_134) -> [return: bb395, unwind terminate];
    }

    bb381 (cleanup): {
        drop(_111) -> [return: bb395, unwind terminate];
    }

    bb382 (cleanup): {
        drop(_107) -> [return: bb395, unwind terminate];
    }

    bb383 (cleanup): {
        drop(_96) -> [return: bb395, unwind terminate];
    }

    bb384 (cleanup): {
        drop(_93) -> [return: bb395, unwind terminate];
    }

    bb385 (cleanup): {
        drop(_77) -> [return: bb395, unwind terminate];
    }

    bb386 (cleanup): {
        drop(_73) -> [return: bb395, unwind terminate];
    }

    bb387 (cleanup): {
        drop(_58) -> [return: bb395, unwind terminate];
    }

    bb388 (cleanup): {
        drop(_56) -> [return: bb395, unwind terminate];
    }

    bb389 (cleanup): {
        drop(_40) -> [return: bb395, unwind terminate];
    }

    bb390 (cleanup): {
        drop(_38) -> [return: bb395, unwind terminate];
    }

    bb391 (cleanup): {
        drop(_30) -> [return: bb395, unwind terminate];
    }

    bb392 (cleanup): {
        drop(_28) -> [return: bb395, unwind terminate];
    }

    bb393 (cleanup): {
        drop(_15) -> [return: bb395, unwind terminate];
    }

    bb394 (cleanup): {
        drop(_13) -> [return: bb395, unwind terminate];
    }

    bb395 (cleanup): {
        drop(_1) -> [return: bb396, unwind terminate];
    }

    bb396 (cleanup): {
        resume;
    }

    bb397: {
        goto -> bb53;
    }

    bb398: {
        goto -> bb53;
    }

    bb399: {
        goto -> bb114;
    }

    bb400: {
        goto -> bb114;
    }

    bb401: {
        goto -> bb136;
    }

    bb402: {
        goto -> bb136;
    }

    bb403: {
        goto -> bb142;
    }

    bb404: {
        goto -> bb148;
    }

    bb405: {
        goto -> bb154;
    }

    bb406: {
        goto -> bb154;
    }

    bb407: {
        goto -> bb161;
    }

    bb408: {
        goto -> bb161;
    }

    bb409: {
        goto -> bb168;
    }

    bb410: {
        goto -> bb168;
    }

    bb411: {
        goto -> bb174;
    }

    bb412: {
        goto -> bb174;
    }

    bb413: {
        goto -> bb180;
    }

    bb414: {
        goto -> bb186;
    }

    bb415: {
        goto -> bb193;
    }

    bb416: {
        goto -> bb193;
    }

    bb417: {
        goto -> bb199;
    }

    bb418: {
        goto -> bb205;
    }

    bb419: {
        goto -> bb211;
    }

    bb420: {
        goto -> bb211;
    }

    bb421: {
        goto -> bb218;
    }

    bb422: {
        goto -> bb218;
    }

    bb423: {
        goto -> bb225;
    }

    bb424: {
        goto -> bb225;
    }

    bb425: {
        goto -> bb231;
    }

    bb426: {
        goto -> bb231;
    }

    bb427: {
        goto -> bb237;
    }

    bb428: {
        goto -> bb243;
    }

    bb429: {
        goto -> bb252;
    }

    bb430: {
        goto -> bb252;
    }

    bb431: {
        goto -> bb258;
    }

    bb432: {
        goto -> bb264;
    }

    bb433: {
        goto -> bb270;
    }

    bb434: {
        goto -> bb270;
    }

    bb435: {
        goto -> bb277;
    }

    bb436: {
        goto -> bb277;
    }

    bb437: {
        goto -> bb284;
    }

    bb438: {
        goto -> bb284;
    }

    bb439: {
        goto -> bb290;
    }

    bb440: {
        goto -> bb290;
    }

    bb441: {
        goto -> bb296;
    }

    bb442: {
        goto -> bb302;
    }

    bb443: {
        goto -> bb309;
    }

    bb444: {
        goto -> bb309;
    }

    bb445: {
        goto -> bb315;
    }

    bb446: {
        goto -> bb321;
    }

    bb447: {
        goto -> bb327;
    }

    bb448: {
        goto -> bb327;
    }

    bb449: {
        goto -> bb334;
    }

    bb450: {
        goto -> bb334;
    }

    bb451: {
        goto -> bb341;
    }

    bb452: {
        goto -> bb341;
    }

    bb453: {
        goto -> bb347;
    }

    bb454: {
        goto -> bb347;
    }

    bb455: {
        goto -> bb353;
    }

    bb456: {
        goto -> bb359;
    }
}

fn DropAccountant(_1: Rc<RefCell<Vec<Vec<String>>>>) -> DropAccountant {
    let mut _0: DropAccountant;

    bb0: {
        _0 = DropAccountant(move _1);
        return;
    }
}

// MIR FOR CTFE
fn DropAccountant(_1: Rc<RefCell<Vec<Vec<String>>>>) -> DropAccountant {
    let mut _0: DropAccountant;

    bb0: {
        _0 = DropAccountant(move _1);
        return;
    }
}

fn Droppy(_1: DropAccountant, _2: T) -> Droppy<T> {
    let mut _0: Droppy<T>;

    bb0: {
        _0 = Droppy::<T>(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn Droppy(_1: DropAccountant, _2: T) -> Droppy<T> {
    let mut _0: Droppy<T>;

    bb0: {
        _0 = Droppy::<T>(move _1, move _2);
        return;
    }
}

fn DroppyEnum::Some(_1: DropAccountant, _2: T) -> DroppyEnum<T> {
    let mut _0: DroppyEnum<T>;

    bb0: {
        _0 = DroppyEnum::<T>::Some(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn DroppyEnum::Some(_1: DropAccountant, _2: T) -> DroppyEnum<T> {
    let mut _0: DroppyEnum<T>;

    bb0: {
        _0 = DroppyEnum::<T>::Some(move _1, move _2);
        return;
    }
}

fn DroppyEnum::None(_1: DropAccountant) -> DroppyEnum<T> {
    let mut _0: DroppyEnum<T>;

    bb0: {
        _0 = DroppyEnum::<T>::None(move _1);
        return;
    }
}

// MIR FOR CTFE
fn DroppyEnum::None(_1: DropAccountant) -> DroppyEnum<T> {
    let mut _0: DroppyEnum<T>;

    bb0: {
        _0 = DroppyEnum::<T>::None(move _1);
        return;
    }
}
