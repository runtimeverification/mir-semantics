// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: &mut i32;
    let mut _2: &mut &mut std::option::Option<i32>;
    let mut _3: &mut std::option::Option<i32>;
    let mut _4: std::option::Option<i32>;
    let mut _5: isize;
    let mut _7: &mut &mut std::option::Option<i32>;
    let mut _8: &mut std::option::Option<i32>;
    let mut _9: std::option::Option<i32>;
    let mut _10: isize;
    let mut _11: &mut std::option::Option<i32>;
    let mut _12: &mut std::option::Option<i32>;
    let mut _13: &mut std::option::Option<i32>;
    scope 1 {
        debug n => _1;
        scope 2 {
            let _6: &mut i32;
            scope 3 {
                debug n => _6;
                scope 4 {
                }
            }
        }
    }

    bb0: {
        _4 = Option::<i32>::Some(const 5_i32);
        _3 = &mut _4;
        _2 = &mut _3;
        _11 = deref_copy (*_2);
        _5 = discriminant((*_11));
        switchInt(move _5) -> [1: bb1, otherwise: bb3];
    }

    bb1: {
        _12 = deref_copy (*_2);
        _1 = &mut (((*_12) as Some).0: i32);
        (*_1) = Add((*_1), const 1_i32);
        _9 = Option::<i32>::Some(const 5_i32);
        _8 = &mut _9;
        _7 = &mut _8;
        _13 = deref_copy (*_7);
        _10 = discriminant((*_13));
        switchInt(move _10) -> [1: bb2, otherwise: bb3];
    }

    bb2: {
        _6 = &mut (((*_13) as Some).0: i32);
        (*_6) = Add((*_6), const 1_i32);
        goto -> bb3;
    }

    bb3: {
        return;
    }
}
