// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/let-else/let-else-non-copy.rs:15:16: 15:21>::clone(_1: &Copyable) -> Copyable {
    debug self => _1;
    let mut _0: Copyable;

    bb0: {
        return;
    }
}

fn let_else() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<Wrapper>;
    let mut _2: std::boxed::Box<[Wrapper]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[Wrapper; 1]>;
    let mut _7: Wrapper;
    let mut _8: NonCopy;
    let mut _9: std::slice::Iter<'_, Wrapper>;
    let mut _10: &std::vec::Vec<Wrapper>;
    let mut _12: std::option::Option<&Wrapper>;
    let mut _13: &mut std::slice::Iter<'_, Wrapper>;
    let mut _14: isize;
    let mut _16: *const [Wrapper; 1];
    let mut _17: *const ();
    let mut _18: usize;
    let mut _19: usize;
    let mut _20: usize;
    let mut _21: usize;
    let mut _22: bool;
    scope 1 {
        debug vec => _1;
        let mut _11: std::slice::Iter<'_, Wrapper>;
        scope 3 {
            debug iter => _11;
            let _15: &Wrapper;
            scope 4 {
                debug item => _15;
                scope 5 {
                    debug _copyable => const Copyable;
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _3 = SizeOf([Wrapper; 1]);
        _4 = AlignOf([Wrapper; 1]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> bb1;
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [Wrapper; 1]);
        _8 = NonCopy::Thing(const Copyable);
        _7 = Wrapper { field: move _8 };
        _16 = (((_6.0: std::ptr::Unique<[Wrapper; 1]>).0: std::ptr::NonNull<[Wrapper; 1]>).0: *const [Wrapper; 1]);
        _17 = _16 as *const () (PtrToPtr);
        _18 = _17 as usize (Transmute);
        _19 = AlignOf(Wrapper);
        _20 = Sub(_19, const 1_usize);
        _21 = BitAnd(_18, _20);
        _22 = Eq(_21, const 0_usize);
        assert(_22, "misaligned pointer dereference: address must be a multiple of {} but is {}", _19, _18) -> [success: bb12, unwind unreachable];
    }

    bb2: {
        _10 = &_1;
        _9 = <&Vec<Wrapper> as IntoIterator>::into_iter(move _10) -> [return: bb3, unwind: bb10];
    }

    bb3: {
        _11 = move _9;
        goto -> bb4;
    }

    bb4: {
        _13 = &mut _11;
        _12 = <std::slice::Iter<'_, Wrapper> as Iterator>::next(_13) -> [return: bb5, unwind: bb10];
    }

    bb5: {
        _14 = discriminant(_12);
        switchInt(move _14) -> [0: bb8, 1: bb6, otherwise: bb7];
    }

    bb6: {
        _15 = ((_12 as Some).0: &Wrapper);
        goto -> bb4;
    }

    bb7: {
        unreachable;
    }

    bb8: {
        drop(_1) -> bb9;
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_1) -> [return: bb11, unwind terminate];
    }

    bb11 (cleanup): {
        resume;
    }

    bb12: {
        (*_16) = [move _7];
        _2 = move _6 as std::boxed::Box<[Wrapper]> (Pointer(Unsize));
        _1 = slice::<impl [Wrapper]>::into_vec::<std::alloc::Global>(move _2) -> bb2;
    }
}

fn if_let() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<Wrapper>;
    let mut _2: std::boxed::Box<[Wrapper]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[Wrapper; 1]>;
    let mut _7: Wrapper;
    let mut _8: NonCopy;
    let mut _9: std::slice::Iter<'_, Wrapper>;
    let mut _10: &std::vec::Vec<Wrapper>;
    let mut _12: std::option::Option<&Wrapper>;
    let mut _13: &mut std::slice::Iter<'_, Wrapper>;
    let mut _14: isize;
    let mut _16: *const [Wrapper; 1];
    let mut _17: *const ();
    let mut _18: usize;
    let mut _19: usize;
    let mut _20: usize;
    let mut _21: usize;
    let mut _22: bool;
    scope 1 {
        debug vec => _1;
        let mut _11: std::slice::Iter<'_, Wrapper>;
        scope 3 {
            debug iter => _11;
            let _15: &Wrapper;
            scope 4 {
                debug item => _15;
                scope 5 {
                    debug _copyable => const Copyable;
                }
                scope 6 {
                    debug copyable => const Copyable;
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _3 = SizeOf([Wrapper; 1]);
        _4 = AlignOf([Wrapper; 1]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> bb1;
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [Wrapper; 1]);
        _8 = NonCopy::Thing(const Copyable);
        _7 = Wrapper { field: move _8 };
        _16 = (((_6.0: std::ptr::Unique<[Wrapper; 1]>).0: std::ptr::NonNull<[Wrapper; 1]>).0: *const [Wrapper; 1]);
        _17 = _16 as *const () (PtrToPtr);
        _18 = _17 as usize (Transmute);
        _19 = AlignOf(Wrapper);
        _20 = Sub(_19, const 1_usize);
        _21 = BitAnd(_18, _20);
        _22 = Eq(_21, const 0_usize);
        assert(_22, "misaligned pointer dereference: address must be a multiple of {} but is {}", _19, _18) -> [success: bb12, unwind unreachable];
    }

    bb2: {
        _10 = &_1;
        _9 = <&Vec<Wrapper> as IntoIterator>::into_iter(move _10) -> [return: bb3, unwind: bb10];
    }

    bb3: {
        _11 = move _9;
        goto -> bb4;
    }

    bb4: {
        _13 = &mut _11;
        _12 = <std::slice::Iter<'_, Wrapper> as Iterator>::next(_13) -> [return: bb5, unwind: bb10];
    }

    bb5: {
        _14 = discriminant(_12);
        switchInt(move _14) -> [0: bb8, 1: bb6, otherwise: bb7];
    }

    bb6: {
        _15 = ((_12 as Some).0: &Wrapper);
        goto -> bb4;
    }

    bb7: {
        unreachable;
    }

    bb8: {
        drop(_1) -> bb9;
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_1) -> [return: bb11, unwind terminate];
    }

    bb11 (cleanup): {
        resume;
    }

    bb12: {
        (*_16) = [move _7];
        _2 = move _6 as std::boxed::Box<[Wrapper]> (Pointer(Unsize));
        _1 = slice::<impl [Wrapper]>::into_vec::<std::alloc::Global>(move _2) -> bb2;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();

    bb0: {
        _1 = let_else() -> bb1;
    }

    bb1: {
        _2 = if_let() -> bb2;
    }

    bb2: {
        return;
    }
}

fn NonCopy::Thing(_1: Copyable) -> NonCopy {
    let mut _0: NonCopy;

    bb0: {
        _0 = NonCopy::Thing(move _1);
        return;
    }
}

// MIR FOR CTFE
fn NonCopy::Thing(_1: Copyable) -> NonCopy {
    let mut _0: NonCopy;

    bb0: {
        _0 = NonCopy::Thing(move _1);
        return;
    }
}
