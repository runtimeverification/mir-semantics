// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn ref_() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<u8>;
    let mut _2: &[u8];
    let _3: &[u8];
    let _4: &[u8; 5];
    let mut _6: std::vec::Vec<u8>;
    let mut _8: std::option::Option<()>;
    let mut _9: isize;
    let mut _11: isize;
    let _13: &[u8];
    let mut _15: &std::option::Option<std::vec::Vec<u8>>;
    let mut _16: isize;
    let _18: &[u8];
    let mut _20: &std::option::Option<std::vec::Vec<u8>>;
    let mut _21: isize;
    let _23: &[u8];
    let mut _25: std::option::Option<&[u8]>;
    let mut _26: &std::option::Option<std::vec::Vec<u8>>;
    let mut _27: isize;
    let mut _29: std::option::Option<&[u8]>;
    let mut _30: &std::option::Option<std::vec::Vec<u8>>;
    let mut _31: isize;
    let mut _32: &[u8];
    scope 1 {
        debug bytes => _1;
        let _5: std::option::Option<std::vec::Vec<u8>>;
        scope 2 {
            debug some => _5;
            let _7: &();
            scope 3 {
                debug a => _7;
                let _10: &std::vec::Vec<u8>;
                scope 4 {
                    debug a => _10;
                    let _12: &[u8];
                    scope 5 {
                        debug b => _12;
                        let _14: &std::vec::Vec<u8>;
                        scope 6 {
                            debug a => _14;
                            let _17: &[u8];
                            scope 7 {
                                debug b => _17;
                                let _19: &std::vec::Vec<u8>;
                                scope 8 {
                                    debug a => _19;
                                    let _22: &[u8];
                                    scope 9 {
                                        debug b => _22;
                                        let _24: &[u8];
                                        scope 10 {
                                            debug a => _24;
                                            scope 11 {
                                                debug b => _24;
                                                let _28: &&[u8];
                                                scope 12 {
                                                    debug a => _28;
                                                    scope 13 {
                                                        debug b => _32;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _4 = const b"Hello";
        _3 = <[u8; 5] as Index<RangeFull>>::index(_4, const RangeFull) -> bb1;
    }

    bb1: {
        _2 = _3;
        _1 = slice::<impl [u8]>::to_vec(move _2) -> bb2;
    }

    bb2: {
        _6 = move _1;
        _5 = Option::<Vec<u8>>::Some(move _6);
        _8 = Option::<()>::Some(const ());
        _9 = discriminant(_8);
        switchInt(move _9) -> [1: bb3, otherwise: bb14];
    }

    bb3: {
        _7 = &((_8 as Some).0: ());
        _11 = discriminant(_5);
        switchInt(move _11) -> [1: bb4, otherwise: bb14];
    }

    bb4: {
        _10 = &((_5 as Some).0: std::vec::Vec<u8>);
        _13 = <Vec<u8> as Deref>::deref(_10) -> [return: bb5, unwind: bb16];
    }

    bb5: {
        _12 = _13;
        _15 = &_5;
        _16 = discriminant((*_15));
        switchInt(move _16) -> [1: bb6, otherwise: bb14];
    }

    bb6: {
        _14 = &(((*_15) as Some).0: std::vec::Vec<u8>);
        _18 = <Vec<u8> as Deref>::deref(_14) -> [return: bb7, unwind: bb16];
    }

    bb7: {
        _17 = _18;
        _20 = &_5;
        _21 = discriminant((*_20));
        switchInt(move _21) -> [1: bb8, otherwise: bb14];
    }

    bb8: {
        _19 = &(((*_20) as Some).0: std::vec::Vec<u8>);
        _23 = <Vec<u8> as Deref>::deref(_19) -> [return: bb9, unwind: bb16];
    }

    bb9: {
        _22 = _23;
        _26 = &_5;
        _25 = Option::<Vec<u8>>::as_deref(move _26) -> [return: bb10, unwind: bb16];
    }

    bb10: {
        _27 = discriminant(_25);
        switchInt(move _27) -> [1: bb11, otherwise: bb14];
    }

    bb11: {
        _24 = ((_25 as Some).0: &[u8]);
        _30 = &_5;
        _29 = Option::<Vec<u8>>::as_deref(move _30) -> [return: bb12, unwind: bb16];
    }

    bb12: {
        _31 = discriminant(_29);
        switchInt(move _31) -> [1: bb13, otherwise: bb14];
    }

    bb13: {
        _28 = &((_29 as Some).0: &[u8]);
        _32 = deref_copy (*_28);
        drop(_5) -> bb15;
    }

    bb14: {
        drop(_5) -> bb15;
    }

    bb15: {
        return;
    }

    bb16 (cleanup): {
        drop(_5) -> [return: bb17, unwind terminate];
    }

    bb17 (cleanup): {
        resume;
    }
}

alloc1 (size: 5, align: 1) {
    48 65 6c 6c 6f                                  â”‚ Hello
}

fn ref_mut() -> () {
    let mut _0: ();
    let _1: &mut ();
    let mut _2: std::option::Option<()>;
    let mut _3: isize;
    let mut _5: &[u8];
    let _6: &[u8];
    let _7: &[u8; 5];
    let mut _9: std::vec::Vec<u8>;
    let mut _11: isize;
    let mut _13: &mut [u8];
    let mut _15: &mut std::option::Option<std::vec::Vec<u8>>;
    let mut _16: isize;
    let mut _18: &mut [u8];
    let mut _20: &mut std::option::Option<std::vec::Vec<u8>>;
    let mut _21: isize;
    let mut _23: &mut [u8];
    let mut _25: std::option::Option<&mut [u8]>;
    let mut _26: &mut std::option::Option<std::vec::Vec<u8>>;
    let mut _27: isize;
    let mut _29: std::option::Option<&mut [u8]>;
    let mut _30: &mut std::option::Option<std::vec::Vec<u8>>;
    let mut _31: isize;
    let mut _32: &mut [u8];
    scope 1 {
        debug a => _1;
        let _4: std::vec::Vec<u8>;
        scope 2 {
            debug bytes => _4;
            let mut _8: std::option::Option<std::vec::Vec<u8>>;
            scope 3 {
                debug some => _8;
                let _10: &mut std::vec::Vec<u8>;
                scope 4 {
                    debug a => _10;
                    let _12: &mut [u8];
                    scope 5 {
                        debug b => _12;
                        let _14: &mut std::vec::Vec<u8>;
                        scope 6 {
                            debug a => _14;
                            let _17: &mut [u8];
                            scope 7 {
                                debug b => _17;
                                let _19: &mut std::vec::Vec<u8>;
                                scope 8 {
                                    debug a => _19;
                                    let _22: &mut [u8];
                                    scope 9 {
                                        debug b => _22;
                                        let _24: &mut [u8];
                                        scope 10 {
                                            debug a => _24;
                                            scope 11 {
                                                debug b => _24;
                                                let _28: &mut &mut [u8];
                                                scope 12 {
                                                    debug a => _28;
                                                    scope 13 {
                                                        debug b => _32;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = Option::<()>::Some(const ());
        _3 = discriminant(_2);
        switchInt(move _3) -> [1: bb1, otherwise: bb15];
    }

    bb1: {
        _1 = &mut ((_2 as Some).0: ());
        _7 = const b"Hello";
        _6 = <[u8; 5] as Index<RangeFull>>::index(_7, const RangeFull) -> bb2;
    }

    bb2: {
        _5 = _6;
        _4 = slice::<impl [u8]>::to_vec(move _5) -> bb3;
    }

    bb3: {
        _9 = move _4;
        _8 = Option::<Vec<u8>>::Some(move _9);
        _11 = discriminant(_8);
        switchInt(move _11) -> [1: bb4, otherwise: bb14];
    }

    bb4: {
        _10 = &mut ((_8 as Some).0: std::vec::Vec<u8>);
        _13 = <Vec<u8> as DerefMut>::deref_mut(_10) -> [return: bb5, unwind: bb16];
    }

    bb5: {
        _12 = _13;
        _15 = &mut _8;
        _16 = discriminant((*_15));
        switchInt(move _16) -> [1: bb6, otherwise: bb14];
    }

    bb6: {
        _14 = &mut (((*_15) as Some).0: std::vec::Vec<u8>);
        _18 = <Vec<u8> as DerefMut>::deref_mut(_14) -> [return: bb7, unwind: bb16];
    }

    bb7: {
        _17 = _18;
        _20 = &mut _8;
        _21 = discriminant((*_20));
        switchInt(move _21) -> [1: bb8, otherwise: bb14];
    }

    bb8: {
        _19 = &mut (((*_20) as Some).0: std::vec::Vec<u8>);
        _23 = <Vec<u8> as DerefMut>::deref_mut(_19) -> [return: bb9, unwind: bb16];
    }

    bb9: {
        _22 = _23;
        _26 = &mut _8;
        _25 = Option::<Vec<u8>>::as_deref_mut(move _26) -> [return: bb10, unwind: bb16];
    }

    bb10: {
        _27 = discriminant(_25);
        switchInt(move _27) -> [1: bb11, otherwise: bb14];
    }

    bb11: {
        _24 = move ((_25 as Some).0: &mut [u8]);
        _30 = &mut _8;
        _29 = Option::<Vec<u8>>::as_deref_mut(move _30) -> [return: bb12, unwind: bb16];
    }

    bb12: {
        _31 = discriminant(_29);
        switchInt(move _31) -> [1: bb13, otherwise: bb14];
    }

    bb13: {
        _28 = &mut ((_29 as Some).0: &mut [u8]);
        _32 = deref_copy (*_28);
        drop(_8) -> bb15;
    }

    bb14: {
        drop(_8) -> bb15;
    }

    bb15: {
        return;
    }

    bb16 (cleanup): {
        drop(_8) -> [return: bb17, unwind terminate];
    }

    bb17 (cleanup): {
        resume;
    }
}

alloc2 (size: 5, align: 1) {
    48 65 6c 6c 6f                                  â”‚ Hello
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();

    bb0: {
        _1 = ref_() -> bb1;
    }

    bb1: {
        _2 = ref_mut() -> bb2;
    }

    bb2: {
        return;
    }
}
