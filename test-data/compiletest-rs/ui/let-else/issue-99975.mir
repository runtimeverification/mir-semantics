// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn return_result() -> Option<String> {
    let mut _0: std::option::Option<std::string::String>;
    let mut _1: std::string::String;
    let _2: &str;

    bb0: {
        _2 = const "ok";
        _1 = <str as ToString>::to_string(_2) -> bb1;
    }

    bb1: {
        _0 = Option::<String>::Some(move _1);
        return;
    }
}

fn start() -> String {
    let mut _0: std::string::String;
    let _1: &str;
    let _2: std::string::String;
    let mut _3: std::option::Option<std::string::String>;
    let mut _4: isize;
    let mut _5: bool;
    scope 1 {
        debug content => _2;
    }

    bb0: {
        _5 = const false;
        _3 = return_result() -> bb1;
    }

    bb1: {
        _4 = discriminant(_3);
        switchInt(move _4) -> [1: bb2, otherwise: bb3];
    }

    bb2: {
        _5 = const true;
        _2 = move ((_3 as Some).0: std::string::String);
        _5 = const false;
        _0 = move _2;
        _5 = const false;
        goto -> bb5;
    }

    bb3: {
        drop(_3) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _5 = const false;
        _1 = const "none";
        _0 = <str as ToString>::to_string(_1) -> bb5;
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        resume;
    }

    bb7 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate];
    }

    bb8 (cleanup): {
        switchInt(_5) -> [0: bb6, otherwise: bb7];
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::string::String;

    bb0: {
        _1 = start() -> bb1;
    }

    bb1: {
        drop(_1) -> bb2;
    }

    bb2: {
        return;
    }
}
