// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/codegen/issue-16602-3.rs:4:10: 4:15>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &u32;
    let _5: &u32;
    let _6: &str;
    let mut _7: &dyn std::fmt::Debug;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&u32;
    let _10: &&u32;
    let _11: &&u32;
    let _12: &str;
    let mut _13: &dyn std::fmt::Debug;
    let mut _14: &dyn std::fmt::Debug;
    let _15: &&&u32;
    scope 1 {
        debug __self_0 => _4;
        debug __self_1 => _5;
    }
    scope 2 {
        debug __self_0 => _10;
        debug __self_1 => _11;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _10 = &(((*_1) as Baz).0: &u32);
        _11 = &(((*_1) as Baz).1: &u32);
        _12 = const "Baz";
        _13 = _10 as &dyn std::fmt::Debug (Pointer(Unsize));
        _15 = &_11;
        _14 = _15 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field2_finish(_2, _12, move _13, move _14) -> bb4;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as Bar).0: u32);
        _5 = &(((*_1) as Bar).1: u32);
        _6 = const "Bar";
        _7 = _4 as &dyn std::fmt::Debug (Pointer(Unsize));
        _9 = &_5;
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field2_finish(_2, _6, move _7, move _8) -> bb4;
    }

    bb4: {
        return;
    }
}

static NUM: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const 100_u32;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: Foo;
    let _2: &u32;
    let _3: &u32;
    let mut _4: Foo;
    let mut _5: u32;
    let _6: &Foo;
    let mut _7: u32;
    let _8: &Foo;
    scope 1 {
        debug b => _1;
    }

    bb0: {
        _2 = const {alloc1: &u32};
        _3 = const {alloc1: &u32};
        _1 = Foo::Baz(_2, _3);
        _6 = &_1;
        _5 = f(_6) -> bb1;
    }

    bb1: {
        _8 = &_1;
        _7 = g(_8) -> bb2;
    }

    bb2: {
        _4 = Foo::Bar(move _5, move _7);
        _1 = move _4;
        return;
    }
}

alloc1 (static: NUM, size: 4, align: 4) {
    64 00 00 00                                     │ d...
}

static FNUM: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const 1_u32;
        return;
    }
}

fn f(_1: &Foo) -> u32 {
    debug b => _1;
    let mut _0: u32;
    let mut _2: &u32;

    bb0: {
        _2 = const {alloc2: &u32};
        _0 = (*_2);
        return;
    }
}

alloc2 (static: FNUM, size: 4, align: 4) {
    01 00 00 00                                     │ ....
}

static GNUM: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const 2_u32;
        return;
    }
}

fn g(_1: &Foo) -> u32 {
    debug b => _1;
    let mut _0: u32;
    let mut _2: &u32;

    bb0: {
        _2 = const {alloc3: &u32};
        _0 = (*_2);
        return;
    }
}

alloc3 (static: GNUM, size: 4, align: 4) {
    02 00 00 00                                     │ ....
}

fn Foo::Bar(_1: u32, _2: u32) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::Bar(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn Foo::Bar(_1: u32, _2: u32) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::Bar(move _1, move _2);
        return;
    }
}

fn Foo::Baz(_1: &u32, _2: &u32) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::Baz(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn Foo::Baz(_1: &u32, _2: &u32) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::Baz(move _1, move _2);
        return;
    }
}
