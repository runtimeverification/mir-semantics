// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: A;
    let mut _2: A;
    let mut _3: u32;
    let mut _4: u32;
    let mut _5: u32;
    let mut _6: u32;
    let mut _7: (&u32, &u32);
    let mut _8: &u32;
    let mut _9: &u32;
    let _10: u32;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: u32;
    let mut _16: u32;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _20: (&u32, &u32);
    let mut _21: &u32;
    let mut _22: &u32;
    let _23: u32;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: u32;
    let mut _29: u32;
    let _31: !;
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug a => _1;
        let _11: &u32;
        let _12: &u32;
        let _24: &u32;
        let _25: &u32;
        scope 2 {
            debug left_val => _11;
            debug right_val => _12;
            let _17: core::panicking::AssertKind;
            scope 3 {
                debug kind => _17;
            }
        }
        scope 4 {
            debug left_val => _24;
            debug right_val => _25;
            let _30: core::panicking::AssertKind;
            scope 5 {
                debug kind => _30;
            }
        }
    }

    bb0: {
        _1 = A { x: const 1_u32, y: const 1_u32 };
        _4 = (_1.1: u32);
        _3 = Mul(move _4, const 2_u32);
        _6 = (_1.0: u32);
        _5 = Mul(move _6, const 2_u32);
        _2 = A { x: move _3, y: move _5 };
        _1 = move _2;
        _8 = &(_1.0: u32);
        _10 = const 2_u32;
        _9 = &_10;
        _7 = (move _8, move _9);
        _11 = (_7.0: &u32);
        _12 = (_7.1: &u32);
        _15 = (*_11);
        _16 = (*_12);
        _14 = Eq(move _15, move _16);
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<u32, u32>(move _17, _11, _12, move _19);
    }

    bb2: {
        _21 = &(_1.1: u32);
        _23 = const 2_u32;
        _22 = &_23;
        _20 = (move _21, move _22);
        _24 = (_20.0: &u32);
        _25 = (_20.1: &u32);
        _28 = (*_24);
        _29 = (*_25);
        _27 = Eq(move _28, move _29);
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _30 = core::panicking::AssertKind::Eq;
        _32 = Option::<Arguments<'_>>::None;
        _31 = core::panicking::assert_failed::<u32, u32>(move _30, _24, _25, move _32);
    }

    bb4: {
        return;
    }
}
