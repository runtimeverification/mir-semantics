// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn bump() -> Option<usize> {
    let mut _0: std::option::Option<usize>;
    let mut _1: !;

    bb0: {
        _1 = core::panicking::panic(const "internal error: entered unreachable code");
    }
}

fn take_until(_1: impl Fn() -> bool) -> () {
    debug terminate => _1;
    let mut _0: ();
    let mut _2: bool;
    let mut _3: &impl Fn() -> bool;
    let _4: std::option::Option<usize>;

    bb0: {
        goto -> bb1;
    }

    bb1: {
        _3 = &_1;
        _2 = <impl Fn() -> bool as Fn<()>>::call(move _3, const ()) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        switchInt(move _2) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        drop(_1) -> bb5;
    }

    bb4: {
        _4 = bump() -> [return: bb8, unwind: bb6];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_1) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }

    bb8: {
        goto -> bb1;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: std::option::Option<u32>;
    let mut _3: std::option::Option<std::string::String>;

    bb0: {
        _1 = take_until::<[closure@ui/codegen/issue-88043-bb-does-not-have-terminator.rs:24:16: 24:18]>(const ZeroSized: [closure@ui/codegen/issue-88043-bb-does-not-have-terminator.rs:24:16: 24:18]) -> bb1;
    }

    bb1: {
        _3 = Option::<String>::None;
        _2 = f(move _3) -> bb2;
    }

    bb2: {
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/codegen/issue-88043-bb-does-not-have-terminator.rs:24:16: 24:18]) -> bool {
    let mut _0: bool;

    bb0: {
        _0 = const true;
        return;
    }
}

fn f(_1: Option<String>) -> Option<u32> {
    debug _a => _1;
    let mut _0: std::option::Option<u32>;
    let _2: std::option::Option<u32>;

    bb0: {
        goto -> bb1;
    }

    bb1: {
        _2 = g() -> [return: bb4, unwind: bb2];
    }

    bb2 (cleanup): {
        drop(_1) -> [return: bb3, unwind terminate];
    }

    bb3 (cleanup): {
        resume;
    }

    bb4: {
        goto -> bb1;
    }
}

fn g() -> Option<u32> {
    let mut _0: std::option::Option<u32>;

    bb0: {
        _0 = Option::<u32>::None;
        return;
    }
}
