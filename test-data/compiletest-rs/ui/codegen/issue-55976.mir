// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: for<'a> fn(&'a std::vec::Vec<std::boxed::Box<dyn for<'b> std::ops::Fn(&'b u8)>>) -> &'a std::vec::Vec<std::boxed::Box<dyn std::ops::Fn(&u8)>>;

    bb0: {
        _2 = const ZeroSized: [closure@ui/codegen/issue-55976.rs:7:16: 7:19] as for<'a> fn(&'a std::vec::Vec<std::boxed::Box<dyn for<'b> std::ops::Fn(&'b u8)>>) -> &'a std::vec::Vec<std::boxed::Box<dyn std::ops::Fn(&u8)>> (Pointer(ClosureFnPointer(Normal)));
        _1 = type_error::<&u8>(move _2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/codegen/issue-55976.rs:7:16: 7:19], _2: &Vec<Box<dyn for<'b> Fn(&'b u8)>>) -> &Vec<Box<dyn Fn(&u8)>> {
    debug x => _2;
    let mut _0: &std::vec::Vec<std::boxed::Box<dyn std::ops::Fn(&u8)>>;
    let _3: &&std::vec::Vec<std::boxed::Box<dyn for<'b> std::ops::Fn(&'b u8)>>;

    bb0: {
        _3 = &_2;
        _0 = deref_copy (*_3);
        return;
    }
}

fn type_error(_1: for<'a> fn(&'a Vec<Box<dyn for<'b> Fn(&'b u8)>>) -> &'a Vec<Box<dyn Fn(T)>>) -> () {
    debug _selector => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}
