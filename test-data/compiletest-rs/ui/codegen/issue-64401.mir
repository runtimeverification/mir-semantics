// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/codegen/issue-64401.rs:23:1: 23:40>::new(_1: F) -> CtxHandlerWithoutState<M, F> {
    debug _function => _1;
    let mut _0: CtxHandlerWithoutState<M, F>;

    bb0: {
        _0 = CtxHandlerWithoutState::<M, F> { message_type: const ZeroSized: PhantomData<M>, _function: move _1 };
        return;
    }
}

fn <impl at ui/codegen/issue-64401.rs:32:1: 32:56>::handle(_1: &CtxHandlerWithoutState<M, F>) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn e_to_i(_1: <M as Owned<'_>>::Reader) -> () {
    let mut _0: ();

    bb0: {
        drop(_1) -> bb1;
    }

    bb1: {
        return;
    }
}

fn send_external_to_internal() -> () {
    let mut _0: ();
    let mut _1: std::boxed::Box<dyn Handler>;
    let mut _2: std::boxed::Box<CtxHandlerWithoutState<M, for<'a> fn(<M as Owned<'a>>::Reader) {e_to_i::<M>}>>;
    let mut _3: CtxHandlerWithoutState<M, for<'a> fn(<M as Owned<'a>>::Reader) {e_to_i::<M>}>;
    scope 1 {
    }

    bb0: {
        _3 = CtxHandlerWithoutState::<M, for<'a> fn(<M as Owned<'a>>::Reader) {e_to_i::<M>}>::new(e_to_i::<M>) -> bb1;
    }

    bb1: {
        _2 = Box::<CtxHandlerWithoutState<M, for<'a> fn(<M as Owned<'a>>::Reader) {e_to_i::<M>}>>::new(const ZeroSized: CtxHandlerWithoutState<M, for<'a> fn(<M as Owned<'a>>::Reader) {e_to_i::<M>}>) -> bb2;
    }

    bb2: {
        _1 = move _2 as std::boxed::Box<dyn Handler> (Pointer(Unsize));
        drop(_1) -> bb3;
    }

    bb3: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        _0 = send_external_to_internal::<()>() -> bb1;
    }

    bb1: {
        return;
    }
}
