// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn break_if_r_is_noalias(_1: &RefCell<i32>, _2: impl Deref<Target = i32>) -> i32 {
    debug rc => _1;
    debug r => _2;
    let mut _0: i32;
    let _3: *const i32;
    let _4: &i32;
    let _5: &i32;
    let mut _6: &impl Deref<Target = i32>;
    let mut _8: &i32;
    let mut _9: &impl Deref<Target = i32>;
    let _10: ();
    let mut _11: impl Deref<Target = i32>;
    let mut _12: &mut i32;
    let mut _13: &mut std::cell::RefMut<'_, i32>;
    let mut _14: std::cell::RefMut<'_, i32>;
    let _17: &i32;
    let _18: &i32;
    let mut _19: &std::cell::Ref<'_, i32>;
    let mut _20: bool;
    let mut _21: !;
    let mut _22: i32;
    let mut _23: &i32;
    let mut _24: &std::cell::Ref<'_, i32>;
    let mut _25: bool;
    scope 1 {
        debug ptr1 => _3;
        let _7: i32;
        scope 2 {
            debug a => _7;
            let _15: std::cell::Ref<'_, i32>;
            scope 3 {
                debug r2 => _15;
                let _16: *const i32;
                scope 4 {
                    debug ptr2 => _16;
                }
            }
        }
    }

    bb0: {
        _25 = const false;
        _25 = const true;
        _6 = &_2;
        _5 = <impl Deref<Target = i32> as Deref>::deref(move _6) -> [return: bb1, unwind: bb17];
    }

    bb1: {
        _4 = _5;
        _3 = &raw const (*_4);
        _9 = &_2;
        _8 = <impl Deref<Target = i32> as Deref>::deref(move _9) -> [return: bb2, unwind: bb17];
    }

    bb2: {
        _7 = (*_8);
        _25 = const false;
        _11 = move _2;
        _10 = std::mem::drop::<impl Deref<Target = i32>>(move _11) -> [return: bb3, unwind: bb17];
    }

    bb3: {
        _14 = RefCell::<i32>::borrow_mut(_1) -> [return: bb4, unwind: bb17];
    }

    bb4: {
        _13 = &mut _14;
        _12 = <RefMut<'_, i32> as DerefMut>::deref_mut(move _13) -> [return: bb5, unwind: bb14];
    }

    bb5: {
        (*_12) = const 2_i32;
        drop(_14) -> [return: bb6, unwind: bb17];
    }

    bb6: {
        _15 = RefCell::<i32>::borrow(_1) -> [return: bb7, unwind: bb17];
    }

    bb7: {
        _19 = &_15;
        _18 = <Ref<'_, i32> as Deref>::deref(move _19) -> [return: bb8, unwind: bb13];
    }

    bb8: {
        _17 = _18;
        _16 = &raw const (*_17);
        _20 = Ne(_16, _3);
        switchInt(move _20) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _21 = begin_panic::<&str>(const "explicit panic") -> bb13;
    }

    bb10: {
        _24 = &_15;
        _23 = <Ref<'_, i32> as Deref>::deref(move _24) -> [return: bb11, unwind: bb13];
    }

    bb11: {
        _22 = (*_23);
        _0 = Add(_7, move _22);
        drop(_15) -> [return: bb12, unwind: bb17];
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        drop(_15) -> [return: bb17, unwind terminate];
    }

    bb14 (cleanup): {
        drop(_14) -> [return: bb17, unwind terminate];
    }

    bb15 (cleanup): {
        resume;
    }

    bb16 (cleanup): {
        drop(_2) -> [return: bb15, unwind terminate];
    }

    bb17 (cleanup): {
        switchInt(_25) -> [0: bb15, otherwise: bb16];
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: std::cell::RefCell<i32>;
    let _3: &std::cell::RefCell<i32>;
    let mut _4: std::cell::Ref<'_, i32>;
    let mut _5: &std::cell::RefCell<i32>;
    let mut _6: (&i32, &i32);
    let mut _7: &i32;
    let mut _8: &i32;
    let _9: i32;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: i32;
    let mut _15: i32;
    let _17: !;
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _19: &mut i32;
    let mut _20: &mut std::cell::RefCell<i32>;
    let _22: &std::cell::RefCell<i32>;
    let mut _23: std::cell::RefMut<'_, i32>;
    let mut _24: &std::cell::RefCell<i32>;
    let mut _25: (&i32, &i32);
    let mut _26: &i32;
    let mut _27: &i32;
    let _28: i32;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: i32;
    let mut _34: i32;
    let _36: !;
    let mut _37: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug rc => _1;
        let _2: i32;
        scope 2 {
            debug res => _2;
            let _10: &i32;
            let _11: &i32;
            let _21: i32;
            scope 3 {
                debug left_val => _10;
                debug right_val => _11;
                let _16: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _16;
                }
            }
            scope 5 {
                debug res => _21;
                let _29: &i32;
                let _30: &i32;
                scope 6 {
                    debug left_val => _29;
                    debug right_val => _30;
                    let _35: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _35;
                    }
                }
            }
        }
    }

    bb0: {
        _1 = RefCell::<i32>::new(const 1_i32) -> bb1;
    }

    bb1: {
        _3 = &_1;
        _5 = &_1;
        _4 = RefCell::<i32>::borrow(move _5) -> bb2;
    }

    bb2: {
        _2 = break_if_r_is_noalias::<Ref<'_, i32>>(_3, move _4) -> bb3;
    }

    bb3: {
        _7 = &_2;
        _9 = const 3_i32;
        _8 = &_9;
        _6 = (move _7, move _8);
        _10 = (_6.0: &i32);
        _11 = (_6.1: &i32);
        _14 = (*_10);
        _15 = (*_11);
        _13 = Eq(move _14, move _15);
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _16 = core::panicking::AssertKind::Eq;
        _18 = Option::<Arguments<'_>>::None;
        _17 = core::panicking::assert_failed::<i32, i32>(move _16, _10, _11, move _18);
    }

    bb5: {
        _20 = &mut _1;
        _19 = RefCell::<i32>::get_mut(move _20) -> bb6;
    }

    bb6: {
        (*_19) = const 1_i32;
        _22 = &_1;
        _24 = &_1;
        _23 = RefCell::<i32>::borrow_mut(move _24) -> bb7;
    }

    bb7: {
        _21 = break_if_r_is_noalias::<RefMut<'_, i32>>(_22, move _23) -> bb8;
    }

    bb8: {
        _26 = &_21;
        _28 = const 3_i32;
        _27 = &_28;
        _25 = (move _26, move _27);
        _29 = (_25.0: &i32);
        _30 = (_25.1: &i32);
        _33 = (*_29);
        _34 = (*_30);
        _32 = Eq(move _33, move _34);
        _31 = Not(move _32);
        switchInt(move _31) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _35 = core::panicking::AssertKind::Eq;
        _37 = Option::<Arguments<'_>>::None;
        _36 = core::panicking::assert_failed::<i32, i32>(move _35, _29, _30, move _37);
    }

    bb10: {
        return;
    }
}
