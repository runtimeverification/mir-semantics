// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/unwind-no-uwtable.rs:10:1: 10:27>::drop(_1: &mut Increase<'_>) -> () {
    debug self => _1;
    let mut _0: ();
    let mut _2: &mut u8;
    let mut _3: &mut u8;

    bb0: {
        _2 = deref_copy ((*_1).0: &mut u8);
        _3 = deref_copy ((*_1).0: &mut u8);
        (*_2) = Add((*_3), const 1_u8);
        return;
    }
}

fn unwind() -> () {
    let mut _0: ();
    let mut _1: !;

    bb0: {
        _1 = begin_panic::<&str>(const "explicit panic");
    }
}

fn increase(_1: &mut u8) -> () {
    debug count => _1;
    let mut _0: ();
    let _2: Increase<'_>;
    let _3: ();
    scope 1 {
        debug _increase => _2;
    }

    bb0: {
        _2 = Increase::<'_>(_1);
        _3 = unwind() -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_2) -> bb2;
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: u8;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let _5: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _6: std::panic::AssertUnwindSafe<[closure@ui/unwind-no-uwtable.rs:31:9: 31:11]>;
    let mut _7: [closure@ui/unwind-no-uwtable.rs:31:9: 31:11];
    let mut _8: &mut u8;
    let mut _9: !;
    let mut _10: (&u8, &u8);
    let mut _11: &u8;
    let mut _12: &u8;
    let _13: u8;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: u8;
    let mut _19: u8;
    let _21: !;
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug count => _1;
        let _14: &u8;
        let _15: &u8;
        scope 2 {
            debug left_val => _14;
            debug right_val => _15;
            let _20: core::panicking::AssertKind;
            scope 3 {
                debug kind => _20;
            }
        }
    }

    bb0: {
        _1 = const 0_u8;
        _8 = &mut _1;
        _7 = [closure@ui/unwind-no-uwtable.rs:31:9: 31:11] { count: move _8 };
        _6 = AssertUnwindSafe::<[closure@ui/unwind-no-uwtable.rs:31:9: 31:11]>(move _7);
        _5 = catch_unwind::<AssertUnwindSafe<[closure@ui/unwind-no-uwtable.rs:31:9: 31:11]>, ()>(move _6) -> bb1;
    }

    bb1: {
        _4 = &_5;
        _3 = Result::<(), Box<dyn Any + Send>>::is_err(move _4) -> [return: bb2, unwind: bb8];
    }

    bb2: {
        _2 = Not(move _3);
        drop(_5) -> bb3;
    }

    bb3: {
        switchInt(move _2) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _9 = core::panicking::panic(const "assertion failed: panic::catch_unwind(AssertUnwindSafe(#[inline(never)] ||\\n                increase(&mut count))).is_err()");
    }

    bb5: {
        _11 = &_1;
        _13 = const 1_u8;
        _12 = &_13;
        _10 = (move _11, move _12);
        _14 = (_10.0: &u8);
        _15 = (_10.1: &u8);
        _18 = (*_14);
        _19 = (*_15);
        _17 = Eq(move _18, move _19);
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _20 = core::panicking::AssertKind::Eq;
        _22 = Option::<Arguments<'_>>::None;
        _21 = core::panicking::assert_failed::<u8, u8>(move _20, _14, _15, move _22);
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_5) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        resume;
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/unwind-no-uwtable.rs:31:9: 31:11]) -> () {
    debug count => (*((*_1).0: &mut u8));
    let mut _0: ();
    let mut _2: &mut u8;

    bb0: {
        _2 = deref_copy ((*_1).0: &mut u8);
        _0 = increase(_2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn Increase(_1: &mut u8) -> Increase<'_> {
    let mut _0: Increase<'_>;

    bb0: {
        _0 = Increase::<'_>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Increase(_1: &mut u8) -> Increase<'_> {
    let mut _0: Increase<'_>;

    bb0: {
        _0 = Increase::<'_>(move _1);
        return;
    }
}
