// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/match/guards.rs:5:16: 5:21>::clone(_1: &Pair) -> Pair {
    debug self => _1;
    let mut _0: Pair;
    scope 1 {
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: isize;
    let mut _2: i32;
    let _3: i32;
    let _4: &i32;
    let mut _5: bool;
    let mut _6: i32;
    let _7: i32;
    let _8: &i32;
    let mut _9: bool;
    let mut _10: i32;
    let mut _11: (&isize, &isize);
    let mut _12: &isize;
    let mut _13: &isize;
    let _14: isize;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: isize;
    let mut _20: isize;
    let _22: !;
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: Pair;
    let mut _28: bool;
    let mut _29: isize;
    let mut _30: bool;
    let mut _31: isize;
    let mut _36: isize;
    let mut _37: isize;
    let mut _40: (&isize, &isize);
    let mut _41: &isize;
    let mut _42: &isize;
    let _43: isize;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: isize;
    let mut _49: isize;
    let _51: !;
    let mut _52: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug a => _1;
        let _15: &isize;
        let _16: &isize;
        let _24: isize;
        let _26: Pair;
        let _27: &Pair;
        let _32: isize;
        let _33: &isize;
        let _34: isize;
        let _35: &isize;
        let _38: isize;
        let _39: isize;
        scope 4 {
            debug left_val => _15;
            debug right_val => _16;
            let _21: core::panicking::AssertKind;
            scope 5 {
                debug kind => _21;
            }
        }
        scope 6 {
            debug b => _24;
            let _44: &isize;
            let _45: &isize;
            scope 10 {
                debug left_val => _44;
                debug right_val => _45;
                let _50: core::panicking::AssertKind;
                scope 11 {
                    debug kind => _50;
                }
            }
        }
        scope 7 {
            debug x => _26;
            debug x => _27;
        }
        scope 8 {
            debug x => _32;
            debug x => _33;
            debug y => _34;
            debug y => _35;
        }
        scope 9 {
            debug _x => _38;
            debug _y => _39;
        }
    }
    scope 2 {
        debug x => _3;
        debug x => _4;
    }
    scope 3 {
        debug x => _7;
        debug x => _8;
    }

    bb0: {
        _2 = const 10_i32;
        _4 = &_2;
        _6 = (*_4);
        _5 = Lt(move _6, const 7_i32);
        switchInt(move _5) -> [0: bb3, otherwise: bb2];
    }

    bb1: {
        _1 = const 4_isize;
        goto -> bb7;
    }

    bb2: {
        _3 = _2;
        _1 = const 1_isize;
        goto -> bb7;
    }

    bb3: {
        _8 = &_2;
        _10 = (*_8);
        _9 = Lt(move _10, const 11_i32);
        switchInt(move _9) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _7 = _2;
        _1 = const 2_isize;
        goto -> bb7;
    }

    bb5: {
        switchInt(_2) -> [10: bb6, otherwise: bb1];
    }

    bb6: {
        _1 = const 3_isize;
        goto -> bb7;
    }

    bb7: {
        _12 = &_1;
        _14 = const 2_isize;
        _13 = &_14;
        _11 = (move _12, move _13);
        _15 = (_11.0: &isize);
        _16 = (_11.1: &isize);
        _19 = (*_15);
        _20 = (*_16);
        _18 = Eq(move _19, move _20);
        _17 = Not(move _18);
        switchInt(move _17) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _21 = core::panicking::AssertKind::Eq;
        _23 = Option::<Arguments<'_>>::None;
        _22 = core::panicking::assert_failed::<isize, isize>(move _21, _15, _16, move _23);
    }

    bb9: {
        _25 = Pair { x: const 10_isize, y: const 20_isize };
        _27 = &_25;
        _29 = ((*_27).0: isize);
        _28 = Lt(move _29, const 5_isize);
        switchInt(move _28) -> [0: bb12, otherwise: bb10];
    }

    bb10: {
        _31 = ((*_27).1: isize);
        _30 = Lt(move _31, const 5_isize);
        switchInt(move _30) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _26 = _25;
        _24 = const 1_isize;
        goto -> bb16;
    }

    bb12: {
        _33 = &(_25.0: isize);
        _35 = &(_25.1: isize);
        _36 = (*_33);
        switchInt(move _36) -> [10: bb13, otherwise: bb15];
    }

    bb13: {
        _37 = (*_35);
        switchInt(move _37) -> [20: bb14, otherwise: bb15];
    }

    bb14: {
        _32 = (_25.0: isize);
        _34 = (_25.1: isize);
        _24 = const 2_isize;
        goto -> bb16;
    }

    bb15: {
        _38 = (_25.0: isize);
        _39 = (_25.1: isize);
        _24 = const 3_isize;
        goto -> bb16;
    }

    bb16: {
        _41 = &_24;
        _43 = const 2_isize;
        _42 = &_43;
        _40 = (move _41, move _42);
        _44 = (_40.0: &isize);
        _45 = (_40.1: &isize);
        _48 = (*_44);
        _49 = (*_45);
        _47 = Eq(move _48, move _49);
        _46 = Not(move _47);
        switchInt(move _46) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _50 = core::panicking::AssertKind::Eq;
        _52 = Option::<Arguments<'_>>::None;
        _51 = core::panicking::assert_failed::<isize, isize>(move _50, _44, _45, move _52);
    }

    bb18: {
        return;
    }
}
