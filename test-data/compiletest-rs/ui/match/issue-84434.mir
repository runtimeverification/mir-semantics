// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const MY_A: A = {
    let mut _0: A;
    let mut _1: for<'a, 'b> fn(bool, &'a std::path::Path, std::option::Option<&'b std::path::Path>);
    let mut _2: [closure@ui/match/issue-84434.rs:9:11: 9:24];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = [closure@ui/match/issue-84434.rs:9:11: 9:24];
        _1 = move _2 as for<'a, 'b> fn(bool, &'a std::path::Path, std::option::Option<&'b std::path::Path>) (Pointer(ClosureFnPointer(Normal)));
        StorageDead(_2);
        _0 = A { func: move _1 };
        StorageDead(_1);
        return;
    }
}

fn MY_A::{closure#0}(_1: &[closure@ui/match/issue-84434.rs:9:11: 9:24], _2: bool, _3: &Path, _4: Option<&Path>) -> () {
    debug check => _2;
    debug a => _3;
    debug b => _4;
    let mut _0: ();
    let mut _5: std::option::Option<&std::path::Path>;
    let mut _6: isize;
    scope 1 {
    }
    scope 2 {
        debug parent => _7;
        let _7: &std::path::Path;
        scope 3 {
        }
    }

    bb0: {
        switchInt(_2) -> [0: bb1, otherwise: bb4];
    }

    bb1: {
        _5 = Option::<&Path>::and_then::<&Path, [closure@ui/match/issue-84434.rs:12:49: 12:52]>(_4, const ZeroSized: [closure@ui/match/issue-84434.rs:12:49: 12:52]) -> bb2;
    }

    bb2: {
        _6 = discriminant(_5);
        switchInt(move _6) -> [1: bb3, otherwise: bb4];
    }

    bb3: {
        _7 = ((_5 as Some).0: &std::path::Path);
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

fn MY_A::{closure#0}::{closure#0}(_1: [closure@ui/match/issue-84434.rs:12:49: 12:52], _2: &Path) -> Option<&Path> {
    debug p => _2;
    let mut _0: std::option::Option<&std::path::Path>;

    bb0: {
        _0 = Path::parent(_2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
