// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn fun1(_1: &Enum, _2: &Enum) -> usize {
    debug e1 => _1;
    debug e2 => _2;
    let mut _0: usize;
    let mut _3: (&Enum, &Enum);
    let mut _4: isize;
    let mut _5: isize;
    let mut _6: isize;
    let mut _7: &Enum;
    let mut _8: &Enum;
    let mut _9: &Enum;

    bb0: {
        _3 = (_1, _2);
        _7 = deref_copy (_3.0: &Enum);
        _6 = discriminant((*_7));
        switchInt(move _6) -> [0: bb1, 1: bb3, otherwise: bb2];
    }

    bb1: {
        _8 = deref_copy (_3.1: &Enum);
        _4 = discriminant((*_8));
        switchInt(move _4) -> [0: bb5, 1: bb6, otherwise: bb2];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _9 = deref_copy (_3.1: &Enum);
        _5 = discriminant((*_9));
        switchInt(move _5) -> [0: bb4, 1: bb7, otherwise: bb2];
    }

    bb4: {
        _0 = const 3_usize;
        goto -> bb8;
    }

    bb5: {
        _0 = const 0_usize;
        goto -> bb8;
    }

    bb6: {
        _0 = const 1_usize;
        goto -> bb8;
    }

    bb7: {
        _0 = const 2_usize;
        goto -> bb8;
    }

    bb8: {
        return;
    }
}

fn fun2(_1: &Enum, _2: &Enum) -> usize {
    debug e1 => _1;
    debug e2 => _2;
    let mut _0: usize;
    let mut _3: (&Enum, &Enum);
    let mut _4: isize;
    let mut _5: isize;
    let mut _6: isize;
    let mut _7: &Enum;
    let mut _8: &Enum;
    let mut _9: &Enum;

    bb0: {
        _3 = (_1, _2);
        _7 = deref_copy (_3.0: &Enum);
        _6 = discriminant((*_7));
        switchInt(move _6) -> [0: bb1, 1: bb2, otherwise: bb4];
    }

    bb1: {
        _8 = deref_copy (_3.1: &Enum);
        _4 = discriminant((*_8));
        switchInt(move _4) -> [0: bb5, otherwise: bb6];
    }

    bb2: {
        _9 = deref_copy (_3.1: &Enum);
        _5 = discriminant((*_9));
        switchInt(move _5) -> [1: bb7, otherwise: bb3];
    }

    bb3: {
        _0 = const 3_usize;
        goto -> bb8;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _0 = const 0_usize;
        goto -> bb8;
    }

    bb6: {
        _0 = const 1_usize;
        goto -> bb8;
    }

    bb7: {
        _0 = const 2_usize;
        goto -> bb8;
    }

    bb8: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Enum;
    let mut _3: (&usize, &usize);
    let mut _4: &usize;
    let _5: usize;
    let _6: &Enum;
    let _7: &Enum;
    let mut _8: &usize;
    let _9: usize;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: usize;
    let mut _15: usize;
    let _17: !;
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _19: (&usize, &usize);
    let mut _20: &usize;
    let _21: usize;
    let _22: &Enum;
    let _23: &Enum;
    let mut _24: &usize;
    let _25: usize;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: usize;
    let mut _31: usize;
    let _33: !;
    let mut _34: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _35: (&usize, &usize);
    let mut _36: &usize;
    let _37: usize;
    let _38: &Enum;
    let _39: &Enum;
    let mut _40: &usize;
    let _41: usize;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: usize;
    let mut _47: usize;
    let _49: !;
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _51: (&usize, &usize);
    let mut _52: &usize;
    let _53: usize;
    let _54: &Enum;
    let _55: &Enum;
    let mut _56: &usize;
    let _57: usize;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: usize;
    let mut _63: usize;
    let _65: !;
    let mut _66: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _67: (&usize, &usize);
    let mut _68: &usize;
    let _69: usize;
    let _70: &Enum;
    let _71: &Enum;
    let mut _72: &usize;
    let _73: usize;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: usize;
    let mut _79: usize;
    let _81: !;
    let mut _82: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _83: (&usize, &usize);
    let mut _84: &usize;
    let _85: usize;
    let _86: &Enum;
    let _87: &Enum;
    let mut _88: &usize;
    let _89: usize;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: usize;
    let mut _95: usize;
    let _97: !;
    let mut _98: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _99: (&usize, &usize);
    let mut _100: &usize;
    let _101: usize;
    let _102: &Enum;
    let _103: &Enum;
    let mut _104: &usize;
    let _105: usize;
    let mut _108: bool;
    let mut _109: bool;
    let mut _110: usize;
    let mut _111: usize;
    let _113: !;
    let mut _114: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _115: (&usize, &usize);
    let mut _116: &usize;
    let _117: usize;
    let _118: &Enum;
    let _119: &Enum;
    let mut _120: &usize;
    let _121: usize;
    let mut _124: bool;
    let mut _125: bool;
    let mut _126: usize;
    let mut _127: usize;
    let _129: !;
    let mut _130: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug foo => _1;
        let _2: Enum;
        scope 2 {
            debug bar => _2;
            let _10: &usize;
            let _11: &usize;
            let _26: &usize;
            let _27: &usize;
            let _42: &usize;
            let _43: &usize;
            let _58: &usize;
            let _59: &usize;
            let _74: &usize;
            let _75: &usize;
            let _90: &usize;
            let _91: &usize;
            let _106: &usize;
            let _107: &usize;
            let _122: &usize;
            let _123: &usize;
            scope 3 {
                debug left_val => _10;
                debug right_val => _11;
                let _16: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _16;
                }
            }
            scope 5 {
                debug left_val => _26;
                debug right_val => _27;
                let _32: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _32;
                }
            }
            scope 7 {
                debug left_val => _42;
                debug right_val => _43;
                let _48: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _48;
                }
            }
            scope 9 {
                debug left_val => _58;
                debug right_val => _59;
                let _64: core::panicking::AssertKind;
                scope 10 {
                    debug kind => _64;
                }
            }
            scope 11 {
                debug left_val => _74;
                debug right_val => _75;
                let _80: core::panicking::AssertKind;
                scope 12 {
                    debug kind => _80;
                }
            }
            scope 13 {
                debug left_val => _90;
                debug right_val => _91;
                let _96: core::panicking::AssertKind;
                scope 14 {
                    debug kind => _96;
                }
            }
            scope 15 {
                debug left_val => _106;
                debug right_val => _107;
                let _112: core::panicking::AssertKind;
                scope 16 {
                    debug kind => _112;
                }
            }
            scope 17 {
                debug left_val => _122;
                debug right_val => _123;
                let _128: core::panicking::AssertKind;
                scope 18 {
                    debug kind => _128;
                }
            }
        }
    }

    bb0: {
        _1 = Enum::Foo { foo: const 1_usize };
        _2 = Enum::Bar { bar: const 1_usize };
        _6 = &_1;
        _7 = &_1;
        _5 = fun1(_6, _7) -> bb1;
    }

    bb1: {
        _4 = &_5;
        _9 = const 0_usize;
        _8 = &_9;
        _3 = (move _4, move _8);
        _10 = (_3.0: &usize);
        _11 = (_3.1: &usize);
        _14 = (*_10);
        _15 = (*_11);
        _13 = Eq(move _14, move _15);
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _16 = core::panicking::AssertKind::Eq;
        _18 = Option::<Arguments<'_>>::None;
        _17 = core::panicking::assert_failed::<usize, usize>(move _16, _10, _11, move _18);
    }

    bb3: {
        _22 = &_1;
        _23 = &_2;
        _21 = fun1(_22, _23) -> bb4;
    }

    bb4: {
        _20 = &_21;
        _25 = const 1_usize;
        _24 = &_25;
        _19 = (move _20, move _24);
        _26 = (_19.0: &usize);
        _27 = (_19.1: &usize);
        _30 = (*_26);
        _31 = (*_27);
        _29 = Eq(move _30, move _31);
        _28 = Not(move _29);
        switchInt(move _28) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _32 = core::panicking::AssertKind::Eq;
        _34 = Option::<Arguments<'_>>::None;
        _33 = core::panicking::assert_failed::<usize, usize>(move _32, _26, _27, move _34);
    }

    bb6: {
        _38 = &_2;
        _39 = &_2;
        _37 = fun1(_38, _39) -> bb7;
    }

    bb7: {
        _36 = &_37;
        _41 = const 2_usize;
        _40 = &_41;
        _35 = (move _36, move _40);
        _42 = (_35.0: &usize);
        _43 = (_35.1: &usize);
        _46 = (*_42);
        _47 = (*_43);
        _45 = Eq(move _46, move _47);
        _44 = Not(move _45);
        switchInt(move _44) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _48 = core::panicking::AssertKind::Eq;
        _50 = Option::<Arguments<'_>>::None;
        _49 = core::panicking::assert_failed::<usize, usize>(move _48, _42, _43, move _50);
    }

    bb9: {
        _54 = &_2;
        _55 = &_1;
        _53 = fun1(_54, _55) -> bb10;
    }

    bb10: {
        _52 = &_53;
        _57 = const 3_usize;
        _56 = &_57;
        _51 = (move _52, move _56);
        _58 = (_51.0: &usize);
        _59 = (_51.1: &usize);
        _62 = (*_58);
        _63 = (*_59);
        _61 = Eq(move _62, move _63);
        _60 = Not(move _61);
        switchInt(move _60) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _64 = core::panicking::AssertKind::Eq;
        _66 = Option::<Arguments<'_>>::None;
        _65 = core::panicking::assert_failed::<usize, usize>(move _64, _58, _59, move _66);
    }

    bb12: {
        _70 = &_1;
        _71 = &_1;
        _69 = fun2(_70, _71) -> bb13;
    }

    bb13: {
        _68 = &_69;
        _73 = const 0_usize;
        _72 = &_73;
        _67 = (move _68, move _72);
        _74 = (_67.0: &usize);
        _75 = (_67.1: &usize);
        _78 = (*_74);
        _79 = (*_75);
        _77 = Eq(move _78, move _79);
        _76 = Not(move _77);
        switchInt(move _76) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _80 = core::panicking::AssertKind::Eq;
        _82 = Option::<Arguments<'_>>::None;
        _81 = core::panicking::assert_failed::<usize, usize>(move _80, _74, _75, move _82);
    }

    bb15: {
        _86 = &_1;
        _87 = &_2;
        _85 = fun2(_86, _87) -> bb16;
    }

    bb16: {
        _84 = &_85;
        _89 = const 1_usize;
        _88 = &_89;
        _83 = (move _84, move _88);
        _90 = (_83.0: &usize);
        _91 = (_83.1: &usize);
        _94 = (*_90);
        _95 = (*_91);
        _93 = Eq(move _94, move _95);
        _92 = Not(move _93);
        switchInt(move _92) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _96 = core::panicking::AssertKind::Eq;
        _98 = Option::<Arguments<'_>>::None;
        _97 = core::panicking::assert_failed::<usize, usize>(move _96, _90, _91, move _98);
    }

    bb18: {
        _102 = &_2;
        _103 = &_2;
        _101 = fun2(_102, _103) -> bb19;
    }

    bb19: {
        _100 = &_101;
        _105 = const 2_usize;
        _104 = &_105;
        _99 = (move _100, move _104);
        _106 = (_99.0: &usize);
        _107 = (_99.1: &usize);
        _110 = (*_106);
        _111 = (*_107);
        _109 = Eq(move _110, move _111);
        _108 = Not(move _109);
        switchInt(move _108) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _112 = core::panicking::AssertKind::Eq;
        _114 = Option::<Arguments<'_>>::None;
        _113 = core::panicking::assert_failed::<usize, usize>(move _112, _106, _107, move _114);
    }

    bb21: {
        _118 = &_2;
        _119 = &_1;
        _117 = fun2(_118, _119) -> bb22;
    }

    bb22: {
        _116 = &_117;
        _121 = const 3_usize;
        _120 = &_121;
        _115 = (move _116, move _120);
        _122 = (_115.0: &usize);
        _123 = (_115.1: &usize);
        _126 = (*_122);
        _127 = (*_123);
        _125 = Eq(move _126, move _127);
        _124 = Not(move _125);
        switchInt(move _124) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _128 = core::panicking::AssertKind::Eq;
        _130 = Option::<Arguments<'_>>::None;
        _129 = core::panicking::assert_failed::<usize, usize>(move _128, _122, _123, move _130);
    }

    bb24: {
        return;
    }
}
