// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/match/issue-42679.rs:4:10: 4:15>::fmt(_1: &Test, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &usize;
    let _5: &str;
    let mut _6: &dyn std::fmt::Debug;
    let _7: &&usize;
    let _8: &isize;
    let _9: &str;
    let mut _10: &dyn std::fmt::Debug;
    let _11: &&isize;
    scope 1 {
        debug __self_0 => _4;
    }
    scope 2 {
        debug __self_0 => _8;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _8 = &(((*_1) as Bar).0: isize);
        _9 = const "Bar";
        _11 = &_8;
        _10 = _11 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _9, move _10) -> bb4;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as Foo).0: usize);
        _5 = const "Foo";
        _7 = &_4;
        _6 = _7 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _5, move _6) -> bb4;
    }

    bb4: {
        return;
    }
}

fn <impl at ui/match/issue-42679.rs:4:17: 4:26>::eq(_1: &Test, _2: &Test) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: (&Test, &Test);
    let mut _8: isize;
    let mut _9: isize;
    let mut _10: isize;
    let mut _13: usize;
    let mut _14: usize;
    let mut _17: isize;
    let mut _18: isize;
    let mut _19: &Test;
    let mut _20: &Test;
    let mut _21: &Test;
    let mut _22: &Test;
    let mut _23: &Test;
    let mut _24: &Test;
    let mut _25: &Test;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
            let _11: &usize;
            let _12: &usize;
            let _15: &isize;
            let _16: &isize;
            scope 3 {
                debug __self_0 => _11;
                debug __arg1_0 => _12;
            }
            scope 4 {
                debug __self_0 => _15;
                debug __arg1_0 => _16;
            }
            scope 5 {
            }
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _5 = Eq(_3, _4);
        switchInt(move _5) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _7 = (_1, _2);
        _19 = deref_copy (_7.0: &Test);
        _10 = discriminant((*_19));
        switchInt(move _10) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb3: {
        return;
    }

    bb4: {
        _20 = deref_copy (_7.1: &Test);
        _8 = discriminant((*_20));
        switchInt(move _8) -> [0: bb7, otherwise: bb5];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _21 = deref_copy (_7.1: &Test);
        _9 = discriminant((*_21));
        switchInt(move _9) -> [1: bb8, otherwise: bb5];
    }

    bb7: {
        _22 = deref_copy (_7.0: &Test);
        _11 = &(((*_22) as Foo).0: usize);
        _23 = deref_copy (_7.1: &Test);
        _12 = &(((*_23) as Foo).0: usize);
        _13 = (*_11);
        _14 = (*_12);
        _6 = Eq(move _13, move _14);
        goto -> bb9;
    }

    bb8: {
        _24 = deref_copy (_7.0: &Test);
        _15 = &(((*_24) as Bar).0: isize);
        _25 = deref_copy (_7.1: &Test);
        _16 = &(((*_25) as Bar).0: isize);
        _17 = (*_15);
        _18 = (*_16);
        _6 = Eq(move _17, move _18);
        goto -> bb9;
    }

    bb9: {
        _0 = move _6;
        goto -> bb3;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::boxed::Box<Test>;
    let mut _2: Test;
    let mut _4: Test;
    let mut _5: (std::boxed::Box<Test>, std::boxed::Box<Test>);
    let mut _6: std::boxed::Box<Test>;
    let mut _7: std::boxed::Box<Test>;
    let mut _8: isize;
    let mut _9: isize;
    let mut _10: !;
    let mut _13: (&usize, &usize);
    let mut _14: &usize;
    let mut _15: &usize;
    let _16: usize;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: usize;
    let mut _22: usize;
    let _24: !;
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _26: (&std::boxed::Box<Test>, &std::boxed::Box<Test>);
    let mut _27: &std::boxed::Box<Test>;
    let mut _28: &std::boxed::Box<Test>;
    let _29: std::boxed::Box<Test>;
    let mut _30: Test;
    let mut _33: bool;
    let mut _34: bool;
    let _36: !;
    let mut _37: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _38: !;
    let mut _39: std::boxed::Box<Test>;
    let mut _40: std::boxed::Box<Test>;
    let mut _41: std::boxed::Box<Test>;
    let mut _42: bool;
    let mut _43: *const Test;
    let mut _44: *const Test;
    let mut _45: *const Test;
    scope 1 {
        debug a => _1;
        let _3: std::boxed::Box<Test>;
        scope 2 {
            debug b => _3;
            let _11: usize;
            let _12: std::boxed::Box<Test>;
            let mut _46: *const ();
            let mut _47: usize;
            let mut _48: usize;
            let mut _49: usize;
            let mut _50: usize;
            let mut _51: bool;
            let mut _52: *const ();
            let mut _53: usize;
            let mut _54: usize;
            let mut _55: usize;
            let mut _56: usize;
            let mut _57: bool;
            let mut _58: *const ();
            let mut _59: usize;
            let mut _60: usize;
            let mut _61: usize;
            let mut _62: usize;
            let mut _63: bool;
            scope 3 {
                debug x => _11;
                debug b => _12;
                let _17: &usize;
                let _18: &usize;
                let _31: &std::boxed::Box<Test>;
                let _32: &std::boxed::Box<Test>;
                scope 4 {
                    debug left_val => _17;
                    debug right_val => _18;
                    let _23: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _23;
                    }
                }
                scope 6 {
                    debug left_val => _31;
                    debug right_val => _32;
                    let _35: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _35;
                    }
                }
            }
        }
    }

    bb0: {
        _42 = const false;
        _2 = Test::Foo(const 10_usize);
        _1 = Box::<Test>::new(move _2) -> bb1;
    }

    bb1: {
        _4 = Test::Bar(const -20_isize);
        _3 = Box::<Test>::new(move _4) -> [return: bb2, unwind: bb17];
    }

    bb2: {
        _6 = move _1;
        _7 = move _3;
        _42 = const true;
        _5 = (move _6, move _7);
        _39 = deref_copy (_5.1: std::boxed::Box<Test>);
        _43 = (((_39.0: std::ptr::Unique<Test>).0: std::ptr::NonNull<Test>).0: *const Test);
        _58 = _43 as *const () (PtrToPtr);
        _59 = _58 as usize (Transmute);
        _60 = AlignOf(Test);
        _61 = Sub(_60, const 1_usize);
        _62 = BitAnd(_59, _61);
        _63 = Eq(_62, const 0_usize);
        assert(_63, "misaligned pointer dereference: address must be a multiple of {} but is {}", _60, _59) -> [success: bb25, unwind unreachable];
    }

    bb3: {
        _40 = deref_copy (_5.0: std::boxed::Box<Test>);
        _44 = (((_40.0: std::ptr::Unique<Test>).0: std::ptr::NonNull<Test>).0: *const Test);
        _52 = _44 as *const () (PtrToPtr);
        _53 = _52 as usize (Transmute);
        _54 = AlignOf(Test);
        _55 = Sub(_54, const 1_usize);
        _56 = BitAnd(_53, _55);
        _57 = Eq(_56, const 0_usize);
        assert(_57, "misaligned pointer dereference: address must be a multiple of {} but is {}", _54, _53) -> [success: bb24, unwind unreachable];
    }

    bb4: {
        _38 = core::panicking::panic(const "internal error: entered unreachable code") -> bb22;
    }

    bb5: {
        _10 = core::panicking::panic(const "internal error: entered unreachable code") -> bb22;
    }

    bb6: {
        _42 = const false;
        _12 = move (_5.1: std::boxed::Box<Test>);
        _41 = deref_copy (_5.0: std::boxed::Box<Test>);
        _45 = (((_41.0: std::ptr::Unique<Test>).0: std::ptr::NonNull<Test>).0: *const Test);
        _46 = _45 as *const () (PtrToPtr);
        _47 = _46 as usize (Transmute);
        _48 = AlignOf(Test);
        _49 = Sub(_48, const 1_usize);
        _50 = BitAnd(_47, _49);
        _51 = Eq(_50, const 0_usize);
        assert(_51, "misaligned pointer dereference: address must be a multiple of {} but is {}", _48, _47) -> [success: bb23, unwind unreachable];
    }

    bb7: {
        _23 = core::panicking::AssertKind::Eq;
        _25 = Option::<Arguments<'_>>::None;
        _24 = core::panicking::assert_failed::<usize, usize>(move _23, _17, _18, move _25) -> bb16;
    }

    bb8: {
        _27 = &_12;
        _30 = Test::Bar(const -20_isize);
        _29 = Box::<Test>::new(move _30) -> [return: bb9, unwind: bb16];
    }

    bb9: {
        _28 = &_29;
        _26 = (move _27, move _28);
        _31 = (_26.0: &std::boxed::Box<Test>);
        _32 = (_26.1: &std::boxed::Box<Test>);
        _34 = <Box<Test> as PartialEq>::eq(_31, _32) -> [return: bb10, unwind: bb15];
    }

    bb10: {
        _33 = Not(move _34);
        switchInt(move _33) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _35 = core::panicking::AssertKind::Eq;
        _37 = Option::<Arguments<'_>>::None;
        _36 = core::panicking::assert_failed::<Box<Test>, Box<Test>>(move _35, _31, _32, move _37) -> bb15;
    }

    bb12: {
        drop(_29) -> [return: bb13, unwind: bb16];
    }

    bb13: {
        drop(_12) -> [return: bb14, unwind: bb22];
    }

    bb14: {
        drop((_5.0: std::boxed::Box<Test>)) -> bb19;
    }

    bb15 (cleanup): {
        drop(_29) -> [return: bb16, unwind terminate];
    }

    bb16 (cleanup): {
        drop(_12) -> [return: bb22, unwind terminate];
    }

    bb17 (cleanup): {
        drop(_1) -> [return: bb18, unwind terminate];
    }

    bb18 (cleanup): {
        resume;
    }

    bb19: {
        _42 = const false;
        return;
    }

    bb20 (cleanup): {
        switchInt(_42) -> [0: bb18, otherwise: bb21];
    }

    bb21 (cleanup): {
        drop((_5.1: std::boxed::Box<Test>)) -> [return: bb18, unwind terminate];
    }

    bb22 (cleanup): {
        drop((_5.0: std::boxed::Box<Test>)) -> [return: bb20, unwind terminate];
    }

    bb23: {
        _11 = (((*_45) as Foo).0: usize);
        _14 = &_11;
        _16 = const 10_usize;
        _15 = &_16;
        _13 = (move _14, move _15);
        _17 = (_13.0: &usize);
        _18 = (_13.1: &usize);
        _21 = (*_17);
        _22 = (*_18);
        _20 = Eq(move _21, move _22);
        _19 = Not(move _20);
        switchInt(move _19) -> [0: bb8, otherwise: bb7];
    }

    bb24: {
        _8 = discriminant((*_44));
        switchInt(move _8) -> [0: bb6, otherwise: bb4];
    }

    bb25: {
        _9 = discriminant((*_43));
        switchInt(move _9) -> [0: bb5, otherwise: bb3];
    }
}

fn Test::Foo(_1: usize) -> Test {
    let mut _0: Test;

    bb0: {
        _0 = Test::Foo(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Test::Foo(_1: usize) -> Test {
    let mut _0: Test;

    bb0: {
        _0 = Test::Foo(move _1);
        return;
    }
}

fn Test::Bar(_1: isize) -> Test {
    let mut _0: Test;

    bb0: {
        _0 = Test::Bar(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Test::Bar(_1: isize) -> Test {
    let mut _0: Test;

    bb0: {
        _0 = Test::Bar(move _1);
        return;
    }
}
