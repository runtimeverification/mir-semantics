// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (&i32, &i32);
    let mut _2: &i32;
    let _3: i32;
    let mut _4: &i32;
    let _5: i32;
    let mut _6: (i32, i32);
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: bool;
    let _11: &i32;
    let _12: &i32;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: i32;
    let mut _16: i32;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _20: (&i32, &i32);
    let mut _21: &i32;
    let _22: i32;
    let mut _23: &i32;
    let _24: i32;
    let mut _25: (i32, i32);
    let mut _26: bool;
    let mut _27: bool;
    let _28: &i32;
    let _29: &i32;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: i32;
    let mut _33: i32;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _37: (&i32, &i32);
    let mut _38: &i32;
    let _39: i32;
    let mut _40: &i32;
    let _41: i32;
    let mut _42: (i32, i32);
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: bool;
    let _47: &i32;
    let _48: &i32;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: i32;
    let mut _52: i32;
    let _54: !;
    let mut _55: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _11;
        debug right_val => _12;
        let _17: core::panicking::AssertKind;
        scope 2 {
            debug kind => _17;
        }
    }
    scope 3 {
        debug left_val => _28;
        debug right_val => _29;
        let _34: core::panicking::AssertKind;
        scope 4 {
            debug kind => _34;
        }
    }
    scope 5 {
        debug left_val => _47;
        debug right_val => _48;
        let _53: core::panicking::AssertKind;
        scope 6 {
            debug kind => _53;
        }
    }

    bb0: {
        _3 = const 2_i32;
        _2 = &_3;
        _6 = (const 1_i32, const 3_i32);
        switchInt((_6.0: i32)) -> [0: bb1, 1: bb4, otherwise: bb3];
    }

    bb1: {
        _7 = Le(const 2_i32, (_6.1: i32));
        switchInt(move _7) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _8 = Le((_6.1: i32), const 5_i32);
        switchInt(move _8) -> [0: bb3, otherwise: bb7];
    }

    bb3: {
        _9 = Le(const 2_i32, (_6.1: i32));
        switchInt(move _9) -> [0: bb6, otherwise: bb5];
    }

    bb4: {
        switchInt((_6.1: i32)) -> [3: bb8, otherwise: bb3];
    }

    bb5: {
        _10 = Le((_6.1: i32), const 5_i32);
        switchInt(move _10) -> [0: bb6, otherwise: bb9];
    }

    bb6: {
        _5 = const 4_i32;
        goto -> bb10;
    }

    bb7: {
        _5 = const 1_i32;
        goto -> bb10;
    }

    bb8: {
        _5 = const 2_i32;
        goto -> bb10;
    }

    bb9: {
        _5 = const 3_i32;
        goto -> bb10;
    }

    bb10: {
        _4 = &_5;
        _1 = (move _2, move _4);
        _11 = (_1.0: &i32);
        _12 = (_1.1: &i32);
        _15 = (*_11);
        _16 = (*_12);
        _14 = Eq(move _15, move _16);
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<i32, i32>(move _17, _11, _12, move _19);
    }

    bb12: {
        _22 = const 2_i32;
        _21 = &_22;
        _25 = (const 1_i32, const 3_i32);
        switchInt((_25.0: i32)) -> [1: bb13, otherwise: bb14];
    }

    bb13: {
        switchInt((_25.1: i32)) -> [3: bb17, otherwise: bb14];
    }

    bb14: {
        _26 = Le(const 2_i32, (_25.1: i32));
        switchInt(move _26) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _27 = Le((_25.1: i32), const 5_i32);
        switchInt(move _27) -> [0: bb16, otherwise: bb18];
    }

    bb16: {
        _24 = const 4_i32;
        goto -> bb19;
    }

    bb17: {
        _24 = const 2_i32;
        goto -> bb19;
    }

    bb18: {
        _24 = const 3_i32;
        goto -> bb19;
    }

    bb19: {
        _23 = &_24;
        _20 = (move _21, move _23);
        _28 = (_20.0: &i32);
        _29 = (_20.1: &i32);
        _32 = (*_28);
        _33 = (*_29);
        _31 = Eq(move _32, move _33);
        _30 = Not(move _31);
        switchInt(move _30) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = core::panicking::assert_failed::<i32, i32>(move _34, _28, _29, move _36);
    }

    bb21: {
        _39 = const 2_i32;
        _38 = &_39;
        _42 = (const 1_i32, const 7_i32);
        switchInt((_42.0: i32)) -> [0: bb22, 1: bb25, otherwise: bb24];
    }

    bb22: {
        _43 = Le(const 2_i32, (_42.1: i32));
        switchInt(move _43) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _44 = Le((_42.1: i32), const 5_i32);
        switchInt(move _44) -> [0: bb24, otherwise: bb28];
    }

    bb24: {
        _45 = Le(const 2_i32, (_42.1: i32));
        switchInt(move _45) -> [0: bb27, otherwise: bb26];
    }

    bb25: {
        switchInt((_42.1: i32)) -> [7: bb29, otherwise: bb24];
    }

    bb26: {
        _46 = Le((_42.1: i32), const 5_i32);
        switchInt(move _46) -> [0: bb27, otherwise: bb30];
    }

    bb27: {
        _41 = const 4_i32;
        goto -> bb31;
    }

    bb28: {
        _41 = const 1_i32;
        goto -> bb31;
    }

    bb29: {
        _41 = const 2_i32;
        goto -> bb31;
    }

    bb30: {
        _41 = const 3_i32;
        goto -> bb31;
    }

    bb31: {
        _40 = &_41;
        _37 = (move _38, move _40);
        _47 = (_37.0: &i32);
        _48 = (_37.1: &i32);
        _51 = (*_47);
        _52 = (*_48);
        _50 = Eq(move _51, move _52);
        _49 = Not(move _50);
        switchInt(move _49) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _53 = core::panicking::AssertKind::Eq;
        _55 = Option::<Arguments<'_>>::None;
        _54 = core::panicking::assert_failed::<i32, i32>(move _53, _47, _48, move _55);
    }

    bb33: {
        return;
    }
}
