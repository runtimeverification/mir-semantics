// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: char;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let _8: &str;
    let _9: &str;
    let _10: !;
    let mut _11: (&&str, &&str);
    let mut _12: &&str;
    let mut _13: &&str;
    let _14: &str;
    let mut _17: bool;
    let mut _18: bool;
    let _20: !;
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _2: &str;
        scope 2 {
            debug y => _2;
            let _15: &&str;
            let _16: &&str;
            scope 3 {
                debug left_val => _15;
                debug right_val => _16;
                let _19: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _19;
                }
            }
        }
    }

    bb0: {
        _1 = const 'a';
        _5 = Le(const 'a', _1);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _6 = Le(_1, const 'b');
        switchInt(move _6) -> [0: bb2, otherwise: bb6];
    }

    bb2: {
        switchInt(_1) -> [97: bb8, otherwise: bb3];
    }

    bb3: {
        _3 = Le(const 'a', _1);
        switchInt(move _3) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _4 = Le(_1, const 'b');
        switchInt(move _4) -> [0: bb5, otherwise: bb9];
    }

    bb5: {
        _10 = begin_panic::<&str>(const "what?");
    }

    bb6: {
        _7 = const false;
        switchInt(move _7) -> [0: bb2, otherwise: bb7];
    }

    bb7: {
        _2 = const "one";
        goto -> bb10;
    }

    bb8: {
        _8 = const "two";
        _2 = _8;
        goto -> bb10;
    }

    bb9: {
        _9 = const "three";
        _2 = _9;
        goto -> bb10;
    }

    bb10: {
        _12 = &_2;
        _14 = const "two";
        _13 = &_14;
        _11 = (move _12, move _13);
        _15 = (_11.0: &&str);
        _16 = (_11.1: &&str);
        _18 = <&str as PartialEq>::eq(_15, _16) -> bb11;
    }

    bb11: {
        _17 = Not(move _18);
        switchInt(move _17) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _19 = core::panicking::AssertKind::Eq;
        _21 = Option::<Arguments<'_>>::None;
        _20 = core::panicking::assert_failed::<&str, &str>(move _19, _15, _16, move _21);
    }

    bb13: {
        return;
    }
}
