// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: &[u8];
    let _2: &[u8; 1];
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: !;
    let mut _14: !;
    let mut _15: !;
    let mut _16: !;
    let mut _17: &[u8];
    let _18: &[u8; 1];
    let mut _19: usize;
    let mut _20: usize;
    let mut _21: bool;
    let mut _22: usize;
    let mut _23: usize;
    let mut _24: bool;
    let mut _25: usize;
    let mut _26: usize;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: !;
    let mut _30: !;
    let mut _31: !;
    let mut _32: !;
    let mut _33: &[u8];
    let _34: &[u8; 2];
    let mut _35: usize;
    let mut _36: usize;
    let mut _37: bool;
    let mut _38: usize;
    let mut _39: usize;
    let mut _40: bool;
    let mut _41: usize;
    let mut _42: usize;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: !;
    let mut _46: !;
    let mut _47: !;
    let mut _48: !;
    let mut _49: &[u8];
    let _50: &[u8; 2];
    let mut _51: usize;
    let mut _52: usize;
    let mut _53: bool;
    let mut _54: usize;
    let mut _55: usize;
    let mut _56: bool;
    let mut _57: usize;
    let mut _58: usize;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: !;
    let mut _62: !;
    let mut _63: !;
    let mut _64: !;
    let mut _65: &[u8];
    let _66: &[u8; 0];
    let mut _67: usize;
    let mut _68: usize;
    let mut _69: bool;
    let mut _70: usize;
    let mut _71: usize;
    let mut _72: bool;
    let mut _73: usize;
    let mut _74: usize;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: !;
    let mut _78: !;
    let mut _79: !;
    let mut _80: !;
    let mut _81: &[u8];
    let _82: &[u8; 0];
    let mut _83: usize;
    let mut _84: usize;
    let mut _85: bool;
    let mut _86: usize;
    let mut _87: usize;
    let mut _88: bool;
    let mut _89: usize;
    let mut _90: usize;
    let mut _91: bool;
    let mut _92: bool;
    let mut _93: !;
    let mut _94: !;
    let mut _95: !;
    let mut _96: !;

    bb0: {
        _2 = const b".";
        _1 = _2 as &[u8] (Pointer(Unsize));
        _9 = Len((*_1));
        _10 = const 1_usize;
        _11 = Eq(move _9, move _10);
        switchInt(move _11) -> [0: bb3, otherwise: bb1];
    }

    bb1: {
        switchInt((*_1)[0 of 1]) -> [46: bb7, otherwise: bb2];
    }

    bb2: {
        _16 = begin_panic::<&str>(const "explicit panic");
    }

    bb3: {
        _6 = Len((*_1));
        _7 = const 2_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb6, otherwise: bb4];
    }

    bb4: {
        switchInt((*_1)[0 of 2]) -> [46: bb5, otherwise: bb2];
    }

    bb5: {
        switchInt((*_1)[1 of 2]) -> [46: bb10, otherwise: bb2];
    }

    bb6: {
        _3 = Len((*_1));
        _4 = const 0_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb2, otherwise: bb11];
    }

    bb7: {
        _12 = const true;
        switchInt(move _12) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _18 = const b".";
        _17 = _18 as &[u8] (Pointer(Unsize));
        _25 = Len((*_17));
        _26 = const 1_usize;
        _27 = Eq(move _25, move _26);
        switchInt(move _27) -> [0: bb14, otherwise: bb12];
    }

    bb9: {
        _13 = begin_panic::<&str>(const "explicit panic");
    }

    bb10: {
        _14 = begin_panic::<&str>(const "explicit panic");
    }

    bb11: {
        _15 = begin_panic::<&str>(const "explicit panic");
    }

    bb12: {
        switchInt((*_17)[0 of 1]) -> [46: bb18, otherwise: bb13];
    }

    bb13: {
        _32 = begin_panic::<&str>(const "explicit panic");
    }

    bb14: {
        _22 = Len((*_17));
        _23 = const 2_usize;
        _24 = Eq(move _22, move _23);
        switchInt(move _24) -> [0: bb17, otherwise: bb15];
    }

    bb15: {
        switchInt((*_17)[0 of 2]) -> [46: bb16, otherwise: bb13];
    }

    bb16: {
        switchInt((*_17)[1 of 2]) -> [46: bb21, otherwise: bb13];
    }

    bb17: {
        _19 = Len((*_17));
        _20 = const 0_usize;
        _21 = Eq(move _19, move _20);
        switchInt(move _21) -> [0: bb13, otherwise: bb22];
    }

    bb18: {
        _28 = const false;
        switchInt(move _28) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _29 = begin_panic::<&str>(const "explicit panic");
    }

    bb20: {
        _34 = const b"..";
        _33 = _34 as &[u8] (Pointer(Unsize));
        _41 = Len((*_33));
        _42 = const 1_usize;
        _43 = Eq(move _41, move _42);
        switchInt(move _43) -> [0: bb25, otherwise: bb23];
    }

    bb21: {
        _30 = begin_panic::<&str>(const "explicit panic");
    }

    bb22: {
        _31 = begin_panic::<&str>(const "explicit panic");
    }

    bb23: {
        switchInt((*_33)[0 of 1]) -> [46: bb29, otherwise: bb24];
    }

    bb24: {
        _48 = begin_panic::<&str>(const "explicit panic");
    }

    bb25: {
        _38 = Len((*_33));
        _39 = const 2_usize;
        _40 = Eq(move _38, move _39);
        switchInt(move _40) -> [0: bb28, otherwise: bb26];
    }

    bb26: {
        switchInt((*_33)[0 of 2]) -> [46: bb27, otherwise: bb24];
    }

    bb27: {
        switchInt((*_33)[1 of 2]) -> [46: bb32, otherwise: bb24];
    }

    bb28: {
        _35 = Len((*_33));
        _36 = const 0_usize;
        _37 = Eq(move _35, move _36);
        switchInt(move _37) -> [0: bb24, otherwise: bb33];
    }

    bb29: {
        _44 = const true;
        switchInt(move _44) -> [0: bb31, otherwise: bb30];
    }

    bb30: {
        _45 = begin_panic::<&str>(const "explicit panic");
    }

    bb31: {
        _46 = begin_panic::<&str>(const "explicit panic");
    }

    bb32: {
        _50 = const b"..";
        _49 = _50 as &[u8] (Pointer(Unsize));
        _57 = Len((*_49));
        _58 = const 1_usize;
        _59 = Eq(move _57, move _58);
        switchInt(move _59) -> [0: bb36, otherwise: bb34];
    }

    bb33: {
        _47 = begin_panic::<&str>(const "explicit panic");
    }

    bb34: {
        switchInt((*_49)[0 of 1]) -> [46: bb40, otherwise: bb35];
    }

    bb35: {
        _64 = begin_panic::<&str>(const "explicit panic");
    }

    bb36: {
        _54 = Len((*_49));
        _55 = const 2_usize;
        _56 = Eq(move _54, move _55);
        switchInt(move _56) -> [0: bb39, otherwise: bb37];
    }

    bb37: {
        switchInt((*_49)[0 of 2]) -> [46: bb38, otherwise: bb35];
    }

    bb38: {
        switchInt((*_49)[1 of 2]) -> [46: bb43, otherwise: bb35];
    }

    bb39: {
        _51 = Len((*_49));
        _52 = const 0_usize;
        _53 = Eq(move _51, move _52);
        switchInt(move _53) -> [0: bb35, otherwise: bb44];
    }

    bb40: {
        _60 = const false;
        switchInt(move _60) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _61 = begin_panic::<&str>(const "explicit panic");
    }

    bb42: {
        _62 = begin_panic::<&str>(const "explicit panic");
    }

    bb43: {
        _66 = const b"";
        _65 = _66 as &[u8] (Pointer(Unsize));
        _73 = Len((*_65));
        _74 = const 1_usize;
        _75 = Eq(move _73, move _74);
        switchInt(move _75) -> [0: bb47, otherwise: bb45];
    }

    bb44: {
        _63 = begin_panic::<&str>(const "explicit panic");
    }

    bb45: {
        switchInt((*_65)[0 of 1]) -> [46: bb51, otherwise: bb46];
    }

    bb46: {
        _80 = begin_panic::<&str>(const "explicit panic");
    }

    bb47: {
        _70 = Len((*_65));
        _71 = const 2_usize;
        _72 = Eq(move _70, move _71);
        switchInt(move _72) -> [0: bb50, otherwise: bb48];
    }

    bb48: {
        switchInt((*_65)[0 of 2]) -> [46: bb49, otherwise: bb46];
    }

    bb49: {
        switchInt((*_65)[1 of 2]) -> [46: bb54, otherwise: bb46];
    }

    bb50: {
        _67 = Len((*_65));
        _68 = const 0_usize;
        _69 = Eq(move _67, move _68);
        switchInt(move _69) -> [0: bb46, otherwise: bb55];
    }

    bb51: {
        _76 = const true;
        switchInt(move _76) -> [0: bb53, otherwise: bb52];
    }

    bb52: {
        _77 = begin_panic::<&str>(const "explicit panic");
    }

    bb53: {
        _78 = begin_panic::<&str>(const "explicit panic");
    }

    bb54: {
        _79 = begin_panic::<&str>(const "explicit panic");
    }

    bb55: {
        _82 = const b"";
        _81 = _82 as &[u8] (Pointer(Unsize));
        _89 = Len((*_81));
        _90 = const 1_usize;
        _91 = Eq(move _89, move _90);
        switchInt(move _91) -> [0: bb58, otherwise: bb56];
    }

    bb56: {
        switchInt((*_81)[0 of 1]) -> [46: bb62, otherwise: bb57];
    }

    bb57: {
        _96 = begin_panic::<&str>(const "explicit panic");
    }

    bb58: {
        _86 = Len((*_81));
        _87 = const 2_usize;
        _88 = Eq(move _86, move _87);
        switchInt(move _88) -> [0: bb61, otherwise: bb59];
    }

    bb59: {
        switchInt((*_81)[0 of 2]) -> [46: bb60, otherwise: bb57];
    }

    bb60: {
        switchInt((*_81)[1 of 2]) -> [46: bb65, otherwise: bb57];
    }

    bb61: {
        _83 = Len((*_81));
        _84 = const 0_usize;
        _85 = Eq(move _83, move _84);
        switchInt(move _85) -> [0: bb57, otherwise: bb66];
    }

    bb62: {
        _92 = const false;
        switchInt(move _92) -> [0: bb64, otherwise: bb63];
    }

    bb63: {
        _93 = begin_panic::<&str>(const "explicit panic");
    }

    bb64: {
        _94 = begin_panic::<&str>(const "explicit panic");
    }

    bb65: {
        _95 = begin_panic::<&str>(const "explicit panic");
    }

    bb66: {
        return;
    }
}

alloc6 (size: 0, align: 1) {}

alloc5 (size: 0, align: 1) {}

alloc4 (size: 2, align: 1) {
    2e 2e                                           │ ..
}

alloc3 (size: 2, align: 1) {
    2e 2e                                           │ ..
}

alloc2 (size: 1, align: 1) {
    2e                                              │ .
}

alloc1 (size: 1, align: 1) {
    2e                                              │ .
}
