// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn referent_stability() -> () {
    let mut _0: ();
    let _1: *const i32;
    let mut _2: i32;
    let mut _5: bool;
    let mut _6: *const i32;
    let mut _7: (&*const i32, &*const i32);
    let mut _8: &*const i32;
    let mut _9: &*const i32;
    let _10: *const i32;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: *const i32;
    let mut _16: *const i32;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _20: !;
    let mut _21: &mut i32;
    scope 1 {
        debug p => _1;
        let _3: &mut i32;
        let _4: &&mut i32;
        scope 2 {
            debug z => _3;
            debug z => _4;
            let _11: &*const i32;
            let _12: &*const i32;
            scope 3 {
                debug left_val => _11;
                debug right_val => _12;
                let _17: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _17;
                }
            }
        }
    }

    bb0: {
        _2 = const 0_i32;
        _3 = &mut _2;
        _4 = &_3;
        _21 = deref_copy (*_4);
        _6 = &raw const (*_21);
        _1 = _6;
        _5 = const true;
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _8 = &_1;
        _10 = &raw const (*_3);
        _9 = &_10;
        _7 = (move _8, move _9);
        _11 = (_7.0: &*const i32);
        _12 = (_7.1: &*const i32);
        _15 = (*_11);
        _16 = (*_12);
        _14 = Eq(move _15, move _16);
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb4, otherwise: bb3];
    }

    bb2: {
        _20 = core::panicking::panic(const "internal error: entered unreachable code");
    }

    bb3: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<*const i32, *const i32>(move _17, _11, _12, move _19);
    }

    bb4: {
        return;
    }
}

fn variable_stability() -> () {
    let mut _0: ();
    let _1: *const &mut i32;
    let mut _2: i32;
    let mut _5: bool;
    let mut _6: *const &mut i32;
    let mut _7: (&*const &mut i32, &*const &mut i32);
    let mut _8: &*const &mut i32;
    let mut _9: &*const &mut i32;
    let _10: *const &mut i32;
    let _11: &&mut i32;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: *const &mut i32;
    let mut _17: *const &mut i32;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: !;
    scope 1 {
        debug p => _1;
        let _3: &mut i32;
        let _4: &&mut i32;
        scope 2 {
            debug z => _3;
            debug z => _4;
            let _12: &*const &mut i32;
            let _13: &*const &mut i32;
            scope 3 {
                debug left_val => _12;
                debug right_val => _13;
                let _18: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _18;
                }
            }
        }
    }

    bb0: {
        _2 = const 0_i32;
        _3 = &mut _2;
        _4 = &_3;
        _6 = &raw const (*_4);
        _1 = _6;
        _5 = const true;
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _8 = &_1;
        _11 = &_3;
        _10 = &raw const (*_11);
        _9 = &_10;
        _7 = (move _8, move _9);
        _12 = (_7.0: &*const &mut i32);
        _13 = (_7.1: &*const &mut i32);
        _16 = (*_12);
        _17 = (*_13);
        _15 = Eq(move _16, move _17);
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb4, otherwise: bb3];
    }

    bb2: {
        _21 = core::panicking::panic(const "internal error: entered unreachable code");
    }

    bb3: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<*const &mut i32, *const &mut i32>(move _18, _12, _13, move _20);
    }

    bb4: {
        return;
    }
}

fn persist_borrow() -> () {
    let mut _0: ();
    let mut _1: i32;
    let mut _4: bool;
    let mut _5: &i32;
    let mut _6: (&i32, &i32);
    let mut _7: &i32;
    let _8: i32;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: i32;
    let mut _14: i32;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: !;
    let mut _19: &mut i32;
    scope 1 {
        debug r => _5;
        let _2: &mut i32;
        let _3: &&mut i32;
        scope 2 {
            debug z => _2;
            debug z => _3;
            let _9: &i32;
            let _10: &i32;
            scope 3 {
                debug left_val => _9;
                debug right_val => _10;
                let _15: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _15;
                }
            }
        }
    }

    bb0: {
        _1 = const 0_i32;
        _2 = &mut _1;
        _3 = &_2;
        _19 = deref_copy (*_3);
        _5 = &(*_19);
        _4 = const true;
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _8 = const 0_i32;
        _7 = &_8;
        _6 = (_5, move _7);
        _9 = (_6.0: &i32);
        _10 = (_6.1: &i32);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb4, otherwise: bb3];
    }

    bb2: {
        _18 = core::panicking::panic(const "internal error: entered unreachable code");
    }

    bb3: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<i32, i32>(move _15, _9, _10, move _17);
    }

    bb4: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let _3: ();

    bb0: {
        _1 = referent_stability() -> bb1;
    }

    bb1: {
        _2 = variable_stability() -> bb2;
    }

    bb2: {
        _3 = persist_borrow() -> bb3;
    }

    bb3: {
        return;
    }
}
