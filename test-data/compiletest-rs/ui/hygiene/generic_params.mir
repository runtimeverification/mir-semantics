// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn type_params::f(_1: T, _2: T) -> (T, bool) {
    debug t1 => _1;
    debug t2 => _2;
    let mut _0: (T, bool);
    let mut _3: T;
    let mut _4: &T;
    let mut _5: bool;
    let mut _6: &T;
    let mut _7: &T;

    bb0: {
        _4 = &_1;
        _3 = <T as Clone>::clone(move _4) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _6 = &_2;
        _7 = &_2;
        _5 = <T as PartialEq>::eq(move _6, move _7) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _0 = (move _3, move _5);
        drop(_2) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        drop(_1) -> bb4;
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_3) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        drop(_1) -> [return: bb8, unwind terminate];
    }

    bb8 (cleanup): {
        resume;
    }
}

fn type_params::g(_1: T, _2: T) -> (T, T) {
    debug t1 => _1;
    debug t2 => _2;
    let mut _0: (T, T);
    let mut _3: T;
    let mut _4: &T;
    let mut _5: T;
    let mut _6: &T;

    bb0: {
        _4 = &_1;
        _3 = <T as Clone>::clone(move _4) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _6 = &_2;
        _5 = <T as Clone>::clone(move _6) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _0 = (move _3, move _5);
        drop(_2) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        drop(_1) -> bb4;
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_3) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        drop(_1) -> [return: bb8, unwind terminate];
    }

    bb8 (cleanup): {
        resume;
    }
}

fn type_params::h(_1: T, _2: T) -> (T, T) {
    debug t1 => _1;
    debug t2 => _2;
    let mut _0: (T, T);
    let mut _3: T;
    let mut _4: &T;
    let mut _5: T;
    let mut _6: &T;

    bb0: {
        _4 = &_1;
        _3 = <T as Clone>::clone(move _4) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _6 = &_2;
        _5 = <T as Clone>::clone(move _6) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _0 = (move _3, move _5);
        drop(_2) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        drop(_1) -> bb4;
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_3) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        drop(_1) -> [return: bb8, unwind terminate];
    }

    bb8 (cleanup): {
        resume;
    }
}

fn type_params::j(_1: T, _2: T) -> (T, T) {
    debug t1 => _1;
    debug t2 => _2;
    let mut _0: (T, T);
    let mut _3: T;
    let mut _4: &T;
    let mut _5: T;
    let mut _6: &T;

    bb0: {
        _4 = &_1;
        _3 = <T as Clone>::clone(move _4) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _6 = &_2;
        _5 = <T as Clone>::clone(move _6) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _0 = (move _3, move _5);
        drop(_2) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        drop(_1) -> bb4;
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_3) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        drop(_1) -> [return: bb8, unwind terminate];
    }

    bb8 (cleanup): {
        resume;
    }
}

fn type_params::k(_1: T, _2: T) -> (T, T) {
    debug t1 => _1;
    debug t2 => _2;
    let mut _0: (T, T);
    let mut _3: T;
    let mut _4: &T;
    let mut _5: T;
    let mut _6: &T;

    bb0: {
        _4 = &_1;
        _3 = <T as Clone>::clone(move _4) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _6 = &_2;
        _5 = <T as Clone>::clone(move _6) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _0 = (move _3, move _5);
        drop(_2) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        drop(_1) -> bb4;
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_3) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        drop(_1) -> [return: bb8, unwind terminate];
    }

    bb8 (cleanup): {
        resume;
    }
}

fn lifetime_params::f(_1: &(), _2: &()) -> (&(), &()) {
    debug t1 => _1;
    debug t2 => _2;
    let mut _0: (&(), &());

    bb0: {
        _0 = (_1, _2);
        return;
    }
}

fn lifetime_params::g(_1: &(), _2: &()) -> (&(), &()) {
    debug t1 => _1;
    debug t2 => _2;
    let mut _0: (&(), &());

    bb0: {
        _0 = (_1, _2);
        return;
    }
}

fn lifetime_params::h(_1: &(), _2: &()) -> (&(), &()) {
    debug t1 => _1;
    debug t2 => _2;
    let mut _0: (&(), &());

    bb0: {
        _0 = (_1, _2);
        return;
    }
}

fn lifetime_params::j(_1: &(), _2: &()) -> (&(), &()) {
    debug t1 => _1;
    debug t2 => _2;
    let mut _0: (&(), &());

    bb0: {
        _0 = (_1, _2);
        return;
    }
}

fn lifetime_params::k(_1: &(), _2: &()) -> (&(), &()) {
    debug t1 => _1;
    debug t2 => _2;
    let mut _0: (&(), &());

    bb0: {
        _0 = (_1, _2);
        return;
    }
}

fn const_params::f(_1: [(); C], _2: [(); C]) -> ([(); C], [(); C]) {
    debug t1 => _1;
    debug t2 => _2;
    let mut _0: ([(); C], [(); C]);

    bb0: {
        _0 = (_1, _2);
        return;
    }
}

const_params::f::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const C;
        return;
    }
}

const_params::f::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const C;
        return;
    }
}

const_params::f::{constant#2}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const C;
        return;
    }
}

const_params::f::{constant#3}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const C;
        return;
    }
}

fn const_params::g(_1: [(); C], _2: [(); C]) -> ([(); C], [(); C]) {
    debug t1 => _1;
    debug t2 => _2;
    let mut _0: ([(); C], [(); C]);

    bb0: {
        _0 = (_1, _2);
        return;
    }
}

const_params::g::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const C;
        return;
    }
}

const_params::g::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const C;
        return;
    }
}

const_params::g::{constant#2}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const C;
        return;
    }
}

const_params::g::{constant#3}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const C;
        return;
    }
}

fn const_params::h(_1: [(); C], _2: [(); C]) -> ([(); C], [(); C]) {
    debug t1 => _1;
    debug t2 => _2;
    let mut _0: ([(); C], [(); C]);

    bb0: {
        _0 = (_1, _2);
        return;
    }
}

const_params::h::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const C;
        return;
    }
}

const_params::h::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const C;
        return;
    }
}

const_params::h::{constant#2}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const C;
        return;
    }
}

const_params::h::{constant#3}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const C;
        return;
    }
}

fn const_params::j(_1: [(); C], _2: [(); C]) -> ([(); C], [(); C]) {
    debug t1 => _1;
    debug t2 => _2;
    let mut _0: ([(); C], [(); C]);

    bb0: {
        _0 = (_1, _2);
        return;
    }
}

const_params::j::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const C;
        return;
    }
}

const_params::j::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const C;
        return;
    }
}

const_params::j::{constant#2}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const C;
        return;
    }
}

const_params::j::{constant#3}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const C;
        return;
    }
}

fn const_params::k(_1: [(); C], _2: [(); C]) -> ([(); C], [(); C]) {
    debug t1 => _1;
    debug t2 => _2;
    let mut _0: ([(); C], [(); C]);

    bb0: {
        _0 = (_1, _2);
        return;
    }
}

const_params::k::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const C;
        return;
    }
}

const_params::k::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const C;
        return;
    }
}

const_params::k::{constant#2}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const C;
        return;
    }
}

const_params::k::{constant#3}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const C;
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
