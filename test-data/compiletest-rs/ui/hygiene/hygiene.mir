// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _3: (&i32, &i32);
    let mut _4: &i32;
    let mut _5: &i32;
    let _6: i32;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: i32;
    let mut _12: i32;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _2: i32;
        scope 2 {
            debug x => _2;
            let _7: &i32;
            let _8: &i32;
            scope 3 {
                debug left_val => _7;
                debug right_val => _8;
                let _13: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _13;
                }
            }
        }
    }

    bb0: {
        _1 = const 0_i32;
        _2 = const 1_i32;
        _4 = &_1;
        _6 = const 0_i32;
        _5 = &_6;
        _3 = (move _4, move _5);
        _7 = (_3.0: &i32);
        _8 = (_3.1: &i32);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<i32, i32>(move _13, _7, _8, move _15);
    }

    bb2: {
        return;
    }
}

fn g() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _5: (&(i32, i32), &(i32, i32));
    let mut _6: &(i32, i32);
    let _7: (i32, i32);
    let mut _8: &(i32, i32);
    let _9: (i32, i32);
    let mut _12: bool;
    let mut _13: bool;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&(i32, i32), &(i32, i32));
    let mut _18: &(i32, i32);
    let _19: (i32, i32);
    let mut _20: &(i32, i32);
    let _21: (i32, i32);
    let mut _24: bool;
    let mut _25: bool;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&(i32, i32), &(i32, i32));
    let mut _32: &(i32, i32);
    let _33: (i32, i32);
    let mut _34: &(i32, i32);
    let _35: (i32, i32);
    let mut _38: bool;
    let mut _39: bool;
    let _41: !;
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _43: (&(i32, i32), &(i32, i32));
    let mut _44: &(i32, i32);
    let _45: (i32, i32);
    let mut _46: &(i32, i32);
    let _47: (i32, i32);
    let mut _50: bool;
    let mut _51: bool;
    let _53: !;
    let mut _54: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _2: i32;
        scope 2 {
            debug x => _2;
            let _3: i32;
            scope 3 {
                debug x => _3;
                let _4: i32;
                scope 4 {
                    debug x => _4;
                    let _10: &(i32, i32);
                    let _11: &(i32, i32);
                    let _22: &(i32, i32);
                    let _23: &(i32, i32);
                    let _29: i32;
                    scope 5 {
                        debug left_val => _10;
                        debug right_val => _11;
                        let _14: core::panicking::AssertKind;
                        scope 6 {
                            debug kind => _14;
                        }
                    }
                    scope 7 {
                        debug left_val => _22;
                        debug right_val => _23;
                        let _26: core::panicking::AssertKind;
                        scope 8 {
                            debug kind => _26;
                        }
                    }
                    scope 9 {
                        debug x => _29;
                        let _30: i32;
                        scope 10 {
                            debug x => _30;
                            let _36: &(i32, i32);
                            let _37: &(i32, i32);
                            let _48: &(i32, i32);
                            let _49: &(i32, i32);
                            scope 11 {
                                debug left_val => _36;
                                debug right_val => _37;
                                let _40: core::panicking::AssertKind;
                                scope 12 {
                                    debug kind => _40;
                                }
                            }
                            scope 13 {
                                debug left_val => _48;
                                debug right_val => _49;
                                let _52: core::panicking::AssertKind;
                                scope 14 {
                                    debug kind => _52;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const 0_i32;
        _2 = const 2_i32;
        _3 = const 1_i32;
        _4 = const 3_i32;
        _7 = (_2, _1);
        _6 = &_7;
        _9 = (const 2_i32, const 0_i32);
        _8 = &_9;
        _5 = (move _6, move _8);
        _10 = (_5.0: &(i32, i32));
        _11 = (_5.1: &(i32, i32));
        _13 = <(i32, i32) as PartialEq>::eq(_10, _11) -> bb1;
    }

    bb1: {
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _14, _10, _11, move _16);
    }

    bb3: {
        _19 = (_2, _3);
        _18 = &_19;
        _21 = (const 2_i32, const 1_i32);
        _20 = &_21;
        _17 = (move _18, move _20);
        _22 = (_17.0: &(i32, i32));
        _23 = (_17.1: &(i32, i32));
        _25 = <(i32, i32) as PartialEq>::eq(_22, _23) -> bb4;
    }

    bb4: {
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _26, _22, _23, move _28);
    }

    bb6: {
        _29 = const 4_i32;
        _30 = const 1_i32;
        _33 = (_29, _1);
        _32 = &_33;
        _35 = (const 4_i32, const 0_i32);
        _34 = &_35;
        _31 = (move _32, move _34);
        _36 = (_31.0: &(i32, i32));
        _37 = (_31.1: &(i32, i32));
        _39 = <(i32, i32) as PartialEq>::eq(_36, _37) -> bb7;
    }

    bb7: {
        _38 = Not(move _39);
        switchInt(move _38) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _40 = core::panicking::AssertKind::Eq;
        _42 = Option::<Arguments<'_>>::None;
        _41 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _40, _36, _37, move _42);
    }

    bb9: {
        _45 = (_29, _30);
        _44 = &_45;
        _47 = (const 4_i32, const 1_i32);
        _46 = &_47;
        _43 = (move _44, move _46);
        _48 = (_43.0: &(i32, i32));
        _49 = (_43.1: &(i32, i32));
        _51 = <(i32, i32) as PartialEq>::eq(_48, _49) -> bb10;
    }

    bb10: {
        _50 = Not(move _51);
        switchInt(move _50) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _52 = core::panicking::AssertKind::Eq;
        _54 = Option::<Arguments<'_>>::None;
        _53 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _52, _48, _49, move _54);
    }

    bb12: {
        return;
    }
}

fn foo::f() -> (i32, i32) {
    let mut _0: (i32, i32);
    let _1: i32;
    let mut _3: i32;
    scope 1 {
        debug x => _1;
        let _2: i32;
        scope 2 {
            debug x => _2;
        }
    }

    bb0: {
        _1 = const 0_i32;
        _2 = const 1_i32;
        _3 = Add(_2, const 10_i32);
        _0 = (_1, move _3);
        return;
    }
}

fn interpolated_pattern() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _3: (&(i32, i32), &(i32, i32));
    let mut _4: &(i32, i32);
    let _5: (i32, i32);
    let mut _6: &(i32, i32);
    let _7: (i32, i32);
    let mut _10: bool;
    let mut _11: bool;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _2: i32;
        scope 2 {
            debug x => _2;
            let _8: &(i32, i32);
            let _9: &(i32, i32);
            scope 3 {
                debug left_val => _8;
                debug right_val => _9;
                let _12: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _12;
                }
            }
        }
    }

    bb0: {
        _1 = const 0_i32;
        _2 = const 1_i32;
        _5 = (_1, _2);
        _4 = &_5;
        _7 = (const 0_i32, const 1_i32);
        _6 = &_7;
        _3 = (move _4, move _6);
        _8 = (_3.0: &(i32, i32));
        _9 = (_3.1: &(i32, i32));
        _11 = <(i32, i32) as PartialEq>::eq(_8, _9) -> bb1;
    }

    bb1: {
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _12, _8, _9, move _14);
    }

    bb3: {
        return;
    }
}

fn patterns_in_macro_generated_macros() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _3: (&i32, &i32);
    let mut _4: &i32;
    let mut _5: &i32;
    let _6: i32;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: i32;
    let mut _12: i32;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: (&(i32, i32), &(i32, i32));
    let mut _19: &(i32, i32);
    let _20: (i32, i32);
    let mut _21: &(i32, i32);
    let _22: (i32, i32);
    let mut _25: bool;
    let mut _26: bool;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _2: i32;
        scope 2 {
            debug x => _2;
            let _7: &i32;
            let _8: &i32;
            let _16: i32;
            scope 3 {
                debug left_val => _7;
                debug right_val => _8;
                let _13: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _13;
                }
            }
            scope 5 {
                debug x => _16;
                let _17: i32;
                scope 6 {
                    debug x => _17;
                    let _23: &(i32, i32);
                    let _24: &(i32, i32);
                    scope 7 {
                        debug left_val => _23;
                        debug right_val => _24;
                        let _27: core::panicking::AssertKind;
                        scope 8 {
                            debug kind => _27;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const 0_i32;
        _2 = const 1_i32;
        _4 = &_1;
        _6 = const 0_i32;
        _5 = &_6;
        _3 = (move _4, move _5);
        _7 = (_3.0: &i32);
        _8 = (_3.1: &i32);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<i32, i32>(move _13, _7, _8, move _15);
    }

    bb2: {
        _16 = const 2_i32;
        _17 = const 3_i32;
        _20 = (_16, _2);
        _19 = &_20;
        _22 = (const 2_i32, const 1_i32);
        _21 = &_22;
        _18 = (move _19, move _21);
        _23 = (_18.0: &(i32, i32));
        _24 = (_18.1: &(i32, i32));
        _26 = <(i32, i32) as PartialEq>::eq(_23, _24) -> bb3;
    }

    bb3: {
        _25 = Not(move _26);
        switchInt(move _25) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _27, _23, _24, move _29);
    }

    bb5: {
        return;
    }
}

fn match_hygiene() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _3: std::slice::Iter<'_, std::result::Result<i32, i32>>;
    let mut _4: &[std::result::Result<i32, i32>; 2];
    let _5: [std::result::Result<i32, i32>; 2];
    let mut _6: std::result::Result<i32, i32>;
    let mut _7: std::result::Result<i32, i32>;
    let mut _9: std::option::Option<&std::result::Result<i32, i32>>;
    let mut _10: &mut std::slice::Iter<'_, std::result::Result<i32, i32>>;
    let mut _11: isize;
    let mut _13: isize;
    let mut _15: (&(i32, i32), &(i32, i32));
    let mut _16: &(i32, i32);
    let _17: (i32, i32);
    let mut _18: &(i32, i32);
    let _19: (i32, i32);
    let mut _22: bool;
    let mut _23: bool;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _28: (&(i32, i32), &(i32, i32));
    let mut _29: &(i32, i32);
    let _30: (i32, i32);
    let mut _31: &(i32, i32);
    let _32: (i32, i32);
    let mut _35: bool;
    let mut _36: bool;
    let _38: !;
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _2: i32;
        scope 2 {
            debug x => _2;
            let mut _8: std::slice::Iter<'_, std::result::Result<i32, i32>>;
            scope 3 {
                debug iter => _8;
                let _12: &std::result::Result<i32, i32>;
                scope 4 {
                    debug result => _12;
                    let _14: i32;
                    let _27: i32;
                    scope 5 {
                        debug x => _14;
                        let _20: &(i32, i32);
                        let _21: &(i32, i32);
                        scope 6 {
                            debug left_val => _20;
                            debug right_val => _21;
                            let _24: core::panicking::AssertKind;
                            scope 7 {
                                debug kind => _24;
                            }
                        }
                    }
                    scope 8 {
                        debug x => _27;
                        let _33: &(i32, i32);
                        let _34: &(i32, i32);
                        scope 9 {
                            debug left_val => _33;
                            debug right_val => _34;
                            let _37: core::panicking::AssertKind;
                            scope 10 {
                                debug kind => _37;
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const 0_i32;
        _2 = const 2_i32;
        _6 = Result::<i32, i32>::Ok(const 1_i32);
        _7 = Result::<i32, i32>::Err(const 1_i32);
        _5 = [move _6, move _7];
        _4 = &_5;
        _3 = <&[Result<i32, i32>; 2] as IntoIterator>::into_iter(move _4) -> bb1;
    }

    bb1: {
        _8 = move _3;
        goto -> bb2;
    }

    bb2: {
        _10 = &mut _8;
        _9 = <std::slice::Iter<'_, Result<i32, i32>> as Iterator>::next(_10) -> bb3;
    }

    bb3: {
        _11 = discriminant(_9);
        switchInt(move _11) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        _12 = ((_9 as Some).0: &std::result::Result<i32, i32>);
        _13 = discriminant((*_12));
        switchInt(move _13) -> [0: bb8, 1: bb7, otherwise: bb5];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        return;
    }

    bb7: {
        _27 = (((*_12) as Err).0: i32);
        _30 = (_2, _27);
        _29 = &_30;
        _32 = (const 2_i32, const 1_i32);
        _31 = &_32;
        _28 = (move _29, move _31);
        _33 = (_28.0: &(i32, i32));
        _34 = (_28.1: &(i32, i32));
        _36 = <(i32, i32) as PartialEq>::eq(_33, _34) -> bb11;
    }

    bb8: {
        _14 = (((*_12) as Ok).0: i32);
        _17 = (_14, _1);
        _16 = &_17;
        _19 = (const 1_i32, const 0_i32);
        _18 = &_19;
        _15 = (move _16, move _18);
        _20 = (_15.0: &(i32, i32));
        _21 = (_15.1: &(i32, i32));
        _23 = <(i32, i32) as PartialEq>::eq(_20, _21) -> bb9;
    }

    bb9: {
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb2, otherwise: bb10];
    }

    bb10: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _24, _20, _21, move _26);
    }

    bb11: {
        _35 = Not(move _36);
        switchInt(move _35) -> [0: bb2, otherwise: bb12];
    }

    bb12: {
        _37 = core::panicking::AssertKind::Eq;
        _39 = Option::<Arguments<'_>>::None;
        _38 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _37, _33, _34, move _39);
    }
}

fn label_hygiene() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let mut _3: (&(i32, i32), &(i32, i32));
    let mut _4: &(i32, i32);
    let _5: (i32, i32);
    let mut _6: &(i32, i32);
    let _7: (i32, i32);
    let _8: &(i32, i32);
    let _9: &(i32, i32);
    let mut _10: bool;
    let mut _11: bool;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let _15: ();
    let _16: ();
    let _17: ();
    scope 1 {
        debug left_val => _8;
        debug right_val => _9;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }

    bb0: {
        _1 = f() -> bb1;
    }

    bb1: {
        _2 = g() -> bb2;
    }

    bb2: {
        _5 = foo::f() -> bb3;
    }

    bb3: {
        _4 = &_5;
        _7 = (const 0_i32, const 11_i32);
        _6 = &_7;
        _3 = (move _4, move _6);
        _8 = (_3.0: &(i32, i32));
        _9 = (_3.1: &(i32, i32));
        _11 = <(i32, i32) as PartialEq>::eq(_8, _9) -> bb4;
    }

    bb4: {
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _12, _8, _9, move _14);
    }

    bb6: {
        _15 = interpolated_pattern() -> bb7;
    }

    bb7: {
        _16 = patterns_in_macro_generated_macros() -> bb8;
    }

    bb8: {
        _17 = match_hygiene() -> bb9;
    }

    bb9: {
        return;
    }
}
