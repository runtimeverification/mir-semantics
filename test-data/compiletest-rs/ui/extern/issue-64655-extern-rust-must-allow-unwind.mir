// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let mut _2: &usize;
    let _3: usize;
    let _4: &std::sync::atomic::AtomicUsize;
    let mut _5: std::sync::atomic::Ordering;
    let mut _6: &usize;
    let _7: usize;
    let _8: &usize;
    let _9: &usize;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let _17: std::boxed::Box<dyn for<'a, 'b> std::ops::Fn(&'a std::panic::PanicInfo<'b>) + std::marker::Send + std::marker::Sync>;
    let _18: ();
    let mut _19: std::boxed::Box<dyn for<'a, 'b> std::ops::Fn(&'a std::panic::PanicInfo<'b>) + std::marker::Send + std::marker::Sync>;
    let mut _20: std::boxed::Box<[closure@ui/extern/issue-64655-extern-rust-must-allow-unwind.rs:61:35: 61:38]>;
    let mut _23: std::thread::JoinHandle<()>;
    let _24: ();
    let mut _25: std::boxed::Box<dyn for<'a, 'b> std::ops::Fn(&'a std::panic::PanicInfo<'b>) + std::marker::Send + std::marker::Sync>;
    let mut _26: std::boxed::Box<dyn for<'a, 'b> std::ops::Fn(&'a std::panic::PanicInfo<'b>) + std::marker::Send + std::marker::Sync>;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _30: !;
    let mut _31: (&usize, &usize);
    let mut _32: &usize;
    let _33: usize;
    let _34: &std::sync::atomic::AtomicUsize;
    let mut _35: std::sync::atomic::Ordering;
    let mut _36: &usize;
    let _37: usize;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: usize;
    let mut _43: usize;
    let _45: !;
    let mut _46: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _47: bool;
    scope 1 {
        debug left_val => _8;
        debug right_val => _9;
        let _14: core::panicking::AssertKind;
        scope 2 {
            debug kind => _14;
        }
    }
    scope 3 {
        debug old_hook => _17;
        let _21: std::thread::JoinHandle<()>;
        scope 4 {
            debug handle => _21;
            let _22: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
            scope 5 {
                debug wait => _22;
                let _38: &usize;
                let _39: &usize;
                scope 6 {
                    debug left_val => _38;
                    debug right_val => _39;
                    let _44: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _44;
                    }
                }
            }
        }
    }

    bb0: {
        _47 = const false;
        _4 = const {alloc1: &AtomicUsize};
        _5 = SeqCst;
        _3 = AtomicUsize::fetch_add(_4, const 0_usize, move _5) -> bb1;
    }

    bb1: {
        _2 = &_3;
        _7 = const 0_usize;
        _6 = &_7;
        _1 = (move _2, move _6);
        _8 = (_1.0: &usize);
        _9 = (_1.1: &usize);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<usize, usize>(move _14, _8, _9, move _16);
    }

    bb3: {
        _47 = const true;
        _17 = take_hook() -> bb4;
    }

    bb4: {
        _20 = Box::<[closure@ui/extern/issue-64655-extern-rust-must-allow-unwind.rs:61:35: 61:38]>::new(const ZeroSized: [closure@ui/extern/issue-64655-extern-rust-must-allow-unwind.rs:61:35: 61:38]) -> [return: bb5, unwind: bb20];
    }

    bb5: {
        _19 = move _20 as std::boxed::Box<dyn for<'a, 'b> std::ops::Fn(&'a std::panic::PanicInfo<'b>) + std::marker::Send + std::marker::Sync> (Pointer(Unsize));
        _18 = set_hook(move _19) -> [return: bb6, unwind: bb20];
    }

    bb6: {
        _21 = spawn::<[closure@ui/extern/issue-64655-extern-rust-must-allow-unwind.rs:63:37: 63:39], ()>(const ZeroSized: [closure@ui/extern/issue-64655-extern-rust-must-allow-unwind.rs:63:37: 63:39]) -> [return: bb7, unwind: bb20];
    }

    bb7: {
        _23 = move _21;
        _22 = JoinHandle::<()>::join(move _23) -> [return: bb8, unwind: bb20];
    }

    bb8: {
        _47 = const false;
        _26 = move _17;
        _25 = move _26 as std::boxed::Box<dyn for<'a, 'b> std::ops::Fn(&'a std::panic::PanicInfo<'b>) + std::marker::Send + std::marker::Sync> (Pointer(Unsize));
        _24 = set_hook(move _25) -> [return: bb9, unwind: bb17];
    }

    bb9: {
        _29 = &_22;
        _28 = Result::<(), Box<dyn Any + Send>>::is_err(move _29) -> [return: bb10, unwind: bb17];
    }

    bb10: {
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _30 = core::panicking::panic(const "assertion failed: wait.is_err()") -> bb17;
    }

    bb12: {
        _34 = const {alloc1: &AtomicUsize};
        _35 = SeqCst;
        _33 = AtomicUsize::fetch_add(_34, const 0_usize, move _35) -> [return: bb13, unwind: bb17];
    }

    bb13: {
        _32 = &_33;
        _37 = const 1_usize;
        _36 = &_37;
        _31 = (move _32, move _36);
        _38 = (_31.0: &usize);
        _39 = (_31.1: &usize);
        _42 = (*_38);
        _43 = (*_39);
        _41 = Eq(move _42, move _43);
        _40 = Not(move _41);
        switchInt(move _40) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _44 = core::panicking::AssertKind::Eq;
        _46 = Option::<Arguments<'_>>::None;
        _45 = core::panicking::assert_failed::<usize, usize>(move _44, _38, _39, move _46) -> bb17;
    }

    bb15: {
        drop(_22) -> [return: bb16, unwind: bb20];
    }

    bb16: {
        _47 = const false;
        return;
    }

    bb17 (cleanup): {
        drop(_22) -> [return: bb20, unwind terminate];
    }

    bb18 (cleanup): {
        resume;
    }

    bb19 (cleanup): {
        drop(_17) -> [return: bb18, unwind terminate];
    }

    bb20 (cleanup): {
        switchInt(_47) -> [0: bb18, otherwise: bb19];
    }
}

alloc1 (static: SHARED, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

static SHARED: AtomicUsize = {
    let mut _0: std::sync::atomic::AtomicUsize;

    bb0: {
        ConstEvalCounter;
        _0 = AtomicUsize::new(const 0_usize) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/extern/issue-64655-extern-rust-must-allow-unwind.rs:61:35: 61:38], _2: &PanicInfo<'_>) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main::{closure#1}(_1: [closure@ui/extern/issue-64655-extern-rust-must-allow-unwind.rs:63:37: 63:39]) -> () {
    let mut _0: ();
    let _2: main::{closure#1}::Droppable;
    let _3: ();
    let mut _4: std::option::Option<()>;
    let _5: &str;
    scope 1 {
        debug _guard => const Droppable;
    }

    bb0: {
        _4 = Option::<()>::None;
        _5 = const "???";
        _3 = Option::<()>::expect(move _4, _5) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_2) -> bb2;
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn main::{closure#1}::<impl at ui/extern/issue-64655-extern-rust-must-allow-unwind.rs:65:9: 65:32>::drop(_1: &mut Droppable) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: usize;
    let _3: &std::sync::atomic::AtomicUsize;
    let mut _4: std::sync::atomic::Ordering;

    bb0: {
        _3 = const {alloc1: &AtomicUsize};
        _4 = SeqCst;
        _2 = AtomicUsize::fetch_add(_3, const 1_usize, move _4) -> bb1;
    }

    bb1: {
        return;
    }
}

alloc1 (static: SHARED, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}
