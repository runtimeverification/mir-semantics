// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn voidret1() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let _4: &[&str; 1];
    let _5: [&str; 1];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 0];
    let _8: [core::fmt::rt::Argument<'_>; 0];

    bb0: {
        _5 = [const "[ui/extern/extern-compare-with-return-type.rs:7]\n"];
        _4 = &_5;
        _3 = _4 as &[&str] (Pointer(Unsize));
        _8 = core::fmt::rt::Argument::<'_>::none() -> bb1;
    }

    bb1: {
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_v1(move _3, move _6) -> bb2;
    }

    bb2: {
        _1 = _eprint(move _2) -> bb3;
    }

    bb3: {
        return;
    }
}

fn voidret2() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let _4: &[&str; 1];
    let _5: [&str; 1];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 0];
    let _8: [core::fmt::rt::Argument<'_>; 0];

    bb0: {
        _5 = [const "[ui/extern/extern-compare-with-return-type.rs:8]\n"];
        _4 = &_5;
        _3 = _4 as &[&str] (Pointer(Unsize));
        _8 = core::fmt::rt::Argument::<'_>::none() -> bb1;
    }

    bb1: {
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_v1(move _3, move _6) -> bb2;
    }

    bb2: {
        _1 = _eprint(move _2) -> bb3;
    }

    bb3: {
        return;
    }
}

fn uintret() -> usize {
    let mut _0: usize;

    bb0: {
        _0 = const 22_usize;
        return;
    }
}

fn uintvoidret(_1: usize) -> () {
    debug _x => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn uintuintuintuintret(_1: usize, _2: usize, _3: usize) -> usize {
    debug x => _1;
    debug y => _2;
    debug z => _3;
    let mut _0: usize;
    let mut _4: usize;

    bb0: {
        _4 = Add(_1, _2);
        _0 = Add(move _4, _3);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: extern "C" fn();
    let mut _4: extern "C" fn();
    let mut _5: !;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: extern "C" fn();
    let mut _9: extern "C" fn();
    let mut _10: !;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: extern "C" fn() -> usize;
    let mut _14: extern "C" fn() -> usize;
    let mut _15: !;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: extern "C" fn(usize);
    let mut _19: extern "C" fn(usize);
    let mut _20: !;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: extern "C" fn(usize, usize, usize) -> usize;
    let mut _24: extern "C" fn(usize, usize, usize) -> usize;
    let mut _25: !;

    bb0: {
        _3 = voidret1 as extern "C" fn() (Pointer(ReifyFnPointer));
        _4 = voidret1 as extern "C" fn() (Pointer(ReifyFnPointer));
        _2 = Eq(move _3, move _4);
        _1 = Not(move _2);
        switchInt(move _1) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _5 = core::panicking::panic(const "assertion failed: voidret1 as extern \\\"C\\\" fn() == voidret1 as extern \\\"C\\\" fn()");
    }

    bb2: {
        _8 = voidret1 as extern "C" fn() (Pointer(ReifyFnPointer));
        _9 = voidret2 as extern "C" fn() (Pointer(ReifyFnPointer));
        _7 = Ne(move _8, move _9);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _10 = core::panicking::panic(const "assertion failed: voidret1 as extern \\\"C\\\" fn() != voidret2 as extern \\\"C\\\" fn()");
    }

    bb4: {
        _13 = uintret as extern "C" fn() -> usize (Pointer(ReifyFnPointer));
        _14 = uintret as extern "C" fn() -> usize (Pointer(ReifyFnPointer));
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _15 = core::panicking::panic(const "assertion failed: uintret as extern \\\"C\\\" fn() -> usize == uintret as extern \\\"C\\\" fn() -> usize");
    }

    bb6: {
        _18 = uintvoidret as extern "C" fn(usize) (Pointer(ReifyFnPointer));
        _19 = uintvoidret as extern "C" fn(usize) (Pointer(ReifyFnPointer));
        _17 = Eq(move _18, move _19);
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _20 = core::panicking::panic(const "assertion failed: uintvoidret as extern \\\"C\\\" fn(usize) == uintvoidret as extern \\\"C\\\" fn(usize)");
    }

    bb8: {
        _23 = uintuintuintuintret as extern "C" fn(usize, usize, usize) -> usize (Pointer(ReifyFnPointer));
        _24 = uintuintuintuintret as extern "C" fn(usize, usize, usize) -> usize (Pointer(ReifyFnPointer));
        _22 = Eq(move _23, move _24);
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _25 = core::panicking::panic(const "assertion failed: uintuintuintuintret as uintuintuintuintret ==\\n    uintuintuintuintret as uintuintuintuintret");
    }

    bb10: {
        return;
    }
}
