// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: i32;
    let mut _2: i32;
    let mut _5: (i32, i32);
    let mut _6: (&(i32, i32), &(i32, i32));
    let mut _7: &(i32, i32);
    let _8: (i32, i32);
    let mut _9: i32;
    let mut _10: i32;
    let mut _11: &(i32, i32);
    let _12: (i32, i32);
    let mut _15: bool;
    let mut _16: bool;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _22: (i32, i32);
    let mut _23: i32;
    let mut _24: i32;
    let mut _25: (&(i32, i32), &(i32, i32));
    let mut _26: &(i32, i32);
    let _27: (i32, i32);
    let mut _28: i32;
    let mut _29: i32;
    let mut _30: &(i32, i32);
    let _31: (i32, i32);
    let mut _34: bool;
    let mut _35: bool;
    let _37: !;
    let mut _38: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _41: (i32, i32);
    let mut _42: (&(i32, i32), &(i32, i32));
    let mut _43: &(i32, i32);
    let _44: (i32, i32);
    let mut _45: i32;
    let mut _46: i32;
    let mut _47: &(i32, i32);
    let _48: (i32, i32);
    let mut _51: bool;
    let mut _52: bool;
    let _54: !;
    let mut _55: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _57: (i32, i32);
    let mut _58: (&(i32, i32), &(i32, i32));
    let mut _59: &(i32, i32);
    let _60: (i32, i32);
    let mut _61: i32;
    let mut _62: i32;
    let mut _63: &(i32, i32);
    let _64: (i32, i32);
    let mut _67: bool;
    let mut _68: bool;
    let _70: !;
    let mut _71: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _72: (&(i32, i32), &(i32, i32));
    let mut _73: &(i32, i32);
    let _74: (i32, i32);
    let mut _75: i32;
    let mut _76: i32;
    let mut _77: &(i32, i32);
    let _78: (i32, i32);
    let mut _81: bool;
    let mut _82: bool;
    let _84: !;
    let mut _85: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _87: (i32, i32, i32);
    let mut _88: (&i32, &i32);
    let mut _89: &i32;
    let mut _90: &i32;
    let _91: i32;
    let mut _94: bool;
    let mut _95: bool;
    let mut _96: i32;
    let mut _97: i32;
    let _99: !;
    let mut _100: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _102: (i32, i32);
    let mut _103: (&i32, &i32);
    let mut _104: &i32;
    let mut _105: &i32;
    let _106: i32;
    let mut _109: bool;
    let mut _110: bool;
    let mut _111: i32;
    let mut _112: i32;
    let _114: !;
    let mut _115: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _120: (std::string::String, std::string::String);
    let mut _121: std::string::String;
    let _122: &str;
    let mut _123: std::string::String;
    let _124: &str;
    let mut _125: (&std::string::String, &&str);
    let mut _126: &std::string::String;
    let mut _127: &&str;
    let _128: &str;
    let mut _131: bool;
    let mut _132: bool;
    let _134: !;
    let mut _135: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _136: (&std::string::String, &&str);
    let mut _137: &std::string::String;
    let mut _138: &&str;
    let _139: &str;
    let mut _142: bool;
    let mut _143: bool;
    let _145: !;
    let mut _146: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _149: (std::string::String, std::string::String);
    let mut _150: std::string::String;
    let mut _151: std::string::String;
    let mut _152: (&std::string::String, &&str);
    let mut _153: &std::string::String;
    let mut _154: &&str;
    let _155: &str;
    let mut _158: bool;
    let mut _159: bool;
    let _161: !;
    let mut _162: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _163: (&std::string::String, &&str);
    let mut _164: &std::string::String;
    let mut _165: &&str;
    let _166: &str;
    let mut _169: bool;
    let mut _170: bool;
    let _172: !;
    let mut _173: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _176: (i32, i32);
    let mut _177: (&(i32, i32), &(i32, i32));
    let mut _178: &(i32, i32);
    let _179: (i32, i32);
    let mut _180: i32;
    let mut _181: i32;
    let mut _182: &(i32, i32);
    let _183: (i32, i32);
    let mut _186: bool;
    let mut _187: bool;
    let _189: !;
    let mut _190: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _194: ((i32, i32), std::string::String);
    let mut _195: (i32, i32);
    let mut _196: std::string::String;
    let mut _197: std::string::String;
    let mut _198: (&(i32, i32), &(i32, i32));
    let mut _199: &(i32, i32);
    let _200: (i32, i32);
    let mut _201: i32;
    let mut _202: i32;
    let mut _203: &(i32, i32);
    let _204: (i32, i32);
    let mut _207: bool;
    let mut _208: bool;
    let _210: !;
    let mut _211: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _212: (&std::string::String, &&str);
    let mut _213: &std::string::String;
    let mut _214: &&str;
    let _215: &str;
    let mut _218: bool;
    let mut _219: bool;
    let _221: !;
    let mut _222: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _225: ((i32, i32), ());
    let mut _226: (i32, i32);
    let mut _227: (&(i32, i32), &(i32, i32));
    let mut _228: &(i32, i32);
    let _229: (i32, i32);
    let mut _230: i32;
    let mut _231: i32;
    let mut _232: &(i32, i32);
    let _233: (i32, i32);
    let mut _236: bool;
    let mut _237: bool;
    let _239: !;
    let mut _240: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _241: bool;
    let mut _242: bool;
    let mut _243: bool;
    scope 1 {
        debug a => _1;
        debug b => _2;
        let _3: i32;
        let _4: i32;
        let _13: &(i32, i32);
        let _14: &(i32, i32);
        let _20: i32;
        let _21: i32;
        let _32: &(i32, i32);
        let _33: &(i32, i32);
        let _39: i32;
        let _40: i32;
        let _49: &(i32, i32);
        let _50: &(i32, i32);
        let _56: i32;
        let _65: &(i32, i32);
        let _66: &(i32, i32);
        let _79: &(i32, i32);
        let _80: &(i32, i32);
        let _86: i32;
        let _92: &i32;
        let _93: &i32;
        let _101: i32;
        let _107: &i32;
        let _108: &i32;
        let mut _116: std::string::String;
        let mut _117: std::string::String;
        scope 2 {
            debug lhs => _3;
            debug lhs => _4;
        }
        scope 3 {
            debug left_val => _13;
            debug right_val => _14;
            let _17: core::panicking::AssertKind;
            scope 4 {
                debug kind => _17;
            }
        }
        scope 5 {
            debug lhs => _20;
            debug lhs => _21;
        }
        scope 6 {
            debug left_val => _32;
            debug right_val => _33;
            let _36: core::panicking::AssertKind;
            scope 7 {
                debug kind => _36;
            }
        }
        scope 8 {
            debug lhs => _39;
            debug lhs => _40;
        }
        scope 9 {
            debug left_val => _49;
            debug right_val => _50;
            let _53: core::panicking::AssertKind;
            scope 10 {
                debug kind => _53;
            }
        }
        scope 11 {
            debug lhs => _56;
        }
        scope 12 {
            debug left_val => _65;
            debug right_val => _66;
            let _69: core::panicking::AssertKind;
            scope 13 {
                debug kind => _69;
            }
        }
        scope 14 {
        }
        scope 15 {
            debug left_val => _79;
            debug right_val => _80;
            let _83: core::panicking::AssertKind;
            scope 16 {
                debug kind => _83;
            }
        }
        scope 17 {
            debug lhs => _86;
        }
        scope 18 {
            debug left_val => _92;
            debug right_val => _93;
            let _98: core::panicking::AssertKind;
            scope 19 {
                debug kind => _98;
            }
        }
        scope 20 {
            debug lhs => _101;
        }
        scope 21 {
            debug left_val => _107;
            debug right_val => _108;
            let _113: core::panicking::AssertKind;
            scope 22 {
                debug kind => _113;
            }
        }
        scope 23 {
            debug c => _116;
            debug d => _117;
            let _118: std::string::String;
            let _119: std::string::String;
            let _129: &std::string::String;
            let _130: &&str;
            let _140: &std::string::String;
            let _141: &&str;
            let _147: std::string::String;
            let _148: std::string::String;
            let _156: &std::string::String;
            let _157: &&str;
            let _167: &std::string::String;
            let _168: &&str;
            let _174: i32;
            let _175: i32;
            let _184: &(i32, i32);
            let _185: &(i32, i32);
            let _191: i32;
            let _192: i32;
            let _193: std::string::String;
            let _205: &(i32, i32);
            let _206: &(i32, i32);
            let _216: &std::string::String;
            let _217: &&str;
            let _223: i32;
            let _224: i32;
            let _234: &(i32, i32);
            let _235: &(i32, i32);
            scope 24 {
                debug lhs => _118;
                debug lhs => _119;
            }
            scope 25 {
                debug left_val => _129;
                debug right_val => _130;
                let _133: core::panicking::AssertKind;
                scope 26 {
                    debug kind => _133;
                }
            }
            scope 27 {
                debug left_val => _140;
                debug right_val => _141;
                let _144: core::panicking::AssertKind;
                scope 28 {
                    debug kind => _144;
                }
            }
            scope 29 {
                debug lhs => _147;
                debug lhs => _148;
            }
            scope 30 {
                debug left_val => _156;
                debug right_val => _157;
                let _160: core::panicking::AssertKind;
                scope 31 {
                    debug kind => _160;
                }
            }
            scope 32 {
                debug left_val => _167;
                debug right_val => _168;
                let _171: core::panicking::AssertKind;
                scope 33 {
                    debug kind => _171;
                }
            }
            scope 34 {
                debug lhs => _174;
                debug lhs => _175;
            }
            scope 35 {
                debug left_val => _184;
                debug right_val => _185;
                let _188: core::panicking::AssertKind;
                scope 36 {
                    debug kind => _188;
                }
            }
            scope 37 {
                debug lhs => _191;
                debug lhs => _192;
                debug lhs => _193;
            }
            scope 38 {
                debug left_val => _205;
                debug right_val => _206;
                let _209: core::panicking::AssertKind;
                scope 39 {
                    debug kind => _209;
                }
            }
            scope 40 {
                debug left_val => _216;
                debug right_val => _217;
                let _220: core::panicking::AssertKind;
                scope 41 {
                    debug kind => _220;
                }
            }
            scope 42 {
                debug lhs => _223;
                debug lhs => _224;
            }
            scope 43 {
                debug left_val => _234;
                debug right_val => _235;
                let _238: core::panicking::AssertKind;
                scope 44 {
                    debug kind => _238;
                }
            }
        }
    }

    bb0: {
        _243 = const false;
        _242 = const false;
        _241 = const false;
        _5 = (const 0_i32, const 1_i32);
        _3 = (_5.0: i32);
        _4 = (_5.1: i32);
        _1 = _3;
        _2 = _4;
        _9 = _1;
        _10 = _2;
        _8 = (move _9, move _10);
        _7 = &_8;
        _12 = (const 0_i32, const 1_i32);
        _11 = &_12;
        _6 = (move _7, move _11);
        _13 = (_6.0: &(i32, i32));
        _14 = (_6.1: &(i32, i32));
        _16 = <(i32, i32) as PartialEq>::eq(_13, _14) -> bb1;
    }

    bb1: {
        _15 = Not(move _16);
        switchInt(move _15) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _17, _13, _14, move _19);
    }

    bb3: {
        _23 = _1;
        _24 = _2;
        _22 = (move _23, move _24);
        _20 = (_22.0: i32);
        _21 = (_22.1: i32);
        _2 = _20;
        _1 = _21;
        _28 = _1;
        _29 = _2;
        _27 = (move _28, move _29);
        _26 = &_27;
        _31 = (const 1_i32, const 0_i32);
        _30 = &_31;
        _25 = (move _26, move _30);
        _32 = (_25.0: &(i32, i32));
        _33 = (_25.1: &(i32, i32));
        _35 = <(i32, i32) as PartialEq>::eq(_32, _33) -> bb4;
    }

    bb4: {
        _34 = Not(move _35);
        switchInt(move _34) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _36 = core::panicking::AssertKind::Eq;
        _38 = Option::<Arguments<'_>>::None;
        _37 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _36, _32, _33, move _38);
    }

    bb6: {
        _41 = (const 1_i32, const 2_i32);
        _39 = (_41.0: i32);
        _40 = (_41.1: i32);
        _1 = _39;
        _2 = _40;
        _45 = _1;
        _46 = _2;
        _44 = (move _45, move _46);
        _43 = &_44;
        _48 = (const 1_i32, const 2_i32);
        _47 = &_48;
        _42 = (move _43, move _47);
        _49 = (_42.0: &(i32, i32));
        _50 = (_42.1: &(i32, i32));
        _52 = <(i32, i32) as PartialEq>::eq(_49, _50) -> bb7;
    }

    bb7: {
        _51 = Not(move _52);
        switchInt(move _51) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _53 = core::panicking::AssertKind::Eq;
        _55 = Option::<Arguments<'_>>::None;
        _54 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _53, _49, _50, move _55);
    }

    bb9: {
        _57 = (const 1_i32, const 2_i32);
        _56 = (_57.1: i32);
        _1 = _56;
        _61 = _1;
        _62 = _2;
        _60 = (move _61, move _62);
        _59 = &_60;
        _64 = (const 2_i32, const 2_i32);
        _63 = &_64;
        _58 = (move _59, move _63);
        _65 = (_58.0: &(i32, i32));
        _66 = (_58.1: &(i32, i32));
        _68 = <(i32, i32) as PartialEq>::eq(_65, _66) -> bb10;
    }

    bb10: {
        _67 = Not(move _68);
        switchInt(move _67) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _69 = core::panicking::AssertKind::Eq;
        _71 = Option::<Arguments<'_>>::None;
        _70 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _69, _65, _66, move _71);
    }

    bb12: {
        _75 = _1;
        _76 = _2;
        _74 = (move _75, move _76);
        _73 = &_74;
        _78 = (const 2_i32, const 2_i32);
        _77 = &_78;
        _72 = (move _73, move _77);
        _79 = (_72.0: &(i32, i32));
        _80 = (_72.1: &(i32, i32));
        _82 = <(i32, i32) as PartialEq>::eq(_79, _80) -> bb13;
    }

    bb13: {
        _81 = Not(move _82);
        switchInt(move _81) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _83 = core::panicking::AssertKind::Eq;
        _85 = Option::<Arguments<'_>>::None;
        _84 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _83, _79, _80, move _85);
    }

    bb15: {
        _87 = (const 5_i32, const 6_i32, const 7_i32);
        _86 = (_87.0: i32);
        _2 = _86;
        _89 = &_2;
        _91 = const 5_i32;
        _90 = &_91;
        _88 = (move _89, move _90);
        _92 = (_88.0: &i32);
        _93 = (_88.1: &i32);
        _96 = (*_92);
        _97 = (*_93);
        _95 = Eq(move _96, move _97);
        _94 = Not(move _95);
        switchInt(move _94) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _98 = core::panicking::AssertKind::Eq;
        _100 = Option::<Arguments<'_>>::None;
        _99 = core::panicking::assert_failed::<i32, i32>(move _98, _92, _93, move _100);
    }

    bb17: {
        _102 = (const 8_i32, const 9_i32);
        _101 = (_102.0: i32);
        _1 = _101;
        _104 = &_1;
        _106 = const 8_i32;
        _105 = &_106;
        _103 = (move _104, move _105);
        _107 = (_103.0: &i32);
        _108 = (_103.1: &i32);
        _111 = (*_107);
        _112 = (*_108);
        _110 = Eq(move _111, move _112);
        _109 = Not(move _110);
        switchInt(move _109) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _113 = core::panicking::AssertKind::Eq;
        _115 = Option::<Arguments<'_>>::None;
        _114 = core::panicking::assert_failed::<i32, i32>(move _113, _107, _108, move _115);
    }

    bb19: {
        _122 = const "c";
        _121 = <str as ToOwned>::to_owned(_122) -> [return: bb20, unwind: bb54];
    }

    bb20: {
        _124 = const "d";
        _123 = <str as ToOwned>::to_owned(_124) -> [return: bb21, unwind: bb49];
    }

    bb21: {
        _120 = (move _121, move _123);
        _118 = move (_120.0: std::string::String);
        _119 = move (_120.1: std::string::String);
        _243 = const true;
        _116 = move _118;
        _242 = const true;
        _117 = move _119;
        _126 = &_116;
        _128 = const "c";
        _127 = &_128;
        _125 = (move _126, move _127);
        _129 = (_125.0: &std::string::String);
        _130 = (_125.1: &&str);
        _132 = <String as PartialEq<&str>>::eq(_129, _130) -> [return: bb22, unwind: bb54];
    }

    bb22: {
        _131 = Not(move _132);
        switchInt(move _131) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _133 = core::panicking::AssertKind::Eq;
        _135 = Option::<Arguments<'_>>::None;
        _134 = core::panicking::assert_failed::<String, &str>(move _133, _129, _130, move _135) -> bb54;
    }

    bb24: {
        _137 = &_117;
        _139 = const "d";
        _138 = &_139;
        _136 = (move _137, move _138);
        _140 = (_136.0: &std::string::String);
        _141 = (_136.1: &&str);
        _143 = <String as PartialEq<&str>>::eq(_140, _141) -> [return: bb25, unwind: bb54];
    }

    bb25: {
        _142 = Not(move _143);
        switchInt(move _142) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _144 = core::panicking::AssertKind::Eq;
        _146 = Option::<Arguments<'_>>::None;
        _145 = core::panicking::assert_failed::<String, &str>(move _144, _140, _141, move _146) -> bb54;
    }

    bb27: {
        _243 = const false;
        _150 = move _116;
        _242 = const false;
        _151 = move _117;
        _149 = (move _150, move _151);
        _147 = move (_149.0: std::string::String);
        _148 = move (_149.1: std::string::String);
        _242 = const true;
        _117 = move _147;
        _243 = const true;
        _116 = move _148;
        _153 = &_116;
        _155 = const "d";
        _154 = &_155;
        _152 = (move _153, move _154);
        _156 = (_152.0: &std::string::String);
        _157 = (_152.1: &&str);
        _159 = <String as PartialEq<&str>>::eq(_156, _157) -> [return: bb28, unwind: bb54];
    }

    bb28: {
        _158 = Not(move _159);
        switchInt(move _158) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _160 = core::panicking::AssertKind::Eq;
        _162 = Option::<Arguments<'_>>::None;
        _161 = core::panicking::assert_failed::<String, &str>(move _160, _156, _157, move _162) -> bb54;
    }

    bb30: {
        _164 = &_117;
        _166 = const "c";
        _165 = &_166;
        _163 = (move _164, move _165);
        _167 = (_163.0: &std::string::String);
        _168 = (_163.1: &&str);
        _170 = <String as PartialEq<&str>>::eq(_167, _168) -> [return: bb31, unwind: bb54];
    }

    bb31: {
        _169 = Not(move _170);
        switchInt(move _169) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _171 = core::panicking::AssertKind::Eq;
        _173 = Option::<Arguments<'_>>::None;
        _172 = core::panicking::assert_failed::<String, &str>(move _171, _167, _168, move _173) -> bb54;
    }

    bb33: {
        _176 = (const 0_i32, const 1_i32);
        _174 = (_176.0: i32);
        _175 = (_176.1: i32);
        _1 = _174;
        _2 = _175;
        _180 = _1;
        _181 = _2;
        _179 = (move _180, move _181);
        _178 = &_179;
        _183 = (const 0_i32, const 1_i32);
        _182 = &_183;
        _177 = (move _178, move _182);
        _184 = (_177.0: &(i32, i32));
        _185 = (_177.1: &(i32, i32));
        _187 = <(i32, i32) as PartialEq>::eq(_184, _185) -> [return: bb34, unwind: bb54];
    }

    bb34: {
        _186 = Not(move _187);
        switchInt(move _186) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _188 = core::panicking::AssertKind::Eq;
        _190 = Option::<Arguments<'_>>::None;
        _189 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _188, _184, _185, move _190) -> bb54;
    }

    bb36: {
        _195 = (const 2_i32, const 3_i32);
        _242 = const false;
        _196 = move _117;
        _194 = (move _195, move _196);
        _191 = ((_194.0: (i32, i32)).0: i32);
        _192 = ((_194.0: (i32, i32)).1: i32);
        _241 = const true;
        _193 = move (_194.1: std::string::String);
        _1 = _191;
        _2 = _192;
        _241 = const false;
        _197 = move _193;
        drop(_116) -> [return: bb37, unwind: bb38];
    }

    bb37: {
        _243 = const true;
        _116 = move _197;
        _241 = const false;
        _201 = _1;
        _202 = _2;
        _200 = (move _201, move _202);
        _199 = &_200;
        _204 = (const 2_i32, const 3_i32);
        _203 = &_204;
        _198 = (move _199, move _203);
        _205 = (_198.0: &(i32, i32));
        _206 = (_198.1: &(i32, i32));
        _208 = <(i32, i32) as PartialEq>::eq(_205, _206) -> [return: bb39, unwind: bb54];
    }

    bb38 (cleanup): {
        _243 = const true;
        _116 = move _197;
        switchInt(_241) -> [0: bb54, otherwise: bb52];
    }

    bb39: {
        _207 = Not(move _208);
        switchInt(move _207) -> [0: bb41, otherwise: bb40];
    }

    bb40: {
        _209 = core::panicking::AssertKind::Eq;
        _211 = Option::<Arguments<'_>>::None;
        _210 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _209, _205, _206, move _211) -> bb54;
    }

    bb41: {
        _213 = &_116;
        _215 = const "c";
        _214 = &_215;
        _212 = (move _213, move _214);
        _216 = (_212.0: &std::string::String);
        _217 = (_212.1: &&str);
        _219 = <String as PartialEq<&str>>::eq(_216, _217) -> [return: bb42, unwind: bb54];
    }

    bb42: {
        _218 = Not(move _219);
        switchInt(move _218) -> [0: bb44, otherwise: bb43];
    }

    bb43: {
        _220 = core::panicking::AssertKind::Eq;
        _222 = Option::<Arguments<'_>>::None;
        _221 = core::panicking::assert_failed::<String, &str>(move _220, _216, _217, move _222) -> bb54;
    }

    bb44: {
        _226 = (const 4_i32, const 5_i32);
        _225 = (move _226, const ());
        _223 = ((_225.0: (i32, i32)).0: i32);
        _224 = ((_225.0: (i32, i32)).1: i32);
        _1 = _223;
        _2 = _224;
        _230 = _1;
        _231 = _2;
        _229 = (move _230, move _231);
        _228 = &_229;
        _233 = (const 4_i32, const 5_i32);
        _232 = &_233;
        _227 = (move _228, move _232);
        _234 = (_227.0: &(i32, i32));
        _235 = (_227.1: &(i32, i32));
        _237 = <(i32, i32) as PartialEq>::eq(_234, _235) -> [return: bb45, unwind: bb54];
    }

    bb45: {
        _236 = Not(move _237);
        switchInt(move _236) -> [0: bb47, otherwise: bb46];
    }

    bb46: {
        _238 = core::panicking::AssertKind::Eq;
        _240 = Option::<Arguments<'_>>::None;
        _239 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _238, _234, _235, move _240) -> bb54;
    }

    bb47: {
        _242 = const false;
        drop(_116) -> bb48;
    }

    bb48: {
        _243 = const false;
        return;
    }

    bb49 (cleanup): {
        drop(_121) -> [return: bb54, unwind terminate];
    }

    bb50 (cleanup): {
        switchInt(_243) -> [0: bb51, otherwise: bb55];
    }

    bb51 (cleanup): {
        resume;
    }

    bb52 (cleanup): {
        drop(_193) -> [return: bb54, unwind terminate];
    }

    bb53 (cleanup): {
        drop(_117) -> [return: bb50, unwind terminate];
    }

    bb54 (cleanup): {
        switchInt(_242) -> [0: bb50, otherwise: bb53];
    }

    bb55 (cleanup): {
        drop(_116) -> [return: bb51, unwind terminate];
    }
}
