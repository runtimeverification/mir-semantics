// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _5: Struct<TupleStruct<(i32, i32), i32>, [i32; 1]>;
    let mut _6: TupleStruct<(i32, i32), i32>;
    let mut _7: (i32, i32);
    let mut _8: [i32; 1];
    let mut _9: (&(i32, i32, i32, i32), &(i32, i32, i32, i32));
    let mut _10: &(i32, i32, i32, i32);
    let _11: (i32, i32, i32, i32);
    let mut _12: &(i32, i32, i32, i32);
    let _13: (i32, i32, i32, i32);
    let mut _16: bool;
    let mut _17: bool;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug a => _1;
        debug b => _2;
        debug c => _3;
        debug d => _4;
        let _1: i32;
        let _2: i32;
        let _3: i32;
        let _4: i32;
        let _14: &(i32, i32, i32, i32);
        let _15: &(i32, i32, i32, i32);
        scope 2 {
            debug lhs => _1;
            debug lhs => _2;
            debug lhs => _3;
            debug lhs => _4;
        }
        scope 3 {
            debug left_val => _14;
            debug right_val => _15;
            let _18: core::panicking::AssertKind;
            scope 4 {
                debug kind => _18;
            }
        }
        scope 5 {
        }
    }

    bb0: {
        _7 = (const 0_i32, const 1_i32);
        _6 = TupleStruct::<(i32, i32), i32>(move _7, const 2_i32);
        _8 = [const 3_i32];
        _5 = Struct::<TupleStruct<(i32, i32), i32>, [i32; 1]> { a: move _6, b: move _8 };
        _1 = (((_5.0: TupleStruct<(i32, i32), i32>).0: (i32, i32)).0: i32);
        _2 = (((_5.0: TupleStruct<(i32, i32), i32>).0: (i32, i32)).1: i32);
        _3 = ((_5.0: TupleStruct<(i32, i32), i32>).1: i32);
        _4 = (_5.1: [i32; 1])[0 of 1];
        _11 = (_1, _2, _3, _4);
        _10 = &_11;
        _13 = (const 0_i32, const 1_i32, const 2_i32, const 3_i32);
        _12 = &_13;
        _9 = (move _10, move _12);
        _14 = (_9.0: &(i32, i32, i32, i32));
        _15 = (_9.1: &(i32, i32, i32, i32));
        _17 = <(i32, i32, i32, i32) as PartialEq>::eq(_14, _15) -> bb1;
    }

    bb1: {
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<(i32, i32, i32, i32), (i32, i32, i32, i32)>(move _18, _14, _15, move _20);
    }

    bb3: {
        return;
    }
}

fn TupleStruct(_1: S, _2: T) -> TupleStruct<S, T> {
    let mut _0: TupleStruct<S, T>;

    bb0: {
        _0 = TupleStruct::<S, T>(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn TupleStruct(_1: S, _2: T) -> TupleStruct<S, T> {
    let mut _0: TupleStruct<S, T>;

    bb0: {
        _0 = TupleStruct::<S, T>(move _1, move _2);
        return;
    }
}
