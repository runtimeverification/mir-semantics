// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: i32;
    let mut _4: (i32, i32);
    let mut _5: (&i32, &i32);
    let mut _6: &i32;
    let mut _7: &i32;
    let _8: i32;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: i32;
    let mut _14: i32;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: (u32, u32);
    let mut _22: &mut u32;
    let mut _23: &mut u32;
    let mut _24: &mut u32;
    let mut _25: &mut u32;
    let mut _26: (&u32, &u32);
    let mut _27: &u32;
    let mut _28: &u32;
    let _29: u32;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: u32;
    let mut _35: u32;
    let _37: !;
    let mut _38: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug a => _1;
        let _2: i32;
        let _3: i32;
        let _9: &i32;
        let _10: &i32;
        let mut _18: u32;
        scope 2 {
            debug lhs => _2;
            debug lhs => _3;
        }
        scope 3 {
            debug left_val => _9;
            debug right_val => _10;
            let _15: core::panicking::AssertKind;
            scope 4 {
                debug kind => _15;
            }
        }
        scope 5 {
            debug x => _18;
            let _19: u32;
            let _20: u32;
            let _30: &u32;
            let _31: &u32;
            scope 6 {
                debug lhs => _19;
                debug lhs => _20;
            }
            scope 7 {
                debug left_val => _30;
                debug right_val => _31;
                let _36: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _36;
                }
            }
        }
    }

    bb0: {
        _4 = (const 0_i32, const 1_i32);
        _2 = (_4.0: i32);
        _3 = (_4.1: i32);
        _1 = _2;
        _1 = _3;
        _6 = &_1;
        _8 = const 1_i32;
        _7 = &_8;
        _5 = (move _6, move _7);
        _9 = (_5.0: &i32);
        _10 = (_5.1: &i32);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<i32, i32>(move _15, _9, _10, move _17);
    }

    bb2: {
        _18 = const 1_u32;
        _21 = (const 5_u32, const 6_u32);
        _19 = (_21.0: u32);
        _20 = (_21.1: u32);
        _23 = &mut _18;
        _22 = foo(_23) -> bb3;
    }

    bb3: {
        (*_22) = _19;
        _25 = &mut _18;
        _24 = foo(_25) -> bb4;
    }

    bb4: {
        (*_24) = _20;
        _27 = &_18;
        _29 = const 6_u32;
        _28 = &_29;
        _26 = (move _27, move _28);
        _30 = (_26.0: &u32);
        _31 = (_26.1: &u32);
        _34 = (*_30);
        _35 = (*_31);
        _33 = Eq(move _34, move _35);
        _32 = Not(move _33);
        switchInt(move _32) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _36 = core::panicking::AssertKind::Eq;
        _38 = Option::<Arguments<'_>>::None;
        _37 = core::panicking::assert_failed::<u32, u32>(move _36, _30, _31, move _38);
    }

    bb6: {
        return;
    }
}

fn foo(_1: &mut u32) -> &mut u32 {
    debug x => _1;
    let mut _0: &mut u32;

    bb0: {
        _0 = _1;
        return;
    }
}
