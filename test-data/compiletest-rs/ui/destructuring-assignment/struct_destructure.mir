// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: i32;
    let mut _2: i32;
    let mut _5: Struct<i32, i32>;
    let mut _6: (&(i32, i32), &(i32, i32));
    let mut _7: &(i32, i32);
    let _8: (i32, i32);
    let mut _9: i32;
    let mut _10: i32;
    let mut _11: &(i32, i32);
    let _12: (i32, i32);
    let mut _15: bool;
    let mut _16: bool;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _22: Struct<i32, i32>;
    let mut _23: (&(i32, i32), &(i32, i32));
    let mut _24: &(i32, i32);
    let _25: (i32, i32);
    let mut _26: i32;
    let mut _27: i32;
    let mut _28: &(i32, i32);
    let _29: (i32, i32);
    let mut _32: bool;
    let mut _33: bool;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _38: Struct<i32, i32>;
    let mut _39: (&(i32, i32), &(i32, i32));
    let mut _40: &(i32, i32);
    let _41: (i32, i32);
    let mut _42: i32;
    let mut _43: i32;
    let mut _44: &(i32, i32);
    let _45: (i32, i32);
    let mut _48: bool;
    let mut _49: bool;
    let _51: !;
    let mut _52: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _54: Struct<i32, i32>;
    let mut _55: (&(i32, i32), &(i32, i32));
    let mut _56: &(i32, i32);
    let _57: (i32, i32);
    let mut _58: i32;
    let mut _59: i32;
    let mut _60: &(i32, i32);
    let _61: (i32, i32);
    let mut _64: bool;
    let mut _65: bool;
    let _67: !;
    let mut _68: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _69: (&(i32, i32), &(i32, i32));
    let mut _70: &(i32, i32);
    let _71: (i32, i32);
    let mut _72: i32;
    let mut _73: i32;
    let mut _74: &(i32, i32);
    let _75: (i32, i32);
    let mut _78: bool;
    let mut _79: bool;
    let _81: !;
    let mut _82: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug a => _1;
        debug b => _2;
        let _3: i32;
        let _4: i32;
        let _13: &(i32, i32);
        let _14: &(i32, i32);
        let _20: i32;
        let _21: i32;
        let _30: &(i32, i32);
        let _31: &(i32, i32);
        let _37: i32;
        let _46: &(i32, i32);
        let _47: &(i32, i32);
        let _53: i32;
        let _62: &(i32, i32);
        let _63: &(i32, i32);
        let _76: &(i32, i32);
        let _77: &(i32, i32);
        scope 2 {
            debug lhs => _3;
            debug lhs => _4;
        }
        scope 3 {
            debug left_val => _13;
            debug right_val => _14;
            let _17: core::panicking::AssertKind;
            scope 4 {
                debug kind => _17;
            }
        }
        scope 5 {
            debug lhs => _20;
            debug lhs => _21;
        }
        scope 6 {
            debug left_val => _30;
            debug right_val => _31;
            let _34: core::panicking::AssertKind;
            scope 7 {
                debug kind => _34;
            }
        }
        scope 8 {
            debug lhs => _37;
        }
        scope 9 {
            debug left_val => _46;
            debug right_val => _47;
            let _50: core::panicking::AssertKind;
            scope 10 {
                debug kind => _50;
            }
        }
        scope 11 {
            debug lhs => _53;
        }
        scope 12 {
            debug left_val => _62;
            debug right_val => _63;
            let _66: core::panicking::AssertKind;
            scope 13 {
                debug kind => _66;
            }
        }
        scope 14 {
        }
        scope 15 {
            debug left_val => _76;
            debug right_val => _77;
            let _80: core::panicking::AssertKind;
            scope 16 {
                debug kind => _80;
            }
        }
    }

    bb0: {
        _5 = Struct::<i32, i32> { a: const 0_i32, b: const 1_i32 };
        _3 = (_5.0: i32);
        _4 = (_5.1: i32);
        _1 = _3;
        _2 = _4;
        _9 = _1;
        _10 = _2;
        _8 = (move _9, move _10);
        _7 = &_8;
        _12 = (const 0_i32, const 1_i32);
        _11 = &_12;
        _6 = (move _7, move _11);
        _13 = (_6.0: &(i32, i32));
        _14 = (_6.1: &(i32, i32));
        _16 = <(i32, i32) as PartialEq>::eq(_13, _14) -> bb1;
    }

    bb1: {
        _15 = Not(move _16);
        switchInt(move _15) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _17, _13, _14, move _19);
    }

    bb3: {
        _22 = Struct::<i32, i32> { a: const 1_i32, b: const 2_i32 };
        _20 = (_22.0: i32);
        _21 = (_22.1: i32);
        _2 = _20;
        _1 = _21;
        _26 = _1;
        _27 = _2;
        _25 = (move _26, move _27);
        _24 = &_25;
        _29 = (const 2_i32, const 1_i32);
        _28 = &_29;
        _23 = (move _24, move _28);
        _30 = (_23.0: &(i32, i32));
        _31 = (_23.1: &(i32, i32));
        _33 = <(i32, i32) as PartialEq>::eq(_30, _31) -> bb4;
    }

    bb4: {
        _32 = Not(move _33);
        switchInt(move _32) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _34, _30, _31, move _36);
    }

    bb6: {
        _38 = Struct::<i32, i32> { a: const 1_i32, b: const 2_i32 };
        _37 = (_38.1: i32);
        _2 = _37;
        _42 = _1;
        _43 = _2;
        _41 = (move _42, move _43);
        _40 = &_41;
        _45 = (const 2_i32, const 2_i32);
        _44 = &_45;
        _39 = (move _40, move _44);
        _46 = (_39.0: &(i32, i32));
        _47 = (_39.1: &(i32, i32));
        _49 = <(i32, i32) as PartialEq>::eq(_46, _47) -> bb7;
    }

    bb7: {
        _48 = Not(move _49);
        switchInt(move _48) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _50 = core::panicking::AssertKind::Eq;
        _52 = Option::<Arguments<'_>>::None;
        _51 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _50, _46, _47, move _52);
    }

    bb9: {
        _54 = Struct::<i32, i32> { a: const 1_i32, b: const 3_i32 };
        _53 = (_54.0: i32);
        _1 = _53;
        _58 = _1;
        _59 = _2;
        _57 = (move _58, move _59);
        _56 = &_57;
        _61 = (const 1_i32, const 2_i32);
        _60 = &_61;
        _55 = (move _56, move _60);
        _62 = (_55.0: &(i32, i32));
        _63 = (_55.1: &(i32, i32));
        _65 = <(i32, i32) as PartialEq>::eq(_62, _63) -> bb10;
    }

    bb10: {
        _64 = Not(move _65);
        switchInt(move _64) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _66 = core::panicking::AssertKind::Eq;
        _68 = Option::<Arguments<'_>>::None;
        _67 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _66, _62, _63, move _68);
    }

    bb12: {
        _72 = _1;
        _73 = _2;
        _71 = (move _72, move _73);
        _70 = &_71;
        _75 = (const 1_i32, const 2_i32);
        _74 = &_75;
        _69 = (move _70, move _74);
        _76 = (_69.0: &(i32, i32));
        _77 = (_69.1: &(i32, i32));
        _79 = <(i32, i32) as PartialEq>::eq(_76, _77) -> bb13;
    }

    bb13: {
        _78 = Not(move _79);
        switchInt(move _78) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _80 = core::panicking::AssertKind::Eq;
        _82 = Option::<Arguments<'_>>::None;
        _81 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _80, _76, _77, move _82);
    }

    bb15: {
        return;
    }
}
