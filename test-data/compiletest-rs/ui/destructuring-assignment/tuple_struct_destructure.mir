// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/destructuring-assignment/tuple_struct_destructure.rs:5:1: 5:29>::assign(_1: TupleStruct<S, T>, _2: &mut S, _3: &mut T) -> () {
    debug self => _1;
    debug first => _2;
    debug second => _3;
    let mut _0: ();
    let _4: S;
    let _5: T;
    let mut _6: T;
    let mut _7: bool;
    scope 1 {
        debug lhs => _4;
        debug lhs => _5;
    }

    bb0: {
        _7 = const false;
        _4 = move (_1.0: S);
        _7 = const true;
        _5 = move (_1.1: T);
        drop((*_2)) -> [return: bb1, unwind: bb2];
    }

    bb1: {
        (*_2) = move _4;
        _7 = const false;
        _6 = move _5;
        drop((*_3)) -> [return: bb3, unwind: bb4];
    }

    bb2 (cleanup): {
        (*_2) = move _4;
        goto -> bb7;
    }

    bb3: {
        (*_3) = move _6;
        _7 = const false;
        return;
    }

    bb4 (cleanup): {
        (*_3) = move _6;
        goto -> bb7;
    }

    bb5 (cleanup): {
        resume;
    }

    bb6 (cleanup): {
        drop(_5) -> [return: bb5, unwind terminate];
    }

    bb7 (cleanup): {
        switchInt(_7) -> [0: bb5, otherwise: bb6];
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: i32;
    let mut _2: isize;
    let mut _5: TupleStruct<i32, isize>;
    let mut _6: (&(i32, isize), &(i32, isize));
    let mut _7: &(i32, isize);
    let _8: (i32, isize);
    let mut _9: i32;
    let mut _10: isize;
    let mut _11: &(i32, isize);
    let _12: (i32, isize);
    let mut _15: bool;
    let mut _16: bool;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _22: TupleStruct<i32, isize>;
    let mut _23: (&(i32, isize), &(i32, isize));
    let mut _24: &(i32, isize);
    let _25: (i32, isize);
    let mut _26: i32;
    let mut _27: isize;
    let mut _28: &(i32, isize);
    let _29: (i32, isize);
    let mut _32: bool;
    let mut _33: bool;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _38: TupleStruct<i32, i32>;
    let mut _39: (&(i32, isize), &(i32, isize));
    let mut _40: &(i32, isize);
    let _41: (i32, isize);
    let mut _42: i32;
    let mut _43: isize;
    let mut _44: &(i32, isize);
    let _45: (i32, isize);
    let mut _48: bool;
    let mut _49: bool;
    let _51: !;
    let mut _52: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _53: (&(i32, isize), &(i32, isize));
    let mut _54: &(i32, isize);
    let _55: (i32, isize);
    let mut _56: i32;
    let mut _57: isize;
    let mut _58: &(i32, isize);
    let _59: (i32, isize);
    let mut _62: bool;
    let mut _63: bool;
    let _65: !;
    let mut _66: std::option::Option<std::fmt::Arguments<'_>>;
    let _67: ();
    let mut _68: TupleStruct<i32, isize>;
    let mut _69: &mut i32;
    let mut _70: &mut isize;
    let mut _71: (&(i32, isize), &(i32, isize));
    let mut _72: &(i32, isize);
    let _73: (i32, isize);
    let mut _74: i32;
    let mut _75: isize;
    let mut _76: &(i32, isize);
    let _77: (i32, isize);
    let mut _80: bool;
    let mut _81: bool;
    let _83: !;
    let mut _84: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _87: Enum<i32, isize>;
    let mut _88: (&(i32, isize), &(i32, isize));
    let mut _89: &(i32, isize);
    let _90: (i32, isize);
    let mut _91: i32;
    let mut _92: isize;
    let mut _93: &(i32, isize);
    let _94: (i32, isize);
    let mut _97: bool;
    let mut _98: bool;
    let _100: !;
    let mut _101: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _104: Enum<i32, isize>;
    let mut _105: (&(i32, isize), &(i32, isize));
    let mut _106: &(i32, isize);
    let _107: (i32, isize);
    let mut _108: i32;
    let mut _109: isize;
    let mut _110: &(i32, isize);
    let _111: (i32, isize);
    let mut _114: bool;
    let mut _115: bool;
    let _117: !;
    let mut _118: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug a => _1;
        debug b => _2;
        let _3: i32;
        let _4: isize;
        let _13: &(i32, isize);
        let _14: &(i32, isize);
        let _20: i32;
        let _21: isize;
        let _30: &(i32, isize);
        let _31: &(i32, isize);
        let _37: i32;
        let _46: &(i32, isize);
        let _47: &(i32, isize);
        let _60: &(i32, isize);
        let _61: &(i32, isize);
        let _78: &(i32, isize);
        let _79: &(i32, isize);
        let _85: i32;
        let _86: isize;
        let _95: &(i32, isize);
        let _96: &(i32, isize);
        let _102: i32;
        let _103: isize;
        let _112: &(i32, isize);
        let _113: &(i32, isize);
        scope 2 {
            debug lhs => _3;
            debug lhs => _4;
        }
        scope 3 {
            debug left_val => _13;
            debug right_val => _14;
            let _17: core::panicking::AssertKind;
            scope 4 {
                debug kind => _17;
            }
        }
        scope 5 {
            debug lhs => _20;
            debug lhs => _21;
        }
        scope 6 {
            debug left_val => _30;
            debug right_val => _31;
            let _34: core::panicking::AssertKind;
            scope 7 {
                debug kind => _34;
            }
        }
        scope 8 {
            debug lhs => _37;
        }
        scope 9 {
            debug left_val => _46;
            debug right_val => _47;
            let _50: core::panicking::AssertKind;
            scope 10 {
                debug kind => _50;
            }
        }
        scope 11 {
        }
        scope 12 {
            debug left_val => _60;
            debug right_val => _61;
            let _64: core::panicking::AssertKind;
            scope 13 {
                debug kind => _64;
            }
        }
        scope 14 {
            debug left_val => _78;
            debug right_val => _79;
            let _82: core::panicking::AssertKind;
            scope 15 {
                debug kind => _82;
            }
        }
        scope 16 {
            debug lhs => _85;
            debug lhs => _86;
        }
        scope 17 {
            debug left_val => _95;
            debug right_val => _96;
            let _99: core::panicking::AssertKind;
            scope 18 {
                debug kind => _99;
            }
        }
        scope 19 {
            debug lhs => _102;
            debug lhs => _103;
        }
        scope 20 {
            debug left_val => _112;
            debug right_val => _113;
            let _116: core::panicking::AssertKind;
            scope 21 {
                debug kind => _116;
            }
        }
    }

    bb0: {
        _5 = TupleStruct::<i32, isize>(const 0_i32, const 1_isize);
        _3 = (_5.0: i32);
        _4 = (_5.1: isize);
        _1 = _3;
        _2 = _4;
        _9 = _1;
        _10 = _2;
        _8 = (move _9, move _10);
        _7 = &_8;
        _12 = (const 0_i32, const 1_isize);
        _11 = &_12;
        _6 = (move _7, move _11);
        _13 = (_6.0: &(i32, isize));
        _14 = (_6.1: &(i32, isize));
        _16 = <(i32, isize) as PartialEq>::eq(_13, _14) -> bb1;
    }

    bb1: {
        _15 = Not(move _16);
        switchInt(move _15) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<(i32, isize), (i32, isize)>(move _17, _13, _14, move _19);
    }

    bb3: {
        _22 = TupleStruct::<i32, isize>(const 1_i32, const 2_isize);
        _20 = (_22.0: i32);
        _21 = (_22.1: isize);
        _1 = _20;
        _2 = _21;
        _26 = _1;
        _27 = _2;
        _25 = (move _26, move _27);
        _24 = &_25;
        _29 = (const 1_i32, const 2_isize);
        _28 = &_29;
        _23 = (move _24, move _28);
        _30 = (_23.0: &(i32, isize));
        _31 = (_23.1: &(i32, isize));
        _33 = <(i32, isize) as PartialEq>::eq(_30, _31) -> bb4;
    }

    bb4: {
        _32 = Not(move _33);
        switchInt(move _32) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = core::panicking::assert_failed::<(i32, isize), (i32, isize)>(move _34, _30, _31, move _36);
    }

    bb6: {
        _38 = TupleStruct::<i32, i32>(const 2_i32, const 2_i32);
        _37 = (_38.1: i32);
        _1 = _37;
        _42 = _1;
        _43 = _2;
        _41 = (move _42, move _43);
        _40 = &_41;
        _45 = (const 2_i32, const 2_isize);
        _44 = &_45;
        _39 = (move _40, move _44);
        _46 = (_39.0: &(i32, isize));
        _47 = (_39.1: &(i32, isize));
        _49 = <(i32, isize) as PartialEq>::eq(_46, _47) -> bb7;
    }

    bb7: {
        _48 = Not(move _49);
        switchInt(move _48) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _50 = core::panicking::AssertKind::Eq;
        _52 = Option::<Arguments<'_>>::None;
        _51 = core::panicking::assert_failed::<(i32, isize), (i32, isize)>(move _50, _46, _47, move _52);
    }

    bb9: {
        _56 = _1;
        _57 = _2;
        _55 = (move _56, move _57);
        _54 = &_55;
        _59 = (const 2_i32, const 2_isize);
        _58 = &_59;
        _53 = (move _54, move _58);
        _60 = (_53.0: &(i32, isize));
        _61 = (_53.1: &(i32, isize));
        _63 = <(i32, isize) as PartialEq>::eq(_60, _61) -> bb10;
    }

    bb10: {
        _62 = Not(move _63);
        switchInt(move _62) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _64 = core::panicking::AssertKind::Eq;
        _66 = Option::<Arguments<'_>>::None;
        _65 = core::panicking::assert_failed::<(i32, isize), (i32, isize)>(move _64, _60, _61, move _66);
    }

    bb12: {
        _68 = TupleStruct::<i32, isize>(const 5_i32, const 6_isize);
        _69 = &mut _1;
        _70 = &mut _2;
        _67 = TupleStruct::<i32, isize>::assign(move _68, _69, _70) -> bb13;
    }

    bb13: {
        _74 = _1;
        _75 = _2;
        _73 = (move _74, move _75);
        _72 = &_73;
        _77 = (const 5_i32, const 6_isize);
        _76 = &_77;
        _71 = (move _72, move _76);
        _78 = (_71.0: &(i32, isize));
        _79 = (_71.1: &(i32, isize));
        _81 = <(i32, isize) as PartialEq>::eq(_78, _79) -> bb14;
    }

    bb14: {
        _80 = Not(move _81);
        switchInt(move _80) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _82 = core::panicking::AssertKind::Eq;
        _84 = Option::<Arguments<'_>>::None;
        _83 = core::panicking::assert_failed::<(i32, isize), (i32, isize)>(move _82, _78, _79, move _84);
    }

    bb16: {
        _87 = Enum::<i32, isize>::SingleVariant(const 7_i32, const 8_isize);
        _85 = ((_87 as SingleVariant).0: i32);
        _86 = ((_87 as SingleVariant).1: isize);
        _1 = _85;
        _2 = _86;
        _91 = _1;
        _92 = _2;
        _90 = (move _91, move _92);
        _89 = &_90;
        _94 = (const 7_i32, const 8_isize);
        _93 = &_94;
        _88 = (move _89, move _93);
        _95 = (_88.0: &(i32, isize));
        _96 = (_88.1: &(i32, isize));
        _98 = <(i32, isize) as PartialEq>::eq(_95, _96) -> bb17;
    }

    bb17: {
        _97 = Not(move _98);
        switchInt(move _97) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _99 = core::panicking::AssertKind::Eq;
        _101 = Option::<Arguments<'_>>::None;
        _100 = core::panicking::assert_failed::<(i32, isize), (i32, isize)>(move _99, _95, _96, move _101);
    }

    bb19: {
        _104 = Enum::<i32, isize>::SingleVariant(const 9_i32, const 10_isize) -> bb20;
    }

    bb20: {
        _102 = ((_104 as SingleVariant).0: i32);
        _103 = ((_104 as SingleVariant).1: isize);
        _1 = _102;
        _2 = _103;
        _108 = _1;
        _109 = _2;
        _107 = (move _108, move _109);
        _106 = &_107;
        _111 = (const 9_i32, const 10_isize);
        _110 = &_111;
        _105 = (move _106, move _110);
        _112 = (_105.0: &(i32, isize));
        _113 = (_105.1: &(i32, isize));
        _115 = <(i32, isize) as PartialEq>::eq(_112, _113) -> bb21;
    }

    bb21: {
        _114 = Not(move _115);
        switchInt(move _114) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        _116 = core::panicking::AssertKind::Eq;
        _118 = Option::<Arguments<'_>>::None;
        _117 = core::panicking::assert_failed::<(i32, isize), (i32, isize)>(move _116, _112, _113, move _118);
    }

    bb23: {
        return;
    }
}

fn TupleStruct(_1: S, _2: T) -> TupleStruct<S, T> {
    let mut _0: TupleStruct<S, T>;

    bb0: {
        _0 = TupleStruct::<S, T>(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn TupleStruct(_1: S, _2: T) -> TupleStruct<S, T> {
    let mut _0: TupleStruct<S, T>;

    bb0: {
        _0 = TupleStruct::<S, T>(move _1, move _2);
        return;
    }
}

fn Enum::SingleVariant(_1: S, _2: T) -> Enum<S, T> {
    let mut _0: Enum<S, T>;

    bb0: {
        _0 = Enum::<S, T>::SingleVariant(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn Enum::SingleVariant(_1: S, _2: T) -> Enum<S, T> {
    let mut _0: Enum<S, T>;

    bb0: {
        _0 = Enum::<S, T>::SingleVariant(move _1, move _2);
        return;
    }
}
