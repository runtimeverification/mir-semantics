// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn Enum3::D(_1: i64) -> Enum3 {
    let mut _0: Enum3;

    bb0: {
        _0 = Enum3::D(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Enum3::D(_1: i64) -> Enum3 {
    let mut _0: Enum3;

    bb0: {
        _0 = Enum3::D(move _1);
        return;
    }
}

fn Enum4::H(_1: i64) -> Enum4 {
    let mut _0: Enum4;

    bb0: {
        _0 = Enum4::H(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Enum4::H(_1: i64) -> Enum4 {
    let mut _0: Enum4;

    bb0: {
        _0 = Enum4::H(move _1);
        return;
    }
}

fn Enum4::I(_1: i64) -> Enum4 {
    let mut _0: Enum4;

    bb0: {
        _0 = Enum4::I(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Enum4::I(_1: i64) -> Enum4 {
    let mut _0: Enum4;

    bb0: {
        _0 = Enum4::I(move _1);
        return;
    }
}

fn Enum5::L(_1: i64, _2: i64, _3: i64, _4: i64) -> Enum5 {
    let mut _0: Enum5;

    bb0: {
        _0 = Enum5::L(move _1, move _2, move _3, move _4);
        return;
    }
}

// MIR FOR CTFE
fn Enum5::L(_1: i64, _2: i64, _3: i64, _4: i64) -> Enum5 {
    let mut _0: Enum5;

    bb0: {
        _0 = Enum5::L(move _1, move _2, move _3, move _4);
        return;
    }
}

fn Enum5::M(_1: i64) -> Enum5 {
    let mut _0: Enum5;

    bb0: {
        _0 = Enum5::M(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Enum5::M(_1: i64) -> Enum5 {
    let mut _0: Enum5;

    bb0: {
        _0 = Enum5::M(move _1);
        return;
    }
}

fn Enum6::O(_1: T) -> Enum6<T, U> {
    let mut _0: Enum6<T, U>;

    bb0: {
        _0 = Enum6::<T, U>::O(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Enum6::O(_1: T) -> Enum6<T, U> {
    let mut _0: Enum6<T, U>;

    bb0: {
        _0 = Enum6::<T, U>::O(move _1);
        return;
    }
}

fn Enum6::P(_1: U) -> Enum6<T, U> {
    let mut _0: Enum6<T, U>;

    bb0: {
        _0 = Enum6::<T, U>::P(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Enum6::P(_1: U) -> Enum6<T, U> {
    let mut _0: Enum6<T, U>;

    bb0: {
        _0 = Enum6::<T, U>::P(move _1);
        return;
    }
}

fn Enum6::Q(_1: i64) -> Enum6<T, U> {
    let mut _0: Enum6<T, U>;

    bb0: {
        _0 = Enum6::<T, U>::Q(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Enum6::Q(_1: i64) -> Enum6<T, U> {
    let mut _0: Enum6<T, U>;

    bb0: {
        _0 = Enum6::<T, U>::Q(move _1);
        return;
    }
}

fn Enum7::R(_1: i64, _2: i64, _3: i64, _4: i64) -> Enum7 {
    let mut _0: Enum7;

    bb0: {
        _0 = Enum7::R(move _1, move _2, move _3, move _4);
        return;
    }
}

// MIR FOR CTFE
fn Enum7::R(_1: i64, _2: i64, _3: i64, _4: i64) -> Enum7 {
    let mut _0: Enum7;

    bb0: {
        _0 = Enum7::R(move _1, move _2, move _3, move _4);
        return;
    }
}

fn Enum7::S(_1: i64) -> Enum7 {
    let mut _0: Enum7;

    bb0: {
        _0 = Enum7::S(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Enum7::S(_1: i64) -> Enum7 {
    let mut _0: Enum7;

    bb0: {
        _0 = Enum7::S(move _1);
        return;
    }
}
