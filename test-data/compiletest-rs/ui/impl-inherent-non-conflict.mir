// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/impl-inherent-non-conflict.rs:9:1: 9:16>::bar(_1: &Foo<usize>) -> i32 {
    debug self => _1;
    let mut _0: i32;
    let mut _2: usize;

    bb0: {
        _2 = ((*_1).0: usize);
        _0 = move _2 as i32 (IntToInt);
        return;
    }
}

fn <impl at ui/impl-inherent-non-conflict.rs:13:1: 13:16>::bar(_1: &Foo<isize>) -> i32 {
    debug self => _1;
    let mut _0: i32;
    let mut _2: i32;
    let mut _3: isize;

    bb0: {
        _3 = ((*_1).0: isize);
        _2 = move _3 as i32 (IntToInt);
        _0 = Neg(move _2);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Foo<usize>;
    let mut _2: (&i32, &i32);
    let mut _3: &i32;
    let _4: i32;
    let mut _5: &Foo<usize>;
    let mut _6: &i32;
    let _7: i32;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: i32;
    let mut _13: i32;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: (&i32, &i32);
    let mut _19: &i32;
    let _20: i32;
    let mut _21: &Foo<isize>;
    let mut _22: &i32;
    let _23: i32;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: i32;
    let mut _29: i32;
    let _31: !;
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug foo_u => _1;
        let _8: &i32;
        let _9: &i32;
        let _17: Foo<isize>;
        scope 2 {
            debug left_val => _8;
            debug right_val => _9;
            let _14: core::panicking::AssertKind;
            scope 3 {
                debug kind => _14;
            }
        }
        scope 4 {
            debug foo_i => _17;
            let _24: &i32;
            let _25: &i32;
            scope 5 {
                debug left_val => _24;
                debug right_val => _25;
                let _30: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _30;
                }
            }
        }
    }

    bb0: {
        _1 = Foo::<usize>(const 5_usize);
        _5 = &_1;
        _4 = Foo::<usize>::bar(move _5) -> bb1;
    }

    bb1: {
        _3 = &_4;
        _7 = const 5_i32;
        _6 = &_7;
        _2 = (move _3, move _6);
        _8 = (_2.0: &i32);
        _9 = (_2.1: &i32);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<i32, i32>(move _14, _8, _9, move _16);
    }

    bb3: {
        _17 = Foo::<isize>(const 3_isize);
        _21 = &_17;
        _20 = Foo::<isize>::bar(move _21) -> bb4;
    }

    bb4: {
        _19 = &_20;
        _23 = const -3_i32;
        _22 = &_23;
        _18 = (move _19, move _22);
        _24 = (_18.0: &i32);
        _25 = (_18.1: &i32);
        _28 = (*_24);
        _29 = (*_25);
        _27 = Eq(move _28, move _29);
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _30 = core::panicking::AssertKind::Eq;
        _32 = Option::<Arguments<'_>>::None;
        _31 = core::panicking::assert_failed::<i32, i32>(move _30, _24, _25, move _32);
    }

    bb6: {
        return;
    }
}

fn Foo(_1: T) -> Foo<T> {
    let mut _0: Foo<T>;

    bb0: {
        _0 = Foo::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: T) -> Foo<T> {
    let mut _0: Foo<T>;

    bb0: {
        _0 = Foo::<T>(move _1);
        return;
    }
}
