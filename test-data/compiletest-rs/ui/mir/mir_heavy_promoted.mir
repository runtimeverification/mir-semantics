// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const TEST_DATA: [u8; 33554432] = {
    let mut _0: [u8; 33554432];

    bb0: {
        _0 = [const 42_u8; 33554432];
        return;
    }
}

TEST_DATA::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: usize;
    let mut _2: (usize, bool);
    let mut _3: (usize, bool);

    bb0: {
        StorageLive(_1);
        _2 = CheckedMul(const 32_usize, const 1024_usize);
        assert(!move (_2.1: bool), "attempt to compute `{} * {}`, which would overflow", const 32_usize, const 1024_usize) -> bb1;
    }

    bb1: {
        _1 = move (_2.0: usize);
        _3 = CheckedMul(_1, const 1024_usize);
        assert(!move (_3.1: bool), "attempt to compute `{} * {}`, which would overflow", move _1, const 1024_usize) -> bb2;
    }

    bb2: {
        _0 = move (_3.0: usize);
        StorageDead(_1);
        return;
    }
}

TEST_DATA::{constant#1}: usize = {
    let mut _0: usize;
    let mut _1: usize;
    let mut _2: (usize, bool);
    let mut _3: (usize, bool);

    bb0: {
        StorageLive(_1);
        _2 = CheckedMul(const 32_usize, const 1024_usize);
        assert(!move (_2.1: bool), "attempt to compute `{} * {}`, which would overflow", const 32_usize, const 1024_usize) -> bb1;
    }

    bb1: {
        _1 = move (_2.0: usize);
        _3 = CheckedMul(_1, const 1024_usize);
        assert(!move (_3.1: bool), "attempt to compute `{} * {}`, which would overflow", move _1, const 1024_usize) -> bb2;
    }

    bb2: {
        _0 = move (_3.0: usize);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let _4: &[&str; 2];
    let _5: [&str; 2];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &usize;
    let _11: usize;
    let mut _12: &[u8];
    let mut _13: &[u8; 33554432];
    let _14: [u8; 33554432];

    bb0: {
        _5 = [const "", const "\n"];
        _4 = &_5;
        _3 = _4 as &[&str] (Pointer(Unsize));
        _14 = const _;
        _13 = &_14;
        _12 = move _13 as &[u8] (Pointer(Unsize));
        _11 = Len((*_12));
        _10 = &_11;
        _9 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_10) -> bb1;
    }

    bb1: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_v1(move _3, move _6) -> bb2;
    }

    bb2: {
        _1 = _print(move _2) -> bb3;
    }

    bb3: {
        return;
    }
}
