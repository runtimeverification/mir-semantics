// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f(_1: &E<'_>) -> u32 {
    debug e => _1;
    let mut _0: u32;
    let mut _2: isize;
    let mut _3: isize;
    let mut _4: &E<'_>;
    scope 1 {
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [1: bb1, otherwise: bb3];
    }

    bb1: {
        _4 = deref_copy (((*_1) as Some).0: &E<'_>);
        _2 = discriminant((*_4));
        switchInt(move _2) -> [1: bb2, otherwise: bb3];
    }

    bb2: {
        _0 = const 1_u32;
        goto -> bb4;
    }

    bb3: {
        _0 = const 2_u32;
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&u32, &u32);
    let mut _2: &u32;
    let _3: u32;
    let _4: &E<'_>;
    let _5: E<'_>;
    let mut _6: &u32;
    let _7: u32;
    let _8: &u32;
    let _9: &u32;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: u32;
    let mut _13: u32;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _8;
        debug right_val => _9;
        let _14: core::panicking::AssertKind;
        scope 2 {
            debug kind => _14;
        }
    }

    bb0: {
        _5 = E::<'_>::Empty;
        _4 = &_5;
        _3 = f(_4) -> bb1;
    }

    bb1: {
        _2 = &_3;
        _7 = const 2_u32;
        _6 = &_7;
        _1 = (move _2, move _6);
        _8 = (_1.0: &u32);
        _9 = (_1.1: &u32);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<u32, u32>(move _14, _8, _9, move _16);
    }

    bb3: {
        return;
    }
}

fn E::Some(_1: &E<'_>) -> E<'_> {
    let mut _0: E<'_>;

    bb0: {
        _0 = E::<'_>::Some(move _1);
        return;
    }
}

// MIR FOR CTFE
fn E::Some(_1: &E<'_>) -> E<'_> {
    let mut _0: E<'_>;

    bb0: {
        _0 = E::<'_>::Some(move _1);
        return;
    }
}
