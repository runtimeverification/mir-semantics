// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static UTF8_CHAR_WIDTH: [u8; 0] = {
    let mut _0: [u8; 0];

    bb0: {
        _0 = [];
        return;
    }
}

UTF8_CHAR_WIDTH::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

fn utf8_char_width(_1: u8) -> usize {
    debug b => _1;
    let mut _0: usize;
    let mut _2: u8;
    let mut _3: &[u8; 0];
    let _4: usize;
    let mut _5: usize;
    let mut _6: bool;

    bb0: {
        _3 = const <static(DefId(0:3 ~ issue_66930[3174]::UTF8_CHAR_WIDTH))>;
        _4 = _1 as usize (IntToInt);
        _5 = const 0_usize;
        _6 = Lt(_4, _5);
        assert(move _6, "index out of bounds: the length is {} but the index is {}", move _5, _4) -> bb1;
    }

    bb1: {
        _2 = (*_3)[_4];
        _0 = move _2 as usize (IntToInt);
        return;
    }
}

alloc1 (static: UTF8_CHAR_WIDTH, size: 0, align: 1) {}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
