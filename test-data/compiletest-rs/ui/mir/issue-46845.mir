// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/mir/issue-46845.rs:8:16: 8:21>::clone(_1: &Never) -> Never {
    debug self => _1;
    let mut _0: Never;

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let mut _2: &usize;
    let _3: usize;
    let mut _4: &usize;
    let _5: usize;
    let _6: &usize;
    let _7: &usize;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: usize;
    let mut _11: usize;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&usize, &usize);
    let mut _16: &usize;
    let _17: usize;
    let mut _18: &usize;
    let _19: usize;
    let _20: &usize;
    let _21: &usize;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: usize;
    let mut _25: usize;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let _29: [Foo; 2];
    let mut _30: Foo;
    let mut _31: Foo;
    let _32: ();
    let mut _33: std::fmt::Arguments<'_>;
    let mut _34: &[&str];
    let _35: &[&str; 2];
    let _36: [&str; 2];
    let mut _37: &[core::fmt::rt::Argument<'_>];
    let _38: &[core::fmt::rt::Argument<'_>; 1];
    let _39: [core::fmt::rt::Argument<'_>; 1];
    let mut _40: core::fmt::rt::Argument<'_>;
    let _41: &u64;
    let _42: u64;
    let _43: usize;
    let mut _44: usize;
    let mut _45: bool;
    let mut _46: (&u64, &u64);
    let mut _47: &u64;
    let _48: u64;
    let _49: usize;
    let mut _50: usize;
    let mut _51: bool;
    let mut _52: &u64;
    let _53: u64;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: u64;
    let mut _59: u64;
    let _61: !;
    let mut _62: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }
    scope 3 {
        debug left_val => _20;
        debug right_val => _21;
        let _26: core::panicking::AssertKind;
        scope 4 {
            debug kind => _26;
        }
    }
    scope 5 {
        debug f => _29;
        let _54: &u64;
        let _55: &u64;
        scope 6 {
        }
        scope 7 {
        }
        scope 8 {
            debug left_val => _54;
            debug right_val => _55;
            let _60: core::panicking::AssertKind;
            scope 9 {
                debug kind => _60;
            }
        }
    }

    bb0: {
        _3 = std::mem::size_of::<Foo>() -> bb1;
    }

    bb1: {
        _2 = &_3;
        _5 = const 8_usize;
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &usize);
        _7 = (_1.1: &usize);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<usize, usize>(move _12, _6, _7, move _14);
    }

    bb3: {
        _17 = std::mem::size_of::<Bar>() -> bb4;
    }

    bb4: {
        _16 = &_17;
        _19 = const 8_usize;
        _18 = &_19;
        _15 = (move _16, move _18);
        _20 = (_15.0: &usize);
        _21 = (_15.1: &usize);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<usize, usize>(move _26, _20, _21, move _28);
    }

    bb6: {
        _30 = Foo { a: const 42_u64 };
        _31 = Foo { a: const 10_u64 };
        _29 = [move _30, move _31];
        _36 = [const "", const "\n"];
        _35 = &_36;
        _34 = _35 as &[&str] (Pointer(Unsize));
        _43 = const 0_usize;
        _44 = const 2_usize;
        _45 = Lt(_43, _44);
        assert(move _45, "index out of bounds: the length is {} but the index is {}", move _44, _43) -> bb7;
    }

    bb7: {
        _42 = (_29[_43].0: u64);
        _41 = &_42;
        _40 = core::fmt::rt::Argument::<'_>::new_display::<u64>(_41) -> bb8;
    }

    bb8: {
        _39 = [move _40];
        _38 = &_39;
        _37 = _38 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _33 = Arguments::<'_>::new_v1(move _34, move _37) -> bb9;
    }

    bb9: {
        _32 = _print(move _33) -> bb10;
    }

    bb10: {
        _49 = const 1_usize;
        _50 = const 2_usize;
        _51 = Lt(_49, _50);
        assert(move _51, "index out of bounds: the length is {} but the index is {}", move _50, _49) -> bb11;
    }

    bb11: {
        _48 = (_29[_49].0: u64);
        _47 = &_48;
        _53 = const 10_u64;
        _52 = &_53;
        _46 = (move _47, move _52);
        _54 = (_46.0: &u64);
        _55 = (_46.1: &u64);
        _58 = (*_54);
        _59 = (*_55);
        _57 = Eq(move _58, move _59);
        _56 = Not(move _57);
        switchInt(move _56) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _60 = core::panicking::AssertKind::Eq;
        _62 = Option::<Arguments<'_>>::None;
        _61 = core::panicking::assert_failed::<u64, u64>(move _60, _54, _55, move _62);
    }

    bb13: {
        return;
    }
}
