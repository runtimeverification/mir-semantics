// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: [closure@ui/mir/mir_match_test.rs:6:22: 6:28];
    let mut _2: (&i32, &i32);
    let mut _3: &i32;
    let _4: i32;
    let mut _5: &[closure@ui/mir/mir_match_test.rs:6:22: 6:28];
    let mut _6: (i32, bool);
    let mut _7: &i32;
    let _8: i32;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: i32;
    let mut _14: i32;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: (&i32, &i32);
    let mut _19: &i32;
    let _20: i32;
    let mut _21: &[closure@ui/mir/mir_match_test.rs:6:22: 6:28];
    let mut _22: (i32, bool);
    let mut _23: &i32;
    let _24: i32;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: i32;
    let mut _30: i32;
    let _32: !;
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _34: (&i32, &i32);
    let mut _35: &i32;
    let _36: i32;
    let mut _37: &[closure@ui/mir/mir_match_test.rs:6:22: 6:28];
    let mut _38: (i32, bool);
    let mut _39: &i32;
    let _40: i32;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: i32;
    let mut _46: i32;
    let _48: !;
    let mut _49: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _50: (&i32, &i32);
    let mut _51: &i32;
    let _52: i32;
    let mut _53: &[closure@ui/mir/mir_match_test.rs:6:22: 6:28];
    let mut _54: (i32, bool);
    let mut _55: &i32;
    let _56: i32;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: i32;
    let mut _62: i32;
    let _64: !;
    let mut _65: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _67: (&i32, &i32);
    let mut _68: &i32;
    let _69: i32;
    let mut _70: &[closure@ui/mir/mir_match_test.rs:19:22: 19:28];
    let mut _71: (i32, bool);
    let mut _72: &i32;
    let _73: i32;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: i32;
    let mut _79: i32;
    let _81: !;
    let mut _82: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _83: (&i32, &i32);
    let mut _84: &i32;
    let _85: i32;
    let mut _86: &[closure@ui/mir/mir_match_test.rs:19:22: 19:28];
    let mut _87: (i32, bool);
    let mut _88: &i32;
    let _89: i32;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: i32;
    let mut _95: i32;
    let _97: !;
    let mut _98: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _99: (&i32, &i32);
    let mut _100: &i32;
    let _101: i32;
    let mut _102: &[closure@ui/mir/mir_match_test.rs:19:22: 19:28];
    let mut _103: (i32, bool);
    let mut _104: &i32;
    let _105: i32;
    let mut _108: bool;
    let mut _109: bool;
    let mut _110: i32;
    let mut _111: i32;
    let _113: !;
    let mut _114: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _115: (&i32, &i32);
    let mut _116: &i32;
    let _117: i32;
    let mut _118: &[closure@ui/mir/mir_match_test.rs:19:22: 19:28];
    let mut _119: (i32, bool);
    let mut _120: &i32;
    let _121: i32;
    let mut _124: bool;
    let mut _125: bool;
    let mut _126: i32;
    let mut _127: i32;
    let _129: !;
    let mut _130: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _132: (&i32, &i32);
    let mut _133: &i32;
    let _134: i32;
    let mut _135: &[closure@ui/mir/mir_match_test.rs:32:31: 32:37];
    let mut _136: (i32, bool);
    let mut _137: &i32;
    let _138: i32;
    let mut _141: bool;
    let mut _142: bool;
    let mut _143: i32;
    let mut _144: i32;
    let _146: !;
    let mut _147: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _148: (&i32, &i32);
    let mut _149: &i32;
    let _150: i32;
    let mut _151: &[closure@ui/mir/mir_match_test.rs:32:31: 32:37];
    let mut _152: (i32, bool);
    let mut _153: &i32;
    let _154: i32;
    let mut _157: bool;
    let mut _158: bool;
    let mut _159: i32;
    let mut _160: i32;
    let _162: !;
    let mut _163: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _164: (&i32, &i32);
    let mut _165: &i32;
    let _166: i32;
    let mut _167: &[closure@ui/mir/mir_match_test.rs:32:31: 32:37];
    let mut _168: (i32, bool);
    let mut _169: &i32;
    let _170: i32;
    let mut _173: bool;
    let mut _174: bool;
    let mut _175: i32;
    let mut _176: i32;
    let _178: !;
    let mut _179: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _180: (&i32, &i32);
    let mut _181: &i32;
    let _182: i32;
    let mut _183: &[closure@ui/mir/mir_match_test.rs:32:31: 32:37];
    let mut _184: (i32, bool);
    let mut _185: &i32;
    let _186: i32;
    let mut _189: bool;
    let mut _190: bool;
    let mut _191: i32;
    let mut _192: i32;
    let _194: !;
    let mut _195: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _196: (&i32, &i32);
    let mut _197: &i32;
    let _198: i32;
    let mut _199: &[closure@ui/mir/mir_match_test.rs:32:31: 32:37];
    let mut _200: (i32, bool);
    let mut _201: &i32;
    let _202: i32;
    let mut _205: bool;
    let mut _206: bool;
    let mut _207: i32;
    let mut _208: i32;
    let _210: !;
    let mut _211: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _212: (&i32, &i32);
    let mut _213: &i32;
    let _214: i32;
    let mut _215: &[closure@ui/mir/mir_match_test.rs:32:31: 32:37];
    let mut _216: (i32, bool);
    let mut _217: &i32;
    let _218: i32;
    let mut _221: bool;
    let mut _222: bool;
    let mut _223: i32;
    let mut _224: i32;
    let _226: !;
    let mut _227: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _229: (&i32, &i32);
    let mut _230: &i32;
    let _231: i32;
    let mut _232: &[closure@ui/mir/mir_match_test.rs:47:31: 47:37];
    let mut _233: (i32, bool);
    let mut _234: &i32;
    let _235: i32;
    let mut _238: bool;
    let mut _239: bool;
    let mut _240: i32;
    let mut _241: i32;
    let _243: !;
    let mut _244: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _245: (&i32, &i32);
    let mut _246: &i32;
    let _247: i32;
    let mut _248: &[closure@ui/mir/mir_match_test.rs:47:31: 47:37];
    let mut _249: (i32, bool);
    let mut _250: &i32;
    let _251: i32;
    let mut _254: bool;
    let mut _255: bool;
    let mut _256: i32;
    let mut _257: i32;
    let _259: !;
    let mut _260: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _261: (&i32, &i32);
    let mut _262: &i32;
    let _263: i32;
    let mut _264: &[closure@ui/mir/mir_match_test.rs:47:31: 47:37];
    let mut _265: (i32, bool);
    let mut _266: &i32;
    let _267: i32;
    let mut _270: bool;
    let mut _271: bool;
    let mut _272: i32;
    let mut _273: i32;
    let _275: !;
    let mut _276: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _277: (&i32, &i32);
    let mut _278: &i32;
    let _279: i32;
    let mut _280: &[closure@ui/mir/mir_match_test.rs:47:31: 47:37];
    let mut _281: (i32, bool);
    let mut _282: &i32;
    let _283: i32;
    let mut _286: bool;
    let mut _287: bool;
    let mut _288: i32;
    let mut _289: i32;
    let _291: !;
    let mut _292: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _293: (&i32, &i32);
    let mut _294: &i32;
    let _295: i32;
    let mut _296: &[closure@ui/mir/mir_match_test.rs:47:31: 47:37];
    let mut _297: (i32, bool);
    let mut _298: &i32;
    let _299: i32;
    let mut _302: bool;
    let mut _303: bool;
    let mut _304: i32;
    let mut _305: i32;
    let _307: !;
    let mut _308: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _309: (&i32, &i32);
    let mut _310: &i32;
    let _311: i32;
    let mut _312: &[closure@ui/mir/mir_match_test.rs:47:31: 47:37];
    let mut _313: (i32, bool);
    let mut _314: &i32;
    let _315: i32;
    let mut _318: bool;
    let mut _319: bool;
    let mut _320: i32;
    let mut _321: i32;
    let _323: !;
    let mut _324: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _326: (&i32, &i32);
    let mut _327: &i32;
    let _328: i32;
    let mut _329: &[closure@ui/mir/mir_match_test.rs:62:31: 62:37];
    let mut _330: (i32, bool);
    let mut _331: &i32;
    let _332: i32;
    let mut _335: bool;
    let mut _336: bool;
    let mut _337: i32;
    let mut _338: i32;
    let _340: !;
    let mut _341: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _342: (&i32, &i32);
    let mut _343: &i32;
    let _344: i32;
    let mut _345: &[closure@ui/mir/mir_match_test.rs:62:31: 62:37];
    let mut _346: (i32, bool);
    let mut _347: &i32;
    let _348: i32;
    let mut _351: bool;
    let mut _352: bool;
    let mut _353: i32;
    let mut _354: i32;
    let _356: !;
    let mut _357: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _359: (&i32, &i32);
    let mut _360: &i32;
    let _361: i32;
    let mut _362: &[closure@ui/mir/mir_match_test.rs:73:31: 73:37];
    let mut _363: (i32, bool);
    let mut _364: &i32;
    let _365: i32;
    let mut _368: bool;
    let mut _369: bool;
    let mut _370: i32;
    let mut _371: i32;
    let _373: !;
    let mut _374: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _375: (&i32, &i32);
    let mut _376: &i32;
    let _377: i32;
    let mut _378: &[closure@ui/mir/mir_match_test.rs:73:31: 73:37];
    let mut _379: (i32, bool);
    let mut _380: &i32;
    let _381: i32;
    let mut _384: bool;
    let mut _385: bool;
    let mut _386: i32;
    let mut _387: i32;
    let _389: !;
    let mut _390: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug incl_range => const ZeroSized: [closure@ui/mir/mir_match_test.rs:6:22: 6:28];
        let _9: &i32;
        let _10: &i32;
        let _25: &i32;
        let _26: &i32;
        let _41: &i32;
        let _42: &i32;
        let _57: &i32;
        let _58: &i32;
        let _66: [closure@ui/mir/mir_match_test.rs:19:22: 19:28];
        scope 2 {
            debug left_val => _9;
            debug right_val => _10;
            let _15: core::panicking::AssertKind;
            scope 3 {
                debug kind => _15;
            }
        }
        scope 4 {
            debug left_val => _25;
            debug right_val => _26;
            let _31: core::panicking::AssertKind;
            scope 5 {
                debug kind => _31;
            }
        }
        scope 6 {
            debug left_val => _41;
            debug right_val => _42;
            let _47: core::panicking::AssertKind;
            scope 7 {
                debug kind => _47;
            }
        }
        scope 8 {
            debug left_val => _57;
            debug right_val => _58;
            let _63: core::panicking::AssertKind;
            scope 9 {
                debug kind => _63;
            }
        }
        scope 10 {
            debug excl_range => const ZeroSized: [closure@ui/mir/mir_match_test.rs:19:22: 19:28];
            let _74: &i32;
            let _75: &i32;
            let _90: &i32;
            let _91: &i32;
            let _106: &i32;
            let _107: &i32;
            let _122: &i32;
            let _123: &i32;
            let _131: [closure@ui/mir/mir_match_test.rs:32:31: 32:37];
            scope 11 {
                debug left_val => _74;
                debug right_val => _75;
                let _80: core::panicking::AssertKind;
                scope 12 {
                    debug kind => _80;
                }
            }
            scope 13 {
                debug left_val => _90;
                debug right_val => _91;
                let _96: core::panicking::AssertKind;
                scope 14 {
                    debug kind => _96;
                }
            }
            scope 15 {
                debug left_val => _106;
                debug right_val => _107;
                let _112: core::panicking::AssertKind;
                scope 16 {
                    debug kind => _112;
                }
            }
            scope 17 {
                debug left_val => _122;
                debug right_val => _123;
                let _128: core::panicking::AssertKind;
                scope 18 {
                    debug kind => _128;
                }
            }
            scope 19 {
                debug incl_range_vs_const => const ZeroSized: [closure@ui/mir/mir_match_test.rs:32:31: 32:37];
                let _139: &i32;
                let _140: &i32;
                let _155: &i32;
                let _156: &i32;
                let _171: &i32;
                let _172: &i32;
                let _187: &i32;
                let _188: &i32;
                let _203: &i32;
                let _204: &i32;
                let _219: &i32;
                let _220: &i32;
                let _228: [closure@ui/mir/mir_match_test.rs:47:31: 47:37];
                scope 20 {
                    debug left_val => _139;
                    debug right_val => _140;
                    let _145: core::panicking::AssertKind;
                    scope 21 {
                        debug kind => _145;
                    }
                }
                scope 22 {
                    debug left_val => _155;
                    debug right_val => _156;
                    let _161: core::panicking::AssertKind;
                    scope 23 {
                        debug kind => _161;
                    }
                }
                scope 24 {
                    debug left_val => _171;
                    debug right_val => _172;
                    let _177: core::panicking::AssertKind;
                    scope 25 {
                        debug kind => _177;
                    }
                }
                scope 26 {
                    debug left_val => _187;
                    debug right_val => _188;
                    let _193: core::panicking::AssertKind;
                    scope 27 {
                        debug kind => _193;
                    }
                }
                scope 28 {
                    debug left_val => _203;
                    debug right_val => _204;
                    let _209: core::panicking::AssertKind;
                    scope 29 {
                        debug kind => _209;
                    }
                }
                scope 30 {
                    debug left_val => _219;
                    debug right_val => _220;
                    let _225: core::panicking::AssertKind;
                    scope 31 {
                        debug kind => _225;
                    }
                }
                scope 32 {
                    debug excl_range_vs_const => const ZeroSized: [closure@ui/mir/mir_match_test.rs:47:31: 47:37];
                    let _236: &i32;
                    let _237: &i32;
                    let _252: &i32;
                    let _253: &i32;
                    let _268: &i32;
                    let _269: &i32;
                    let _284: &i32;
                    let _285: &i32;
                    let _300: &i32;
                    let _301: &i32;
                    let _316: &i32;
                    let _317: &i32;
                    let _325: [closure@ui/mir/mir_match_test.rs:62:31: 62:37];
                    scope 33 {
                        debug left_val => _236;
                        debug right_val => _237;
                        let _242: core::panicking::AssertKind;
                        scope 34 {
                            debug kind => _242;
                        }
                    }
                    scope 35 {
                        debug left_val => _252;
                        debug right_val => _253;
                        let _258: core::panicking::AssertKind;
                        scope 36 {
                            debug kind => _258;
                        }
                    }
                    scope 37 {
                        debug left_val => _268;
                        debug right_val => _269;
                        let _274: core::panicking::AssertKind;
                        scope 38 {
                            debug kind => _274;
                        }
                    }
                    scope 39 {
                        debug left_val => _284;
                        debug right_val => _285;
                        let _290: core::panicking::AssertKind;
                        scope 40 {
                            debug kind => _290;
                        }
                    }
                    scope 41 {
                        debug left_val => _300;
                        debug right_val => _301;
                        let _306: core::panicking::AssertKind;
                        scope 42 {
                            debug kind => _306;
                        }
                    }
                    scope 43 {
                        debug left_val => _316;
                        debug right_val => _317;
                        let _322: core::panicking::AssertKind;
                        scope 44 {
                            debug kind => _322;
                        }
                    }
                    scope 45 {
                        debug const_vs_incl_range => const ZeroSized: [closure@ui/mir/mir_match_test.rs:62:31: 62:37];
                        let _333: &i32;
                        let _334: &i32;
                        let _349: &i32;
                        let _350: &i32;
                        let _358: [closure@ui/mir/mir_match_test.rs:73:31: 73:37];
                        scope 46 {
                            debug left_val => _333;
                            debug right_val => _334;
                            let _339: core::panicking::AssertKind;
                            scope 47 {
                                debug kind => _339;
                            }
                        }
                        scope 48 {
                            debug left_val => _349;
                            debug right_val => _350;
                            let _355: core::panicking::AssertKind;
                            scope 49 {
                                debug kind => _355;
                            }
                        }
                        scope 50 {
                            debug const_vs_excl_range => const ZeroSized: [closure@ui/mir/mir_match_test.rs:73:31: 73:37];
                            let _366: &i32;
                            let _367: &i32;
                            let _382: &i32;
                            let _383: &i32;
                            scope 51 {
                                debug left_val => _366;
                                debug right_val => _367;
                                let _372: core::panicking::AssertKind;
                                scope 52 {
                                    debug kind => _372;
                                }
                            }
                            scope 53 {
                                debug left_val => _382;
                                debug right_val => _383;
                                let _388: core::panicking::AssertKind;
                                scope 54 {
                                    debug kind => _388;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _5 = &_1;
        _6 = (const 3_i32, const false);
        _4 = <[closure@ui/mir/mir_match_test.rs:6:22: 6:28] as Fn<(i32, bool)>>::call(move _5, move _6) -> bb1;
    }

    bb1: {
        _3 = &_4;
        _8 = const 2_i32;
        _7 = &_8;
        _2 = (move _3, move _7);
        _9 = (_2.0: &i32);
        _10 = (_2.1: &i32);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<i32, i32>(move _15, _9, _10, move _17);
    }

    bb3: {
        _21 = &_1;
        _22 = (const 3_i32, const true);
        _20 = <[closure@ui/mir/mir_match_test.rs:6:22: 6:28] as Fn<(i32, bool)>>::call(move _21, move _22) -> bb4;
    }

    bb4: {
        _19 = &_20;
        _24 = const 0_i32;
        _23 = &_24;
        _18 = (move _19, move _23);
        _25 = (_18.0: &i32);
        _26 = (_18.1: &i32);
        _29 = (*_25);
        _30 = (*_26);
        _28 = Eq(move _29, move _30);
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _31 = core::panicking::AssertKind::Eq;
        _33 = Option::<Arguments<'_>>::None;
        _32 = core::panicking::assert_failed::<i32, i32>(move _31, _25, _26, move _33);
    }

    bb6: {
        _37 = &_1;
        _38 = (const 5_i32, const false);
        _36 = <[closure@ui/mir/mir_match_test.rs:6:22: 6:28] as Fn<(i32, bool)>>::call(move _37, move _38) -> bb7;
    }

    bb7: {
        _35 = &_36;
        _40 = const 3_i32;
        _39 = &_40;
        _34 = (move _35, move _39);
        _41 = (_34.0: &i32);
        _42 = (_34.1: &i32);
        _45 = (*_41);
        _46 = (*_42);
        _44 = Eq(move _45, move _46);
        _43 = Not(move _44);
        switchInt(move _43) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _47 = core::panicking::AssertKind::Eq;
        _49 = Option::<Arguments<'_>>::None;
        _48 = core::panicking::assert_failed::<i32, i32>(move _47, _41, _42, move _49);
    }

    bb9: {
        _53 = &_1;
        _54 = (const 5_i32, const true);
        _52 = <[closure@ui/mir/mir_match_test.rs:6:22: 6:28] as Fn<(i32, bool)>>::call(move _53, move _54) -> bb10;
    }

    bb10: {
        _51 = &_52;
        _56 = const 0_i32;
        _55 = &_56;
        _50 = (move _51, move _55);
        _57 = (_50.0: &i32);
        _58 = (_50.1: &i32);
        _61 = (*_57);
        _62 = (*_58);
        _60 = Eq(move _61, move _62);
        _59 = Not(move _60);
        switchInt(move _59) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _63 = core::panicking::AssertKind::Eq;
        _65 = Option::<Arguments<'_>>::None;
        _64 = core::panicking::assert_failed::<i32, i32>(move _63, _57, _58, move _65);
    }

    bb12: {
        _70 = &_66;
        _71 = (const 3_i32, const false);
        _69 = <[closure@ui/mir/mir_match_test.rs:19:22: 19:28] as Fn<(i32, bool)>>::call(move _70, move _71) -> bb13;
    }

    bb13: {
        _68 = &_69;
        _73 = const 2_i32;
        _72 = &_73;
        _67 = (move _68, move _72);
        _74 = (_67.0: &i32);
        _75 = (_67.1: &i32);
        _78 = (*_74);
        _79 = (*_75);
        _77 = Eq(move _78, move _79);
        _76 = Not(move _77);
        switchInt(move _76) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _80 = core::panicking::AssertKind::Eq;
        _82 = Option::<Arguments<'_>>::None;
        _81 = core::panicking::assert_failed::<i32, i32>(move _80, _74, _75, move _82);
    }

    bb15: {
        _86 = &_66;
        _87 = (const 3_i32, const true);
        _85 = <[closure@ui/mir/mir_match_test.rs:19:22: 19:28] as Fn<(i32, bool)>>::call(move _86, move _87) -> bb16;
    }

    bb16: {
        _84 = &_85;
        _89 = const 0_i32;
        _88 = &_89;
        _83 = (move _84, move _88);
        _90 = (_83.0: &i32);
        _91 = (_83.1: &i32);
        _94 = (*_90);
        _95 = (*_91);
        _93 = Eq(move _94, move _95);
        _92 = Not(move _93);
        switchInt(move _92) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _96 = core::panicking::AssertKind::Eq;
        _98 = Option::<Arguments<'_>>::None;
        _97 = core::panicking::assert_failed::<i32, i32>(move _96, _90, _91, move _98);
    }

    bb18: {
        _102 = &_66;
        _103 = (const 5_i32, const false);
        _101 = <[closure@ui/mir/mir_match_test.rs:19:22: 19:28] as Fn<(i32, bool)>>::call(move _102, move _103) -> bb19;
    }

    bb19: {
        _100 = &_101;
        _105 = const 3_i32;
        _104 = &_105;
        _99 = (move _100, move _104);
        _106 = (_99.0: &i32);
        _107 = (_99.1: &i32);
        _110 = (*_106);
        _111 = (*_107);
        _109 = Eq(move _110, move _111);
        _108 = Not(move _109);
        switchInt(move _108) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _112 = core::panicking::AssertKind::Eq;
        _114 = Option::<Arguments<'_>>::None;
        _113 = core::panicking::assert_failed::<i32, i32>(move _112, _106, _107, move _114);
    }

    bb21: {
        _118 = &_66;
        _119 = (const 5_i32, const true);
        _117 = <[closure@ui/mir/mir_match_test.rs:19:22: 19:28] as Fn<(i32, bool)>>::call(move _118, move _119) -> bb22;
    }

    bb22: {
        _116 = &_117;
        _121 = const 1_i32;
        _120 = &_121;
        _115 = (move _116, move _120);
        _122 = (_115.0: &i32);
        _123 = (_115.1: &i32);
        _126 = (*_122);
        _127 = (*_123);
        _125 = Eq(move _126, move _127);
        _124 = Not(move _125);
        switchInt(move _124) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _128 = core::panicking::AssertKind::Eq;
        _130 = Option::<Arguments<'_>>::None;
        _129 = core::panicking::assert_failed::<i32, i32>(move _128, _122, _123, move _130);
    }

    bb24: {
        _135 = &_131;
        _136 = (const 5_i32, const false);
        _134 = <[closure@ui/mir/mir_match_test.rs:32:31: 32:37] as Fn<(i32, bool)>>::call(move _135, move _136) -> bb25;
    }

    bb25: {
        _133 = &_134;
        _138 = const 3_i32;
        _137 = &_138;
        _132 = (move _133, move _137);
        _139 = (_132.0: &i32);
        _140 = (_132.1: &i32);
        _143 = (*_139);
        _144 = (*_140);
        _142 = Eq(move _143, move _144);
        _141 = Not(move _142);
        switchInt(move _141) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _145 = core::panicking::AssertKind::Eq;
        _147 = Option::<Arguments<'_>>::None;
        _146 = core::panicking::assert_failed::<i32, i32>(move _145, _139, _140, move _147);
    }

    bb27: {
        _151 = &_131;
        _152 = (const 5_i32, const true);
        _150 = <[closure@ui/mir/mir_match_test.rs:32:31: 32:37] as Fn<(i32, bool)>>::call(move _151, move _152) -> bb28;
    }

    bb28: {
        _149 = &_150;
        _154 = const 0_i32;
        _153 = &_154;
        _148 = (move _149, move _153);
        _155 = (_148.0: &i32);
        _156 = (_148.1: &i32);
        _159 = (*_155);
        _160 = (*_156);
        _158 = Eq(move _159, move _160);
        _157 = Not(move _158);
        switchInt(move _157) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _161 = core::panicking::AssertKind::Eq;
        _163 = Option::<Arguments<'_>>::None;
        _162 = core::panicking::assert_failed::<i32, i32>(move _161, _155, _156, move _163);
    }

    bb30: {
        _167 = &_131;
        _168 = (const 3_i32, const false);
        _166 = <[closure@ui/mir/mir_match_test.rs:32:31: 32:37] as Fn<(i32, bool)>>::call(move _167, move _168) -> bb31;
    }

    bb31: {
        _165 = &_166;
        _170 = const 2_i32;
        _169 = &_170;
        _164 = (move _165, move _169);
        _171 = (_164.0: &i32);
        _172 = (_164.1: &i32);
        _175 = (*_171);
        _176 = (*_172);
        _174 = Eq(move _175, move _176);
        _173 = Not(move _174);
        switchInt(move _173) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _177 = core::panicking::AssertKind::Eq;
        _179 = Option::<Arguments<'_>>::None;
        _178 = core::panicking::assert_failed::<i32, i32>(move _177, _171, _172, move _179);
    }

    bb33: {
        _183 = &_131;
        _184 = (const 3_i32, const true);
        _182 = <[closure@ui/mir/mir_match_test.rs:32:31: 32:37] as Fn<(i32, bool)>>::call(move _183, move _184) -> bb34;
    }

    bb34: {
        _181 = &_182;
        _186 = const 0_i32;
        _185 = &_186;
        _180 = (move _181, move _185);
        _187 = (_180.0: &i32);
        _188 = (_180.1: &i32);
        _191 = (*_187);
        _192 = (*_188);
        _190 = Eq(move _191, move _192);
        _189 = Not(move _190);
        switchInt(move _189) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _193 = core::panicking::AssertKind::Eq;
        _195 = Option::<Arguments<'_>>::None;
        _194 = core::panicking::assert_failed::<i32, i32>(move _193, _187, _188, move _195);
    }

    bb36: {
        _199 = &_131;
        _200 = (const 7_i32, const false);
        _198 = <[closure@ui/mir/mir_match_test.rs:32:31: 32:37] as Fn<(i32, bool)>>::call(move _199, move _200) -> bb37;
    }

    bb37: {
        _197 = &_198;
        _202 = const 1_i32;
        _201 = &_202;
        _196 = (move _197, move _201);
        _203 = (_196.0: &i32);
        _204 = (_196.1: &i32);
        _207 = (*_203);
        _208 = (*_204);
        _206 = Eq(move _207, move _208);
        _205 = Not(move _206);
        switchInt(move _205) -> [0: bb39, otherwise: bb38];
    }

    bb38: {
        _209 = core::panicking::AssertKind::Eq;
        _211 = Option::<Arguments<'_>>::None;
        _210 = core::panicking::assert_failed::<i32, i32>(move _209, _203, _204, move _211);
    }

    bb39: {
        _215 = &_131;
        _216 = (const 7_i32, const true);
        _214 = <[closure@ui/mir/mir_match_test.rs:32:31: 32:37] as Fn<(i32, bool)>>::call(move _215, move _216) -> bb40;
    }

    bb40: {
        _213 = &_214;
        _218 = const 1_i32;
        _217 = &_218;
        _212 = (move _213, move _217);
        _219 = (_212.0: &i32);
        _220 = (_212.1: &i32);
        _223 = (*_219);
        _224 = (*_220);
        _222 = Eq(move _223, move _224);
        _221 = Not(move _222);
        switchInt(move _221) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _225 = core::panicking::AssertKind::Eq;
        _227 = Option::<Arguments<'_>>::None;
        _226 = core::panicking::assert_failed::<i32, i32>(move _225, _219, _220, move _227);
    }

    bb42: {
        _232 = &_228;
        _233 = (const 5_i32, const false);
        _231 = <[closure@ui/mir/mir_match_test.rs:47:31: 47:37] as Fn<(i32, bool)>>::call(move _232, move _233) -> bb43;
    }

    bb43: {
        _230 = &_231;
        _235 = const 3_i32;
        _234 = &_235;
        _229 = (move _230, move _234);
        _236 = (_229.0: &i32);
        _237 = (_229.1: &i32);
        _240 = (*_236);
        _241 = (*_237);
        _239 = Eq(move _240, move _241);
        _238 = Not(move _239);
        switchInt(move _238) -> [0: bb45, otherwise: bb44];
    }

    bb44: {
        _242 = core::panicking::AssertKind::Eq;
        _244 = Option::<Arguments<'_>>::None;
        _243 = core::panicking::assert_failed::<i32, i32>(move _242, _236, _237, move _244);
    }

    bb45: {
        _248 = &_228;
        _249 = (const 5_i32, const true);
        _247 = <[closure@ui/mir/mir_match_test.rs:47:31: 47:37] as Fn<(i32, bool)>>::call(move _248, move _249) -> bb46;
    }

    bb46: {
        _246 = &_247;
        _251 = const 3_i32;
        _250 = &_251;
        _245 = (move _246, move _250);
        _252 = (_245.0: &i32);
        _253 = (_245.1: &i32);
        _256 = (*_252);
        _257 = (*_253);
        _255 = Eq(move _256, move _257);
        _254 = Not(move _255);
        switchInt(move _254) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _258 = core::panicking::AssertKind::Eq;
        _260 = Option::<Arguments<'_>>::None;
        _259 = core::panicking::assert_failed::<i32, i32>(move _258, _252, _253, move _260);
    }

    bb48: {
        _264 = &_228;
        _265 = (const 3_i32, const false);
        _263 = <[closure@ui/mir/mir_match_test.rs:47:31: 47:37] as Fn<(i32, bool)>>::call(move _264, move _265) -> bb49;
    }

    bb49: {
        _262 = &_263;
        _267 = const 2_i32;
        _266 = &_267;
        _261 = (move _262, move _266);
        _268 = (_261.0: &i32);
        _269 = (_261.1: &i32);
        _272 = (*_268);
        _273 = (*_269);
        _271 = Eq(move _272, move _273);
        _270 = Not(move _271);
        switchInt(move _270) -> [0: bb51, otherwise: bb50];
    }

    bb50: {
        _274 = core::panicking::AssertKind::Eq;
        _276 = Option::<Arguments<'_>>::None;
        _275 = core::panicking::assert_failed::<i32, i32>(move _274, _268, _269, move _276);
    }

    bb51: {
        _280 = &_228;
        _281 = (const 3_i32, const true);
        _279 = <[closure@ui/mir/mir_match_test.rs:47:31: 47:37] as Fn<(i32, bool)>>::call(move _280, move _281) -> bb52;
    }

    bb52: {
        _278 = &_279;
        _283 = const 0_i32;
        _282 = &_283;
        _277 = (move _278, move _282);
        _284 = (_277.0: &i32);
        _285 = (_277.1: &i32);
        _288 = (*_284);
        _289 = (*_285);
        _287 = Eq(move _288, move _289);
        _286 = Not(move _287);
        switchInt(move _286) -> [0: bb54, otherwise: bb53];
    }

    bb53: {
        _290 = core::panicking::AssertKind::Eq;
        _292 = Option::<Arguments<'_>>::None;
        _291 = core::panicking::assert_failed::<i32, i32>(move _290, _284, _285, move _292);
    }

    bb54: {
        _296 = &_228;
        _297 = (const 7_i32, const false);
        _295 = <[closure@ui/mir/mir_match_test.rs:47:31: 47:37] as Fn<(i32, bool)>>::call(move _296, move _297) -> bb55;
    }

    bb55: {
        _294 = &_295;
        _299 = const 1_i32;
        _298 = &_299;
        _293 = (move _294, move _298);
        _300 = (_293.0: &i32);
        _301 = (_293.1: &i32);
        _304 = (*_300);
        _305 = (*_301);
        _303 = Eq(move _304, move _305);
        _302 = Not(move _303);
        switchInt(move _302) -> [0: bb57, otherwise: bb56];
    }

    bb56: {
        _306 = core::panicking::AssertKind::Eq;
        _308 = Option::<Arguments<'_>>::None;
        _307 = core::panicking::assert_failed::<i32, i32>(move _306, _300, _301, move _308);
    }

    bb57: {
        _312 = &_228;
        _313 = (const 7_i32, const true);
        _311 = <[closure@ui/mir/mir_match_test.rs:47:31: 47:37] as Fn<(i32, bool)>>::call(move _312, move _313) -> bb58;
    }

    bb58: {
        _310 = &_311;
        _315 = const 1_i32;
        _314 = &_315;
        _309 = (move _310, move _314);
        _316 = (_309.0: &i32);
        _317 = (_309.1: &i32);
        _320 = (*_316);
        _321 = (*_317);
        _319 = Eq(move _320, move _321);
        _318 = Not(move _319);
        switchInt(move _318) -> [0: bb60, otherwise: bb59];
    }

    bb59: {
        _322 = core::panicking::AssertKind::Eq;
        _324 = Option::<Arguments<'_>>::None;
        _323 = core::panicking::assert_failed::<i32, i32>(move _322, _316, _317, move _324);
    }

    bb60: {
        _329 = &_325;
        _330 = (const 3_i32, const false);
        _328 = <[closure@ui/mir/mir_match_test.rs:62:31: 62:37] as Fn<(i32, bool)>>::call(move _329, move _330) -> bb61;
    }

    bb61: {
        _327 = &_328;
        _332 = const 1_i32;
        _331 = &_332;
        _326 = (move _327, move _331);
        _333 = (_326.0: &i32);
        _334 = (_326.1: &i32);
        _337 = (*_333);
        _338 = (*_334);
        _336 = Eq(move _337, move _338);
        _335 = Not(move _336);
        switchInt(move _335) -> [0: bb63, otherwise: bb62];
    }

    bb62: {
        _339 = core::panicking::AssertKind::Eq;
        _341 = Option::<Arguments<'_>>::None;
        _340 = core::panicking::assert_failed::<i32, i32>(move _339, _333, _334, move _341);
    }

    bb63: {
        _345 = &_325;
        _346 = (const 3_i32, const true);
        _344 = <[closure@ui/mir/mir_match_test.rs:62:31: 62:37] as Fn<(i32, bool)>>::call(move _345, move _346) -> bb64;
    }

    bb64: {
        _343 = &_344;
        _348 = const 0_i32;
        _347 = &_348;
        _342 = (move _343, move _347);
        _349 = (_342.0: &i32);
        _350 = (_342.1: &i32);
        _353 = (*_349);
        _354 = (*_350);
        _352 = Eq(move _353, move _354);
        _351 = Not(move _352);
        switchInt(move _351) -> [0: bb66, otherwise: bb65];
    }

    bb65: {
        _355 = core::panicking::AssertKind::Eq;
        _357 = Option::<Arguments<'_>>::None;
        _356 = core::panicking::assert_failed::<i32, i32>(move _355, _349, _350, move _357);
    }

    bb66: {
        _362 = &_358;
        _363 = (const 3_i32, const false);
        _361 = <[closure@ui/mir/mir_match_test.rs:73:31: 73:37] as Fn<(i32, bool)>>::call(move _362, move _363) -> bb67;
    }

    bb67: {
        _360 = &_361;
        _365 = const 1_i32;
        _364 = &_365;
        _359 = (move _360, move _364);
        _366 = (_359.0: &i32);
        _367 = (_359.1: &i32);
        _370 = (*_366);
        _371 = (*_367);
        _369 = Eq(move _370, move _371);
        _368 = Not(move _369);
        switchInt(move _368) -> [0: bb69, otherwise: bb68];
    }

    bb68: {
        _372 = core::panicking::AssertKind::Eq;
        _374 = Option::<Arguments<'_>>::None;
        _373 = core::panicking::assert_failed::<i32, i32>(move _372, _366, _367, move _374);
    }

    bb69: {
        _378 = &_358;
        _379 = (const 3_i32, const true);
        _377 = <[closure@ui/mir/mir_match_test.rs:73:31: 73:37] as Fn<(i32, bool)>>::call(move _378, move _379) -> bb70;
    }

    bb70: {
        _376 = &_377;
        _381 = const 0_i32;
        _380 = &_381;
        _375 = (move _376, move _380);
        _382 = (_375.0: &i32);
        _383 = (_375.1: &i32);
        _386 = (*_382);
        _387 = (*_383);
        _385 = Eq(move _386, move _387);
        _384 = Not(move _385);
        switchInt(move _384) -> [0: bb72, otherwise: bb71];
    }

    bb71: {
        _388 = core::panicking::AssertKind::Eq;
        _390 = Option::<Arguments<'_>>::None;
        _389 = core::panicking::assert_failed::<i32, i32>(move _388, _382, _383, move _390);
    }

    bb72: {
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/mir/mir_match_test.rs:6:22: 6:28], _2: i32, _3: bool) -> i32 {
    debug x => _2;
    debug b => _3;
    let mut _0: i32;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: bool;

    bb0: {
        _8 = Le(const 0_i32, _2);
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _9 = Le(_2, const 5_i32);
        switchInt(move _9) -> [0: bb2, otherwise: bb7];
    }

    bb2: {
        _6 = Le(const 5_i32, _2);
        switchInt(move _6) -> [0: bb5, otherwise: bb3];
    }

    bb3: {
        _7 = Le(_2, const 10_i32);
        switchInt(move _7) -> [0: bb5, otherwise: bb9];
    }

    bb4: {
        _0 = const 3_i32;
        goto -> bb13;
    }

    bb5: {
        _4 = Le(const 1_i32, _2);
        switchInt(move _4) -> [0: bb4, otherwise: bb6];
    }

    bb6: {
        _5 = Le(_2, const 4_i32);
        switchInt(move _5) -> [0: bb4, otherwise: bb11];
    }

    bb7: {
        switchInt(_3) -> [0: bb2, otherwise: bb8];
    }

    bb8: {
        _0 = const 0_i32;
        goto -> bb13;
    }

    bb9: {
        switchInt(_3) -> [0: bb4, otherwise: bb10];
    }

    bb10: {
        _0 = const 1_i32;
        goto -> bb13;
    }

    bb11: {
        _10 = Not(_3);
        switchInt(move _10) -> [0: bb4, otherwise: bb12];
    }

    bb12: {
        _0 = const 2_i32;
        goto -> bb13;
    }

    bb13: {
        return;
    }
}

fn main::{closure#1}(_1: &[closure@ui/mir/mir_match_test.rs:19:22: 19:28], _2: i32, _3: bool) -> i32 {
    debug x => _2;
    debug b => _3;
    let mut _0: i32;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: bool;

    bb0: {
        _8 = Le(const 0_i32, _2);
        switchInt(move _8) -> [0: bb3, otherwise: bb1];
    }

    bb1: {
        _9 = Lt(_2, const 5_i32);
        switchInt(move _9) -> [0: bb3, otherwise: bb7];
    }

    bb2: {
        _6 = Le(const 1_i32, _2);
        switchInt(move _6) -> [0: bb6, otherwise: bb5];
    }

    bb3: {
        _4 = Le(const 5_i32, _2);
        switchInt(move _4) -> [0: bb2, otherwise: bb4];
    }

    bb4: {
        _5 = Lt(_2, const 10_i32);
        switchInt(move _5) -> [0: bb2, otherwise: bb9];
    }

    bb5: {
        _7 = Lt(_2, const 4_i32);
        switchInt(move _7) -> [0: bb6, otherwise: bb11];
    }

    bb6: {
        _0 = const 3_i32;
        goto -> bb13;
    }

    bb7: {
        switchInt(_3) -> [0: bb2, otherwise: bb8];
    }

    bb8: {
        _0 = const 0_i32;
        goto -> bb13;
    }

    bb9: {
        switchInt(_3) -> [0: bb2, otherwise: bb10];
    }

    bb10: {
        _0 = const 1_i32;
        goto -> bb13;
    }

    bb11: {
        _10 = Not(_3);
        switchInt(move _10) -> [0: bb6, otherwise: bb12];
    }

    bb12: {
        _0 = const 2_i32;
        goto -> bb13;
    }

    bb13: {
        return;
    }
}

fn main::{closure#2}(_1: &[closure@ui/mir/mir_match_test.rs:32:31: 32:37], _2: i32, _3: bool) -> i32 {
    debug x => _2;
    debug b => _3;
    let mut _0: i32;
    let mut _4: bool;
    let mut _5: bool;

    bb0: {
        _4 = Le(const 0_i32, _2);
        switchInt(move _4) -> [0: bb3, otherwise: bb1];
    }

    bb1: {
        _5 = Le(_2, const 5_i32);
        switchInt(move _5) -> [0: bb3, otherwise: bb5];
    }

    bb2: {
        switchInt(_2) -> [3: bb8, otherwise: bb4];
    }

    bb3: {
        switchInt(_2) -> [7: bb7, otherwise: bb2];
    }

    bb4: {
        _0 = const 3_i32;
        goto -> bb9;
    }

    bb5: {
        switchInt(_3) -> [0: bb2, otherwise: bb6];
    }

    bb6: {
        _0 = const 0_i32;
        goto -> bb9;
    }

    bb7: {
        _0 = const 1_i32;
        goto -> bb9;
    }

    bb8: {
        _0 = const 2_i32;
        goto -> bb9;
    }

    bb9: {
        return;
    }
}

fn main::{closure#3}(_1: &[closure@ui/mir/mir_match_test.rs:47:31: 47:37], _2: i32, _3: bool) -> i32 {
    debug x => _2;
    debug b => _3;
    let mut _0: i32;
    let mut _4: bool;
    let mut _5: bool;

    bb0: {
        _4 = Le(const 0_i32, _2);
        switchInt(move _4) -> [0: bb3, otherwise: bb1];
    }

    bb1: {
        _5 = Lt(_2, const 5_i32);
        switchInt(move _5) -> [0: bb3, otherwise: bb5];
    }

    bb2: {
        switchInt(_2) -> [3: bb8, otherwise: bb4];
    }

    bb3: {
        switchInt(_2) -> [7: bb7, otherwise: bb2];
    }

    bb4: {
        _0 = const 3_i32;
        goto -> bb9;
    }

    bb5: {
        switchInt(_3) -> [0: bb2, otherwise: bb6];
    }

    bb6: {
        _0 = const 0_i32;
        goto -> bb9;
    }

    bb7: {
        _0 = const 1_i32;
        goto -> bb9;
    }

    bb8: {
        _0 = const 2_i32;
        goto -> bb9;
    }

    bb9: {
        return;
    }
}

fn main::{closure#4}(_1: &[closure@ui/mir/mir_match_test.rs:62:31: 62:37], _2: i32, _3: bool) -> i32 {
    debug x => _2;
    debug b => _3;
    let mut _0: i32;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;

    bb0: {
        switchInt(_2) -> [3: bb6, otherwise: bb2];
    }

    bb1: {
        _6 = Le(const 1_i32, _2);
        switchInt(move _6) -> [0: bb5, otherwise: bb4];
    }

    bb2: {
        _4 = Le(const 5_i32, _2);
        switchInt(move _4) -> [0: bb1, otherwise: bb3];
    }

    bb3: {
        _5 = Le(_2, const 7_i32);
        switchInt(move _5) -> [0: bb1, otherwise: bb8];
    }

    bb4: {
        _7 = Le(_2, const 4_i32);
        switchInt(move _7) -> [0: bb5, otherwise: bb9];
    }

    bb5: {
        _0 = const 3_i32;
        goto -> bb10;
    }

    bb6: {
        switchInt(_3) -> [0: bb1, otherwise: bb7];
    }

    bb7: {
        _0 = const 0_i32;
        goto -> bb10;
    }

    bb8: {
        _0 = const 2_i32;
        goto -> bb10;
    }

    bb9: {
        _0 = const 1_i32;
        goto -> bb10;
    }

    bb10: {
        return;
    }
}

fn main::{closure#5}(_1: &[closure@ui/mir/mir_match_test.rs:73:31: 73:37], _2: i32, _3: bool) -> i32 {
    debug x => _2;
    debug b => _3;
    let mut _0: i32;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;

    bb0: {
        switchInt(_2) -> [3: bb6, otherwise: bb2];
    }

    bb1: {
        _6 = Le(const 1_i32, _2);
        switchInt(move _6) -> [0: bb5, otherwise: bb4];
    }

    bb2: {
        _4 = Le(const 5_i32, _2);
        switchInt(move _4) -> [0: bb1, otherwise: bb3];
    }

    bb3: {
        _5 = Lt(_2, const 7_i32);
        switchInt(move _5) -> [0: bb1, otherwise: bb8];
    }

    bb4: {
        _7 = Lt(_2, const 4_i32);
        switchInt(move _7) -> [0: bb5, otherwise: bb9];
    }

    bb5: {
        _0 = const 3_i32;
        goto -> bb10;
    }

    bb6: {
        switchInt(_3) -> [0: bb1, otherwise: bb7];
    }

    bb7: {
        _0 = const 0_i32;
        goto -> bb10;
    }

    bb8: {
        _0 = const 2_i32;
        goto -> bb10;
    }

    bb9: {
        _0 = const 1_i32;
        goto -> bb10;
    }

    bb10: {
        return;
    }
}
