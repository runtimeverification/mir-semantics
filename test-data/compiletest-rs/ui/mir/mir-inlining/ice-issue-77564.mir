// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const N: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

CollectArray::inner_array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

fn CollectArray::collect_array(_1: &mut Self) -> [A; 2] {
    debug self => _1;
    let mut _0: [A; 2];
    let _2: [A; 2];
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: &std::option::Option<A>;
    let _6: std::option::Option<A>;
    let mut _7: !;
    scope 1 {
        debug result => _2;
    }

    bb0: {
        _2 = <Self as CollectArray<A>>::inner_array(_1) -> bb1;
    }

    bb1: {
        _6 = <Self as Iterator>::next(_1) -> [return: bb2, unwind: bb8];
    }

    bb2: {
        _5 = &_6;
        _4 = Option::<A>::is_none(move _5) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _3 = Not(move _4);
        drop(_6) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        switchInt(move _3) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _7 = core::panicking::panic(const "assertion failed: self.next().is_none()") -> bb8;
    }

    bb6: {
        _0 = move _2;
        return;
    }

    bb7 (cleanup): {
        drop(_6) -> [return: bb8, unwind terminate];
    }

    bb8 (cleanup): {
        drop(_2) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        resume;
    }
}

CollectArray::collect_array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

fn <impl at ui/mir/mir-inlining/ice-issue-77564.rs:16:1: 16:41>::inner_array(_1: &mut I) -> [A; 2] {
    debug self => _1;
    let mut _0: [A; 2];
    let mut _2: [std::mem::MaybeUninit<A>; 2];
    let mut _3: std::mem::MaybeUninit<[std::mem::MaybeUninit<A>; 2]>;
    let mut _4: std::iter::Zip<std::slice::IterMut<'_, std::mem::MaybeUninit<A>>, &mut I>;
    let mut _5: std::iter::Zip<std::slice::IterMut<'_, std::mem::MaybeUninit<A>>, &mut I>;
    let mut _6: std::slice::IterMut<'_, std::mem::MaybeUninit<A>>;
    let mut _7: &mut [std::mem::MaybeUninit<A>];
    let mut _8: &mut [std::mem::MaybeUninit<A>; 2];
    let mut _10: std::option::Option<(&mut std::mem::MaybeUninit<A>, A)>;
    let mut _11: &mut std::iter::Zip<std::slice::IterMut<'_, std::mem::MaybeUninit<A>>, &mut I>;
    let mut _12: isize;
    let mut _15: std::mem::MaybeUninit<A>;
    let _17: &[std::mem::MaybeUninit<A>; 2];
    let mut _18: *const [A; 2];
    scope 1 {
        debug result => _2;
        let mut _9: std::iter::Zip<std::slice::IterMut<'_, std::mem::MaybeUninit<A>>, &mut I>;
        let _16: *const [std::mem::MaybeUninit<A>; 2];
        scope 3 {
            debug iter => _9;
            let _13: &mut std::mem::MaybeUninit<A>;
            let _14: A;
            scope 4 {
                debug dest => _13;
                debug item => _14;
            }
        }
        scope 5 {
            debug temp_ptr => _16;
            scope 6 {
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _3 = MaybeUninit::<[MaybeUninit<A>; 2]>::uninit() -> bb1;
    }

    bb1: {
        _2 = MaybeUninit::<[MaybeUninit<A>; 2]>::assume_init(move _3) -> bb2;
    }

    bb2: {
        _8 = &mut _2;
        _7 = move _8 as &mut [std::mem::MaybeUninit<A>] (Pointer(Unsize));
        _6 = core::slice::<impl [MaybeUninit<A>]>::iter_mut(move _7) -> bb3;
    }

    bb3: {
        _5 = <std::slice::IterMut<'_, MaybeUninit<A>> as Iterator>::zip::<&mut I>(move _6, move _1) -> bb4;
    }

    bb4: {
        _4 = <Zip<std::slice::IterMut<'_, MaybeUninit<A>>, &mut I> as IntoIterator>::into_iter(move _5) -> bb5;
    }

    bb5: {
        _9 = move _4;
        goto -> bb6;
    }

    bb6: {
        _11 = &mut _9;
        _10 = <Zip<std::slice::IterMut<'_, MaybeUninit<A>>, &mut I> as Iterator>::next(_11) -> bb7;
    }

    bb7: {
        _12 = discriminant(_10);
        switchInt(move _12) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _13 = move (((_10 as Some).0: (&mut std::mem::MaybeUninit<A>, A)).0: &mut std::mem::MaybeUninit<A>);
        _14 = move (((_10 as Some).0: (&mut std::mem::MaybeUninit<A>, A)).1: A);
        _15 = MaybeUninit::<A>::new(move _14) -> bb11;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _17 = &_2;
        _16 = &raw const (*_17);
        _18 = _16 as *const [A; 2] (PtrToPtr);
        _0 = std::ptr::read::<[A; 2]>(_18) -> bb12;
    }

    bb11: {
        (*_13) = move _15;
        goto -> bb6;
    }

    bb12: {
        return;
    }
}

<impl at ui/mir/mir-inlining/ice-issue-77564.rs:16:1: 16:41>::inner_array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

<impl at ui/mir/mir-inlining/ice-issue-77564.rs:16:1: 16:41>::inner_array::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

<impl at ui/mir/mir-inlining/ice-issue-77564.rs:16:1: 16:41>::inner_array::{constant#2}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

<impl at ui/mir/mir-inlining/ice-issue-77564.rs:16:1: 16:41>::inner_array::{constant#3}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&[[&i32; 2]; 2], &[[&i32; 2]; 2]);
    let mut _2: &[[&i32; 2]; 2];
    let _3: [[&i32; 2]; 2];
    let mut _4: &mut std::iter::Map<std::slice::Iter<'_, [i32; 2]>, [closure@ui/mir/mir-inlining/ice-issue-77564.rs:34:18: 34:23]>;
    let mut _5: std::iter::Map<std::slice::Iter<'_, [i32; 2]>, [closure@ui/mir/mir-inlining/ice-issue-77564.rs:34:18: 34:23]>;
    let mut _6: std::slice::Iter<'_, [i32; 2]>;
    let mut _7: &[[i32; 2]];
    let mut _8: &[[i32; 2]; 2];
    let _9: [[i32; 2]; 2];
    let mut _10: [i32; 2];
    let mut _11: [i32; 2];
    let mut _12: &[[&i32; 2]; 2];
    let _13: [[&i32; 2]; 2];
    let mut _14: [&i32; 2];
    let mut _15: &i32;
    let _16: i32;
    let _17: &i32;
    let _18: i32;
    let mut _19: [&i32; 2];
    let _20: &i32;
    let _21: i32;
    let _22: &i32;
    let _23: i32;
    let _24: &[[&i32; 2]; 2];
    let _25: &[[&i32; 2]; 2];
    let mut _26: bool;
    let mut _27: bool;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _24;
        debug right_val => _25;
        let _28: core::panicking::AssertKind;
        scope 2 {
            debug kind => _28;
        }
    }

    bb0: {
        _10 = [const 1_i32, const 2_i32];
        _11 = [const 3_i32, const 4_i32];
        _9 = [move _10, move _11];
        _8 = &_9;
        _7 = move _8 as &[[i32; 2]] (Pointer(Unsize));
        _6 = core::slice::<impl [[i32; 2]]>::iter(move _7) -> bb1;
    }

    bb1: {
        _5 = <std::slice::Iter<'_, [i32; 2]> as Iterator>::map::<[&i32; 2], [closure@ui/mir/mir-inlining/ice-issue-77564.rs:34:18: 34:23]>(move _6, const ZeroSized: [closure@ui/mir/mir-inlining/ice-issue-77564.rs:34:18: 34:23]) -> bb2;
    }

    bb2: {
        _4 = &mut _5;
        _3 = <Map<std::slice::Iter<'_, [i32; 2]>, [closure@ui/mir/mir-inlining/ice-issue-77564.rs:34:18: 34:23]> as CollectArray<[&i32; 2]>>::collect_array(move _4) -> bb3;
    }

    bb3: {
        _2 = &_3;
        _16 = const 1_i32;
        _15 = &_16;
        _18 = const 2_i32;
        _17 = &_18;
        _14 = [move _15, _17];
        _21 = const 3_i32;
        _20 = &_21;
        _23 = const 4_i32;
        _22 = &_23;
        _19 = [_20, _22];
        _13 = [move _14, move _19];
        _12 = &_13;
        _1 = (move _2, move _12);
        _24 = (_1.0: &[[&i32; 2]; 2]);
        _25 = (_1.1: &[[&i32; 2]; 2]);
        _27 = <[[&i32; 2]; 2] as PartialEq>::eq(_24, _25) -> bb4;
    }

    bb4: {
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<[[&i32; 2]; 2], [[&i32; 2]; 2]>(move _28, _24, _25, move _30);
    }

    bb6: {
        return;
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/mir/mir-inlining/ice-issue-77564.rs:34:18: 34:23], _2: &[i32; 2]) -> [&i32; 2] {
    debug row => _2;
    let mut _0: [&i32; 2];
    let mut _3: &mut std::slice::Iter<'_, i32>;
    let mut _4: std::slice::Iter<'_, i32>;
    let mut _5: &[i32];

    bb0: {
        _5 = _2 as &[i32] (Pointer(Unsize));
        _4 = core::slice::<impl [i32]>::iter(move _5) -> bb1;
    }

    bb1: {
        _3 = &mut _4;
        _0 = <std::slice::Iter<'_, i32> as CollectArray<&i32>>::collect_array(move _3) -> bb2;
    }

    bb2: {
        return;
    }
}
