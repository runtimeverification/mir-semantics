// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Foo::bar(_1: &Self) -> usize {
    debug self => _1;
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

fn <impl at ui/mir/mir-inlining/no-trait-method-issue-40473.rs:7:1: 7:16>::bar(_1: &()) -> usize {
    debug self => _1;
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: usize;
    let mut _2: &();
    let _3: ();
    let mut _4: (&usize, &usize);
    let mut _5: &usize;
    let mut _6: &usize;
    let _7: usize;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug result => _1;
        let _8: &usize;
        let _9: &usize;
        scope 2 {
            debug left_val => _8;
            debug right_val => _9;
            let _14: core::panicking::AssertKind;
            scope 3 {
                debug kind => _14;
            }
        }
    }

    bb0: {
        _2 = &_3;
        _1 = <() as Foo>::bar(move _2) -> bb1;
    }

    bb1: {
        _5 = &_1;
        _7 = const 3_usize;
        _6 = &_7;
        _4 = (move _5, move _6);
        _8 = (_4.0: &usize);
        _9 = (_4.1: &usize);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<usize, usize>(move _14, _8, _9, move _16);
    }

    bb3: {
        return;
    }
}
