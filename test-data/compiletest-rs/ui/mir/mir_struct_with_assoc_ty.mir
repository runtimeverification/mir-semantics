// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Data::offsets::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

fn create_data() -> Data {
    let mut _0: Data;
    let mut _1: Data;
    let mut _2: [u32; 2];
    let _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    scope 1 {
        debug d => _1;
    }

    bb0: {
        _2 = [const 1_u32, const 2_u32];
        _1 = Data { offsets: move _2 };
        _3 = const 0_usize;
        _4 = const 2_usize;
        _5 = Lt(_3, _4);
        assert(move _5, "index out of bounds: the length is {} but the index is {}", move _4, _3) -> bb1;
    }

    bb1: {
        (_1.0: [u32; 2])[_3] = const 3_u32;
        _0 = move _1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Data;
    let mut _2: (&u32, &u32);
    let mut _3: &u32;
    let _4: usize;
    let mut _5: usize;
    let mut _6: bool;
    let mut _7: &u32;
    let _8: u32;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: u32;
    let mut _14: u32;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: (&u32, &u32);
    let mut _19: &u32;
    let _20: usize;
    let mut _21: usize;
    let mut _22: bool;
    let mut _23: &u32;
    let _24: u32;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: u32;
    let mut _30: u32;
    let _32: !;
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug d => _1;
        let _9: &u32;
        let _10: &u32;
        let _25: &u32;
        let _26: &u32;
        scope 2 {
            debug left_val => _9;
            debug right_val => _10;
            let _15: core::panicking::AssertKind;
            scope 3 {
                debug kind => _15;
            }
        }
        scope 4 {
            debug left_val => _25;
            debug right_val => _26;
            let _31: core::panicking::AssertKind;
            scope 5 {
                debug kind => _31;
            }
        }
    }

    bb0: {
        _1 = create_data() -> bb1;
    }

    bb1: {
        _4 = const 0_usize;
        _5 = const 2_usize;
        _6 = Lt(_4, _5);
        assert(move _6, "index out of bounds: the length is {} but the index is {}", move _5, _4) -> bb2;
    }

    bb2: {
        _3 = &(_1.0: [u32; 2])[_4];
        _8 = const 3_u32;
        _7 = &_8;
        _2 = (move _3, move _7);
        _9 = (_2.0: &u32);
        _10 = (_2.1: &u32);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<u32, u32>(move _15, _9, _10, move _17);
    }

    bb4: {
        _20 = const 1_usize;
        _21 = const 2_usize;
        _22 = Lt(_20, _21);
        assert(move _22, "index out of bounds: the length is {} but the index is {}", move _21, _20) -> bb5;
    }

    bb5: {
        _19 = &(_1.0: [u32; 2])[_20];
        _24 = const 2_u32;
        _23 = &_24;
        _18 = (move _19, move _23);
        _25 = (_18.0: &u32);
        _26 = (_18.1: &u32);
        _29 = (*_25);
        _30 = (*_26);
        _28 = Eq(move _29, move _30);
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _31 = core::panicking::AssertKind::Eq;
        _33 = Option::<Arguments<'_>>::None;
        _32 = core::panicking::assert_failed::<u32, u32>(move _31, _25, _26, move _33);
    }

    bb7: {
        return;
    }
}

fn Global(_1: PhantomData<T>) -> Global<T> {
    let mut _0: Global<T>;

    bb0: {
        _0 = Global::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Global(_1: PhantomData<T>) -> Global<T> {
    let mut _0: Global<T>;

    bb0: {
        _0 = Global::<T>(move _1);
        return;
    }
}
