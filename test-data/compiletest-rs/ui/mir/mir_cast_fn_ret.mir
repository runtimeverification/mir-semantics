// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn tuple2() -> (u16, u8) {
    let mut _0: (u16, u8);

    bb0: {
        _0 = (const 1_u16, const 2_u8);
        return;
    }
}

fn tuple3() -> (u8, u8, u8) {
    let mut _0: (u8, u8, u8);

    bb0: {
        _0 = (const 1_u8, const 2_u8, const 3_u8);
        return;
    }
}

fn test2() -> u8 {
    let mut _0: u8;
    let mut _1: (u16, u8);

    bb0: {
        _1 = tuple2() -> bb1;
    }

    bb1: {
        _0 = (_1.1: u8);
        return;
    }
}

fn test3() -> u8 {
    let mut _0: u8;
    let mut _1: (u8, u8, u8);

    bb0: {
        _1 = tuple3() -> bb1;
    }

    bb1: {
        _0 = (_1.2: u8);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&u8, &u8);
    let mut _2: &u8;
    let _3: u8;
    let mut _4: &u8;
    let _5: u8;
    let _6: &u8;
    let _7: &u8;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: u8;
    let mut _11: u8;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&u8, &u8);
    let mut _16: &u8;
    let _17: u8;
    let mut _18: &u8;
    let _19: u8;
    let _20: &u8;
    let _21: &u8;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: u8;
    let mut _25: u8;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }
    scope 3 {
        debug left_val => _20;
        debug right_val => _21;
        let _26: core::panicking::AssertKind;
        scope 4 {
            debug kind => _26;
        }
    }

    bb0: {
        _3 = test2() -> bb1;
    }

    bb1: {
        _2 = &_3;
        _5 = const 2_u8;
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &u8);
        _7 = (_1.1: &u8);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<u8, u8>(move _12, _6, _7, move _14);
    }

    bb3: {
        _17 = test3() -> bb4;
    }

    bb4: {
        _16 = &_17;
        _19 = const 3_u8;
        _18 = &_19;
        _15 = (move _16, move _18);
        _20 = (_15.0: &u8);
        _21 = (_15.1: &u8);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<u8, u8>(move _26, _20, _21, move _28);
    }

    bb6: {
        return;
    }
}
