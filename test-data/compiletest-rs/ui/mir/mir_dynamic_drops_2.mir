// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/mir/mir_dynamic_drops_2.rs:7:1: 7:32>::drop(_1: &mut Droppable<'_>) -> () {
    debug self => _1;
    let mut _0: ();
    let mut _2: bool;
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let _6: &[&str; 2];
    let _7: [&str; 2];
    let mut _8: &[core::fmt::rt::Argument<'_>];
    let _9: &[core::fmt::rt::Argument<'_>; 1];
    let _10: [core::fmt::rt::Argument<'_>; 1];
    let mut _11: core::fmt::rt::Argument<'_>;
    let _12: &u32;
    let _13: !;
    let _14: ();
    let mut _15: std::fmt::Arguments<'_>;
    let mut _16: &[&str];
    let _17: &[&str; 2];
    let _18: [&str; 2];
    let mut _19: &[core::fmt::rt::Argument<'_>];
    let _20: &[core::fmt::rt::Argument<'_>; 1];
    let _21: [core::fmt::rt::Argument<'_>; 1];
    let mut _22: core::fmt::rt::Argument<'_>;
    let _23: &u32;
    let mut _24: &mut bool;
    let mut _25: &mut bool;

    bb0: {
        _24 = deref_copy ((*_1).0: &mut bool);
        _2 = (*_24);
        switchInt(move _2) -> [0: bb5, otherwise: bb1];
    }

    bb1: {
        _7 = [const "", const " dropped twice\n"];
        _6 = &_7;
        _5 = _6 as &[&str] (Pointer(Unsize));
        _12 = &((*_1).1: u32);
        _11 = core::fmt::rt::Argument::<'_>::new_display::<u32>(_12) -> bb2;
    }

    bb2: {
        _10 = [move _11];
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> bb3;
    }

    bb3: {
        _3 = _eprint(move _4) -> bb4;
    }

    bb4: {
        _13 = exit(const 1_i32);
    }

    bb5: {
        _18 = [const "drop ", const "\n"];
        _17 = &_18;
        _16 = _17 as &[&str] (Pointer(Unsize));
        _23 = &((*_1).1: u32);
        _22 = core::fmt::rt::Argument::<'_>::new_display::<u32>(_23) -> bb6;
    }

    bb6: {
        _21 = [move _22];
        _20 = &_21;
        _19 = _20 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _15 = Arguments::<'_>::new_v1(move _16, move _19) -> bb7;
    }

    bb7: {
        _14 = _eprint(move _15) -> bb8;
    }

    bb8: {
        _25 = deref_copy ((*_1).0: &mut bool);
        (*_25) = const true;
        return;
    }
}

fn mir(_1: Droppable<'_>) -> () {
    debug d => _1;
    let mut _0: ();
    let _2: Droppable<'_>;
    scope 1 {
        debug x => _2;
    }

    bb0: {
        _2 = move _1;
        drop(_2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: bool;
    let _2: ();
    let mut _3: Droppable<'_>;
    let mut _4: &mut bool;
    let mut _5: !;
    scope 1 {
        debug xv => _1;
    }

    bb0: {
        _1 = const false;
        _4 = &mut _1;
        _3 = Droppable::<'_>(_4, const 1_u32);
        _2 = mir(move _3) -> bb1;
    }

    bb1: {
        _5 = begin_panic::<&str>(const "explicit panic");
    }
}

fn Droppable(_1: &mut bool, _2: u32) -> Droppable<'_> {
    let mut _0: Droppable<'_>;

    bb0: {
        _0 = Droppable::<'_>(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn Droppable(_1: &mut bool, _2: u32) -> Droppable<'_> {
    let mut _0: Droppable<'_>;

    bb0: {
        _0 = Droppable::<'_>(move _1, move _2);
        return;
    }
}
