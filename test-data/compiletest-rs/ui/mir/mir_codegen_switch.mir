// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: Abc) -> i32 {
    debug x => _1;
    let mut _0: i32;
    let mut _2: isize;

    bb0: {
        _2 = discriminant(_1);
        switchInt(move _2) -> [0: bb1, 1: bb5, 2: bb3, 3: bb4, otherwise: bb2];
    }

    bb1: {
        _0 = const 1_i32;
        goto -> bb6;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _0 = const 3_i32;
        goto -> bb6;
    }

    bb4: {
        _0 = const 4_i32;
        goto -> bb6;
    }

    bb5: {
        _0 = const 2_i32;
        goto -> bb6;
    }

    bb6: {
        return;
    }
}

fn foo2(_1: Abc) -> bool {
    debug x => _1;
    let mut _0: bool;
    let mut _2: isize;

    bb0: {
        _2 = discriminant(_1);
        _0 = Eq(_2, const 3_isize);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&i32, &i32);
    let mut _2: &i32;
    let _3: i32;
    let mut _4: &i32;
    let _5: i32;
    let mut _6: Abc;
    let _7: &i32;
    let _8: &i32;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: i32;
    let mut _12: i32;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&i32, &i32);
    let mut _17: &i32;
    let _18: i32;
    let mut _19: &i32;
    let _20: i32;
    let mut _21: Abc;
    let _22: &i32;
    let _23: &i32;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: i32;
    let mut _27: i32;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&i32, &i32);
    let mut _32: &i32;
    let _33: i32;
    let mut _34: &i32;
    let _35: i32;
    let mut _36: Abc;
    let _37: &i32;
    let _38: &i32;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: i32;
    let mut _42: i32;
    let _44: !;
    let mut _45: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _46: (&i32, &i32);
    let mut _47: &i32;
    let _48: i32;
    let mut _49: &i32;
    let _50: i32;
    let mut _51: Abc;
    let _52: &i32;
    let _53: &i32;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: i32;
    let mut _57: i32;
    let _59: !;
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _61: (&bool, &bool);
    let mut _62: &bool;
    let _63: bool;
    let mut _64: &bool;
    let _65: bool;
    let mut _66: Abc;
    let _67: &bool;
    let _68: &bool;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let _74: !;
    let mut _75: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _76: (&bool, &bool);
    let mut _77: &bool;
    let _78: bool;
    let mut _79: &bool;
    let _80: bool;
    let mut _81: Abc;
    let _82: &bool;
    let _83: &bool;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: bool;
    let _89: !;
    let mut _90: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _91: (&bool, &bool);
    let mut _92: &bool;
    let _93: bool;
    let mut _94: &bool;
    let _95: bool;
    let mut _96: Abc;
    let _97: &bool;
    let _98: &bool;
    let mut _99: bool;
    let mut _100: bool;
    let mut _101: bool;
    let mut _102: bool;
    let _104: !;
    let mut _105: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _106: (&bool, &bool);
    let mut _107: &bool;
    let _108: bool;
    let mut _109: &bool;
    let _110: bool;
    let mut _111: Abc;
    let _112: &bool;
    let _113: &bool;
    let mut _114: bool;
    let mut _115: bool;
    let mut _116: bool;
    let mut _117: bool;
    let _119: !;
    let mut _120: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _7;
        debug right_val => _8;
        let _13: core::panicking::AssertKind;
        scope 2 {
            debug kind => _13;
        }
    }
    scope 3 {
        debug left_val => _22;
        debug right_val => _23;
        let _28: core::panicking::AssertKind;
        scope 4 {
            debug kind => _28;
        }
    }
    scope 5 {
        debug left_val => _37;
        debug right_val => _38;
        let _43: core::panicking::AssertKind;
        scope 6 {
            debug kind => _43;
        }
    }
    scope 7 {
        debug left_val => _52;
        debug right_val => _53;
        let _58: core::panicking::AssertKind;
        scope 8 {
            debug kind => _58;
        }
    }
    scope 9 {
        debug left_val => _67;
        debug right_val => _68;
        let _73: core::panicking::AssertKind;
        scope 10 {
            debug kind => _73;
        }
    }
    scope 11 {
        debug left_val => _82;
        debug right_val => _83;
        let _88: core::panicking::AssertKind;
        scope 12 {
            debug kind => _88;
        }
    }
    scope 13 {
        debug left_val => _97;
        debug right_val => _98;
        let _103: core::panicking::AssertKind;
        scope 14 {
            debug kind => _103;
        }
    }
    scope 15 {
        debug left_val => _112;
        debug right_val => _113;
        let _118: core::panicking::AssertKind;
        scope 16 {
            debug kind => _118;
        }
    }

    bb0: {
        _3 = const 1_i32;
        _2 = &_3;
        _6 = Abc::A(const 42_u8);
        _5 = foo(move _6) -> bb1;
    }

    bb1: {
        _4 = &_5;
        _1 = (move _2, move _4);
        _7 = (_1.0: &i32);
        _8 = (_1.1: &i32);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<i32, i32>(move _13, _7, _8, move _15);
    }

    bb3: {
        _18 = const 2_i32;
        _17 = &_18;
        _21 = Abc::B(const -100_i8);
        _20 = foo(move _21) -> bb4;
    }

    bb4: {
        _19 = &_20;
        _16 = (move _17, move _19);
        _22 = (_16.0: &i32);
        _23 = (_16.1: &i32);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<i32, i32>(move _28, _22, _23, move _30);
    }

    bb6: {
        _33 = const 3_i32;
        _32 = &_33;
        _36 = Abc::C;
        _35 = foo(move _36) -> bb7;
    }

    bb7: {
        _34 = &_35;
        _31 = (move _32, move _34);
        _37 = (_31.0: &i32);
        _38 = (_31.1: &i32);
        _41 = (*_37);
        _42 = (*_38);
        _40 = Eq(move _41, move _42);
        _39 = Not(move _40);
        switchInt(move _39) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _43 = core::panicking::AssertKind::Eq;
        _45 = Option::<Arguments<'_>>::None;
        _44 = core::panicking::assert_failed::<i32, i32>(move _43, _37, _38, move _45);
    }

    bb9: {
        _48 = const 4_i32;
        _47 = &_48;
        _51 = Abc::D;
        _50 = foo(move _51) -> bb10;
    }

    bb10: {
        _49 = &_50;
        _46 = (move _47, move _49);
        _52 = (_46.0: &i32);
        _53 = (_46.1: &i32);
        _56 = (*_52);
        _57 = (*_53);
        _55 = Eq(move _56, move _57);
        _54 = Not(move _55);
        switchInt(move _54) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _58 = core::panicking::AssertKind::Eq;
        _60 = Option::<Arguments<'_>>::None;
        _59 = core::panicking::assert_failed::<i32, i32>(move _58, _52, _53, move _60);
    }

    bb12: {
        _63 = const false;
        _62 = &_63;
        _66 = Abc::A(const 1_u8);
        _65 = foo2(move _66) -> bb13;
    }

    bb13: {
        _64 = &_65;
        _61 = (move _62, move _64);
        _67 = (_61.0: &bool);
        _68 = (_61.1: &bool);
        _71 = (*_67);
        _72 = (*_68);
        _70 = Eq(move _71, move _72);
        _69 = Not(move _70);
        switchInt(move _69) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _73 = core::panicking::AssertKind::Eq;
        _75 = Option::<Arguments<'_>>::None;
        _74 = core::panicking::assert_failed::<bool, bool>(move _73, _67, _68, move _75);
    }

    bb15: {
        _78 = const false;
        _77 = &_78;
        _81 = Abc::B(const 2_i8);
        _80 = foo2(move _81) -> bb16;
    }

    bb16: {
        _79 = &_80;
        _76 = (move _77, move _79);
        _82 = (_76.0: &bool);
        _83 = (_76.1: &bool);
        _86 = (*_82);
        _87 = (*_83);
        _85 = Eq(move _86, move _87);
        _84 = Not(move _85);
        switchInt(move _84) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _88 = core::panicking::AssertKind::Eq;
        _90 = Option::<Arguments<'_>>::None;
        _89 = core::panicking::assert_failed::<bool, bool>(move _88, _82, _83, move _90);
    }

    bb18: {
        _93 = const false;
        _92 = &_93;
        _96 = Abc::C;
        _95 = foo2(move _96) -> bb19;
    }

    bb19: {
        _94 = &_95;
        _91 = (move _92, move _94);
        _97 = (_91.0: &bool);
        _98 = (_91.1: &bool);
        _101 = (*_97);
        _102 = (*_98);
        _100 = Eq(move _101, move _102);
        _99 = Not(move _100);
        switchInt(move _99) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _103 = core::panicking::AssertKind::Eq;
        _105 = Option::<Arguments<'_>>::None;
        _104 = core::panicking::assert_failed::<bool, bool>(move _103, _97, _98, move _105);
    }

    bb21: {
        _108 = const true;
        _107 = &_108;
        _111 = Abc::D;
        _110 = foo2(move _111) -> bb22;
    }

    bb22: {
        _109 = &_110;
        _106 = (move _107, move _109);
        _112 = (_106.0: &bool);
        _113 = (_106.1: &bool);
        _116 = (*_112);
        _117 = (*_113);
        _115 = Eq(move _116, move _117);
        _114 = Not(move _115);
        switchInt(move _114) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _118 = core::panicking::AssertKind::Eq;
        _120 = Option::<Arguments<'_>>::None;
        _119 = core::panicking::assert_failed::<bool, bool>(move _118, _112, _113, move _120);
    }

    bb24: {
        return;
    }
}

fn Abc::A(_1: u8) -> Abc {
    let mut _0: Abc;

    bb0: {
        _0 = Abc::A(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Abc::A(_1: u8) -> Abc {
    let mut _0: Abc;

    bb0: {
        _0 = Abc::A(move _1);
        return;
    }
}

fn Abc::B(_1: i8) -> Abc {
    let mut _0: Abc;

    bb0: {
        _0 = Abc::B(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Abc::B(_1: i8) -> Abc {
    let mut _0: Abc;

    bb0: {
        _0 = Abc::B(move _1);
        return;
    }
}
