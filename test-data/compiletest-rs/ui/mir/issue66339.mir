// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> () {
    let mut _0: ();
    let _1: [closure@ui/mir/issue66339.rs:7:15: 7:18];
    let _2: ();
    let mut _3: &[closure@ui/mir/issue66339.rs:7:15: 7:18];
    let mut _4: (&str,);
    scope 1 {
        debug bar => const ZeroSized: [closure@ui/mir/issue66339.rs:7:15: 7:18];
    }

    bb0: {
        _3 = &_1;
        _4 = (const "a",);
        _2 = <[closure@ui/mir/issue66339.rs:7:15: 7:18] as Fn<(&str,)>>::call(move _3, move _4) -> bb1;
    }

    bb1: {
        return;
    }
}

fn foo::{closure#0}(_1: &[closure@ui/mir/issue66339.rs:7:15: 7:18], _2: &str) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();

    bb0: {
        _1 = foo() -> bb1;
    }

    bb1: {
        return;
    }
}
