// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test1(_1: isize, _2: (i32, i32), _3: &[i32]) -> (isize, (i32, i32), &[i32]) {
    debug a => _1;
    debug b => _2;
    debug c => _3;
    let mut _0: (isize, (i32, i32), &[i32]);

    bb0: {
        _0 = test1::callee(_1, _2, _3) -> bb1;
    }

    bb1: {
        return;
    }
}

fn test1::callee(_1: isize, _2: (i32, i32), _3: &[i32]) -> (isize, (i32, i32), &[i32]) {
    debug a => _1;
    debug b => _2;
    debug c => _3;
    let mut _0: (isize, (i32, i32), &[i32]);

    bb0: {
        _0 = (_1, _2, _3);
        return;
    }
}

fn test2(_1: isize) -> isize {
    debug a => _1;
    let mut _0: isize;

    bb0: {
        _0 = test2::callee(_1) -> bb1;
    }

    bb1: {
        return;
    }
}

fn test2::callee(_1: isize) -> isize {
    debug a => _1;
    let mut _0: isize;

    bb0: {
        _0 = _1;
        return;
    }
}

fn <impl at ui/mir/mir_codegen_calls.rs:24:10: 24:19>::eq(_1: &Foo, _2: &Foo) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;

    bb0: {
        _0 = const true;
        return;
    }
}

fn <impl at ui/mir/mir_codegen_calls.rs:24:21: 24:23>::assert_receiver_is_total_eq(_1: &Foo) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/mir/mir_codegen_calls.rs:24:25: 24:30>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "Foo";
        _0 = Formatter::<'_>::write_str(_2, _3) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/mir/mir_codegen_calls.rs:26:1: 26:9>::inherent_method(_1: &Foo, _2: isize) -> isize {
    debug self => _1;
    debug a => _2;
    let mut _0: isize;

    bb0: {
        _0 = _2;
        return;
    }
}

fn test3(_1: &Foo, _2: isize) -> isize {
    debug x => _1;
    debug a => _2;
    let mut _0: isize;

    bb0: {
        _0 = Foo::inherent_method(_1, _2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn Bar::extension_method(_1: &Self, _2: isize) -> isize {
    debug self => _1;
    debug a => _2;
    let mut _0: isize;

    bb0: {
        _0 = _2;
        return;
    }
}

fn test4(_1: &Foo, _2: isize) -> isize {
    debug x => _1;
    debug a => _2;
    let mut _0: isize;

    bb0: {
        _0 = <Foo as Bar>::extension_method(_1, _2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn test5(_1: &dyn Bar, _2: isize) -> isize {
    debug x => _1;
    debug a => _2;
    let mut _0: isize;

    bb0: {
        _0 = <dyn Bar as Bar>::extension_method(_1, _2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn test6(_1: &T, _2: isize) -> isize {
    debug x => _1;
    debug a => _2;
    let mut _0: isize;

    bb0: {
        _0 = <T as Bar>::extension_method(_1, _2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/mir/mir_codegen_calls.rs:58:1: 58:19>::one() -> isize {
    let mut _0: isize;

    bb0: {
        _0 = const 1_isize;
        return;
    }
}

fn test7() -> isize {
    let mut _0: isize;

    bb0: {
        _0 = <isize as One>::one() -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/mir/mir_codegen_calls.rs:68:1: 68:9>::two() -> isize {
    let mut _0: isize;

    bb0: {
        _0 = const 2_isize;
        return;
    }
}

fn test8() -> isize {
    let mut _0: isize;

    bb0: {
        _0 = Two::two() -> bb1;
    }

    bb1: {
        return;
    }
}

fn simple_extern(_1: u32, _2: (u32, u32)) -> u32 {
    debug x => _1;
    debug y => _2;
    let mut _0: u32;
    let mut _3: u32;
    let mut _4: u32;
    let mut _5: u32;

    bb0: {
        _4 = (_2.0: u32);
        _5 = (_2.1: u32);
        _3 = Mul(move _4, move _5);
        _0 = Add(_1, move _3);
        return;
    }
}

fn test9() -> u32 {
    let mut _0: u32;
    let mut _1: (u32, u32);

    bb0: {
        _1 = (const 42_u32, const 43_u32);
        _0 = simple_extern(const 41_u32, move _1) -> bb1;
    }

    bb1: {
        return;
    }
}

fn test_closure(_1: &F, _2: i32, _3: i32) -> i32 {
    debug f => _1;
    debug x => _2;
    debug y => _3;
    let mut _0: i32;
    let mut _4: (i32, i32);

    bb0: {
        _4 = (_2, _3);
        _0 = <F as Fn<(i32, i32)>>::call(_1, move _4) -> bb1;
    }

    bb1: {
        return;
    }
}

fn test_fn_object(_1: &dyn Fn(i32, i32) -> i32, _2: i32, _3: i32) -> i32 {
    debug f => _1;
    debug x => _2;
    debug y => _3;
    let mut _0: i32;
    let mut _4: (i32, i32);

    bb0: {
        _4 = (_2, _3);
        _0 = <dyn Fn(i32, i32) -> i32 as Fn<(i32, i32)>>::call(_1, move _4) -> bb1;
    }

    bb1: {
        return;
    }
}

fn test_fn_impl(_1: &&dyn Fn(i32, i32) -> i32, _2: i32, _3: i32) -> i32 {
    debug f => _1;
    debug x => _2;
    debug y => _3;
    let mut _0: i32;
    let mut _4: (i32, i32);

    bb0: {
        _4 = (_2, _3);
        _0 = <&dyn Fn(i32, i32) -> i32 as Fn<(i32, i32)>>::call(_1, move _4) -> bb1;
    }

    bb1: {
        return;
    }
}

fn test_fn_direct_call(_1: &F, _2: i32, _3: i32) -> i32 {
    debug f => _1;
    debug x => _2;
    debug y => _3;
    let mut _0: i32;
    let mut _4: (i32, i32);

    bb0: {
        _4 = (_2, _3);
        _0 = <F as Fn<(i32, i32)>>::call(_1, move _4) -> bb1;
    }

    bb1: {
        return;
    }
}

fn test_fn_const_call(_1: &F) -> i32 {
    debug f => _1;
    let mut _0: i32;
    let mut _2: (i32, i32);

    bb0: {
        _2 = (const 100_i32, const -1_i32);
        _0 = <F as Fn<(i32, i32)>>::call(_1, move _2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn test_fn_nil_call(_1: &F) -> i32 {
    debug f => _1;
    let mut _0: i32;

    bb0: {
        _0 = <F as Fn<()>>::call(_1, const ()) -> bb1;
    }

    bb1: {
        return;
    }
}

fn test_fn_transmute_zst(_1: ()) -> [(); 1] {
    debug x => const ();
    let mut _0: [(); 1];
    scope 1 {
    }

    bb0: {
        _0 = test_fn_transmute_zst::id::<[(); 1]>(const [()]) -> bb1;
    }

    bb1: {
        return;
    }
}

test_fn_transmute_zst::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

fn test_fn_transmute_zst::id(_1: T) -> T {
    debug x => _1;
    let mut _0: T;

    bb0: {
        _0 = move _1;
        return;
    }
}

fn test_fn_ignored_pair() -> ((), ()) {
    let mut _0: ((), ());

    bb0: {
        return;
    }
}

fn test_fn_ignored_pair_0() -> () {
    let mut _0: ();
    let mut _1: ((), ());

    bb0: {
        _1 = test_fn_ignored_pair() -> bb1;
    }

    bb1: {
        return;
    }
}

fn id(_1: T) -> T {
    debug x => _1;
    let mut _0: T;

    bb0: {
        _0 = move _1;
        return;
    }
}

fn ignored_pair_named() -> (Foo, Foo) {
    let mut _0: (Foo, Foo);

    bb0: {
        return;
    }
}

fn test_fn_ignored_pair_named() -> (Foo, Foo) {
    let mut _0: (Foo, Foo);
    let mut _1: (Foo, Foo);

    bb0: {
        _1 = ignored_pair_named() -> bb1;
    }

    bb1: {
        _0 = id::<(Foo, Foo)>(const (Foo, Foo)) -> bb2;
    }

    bb2: {
        return;
    }
}

fn test_fn_nested_pair(_1: &((f32, f32), u32)) -> (f32, f32) {
    debug x => _1;
    let mut _0: (f32, f32);
    let _2: ((f32, f32), u32);
    let mut _4: f32;
    let mut _5: f32;
    scope 1 {
        debug y => _2;
        let _3: (f32, f32);
        scope 2 {
            debug z => _3;
        }
    }

    bb0: {
        _2 = (*_1);
        _3 = (_2.0: (f32, f32));
        _4 = (_3.0: f32);
        _5 = (_3.1: f32);
        _0 = (move _4, move _5);
        return;
    }
}

fn test_fn_const_arg_by_ref(_1: [u64; 4]) -> u64 {
    debug a => _1;
    let mut _0: u64;
    let _2: &mut [u64; 4];
    let mut _3: &mut [u64; 4];
    let mut _4: u64;
    let _5: usize;
    let mut _6: usize;
    let mut _7: bool;
    let _8: usize;
    let mut _9: usize;
    let mut _10: bool;
    let mut _11: u64;
    let _12: usize;
    let mut _13: usize;
    let mut _14: bool;
    let _15: usize;
    let mut _16: usize;
    let mut _17: bool;
    let mut _18: u64;
    let _19: usize;
    let mut _20: usize;
    let mut _21: bool;
    let _22: usize;
    let mut _23: usize;
    let mut _24: bool;
    let _25: usize;
    let mut _26: usize;
    let mut _27: bool;
    scope 1 {
        debug a => _2;
    }

    bb0: {
        _3 = &mut _1;
        _2 = test::black_box::<&mut [u64; 4]>(move _3) -> bb1;
    }

    bb1: {
        _5 = const 1_usize;
        _6 = const 4_usize;
        _7 = Lt(_5, _6);
        assert(move _7, "index out of bounds: the length is {} but the index is {}", move _6, _5) -> bb2;
    }

    bb2: {
        _4 = (*_2)[_5];
        _8 = const 0_usize;
        _9 = const 4_usize;
        _10 = Lt(_8, _9);
        assert(move _10, "index out of bounds: the length is {} but the index is {}", move _9, _8) -> bb3;
    }

    bb3: {
        (*_2)[_8] = Add((*_2)[_8], move _4);
        _12 = const 2_usize;
        _13 = const 4_usize;
        _14 = Lt(_12, _13);
        assert(move _14, "index out of bounds: the length is {} but the index is {}", move _13, _12) -> bb4;
    }

    bb4: {
        _11 = (*_2)[_12];
        _15 = const 0_usize;
        _16 = const 4_usize;
        _17 = Lt(_15, _16);
        assert(move _17, "index out of bounds: the length is {} but the index is {}", move _16, _15) -> bb5;
    }

    bb5: {
        (*_2)[_15] = Add((*_2)[_15], move _11);
        _19 = const 3_usize;
        _20 = const 4_usize;
        _21 = Lt(_19, _20);
        assert(move _21, "index out of bounds: the length is {} but the index is {}", move _20, _19) -> bb6;
    }

    bb6: {
        _18 = (*_2)[_19];
        _22 = const 0_usize;
        _23 = const 4_usize;
        _24 = Lt(_22, _23);
        assert(move _24, "index out of bounds: the length is {} but the index is {}", move _23, _22) -> bb7;
    }

    bb7: {
        (*_2)[_22] = Add((*_2)[_22], move _18);
        _25 = const 0_usize;
        _26 = const 4_usize;
        _27 = Lt(_25, _26);
        assert(move _27, "index out of bounds: the length is {} but the index is {}", move _26, _25) -> bb8;
    }

    bb8: {
        _0 = (*_2)[_25];
        return;
    }
}

test_fn_const_arg_by_ref::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&(isize, (i32, i32), &[i32]), &(isize, (i32, i32), &[i32]));
    let mut _2: &(isize, (i32, i32), &[i32]);
    let _3: (isize, (i32, i32), &[i32]);
    let mut _4: (i32, i32);
    let mut _5: &[i32];
    let _6: &[i32; 3];
    let _7: [i32; 3];
    let mut _8: &(isize, (i32, i32), &[i32]);
    let _9: (isize, (i32, i32), &[i32]);
    let mut _10: (i32, i32);
    let mut _11: &[i32];
    let _12: &[i32];
    let mut _13: &[i32; 3];
    let _14: [i32; 3];
    let _15: &(isize, (i32, i32), &[i32]);
    let _16: &(isize, (i32, i32), &[i32]);
    let mut _17: bool;
    let mut _18: bool;
    let _20: !;
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _22: (&isize, &isize);
    let mut _23: &isize;
    let _24: isize;
    let mut _25: &isize;
    let _26: isize;
    let _27: &isize;
    let _28: &isize;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: isize;
    let mut _32: isize;
    let _34: !;
    let mut _35: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _36: (&isize, &isize);
    let mut _37: &isize;
    let _38: isize;
    let _39: &Foo;
    let _40: Foo;
    let mut _41: &isize;
    let _42: isize;
    let _43: &isize;
    let _44: &isize;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: isize;
    let mut _48: isize;
    let _50: !;
    let mut _51: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _52: (&isize, &isize);
    let mut _53: &isize;
    let _54: isize;
    let _55: &Foo;
    let _56: Foo;
    let mut _57: &isize;
    let _58: isize;
    let _59: &isize;
    let _60: &isize;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: isize;
    let mut _64: isize;
    let _66: !;
    let mut _67: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _68: (&isize, &isize);
    let mut _69: &isize;
    let _70: isize;
    let mut _71: &dyn Bar;
    let _72: &Foo;
    let _73: Foo;
    let mut _74: &isize;
    let _75: isize;
    let _76: &isize;
    let _77: &isize;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: isize;
    let mut _81: isize;
    let _83: !;
    let mut _84: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _85: (&isize, &isize);
    let mut _86: &isize;
    let _87: isize;
    let _88: &Foo;
    let _89: Foo;
    let mut _90: &isize;
    let _91: isize;
    let _92: &isize;
    let _93: &isize;
    let mut _94: bool;
    let mut _95: bool;
    let mut _96: isize;
    let mut _97: isize;
    let _99: !;
    let mut _100: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _101: (&isize, &isize);
    let mut _102: &isize;
    let _103: isize;
    let mut _104: &isize;
    let _105: isize;
    let _106: &isize;
    let _107: &isize;
    let mut _108: bool;
    let mut _109: bool;
    let mut _110: isize;
    let mut _111: isize;
    let _113: !;
    let mut _114: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _115: (&isize, &isize);
    let mut _116: &isize;
    let _117: isize;
    let mut _118: &isize;
    let _119: isize;
    let _120: &isize;
    let _121: &isize;
    let mut _122: bool;
    let mut _123: bool;
    let mut _124: isize;
    let mut _125: isize;
    let _127: !;
    let mut _128: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _129: (&u32, &u32);
    let mut _130: &u32;
    let _131: u32;
    let mut _132: &u32;
    let _133: u32;
    let mut _134: u32;
    let _135: &u32;
    let _136: &u32;
    let mut _137: bool;
    let mut _138: bool;
    let mut _139: u32;
    let mut _140: u32;
    let _142: !;
    let mut _143: std::option::Option<std::fmt::Arguments<'_>>;
    let _144: i32;
    let mut _146: &i32;
    let mut _147: (&i32, &i32);
    let mut _148: &i32;
    let _149: i32;
    let _150: &[closure@ui/mir/mir_codegen_calls.rs:175:19: 175:35];
    let mut _151: &i32;
    let _152: i32;
    let mut _155: bool;
    let mut _156: bool;
    let mut _157: i32;
    let mut _158: i32;
    let _160: !;
    let mut _161: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _162: (&i32, &i32);
    let mut _163: &i32;
    let _164: i32;
    let _165: &[closure@ui/mir/mir_codegen_calls.rs:175:19: 175:35];
    let mut _166: &i32;
    let _167: i32;
    let mut _170: bool;
    let mut _171: bool;
    let mut _172: i32;
    let mut _173: i32;
    let _175: !;
    let mut _176: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _178: &dyn std::ops::Fn(i32, i32) -> i32;
    let _179: &[closure@ui/mir/mir_codegen_calls.rs:175:19: 175:35];
    let mut _180: (&i32, &i32);
    let mut _181: &i32;
    let _182: i32;
    let mut _183: &dyn std::ops::Fn(i32, i32) -> i32;
    let mut _184: &i32;
    let _185: i32;
    let mut _188: bool;
    let mut _189: bool;
    let mut _190: i32;
    let mut _191: i32;
    let _193: !;
    let mut _194: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _195: (&i32, &i32);
    let mut _196: &i32;
    let _197: i32;
    let _198: &&dyn std::ops::Fn(i32, i32) -> i32;
    let mut _199: &i32;
    let _200: i32;
    let mut _203: bool;
    let mut _204: bool;
    let mut _205: i32;
    let mut _206: i32;
    let _208: !;
    let mut _209: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _210: (&i32, &i32);
    let mut _211: &i32;
    let _212: i32;
    let _213: &[closure@ui/mir/mir_codegen_calls.rs:175:19: 175:35];
    let mut _214: &i32;
    let _215: i32;
    let mut _218: bool;
    let mut _219: bool;
    let mut _220: i32;
    let mut _221: i32;
    let _223: !;
    let mut _224: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _225: (&i32, &i32);
    let mut _226: &i32;
    let _227: i32;
    let _228: &[closure@ui/mir/mir_codegen_calls.rs:183:35: 183:37];
    let _229: [closure@ui/mir/mir_codegen_calls.rs:183:35: 183:37];
    let mut _230: &i32;
    let _231: i32;
    let mut _234: bool;
    let mut _235: bool;
    let mut _236: i32;
    let mut _237: i32;
    let _239: !;
    let mut _240: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _241: (&[(); 1], &[(); 1]);
    let mut _242: &[(); 1];
    let _243: [(); 1];
    let mut _244: &[(); 1];
    let _245: [(); 1];
    let mut _248: bool;
    let mut _249: bool;
    let _251: !;
    let mut _252: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _253: (&(), &());
    let mut _254: &();
    let _255: ();
    let mut _256: &();
    let _257: ();
    let mut _260: bool;
    let mut _261: bool;
    let _263: !;
    let mut _264: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _265: (&(Foo, Foo), &(Foo, Foo));
    let mut _266: &(Foo, Foo);
    let _267: (Foo, Foo);
    let mut _268: &(Foo, Foo);
    let _269: (Foo, Foo);
    let mut _272: bool;
    let mut _273: bool;
    let _275: !;
    let mut _276: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _277: (&(f32, f32), &(f32, f32));
    let mut _278: &(f32, f32);
    let _279: (f32, f32);
    let _280: &((f32, f32), u32);
    let _281: ((f32, f32), u32);
    let mut _282: (f32, f32);
    let mut _283: &(f32, f32);
    let _284: (f32, f32);
    let mut _287: bool;
    let mut _288: bool;
    let _290: !;
    let mut _291: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _292: (&u64, &u64);
    let mut _293: &u64;
    let _294: u64;
    let mut _295: &u64;
    let _296: u64;
    let mut _297: u64;
    let mut _298: u64;
    let mut _301: bool;
    let mut _302: bool;
    let mut _303: u64;
    let mut _304: u64;
    let _306: !;
    let mut _307: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _15;
        debug right_val => _16;
        let _19: core::panicking::AssertKind;
        scope 2 {
            debug kind => _19;
        }
    }
    scope 3 {
        debug left_val => _27;
        debug right_val => _28;
        let _33: core::panicking::AssertKind;
        scope 4 {
            debug kind => _33;
        }
    }
    scope 5 {
        debug left_val => _43;
        debug right_val => _44;
        let _49: core::panicking::AssertKind;
        scope 6 {
            debug kind => _49;
        }
    }
    scope 7 {
        debug left_val => _59;
        debug right_val => _60;
        let _65: core::panicking::AssertKind;
        scope 8 {
            debug kind => _65;
        }
    }
    scope 9 {
        debug left_val => _76;
        debug right_val => _77;
        let _82: core::panicking::AssertKind;
        scope 10 {
            debug kind => _82;
        }
    }
    scope 11 {
        debug left_val => _92;
        debug right_val => _93;
        let _98: core::panicking::AssertKind;
        scope 12 {
            debug kind => _98;
        }
    }
    scope 13 {
        debug left_val => _106;
        debug right_val => _107;
        let _112: core::panicking::AssertKind;
        scope 14 {
            debug kind => _112;
        }
    }
    scope 15 {
        debug left_val => _120;
        debug right_val => _121;
        let _126: core::panicking::AssertKind;
        scope 16 {
            debug kind => _126;
        }
    }
    scope 17 {
        debug left_val => _135;
        debug right_val => _136;
        let _141: core::panicking::AssertKind;
        scope 18 {
            debug kind => _141;
        }
    }
    scope 19 {
        debug r => _144;
        let _145: [closure@ui/mir/mir_codegen_calls.rs:175:19: 175:35];
        scope 20 {
            debug closure => _145;
            let _153: &i32;
            let _154: &i32;
            let _168: &i32;
            let _169: &i32;
            let _177: &dyn std::ops::Fn(i32, i32) -> i32;
            scope 21 {
                debug left_val => _153;
                debug right_val => _154;
                let _159: core::panicking::AssertKind;
                scope 22 {
                    debug kind => _159;
                }
            }
            scope 23 {
                debug left_val => _168;
                debug right_val => _169;
                let _174: core::panicking::AssertKind;
                scope 24 {
                    debug kind => _174;
                }
            }
            scope 25 {
                debug function_object => _177;
                let _186: &i32;
                let _187: &i32;
                let _201: &i32;
                let _202: &i32;
                let _216: &i32;
                let _217: &i32;
                let _232: &i32;
                let _233: &i32;
                let _246: &[(); 1];
                let _247: &[(); 1];
                let _258: &();
                let _259: &();
                let _270: &(Foo, Foo);
                let _271: &(Foo, Foo);
                let _285: &(f32, f32);
                let _286: &(f32, f32);
                let _299: &u64;
                let _300: &u64;
                scope 26 {
                    debug left_val => _186;
                    debug right_val => _187;
                    let _192: core::panicking::AssertKind;
                    scope 27 {
                        debug kind => _192;
                    }
                }
                scope 28 {
                    debug left_val => _201;
                    debug right_val => _202;
                    let _207: core::panicking::AssertKind;
                    scope 29 {
                        debug kind => _207;
                    }
                }
                scope 30 {
                    debug left_val => _216;
                    debug right_val => _217;
                    let _222: core::panicking::AssertKind;
                    scope 31 {
                        debug kind => _222;
                    }
                }
                scope 32 {
                    debug left_val => _232;
                    debug right_val => _233;
                    let _238: core::panicking::AssertKind;
                    scope 33 {
                        debug kind => _238;
                    }
                }
                scope 34 {
                    debug left_val => _246;
                    debug right_val => _247;
                    let _250: core::panicking::AssertKind;
                    scope 35 {
                        debug kind => _250;
                    }
                }
                scope 36 {
                    debug left_val => _258;
                    debug right_val => _259;
                    let _262: core::panicking::AssertKind;
                    scope 37 {
                        debug kind => _262;
                    }
                }
                scope 38 {
                    debug left_val => _270;
                    debug right_val => _271;
                    let _274: core::panicking::AssertKind;
                    scope 39 {
                        debug kind => _274;
                    }
                }
                scope 40 {
                    debug left_val => _285;
                    debug right_val => _286;
                    let _289: core::panicking::AssertKind;
                    scope 41 {
                        debug kind => _289;
                    }
                }
                scope 42 {
                    debug left_val => _299;
                    debug right_val => _300;
                    let _305: core::panicking::AssertKind;
                    scope 43 {
                        debug kind => _305;
                    }
                }
            }
        }
    }

    bb0: {
        _4 = (const 2_i32, const 3_i32);
        _7 = [const 4_i32, const 5_i32, const 6_i32];
        _6 = &_7;
        _5 = _6 as &[i32] (Pointer(Unsize));
        _3 = test1(const 1_isize, move _4, move _5) -> bb1;
    }

    bb1: {
        _2 = &_3;
        _10 = (const 2_i32, const 3_i32);
        _14 = [const 4_i32, const 5_i32, const 6_i32];
        _13 = &_14;
        _12 = <[i32; 3] as Index<RangeFull>>::index(move _13, const RangeFull) -> bb2;
    }

    bb2: {
        _11 = _12;
        _9 = (const 1_isize, move _10, move _11);
        _8 = &_9;
        _1 = (move _2, move _8);
        _15 = (_1.0: &(isize, (i32, i32), &[i32]));
        _16 = (_1.1: &(isize, (i32, i32), &[i32]));
        _18 = <(isize, (i32, i32), &[i32]) as PartialEq>::eq(_15, _16) -> bb3;
    }

    bb3: {
        _17 = Not(move _18);
        switchInt(move _17) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _19 = core::panicking::AssertKind::Eq;
        _21 = Option::<Arguments<'_>>::None;
        _20 = core::panicking::assert_failed::<(isize, (i32, i32), &[i32]), (isize, (i32, i32), &[i32])>(move _19, _15, _16, move _21);
    }

    bb5: {
        _24 = test2(const 98_isize) -> bb6;
    }

    bb6: {
        _23 = &_24;
        _26 = const 98_isize;
        _25 = &_26;
        _22 = (move _23, move _25);
        _27 = (_22.0: &isize);
        _28 = (_22.1: &isize);
        _31 = (*_27);
        _32 = (*_28);
        _30 = Eq(move _31, move _32);
        _29 = Not(move _30);
        switchInt(move _29) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _33 = core::panicking::AssertKind::Eq;
        _35 = Option::<Arguments<'_>>::None;
        _34 = core::panicking::assert_failed::<isize, isize>(move _33, _27, _28, move _35);
    }

    bb8: {
        _39 = &_40;
        _38 = test3(_39, const 42_isize) -> bb9;
    }

    bb9: {
        _37 = &_38;
        _42 = const 42_isize;
        _41 = &_42;
        _36 = (move _37, move _41);
        _43 = (_36.0: &isize);
        _44 = (_36.1: &isize);
        _47 = (*_43);
        _48 = (*_44);
        _46 = Eq(move _47, move _48);
        _45 = Not(move _46);
        switchInt(move _45) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _49 = core::panicking::AssertKind::Eq;
        _51 = Option::<Arguments<'_>>::None;
        _50 = core::panicking::assert_failed::<isize, isize>(move _49, _43, _44, move _51);
    }

    bb11: {
        _55 = &_56;
        _54 = test4(_55, const 970_isize) -> bb12;
    }

    bb12: {
        _53 = &_54;
        _58 = const 970_isize;
        _57 = &_58;
        _52 = (move _53, move _57);
        _59 = (_52.0: &isize);
        _60 = (_52.1: &isize);
        _63 = (*_59);
        _64 = (*_60);
        _62 = Eq(move _63, move _64);
        _61 = Not(move _62);
        switchInt(move _61) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _65 = core::panicking::AssertKind::Eq;
        _67 = Option::<Arguments<'_>>::None;
        _66 = core::panicking::assert_failed::<isize, isize>(move _65, _59, _60, move _67);
    }

    bb14: {
        _72 = &_73;
        _71 = _72 as &dyn Bar (Pointer(Unsize));
        _70 = test5(move _71, const 8576_isize) -> bb15;
    }

    bb15: {
        _69 = &_70;
        _75 = const 8576_isize;
        _74 = &_75;
        _68 = (move _69, move _74);
        _76 = (_68.0: &isize);
        _77 = (_68.1: &isize);
        _80 = (*_76);
        _81 = (*_77);
        _79 = Eq(move _80, move _81);
        _78 = Not(move _79);
        switchInt(move _78) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _82 = core::panicking::AssertKind::Eq;
        _84 = Option::<Arguments<'_>>::None;
        _83 = core::panicking::assert_failed::<isize, isize>(move _82, _76, _77, move _84);
    }

    bb17: {
        _88 = &_89;
        _87 = test6::<Foo>(_88, const 12367_isize) -> bb18;
    }

    bb18: {
        _86 = &_87;
        _91 = const 12367_isize;
        _90 = &_91;
        _85 = (move _86, move _90);
        _92 = (_85.0: &isize);
        _93 = (_85.1: &isize);
        _96 = (*_92);
        _97 = (*_93);
        _95 = Eq(move _96, move _97);
        _94 = Not(move _95);
        switchInt(move _94) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _98 = core::panicking::AssertKind::Eq;
        _100 = Option::<Arguments<'_>>::None;
        _99 = core::panicking::assert_failed::<isize, isize>(move _98, _92, _93, move _100);
    }

    bb20: {
        _103 = test7() -> bb21;
    }

    bb21: {
        _102 = &_103;
        _105 = const 1_isize;
        _104 = &_105;
        _101 = (move _102, move _104);
        _106 = (_101.0: &isize);
        _107 = (_101.1: &isize);
        _110 = (*_106);
        _111 = (*_107);
        _109 = Eq(move _110, move _111);
        _108 = Not(move _109);
        switchInt(move _108) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        _112 = core::panicking::AssertKind::Eq;
        _114 = Option::<Arguments<'_>>::None;
        _113 = core::panicking::assert_failed::<isize, isize>(move _112, _106, _107, move _114);
    }

    bb23: {
        _117 = test8() -> bb24;
    }

    bb24: {
        _116 = &_117;
        _119 = const 2_isize;
        _118 = &_119;
        _115 = (move _116, move _118);
        _120 = (_115.0: &isize);
        _121 = (_115.1: &isize);
        _124 = (*_120);
        _125 = (*_121);
        _123 = Eq(move _124, move _125);
        _122 = Not(move _123);
        switchInt(move _122) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _126 = core::panicking::AssertKind::Eq;
        _128 = Option::<Arguments<'_>>::None;
        _127 = core::panicking::assert_failed::<isize, isize>(move _126, _120, _121, move _128);
    }

    bb26: {
        _131 = test9() -> bb27;
    }

    bb27: {
        _130 = &_131;
        _134 = Mul(const 42_u32, const 43_u32);
        _133 = Add(const 41_u32, move _134);
        _132 = &_133;
        _129 = (move _130, move _132);
        _135 = (_129.0: &u32);
        _136 = (_129.1: &u32);
        _139 = (*_135);
        _140 = (*_136);
        _138 = Eq(move _139, move _140);
        _137 = Not(move _138);
        switchInt(move _137) -> [0: bb29, otherwise: bb28];
    }

    bb28: {
        _141 = core::panicking::AssertKind::Eq;
        _143 = Option::<Arguments<'_>>::None;
        _142 = core::panicking::assert_failed::<u32, u32>(move _141, _135, _136, move _143);
    }

    bb29: {
        _144 = const 3_i32;
        _146 = &_144;
        _145 = [closure@ui/mir/mir_codegen_calls.rs:175:19: 175:35] { r: move _146 };
        _150 = &_145;
        _149 = test_fn_const_call::<[closure@ui/mir/mir_codegen_calls.rs:175:19: 175:35]>(_150) -> bb30;
    }

    bb30: {
        _148 = &_149;
        _152 = const 294_i32;
        _151 = &_152;
        _147 = (move _148, move _151);
        _153 = (_147.0: &i32);
        _154 = (_147.1: &i32);
        _157 = (*_153);
        _158 = (*_154);
        _156 = Eq(move _157, move _158);
        _155 = Not(move _156);
        switchInt(move _155) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _159 = core::panicking::AssertKind::Eq;
        _161 = Option::<Arguments<'_>>::None;
        _160 = core::panicking::assert_failed::<i32, i32>(move _159, _153, _154, move _161);
    }

    bb32: {
        _165 = &_145;
        _164 = test_closure::<[closure@ui/mir/mir_codegen_calls.rs:175:19: 175:35]>(_165, const 100_i32, const 1_i32) -> bb33;
    }

    bb33: {
        _163 = &_164;
        _167 = const 306_i32;
        _166 = &_167;
        _162 = (move _163, move _166);
        _168 = (_162.0: &i32);
        _169 = (_162.1: &i32);
        _172 = (*_168);
        _173 = (*_169);
        _171 = Eq(move _172, move _173);
        _170 = Not(move _171);
        switchInt(move _170) -> [0: bb35, otherwise: bb34];
    }

    bb34: {
        _174 = core::panicking::AssertKind::Eq;
        _176 = Option::<Arguments<'_>>::None;
        _175 = core::panicking::assert_failed::<i32, i32>(move _174, _168, _169, move _176);
    }

    bb35: {
        _179 = &_145;
        _178 = _179 as &dyn std::ops::Fn(i32, i32) -> i32 (Pointer(Unsize));
        _177 = _178;
        _183 = _177;
        _182 = test_fn_object(move _183, const 100_i32, const 2_i32) -> bb36;
    }

    bb36: {
        _181 = &_182;
        _185 = const 312_i32;
        _184 = &_185;
        _180 = (move _181, move _184);
        _186 = (_180.0: &i32);
        _187 = (_180.1: &i32);
        _190 = (*_186);
        _191 = (*_187);
        _189 = Eq(move _190, move _191);
        _188 = Not(move _189);
        switchInt(move _188) -> [0: bb38, otherwise: bb37];
    }

    bb37: {
        _192 = core::panicking::AssertKind::Eq;
        _194 = Option::<Arguments<'_>>::None;
        _193 = core::panicking::assert_failed::<i32, i32>(move _192, _186, _187, move _194);
    }

    bb38: {
        _198 = &_177;
        _197 = test_fn_impl(_198, const 100_i32, const 3_i32) -> bb39;
    }

    bb39: {
        _196 = &_197;
        _200 = const 318_i32;
        _199 = &_200;
        _195 = (move _196, move _199);
        _201 = (_195.0: &i32);
        _202 = (_195.1: &i32);
        _205 = (*_201);
        _206 = (*_202);
        _204 = Eq(move _205, move _206);
        _203 = Not(move _204);
        switchInt(move _203) -> [0: bb41, otherwise: bb40];
    }

    bb40: {
        _207 = core::panicking::AssertKind::Eq;
        _209 = Option::<Arguments<'_>>::None;
        _208 = core::panicking::assert_failed::<i32, i32>(move _207, _201, _202, move _209);
    }

    bb41: {
        _213 = &_145;
        _212 = test_fn_direct_call::<[closure@ui/mir/mir_codegen_calls.rs:175:19: 175:35]>(_213, const 100_i32, const 4_i32) -> bb42;
    }

    bb42: {
        _211 = &_212;
        _215 = const 324_i32;
        _214 = &_215;
        _210 = (move _211, move _214);
        _216 = (_210.0: &i32);
        _217 = (_210.1: &i32);
        _220 = (*_216);
        _221 = (*_217);
        _219 = Eq(move _220, move _221);
        _218 = Not(move _219);
        switchInt(move _218) -> [0: bb44, otherwise: bb43];
    }

    bb43: {
        _222 = core::panicking::AssertKind::Eq;
        _224 = Option::<Arguments<'_>>::None;
        _223 = core::panicking::assert_failed::<i32, i32>(move _222, _216, _217, move _224);
    }

    bb44: {
        _228 = &_229;
        _227 = test_fn_nil_call::<[closure@ui/mir/mir_codegen_calls.rs:183:35: 183:37]>(_228) -> bb45;
    }

    bb45: {
        _226 = &_227;
        _231 = const 42_i32;
        _230 = &_231;
        _225 = (move _226, move _230);
        _232 = (_225.0: &i32);
        _233 = (_225.1: &i32);
        _236 = (*_232);
        _237 = (*_233);
        _235 = Eq(move _236, move _237);
        _234 = Not(move _235);
        switchInt(move _234) -> [0: bb47, otherwise: bb46];
    }

    bb46: {
        _238 = core::panicking::AssertKind::Eq;
        _240 = Option::<Arguments<'_>>::None;
        _239 = core::panicking::assert_failed::<i32, i32>(move _238, _232, _233, move _240);
    }

    bb47: {
        _243 = test_fn_transmute_zst(const ()) -> bb48;
    }

    bb48: {
        _242 = &_243;
        _244 = &_245;
        _241 = (move _242, move _244);
        _246 = (_241.0: &[(); 1]);
        _247 = (_241.1: &[(); 1]);
        _249 = <[(); 1] as PartialEq>::eq(_246, _247) -> bb49;
    }

    bb49: {
        _248 = Not(move _249);
        switchInt(move _248) -> [0: bb51, otherwise: bb50];
    }

    bb50: {
        _250 = core::panicking::AssertKind::Eq;
        _252 = Option::<Arguments<'_>>::None;
        _251 = core::panicking::assert_failed::<[(); 1], [(); 1]>(move _250, _246, _247, move _252);
    }

    bb51: {
        _255 = test_fn_ignored_pair_0() -> bb52;
    }

    bb52: {
        _254 = &_255;
        _256 = &_257;
        _253 = (move _254, move _256);
        _258 = (_253.0: &());
        _259 = (_253.1: &());
        _261 = <() as PartialEq>::eq(_258, _259) -> bb53;
    }

    bb53: {
        _260 = Not(move _261);
        switchInt(move _260) -> [0: bb55, otherwise: bb54];
    }

    bb54: {
        _262 = core::panicking::AssertKind::Eq;
        _264 = Option::<Arguments<'_>>::None;
        _263 = core::panicking::assert_failed::<(), ()>(move _262, _258, _259, move _264);
    }

    bb55: {
        _267 = test_fn_ignored_pair_named() -> bb56;
    }

    bb56: {
        _266 = &_267;
        _268 = &_269;
        _265 = (move _266, move _268);
        _270 = (_265.0: &(Foo, Foo));
        _271 = (_265.1: &(Foo, Foo));
        _273 = <(Foo, Foo) as PartialEq>::eq(_270, _271) -> bb57;
    }

    bb57: {
        _272 = Not(move _273);
        switchInt(move _272) -> [0: bb59, otherwise: bb58];
    }

    bb58: {
        _274 = core::panicking::AssertKind::Eq;
        _276 = Option::<Arguments<'_>>::None;
        _275 = core::panicking::assert_failed::<(Foo, Foo), (Foo, Foo)>(move _274, _270, _271, move _276);
    }

    bb59: {
        _282 = (const 1f32, const 2f32);
        _281 = (move _282, const 0_u32);
        _280 = &_281;
        _279 = test_fn_nested_pair(_280) -> bb60;
    }

    bb60: {
        _278 = &_279;
        _284 = (const 1f32, const 2f32);
        _283 = &_284;
        _277 = (move _278, move _283);
        _285 = (_277.0: &(f32, f32));
        _286 = (_277.1: &(f32, f32));
        _288 = <(f32, f32) as PartialEq>::eq(_285, _286) -> bb61;
    }

    bb61: {
        _287 = Not(move _288);
        switchInt(move _287) -> [0: bb63, otherwise: bb62];
    }

    bb62: {
        _289 = core::panicking::AssertKind::Eq;
        _291 = Option::<Arguments<'_>>::None;
        _290 = core::panicking::assert_failed::<(f32, f32), (f32, f32)>(move _289, _285, _286, move _291);
    }

    bb63: {
        _294 = test_fn_const_arg_by_ref(const _) -> bb64;
    }

    bb64: {
        _293 = &_294;
        _298 = Add(const 1_u64, const 2_u64);
        _297 = Add(move _298, const 3_u64);
        _296 = Add(move _297, const 4_u64);
        _295 = &_296;
        _292 = (move _293, move _295);
        _299 = (_292.0: &u64);
        _300 = (_292.1: &u64);
        _303 = (*_299);
        _304 = (*_300);
        _302 = Eq(move _303, move _304);
        _301 = Not(move _302);
        switchInt(move _301) -> [0: bb66, otherwise: bb65];
    }

    bb65: {
        _305 = core::panicking::AssertKind::Eq;
        _307 = Option::<Arguments<'_>>::None;
        _306 = core::panicking::assert_failed::<u64, u64>(move _305, _299, _300, move _307);
    }

    bb66: {
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/mir/mir_codegen_calls.rs:175:19: 175:35], _2: i32, _3: i32) -> i32 {
    debug x => _2;
    debug y => _3;
    debug r => (*((*_1).0: &i32));
    let mut _0: i32;
    let mut _4: i32;
    let mut _5: i32;
    let mut _6: i32;
    let mut _7: &i32;

    bb0: {
        _7 = deref_copy ((*_1).0: &i32);
        _4 = (*_7);
        _6 = Mul(_3, const 2_i32);
        _5 = Add(_2, move _6);
        _0 = Mul(move _4, move _5);
        return;
    }
}

fn main::{closure#1}(_1: &[closure@ui/mir/mir_codegen_calls.rs:183:35: 183:37]) -> i32 {
    let mut _0: i32;

    bb0: {
        _0 = const 42_i32;
        return;
    }
}

const ARRAY: [u64; 4] = {
    let mut _0: [u64; 4];

    bb0: {
        _0 = [const 1_u64, const 2_u64, const 3_u64, const 4_u64];
        return;
    }
}

ARRAY::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}
