// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/mir/thir-constparam-temp.rs:8:10: 8:19>::eq(_1: &Yikes, _2: &Yikes) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;

    bb0: {
        _0 = const true;
        return;
    }
}

fn <impl at ui/mir/thir-constparam-temp.rs:8:21: 8:23>::assert_receiver_is_total_eq(_1: &Yikes) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/mir/thir-constparam-temp.rs:11:1: 11:11>::mut_self(_1: &mut Yikes) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn foo() -> () {
    let mut _0: ();
    let mut _1: &mut Yikes;
    let mut _2: Yikes;

    bb0: {
        _1 = &mut _2;
        _0 = Yikes::mut_self(move _1) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        _0 = foo::<Yikes>() -> bb1;
    }

    bb1: {
        return;
    }
}

main::{constant#0}: Yikes = {
    let mut _0: Yikes;

    bb0: {
        _0 = Yikes;
        return;
    }
}
