// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn fat_ptr_project(_1: &Wrapper<[u8]>) -> &[u8] {
    debug a => _1;
    let mut _0: &[u8];

    bb0: {
        _0 = &((*_1).1: [u8]);
        return;
    }
}

fn fat_ptr_simple(_1: &[u8]) -> &[u8] {
    debug a => _1;
    let mut _0: &[u8];

    bb0: {
        _0 = _1;
        return;
    }
}

fn fat_ptr_via_local(_1: &[u8]) -> &[u8] {
    debug a => _1;
    let mut _0: &[u8];
    scope 1 {
        debug x => _1;
    }

    bb0: {
        _0 = _1;
        return;
    }
}

fn fat_ptr_from_struct(_1: FatPtrContainer<'_>) -> &[u8] {
    debug s => _1;
    let mut _0: &[u8];

    bb0: {
        _0 = (_1.0: &[u8]);
        return;
    }
}

fn fat_ptr_to_struct(_1: &[u8]) -> FatPtrContainer<'_> {
    debug a => _1;
    let mut _0: FatPtrContainer<'_>;

    bb0: {
        _0 = FatPtrContainer::<'_> { ptr: _1 };
        return;
    }
}

fn fat_ptr_store_to(_1: &[u8], _2: &mut &[u8]) -> () {
    debug a => _1;
    debug b => _2;
    let mut _0: ();

    bb0: {
        (*_2) = _1;
        return;
    }
}

fn fat_ptr_constant() -> &str {
    let mut _0: &str;

    bb0: {
        _0 = const "HELLO";
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Wrapper<[u8; 3]>;
    let mut _2: [u8; 3];
    let mut _4: &Wrapper<[u8]>;
    let _5: &Wrapper<[u8; 3]>;
    let mut _7: &[u8];
    let mut _9: &[u8];
    let mut _11: FatPtrContainer<'_>;
    let mut _12: &[u8];
    let _14: &[u8; 1];
    let _15: [u8; 1];
    let _16: ();
    let mut _17: &[u8];
    let mut _18: &mut &[u8];
    let mut _19: (&&[u8], &&[u8; 3]);
    let mut _20: &&[u8];
    let mut _21: &&[u8; 3];
    let _22: &[u8; 3];
    let mut _25: bool;
    let mut _26: bool;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _30: (&&str, &&str);
    let mut _31: &&str;
    let _32: &str;
    let mut _33: &&str;
    let _34: &str;
    let mut _37: bool;
    let mut _38: bool;
    let _40: !;
    let mut _41: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug a => _1;
        let _3: &[u8];
        scope 2 {
            debug p => _3;
            let _6: &[u8];
            scope 3 {
                debug p => _6;
                let _8: &[u8];
                scope 4 {
                    debug p => _8;
                    let _10: &[u8];
                    scope 5 {
                        debug p => _10;
                        let mut _13: &[u8];
                        scope 6 {
                            debug target => _13;
                            let _23: &&[u8];
                            let _24: &&[u8; 3];
                            let _35: &&str;
                            let _36: &&str;
                            scope 7 {
                                debug left_val => _23;
                                debug right_val => _24;
                                let _27: core::panicking::AssertKind;
                                scope 8 {
                                    debug kind => _27;
                                }
                            }
                            scope 9 {
                                debug left_val => _35;
                                debug right_val => _36;
                                let _39: core::panicking::AssertKind;
                                scope 10 {
                                    debug kind => _39;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = [const 7_u8, const 6_u8, const 5_u8];
        _1 = Wrapper::<[u8; 3]>(const 4_u32, move _2);
        _5 = &_1;
        _4 = _5 as &Wrapper<[u8]> (Pointer(Unsize));
        _3 = fat_ptr_project(move _4) -> bb1;
    }

    bb1: {
        _7 = _3;
        _6 = fat_ptr_simple(move _7) -> bb2;
    }

    bb2: {
        _9 = _6;
        _8 = fat_ptr_via_local(move _9) -> bb3;
    }

    bb3: {
        _12 = _8;
        _11 = fat_ptr_to_struct(move _12) -> bb4;
    }

    bb4: {
        _10 = fat_ptr_from_struct(move _11) -> bb5;
    }

    bb5: {
        _15 = [const 42_u8];
        _14 = &_15;
        _13 = _14 as &[u8] (Pointer(Unsize));
        _17 = _10;
        _18 = &mut _13;
        _16 = fat_ptr_store_to(move _17, _18) -> bb6;
    }

    bb6: {
        _20 = &_13;
        _22 = &(_1.1: [u8; 3]);
        _21 = &_22;
        _19 = (move _20, move _21);
        _23 = (_19.0: &&[u8]);
        _24 = (_19.1: &&[u8; 3]);
        _26 = <&[u8] as PartialEq<&[u8; 3]>>::eq(_23, _24) -> bb7;
    }

    bb7: {
        _25 = Not(move _26);
        switchInt(move _25) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<&[u8], &[u8; 3]>(move _27, _23, _24, move _29);
    }

    bb9: {
        _32 = fat_ptr_constant() -> bb10;
    }

    bb10: {
        _31 = &_32;
        _34 = const "HELLO";
        _33 = &_34;
        _30 = (move _31, move _33);
        _35 = (_30.0: &&str);
        _36 = (_30.1: &&str);
        _38 = <&str as PartialEq>::eq(_35, _36) -> bb11;
    }

    bb11: {
        _37 = Not(move _38);
        switchInt(move _37) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _39 = core::panicking::AssertKind::Eq;
        _41 = Option::<Arguments<'_>>::None;
        _40 = core::panicking::assert_failed::<&str, &str>(move _39, _35, _36, move _41);
    }

    bb13: {
        return;
    }
}

fn Wrapper(_1: u32, _2: T) -> Wrapper<T> {
    let mut _0: Wrapper<T>;

    bb0: {
        _0 = Wrapper::<T>(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn Wrapper(_1: u32, _2: T) -> Wrapper<T> {
    let mut _0: Wrapper<T>;

    bb0: {
        _0 = Wrapper::<T>(move _1, move _2);
        return;
    }
}
