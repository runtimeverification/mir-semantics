// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/mir/mir_drop_order.rs:12:1: 12:33>::drop(_1: &mut DropLogger<'_>) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: &mut std::vec::Vec<usize>;
    let mut _4: &mut std::vec::Vec<usize>;
    let mut _5: &mut std::cell::RefMut<'_, std::vec::Vec<usize>>;
    let mut _6: std::cell::RefMut<'_, std::vec::Vec<usize>>;
    let mut _7: &std::cell::RefCell<std::vec::Vec<usize>>;
    let mut _8: usize;
    let mut _9: &std::panic::AssertUnwindSafe<std::cell::RefCell<std::vec::Vec<usize>>>;

    bb0: {
        _9 = deref_copy ((*_1).1: &std::panic::AssertUnwindSafe<std::cell::RefCell<std::vec::Vec<usize>>>);
        _7 = &((*_9).0: std::cell::RefCell<std::vec::Vec<usize>>);
        _6 = RefCell::<Vec<usize>>::borrow_mut(move _7) -> bb1;
    }

    bb1: {
        _5 = &mut _6;
        _4 = <RefMut<'_, Vec<usize>> as DerefMut>::deref_mut(move _5) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _3 = _4;
        _8 = ((*_1).0: usize);
        _2 = Vec::<usize>::push(move _3, move _8) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        drop(_6) -> bb4;
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_6) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::panic::AssertUnwindSafe<std::cell::RefCell<std::vec::Vec<usize>>>;
    let mut _2: std::cell::RefCell<std::vec::Vec<usize>>;
    let mut _3: std::vec::Vec<usize>;
    let mut _5: &std::panic::AssertUnwindSafe<std::cell::RefCell<std::vec::Vec<usize>>>;
    let mut _7: &std::panic::AssertUnwindSafe<std::cell::RefCell<std::vec::Vec<usize>>>;
    let mut _9: DropLogger<'_>;
    let mut _10: &[closure@ui/mir/mir_drop_order.rs:23:13: 23:17];
    let mut _11: (usize,);
    let mut _12: &DropLogger<'_>;
    let _13: DropLogger<'_>;
    let mut _14: &[closure@ui/mir/mir_drop_order.rs:23:13: 23:17];
    let mut _15: (usize,);
    let mut _16: DropLogger<'_>;
    let mut _17: &[closure@ui/mir/mir_drop_order.rs:23:13: 23:17];
    let mut _18: (usize,);
    let mut _19: &DropLogger<'_>;
    let _20: DropLogger<'_>;
    let mut _21: &[closure@ui/mir/mir_drop_order.rs:23:13: 23:17];
    let mut _22: (usize,);
    let mut _23: (&std::vec::Vec<usize>, &std::vec::Vec<usize>);
    let mut _24: &std::vec::Vec<usize>;
    let _25: std::vec::Vec<usize>;
    let mut _26: &[closure@ui/mir/mir_drop_order.rs:24:15: 24:27];
    let mut _27: &std::vec::Vec<usize>;
    let _28: std::vec::Vec<usize>;
    let mut _31: bool;
    let mut _32: bool;
    let _34: !;
    let mut _35: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _36: (&std::vec::Vec<usize>, &std::vec::Vec<usize>);
    let mut _37: &std::vec::Vec<usize>;
    let _38: std::vec::Vec<usize>;
    let mut _39: &[closure@ui/mir/mir_drop_order.rs:24:15: 24:27];
    let mut _40: &std::vec::Vec<usize>;
    let _41: std::vec::Vec<usize>;
    let mut _42: std::boxed::Box<[usize]>;
    let mut _43: usize;
    let mut _44: usize;
    let mut _45: *mut u8;
    let mut _46: std::boxed::Box<[usize; 4]>;
    let mut _49: bool;
    let mut _50: bool;
    let _52: !;
    let mut _53: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _54: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _55: [closure@ui/mir/mir_drop_order.rs:40:38: 40:40];
    let mut _56: &[closure@ui/mir/mir_drop_order.rs:23:13: 23:17];
    let mut _57: (&std::vec::Vec<usize>, &std::vec::Vec<usize>);
    let mut _58: &std::vec::Vec<usize>;
    let _59: std::vec::Vec<usize>;
    let mut _60: &[closure@ui/mir/mir_drop_order.rs:24:15: 24:27];
    let mut _61: &std::vec::Vec<usize>;
    let _62: std::vec::Vec<usize>;
    let mut _63: std::boxed::Box<[usize]>;
    let mut _64: usize;
    let mut _65: usize;
    let mut _66: *mut u8;
    let mut _67: std::boxed::Box<[usize; 4]>;
    let mut _70: bool;
    let mut _71: bool;
    let _73: !;
    let mut _74: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _75: *const [usize; 4];
    let mut _76: *const [usize; 4];
    scope 1 {
        debug log => _1;
        let _4: [closure@ui/mir/mir_drop_order.rs:23:13: 23:17];
        scope 2 {
            debug d => _4;
            let _6: [closure@ui/mir/mir_drop_order.rs:24:15: 24:27];
            scope 3 {
                debug get => _6;
                let _8: (DropLogger<'_>, &DropLogger<'_>, DropLogger<'_>, &DropLogger<'_>);
                let _47: &std::vec::Vec<usize>;
                let _48: &std::vec::Vec<usize>;
                let mut _83: *const ();
                let mut _84: usize;
                let mut _85: usize;
                let mut _86: usize;
                let mut _87: usize;
                let mut _88: bool;
                scope 4 {
                    debug _x => _8;
                    let _29: &std::vec::Vec<usize>;
                    let _30: &std::vec::Vec<usize>;
                    scope 5 {
                        debug left_val => _29;
                        debug right_val => _30;
                        let _33: core::panicking::AssertKind;
                        scope 6 {
                            debug kind => _33;
                        }
                    }
                }
                scope 7 {
                }
                scope 8 {
                    debug left_val => _47;
                    debug right_val => _48;
                    let _51: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _51;
                    }
                }
                scope 10 {
                    let _68: &std::vec::Vec<usize>;
                    let _69: &std::vec::Vec<usize>;
                    let mut _77: *const ();
                    let mut _78: usize;
                    let mut _79: usize;
                    let mut _80: usize;
                    let mut _81: usize;
                    let mut _82: bool;
                    scope 11 {
                    }
                    scope 12 {
                        debug left_val => _68;
                        debug right_val => _69;
                        let _72: core::panicking::AssertKind;
                        scope 13 {
                            debug kind => _72;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _3 = Vec::<usize>::new() -> bb1;
    }

    bb1: {
        _2 = RefCell::<Vec<usize>>::new(move _3) -> bb2;
    }

    bb2: {
        _1 = AssertUnwindSafe::<RefCell<Vec<usize>>>(move _2);
        _5 = &_1;
        _4 = [closure@ui/mir/mir_drop_order.rs:23:13: 23:17] { log: move _5 };
        _7 = &_1;
        _6 = [closure@ui/mir/mir_drop_order.rs:24:15: 24:27] { log: move _7 };
        _10 = &_4;
        _11 = (const 0_usize,);
        _9 = <[closure@ui/mir/mir_drop_order.rs:23:13: 23:17] as Fn<(usize,)>>::call(move _10, move _11) -> [return: bb3, unwind: bb48];
    }

    bb3: {
        _14 = &_4;
        _15 = (const 1_usize,);
        _13 = <[closure@ui/mir/mir_drop_order.rs:23:13: 23:17] as Fn<(usize,)>>::call(move _14, move _15) -> [return: bb4, unwind: bb47];
    }

    bb4: {
        _12 = &_13;
        _17 = &_4;
        _18 = (const 2_usize,);
        _16 = <[closure@ui/mir/mir_drop_order.rs:23:13: 23:17] as Fn<(usize,)>>::call(move _17, move _18) -> [return: bb5, unwind: bb45];
    }

    bb5: {
        _21 = &_4;
        _22 = (const 3_usize,);
        _20 = <[closure@ui/mir/mir_drop_order.rs:23:13: 23:17] as Fn<(usize,)>>::call(move _21, move _22) -> [return: bb6, unwind: bb44];
    }

    bb6: {
        _19 = &_20;
        _8 = (move _9, move _12, move _16, move _19);
        _26 = &_6;
        _25 = <[closure@ui/mir/mir_drop_order.rs:24:15: 24:27] as Fn<()>>::call(move _26, const ()) -> [return: bb7, unwind: bb42];
    }

    bb7: {
        _24 = &_25;
        _28 = Vec::<usize>::new() -> [return: bb8, unwind: bb41];
    }

    bb8: {
        _27 = &_28;
        _23 = (move _24, move _27);
        _29 = (_23.0: &std::vec::Vec<usize>);
        _30 = (_23.1: &std::vec::Vec<usize>);
        _32 = <Vec<usize> as PartialEq>::eq(_29, _30) -> [return: bb9, unwind: bb40];
    }

    bb9: {
        _31 = Not(move _32);
        switchInt(move _31) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _33 = core::panicking::AssertKind::Eq;
        _35 = Option::<Arguments<'_>>::None;
        _34 = core::panicking::assert_failed::<Vec<usize>, Vec<usize>>(move _33, _29, _30, move _35) -> bb40;
    }

    bb11: {
        drop(_28) -> [return: bb12, unwind: bb41];
    }

    bb12: {
        drop(_25) -> [return: bb13, unwind: bb42];
    }

    bb13: {
        drop(_8) -> [return: bb14, unwind: bb43];
    }

    bb14: {
        drop(_20) -> [return: bb15, unwind: bb46];
    }

    bb15: {
        drop(_13) -> [return: bb16, unwind: bb48];
    }

    bb16: {
        _39 = &_6;
        _38 = <[closure@ui/mir/mir_drop_order.rs:24:15: 24:27] as Fn<()>>::call(move _39, const ()) -> [return: bb17, unwind: bb48];
    }

    bb17: {
        _37 = &_38;
        _43 = SizeOf([usize; 4]);
        _44 = AlignOf([usize; 4]);
        _45 = alloc::alloc::exchange_malloc(move _43, move _44) -> [return: bb18, unwind: bb39];
    }

    bb18: {
        _46 = ShallowInitBox(move _45, [usize; 4]);
        _75 = (((_46.0: std::ptr::Unique<[usize; 4]>).0: std::ptr::NonNull<[usize; 4]>).0: *const [usize; 4]);
        _83 = _75 as *const () (PtrToPtr);
        _84 = _83 as usize (Transmute);
        _85 = AlignOf(usize);
        _86 = Sub(_85, const 1_usize);
        _87 = BitAnd(_84, _86);
        _88 = Eq(_87, const 0_usize);
        assert(_88, "misaligned pointer dereference: address must be a multiple of {} but is {}", _85, _84) -> [success: bb51, unwind unreachable];
    }

    bb19: {
        _40 = &_41;
        _36 = (move _37, move _40);
        _47 = (_36.0: &std::vec::Vec<usize>);
        _48 = (_36.1: &std::vec::Vec<usize>);
        _50 = <Vec<usize> as PartialEq>::eq(_47, _48) -> [return: bb20, unwind: bb38];
    }

    bb20: {
        _49 = Not(move _50);
        switchInt(move _49) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _51 = core::panicking::AssertKind::Eq;
        _53 = Option::<Arguments<'_>>::None;
        _52 = core::panicking::assert_failed::<Vec<usize>, Vec<usize>>(move _51, _47, _48, move _53) -> bb38;
    }

    bb22: {
        drop(_41) -> [return: bb23, unwind: bb39];
    }

    bb23: {
        drop(_38) -> [return: bb24, unwind: bb48];
    }

    bb24: {
        _56 = &_4;
        _55 = [closure@ui/mir/mir_drop_order.rs:40:38: 40:40] { d: move _56 };
        _54 = catch_unwind::<[closure@ui/mir/mir_drop_order.rs:40:38: 40:40], ()>(move _55) -> [return: bb25, unwind: bb48];
    }

    bb25: {
        drop(_54) -> [return: bb26, unwind: bb48];
    }

    bb26: {
        _60 = &_6;
        _59 = <[closure@ui/mir/mir_drop_order.rs:24:15: 24:27] as Fn<()>>::call(move _60, const ()) -> [return: bb27, unwind: bb48];
    }

    bb27: {
        _58 = &_59;
        _64 = SizeOf([usize; 4]);
        _65 = AlignOf([usize; 4]);
        _66 = alloc::alloc::exchange_malloc(move _64, move _65) -> [return: bb28, unwind: bb37];
    }

    bb28: {
        _67 = ShallowInitBox(move _66, [usize; 4]);
        _76 = (((_67.0: std::ptr::Unique<[usize; 4]>).0: std::ptr::NonNull<[usize; 4]>).0: *const [usize; 4]);
        _77 = _76 as *const () (PtrToPtr);
        _78 = _77 as usize (Transmute);
        _79 = AlignOf(usize);
        _80 = Sub(_79, const 1_usize);
        _81 = BitAnd(_78, _80);
        _82 = Eq(_81, const 0_usize);
        assert(_82, "misaligned pointer dereference: address must be a multiple of {} but is {}", _79, _78) -> [success: bb50, unwind unreachable];
    }

    bb29: {
        _61 = &_62;
        _57 = (move _58, move _61);
        _68 = (_57.0: &std::vec::Vec<usize>);
        _69 = (_57.1: &std::vec::Vec<usize>);
        _71 = <Vec<usize> as PartialEq>::eq(_68, _69) -> [return: bb30, unwind: bb36];
    }

    bb30: {
        _70 = Not(move _71);
        switchInt(move _70) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _72 = core::panicking::AssertKind::Eq;
        _74 = Option::<Arguments<'_>>::None;
        _73 = core::panicking::assert_failed::<Vec<usize>, Vec<usize>>(move _72, _68, _69, move _74) -> bb36;
    }

    bb32: {
        drop(_62) -> [return: bb33, unwind: bb37];
    }

    bb33: {
        drop(_59) -> [return: bb34, unwind: bb48];
    }

    bb34: {
        drop(_1) -> bb35;
    }

    bb35: {
        return;
    }

    bb36 (cleanup): {
        drop(_62) -> [return: bb37, unwind terminate];
    }

    bb37 (cleanup): {
        drop(_59) -> [return: bb48, unwind terminate];
    }

    bb38 (cleanup): {
        drop(_41) -> [return: bb39, unwind terminate];
    }

    bb39 (cleanup): {
        drop(_38) -> [return: bb48, unwind terminate];
    }

    bb40 (cleanup): {
        drop(_28) -> [return: bb41, unwind terminate];
    }

    bb41 (cleanup): {
        drop(_25) -> [return: bb42, unwind terminate];
    }

    bb42 (cleanup): {
        drop(_8) -> [return: bb43, unwind terminate];
    }

    bb43 (cleanup): {
        drop(_20) -> [return: bb46, unwind terminate];
    }

    bb44 (cleanup): {
        drop(_16) -> [return: bb45, unwind terminate];
    }

    bb45 (cleanup): {
        drop(_9) -> [return: bb46, unwind terminate];
    }

    bb46 (cleanup): {
        drop(_13) -> [return: bb48, unwind terminate];
    }

    bb47 (cleanup): {
        drop(_9) -> [return: bb48, unwind terminate];
    }

    bb48 (cleanup): {
        drop(_1) -> [return: bb49, unwind terminate];
    }

    bb49 (cleanup): {
        resume;
    }

    bb50: {
        (*_76) = [const 6_usize, const 4_usize, const 7_usize, const 5_usize];
        _63 = move _67 as std::boxed::Box<[usize]> (Pointer(Unsize));
        _62 = slice::<impl [usize]>::into_vec::<std::alloc::Global>(move _63) -> [return: bb29, unwind: bb37];
    }

    bb51: {
        (*_75) = [const 0_usize, const 2_usize, const 3_usize, const 1_usize];
        _42 = move _46 as std::boxed::Box<[usize]> (Pointer(Unsize));
        _41 = slice::<impl [usize]>::into_vec::<std::alloc::Global>(move _42) -> [return: bb19, unwind: bb39];
    }
}

fn main::{closure#0}(_1: &[closure@ui/mir/mir_drop_order.rs:23:13: 23:17], _2: usize) -> DropLogger<'_> {
    debug id => _2;
    debug log => (*((*_1).0: &std::panic::AssertUnwindSafe<std::cell::RefCell<std::vec::Vec<usize>>>));
    let mut _0: DropLogger<'_>;
    let mut _3: &std::panic::AssertUnwindSafe<std::cell::RefCell<std::vec::Vec<usize>>>;

    bb0: {
        _3 = deref_copy ((*_1).0: &std::panic::AssertUnwindSafe<std::cell::RefCell<std::vec::Vec<usize>>>);
        _0 = DropLogger::<'_> { id: _2, log: _3 };
        return;
    }
}

fn main::{closure#1}(_1: &[closure@ui/mir/mir_drop_order.rs:24:15: 24:27]) -> Vec<usize> {
    debug log => (*((*_1).0: &std::panic::AssertUnwindSafe<std::cell::RefCell<std::vec::Vec<usize>>>));
    let mut _0: std::vec::Vec<usize>;
    let mut _2: std::cell::RefMut<'_, std::vec::Vec<usize>>;
    let mut _3: &std::cell::RefCell<std::vec::Vec<usize>>;
    let mut _5: &mut std::vec::Vec<usize>;
    let mut _6: &mut std::vec::Vec<usize>;
    let mut _7: &mut std::cell::RefMut<'_, std::vec::Vec<usize>>;
    let mut _8: std::vec::Drain<'_, usize>;
    let mut _9: &std::panic::AssertUnwindSafe<std::cell::RefCell<std::vec::Vec<usize>>>;
    scope 1 {
        debug m => _2;
        let _4: std::vec::Drain<'_, usize>;
        scope 2 {
            debug n => _4;
        }
    }

    bb0: {
        _9 = deref_copy ((*_1).0: &std::panic::AssertUnwindSafe<std::cell::RefCell<std::vec::Vec<usize>>>);
        _3 = &((*_9).0: std::cell::RefCell<std::vec::Vec<usize>>);
        _2 = RefCell::<Vec<usize>>::borrow_mut(move _3) -> bb1;
    }

    bb1: {
        _7 = &mut _2;
        _6 = <RefMut<'_, Vec<usize>> as DerefMut>::deref_mut(move _7) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _5 = _6;
        _4 = Vec::<usize>::drain::<RangeFull>(move _5, const RangeFull) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _8 = move _4;
        _0 = <std::vec::Drain<'_, usize> as Iterator>::collect::<Vec<usize>>(move _8) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_2) -> bb5;
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }
}

fn main::{closure#2}(_1: [closure@ui/mir/mir_drop_order.rs:40:38: 40:40]) -> () {
    debug d => (*(_1.0: &[closure@ui/mir/mir_drop_order.rs:23:13: 23:17]));
    let mut _0: ();
    let mut _2: DropLogger<'_>;
    let mut _3: (usize,);
    let _4: DropLogger<'_>;
    let mut _5: (usize,);
    let mut _6: DropLogger<'_>;
    let mut _7: (usize,);
    let _8: DropLogger<'_>;
    let mut _9: (usize,);
    let mut _10: !;
    let mut _11: &[closure@ui/mir/mir_drop_order.rs:23:13: 23:17];
    let mut _12: &[closure@ui/mir/mir_drop_order.rs:23:13: 23:17];
    let mut _13: &[closure@ui/mir/mir_drop_order.rs:23:13: 23:17];
    let mut _14: &[closure@ui/mir/mir_drop_order.rs:23:13: 23:17];

    bb0: {
        _11 = deref_copy (_1.0: &[closure@ui/mir/mir_drop_order.rs:23:13: 23:17]);
        _3 = (const 4_usize,);
        _2 = <[closure@ui/mir/mir_drop_order.rs:23:13: 23:17] as Fn<(usize,)>>::call(_11, move _3) -> bb1;
    }

    bb1: {
        _12 = deref_copy (_1.0: &[closure@ui/mir/mir_drop_order.rs:23:13: 23:17]);
        _5 = (const 5_usize,);
        _4 = <[closure@ui/mir/mir_drop_order.rs:23:13: 23:17] as Fn<(usize,)>>::call(_12, move _5) -> [return: bb2, unwind: bb11];
    }

    bb2: {
        _13 = deref_copy (_1.0: &[closure@ui/mir/mir_drop_order.rs:23:13: 23:17]);
        _7 = (const 6_usize,);
        _6 = <[closure@ui/mir/mir_drop_order.rs:23:13: 23:17] as Fn<(usize,)>>::call(_13, move _7) -> [return: bb3, unwind: bb9];
    }

    bb3: {
        _14 = deref_copy (_1.0: &[closure@ui/mir/mir_drop_order.rs:23:13: 23:17]);
        _9 = (const 7_usize,);
        _8 = <[closure@ui/mir/mir_drop_order.rs:23:13: 23:17] as Fn<(usize,)>>::call(_14, move _9) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _10 = panic_any::<InjectedFailure>(const InjectedFailure) -> bb5;
    }

    bb5 (cleanup): {
        drop(_6) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        drop(_8) -> [return: bb10, unwind terminate];
    }

    bb8 (cleanup): {
        drop(_6) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        drop(_2) -> [return: bb10, unwind terminate];
    }

    bb10 (cleanup): {
        drop(_4) -> [return: bb12, unwind terminate];
    }

    bb11 (cleanup): {
        drop(_2) -> [return: bb12, unwind terminate];
    }

    bb12 (cleanup): {
        resume;
    }
}
