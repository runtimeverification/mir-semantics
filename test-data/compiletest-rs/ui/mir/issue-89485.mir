// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Type::A::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 1_isize;
        return;
    }
}

Type::B::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 2_isize;
        return;
    }
}

fn <impl at ui/mir/issue-89485.rs:5:10: 5:15>::fmt(_1: &Type, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: &str;
    let mut _4: isize;
    let _5: &str;
    let _6: &str;

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [1: bb3, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _6 = const "B";
        _3 = _6;
        goto -> bb4;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = const "A";
        _3 = _5;
        goto -> bb4;
    }

    bb4: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> bb5;
    }

    bb5: {
        return;
    }
}

fn <impl at ui/mir/issue-89485.rs:5:17: 5:19>::assert_receiver_is_total_eq(_1: &Type) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/mir/issue-89485.rs:5:21: 5:30>::eq(_1: &Type, _2: &Type) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _0 = Eq(_3, _4);
        return;
    }
}

fn encode(_1: Type) -> Type {
    debug v => _1;
    let mut _0: Type;
    let mut _2: isize;

    bb0: {
        _2 = discriminant(_1);
        switchInt(move _2) -> [1: bb2, otherwise: bb1];
    }

    bb1: {
        _0 = move _1;
        goto -> bb3;
    }

    bb2: {
        _0 = Type::B;
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&Type, &Type);
    let mut _2: &Type;
    let _3: Type;
    let mut _4: &Type;
    let _5: Type;
    let mut _6: Type;
    let _7: &Type;
    let _8: &Type;
    let mut _9: bool;
    let mut _10: bool;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _7;
        debug right_val => _8;
        let _11: core::panicking::AssertKind;
        scope 2 {
            debug kind => _11;
        }
    }

    bb0: {
        _3 = Type::B;
        _2 = &_3;
        _6 = Type::A;
        _5 = encode(move _6) -> bb1;
    }

    bb1: {
        _4 = &_5;
        _1 = (move _2, move _4);
        _7 = (_1.0: &Type);
        _8 = (_1.1: &Type);
        _10 = <Type as PartialEq>::eq(_7, _8) -> bb2;
    }

    bb2: {
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<Type, Type>(move _11, _7, _8, move _13);
    }

    bb4: {
        return;
    }
}
