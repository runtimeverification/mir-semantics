// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f(_1: u32, _2: Lto) -> u32 {
    debug cookie => _1;
    debug lto => _2;
    let mut _0: u32;
    let mut _3: bool;
    let mut _4: isize;
    scope 1 {
        debug _a => _3;
    }

    bb0: {
        _3 = const false;
        _4 = discriminant(_2);
        switchInt(move _4) -> [0: bb1, 1: bb3, 2: bb3, otherwise: bb2];
    }

    bb1: {
        _3 = const true;
        goto -> bb4;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _3 = const true;
        _1 = const 0_u32;
        goto -> bb4;
    }

    bb4: {
        _0 = _1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&u32, &u32);
    let mut _2: &u32;
    let _3: u32;
    let mut _4: Lto;
    let mut _5: &u32;
    let _6: u32;
    let _7: &u32;
    let _8: &u32;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: u32;
    let mut _12: u32;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _7;
        debug right_val => _8;
        let _13: core::panicking::AssertKind;
        scope 2 {
            debug kind => _13;
        }
    }

    bb0: {
        _4 = Lto::Thin;
        _3 = f(const 42_u32, move _4) -> bb1;
    }

    bb1: {
        _2 = &_3;
        _6 = const 0_u32;
        _5 = &_6;
        _1 = (move _2, move _5);
        _7 = (_1.0: &u32);
        _8 = (_1.1: &u32);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<u32, u32>(move _13, _7, _8, move _15);
    }

    bb3: {
        return;
    }
}
