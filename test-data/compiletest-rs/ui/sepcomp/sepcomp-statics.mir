// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn pad() -> usize {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

const ONE: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

fn b::pad() -> usize {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

static THREE: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedAdd(const _, const _);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

fn a::pad() -> usize {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

const TWO: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedAdd(const _, const _);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let mut _2: &usize;
    let _3: usize;
    let mut _4: &usize;
    let _5: usize;
    let _6: &usize;
    let _7: &usize;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: usize;
    let mut _11: usize;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&usize, &usize);
    let mut _16: &usize;
    let _17: usize;
    let mut _18: &usize;
    let _19: usize;
    let _20: &usize;
    let _21: &usize;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: usize;
    let mut _25: usize;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: (&usize, &usize);
    let _30: &usize;
    let mut _31: &usize;
    let _32: usize;
    let _33: &usize;
    let _34: &usize;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: usize;
    let mut _38: usize;
    let _40: !;
    let mut _41: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }
    scope 3 {
        debug left_val => _20;
        debug right_val => _21;
        let _26: core::panicking::AssertKind;
        scope 4 {
            debug kind => _26;
        }
    }
    scope 5 {
        debug left_val => _33;
        debug right_val => _34;
        let _39: core::panicking::AssertKind;
        scope 6 {
            debug kind => _39;
        }
    }

    bb0: {
        _3 = const _;
        _2 = &_3;
        _5 = const 1_usize;
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &usize);
        _7 = (_1.1: &usize);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<usize, usize>(move _12, _6, _7, move _14);
    }

    bb2: {
        _17 = const _;
        _16 = &_17;
        _19 = const 2_usize;
        _18 = &_19;
        _15 = (move _16, move _18);
        _20 = (_15.0: &usize);
        _21 = (_15.1: &usize);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<usize, usize>(move _26, _20, _21, move _28);
    }

    bb4: {
        _30 = const {alloc1: &usize};
        _32 = const 3_usize;
        _31 = &_32;
        _29 = (_30, move _31);
        _33 = (_29.0: &usize);
        _34 = (_29.1: &usize);
        _37 = (*_33);
        _38 = (*_34);
        _36 = Eq(move _37, move _38);
        _35 = Not(move _36);
        switchInt(move _35) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _39 = core::panicking::AssertKind::Eq;
        _41 = Option::<Arguments<'_>>::None;
        _40 = core::panicking::assert_failed::<usize, usize>(move _39, _33, _34, move _41);
    }

    bb6: {
        return;
    }
}

alloc1 (static: THREE, size: 8, align: 8) {
    03 00 00 00 00 00 00 00                         â”‚ ........
}
