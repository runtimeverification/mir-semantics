// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn pad() -> usize {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

fn f() -> () {
    let mut _0: ();
    let mut _1: !;

    bb0: {
        _1 = begin_panic::<&str>(const "explicit panic");
    }
}

fn g() -> () {
    let mut _0: ();
    let _1: ();

    bb0: {
        _1 = f() -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
    let mut _2: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _3: std::thread::JoinHandle<()>;

    bb0: {
        _3 = spawn::<[closure@ui/sepcomp/sepcomp-unwind.rs:34:19: 34:25], ()>(const ZeroSized: [closure@ui/sepcomp/sepcomp-unwind.rs:34:19: 34:25]) -> bb1;
    }

    bb1: {
        _2 = JoinHandle::<()>::join(move _3) -> bb2;
    }

    bb2: {
        _1 = Result::<(), Box<dyn Any + Send>>::unwrap_err(move _2) -> bb3;
    }

    bb3: {
        drop(_1) -> bb4;
    }

    bb4: {
        return;
    }
}

fn main::{closure#0}(_1: [closure@ui/sepcomp/sepcomp-unwind.rs:34:19: 34:25]) -> () {
    let mut _0: ();

    bb0: {
        _0 = g() -> bb1;
    }

    bb1: {
        return;
    }
}
