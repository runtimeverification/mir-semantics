// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: std::array::IntoIter<i32, 2>;
    let mut _2: [i32; 2];
    let mut _3: std::array::IntoIter<i32, 2>;
    let mut _4: std::option::Option<i32>;
    let mut _5: &mut std::array::IntoIter<i32, 2>;
    let mut _6: isize;
    let _7: [i32; 2];
    let mut _8: std::array::IntoIter<i32, 2>;
    let mut _10: std::option::Option<i32>;
    let mut _11: &mut std::array::IntoIter<i32, 2>;
    let mut _12: isize;
    let mut _13: std::array::IntoIter<f64, 2>;
    let mut _14: [f64; 2];
    let mut _16: std::option::Option<f64>;
    let mut _17: &mut std::array::IntoIter<f64, 2>;
    let mut _18: isize;
    scope 1 {
        debug iter => _3;
    }
    scope 2 {
        debug x => _7;
        let mut _9: std::array::IntoIter<i32, 2>;
        let mut _15: std::array::IntoIter<f64, 2>;
        scope 3 {
            debug iter => _9;
        }
        scope 4 {
            debug iter => _15;
        }
    }

    bb0: {
        _2 = [const 1_i32, const 2_i32];
        _1 = <[i32; 2] as IntoIterator>::into_iter(move _2) -> bb1;
    }

    bb1: {
        _3 = move _1;
        goto -> bb2;
    }

    bb2: {
        _5 = &mut _3;
        _4 = <std::array::IntoIter<i32, 2> as Iterator>::next(_5) -> [return: bb3, unwind: bb19];
    }

    bb3: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb5, 1: bb2, otherwise: bb4];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        drop(_3) -> bb6;
    }

    bb6: {
        _7 = [const 1_i32, const 2_i32];
        _8 = <[i32; 2] as IntoIterator>::into_iter(_7) -> bb7;
    }

    bb7: {
        _9 = move _8;
        goto -> bb8;
    }

    bb8: {
        _11 = &mut _9;
        _10 = <std::array::IntoIter<i32, 2> as Iterator>::next(_11) -> [return: bb9, unwind: bb18];
    }

    bb9: {
        _12 = discriminant(_10);
        switchInt(move _12) -> [0: bb10, 1: bb8, otherwise: bb4];
    }

    bb10: {
        drop(_9) -> bb11;
    }

    bb11: {
        _14 = [const 1f64, const 2f64];
        _13 = <[f64; 2] as IntoIterator>::into_iter(move _14) -> bb12;
    }

    bb12: {
        _15 = move _13;
        goto -> bb13;
    }

    bb13: {
        _17 = &mut _15;
        _16 = <std::array::IntoIter<f64, 2> as Iterator>::next(_17) -> [return: bb14, unwind: bb17];
    }

    bb14: {
        _18 = discriminant(_16);
        switchInt(move _18) -> [0: bb15, 1: bb13, otherwise: bb4];
    }

    bb15: {
        drop(_15) -> bb16;
    }

    bb16: {
        return;
    }

    bb17 (cleanup): {
        drop(_15) -> [return: bb20, unwind terminate];
    }

    bb18 (cleanup): {
        drop(_9) -> [return: bb20, unwind terminate];
    }

    bb19 (cleanup): {
        drop(_3) -> [return: bb20, unwind terminate];
    }

    bb20 (cleanup): {
        resume;
    }
}
