// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/iterators/into-iterator-type-inference-shift.rs:19:1: 19:27>::into_iter(_1: I) -> I {
    debug self => _1;
    let mut _0: I;

    bb0: {
        _0 = move _1;
        return;
    }
}

fn desugared_for_loop_bad(_1: u8) -> u8 {
    debug byte => _1;
    let mut _0: u8;
    let mut _2: i32;
    let mut _4: std::ops::Range<i32>;
    let mut _6: &mut std::ops::Range<i32>;
    let mut _8: std::option::Option<i32>;
    scope 1 {
        debug result => _2;
        let mut _3: std::ops::Range<i32>;
        scope 2 {
            debug x => _3;
            let mut _5: std::option::Option<i32>;
            scope 3 {
                debug y => _5;
                let mut _7: i32;
                scope 4 {
                    debug z => _7;
                }
            }
        }
    }

    bb0: {
        _2 = const 0_i32;
        _4 = std::ops::Range::<i32> { start: const 0_i32, end: const 8_i32 };
        _3 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _4) -> bb1;
    }

    bb1: {
        _6 = &mut _3;
        _5 = <std::ops::Range<i32> as Iterator>::next(_6) -> bb2;
    }

    bb2: {
        _8 = _5;
        _7 = Option::<i32>::unwrap(move _8) -> bb3;
    }

    bb3: {
        _0 = const 1_u8;
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
