// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _5: !;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _10: !;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _15: !;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _20: !;
    scope 1 {
        debug r => _1;
        let _6: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 2 {
            debug r => _6;
            let _11: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
            scope 3 {
                debug r => _11;
                let _16: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
                scope 4 {
                    debug r => _16;
                }
            }
        }
    }

    bb0: {
        _1 = catch_unwind::<[closure@ui/iterators/iter-sum-overflow-debug.rs:8:33: 8:35], ()>(const ZeroSized: [closure@ui/iterators/iter-sum-overflow-debug.rs:8:33: 8:35]) -> bb1;
    }

    bb1: {
        _4 = &_1;
        _3 = Result::<(), Box<dyn Any + Send>>::is_err(move _4) -> [return: bb2, unwind: bb24];
    }

    bb2: {
        _2 = Not(move _3);
        switchInt(move _2) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _5 = core::panicking::panic(const "assertion failed: r.is_err()") -> bb24;
    }

    bb4: {
        _6 = catch_unwind::<[closure@ui/iterators/iter-sum-overflow-debug.rs:13:33: 13:35], ()>(const ZeroSized: [closure@ui/iterators/iter-sum-overflow-debug.rs:13:33: 13:35]) -> [return: bb5, unwind: bb24];
    }

    bb5: {
        _9 = &_6;
        _8 = Result::<(), Box<dyn Any + Send>>::is_err(move _9) -> [return: bb6, unwind: bb23];
    }

    bb6: {
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _10 = core::panicking::panic(const "assertion failed: r.is_err()") -> bb23;
    }

    bb8: {
        _11 = catch_unwind::<[closure@ui/iterators/iter-sum-overflow-debug.rs:18:33: 18:35], ()>(const ZeroSized: [closure@ui/iterators/iter-sum-overflow-debug.rs:18:33: 18:35]) -> [return: bb9, unwind: bb23];
    }

    bb9: {
        _14 = &_11;
        _13 = Result::<(), Box<dyn Any + Send>>::is_err(move _14) -> [return: bb10, unwind: bb22];
    }

    bb10: {
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _15 = core::panicking::panic(const "assertion failed: r.is_err()") -> bb22;
    }

    bb12: {
        _16 = catch_unwind::<[closure@ui/iterators/iter-sum-overflow-debug.rs:23:33: 23:35], ()>(const ZeroSized: [closure@ui/iterators/iter-sum-overflow-debug.rs:23:33: 23:35]) -> [return: bb13, unwind: bb22];
    }

    bb13: {
        _19 = &_16;
        _18 = Result::<(), Box<dyn Any + Send>>::is_err(move _19) -> [return: bb14, unwind: bb21];
    }

    bb14: {
        _17 = Not(move _18);
        switchInt(move _17) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _20 = core::panicking::panic(const "assertion failed: r.is_err()") -> bb21;
    }

    bb16: {
        drop(_16) -> [return: bb17, unwind: bb22];
    }

    bb17: {
        drop(_11) -> [return: bb18, unwind: bb23];
    }

    bb18: {
        drop(_6) -> [return: bb19, unwind: bb24];
    }

    bb19: {
        drop(_1) -> bb20;
    }

    bb20: {
        return;
    }

    bb21 (cleanup): {
        drop(_16) -> [return: bb22, unwind terminate];
    }

    bb22 (cleanup): {
        drop(_11) -> [return: bb23, unwind terminate];
    }

    bb23 (cleanup): {
        drop(_6) -> [return: bb24, unwind terminate];
    }

    bb24 (cleanup): {
        drop(_1) -> [return: bb25, unwind terminate];
    }

    bb25 (cleanup): {
        resume;
    }
}

fn main::{closure#0}(_1: [closure@ui/iterators/iter-sum-overflow-debug.rs:8:33: 8:35]) -> () {
    let mut _0: ();
    let _2: i32;
    let mut _3: std::slice::Iter<'_, i32>;
    let mut _4: &[i32];
    let mut _5: &[i32; 2];
    let _6: [i32; 2];

    bb0: {
        _6 = [const 1_i32, const _];
        _5 = &_6;
        _4 = move _5 as &[i32] (Pointer(Unsize));
        _3 = core::slice::<impl [i32]>::iter(move _4) -> bb1;
    }

    bb1: {
        _2 = <std::slice::Iter<'_, i32> as Iterator>::sum::<i32>(move _3) -> bb2;
    }

    bb2: {
        return;
    }
}

fn main::{closure#1}(_1: [closure@ui/iterators/iter-sum-overflow-debug.rs:13:33: 13:35]) -> () {
    let mut _0: ();
    let _2: i32;
    let mut _3: std::slice::Iter<'_, i32>;
    let mut _4: &[i32];
    let mut _5: &[i32; 2];
    let _6: [i32; 2];

    bb0: {
        _6 = [const 2_i32, const _];
        _5 = &_6;
        _4 = move _5 as &[i32] (Pointer(Unsize));
        _3 = core::slice::<impl [i32]>::iter(move _4) -> bb1;
    }

    bb1: {
        _2 = <std::slice::Iter<'_, i32> as Iterator>::product::<i32>(move _3) -> bb2;
    }

    bb2: {
        return;
    }
}

fn main::{closure#2}(_1: [closure@ui/iterators/iter-sum-overflow-debug.rs:18:33: 18:35]) -> () {
    let mut _0: ();
    let _2: i32;
    let mut _3: std::iter::Cloned<std::slice::Iter<'_, i32>>;
    let mut _4: std::slice::Iter<'_, i32>;
    let mut _5: &[i32];
    let mut _6: &[i32; 2];
    let _7: [i32; 2];

    bb0: {
        _7 = [const 1_i32, const _];
        _6 = &_7;
        _5 = move _6 as &[i32] (Pointer(Unsize));
        _4 = core::slice::<impl [i32]>::iter(move _5) -> bb1;
    }

    bb1: {
        _3 = <std::slice::Iter<'_, i32> as Iterator>::cloned::<'_, i32>(move _4) -> bb2;
    }

    bb2: {
        _2 = <Cloned<std::slice::Iter<'_, i32>> as Iterator>::sum::<i32>(move _3) -> bb3;
    }

    bb3: {
        return;
    }
}

fn main::{closure#3}(_1: [closure@ui/iterators/iter-sum-overflow-debug.rs:23:33: 23:35]) -> () {
    let mut _0: ();
    let _2: i32;
    let mut _3: std::iter::Cloned<std::slice::Iter<'_, i32>>;
    let mut _4: std::slice::Iter<'_, i32>;
    let mut _5: &[i32];
    let mut _6: &[i32; 2];
    let _7: [i32; 2];

    bb0: {
        _7 = [const 2_i32, const _];
        _6 = &_7;
        _5 = move _6 as &[i32] (Pointer(Unsize));
        _4 = core::slice::<impl [i32]>::iter(move _5) -> bb1;
    }

    bb1: {
        _3 = <std::slice::Iter<'_, i32> as Iterator>::cloned::<'_, i32>(move _4) -> bb2;
    }

    bb2: {
        _2 = <Cloned<std::slice::Iter<'_, i32>> as Iterator>::product::<i32>(move _3) -> bb3;
    }

    bb3: {
        return;
    }
}
