// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn range_(_1: isize, _2: isize, _3: F) -> () {
    debug a => _1;
    debug b => _2;
    debug it => _3;
    let mut _0: ();
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: !;
    let mut _7: isize;
    let mut _8: bool;
    let mut _9: isize;
    let _10: ();
    let mut _11: &mut F;
    let mut _12: (isize,);
    let mut _13: isize;
    scope 1 {
        debug i => _7;
    }

    bb0: {
        _5 = Lt(_1, _2);
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _6 = core::panicking::panic(const "assertion failed: (a < b)") -> bb8;
    }

    bb2: {
        _7 = _1;
        goto -> bb3;
    }

    bb3: {
        _9 = _7;
        _8 = Lt(move _9, _2);
        switchInt(move _8) -> [0: bb6, otherwise: bb4];
    }

    bb4: {
        _11 = &mut _3;
        _13 = _7;
        _12 = (move _13,);
        _10 = <F as FnMut<(isize,)>>::call_mut(move _11, move _12) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        _7 = Add(_7, const 1_isize);
        goto -> bb3;
    }

    bb6: {
        drop(_3) -> bb7;
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_3) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: isize;
    let _2: ();
    let mut _3: [closure@ui/iterators/iter-range.rs:12:20: 12:23];
    let mut _4: &mut isize;
    let _5: ();
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str];
    let _8: &[&str; 2];
    let _9: [&str; 2];
    let mut _10: &[core::fmt::rt::Argument<'_>];
    let _11: &[core::fmt::rt::Argument<'_>; 1];
    let _12: [core::fmt::rt::Argument<'_>; 1];
    let mut _13: core::fmt::rt::Argument<'_>;
    let _14: &isize;
    scope 1 {
        debug sum => _1;
    }

    bb0: {
        _1 = const 0_isize;
        _4 = &mut _1;
        _3 = [closure@ui/iterators/iter-range.rs:12:20: 12:23] { sum: move _4 };
        _2 = range_::<[closure@ui/iterators/iter-range.rs:12:20: 12:23]>(const 0_isize, const 100_isize, move _3) -> bb1;
    }

    bb1: {
        _9 = [const "", const "\n"];
        _8 = &_9;
        _7 = _8 as &[&str] (Pointer(Unsize));
        _14 = &_1;
        _13 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_14) -> bb2;
    }

    bb2: {
        _12 = [move _13];
        _11 = &_12;
        _10 = _11 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _6 = Arguments::<'_>::new_v1(move _7, move _10) -> bb3;
    }

    bb3: {
        _5 = _print(move _6) -> bb4;
    }

    bb4: {
        return;
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/iterators/iter-range.rs:12:20: 12:23], _2: isize) -> () {
    debug x => _2;
    debug sum => (*((*_1).0: &mut isize));
    let mut _0: ();
    let mut _3: &mut isize;
    let mut _4: &mut isize;

    bb0: {
        _3 = deref_copy ((*_1).0: &mut isize);
        _4 = deref_copy ((*_1).0: &mut isize);
        (*_3) = Add((*_4), _2);
        return;
    }
}
