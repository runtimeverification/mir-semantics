// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: [NotClone; 3];
    let mut _3: &[NotClone];
    let mut _4: &[NotClone; 3];
    let _5: std::slice::RSplit<'_, NotClone, [closure@ui/iterators/rsplit-clone.rs:9:34: 9:37]>;
    let mut _6: &std::slice::RSplit<'_, NotClone, [closure@ui/iterators/rsplit-clone.rs:9:34: 9:37]>;
    scope 1 {
        debug elements => const [NotClone, NotClone, NotClone];
        let _2: std::slice::RSplit<'_, NotClone, [closure@ui/iterators/rsplit-clone.rs:9:34: 9:37]>;
        scope 2 {
            debug rsplit => _2;
        }
    }

    bb0: {
        _4 = &_1;
        _3 = move _4 as &[NotClone] (Pointer(Unsize));
        _2 = core::slice::<impl [NotClone]>::rsplit::<[closure@ui/iterators/rsplit-clone.rs:9:34: 9:37]>(move _3, const ZeroSized: [closure@ui/iterators/rsplit-clone.rs:9:34: 9:37]) -> bb1;
    }

    bb1: {
        _6 = &_2;
        _5 = <std::slice::RSplit<'_, NotClone, [closure@ui/iterators/rsplit-clone.rs:9:34: 9:37]> as Clone>::clone(move _6) -> bb2;
    }

    bb2: {
        return;
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/iterators/rsplit-clone.rs:9:34: 9:37], _2: &NotClone) -> bool {
    let mut _0: bool;

    bb0: {
        _0 = const false;
        return;
    }
}
