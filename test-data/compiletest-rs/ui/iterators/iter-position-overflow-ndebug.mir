// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: u64;
    let mut _2: (&std::option::Option<usize>, &std::option::Option<usize>);
    let mut _3: &std::option::Option<usize>;
    let _4: std::option::Option<usize>;
    let mut _5: &mut std::ops::RangeFrom<u64>;
    let mut _6: &mut std::ops::RangeFrom<u64>;
    let mut _7: &mut std::ops::RangeFrom<u64>;
    let mut _8: std::ops::RangeFrom<u64>;
    let mut _9: [closure@ui/iterators/iter-position-overflow-ndebug.rs:7:40: 7:43];
    let mut _10: &u64;
    let mut _11: &std::option::Option<usize>;
    let _12: std::option::Option<usize>;
    let mut _15: bool;
    let mut _16: bool;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _20: (&std::option::Option<usize>, &std::option::Option<usize>);
    let mut _21: &std::option::Option<usize>;
    let _22: std::option::Option<usize>;
    let mut _23: &mut std::ops::RangeFrom<u64>;
    let mut _24: &mut std::ops::RangeFrom<u64>;
    let mut _25: &mut std::ops::RangeFrom<u64>;
    let mut _26: std::ops::RangeFrom<u64>;
    let mut _27: [closure@ui/iterators/iter-position-overflow-ndebug.rs:8:40: 8:43];
    let mut _28: &u64;
    let mut _29: &std::option::Option<usize>;
    let _30: std::option::Option<usize>;
    let mut _33: bool;
    let mut _34: bool;
    let _36: !;
    let mut _37: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _38: (&std::option::Option<usize>, &std::option::Option<usize>);
    let mut _39: &std::option::Option<usize>;
    let _40: std::option::Option<usize>;
    let mut _41: &mut std::ops::RangeInclusive<u64>;
    let mut _42: &mut std::ops::RangeInclusive<u64>;
    let mut _43: &mut std::ops::RangeInclusive<u64>;
    let mut _44: std::ops::RangeInclusive<u64>;
    let mut _45: u64;
    let mut _46: u64;
    let mut _47: &std::option::Option<usize>;
    let _48: std::option::Option<usize>;
    let mut _51: bool;
    let mut _52: bool;
    let _54: !;
    let mut _55: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug n => _1;
        let _13: &std::option::Option<usize>;
        let _14: &std::option::Option<usize>;
        let _31: &std::option::Option<usize>;
        let _32: &std::option::Option<usize>;
        let _49: &std::option::Option<usize>;
        let _50: &std::option::Option<usize>;
        scope 2 {
            debug left_val => _13;
            debug right_val => _14;
            let _17: core::panicking::AssertKind;
            scope 3 {
                debug kind => _17;
            }
        }
        scope 4 {
            debug left_val => _31;
            debug right_val => _32;
            let _35: core::panicking::AssertKind;
            scope 5 {
                debug kind => _35;
            }
        }
        scope 6 {
            debug left_val => _49;
            debug right_val => _50;
            let _53: core::panicking::AssertKind;
            scope 7 {
                debug kind => _53;
            }
        }
    }

    bb0: {
        _1 = const _ as u64 (IntToInt);
        _8 = RangeFrom::<u64> { start: const 0_u64 };
        _7 = &mut _8;
        _6 = <RangeFrom<u64> as Iterator>::by_ref(move _7) -> bb1;
    }

    bb1: {
        _5 = _6;
        _10 = &_1;
        _9 = [closure@ui/iterators/iter-position-overflow-ndebug.rs:7:40: 7:43] { n: move _10 };
        _4 = <RangeFrom<u64> as Iterator>::position::<[closure@ui/iterators/iter-position-overflow-ndebug.rs:7:40: 7:43]>(move _5, move _9) -> bb2;
    }

    bb2: {
        _3 = &_4;
        _12 = Option::<usize>::Some(const _);
        _11 = &_12;
        _2 = (move _3, move _11);
        _13 = (_2.0: &std::option::Option<usize>);
        _14 = (_2.1: &std::option::Option<usize>);
        _16 = <Option<usize> as PartialEq>::eq(_13, _14) -> bb3;
    }

    bb3: {
        _15 = Not(move _16);
        switchInt(move _15) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<Option<usize>, Option<usize>>(move _17, _13, _14, move _19);
    }

    bb5: {
        _26 = RangeFrom::<u64> { start: const 0_u64 };
        _25 = &mut _26;
        _24 = <RangeFrom<u64> as Iterator>::by_ref(move _25) -> bb6;
    }

    bb6: {
        _23 = _24;
        _28 = &_1;
        _27 = [closure@ui/iterators/iter-position-overflow-ndebug.rs:8:40: 8:43] { n: move _28 };
        _22 = <RangeFrom<u64> as Iterator>::position::<[closure@ui/iterators/iter-position-overflow-ndebug.rs:8:40: 8:43]>(move _23, move _27) -> bb7;
    }

    bb7: {
        _21 = &_22;
        _30 = Option::<usize>::Some(const 0_usize);
        _29 = &_30;
        _20 = (move _21, move _29);
        _31 = (_20.0: &std::option::Option<usize>);
        _32 = (_20.1: &std::option::Option<usize>);
        _34 = <Option<usize> as PartialEq>::eq(_31, _32) -> bb8;
    }

    bb8: {
        _33 = Not(move _34);
        switchInt(move _33) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _35 = core::panicking::AssertKind::Eq;
        _37 = Option::<Arguments<'_>>::None;
        _36 = core::panicking::assert_failed::<Option<usize>, Option<usize>>(move _35, _31, _32, move _37);
    }

    bb10: {
        _46 = _1;
        _45 = Add(move _46, const 1_u64);
        _44 = RangeInclusive::<u64>::new(const 0_u64, move _45) -> bb11;
    }

    bb11: {
        _43 = &mut _44;
        _42 = <RangeInclusive<u64> as Iterator>::by_ref(move _43) -> bb12;
    }

    bb12: {
        _41 = _42;
        _40 = <RangeInclusive<u64> as Iterator>::position::<[closure@ui/iterators/iter-position-overflow-ndebug.rs:9:46: 9:49]>(move _41, const ZeroSized: [closure@ui/iterators/iter-position-overflow-ndebug.rs:9:46: 9:49]) -> bb13;
    }

    bb13: {
        _39 = &_40;
        _48 = Option::<usize>::None;
        _47 = &_48;
        _38 = (move _39, move _47);
        _49 = (_38.0: &std::option::Option<usize>);
        _50 = (_38.1: &std::option::Option<usize>);
        _52 = <Option<usize> as PartialEq>::eq(_49, _50) -> bb14;
    }

    bb14: {
        _51 = Not(move _52);
        switchInt(move _51) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _53 = core::panicking::AssertKind::Eq;
        _55 = Option::<Arguments<'_>>::None;
        _54 = core::panicking::assert_failed::<Option<usize>, Option<usize>>(move _53, _49, _50, move _55);
    }

    bb16: {
        return;
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/iterators/iter-position-overflow-ndebug.rs:7:40: 7:43], _2: u64) -> bool {
    debug i => _2;
    debug n => (*((*_1).0: &u64));
    let mut _0: bool;
    let mut _3: u64;
    let mut _4: &u64;

    bb0: {
        _4 = deref_copy ((*_1).0: &u64);
        _3 = (*_4);
        _0 = Ge(_2, move _3);
        return;
    }
}

fn main::{closure#1}(_1: &mut [closure@ui/iterators/iter-position-overflow-ndebug.rs:8:40: 8:43], _2: u64) -> bool {
    debug i => _2;
    debug n => (*((*_1).0: &u64));
    let mut _0: bool;
    let mut _3: u64;
    let mut _4: &u64;

    bb0: {
        _4 = deref_copy ((*_1).0: &u64);
        _3 = (*_4);
        _0 = Gt(_2, move _3);
        return;
    }
}

fn main::{closure#2}(_1: &mut [closure@ui/iterators/iter-position-overflow-ndebug.rs:9:46: 9:49], _2: u64) -> bool {
    let mut _0: bool;

    bb0: {
        _0 = const false;
        return;
    }
}
