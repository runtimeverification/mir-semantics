// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: [i32; 2];
    let _3: std::slice::Iter<'_, i32>;
    let mut _4: &[i32; 2];
    let _5: std::slice::Iter<'_, i32>;
    let mut _6: &[i32; 2];
    let _7: [i32; 2];
    let _8: std::slice::Iter<'_, u8>;
    let mut _9: &[u8; 33];
    let _10: std::slice::Iter<'_, u8>;
    let mut _11: &[u8; 33];
    let _12: [u8; 33];
    let _13: std::slice::Iter<'_, i32>;
    let mut _14: &[i32; 2];
    let _15: std::boxed::Box<[i32; 2]>;
    let mut _16: [i32; 2];
    let _17: std::slice::Iter<'_, i32>;
    let mut _18: &[i32; 2];
    let _19: std::boxed::Box<[i32; 2]>;
    let mut _20: [i32; 2];
    let _21: std::slice::Iter<'_, u8>;
    let mut _22: &[u8; 33];
    let _23: std::boxed::Box<[u8; 33]>;
    let mut _24: [u8; 33];
    let _25: std::slice::Iter<'_, u8>;
    let mut _26: &[u8; 33];
    let _27: std::boxed::Box<[u8; 33]>;
    let mut _28: [u8; 33];
    let _29: std::slice::Iter<'_, i32>;
    let mut _30: &[i32; 2];
    let _31: std::boxed::Box<std::boxed::Box<[i32; 2]>>;
    let mut _32: std::boxed::Box<[i32; 2]>;
    let mut _33: [i32; 2];
    let _34: std::slice::Iter<'_, i32>;
    let mut _35: &[i32; 2];
    let _36: std::boxed::Box<std::boxed::Box<[i32; 2]>>;
    let mut _37: std::boxed::Box<[i32; 2]>;
    let mut _38: [i32; 2];
    let _39: std::slice::Iter<'_, u8>;
    let mut _40: &[u8; 33];
    let _41: std::boxed::Box<std::boxed::Box<[u8; 33]>>;
    let mut _42: std::boxed::Box<[u8; 33]>;
    let mut _43: [u8; 33];
    let _44: std::slice::Iter<'_, u8>;
    let mut _45: &[u8; 33];
    let _46: std::boxed::Box<std::boxed::Box<[u8; 33]>>;
    let mut _47: std::boxed::Box<[u8; 33]>;
    let mut _48: [u8; 33];
    let _49: std::slice::Iter<'_, i32>;
    let _50: &[i32; 2];
    let _51: [i32; 2];
    let _52: std::slice::Iter<'_, i32>;
    let _53: &[i32; 2];
    let _54: std::slice::Iter<'_, u8>;
    let _55: &[u8; 33];
    let _56: [u8; 33];
    let _57: std::slice::Iter<'_, u8>;
    let _58: &[u8; 33];
    let mut _59: std::slice::Iter<'_, i32>;
    let mut _60: &[i32; 2];
    let _61: [i32; 2];
    let mut _63: std::option::Option<&i32>;
    let mut _64: &mut std::slice::Iter<'_, i32>;
    let mut _65: isize;
    let _66: std::slice::Iter<'_, i32>;
    let _67: &[i32];
    let _68: &[i32; 2];
    let _69: std::slice::Iter<'_, i32>;
    let mut _70: &[i32];
    let _71: &[i32];
    let mut _72: &[i32; 2];
    let _73: std::slice::Iter<'_, i32>;
    let mut _74: &[i32; 2];
    let _75: [i32; 2];
    let _76: std::slice::Iter<'_, i32>;
    let mut _77: &[i32; 2];
    let _78: [i32; 2];
    let mut _79: std::boxed::Box<[i32; 2]>;
    let mut _80: std::boxed::Box<[i32; 2]>;
    let mut _81: std::boxed::Box<[u8; 33]>;
    let mut _82: std::boxed::Box<[u8; 33]>;
    let mut _83: *const [i32; 2];
    let mut _84: *const [i32; 2];
    let mut _85: *const [u8; 33];
    let mut _86: *const [u8; 33];
    let mut _87: *const std::boxed::Box<[i32; 2]>;
    let mut _88: *const [i32; 2];
    let mut _89: *const std::boxed::Box<[i32; 2]>;
    let mut _90: *const [i32; 2];
    let mut _91: *const std::boxed::Box<[u8; 33]>;
    let mut _92: *const [u8; 33];
    let mut _93: *const std::boxed::Box<[u8; 33]>;
    let mut _94: *const [u8; 33];
    scope 1 {
        debug small => _1;
        let _2: [u8; 33];
        scope 2 {
            debug big => _2;
            let mut _62: std::slice::Iter<'_, i32>;
            let mut _95: *const ();
            let mut _96: usize;
            let mut _97: usize;
            let mut _98: usize;
            let mut _99: usize;
            let mut _100: bool;
            let mut _101: *const ();
            let mut _102: usize;
            let mut _103: usize;
            let mut _104: usize;
            let mut _105: usize;
            let mut _106: bool;
            let mut _107: *const ();
            let mut _108: usize;
            let mut _109: usize;
            let mut _110: usize;
            let mut _111: usize;
            let mut _112: bool;
            let mut _113: *const ();
            let mut _114: usize;
            let mut _115: usize;
            let mut _116: usize;
            let mut _117: usize;
            let mut _118: bool;
            let mut _119: *const ();
            let mut _120: usize;
            let mut _121: usize;
            let mut _122: usize;
            let mut _123: usize;
            let mut _124: bool;
            let mut _125: *const ();
            let mut _126: usize;
            let mut _127: usize;
            let mut _128: usize;
            let mut _129: usize;
            let mut _130: bool;
            let mut _131: *const ();
            let mut _132: usize;
            let mut _133: usize;
            let mut _134: usize;
            let mut _135: usize;
            let mut _136: bool;
            let mut _137: *const ();
            let mut _138: usize;
            let mut _139: usize;
            let mut _140: usize;
            let mut _141: usize;
            let mut _142: bool;
            scope 3 {
                debug iter => _62;
            }
            scope 4 {
            }
        }
    }

    bb0: {
        _1 = [const 1_i32, const 2_i32];
        _2 = [const 0_u8; 33];
        _4 = &_1;
        _3 = <&[i32; 2] as IntoIterator>::into_iter(move _4) -> bb1;
    }

    bb1: {
        _7 = [const 1_i32, const 2_i32];
        _6 = &_7;
        _5 = <&[i32; 2] as IntoIterator>::into_iter(move _6) -> bb2;
    }

    bb2: {
        _9 = &_2;
        _8 = <&[u8; 33] as IntoIterator>::into_iter(move _9) -> bb3;
    }

    bb3: {
        _12 = [const 0_u8; 33];
        _11 = &_12;
        _10 = <&[u8; 33] as IntoIterator>::into_iter(move _11) -> bb4;
    }

    bb4: {
        _16 = _1;
        _15 = Box::<[i32; 2]>::new(move _16) -> bb5;
    }

    bb5: {
        _83 = (((_15.0: std::ptr::Unique<[i32; 2]>).0: std::ptr::NonNull<[i32; 2]>).0: *const [i32; 2]);
        _137 = _83 as *const () (PtrToPtr);
        _138 = _137 as usize (Transmute);
        _139 = AlignOf(i32);
        _140 = Sub(_139, const 1_usize);
        _141 = BitAnd(_138, _140);
        _142 = Eq(_141, const 0_usize);
        assert(_142, "misaligned pointer dereference: address must be a multiple of {} but is {}", _139, _138) -> [success: bb63, unwind unreachable];
    }

    bb6: {
        drop(_15) -> bb7;
    }

    bb7: {
        _20 = [const 1_i32, const 2_i32];
        _19 = Box::<[i32; 2]>::new(move _20) -> bb8;
    }

    bb8: {
        _84 = (((_19.0: std::ptr::Unique<[i32; 2]>).0: std::ptr::NonNull<[i32; 2]>).0: *const [i32; 2]);
        _131 = _84 as *const () (PtrToPtr);
        _132 = _131 as usize (Transmute);
        _133 = AlignOf(i32);
        _134 = Sub(_133, const 1_usize);
        _135 = BitAnd(_132, _134);
        _136 = Eq(_135, const 0_usize);
        assert(_136, "misaligned pointer dereference: address must be a multiple of {} but is {}", _133, _132) -> [success: bb62, unwind unreachable];
    }

    bb9: {
        drop(_19) -> bb10;
    }

    bb10: {
        _24 = _2;
        _23 = Box::<[u8; 33]>::new(move _24) -> bb11;
    }

    bb11: {
        _85 = (((_23.0: std::ptr::Unique<[u8; 33]>).0: std::ptr::NonNull<[u8; 33]>).0: *const [u8; 33]);
        _22 = &(*_85);
        _21 = <&[u8; 33] as IntoIterator>::into_iter(move _22) -> [return: bb12, unwind: bb52];
    }

    bb12: {
        drop(_23) -> bb13;
    }

    bb13: {
        _28 = [const 0_u8; 33];
        _27 = Box::<[u8; 33]>::new(move _28) -> bb14;
    }

    bb14: {
        _86 = (((_27.0: std::ptr::Unique<[u8; 33]>).0: std::ptr::NonNull<[u8; 33]>).0: *const [u8; 33]);
        _26 = &(*_86);
        _25 = <&[u8; 33] as IntoIterator>::into_iter(move _26) -> [return: bb15, unwind: bb51];
    }

    bb15: {
        drop(_27) -> bb16;
    }

    bb16: {
        _33 = _1;
        _32 = Box::<[i32; 2]>::new(move _33) -> bb17;
    }

    bb17: {
        _31 = Box::<Box<[i32; 2]>>::new(move _32) -> bb18;
    }

    bb18: {
        _87 = (((_31.0: std::ptr::Unique<std::boxed::Box<[i32; 2]>>).0: std::ptr::NonNull<std::boxed::Box<[i32; 2]>>).0: *const std::boxed::Box<[i32; 2]>);
        _125 = _87 as *const () (PtrToPtr);
        _126 = _125 as usize (Transmute);
        _127 = AlignOf(std::boxed::Box<[i32; 2]>);
        _128 = Sub(_127, const 1_usize);
        _129 = BitAnd(_126, _128);
        _130 = Eq(_129, const 0_usize);
        assert(_130, "misaligned pointer dereference: address must be a multiple of {} but is {}", _127, _126) -> [success: bb61, unwind unreachable];
    }

    bb19: {
        drop(_31) -> bb20;
    }

    bb20: {
        _38 = [const 1_i32, const 2_i32];
        _37 = Box::<[i32; 2]>::new(move _38) -> bb21;
    }

    bb21: {
        _36 = Box::<Box<[i32; 2]>>::new(move _37) -> bb22;
    }

    bb22: {
        _89 = (((_36.0: std::ptr::Unique<std::boxed::Box<[i32; 2]>>).0: std::ptr::NonNull<std::boxed::Box<[i32; 2]>>).0: *const std::boxed::Box<[i32; 2]>);
        _113 = _89 as *const () (PtrToPtr);
        _114 = _113 as usize (Transmute);
        _115 = AlignOf(std::boxed::Box<[i32; 2]>);
        _116 = Sub(_115, const 1_usize);
        _117 = BitAnd(_114, _116);
        _118 = Eq(_117, const 0_usize);
        assert(_118, "misaligned pointer dereference: address must be a multiple of {} but is {}", _115, _114) -> [success: bb59, unwind unreachable];
    }

    bb23: {
        drop(_36) -> bb24;
    }

    bb24: {
        _43 = _2;
        _42 = Box::<[u8; 33]>::new(move _43) -> bb25;
    }

    bb25: {
        _41 = Box::<Box<[u8; 33]>>::new(move _42) -> bb26;
    }

    bb26: {
        _91 = (((_41.0: std::ptr::Unique<std::boxed::Box<[u8; 33]>>).0: std::ptr::NonNull<std::boxed::Box<[u8; 33]>>).0: *const std::boxed::Box<[u8; 33]>);
        _101 = _91 as *const () (PtrToPtr);
        _102 = _101 as usize (Transmute);
        _103 = AlignOf(std::boxed::Box<[u8; 33]>);
        _104 = Sub(_103, const 1_usize);
        _105 = BitAnd(_102, _104);
        _106 = Eq(_105, const 0_usize);
        assert(_106, "misaligned pointer dereference: address must be a multiple of {} but is {}", _103, _102) -> [success: bb57, unwind unreachable];
    }

    bb27: {
        drop(_41) -> bb28;
    }

    bb28: {
        _48 = [const 0_u8; 33];
        _47 = Box::<[u8; 33]>::new(move _48) -> bb29;
    }

    bb29: {
        _46 = Box::<Box<[u8; 33]>>::new(move _47) -> bb30;
    }

    bb30: {
        _93 = (((_46.0: std::ptr::Unique<std::boxed::Box<[u8; 33]>>).0: std::ptr::NonNull<std::boxed::Box<[u8; 33]>>).0: *const std::boxed::Box<[u8; 33]>);
        _95 = _93 as *const () (PtrToPtr);
        _96 = _95 as usize (Transmute);
        _97 = AlignOf(std::boxed::Box<[u8; 33]>);
        _98 = Sub(_97, const 1_usize);
        _99 = BitAnd(_96, _98);
        _100 = Eq(_99, const 0_usize);
        assert(_100, "misaligned pointer dereference: address must be a multiple of {} but is {}", _97, _96) -> [success: bb56, unwind unreachable];
    }

    bb31: {
        drop(_46) -> bb32;
    }

    bb32: {
        _51 = [const 1_i32, const 2_i32];
        _50 = &_51;
        _49 = <&[i32; 2] as IntoIterator>::into_iter(_50) -> bb33;
    }

    bb33: {
        _53 = &_1;
        _52 = <&[i32; 2] as IntoIterator>::into_iter(_53) -> bb34;
    }

    bb34: {
        _56 = [const 0_u8; 33];
        _55 = &_56;
        _54 = <&[u8; 33] as IntoIterator>::into_iter(_55) -> bb35;
    }

    bb35: {
        _58 = &_2;
        _57 = <&[u8; 33] as IntoIterator>::into_iter(_58) -> bb36;
    }

    bb36: {
        _61 = [const 1_i32, const 2_i32];
        _60 = &_61;
        _59 = <&[i32; 2] as IntoIterator>::into_iter(move _60) -> bb37;
    }

    bb37: {
        _62 = move _59;
        goto -> bb38;
    }

    bb38: {
        _64 = &mut _62;
        _63 = <std::slice::Iter<'_, i32> as Iterator>::next(_64) -> bb39;
    }

    bb39: {
        _65 = discriminant(_63);
        switchInt(move _65) -> [0: bb41, 1: bb38, otherwise: bb40];
    }

    bb40: {
        unreachable;
    }

    bb41: {
        _68 = &_1;
        _67 = _68 as &[i32] (Pointer(Unsize));
        _66 = <&[i32] as IntoIterator>::into_iter(_67) -> bb42;
    }

    bb42: {
        _72 = &_1;
        _71 = <[i32; 2] as Index<RangeFull>>::index(move _72, const RangeFull) -> bb43;
    }

    bb43: {
        _70 = _71;
        _69 = <&[i32] as IntoIterator>::into_iter(move _70) -> bb44;
    }

    bb44: {
        _75 = [const 1_i32, const 2_i32];
        _74 = &_75;
        _73 = <&[i32; 2] as IntoIterator>::into_iter(move _74) -> bb45;
    }

    bb45: {
        _78 = [const 0_i32, const 1_i32];
        _77 = &_78;
        _76 = <&[i32; 2] as IntoIterator>::into_iter(move _77) -> bb46;
    }

    bb46: {
        return;
    }

    bb47 (cleanup): {
        drop(_46) -> [return: bb55, unwind terminate];
    }

    bb48 (cleanup): {
        drop(_41) -> [return: bb55, unwind terminate];
    }

    bb49 (cleanup): {
        drop(_36) -> [return: bb55, unwind terminate];
    }

    bb50 (cleanup): {
        drop(_31) -> [return: bb55, unwind terminate];
    }

    bb51 (cleanup): {
        drop(_27) -> [return: bb55, unwind terminate];
    }

    bb52 (cleanup): {
        drop(_23) -> [return: bb55, unwind terminate];
    }

    bb53 (cleanup): {
        drop(_19) -> [return: bb55, unwind terminate];
    }

    bb54 (cleanup): {
        drop(_15) -> [return: bb55, unwind terminate];
    }

    bb55 (cleanup): {
        resume;
    }

    bb56: {
        _82 = deref_copy (*_93);
        _94 = (((_82.0: std::ptr::Unique<[u8; 33]>).0: std::ptr::NonNull<[u8; 33]>).0: *const [u8; 33]);
        _45 = &(*_94);
        _44 = <&[u8; 33] as IntoIterator>::into_iter(move _45) -> [return: bb31, unwind: bb47];
    }

    bb57: {
        _81 = deref_copy (*_91);
        _92 = (((_81.0: std::ptr::Unique<[u8; 33]>).0: std::ptr::NonNull<[u8; 33]>).0: *const [u8; 33]);
        _40 = &(*_92);
        _39 = <&[u8; 33] as IntoIterator>::into_iter(move _40) -> [return: bb27, unwind: bb48];
    }

    bb58: {
        _35 = &(*_90);
        _34 = <&[i32; 2] as IntoIterator>::into_iter(move _35) -> [return: bb23, unwind: bb49];
    }

    bb59: {
        _80 = deref_copy (*_89);
        _90 = (((_80.0: std::ptr::Unique<[i32; 2]>).0: std::ptr::NonNull<[i32; 2]>).0: *const [i32; 2]);
        _107 = _90 as *const () (PtrToPtr);
        _108 = _107 as usize (Transmute);
        _109 = AlignOf(i32);
        _110 = Sub(_109, const 1_usize);
        _111 = BitAnd(_108, _110);
        _112 = Eq(_111, const 0_usize);
        assert(_112, "misaligned pointer dereference: address must be a multiple of {} but is {}", _109, _108) -> [success: bb58, unwind unreachable];
    }

    bb60: {
        _30 = &(*_88);
        _29 = <&[i32; 2] as IntoIterator>::into_iter(move _30) -> [return: bb19, unwind: bb50];
    }

    bb61: {
        _79 = deref_copy (*_87);
        _88 = (((_79.0: std::ptr::Unique<[i32; 2]>).0: std::ptr::NonNull<[i32; 2]>).0: *const [i32; 2]);
        _119 = _88 as *const () (PtrToPtr);
        _120 = _119 as usize (Transmute);
        _121 = AlignOf(i32);
        _122 = Sub(_121, const 1_usize);
        _123 = BitAnd(_120, _122);
        _124 = Eq(_123, const 0_usize);
        assert(_124, "misaligned pointer dereference: address must be a multiple of {} but is {}", _121, _120) -> [success: bb60, unwind unreachable];
    }

    bb62: {
        _18 = &(*_84);
        _17 = <&[i32; 2] as IntoIterator>::into_iter(move _18) -> [return: bb9, unwind: bb53];
    }

    bb63: {
        _14 = &(*_83);
        _13 = <&[i32; 2] as IntoIterator>::into_iter(move _14) -> [return: bb6, unwind: bb54];
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 33_usize;
        return;
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 33_usize;
        return;
    }
}

main::{constant#2}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 33_usize;
        return;
    }
}

main::{constant#3}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 33_usize;
        return;
    }
}

main::{constant#4}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 33_usize;
        return;
    }
}
