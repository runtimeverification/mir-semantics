// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let mut _2: &usize;
    let _3: usize;
    let mut _4: &mut std::ops::Range<usize>;
    let mut _5: &mut std::ops::Range<usize>;
    let mut _6: &mut std::ops::Range<usize>;
    let mut _7: std::ops::Range<usize>;
    let mut _8: &usize;
    let _9: usize;
    let _10: &usize;
    let _11: &usize;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: usize;
    let mut _15: usize;
    let _17: !;
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _19: (&usize, &usize);
    let mut _20: &usize;
    let _21: usize;
    let mut _22: &mut std::ops::RangeInclusive<usize>;
    let mut _23: &mut std::ops::RangeInclusive<usize>;
    let mut _24: &mut std::ops::RangeInclusive<usize>;
    let mut _25: std::ops::RangeInclusive<usize>;
    let mut _26: &usize;
    let _27: usize;
    let _28: &usize;
    let _29: &usize;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: usize;
    let mut _33: usize;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _10;
        debug right_val => _11;
        let _16: core::panicking::AssertKind;
        scope 2 {
            debug kind => _16;
        }
    }
    scope 3 {
        debug left_val => _28;
        debug right_val => _29;
        let _34: core::panicking::AssertKind;
        scope 4 {
            debug kind => _34;
        }
    }

    bb0: {
        _7 = std::ops::Range::<usize> { start: const 0_usize, end: const _ };
        _6 = &mut _7;
        _5 = <std::ops::Range<usize> as Iterator>::by_ref(move _6) -> bb1;
    }

    bb1: {
        _4 = _5;
        _3 = <&mut std::ops::Range<usize> as Iterator>::count(move _4) -> bb2;
    }

    bb2: {
        _2 = &_3;
        _9 = const _;
        _8 = &_9;
        _1 = (move _2, move _8);
        _10 = (_1.0: &usize);
        _11 = (_1.1: &usize);
        _14 = (*_10);
        _15 = (*_11);
        _13 = Eq(move _14, move _15);
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _16 = core::panicking::AssertKind::Eq;
        _18 = Option::<Arguments<'_>>::None;
        _17 = core::panicking::assert_failed::<usize, usize>(move _16, _10, _11, move _18);
    }

    bb4: {
        _25 = RangeInclusive::<usize>::new(const 0_usize, const _) -> bb5;
    }

    bb5: {
        _24 = &mut _25;
        _23 = <RangeInclusive<usize> as Iterator>::by_ref(move _24) -> bb6;
    }

    bb6: {
        _22 = _23;
        _21 = <&mut RangeInclusive<usize> as Iterator>::count(move _22) -> bb7;
    }

    bb7: {
        _20 = &_21;
        _27 = const 0_usize;
        _26 = &_27;
        _19 = (move _20, move _26);
        _28 = (_19.0: &usize);
        _29 = (_19.1: &usize);
        _32 = (*_28);
        _33 = (*_29);
        _31 = Eq(move _32, move _33);
        _30 = Not(move _31);
        switchInt(move _30) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = core::panicking::assert_failed::<usize, usize>(move _34, _28, _29, move _36);
    }

    bb9: {
        return;
    }
}
