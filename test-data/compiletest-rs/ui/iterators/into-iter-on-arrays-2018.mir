// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: [i32; 10];
    let mut _2: std::slice::Iter<'_, i32>;
    let mut _3: &[i32; 10];
    let mut _4: std::slice::Iter<'_, i32>;
    let mut _5: &[i32; 10];
    let _6: std::boxed::Box<[i32; 10]>;
    let mut _7: [i32; 10];
    let mut _8: std::slice::Iter<'_, i32>;
    let mut _9: &[i32; 10];
    let _10: &[i32; 10];
    let mut _11: &std::rc::Rc<[i32; 10]>;
    let _12: std::rc::Rc<[i32; 10]>;
    let mut _13: [i32; 10];
    let mut _14: std::slice::Iter<'_, i32>;
    let mut _15: &[i32; 10];
    let _16: &[i32; 10];
    let mut _17: &Array;
    let _18: Array;
    let mut _19: [i32; 10];
    let mut _20: std::array::IntoIter<i32, 10>;
    let mut _21: [i32; 10];
    let mut _22: std::slice::Iter<'_, i32>;
    let mut _23: std::slice::Iter<'_, i32>;
    let mut _24: &[i32; 3];
    let _25: [i32; 3];
    let mut _27: std::option::Option<&i32>;
    let mut _28: &mut std::slice::Iter<'_, i32>;
    let mut _29: isize;
    let mut _30: *const [i32; 10];
    scope 1 {
        debug array => _1;
        scope 2 {
            let mut _31: *const ();
            let mut _32: usize;
            let mut _33: usize;
            let mut _34: usize;
            let mut _35: usize;
            let mut _36: bool;
            scope 3 {
                scope 4 {
                    scope 5 {
                        scope 6 {
                            let mut _26: std::slice::Iter<'_, i32>;
                            scope 7 {
                                debug iter => _26;
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = [const 0_i32; 10];
        _3 = &_1;
        _2 = <&[i32; 10] as IntoIterator>::into_iter(move _3) -> bb1;
    }

    bb1: {
        _7 = _1;
        _6 = Box::<[i32; 10]>::new(move _7) -> bb2;
    }

    bb2: {
        _30 = (((_6.0: std::ptr::Unique<[i32; 10]>).0: std::ptr::NonNull<[i32; 10]>).0: *const [i32; 10]);
        _31 = _30 as *const () (PtrToPtr);
        _32 = _31 as usize (Transmute);
        _33 = AlignOf(i32);
        _34 = Sub(_33, const 1_usize);
        _35 = BitAnd(_32, _34);
        _36 = Eq(_35, const 0_usize);
        assert(_36, "misaligned pointer dereference: address must be a multiple of {} but is {}", _33, _32) -> [success: bb22, unwind unreachable];
    }

    bb3: {
        drop(_6) -> bb4;
    }

    bb4: {
        _13 = _1;
        _12 = Rc::<[i32; 10]>::new(move _13) -> bb5;
    }

    bb5: {
        _11 = &_12;
        _10 = <Rc<[i32; 10]> as Deref>::deref(move _11) -> [return: bb6, unwind: bb19];
    }

    bb6: {
        _9 = _10;
        _8 = <&[i32; 10] as IntoIterator>::into_iter(move _9) -> [return: bb7, unwind: bb19];
    }

    bb7: {
        drop(_12) -> bb8;
    }

    bb8: {
        _19 = _1;
        _18 = Array(move _19);
        _17 = &_18;
        _16 = <Array as Deref>::deref(move _17) -> bb9;
    }

    bb9: {
        _15 = _16;
        _14 = <&[i32; 10] as IntoIterator>::into_iter(move _15) -> bb10;
    }

    bb10: {
        _21 = _1;
        _20 = <[i32; 10] as IntoIterator>::into_iter(move _21) -> bb11;
    }

    bb11: {
        drop(_20) -> bb12;
    }

    bb12: {
        _25 = [const 1_i32, const 2_i32, const 3_i32];
        _24 = &_25;
        _23 = <&[i32; 3] as IntoIterator>::into_iter(move _24) -> bb13;
    }

    bb13: {
        _22 = <std::slice::Iter<'_, i32> as IntoIterator>::into_iter(move _23) -> bb14;
    }

    bb14: {
        _26 = move _22;
        goto -> bb15;
    }

    bb15: {
        _28 = &mut _26;
        _27 = <std::slice::Iter<'_, i32> as Iterator>::next(_28) -> bb16;
    }

    bb16: {
        _29 = discriminant(_27);
        switchInt(move _29) -> [0: bb18, 1: bb15, otherwise: bb17];
    }

    bb17: {
        unreachable;
    }

    bb18: {
        return;
    }

    bb19 (cleanup): {
        drop(_12) -> [return: bb21, unwind terminate];
    }

    bb20 (cleanup): {
        drop(_6) -> [return: bb21, unwind terminate];
    }

    bb21 (cleanup): {
        resume;
    }

    bb22: {
        _5 = &(*_30);
        _4 = <&[i32; 10] as IntoIterator>::into_iter(move _5) -> [return: bb3, unwind: bb20];
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 10_usize;
        return;
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 10_usize;
        return;
    }
}

Array::0::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 10_usize;
        return;
    }
}

<impl at ui/iterators/into-iter-on-arrays-2018.rs:40:1: 40:21>::Target::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 10_usize;
        return;
    }
}

fn <impl at ui/iterators/into-iter-on-arrays-2018.rs:40:1: 40:21>::deref(_1: &Array) -> &[i32; 10] {
    debug self => _1;
    let mut _0: &[i32; 10];

    bb0: {
        _0 = &((*_1).0: [i32; 10]);
        return;
    }
}

fn Array(_1: [i32; 10]) -> Array {
    let mut _0: Array;

    bb0: {
        _0 = Array(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Array(_1: [i32; 10]) -> Array {
    let mut _0: Array;

    bb0: {
        _0 = Array(move _1);
        return;
    }
}
