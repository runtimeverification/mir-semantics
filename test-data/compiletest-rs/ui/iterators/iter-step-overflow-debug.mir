// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _5: !;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _10: !;
    scope 1 {
        debug r => _1;
        let _6: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 2 {
            debug r => _6;
        }
    }

    bb0: {
        _1 = catch_unwind::<[closure@ui/iterators/iter-step-overflow-debug.rs:8:33: 8:35], ()>(const ZeroSized: [closure@ui/iterators/iter-step-overflow-debug.rs:8:33: 8:35]) -> bb1;
    }

    bb1: {
        _4 = &_1;
        _3 = Result::<(), Box<dyn Any + Send>>::is_err(move _4) -> [return: bb2, unwind: bb12];
    }

    bb2: {
        _2 = Not(move _3);
        switchInt(move _2) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _5 = core::panicking::panic(const "assertion failed: r.is_err()") -> bb12;
    }

    bb4: {
        _6 = catch_unwind::<[closure@ui/iterators/iter-step-overflow-debug.rs:15:33: 15:35], ()>(const ZeroSized: [closure@ui/iterators/iter-step-overflow-debug.rs:15:33: 15:35]) -> [return: bb5, unwind: bb12];
    }

    bb5: {
        _9 = &_6;
        _8 = Result::<(), Box<dyn Any + Send>>::is_err(move _9) -> [return: bb6, unwind: bb11];
    }

    bb6: {
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _10 = core::panicking::panic(const "assertion failed: r.is_err()") -> bb11;
    }

    bb8: {
        drop(_6) -> [return: bb9, unwind: bb12];
    }

    bb9: {
        drop(_1) -> bb10;
    }

    bb10: {
        return;
    }

    bb11 (cleanup): {
        drop(_6) -> [return: bb12, unwind terminate];
    }

    bb12 (cleanup): {
        drop(_1) -> [return: bb13, unwind terminate];
    }

    bb13 (cleanup): {
        resume;
    }
}

fn main::{closure#0}(_1: [closure@ui/iterators/iter-step-overflow-debug.rs:8:33: 8:35]) -> () {
    let mut _0: ();
    let mut _2: std::ops::RangeFrom<u8>;
    let _3: u8;
    let mut _4: std::option::Option<u8>;
    let mut _5: &mut std::ops::RangeFrom<u8>;
    let _6: u8;
    let mut _7: std::option::Option<u8>;
    let mut _8: &mut std::ops::RangeFrom<u8>;
    scope 1 {
        debug it => _2;
    }

    bb0: {
        _2 = RangeFrom::<u8> { start: const _ };
        _5 = &mut _2;
        _4 = <RangeFrom<u8> as Iterator>::next(move _5) -> bb1;
    }

    bb1: {
        _3 = Option::<u8>::unwrap(move _4) -> bb2;
    }

    bb2: {
        _8 = &mut _2;
        _7 = <RangeFrom<u8> as Iterator>::next(move _8) -> bb3;
    }

    bb3: {
        _6 = Option::<u8>::unwrap(move _7) -> bb4;
    }

    bb4: {
        return;
    }
}

fn main::{closure#1}(_1: [closure@ui/iterators/iter-step-overflow-debug.rs:15:33: 15:35]) -> () {
    let mut _0: ();
    let mut _2: std::ops::RangeFrom<i8>;
    let _3: i8;
    let mut _4: std::option::Option<i8>;
    let mut _5: &mut std::ops::RangeFrom<i8>;
    let _6: i8;
    let mut _7: std::option::Option<i8>;
    let mut _8: &mut std::ops::RangeFrom<i8>;
    scope 1 {
        debug it => _2;
    }

    bb0: {
        _2 = RangeFrom::<i8> { start: const _ };
        _5 = &mut _2;
        _4 = <RangeFrom<i8> as Iterator>::next(move _5) -> bb1;
    }

    bb1: {
        _3 = Option::<i8>::unwrap(move _4) -> bb2;
    }

    bb2: {
        _8 = &mut _2;
        _7 = <RangeFrom<i8> as Iterator>::next(move _8) -> bb3;
    }

    bb3: {
        _6 = Option::<i8>::unwrap(move _7) -> bb4;
    }

    bb4: {
        return;
    }
}
