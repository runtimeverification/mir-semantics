// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::iter::Skip<std::iter::Chain<std::ops::Range<usize>, std::ops::Range<usize>>>;
    let mut _2: std::iter::Chain<std::ops::Range<usize>, std::ops::Range<usize>>;
    let mut _3: std::ops::Range<usize>;
    let mut _4: std::ops::Range<usize>;
    let mut _5: (&usize, &usize);
    let mut _6: &usize;
    let _7: usize;
    let mut _8: std::iter::Skip<std::iter::Chain<std::ops::Range<usize>, std::ops::Range<usize>>>;
    let mut _9: &usize;
    let _10: usize;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: usize;
    let mut _16: usize;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug i => _1;
        let _11: &usize;
        let _12: &usize;
        scope 2 {
            debug left_val => _11;
            debug right_val => _12;
            let _17: core::panicking::AssertKind;
            scope 3 {
                debug kind => _17;
            }
        }
    }

    bb0: {
        _3 = std::ops::Range::<usize> { start: const 0_usize, end: const _ };
        _4 = std::ops::Range::<usize> { start: const 0_usize, end: const 10_usize };
        _2 = <std::ops::Range<usize> as Iterator>::chain::<std::ops::Range<usize>>(move _3, move _4) -> bb1;
    }

    bb1: {
        _1 = <std::iter::Chain<std::ops::Range<usize>, std::ops::Range<usize>> as Iterator>::skip(move _2, const _) -> bb2;
    }

    bb2: {
        _8 = move _1;
        _7 = <Skip<std::iter::Chain<std::ops::Range<usize>, std::ops::Range<usize>>> as Iterator>::count(move _8) -> bb3;
    }

    bb3: {
        _6 = &_7;
        _10 = const 10_usize;
        _9 = &_10;
        _5 = (move _6, move _9);
        _11 = (_5.0: &usize);
        _12 = (_5.1: &usize);
        _15 = (*_11);
        _16 = (*_12);
        _14 = Eq(move _15, move _16);
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<usize, usize>(move _17, _11, _12, move _19);
    }

    bb5: {
        return;
    }
}
