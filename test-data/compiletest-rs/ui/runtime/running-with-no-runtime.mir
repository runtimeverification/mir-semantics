// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn start(_1: isize, _2: *const *const u8) -> isize {
    debug argc => _1;
    debug argv => _2;
    let mut _0: isize;
    let mut _3: bool;
    let mut _4: char;
    let mut _5: u8;
    let mut _6: *const *const u8;
    let mut _7: *const *const u8;
    let _8: ();
    let mut _9: std::fmt::Arguments<'_>;
    let mut _10: &[&str];
    let _11: &[&str; 1];
    let _12: [&str; 1];
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let _16: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _17: !;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let _21: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _22: !;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: &std::result::Result<std::process::Child, std::io::Error>;
    let _26: std::result::Result<std::process::Child, std::io::Error>;
    let mut _27: &mut std::process::Command;
    let mut _28: std::process::Command;
    let mut _29: !;
    let mut _30: !;
    let _31: std::vec::Vec<std::vec::Vec<u8>>;
    let mut _32: std::iter::Map<std::ops::Range<usize>, [closure@ui/runtime/running-with-no-runtime.rs:31:32: 31:35]>;
    let mut _33: std::ops::Range<usize>;
    let mut _34: usize;
    let mut _35: [closure@ui/runtime/running-with-no-runtime.rs:31:32: 31:35];
    let mut _36: &*const *const u8;
    let mut _38: std::result::Result<std::string::String, std::string::FromUtf8Error>;
    let mut _39: std::vec::Vec<u8>;
    let mut _40: &[u8];
    let _41: &[u8];
    let mut _42: &std::vec::Vec<u8>;
    let _43: &std::vec::Vec<u8>;
    let mut _44: &std::vec::Vec<std::vec::Vec<u8>>;
    let _45: ();
    let mut _46: std::process::Output;
    let mut _47: std::result::Result<std::process::Output, std::io::Error>;
    let mut _48: &mut std::process::Command;
    let mut _49: &mut std::process::Command;
    let mut _50: &mut std::process::Command;
    let mut _51: std::process::Command;
    let mut _52: &std::string::String;
    let _53: ();
    let mut _54: std::process::Output;
    let mut _55: std::result::Result<std::process::Output, std::io::Error>;
    let mut _56: &mut std::process::Command;
    let mut _57: &mut std::process::Command;
    let mut _58: &mut std::process::Command;
    let mut _59: std::process::Command;
    let mut _60: &std::string::String;
    let _61: ();
    let mut _62: std::process::Output;
    let mut _63: std::result::Result<std::process::Output, std::io::Error>;
    let mut _64: &mut std::process::Command;
    let mut _65: &mut std::process::Command;
    let mut _66: &mut std::process::Command;
    let mut _67: std::process::Command;
    let mut _68: &std::string::String;
    let _69: ();
    let mut _70: std::process::Output;
    let mut _71: std::result::Result<std::process::Output, std::io::Error>;
    let mut _72: &mut std::process::Command;
    let mut _73: &mut std::process::Command;
    let mut _74: &mut std::process::Command;
    let mut _75: std::process::Command;
    let mut _76: &std::string::String;
    let _77: ();
    let mut _78: std::process::Output;
    let mut _79: std::result::Result<std::process::Output, std::io::Error>;
    let mut _80: &mut std::process::Command;
    let mut _81: &mut std::process::Command;
    let mut _82: &mut std::process::Command;
    let mut _83: std::process::Command;
    let mut _84: &std::string::String;
    let mut _85: *const u8;
    scope 1 {
        let mut _86: *const ();
        let mut _87: usize;
        let mut _88: usize;
        let mut _89: usize;
        let mut _90: usize;
        let mut _91: bool;
    }
    scope 2 {
        debug args => _31;
        let _37: std::string::String;
        scope 4 {
            debug me => _37;
        }
    }
    scope 3 {
    }

    bb0: {
        _3 = Gt(_1, const 1_isize);
        switchInt(move _3) -> [0: bb24, otherwise: bb1];
    }

    bb1: {
        _7 = _2;
        _6 = ptr::const_ptr::<impl *const *const u8>::offset(move _7, const 1_isize) -> bb2;
    }

    bb2: {
        _86 = _6 as *const () (PtrToPtr);
        _87 = _86 as usize (Transmute);
        _88 = AlignOf(*const u8);
        _89 = Sub(_88, const 1_usize);
        _90 = BitAnd(_87, _89);
        _91 = Eq(_90, const 0_usize);
        assert(_91, "misaligned pointer dereference: address must be a multiple of {} but is {}", _88, _87) -> [success: bb76, unwind unreachable];
    }

    bb3: {
        _30 = begin_panic::<&str>(const "explicit panic");
    }

    bb4: {
        _12 = [const "foo\n"];
        _11 = &_12;
        _10 = _11 as &[&str] (Pointer(Unsize));
        _9 = Arguments::<'_>::new_const(move _10) -> bb5;
    }

    bb5: {
        _8 = _print(move _9) -> bb23;
    }

    bb6: {
        _16 = catch_unwind::<[closure@ui/runtime/running-with-no-runtime.rs:21:52: 21:54], ()>(const ZeroSized: [closure@ui/runtime/running-with-no-runtime.rs:21:52: 21:54]) -> bb7;
    }

    bb7: {
        _15 = &_16;
        _14 = Result::<(), Box<dyn Any + Send>>::is_ok(move _15) -> [return: bb8, unwind: bb74];
    }

    bb8: {
        _13 = Not(move _14);
        drop(_16) -> bb9;
    }

    bb9: {
        switchInt(move _13) -> [0: bb23, otherwise: bb10];
    }

    bb10: {
        _17 = core::panicking::panic(const "assertion failed: panic::catch_unwind(|| {}).is_ok()");
    }

    bb11: {
        _21 = catch_unwind::<[closure@ui/runtime/running-with-no-runtime.rs:22:52: 22:54], ()>(const ZeroSized: [closure@ui/runtime/running-with-no-runtime.rs:22:52: 22:54]) -> bb12;
    }

    bb12: {
        _20 = &_21;
        _19 = Result::<(), Box<dyn Any + Send>>::is_err(move _20) -> [return: bb13, unwind: bb73];
    }

    bb13: {
        _18 = Not(move _19);
        drop(_21) -> bb14;
    }

    bb14: {
        switchInt(move _18) -> [0: bb23, otherwise: bb15];
    }

    bb15: {
        _22 = core::panicking::panic(const "assertion failed: panic::catch_unwind(|| panic!()).is_err()");
    }

    bb16: {
        _28 = Command::new::<&str>(const "test") -> bb17;
    }

    bb17: {
        _27 = &mut _28;
        _26 = Command::spawn(move _27) -> [return: bb18, unwind: bb72];
    }

    bb18: {
        _25 = &_26;
        _24 = Result::<Child, std::io::Error>::is_err(move _25) -> [return: bb19, unwind: bb71];
    }

    bb19: {
        _23 = Not(move _24);
        drop(_26) -> [return: bb20, unwind: bb72];
    }

    bb20: {
        drop(_28) -> bb21;
    }

    bb21: {
        switchInt(move _23) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        _29 = core::panicking::panic(const "assertion failed: Command::new(\\\"test\\\").spawn().is_err()");
    }

    bb23: {
        _0 = const 0_isize;
        goto -> bb63;
    }

    bb24: {
        _34 = _1 as usize (IntToInt);
        _33 = std::ops::Range::<usize> { start: const 0_usize, end: move _34 };
        _36 = &_2;
        _35 = [closure@ui/runtime/running-with-no-runtime.rs:31:32: 31:35] { argv: move _36 };
        _32 = <std::ops::Range<usize> as Iterator>::map::<Vec<u8>, [closure@ui/runtime/running-with-no-runtime.rs:31:32: 31:35]>(move _33, move _35) -> bb25;
    }

    bb25: {
        _31 = <Map<std::ops::Range<usize>, [closure@ui/runtime/running-with-no-runtime.rs:31:32: 31:35]> as Iterator>::collect::<Vec<Vec<u8>>>(move _32) -> bb26;
    }

    bb26: {
        _44 = &_31;
        _43 = <Vec<Vec<u8>> as Index<usize>>::index(move _44, const 0_usize) -> [return: bb27, unwind: bb70];
    }

    bb27: {
        _42 = _43;
        _41 = <Vec<u8> as Deref>::deref(move _42) -> [return: bb28, unwind: bb70];
    }

    bb28: {
        _40 = _41;
        _39 = slice::<impl [u8]>::to_vec(move _40) -> [return: bb29, unwind: bb70];
    }

    bb29: {
        _38 = String::from_utf8(move _39) -> [return: bb30, unwind: bb70];
    }

    bb30: {
        _37 = Result::<String, FromUtf8Error>::unwrap(move _38) -> [return: bb31, unwind: bb70];
    }

    bb31: {
        _52 = &_37;
        _51 = Command::new::<&String>(move _52) -> [return: bb32, unwind: bb69];
    }

    bb32: {
        _50 = &mut _51;
        _49 = Command::arg::<&str>(move _50, const "1") -> [return: bb33, unwind: bb68];
    }

    bb33: {
        _48 = _49;
        _47 = Command::output(move _48) -> [return: bb34, unwind: bb68];
    }

    bb34: {
        _46 = Result::<Output, std::io::Error>::unwrap(move _47) -> [return: bb35, unwind: bb68];
    }

    bb35: {
        _45 = pass(move _46) -> [return: bb36, unwind: bb68];
    }

    bb36: {
        drop(_51) -> [return: bb37, unwind: bb69];
    }

    bb37: {
        _60 = &_37;
        _59 = Command::new::<&String>(move _60) -> [return: bb38, unwind: bb69];
    }

    bb38: {
        _58 = &mut _59;
        _57 = Command::arg::<&str>(move _58, const "2") -> [return: bb39, unwind: bb67];
    }

    bb39: {
        _56 = _57;
        _55 = Command::output(move _56) -> [return: bb40, unwind: bb67];
    }

    bb40: {
        _54 = Result::<Output, std::io::Error>::unwrap(move _55) -> [return: bb41, unwind: bb67];
    }

    bb41: {
        _53 = pass(move _54) -> [return: bb42, unwind: bb67];
    }

    bb42: {
        drop(_59) -> [return: bb43, unwind: bb69];
    }

    bb43: {
        _68 = &_37;
        _67 = Command::new::<&String>(move _68) -> [return: bb44, unwind: bb69];
    }

    bb44: {
        _66 = &mut _67;
        _65 = Command::arg::<&str>(move _66, const "3") -> [return: bb45, unwind: bb66];
    }

    bb45: {
        _64 = _65;
        _63 = Command::output(move _64) -> [return: bb46, unwind: bb66];
    }

    bb46: {
        _62 = Result::<Output, std::io::Error>::unwrap(move _63) -> [return: bb47, unwind: bb66];
    }

    bb47: {
        _61 = pass(move _62) -> [return: bb48, unwind: bb66];
    }

    bb48: {
        drop(_67) -> [return: bb49, unwind: bb69];
    }

    bb49: {
        _76 = &_37;
        _75 = Command::new::<&String>(move _76) -> [return: bb50, unwind: bb69];
    }

    bb50: {
        _74 = &mut _75;
        _73 = Command::arg::<&str>(move _74, const "4") -> [return: bb51, unwind: bb65];
    }

    bb51: {
        _72 = _73;
        _71 = Command::output(move _72) -> [return: bb52, unwind: bb65];
    }

    bb52: {
        _70 = Result::<Output, std::io::Error>::unwrap(move _71) -> [return: bb53, unwind: bb65];
    }

    bb53: {
        _69 = pass(move _70) -> [return: bb54, unwind: bb65];
    }

    bb54: {
        drop(_75) -> [return: bb55, unwind: bb69];
    }

    bb55: {
        _84 = &_37;
        _83 = Command::new::<&String>(move _84) -> [return: bb56, unwind: bb69];
    }

    bb56: {
        _82 = &mut _83;
        _81 = Command::arg::<&str>(move _82, const "5") -> [return: bb57, unwind: bb64];
    }

    bb57: {
        _80 = _81;
        _79 = Command::output(move _80) -> [return: bb58, unwind: bb64];
    }

    bb58: {
        _78 = Result::<Output, std::io::Error>::unwrap(move _79) -> [return: bb59, unwind: bb64];
    }

    bb59: {
        _77 = pass(move _78) -> [return: bb60, unwind: bb64];
    }

    bb60: {
        drop(_83) -> [return: bb61, unwind: bb69];
    }

    bb61: {
        _0 = const 0_isize;
        drop(_37) -> [return: bb62, unwind: bb70];
    }

    bb62: {
        drop(_31) -> bb63;
    }

    bb63: {
        return;
    }

    bb64 (cleanup): {
        drop(_83) -> [return: bb69, unwind terminate];
    }

    bb65 (cleanup): {
        drop(_75) -> [return: bb69, unwind terminate];
    }

    bb66 (cleanup): {
        drop(_67) -> [return: bb69, unwind terminate];
    }

    bb67 (cleanup): {
        drop(_59) -> [return: bb69, unwind terminate];
    }

    bb68 (cleanup): {
        drop(_51) -> [return: bb69, unwind terminate];
    }

    bb69 (cleanup): {
        drop(_37) -> [return: bb70, unwind terminate];
    }

    bb70 (cleanup): {
        drop(_31) -> [return: bb75, unwind terminate];
    }

    bb71 (cleanup): {
        drop(_26) -> [return: bb72, unwind terminate];
    }

    bb72 (cleanup): {
        drop(_28) -> [return: bb75, unwind terminate];
    }

    bb73 (cleanup): {
        drop(_21) -> [return: bb75, unwind terminate];
    }

    bb74 (cleanup): {
        drop(_16) -> [return: bb75, unwind terminate];
    }

    bb75 (cleanup): {
        resume;
    }

    bb76: {
        _85 = deref_copy (*_6);
        _5 = (*_85);
        _4 = move _5 as char (IntToInt);
        switchInt(_4) -> [49: bb23, 50: bb4, 51: bb6, 52: bb11, 53: bb16, otherwise: bb3];
    }
}

fn start::{closure#1}(_1: [closure@ui/runtime/running-with-no-runtime.rs:21:52: 21:54]) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn start::{closure#2}(_1: [closure@ui/runtime/running-with-no-runtime.rs:22:52: 22:54]) -> () {
    let mut _0: ();
    let mut _2: !;

    bb0: {
        _2 = begin_panic::<&str>(const "explicit panic");
    }
}

fn start::{closure#0}(_1: &mut [closure@ui/runtime/running-with-no-runtime.rs:31:32: 31:35], _2: usize) -> Vec<u8> {
    debug i => _2;
    debug argv => (*((*_1).0: &*const *const u8));
    let mut _0: std::vec::Vec<u8>;
    let mut _3: *const i8;
    let mut _4: *const u8;
    let mut _5: *const *const u8;
    let mut _6: *const *const u8;
    let mut _7: &[u8];
    let _8: &[u8];
    let mut _9: &std::ffi::CStr;
    let _10: &std::ffi::CStr;
    let mut _11: &*const *const u8;
    let mut _12: *const ();
    let mut _13: usize;
    let mut _14: usize;
    let mut _15: usize;
    let mut _16: usize;
    let mut _17: bool;
    scope 1 {
        debug ptr => _3;
    }

    bb0: {
        _11 = deref_copy ((*_1).0: &*const *const u8);
        _6 = (*_11);
        _5 = ptr::const_ptr::<impl *const *const u8>::add(move _6, _2) -> bb1;
    }

    bb1: {
        _12 = _5 as *const () (PtrToPtr);
        _13 = _12 as usize (Transmute);
        _14 = AlignOf(*const u8);
        _15 = Sub(_14, const 1_usize);
        _16 = BitAnd(_13, _15);
        _17 = Eq(_16, const 0_usize);
        assert(_17, "misaligned pointer dereference: address must be a multiple of {} but is {}", _14, _13) -> [success: bb5, unwind unreachable];
    }

    bb2: {
        _9 = _10;
        _8 = CStr::to_bytes(move _9) -> bb3;
    }

    bb3: {
        _7 = _8;
        _0 = slice::<impl [u8]>::to_vec(move _7) -> bb4;
    }

    bb4: {
        return;
    }

    bb5: {
        _4 = (*_5);
        _3 = move _4 as *const i8 (PtrToPtr);
        _10 = CStr::from_ptr::<'_>(_3) -> bb2;
    }
}

fn pass(_1: Output) -> () {
    debug output => _1;
    let mut _0: ();
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: &std::process::ExitStatus;
    let _5: ();
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str];
    let _8: &[&str; 2];
    let _9: [&str; 2];
    let mut _10: &[core::fmt::rt::Argument<'_>];
    let _11: &[core::fmt::rt::Argument<'_>; 1];
    let _12: [core::fmt::rt::Argument<'_>; 1];
    let mut _13: core::fmt::rt::Argument<'_>;
    let _14: &std::result::Result<&str, std::str::Utf8Error>;
    let _15: std::result::Result<&str, std::str::Utf8Error>;
    let mut _16: &[u8];
    let _17: &[u8];
    let _18: &std::vec::Vec<u8>;
    let _19: ();
    let mut _20: std::fmt::Arguments<'_>;
    let mut _21: &[&str];
    let _22: &[&str; 2];
    let _23: [&str; 2];
    let mut _24: &[core::fmt::rt::Argument<'_>];
    let _25: &[core::fmt::rt::Argument<'_>; 1];
    let _26: [core::fmt::rt::Argument<'_>; 1];
    let mut _27: core::fmt::rt::Argument<'_>;
    let _28: &std::result::Result<&str, std::str::Utf8Error>;
    let _29: std::result::Result<&str, std::str::Utf8Error>;
    let mut _30: &[u8];
    let _31: &[u8];
    let _32: &std::vec::Vec<u8>;

    bb0: {
        _4 = &(_1.0: std::process::ExitStatus);
        _3 = ExitStatus::success(move _4) -> [return: bb1, unwind: bb14];
    }

    bb1: {
        _2 = Not(move _3);
        switchInt(move _2) -> [0: bb12, otherwise: bb2];
    }

    bb2: {
        _9 = [const "", const "\n"];
        _8 = &_9;
        _7 = _8 as &[&str] (Pointer(Unsize));
        _18 = &(_1.1: std::vec::Vec<u8>);
        _17 = <Vec<u8> as Deref>::deref(_18) -> [return: bb3, unwind: bb14];
    }

    bb3: {
        _16 = _17;
        _15 = from_utf8(move _16) -> [return: bb4, unwind: bb14];
    }

    bb4: {
        _14 = &_15;
        _13 = core::fmt::rt::Argument::<'_>::new_debug::<Result<&str, Utf8Error>>(_14) -> [return: bb5, unwind: bb14];
    }

    bb5: {
        _12 = [move _13];
        _11 = &_12;
        _10 = _11 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _6 = Arguments::<'_>::new_v1(move _7, move _10) -> [return: bb6, unwind: bb14];
    }

    bb6: {
        _5 = _print(move _6) -> [return: bb7, unwind: bb14];
    }

    bb7: {
        _23 = [const "", const "\n"];
        _22 = &_23;
        _21 = _22 as &[&str] (Pointer(Unsize));
        _32 = &(_1.2: std::vec::Vec<u8>);
        _31 = <Vec<u8> as Deref>::deref(_32) -> [return: bb8, unwind: bb14];
    }

    bb8: {
        _30 = _31;
        _29 = from_utf8(move _30) -> [return: bb9, unwind: bb14];
    }

    bb9: {
        _28 = &_29;
        _27 = core::fmt::rt::Argument::<'_>::new_debug::<Result<&str, Utf8Error>>(_28) -> [return: bb10, unwind: bb14];
    }

    bb10: {
        _26 = [move _27];
        _25 = &_26;
        _24 = _25 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _20 = Arguments::<'_>::new_v1(move _21, move _24) -> [return: bb11, unwind: bb14];
    }

    bb11: {
        _19 = _print(move _20) -> [return: bb16, unwind: bb14];
    }

    bb12: {
        drop(_1) -> bb13;
    }

    bb13: {
        return;
    }

    bb14 (cleanup): {
        drop(_1) -> [return: bb15, unwind terminate];
    }

    bb15 (cleanup): {
        resume;
    }

    bb16: {
        goto -> bb12;
    }
}
