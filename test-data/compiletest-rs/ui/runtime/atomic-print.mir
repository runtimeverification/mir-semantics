// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/runtime/atomic-print.rs:11:1: 11:28>::fmt(_1: &SlowFmt, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: ();
    let mut _4: &u32;

    bb0: {
        _3 = sleep_ms(const 3_u32) -> bb1;
    }

    bb1: {
        _4 = &((*_1).0: u32);
        _0 = <u32 as Debug>::fmt(move _4, _2) -> bb2;
    }

    bb2: {
        return;
    }
}

fn do_print(_1: u32) -> () {
    debug x => _1;
    let mut _0: ();
    let _2: SlowFmt;
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let _6: &[&str; 6];
    let _7: [&str; 6];
    let mut _8: &[core::fmt::rt::Argument<'_>];
    let _9: &[core::fmt::rt::Argument<'_>; 5];
    let _10: [core::fmt::rt::Argument<'_>; 5];
    let mut _11: core::fmt::rt::Argument<'_>;
    let _12: &SlowFmt;
    let mut _13: core::fmt::rt::Argument<'_>;
    let _14: &SlowFmt;
    let mut _15: core::fmt::rt::Argument<'_>;
    let _16: &SlowFmt;
    let mut _17: core::fmt::rt::Argument<'_>;
    let _18: &SlowFmt;
    let mut _19: core::fmt::rt::Argument<'_>;
    let _20: &SlowFmt;
    scope 1 {
        debug x => _2;
    }

    bb0: {
        _2 = SlowFmt(_1);
        _7 = [const "", const "", const "", const "", const "", const "\n"];
        _6 = &_7;
        _5 = _6 as &[&str] (Pointer(Unsize));
        _12 = &_2;
        _11 = core::fmt::rt::Argument::<'_>::new_debug::<SlowFmt>(_12) -> bb1;
    }

    bb1: {
        _14 = &_2;
        _13 = core::fmt::rt::Argument::<'_>::new_debug::<SlowFmt>(_14) -> bb2;
    }

    bb2: {
        _16 = &_2;
        _15 = core::fmt::rt::Argument::<'_>::new_debug::<SlowFmt>(_16) -> bb3;
    }

    bb3: {
        _18 = &_2;
        _17 = core::fmt::rt::Argument::<'_>::new_debug::<SlowFmt>(_18) -> bb4;
    }

    bb4: {
        _20 = &_2;
        _19 = core::fmt::rt::Argument::<'_>::new_debug::<SlowFmt>(_20) -> bb5;
    }

    bb5: {
        _10 = [move _11, move _13, move _15, move _17, move _19];
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> bb6;
    }

    bb6: {
        _3 = _print(move _4) -> bb7;
    }

    bb7: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: usize;
    let mut _2: std::env::Args;
    let _3: std::sync::Arc<std::sync::Barrier>;
    let mut _4: std::sync::Barrier;
    let mut _6: &std::sync::Arc<std::sync::Barrier>;
    let mut _8: [closure@ui/runtime/atomic-print.rs:27:31: 27:38];
    let _9: std::sync::BarrierWaitResult;
    let mut _10: &std::sync::Barrier;
    let _11: &std::sync::Barrier;
    let mut _12: &std::sync::Arc<std::sync::Barrier>;
    let _13: ();
    let _14: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _15: std::thread::JoinHandle<()>;
    let _16: std::string::String;
    let mut _17: std::option::Option<std::string::String>;
    let mut _18: &mut std::env::Args;
    let mut _19: std::env::Args;
    let mut _21: std::result::Result<std::process::Output, std::io::Error>;
    let mut _22: &mut std::process::Command;
    let mut _23: &mut std::process::Command;
    let mut _24: &mut std::process::Command;
    let mut _25: std::process::Command;
    let mut _26: std::string::String;
    let mut _27: std::str::Lines<'_>;
    let mut _28: std::str::Lines<'_>;
    let mut _29: &str;
    let _30: &str;
    let mut _31: &std::string::String;
    let _32: std::string::String;
    let mut _33: std::result::Result<std::string::String, std::string::FromUtf8Error>;
    let mut _34: std::vec::Vec<u8>;
    let mut _36: std::option::Option<&str>;
    let mut _37: &mut std::str::Lines<'_>;
    let mut _38: isize;
    let mut _40: char;
    let mut _41: std::option::Option<char>;
    let mut _42: &mut std::str::Chars<'_>;
    let mut _43: std::str::Chars<'_>;
    let mut _44: &str;
    let mut _45: (&&str, &&str);
    let mut _46: &&str;
    let mut _47: &&str;
    let _48: &str;
    let mut _51: bool;
    let mut _52: bool;
    let _54: !;
    let mut _55: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _56: (&&str, &&str);
    let mut _57: &&str;
    let mut _58: &&str;
    let _59: &str;
    let mut _62: bool;
    let mut _63: bool;
    let _65: !;
    let mut _66: std::option::Option<std::fmt::Arguments<'_>>;
    let _68: !;
    let mut _69: std::fmt::Arguments<'_>;
    let mut _70: &[&str];
    let _71: &[&str; 1];
    let _72: [&str; 1];
    let mut _73: &[core::fmt::rt::Argument<'_>];
    let _74: &[core::fmt::rt::Argument<'_>; 1];
    let _75: [core::fmt::rt::Argument<'_>; 1];
    let mut _76: core::fmt::rt::Argument<'_>;
    let _77: &char;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: bool;
    scope 1 {
        debug barrier => _3;
        let _5: std::sync::Arc<std::sync::Barrier>;
        scope 2 {
            debug tbarrier => _5;
            let _7: std::thread::JoinHandle<()>;
            scope 3 {
                debug t => _7;
            }
        }
    }
    scope 4 {
        debug this => _16;
        let _20: std::process::Output;
        scope 5 {
            debug output => _20;
            let mut _35: std::str::Lines<'_>;
            scope 6 {
                debug iter => _35;
                let _39: &str;
                scope 7 {
                    debug line => _39;
                    let _49: &&str;
                    let _50: &&str;
                    let _60: &&str;
                    let _61: &&str;
                    let _67: char;
                    scope 8 {
                        debug left_val => _49;
                        debug right_val => _50;
                        let _53: core::panicking::AssertKind;
                        scope 9 {
                            debug kind => _53;
                        }
                    }
                    scope 10 {
                        debug left_val => _60;
                        debug right_val => _61;
                        let _64: core::panicking::AssertKind;
                        scope 11 {
                            debug kind => _64;
                        }
                    }
                    scope 12 {
                        debug chr => _67;
                    }
                }
            }
        }
    }

    bb0: {
        _80 = const false;
        _79 = const false;
        _78 = const false;
        _2 = args() -> bb1;
    }

    bb1: {
        _1 = <Args as Iterator>::count(move _2) -> bb2;
    }

    bb2: {
        switchInt(move _1) -> [2: bb3, otherwise: bb13];
    }

    bb3: {
        _4 = Barrier::new(const 2_usize) -> bb4;
    }

    bb4: {
        _3 = Arc::<Barrier>::new(move _4) -> bb5;
    }

    bb5: {
        _6 = &_3;
        _5 = <Arc<Barrier> as Clone>::clone(move _6) -> [return: bb6, unwind: bb50];
    }

    bb6: {
        _8 = [closure@ui/runtime/atomic-print.rs:27:31: 27:38] { tbarrier: move _5 };
        _7 = spawn::<[closure@ui/runtime/atomic-print.rs:27:31: 27:38], ()>(move _8) -> [return: bb7, unwind: bb50];
    }

    bb7: {
        _80 = const true;
        _12 = &_3;
        _11 = <Arc<Barrier> as Deref>::deref(move _12) -> [return: bb8, unwind: bb59];
    }

    bb8: {
        _10 = _11;
        _9 = Barrier::wait(move _10) -> [return: bb9, unwind: bb59];
    }

    bb9: {
        _13 = do_print(const 2_u32) -> [return: bb10, unwind: bb59];
    }

    bb10: {
        _80 = const false;
        _15 = move _7;
        _14 = JoinHandle::<()>::join(move _15) -> [return: bb11, unwind: bb59];
    }

    bb11: {
        drop(_14) -> [return: bb12, unwind: bb59];
    }

    bb12: {
        _80 = const false;
        drop(_3) -> bb46;
    }

    bb13: {
        _19 = args() -> bb14;
    }

    bb14: {
        _18 = &mut _19;
        _17 = <Args as Iterator>::next(move _18) -> [return: bb15, unwind: bb49];
    }

    bb15: {
        _16 = Option::<String>::unwrap(move _17) -> [return: bb16, unwind: bb49];
    }

    bb16: {
        _79 = const true;
        drop(_19) -> [return: bb17, unwind: bb57];
    }

    bb17: {
        _79 = const false;
        _26 = move _16;
        _25 = Command::new::<String>(move _26) -> [return: bb18, unwind: bb57];
    }

    bb18: {
        _24 = &mut _25;
        _23 = Command::arg::<&str>(move _24, const "-") -> [return: bb19, unwind: bb48];
    }

    bb19: {
        _22 = _23;
        _21 = Command::output(move _22) -> [return: bb20, unwind: bb48];
    }

    bb20: {
        _20 = Result::<Output, std::io::Error>::unwrap(move _21) -> [return: bb21, unwind: bb48];
    }

    bb21: {
        _78 = const true;
        drop(_25) -> [return: bb22, unwind: bb55];
    }

    bb22: {
        _78 = const false;
        _34 = move (_20.1: std::vec::Vec<u8>);
        _33 = String::from_utf8(move _34) -> [return: bb23, unwind: bb55];
    }

    bb23: {
        _32 = Result::<String, FromUtf8Error>::unwrap(move _33) -> [return: bb24, unwind: bb55];
    }

    bb24: {
        _31 = &_32;
        _30 = <String as Deref>::deref(move _31) -> [return: bb25, unwind: bb47];
    }

    bb25: {
        _29 = _30;
        _28 = core::str::<impl str>::lines(move _29) -> [return: bb26, unwind: bb47];
    }

    bb26: {
        _27 = <std::str::Lines<'_> as IntoIterator>::into_iter(move _28) -> [return: bb27, unwind: bb47];
    }

    bb27: {
        _35 = move _27;
        goto -> bb28;
    }

    bb28: {
        _37 = &mut _35;
        _36 = <std::str::Lines<'_> as Iterator>::next(_37) -> [return: bb29, unwind: bb47];
    }

    bb29: {
        _38 = discriminant(_36);
        switchInt(move _38) -> [0: bb32, 1: bb30, otherwise: bb31];
    }

    bb30: {
        _39 = ((_36 as Some).0: &str);
        _44 = _39;
        _43 = core::str::<impl str>::chars(move _44) -> [return: bb33, unwind: bb47];
    }

    bb31: {
        unreachable;
    }

    bb32: {
        drop(_32) -> [return: bb45, unwind: bb55];
    }

    bb33: {
        _42 = &mut _43;
        _41 = <Chars<'_> as Iterator>::next(move _42) -> [return: bb34, unwind: bb47];
    }

    bb34: {
        _40 = Option::<char>::unwrap(move _41) -> [return: bb35, unwind: bb47];
    }

    bb35: {
        switchInt(_40) -> [49: bb37, 50: bb40, otherwise: bb36];
    }

    bb36: {
        _67 = _40;
        _72 = [const "unexpected character "];
        _71 = &_72;
        _70 = _71 as &[&str] (Pointer(Unsize));
        _77 = &_67;
        _76 = core::fmt::rt::Argument::<'_>::new_debug::<char>(_77) -> [return: bb43, unwind: bb47];
    }

    bb37: {
        _46 = &_39;
        _48 = const "11111";
        _47 = &_48;
        _45 = (move _46, move _47);
        _49 = (_45.0: &&str);
        _50 = (_45.1: &&str);
        _52 = <&str as PartialEq>::eq(_49, _50) -> [return: bb38, unwind: bb47];
    }

    bb38: {
        _51 = Not(move _52);
        switchInt(move _51) -> [0: bb28, otherwise: bb39];
    }

    bb39: {
        _53 = core::panicking::AssertKind::Eq;
        _55 = Option::<Arguments<'_>>::None;
        _54 = core::panicking::assert_failed::<&str, &str>(move _53, _49, _50, move _55) -> bb47;
    }

    bb40: {
        _57 = &_39;
        _59 = const "22222";
        _58 = &_59;
        _56 = (move _57, move _58);
        _60 = (_56.0: &&str);
        _61 = (_56.1: &&str);
        _63 = <&str as PartialEq>::eq(_60, _61) -> [return: bb41, unwind: bb47];
    }

    bb41: {
        _62 = Not(move _63);
        switchInt(move _62) -> [0: bb28, otherwise: bb42];
    }

    bb42: {
        _64 = core::panicking::AssertKind::Eq;
        _66 = Option::<Arguments<'_>>::None;
        _65 = core::panicking::assert_failed::<&str, &str>(move _64, _60, _61, move _66) -> bb47;
    }

    bb43: {
        _75 = [move _76];
        _74 = &_75;
        _73 = _74 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _69 = Arguments::<'_>::new_v1(move _70, move _73) -> [return: bb44, unwind: bb47];
    }

    bb44: {
        _68 = panic_fmt(move _69) -> bb47;
    }

    bb45: {
        drop((_20.2: std::vec::Vec<u8>)) -> [return: bb52, unwind: bb57];
    }

    bb46: {
        return;
    }

    bb47 (cleanup): {
        drop(_32) -> [return: bb55, unwind terminate];
    }

    bb48 (cleanup): {
        drop(_25) -> [return: bb57, unwind terminate];
    }

    bb49 (cleanup): {
        drop(_19) -> [return: bb51, unwind terminate];
    }

    bb50 (cleanup): {
        drop(_3) -> [return: bb51, unwind terminate];
    }

    bb51 (cleanup): {
        resume;
    }

    bb52: {
        _78 = const false;
        _79 = const false;
        goto -> bb46;
    }

    bb53 (cleanup): {
        drop((_20.2: std::vec::Vec<u8>)) -> [return: bb57, unwind terminate];
    }

    bb54 (cleanup): {
        drop((_20.1: std::vec::Vec<u8>)) -> [return: bb53, unwind terminate];
    }

    bb55 (cleanup): {
        switchInt(_78) -> [0: bb53, otherwise: bb54];
    }

    bb56 (cleanup): {
        drop(_16) -> [return: bb51, unwind terminate];
    }

    bb57 (cleanup): {
        switchInt(_79) -> [0: bb51, otherwise: bb56];
    }

    bb58 (cleanup): {
        drop(_7) -> [return: bb50, unwind terminate];
    }

    bb59 (cleanup): {
        switchInt(_80) -> [0: bb50, otherwise: bb58];
    }
}

fn main::{closure#0}(_1: [closure@ui/runtime/atomic-print.rs:27:31: 27:38]) -> () {
    debug tbarrier => (_1.0: std::sync::Arc<std::sync::Barrier>);
    let mut _0: ();
    let _2: std::sync::BarrierWaitResult;
    let mut _3: &std::sync::Barrier;
    let _4: &std::sync::Barrier;
    let mut _5: &std::sync::Arc<std::sync::Barrier>;
    let _6: ();

    bb0: {
        _5 = &(_1.0: std::sync::Arc<std::sync::Barrier>);
        _4 = <Arc<Barrier> as Deref>::deref(move _5) -> [return: bb1, unwind: bb5];
    }

    bb1: {
        _3 = _4;
        _2 = Barrier::wait(move _3) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _6 = do_print(const 1_u32) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        drop(_1) -> bb4;
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_1) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn SlowFmt(_1: u32) -> SlowFmt {
    let mut _0: SlowFmt;

    bb0: {
        _0 = SlowFmt(move _1);
        return;
    }
}

// MIR FOR CTFE
fn SlowFmt(_1: u32) -> SlowFmt {
    let mut _0: SlowFmt;

    bb0: {
        _0 = SlowFmt(move _1);
        return;
    }
}
