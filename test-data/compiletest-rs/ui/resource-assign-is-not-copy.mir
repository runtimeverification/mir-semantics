// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/resource-assign-is-not-copy.rs:6:10: 6:15>::fmt(_1: &r<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &&&std::cell::Cell<isize>;
    let _7: &&std::cell::Cell<isize>;

    bb0: {
        _3 = const "r";
        _4 = const "i";
        _7 = &((*_1).0: &std::cell::Cell<isize>);
        _6 = &_7;
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _3, _4, move _5) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/resource-assign-is-not-copy.rs:11:1: 11:24>::drop(_1: &mut r<'_>) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: isize;
    let mut _4: isize;
    let mut _5: &std::cell::Cell<isize>;
    let mut _6: &std::cell::Cell<isize>;

    bb0: {
        _5 = deref_copy ((*_1).0: &std::cell::Cell<isize>);
        _6 = deref_copy ((*_1).0: &std::cell::Cell<isize>);
        _4 = Cell::<isize>::get(_6) -> bb1;
    }

    bb1: {
        _3 = Add(move _4, const 1_isize);
        _2 = Cell::<isize>::set(_5, move _3) -> bb2;
    }

    bb2: {
        return;
    }
}

fn r(_1: &Cell<isize>) -> r<'_> {
    debug i => _1;
    let mut _0: r<'_>;

    bb0: {
        _0 = r::<'_> { i: _1 };
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: &std::cell::Cell<isize>;
    let _2: std::cell::Cell<isize>;
    let mut _5: r<'_>;
    let _8: ();
    let mut _9: std::fmt::Arguments<'_>;
    let mut _10: &[&str];
    let _11: &[&str; 2];
    let _12: [&str; 2];
    let mut _13: &[core::fmt::rt::Argument<'_>];
    let _14: &[core::fmt::rt::Argument<'_>; 1];
    let _15: [core::fmt::rt::Argument<'_>; 1];
    let mut _16: core::fmt::rt::Argument<'_>;
    let _17: &r<'_>;
    let mut _18: (&isize, &isize);
    let mut _19: &isize;
    let _20: isize;
    let mut _21: &isize;
    let _22: isize;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: isize;
    let mut _28: isize;
    let _30: !;
    let mut _31: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug i => _1;
        let _3: r<'_>;
        let _23: &isize;
        let _24: &isize;
        scope 2 {
            debug a => _3;
            let _4: (r<'_>, i32);
            scope 3 {
                debug b => _4;
                let _6: r<'_>;
                let _7: i32;
                scope 4 {
                    debug c => _6;
                    debug _d => _7;
                }
            }
        }
        scope 5 {
            debug left_val => _23;
            debug right_val => _24;
            let _29: core::panicking::AssertKind;
            scope 6 {
                debug kind => _29;
            }
        }
    }

    bb0: {
        _2 = Cell::<isize>::new(const 0_isize) -> bb1;
    }

    bb1: {
        _1 = &_2;
        _3 = r(_1) -> bb2;
    }

    bb2: {
        _5 = move _3;
        _4 = (move _5, const 10_i32);
        _6 = move (_4.0: r<'_>);
        _7 = (_4.1: i32);
        _12 = [const "", const "\n"];
        _11 = &_12;
        _10 = _11 as &[&str] (Pointer(Unsize));
        _17 = &_6;
        _16 = core::fmt::rt::Argument::<'_>::new_debug::<r<'_>>(_17) -> [return: bb3, unwind: bb10];
    }

    bb3: {
        _15 = [move _16];
        _14 = &_15;
        _13 = _14 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _9 = Arguments::<'_>::new_v1(move _10, move _13) -> [return: bb4, unwind: bb10];
    }

    bb4: {
        _8 = _print(move _9) -> [return: bb5, unwind: bb10];
    }

    bb5: {
        drop(_6) -> bb6;
    }

    bb6: {
        _20 = Cell::<isize>::get(_1) -> bb7;
    }

    bb7: {
        _19 = &_20;
        _22 = const 1_isize;
        _21 = &_22;
        _18 = (move _19, move _21);
        _23 = (_18.0: &isize);
        _24 = (_18.1: &isize);
        _27 = (*_23);
        _28 = (*_24);
        _26 = Eq(move _27, move _28);
        _25 = Not(move _26);
        switchInt(move _25) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _29 = core::panicking::AssertKind::Eq;
        _31 = Option::<Arguments<'_>>::None;
        _30 = core::panicking::assert_failed::<isize, isize>(move _29, _23, _24, move _31);
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_6) -> [return: bb11, unwind terminate];
    }

    bb11 (cleanup): {
        resume;
    }
}
