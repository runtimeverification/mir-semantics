// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: &str;
    let mut _4: &str;
    let mut _5: &mut bool;
    let mut _8: &std::boxed::ThinBox<dyn std::error::Error>;
    let mut _10: &dyn std::error::Error;
    let mut _11: (&&str, &std::string::String);
    let mut _12: &&str;
    let mut _13: &std::string::String;
    let mut _16: bool;
    let mut _17: bool;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: !;
    scope 1 {
        debug expected => _1;
        let mut _2: bool;
        scope 2 {
            debug dropped => _2;
            let _3: Foo<'_>;
            scope 3 {
                debug foo => _3;
                let _6: std::boxed::ThinBox<dyn std::error::Error>;
                scope 4 {
                    debug a => _6;
                    let _7: &dyn std::error::Error;
                    scope 5 {
                        debug a => _7;
                        let _9: std::string::String;
                        scope 6 {
                            debug msg => _9;
                            let _14: &&str;
                            let _15: &std::string::String;
                            scope 7 {
                                debug left_val => _14;
                                debug right_val => _15;
                                let _18: core::panicking::AssertKind;
                                scope 8 {
                                    debug kind => _18;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const "Foo error!";
        _2 = const false;
        _4 = _1;
        _5 = &mut _2;
        _3 = Foo::<'_>(move _4, _5);
        _6 = ThinBox::<dyn std::error::Error>::new_unsize::<Foo<'_>>(move _3) -> bb1;
    }

    bb1: {
        _8 = &_6;
        _7 = <ThinBox<dyn std::error::Error> as Deref>::deref(move _8) -> [return: bb2, unwind: bb12];
    }

    bb2: {
        _10 = _7;
        _9 = <dyn std::error::Error as ToString>::to_string(move _10) -> [return: bb3, unwind: bb12];
    }

    bb3: {
        _12 = &_1;
        _13 = &_9;
        _11 = (move _12, move _13);
        _14 = (_11.0: &&str);
        _15 = (_11.1: &std::string::String);
        _17 = <&str as PartialEq<String>>::eq(_14, _15) -> [return: bb4, unwind: bb11];
    }

    bb4: {
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<&str, String>(move _18, _14, _15, move _20) -> bb11;
    }

    bb6: {
        drop(_9) -> [return: bb7, unwind: bb12];
    }

    bb7: {
        drop(_6) -> bb8;
    }

    bb8: {
        _22 = _2;
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _23 = core::panicking::panic(const "assertion failed: dropped");
    }

    bb10: {
        return;
    }

    bb11 (cleanup): {
        drop(_9) -> [return: bb12, unwind terminate];
    }

    bb12 (cleanup): {
        drop(_6) -> [return: bb13, unwind terminate];
    }

    bb13 (cleanup): {
        resume;
    }
}

fn <impl at ui/box/thin_drop.rs:21:10: 21:15>::fmt(_1: &Foo<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&str;
    let mut _6: &dyn std::fmt::Debug;
    let _7: &&&mut bool;
    let _8: &&mut bool;

    bb0: {
        _3 = const "Foo";
        _5 = &((*_1).0: &str);
        _4 = _5 as &dyn std::fmt::Debug (Pointer(Unsize));
        _8 = &((*_1).1: &mut bool);
        _7 = &_8;
        _6 = _7 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field2_finish(_2, _3, move _4, move _6) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/box/thin_drop.rs:25:1: 25:22>::drop(_1: &mut Foo<'_>) -> () {
    debug self => _1;
    let mut _0: ();
    let mut _2: &mut bool;

    bb0: {
        _2 = deref_copy ((*_1).1: &mut bool);
        (*_2) = const true;
        return;
    }
}

fn <impl at ui/box/thin_drop.rs:31:1: 31:30>::fmt(_1: &Foo<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 1];
    let _6: [&str; 1];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &&str;

    bb0: {
        _6 = [const ""];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _11 = &((*_1).0: &str);
        _10 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_11) -> bb1;
    }

    bb1: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb2;
    }

    bb2: {
        _0 = Formatter::<'_>::write_fmt(_2, move _3) -> bb3;
    }

    bb3: {
        return;
    }
}

fn Foo(_1: &str, _2: &mut bool) -> Foo<'_> {
    let mut _0: Foo<'_>;

    bb0: {
        _0 = Foo::<'_>(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: &str, _2: &mut bool) -> Foo<'_> {
    let mut _0: Foo<'_>;

    bb0: {
        _0 = Foo::<'_>(move _1, move _2);
        return;
    }
}
