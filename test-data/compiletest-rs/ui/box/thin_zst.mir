// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const EXPECTED: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "boooo!";
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::boxed::ThinBox<dyn std::error::Error>;
    let mut _2: (&usize, &usize);
    let mut _3: &usize;
    let _4: usize;
    let mut _5: &usize;
    let _6: usize;
    let _7: &std::boxed::ThinBox<dyn std::error::Error>;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: &std::boxed::ThinBox<dyn std::error::Error>;
    let mut _19: (&&str, &std::string::String);
    let mut _20: &&str;
    let _21: &str;
    let mut _22: &std::string::String;
    let mut _25: bool;
    let mut _26: bool;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&usize, &usize);
    let mut _32: &usize;
    let _33: usize;
    let mut _34: &usize;
    let _35: usize;
    let _36: &std::boxed::ThinBox<Foo>;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: usize;
    let mut _42: usize;
    let _44: !;
    let mut _45: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _47: &std::boxed::ThinBox<Foo>;
    let mut _48: (&&str, &std::string::String);
    let mut _49: &&str;
    let _50: &str;
    let mut _51: &std::string::String;
    let mut _54: bool;
    let mut _55: bool;
    let _57: !;
    let mut _58: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _60: &mut std::boxed::ThinBox<Foo>;
    let mut _62: &&mut Foo;
    let mut _63: (&&str, &std::string::String);
    let mut _64: &&str;
    let _65: &str;
    let mut _66: &std::string::String;
    let mut _69: bool;
    let mut _70: bool;
    let _72: !;
    let mut _73: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug thin_error => _1;
        let _8: &usize;
        let _9: &usize;
        let _17: std::string::String;
        scope 2 {
            debug left_val => _8;
            debug right_val => _9;
            let _14: core::panicking::AssertKind;
            scope 3 {
                debug kind => _14;
            }
        }
        scope 4 {
            debug msg => _17;
            let _23: &&str;
            let _24: &std::string::String;
            let mut _30: std::boxed::ThinBox<Foo>;
            scope 5 {
                debug left_val => _23;
                debug right_val => _24;
                let _27: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _27;
                }
            }
            scope 7 {
                debug thin_concrete_error => _30;
                let _37: &usize;
                let _38: &usize;
                let _46: std::string::String;
                scope 8 {
                    debug left_val => _37;
                    debug right_val => _38;
                    let _43: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _43;
                    }
                }
                scope 10 {
                    debug msg => _46;
                    let _52: &&str;
                    let _53: &std::string::String;
                    let _59: &mut Foo;
                    scope 11 {
                        debug left_val => _52;
                        debug right_val => _53;
                        let _56: core::panicking::AssertKind;
                        scope 12 {
                            debug kind => _56;
                        }
                    }
                    scope 13 {
                        debug inner => _59;
                        let _61: std::string::String;
                        scope 14 {
                            debug msg => _61;
                            let _67: &&str;
                            let _68: &std::string::String;
                            scope 15 {
                                debug left_val => _67;
                                debug right_val => _68;
                                let _71: core::panicking::AssertKind;
                                scope 16 {
                                    debug kind => _71;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = ThinBox::<dyn std::error::Error>::new_unsize::<Foo>(const Foo) -> bb1;
    }

    bb1: {
        _4 = std::mem::size_of::<*const i32>() -> [return: bb2, unwind: bb33];
    }

    bb2: {
        _3 = &_4;
        _7 = &_1;
        _6 = std::mem::size_of_val::<ThinBox<dyn std::error::Error>>(_7) -> [return: bb3, unwind: bb33];
    }

    bb3: {
        _5 = &_6;
        _2 = (move _3, move _5);
        _8 = (_2.0: &usize);
        _9 = (_2.1: &usize);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<usize, usize>(move _14, _8, _9, move _16) -> bb33;
    }

    bb5: {
        _18 = &_1;
        _17 = <ThinBox<dyn std::error::Error> as ToString>::to_string(move _18) -> [return: bb6, unwind: bb33];
    }

    bb6: {
        _21 = const _;
        _20 = &_21;
        _22 = &_17;
        _19 = (move _20, move _22);
        _23 = (_19.0: &&str);
        _24 = (_19.1: &std::string::String);
        _26 = <&str as PartialEq<String>>::eq(_23, _24) -> [return: bb7, unwind: bb32];
    }

    bb7: {
        _25 = Not(move _26);
        switchInt(move _25) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<&str, String>(move _27, _23, _24, move _29) -> bb32;
    }

    bb9: {
        _30 = ThinBox::<Foo>::new(const Foo) -> [return: bb10, unwind: bb32];
    }

    bb10: {
        _33 = std::mem::size_of::<*const i32>() -> [return: bb11, unwind: bb31];
    }

    bb11: {
        _32 = &_33;
        _36 = &_30;
        _35 = std::mem::size_of_val::<ThinBox<Foo>>(_36) -> [return: bb12, unwind: bb31];
    }

    bb12: {
        _34 = &_35;
        _31 = (move _32, move _34);
        _37 = (_31.0: &usize);
        _38 = (_31.1: &usize);
        _41 = (*_37);
        _42 = (*_38);
        _40 = Eq(move _41, move _42);
        _39 = Not(move _40);
        switchInt(move _39) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _43 = core::panicking::AssertKind::Eq;
        _45 = Option::<Arguments<'_>>::None;
        _44 = core::panicking::assert_failed::<usize, usize>(move _43, _37, _38, move _45) -> bb31;
    }

    bb14: {
        _47 = &_30;
        _46 = <ThinBox<Foo> as ToString>::to_string(move _47) -> [return: bb15, unwind: bb31];
    }

    bb15: {
        _50 = const _;
        _49 = &_50;
        _51 = &_46;
        _48 = (move _49, move _51);
        _52 = (_48.0: &&str);
        _53 = (_48.1: &std::string::String);
        _55 = <&str as PartialEq<String>>::eq(_52, _53) -> [return: bb16, unwind: bb30];
    }

    bb16: {
        _54 = Not(move _55);
        switchInt(move _54) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _56 = core::panicking::AssertKind::Eq;
        _58 = Option::<Arguments<'_>>::None;
        _57 = core::panicking::assert_failed::<&str, String>(move _56, _52, _53, move _58) -> bb30;
    }

    bb18: {
        _60 = &mut _30;
        _59 = <ThinBox<Foo> as DerefMut>::deref_mut(move _60) -> [return: bb19, unwind: bb30];
    }

    bb19: {
        _62 = &_59;
        _61 = <&mut Foo as ToString>::to_string(move _62) -> [return: bb20, unwind: bb30];
    }

    bb20: {
        _65 = const _;
        _64 = &_65;
        _66 = &_61;
        _63 = (move _64, move _66);
        _67 = (_63.0: &&str);
        _68 = (_63.1: &std::string::String);
        _70 = <&str as PartialEq<String>>::eq(_67, _68) -> [return: bb21, unwind: bb29];
    }

    bb21: {
        _69 = Not(move _70);
        switchInt(move _69) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        _71 = core::panicking::AssertKind::Eq;
        _73 = Option::<Arguments<'_>>::None;
        _72 = core::panicking::assert_failed::<&str, String>(move _71, _67, _68, move _73) -> bb29;
    }

    bb23: {
        drop(_61) -> [return: bb24, unwind: bb30];
    }

    bb24: {
        drop(_46) -> [return: bb25, unwind: bb31];
    }

    bb25: {
        drop(_30) -> [return: bb26, unwind: bb32];
    }

    bb26: {
        drop(_17) -> [return: bb27, unwind: bb33];
    }

    bb27: {
        drop(_1) -> bb28;
    }

    bb28: {
        return;
    }

    bb29 (cleanup): {
        drop(_61) -> [return: bb30, unwind terminate];
    }

    bb30 (cleanup): {
        drop(_46) -> [return: bb31, unwind terminate];
    }

    bb31 (cleanup): {
        drop(_30) -> [return: bb32, unwind terminate];
    }

    bb32 (cleanup): {
        drop(_17) -> [return: bb33, unwind terminate];
    }

    bb33 (cleanup): {
        drop(_1) -> [return: bb34, unwind terminate];
    }

    bb34 (cleanup): {
        resume;
    }
}

fn <impl at ui/box/thin_zst.rs:25:10: 25:15>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "Foo";
        _0 = Formatter::<'_>::write_str(_2, _3) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/box/thin_zst.rs:28:1: 28:26>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 1];
    let _6: [&str; 1];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &&str;
    let _12: &str;

    bb0: {
        _6 = [const ""];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _12 = const _;
        _11 = &_12;
        _10 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_11) -> bb1;
    }

    bb1: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb2;
    }

    bb2: {
        _0 = Formatter::<'_>::write_fmt(_2, move _3) -> bb3;
    }

    bb3: {
        return;
    }
}
