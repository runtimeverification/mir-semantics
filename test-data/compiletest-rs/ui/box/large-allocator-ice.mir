// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
BigAllocator::0::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

fn <impl at ui/box/large-allocator-ice.rs:9:1: 9:39>::allocate(_1: &BigAllocator, _2: Layout) -> Result<NonNull<[u8]>, std::alloc::AllocError> {
    debug self => _1;
    let mut _0: std::result::Result<std::ptr::NonNull<[u8]>, std::alloc::AllocError>;
    let mut _3: !;

    bb0: {
        _3 = core::panicking::panic(const "not yet implemented");
    }
}

fn <impl at ui/box/large-allocator-ice.rs:9:1: 9:39>::deallocate(_1: &BigAllocator, _2: NonNull<u8>, _3: Layout) -> () {
    debug self => _1;
    let mut _0: ();
    let mut _4: !;

    bb0: {
        _4 = core::panicking::panic(const "not yet implemented");
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::boxed::Box<(), &std::alloc::Global>;
    let mut _2: &std::alloc::Global;
    let _3: std::alloc::Global;
    let _4: std::boxed::Box<(), BigAllocator>;
    let mut _5: BigAllocator;
    let mut _6: [usize; 2];
    let _7: ();

    bb0: {
        _2 = &_3;
        _1 = Box::<(), &std::alloc::Global>::new_in(const (), move _2) -> bb1;
    }

    bb1: {
        drop(_1) -> bb2;
    }

    bb2: {
        _6 = [const 0_usize; 2];
        _5 = BigAllocator(move _6);
        _4 = Box::<(), BigAllocator>::new_in(const (), move _5) -> bb3;
    }

    bb3: {
        drop(_4) -> bb4;
    }

    bb4: {
        _7 = generic_function::<i32>(const 0_i32) -> bb5;
    }

    bb5: {
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

fn generic_function(_1: T) -> () {
    debug val => _1;
    let mut _0: ();
    let _2: T;
    let mut _3: std::boxed::Box<T, &std::alloc::Global>;
    let mut _4: &std::alloc::Global;
    let _5: std::alloc::Global;
    let mut _6: &mut std::boxed::Box<T, &std::alloc::Global>;
    let mut _7: ();
    let mut _8: &mut std::boxed::Box<T, &std::alloc::Global>;
    let mut _9: ();
    let mut _10: *const T;
    let mut _11: *const ();
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: usize;
    let mut _15: usize;
    let mut _16: bool;

    bb0: {
        _4 = &_5;
        _3 = Box::<T, &std::alloc::Global>::new_in(move _1, move _4) -> bb1;
    }

    bb1: {
        _10 = (((_3.0: std::ptr::Unique<T>).0: std::ptr::NonNull<T>).0: *const T);
        _11 = _10 as *const () (PtrToPtr);
        _12 = _11 as usize (Transmute);
        _13 = AlignOf(T);
        _14 = Sub(_13, const 1_usize);
        _15 = BitAnd(_12, _14);
        _16 = Eq(_15, const 0_usize);
        assert(_16, "misaligned pointer dereference: address must be a multiple of {} but is {}", _13, _12) -> [success: bb6, unwind unreachable];
    }

    bb2 (cleanup): {
        resume;
    }

    bb3: {
        return;
    }

    bb4: {
        _6 = &mut _3;
        _7 = <Box<T, &std::alloc::Global> as Drop>::drop(move _6) -> bb3;
    }

    bb5 (cleanup): {
        _8 = &mut _3;
        _9 = <Box<T, &std::alloc::Global> as Drop>::drop(move _8) -> [return: bb2, unwind terminate];
    }

    bb6: {
        _2 = move (*_10);
        drop(_2) -> [return: bb4, unwind: bb5];
    }
}

fn BigAllocator(_1: [usize; 2]) -> BigAllocator {
    let mut _0: BigAllocator;

    bb0: {
        _0 = BigAllocator(move _1);
        return;
    }
}

// MIR FOR CTFE
fn BigAllocator(_1: [usize; 2]) -> BigAllocator {
    let mut _0: BigAllocator;

    bb0: {
        _0 = BigAllocator(move _1);
        return;
    }
}
