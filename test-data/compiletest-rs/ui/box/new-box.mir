// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f(_1: Box<isize>) -> () {
    debug x => _1;
    let mut _0: ();
    let _2: &isize;
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let _6: &[&str; 2];
    let _7: [&str; 2];
    let mut _8: &[core::fmt::rt::Argument<'_>];
    let _9: &[core::fmt::rt::Argument<'_>; 1];
    let _10: [core::fmt::rt::Argument<'_>; 1];
    let mut _11: core::fmt::rt::Argument<'_>;
    let _12: &isize;
    let _13: ();
    let mut _14: std::fmt::Arguments<'_>;
    let mut _15: &[&str];
    let _16: &[&str; 2];
    let _17: [&str; 2];
    let mut _18: &[core::fmt::rt::Argument<'_>];
    let _19: &[core::fmt::rt::Argument<'_>; 1];
    let _20: [core::fmt::rt::Argument<'_>; 1];
    let mut _21: core::fmt::rt::Argument<'_>;
    let mut _22: *const isize;
    let mut _23: *const isize;
    let mut _30: *const ();
    let mut _31: usize;
    let mut _32: usize;
    let mut _33: usize;
    let mut _34: usize;
    let mut _35: bool;
    scope 1 {
        debug y => _2;
        let mut _24: *const ();
        let mut _25: usize;
        let mut _26: usize;
        let mut _27: usize;
        let mut _28: usize;
        let mut _29: bool;
    }

    bb0: {
        _22 = (((_1.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize);
        _30 = _22 as *const () (PtrToPtr);
        _31 = _30 as usize (Transmute);
        _32 = AlignOf(isize);
        _33 = Sub(_32, const 1_usize);
        _34 = BitAnd(_31, _33);
        _35 = Eq(_34, const 0_usize);
        assert(_35, "misaligned pointer dereference: address must be a multiple of {} but is {}", _32, _31) -> [success: bb11, unwind unreachable];
    }

    bb1: {
        _10 = [move _11];
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> [return: bb2, unwind: bb8];
    }

    bb2: {
        _3 = _print(move _4) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        _17 = [const "", const "\n"];
        _16 = &_17;
        _15 = _16 as &[&str] (Pointer(Unsize));
        _21 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_2) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _20 = [move _21];
        _19 = &_20;
        _18 = _19 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _14 = Arguments::<'_>::new_v1(move _15, move _18) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        _13 = _print(move _14) -> [return: bb6, unwind: bb8];
    }

    bb6: {
        drop(_1) -> bb7;
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_1) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        resume;
    }

    bb10: {
        _12 = &(*_23);
        _11 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_12) -> [return: bb1, unwind: bb8];
    }

    bb11: {
        _2 = &(*_22);
        _7 = [const "", const "\n"];
        _6 = &_7;
        _5 = _6 as &[&str] (Pointer(Unsize));
        _23 = (((_1.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize);
        _24 = _23 as *const () (PtrToPtr);
        _25 = _24 as usize (Transmute);
        _26 = AlignOf(isize);
        _27 = Sub(_26, const 1_usize);
        _28 = BitAnd(_25, _27);
        _29 = Eq(_28, const 0_usize);
        assert(_29, "misaligned pointer dereference: address must be a multiple of {} but is {}", _26, _25) -> [success: bb10, unwind unreachable];
    }
}

fn <impl at ui/box/new-box.rs:15:1: 15:22>::printme(_1: &Struct) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 1];
    let _6: [&str; 1];

    bb0: {
        _6 = [const "hello world!\n"];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_const(move _4) -> bb1;
    }

    bb1: {
        _2 = _print(move _3) -> bb2;
    }

    bb2: {
        return;
    }
}

fn g(_1: Box<dyn Trait>) -> () {
    debug x => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: &dyn Trait;
    let _4: &dyn Trait;
    let _5: ();
    let mut _6: *const dyn Trait;
    let mut _7: *const dyn Trait;
    scope 1 {
        debug y => _4;
    }

    bb0: {
        _6 = (((_1.0: std::ptr::Unique<dyn Trait>).0: std::ptr::NonNull<dyn Trait>).0: *const dyn Trait);
        _3 = &(*_6);
        _2 = <dyn Trait as Trait>::printme(move _3) -> [return: bb1, unwind: bb4];
    }

    bb1: {
        _7 = (((_1.0: std::ptr::Unique<dyn Trait>).0: std::ptr::NonNull<dyn Trait>).0: *const dyn Trait);
        _4 = &(*_7);
        _5 = <dyn Trait as Trait>::printme(_4) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_1) -> bb3;
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_1) -> [return: bb5, unwind terminate];
    }

    bb5 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::boxed::Box<isize>;
    let _3: ();
    let mut _4: std::boxed::Box<dyn Trait>;
    let mut _5: std::boxed::Box<Struct>;

    bb0: {
        _2 = Box::<isize>::new(const 1234_isize) -> bb1;
    }

    bb1: {
        _1 = f(move _2) -> bb2;
    }

    bb2: {
        _5 = Box::<Struct>::new(const Struct) -> bb3;
    }

    bb3: {
        _4 = move _5 as std::boxed::Box<dyn Trait> (Pointer(Unsize));
        _3 = g(move _4) -> bb4;
    }

    bb4: {
        return;
    }
}
