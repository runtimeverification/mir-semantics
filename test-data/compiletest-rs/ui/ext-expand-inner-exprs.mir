// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static FOO: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "helloworld";
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&&str, &&str);
    let _2: &&str;
    let mut _3: &&str;
    let _4: &str;
    let _5: &&str;
    let _6: &&str;
    let mut _7: bool;
    let mut _8: bool;
    let _10: !;
    let mut _11: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _5;
        debug right_val => _6;
        let _9: core::panicking::AssertKind;
        scope 2 {
            debug kind => _9;
        }
    }

    bb0: {
        _2 = const {alloc1: &&str};
        _4 = const "helloworld";
        _3 = &_4;
        _1 = (_2, move _3);
        _5 = (_1.0: &&str);
        _6 = (_1.1: &&str);
        _8 = <&str as PartialEq>::eq(_5, _6) -> bb1;
    }

    bb1: {
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _9 = core::panicking::AssertKind::Eq;
        _11 = Option::<Arguments<'_>>::None;
        _10 = core::panicking::assert_failed::<&str, &str>(move _9, _5, _6, move _11);
    }

    bb3: {
        return;
    }
}

alloc1 (static: FOO, size: 16, align: 8) {
    ╾───────alloc8────────╼ 0a 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc8 (size: 10, align: 1) {
    68 65 6c 6c 6f 77 6f 72 6c 64                   │ helloworld
}
