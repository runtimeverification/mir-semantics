// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: std::env::VarsOs;
    let mut _2: std::env::VarsOs;
    let mut _3: std::env::VarsOs;
    let mut _4: std::option::Option<(std::ffi::OsString, std::ffi::OsString)>;
    let mut _5: &mut std::env::VarsOs;
    let mut _6: isize;
    let mut _9: bool;
    let mut _11: &std::ffi::OsString;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: &std::option::Option<&std::ffi::OsStr>;
    let _15: std::option::Option<&std::ffi::OsStr>;
    let mut _16: std::option::Option<&std::ffi::OsString>;
    let mut _17: &std::option::Option<std::ffi::OsString>;
    let mut _18: &std::option::Option<&std::ffi::OsStr>;
    let _19: std::option::Option<&std::ffi::OsStr>;
    let _20: &std::ffi::OsStr;
    let _21: &std::ffi::OsStr;
    let mut _22: &std::ffi::OsString;
    let _23: !;
    let mut _24: std::fmt::Arguments<'_>;
    let mut _25: &[&str];
    let _26: &[&str; 3];
    let _27: [&str; 3];
    let mut _28: &[core::fmt::rt::Argument<'_>];
    let _29: &[core::fmt::rt::Argument<'_>; 3];
    let _30: [core::fmt::rt::Argument<'_>; 3];
    let mut _31: core::fmt::rt::Argument<'_>;
    let _32: &std::ffi::OsString;
    let mut _33: core::fmt::rt::Argument<'_>;
    let _34: &std::ffi::OsString;
    let mut _35: core::fmt::rt::Argument<'_>;
    let _36: &std::option::Option<std::ffi::OsString>;
    scope 1 {
        debug iter => _3;
        let _7: std::ffi::OsString;
        let _8: std::ffi::OsString;
        scope 2 {
            debug k => _7;
            debug v => _8;
            let _10: std::option::Option<std::ffi::OsString>;
            scope 3 {
                debug v2 => _10;
            }
        }
    }

    bb0: {
        _2 = std::env::vars_os() -> bb1;
    }

    bb1: {
        _1 = <VarsOs as IntoIterator>::into_iter(move _2) -> bb2;
    }

    bb2: {
        _3 = move _1;
        goto -> bb3;
    }

    bb3: {
        _5 = &mut _3;
        _4 = <VarsOs as Iterator>::next(_5) -> [return: bb4, unwind: bb28];
    }

    bb4: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        _7 = move (((_4 as Some).0: (std::ffi::OsString, std::ffi::OsString)).0: std::ffi::OsString);
        _8 = move (((_4 as Some).0: (std::ffi::OsString, std::ffi::OsString)).1: std::ffi::OsString);
        _9 = const false;
        switchInt(move _9) -> [0: bb8, otherwise: bb22];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        drop(_3) -> bb24;
    }

    bb8: {
        _11 = &_7;
        _10 = std::env::var_os::<&OsString>(move _11) -> [return: bb9, unwind: bb26];
    }

    bb9: {
        _17 = &_10;
        _16 = Option::<OsString>::as_ref(move _17) -> [return: bb10, unwind: bb25];
    }

    bb10: {
        _15 = Option::<&OsString>::map::<&OsStr, [closure@ui/env-vars.rs:17:33: 17:36]>(move _16, const ZeroSized: [closure@ui/env-vars.rs:17:33: 17:36]) -> [return: bb11, unwind: bb25];
    }

    bb11: {
        _14 = &_15;
        _22 = &_8;
        _21 = <OsString as Deref>::deref(move _22) -> [return: bb12, unwind: bb25];
    }

    bb12: {
        _20 = _21;
        _19 = Option::<&OsStr>::Some(_20);
        _18 = &_19;
        _13 = <Option<&OsStr> as PartialEq>::eq(move _14, move _18) -> [return: bb13, unwind: bb25];
    }

    bb13: {
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb19, otherwise: bb14];
    }

    bb14: {
        _27 = [const "bad vars->var transition: ", const " ", const " "];
        _26 = &_27;
        _25 = _26 as &[&str] (Pointer(Unsize));
        _32 = &_7;
        _31 = core::fmt::rt::Argument::<'_>::new_debug::<OsString>(_32) -> [return: bb15, unwind: bb25];
    }

    bb15: {
        _34 = &_8;
        _33 = core::fmt::rt::Argument::<'_>::new_debug::<OsString>(_34) -> [return: bb16, unwind: bb25];
    }

    bb16: {
        _36 = &_10;
        _35 = core::fmt::rt::Argument::<'_>::new_debug::<Option<OsString>>(_36) -> [return: bb17, unwind: bb25];
    }

    bb17: {
        _30 = [move _31, move _33, move _35];
        _29 = &_30;
        _28 = _29 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _24 = Arguments::<'_>::new_v1(move _25, move _28) -> [return: bb18, unwind: bb25];
    }

    bb18: {
        _23 = panic_fmt(move _24) -> bb25;
    }

    bb19: {
        drop(_10) -> [return: bb20, unwind: bb26];
    }

    bb20: {
        drop(_8) -> [return: bb21, unwind: bb27];
    }

    bb21: {
        drop(_7) -> [return: bb3, unwind: bb28];
    }

    bb22: {
        drop(_8) -> [return: bb23, unwind: bb27];
    }

    bb23: {
        drop(_7) -> [return: bb3, unwind: bb28];
    }

    bb24: {
        return;
    }

    bb25 (cleanup): {
        drop(_10) -> [return: bb26, unwind terminate];
    }

    bb26 (cleanup): {
        drop(_8) -> [return: bb27, unwind terminate];
    }

    bb27 (cleanup): {
        drop(_7) -> [return: bb28, unwind terminate];
    }

    bb28 (cleanup): {
        drop(_3) -> [return: bb29, unwind terminate];
    }

    bb29 (cleanup): {
        resume;
    }
}

fn main::{closure#0}(_1: [closure@ui/env-vars.rs:17:33: 17:36], _2: &OsString) -> &OsStr {
    debug s => _2;
    let mut _0: &std::ffi::OsStr;
    let _3: &std::ffi::OsStr;

    bb0: {
        _3 = <OsString as Deref>::deref(_2) -> bb1;
    }

    bb1: {
        _0 = _3;
        return;
    }
}
