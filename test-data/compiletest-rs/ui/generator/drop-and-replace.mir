// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/generator/drop-and-replace.rs:12:10: 12:15>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&i32;
    let _6: &i32;

    bb0: {
        _3 = const "Foo";
        _6 = &((*_1).0: i32);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/generator/drop-and-replace.rs:12:17: 12:26>::eq(_1: &Foo, _2: &Foo) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: i32;
    let mut _4: i32;

    bb0: {
        _3 = ((*_1).0: i32);
        _4 = ((*_2).0: i32);
        _0 = Eq(move _3, move _4);
        return;
    }
}

fn <impl at ui/generator/drop-and-replace.rs:15:1: 15:18>::drop(_1: &mut Foo) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: [generator@ui/generator/drop-and-replace.rs:20:17: 20:19];
    let mut _2: std::ops::GeneratorState<(), ()>;
    let mut _3: std::pin::Pin<&mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19]>;
    let mut _4: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19];
    let mut _5: isize;
    scope 1 {
        debug a => _1;
    }

    bb0: {
        _1 = [generator@ui/generator/drop-and-replace.rs:20:17: 20:19 (#0)];
        goto -> bb1;
    }

    bb1: {
        _4 = &mut _1;
        _3 = Pin::<&mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19]>::new(move _4) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _2 = <[generator@ui/generator/drop-and-replace.rs:20:17: 20:19] as Generator>::resume(move _3, const ()) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _5 = discriminant(_2);
        switchInt(move _5) -> [1: bb4, otherwise: bb1];
    }

    bb4: {
        drop(_1) -> bb5;
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_1) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }
}

fn main::{closure#0}(_1: Pin<&mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>;
    let mut _3: ();
    let mut _4: (&i32, &i32);
    let mut _5: &i32;
    let mut _6: &i32;
    let _7: i32;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: i32;
    let mut _13: i32;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: Foo;
    let mut _18: (&i32, &i32);
    let mut _19: &i32;
    let mut _20: &i32;
    let _21: i32;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: i32;
    let mut _27: i32;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: ();
    let mut _32: (&i32, &i32);
    let mut _33: &i32;
    let mut _34: &i32;
    let _35: i32;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: i32;
    let mut _41: i32;
    let _43: !;
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _45: (&i32, &i32);
    let mut _46: &i32;
    let mut _47: &i32;
    let _48: i32;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: i32;
    let mut _54: i32;
    let _56: !;
    let mut _57: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _58: ();
    let mut _59: u32;
    let mut _60: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19];
    let mut _61: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19];
    let mut _62: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19];
    let mut _63: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19];
    let mut _64: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19];
    let mut _65: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19];
    let mut _66: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19];
    let mut _67: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19];
    let mut _68: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19];
    let mut _69: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19];
    let mut _70: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19];
    let mut _71: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19];
    let mut _72: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19];
    let mut _73: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19];
    let mut _74: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19];
    let mut _75: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19];
    let mut _76: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19];
    let mut _77: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19];
    scope 1 {
        debug x => (((*(_1.0: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19])) as variant#3).0: Foo);
        let _8: &i32;
        let _9: &i32;
        let _22: &i32;
        let _23: &i32;
        let _49: &i32;
        let _50: &i32;
        scope 2 {
            debug left_val => _8;
            debug right_val => _9;
            let _14: core::panicking::AssertKind;
            scope 3 {
                debug kind => _14;
            }
        }
        scope 4 {
            debug left_val => _22;
            debug right_val => _23;
            let _28: core::panicking::AssertKind;
            scope 5 {
                debug kind => _28;
            }
        }
        scope 6 {
            debug y => (((*(_1.0: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19])) as variant#4).1: Foo);
            let _36: &i32;
            let _37: &i32;
            scope 7 {
                debug left_val => _36;
                debug right_val => _37;
                let _42: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _42;
                }
            }
        }
        scope 9 {
            debug left_val => _49;
            debug right_val => _50;
            let _55: core::panicking::AssertKind;
            scope 10 {
                debug kind => _55;
            }
        }
    }

    bb0: {
        _60 = deref_copy (_1.0: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19]);
        _59 = discriminant((*_60));
        switchInt(move _59) -> [0: bb1, 1: bb20, 2: bb19, 3: bb17, 4: bb18, otherwise: bb21];
    }

    bb1: {
        _61 = deref_copy (_1.0: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19]);
        (((*_61) as variant#3).0: Foo) = Foo(const 4_i32);
        _3 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _3);
        _62 = deref_copy (_1.0: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19]);
        discriminant((*_62)) = 3;
        return;
    }

    bb2: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<i32, i32>(move _14, _8, _9, move _16) -> bb15;
    }

    bb3: {
        _17 = Foo(const 5_i32);
        _64 = deref_copy (_1.0: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19]);
        drop((((*_64) as variant#3).0: Foo)) -> [return: bb4, unwind: bb5];
    }

    bb4: {
        _65 = deref_copy (_1.0: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19]);
        (((*_65) as variant#3).0: Foo) = move _17;
        _67 = deref_copy (_1.0: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19]);
        _19 = &((((*_67) as variant#3).0: Foo).0: i32);
        _21 = const 5_i32;
        _20 = &_21;
        _18 = (move _19, move _20);
        _22 = (_18.0: &i32);
        _23 = (_18.1: &i32);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb7, otherwise: bb6];
    }

    bb5 (cleanup): {
        _66 = deref_copy (_1.0: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19]);
        (((*_66) as variant#3).0: Foo) = move _17;
        goto -> bb15;
    }

    bb6: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<i32, i32>(move _28, _22, _23, move _30) -> bb15;
    }

    bb7: {
        _68 = deref_copy (_1.0: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19]);
        (((*_68) as variant#4).1: Foo) = Foo(const 6_i32);
        _31 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _31);
        _69 = deref_copy (_1.0: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19]);
        discriminant((*_69)) = 4;
        return;
    }

    bb8: {
        _42 = core::panicking::AssertKind::Eq;
        _44 = Option::<Arguments<'_>>::None;
        _43 = core::panicking::assert_failed::<i32, i32>(move _42, _36, _37, move _44) -> bb14;
    }

    bb9: {
        _71 = deref_copy (_1.0: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19]);
        drop((((*_71) as variant#4).1: Foo)) -> [return: bb10, unwind: bb15];
    }

    bb10: {
        _72 = deref_copy (_1.0: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19]);
        _46 = &((((*_72) as variant#3).0: Foo).0: i32);
        _48 = const 5_i32;
        _47 = &_48;
        _45 = (move _46, move _47);
        _49 = (_45.0: &i32);
        _50 = (_45.1: &i32);
        _53 = (*_49);
        _54 = (*_50);
        _52 = Eq(move _53, move _54);
        _51 = Not(move _52);
        switchInt(move _51) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _55 = core::panicking::AssertKind::Eq;
        _57 = Option::<Arguments<'_>>::None;
        _56 = core::panicking::assert_failed::<i32, i32>(move _55, _49, _50, move _57) -> bb15;
    }

    bb12: {
        _58 = const ();
        _73 = deref_copy (_1.0: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19]);
        drop((((*_73) as variant#3).0: Foo)) -> [return: bb13, unwind: bb16];
    }

    bb13: {
        _0 = GeneratorState::<(), ()>::Complete(move _58);
        _74 = deref_copy (_1.0: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19]);
        discriminant((*_74)) = 1;
        return;
    }

    bb14 (cleanup): {
        _75 = deref_copy (_1.0: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19]);
        drop((((*_75) as variant#4).1: Foo)) -> [return: bb15, unwind terminate];
    }

    bb15 (cleanup): {
        _76 = deref_copy (_1.0: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19]);
        drop((((*_76) as variant#3).0: Foo)) -> [return: bb16, unwind terminate];
    }

    bb16 (cleanup): {
        _77 = deref_copy (_1.0: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19]);
        discriminant((*_77)) = 2;
        resume;
    }

    bb17: {
        _63 = deref_copy (_1.0: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19]);
        _5 = &((((*_63) as variant#3).0: Foo).0: i32);
        _7 = const 4_i32;
        _6 = &_7;
        _4 = (move _5, move _6);
        _8 = (_4.0: &i32);
        _9 = (_4.1: &i32);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb3, otherwise: bb2];
    }

    bb18: {
        _70 = deref_copy (_1.0: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19]);
        _33 = &((((*_70) as variant#4).1: Foo).0: i32);
        _35 = const 6_i32;
        _34 = &_35;
        _32 = (move _33, move _34);
        _36 = (_32.0: &i32);
        _37 = (_32.1: &i32);
        _40 = (*_36);
        _41 = (*_37);
        _39 = Eq(move _40, move _41);
        _38 = Not(move _39);
        switchInt(move _38) -> [0: bb9, otherwise: bb8];
    }

    bb19: {
        assert(const false, "generator resumed after panicking") -> bb19;
    }

    bb20: {
        assert(const false, "generator resumed after completion") -> bb20;
    }

    bb21: {
        unreachable;
    }
}

fn Foo(_1: i32) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: i32) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo(move _1);
        return;
    }
}
