// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn bar() -> () {
    let mut _0: ();
    let _1: &str;
    scope 1 {
        debug a => _1;
        scope 2 {
            debug b => _1;
        }
    }

    bb0: {
        _1 = const "hi";
        return;
    }
}

fn bar::{closure#0}(_1: Pin<&mut [generator@ui/generator/yield-subtype.rs:11:5: 11:7]>, _2: ()) -> GeneratorState<&str, ()> {
    debug a => (*((*(_1.0: &mut [generator@ui/generator/yield-subtype.rs:11:5: 11:7])).0: &&str));
    debug b => (*((*(_1.0: &mut [generator@ui/generator/yield-subtype.rs:11:5: 11:7])).1: &&str));
    let mut _0: std::ops::GeneratorState<&str, ()>;
    let mut _3: &str;
    let mut _4: &&str;
    let mut _5: &&str;
    let mut _6: &str;
    let mut _7: ();
    let mut _8: u32;
    let mut _9: &mut [generator@ui/generator/yield-subtype.rs:11:5: 11:7];
    let mut _10: &mut [generator@ui/generator/yield-subtype.rs:11:5: 11:7];
    let mut _11: &mut [generator@ui/generator/yield-subtype.rs:11:5: 11:7];
    let mut _12: &mut [generator@ui/generator/yield-subtype.rs:11:5: 11:7];
    let mut _13: &mut [generator@ui/generator/yield-subtype.rs:11:5: 11:7];
    let mut _14: &mut [generator@ui/generator/yield-subtype.rs:11:5: 11:7];

    bb0: {
        _9 = deref_copy (_1.0: &mut [generator@ui/generator/yield-subtype.rs:11:5: 11:7]);
        _8 = discriminant((*_9));
        switchInt(move _8) -> [0: bb1, 1: bb4, 3: bb2, 4: bb3, otherwise: bb5];
    }

    bb1: {
        _10 = deref_copy (_1.0: &mut [generator@ui/generator/yield-subtype.rs:11:5: 11:7]);
        _4 = deref_copy ((*_10).0: &&str);
        _3 = (*_4);
        _0 = GeneratorState::<&str, ()>::Yielded(move _3);
        _11 = deref_copy (_1.0: &mut [generator@ui/generator/yield-subtype.rs:11:5: 11:7]);
        discriminant((*_11)) = 3;
        return;
    }

    bb2: {
        _12 = deref_copy (_1.0: &mut [generator@ui/generator/yield-subtype.rs:11:5: 11:7]);
        _5 = deref_copy ((*_12).1: &&str);
        _6 = deref_copy (*_5);
        _0 = GeneratorState::<&str, ()>::Yielded(_6);
        _13 = deref_copy (_1.0: &mut [generator@ui/generator/yield-subtype.rs:11:5: 11:7]);
        discriminant((*_13)) = 4;
        return;
    }

    bb3: {
        _7 = const ();
        _0 = GeneratorState::<&str, ()>::Complete(move _7);
        _14 = deref_copy (_1.0: &mut [generator@ui/generator/yield-subtype.rs:11:5: 11:7]);
        discriminant((*_14)) = 1;
        return;
    }

    bb4: {
        assert(const false, "generator resumed after completion") -> bb4;
    }

    bb5: {
        unreachable;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
