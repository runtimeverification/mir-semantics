// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static A: [i32; 5] = {
    let mut _0: [i32; 5];

    bb0: {
        _0 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32];
        return;
    }
}

A::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 5_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main::{closure#0}(_1: Pin<&mut [static generator@ui/generator/static-reference-across-yield.rs:7:5: 7:14]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>;
    let _3: i32;
    let _4: usize;
    let mut _5: ();
    let mut _6: usize;
    let mut _7: bool;
    let mut _8: ();
    let mut _9: u32;
    let mut _10: &mut [static generator@ui/generator/static-reference-across-yield.rs:7:5: 7:14];
    let mut _11: &mut [static generator@ui/generator/static-reference-across-yield.rs:7:5: 7:14];
    let mut _12: &mut [static generator@ui/generator/static-reference-across-yield.rs:7:5: 7:14];
    let mut _13: &mut [static generator@ui/generator/static-reference-across-yield.rs:7:5: 7:14];
    let mut _14: &[i32; 5];
    let mut _15: &mut [static generator@ui/generator/static-reference-across-yield.rs:7:5: 7:14];
    let mut _16: &mut [static generator@ui/generator/static-reference-across-yield.rs:7:5: 7:14];
    scope 1 {
        debug u => _3;
    }

    bb0: {
        _10 = deref_copy (_1.0: &mut [static generator@ui/generator/static-reference-across-yield.rs:7:5: 7:14]);
        _9 = discriminant((*_10));
        switchInt(move _9) -> [0: bb1, 1: bb6, 2: bb5, 3: bb4, otherwise: bb7];
    }

    bb1: {
        _11 = deref_copy (_1.0: &mut [static generator@ui/generator/static-reference-across-yield.rs:7:5: 7:14]);
        (((*_11) as variant#3).0: &[i32; 5]) = const {alloc1: &[i32; 5]};
        _5 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _5);
        _12 = deref_copy (_1.0: &mut [static generator@ui/generator/static-reference-across-yield.rs:7:5: 7:14]);
        discriminant((*_12)) = 3;
        return;
    }

    bb2: {
        _13 = deref_copy (_1.0: &mut [static generator@ui/generator/static-reference-across-yield.rs:7:5: 7:14]);
        _14 = deref_copy (((*_13) as variant#3).0: &[i32; 5]);
        _3 = (*_14)[_4];
        _8 = const ();
        _0 = GeneratorState::<(), ()>::Complete(move _8);
        _15 = deref_copy (_1.0: &mut [static generator@ui/generator/static-reference-across-yield.rs:7:5: 7:14]);
        discriminant((*_15)) = 1;
        return;
    }

    bb3 (cleanup): {
        _16 = deref_copy (_1.0: &mut [static generator@ui/generator/static-reference-across-yield.rs:7:5: 7:14]);
        discriminant((*_16)) = 2;
        resume;
    }

    bb4: {
        _4 = const 1_usize;
        _6 = const 5_usize;
        _7 = Lt(_4, _6);
        assert(move _7, "index out of bounds: the length is {} but the index is {}", move _6, _4) -> [success: bb2, unwind: bb3];
    }

    bb5: {
        assert(const false, "generator resumed after panicking") -> bb5;
    }

    bb6: {
        assert(const false, "generator resumed after completion") -> bb6;
    }

    bb7: {
        unreachable;
    }
}

alloc1 (static: A, size: 20, align: 4) {
    0x00 │ 01 00 00 00 02 00 00 00 03 00 00 00 04 00 00 00 │ ................
    0x10 │ 05 00 00 00                                     │ ....
}

fn main::{closure#1}(_1: Pin<&mut [static generator@ui/generator/static-reference-across-yield.rs:10:5: 10:14]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>;
    let _3: [i32; 5];
    let mut _4: bool;
    let mut _5: ();
    let mut _6: ();
    let mut _7: u32;
    let mut _8: &mut [static generator@ui/generator/static-reference-across-yield.rs:10:5: 10:14];
    let mut _9: &mut [static generator@ui/generator/static-reference-across-yield.rs:10:5: 10:14];
    let mut _10: &mut [static generator@ui/generator/static-reference-across-yield.rs:10:5: 10:14];
    let mut _11: &[i32; 5];
    let mut _12: &mut [static generator@ui/generator/static-reference-across-yield.rs:10:5: 10:14];
    let mut _13: &mut [static generator@ui/generator/static-reference-across-yield.rs:10:5: 10:14];
    let mut _14: &[i32; 5];
    let mut _15: &mut [static generator@ui/generator/static-reference-across-yield.rs:10:5: 10:14];
    scope 1 {
        debug i => _3;
        debug i => _11;
    }

    bb0: {
        _8 = deref_copy (_1.0: &mut [static generator@ui/generator/static-reference-across-yield.rs:10:5: 10:14]);
        _7 = discriminant((*_8));
        switchInt(move _7) -> [0: bb1, 1: bb6, 3: bb5, otherwise: bb7];
    }

    bb1: {
        _9 = deref_copy (_1.0: &mut [static generator@ui/generator/static-reference-across-yield.rs:10:5: 10:14]);
        (((*_9) as variant#3).0: &[i32; 5]) = const {alloc1: &[i32; 5]};
        _10 = deref_copy (_1.0: &mut [static generator@ui/generator/static-reference-across-yield.rs:10:5: 10:14]);
        _11 = deref_copy (((*_10) as variant#3).0: &[i32; 5]);
        _5 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _5);
        _12 = deref_copy (_1.0: &mut [static generator@ui/generator/static-reference-across-yield.rs:10:5: 10:14]);
        discriminant((*_12)) = 3;
        return;
    }

    bb2: {
        _13 = deref_copy (_1.0: &mut [static generator@ui/generator/static-reference-across-yield.rs:10:5: 10:14]);
        _14 = deref_copy (((*_13) as variant#3).0: &[i32; 5]);
        _3 = (*_14);
        _6 = ();
        goto -> bb4;
    }

    bb3: {
        _6 = ();
        goto -> bb4;
    }

    bb4: {
        _0 = GeneratorState::<(), ()>::Complete(move _6);
        _15 = deref_copy (_1.0: &mut [static generator@ui/generator/static-reference-across-yield.rs:10:5: 10:14]);
        discriminant((*_15)) = 1;
        return;
    }

    bb5: {
        _4 = const true;
        switchInt(move _4) -> [0: bb3, otherwise: bb2];
    }

    bb6: {
        assert(const false, "generator resumed after completion") -> bb6;
    }

    bb7: {
        unreachable;
    }
}

alloc1 (static: A, size: 20, align: 4) {
    0x00 │ 01 00 00 00 02 00 00 00 03 00 00 00 04 00 00 00 │ ................
    0x10 │ 05 00 00 00                                     │ ....
}
