// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn finish(_1: usize, _2: T) -> <T as Generator>::Return {
    debug amt => _1;
    debug t => _2;
    let mut _0: <T as std::ops::Generator>::Return;
    let mut _3: std::ops::GeneratorState<(), <T as std::ops::Generator>::Return>;
    let mut _4: std::pin::Pin<&mut T>;
    let mut _5: &mut T;
    let mut _6: isize;
    let mut _7: usize;
    let mut _8: std::option::Option<usize>;
    let mut _9: usize;
    let _10: <T as std::ops::Generator>::Return;
    let mut _11: (&usize, &usize);
    let mut _12: &usize;
    let mut _13: &usize;
    let _14: usize;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: usize;
    let mut _20: usize;
    let _22: !;
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug ret => _10;
        let _15: &usize;
        let _16: &usize;
        scope 2 {
            debug left_val => _15;
            debug right_val => _16;
            let _21: core::panicking::AssertKind;
            scope 3 {
                debug kind => _21;
            }
        }
    }

    bb0: {
        goto -> bb1;
    }

    bb1: {
        _5 = &mut _2;
        _4 = Pin::<&mut T>::new(move _5) -> [return: bb2, unwind: bb13];
    }

    bb2: {
        _3 = <T as Generator>::resume(move _4, const ()) -> [return: bb3, unwind: bb13];
    }

    bb3: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        _10 = move ((_3 as Complete).0: <T as std::ops::Generator>::Return);
        _12 = &_1;
        _14 = const 0_usize;
        _13 = &_14;
        _11 = (move _12, move _13);
        _15 = (_11.0: &usize);
        _16 = (_11.1: &usize);
        _19 = (*_15);
        _20 = (*_16);
        _18 = Eq(move _19, move _20);
        _17 = Not(move _18);
        switchInt(move _17) -> [0: bb10, otherwise: bb9];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _9 = _1;
        _8 = core::num::<impl usize>::checked_sub(move _9, const 1_usize) -> [return: bb7, unwind: bb13];
    }

    bb7: {
        _7 = Option::<usize>::unwrap(move _8) -> [return: bb8, unwind: bb13];
    }

    bb8: {
        _1 = move _7;
        goto -> bb1;
    }

    bb9: {
        _21 = core::panicking::AssertKind::Eq;
        _23 = Option::<Arguments<'_>>::None;
        _22 = core::panicking::assert_failed::<usize, usize>(move _21, _15, _16, move _23) -> bb12;
    }

    bb10: {
        _0 = move _10;
        drop(_2) -> bb11;
    }

    bb11: {
        return;
    }

    bb12 (cleanup): {
        drop(_10) -> [return: bb13, unwind terminate];
    }

    bb13 (cleanup): {
        drop(_2) -> [return: bb14, unwind terminate];
    }

    bb14 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: [generator@ui/generator/control-flow.rs:28:15: 28:17];
    let _3: ();
    let mut _4: [generator@ui/generator/control-flow.rs:29:15: 29:17];
    let _5: ();
    let mut _6: [generator@ui/generator/control-flow.rs:34:15: 34:17];
    let _7: ();
    let mut _8: [generator@ui/generator/control-flow.rs:40:15: 40:17];
    let _9: ();
    let mut _10: [generator@ui/generator/control-flow.rs:46:15: 46:17];

    bb0: {
        _2 = [generator@ui/generator/control-flow.rs:28:15: 28:17 (#0)];
        _1 = finish::<[generator@ui/generator/control-flow.rs:28:15: 28:17]>(const 1_usize, move _2) -> bb1;
    }

    bb1: {
        _4 = [generator@ui/generator/control-flow.rs:29:15: 29:17 (#0)];
        _3 = finish::<[generator@ui/generator/control-flow.rs:29:15: 29:17]>(const 8_usize, move _4) -> bb2;
    }

    bb2: {
        _6 = [generator@ui/generator/control-flow.rs:34:15: 34:17 (#0)];
        _5 = finish::<[generator@ui/generator/control-flow.rs:34:15: 34:17]>(const 1_usize, move _6) -> bb3;
    }

    bb3: {
        _8 = [generator@ui/generator/control-flow.rs:40:15: 40:17 (#0)];
        _7 = finish::<[generator@ui/generator/control-flow.rs:40:15: 40:17]>(const 1_usize, move _8) -> bb4;
    }

    bb4: {
        _10 = [generator@ui/generator/control-flow.rs:46:15: 46:17 (#0)];
        _9 = finish::<[generator@ui/generator/control-flow.rs:46:15: 46:17]>(const 2_usize, move _10) -> bb5;
    }

    bb5: {
        return;
    }
}

fn main::{closure#0}(_1: Pin<&mut [generator@ui/generator/control-flow.rs:28:15: 28:17]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>;
    let mut _3: ();
    let mut _4: u32;
    let mut _5: &mut [generator@ui/generator/control-flow.rs:28:15: 28:17];
    let mut _6: &mut [generator@ui/generator/control-flow.rs:28:15: 28:17];
    let mut _7: &mut [generator@ui/generator/control-flow.rs:28:15: 28:17];

    bb0: {
        _5 = deref_copy (_1.0: &mut [generator@ui/generator/control-flow.rs:28:15: 28:17]);
        _4 = discriminant((*_5));
        switchInt(move _4) -> [0: bb1, 1: bb3, 3: bb2, otherwise: bb4];
    }

    bb1: {
        _3 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _3);
        _6 = deref_copy (_1.0: &mut [generator@ui/generator/control-flow.rs:28:15: 28:17]);
        discriminant((*_6)) = 3;
        return;
    }

    bb2: {
        _0 = GeneratorState::<(), ()>::Complete(move _2);
        _7 = deref_copy (_1.0: &mut [generator@ui/generator/control-flow.rs:28:15: 28:17]);
        discriminant((*_7)) = 1;
        return;
    }

    bb3: {
        assert(const false, "generator resumed after completion") -> bb3;
    }

    bb4: {
        unreachable;
    }
}

fn main::{closure#1}(_1: Pin<&mut [generator@ui/generator/control-flow.rs:29:15: 29:17]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>;
    let mut _3: std::ops::Range<i32>;
    let mut _4: std::ops::Range<i32>;
    let mut _5: std::option::Option<i32>;
    let mut _6: &mut std::ops::Range<i32>;
    let mut _7: isize;
    let mut _8: ();
    let mut _9: ();
    let mut _10: u32;
    let mut _11: &mut [generator@ui/generator/control-flow.rs:29:15: 29:17];
    let mut _12: &mut [generator@ui/generator/control-flow.rs:29:15: 29:17];
    let mut _13: &mut [generator@ui/generator/control-flow.rs:29:15: 29:17];
    let mut _14: &mut [generator@ui/generator/control-flow.rs:29:15: 29:17];
    let mut _15: &mut [generator@ui/generator/control-flow.rs:29:15: 29:17];
    let mut _16: &mut [generator@ui/generator/control-flow.rs:29:15: 29:17];
    scope 1 {
        debug iter => (((*(_1.0: &mut [generator@ui/generator/control-flow.rs:29:15: 29:17])) as variant#3).0: std::ops::Range<i32>);
    }

    bb0: {
        _11 = deref_copy (_1.0: &mut [generator@ui/generator/control-flow.rs:29:15: 29:17]);
        _10 = discriminant((*_11));
        switchInt(move _10) -> [0: bb1, 1: bb10, 2: bb9, 3: bb3, otherwise: bb6];
    }

    bb1: {
        _4 = std::ops::Range::<i32> { start: const 0_i32, end: const 8_i32 };
        _3 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _4) -> [return: bb2, unwind: bb8];
    }

    bb2: {
        _12 = deref_copy (_1.0: &mut [generator@ui/generator/control-flow.rs:29:15: 29:17]);
        (((*_12) as variant#3).0: std::ops::Range<i32>) = move _3;
        goto -> bb3;
    }

    bb3: {
        _13 = deref_copy (_1.0: &mut [generator@ui/generator/control-flow.rs:29:15: 29:17]);
        _6 = &mut (((*_13) as variant#3).0: std::ops::Range<i32>);
        _5 = <std::ops::Range<i32> as Iterator>::next(_6) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        _8 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _8);
        _14 = deref_copy (_1.0: &mut [generator@ui/generator/control-flow.rs:29:15: 29:17]);
        discriminant((*_14)) = 3;
        return;
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _9 = const ();
        _0 = GeneratorState::<(), ()>::Complete(move _9);
        _15 = deref_copy (_1.0: &mut [generator@ui/generator/control-flow.rs:29:15: 29:17]);
        discriminant((*_15)) = 1;
        return;
    }

    bb8 (cleanup): {
        _16 = deref_copy (_1.0: &mut [generator@ui/generator/control-flow.rs:29:15: 29:17]);
        discriminant((*_16)) = 2;
        resume;
    }

    bb9: {
        assert(const false, "generator resumed after panicking") -> bb9;
    }

    bb10: {
        assert(const false, "generator resumed after completion") -> bb10;
    }
}

fn main::{closure#2}(_1: Pin<&mut [generator@ui/generator/control-flow.rs:34:15: 34:17]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>;
    let mut _3: bool;
    let mut _4: ();
    let mut _5: ();
    let mut _6: u32;
    let mut _7: &mut [generator@ui/generator/control-flow.rs:34:15: 34:17];
    let mut _8: &mut [generator@ui/generator/control-flow.rs:34:15: 34:17];
    let mut _9: &mut [generator@ui/generator/control-flow.rs:34:15: 34:17];

    bb0: {
        _7 = deref_copy (_1.0: &mut [generator@ui/generator/control-flow.rs:34:15: 34:17]);
        _6 = discriminant((*_7));
        switchInt(move _6) -> [0: bb1, 1: bb6, 3: bb5, otherwise: bb7];
    }

    bb1: {
        _3 = const true;
        switchInt(move _3) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _4 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _4);
        _8 = deref_copy (_1.0: &mut [generator@ui/generator/control-flow.rs:34:15: 34:17]);
        discriminant((*_8)) = 3;
        return;
    }

    bb3: {
        _5 = const ();
        goto -> bb4;
    }

    bb4: {
        _0 = GeneratorState::<(), ()>::Complete(move _5);
        _9 = deref_copy (_1.0: &mut [generator@ui/generator/control-flow.rs:34:15: 34:17]);
        discriminant((*_9)) = 1;
        return;
    }

    bb5: {
        _5 = const ();
        goto -> bb4;
    }

    bb6: {
        assert(const false, "generator resumed after completion") -> bb6;
    }

    bb7: {
        unreachable;
    }
}

fn main::{closure#3}(_1: Pin<&mut [generator@ui/generator/control-flow.rs:40:15: 40:17]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>;
    let mut _3: bool;
    let mut _4: ();
    let mut _5: ();
    let mut _6: u32;
    let mut _7: &mut [generator@ui/generator/control-flow.rs:40:15: 40:17];
    let mut _8: &mut [generator@ui/generator/control-flow.rs:40:15: 40:17];
    let mut _9: &mut [generator@ui/generator/control-flow.rs:40:15: 40:17];

    bb0: {
        _7 = deref_copy (_1.0: &mut [generator@ui/generator/control-flow.rs:40:15: 40:17]);
        _6 = discriminant((*_7));
        switchInt(move _6) -> [0: bb1, 1: bb6, 3: bb5, otherwise: bb7];
    }

    bb1: {
        _3 = const false;
        switchInt(move _3) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _5 = const ();
        goto -> bb4;
    }

    bb3: {
        _4 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _4);
        _8 = deref_copy (_1.0: &mut [generator@ui/generator/control-flow.rs:40:15: 40:17]);
        discriminant((*_8)) = 3;
        return;
    }

    bb4: {
        _0 = GeneratorState::<(), ()>::Complete(move _5);
        _9 = deref_copy (_1.0: &mut [generator@ui/generator/control-flow.rs:40:15: 40:17]);
        discriminant((*_9)) = 1;
        return;
    }

    bb5: {
        _5 = const ();
        goto -> bb4;
    }

    bb6: {
        assert(const false, "generator resumed after completion") -> bb6;
    }

    bb7: {
        unreachable;
    }
}

fn main::{closure#4}(_1: Pin<&mut [generator@ui/generator/control-flow.rs:46:15: 46:17]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>;
    let mut _3: bool;
    let mut _4: ();
    let mut _5: ();
    let mut _6: !;
    let mut _7: ();
    let mut _8: u32;
    let mut _9: &mut [generator@ui/generator/control-flow.rs:46:15: 46:17];
    let mut _10: &mut [generator@ui/generator/control-flow.rs:46:15: 46:17];
    let mut _11: &mut [generator@ui/generator/control-flow.rs:46:15: 46:17];
    let mut _12: &mut [generator@ui/generator/control-flow.rs:46:15: 46:17];
    let mut _13: &mut [generator@ui/generator/control-flow.rs:46:15: 46:17];
    let mut _14: &mut [generator@ui/generator/control-flow.rs:46:15: 46:17];

    bb0: {
        _9 = deref_copy (_1.0: &mut [generator@ui/generator/control-flow.rs:46:15: 46:17]);
        _8 = discriminant((*_9));
        switchInt(move _8) -> [0: bb1, 1: bb9, 2: bb8, 3: bb5, 4: bb6, 5: bb7, otherwise: bb10];
    }

    bb1: {
        _4 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _4);
        _10 = deref_copy (_1.0: &mut [generator@ui/generator/control-flow.rs:46:15: 46:17]);
        discriminant((*_10)) = 3;
        return;
    }

    bb2: {
        _5 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _5);
        _11 = deref_copy (_1.0: &mut [generator@ui/generator/control-flow.rs:46:15: 46:17]);
        discriminant((*_11)) = 4;
        return;
    }

    bb3: {
        _7 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _7);
        _12 = deref_copy (_1.0: &mut [generator@ui/generator/control-flow.rs:46:15: 46:17]);
        discriminant((*_12)) = 5;
        return;
    }

    bb4 (cleanup): {
        _14 = deref_copy (_1.0: &mut [generator@ui/generator/control-flow.rs:46:15: 46:17]);
        discriminant((*_14)) = 2;
        resume;
    }

    bb5: {
        _3 = const false;
        switchInt(move _3) -> [0: bb3, otherwise: bb2];
    }

    bb6: {
        _6 = begin_panic::<&str>(const "explicit panic") -> bb4;
    }

    bb7: {
        _0 = GeneratorState::<(), ()>::Complete(move _2);
        _13 = deref_copy (_1.0: &mut [generator@ui/generator/control-flow.rs:46:15: 46:17]);
        discriminant((*_13)) = 1;
        return;
    }

    bb8: {
        assert(const false, "generator resumed after panicking") -> bb8;
    }

    bb9: {
        assert(const false, "generator resumed after completion") -> bb9;
    }

    bb10: {
        unreachable;
    }
}
