// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const FOO_SIZE: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1024_usize;
        return;
    }
}

Foo::0::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

fn <impl at ui/generator/size-moved-locals.rs:24:1: 24:18>::drop(_1: &mut Foo) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn move_before_yield() -> impl Generator<Yield = (), Return = ()> {
    let mut _0: impl std::ops::Generator<Yield = (), Return = ()>;

    bb0: {
        _0 = [generator@ui/generator/size-moved-locals.rs:29:5: 29:14 (#0)];
        return;
    }
}

fn move_before_yield::{closure#0}(_1: Pin<&mut [static generator@ui/generator/size-moved-locals.rs:29:5: 29:14]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>;
    let _3: Foo;
    let mut _4: [u8; 1024];
    let mut _5: ();
    let mut _6: ();
    let mut _7: u32;
    let mut _8: &mut [static generator@ui/generator/size-moved-locals.rs:29:5: 29:14];
    let mut _9: &mut [static generator@ui/generator/size-moved-locals.rs:29:5: 29:14];
    let mut _10: &mut [static generator@ui/generator/size-moved-locals.rs:29:5: 29:14];
    let mut _11: &mut [static generator@ui/generator/size-moved-locals.rs:29:5: 29:14];
    let mut _12: &mut [static generator@ui/generator/size-moved-locals.rs:29:5: 29:14];
    let mut _13: &mut [static generator@ui/generator/size-moved-locals.rs:29:5: 29:14];
    scope 1 {
        debug first => _3;
        scope 2 {
            debug _second => (((*(_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:29:5: 29:14])) as variant#3).0: Foo);
        }
    }

    bb0: {
        _8 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:29:5: 29:14]);
        _7 = discriminant((*_8));
        switchInt(move _7) -> [0: bb1, 1: bb6, 2: bb5, 3: bb4, otherwise: bb7];
    }

    bb1: {
        _4 = [const 0_u8; 1024];
        _3 = Foo(move _4);
        _9 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:29:5: 29:14]);
        (((*_9) as variant#3).0: Foo) = move _3;
        _5 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _5);
        _10 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:29:5: 29:14]);
        discriminant((*_10)) = 3;
        return;
    }

    bb2: {
        _0 = GeneratorState::<(), ()>::Complete(move _6);
        _12 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:29:5: 29:14]);
        discriminant((*_12)) = 1;
        return;
    }

    bb3 (cleanup): {
        _13 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:29:5: 29:14]);
        discriminant((*_13)) = 2;
        resume;
    }

    bb4: {
        _6 = const ();
        _11 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:29:5: 29:14]);
        drop((((*_11) as variant#3).0: Foo)) -> [return: bb2, unwind: bb3];
    }

    bb5: {
        assert(const false, "generator resumed after panicking") -> bb5;
    }

    bb6: {
        assert(const false, "generator resumed after completion") -> bb6;
    }

    bb7: {
        unreachable;
    }
}

move_before_yield::{closure#0}::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

fn noop() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn move_before_yield_with_noop() -> impl Generator<Yield = (), Return = ()> {
    let mut _0: impl std::ops::Generator<Yield = (), Return = ()>;

    bb0: {
        _0 = [generator@ui/generator/size-moved-locals.rs:40:5: 40:14 (#0)];
        return;
    }
}

fn move_before_yield_with_noop::{closure#0}(_1: Pin<&mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>;
    let _3: Foo;
    let mut _4: [u8; 1024];
    let _5: ();
    let mut _6: ();
    let mut _7: ();
    let mut _8: u32;
    let mut _9: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14];
    let mut _10: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14];
    let mut _11: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14];
    let mut _12: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14];
    let mut _13: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14];
    let mut _14: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14];
    let mut _15: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14];
    let mut _16: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14];
    let mut _17: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14];
    let mut _18: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14];
    let mut _19: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14];
    let mut _20: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14];
    scope 1 {
        debug first => _3;
        scope 2 {
            debug _second => (((*(_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14])) as variant#3).0: Foo);
        }
    }

    bb0: {
        _9 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14]);
        _8 = discriminant((*_9));
        switchInt(move _8) -> [0: bb1, 1: bb9, 2: bb8, 3: bb7, otherwise: bb10];
    }

    bb1: {
        _10 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14]);
        (((*_10) as variant#3).1: bool) = const false;
        _4 = [const 0_u8; 1024];
        _11 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14]);
        (((*_11) as variant#3).1: bool) = const true;
        _3 = Foo(move _4);
        _5 = noop() -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _12 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14]);
        (((*_12) as variant#3).1: bool) = const false;
        _13 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14]);
        (((*_13) as variant#3).0: Foo) = move _3;
        _6 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _6);
        _14 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14]);
        discriminant((*_14)) = 3;
        return;
    }

    bb3: {
        _16 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14]);
        (((*_16) as variant#3).1: bool) = const false;
        _0 = GeneratorState::<(), ()>::Complete(move _7);
        _17 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14]);
        discriminant((*_17)) = 1;
        return;
    }

    bb4 (cleanup): {
        _18 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14]);
        (((*_18) as variant#3).1: bool) = const false;
        _20 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14]);
        discriminant((*_20)) = 2;
        resume;
    }

    bb5 (cleanup): {
        drop(_3) -> [return: bb4, unwind terminate];
    }

    bb6 (cleanup): {
        _19 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14]);
        switchInt((((*_19) as variant#3).1: bool)) -> [0: bb4, otherwise: bb5];
    }

    bb7: {
        _7 = const ();
        _15 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14]);
        drop((((*_15) as variant#3).0: Foo)) -> [return: bb3, unwind: bb6];
    }

    bb8: {
        assert(const false, "generator resumed after panicking") -> bb8;
    }

    bb9: {
        assert(const false, "generator resumed after completion") -> bb9;
    }

    bb10: {
        unreachable;
    }
}

move_before_yield_with_noop::{closure#0}::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

fn overlap_move_points() -> impl Generator<Yield = (), Return = ()> {
    let mut _0: impl std::ops::Generator<Yield = (), Return = ()>;

    bb0: {
        _0 = [generator@ui/generator/size-moved-locals.rs:52:5: 52:14 (#0)];
        return;
    }
}

fn overlap_move_points::{closure#0}(_1: Pin<&mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>;
    let mut _3: [u8; 1024];
    let mut _4: ();
    let mut _5: ();
    let mut _6: ();
    let mut _7: ();
    let mut _8: u32;
    let mut _9: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14];
    let mut _10: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14];
    let mut _11: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14];
    let mut _12: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14];
    let mut _13: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14];
    let mut _14: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14];
    let mut _15: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14];
    let mut _16: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14];
    let mut _17: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14];
    let mut _18: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14];
    let mut _19: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14];
    let mut _20: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14];
    let mut _21: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14];
    let mut _22: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14];
    let mut _23: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14];
    let mut _24: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14];
    let mut _25: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14];
    let mut _26: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14];
    let mut _27: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14];
    let mut _28: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14];
    let mut _29: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14];
    let mut _30: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14];
    scope 1 {
        debug first => (((*(_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14])) as variant#3).0: Foo);
        scope 2 {
            debug second => (((*(_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14])) as variant#4).0: Foo);
            scope 3 {
                debug _third => (((*(_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14])) as variant#5).0: Foo);
            }
        }
    }

    bb0: {
        _9 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14]);
        _8 = discriminant((*_9));
        switchInt(move _8) -> [0: bb1, 1: bb8, 2: bb7, 3: bb4, 4: bb5, 5: bb6, otherwise: bb9];
    }

    bb1: {
        _10 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14]);
        (((*_10) as variant#3).1: bool) = const false;
        _11 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14]);
        (((*_11) as variant#4).1: bool) = const false;
        _3 = [const 0_u8; 1024];
        _12 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14]);
        (((*_12) as variant#3).1: bool) = const true;
        _13 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14]);
        (((*_13) as variant#3).0: Foo) = Foo(move _3);
        _4 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _4);
        _14 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14]);
        discriminant((*_14)) = 3;
        return;
    }

    bb2: {
        _25 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14]);
        (((*_25) as variant#4).1: bool) = const false;
        _26 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14]);
        (((*_26) as variant#3).1: bool) = const false;
        _0 = GeneratorState::<(), ()>::Complete(move _7);
        _27 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14]);
        discriminant((*_27)) = 1;
        return;
    }

    bb3 (cleanup): {
        _28 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14]);
        (((*_28) as variant#4).1: bool) = const false;
        _29 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14]);
        (((*_29) as variant#3).1: bool) = const false;
        _30 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14]);
        discriminant((*_30)) = 2;
        resume;
    }

    bb4: {
        _15 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14]);
        (((*_15) as variant#3).1: bool) = const false;
        _16 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14]);
        (((*_16) as variant#4).1: bool) = const true;
        _17 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14]);
        _18 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14]);
        (((*_17) as variant#4).0: Foo) = move (((*_18) as variant#3).0: Foo);
        _5 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _5);
        _19 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14]);
        discriminant((*_19)) = 4;
        return;
    }

    bb5: {
        _20 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14]);
        (((*_20) as variant#4).1: bool) = const false;
        _21 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14]);
        _22 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14]);
        (((*_21) as variant#5).0: Foo) = move (((*_22) as variant#4).0: Foo);
        _6 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _6);
        _23 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14]);
        discriminant((*_23)) = 5;
        return;
    }

    bb6: {
        _7 = const ();
        _24 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14]);
        drop((((*_24) as variant#5).0: Foo)) -> [return: bb2, unwind: bb3];
    }

    bb7: {
        assert(const false, "generator resumed after panicking") -> bb7;
    }

    bb8: {
        assert(const false, "generator resumed after completion") -> bb8;
    }

    bb9: {
        unreachable;
    }
}

overlap_move_points::{closure#0}::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

fn overlap_x_and_y() -> impl Generator<Yield = (), Return = ()> {
    let mut _0: impl std::ops::Generator<Yield = (), Return = ()>;

    bb0: {
        _0 = [generator@ui/generator/size-moved-locals.rs:63:5: 63:14 (#0)];
        return;
    }
}

fn overlap_x_and_y::{closure#0}(_1: Pin<&mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>;
    let mut _3: [u8; 1024];
    let mut _4: ();
    let _5: ();
    let mut _6: Foo;
    let mut _7: [u8; 1024];
    let mut _8: ();
    let _9: ();
    let mut _10: Foo;
    let mut _11: ();
    let mut _12: u32;
    let mut _13: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14];
    let mut _14: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14];
    let mut _15: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14];
    let mut _16: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14];
    let mut _17: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14];
    let mut _18: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14];
    let mut _19: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14];
    let mut _20: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14];
    let mut _21: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14];
    let mut _22: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14];
    let mut _23: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14];
    let mut _24: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14];
    let mut _25: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14];
    let mut _26: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14];
    scope 1 {
        debug x => (((*(_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14])) as variant#3).0: Foo);
        scope 2 {
            debug y => (((*(_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14])) as variant#4).0: Foo);
        }
    }

    bb0: {
        _13 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14]);
        _12 = discriminant((*_13));
        switchInt(move _12) -> [0: bb1, 1: bb8, 2: bb7, 3: bb5, 4: bb6, otherwise: bb9];
    }

    bb1: {
        _14 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14]);
        (((*_14) as variant#3).1: bool) = const false;
        _3 = [const 0_u8; 1024];
        _15 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14]);
        (((*_15) as variant#3).1: bool) = const true;
        _16 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14]);
        (((*_16) as variant#3).0: Foo) = Foo(move _3);
        _4 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _4);
        _17 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14]);
        discriminant((*_17)) = 3;
        return;
    }

    bb2: {
        _7 = [const 0_u8; 1024];
        _20 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14]);
        (((*_20) as variant#4).0: Foo) = Foo(move _7);
        _8 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _8);
        _21 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14]);
        discriminant((*_21)) = 4;
        return;
    }

    bb3: {
        _11 = const ();
        _23 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14]);
        (((*_23) as variant#3).1: bool) = const false;
        _0 = GeneratorState::<(), ()>::Complete(move _11);
        _24 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14]);
        discriminant((*_24)) = 1;
        return;
    }

    bb4 (cleanup): {
        _25 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14]);
        (((*_25) as variant#3).1: bool) = const false;
        _26 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14]);
        discriminant((*_26)) = 2;
        resume;
    }

    bb5: {
        _18 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14]);
        (((*_18) as variant#3).1: bool) = const false;
        _19 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14]);
        _6 = move (((*_19) as variant#3).0: Foo);
        _5 = std::mem::drop::<Foo>(move _6) -> [return: bb2, unwind: bb4];
    }

    bb6: {
        _22 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14]);
        _10 = move (((*_22) as variant#4).0: Foo);
        _9 = std::mem::drop::<Foo>(move _10) -> [return: bb3, unwind: bb4];
    }

    bb7: {
        assert(const false, "generator resumed after panicking") -> bb7;
    }

    bb8: {
        assert(const false, "generator resumed after completion") -> bb8;
    }

    bb9: {
        unreachable;
    }
}

overlap_x_and_y::{closure#0}::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

overlap_x_and_y::{closure#0}::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let mut _2: &usize;
    let _3: usize;
    let mut _4: &usize;
    let _5: usize;
    let _6: &impl std::ops::Generator<Yield = (), Return = ()>;
    let _7: impl std::ops::Generator<Yield = (), Return = ()>;
    let _8: &usize;
    let _9: &usize;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&usize, &usize);
    let mut _18: &usize;
    let _19: usize;
    let mut _20: &usize;
    let _21: usize;
    let _22: &impl std::ops::Generator<Yield = (), Return = ()>;
    let _23: impl std::ops::Generator<Yield = (), Return = ()>;
    let _24: &usize;
    let _25: &usize;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: usize;
    let mut _29: usize;
    let _31: !;
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _33: (&usize, &usize);
    let mut _34: &usize;
    let _35: usize;
    let mut _36: &usize;
    let _37: usize;
    let _38: &impl std::ops::Generator<Yield = (), Return = ()>;
    let _39: impl std::ops::Generator<Yield = (), Return = ()>;
    let _40: &usize;
    let _41: &usize;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: usize;
    let mut _45: usize;
    let _47: !;
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _49: (&usize, &usize);
    let mut _50: &usize;
    let _51: usize;
    let mut _52: &usize;
    let _53: usize;
    let _54: &impl std::ops::Generator<Yield = (), Return = ()>;
    let _55: impl std::ops::Generator<Yield = (), Return = ()>;
    let _56: &usize;
    let _57: &usize;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: usize;
    let mut _61: usize;
    let _63: !;
    let mut _64: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _8;
        debug right_val => _9;
        let _14: core::panicking::AssertKind;
        scope 2 {
            debug kind => _14;
        }
    }
    scope 3 {
        debug left_val => _24;
        debug right_val => _25;
        let _30: core::panicking::AssertKind;
        scope 4 {
            debug kind => _30;
        }
    }
    scope 5 {
        debug left_val => _40;
        debug right_val => _41;
        let _46: core::panicking::AssertKind;
        scope 6 {
            debug kind => _46;
        }
    }
    scope 7 {
        debug left_val => _56;
        debug right_val => _57;
        let _62: core::panicking::AssertKind;
        scope 8 {
            debug kind => _62;
        }
    }

    bb0: {
        _3 = const 1025_usize;
        _2 = &_3;
        _7 = move_before_yield() -> bb1;
    }

    bb1: {
        _6 = &_7;
        _5 = std::mem::size_of_val::<impl Generator<Yield = (), Return = ()>>(_6) -> [return: bb2, unwind: bb24];
    }

    bb2: {
        _4 = &_5;
        _1 = (move _2, move _4);
        _8 = (_1.0: &usize);
        _9 = (_1.1: &usize);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<usize, usize>(move _14, _8, _9, move _16) -> bb24;
    }

    bb4: {
        drop(_7) -> bb5;
    }

    bb5: {
        _19 = const 1026_usize;
        _18 = &_19;
        _23 = move_before_yield_with_noop() -> bb6;
    }

    bb6: {
        _22 = &_23;
        _21 = std::mem::size_of_val::<impl Generator<Yield = (), Return = ()>>(_22) -> [return: bb7, unwind: bb23];
    }

    bb7: {
        _20 = &_21;
        _17 = (move _18, move _20);
        _24 = (_17.0: &usize);
        _25 = (_17.1: &usize);
        _28 = (*_24);
        _29 = (*_25);
        _27 = Eq(move _28, move _29);
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _30 = core::panicking::AssertKind::Eq;
        _32 = Option::<Arguments<'_>>::None;
        _31 = core::panicking::assert_failed::<usize, usize>(move _30, _24, _25, move _32) -> bb23;
    }

    bb9: {
        drop(_23) -> bb10;
    }

    bb10: {
        _35 = const 2051_usize;
        _34 = &_35;
        _39 = overlap_move_points() -> bb11;
    }

    bb11: {
        _38 = &_39;
        _37 = std::mem::size_of_val::<impl Generator<Yield = (), Return = ()>>(_38) -> [return: bb12, unwind: bb22];
    }

    bb12: {
        _36 = &_37;
        _33 = (move _34, move _36);
        _40 = (_33.0: &usize);
        _41 = (_33.1: &usize);
        _44 = (*_40);
        _45 = (*_41);
        _43 = Eq(move _44, move _45);
        _42 = Not(move _43);
        switchInt(move _42) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _46 = core::panicking::AssertKind::Eq;
        _48 = Option::<Arguments<'_>>::None;
        _47 = core::panicking::assert_failed::<usize, usize>(move _46, _40, _41, move _48) -> bb22;
    }

    bb14: {
        drop(_39) -> bb15;
    }

    bb15: {
        _51 = const 1026_usize;
        _50 = &_51;
        _55 = overlap_x_and_y() -> bb16;
    }

    bb16: {
        _54 = &_55;
        _53 = std::mem::size_of_val::<impl Generator<Yield = (), Return = ()>>(_54) -> [return: bb17, unwind: bb21];
    }

    bb17: {
        _52 = &_53;
        _49 = (move _50, move _52);
        _56 = (_49.0: &usize);
        _57 = (_49.1: &usize);
        _60 = (*_56);
        _61 = (*_57);
        _59 = Eq(move _60, move _61);
        _58 = Not(move _59);
        switchInt(move _58) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _62 = core::panicking::AssertKind::Eq;
        _64 = Option::<Arguments<'_>>::None;
        _63 = core::panicking::assert_failed::<usize, usize>(move _62, _56, _57, move _64) -> bb21;
    }

    bb19: {
        drop(_55) -> bb20;
    }

    bb20: {
        return;
    }

    bb21 (cleanup): {
        drop(_55) -> [return: bb25, unwind terminate];
    }

    bb22 (cleanup): {
        drop(_39) -> [return: bb25, unwind terminate];
    }

    bb23 (cleanup): {
        drop(_23) -> [return: bb25, unwind terminate];
    }

    bb24 (cleanup): {
        drop(_7) -> [return: bb25, unwind terminate];
    }

    bb25 (cleanup): {
        resume;
    }
}

fn Foo(_1: [u8; 1024]) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: [u8; 1024]) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo(move _1);
        return;
    }
}
