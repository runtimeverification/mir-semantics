// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: [generator@ui/generator/nested_generators.rs:9:22: 9:24];
    scope 1 {
        debug _generator => _1;
    }

    bb0: {
        _1 = [generator@ui/generator/nested_generators.rs:9:22: 9:24 (#0)];
        return;
    }
}

fn main::{closure#0}(_1: Pin<&mut [generator@ui/generator/nested_generators.rs:9:22: 9:24]>, _2: ()) -> GeneratorState<i32, ()> {
    let mut _0: std::ops::GeneratorState<i32, ()>;
    let mut _3: [generator@ui/generator/nested_generators.rs:10:33: 10:35];
    let mut _4: std::ops::GeneratorState<i32, ()>;
    let mut _5: std::pin::Pin<&mut [generator@ui/generator/nested_generators.rs:10:33: 10:35]>;
    let mut _6: &mut [generator@ui/generator/nested_generators.rs:10:33: 10:35];
    let mut _7: ();
    let mut _8: isize;
    let mut _10: !;
    let mut _11: ();
    let mut _12: u32;
    let mut _13: &mut [generator@ui/generator/nested_generators.rs:9:22: 9:24];
    let mut _14: &mut [generator@ui/generator/nested_generators.rs:9:22: 9:24];
    let mut _15: &mut [generator@ui/generator/nested_generators.rs:9:22: 9:24];
    let mut _16: &mut [generator@ui/generator/nested_generators.rs:9:22: 9:24];
    scope 1 {
        debug sub_generator => _3;
        let _9: i32;
        scope 2 {
            debug x => _9;
        }
    }

    bb0: {
        _13 = deref_copy (_1.0: &mut [generator@ui/generator/nested_generators.rs:9:22: 9:24]);
        _12 = discriminant((*_13));
        switchInt(move _12) -> [0: bb1, 1: bb9, 2: bb8, 3: bb7, otherwise: bb10];
    }

    bb1: {
        _3 = [generator@ui/generator/nested_generators.rs:10:33: 10:35 (#0)];
        _6 = &mut _3;
        _5 = Pin::<&mut [generator@ui/generator/nested_generators.rs:10:33: 10:35]>::new(move _6) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _7 = ();
        _4 = <[generator@ui/generator/nested_generators.rs:10:33: 10:35] as Generator>::resume(move _5, move _7) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _10 = begin_panic::<&str>(const "explicit panic") -> bb6;
    }

    bb5: {
        _9 = ((_4 as Yielded).0: i32);
        _0 = GeneratorState::<i32, ()>::Yielded(_9);
        _14 = deref_copy (_1.0: &mut [generator@ui/generator/nested_generators.rs:9:22: 9:24]);
        discriminant((*_14)) = 3;
        return;
    }

    bb6 (cleanup): {
        _16 = deref_copy (_1.0: &mut [generator@ui/generator/nested_generators.rs:9:22: 9:24]);
        discriminant((*_16)) = 2;
        resume;
    }

    bb7: {
        _11 = const ();
        _0 = GeneratorState::<i32, ()>::Complete(move _11);
        _15 = deref_copy (_1.0: &mut [generator@ui/generator/nested_generators.rs:9:22: 9:24]);
        discriminant((*_15)) = 1;
        return;
    }

    bb8: {
        assert(const false, "generator resumed after panicking") -> bb8;
    }

    bb9: {
        assert(const false, "generator resumed after completion") -> bb9;
    }

    bb10: {
        unreachable;
    }
}

fn main::{closure#0}::{closure#0}(_1: Pin<&mut [generator@ui/generator/nested_generators.rs:10:33: 10:35]>, _2: ()) -> GeneratorState<i32, ()> {
    let mut _0: std::ops::GeneratorState<i32, ()>;
    let mut _3: ();
    let mut _4: u32;
    let mut _5: &mut [generator@ui/generator/nested_generators.rs:10:33: 10:35];
    let mut _6: &mut [generator@ui/generator/nested_generators.rs:10:33: 10:35];
    let mut _7: &mut [generator@ui/generator/nested_generators.rs:10:33: 10:35];

    bb0: {
        _5 = deref_copy (_1.0: &mut [generator@ui/generator/nested_generators.rs:10:33: 10:35]);
        _4 = discriminant((*_5));
        switchInt(move _4) -> [0: bb1, 1: bb3, 3: bb2, otherwise: bb4];
    }

    bb1: {
        _0 = GeneratorState::<i32, ()>::Yielded(const 2_i32);
        _6 = deref_copy (_1.0: &mut [generator@ui/generator/nested_generators.rs:10:33: 10:35]);
        discriminant((*_6)) = 3;
        return;
    }

    bb2: {
        _3 = const ();
        _0 = GeneratorState::<i32, ()>::Complete(move _3);
        _7 = deref_copy (_1.0: &mut [generator@ui/generator/nested_generators.rs:10:33: 10:35]);
        discriminant((*_7)) = 1;
        return;
    }

    bb3: {
        assert(const false, "generator resumed after completion") -> bb3;
    }

    bb4: {
        unreachable;
    }
}
