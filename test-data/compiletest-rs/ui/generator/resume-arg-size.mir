// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: [generator@ui/generator/resume-arg-size.rs:10:20: 10:34];
    let mut _3: (&usize, &usize);
    let mut _4: &usize;
    let _5: usize;
    let _6: &[generator@ui/generator/resume-arg-size.rs:10:20: 10:34];
    let mut _7: &usize;
    let _8: usize;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: usize;
    let mut _14: usize;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: (&usize, &usize);
    let mut _19: &usize;
    let _20: usize;
    let _21: &[generator@ui/generator/resume-arg-size.rs:18:20: 18:39];
    let mut _22: &usize;
    let _23: usize;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: usize;
    let mut _29: usize;
    let _31: !;
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug gen_copy => _1;
        let _2: [generator@ui/generator/resume-arg-size.rs:18:20: 18:39];
        scope 2 {
            debug gen_move => _2;
            let _9: &usize;
            let _10: &usize;
            let _24: &usize;
            let _25: &usize;
            scope 3 {
                debug left_val => _9;
                debug right_val => _10;
                let _15: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _15;
                }
            }
            scope 5 {
                debug left_val => _24;
                debug right_val => _25;
                let _30: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _30;
                }
            }
        }
    }

    bb0: {
        _1 = [generator@ui/generator/resume-arg-size.rs:10:20: 10:34 (#0)];
        _2 = [generator@ui/generator/resume-arg-size.rs:18:20: 18:39 (#0)];
        _6 = &_1;
        _5 = std::mem::size_of_val::<[generator@ui/generator/resume-arg-size.rs:10:20: 10:34]>(_6) -> [return: bb1, unwind: bb8];
    }

    bb1: {
        _4 = &_5;
        _8 = const 1_usize;
        _7 = &_8;
        _3 = (move _4, move _7);
        _9 = (_3.0: &usize);
        _10 = (_3.1: &usize);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<usize, usize>(move _15, _9, _10, move _17) -> bb8;
    }

    bb3: {
        _21 = &_2;
        _20 = std::mem::size_of_val::<[generator@ui/generator/resume-arg-size.rs:18:20: 18:39]>(_21) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _19 = &_20;
        _23 = const 1_usize;
        _22 = &_23;
        _18 = (move _19, move _22);
        _24 = (_18.0: &usize);
        _25 = (_18.1: &usize);
        _28 = (*_24);
        _29 = (*_25);
        _27 = Eq(move _28, move _29);
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _30 = core::panicking::AssertKind::Eq;
        _32 = Option::<Arguments<'_>>::None;
        _31 = core::panicking::assert_failed::<usize, usize>(move _30, _24, _25, move _32) -> bb8;
    }

    bb6: {
        drop(_2) -> bb7;
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_2) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        resume;
    }
}

fn main::{closure#0}(_1: Pin<&mut [generator@ui/generator/resume-arg-size.rs:10:20: 10:34]>, _2: usize) -> GeneratorState<(), ()> {
    debug x => _6;
    let mut _0: std::ops::GeneratorState<(), ()>;
    let _3: ();
    let mut _4: usize;
    let mut _5: ();
    let mut _6: usize;
    let mut _7: u32;
    let mut _8: &mut [generator@ui/generator/resume-arg-size.rs:10:20: 10:34];
    let mut _9: &mut [generator@ui/generator/resume-arg-size.rs:10:20: 10:34];
    let mut _10: &mut [generator@ui/generator/resume-arg-size.rs:10:20: 10:34];

    bb0: {
        _8 = deref_copy (_1.0: &mut [generator@ui/generator/resume-arg-size.rs:10:20: 10:34]);
        _7 = discriminant((*_8));
        switchInt(move _7) -> [0: bb1, 2: bb6, 3: bb5, otherwise: bb7];
    }

    bb1: {
        _6 = move _2;
        goto -> bb2;
    }

    bb2: {
        _4 = _6;
        _3 = std::mem::drop::<usize>(move _4) -> [return: bb3, unwind: bb4];
    }

    bb3: {
        _5 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _5);
        _9 = deref_copy (_1.0: &mut [generator@ui/generator/resume-arg-size.rs:10:20: 10:34]);
        discriminant((*_9)) = 3;
        return;
    }

    bb4 (cleanup): {
        _10 = deref_copy (_1.0: &mut [generator@ui/generator/resume-arg-size.rs:10:20: 10:34]);
        discriminant((*_10)) = 2;
        resume;
    }

    bb5: {
        _6 = move _2;
        goto -> bb2;
    }

    bb6: {
        assert(const false, "generator resumed after panicking") -> bb6;
    }

    bb7: {
        unreachable;
    }
}

fn main::{closure#1}(_1: Pin<&mut [generator@ui/generator/resume-arg-size.rs:18:20: 18:39]>, _2: Box<usize>) -> GeneratorState<(), ()> {
    debug x => _6;
    let mut _0: std::ops::GeneratorState<(), ()>;
    let _3: ();
    let mut _4: std::boxed::Box<usize>;
    let mut _5: ();
    let mut _6: std::boxed::Box<usize>;
    let mut _7: u32;
    let mut _8: &mut [generator@ui/generator/resume-arg-size.rs:18:20: 18:39];
    let mut _9: &mut [generator@ui/generator/resume-arg-size.rs:18:20: 18:39];
    let mut _10: &mut [generator@ui/generator/resume-arg-size.rs:18:20: 18:39];

    bb0: {
        _8 = deref_copy (_1.0: &mut [generator@ui/generator/resume-arg-size.rs:18:20: 18:39]);
        _7 = discriminant((*_8));
        switchInt(move _7) -> [0: bb1, 2: bb6, 3: bb5, otherwise: bb7];
    }

    bb1: {
        _6 = move _2;
        goto -> bb2;
    }

    bb2: {
        _4 = move _6;
        _3 = std::mem::drop::<Box<usize>>(move _4) -> [return: bb3, unwind: bb4];
    }

    bb3: {
        _5 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _5);
        _9 = deref_copy (_1.0: &mut [generator@ui/generator/resume-arg-size.rs:18:20: 18:39]);
        discriminant((*_9)) = 3;
        return;
    }

    bb4 (cleanup): {
        _10 = deref_copy (_1.0: &mut [generator@ui/generator/resume-arg-size.rs:18:20: 18:39]);
        discriminant((*_10)) = 2;
        resume;
    }

    bb5: {
        _6 = move _2;
        goto -> bb2;
    }

    bb6: {
        assert(const false, "generator resumed after panicking") -> bb6;
    }

    bb7: {
        unreachable;
    }
}
