// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/generator/issue-58888.rs:11:1: 11:14>::get_connection(_1: &Database) -> impl Iterator<Item = ()> {
    debug self => _1;
    let mut _0: impl std::iter::Iterator<Item = ()>;
    let mut _2: std::option::Option<()>;

    bb0: {
        _2 = Option::<()>::Some(const ());
        _0 = <Option<()> as IntoIterator>::into_iter(move _2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/generator/issue-58888.rs:11:1: 11:14>::check_connection(_1: &Database) -> impl Generator<Yield = (), Return = ()> + '_ {
    debug self => _1;
    let mut _0: impl std::ops::Generator<Yield = (), Return = ()> + '_;

    bb0: {
        _0 = [generator@ui/generator/issue-58888.rs:17:9: 17:16 (#0)] { self: _1 };
        return;
    }
}

fn <impl at ui/generator/issue-58888.rs:11:1: 11:14>::check_connection::{closure#0}(_1: Pin<&mut [generator@ui/generator/issue-58888.rs:17:9: 17:16]>, _2: ()) -> GeneratorState<(), ()> {
    debug self => ((*(_1.0: &mut [generator@ui/generator/issue-58888.rs:17:9: 17:16])).0: &Database);
    let mut _0: std::ops::GeneratorState<(), ()>;
    let _3: impl std::iter::Iterator<Item = ()>;
    let mut _4: impl std::iter::Iterator<Item = ()>;
    let mut _5: impl std::iter::Iterator<Item = ()>;
    let mut _6: std::option::Option<()>;
    let mut _7: &mut impl std::iter::Iterator<Item = ()>;
    let mut _8: isize;
    let mut _10: &Database;
    let mut _11: ();
    let mut _12: u32;
    let mut _13: &mut [generator@ui/generator/issue-58888.rs:17:9: 17:16];
    let mut _14: &mut [generator@ui/generator/issue-58888.rs:17:9: 17:16];
    let mut _15: &mut [generator@ui/generator/issue-58888.rs:17:9: 17:16];
    let mut _16: &mut [generator@ui/generator/issue-58888.rs:17:9: 17:16];
    let mut _17: &mut [generator@ui/generator/issue-58888.rs:17:9: 17:16];
    let mut _18: &mut [generator@ui/generator/issue-58888.rs:17:9: 17:16];
    let mut _19: &mut [generator@ui/generator/issue-58888.rs:17:9: 17:16];
    scope 1 {
        debug iter => _3;
        scope 2 {
            debug iter => (((*(_1.0: &mut [generator@ui/generator/issue-58888.rs:17:9: 17:16])) as variant#3).0: impl std::iter::Iterator<Item = ()>);
            let _9: ();
            scope 3 {
                debug i => _9;
            }
        }
    }

    bb0: {
        _13 = deref_copy (_1.0: &mut [generator@ui/generator/issue-58888.rs:17:9: 17:16]);
        _12 = discriminant((*_13));
        switchInt(move _12) -> [0: bb1, 1: bb11, 2: bb10, 3: bb4, otherwise: bb7];
    }

    bb1: {
        _14 = deref_copy (_1.0: &mut [generator@ui/generator/issue-58888.rs:17:9: 17:16]);
        _10 = deref_copy ((*_14).0: &Database);
        _3 = Database::get_connection(_10) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        _5 = move _3;
        _4 = <impl Iterator<Item = ()> as IntoIterator>::into_iter(move _5) -> [return: bb3, unwind: bb9];
    }

    bb3: {
        _15 = deref_copy (_1.0: &mut [generator@ui/generator/issue-58888.rs:17:9: 17:16]);
        (((*_15) as variant#3).0: impl std::iter::Iterator<Item = ()>) = move _4;
        goto -> bb4;
    }

    bb4: {
        _16 = deref_copy (_1.0: &mut [generator@ui/generator/issue-58888.rs:17:9: 17:16]);
        _7 = &mut (((*_16) as variant#3).0: impl std::iter::Iterator<Item = ()>);
        _6 = <impl Iterator<Item = ()> as Iterator>::next(_7) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb8, 1: bb6, otherwise: bb7];
    }

    bb6: {
        _9 = ((_6 as Some).0: ());
        _0 = GeneratorState::<(), ()>::Yielded(_9);
        _17 = deref_copy (_1.0: &mut [generator@ui/generator/issue-58888.rs:17:9: 17:16]);
        discriminant((*_17)) = 3;
        return;
    }

    bb7: {
        unreachable;
    }

    bb8: {
        _11 = const ();
        _0 = GeneratorState::<(), ()>::Complete(move _11);
        _18 = deref_copy (_1.0: &mut [generator@ui/generator/issue-58888.rs:17:9: 17:16]);
        discriminant((*_18)) = 1;
        return;
    }

    bb9 (cleanup): {
        _19 = deref_copy (_1.0: &mut [generator@ui/generator/issue-58888.rs:17:9: 17:16]);
        discriminant((*_19)) = 2;
        resume;
    }

    bb10: {
        assert(const false, "generator resumed after panicking") -> bb10;
    }

    bb11: {
        assert(const false, "generator resumed after completion") -> bb11;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: impl std::ops::Generator<Yield = (), Return = ()> + '_;
    let mut _2: &Database;
    let _3: Database;

    bb0: {
        _2 = &_3;
        _1 = Database::check_connection(move _2) -> bb1;
    }

    bb1: {
        return;
    }
}
