// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn with(_1: F) -> impl Generator<Yield = (), Return = ()> {
    debug f => _1;
    let mut _0: impl std::ops::Generator<Yield = (), Return = ()>;

    bb0: {
        _0 = [generator@ui/generator/issue-57084.rs:11:5: 11:12 (#0)] { f: move _1 };
        return;
    }
}

fn with::{closure#0}(_1: Pin<&mut [generator@ui/generator/issue-57084.rs:11:5: 11:12]>, _2: ()) -> GeneratorState<(), ()> {
    debug f => ((*(_1.0: &mut [generator@ui/generator/issue-57084.rs:11:5: 11:12])).0: F);
    let mut _0: std::ops::GeneratorState<(), ()>;
    let mut _3: ();
    let mut _4: &F;
    let mut _5: ();
    let mut _6: ();
    let mut _7: u32;
    let mut _8: &mut [generator@ui/generator/issue-57084.rs:11:5: 11:12];
    let mut _9: &mut [generator@ui/generator/issue-57084.rs:11:5: 11:12];
    let mut _10: &mut [generator@ui/generator/issue-57084.rs:11:5: 11:12];
    let mut _11: &mut [generator@ui/generator/issue-57084.rs:11:5: 11:12];
    let mut _12: &mut [generator@ui/generator/issue-57084.rs:11:5: 11:12];

    bb0: {
        _8 = deref_copy (_1.0: &mut [generator@ui/generator/issue-57084.rs:11:5: 11:12]);
        _7 = discriminant((*_8));
        switchInt(move _7) -> [0: bb1, 2: bb5, 3: bb1, otherwise: bb6];
    }

    bb1: {
        _9 = deref_copy (_1.0: &mut [generator@ui/generator/issue-57084.rs:11:5: 11:12]);
        _4 = &((*_9).0: F);
        _5 = ();
        _3 = <F as Fn<()>>::call(move _4, move _5) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        _6 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _6);
        _10 = deref_copy (_1.0: &mut [generator@ui/generator/issue-57084.rs:11:5: 11:12]);
        discriminant((*_10)) = 3;
        return;
    }

    bb3 (cleanup): {
        _11 = deref_copy (_1.0: &mut [generator@ui/generator/issue-57084.rs:11:5: 11:12]);
        drop(((*_11).0: F)) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        _12 = deref_copy (_1.0: &mut [generator@ui/generator/issue-57084.rs:11:5: 11:12]);
        discriminant((*_12)) = 2;
        resume;
    }

    bb5: {
        assert(const false, "generator resumed after panicking") -> bb5;
    }

    bb6: {
        unreachable;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: &std::vec::Vec<i32>;
    let _2: std::vec::Vec<i32>;
    let mut _3: std::boxed::Box<[i32]>;
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: *mut u8;
    let mut _7: std::boxed::Box<[i32; 1]>;
    let _8: [generator@ui/generator/issue-57084.rs:22:5: 22:7];
    let mut _9: &&std::vec::Vec<i32>;
    let mut _10: *const [i32; 1];
    let mut _11: *const ();
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: usize;
    let mut _15: usize;
    let mut _16: bool;
    scope 1 {
        debug data => _1;
    }
    scope 2 {
    }

    bb0: {
        _4 = SizeOf([i32; 1]);
        _5 = AlignOf([i32; 1]);
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> bb1;
    }

    bb1: {
        _7 = ShallowInitBox(move _6, [i32; 1]);
        _10 = (((_7.0: std::ptr::Unique<[i32; 1]>).0: std::ptr::NonNull<[i32; 1]>).0: *const [i32; 1]);
        _11 = _10 as *const () (PtrToPtr);
        _12 = _11 as usize (Transmute);
        _13 = AlignOf(i32);
        _14 = Sub(_13, const 1_usize);
        _15 = BitAnd(_12, _14);
        _16 = Eq(_15, const 0_usize);
        assert(_16, "misaligned pointer dereference: address must be a multiple of {} but is {}", _13, _12) -> [success: bb7, unwind unreachable];
    }

    bb2: {
        _1 = &_2;
        _9 = &_1;
        _8 = [generator@ui/generator/issue-57084.rs:22:5: 22:7 (#0)] { data: move _9 };
        drop(_8) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        drop(_2) -> bb4;
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        resume;
    }

    bb7: {
        (*_10) = [const 1_i32];
        _3 = move _7 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _2 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _3) -> bb2;
    }
}

fn main::{closure#0}(_1: Pin<&mut [generator@ui/generator/issue-57084.rs:22:5: 22:7]>, _2: ()) -> GeneratorState<(), ()> {
    debug data => (*((*(_1.0: &mut [generator@ui/generator/issue-57084.rs:22:5: 22:7])).0: &&std::vec::Vec<i32>));
    let mut _0: std::ops::GeneratorState<(), ()>;
    let _3: impl std::ops::Generator<Yield = (), Return = ()>;
    let mut _4: [closure@ui/generator/issue-57084.rs:23:28: 23:35];
    let mut _5: ();
    let mut _6: &&std::vec::Vec<i32>;
    let mut _7: u32;
    let mut _8: &mut [generator@ui/generator/issue-57084.rs:22:5: 22:7];
    let mut _9: &mut [generator@ui/generator/issue-57084.rs:22:5: 22:7];
    let mut _10: &mut [generator@ui/generator/issue-57084.rs:22:5: 22:7];
    let mut _11: &mut [generator@ui/generator/issue-57084.rs:22:5: 22:7];
    scope 1 {
        debug _to_pin => _3;
    }

    bb0: {
        _8 = deref_copy (_1.0: &mut [generator@ui/generator/issue-57084.rs:22:5: 22:7]);
        _7 = discriminant((*_8));
        switchInt(move _7) -> [0: bb1, 2: bb4, 3: bb2, otherwise: bb5];
    }

    bb1: {
        _9 = deref_copy (_1.0: &mut [generator@ui/generator/issue-57084.rs:22:5: 22:7]);
        _6 = deref_copy ((*_9).0: &&std::vec::Vec<i32>);
        _4 = [closure@ui/generator/issue-57084.rs:23:28: 23:35] { data: (*_6) };
        _3 = with::<[closure@ui/generator/issue-57084.rs:23:28: 23:35]>(move _4) -> [return: bb6, unwind: bb3];
    }

    bb2: {
        _5 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _5);
        _10 = deref_copy (_1.0: &mut [generator@ui/generator/issue-57084.rs:22:5: 22:7]);
        discriminant((*_10)) = 3;
        return;
    }

    bb3 (cleanup): {
        _11 = deref_copy (_1.0: &mut [generator@ui/generator/issue-57084.rs:22:5: 22:7]);
        discriminant((*_11)) = 2;
        resume;
    }

    bb4: {
        assert(const false, "generator resumed after panicking") -> bb4;
    }

    bb5: {
        unreachable;
    }

    bb6: {
        goto -> bb2;
    }
}

fn main::{closure#0}::{closure#0}(_1: &[closure@ui/generator/issue-57084.rs:23:28: 23:35]) -> () {
    debug data => ((*_1).0: &std::vec::Vec<i32>);
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 2];
    let _6: [&str; 2];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &&std::vec::Vec<i32>;

    bb0: {
        _6 = [const "", const "\n"];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _11 = &((*_1).0: &std::vec::Vec<i32>);
        _10 = core::fmt::rt::Argument::<'_>::new_pointer::<&Vec<i32>>(_11) -> bb1;
    }

    bb1: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb2;
    }

    bb2: {
        _2 = _print(move _3) -> bb3;
    }

    bb3: {
        return;
    }
}
