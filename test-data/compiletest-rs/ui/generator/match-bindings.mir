// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main::{closure#0}(_1: Pin<&mut [generator@ui/generator/match-bindings.rs:12:5: 12:7]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>;
    let mut _3: bool;
    let mut _4: Enum;
    let mut _5: std::string::String;
    let mut _6: isize;
    let mut _8: ();
    let mut _9: u32;
    let mut _10: &mut [generator@ui/generator/match-bindings.rs:12:5: 12:7];
    let mut _11: &mut [generator@ui/generator/match-bindings.rs:12:5: 12:7];
    let mut _12: &mut [generator@ui/generator/match-bindings.rs:12:5: 12:7];
    scope 1 {
        let _7: std::string::String;
        scope 2 {
            debug _var => _7;
        }
    }

    bb0: {
        _10 = deref_copy (_1.0: &mut [generator@ui/generator/match-bindings.rs:12:5: 12:7]);
        _9 = discriminant((*_10));
        switchInt(move _9) -> [0: bb1, 2: bb8, 3: bb1, otherwise: bb4];
    }

    bb1: {
        _3 = const true;
        switchInt(_3) -> [0: bb6, otherwise: bb2];
    }

    bb2: {
        _5 = String::new() -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _4 = Enum::A(move _5);
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb5, 1: bb6, otherwise: bb4];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = move ((_4 as A).0: std::string::String);
        drop(_7) -> [return: bb6, unwind: bb7];
    }

    bb6: {
        _8 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _8);
        _11 = deref_copy (_1.0: &mut [generator@ui/generator/match-bindings.rs:12:5: 12:7]);
        discriminant((*_11)) = 3;
        return;
    }

    bb7 (cleanup): {
        _12 = deref_copy (_1.0: &mut [generator@ui/generator/match-bindings.rs:12:5: 12:7]);
        discriminant((*_12)) = 2;
        resume;
    }

    bb8: {
        assert(const false, "generator resumed after panicking") -> bb8;
    }
}

fn Enum::A(_1: String) -> Enum {
    let mut _0: Enum;

    bb0: {
        _0 = Enum::A(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Enum::A(_1: String) -> Enum {
    let mut _0: Enum;

    bb0: {
        _0 = Enum::A(move _1);
        return;
    }
}
