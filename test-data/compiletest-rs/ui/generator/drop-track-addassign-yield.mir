// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> () {
    let mut _0: ();
    let _1: [static generator@ui/generator/drop-track-addassign-yield.rs:10:14: 10:23];
    scope 1 {
        debug _y => _1;
        let _2: [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23];
        scope 2 {
            debug _z => _2;
        }
    }

    bb0: {
        _1 = [generator@ui/generator/drop-track-addassign-yield.rs:10:14: 10:23 (#0)];
        _2 = [generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23 (#0)];
        drop(_2) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_1) -> bb2;
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn foo::{closure#0}(_1: Pin<&mut [static generator@ui/generator/drop-track-addassign-yield.rs:10:14: 10:23]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>;
    let mut _3: &mut i32;
    let mut _4: ();
    let mut _5: ();
    let mut _6: u32;
    let mut _7: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:10:14: 10:23];
    let mut _8: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:10:14: 10:23];
    let mut _9: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:10:14: 10:23];
    let mut _10: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:10:14: 10:23];
    let mut _11: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:10:14: 10:23];
    let mut _12: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:10:14: 10:23];
    let mut _13: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:10:14: 10:23];
    let mut _14: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:10:14: 10:23];
    let mut _15: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:10:14: 10:23];
    let mut _16: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:10:14: 10:23];
    let mut _17: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:10:14: 10:23];
    let mut _18: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:10:14: 10:23];
    scope 1 {
        debug x => (((*(_1.0: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:10:14: 10:23])) as variant#3).0: &mut i32);
    }

    bb0: {
        _7 = deref_copy (_1.0: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:10:14: 10:23]);
        _6 = discriminant((*_7));
        switchInt(move _6) -> [0: bb1, 1: bb7, 2: bb6, 3: bb5, otherwise: bb8];
    }

    bb1: {
        _8 = deref_copy (_1.0: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:10:14: 10:23]);
        (((*_8) as variant#3).1: i32) = const 0_i32;
        _9 = deref_copy (_1.0: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:10:14: 10:23]);
        _10 = deref_copy (_1.0: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:10:14: 10:23]);
        (((*_9) as variant#3).0: &mut i32) = &mut (((*_10) as variant#3).1: i32);
        _11 = deref_copy (_1.0: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:10:14: 10:23]);
        (((*_11) as variant#3).3: std::string::String) = String::new() -> [return: bb2, unwind: bb4];
    }

    bb2: {
        _12 = deref_copy (_1.0: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:10:14: 10:23]);
        (((*_12) as variant#3).2: i32) = const 0_i32;
        _4 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _4);
        _13 = deref_copy (_1.0: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:10:14: 10:23]);
        discriminant((*_13)) = 3;
        return;
    }

    bb3: {
        _5 = const ();
        _0 = GeneratorState::<(), ()>::Complete(move _5);
        _17 = deref_copy (_1.0: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:10:14: 10:23]);
        discriminant((*_17)) = 1;
        return;
    }

    bb4 (cleanup): {
        _18 = deref_copy (_1.0: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:10:14: 10:23]);
        discriminant((*_18)) = 2;
        resume;
    }

    bb5: {
        _14 = deref_copy (_1.0: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:10:14: 10:23]);
        _3 = move (((*_14) as variant#3).0: &mut i32);
        _15 = deref_copy (_1.0: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:10:14: 10:23]);
        (*_3) = Add((*_3), move (((*_15) as variant#3).2: i32));
        _16 = deref_copy (_1.0: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:10:14: 10:23]);
        drop((((*_16) as variant#3).3: std::string::String)) -> [return: bb3, unwind: bb4];
    }

    bb6: {
        assert(const false, "generator resumed after panicking") -> bb6;
    }

    bb7: {
        assert(const false, "generator resumed after completion") -> bb7;
    }

    bb8: {
        unreachable;
    }
}

fn foo::{closure#1}(_1: Pin<&mut [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>;
    let mut _3: &mut i32;
    let mut _4: &mut i32;
    let mut _5: ();
    let mut _6: ();
    let mut _7: ();
    let mut _8: u32;
    let mut _9: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23];
    let mut _10: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23];
    let mut _11: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23];
    let mut _12: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23];
    let mut _13: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23];
    let mut _14: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23];
    let mut _15: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23];
    let mut _16: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23];
    let mut _17: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23];
    let mut _18: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23];
    let mut _19: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23];
    let mut _20: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23];
    let mut _21: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23];
    let mut _22: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23];
    let mut _23: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23];
    let mut _24: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23];
    let mut _25: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23];
    let mut _26: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23];
    let mut _27: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23];
    let mut _28: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23];
    let mut _29: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23];
    let mut _30: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23];
    scope 1 {
        debug x => (((*(_1.0: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23])) as variant#3).0: &mut i32);
        scope 2 {
            debug inner => (((*(_1.0: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23])) as variant#3).4: &mut i32);
        }
    }

    bb0: {
        _9 = deref_copy (_1.0: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23]);
        _8 = discriminant((*_9));
        switchInt(move _8) -> [0: bb1, 1: bb11, 2: bb10, 3: bb8, 4: bb9, otherwise: bb12];
    }

    bb1: {
        _10 = deref_copy (_1.0: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23]);
        (((*_10) as variant#3).1: i32) = const 0_i32;
        _11 = deref_copy (_1.0: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23]);
        _12 = deref_copy (_1.0: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23]);
        (((*_11) as variant#3).0: &mut i32) = &mut (((*_12) as variant#3).1: i32);
        _13 = deref_copy (_1.0: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23]);
        (((*_13) as variant#3).3: std::string::String) = String::new() -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _14 = deref_copy (_1.0: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23]);
        (((*_14) as variant#3).2: i32) = const 2_i32;
        _15 = deref_copy (_1.0: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23]);
        (((*_15) as variant#3).5: i32) = const 1_i32;
        _16 = deref_copy (_1.0: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23]);
        _17 = deref_copy (_1.0: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23]);
        (((*_16) as variant#3).4: &mut i32) = &mut (((*_17) as variant#3).5: i32);
        _18 = deref_copy (_1.0: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23]);
        (((*_18) as variant#3).7: std::string::String) = String::new() -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _19 = deref_copy (_1.0: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23]);
        (((*_19) as variant#3).6: i32) = const 1_i32;
        _5 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _5);
        _20 = deref_copy (_1.0: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23]);
        discriminant((*_20)) = 3;
        return;
    }

    bb4: {
        _6 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _6);
        _24 = deref_copy (_1.0: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23]);
        discriminant((*_24)) = 4;
        return;
    }

    bb5: {
        _7 = const ();
        _0 = GeneratorState::<(), ()>::Complete(move _7);
        _28 = deref_copy (_1.0: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23]);
        discriminant((*_28)) = 1;
        return;
    }

    bb6 (cleanup): {
        _29 = deref_copy (_1.0: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23]);
        drop((((*_29) as variant#3).3: std::string::String)) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        _30 = deref_copy (_1.0: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23]);
        discriminant((*_30)) = 2;
        resume;
    }

    bb8: {
        _21 = deref_copy (_1.0: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23]);
        _4 = move (((*_21) as variant#3).4: &mut i32);
        _22 = deref_copy (_1.0: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23]);
        (*_4) = Add((*_4), move (((*_22) as variant#3).6: i32));
        _23 = deref_copy (_1.0: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23]);
        drop((((*_23) as variant#3).7: std::string::String)) -> [return: bb4, unwind: bb6];
    }

    bb9: {
        _25 = deref_copy (_1.0: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23]);
        _3 = move (((*_25) as variant#3).0: &mut i32);
        _26 = deref_copy (_1.0: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23]);
        (*_3) = Add((*_3), move (((*_26) as variant#3).2: i32));
        _27 = deref_copy (_1.0: &mut [static generator@ui/generator/drop-track-addassign-yield.rs:21:14: 21:23]);
        drop((((*_27) as variant#3).3: std::string::String)) -> [return: bb5, unwind: bb7];
    }

    bb10: {
        assert(const false, "generator resumed after panicking") -> bb10;
    }

    bb11: {
        assert(const false, "generator resumed after completion") -> bb11;
    }

    bb12: {
        unreachable;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        _0 = foo() -> bb1;
    }

    bb1: {
        return;
    }
}
