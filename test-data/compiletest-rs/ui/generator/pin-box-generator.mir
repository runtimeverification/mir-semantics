// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn assert_generator(_1: G) -> () {
    let mut _0: ();

    bb0: {
        drop(_1) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: [static generator@ui/generator/pin-box-generator.rs:11:22: 11:31];
    let _3: ();
    let mut _4: std::pin::Pin<std::boxed::Box<[static generator@ui/generator/pin-box-generator.rs:12:31: 12:40]>>;
    let mut _5: [static generator@ui/generator/pin-box-generator.rs:12:31: 12:40];

    bb0: {
        _2 = [generator@ui/generator/pin-box-generator.rs:11:22: 11:31 (#0)];
        _1 = assert_generator::<[static generator@ui/generator/pin-box-generator.rs:11:22: 11:31]>(move _2) -> bb1;
    }

    bb1: {
        _5 = [generator@ui/generator/pin-box-generator.rs:12:31: 12:40 (#0)];
        _4 = Box::<[static generator@ui/generator/pin-box-generator.rs:12:31: 12:40]>::pin(move _5) -> bb2;
    }

    bb2: {
        _3 = assert_generator::<Pin<Box<[static generator@ui/generator/pin-box-generator.rs:12:31: 12:40]>>>(move _4) -> bb3;
    }

    bb3: {
        return;
    }
}

fn main::{closure#0}(_1: Pin<&mut [static generator@ui/generator/pin-box-generator.rs:11:22: 11:31]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>;
    let mut _3: ();
    let mut _4: u32;
    let mut _5: &mut [static generator@ui/generator/pin-box-generator.rs:11:22: 11:31];
    let mut _6: &mut [static generator@ui/generator/pin-box-generator.rs:11:22: 11:31];
    let mut _7: &mut [static generator@ui/generator/pin-box-generator.rs:11:22: 11:31];

    bb0: {
        _5 = deref_copy (_1.0: &mut [static generator@ui/generator/pin-box-generator.rs:11:22: 11:31]);
        _4 = discriminant((*_5));
        switchInt(move _4) -> [0: bb1, 1: bb3, 3: bb2, otherwise: bb4];
    }

    bb1: {
        _3 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _3);
        _6 = deref_copy (_1.0: &mut [static generator@ui/generator/pin-box-generator.rs:11:22: 11:31]);
        discriminant((*_6)) = 3;
        return;
    }

    bb2: {
        _0 = GeneratorState::<(), ()>::Complete(move _2);
        _7 = deref_copy (_1.0: &mut [static generator@ui/generator/pin-box-generator.rs:11:22: 11:31]);
        discriminant((*_7)) = 1;
        return;
    }

    bb3: {
        assert(const false, "generator resumed after completion") -> bb3;
    }

    bb4: {
        unreachable;
    }
}

fn main::{closure#1}(_1: Pin<&mut [static generator@ui/generator/pin-box-generator.rs:12:31: 12:40]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>;
    let mut _3: ();
    let mut _4: u32;
    let mut _5: &mut [static generator@ui/generator/pin-box-generator.rs:12:31: 12:40];
    let mut _6: &mut [static generator@ui/generator/pin-box-generator.rs:12:31: 12:40];
    let mut _7: &mut [static generator@ui/generator/pin-box-generator.rs:12:31: 12:40];

    bb0: {
        _5 = deref_copy (_1.0: &mut [static generator@ui/generator/pin-box-generator.rs:12:31: 12:40]);
        _4 = discriminant((*_5));
        switchInt(move _4) -> [0: bb1, 1: bb3, 3: bb2, otherwise: bb4];
    }

    bb1: {
        _3 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _3);
        _6 = deref_copy (_1.0: &mut [static generator@ui/generator/pin-box-generator.rs:12:31: 12:40]);
        discriminant((*_6)) = 3;
        return;
    }

    bb2: {
        _0 = GeneratorState::<(), ()>::Complete(move _2);
        _7 = deref_copy (_1.0: &mut [static generator@ui/generator/pin-box-generator.rs:12:31: 12:40]);
        discriminant((*_7)) = 1;
        return;
    }

    bb3: {
        assert(const false, "generator resumed after completion") -> bb3;
    }

    bb4: {
        unreachable;
    }
}
