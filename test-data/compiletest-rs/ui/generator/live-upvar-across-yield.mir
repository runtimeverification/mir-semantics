// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: [closure@ui/generator/live-upvar-across-yield.rs:9:13: 9:16];
    let mut _3: &[closure@ui/generator/live-upvar-across-yield.rs:9:13: 9:16];
    let _4: std::ops::GeneratorState<(), ()>;
    let mut _5: std::pin::Pin<&mut [generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19]>;
    let mut _6: &mut [generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19];
    scope 1 {
        debug b => const ZeroSized: [closure@ui/generator/live-upvar-across-yield.rs:9:13: 9:16];
        let mut _2: [generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19];
        scope 2 {
            debug a => _2;
        }
    }

    bb0: {
        _3 = &_1;
        _2 = [generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19 (#0)] { b: move _3 };
        _6 = &mut _2;
        _5 = Pin::<&mut [generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19]>::new(move _6) -> bb1;
    }

    bb1: {
        _4 = <[generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19] as Generator>::resume(move _5, const ()) -> bb2;
    }

    bb2: {
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/generator/live-upvar-across-yield.rs:9:13: 9:16], _2: ()) -> i32 {
    let mut _0: i32;

    bb0: {
        _0 = const 3_i32;
        return;
    }
}

fn main::{closure#1}(_1: Pin<&mut [generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19]>, _2: ()) -> GeneratorState<(), ()> {
    debug b => (*((*(_1.0: &mut [generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19])).0: &[closure@ui/generator/live-upvar-across-yield.rs:9:13: 9:16]));
    let mut _0: std::ops::GeneratorState<(), ()>;
    let _3: i32;
    let mut _4: ((),);
    let mut _5: ();
    let mut _6: &[closure@ui/generator/live-upvar-across-yield.rs:9:13: 9:16];
    let mut _7: ();
    let mut _8: u32;
    let mut _9: &mut [generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19];
    let mut _10: &mut [generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19];
    let mut _11: &mut [generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19];
    let mut _12: &mut [generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19];
    let mut _13: &mut [generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19];
    let mut _14: &mut [generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19];
    let mut _15: &mut [generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19];

    bb0: {
        _9 = deref_copy (_1.0: &mut [generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19]);
        _8 = discriminant((*_9));
        switchInt(move _8) -> [0: bb1, 1: bb6, 2: bb5, 3: bb4, otherwise: bb7];
    }

    bb1: {
        _10 = deref_copy (_1.0: &mut [generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19]);
        _6 = deref_copy ((*_10).0: &[closure@ui/generator/live-upvar-across-yield.rs:9:13: 9:16]);
        _11 = deref_copy (_1.0: &mut [generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19]);
        (((*_11) as variant#3).0: &[closure@ui/generator/live-upvar-across-yield.rs:9:13: 9:16]) = _6;
        _5 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _5);
        _12 = deref_copy (_1.0: &mut [generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19]);
        discriminant((*_12)) = 3;
        return;
    }

    bb2: {
        _7 = const ();
        _0 = GeneratorState::<(), ()>::Complete(move _7);
        _14 = deref_copy (_1.0: &mut [generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19]);
        discriminant((*_14)) = 1;
        return;
    }

    bb3 (cleanup): {
        _15 = deref_copy (_1.0: &mut [generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19]);
        discriminant((*_15)) = 2;
        resume;
    }

    bb4: {
        _4 = (move _2,);
        _13 = deref_copy (_1.0: &mut [generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19]);
        _3 = <[closure@ui/generator/live-upvar-across-yield.rs:9:13: 9:16] as Fn<((),)>>::call(move (((*_13) as variant#3).0: &[closure@ui/generator/live-upvar-across-yield.rs:9:13: 9:16]), move _4) -> [return: bb2, unwind: bb3];
    }

    bb5: {
        assert(const false, "generator resumed after panicking") -> bb5;
    }

    bb6: {
        assert(const false, "generator resumed after completion") -> bb6;
    }

    bb7: {
        unreachable;
    }
}
