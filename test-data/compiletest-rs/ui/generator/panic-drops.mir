// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static A: AtomicUsize = {
    let mut _0: std::sync::atomic::AtomicUsize;

    bb0: {
        ConstEvalCounter;
        _0 = AtomicUsize::new(const 0_usize) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/generator/panic-drops.rs:16:1: 16:16>::drop(_1: &mut B) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: usize;
    let _3: &std::sync::atomic::AtomicUsize;
    let mut _4: std::sync::atomic::Ordering;

    bb0: {
        _3 = const {alloc1: &AtomicUsize};
        _4 = SeqCst;
        _2 = AtomicUsize::fetch_add(_3, const 1_usize, move _4) -> bb1;
    }

    bb1: {
        return;
    }
}

alloc1 (static: A, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         â”‚ ........
}

fn bool_true() -> bool {
    let mut _0: bool;

    bb0: {
        _0 = const true;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _2: (&usize, &usize);
    let mut _3: &usize;
    let _4: usize;
    let _5: &std::sync::atomic::AtomicUsize;
    let mut _6: std::sync::atomic::Ordering;
    let mut _7: &usize;
    let _8: usize;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: usize;
    let mut _14: usize;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _19: std::panic::AssertUnwindSafe<[closure@ui/generator/panic-drops.rs:37:59: 37:61]>;
    let mut _20: [closure@ui/generator/panic-drops.rs:37:59: 37:61];
    let mut _21: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21];
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: &std::result::Result<std::ops::GeneratorState<(), ()>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _25: !;
    let mut _26: (&usize, &usize);
    let mut _27: &usize;
    let _28: usize;
    let _29: &std::sync::atomic::AtomicUsize;
    let mut _30: std::sync::atomic::Ordering;
    let mut _31: &usize;
    let _32: usize;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: usize;
    let mut _38: usize;
    let _40: !;
    let mut _41: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _43: (&usize, &usize);
    let mut _44: &usize;
    let _45: usize;
    let _46: &std::sync::atomic::AtomicUsize;
    let mut _47: std::sync::atomic::Ordering;
    let mut _48: &usize;
    let _49: usize;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: usize;
    let mut _55: usize;
    let _57: !;
    let mut _58: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _60: std::panic::AssertUnwindSafe<[closure@ui/generator/panic-drops.rs:52:59: 52:61]>;
    let mut _61: [closure@ui/generator/panic-drops.rs:52:59: 52:61];
    let mut _62: &mut [generator@ui/generator/panic-drops.rs:43:19: 43:21];
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: &std::result::Result<std::ops::GeneratorState<(), ()>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _66: !;
    let mut _67: (&usize, &usize);
    let mut _68: &usize;
    let _69: usize;
    let _70: &std::sync::atomic::AtomicUsize;
    let mut _71: std::sync::atomic::Ordering;
    let mut _72: &usize;
    let _73: usize;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: usize;
    let mut _79: usize;
    let _81: !;
    let mut _82: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug b => const B;
        let mut _1: [generator@ui/generator/panic-drops.rs:28:19: 28:21];
        scope 2 {
            debug foo => _1;
            let _9: &usize;
            let _10: &usize;
            let _18: std::result::Result<std::ops::GeneratorState<(), ()>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
            scope 3 {
                debug left_val => _9;
                debug right_val => _10;
                let _15: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _15;
                }
            }
            scope 5 {
                debug res => _18;
                let _33: &usize;
                let _34: &usize;
                let mut _42: [generator@ui/generator/panic-drops.rs:43:19: 43:21];
                scope 6 {
                    debug left_val => _33;
                    debug right_val => _34;
                    let _39: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _39;
                    }
                }
                scope 8 {
                    debug foo => _42;
                    let _50: &usize;
                    let _51: &usize;
                    let _59: std::result::Result<std::ops::GeneratorState<(), ()>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
                    scope 9 {
                        debug left_val => _50;
                        debug right_val => _51;
                        let _56: core::panicking::AssertKind;
                        scope 10 {
                            debug kind => _56;
                        }
                    }
                    scope 11 {
                        debug res => _59;
                        let _74: &usize;
                        let _75: &usize;
                        scope 12 {
                            debug left_val => _74;
                            debug right_val => _75;
                            let _80: core::panicking::AssertKind;
                            scope 13 {
                                debug kind => _80;
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = [generator@ui/generator/panic-drops.rs:28:19: 28:21 (#0)] { b: const B };
        _5 = const {alloc1: &AtomicUsize};
        _6 = SeqCst;
        _4 = AtomicUsize::load(_5, move _6) -> [return: bb1, unwind: bb26];
    }

    bb1: {
        _3 = &_4;
        _8 = const 0_usize;
        _7 = &_8;
        _2 = (move _3, move _7);
        _9 = (_2.0: &usize);
        _10 = (_2.1: &usize);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<usize, usize>(move _15, _9, _10, move _17) -> bb26;
    }

    bb3: {
        _21 = &mut _1;
        _20 = [closure@ui/generator/panic-drops.rs:37:59: 37:61] { foo: move _21 };
        _19 = AssertUnwindSafe::<[closure@ui/generator/panic-drops.rs:37:59: 37:61]>(move _20);
        _18 = catch_unwind::<AssertUnwindSafe<[closure@ui/generator/panic-drops.rs:37:59: 37:61]>, GeneratorState<(), ()>>(move _19) -> [return: bb4, unwind: bb26];
    }

    bb4: {
        _24 = &_18;
        _23 = Result::<GeneratorState<(), ()>, Box<dyn Any + Send>>::is_err(move _24) -> [return: bb5, unwind: bb25];
    }

    bb5: {
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _25 = core::panicking::panic(const "assertion failed: res.is_err()") -> bb25;
    }

    bb7: {
        _29 = const {alloc1: &AtomicUsize};
        _30 = SeqCst;
        _28 = AtomicUsize::load(_29, move _30) -> [return: bb8, unwind: bb25];
    }

    bb8: {
        _27 = &_28;
        _32 = const 1_usize;
        _31 = &_32;
        _26 = (move _27, move _31);
        _33 = (_26.0: &usize);
        _34 = (_26.1: &usize);
        _37 = (*_33);
        _38 = (*_34);
        _36 = Eq(move _37, move _38);
        _35 = Not(move _36);
        switchInt(move _35) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _39 = core::panicking::AssertKind::Eq;
        _41 = Option::<Arguments<'_>>::None;
        _40 = core::panicking::assert_failed::<usize, usize>(move _39, _33, _34, move _41) -> bb25;
    }

    bb10: {
        _42 = [generator@ui/generator/panic-drops.rs:43:19: 43:21 (#0)];
        _46 = const {alloc1: &AtomicUsize};
        _47 = SeqCst;
        _45 = AtomicUsize::load(_46, move _47) -> [return: bb11, unwind: bb25];
    }

    bb11: {
        _44 = &_45;
        _49 = const 1_usize;
        _48 = &_49;
        _43 = (move _44, move _48);
        _50 = (_43.0: &usize);
        _51 = (_43.1: &usize);
        _54 = (*_50);
        _55 = (*_51);
        _53 = Eq(move _54, move _55);
        _52 = Not(move _53);
        switchInt(move _52) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _56 = core::panicking::AssertKind::Eq;
        _58 = Option::<Arguments<'_>>::None;
        _57 = core::panicking::assert_failed::<usize, usize>(move _56, _50, _51, move _58) -> bb25;
    }

    bb13: {
        _62 = &mut _42;
        _61 = [closure@ui/generator/panic-drops.rs:52:59: 52:61] { foo: move _62 };
        _60 = AssertUnwindSafe::<[closure@ui/generator/panic-drops.rs:52:59: 52:61]>(move _61);
        _59 = catch_unwind::<AssertUnwindSafe<[closure@ui/generator/panic-drops.rs:52:59: 52:61]>, GeneratorState<(), ()>>(move _60) -> [return: bb14, unwind: bb25];
    }

    bb14: {
        _65 = &_59;
        _64 = Result::<GeneratorState<(), ()>, Box<dyn Any + Send>>::is_err(move _65) -> [return: bb15, unwind: bb24];
    }

    bb15: {
        _63 = Not(move _64);
        switchInt(move _63) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _66 = core::panicking::panic(const "assertion failed: res.is_err()") -> bb24;
    }

    bb17: {
        _70 = const {alloc1: &AtomicUsize};
        _71 = SeqCst;
        _69 = AtomicUsize::load(_70, move _71) -> [return: bb18, unwind: bb24];
    }

    bb18: {
        _68 = &_69;
        _73 = const 1_usize;
        _72 = &_73;
        _67 = (move _68, move _72);
        _74 = (_67.0: &usize);
        _75 = (_67.1: &usize);
        _78 = (*_74);
        _79 = (*_75);
        _77 = Eq(move _78, move _79);
        _76 = Not(move _77);
        switchInt(move _76) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _80 = core::panicking::AssertKind::Eq;
        _82 = Option::<Arguments<'_>>::None;
        _81 = core::panicking::assert_failed::<usize, usize>(move _80, _74, _75, move _82) -> bb24;
    }

    bb20: {
        drop(_59) -> [return: bb21, unwind: bb25];
    }

    bb21: {
        drop(_18) -> [return: bb22, unwind: bb26];
    }

    bb22: {
        drop(_1) -> bb23;
    }

    bb23: {
        return;
    }

    bb24 (cleanup): {
        drop(_59) -> [return: bb25, unwind terminate];
    }

    bb25 (cleanup): {
        drop(_18) -> [return: bb26, unwind terminate];
    }

    bb26 (cleanup): {
        drop(_1) -> [return: bb27, unwind terminate];
    }

    bb27 (cleanup): {
        resume;
    }
}

alloc1 (static: A, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         â”‚ ........
}

fn main::{closure#0}(_1: Pin<&mut [generator@ui/generator/panic-drops.rs:28:19: 28:21]>, _2: ()) -> GeneratorState<(), ()> {
    debug b => ((*(_1.0: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21])).0: B);
    let mut _0: std::ops::GeneratorState<(), ()>;
    let mut _3: bool;
    let mut _4: !;
    let _5: ();
    let mut _6: B;
    let mut _7: ();
    let mut _8: bool;
    let mut _9: ();
    let mut _10: u32;
    let mut _11: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21];
    let mut _12: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21];
    let mut _13: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21];
    let mut _14: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21];
    let mut _15: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21];
    let mut _16: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21];

    bb0: {
        _11 = deref_copy (_1.0: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21]);
        _10 = discriminant((*_11));
        switchInt(move _10) -> [0: bb1, 1: bb11, 2: bb10, 3: bb9, otherwise: bb12];
    }

    bb1: {
        _8 = const false;
        _8 = const true;
        _3 = bool_true() -> [return: bb2, unwind: bb8];
    }

    bb2: {
        switchInt(move _3) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _4 = begin_panic::<&str>(const "explicit panic") -> bb8;
    }

    bb4: {
        _8 = const false;
        _12 = deref_copy (_1.0: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21]);
        _6 = move ((*_12).0: B);
        _5 = std::mem::drop::<B>(move _6) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        _7 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _7);
        _13 = deref_copy (_1.0: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21]);
        discriminant((*_13)) = 3;
        return;
    }

    bb6 (cleanup): {
        _16 = deref_copy (_1.0: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21]);
        discriminant((*_16)) = 2;
        resume;
    }

    bb7 (cleanup): {
        _15 = deref_copy (_1.0: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21]);
        drop(((*_15).0: B)) -> [return: bb6, unwind terminate];
    }

    bb8 (cleanup): {
        switchInt(_8) -> [0: bb6, otherwise: bb7];
    }

    bb9: {
        _9 = const ();
        _0 = GeneratorState::<(), ()>::Complete(move _9);
        _14 = deref_copy (_1.0: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21]);
        discriminant((*_14)) = 1;
        return;
    }

    bb10: {
        assert(const false, "generator resumed after panicking") -> bb10;
    }

    bb11: {
        assert(const false, "generator resumed after completion") -> bb11;
    }

    bb12: {
        unreachable;
    }
}

fn main::{closure#1}(_1: &mut [closure@ui/generator/panic-drops.rs:37:59: 37:61]) -> GeneratorState<(), ()> {
    debug foo => (*((*_1).0: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21]));
    let mut _0: std::ops::GeneratorState<(), ()>;
    let mut _2: std::pin::Pin<&mut [generator@ui/generator/panic-drops.rs:28:19: 28:21]>;
    let mut _3: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21];

    bb0: {
        _3 = deref_copy ((*_1).0: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21]);
        _2 = Pin::<&mut [generator@ui/generator/panic-drops.rs:28:19: 28:21]>::new(_3) -> bb1;
    }

    bb1: {
        _0 = <[generator@ui/generator/panic-drops.rs:28:19: 28:21] as Generator>::resume(move _2, const ()) -> bb2;
    }

    bb2: {
        return;
    }
}

fn main::{closure#2}(_1: Pin<&mut [generator@ui/generator/panic-drops.rs:43:19: 43:21]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>;
    let mut _3: bool;
    let mut _4: !;
    let _5: ();
    let mut _6: B;
    let mut _7: ();
    let mut _8: ();
    let mut _9: u32;
    let mut _10: &mut [generator@ui/generator/panic-drops.rs:43:19: 43:21];
    let mut _11: &mut [generator@ui/generator/panic-drops.rs:43:19: 43:21];
    let mut _12: &mut [generator@ui/generator/panic-drops.rs:43:19: 43:21];
    let mut _13: &mut [generator@ui/generator/panic-drops.rs:43:19: 43:21];

    bb0: {
        _10 = deref_copy (_1.0: &mut [generator@ui/generator/panic-drops.rs:43:19: 43:21]);
        _9 = discriminant((*_10));
        switchInt(move _9) -> [0: bb1, 1: bb9, 2: bb8, 3: bb7, otherwise: bb10];
    }

    bb1: {
        _3 = bool_true() -> [return: bb2, unwind: bb6];
    }

    bb2: {
        switchInt(move _3) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _4 = begin_panic::<&str>(const "explicit panic") -> bb6;
    }

    bb4: {
        _6 = B;
        _5 = std::mem::drop::<B>(move _6) -> [return: bb5, unwind: bb6];
    }

    bb5: {
        _7 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _7);
        _11 = deref_copy (_1.0: &mut [generator@ui/generator/panic-drops.rs:43:19: 43:21]);
        discriminant((*_11)) = 3;
        return;
    }

    bb6 (cleanup): {
        _13 = deref_copy (_1.0: &mut [generator@ui/generator/panic-drops.rs:43:19: 43:21]);
        discriminant((*_13)) = 2;
        resume;
    }

    bb7: {
        _8 = const ();
        _0 = GeneratorState::<(), ()>::Complete(move _8);
        _12 = deref_copy (_1.0: &mut [generator@ui/generator/panic-drops.rs:43:19: 43:21]);
        discriminant((*_12)) = 1;
        return;
    }

    bb8: {
        assert(const false, "generator resumed after panicking") -> bb8;
    }

    bb9: {
        assert(const false, "generator resumed after completion") -> bb9;
    }

    bb10: {
        unreachable;
    }
}

fn main::{closure#3}(_1: &mut [closure@ui/generator/panic-drops.rs:52:59: 52:61]) -> GeneratorState<(), ()> {
    debug foo => (*((*_1).0: &mut [generator@ui/generator/panic-drops.rs:43:19: 43:21]));
    let mut _0: std::ops::GeneratorState<(), ()>;
    let mut _2: std::pin::Pin<&mut [generator@ui/generator/panic-drops.rs:43:19: 43:21]>;
    let mut _3: &mut [generator@ui/generator/panic-drops.rs:43:19: 43:21];

    bb0: {
        _3 = deref_copy ((*_1).0: &mut [generator@ui/generator/panic-drops.rs:43:19: 43:21]);
        _2 = Pin::<&mut [generator@ui/generator/panic-drops.rs:43:19: 43:21]>::new(_3) -> bb1;
    }

    bb1: {
        _0 = <[generator@ui/generator/panic-drops.rs:43:19: 43:21] as Generator>::resume(move _2, const ()) -> bb2;
    }

    bb2: {
        return;
    }
}
