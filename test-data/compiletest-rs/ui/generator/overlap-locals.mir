// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: [generator@ui/generator/overlap-locals.rs:6:13: 6:15];
    let mut _2: (&usize, &usize);
    let mut _3: &usize;
    let _4: usize;
    let mut _5: &usize;
    let _6: usize;
    let _7: &[generator@ui/generator/overlap-locals.rs:6:13: 6:15];
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug a => _1;
        let _8: &usize;
        let _9: &usize;
        scope 2 {
            debug left_val => _8;
            debug right_val => _9;
            let _14: core::panicking::AssertKind;
            scope 3 {
                debug kind => _14;
            }
        }
    }

    bb0: {
        _1 = [generator@ui/generator/overlap-locals.rs:6:13: 6:15 (#0)];
        _4 = const 8_usize;
        _3 = &_4;
        _7 = &_1;
        _6 = std::mem::size_of_val::<[generator@ui/generator/overlap-locals.rs:6:13: 6:15]>(_7) -> bb1;
    }

    bb1: {
        _5 = &_6;
        _2 = (move _3, move _5);
        _8 = (_2.0: &usize);
        _9 = (_2.1: &usize);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<usize, usize>(move _14, _8, _9, move _16);
    }

    bb3: {
        return;
    }
}

fn main::{closure#0}(_1: Pin<&mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>;
    let mut _3: ();
    let _4: ();
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let _7: &[&str; 2];
    let _8: [&str; 2];
    let mut _9: &[core::fmt::rt::Argument<'_>];
    let _10: &[core::fmt::rt::Argument<'_>; 1];
    let _11: [core::fmt::rt::Argument<'_>; 1];
    let mut _12: core::fmt::rt::Argument<'_>;
    let _13: &i32;
    let mut _14: ();
    let _15: ();
    let mut _16: std::fmt::Arguments<'_>;
    let mut _17: &[&str];
    let _18: &[&str; 2];
    let _19: [&str; 2];
    let mut _20: &[core::fmt::rt::Argument<'_>];
    let _21: &[core::fmt::rt::Argument<'_>; 1];
    let _22: [core::fmt::rt::Argument<'_>; 1];
    let mut _23: core::fmt::rt::Argument<'_>;
    let _24: &i32;
    let mut _25: ();
    let _26: ();
    let mut _27: std::fmt::Arguments<'_>;
    let mut _28: &[&str];
    let _29: &[&str; 2];
    let _30: [&str; 2];
    let mut _31: &[core::fmt::rt::Argument<'_>];
    let _32: &[core::fmt::rt::Argument<'_>; 1];
    let _33: [core::fmt::rt::Argument<'_>; 1];
    let mut _34: core::fmt::rt::Argument<'_>;
    let _35: &i32;
    let mut _36: ();
    let _37: ();
    let mut _38: std::fmt::Arguments<'_>;
    let mut _39: &[&str];
    let _40: &[&str; 2];
    let _41: [&str; 2];
    let mut _42: &[core::fmt::rt::Argument<'_>];
    let _43: &[core::fmt::rt::Argument<'_>; 1];
    let _44: [core::fmt::rt::Argument<'_>; 1];
    let mut _45: core::fmt::rt::Argument<'_>;
    let _46: &i32;
    let mut _47: ();
    let mut _48: u32;
    let mut _49: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15];
    let mut _50: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15];
    let mut _51: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15];
    let mut _52: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15];
    let mut _53: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15];
    let mut _54: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15];
    let mut _55: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15];
    let mut _56: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15];
    let mut _57: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15];
    let mut _58: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15];
    let mut _59: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15];
    let mut _60: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15];
    let mut _61: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15];
    let mut _62: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15];
    let mut _63: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15];
    scope 1 {
        debug w => (((*(_1.0: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15])) as variant#3).0: i32);
    }
    scope 2 {
        debug x => (((*(_1.0: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15])) as variant#4).0: i32);
    }
    scope 3 {
        debug y => (((*(_1.0: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15])) as variant#5).0: i32);
    }
    scope 4 {
        debug z => (((*(_1.0: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15])) as variant#6).0: i32);
    }

    bb0: {
        _49 = deref_copy (_1.0: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15]);
        _48 = discriminant((*_49));
        switchInt(move _48) -> [0: bb1, 1: bb20, 2: bb19, 3: bb15, 4: bb16, 5: bb17, 6: bb18, otherwise: bb21];
    }

    bb1: {
        _50 = deref_copy (_1.0: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15]);
        (((*_50) as variant#3).0: i32) = const 4_i32;
        _3 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _3);
        _51 = deref_copy (_1.0: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15]);
        discriminant((*_51)) = 3;
        return;
    }

    bb2: {
        _11 = [move _12];
        _10 = &_11;
        _9 = _10 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _5 = Arguments::<'_>::new_v1(move _6, move _9) -> [return: bb3, unwind: bb14];
    }

    bb3: {
        _4 = _print(move _5) -> [return: bb4, unwind: bb14];
    }

    bb4: {
        _53 = deref_copy (_1.0: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15]);
        (((*_53) as variant#4).0: i32) = const 5_i32;
        _14 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _14);
        _54 = deref_copy (_1.0: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15]);
        discriminant((*_54)) = 4;
        return;
    }

    bb5: {
        _22 = [move _23];
        _21 = &_22;
        _20 = _21 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _16 = Arguments::<'_>::new_v1(move _17, move _20) -> [return: bb6, unwind: bb14];
    }

    bb6: {
        _15 = _print(move _16) -> [return: bb7, unwind: bb14];
    }

    bb7: {
        _56 = deref_copy (_1.0: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15]);
        (((*_56) as variant#5).0: i32) = const 6_i32;
        _25 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _25);
        _57 = deref_copy (_1.0: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15]);
        discriminant((*_57)) = 5;
        return;
    }

    bb8: {
        _33 = [move _34];
        _32 = &_33;
        _31 = _32 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _27 = Arguments::<'_>::new_v1(move _28, move _31) -> [return: bb9, unwind: bb14];
    }

    bb9: {
        _26 = _print(move _27) -> [return: bb10, unwind: bb14];
    }

    bb10: {
        _59 = deref_copy (_1.0: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15]);
        (((*_59) as variant#6).0: i32) = const 7_i32;
        _36 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _36);
        _60 = deref_copy (_1.0: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15]);
        discriminant((*_60)) = 6;
        return;
    }

    bb11: {
        _44 = [move _45];
        _43 = &_44;
        _42 = _43 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _38 = Arguments::<'_>::new_v1(move _39, move _42) -> [return: bb12, unwind: bb14];
    }

    bb12: {
        _37 = _print(move _38) -> [return: bb13, unwind: bb14];
    }

    bb13: {
        _47 = const ();
        _0 = GeneratorState::<(), ()>::Complete(move _47);
        _62 = deref_copy (_1.0: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15]);
        discriminant((*_62)) = 1;
        return;
    }

    bb14 (cleanup): {
        _63 = deref_copy (_1.0: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15]);
        discriminant((*_63)) = 2;
        resume;
    }

    bb15: {
        _8 = [const "", const "\n"];
        _7 = &_8;
        _6 = _7 as &[&str] (Pointer(Unsize));
        _52 = deref_copy (_1.0: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15]);
        _13 = &(((*_52) as variant#3).0: i32);
        _12 = core::fmt::rt::Argument::<'_>::new_debug::<i32>(_13) -> [return: bb2, unwind: bb14];
    }

    bb16: {
        _19 = [const "", const "\n"];
        _18 = &_19;
        _17 = _18 as &[&str] (Pointer(Unsize));
        _55 = deref_copy (_1.0: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15]);
        _24 = &(((*_55) as variant#4).0: i32);
        _23 = core::fmt::rt::Argument::<'_>::new_debug::<i32>(_24) -> [return: bb5, unwind: bb14];
    }

    bb17: {
        _30 = [const "", const "\n"];
        _29 = &_30;
        _28 = _29 as &[&str] (Pointer(Unsize));
        _58 = deref_copy (_1.0: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15]);
        _35 = &(((*_58) as variant#5).0: i32);
        _34 = core::fmt::rt::Argument::<'_>::new_debug::<i32>(_35) -> [return: bb8, unwind: bb14];
    }

    bb18: {
        _41 = [const "", const "\n"];
        _40 = &_41;
        _39 = _40 as &[&str] (Pointer(Unsize));
        _61 = deref_copy (_1.0: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15]);
        _46 = &(((*_61) as variant#6).0: i32);
        _45 = core::fmt::rt::Argument::<'_>::new_debug::<i32>(_46) -> [return: bb11, unwind: bb14];
    }

    bb19: {
        assert(const false, "generator resumed after panicking") -> bb19;
    }

    bb20: {
        assert(const false, "generator resumed after completion") -> bb20;
    }

    bb21: {
        unreachable;
    }
}
