// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static DROP: AtomicUsize = {
    let mut _0: std::sync::atomic::AtomicUsize;

    bb0: {
        ConstEvalCounter;
        _0 = AtomicUsize::new(const 0_usize) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/generator/resume-live-across-yield.rs:11:10: 11:19>::eq(_1: &Dropper, _2: &Dropper) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: &std::string::String;
    let mut _4: &std::string::String;

    bb0: {
        _3 = &((*_1).0: std::string::String);
        _4 = &((*_2).0: std::string::String);
        _0 = <String as PartialEq>::eq(move _3, move _4) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/generator/resume-live-across-yield.rs:11:21: 11:23>::assert_receiver_is_total_eq(_1: &Dropper) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn <impl at ui/generator/resume-live-across-yield.rs:11:25: 11:30>::fmt(_1: &Dropper, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&std::string::String;
    let _6: &std::string::String;

    bb0: {
        _3 = const "Dropper";
        _6 = &((*_1).0: std::string::String);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/generator/resume-live-across-yield.rs:14:1: 14:22>::drop(_1: &mut Dropper) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: usize;
    let _3: &std::sync::atomic::AtomicUsize;
    let mut _4: std::sync::atomic::Ordering;

    bb0: {
        _3 = const {alloc1: &AtomicUsize};
        _4 = SeqCst;
        _2 = AtomicUsize::fetch_add(_3, const 1_usize, move _4) -> bb1;
    }

    bb1: {
        return;
    }
}

alloc1 (static: DROP, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         â”‚ ........
}

fn main() -> () {
    let mut _0: ();
    let mut _1: [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25];
    let mut _3: &mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25];
    let mut _4: (&std::ops::GeneratorState<(), Dropper>, &std::ops::GeneratorState<(), Dropper>);
    let mut _5: &std::ops::GeneratorState<(), Dropper>;
    let _6: std::ops::GeneratorState<(), Dropper>;
    let mut _7: std::pin::Pin<&mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25]>;
    let mut _8: &mut std::pin::Pin<&mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25]>;
    let mut _9: Dropper;
    let mut _10: std::string::String;
    let mut _11: &std::ops::GeneratorState<(), Dropper>;
    let _12: std::ops::GeneratorState<(), Dropper>;
    let mut _15: bool;
    let mut _16: bool;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _20: (&usize, &usize);
    let mut _21: &usize;
    let _22: usize;
    let _23: &std::sync::atomic::AtomicUsize;
    let mut _24: std::sync::atomic::Ordering;
    let mut _25: &usize;
    let _26: usize;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: usize;
    let mut _32: usize;
    let _34: !;
    let mut _35: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _36: std::ops::GeneratorState<(), Dropper>;
    let mut _37: std::pin::Pin<&mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25]>;
    let mut _38: &mut std::pin::Pin<&mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25]>;
    let mut _39: Dropper;
    let mut _40: std::string::String;
    let mut _41: isize;
    let mut _43: (&usize, &usize);
    let mut _44: &usize;
    let _45: usize;
    let _46: &std::sync::atomic::AtomicUsize;
    let mut _47: std::sync::atomic::Ordering;
    let mut _48: &usize;
    let _49: usize;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: usize;
    let mut _55: usize;
    let _57: !;
    let mut _58: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _59: (&std::string::String, &&str);
    let mut _60: &std::string::String;
    let mut _61: &&str;
    let _62: &str;
    let mut _65: bool;
    let mut _66: bool;
    let _68: !;
    let mut _69: std::option::Option<std::fmt::Arguments<'_>>;
    let _70: ();
    let mut _71: Dropper;
    let mut _72: (&usize, &usize);
    let mut _73: &usize;
    let _74: usize;
    let _75: &std::sync::atomic::AtomicUsize;
    let mut _76: std::sync::atomic::Ordering;
    let mut _77: &usize;
    let _78: usize;
    let mut _81: bool;
    let mut _82: bool;
    let mut _83: usize;
    let mut _84: usize;
    let _86: !;
    let mut _87: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _88: !;
    let _89: ();
    let mut _90: std::pin::Pin<&mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25]>;
    let mut _91: (&usize, &usize);
    let mut _92: &usize;
    let _93: usize;
    let _94: &std::sync::atomic::AtomicUsize;
    let mut _95: std::sync::atomic::Ordering;
    let mut _96: &usize;
    let _97: usize;
    let mut _100: bool;
    let mut _101: bool;
    let mut _102: usize;
    let mut _103: usize;
    let _105: !;
    let mut _106: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _107: bool;
    let mut _108: bool;
    let mut _109: isize;
    scope 1 {
        debug g => _1;
        let mut _2: std::pin::Pin<&mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25]>;
        scope 2 {
            debug g => _2;
            let _13: &std::ops::GeneratorState<(), Dropper>;
            let _14: &std::ops::GeneratorState<(), Dropper>;
            let _27: &usize;
            let _28: &usize;
            let _42: Dropper;
            let _98: &usize;
            let _99: &usize;
            scope 3 {
                debug left_val => _13;
                debug right_val => _14;
                let _17: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _17;
                }
            }
            scope 5 {
                debug left_val => _27;
                debug right_val => _28;
                let _33: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _33;
                }
            }
            scope 7 {
                debug dropper => _42;
                let _50: &usize;
                let _51: &usize;
                let _63: &std::string::String;
                let _64: &&str;
                let _79: &usize;
                let _80: &usize;
                scope 8 {
                    debug left_val => _50;
                    debug right_val => _51;
                    let _56: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _56;
                    }
                }
                scope 10 {
                    debug left_val => _63;
                    debug right_val => _64;
                    let _67: core::panicking::AssertKind;
                    scope 11 {
                        debug kind => _67;
                    }
                }
                scope 12 {
                    debug left_val => _79;
                    debug right_val => _80;
                    let _85: core::panicking::AssertKind;
                    scope 13 {
                        debug kind => _85;
                    }
                }
            }
            scope 14 {
                debug left_val => _98;
                debug right_val => _99;
                let _104: core::panicking::AssertKind;
                scope 15 {
                    debug kind => _104;
                }
            }
        }
    }

    bb0: {
        _107 = const false;
        _108 = const false;
        _1 = [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25 (#0)];
        _3 = &mut _1;
        _2 = Pin::<&mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25]>::new(move _3) -> [return: bb1, unwind: bb35];
    }

    bb1: {
        _8 = &mut _2;
        _7 = Pin::<&mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25]>::as_mut(move _8) -> [return: bb2, unwind: bb35];
    }

    bb2: {
        _10 = <String as From<&str>>::from(const "Hello world!") -> [return: bb3, unwind: bb35];
    }

    bb3: {
        _9 = Dropper(move _10);
        _6 = <[generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25] as Generator<Dropper>>::resume(move _7, move _9) -> [return: bb4, unwind: bb35];
    }

    bb4: {
        _5 = &_6;
        _12 = GeneratorState::<(), Dropper>::Yielded(const ());
        _11 = &_12;
        _4 = (move _5, move _11);
        _13 = (_4.0: &std::ops::GeneratorState<(), Dropper>);
        _14 = (_4.1: &std::ops::GeneratorState<(), Dropper>);
        _16 = <GeneratorState<(), Dropper> as PartialEq>::eq(_13, _14) -> [return: bb5, unwind: bb33];
    }

    bb5: {
        _15 = Not(move _16);
        switchInt(move _15) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<GeneratorState<(), Dropper>, GeneratorState<(), Dropper>>(move _17, _13, _14, move _19) -> bb33;
    }

    bb7: {
        drop(_12) -> [return: bb8, unwind: bb34];
    }

    bb8: {
        drop(_6) -> [return: bb9, unwind: bb35];
    }

    bb9: {
        _23 = const {alloc1: &AtomicUsize};
        _24 = Acquire;
        _22 = AtomicUsize::load(_23, move _24) -> [return: bb10, unwind: bb35];
    }

    bb10: {
        _21 = &_22;
        _26 = const 0_usize;
        _25 = &_26;
        _20 = (move _21, move _25);
        _27 = (_20.0: &usize);
        _28 = (_20.1: &usize);
        _31 = (*_27);
        _32 = (*_28);
        _30 = Eq(move _31, move _32);
        _29 = Not(move _30);
        switchInt(move _29) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _33 = core::panicking::AssertKind::Eq;
        _35 = Option::<Arguments<'_>>::None;
        _34 = core::panicking::assert_failed::<usize, usize>(move _33, _27, _28, move _35) -> bb35;
    }

    bb12: {
        _38 = &mut _2;
        _37 = Pin::<&mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25]>::as_mut(move _38) -> [return: bb13, unwind: bb35];
    }

    bb13: {
        _40 = <String as From<&str>>::from(const "Number Two") -> [return: bb14, unwind: bb35];
    }

    bb14: {
        _39 = Dropper(move _40);
        _36 = <[generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25] as Generator<Dropper>>::resume(move _37, move _39) -> [return: bb15, unwind: bb35];
    }

    bb15: {
        _108 = const true;
        _41 = discriminant(_36);
        switchInt(move _41) -> [1: bb17, otherwise: bb16];
    }

    bb16: {
        _88 = core::panicking::panic(const "internal error: entered unreachable code") -> bb41;
    }

    bb17: {
        _108 = const false;
        _107 = const true;
        _42 = move ((_36 as Complete).0: Dropper);
        _46 = const {alloc1: &AtomicUsize};
        _47 = Acquire;
        _45 = AtomicUsize::load(_46, move _47) -> [return: bb18, unwind: bb38];
    }

    bb18: {
        _44 = &_45;
        _49 = const 1_usize;
        _48 = &_49;
        _43 = (move _44, move _48);
        _50 = (_43.0: &usize);
        _51 = (_43.1: &usize);
        _54 = (*_50);
        _55 = (*_51);
        _53 = Eq(move _54, move _55);
        _52 = Not(move _53);
        switchInt(move _52) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _56 = core::panicking::AssertKind::Eq;
        _58 = Option::<Arguments<'_>>::None;
        _57 = core::panicking::assert_failed::<usize, usize>(move _56, _50, _51, move _58) -> bb38;
    }

    bb20: {
        _60 = &(_42.0: std::string::String);
        _62 = const "Number Two";
        _61 = &_62;
        _59 = (move _60, move _61);
        _63 = (_59.0: &std::string::String);
        _64 = (_59.1: &&str);
        _66 = <String as PartialEq<&str>>::eq(_63, _64) -> [return: bb21, unwind: bb38];
    }

    bb21: {
        _65 = Not(move _66);
        switchInt(move _65) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        _67 = core::panicking::AssertKind::Eq;
        _69 = Option::<Arguments<'_>>::None;
        _68 = core::panicking::assert_failed::<String, &str>(move _67, _63, _64, move _69) -> bb38;
    }

    bb23: {
        _107 = const false;
        _71 = move _42;
        _70 = std::mem::drop::<Dropper>(move _71) -> [return: bb24, unwind: bb38];
    }

    bb24: {
        _75 = const {alloc1: &AtomicUsize};
        _76 = Acquire;
        _74 = AtomicUsize::load(_75, move _76) -> [return: bb25, unwind: bb38];
    }

    bb25: {
        _73 = &_74;
        _78 = const 2_usize;
        _77 = &_78;
        _72 = (move _73, move _77);
        _79 = (_72.0: &usize);
        _80 = (_72.1: &usize);
        _83 = (*_79);
        _84 = (*_80);
        _82 = Eq(move _83, move _84);
        _81 = Not(move _82);
        switchInt(move _81) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _85 = core::panicking::AssertKind::Eq;
        _87 = Option::<Arguments<'_>>::None;
        _86 = core::panicking::assert_failed::<usize, usize>(move _85, _79, _80, move _87) -> bb38;
    }

    bb27: {
        _107 = const false;
        _108 = const false;
        _90 = move _2;
        _89 = std::mem::drop::<Pin<&mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25]>>(move _90) -> [return: bb28, unwind: bb35];
    }

    bb28: {
        _94 = const {alloc1: &AtomicUsize};
        _95 = Acquire;
        _93 = AtomicUsize::load(_94, move _95) -> [return: bb29, unwind: bb35];
    }

    bb29: {
        _92 = &_93;
        _97 = const 2_usize;
        _96 = &_97;
        _91 = (move _92, move _96);
        _98 = (_91.0: &usize);
        _99 = (_91.1: &usize);
        _102 = (*_98);
        _103 = (*_99);
        _101 = Eq(move _102, move _103);
        _100 = Not(move _101);
        switchInt(move _100) -> [0: bb31, otherwise: bb30];
    }

    bb30: {
        _104 = core::panicking::AssertKind::Eq;
        _106 = Option::<Arguments<'_>>::None;
        _105 = core::panicking::assert_failed::<usize, usize>(move _104, _98, _99, move _106) -> bb35;
    }

    bb31: {
        drop(_1) -> bb32;
    }

    bb32: {
        return;
    }

    bb33 (cleanup): {
        drop(_12) -> [return: bb34, unwind terminate];
    }

    bb34 (cleanup): {
        drop(_6) -> [return: bb35, unwind terminate];
    }

    bb35 (cleanup): {
        drop(_1) -> [return: bb36, unwind terminate];
    }

    bb36 (cleanup): {
        resume;
    }

    bb37 (cleanup): {
        drop(_42) -> [return: bb41, unwind terminate];
    }

    bb38 (cleanup): {
        switchInt(_107) -> [0: bb41, otherwise: bb37];
    }

    bb39 (cleanup): {
        switchInt(_108) -> [0: bb35, otherwise: bb40];
    }

    bb40 (cleanup): {
        drop(((_36 as Complete).0: Dropper)) -> [return: bb35, unwind terminate];
    }

    bb41 (cleanup): {
        _109 = discriminant(_36);
        switchInt(move _109) -> [1: bb39, otherwise: bb35];
    }
}

alloc1 (static: DROP, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         â”‚ ........
}

fn main::{closure#0}(_1: Pin<&mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25]>, _2: Dropper) -> GeneratorState<(), Dropper> {
    debug _d => (((*(_1.0: &mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25])) as variant#3).0: Dropper);
    let mut _0: std::ops::GeneratorState<(), Dropper>;
    let mut _3: ();
    let mut _4: Dropper;
    let mut _5: u32;
    let mut _6: &mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25];
    let mut _7: &mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25];
    let mut _8: &mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25];
    let mut _9: &mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25];
    let mut _10: &mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25];
    let mut _11: &mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25];
    let mut _12: &mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25];
    let mut _13: &mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25];
    let mut _14: &mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25];
    let mut _15: &mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25];

    bb0: {
        _6 = deref_copy (_1.0: &mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25]);
        _5 = discriminant((*_6));
        switchInt(move _5) -> [0: bb1, 1: bb7, 2: bb6, 3: bb5, otherwise: bb8];
    }

    bb1: {
        _7 = deref_copy (_1.0: &mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25]);
        (((*_7) as variant#3).0: Dropper) = move _2;
        _3 = ();
        _0 = GeneratorState::<(), Dropper>::Yielded(move _3);
        _8 = deref_copy (_1.0: &mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25]);
        discriminant((*_8)) = 3;
        return;
    }

    bb2: {
        _10 = deref_copy (_1.0: &mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25]);
        (((*_10) as variant#3).0: Dropper) = move _2;
        _12 = deref_copy (_1.0: &mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25]);
        _4 = move (((*_12) as variant#3).0: Dropper);
        _0 = GeneratorState::<(), Dropper>::Complete(move _4);
        _13 = deref_copy (_1.0: &mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25]);
        discriminant((*_13)) = 1;
        return;
    }

    bb3 (cleanup): {
        _11 = deref_copy (_1.0: &mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25]);
        (((*_11) as variant#3).0: Dropper) = move _2;
        _14 = deref_copy (_1.0: &mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25]);
        drop((((*_14) as variant#3).0: Dropper)) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        _15 = deref_copy (_1.0: &mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25]);
        discriminant((*_15)) = 2;
        resume;
    }

    bb5: {
        _9 = deref_copy (_1.0: &mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25]);
        drop((((*_9) as variant#3).0: Dropper)) -> [return: bb2, unwind: bb3];
    }

    bb6: {
        assert(const false, "generator resumed after panicking") -> bb6;
    }

    bb7: {
        assert(const false, "generator resumed after completion") -> bb7;
    }

    bb8: {
        unreachable;
    }
}

fn Dropper(_1: String) -> Dropper {
    let mut _0: Dropper;

    bb0: {
        _0 = Dropper(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Dropper(_1: String) -> Dropper {
    let mut _0: Dropper;

    bb0: {
        _0 = Dropper(move _1);
        return;
    }
}
