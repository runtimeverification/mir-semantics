// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static mut A: [i32; 5] = {
    let mut _0: [i32; 5];

    bb0: {
        _0 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32];
        return;
    }
}

A::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 5_usize;
        return;
    }
}

fn is_send_sync(_1: T) -> () {
    let mut _0: ();

    bb0: {
        drop(_1) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _3: ();
    let _4: ();
    scope 1 {
        let _1: [static generator@ui/generator/static-mut-reference-across-yield.rs:15:25: 15:34];
        scope 2 {
            debug gen_index => _1;
            let _2: [static generator@ui/generator/static-mut-reference-across-yield.rs:21:25: 21:34];
            scope 3 {
                debug gen_match => _2;
            }
        }
    }

    bb0: {
        _1 = [generator@ui/generator/static-mut-reference-across-yield.rs:15:25: 15:34 (#0)];
        _2 = [generator@ui/generator/static-mut-reference-across-yield.rs:21:25: 21:34 (#0)];
        _3 = is_send_sync::<[static generator@ui/generator/static-mut-reference-across-yield.rs:15:25: 15:34]>(move _1) -> bb1;
    }

    bb1: {
        _4 = is_send_sync::<[static generator@ui/generator/static-mut-reference-across-yield.rs:21:25: 21:34]>(move _2) -> bb2;
    }

    bb2: {
        return;
    }
}

fn main::{closure#0}(_1: Pin<&mut [static generator@ui/generator/static-mut-reference-across-yield.rs:15:25: 15:34]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>;
    let _3: i32;
    let _4: usize;
    let mut _5: ();
    let mut _6: usize;
    let mut _7: bool;
    let mut _8: ();
    let mut _9: u32;
    let mut _10: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:15:25: 15:34];
    let mut _11: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:15:25: 15:34];
    let mut _12: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:15:25: 15:34];
    let mut _13: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:15:25: 15:34];
    let mut _14: *mut [i32; 5];
    let mut _15: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:15:25: 15:34];
    let mut _16: *mut [i32; 5];
    let mut _17: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:15:25: 15:34];
    let mut _18: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:15:25: 15:34];
    let mut _19: *const ();
    let mut _20: usize;
    let mut _21: usize;
    let mut _22: usize;
    let mut _23: usize;
    let mut _24: bool;
    let mut _25: *const ();
    let mut _26: usize;
    let mut _27: usize;
    let mut _28: usize;
    let mut _29: usize;
    let mut _30: bool;
    scope 1 {
        debug u => _3;
    }

    bb0: {
        _10 = deref_copy (_1.0: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:15:25: 15:34]);
        _9 = discriminant((*_10));
        switchInt(move _9) -> [0: bb1, 1: bb6, 2: bb5, 3: bb4, otherwise: bb7];
    }

    bb1: {
        _11 = deref_copy (_1.0: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:15:25: 15:34]);
        (((*_11) as variant#3).0: *mut [i32; 5]) = const {alloc1: *mut [i32; 5]};
        _5 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _5);
        _12 = deref_copy (_1.0: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:15:25: 15:34]);
        discriminant((*_12)) = 3;
        return;
    }

    bb2: {
        _15 = deref_copy (_1.0: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:15:25: 15:34]);
        _16 = deref_copy (((*_15) as variant#3).0: *mut [i32; 5]);
        _25 = _16 as *const () (PtrToPtr);
        _26 = _25 as usize (Transmute);
        _27 = AlignOf(i32);
        _28 = Sub(_27, const 1_usize);
        _29 = BitAnd(_26, _28);
        _30 = Eq(_29, const 0_usize);
        assert(_30, "misaligned pointer dereference: address must be a multiple of {} but is {}", _27, _26) -> [success: bb9, unwind unreachable];
    }

    bb3 (cleanup): {
        _18 = deref_copy (_1.0: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:15:25: 15:34]);
        discriminant((*_18)) = 2;
        resume;
    }

    bb4: {
        _4 = const 1_usize;
        _13 = deref_copy (_1.0: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:15:25: 15:34]);
        _14 = deref_copy (((*_13) as variant#3).0: *mut [i32; 5]);
        _19 = _14 as *const () (PtrToPtr);
        _20 = _19 as usize (Transmute);
        _21 = AlignOf(i32);
        _22 = Sub(_21, const 1_usize);
        _23 = BitAnd(_20, _22);
        _24 = Eq(_23, const 0_usize);
        assert(_24, "misaligned pointer dereference: address must be a multiple of {} but is {}", _21, _20) -> [success: bb8, unwind unreachable];
    }

    bb5: {
        assert(const false, "generator resumed after panicking") -> bb5;
    }

    bb6: {
        assert(const false, "generator resumed after completion") -> bb6;
    }

    bb7: {
        unreachable;
    }

    bb8: {
        _6 = const 5_usize;
        _7 = Lt(_4, _6);
        assert(move _7, "index out of bounds: the length is {} but the index is {}", move _6, _4) -> [success: bb2, unwind: bb3];
    }

    bb9: {
        _3 = (*_16)[_4];
        _8 = const ();
        _0 = GeneratorState::<(), ()>::Complete(move _8);
        _17 = deref_copy (_1.0: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:15:25: 15:34]);
        discriminant((*_17)) = 1;
        return;
    }
}

alloc1 (static: A, size: 20, align: 4) {
    0x00 │ 01 00 00 00 02 00 00 00 03 00 00 00 04 00 00 00 │ ................
    0x10 │ 05 00 00 00                                     │ ....
}

fn main::{closure#1}(_1: Pin<&mut [static generator@ui/generator/static-mut-reference-across-yield.rs:21:25: 21:34]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>;
    let _3: [i32; 5];
    let _4: &[i32; 5];
    let mut _5: bool;
    let mut _6: ();
    let mut _7: ();
    let mut _8: u32;
    let mut _9: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:21:25: 21:34];
    let mut _10: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:21:25: 21:34];
    let mut _11: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:21:25: 21:34];
    let mut _12: *mut [i32; 5];
    let mut _13: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:21:25: 21:34];
    let mut _14: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:21:25: 21:34];
    let mut _15: *mut [i32; 5];
    let mut _16: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:21:25: 21:34];
    let mut _17: *const ();
    let mut _18: usize;
    let mut _19: usize;
    let mut _20: usize;
    let mut _21: usize;
    let mut _22: bool;
    let mut _23: *const ();
    let mut _24: usize;
    let mut _25: usize;
    let mut _26: usize;
    let mut _27: usize;
    let mut _28: bool;
    scope 1 {
        debug i => _3;
        debug i => _4;
    }

    bb0: {
        _9 = deref_copy (_1.0: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:21:25: 21:34]);
        _8 = discriminant((*_9));
        switchInt(move _8) -> [0: bb1, 1: bb6, 3: bb5, otherwise: bb7];
    }

    bb1: {
        _10 = deref_copy (_1.0: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:21:25: 21:34]);
        (((*_10) as variant#3).0: *mut [i32; 5]) = const {alloc1: *mut [i32; 5]};
        _11 = deref_copy (_1.0: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:21:25: 21:34]);
        _12 = deref_copy (((*_11) as variant#3).0: *mut [i32; 5]);
        _23 = _12 as *const () (PtrToPtr);
        _24 = _23 as usize (Transmute);
        _25 = AlignOf(i32);
        _26 = Sub(_25, const 1_usize);
        _27 = BitAnd(_24, _26);
        _28 = Eq(_27, const 0_usize);
        assert(_28, "misaligned pointer dereference: address must be a multiple of {} but is {}", _25, _24) -> [success: bb9, unwind unreachable];
    }

    bb2: {
        _14 = deref_copy (_1.0: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:21:25: 21:34]);
        _15 = deref_copy (((*_14) as variant#3).0: *mut [i32; 5]);
        _17 = _15 as *const () (PtrToPtr);
        _18 = _17 as usize (Transmute);
        _19 = AlignOf(i32);
        _20 = Sub(_19, const 1_usize);
        _21 = BitAnd(_18, _20);
        _22 = Eq(_21, const 0_usize);
        assert(_22, "misaligned pointer dereference: address must be a multiple of {} but is {}", _19, _18) -> [success: bb8, unwind unreachable];
    }

    bb3: {
        _7 = ();
        goto -> bb4;
    }

    bb4: {
        _0 = GeneratorState::<(), ()>::Complete(move _7);
        _16 = deref_copy (_1.0: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:21:25: 21:34]);
        discriminant((*_16)) = 1;
        return;
    }

    bb5: {
        _5 = const true;
        switchInt(move _5) -> [0: bb3, otherwise: bb2];
    }

    bb6: {
        assert(const false, "generator resumed after completion") -> bb6;
    }

    bb7: {
        unreachable;
    }

    bb8: {
        _3 = (*_15);
        _7 = ();
        goto -> bb4;
    }

    bb9: {
        _4 = &(*_12);
        _6 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _6);
        _13 = deref_copy (_1.0: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:21:25: 21:34]);
        discriminant((*_13)) = 3;
        return;
    }
}

alloc1 (static: A, size: 20, align: 4) {
    0x00 │ 01 00 00 00 02 00 00 00 03 00 00 00 04 00 00 00 │ ................
    0x10 │ 05 00 00 00                                     │ ....
}
