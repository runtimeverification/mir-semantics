// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static A: AtomicUsize = {
    let mut _0: std::sync::atomic::AtomicUsize;

    bb0: {
        ConstEvalCounter;
        _0 = AtomicUsize::new(const 0_usize) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/generator/drop-env.rs:17:1: 17:16>::drop(_1: &mut B) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: usize;
    let _3: &std::sync::atomic::AtomicUsize;
    let mut _4: std::sync::atomic::Ordering;

    bb0: {
        _3 = const {alloc1: &AtomicUsize};
        _4 = SeqCst;
        _2 = AtomicUsize::fetch_add(_3, const 1_usize, move _4) -> bb1;
    }

    bb1: {
        return;
    }
}

alloc1 (static: A, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let _3: ();

    bb0: {
        _1 = t1() -> bb1;
    }

    bb1: {
        _2 = t2() -> bb2;
    }

    bb2: {
        _3 = t3() -> bb3;
    }

    bb3: {
        return;
    }
}

fn t1() -> () {
    let mut _0: ();
    let _3: &std::sync::atomic::AtomicUsize;
    let mut _4: std::sync::atomic::Ordering;
    let _5: ();
    let mut _6: std::ops::GeneratorState<(), ()>;
    let mut _7: std::pin::Pin<&mut [generator@ui/generator/drop-env.rs:31:19: 31:21]>;
    let mut _8: &mut [generator@ui/generator/drop-env.rs:31:19: 31:21];
    let mut _9: (&usize, &usize);
    let mut _10: &usize;
    let _11: usize;
    let _12: &std::sync::atomic::AtomicUsize;
    let mut _13: std::sync::atomic::Ordering;
    let mut _14: &usize;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: usize;
    let mut _20: usize;
    let _22: !;
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>;
    let _24: ();
    let mut _25: [generator@ui/generator/drop-env.rs:31:19: 31:21];
    let mut _26: (&usize, &usize);
    let mut _27: &usize;
    let _28: usize;
    let _29: &std::sync::atomic::AtomicUsize;
    let mut _30: std::sync::atomic::Ordering;
    let mut _31: &usize;
    let _32: usize;
    let mut _33: usize;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: usize;
    let mut _39: usize;
    let _41: !;
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _43: bool;
    scope 1 {
        debug b => const B;
        let mut _1: [generator@ui/generator/drop-env.rs:31:19: 31:21];
        scope 2 {
            debug foo => _1;
            let _2: usize;
            scope 3 {
                debug n => _2;
                let _15: &usize;
                let _16: &usize;
                let _34: &usize;
                let _35: &usize;
                scope 4 {
                    debug left_val => _15;
                    debug right_val => _16;
                    let _21: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _21;
                    }
                }
                scope 6 {
                    debug left_val => _34;
                    debug right_val => _35;
                    let _40: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _40;
                    }
                }
            }
        }
    }

    bb0: {
        _43 = const false;
        _43 = const true;
        _1 = [generator@ui/generator/drop-env.rs:31:19: 31:21 (#0)] { b: const B };
        _3 = const {alloc1: &AtomicUsize};
        _4 = SeqCst;
        _2 = AtomicUsize::load(_3, move _4) -> [return: bb1, unwind: bb14];
    }

    bb1: {
        _8 = &mut _1;
        _7 = Pin::<&mut [generator@ui/generator/drop-env.rs:31:19: 31:21]>::new(move _8) -> [return: bb2, unwind: bb14];
    }

    bb2: {
        _6 = <[generator@ui/generator/drop-env.rs:31:19: 31:21] as Generator>::resume(move _7, const ()) -> [return: bb3, unwind: bb14];
    }

    bb3: {
        _5 = std::mem::drop::<GeneratorState<(), ()>>(move _6) -> [return: bb4, unwind: bb14];
    }

    bb4: {
        _12 = const {alloc1: &AtomicUsize};
        _13 = SeqCst;
        _11 = AtomicUsize::load(_12, move _13) -> [return: bb5, unwind: bb14];
    }

    bb5: {
        _10 = &_11;
        _14 = &_2;
        _9 = (move _10, move _14);
        _15 = (_9.0: &usize);
        _16 = (_9.1: &usize);
        _19 = (*_15);
        _20 = (*_16);
        _18 = Eq(move _19, move _20);
        _17 = Not(move _18);
        switchInt(move _17) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _21 = core::panicking::AssertKind::Eq;
        _23 = Option::<Arguments<'_>>::None;
        _22 = core::panicking::assert_failed::<usize, usize>(move _21, _15, _16, move _23) -> bb14;
    }

    bb7: {
        _43 = const false;
        _25 = move _1;
        _24 = std::mem::drop::<[generator@ui/generator/drop-env.rs:31:19: 31:21]>(move _25) -> [return: bb8, unwind: bb14];
    }

    bb8: {
        _29 = const {alloc1: &AtomicUsize};
        _30 = SeqCst;
        _28 = AtomicUsize::load(_29, move _30) -> [return: bb9, unwind: bb14];
    }

    bb9: {
        _27 = &_28;
        _33 = _2;
        _32 = Add(move _33, const 1_usize);
        _31 = &_32;
        _26 = (move _27, move _31);
        _34 = (_26.0: &usize);
        _35 = (_26.1: &usize);
        _38 = (*_34);
        _39 = (*_35);
        _37 = Eq(move _38, move _39);
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _40 = core::panicking::AssertKind::Eq;
        _42 = Option::<Arguments<'_>>::None;
        _41 = core::panicking::assert_failed::<usize, usize>(move _40, _34, _35, move _42) -> bb14;
    }

    bb11: {
        _43 = const false;
        return;
    }

    bb12 (cleanup): {
        resume;
    }

    bb13 (cleanup): {
        drop(_1) -> [return: bb12, unwind terminate];
    }

    bb14 (cleanup): {
        switchInt(_43) -> [0: bb12, otherwise: bb13];
    }
}

alloc1 (static: A, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn t1::{closure#0}(_1: Pin<&mut [generator@ui/generator/drop-env.rs:31:19: 31:21]>, _2: ()) -> GeneratorState<(), ()> {
    debug b => ((*(_1.0: &mut [generator@ui/generator/drop-env.rs:31:19: 31:21])).0: B);
    let mut _0: std::ops::GeneratorState<(), ()>;
    let mut _3: ();
    let _4: ();
    let mut _5: B;
    let mut _6: ();
    let mut _7: u32;
    let mut _8: &mut [generator@ui/generator/drop-env.rs:31:19: 31:21];
    let mut _9: &mut [generator@ui/generator/drop-env.rs:31:19: 31:21];
    let mut _10: &mut [generator@ui/generator/drop-env.rs:31:19: 31:21];
    let mut _11: &mut [generator@ui/generator/drop-env.rs:31:19: 31:21];
    let mut _12: &mut [generator@ui/generator/drop-env.rs:31:19: 31:21];

    bb0: {
        _8 = deref_copy (_1.0: &mut [generator@ui/generator/drop-env.rs:31:19: 31:21]);
        _7 = discriminant((*_8));
        switchInt(move _7) -> [0: bb1, 1: bb6, 2: bb5, 3: bb4, otherwise: bb7];
    }

    bb1: {
        _3 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _3);
        _9 = deref_copy (_1.0: &mut [generator@ui/generator/drop-env.rs:31:19: 31:21]);
        discriminant((*_9)) = 3;
        return;
    }

    bb2: {
        _6 = const ();
        _0 = GeneratorState::<(), ()>::Complete(move _6);
        _11 = deref_copy (_1.0: &mut [generator@ui/generator/drop-env.rs:31:19: 31:21]);
        discriminant((*_11)) = 1;
        return;
    }

    bb3 (cleanup): {
        _12 = deref_copy (_1.0: &mut [generator@ui/generator/drop-env.rs:31:19: 31:21]);
        discriminant((*_12)) = 2;
        resume;
    }

    bb4: {
        _10 = deref_copy (_1.0: &mut [generator@ui/generator/drop-env.rs:31:19: 31:21]);
        _5 = move ((*_10).0: B);
        _4 = std::mem::drop::<B>(move _5) -> [return: bb2, unwind: bb3];
    }

    bb5: {
        assert(const false, "generator resumed after panicking") -> bb5;
    }

    bb6: {
        assert(const false, "generator resumed after completion") -> bb6;
    }

    bb7: {
        unreachable;
    }
}

fn t2() -> () {
    let mut _0: ();
    let _3: &std::sync::atomic::AtomicUsize;
    let mut _4: std::sync::atomic::Ordering;
    let _5: ();
    let mut _6: std::ops::GeneratorState<B, ()>;
    let mut _7: std::pin::Pin<&mut [generator@ui/generator/drop-env.rs:45:19: 45:21]>;
    let mut _8: &mut [generator@ui/generator/drop-env.rs:45:19: 45:21];
    let mut _9: (&usize, &usize);
    let mut _10: &usize;
    let _11: usize;
    let _12: &std::sync::atomic::AtomicUsize;
    let mut _13: std::sync::atomic::Ordering;
    let mut _14: &usize;
    let _15: usize;
    let mut _16: usize;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: usize;
    let mut _22: usize;
    let _24: !;
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>;
    let _26: ();
    let mut _27: [generator@ui/generator/drop-env.rs:45:19: 45:21];
    let mut _28: (&usize, &usize);
    let mut _29: &usize;
    let _30: usize;
    let _31: &std::sync::atomic::AtomicUsize;
    let mut _32: std::sync::atomic::Ordering;
    let mut _33: &usize;
    let _34: usize;
    let mut _35: usize;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: usize;
    let mut _41: usize;
    let _43: !;
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _45: bool;
    scope 1 {
        debug b => const B;
        let mut _1: [generator@ui/generator/drop-env.rs:45:19: 45:21];
        scope 2 {
            debug foo => _1;
            let _2: usize;
            scope 3 {
                debug n => _2;
                let _17: &usize;
                let _18: &usize;
                let _36: &usize;
                let _37: &usize;
                scope 4 {
                    debug left_val => _17;
                    debug right_val => _18;
                    let _23: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _23;
                    }
                }
                scope 6 {
                    debug left_val => _36;
                    debug right_val => _37;
                    let _42: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _42;
                    }
                }
            }
        }
    }

    bb0: {
        _45 = const false;
        _45 = const true;
        _1 = [generator@ui/generator/drop-env.rs:45:19: 45:21 (#0)] { b: const B };
        _3 = const {alloc1: &AtomicUsize};
        _4 = SeqCst;
        _2 = AtomicUsize::load(_3, move _4) -> [return: bb1, unwind: bb14];
    }

    bb1: {
        _8 = &mut _1;
        _7 = Pin::<&mut [generator@ui/generator/drop-env.rs:45:19: 45:21]>::new(move _8) -> [return: bb2, unwind: bb14];
    }

    bb2: {
        _6 = <[generator@ui/generator/drop-env.rs:45:19: 45:21] as Generator>::resume(move _7, const ()) -> [return: bb3, unwind: bb14];
    }

    bb3: {
        _5 = std::mem::drop::<GeneratorState<B, ()>>(move _6) -> [return: bb4, unwind: bb14];
    }

    bb4: {
        _12 = const {alloc1: &AtomicUsize};
        _13 = SeqCst;
        _11 = AtomicUsize::load(_12, move _13) -> [return: bb5, unwind: bb14];
    }

    bb5: {
        _10 = &_11;
        _16 = _2;
        _15 = Add(move _16, const 1_usize);
        _14 = &_15;
        _9 = (move _10, move _14);
        _17 = (_9.0: &usize);
        _18 = (_9.1: &usize);
        _21 = (*_17);
        _22 = (*_18);
        _20 = Eq(move _21, move _22);
        _19 = Not(move _20);
        switchInt(move _19) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _23 = core::panicking::AssertKind::Eq;
        _25 = Option::<Arguments<'_>>::None;
        _24 = core::panicking::assert_failed::<usize, usize>(move _23, _17, _18, move _25) -> bb14;
    }

    bb7: {
        _45 = const false;
        _27 = move _1;
        _26 = std::mem::drop::<[generator@ui/generator/drop-env.rs:45:19: 45:21]>(move _27) -> [return: bb8, unwind: bb14];
    }

    bb8: {
        _31 = const {alloc1: &AtomicUsize};
        _32 = SeqCst;
        _30 = AtomicUsize::load(_31, move _32) -> [return: bb9, unwind: bb14];
    }

    bb9: {
        _29 = &_30;
        _35 = _2;
        _34 = Add(move _35, const 1_usize);
        _33 = &_34;
        _28 = (move _29, move _33);
        _36 = (_28.0: &usize);
        _37 = (_28.1: &usize);
        _40 = (*_36);
        _41 = (*_37);
        _39 = Eq(move _40, move _41);
        _38 = Not(move _39);
        switchInt(move _38) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _42 = core::panicking::AssertKind::Eq;
        _44 = Option::<Arguments<'_>>::None;
        _43 = core::panicking::assert_failed::<usize, usize>(move _42, _36, _37, move _44) -> bb14;
    }

    bb11: {
        _45 = const false;
        return;
    }

    bb12 (cleanup): {
        resume;
    }

    bb13 (cleanup): {
        drop(_1) -> [return: bb12, unwind terminate];
    }

    bb14 (cleanup): {
        switchInt(_45) -> [0: bb12, otherwise: bb13];
    }
}

alloc1 (static: A, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn t2::{closure#0}(_1: Pin<&mut [generator@ui/generator/drop-env.rs:45:19: 45:21]>, _2: ()) -> GeneratorState<B, ()> {
    debug b => ((*(_1.0: &mut [generator@ui/generator/drop-env.rs:45:19: 45:21])).0: B);
    let mut _0: std::ops::GeneratorState<B, ()>;
    let mut _3: B;
    let mut _4: ();
    let mut _5: u32;
    let mut _6: &mut [generator@ui/generator/drop-env.rs:45:19: 45:21];
    let mut _7: &mut [generator@ui/generator/drop-env.rs:45:19: 45:21];
    let mut _8: &mut [generator@ui/generator/drop-env.rs:45:19: 45:21];
    let mut _9: &mut [generator@ui/generator/drop-env.rs:45:19: 45:21];

    bb0: {
        _6 = deref_copy (_1.0: &mut [generator@ui/generator/drop-env.rs:45:19: 45:21]);
        _5 = discriminant((*_6));
        switchInt(move _5) -> [0: bb1, 1: bb4, 2: bb3, 3: bb2, otherwise: bb5];
    }

    bb1: {
        _7 = deref_copy (_1.0: &mut [generator@ui/generator/drop-env.rs:45:19: 45:21]);
        _3 = move ((*_7).0: B);
        _0 = GeneratorState::<B, ()>::Yielded(move _3);
        _8 = deref_copy (_1.0: &mut [generator@ui/generator/drop-env.rs:45:19: 45:21]);
        discriminant((*_8)) = 3;
        return;
    }

    bb2: {
        _4 = const ();
        _0 = GeneratorState::<B, ()>::Complete(move _4);
        _9 = deref_copy (_1.0: &mut [generator@ui/generator/drop-env.rs:45:19: 45:21]);
        discriminant((*_9)) = 1;
        return;
    }

    bb3: {
        assert(const false, "generator resumed after panicking") -> bb3;
    }

    bb4: {
        assert(const false, "generator resumed after completion") -> bb4;
    }

    bb5: {
        unreachable;
    }
}

fn t3() -> () {
    let mut _0: ();
    let _3: &std::sync::atomic::AtomicUsize;
    let mut _4: std::sync::atomic::Ordering;
    let mut _5: (&usize, &usize);
    let mut _6: &usize;
    let _7: usize;
    let _8: &std::sync::atomic::AtomicUsize;
    let mut _9: std::sync::atomic::Ordering;
    let mut _10: &usize;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: usize;
    let mut _16: usize;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    let _20: ();
    let mut _21: [generator@ui/generator/drop-env.rs:58:15: 58:17];
    let mut _22: (&usize, &usize);
    let mut _23: &usize;
    let _24: usize;
    let _25: &std::sync::atomic::AtomicUsize;
    let mut _26: std::sync::atomic::Ordering;
    let mut _27: &usize;
    let _28: usize;
    let mut _29: usize;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: usize;
    let mut _35: usize;
    let _37: !;
    let mut _38: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _39: bool;
    scope 1 {
        debug b => const B;
        let _1: [generator@ui/generator/drop-env.rs:58:15: 58:17];
        scope 2 {
            debug foo => _1;
            let _2: usize;
            scope 3 {
                debug n => _2;
                let _11: &usize;
                let _12: &usize;
                let _30: &usize;
                let _31: &usize;
                scope 4 {
                    debug left_val => _11;
                    debug right_val => _12;
                    let _17: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _17;
                    }
                }
                scope 6 {
                    debug left_val => _30;
                    debug right_val => _31;
                    let _36: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _36;
                    }
                }
            }
        }
    }

    bb0: {
        _39 = const false;
        _39 = const true;
        _1 = [generator@ui/generator/drop-env.rs:58:15: 58:17 (#0)] { b: const B };
        _3 = const {alloc1: &AtomicUsize};
        _4 = SeqCst;
        _2 = AtomicUsize::load(_3, move _4) -> [return: bb1, unwind: bb11];
    }

    bb1: {
        _8 = const {alloc1: &AtomicUsize};
        _9 = SeqCst;
        _7 = AtomicUsize::load(_8, move _9) -> [return: bb2, unwind: bb11];
    }

    bb2: {
        _6 = &_7;
        _10 = &_2;
        _5 = (move _6, move _10);
        _11 = (_5.0: &usize);
        _12 = (_5.1: &usize);
        _15 = (*_11);
        _16 = (*_12);
        _14 = Eq(move _15, move _16);
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<usize, usize>(move _17, _11, _12, move _19) -> bb11;
    }

    bb4: {
        _39 = const false;
        _21 = move _1;
        _20 = std::mem::drop::<[generator@ui/generator/drop-env.rs:58:15: 58:17]>(move _21) -> [return: bb5, unwind: bb11];
    }

    bb5: {
        _25 = const {alloc1: &AtomicUsize};
        _26 = SeqCst;
        _24 = AtomicUsize::load(_25, move _26) -> [return: bb6, unwind: bb11];
    }

    bb6: {
        _23 = &_24;
        _29 = _2;
        _28 = Add(move _29, const 1_usize);
        _27 = &_28;
        _22 = (move _23, move _27);
        _30 = (_22.0: &usize);
        _31 = (_22.1: &usize);
        _34 = (*_30);
        _35 = (*_31);
        _33 = Eq(move _34, move _35);
        _32 = Not(move _33);
        switchInt(move _32) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _36 = core::panicking::AssertKind::Eq;
        _38 = Option::<Arguments<'_>>::None;
        _37 = core::panicking::assert_failed::<usize, usize>(move _36, _30, _31, move _38) -> bb11;
    }

    bb8: {
        _39 = const false;
        return;
    }

    bb9 (cleanup): {
        resume;
    }

    bb10 (cleanup): {
        drop(_1) -> [return: bb9, unwind terminate];
    }

    bb11 (cleanup): {
        switchInt(_39) -> [0: bb9, otherwise: bb10];
    }
}

alloc1 (static: A, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn t3::{closure#0}(_1: Pin<&mut [generator@ui/generator/drop-env.rs:58:15: 58:17]>, _2: ()) -> GeneratorState<(), ()> {
    debug b => ((*(_1.0: &mut [generator@ui/generator/drop-env.rs:58:15: 58:17])).0: B);
    let mut _0: std::ops::GeneratorState<(), ()>;
    let mut _3: ();
    let _4: ();
    let mut _5: B;
    let mut _6: ();
    let mut _7: u32;
    let mut _8: &mut [generator@ui/generator/drop-env.rs:58:15: 58:17];
    let mut _9: &mut [generator@ui/generator/drop-env.rs:58:15: 58:17];
    let mut _10: &mut [generator@ui/generator/drop-env.rs:58:15: 58:17];
    let mut _11: &mut [generator@ui/generator/drop-env.rs:58:15: 58:17];
    let mut _12: &mut [generator@ui/generator/drop-env.rs:58:15: 58:17];

    bb0: {
        _8 = deref_copy (_1.0: &mut [generator@ui/generator/drop-env.rs:58:15: 58:17]);
        _7 = discriminant((*_8));
        switchInt(move _7) -> [0: bb1, 1: bb6, 2: bb5, 3: bb4, otherwise: bb7];
    }

    bb1: {
        _3 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _3);
        _9 = deref_copy (_1.0: &mut [generator@ui/generator/drop-env.rs:58:15: 58:17]);
        discriminant((*_9)) = 3;
        return;
    }

    bb2: {
        _6 = const ();
        _0 = GeneratorState::<(), ()>::Complete(move _6);
        _11 = deref_copy (_1.0: &mut [generator@ui/generator/drop-env.rs:58:15: 58:17]);
        discriminant((*_11)) = 1;
        return;
    }

    bb3 (cleanup): {
        _12 = deref_copy (_1.0: &mut [generator@ui/generator/drop-env.rs:58:15: 58:17]);
        discriminant((*_12)) = 2;
        resume;
    }

    bb4: {
        _10 = deref_copy (_1.0: &mut [generator@ui/generator/drop-env.rs:58:15: 58:17]);
        _5 = move ((*_10).0: B);
        _4 = std::mem::drop::<B>(move _5) -> [return: bb2, unwind: bb3];
    }

    bb5: {
        assert(const false, "generator resumed after panicking") -> bb5;
    }

    bb6: {
        assert(const false, "generator resumed after completion") -> bb6;
    }

    bb7: {
        unreachable;
    }
}
