// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/union/union-derive-rpass.rs:12:5: 12:10>::clone(_1: &U) -> U {
    debug self => _1;
    let mut _0: U;
    scope 1 {
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn <impl at ui/union/union-derive-rpass.rs:13:5: 13:7>::assert_receiver_is_total_eq(_1: &U) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        return;
    }
}

fn <impl at ui/union/union-derive-rpass.rs:20:1: 20:21>::eq(_1: &U, _2: &U) -> bool {
    debug self => _1;
    debug rhs => _2;
    let mut _0: bool;

    bb0: {
        _0 = const true;
        return;
    }
}

fn <impl at ui/union/union-derive-rpass.rs:23:5: 23:10>::clone(_1: &W<T>) -> W<T> {
    debug self => _1;
    let mut _0: W<T>;
    scope 1 {
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn <impl at ui/union/union-derive-rpass.rs:25:5: 25:7>::assert_receiver_is_total_eq(_1: &W<T>) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn <impl at ui/union/union-derive-rpass.rs:31:1: 31:33>::eq(_1: &W<T>, _2: &W<T>) -> bool {
    debug self => _1;
    debug rhs => _2;
    let mut _0: bool;

    bb0: {
        _0 = const true;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: U;
    let mut _4: &U;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: &U;
    let mut _8: &U;
    let mut _9: !;
    let mut _12: &W<i32>;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: &W<i32>;
    let mut _16: &W<i32>;
    let mut _17: !;
    scope 1 {
        debug u => _1;
        let _2: U;
        scope 2 {
            debug u1 => _2;
            let _3: U;
            scope 3 {
                debug u2 => _3;
                let _10: W<i32>;
                scope 4 {
                    debug w => _10;
                    let _11: W<i32>;
                    scope 5 {
                        debug w1 => _11;
                    }
                }
            }
        }
    }

    bb0: {
        _1 = U { a: const 0_u16 };
        _2 = _1;
        _4 = &_1;
        _3 = <U as Clone>::clone(move _4) -> bb1;
    }

    bb1: {
        _7 = &_2;
        _8 = &_3;
        _6 = <U as PartialEq>::eq(move _7, move _8) -> bb2;
    }

    bb2: {
        _5 = Not(move _6);
        switchInt(move _5) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _9 = core::panicking::panic(const "assertion failed: u1 == u2");
    }

    bb4: {
        _10 = W::<i32> { a: const 0_i32 };
        _12 = &_10;
        _11 = <W<i32> as Clone>::clone(move _12) -> bb5;
    }

    bb5: {
        _15 = &_10;
        _16 = &_11;
        _14 = <W<i32> as PartialEq>::eq(move _15, move _16) -> bb6;
    }

    bb6: {
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _17 = core::panicking::panic(const "assertion failed: w == w1");
    }

    bb8: {
        return;
    }
}
