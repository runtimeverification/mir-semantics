// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let mut _2: &usize;
    let _3: usize;
    let mut _4: &usize;
    let _5: usize;
    let _6: &usize;
    let _7: &usize;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: usize;
    let mut _11: usize;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&usize, &usize);
    let mut _16: &usize;
    let _17: usize;
    let mut _18: &usize;
    let _19: usize;
    let _20: &usize;
    let _21: &usize;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: usize;
    let mut _25: usize;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let _29: U16;
    let mut _30: (&usize, &usize);
    let mut _31: &usize;
    let _32: usize;
    let _33: &u8;
    let mut _34: &usize;
    let _35: usize;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: usize;
    let mut _41: usize;
    let _43: !;
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _45: (&usize, &usize);
    let mut _46: &usize;
    let _47: usize;
    let _48: &u8;
    let mut _49: &usize;
    let _50: usize;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: usize;
    let mut _56: usize;
    let _58: !;
    let mut _59: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _60: (&u8, &u8);
    let mut _61: &u8;
    let mut _62: &u8;
    let _63: u8;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: u8;
    let mut _69: u8;
    let _71: !;
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _74: (&usize, &usize);
    let mut _75: &usize;
    let _76: usize;
    let _77: &u32;
    let mut _78: &usize;
    let _79: usize;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: usize;
    let mut _85: usize;
    let _87: !;
    let mut _88: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _89: (&usize, &usize);
    let mut _90: &usize;
    let _91: usize;
    let _92: &u32;
    let mut _93: &usize;
    let _94: usize;
    let mut _97: bool;
    let mut _98: bool;
    let mut _99: usize;
    let mut _100: usize;
    let _102: !;
    let mut _103: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _104: (&u32, &u32);
    let mut _105: &u32;
    let mut _106: &u32;
    let _107: u32;
    let mut _110: bool;
    let mut _111: bool;
    let mut _112: u32;
    let mut _113: u32;
    let _115: !;
    let mut _116: std::option::Option<std::fmt::Arguments<'_>>;
    let _117: ();
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }
    scope 3 {
        debug left_val => _20;
        debug right_val => _21;
        let _26: core::panicking::AssertKind;
        scope 4 {
            debug kind => _26;
        }
    }
    scope 5 {
        debug u => _29;
        let _73: U16;
        scope 6 {
            let _36: &usize;
            let _37: &usize;
            let _51: &usize;
            let _52: &usize;
            let _64: &u8;
            let _65: &u8;
            scope 7 {
                debug left_val => _36;
                debug right_val => _37;
                let _42: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _42;
                }
            }
            scope 9 {
                debug left_val => _51;
                debug right_val => _52;
                let _57: core::panicking::AssertKind;
                scope 10 {
                    debug kind => _57;
                }
            }
            scope 11 {
                debug left_val => _64;
                debug right_val => _65;
                let _70: core::panicking::AssertKind;
                scope 12 {
                    debug kind => _70;
                }
            }
        }
        scope 13 {
            debug u => _73;
            scope 14 {
                let _80: &usize;
                let _81: &usize;
                let _95: &usize;
                let _96: &usize;
                let _108: &u32;
                let _109: &u32;
                scope 15 {
                    debug left_val => _80;
                    debug right_val => _81;
                    let _86: core::panicking::AssertKind;
                    scope 16 {
                        debug kind => _86;
                    }
                }
                scope 17 {
                    debug left_val => _95;
                    debug right_val => _96;
                    let _101: core::panicking::AssertKind;
                    scope 18 {
                        debug kind => _101;
                    }
                }
                scope 19 {
                    debug left_val => _108;
                    debug right_val => _109;
                    let _114: core::panicking::AssertKind;
                    scope 20 {
                        debug kind => _114;
                    }
                }
            }
        }
    }

    bb0: {
        _3 = align_of::<U16>() -> bb1;
    }

    bb1: {
        _2 = &_3;
        _5 = const 16_usize;
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &usize);
        _7 = (_1.1: &usize);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<usize, usize>(move _12, _6, _7, move _14);
    }

    bb3: {
        _17 = std::mem::size_of::<U16>() -> bb4;
    }

    bb4: {
        _16 = &_17;
        _19 = const 16_usize;
        _18 = &_19;
        _15 = (move _16, move _18);
        _20 = (_15.0: &usize);
        _21 = (_15.1: &usize);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<usize, usize>(move _26, _20, _21, move _28);
    }

    bb6: {
        _29 = U16 { a: const 10_u8 };
        _33 = &(_29.0: u8);
        _32 = align_of_val::<u8>(_33) -> bb7;
    }

    bb7: {
        _31 = &_32;
        _35 = const 1_usize;
        _34 = &_35;
        _30 = (move _31, move _34);
        _36 = (_30.0: &usize);
        _37 = (_30.1: &usize);
        _40 = (*_36);
        _41 = (*_37);
        _39 = Eq(move _40, move _41);
        _38 = Not(move _39);
        switchInt(move _38) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _42 = core::panicking::AssertKind::Eq;
        _44 = Option::<Arguments<'_>>::None;
        _43 = core::panicking::assert_failed::<usize, usize>(move _42, _36, _37, move _44);
    }

    bb9: {
        _48 = &(_29.0: u8);
        _47 = std::mem::size_of_val::<u8>(_48) -> bb10;
    }

    bb10: {
        _46 = &_47;
        _50 = const 1_usize;
        _49 = &_50;
        _45 = (move _46, move _49);
        _51 = (_45.0: &usize);
        _52 = (_45.1: &usize);
        _55 = (*_51);
        _56 = (*_52);
        _54 = Eq(move _55, move _56);
        _53 = Not(move _54);
        switchInt(move _53) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _57 = core::panicking::AssertKind::Eq;
        _59 = Option::<Arguments<'_>>::None;
        _58 = core::panicking::assert_failed::<usize, usize>(move _57, _51, _52, move _59);
    }

    bb12: {
        _61 = &(_29.0: u8);
        _63 = const 10_u8;
        _62 = &_63;
        _60 = (move _61, move _62);
        _64 = (_60.0: &u8);
        _65 = (_60.1: &u8);
        _68 = (*_64);
        _69 = (*_65);
        _67 = Eq(move _68, move _69);
        _66 = Not(move _67);
        switchInt(move _66) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _70 = core::panicking::AssertKind::Eq;
        _72 = Option::<Arguments<'_>>::None;
        _71 = core::panicking::assert_failed::<u8, u8>(move _70, _64, _65, move _72);
    }

    bb14: {
        _73 = U16 { a: const 11_u32 };
        _77 = &(_73.1: u32);
        _76 = align_of_val::<u32>(_77) -> bb15;
    }

    bb15: {
        _75 = &_76;
        _79 = const 4_usize;
        _78 = &_79;
        _74 = (move _75, move _78);
        _80 = (_74.0: &usize);
        _81 = (_74.1: &usize);
        _84 = (*_80);
        _85 = (*_81);
        _83 = Eq(move _84, move _85);
        _82 = Not(move _83);
        switchInt(move _82) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _86 = core::panicking::AssertKind::Eq;
        _88 = Option::<Arguments<'_>>::None;
        _87 = core::panicking::assert_failed::<usize, usize>(move _86, _80, _81, move _88);
    }

    bb17: {
        _92 = &(_73.1: u32);
        _91 = std::mem::size_of_val::<u32>(_92) -> bb18;
    }

    bb18: {
        _90 = &_91;
        _94 = const 4_usize;
        _93 = &_94;
        _89 = (move _90, move _93);
        _95 = (_89.0: &usize);
        _96 = (_89.1: &usize);
        _99 = (*_95);
        _100 = (*_96);
        _98 = Eq(move _99, move _100);
        _97 = Not(move _98);
        switchInt(move _97) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _101 = core::panicking::AssertKind::Eq;
        _103 = Option::<Arguments<'_>>::None;
        _102 = core::panicking::assert_failed::<usize, usize>(move _101, _95, _96, move _103);
    }

    bb20: {
        _105 = &(_73.1: u32);
        _107 = const 11_u32;
        _106 = &_107;
        _104 = (move _105, move _106);
        _108 = (_104.0: &u32);
        _109 = (_104.1: &u32);
        _112 = (*_108);
        _113 = (*_109);
        _111 = Eq(move _112, move _113);
        _110 = Not(move _111);
        switchInt(move _110) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _114 = core::panicking::AssertKind::Eq;
        _116 = Option::<Arguments<'_>>::None;
        _115 = core::panicking::assert_failed::<u32, u32>(move _114, _108, _109, move _116);
    }

    bb22: {
        _117 = check_hybrid() -> bb23;
    }

    bb23: {
        return;
    }
}

fn hybrid::<impl at ui/union/union-align.rs:39:20: 39:25>::clone(_1: &S1) -> S1 {
    debug self => _1;
    let mut _0: hybrid::S1;
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn check_hybrid() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let mut _2: &usize;
    let _3: usize;
    let mut _4: &usize;
    let _5: usize;
    let _6: &usize;
    let _7: &usize;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: usize;
    let mut _11: usize;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&usize, &usize);
    let mut _16: &usize;
    let _17: usize;
    let mut _18: &usize;
    let _19: usize;
    let _20: &usize;
    let _21: &usize;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: usize;
    let mut _25: usize;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: (&usize, &usize);
    let mut _30: &usize;
    let _31: usize;
    let mut _32: &usize;
    let _33: usize;
    let _34: &usize;
    let _35: &usize;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: usize;
    let mut _39: usize;
    let _41: !;
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _43: (&usize, &usize);
    let mut _44: &usize;
    let _45: usize;
    let mut _46: &usize;
    let _47: usize;
    let _48: &usize;
    let _49: &usize;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: usize;
    let mut _53: usize;
    let _55: !;
    let mut _56: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _57: (&usize, &usize);
    let mut _58: &usize;
    let _59: usize;
    let mut _60: &usize;
    let _61: usize;
    let _62: &usize;
    let _63: &usize;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: usize;
    let mut _67: usize;
    let _69: !;
    let mut _70: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _71: (&usize, &usize);
    let mut _72: &usize;
    let _73: usize;
    let mut _74: &usize;
    let _75: usize;
    let _76: &usize;
    let _77: &usize;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: usize;
    let mut _81: usize;
    let _83: !;
    let mut _84: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }
    scope 3 {
        debug left_val => _20;
        debug right_val => _21;
        let _26: core::panicking::AssertKind;
        scope 4 {
            debug kind => _26;
        }
    }
    scope 5 {
        debug left_val => _34;
        debug right_val => _35;
        let _40: core::panicking::AssertKind;
        scope 6 {
            debug kind => _40;
        }
    }
    scope 7 {
        debug left_val => _48;
        debug right_val => _49;
        let _54: core::panicking::AssertKind;
        scope 8 {
            debug kind => _54;
        }
    }
    scope 9 {
        debug left_val => _62;
        debug right_val => _63;
        let _68: core::panicking::AssertKind;
        scope 10 {
            debug kind => _68;
        }
    }
    scope 11 {
        debug left_val => _76;
        debug right_val => _77;
        let _82: core::panicking::AssertKind;
        scope 12 {
            debug kind => _82;
        }
    }

    bb0: {
        _3 = align_of::<S1>() -> bb1;
    }

    bb1: {
        _2 = &_3;
        _5 = const 16_usize;
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &usize);
        _7 = (_1.1: &usize);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<usize, usize>(move _12, _6, _7, move _14);
    }

    bb3: {
        _17 = std::mem::size_of::<S1>() -> bb4;
    }

    bb4: {
        _16 = &_17;
        _19 = const 16_usize;
        _18 = &_19;
        _15 = (move _16, move _18);
        _20 = (_15.0: &usize);
        _21 = (_15.1: &usize);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<usize, usize>(move _26, _20, _21, move _28);
    }

    bb6: {
        _31 = align_of::<U>() -> bb7;
    }

    bb7: {
        _30 = &_31;
        _33 = const 32_usize;
        _32 = &_33;
        _29 = (move _30, move _32);
        _34 = (_29.0: &usize);
        _35 = (_29.1: &usize);
        _38 = (*_34);
        _39 = (*_35);
        _37 = Eq(move _38, move _39);
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _40 = core::panicking::AssertKind::Eq;
        _42 = Option::<Arguments<'_>>::None;
        _41 = core::panicking::assert_failed::<usize, usize>(move _40, _34, _35, move _42);
    }

    bb9: {
        _45 = std::mem::size_of::<U>() -> bb10;
    }

    bb10: {
        _44 = &_45;
        _47 = const 32_usize;
        _46 = &_47;
        _43 = (move _44, move _46);
        _48 = (_43.0: &usize);
        _49 = (_43.1: &usize);
        _52 = (*_48);
        _53 = (*_49);
        _51 = Eq(move _52, move _53);
        _50 = Not(move _51);
        switchInt(move _50) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _54 = core::panicking::AssertKind::Eq;
        _56 = Option::<Arguments<'_>>::None;
        _55 = core::panicking::assert_failed::<usize, usize>(move _54, _48, _49, move _56);
    }

    bb12: {
        _59 = align_of::<S2>() -> bb13;
    }

    bb13: {
        _58 = &_59;
        _61 = const 64_usize;
        _60 = &_61;
        _57 = (move _58, move _60);
        _62 = (_57.0: &usize);
        _63 = (_57.1: &usize);
        _66 = (*_62);
        _67 = (*_63);
        _65 = Eq(move _66, move _67);
        _64 = Not(move _65);
        switchInt(move _64) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _68 = core::panicking::AssertKind::Eq;
        _70 = Option::<Arguments<'_>>::None;
        _69 = core::panicking::assert_failed::<usize, usize>(move _68, _62, _63, move _70);
    }

    bb15: {
        _73 = std::mem::size_of::<S2>() -> bb16;
    }

    bb16: {
        _72 = &_73;
        _75 = const 64_usize;
        _74 = &_75;
        _71 = (move _72, move _74);
        _76 = (_71.0: &usize);
        _77 = (_71.1: &usize);
        _80 = (*_76);
        _81 = (*_77);
        _79 = Eq(move _80, move _81);
        _78 = Not(move _79);
        switchInt(move _78) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _82 = core::panicking::AssertKind::Eq;
        _84 = Option::<Arguments<'_>>::None;
        _83 = core::panicking::assert_failed::<usize, usize>(move _82, _76, _77, move _84);
    }

    bb18: {
        return;
    }
}
