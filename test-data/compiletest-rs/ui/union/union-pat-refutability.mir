// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn is_zero(_1: Value) -> bool {
    debug v => _1;
    let mut _0: bool;
    let mut _2: bool;
    let mut _3: u32;
    let mut _4: i32;
    scope 1 {
    }

    bb0: {
        _3 = discriminant((_1.0: Tag));
        switchInt(move _3) -> [0: bb1, 1: bb2, otherwise: bb4];
    }

    bb1: {
        StorageLive(_4);
        _4 = ((_1.1: U).0: i32);
        _0 = Eq(_4, const 0_i32);
        StorageDead(_4);
        goto -> bb3;
    }

    bb2: {
        _2 = Eq(const 0f32, ((_1.1: U).1: f32));
        _0 = _2;
        goto -> bb3;
    }

    bb3: {
        return;
    }

    bb4: {
        unreachable;
    }
}

fn refut(_1: W) -> () {
    debug w => _1;
    let mut _0: ();
    let mut _2: !;
    let mut _4: (&u8, &u8);
    let mut _5: &u8;
    let mut _6: &u8;
    let _7: u8;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: u8;
    let mut _13: u8;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        let _3: u8;
        scope 2 {
            debug b => _3;
            let _8: &u8;
            let _9: &u8;
            scope 3 {
                debug left_val => _8;
                debug right_val => _9;
                let _14: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _14;
                }
            }
        }
    }

    bb0: {
        switchInt((_1.0: u8)) -> [10: bb2, otherwise: bb1];
    }

    bb1: {
        _3 = (_1.1: u8);
        _5 = &_3;
        _7 = const 11_u8;
        _6 = &_7;
        _4 = (move _5, move _6);
        _8 = (_4.0: &u8);
        _9 = (_4.1: &u8);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb4, otherwise: bb3];
    }

    bb2: {
        _2 = begin_panic::<&str>(const "explicit panic");
    }

    bb3: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<u8, u8>(move _14, _8, _9, move _16);
    }

    bb4: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Value;
    let mut _2: Tag;
    let mut _3: U;
    let mut _4: (&bool, &bool);
    let mut _5: &bool;
    let _6: bool;
    let mut _7: &bool;
    let _8: bool;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: bool;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let _19: ();
    scope 1 {
        debug v => _1;
        let _9: &bool;
        let _10: &bool;
        let _18: W;
        scope 2 {
            debug left_val => _9;
            debug right_val => _10;
            let _15: core::panicking::AssertKind;
            scope 3 {
                debug kind => _15;
            }
        }
        scope 4 {
            debug w => _18;
        }
    }

    bb0: {
        _2 = Tag::I;
        _3 = U { i: const 1_i32 };
        _1 = Value { tag: move _2, u: move _3 };
        _6 = is_zero(move _1) -> bb1;
    }

    bb1: {
        _5 = &_6;
        _8 = const false;
        _7 = &_8;
        _4 = (move _5, move _7);
        _9 = (_4.0: &bool);
        _10 = (_4.1: &bool);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<bool, bool>(move _15, _9, _10, move _17);
    }

    bb3: {
        _18 = W { a: const 11_u8 };
        _19 = refut(move _18) -> bb4;
    }

    bb4: {
        return;
    }
}
