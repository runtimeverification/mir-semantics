// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/union/union-nodrop.rs:12:1: 12:23>::drop(_1: &mut NeedDrop) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

static X: () = {
    let mut _0: ();
    let mut _1: (NoDrop<NeedDrop>, ());
    let mut _2: NoDrop<NeedDrop>;
    let mut _3: std::mem::ManuallyDrop<NeedDrop>;
    let mut _4: NeedDrop;
    let mut _5: ();

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = NeedDrop;
        ConstEvalCounter;
        _3 = ManuallyDrop::<NeedDrop>::new(move _4) -> [return: bb1, unwind: bb2];
    }

    bb1: {
        StorageDead(_4);
        _2 = NoDrop::<NeedDrop> { inner: move _3 };
        StorageDead(_3);
        StorageLive(_5);
        _5 = ();
        _1 = (move _2, move _5);
        StorageDead(_5);
        StorageDead(_2);
        _0 = (_1.1: ());
        StorageDead(_1);
        return;
    }

    bb2 (cleanup): {
        resume;
    }
}

const Y: () = {
    let mut _0: ();
    let mut _1: (NoDrop<NeedDrop>, ());
    let mut _2: NoDrop<NeedDrop>;
    let mut _3: std::mem::ManuallyDrop<NeedDrop>;
    let mut _4: NeedDrop;
    let mut _5: ();

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = NeedDrop;
        ConstEvalCounter;
        _3 = ManuallyDrop::<NeedDrop>::new(move _4) -> [return: bb1, unwind: bb2];
    }

    bb1: {
        StorageDead(_4);
        _2 = NoDrop::<NeedDrop> { inner: move _3 };
        StorageDead(_3);
        StorageLive(_5);
        _5 = ();
        _1 = (move _2, move _5);
        StorageDead(_5);
        StorageDead(_2);
        _0 = (_1.1: ());
        StorageDead(_1);
        return;
    }

    bb2 (cleanup): {
        resume;
    }
}

fn _f() -> () {
    let mut _0: ();
    let mut _1: std::mem::ManuallyDrop<NeedDrop>;

    bb0: {
        _1 = ManuallyDrop::<NeedDrop>::new(const NeedDrop) -> bb1;
    }

    bb1: {
        return;
    }
}

// MIR FOR CTFE
fn _f() -> () {
    let mut _0: ();
    let mut _1: (NoDrop<NeedDrop>, ());
    let mut _2: NoDrop<NeedDrop>;
    let mut _3: std::mem::ManuallyDrop<NeedDrop>;
    let mut _4: NeedDrop;
    let mut _5: ();

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = NeedDrop;
        ConstEvalCounter;
        _3 = ManuallyDrop::<NeedDrop>::new(move _4) -> [return: bb1, unwind: bb2];
    }

    bb1: {
        StorageDead(_4);
        _2 = NoDrop::<NeedDrop> { inner: move _3 };
        StorageDead(_3);
        StorageLive(_5);
        _5 = ();
        _1 = (move _2, move _5);
        StorageDead(_5);
        StorageDead(_2);
        _0 = (_1.1: ());
        StorageDead(_1);
        return;
    }

    bb2 (cleanup): {
        resume;
    }
}

fn <impl at ui/union/union-nodrop.rs:48:1: 48:33>::drop(_1: &mut ActuallyDrop<T>) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: !;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: !;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: !;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: !;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: !;

    bb0: {
        _3 = std::mem::needs_drop::<Foo>() -> bb1;
    }

    bb1: {
        _2 = Not(move _3);
        _1 = Not(move _2);
        switchInt(move _1) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _4 = core::panicking::panic(const "assertion failed: !needs_drop::<Foo>()");
    }

    bb3: {
        _7 = std::mem::needs_drop::<NoDrop<u8>>() -> bb4;
    }

    bb4: {
        _6 = Not(move _7);
        _5 = Not(move _6);
        switchInt(move _5) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _8 = core::panicking::panic(const "assertion failed: !needs_drop::<NoDrop<u8>>()");
    }

    bb6: {
        _11 = std::mem::needs_drop::<NoDrop<Box<u8>>>() -> bb7;
    }

    bb7: {
        _10 = Not(move _11);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _12 = core::panicking::panic(const "assertion failed: !needs_drop::<NoDrop<Box<u8>>>()");
    }

    bb9: {
        _14 = std::mem::needs_drop::<Baz>() -> bb10;
    }

    bb10: {
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _15 = core::panicking::panic(const "assertion failed: needs_drop::<Baz>()");
    }

    bb12: {
        _17 = std::mem::needs_drop::<ActuallyDrop<u8>>() -> bb13;
    }

    bb13: {
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _18 = core::panicking::panic(const "assertion failed: needs_drop::<ActuallyDrop<u8>>()");
    }

    bb15: {
        _20 = std::mem::needs_drop::<ActuallyDrop<Box<u8>>>() -> bb16;
    }

    bb16: {
        _19 = Not(move _20);
        switchInt(move _19) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _21 = core::panicking::panic(const "assertion failed: needs_drop::<ActuallyDrop<Box<u8>>>()");
    }

    bb18: {
        return;
    }
}
