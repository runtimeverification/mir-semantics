// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
S::b::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

Sp1::b::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

Sp2::b::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

U::b::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

Up1::b::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

Up2::b::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

Up4c::b::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

const CS: S = {
    let mut _0: S;
    let mut _1: [u8; 3];

    bb0: {
        StorageLive(_1);
        _1 = [const 0_u8, const 0_u8, const 0_u8];
        _0 = S { a: const 0_u16, b: move _1 };
        StorageDead(_1);
        return;
    }
}

const CSP1: Sp1 = {
    let mut _0: Sp1;
    let mut _1: [u8; 3];

    bb0: {
        StorageLive(_1);
        _1 = [const 0_u8, const 0_u8, const 0_u8];
        _0 = Sp1 { a: const 0_u16, b: move _1 };
        StorageDead(_1);
        return;
    }
}

const CSP2: Sp2 = {
    let mut _0: Sp2;
    let mut _1: [u8; 3];

    bb0: {
        StorageLive(_1);
        _1 = [const 0_u8, const 0_u8, const 0_u8];
        _0 = Sp2 { a: const 0_u16, b: move _1 };
        StorageDead(_1);
        return;
    }
}

const CU: U = {
    let mut _0: U;
    let mut _1: [u8; 3];

    bb0: {
        StorageLive(_1);
        _1 = [const 0_u8, const 0_u8, const 0_u8];
        _0 = U { a: move _1 };
        StorageDead(_1);
        return;
    }
}

const CUP1: Up1 = {
    let mut _0: Up1;
    let mut _1: [u8; 3];

    bb0: {
        StorageLive(_1);
        _1 = [const 0_u8, const 0_u8, const 0_u8];
        _0 = Up1 { a: move _1 };
        StorageDead(_1);
        return;
    }
}

const CUP2: Up2 = {
    let mut _0: Up2;
    let mut _1: [u8; 3];

    bb0: {
        StorageLive(_1);
        _1 = [const 0_u8, const 0_u8, const 0_u8];
        _0 = Up2 { a: move _1 };
        StorageDead(_1);
        return;
    }
}

const CUP4C: Up4c = {
    let mut _0: Up4c;
    let mut _1: [u8; 3];

    bb0: {
        StorageLive(_1);
        _1 = [const 0_u8, const 0_u8, const 0_u8];
        _0 = Up4c { a: move _1 };
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: S;
    let mut _2: [u8; 3];
    let mut _3: (&usize, &usize);
    let mut _4: &usize;
    let _5: usize;
    let mut _6: &usize;
    let _7: usize;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&usize, &usize);
    let mut _18: &usize;
    let _19: usize;
    let _20: &S;
    let mut _21: &usize;
    let _22: usize;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: usize;
    let mut _28: usize;
    let _30: !;
    let mut _31: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _32: (&usize, &usize);
    let mut _33: &usize;
    let _34: usize;
    let _35: &S;
    let _36: S;
    let mut _37: &usize;
    let _38: usize;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: usize;
    let mut _44: usize;
    let _46: !;
    let mut _47: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _48: (&usize, &usize);
    let mut _49: &usize;
    let _50: usize;
    let mut _51: &usize;
    let _52: usize;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: usize;
    let mut _58: usize;
    let _60: !;
    let mut _61: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _62: (&usize, &usize);
    let mut _63: &usize;
    let _64: usize;
    let _65: &S;
    let mut _66: &usize;
    let _67: usize;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: usize;
    let mut _73: usize;
    let _75: !;
    let mut _76: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _77: (&usize, &usize);
    let mut _78: &usize;
    let _79: usize;
    let _80: &S;
    let _81: S;
    let mut _82: &usize;
    let _83: usize;
    let mut _86: bool;
    let mut _87: bool;
    let mut _88: usize;
    let mut _89: usize;
    let _91: !;
    let mut _92: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _94: [u8; 3];
    let mut _95: (&usize, &usize);
    let mut _96: &usize;
    let _97: usize;
    let mut _98: &usize;
    let _99: usize;
    let mut _102: bool;
    let mut _103: bool;
    let mut _104: usize;
    let mut _105: usize;
    let _107: !;
    let mut _108: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _109: (&usize, &usize);
    let mut _110: &usize;
    let _111: usize;
    let _112: &Sp1;
    let mut _113: &usize;
    let _114: usize;
    let mut _117: bool;
    let mut _118: bool;
    let mut _119: usize;
    let mut _120: usize;
    let _122: !;
    let mut _123: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _124: (&usize, &usize);
    let mut _125: &usize;
    let _126: usize;
    let _127: &Sp1;
    let _128: Sp1;
    let mut _129: &usize;
    let _130: usize;
    let mut _133: bool;
    let mut _134: bool;
    let mut _135: usize;
    let mut _136: usize;
    let _138: !;
    let mut _139: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _140: (&usize, &usize);
    let mut _141: &usize;
    let _142: usize;
    let mut _143: &usize;
    let _144: usize;
    let mut _147: bool;
    let mut _148: bool;
    let mut _149: usize;
    let mut _150: usize;
    let _152: !;
    let mut _153: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _154: (&usize, &usize);
    let mut _155: &usize;
    let _156: usize;
    let _157: &Sp1;
    let mut _158: &usize;
    let _159: usize;
    let mut _162: bool;
    let mut _163: bool;
    let mut _164: usize;
    let mut _165: usize;
    let _167: !;
    let mut _168: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _169: (&usize, &usize);
    let mut _170: &usize;
    let _171: usize;
    let _172: &Sp1;
    let _173: Sp1;
    let mut _174: &usize;
    let _175: usize;
    let mut _178: bool;
    let mut _179: bool;
    let mut _180: usize;
    let mut _181: usize;
    let _183: !;
    let mut _184: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _186: [u8; 3];
    let mut _187: (&usize, &usize);
    let mut _188: &usize;
    let _189: usize;
    let mut _190: &usize;
    let _191: usize;
    let mut _194: bool;
    let mut _195: bool;
    let mut _196: usize;
    let mut _197: usize;
    let _199: !;
    let mut _200: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _201: (&usize, &usize);
    let mut _202: &usize;
    let _203: usize;
    let _204: &Sp2;
    let mut _205: &usize;
    let _206: usize;
    let mut _209: bool;
    let mut _210: bool;
    let mut _211: usize;
    let mut _212: usize;
    let _214: !;
    let mut _215: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _216: (&usize, &usize);
    let mut _217: &usize;
    let _218: usize;
    let _219: &Sp2;
    let _220: Sp2;
    let mut _221: &usize;
    let _222: usize;
    let mut _225: bool;
    let mut _226: bool;
    let mut _227: usize;
    let mut _228: usize;
    let _230: !;
    let mut _231: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _232: (&usize, &usize);
    let mut _233: &usize;
    let _234: usize;
    let mut _235: &usize;
    let _236: usize;
    let mut _239: bool;
    let mut _240: bool;
    let mut _241: usize;
    let mut _242: usize;
    let _244: !;
    let mut _245: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _246: (&usize, &usize);
    let mut _247: &usize;
    let _248: usize;
    let _249: &Sp2;
    let mut _250: &usize;
    let _251: usize;
    let mut _254: bool;
    let mut _255: bool;
    let mut _256: usize;
    let mut _257: usize;
    let _259: !;
    let mut _260: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _261: (&usize, &usize);
    let mut _262: &usize;
    let _263: usize;
    let _264: &Sp2;
    let _265: Sp2;
    let mut _266: &usize;
    let _267: usize;
    let mut _270: bool;
    let mut _271: bool;
    let mut _272: usize;
    let mut _273: usize;
    let _275: !;
    let mut _276: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _278: [u8; 3];
    let mut _279: (&usize, &usize);
    let mut _280: &usize;
    let _281: usize;
    let mut _282: &usize;
    let _283: usize;
    let mut _286: bool;
    let mut _287: bool;
    let mut _288: usize;
    let mut _289: usize;
    let _291: !;
    let mut _292: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _293: (&usize, &usize);
    let mut _294: &usize;
    let _295: usize;
    let _296: &U;
    let mut _297: &usize;
    let _298: usize;
    let mut _301: bool;
    let mut _302: bool;
    let mut _303: usize;
    let mut _304: usize;
    let _306: !;
    let mut _307: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _308: (&usize, &usize);
    let mut _309: &usize;
    let _310: usize;
    let _311: &U;
    let _312: U;
    let mut _313: &usize;
    let _314: usize;
    let mut _317: bool;
    let mut _318: bool;
    let mut _319: usize;
    let mut _320: usize;
    let _322: !;
    let mut _323: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _324: (&usize, &usize);
    let mut _325: &usize;
    let _326: usize;
    let mut _327: &usize;
    let _328: usize;
    let mut _331: bool;
    let mut _332: bool;
    let mut _333: usize;
    let mut _334: usize;
    let _336: !;
    let mut _337: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _338: (&usize, &usize);
    let mut _339: &usize;
    let _340: usize;
    let _341: &U;
    let mut _342: &usize;
    let _343: usize;
    let mut _346: bool;
    let mut _347: bool;
    let mut _348: usize;
    let mut _349: usize;
    let _351: !;
    let mut _352: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _353: (&usize, &usize);
    let mut _354: &usize;
    let _355: usize;
    let _356: &U;
    let _357: U;
    let mut _358: &usize;
    let _359: usize;
    let mut _362: bool;
    let mut _363: bool;
    let mut _364: usize;
    let mut _365: usize;
    let _367: !;
    let mut _368: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _370: [u8; 3];
    let mut _371: (&usize, &usize);
    let mut _372: &usize;
    let _373: usize;
    let mut _374: &usize;
    let _375: usize;
    let mut _378: bool;
    let mut _379: bool;
    let mut _380: usize;
    let mut _381: usize;
    let _383: !;
    let mut _384: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _385: (&usize, &usize);
    let mut _386: &usize;
    let _387: usize;
    let _388: &Up1;
    let mut _389: &usize;
    let _390: usize;
    let mut _393: bool;
    let mut _394: bool;
    let mut _395: usize;
    let mut _396: usize;
    let _398: !;
    let mut _399: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _400: (&usize, &usize);
    let mut _401: &usize;
    let _402: usize;
    let _403: &Up1;
    let _404: Up1;
    let mut _405: &usize;
    let _406: usize;
    let mut _409: bool;
    let mut _410: bool;
    let mut _411: usize;
    let mut _412: usize;
    let _414: !;
    let mut _415: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _416: (&usize, &usize);
    let mut _417: &usize;
    let _418: usize;
    let mut _419: &usize;
    let _420: usize;
    let mut _423: bool;
    let mut _424: bool;
    let mut _425: usize;
    let mut _426: usize;
    let _428: !;
    let mut _429: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _430: (&usize, &usize);
    let mut _431: &usize;
    let _432: usize;
    let _433: &Up1;
    let mut _434: &usize;
    let _435: usize;
    let mut _438: bool;
    let mut _439: bool;
    let mut _440: usize;
    let mut _441: usize;
    let _443: !;
    let mut _444: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _445: (&usize, &usize);
    let mut _446: &usize;
    let _447: usize;
    let _448: &Up1;
    let _449: Up1;
    let mut _450: &usize;
    let _451: usize;
    let mut _454: bool;
    let mut _455: bool;
    let mut _456: usize;
    let mut _457: usize;
    let _459: !;
    let mut _460: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _462: [u8; 3];
    let mut _463: (&usize, &usize);
    let mut _464: &usize;
    let _465: usize;
    let mut _466: &usize;
    let _467: usize;
    let mut _470: bool;
    let mut _471: bool;
    let mut _472: usize;
    let mut _473: usize;
    let _475: !;
    let mut _476: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _477: (&usize, &usize);
    let mut _478: &usize;
    let _479: usize;
    let _480: &Up2;
    let mut _481: &usize;
    let _482: usize;
    let mut _485: bool;
    let mut _486: bool;
    let mut _487: usize;
    let mut _488: usize;
    let _490: !;
    let mut _491: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _492: (&usize, &usize);
    let mut _493: &usize;
    let _494: usize;
    let _495: &Up2;
    let _496: Up2;
    let mut _497: &usize;
    let _498: usize;
    let mut _501: bool;
    let mut _502: bool;
    let mut _503: usize;
    let mut _504: usize;
    let _506: !;
    let mut _507: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _508: (&usize, &usize);
    let mut _509: &usize;
    let _510: usize;
    let mut _511: &usize;
    let _512: usize;
    let mut _515: bool;
    let mut _516: bool;
    let mut _517: usize;
    let mut _518: usize;
    let _520: !;
    let mut _521: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _522: (&usize, &usize);
    let mut _523: &usize;
    let _524: usize;
    let _525: &Up2;
    let mut _526: &usize;
    let _527: usize;
    let mut _530: bool;
    let mut _531: bool;
    let mut _532: usize;
    let mut _533: usize;
    let _535: !;
    let mut _536: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _537: (&usize, &usize);
    let mut _538: &usize;
    let _539: usize;
    let _540: &Up2;
    let _541: Up2;
    let mut _542: &usize;
    let _543: usize;
    let mut _546: bool;
    let mut _547: bool;
    let mut _548: usize;
    let mut _549: usize;
    let _551: !;
    let mut _552: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _554: [u8; 3];
    let mut _555: (&usize, &usize);
    let mut _556: &usize;
    let _557: usize;
    let mut _558: &usize;
    let _559: usize;
    let mut _562: bool;
    let mut _563: bool;
    let mut _564: usize;
    let mut _565: usize;
    let _567: !;
    let mut _568: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _569: (&usize, &usize);
    let mut _570: &usize;
    let _571: usize;
    let _572: &Up4c;
    let mut _573: &usize;
    let _574: usize;
    let mut _577: bool;
    let mut _578: bool;
    let mut _579: usize;
    let mut _580: usize;
    let _582: !;
    let mut _583: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _584: (&usize, &usize);
    let mut _585: &usize;
    let _586: usize;
    let _587: &Up4c;
    let _588: Up4c;
    let mut _589: &usize;
    let _590: usize;
    let mut _593: bool;
    let mut _594: bool;
    let mut _595: usize;
    let mut _596: usize;
    let _598: !;
    let mut _599: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _600: (&usize, &usize);
    let mut _601: &usize;
    let _602: usize;
    let mut _603: &usize;
    let _604: usize;
    let mut _607: bool;
    let mut _608: bool;
    let mut _609: usize;
    let mut _610: usize;
    let _612: !;
    let mut _613: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _614: (&usize, &usize);
    let mut _615: &usize;
    let _616: usize;
    let _617: &Up4c;
    let mut _618: &usize;
    let _619: usize;
    let mut _622: bool;
    let mut _623: bool;
    let mut _624: usize;
    let mut _625: usize;
    let _627: !;
    let mut _628: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _629: (&usize, &usize);
    let mut _630: &usize;
    let _631: usize;
    let _632: &Up4c;
    let _633: Up4c;
    let mut _634: &usize;
    let _635: usize;
    let mut _638: bool;
    let mut _639: bool;
    let mut _640: usize;
    let mut _641: usize;
    let _643: !;
    let mut _644: std::option::Option<std::fmt::Arguments<'_>>;
    let _645: ();
    scope 1 {
        debug s => _1;
        let _8: &usize;
        let _9: &usize;
        let _23: &usize;
        let _24: &usize;
        let _39: &usize;
        let _40: &usize;
        let _53: &usize;
        let _54: &usize;
        let _68: &usize;
        let _69: &usize;
        let _84: &usize;
        let _85: &usize;
        let _93: Sp1;
        scope 2 {
            debug left_val => _8;
            debug right_val => _9;
            let _14: core::panicking::AssertKind;
            scope 3 {
                debug kind => _14;
            }
        }
        scope 4 {
            debug left_val => _23;
            debug right_val => _24;
            let _29: core::panicking::AssertKind;
            scope 5 {
                debug kind => _29;
            }
        }
        scope 6 {
            debug left_val => _39;
            debug right_val => _40;
            let _45: core::panicking::AssertKind;
            scope 7 {
                debug kind => _45;
            }
        }
        scope 8 {
            debug left_val => _53;
            debug right_val => _54;
            let _59: core::panicking::AssertKind;
            scope 9 {
                debug kind => _59;
            }
        }
        scope 10 {
            debug left_val => _68;
            debug right_val => _69;
            let _74: core::panicking::AssertKind;
            scope 11 {
                debug kind => _74;
            }
        }
        scope 12 {
            debug left_val => _84;
            debug right_val => _85;
            let _90: core::panicking::AssertKind;
            scope 13 {
                debug kind => _90;
            }
        }
        scope 14 {
            debug sp1 => _93;
            let _100: &usize;
            let _101: &usize;
            let _115: &usize;
            let _116: &usize;
            let _131: &usize;
            let _132: &usize;
            let _145: &usize;
            let _146: &usize;
            let _160: &usize;
            let _161: &usize;
            let _176: &usize;
            let _177: &usize;
            let _185: Sp2;
            scope 15 {
                debug left_val => _100;
                debug right_val => _101;
                let _106: core::panicking::AssertKind;
                scope 16 {
                    debug kind => _106;
                }
            }
            scope 17 {
                debug left_val => _115;
                debug right_val => _116;
                let _121: core::panicking::AssertKind;
                scope 18 {
                    debug kind => _121;
                }
            }
            scope 19 {
                debug left_val => _131;
                debug right_val => _132;
                let _137: core::panicking::AssertKind;
                scope 20 {
                    debug kind => _137;
                }
            }
            scope 21 {
                debug left_val => _145;
                debug right_val => _146;
                let _151: core::panicking::AssertKind;
                scope 22 {
                    debug kind => _151;
                }
            }
            scope 23 {
                debug left_val => _160;
                debug right_val => _161;
                let _166: core::panicking::AssertKind;
                scope 24 {
                    debug kind => _166;
                }
            }
            scope 25 {
                debug left_val => _176;
                debug right_val => _177;
                let _182: core::panicking::AssertKind;
                scope 26 {
                    debug kind => _182;
                }
            }
            scope 27 {
                debug sp2 => _185;
                let _192: &usize;
                let _193: &usize;
                let _207: &usize;
                let _208: &usize;
                let _223: &usize;
                let _224: &usize;
                let _237: &usize;
                let _238: &usize;
                let _252: &usize;
                let _253: &usize;
                let _268: &usize;
                let _269: &usize;
                let _277: U;
                scope 28 {
                    debug left_val => _192;
                    debug right_val => _193;
                    let _198: core::panicking::AssertKind;
                    scope 29 {
                        debug kind => _198;
                    }
                }
                scope 30 {
                    debug left_val => _207;
                    debug right_val => _208;
                    let _213: core::panicking::AssertKind;
                    scope 31 {
                        debug kind => _213;
                    }
                }
                scope 32 {
                    debug left_val => _223;
                    debug right_val => _224;
                    let _229: core::panicking::AssertKind;
                    scope 33 {
                        debug kind => _229;
                    }
                }
                scope 34 {
                    debug left_val => _237;
                    debug right_val => _238;
                    let _243: core::panicking::AssertKind;
                    scope 35 {
                        debug kind => _243;
                    }
                }
                scope 36 {
                    debug left_val => _252;
                    debug right_val => _253;
                    let _258: core::panicking::AssertKind;
                    scope 37 {
                        debug kind => _258;
                    }
                }
                scope 38 {
                    debug left_val => _268;
                    debug right_val => _269;
                    let _274: core::panicking::AssertKind;
                    scope 39 {
                        debug kind => _274;
                    }
                }
                scope 40 {
                    debug u => _277;
                    let _284: &usize;
                    let _285: &usize;
                    let _299: &usize;
                    let _300: &usize;
                    let _315: &usize;
                    let _316: &usize;
                    let _329: &usize;
                    let _330: &usize;
                    let _344: &usize;
                    let _345: &usize;
                    let _360: &usize;
                    let _361: &usize;
                    let _369: Up1;
                    scope 41 {
                        debug left_val => _284;
                        debug right_val => _285;
                        let _290: core::panicking::AssertKind;
                        scope 42 {
                            debug kind => _290;
                        }
                    }
                    scope 43 {
                        debug left_val => _299;
                        debug right_val => _300;
                        let _305: core::panicking::AssertKind;
                        scope 44 {
                            debug kind => _305;
                        }
                    }
                    scope 45 {
                        debug left_val => _315;
                        debug right_val => _316;
                        let _321: core::panicking::AssertKind;
                        scope 46 {
                            debug kind => _321;
                        }
                    }
                    scope 47 {
                        debug left_val => _329;
                        debug right_val => _330;
                        let _335: core::panicking::AssertKind;
                        scope 48 {
                            debug kind => _335;
                        }
                    }
                    scope 49 {
                        debug left_val => _344;
                        debug right_val => _345;
                        let _350: core::panicking::AssertKind;
                        scope 50 {
                            debug kind => _350;
                        }
                    }
                    scope 51 {
                        debug left_val => _360;
                        debug right_val => _361;
                        let _366: core::panicking::AssertKind;
                        scope 52 {
                            debug kind => _366;
                        }
                    }
                    scope 53 {
                        debug Up1 => _369;
                        let _376: &usize;
                        let _377: &usize;
                        let _391: &usize;
                        let _392: &usize;
                        let _407: &usize;
                        let _408: &usize;
                        let _421: &usize;
                        let _422: &usize;
                        let _436: &usize;
                        let _437: &usize;
                        let _452: &usize;
                        let _453: &usize;
                        let _461: Up2;
                        scope 54 {
                            debug left_val => _376;
                            debug right_val => _377;
                            let _382: core::panicking::AssertKind;
                            scope 55 {
                                debug kind => _382;
                            }
                        }
                        scope 56 {
                            debug left_val => _391;
                            debug right_val => _392;
                            let _397: core::panicking::AssertKind;
                            scope 57 {
                                debug kind => _397;
                            }
                        }
                        scope 58 {
                            debug left_val => _407;
                            debug right_val => _408;
                            let _413: core::panicking::AssertKind;
                            scope 59 {
                                debug kind => _413;
                            }
                        }
                        scope 60 {
                            debug left_val => _421;
                            debug right_val => _422;
                            let _427: core::panicking::AssertKind;
                            scope 61 {
                                debug kind => _427;
                            }
                        }
                        scope 62 {
                            debug left_val => _436;
                            debug right_val => _437;
                            let _442: core::panicking::AssertKind;
                            scope 63 {
                                debug kind => _442;
                            }
                        }
                        scope 64 {
                            debug left_val => _452;
                            debug right_val => _453;
                            let _458: core::panicking::AssertKind;
                            scope 65 {
                                debug kind => _458;
                            }
                        }
                        scope 66 {
                            debug up2 => _461;
                            let _468: &usize;
                            let _469: &usize;
                            let _483: &usize;
                            let _484: &usize;
                            let _499: &usize;
                            let _500: &usize;
                            let _513: &usize;
                            let _514: &usize;
                            let _528: &usize;
                            let _529: &usize;
                            let _544: &usize;
                            let _545: &usize;
                            let _553: Up4c;
                            scope 67 {
                                debug left_val => _468;
                                debug right_val => _469;
                                let _474: core::panicking::AssertKind;
                                scope 68 {
                                    debug kind => _474;
                                }
                            }
                            scope 69 {
                                debug left_val => _483;
                                debug right_val => _484;
                                let _489: core::panicking::AssertKind;
                                scope 70 {
                                    debug kind => _489;
                                }
                            }
                            scope 71 {
                                debug left_val => _499;
                                debug right_val => _500;
                                let _505: core::panicking::AssertKind;
                                scope 72 {
                                    debug kind => _505;
                                }
                            }
                            scope 73 {
                                debug left_val => _513;
                                debug right_val => _514;
                                let _519: core::panicking::AssertKind;
                                scope 74 {
                                    debug kind => _519;
                                }
                            }
                            scope 75 {
                                debug left_val => _528;
                                debug right_val => _529;
                                let _534: core::panicking::AssertKind;
                                scope 76 {
                                    debug kind => _534;
                                }
                            }
                            scope 77 {
                                debug left_val => _544;
                                debug right_val => _545;
                                let _550: core::panicking::AssertKind;
                                scope 78 {
                                    debug kind => _550;
                                }
                            }
                            scope 79 {
                                debug up4c => _553;
                                let _560: &usize;
                                let _561: &usize;
                                let _575: &usize;
                                let _576: &usize;
                                let _591: &usize;
                                let _592: &usize;
                                let _605: &usize;
                                let _606: &usize;
                                let _620: &usize;
                                let _621: &usize;
                                let _636: &usize;
                                let _637: &usize;
                                scope 80 {
                                    debug left_val => _560;
                                    debug right_val => _561;
                                    let _566: core::panicking::AssertKind;
                                    scope 81 {
                                        debug kind => _566;
                                    }
                                }
                                scope 82 {
                                    debug left_val => _575;
                                    debug right_val => _576;
                                    let _581: core::panicking::AssertKind;
                                    scope 83 {
                                        debug kind => _581;
                                    }
                                }
                                scope 84 {
                                    debug left_val => _591;
                                    debug right_val => _592;
                                    let _597: core::panicking::AssertKind;
                                    scope 85 {
                                        debug kind => _597;
                                    }
                                }
                                scope 86 {
                                    debug left_val => _605;
                                    debug right_val => _606;
                                    let _611: core::panicking::AssertKind;
                                    scope 87 {
                                        debug kind => _611;
                                    }
                                }
                                scope 88 {
                                    debug left_val => _620;
                                    debug right_val => _621;
                                    let _626: core::panicking::AssertKind;
                                    scope 89 {
                                        debug kind => _626;
                                    }
                                }
                                scope 90 {
                                    debug left_val => _636;
                                    debug right_val => _637;
                                    let _642: core::panicking::AssertKind;
                                    scope 91 {
                                        debug kind => _642;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = [const 0_u8, const 0_u8, const 0_u8];
        _1 = S { a: const 0_u16, b: move _2 };
        _5 = std::mem::size_of::<S>() -> bb1;
    }

    bb1: {
        _4 = &_5;
        _7 = const 6_usize;
        _6 = &_7;
        _3 = (move _4, move _6);
        _8 = (_3.0: &usize);
        _9 = (_3.1: &usize);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<usize, usize>(move _14, _8, _9, move _16);
    }

    bb3: {
        _20 = &_1;
        _19 = std::mem::size_of_val::<S>(_20) -> bb4;
    }

    bb4: {
        _18 = &_19;
        _22 = const 6_usize;
        _21 = &_22;
        _17 = (move _18, move _21);
        _23 = (_17.0: &usize);
        _24 = (_17.1: &usize);
        _27 = (*_23);
        _28 = (*_24);
        _26 = Eq(move _27, move _28);
        _25 = Not(move _26);
        switchInt(move _25) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _29 = core::panicking::AssertKind::Eq;
        _31 = Option::<Arguments<'_>>::None;
        _30 = core::panicking::assert_failed::<usize, usize>(move _29, _23, _24, move _31);
    }

    bb6: {
        _36 = const _;
        _35 = &_36;
        _34 = std::mem::size_of_val::<S>(_35) -> bb7;
    }

    bb7: {
        _33 = &_34;
        _38 = const 6_usize;
        _37 = &_38;
        _32 = (move _33, move _37);
        _39 = (_32.0: &usize);
        _40 = (_32.1: &usize);
        _43 = (*_39);
        _44 = (*_40);
        _42 = Eq(move _43, move _44);
        _41 = Not(move _42);
        switchInt(move _41) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _45 = core::panicking::AssertKind::Eq;
        _47 = Option::<Arguments<'_>>::None;
        _46 = core::panicking::assert_failed::<usize, usize>(move _45, _39, _40, move _47);
    }

    bb9: {
        _50 = align_of::<S>() -> bb10;
    }

    bb10: {
        _49 = &_50;
        _52 = const 2_usize;
        _51 = &_52;
        _48 = (move _49, move _51);
        _53 = (_48.0: &usize);
        _54 = (_48.1: &usize);
        _57 = (*_53);
        _58 = (*_54);
        _56 = Eq(move _57, move _58);
        _55 = Not(move _56);
        switchInt(move _55) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _59 = core::panicking::AssertKind::Eq;
        _61 = Option::<Arguments<'_>>::None;
        _60 = core::panicking::assert_failed::<usize, usize>(move _59, _53, _54, move _61);
    }

    bb12: {
        _65 = &_1;
        _64 = align_of_val::<S>(_65) -> bb13;
    }

    bb13: {
        _63 = &_64;
        _67 = const 2_usize;
        _66 = &_67;
        _62 = (move _63, move _66);
        _68 = (_62.0: &usize);
        _69 = (_62.1: &usize);
        _72 = (*_68);
        _73 = (*_69);
        _71 = Eq(move _72, move _73);
        _70 = Not(move _71);
        switchInt(move _70) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _74 = core::panicking::AssertKind::Eq;
        _76 = Option::<Arguments<'_>>::None;
        _75 = core::panicking::assert_failed::<usize, usize>(move _74, _68, _69, move _76);
    }

    bb15: {
        _81 = const _;
        _80 = &_81;
        _79 = align_of_val::<S>(_80) -> bb16;
    }

    bb16: {
        _78 = &_79;
        _83 = const 2_usize;
        _82 = &_83;
        _77 = (move _78, move _82);
        _84 = (_77.0: &usize);
        _85 = (_77.1: &usize);
        _88 = (*_84);
        _89 = (*_85);
        _87 = Eq(move _88, move _89);
        _86 = Not(move _87);
        switchInt(move _86) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _90 = core::panicking::AssertKind::Eq;
        _92 = Option::<Arguments<'_>>::None;
        _91 = core::panicking::assert_failed::<usize, usize>(move _90, _84, _85, move _92);
    }

    bb18: {
        _94 = [const 0_u8, const 0_u8, const 0_u8];
        _93 = Sp1 { a: const 0_u16, b: move _94 };
        _97 = std::mem::size_of::<Sp1>() -> bb19;
    }

    bb19: {
        _96 = &_97;
        _99 = const 5_usize;
        _98 = &_99;
        _95 = (move _96, move _98);
        _100 = (_95.0: &usize);
        _101 = (_95.1: &usize);
        _104 = (*_100);
        _105 = (*_101);
        _103 = Eq(move _104, move _105);
        _102 = Not(move _103);
        switchInt(move _102) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _106 = core::panicking::AssertKind::Eq;
        _108 = Option::<Arguments<'_>>::None;
        _107 = core::panicking::assert_failed::<usize, usize>(move _106, _100, _101, move _108);
    }

    bb21: {
        _112 = &_93;
        _111 = std::mem::size_of_val::<Sp1>(_112) -> bb22;
    }

    bb22: {
        _110 = &_111;
        _114 = const 5_usize;
        _113 = &_114;
        _109 = (move _110, move _113);
        _115 = (_109.0: &usize);
        _116 = (_109.1: &usize);
        _119 = (*_115);
        _120 = (*_116);
        _118 = Eq(move _119, move _120);
        _117 = Not(move _118);
        switchInt(move _117) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _121 = core::panicking::AssertKind::Eq;
        _123 = Option::<Arguments<'_>>::None;
        _122 = core::panicking::assert_failed::<usize, usize>(move _121, _115, _116, move _123);
    }

    bb24: {
        _128 = const _;
        _127 = &_128;
        _126 = std::mem::size_of_val::<Sp1>(_127) -> bb25;
    }

    bb25: {
        _125 = &_126;
        _130 = const 5_usize;
        _129 = &_130;
        _124 = (move _125, move _129);
        _131 = (_124.0: &usize);
        _132 = (_124.1: &usize);
        _135 = (*_131);
        _136 = (*_132);
        _134 = Eq(move _135, move _136);
        _133 = Not(move _134);
        switchInt(move _133) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _137 = core::panicking::AssertKind::Eq;
        _139 = Option::<Arguments<'_>>::None;
        _138 = core::panicking::assert_failed::<usize, usize>(move _137, _131, _132, move _139);
    }

    bb27: {
        _142 = align_of::<Sp1>() -> bb28;
    }

    bb28: {
        _141 = &_142;
        _144 = const 1_usize;
        _143 = &_144;
        _140 = (move _141, move _143);
        _145 = (_140.0: &usize);
        _146 = (_140.1: &usize);
        _149 = (*_145);
        _150 = (*_146);
        _148 = Eq(move _149, move _150);
        _147 = Not(move _148);
        switchInt(move _147) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _151 = core::panicking::AssertKind::Eq;
        _153 = Option::<Arguments<'_>>::None;
        _152 = core::panicking::assert_failed::<usize, usize>(move _151, _145, _146, move _153);
    }

    bb30: {
        _157 = &_93;
        _156 = align_of_val::<Sp1>(_157) -> bb31;
    }

    bb31: {
        _155 = &_156;
        _159 = const 1_usize;
        _158 = &_159;
        _154 = (move _155, move _158);
        _160 = (_154.0: &usize);
        _161 = (_154.1: &usize);
        _164 = (*_160);
        _165 = (*_161);
        _163 = Eq(move _164, move _165);
        _162 = Not(move _163);
        switchInt(move _162) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _166 = core::panicking::AssertKind::Eq;
        _168 = Option::<Arguments<'_>>::None;
        _167 = core::panicking::assert_failed::<usize, usize>(move _166, _160, _161, move _168);
    }

    bb33: {
        _173 = const _;
        _172 = &_173;
        _171 = align_of_val::<Sp1>(_172) -> bb34;
    }

    bb34: {
        _170 = &_171;
        _175 = const 1_usize;
        _174 = &_175;
        _169 = (move _170, move _174);
        _176 = (_169.0: &usize);
        _177 = (_169.1: &usize);
        _180 = (*_176);
        _181 = (*_177);
        _179 = Eq(move _180, move _181);
        _178 = Not(move _179);
        switchInt(move _178) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _182 = core::panicking::AssertKind::Eq;
        _184 = Option::<Arguments<'_>>::None;
        _183 = core::panicking::assert_failed::<usize, usize>(move _182, _176, _177, move _184);
    }

    bb36: {
        _186 = [const 0_u8, const 0_u8, const 0_u8];
        _185 = Sp2 { a: const 0_u16, b: move _186 };
        _189 = std::mem::size_of::<Sp2>() -> bb37;
    }

    bb37: {
        _188 = &_189;
        _191 = const 6_usize;
        _190 = &_191;
        _187 = (move _188, move _190);
        _192 = (_187.0: &usize);
        _193 = (_187.1: &usize);
        _196 = (*_192);
        _197 = (*_193);
        _195 = Eq(move _196, move _197);
        _194 = Not(move _195);
        switchInt(move _194) -> [0: bb39, otherwise: bb38];
    }

    bb38: {
        _198 = core::panicking::AssertKind::Eq;
        _200 = Option::<Arguments<'_>>::None;
        _199 = core::panicking::assert_failed::<usize, usize>(move _198, _192, _193, move _200);
    }

    bb39: {
        _204 = &_185;
        _203 = std::mem::size_of_val::<Sp2>(_204) -> bb40;
    }

    bb40: {
        _202 = &_203;
        _206 = const 6_usize;
        _205 = &_206;
        _201 = (move _202, move _205);
        _207 = (_201.0: &usize);
        _208 = (_201.1: &usize);
        _211 = (*_207);
        _212 = (*_208);
        _210 = Eq(move _211, move _212);
        _209 = Not(move _210);
        switchInt(move _209) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _213 = core::panicking::AssertKind::Eq;
        _215 = Option::<Arguments<'_>>::None;
        _214 = core::panicking::assert_failed::<usize, usize>(move _213, _207, _208, move _215);
    }

    bb42: {
        _220 = const _;
        _219 = &_220;
        _218 = std::mem::size_of_val::<Sp2>(_219) -> bb43;
    }

    bb43: {
        _217 = &_218;
        _222 = const 6_usize;
        _221 = &_222;
        _216 = (move _217, move _221);
        _223 = (_216.0: &usize);
        _224 = (_216.1: &usize);
        _227 = (*_223);
        _228 = (*_224);
        _226 = Eq(move _227, move _228);
        _225 = Not(move _226);
        switchInt(move _225) -> [0: bb45, otherwise: bb44];
    }

    bb44: {
        _229 = core::panicking::AssertKind::Eq;
        _231 = Option::<Arguments<'_>>::None;
        _230 = core::panicking::assert_failed::<usize, usize>(move _229, _223, _224, move _231);
    }

    bb45: {
        _234 = align_of::<Sp2>() -> bb46;
    }

    bb46: {
        _233 = &_234;
        _236 = const 2_usize;
        _235 = &_236;
        _232 = (move _233, move _235);
        _237 = (_232.0: &usize);
        _238 = (_232.1: &usize);
        _241 = (*_237);
        _242 = (*_238);
        _240 = Eq(move _241, move _242);
        _239 = Not(move _240);
        switchInt(move _239) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _243 = core::panicking::AssertKind::Eq;
        _245 = Option::<Arguments<'_>>::None;
        _244 = core::panicking::assert_failed::<usize, usize>(move _243, _237, _238, move _245);
    }

    bb48: {
        _249 = &_185;
        _248 = align_of_val::<Sp2>(_249) -> bb49;
    }

    bb49: {
        _247 = &_248;
        _251 = const 2_usize;
        _250 = &_251;
        _246 = (move _247, move _250);
        _252 = (_246.0: &usize);
        _253 = (_246.1: &usize);
        _256 = (*_252);
        _257 = (*_253);
        _255 = Eq(move _256, move _257);
        _254 = Not(move _255);
        switchInt(move _254) -> [0: bb51, otherwise: bb50];
    }

    bb50: {
        _258 = core::panicking::AssertKind::Eq;
        _260 = Option::<Arguments<'_>>::None;
        _259 = core::panicking::assert_failed::<usize, usize>(move _258, _252, _253, move _260);
    }

    bb51: {
        _265 = const _;
        _264 = &_265;
        _263 = align_of_val::<Sp2>(_264) -> bb52;
    }

    bb52: {
        _262 = &_263;
        _267 = const 2_usize;
        _266 = &_267;
        _261 = (move _262, move _266);
        _268 = (_261.0: &usize);
        _269 = (_261.1: &usize);
        _272 = (*_268);
        _273 = (*_269);
        _271 = Eq(move _272, move _273);
        _270 = Not(move _271);
        switchInt(move _270) -> [0: bb54, otherwise: bb53];
    }

    bb53: {
        _274 = core::panicking::AssertKind::Eq;
        _276 = Option::<Arguments<'_>>::None;
        _275 = core::panicking::assert_failed::<usize, usize>(move _274, _268, _269, move _276);
    }

    bb54: {
        _278 = [const 0_u8, const 0_u8, const 0_u8];
        _277 = U { a: move _278 };
        _281 = std::mem::size_of::<U>() -> bb55;
    }

    bb55: {
        _280 = &_281;
        _283 = const 4_usize;
        _282 = &_283;
        _279 = (move _280, move _282);
        _284 = (_279.0: &usize);
        _285 = (_279.1: &usize);
        _288 = (*_284);
        _289 = (*_285);
        _287 = Eq(move _288, move _289);
        _286 = Not(move _287);
        switchInt(move _286) -> [0: bb57, otherwise: bb56];
    }

    bb56: {
        _290 = core::panicking::AssertKind::Eq;
        _292 = Option::<Arguments<'_>>::None;
        _291 = core::panicking::assert_failed::<usize, usize>(move _290, _284, _285, move _292);
    }

    bb57: {
        _296 = &_277;
        _295 = std::mem::size_of_val::<U>(_296) -> bb58;
    }

    bb58: {
        _294 = &_295;
        _298 = const 4_usize;
        _297 = &_298;
        _293 = (move _294, move _297);
        _299 = (_293.0: &usize);
        _300 = (_293.1: &usize);
        _303 = (*_299);
        _304 = (*_300);
        _302 = Eq(move _303, move _304);
        _301 = Not(move _302);
        switchInt(move _301) -> [0: bb60, otherwise: bb59];
    }

    bb59: {
        _305 = core::panicking::AssertKind::Eq;
        _307 = Option::<Arguments<'_>>::None;
        _306 = core::panicking::assert_failed::<usize, usize>(move _305, _299, _300, move _307);
    }

    bb60: {
        _312 = const _;
        _311 = &_312;
        _310 = std::mem::size_of_val::<U>(_311) -> bb61;
    }

    bb61: {
        _309 = &_310;
        _314 = const 4_usize;
        _313 = &_314;
        _308 = (move _309, move _313);
        _315 = (_308.0: &usize);
        _316 = (_308.1: &usize);
        _319 = (*_315);
        _320 = (*_316);
        _318 = Eq(move _319, move _320);
        _317 = Not(move _318);
        switchInt(move _317) -> [0: bb63, otherwise: bb62];
    }

    bb62: {
        _321 = core::panicking::AssertKind::Eq;
        _323 = Option::<Arguments<'_>>::None;
        _322 = core::panicking::assert_failed::<usize, usize>(move _321, _315, _316, move _323);
    }

    bb63: {
        _326 = align_of::<U>() -> bb64;
    }

    bb64: {
        _325 = &_326;
        _328 = const 2_usize;
        _327 = &_328;
        _324 = (move _325, move _327);
        _329 = (_324.0: &usize);
        _330 = (_324.1: &usize);
        _333 = (*_329);
        _334 = (*_330);
        _332 = Eq(move _333, move _334);
        _331 = Not(move _332);
        switchInt(move _331) -> [0: bb66, otherwise: bb65];
    }

    bb65: {
        _335 = core::panicking::AssertKind::Eq;
        _337 = Option::<Arguments<'_>>::None;
        _336 = core::panicking::assert_failed::<usize, usize>(move _335, _329, _330, move _337);
    }

    bb66: {
        _341 = &_277;
        _340 = align_of_val::<U>(_341) -> bb67;
    }

    bb67: {
        _339 = &_340;
        _343 = const 2_usize;
        _342 = &_343;
        _338 = (move _339, move _342);
        _344 = (_338.0: &usize);
        _345 = (_338.1: &usize);
        _348 = (*_344);
        _349 = (*_345);
        _347 = Eq(move _348, move _349);
        _346 = Not(move _347);
        switchInt(move _346) -> [0: bb69, otherwise: bb68];
    }

    bb68: {
        _350 = core::panicking::AssertKind::Eq;
        _352 = Option::<Arguments<'_>>::None;
        _351 = core::panicking::assert_failed::<usize, usize>(move _350, _344, _345, move _352);
    }

    bb69: {
        _357 = const _;
        _356 = &_357;
        _355 = align_of_val::<U>(_356) -> bb70;
    }

    bb70: {
        _354 = &_355;
        _359 = const 2_usize;
        _358 = &_359;
        _353 = (move _354, move _358);
        _360 = (_353.0: &usize);
        _361 = (_353.1: &usize);
        _364 = (*_360);
        _365 = (*_361);
        _363 = Eq(move _364, move _365);
        _362 = Not(move _363);
        switchInt(move _362) -> [0: bb72, otherwise: bb71];
    }

    bb71: {
        _366 = core::panicking::AssertKind::Eq;
        _368 = Option::<Arguments<'_>>::None;
        _367 = core::panicking::assert_failed::<usize, usize>(move _366, _360, _361, move _368);
    }

    bb72: {
        _370 = [const 0_u8, const 0_u8, const 0_u8];
        _369 = Up1 { a: move _370 };
        _373 = std::mem::size_of::<Up1>() -> bb73;
    }

    bb73: {
        _372 = &_373;
        _375 = const 3_usize;
        _374 = &_375;
        _371 = (move _372, move _374);
        _376 = (_371.0: &usize);
        _377 = (_371.1: &usize);
        _380 = (*_376);
        _381 = (*_377);
        _379 = Eq(move _380, move _381);
        _378 = Not(move _379);
        switchInt(move _378) -> [0: bb75, otherwise: bb74];
    }

    bb74: {
        _382 = core::panicking::AssertKind::Eq;
        _384 = Option::<Arguments<'_>>::None;
        _383 = core::panicking::assert_failed::<usize, usize>(move _382, _376, _377, move _384);
    }

    bb75: {
        _388 = &_369;
        _387 = std::mem::size_of_val::<Up1>(_388) -> bb76;
    }

    bb76: {
        _386 = &_387;
        _390 = const 3_usize;
        _389 = &_390;
        _385 = (move _386, move _389);
        _391 = (_385.0: &usize);
        _392 = (_385.1: &usize);
        _395 = (*_391);
        _396 = (*_392);
        _394 = Eq(move _395, move _396);
        _393 = Not(move _394);
        switchInt(move _393) -> [0: bb78, otherwise: bb77];
    }

    bb77: {
        _397 = core::panicking::AssertKind::Eq;
        _399 = Option::<Arguments<'_>>::None;
        _398 = core::panicking::assert_failed::<usize, usize>(move _397, _391, _392, move _399);
    }

    bb78: {
        _404 = const _;
        _403 = &_404;
        _402 = std::mem::size_of_val::<Up1>(_403) -> bb79;
    }

    bb79: {
        _401 = &_402;
        _406 = const 3_usize;
        _405 = &_406;
        _400 = (move _401, move _405);
        _407 = (_400.0: &usize);
        _408 = (_400.1: &usize);
        _411 = (*_407);
        _412 = (*_408);
        _410 = Eq(move _411, move _412);
        _409 = Not(move _410);
        switchInt(move _409) -> [0: bb81, otherwise: bb80];
    }

    bb80: {
        _413 = core::panicking::AssertKind::Eq;
        _415 = Option::<Arguments<'_>>::None;
        _414 = core::panicking::assert_failed::<usize, usize>(move _413, _407, _408, move _415);
    }

    bb81: {
        _418 = align_of::<Up1>() -> bb82;
    }

    bb82: {
        _417 = &_418;
        _420 = const 1_usize;
        _419 = &_420;
        _416 = (move _417, move _419);
        _421 = (_416.0: &usize);
        _422 = (_416.1: &usize);
        _425 = (*_421);
        _426 = (*_422);
        _424 = Eq(move _425, move _426);
        _423 = Not(move _424);
        switchInt(move _423) -> [0: bb84, otherwise: bb83];
    }

    bb83: {
        _427 = core::panicking::AssertKind::Eq;
        _429 = Option::<Arguments<'_>>::None;
        _428 = core::panicking::assert_failed::<usize, usize>(move _427, _421, _422, move _429);
    }

    bb84: {
        _433 = &_369;
        _432 = align_of_val::<Up1>(_433) -> bb85;
    }

    bb85: {
        _431 = &_432;
        _435 = const 1_usize;
        _434 = &_435;
        _430 = (move _431, move _434);
        _436 = (_430.0: &usize);
        _437 = (_430.1: &usize);
        _440 = (*_436);
        _441 = (*_437);
        _439 = Eq(move _440, move _441);
        _438 = Not(move _439);
        switchInt(move _438) -> [0: bb87, otherwise: bb86];
    }

    bb86: {
        _442 = core::panicking::AssertKind::Eq;
        _444 = Option::<Arguments<'_>>::None;
        _443 = core::panicking::assert_failed::<usize, usize>(move _442, _436, _437, move _444);
    }

    bb87: {
        _449 = const _;
        _448 = &_449;
        _447 = align_of_val::<Up1>(_448) -> bb88;
    }

    bb88: {
        _446 = &_447;
        _451 = const 1_usize;
        _450 = &_451;
        _445 = (move _446, move _450);
        _452 = (_445.0: &usize);
        _453 = (_445.1: &usize);
        _456 = (*_452);
        _457 = (*_453);
        _455 = Eq(move _456, move _457);
        _454 = Not(move _455);
        switchInt(move _454) -> [0: bb90, otherwise: bb89];
    }

    bb89: {
        _458 = core::panicking::AssertKind::Eq;
        _460 = Option::<Arguments<'_>>::None;
        _459 = core::panicking::assert_failed::<usize, usize>(move _458, _452, _453, move _460);
    }

    bb90: {
        _462 = [const 0_u8, const 0_u8, const 0_u8];
        _461 = Up2 { a: move _462 };
        _465 = std::mem::size_of::<Up2>() -> bb91;
    }

    bb91: {
        _464 = &_465;
        _467 = const 4_usize;
        _466 = &_467;
        _463 = (move _464, move _466);
        _468 = (_463.0: &usize);
        _469 = (_463.1: &usize);
        _472 = (*_468);
        _473 = (*_469);
        _471 = Eq(move _472, move _473);
        _470 = Not(move _471);
        switchInt(move _470) -> [0: bb93, otherwise: bb92];
    }

    bb92: {
        _474 = core::panicking::AssertKind::Eq;
        _476 = Option::<Arguments<'_>>::None;
        _475 = core::panicking::assert_failed::<usize, usize>(move _474, _468, _469, move _476);
    }

    bb93: {
        _480 = &_461;
        _479 = std::mem::size_of_val::<Up2>(_480) -> bb94;
    }

    bb94: {
        _478 = &_479;
        _482 = const 4_usize;
        _481 = &_482;
        _477 = (move _478, move _481);
        _483 = (_477.0: &usize);
        _484 = (_477.1: &usize);
        _487 = (*_483);
        _488 = (*_484);
        _486 = Eq(move _487, move _488);
        _485 = Not(move _486);
        switchInt(move _485) -> [0: bb96, otherwise: bb95];
    }

    bb95: {
        _489 = core::panicking::AssertKind::Eq;
        _491 = Option::<Arguments<'_>>::None;
        _490 = core::panicking::assert_failed::<usize, usize>(move _489, _483, _484, move _491);
    }

    bb96: {
        _496 = const _;
        _495 = &_496;
        _494 = std::mem::size_of_val::<Up2>(_495) -> bb97;
    }

    bb97: {
        _493 = &_494;
        _498 = const 4_usize;
        _497 = &_498;
        _492 = (move _493, move _497);
        _499 = (_492.0: &usize);
        _500 = (_492.1: &usize);
        _503 = (*_499);
        _504 = (*_500);
        _502 = Eq(move _503, move _504);
        _501 = Not(move _502);
        switchInt(move _501) -> [0: bb99, otherwise: bb98];
    }

    bb98: {
        _505 = core::panicking::AssertKind::Eq;
        _507 = Option::<Arguments<'_>>::None;
        _506 = core::panicking::assert_failed::<usize, usize>(move _505, _499, _500, move _507);
    }

    bb99: {
        _510 = align_of::<Up2>() -> bb100;
    }

    bb100: {
        _509 = &_510;
        _512 = const 2_usize;
        _511 = &_512;
        _508 = (move _509, move _511);
        _513 = (_508.0: &usize);
        _514 = (_508.1: &usize);
        _517 = (*_513);
        _518 = (*_514);
        _516 = Eq(move _517, move _518);
        _515 = Not(move _516);
        switchInt(move _515) -> [0: bb102, otherwise: bb101];
    }

    bb101: {
        _519 = core::panicking::AssertKind::Eq;
        _521 = Option::<Arguments<'_>>::None;
        _520 = core::panicking::assert_failed::<usize, usize>(move _519, _513, _514, move _521);
    }

    bb102: {
        _525 = &_461;
        _524 = align_of_val::<Up2>(_525) -> bb103;
    }

    bb103: {
        _523 = &_524;
        _527 = const 2_usize;
        _526 = &_527;
        _522 = (move _523, move _526);
        _528 = (_522.0: &usize);
        _529 = (_522.1: &usize);
        _532 = (*_528);
        _533 = (*_529);
        _531 = Eq(move _532, move _533);
        _530 = Not(move _531);
        switchInt(move _530) -> [0: bb105, otherwise: bb104];
    }

    bb104: {
        _534 = core::panicking::AssertKind::Eq;
        _536 = Option::<Arguments<'_>>::None;
        _535 = core::panicking::assert_failed::<usize, usize>(move _534, _528, _529, move _536);
    }

    bb105: {
        _541 = const _;
        _540 = &_541;
        _539 = align_of_val::<Up2>(_540) -> bb106;
    }

    bb106: {
        _538 = &_539;
        _543 = const 2_usize;
        _542 = &_543;
        _537 = (move _538, move _542);
        _544 = (_537.0: &usize);
        _545 = (_537.1: &usize);
        _548 = (*_544);
        _549 = (*_545);
        _547 = Eq(move _548, move _549);
        _546 = Not(move _547);
        switchInt(move _546) -> [0: bb108, otherwise: bb107];
    }

    bb107: {
        _550 = core::panicking::AssertKind::Eq;
        _552 = Option::<Arguments<'_>>::None;
        _551 = core::panicking::assert_failed::<usize, usize>(move _550, _544, _545, move _552);
    }

    bb108: {
        _554 = [const 0_u8, const 0_u8, const 0_u8];
        _553 = Up4c { a: move _554 };
        _557 = std::mem::size_of::<Up4c>() -> bb109;
    }

    bb109: {
        _556 = &_557;
        _559 = const 4_usize;
        _558 = &_559;
        _555 = (move _556, move _558);
        _560 = (_555.0: &usize);
        _561 = (_555.1: &usize);
        _564 = (*_560);
        _565 = (*_561);
        _563 = Eq(move _564, move _565);
        _562 = Not(move _563);
        switchInt(move _562) -> [0: bb111, otherwise: bb110];
    }

    bb110: {
        _566 = core::panicking::AssertKind::Eq;
        _568 = Option::<Arguments<'_>>::None;
        _567 = core::panicking::assert_failed::<usize, usize>(move _566, _560, _561, move _568);
    }

    bb111: {
        _572 = &_553;
        _571 = std::mem::size_of_val::<Up4c>(_572) -> bb112;
    }

    bb112: {
        _570 = &_571;
        _574 = const 4_usize;
        _573 = &_574;
        _569 = (move _570, move _573);
        _575 = (_569.0: &usize);
        _576 = (_569.1: &usize);
        _579 = (*_575);
        _580 = (*_576);
        _578 = Eq(move _579, move _580);
        _577 = Not(move _578);
        switchInt(move _577) -> [0: bb114, otherwise: bb113];
    }

    bb113: {
        _581 = core::panicking::AssertKind::Eq;
        _583 = Option::<Arguments<'_>>::None;
        _582 = core::panicking::assert_failed::<usize, usize>(move _581, _575, _576, move _583);
    }

    bb114: {
        _588 = const _;
        _587 = &_588;
        _586 = std::mem::size_of_val::<Up4c>(_587) -> bb115;
    }

    bb115: {
        _585 = &_586;
        _590 = const 4_usize;
        _589 = &_590;
        _584 = (move _585, move _589);
        _591 = (_584.0: &usize);
        _592 = (_584.1: &usize);
        _595 = (*_591);
        _596 = (*_592);
        _594 = Eq(move _595, move _596);
        _593 = Not(move _594);
        switchInt(move _593) -> [0: bb117, otherwise: bb116];
    }

    bb116: {
        _597 = core::panicking::AssertKind::Eq;
        _599 = Option::<Arguments<'_>>::None;
        _598 = core::panicking::assert_failed::<usize, usize>(move _597, _591, _592, move _599);
    }

    bb117: {
        _602 = align_of::<Up4c>() -> bb118;
    }

    bb118: {
        _601 = &_602;
        _604 = const 2_usize;
        _603 = &_604;
        _600 = (move _601, move _603);
        _605 = (_600.0: &usize);
        _606 = (_600.1: &usize);
        _609 = (*_605);
        _610 = (*_606);
        _608 = Eq(move _609, move _610);
        _607 = Not(move _608);
        switchInt(move _607) -> [0: bb120, otherwise: bb119];
    }

    bb119: {
        _611 = core::panicking::AssertKind::Eq;
        _613 = Option::<Arguments<'_>>::None;
        _612 = core::panicking::assert_failed::<usize, usize>(move _611, _605, _606, move _613);
    }

    bb120: {
        _617 = &_553;
        _616 = align_of_val::<Up4c>(_617) -> bb121;
    }

    bb121: {
        _615 = &_616;
        _619 = const 2_usize;
        _618 = &_619;
        _614 = (move _615, move _618);
        _620 = (_614.0: &usize);
        _621 = (_614.1: &usize);
        _624 = (*_620);
        _625 = (*_621);
        _623 = Eq(move _624, move _625);
        _622 = Not(move _623);
        switchInt(move _622) -> [0: bb123, otherwise: bb122];
    }

    bb122: {
        _626 = core::panicking::AssertKind::Eq;
        _628 = Option::<Arguments<'_>>::None;
        _627 = core::panicking::assert_failed::<usize, usize>(move _626, _620, _621, move _628);
    }

    bb123: {
        _633 = const _;
        _632 = &_633;
        _631 = align_of_val::<Up4c>(_632) -> bb124;
    }

    bb124: {
        _630 = &_631;
        _635 = const 2_usize;
        _634 = &_635;
        _629 = (move _630, move _634);
        _636 = (_629.0: &usize);
        _637 = (_629.1: &usize);
        _640 = (*_636);
        _641 = (*_637);
        _639 = Eq(move _640, move _641);
        _638 = Not(move _639);
        switchInt(move _638) -> [0: bb126, otherwise: bb125];
    }

    bb125: {
        _642 = core::panicking::AssertKind::Eq;
        _644 = Option::<Arguments<'_>>::None;
        _643 = core::panicking::assert_failed::<usize, usize>(move _642, _636, _637, move _644);
    }

    bb126: {
        _645 = check_hybrid() -> bb127;
    }

    bb127: {
        return;
    }
}

fn hybrid::<impl at ui/union/union-packed.rs:122:20: 122:25>::clone(_1: &S1) -> S1 {
    debug self => _1;
    let mut _0: hybrid::S1;
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn check_hybrid() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let mut _2: &usize;
    let _3: usize;
    let mut _4: &usize;
    let _5: usize;
    let _6: &usize;
    let _7: &usize;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: usize;
    let mut _11: usize;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&usize, &usize);
    let mut _16: &usize;
    let _17: usize;
    let mut _18: &usize;
    let _19: usize;
    let _20: &usize;
    let _21: &usize;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: usize;
    let mut _25: usize;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: (&usize, &usize);
    let mut _30: &usize;
    let _31: usize;
    let mut _32: &usize;
    let _33: usize;
    let _34: &usize;
    let _35: &usize;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: usize;
    let mut _39: usize;
    let _41: !;
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _43: (&usize, &usize);
    let mut _44: &usize;
    let _45: usize;
    let mut _46: &usize;
    let _47: usize;
    let _48: &usize;
    let _49: &usize;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: usize;
    let mut _53: usize;
    let _55: !;
    let mut _56: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _57: (&usize, &usize);
    let mut _58: &usize;
    let _59: usize;
    let mut _60: &usize;
    let _61: usize;
    let _62: &usize;
    let _63: &usize;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: usize;
    let mut _67: usize;
    let _69: !;
    let mut _70: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _71: (&usize, &usize);
    let mut _72: &usize;
    let _73: usize;
    let mut _74: &usize;
    let _75: usize;
    let _76: &usize;
    let _77: &usize;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: usize;
    let mut _81: usize;
    let _83: !;
    let mut _84: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _85: (&usize, &usize);
    let mut _86: &usize;
    let _87: usize;
    let mut _88: &usize;
    let _89: usize;
    let _90: &usize;
    let _91: &usize;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: usize;
    let mut _95: usize;
    let _97: !;
    let mut _98: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _99: (&usize, &usize);
    let mut _100: &usize;
    let _101: usize;
    let mut _102: &usize;
    let _103: usize;
    let _104: &usize;
    let _105: &usize;
    let mut _106: bool;
    let mut _107: bool;
    let mut _108: usize;
    let mut _109: usize;
    let _111: !;
    let mut _112: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _113: (&usize, &usize);
    let mut _114: &usize;
    let _115: usize;
    let mut _116: &usize;
    let _117: usize;
    let _118: &usize;
    let _119: &usize;
    let mut _120: bool;
    let mut _121: bool;
    let mut _122: usize;
    let mut _123: usize;
    let _125: !;
    let mut _126: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _127: (&usize, &usize);
    let mut _128: &usize;
    let _129: usize;
    let mut _130: &usize;
    let _131: usize;
    let _132: &usize;
    let _133: &usize;
    let mut _134: bool;
    let mut _135: bool;
    let mut _136: usize;
    let mut _137: usize;
    let _139: !;
    let mut _140: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _141: (&usize, &usize);
    let mut _142: &usize;
    let _143: usize;
    let mut _144: &usize;
    let _145: usize;
    let _146: &usize;
    let _147: &usize;
    let mut _148: bool;
    let mut _149: bool;
    let mut _150: usize;
    let mut _151: usize;
    let _153: !;
    let mut _154: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _155: (&usize, &usize);
    let mut _156: &usize;
    let _157: usize;
    let mut _158: &usize;
    let _159: usize;
    let _160: &usize;
    let _161: &usize;
    let mut _162: bool;
    let mut _163: bool;
    let mut _164: usize;
    let mut _165: usize;
    let _167: !;
    let mut _168: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }
    scope 3 {
        debug left_val => _20;
        debug right_val => _21;
        let _26: core::panicking::AssertKind;
        scope 4 {
            debug kind => _26;
        }
    }
    scope 5 {
        debug left_val => _34;
        debug right_val => _35;
        let _40: core::panicking::AssertKind;
        scope 6 {
            debug kind => _40;
        }
    }
    scope 7 {
        debug left_val => _48;
        debug right_val => _49;
        let _54: core::panicking::AssertKind;
        scope 8 {
            debug kind => _54;
        }
    }
    scope 9 {
        debug left_val => _62;
        debug right_val => _63;
        let _68: core::panicking::AssertKind;
        scope 10 {
            debug kind => _68;
        }
    }
    scope 11 {
        debug left_val => _76;
        debug right_val => _77;
        let _82: core::panicking::AssertKind;
        scope 12 {
            debug kind => _82;
        }
    }
    scope 13 {
        debug left_val => _90;
        debug right_val => _91;
        let _96: core::panicking::AssertKind;
        scope 14 {
            debug kind => _96;
        }
    }
    scope 15 {
        debug left_val => _104;
        debug right_val => _105;
        let _110: core::panicking::AssertKind;
        scope 16 {
            debug kind => _110;
        }
    }
    scope 17 {
        debug left_val => _118;
        debug right_val => _119;
        let _124: core::panicking::AssertKind;
        scope 18 {
            debug kind => _124;
        }
    }
    scope 19 {
        debug left_val => _132;
        debug right_val => _133;
        let _138: core::panicking::AssertKind;
        scope 20 {
            debug kind => _138;
        }
    }
    scope 21 {
        debug left_val => _146;
        debug right_val => _147;
        let _152: core::panicking::AssertKind;
        scope 22 {
            debug kind => _152;
        }
    }
    scope 23 {
        debug left_val => _160;
        debug right_val => _161;
        let _166: core::panicking::AssertKind;
        scope 24 {
            debug kind => _166;
        }
    }

    bb0: {
        _3 = align_of::<S1>() -> bb1;
    }

    bb1: {
        _2 = &_3;
        _5 = const 1_usize;
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &usize);
        _7 = (_1.1: &usize);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<usize, usize>(move _12, _6, _7, move _14);
    }

    bb3: {
        _17 = std::mem::size_of::<S1>() -> bb4;
    }

    bb4: {
        _16 = &_17;
        _19 = const 3_usize;
        _18 = &_19;
        _15 = (move _16, move _18);
        _20 = (_15.0: &usize);
        _21 = (_15.1: &usize);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<usize, usize>(move _26, _20, _21, move _28);
    }

    bb6: {
        _31 = align_of::<hybrid::U>() -> bb7;
    }

    bb7: {
        _30 = &_31;
        _33 = const 1_usize;
        _32 = &_33;
        _29 = (move _30, move _32);
        _34 = (_29.0: &usize);
        _35 = (_29.1: &usize);
        _38 = (*_34);
        _39 = (*_35);
        _37 = Eq(move _38, move _39);
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _40 = core::panicking::AssertKind::Eq;
        _42 = Option::<Arguments<'_>>::None;
        _41 = core::panicking::assert_failed::<usize, usize>(move _40, _34, _35, move _42);
    }

    bb9: {
        _45 = std::mem::size_of::<hybrid::U>() -> bb10;
    }

    bb10: {
        _44 = &_45;
        _47 = const 3_usize;
        _46 = &_47;
        _43 = (move _44, move _46);
        _48 = (_43.0: &usize);
        _49 = (_43.1: &usize);
        _52 = (*_48);
        _53 = (*_49);
        _51 = Eq(move _52, move _53);
        _50 = Not(move _51);
        switchInt(move _50) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _54 = core::panicking::AssertKind::Eq;
        _56 = Option::<Arguments<'_>>::None;
        _55 = core::panicking::assert_failed::<usize, usize>(move _54, _48, _49, move _56);
    }

    bb12: {
        _59 = align_of::<S2>() -> bb13;
    }

    bb13: {
        _58 = &_59;
        _61 = const 1_usize;
        _60 = &_61;
        _57 = (move _58, move _60);
        _62 = (_57.0: &usize);
        _63 = (_57.1: &usize);
        _66 = (*_62);
        _67 = (*_63);
        _65 = Eq(move _66, move _67);
        _64 = Not(move _65);
        switchInt(move _64) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _68 = core::panicking::AssertKind::Eq;
        _70 = Option::<Arguments<'_>>::None;
        _69 = core::panicking::assert_failed::<usize, usize>(move _68, _62, _63, move _70);
    }

    bb15: {
        _73 = std::mem::size_of::<S2>() -> bb16;
    }

    bb16: {
        _72 = &_73;
        _75 = const 4_usize;
        _74 = &_75;
        _71 = (move _72, move _74);
        _76 = (_71.0: &usize);
        _77 = (_71.1: &usize);
        _80 = (*_76);
        _81 = (*_77);
        _79 = Eq(move _80, move _81);
        _78 = Not(move _79);
        switchInt(move _78) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _82 = core::panicking::AssertKind::Eq;
        _84 = Option::<Arguments<'_>>::None;
        _83 = core::panicking::assert_failed::<usize, usize>(move _82, _76, _77, move _84);
    }

    bb18: {
        _87 = align_of::<S1C>() -> bb19;
    }

    bb19: {
        _86 = &_87;
        _89 = const 2_usize;
        _88 = &_89;
        _85 = (move _86, move _88);
        _90 = (_85.0: &usize);
        _91 = (_85.1: &usize);
        _94 = (*_90);
        _95 = (*_91);
        _93 = Eq(move _94, move _95);
        _92 = Not(move _93);
        switchInt(move _92) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _96 = core::panicking::AssertKind::Eq;
        _98 = Option::<Arguments<'_>>::None;
        _97 = core::panicking::assert_failed::<usize, usize>(move _96, _90, _91, move _98);
    }

    bb21: {
        _101 = std::mem::size_of::<S1C>() -> bb22;
    }

    bb22: {
        _100 = &_101;
        _103 = const 4_usize;
        _102 = &_103;
        _99 = (move _100, move _102);
        _104 = (_99.0: &usize);
        _105 = (_99.1: &usize);
        _108 = (*_104);
        _109 = (*_105);
        _107 = Eq(move _108, move _109);
        _106 = Not(move _107);
        switchInt(move _106) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _110 = core::panicking::AssertKind::Eq;
        _112 = Option::<Arguments<'_>>::None;
        _111 = core::panicking::assert_failed::<usize, usize>(move _110, _104, _105, move _112);
    }

    bb24: {
        _115 = align_of::<UC>() -> bb25;
    }

    bb25: {
        _114 = &_115;
        _117 = const 2_usize;
        _116 = &_117;
        _113 = (move _114, move _116);
        _118 = (_113.0: &usize);
        _119 = (_113.1: &usize);
        _122 = (*_118);
        _123 = (*_119);
        _121 = Eq(move _122, move _123);
        _120 = Not(move _121);
        switchInt(move _120) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _124 = core::panicking::AssertKind::Eq;
        _126 = Option::<Arguments<'_>>::None;
        _125 = core::panicking::assert_failed::<usize, usize>(move _124, _118, _119, move _126);
    }

    bb27: {
        _129 = std::mem::size_of::<UC>() -> bb28;
    }

    bb28: {
        _128 = &_129;
        _131 = const 4_usize;
        _130 = &_131;
        _127 = (move _128, move _130);
        _132 = (_127.0: &usize);
        _133 = (_127.1: &usize);
        _136 = (*_132);
        _137 = (*_133);
        _135 = Eq(move _136, move _137);
        _134 = Not(move _135);
        switchInt(move _134) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _138 = core::panicking::AssertKind::Eq;
        _140 = Option::<Arguments<'_>>::None;
        _139 = core::panicking::assert_failed::<usize, usize>(move _138, _132, _133, move _140);
    }

    bb30: {
        _143 = align_of::<S2C>() -> bb31;
    }

    bb31: {
        _142 = &_143;
        _145 = const 2_usize;
        _144 = &_145;
        _141 = (move _142, move _144);
        _146 = (_141.0: &usize);
        _147 = (_141.1: &usize);
        _150 = (*_146);
        _151 = (*_147);
        _149 = Eq(move _150, move _151);
        _148 = Not(move _149);
        switchInt(move _148) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _152 = core::panicking::AssertKind::Eq;
        _154 = Option::<Arguments<'_>>::None;
        _153 = core::panicking::assert_failed::<usize, usize>(move _152, _146, _147, move _154);
    }

    bb33: {
        _157 = std::mem::size_of::<S2C>() -> bb34;
    }

    bb34: {
        _156 = &_157;
        _159 = const 6_usize;
        _158 = &_159;
        _155 = (move _156, move _158);
        _160 = (_155.0: &usize);
        _161 = (_155.1: &usize);
        _164 = (*_160);
        _165 = (*_161);
        _163 = Eq(move _164, move _165);
        _162 = Not(move _163);
        switchInt(move _162) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _166 = core::panicking::AssertKind::Eq;
        _168 = Option::<Arguments<'_>>::None;
        _167 = core::panicking::assert_failed::<usize, usize>(move _166, _160, _161, move _168);
    }

    bb36: {
        return;
    }
}
