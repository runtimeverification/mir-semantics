// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/union/union-manuallydrop-rpass.rs:12:1: 12:23>::drop(_1: &mut NeedDrop) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: !;

    bb0: {
        _3 = std::mem::needs_drop::<UnionOk1<NeedDrop>>() -> bb1;
    }

    bb1: {
        _2 = Not(move _3);
        _1 = Not(move _2);
        switchInt(move _1) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _4 = core::panicking::panic(const "assertion failed: !needs_drop::<UnionOk1<NeedDrop>>()");
    }

    bb3: {
        _7 = std::mem::needs_drop::<UnionOk3<&dyn Foo>>() -> bb4;
    }

    bb4: {
        _6 = Not(move _7);
        _5 = Not(move _6);
        switchInt(move _5) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _8 = core::panicking::panic(const "assertion failed: !needs_drop::<UnionOk3<&dyn Foo>>()");
    }

    bb6: {
        return;
    }
}
