// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn union_transmute(_1: A) -> B {
    debug a => _1;
    let mut _0: B;
    let mut _2: U<A, B>;

    bb0: {
        _2 = U::<A, B> { a: _1 };
        _0 = (_2.1: B);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _2: (u8, u8);
    let mut _3: (&u16, &u16);
    let mut _4: &u16;
    let mut _5: &u16;
    let _6: u16;
    let mut _7: u16;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: u16;
    let mut _13: u16;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: std::boxed::Box<[u8]>;
    let mut _19: usize;
    let mut _20: usize;
    let mut _21: *mut u8;
    let mut _22: std::boxed::Box<[u8; 3]>;
    let mut _24: &[u8];
    let _25: &[u8];
    let mut _26: &std::vec::Vec<u8>;
    let _27: std::option::Option<&u8>;
    let mut _28: &mut std::slice::Iter<'_, u8>;
    let mut _30: std::mem::ManuallyDrop<&u8>;
    let mut _31: &u8;
    let _32: &u8;
    let mut _33: std::option::Option<&u8>;
    let mut _34: &mut std::slice::Iter<'_, u8>;
    let mut _35: (&u8, &u8);
    let _36: &&u8;
    let mut _37: &std::mem::ManuallyDrop<&u8>;
    let mut _38: &u8;
    let _39: u8;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: u8;
    let mut _45: u8;
    let _47: !;
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _49: &u8;
    let mut _50: *const [u8; 3];
    scope 1 {
        let _1: u16;
        scope 2 {
            debug b => _1;
            let _8: &u16;
            let _9: &u16;
            let _17: std::vec::Vec<u8>;
            scope 3 {
                debug left_val => _8;
                debug right_val => _9;
                let _14: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _14;
                }
            }
            scope 5 {
                debug v => _17;
                let mut _23: std::slice::Iter<'_, u8>;
                scope 7 {
                    debug i => _23;
                    let _29: MaybeItem<std::slice::Iter<'_, u8>>;
                    scope 8 {
                        debug mi => _29;
                        let _40: &u8;
                        let _41: &u8;
                        scope 9 {
                            debug left_val => _40;
                            debug right_val => _41;
                            let _46: core::panicking::AssertKind;
                            scope 10 {
                                debug kind => _46;
                            }
                        }
                    }
                }
            }
            scope 6 {
            }
        }
    }

    bb0: {
        _2 = (const 1_u8, const 1_u8);
        _1 = union_transmute::<(u8, u8), u16>(move _2) -> bb1;
    }

    bb1: {
        _4 = &_1;
        _7 = Shl(const 1_u16, const 8_i32);
        _6 = Add(move _7, const 1_u16);
        _5 = &_6;
        _3 = (move _4, move _5);
        _8 = (_3.0: &u16);
        _9 = (_3.1: &u16);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<u16, u16>(move _14, _8, _9, move _16);
    }

    bb3: {
        _19 = SizeOf([u8; 3]);
        _20 = AlignOf([u8; 3]);
        _21 = alloc::alloc::exchange_malloc(move _19, move _20) -> bb4;
    }

    bb4: {
        _22 = ShallowInitBox(move _21, [u8; 3]);
        _50 = (((_22.0: std::ptr::Unique<[u8; 3]>).0: std::ptr::NonNull<[u8; 3]>).0: *const [u8; 3]);
        (*_50) = [const 1_u8, const 2_u8, const 3_u8];
        _18 = move _22 as std::boxed::Box<[u8]> (Pointer(Unsize));
        _17 = slice::<impl [u8]>::into_vec::<std::alloc::Global>(move _18) -> bb5;
    }

    bb5: {
        _26 = &_17;
        _25 = <Vec<u8> as Deref>::deref(move _26) -> [return: bb6, unwind: bb16];
    }

    bb6: {
        _24 = _25;
        _23 = core::slice::<impl [u8]>::iter(move _24) -> [return: bb7, unwind: bb16];
    }

    bb7: {
        _28 = &mut _23;
        _27 = <std::slice::Iter<'_, u8> as Iterator>::next(move _28) -> [return: bb8, unwind: bb16];
    }

    bb8: {
        _34 = &mut _23;
        _33 = <std::slice::Iter<'_, u8> as Iterator>::next(move _34) -> [return: bb9, unwind: bb16];
    }

    bb9: {
        _32 = Option::<&u8>::unwrap(move _33) -> [return: bb10, unwind: bb16];
    }

    bb10: {
        _31 = _32;
        _30 = ManuallyDrop::<&u8>::new(move _31) -> [return: bb11, unwind: bb16];
    }

    bb11: {
        _29 = MaybeItem::<std::slice::Iter<'_, u8>> { elem: move _30 };
        _37 = &(_29.0: std::mem::ManuallyDrop<&u8>);
        _36 = <ManuallyDrop<&u8> as Deref>::deref(move _37) -> [return: bb12, unwind: bb16];
    }

    bb12: {
        _49 = deref_copy (*_36);
        _39 = const 2_u8;
        _38 = &_39;
        _35 = (_49, move _38);
        _40 = (_35.0: &u8);
        _41 = (_35.1: &u8);
        _44 = (*_40);
        _45 = (*_41);
        _43 = Eq(move _44, move _45);
        _42 = Not(move _43);
        switchInt(move _42) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _46 = core::panicking::AssertKind::Eq;
        _48 = Option::<Arguments<'_>>::None;
        _47 = core::panicking::assert_failed::<u8, u8>(move _46, _40, _41, move _48) -> bb16;
    }

    bb14: {
        drop(_17) -> bb15;
    }

    bb15: {
        return;
    }

    bb16 (cleanup): {
        drop(_17) -> [return: bb17, unwind terminate];
    }

    bb17 (cleanup): {
        resume;
    }
}
