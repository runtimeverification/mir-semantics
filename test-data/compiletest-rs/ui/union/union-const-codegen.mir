// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const C: U = {
    let mut _0: U;

    bb0: {
        _0 = U { a: const 10_u64 };
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _2: U;
    let mut _4: U;
    let mut _5: (&u64, &u64);
    let mut _6: &u64;
    let mut _7: &u64;
    let _8: u64;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: u64;
    let mut _14: u64;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: (&u64, &u64);
    let mut _19: &u64;
    let mut _20: &u64;
    let _21: u64;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: u64;
    let mut _27: u64;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        let _1: u64;
        scope 2 {
            debug a => _1;
            let _3: u64;
            scope 3 {
                debug b => _3;
                let _9: &u64;
                let _10: &u64;
                let _22: &u64;
                let _23: &u64;
                scope 4 {
                    debug left_val => _9;
                    debug right_val => _10;
                    let _15: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _15;
                    }
                }
                scope 6 {
                    debug left_val => _22;
                    debug right_val => _23;
                    let _28: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _28;
                    }
                }
            }
        }
    }

    bb0: {
        _2 = const _;
        _1 = (_2.0: u64);
        _4 = const _;
        _3 = (_4.1: u64);
        _6 = &_1;
        _8 = const 10_u64;
        _7 = &_8;
        _5 = (move _6, move _7);
        _9 = (_5.0: &u64);
        _10 = (_5.1: &u64);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<u64, u64>(move _15, _9, _10, move _17);
    }

    bb2: {
        _19 = &_3;
        _21 = const 10_u64;
        _20 = &_21;
        _18 = (move _19, move _20);
        _22 = (_18.0: &u64);
        _23 = (_18.1: &u64);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<u64, u64>(move _28, _22, _23, move _30);
    }

    bb4: {
        return;
    }
}
