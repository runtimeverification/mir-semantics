// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn do_call(_1: *mut Params<F, R>) -> () {
    debug params => _1;
    let mut _0: ();
    let mut _2: R;
    let mut _3: &F;
    let mut _4: *const ();
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: bool;
    let mut _10: *const ();
    let mut _11: usize;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: usize;
    let mut _15: bool;

    bb0: {
        _10 = _1 as *const () (PtrToPtr);
        _11 = _10 as usize (Transmute);
        _12 = AlignOf(Params<F, R>);
        _13 = Sub(_12, const 1_usize);
        _14 = BitAnd(_11, _13);
        _15 = Eq(_14, const 0_usize);
        assert(_15, "misaligned pointer dereference: address must be a multiple of {} but is {}", _12, _11) -> [success: bb3, unwind unreachable];
    }

    bb1: {
        _4 = _1 as *const () (PtrToPtr);
        _5 = _4 as usize (Transmute);
        _6 = AlignOf(Params<F, R>);
        _7 = Sub(_6, const 1_usize);
        _8 = BitAnd(_5, _7);
        _9 = Eq(_8, const 0_usize);
        assert(_9, "misaligned pointer dereference: address must be a multiple of {} but is {}", _6, _5) -> [success: bb2, unwind unreachable];
    }

    bb2: {
        (((*_1).1: URes<R>).1: R) = move _2;
        return;
    }

    bb3: {
        _3 = &((*_1).0: F);
        _2 = <F as Fn<()>>::call(move _3, const ()) -> bb1;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
