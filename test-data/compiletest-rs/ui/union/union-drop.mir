// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/union/union-drop.rs:10:16: 10:21>::clone(_1: &S) -> S {
    debug self => _1;
    let mut _0: S;

    bb0: {
        return;
    }
}

fn <impl at ui/union/union-drop.rs:25:1: 25:16>::drop(_1: &mut U) -> () {
    debug self => _1;
    let mut _0: ();
    let mut _2: *mut u8;
    scope 1 {
    }

    bb0: {
        _2 = const {alloc1: *mut u8};
        (*_2) = Add((*_2), const 1_u8);
        return;
    }
}

alloc1 (static: CHECK, size: 1, align: 1) {
    00                                              │ .
}

fn <impl at ui/union/union-drop.rs:31:1: 31:16>::drop(_1: &mut W) -> () {
    debug self => _1;
    let mut _0: ();
    let mut _2: *mut u8;
    scope 1 {
    }

    bb0: {
        _2 = const {alloc1: *mut u8};
        (*_2) = Add((*_2), const 1_u8);
        return;
    }
}

alloc1 (static: CHECK, size: 1, align: 1) {
    00                                              │ .
}

static mut CHECK: u8 = {
    let mut _0: u8;

    bb0: {
        _0 = const 0_u8;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&u8, &u8);
    let mut _2: &u8;
    let _3: *mut u8;
    let mut _4: &u8;
    let _5: u8;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: u8;
    let mut _11: u8;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&u8, &u8);
    let mut _17: &u8;
    let _18: *mut u8;
    let mut _19: &u8;
    let _20: u8;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: u8;
    let mut _26: u8;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&u8, &u8);
    let mut _32: &u8;
    let _33: *mut u8;
    let mut _34: &u8;
    let _35: u8;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: u8;
    let mut _41: u8;
    let _43: !;
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _45: (&u8, &u8);
    let mut _46: &u8;
    let _47: *mut u8;
    let mut _48: &u8;
    let _49: u8;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: u8;
    let mut _55: u8;
    let _57: !;
    let mut _58: std::option::Option<std::fmt::Arguments<'_>>;
    let _60: ();
    let mut _61: (&u8, &u8);
    let mut _62: &u8;
    let _63: *mut u8;
    let mut _64: &u8;
    let _65: u8;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: u8;
    let mut _71: u8;
    let _73: !;
    let mut _74: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        let _6: &u8;
        let _7: &u8;
        let _15: U;
        let _21: &u8;
        let _22: &u8;
        let _30: W;
        let _36: &u8;
        let _37: &u8;
        let _50: &u8;
        let _51: &u8;
        let _59: U;
        let _66: &u8;
        let _67: &u8;
        scope 2 {
            debug left_val => _6;
            debug right_val => _7;
            let _12: core::panicking::AssertKind;
            scope 3 {
                debug kind => _12;
            }
        }
        scope 4 {
            debug u => _15;
        }
        scope 5 {
            debug left_val => _21;
            debug right_val => _22;
            let _27: core::panicking::AssertKind;
            scope 6 {
                debug kind => _27;
            }
        }
        scope 7 {
            debug w => const W {{ a: S }};
        }
        scope 8 {
            debug left_val => _36;
            debug right_val => _37;
            let _42: core::panicking::AssertKind;
            scope 9 {
                debug kind => _42;
            }
        }
        scope 10 {
            debug y => const Y {{ a: S }};
        }
        scope 11 {
            debug left_val => _50;
            debug right_val => _51;
            let _56: core::panicking::AssertKind;
            scope 12 {
                debug kind => _56;
            }
        }
        scope 13 {
            debug u2 => _59;
        }
        scope 14 {
            debug left_val => _66;
            debug right_val => _67;
            let _72: core::panicking::AssertKind;
            scope 15 {
                debug kind => _72;
            }
        }
    }

    bb0: {
        _3 = const {alloc1: *mut u8};
        _2 = &(*_3);
        _5 = const 0_u8;
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &u8);
        _7 = (_1.1: &u8);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<u8, u8>(move _12, _6, _7, move _14);
    }

    bb2: {
        _15 = U { a: const 1_u8 };
        drop(_15) -> bb3;
    }

    bb3: {
        _18 = const {alloc1: *mut u8};
        _17 = &(*_18);
        _20 = const 1_u8;
        _19 = &_20;
        _16 = (move _17, move _19);
        _21 = (_16.0: &u8);
        _22 = (_16.1: &u8);
        _25 = (*_21);
        _26 = (*_22);
        _24 = Eq(move _25, move _26);
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<u8, u8>(move _27, _21, _22, move _29);
    }

    bb5: {
        drop(_30) -> bb6;
    }

    bb6: {
        _33 = const {alloc1: *mut u8};
        _32 = &(*_33);
        _35 = const 2_u8;
        _34 = &_35;
        _31 = (move _32, move _34);
        _36 = (_31.0: &u8);
        _37 = (_31.1: &u8);
        _40 = (*_36);
        _41 = (*_37);
        _39 = Eq(move _40, move _41);
        _38 = Not(move _39);
        switchInt(move _38) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _42 = core::panicking::AssertKind::Eq;
        _44 = Option::<Arguments<'_>>::None;
        _43 = core::panicking::assert_failed::<u8, u8>(move _42, _36, _37, move _44);
    }

    bb8: {
        _47 = const {alloc1: *mut u8};
        _46 = &(*_47);
        _49 = const 2_u8;
        _48 = &_49;
        _45 = (move _46, move _48);
        _50 = (_45.0: &u8);
        _51 = (_45.1: &u8);
        _54 = (*_50);
        _55 = (*_51);
        _53 = Eq(move _54, move _55);
        _52 = Not(move _53);
        switchInt(move _52) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _56 = core::panicking::AssertKind::Eq;
        _58 = Option::<Arguments<'_>>::None;
        _57 = core::panicking::assert_failed::<u8, u8>(move _56, _50, _51, move _58);
    }

    bb10: {
        _59 = U { a: const 1_u8 };
        _60 = std::mem::forget::<U>(move _59) -> bb11;
    }

    bb11: {
        _63 = const {alloc1: *mut u8};
        _62 = &(*_63);
        _65 = const 2_u8;
        _64 = &_65;
        _61 = (move _62, move _64);
        _66 = (_61.0: &u8);
        _67 = (_61.1: &u8);
        _70 = (*_66);
        _71 = (*_67);
        _69 = Eq(move _70, move _71);
        _68 = Not(move _69);
        switchInt(move _68) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _72 = core::panicking::AssertKind::Eq;
        _74 = Option::<Arguments<'_>>::None;
        _73 = core::panicking::assert_failed::<u8, u8>(move _72, _66, _67, move _74);
    }

    bb13: {
        return;
    }
}

alloc1 (static: CHECK, size: 1, align: 1) {
    00                                              │ .
}
