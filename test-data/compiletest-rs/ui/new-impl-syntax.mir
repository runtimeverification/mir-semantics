// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/new-impl-syntax.rs:10:1: 10:27>::fmt(_1: &Thingy, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 3];
    let _6: [&str; 3];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 2];
    let _9: [core::fmt::rt::Argument<'_>; 2];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &isize;
    let mut _12: core::fmt::rt::Argument<'_>;
    let _13: &isize;

    bb0: {
        _6 = [const "{ x: ", const ", y: ", const " }"];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _11 = &((*_1).0: isize);
        _10 = core::fmt::rt::Argument::<'_>::new_debug::<isize>(_11) -> bb1;
    }

    bb1: {
        _13 = &((*_1).1: isize);
        _12 = core::fmt::rt::Argument::<'_>::new_debug::<isize>(_13) -> bb2;
    }

    bb2: {
        _9 = [move _10, move _12];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb3;
    }

    bb3: {
        _0 = Formatter::<'_>::write_fmt(_2, move _3) -> bb4;
    }

    bb4: {
        return;
    }
}

fn <impl at ui/new-impl-syntax.rs:20:1: 20:55>::fmt(_1: &PolymorphicThingy<T>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 1];
    let _6: [&str; 1];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &T;

    bb0: {
        _6 = [const ""];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _11 = &((*_1).0: T);
        _10 = core::fmt::rt::Argument::<'_>::new_debug::<T>(_11) -> bb1;
    }

    bb1: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb2;
    }

    bb2: {
        _0 = Formatter::<'_>::write_fmt(_2, move _3) -> bb3;
    }

    bb3: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let _4: &[&str; 2];
    let _5: [&str; 2];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &Thingy;
    let _11: Thingy;
    let _12: ();
    let mut _13: std::fmt::Arguments<'_>;
    let mut _14: &[&str];
    let _15: &[&str; 2];
    let _16: [&str; 2];
    let mut _17: &[core::fmt::rt::Argument<'_>];
    let _18: &[core::fmt::rt::Argument<'_>; 1];
    let _19: [core::fmt::rt::Argument<'_>; 1];
    let mut _20: core::fmt::rt::Argument<'_>;
    let _21: &PolymorphicThingy<Thingy>;
    let _22: PolymorphicThingy<Thingy>;
    let mut _23: Thingy;

    bb0: {
        _5 = [const "", const "\n"];
        _4 = &_5;
        _3 = _4 as &[&str] (Pointer(Unsize));
        _11 = Thingy { x: const 1_isize, y: const 2_isize };
        _10 = &_11;
        _9 = core::fmt::rt::Argument::<'_>::new_debug::<Thingy>(_10) -> bb1;
    }

    bb1: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_v1(move _3, move _6) -> bb2;
    }

    bb2: {
        _1 = _print(move _2) -> bb3;
    }

    bb3: {
        _16 = [const "", const "\n"];
        _15 = &_16;
        _14 = _15 as &[&str] (Pointer(Unsize));
        _23 = Thingy { x: const 1_isize, y: const 2_isize };
        _22 = PolymorphicThingy::<Thingy> { x: move _23 };
        _21 = &_22;
        _20 = core::fmt::rt::Argument::<'_>::new_debug::<PolymorphicThingy<Thingy>>(_21) -> bb4;
    }

    bb4: {
        _19 = [move _20];
        _18 = &_19;
        _17 = _18 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _13 = Arguments::<'_>::new_v1(move _14, move _17) -> bb5;
    }

    bb5: {
        _12 = _print(move _13) -> bb6;
    }

    bb6: {
        return;
    }
}
