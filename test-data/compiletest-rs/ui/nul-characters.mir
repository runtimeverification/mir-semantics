// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: &str;
    let mut _5: (&usize, &usize);
    let mut _6: &usize;
    let _7: usize;
    let mut _8: &str;
    let mut _9: &usize;
    let _10: usize;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: usize;
    let mut _16: usize;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _20: (&usize, &usize);
    let mut _21: &usize;
    let _22: usize;
    let mut _23: &str;
    let mut _24: &usize;
    let _25: usize;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: usize;
    let mut _31: usize;
    let _33: !;
    let mut _34: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _35: (&&str, &&str);
    let mut _36: &&str;
    let mut _37: &&str;
    let mut _40: bool;
    let mut _41: bool;
    let _43: !;
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _45: (&&str, &&str);
    let mut _46: &&str;
    let mut _47: &&str;
    let mut _50: bool;
    let mut _51: bool;
    let _53: !;
    let mut _54: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _55: (&&str, &&str);
    let mut _56: &&str;
    let mut _57: &&str;
    let mut _60: bool;
    let mut _61: bool;
    let _63: !;
    let mut _64: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _65: std::str::Chars<'_>;
    let mut _66: std::str::Chars<'_>;
    let mut _67: &str;
    let mut _69: std::option::Option<char>;
    let mut _70: &mut std::str::Chars<'_>;
    let mut _71: isize;
    let mut _73: std::str::Chars<'_>;
    let mut _74: std::str::Chars<'_>;
    let mut _75: &str;
    let mut _77: std::option::Option<char>;
    let mut _78: &mut std::str::Chars<'_>;
    let mut _79: isize;
    let mut _81: (&char, &char);
    let mut _82: &char;
    let mut _83: &char;
    let mut _86: bool;
    let mut _87: bool;
    let mut _88: char;
    let mut _89: char;
    let _91: !;
    let mut _92: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _93: (&char, &char);
    let mut _94: &char;
    let _95: char;
    let mut _96: &char;
    let _97: char;
    let mut _100: bool;
    let mut _101: bool;
    let mut _102: char;
    let mut _103: char;
    let _105: !;
    let mut _106: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _107: (&char, &char);
    let mut _108: &char;
    let _109: char;
    let mut _110: &char;
    let _111: char;
    let mut _114: bool;
    let mut _115: bool;
    let mut _116: char;
    let mut _117: char;
    let _119: !;
    let mut _120: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _121: (&char, &char);
    let mut _122: &char;
    let _123: char;
    let mut _124: &char;
    let _125: char;
    let mut _128: bool;
    let mut _129: bool;
    let mut _130: char;
    let mut _131: char;
    let _133: !;
    let mut _134: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _135: bool;
    let mut _136: bool;
    let mut _137: &&str;
    let _138: &str;
    let mut _139: &&str;
    let _140: &str;
    let mut _141: !;
    let mut _142: bool;
    let mut _143: bool;
    let mut _144: &&str;
    let _145: &str;
    let mut _146: &&str;
    let _147: &str;
    let mut _148: !;
    scope 1 {
        debug all_nuls1 => _1;
        let _2: &str;
        scope 2 {
            debug all_nuls2 => _2;
            let _3: &str;
            scope 3 {
                debug all_nuls3 => _3;
                let _4: &str;
                scope 4 {
                    debug all_nuls4 => _4;
                    let _11: &usize;
                    let _12: &usize;
                    let _26: &usize;
                    let _27: &usize;
                    let _38: &&str;
                    let _39: &&str;
                    let _48: &&str;
                    let _49: &&str;
                    let _58: &&str;
                    let _59: &&str;
                    let mut _68: std::str::Chars<'_>;
                    let _98: &char;
                    let _99: &char;
                    let _112: &char;
                    let _113: &char;
                    let _126: &char;
                    let _127: &char;
                    scope 5 {
                        debug left_val => _11;
                        debug right_val => _12;
                        let _17: core::panicking::AssertKind;
                        scope 6 {
                            debug kind => _17;
                        }
                    }
                    scope 7 {
                        debug left_val => _26;
                        debug right_val => _27;
                        let _32: core::panicking::AssertKind;
                        scope 8 {
                            debug kind => _32;
                        }
                    }
                    scope 9 {
                        debug left_val => _38;
                        debug right_val => _39;
                        let _42: core::panicking::AssertKind;
                        scope 10 {
                            debug kind => _42;
                        }
                    }
                    scope 11 {
                        debug left_val => _48;
                        debug right_val => _49;
                        let _52: core::panicking::AssertKind;
                        scope 12 {
                            debug kind => _52;
                        }
                    }
                    scope 13 {
                        debug left_val => _58;
                        debug right_val => _59;
                        let _62: core::panicking::AssertKind;
                        scope 14 {
                            debug kind => _62;
                        }
                    }
                    scope 15 {
                        debug iter => _68;
                        let _72: char;
                        scope 16 {
                            debug c1 => _72;
                            let mut _76: std::str::Chars<'_>;
                            scope 17 {
                                debug iter => _76;
                                let _80: char;
                                scope 18 {
                                    debug c2 => _80;
                                    let _84: &char;
                                    let _85: &char;
                                    scope 19 {
                                        debug left_val => _84;
                                        debug right_val => _85;
                                        let _90: core::panicking::AssertKind;
                                        scope 20 {
                                            debug kind => _90;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    scope 21 {
                        debug left_val => _98;
                        debug right_val => _99;
                        let _104: core::panicking::AssertKind;
                        scope 22 {
                            debug kind => _104;
                        }
                    }
                    scope 23 {
                        debug left_val => _112;
                        debug right_val => _113;
                        let _118: core::panicking::AssertKind;
                        scope 24 {
                            debug kind => _118;
                        }
                    }
                    scope 25 {
                        debug left_val => _126;
                        debug right_val => _127;
                        let _132: core::panicking::AssertKind;
                        scope 26 {
                            debug kind => _132;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const "\0\0\0\0";
        _2 = const "\0\0\0\0";
        _3 = const "\0\0\0\0";
        _4 = const "\0\0\0\0";
        _8 = _1;
        _7 = core::str::<impl str>::len(move _8) -> bb1;
    }

    bb1: {
        _6 = &_7;
        _10 = const 4_usize;
        _9 = &_10;
        _5 = (move _6, move _9);
        _11 = (_5.0: &usize);
        _12 = (_5.1: &usize);
        _15 = (*_11);
        _16 = (*_12);
        _14 = Eq(move _15, move _16);
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<usize, usize>(move _17, _11, _12, move _19);
    }

    bb3: {
        _23 = _2;
        _22 = core::str::<impl str>::len(move _23) -> bb4;
    }

    bb4: {
        _21 = &_22;
        _25 = const 4_usize;
        _24 = &_25;
        _20 = (move _21, move _24);
        _26 = (_20.0: &usize);
        _27 = (_20.1: &usize);
        _30 = (*_26);
        _31 = (*_27);
        _29 = Eq(move _30, move _31);
        _28 = Not(move _29);
        switchInt(move _28) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _32 = core::panicking::AssertKind::Eq;
        _34 = Option::<Arguments<'_>>::None;
        _33 = core::panicking::assert_failed::<usize, usize>(move _32, _26, _27, move _34);
    }

    bb6: {
        _36 = &_1;
        _37 = &_2;
        _35 = (move _36, move _37);
        _38 = (_35.0: &&str);
        _39 = (_35.1: &&str);
        _41 = <&str as PartialEq>::eq(_38, _39) -> bb7;
    }

    bb7: {
        _40 = Not(move _41);
        switchInt(move _40) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _42 = core::panicking::AssertKind::Eq;
        _44 = Option::<Arguments<'_>>::None;
        _43 = core::panicking::assert_failed::<&str, &str>(move _42, _38, _39, move _44);
    }

    bb9: {
        _46 = &_2;
        _47 = &_3;
        _45 = (move _46, move _47);
        _48 = (_45.0: &&str);
        _49 = (_45.1: &&str);
        _51 = <&str as PartialEq>::eq(_48, _49) -> bb10;
    }

    bb10: {
        _50 = Not(move _51);
        switchInt(move _50) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _52 = core::panicking::AssertKind::Eq;
        _54 = Option::<Arguments<'_>>::None;
        _53 = core::panicking::assert_failed::<&str, &str>(move _52, _48, _49, move _54);
    }

    bb12: {
        _56 = &_3;
        _57 = &_4;
        _55 = (move _56, move _57);
        _58 = (_55.0: &&str);
        _59 = (_55.1: &&str);
        _61 = <&str as PartialEq>::eq(_58, _59) -> bb13;
    }

    bb13: {
        _60 = Not(move _61);
        switchInt(move _60) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _62 = core::panicking::AssertKind::Eq;
        _64 = Option::<Arguments<'_>>::None;
        _63 = core::panicking::assert_failed::<&str, &str>(move _62, _58, _59, move _64);
    }

    bb15: {
        _67 = _1;
        _66 = core::str::<impl str>::chars(move _67) -> bb16;
    }

    bb16: {
        _65 = <Chars<'_> as IntoIterator>::into_iter(move _66) -> bb17;
    }

    bb17: {
        _68 = move _65;
        goto -> bb18;
    }

    bb18: {
        _70 = &mut _68;
        _69 = <Chars<'_> as Iterator>::next(_70) -> bb19;
    }

    bb19: {
        _71 = discriminant(_69);
        switchInt(move _71) -> [0: bb22, 1: bb20, otherwise: bb21];
    }

    bb20: {
        _72 = ((_69 as Some).0: char);
        _75 = _1;
        _74 = core::str::<impl str>::chars(move _75) -> bb23;
    }

    bb21: {
        unreachable;
    }

    bb22: {
        _95 = const '\0';
        _94 = &_95;
        _97 = const '\0';
        _96 = &_97;
        _93 = (move _94, move _96);
        _98 = (_93.0: &char);
        _99 = (_93.1: &char);
        _102 = (*_98);
        _103 = (*_99);
        _101 = Eq(move _102, move _103);
        _100 = Not(move _101);
        switchInt(move _100) -> [0: bb30, otherwise: bb29];
    }

    bb23: {
        _73 = <Chars<'_> as IntoIterator>::into_iter(move _74) -> bb24;
    }

    bb24: {
        _76 = move _73;
        goto -> bb25;
    }

    bb25: {
        _78 = &mut _76;
        _77 = <Chars<'_> as Iterator>::next(_78) -> bb26;
    }

    bb26: {
        _79 = discriminant(_77);
        switchInt(move _79) -> [0: bb18, 1: bb27, otherwise: bb21];
    }

    bb27: {
        _80 = ((_77 as Some).0: char);
        _82 = &_72;
        _83 = &_80;
        _81 = (move _82, move _83);
        _84 = (_81.0: &char);
        _85 = (_81.1: &char);
        _88 = (*_84);
        _89 = (*_85);
        _87 = Eq(move _88, move _89);
        _86 = Not(move _87);
        switchInt(move _86) -> [0: bb25, otherwise: bb28];
    }

    bb28: {
        _90 = core::panicking::AssertKind::Eq;
        _92 = Option::<Arguments<'_>>::None;
        _91 = core::panicking::assert_failed::<char, char>(move _90, _84, _85, move _92);
    }

    bb29: {
        _104 = core::panicking::AssertKind::Eq;
        _106 = Option::<Arguments<'_>>::None;
        _105 = core::panicking::assert_failed::<char, char>(move _104, _98, _99, move _106);
    }

    bb30: {
        _109 = const '\0';
        _108 = &_109;
        _111 = const '\0';
        _110 = &_111;
        _107 = (move _108, move _110);
        _112 = (_107.0: &char);
        _113 = (_107.1: &char);
        _116 = (*_112);
        _117 = (*_113);
        _115 = Eq(move _116, move _117);
        _114 = Not(move _115);
        switchInt(move _114) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _118 = core::panicking::AssertKind::Eq;
        _120 = Option::<Arguments<'_>>::None;
        _119 = core::panicking::assert_failed::<char, char>(move _118, _112, _113, move _120);
    }

    bb32: {
        _123 = const '\0';
        _122 = &_123;
        _125 = const '\0';
        _124 = &_125;
        _121 = (move _122, move _124);
        _126 = (_121.0: &char);
        _127 = (_121.1: &char);
        _130 = (*_126);
        _131 = (*_127);
        _129 = Eq(move _130, move _131);
        _128 = Not(move _129);
        switchInt(move _128) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        _132 = core::panicking::AssertKind::Eq;
        _134 = Option::<Arguments<'_>>::None;
        _133 = core::panicking::assert_failed::<char, char>(move _132, _126, _127, move _134);
    }

    bb34: {
        _138 = const "Hello World";
        _137 = &_138;
        _140 = const "Hello \0World";
        _139 = &_140;
        _136 = <&str as PartialEq>::ne(move _137, move _139) -> bb35;
    }

    bb35: {
        _135 = Not(move _136);
        switchInt(move _135) -> [0: bb37, otherwise: bb36];
    }

    bb36: {
        _141 = core::panicking::panic(const "assertion failed: \\\"Hello World\\\" != \\\"Hello \\\\0World\\\"");
    }

    bb37: {
        _145 = const "Hello World";
        _144 = &_145;
        _147 = const "Hello World\0";
        _146 = &_147;
        _143 = <&str as PartialEq>::ne(move _144, move _146) -> bb38;
    }

    bb38: {
        _142 = Not(move _143);
        switchInt(move _142) -> [0: bb40, otherwise: bb39];
    }

    bb39: {
        _148 = core::panicking::panic(const "assertion failed: \\\"Hello World\\\" != \\\"Hello World\\\\0\\\"");
    }

    bb40: {
        return;
    }
}
