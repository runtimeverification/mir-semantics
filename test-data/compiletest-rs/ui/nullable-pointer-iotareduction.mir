// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
E::Nothing::2::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

fn <impl at ui/nullable-pointer-iotareduction.rs:12:1: 12:13>::is_none(_1: &E<T>) -> bool {
    debug self => _1;
    let mut _0: bool;
    let mut _2: isize;

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const true;
        goto -> bb4;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _0 = const false;
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

fn <impl at ui/nullable-pointer-iotareduction.rs:12:1: 12:13>::get_ref(_1: &E<T>) -> (isize, &T) {
    debug self => _1;
    let mut _0: (isize, &T);
    let mut _2: isize;
    let _3: !;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let _6: &[&str; 1];
    let _7: [&str; 1];
    let mut _8: &[core::fmt::rt::Argument<'_>];
    let _9: &[core::fmt::rt::Argument<'_>; 0];
    let _10: [core::fmt::rt::Argument<'_>; 0];
    let _11: isize;
    let _12: &T;
    scope 1 {
        debug x => _11;
        debug y => _12;
    }

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb1, 1: bb3, otherwise: bb2];
    }

    bb1: {
        _11 = (((*_1) as Thing).0: isize);
        _12 = &(((*_1) as Thing).1: T);
        _0 = (_11, _12);
        return;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _7 = [const "E::get_ref(Nothing::<T>)"];
        _6 = &_7;
        _5 = _6 as &[&str] (Pointer(Unsize));
        _10 = core::fmt::rt::Argument::<'_>::none() -> bb4;
    }

    bb4: {
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> bb5;
    }

    bb5: {
        _3 = panic_fmt(move _4);
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: &std::option::Option<&isize>;
    let _4: std::option::Option<&isize>;
    let mut _5: !;
    let _6: &isize;
    let _7: isize;
    let mut _10: std::option::Option<&&isize>;
    let mut _11: &std::option::Option<&isize>;
    let mut _12: (&&isize, &&isize);
    let mut _13: &&isize;
    let mut _14: &&isize;
    let _15: &isize;
    let _16: isize;
    let mut _19: bool;
    let mut _20: bool;
    let _22: !;
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: &E<&isize>;
    let _27: E<&isize>;
    let mut _28: !;
    let _29: &isize;
    let _30: isize;
    let mut _32: (isize, &&isize);
    let mut _33: &E<&isize>;
    let mut _35: (&&isize, &&isize);
    let mut _36: &&isize;
    let _37: &isize;
    let _38: isize;
    let mut _41: bool;
    let mut _42: bool;
    let _44: !;
    let mut _45: std::option::Option<std::fmt::Arguments<'_>>;
    let _46: !;
    let mut _47: std::fmt::Arguments<'_>;
    let mut _48: &[&str];
    let _49: &[&str; 1];
    let _50: [&str; 1];
    let mut _51: &[core::fmt::rt::Argument<'_>];
    let _52: &[core::fmt::rt::Argument<'_>; 0];
    let _53: [core::fmt::rt::Argument<'_>; 0];
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: &std::option::Option<std::boxed::Box<isize>>;
    let _57: std::option::Option<std::boxed::Box<isize>>;
    let mut _58: !;
    let _59: std::boxed::Box<isize>;
    let mut _61: std::boxed::Box<isize>;
    let mut _63: std::option::Option<&std::boxed::Box<isize>>;
    let mut _64: &std::option::Option<std::boxed::Box<isize>>;
    let mut _65: (&std::boxed::Box<isize>, &std::boxed::Box<isize>);
    let mut _66: &std::boxed::Box<isize>;
    let mut _67: &std::boxed::Box<isize>;
    let _68: std::boxed::Box<isize>;
    let mut _71: bool;
    let mut _72: bool;
    let _74: !;
    let mut _75: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: &E<std::boxed::Box<isize>>;
    let _79: E<std::boxed::Box<isize>>;
    let mut _80: !;
    let _81: std::boxed::Box<isize>;
    let mut _83: std::boxed::Box<isize>;
    let mut _84: (isize, &std::boxed::Box<isize>);
    let mut _85: &E<std::boxed::Box<isize>>;
    let mut _87: (&std::boxed::Box<isize>, &std::boxed::Box<isize>);
    let mut _88: &std::boxed::Box<isize>;
    let _89: std::boxed::Box<isize>;
    let mut _92: bool;
    let mut _93: bool;
    let _95: !;
    let mut _96: std::option::Option<std::fmt::Arguments<'_>>;
    let _97: !;
    let mut _98: std::fmt::Arguments<'_>;
    let mut _99: &[&str];
    let _100: &[&str; 1];
    let _101: [&str; 1];
    let mut _102: &[core::fmt::rt::Argument<'_>];
    let _103: &[core::fmt::rt::Argument<'_>; 0];
    let _104: [core::fmt::rt::Argument<'_>; 0];
    let mut _105: bool;
    let mut _106: bool;
    let mut _107: &std::option::Option<std::string::String>;
    let _108: std::option::Option<std::string::String>;
    let mut _109: !;
    let _110: std::string::String;
    let _111: &str;
    let mut _113: std::string::String;
    let mut _115: std::option::Option<&std::string::String>;
    let mut _116: &std::option::Option<std::string::String>;
    let mut _117: (&std::string::String, &std::string::String);
    let mut _118: &std::string::String;
    let mut _119: &std::string::String;
    let _120: std::string::String;
    let _121: &str;
    let mut _124: bool;
    let mut _125: bool;
    let _127: !;
    let mut _128: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _129: bool;
    let mut _130: bool;
    let mut _131: &E<std::string::String>;
    let _132: E<std::string::String>;
    let mut _133: !;
    let _134: std::string::String;
    let _135: &str;
    let mut _137: std::string::String;
    let mut _138: (isize, &std::string::String);
    let mut _139: &E<std::string::String>;
    let mut _141: (&std::string::String, &std::string::String);
    let mut _142: &std::string::String;
    let _143: std::string::String;
    let _144: &str;
    let mut _147: bool;
    let mut _148: bool;
    let _150: !;
    let mut _151: std::option::Option<std::fmt::Arguments<'_>>;
    let _152: !;
    let mut _153: std::fmt::Arguments<'_>;
    let mut _154: &[&str];
    let _155: &[&str; 1];
    let _156: [&str; 1];
    let mut _157: &[core::fmt::rt::Argument<'_>];
    let _158: &[core::fmt::rt::Argument<'_>; 0];
    let _159: [core::fmt::rt::Argument<'_>; 0];
    let mut _160: bool;
    let mut _161: bool;
    let mut _162: &std::option::Option<std::vec::Vec<isize>>;
    let _163: std::option::Option<std::vec::Vec<isize>>;
    let mut _164: !;
    let _165: std::vec::Vec<isize>;
    let mut _166: std::boxed::Box<[isize]>;
    let mut _167: usize;
    let mut _168: usize;
    let mut _169: *mut u8;
    let mut _170: std::boxed::Box<[isize; 2]>;
    let mut _172: std::vec::Vec<isize>;
    let mut _174: std::option::Option<&std::vec::Vec<isize>>;
    let mut _175: &std::option::Option<std::vec::Vec<isize>>;
    let mut _176: (&std::vec::Vec<isize>, &std::vec::Vec<isize>);
    let mut _177: &std::vec::Vec<isize>;
    let mut _178: &std::vec::Vec<isize>;
    let _179: std::vec::Vec<isize>;
    let mut _180: std::boxed::Box<[isize]>;
    let mut _181: usize;
    let mut _182: usize;
    let mut _183: *mut u8;
    let mut _184: std::boxed::Box<[isize; 2]>;
    let mut _187: bool;
    let mut _188: bool;
    let _190: !;
    let mut _191: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _192: bool;
    let mut _193: bool;
    let mut _194: &E<std::vec::Vec<isize>>;
    let _195: E<std::vec::Vec<isize>>;
    let mut _196: !;
    let _197: std::vec::Vec<isize>;
    let mut _198: std::boxed::Box<[isize]>;
    let mut _199: usize;
    let mut _200: usize;
    let mut _201: *mut u8;
    let mut _202: std::boxed::Box<[isize; 2]>;
    let mut _204: std::vec::Vec<isize>;
    let mut _205: (isize, &std::vec::Vec<isize>);
    let mut _206: &E<std::vec::Vec<isize>>;
    let mut _208: (&std::vec::Vec<isize>, &std::vec::Vec<isize>);
    let mut _209: &std::vec::Vec<isize>;
    let _210: std::vec::Vec<isize>;
    let mut _211: std::boxed::Box<[isize]>;
    let mut _212: usize;
    let mut _213: usize;
    let mut _214: *mut u8;
    let mut _215: std::boxed::Box<[isize; 2]>;
    let mut _218: bool;
    let mut _219: bool;
    let _221: !;
    let mut _222: std::option::Option<std::fmt::Arguments<'_>>;
    let _223: !;
    let mut _224: std::fmt::Arguments<'_>;
    let mut _225: &[&str];
    let _226: &[&str; 1];
    let _227: [&str; 1];
    let mut _228: &[core::fmt::rt::Argument<'_>];
    let _229: &[core::fmt::rt::Argument<'_>; 0];
    let _230: [core::fmt::rt::Argument<'_>; 0];
    let mut _231: bool;
    let mut _232: bool;
    let mut _233: &std::option::Option<fn()>;
    let _234: std::option::Option<fn()>;
    let mut _235: !;
    let mut _237: fn();
    let mut _239: std::option::Option<&fn()>;
    let mut _240: &std::option::Option<fn()>;
    let mut _241: (&fn(), &fn());
    let mut _242: &fn();
    let _243: fn();
    let mut _244: &fn();
    let _245: fn();
    let mut _248: bool;
    let mut _249: bool;
    let mut _250: fn();
    let mut _251: fn();
    let _253: !;
    let mut _254: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _255: bool;
    let mut _256: bool;
    let mut _257: &E<fn()>;
    let _258: E<fn()>;
    let mut _259: !;
    let mut _261: fn();
    let mut _262: (isize, &fn());
    let mut _263: &E<fn()>;
    let mut _265: (&fn(), &fn());
    let mut _266: &fn();
    let _267: fn();
    let mut _268: &fn();
    let _269: fn();
    let mut _272: bool;
    let mut _273: bool;
    let mut _274: fn();
    let mut _275: fn();
    let _277: !;
    let mut _278: std::option::Option<std::fmt::Arguments<'_>>;
    let _279: !;
    let mut _280: std::fmt::Arguments<'_>;
    let mut _281: &[&str];
    let _282: &[&str; 1];
    let _283: [&str; 1];
    let mut _284: &[core::fmt::rt::Argument<'_>];
    let _285: &[core::fmt::rt::Argument<'_>; 0];
    let _286: [core::fmt::rt::Argument<'_>; 0];
    let mut _287: *const [isize; 2];
    let mut _288: *const [isize; 2];
    let mut _289: *const [isize; 2];
    let mut _290: *const [isize; 2];
    let mut _297: *const ();
    let mut _298: usize;
    let mut _299: usize;
    let mut _300: usize;
    let mut _301: usize;
    let mut _302: bool;
    let mut _309: *const ();
    let mut _310: usize;
    let mut _311: usize;
    let mut _312: usize;
    let mut _313: usize;
    let mut _314: bool;
    scope 1 {
        debug e => _6;
        let _8: std::option::Option<&isize>;
        scope 2 {
            debug s_ => _8;
            let _9: &&isize;
            scope 3 {
                debug ptr => _9;
                let _17: &&isize;
                let _18: &&isize;
                scope 4 {
                    debug left_val => _17;
                    debug right_val => _18;
                    let _21: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _21;
                    }
                }
            }
        }
    }
    scope 6 {
        debug e => _29;
        let _31: E<&isize>;
        scope 7 {
            debug t_ => _31;
            let _34: &&isize;
            scope 8 {
                debug ptr => _34;
                let _39: &&isize;
                let _40: &&isize;
                scope 9 {
                    debug left_val => _39;
                    debug right_val => _40;
                    let _43: core::panicking::AssertKind;
                    scope 10 {
                        debug kind => _43;
                    }
                }
            }
        }
    }
    scope 11 {
        debug e => _59;
        let _60: std::option::Option<std::boxed::Box<isize>>;
        scope 12 {
            debug s_ => _60;
            let _62: &std::boxed::Box<isize>;
            scope 13 {
                debug ptr => _62;
                let _69: &std::boxed::Box<isize>;
                let _70: &std::boxed::Box<isize>;
                scope 14 {
                    debug left_val => _69;
                    debug right_val => _70;
                    let _73: core::panicking::AssertKind;
                    scope 15 {
                        debug kind => _73;
                    }
                }
            }
        }
    }
    scope 16 {
        debug e => _81;
        let _82: E<std::boxed::Box<isize>>;
        scope 17 {
            debug t_ => _82;
            let _86: &std::boxed::Box<isize>;
            scope 18 {
                debug ptr => _86;
                let _90: &std::boxed::Box<isize>;
                let _91: &std::boxed::Box<isize>;
                scope 19 {
                    debug left_val => _90;
                    debug right_val => _91;
                    let _94: core::panicking::AssertKind;
                    scope 20 {
                        debug kind => _94;
                    }
                }
            }
        }
    }
    scope 21 {
        debug e => _110;
        let _112: std::option::Option<std::string::String>;
        scope 22 {
            debug s_ => _112;
            let _114: &std::string::String;
            scope 23 {
                debug ptr => _114;
                let _122: &std::string::String;
                let _123: &std::string::String;
                scope 24 {
                    debug left_val => _122;
                    debug right_val => _123;
                    let _126: core::panicking::AssertKind;
                    scope 25 {
                        debug kind => _126;
                    }
                }
            }
        }
    }
    scope 26 {
        debug e => _134;
        let _136: E<std::string::String>;
        scope 27 {
            debug t_ => _136;
            let _140: &std::string::String;
            scope 28 {
                debug ptr => _140;
                let _145: &std::string::String;
                let _146: &std::string::String;
                scope 29 {
                    debug left_val => _145;
                    debug right_val => _146;
                    let _149: core::panicking::AssertKind;
                    scope 30 {
                        debug kind => _149;
                    }
                }
            }
        }
    }
    scope 31 {
        debug e => _165;
        let _171: std::option::Option<std::vec::Vec<isize>>;
        scope 33 {
            debug s_ => _171;
            let _173: &std::vec::Vec<isize>;
            scope 34 {
                debug ptr => _173;
                let _185: &std::vec::Vec<isize>;
                let _186: &std::vec::Vec<isize>;
                let mut _303: *const ();
                let mut _304: usize;
                let mut _305: usize;
                let mut _306: usize;
                let mut _307: usize;
                let mut _308: bool;
                scope 35 {
                }
                scope 36 {
                    debug left_val => _185;
                    debug right_val => _186;
                    let _189: core::panicking::AssertKind;
                    scope 37 {
                        debug kind => _189;
                    }
                }
            }
        }
    }
    scope 32 {
    }
    scope 38 {
        debug e => _197;
        let _203: E<std::vec::Vec<isize>>;
        scope 40 {
            debug t_ => _203;
            let _207: &std::vec::Vec<isize>;
            scope 41 {
                debug ptr => _207;
                let _216: &std::vec::Vec<isize>;
                let _217: &std::vec::Vec<isize>;
                let mut _291: *const ();
                let mut _292: usize;
                let mut _293: usize;
                let mut _294: usize;
                let mut _295: usize;
                let mut _296: bool;
                scope 42 {
                }
                scope 43 {
                    debug left_val => _216;
                    debug right_val => _217;
                    let _220: core::panicking::AssertKind;
                    scope 44 {
                        debug kind => _220;
                    }
                }
            }
        }
    }
    scope 39 {
    }
    scope 45 {
        debug e => main;
        let _236: std::option::Option<fn()>;
        scope 46 {
            debug s_ => _236;
            let _238: &fn();
            scope 47 {
                debug pthing => _238;
                let _246: &fn();
                let _247: &fn();
                scope 48 {
                    debug left_val => _246;
                    debug right_val => _247;
                    let _252: core::panicking::AssertKind;
                    scope 49 {
                        debug kind => _252;
                    }
                }
            }
        }
    }
    scope 50 {
        debug e => main;
        let _260: E<fn()>;
        scope 51 {
            debug t_ => _260;
            let _264: &fn();
            scope 52 {
                debug pthing => _264;
                let _270: &fn();
                let _271: &fn();
                scope 53 {
                    debug left_val => _270;
                    debug right_val => _271;
                    let _276: core::panicking::AssertKind;
                    scope 54 {
                        debug kind => _276;
                    }
                }
            }
        }
    }

    bb0: {
        _4 = Option::<&isize>::None;
        _3 = &_4;
        _2 = Option::<&isize>::is_none(move _3) -> bb1;
    }

    bb1: {
        _1 = Not(move _2);
        switchInt(move _1) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _5 = core::panicking::panic(const "assertion failed: None::<&isize>.is_none()");
    }

    bb3: {
        _7 = const 17_isize;
        _6 = &_7;
        _8 = Option::<&isize>::Some(_6);
        _11 = &_8;
        _10 = Option::<&isize>::as_ref(move _11) -> bb4;
    }

    bb4: {
        _9 = Option::<&&isize>::unwrap(move _10) -> bb5;
    }

    bb5: {
        _13 = _9;
        _16 = const 17_isize;
        _15 = &_16;
        _14 = &_15;
        _12 = (move _13, move _14);
        _17 = (_12.0: &&isize);
        _18 = (_12.1: &&isize);
        _20 = <&isize as PartialEq>::eq(_17, _18) -> bb6;
    }

    bb6: {
        _19 = Not(move _20);
        switchInt(move _19) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _21 = core::panicking::AssertKind::Eq;
        _23 = Option::<Arguments<'_>>::None;
        _22 = core::panicking::assert_failed::<&isize, &isize>(move _21, _17, _18, move _23);
    }

    bb8: {
        _27 = E::<&isize>::Nothing(const (), const ((), ()), const []);
        _26 = &_27;
        _25 = E::<&isize>::is_none(move _26) -> bb9;
    }

    bb9: {
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _28 = core::panicking::panic(const "assertion failed: E::Nothing::<&isize>((), ((), ()), [23; 0]).is_none()");
    }

    bb11: {
        _30 = const 17_isize;
        _29 = &_30;
        _31 = E::<&isize>::Thing(const 23_isize, _29);
        _33 = &_31;
        _32 = E::<&isize>::get_ref(move _33) -> bb12;
    }

    bb12: {
        switchInt((_32.0: isize)) -> [23: bb14, otherwise: bb13];
    }

    bb13: {
        _50 = [const "Thing::<&isize>(23, &17).get_ref() != (23, _)"];
        _49 = &_50;
        _48 = _49 as &[&str] (Pointer(Unsize));
        _53 = core::fmt::rt::Argument::<'_>::none() -> bb18;
    }

    bb14: {
        _34 = (_32.1: &&isize);
        _38 = const 17_isize;
        _37 = &_38;
        _36 = &_37;
        _35 = (_34, move _36);
        _39 = (_35.0: &&isize);
        _40 = (_35.1: &&isize);
        _42 = <&isize as PartialEq>::eq(_39, _40) -> bb15;
    }

    bb15: {
        _41 = Not(move _42);
        switchInt(move _41) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _43 = core::panicking::AssertKind::Eq;
        _45 = Option::<Arguments<'_>>::None;
        _44 = core::panicking::assert_failed::<&isize, &isize>(move _43, _39, _40, move _45);
    }

    bb17: {
        _57 = Option::<Box<isize>>::None;
        _56 = &_57;
        _55 = Option::<Box<isize>>::is_none(move _56) -> [return: bb20, unwind: bb148];
    }

    bb18: {
        _52 = &_53;
        _51 = _52 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _47 = Arguments::<'_>::new_v1(move _48, move _51) -> bb19;
    }

    bb19: {
        _46 = panic_fmt(move _47);
    }

    bb20: {
        _54 = Not(move _55);
        drop(_57) -> bb21;
    }

    bb21: {
        switchInt(move _54) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        _58 = core::panicking::panic(const "assertion failed: None::<Box<isize>>.is_none()");
    }

    bb23: {
        _59 = Box::<isize>::new(const 18_isize) -> bb24;
    }

    bb24: {
        _61 = move _59;
        _60 = Option::<Box<isize>>::Some(move _61);
        _64 = &_60;
        _63 = Option::<Box<isize>>::as_ref(move _64) -> [return: bb25, unwind: bb147];
    }

    bb25: {
        _62 = Option::<&Box<isize>>::unwrap(move _63) -> [return: bb26, unwind: bb147];
    }

    bb26: {
        _66 = _62;
        _68 = Box::<isize>::new(const 18_isize) -> [return: bb27, unwind: bb147];
    }

    bb27: {
        _67 = &_68;
        _65 = (move _66, move _67);
        _69 = (_65.0: &std::boxed::Box<isize>);
        _70 = (_65.1: &std::boxed::Box<isize>);
        _72 = <Box<isize> as PartialEq>::eq(_69, _70) -> [return: bb28, unwind: bb145];
    }

    bb28: {
        _71 = Not(move _72);
        switchInt(move _71) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _73 = core::panicking::AssertKind::Eq;
        _75 = Option::<Arguments<'_>>::None;
        _74 = core::panicking::assert_failed::<Box<isize>, Box<isize>>(move _73, _69, _70, move _75) -> bb145;
    }

    bb30: {
        drop(_60) -> [return: bb31, unwind: bb146];
    }

    bb31: {
        drop(_68) -> bb32;
    }

    bb32: {
        _79 = E::<Box<isize>>::Nothing(const (), const ((), ()), const []);
        _78 = &_79;
        _77 = E::<Box<isize>>::is_none(move _78) -> [return: bb33, unwind: bb144];
    }

    bb33: {
        _76 = Not(move _77);
        drop(_79) -> bb34;
    }

    bb34: {
        switchInt(move _76) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _80 = core::panicking::panic(const "assertion failed: E::Nothing::<Box<isize>>((), ((), ()), [23; 0]).is_none()");
    }

    bb36: {
        _81 = Box::<isize>::new(const 18_isize) -> bb37;
    }

    bb37: {
        _83 = move _81;
        _82 = E::<Box<isize>>::Thing(const 23_isize, move _83);
        _85 = &_82;
        _84 = E::<Box<isize>>::get_ref(move _85) -> [return: bb38, unwind: bb143];
    }

    bb38: {
        switchInt((_84.0: isize)) -> [23: bb40, otherwise: bb39];
    }

    bb39: {
        _101 = [const "Thing::<Box<isize>>(23, Box::new(18)).get_ref() != (23, _)"];
        _100 = &_101;
        _99 = _100 as &[&str] (Pointer(Unsize));
        _104 = core::fmt::rt::Argument::<'_>::none() -> [return: bb46, unwind: bb143];
    }

    bb40: {
        _86 = (_84.1: &std::boxed::Box<isize>);
        _89 = Box::<isize>::new(const 18_isize) -> [return: bb41, unwind: bb143];
    }

    bb41: {
        _88 = &_89;
        _87 = (_86, move _88);
        _90 = (_87.0: &std::boxed::Box<isize>);
        _91 = (_87.1: &std::boxed::Box<isize>);
        _93 = <Box<isize> as PartialEq>::eq(_90, _91) -> [return: bb42, unwind: bb142];
    }

    bb42: {
        _92 = Not(move _93);
        switchInt(move _92) -> [0: bb44, otherwise: bb43];
    }

    bb43: {
        _94 = core::panicking::AssertKind::Eq;
        _96 = Option::<Arguments<'_>>::None;
        _95 = core::panicking::assert_failed::<Box<isize>, Box<isize>>(move _94, _90, _91, move _96) -> bb142;
    }

    bb44: {
        drop(_89) -> [return: bb45, unwind: bb143];
    }

    bb45: {
        drop(_82) -> bb48;
    }

    bb46: {
        _103 = &_104;
        _102 = _103 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _98 = Arguments::<'_>::new_v1(move _99, move _102) -> [return: bb47, unwind: bb143];
    }

    bb47: {
        _97 = panic_fmt(move _98) -> bb143;
    }

    bb48: {
        _108 = Option::<String>::None;
        _107 = &_108;
        _106 = Option::<String>::is_none(move _107) -> [return: bb49, unwind: bb141];
    }

    bb49: {
        _105 = Not(move _106);
        drop(_108) -> bb50;
    }

    bb50: {
        switchInt(move _105) -> [0: bb52, otherwise: bb51];
    }

    bb51: {
        _109 = core::panicking::panic(const "assertion failed: None::<String>.is_none()");
    }

    bb52: {
        _111 = const "foo";
        _110 = <str as ToString>::to_string(_111) -> bb53;
    }

    bb53: {
        _113 = move _110;
        _112 = Option::<String>::Some(move _113);
        _116 = &_112;
        _115 = Option::<String>::as_ref(move _116) -> [return: bb54, unwind: bb140];
    }

    bb54: {
        _114 = Option::<&String>::unwrap(move _115) -> [return: bb55, unwind: bb140];
    }

    bb55: {
        _118 = _114;
        _121 = const "foo";
        _120 = <str as ToString>::to_string(_121) -> [return: bb56, unwind: bb140];
    }

    bb56: {
        _119 = &_120;
        _117 = (move _118, move _119);
        _122 = (_117.0: &std::string::String);
        _123 = (_117.1: &std::string::String);
        _125 = <String as PartialEq>::eq(_122, _123) -> [return: bb57, unwind: bb138];
    }

    bb57: {
        _124 = Not(move _125);
        switchInt(move _124) -> [0: bb59, otherwise: bb58];
    }

    bb58: {
        _126 = core::panicking::AssertKind::Eq;
        _128 = Option::<Arguments<'_>>::None;
        _127 = core::panicking::assert_failed::<String, String>(move _126, _122, _123, move _128) -> bb138;
    }

    bb59: {
        drop(_112) -> [return: bb60, unwind: bb139];
    }

    bb60: {
        drop(_120) -> bb61;
    }

    bb61: {
        _132 = E::<String>::Nothing(const (), const ((), ()), const []);
        _131 = &_132;
        _130 = E::<String>::is_none(move _131) -> [return: bb62, unwind: bb137];
    }

    bb62: {
        _129 = Not(move _130);
        drop(_132) -> bb63;
    }

    bb63: {
        switchInt(move _129) -> [0: bb65, otherwise: bb64];
    }

    bb64: {
        _133 = core::panicking::panic(const "assertion failed: E::Nothing::<String>((), ((), ()), [23; 0]).is_none()");
    }

    bb65: {
        _135 = const "foo";
        _134 = <str as ToString>::to_string(_135) -> bb66;
    }

    bb66: {
        _137 = move _134;
        _136 = E::<String>::Thing(const 23_isize, move _137);
        _139 = &_136;
        _138 = E::<String>::get_ref(move _139) -> [return: bb67, unwind: bb136];
    }

    bb67: {
        switchInt((_138.0: isize)) -> [23: bb69, otherwise: bb68];
    }

    bb68: {
        _156 = [const "Thing::<String>(23, \"foo\".to_string()).get_ref() != (23, _)"];
        _155 = &_156;
        _154 = _155 as &[&str] (Pointer(Unsize));
        _159 = core::fmt::rt::Argument::<'_>::none() -> [return: bb75, unwind: bb136];
    }

    bb69: {
        _140 = (_138.1: &std::string::String);
        _144 = const "foo";
        _143 = <str as ToString>::to_string(_144) -> [return: bb70, unwind: bb136];
    }

    bb70: {
        _142 = &_143;
        _141 = (_140, move _142);
        _145 = (_141.0: &std::string::String);
        _146 = (_141.1: &std::string::String);
        _148 = <String as PartialEq>::eq(_145, _146) -> [return: bb71, unwind: bb135];
    }

    bb71: {
        _147 = Not(move _148);
        switchInt(move _147) -> [0: bb73, otherwise: bb72];
    }

    bb72: {
        _149 = core::panicking::AssertKind::Eq;
        _151 = Option::<Arguments<'_>>::None;
        _150 = core::panicking::assert_failed::<String, String>(move _149, _145, _146, move _151) -> bb135;
    }

    bb73: {
        drop(_143) -> [return: bb74, unwind: bb136];
    }

    bb74: {
        drop(_136) -> bb77;
    }

    bb75: {
        _158 = &_159;
        _157 = _158 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _153 = Arguments::<'_>::new_v1(move _154, move _157) -> [return: bb76, unwind: bb136];
    }

    bb76: {
        _152 = panic_fmt(move _153) -> bb136;
    }

    bb77: {
        _163 = Option::<Vec<isize>>::None;
        _162 = &_163;
        _161 = Option::<Vec<isize>>::is_none(move _162) -> [return: bb78, unwind: bb134];
    }

    bb78: {
        _160 = Not(move _161);
        drop(_163) -> bb79;
    }

    bb79: {
        switchInt(move _160) -> [0: bb81, otherwise: bb80];
    }

    bb80: {
        _164 = core::panicking::panic(const "assertion failed: None::<Vec<isize>>.is_none()");
    }

    bb81: {
        _167 = SizeOf([isize; 2]);
        _168 = AlignOf([isize; 2]);
        _169 = alloc::alloc::exchange_malloc(move _167, move _168) -> bb82;
    }

    bb82: {
        _170 = ShallowInitBox(move _169, [isize; 2]);
        _287 = (((_170.0: std::ptr::Unique<[isize; 2]>).0: std::ptr::NonNull<[isize; 2]>).0: *const [isize; 2]);
        _309 = _287 as *const () (PtrToPtr);
        _310 = _309 as usize (Transmute);
        _311 = AlignOf(isize);
        _312 = Sub(_311, const 1_usize);
        _313 = BitAnd(_310, _312);
        _314 = Eq(_313, const 0_usize);
        assert(_314, "misaligned pointer dereference: address must be a multiple of {} but is {}", _311, _310) -> [success: bb153, unwind unreachable];
    }

    bb83: {
        _172 = move _165;
        _171 = Option::<Vec<isize>>::Some(move _172);
        _175 = &_171;
        _174 = Option::<Vec<isize>>::as_ref(move _175) -> [return: bb84, unwind: bb133];
    }

    bb84: {
        _173 = Option::<&Vec<isize>>::unwrap(move _174) -> [return: bb85, unwind: bb133];
    }

    bb85: {
        _177 = _173;
        _181 = SizeOf([isize; 2]);
        _182 = AlignOf([isize; 2]);
        _183 = alloc::alloc::exchange_malloc(move _181, move _182) -> [return: bb86, unwind: bb133];
    }

    bb86: {
        _184 = ShallowInitBox(move _183, [isize; 2]);
        _288 = (((_184.0: std::ptr::Unique<[isize; 2]>).0: std::ptr::NonNull<[isize; 2]>).0: *const [isize; 2]);
        _303 = _288 as *const () (PtrToPtr);
        _304 = _303 as usize (Transmute);
        _305 = AlignOf(isize);
        _306 = Sub(_305, const 1_usize);
        _307 = BitAnd(_304, _306);
        _308 = Eq(_307, const 0_usize);
        assert(_308, "misaligned pointer dereference: address must be a multiple of {} but is {}", _305, _304) -> [success: bb152, unwind unreachable];
    }

    bb87: {
        _178 = &_179;
        _176 = (move _177, move _178);
        _185 = (_176.0: &std::vec::Vec<isize>);
        _186 = (_176.1: &std::vec::Vec<isize>);
        _188 = <Vec<isize> as PartialEq>::eq(_185, _186) -> [return: bb88, unwind: bb131];
    }

    bb88: {
        _187 = Not(move _188);
        switchInt(move _187) -> [0: bb90, otherwise: bb89];
    }

    bb89: {
        _189 = core::panicking::AssertKind::Eq;
        _191 = Option::<Arguments<'_>>::None;
        _190 = core::panicking::assert_failed::<Vec<isize>, Vec<isize>>(move _189, _185, _186, move _191) -> bb131;
    }

    bb90: {
        drop(_171) -> [return: bb91, unwind: bb132];
    }

    bb91: {
        drop(_179) -> bb92;
    }

    bb92: {
        _195 = E::<Vec<isize>>::Nothing(const (), const ((), ()), const []);
        _194 = &_195;
        _193 = E::<Vec<isize>>::is_none(move _194) -> [return: bb93, unwind: bb130];
    }

    bb93: {
        _192 = Not(move _193);
        drop(_195) -> bb94;
    }

    bb94: {
        switchInt(move _192) -> [0: bb96, otherwise: bb95];
    }

    bb95: {
        _196 = core::panicking::panic(const "assertion failed: E::Nothing::<Vec<isize>>((), ((), ()), [23; 0]).is_none()");
    }

    bb96: {
        _199 = SizeOf([isize; 2]);
        _200 = AlignOf([isize; 2]);
        _201 = alloc::alloc::exchange_malloc(move _199, move _200) -> bb97;
    }

    bb97: {
        _202 = ShallowInitBox(move _201, [isize; 2]);
        _289 = (((_202.0: std::ptr::Unique<[isize; 2]>).0: std::ptr::NonNull<[isize; 2]>).0: *const [isize; 2]);
        _297 = _289 as *const () (PtrToPtr);
        _298 = _297 as usize (Transmute);
        _299 = AlignOf(isize);
        _300 = Sub(_299, const 1_usize);
        _301 = BitAnd(_298, _300);
        _302 = Eq(_301, const 0_usize);
        assert(_302, "misaligned pointer dereference: address must be a multiple of {} but is {}", _299, _298) -> [success: bb151, unwind unreachable];
    }

    bb98: {
        _204 = move _197;
        _203 = E::<Vec<isize>>::Thing(const 23_isize, move _204);
        _206 = &_203;
        _205 = E::<Vec<isize>>::get_ref(move _206) -> [return: bb99, unwind: bb129];
    }

    bb99: {
        switchInt((_205.0: isize)) -> [23: bb101, otherwise: bb100];
    }

    bb100: {
        _227 = [const "Thing::<Vec<isize>>(23, vec![20, 22]).get_ref() != (23, _)"];
        _226 = &_227;
        _225 = _226 as &[&str] (Pointer(Unsize));
        _230 = core::fmt::rt::Argument::<'_>::none() -> [return: bb108, unwind: bb129];
    }

    bb101: {
        _207 = (_205.1: &std::vec::Vec<isize>);
        _212 = SizeOf([isize; 2]);
        _213 = AlignOf([isize; 2]);
        _214 = alloc::alloc::exchange_malloc(move _212, move _213) -> [return: bb102, unwind: bb129];
    }

    bb102: {
        _215 = ShallowInitBox(move _214, [isize; 2]);
        _290 = (((_215.0: std::ptr::Unique<[isize; 2]>).0: std::ptr::NonNull<[isize; 2]>).0: *const [isize; 2]);
        _291 = _290 as *const () (PtrToPtr);
        _292 = _291 as usize (Transmute);
        _293 = AlignOf(isize);
        _294 = Sub(_293, const 1_usize);
        _295 = BitAnd(_292, _294);
        _296 = Eq(_295, const 0_usize);
        assert(_296, "misaligned pointer dereference: address must be a multiple of {} but is {}", _293, _292) -> [success: bb150, unwind unreachable];
    }

    bb103: {
        _209 = &_210;
        _208 = (_207, move _209);
        _216 = (_208.0: &std::vec::Vec<isize>);
        _217 = (_208.1: &std::vec::Vec<isize>);
        _219 = <Vec<isize> as PartialEq>::eq(_216, _217) -> [return: bb104, unwind: bb128];
    }

    bb104: {
        _218 = Not(move _219);
        switchInt(move _218) -> [0: bb106, otherwise: bb105];
    }

    bb105: {
        _220 = core::panicking::AssertKind::Eq;
        _222 = Option::<Arguments<'_>>::None;
        _221 = core::panicking::assert_failed::<Vec<isize>, Vec<isize>>(move _220, _216, _217, move _222) -> bb128;
    }

    bb106: {
        drop(_210) -> [return: bb107, unwind: bb129];
    }

    bb107: {
        drop(_203) -> bb110;
    }

    bb108: {
        _229 = &_230;
        _228 = _229 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _224 = Arguments::<'_>::new_v1(move _225, move _228) -> [return: bb109, unwind: bb129];
    }

    bb109: {
        _223 = panic_fmt(move _224) -> bb129;
    }

    bb110: {
        _234 = Option::<fn()>::None;
        _233 = &_234;
        _232 = Option::<fn()>::is_none(move _233) -> bb111;
    }

    bb111: {
        _231 = Not(move _232);
        switchInt(move _231) -> [0: bb113, otherwise: bb112];
    }

    bb112: {
        _235 = core::panicking::panic(const "assertion failed: None::<fn()>.is_none()");
    }

    bb113: {
        _237 = main as fn() (Pointer(ReifyFnPointer));
        _236 = Option::<fn()>::Some(move _237);
        _240 = &_236;
        _239 = Option::<fn()>::as_ref(move _240) -> bb114;
    }

    bb114: {
        _238 = Option::<&fn()>::unwrap(move _239) -> bb115;
    }

    bb115: {
        _243 = main as fn() (Pointer(ReifyFnPointer));
        _242 = &_243;
        _245 = (*_238);
        _244 = &_245;
        _241 = (move _242, move _244);
        _246 = (_241.0: &fn());
        _247 = (_241.1: &fn());
        _250 = (*_246);
        _251 = (*_247);
        _249 = Eq(move _250, move _251);
        _248 = Not(move _249);
        switchInt(move _248) -> [0: bb117, otherwise: bb116];
    }

    bb116: {
        _252 = core::panicking::AssertKind::Eq;
        _254 = Option::<Arguments<'_>>::None;
        _253 = core::panicking::assert_failed::<fn(), fn()>(move _252, _246, _247, move _254);
    }

    bb117: {
        _258 = E::<fn()>::Nothing(const (), const ((), ()), const []);
        _257 = &_258;
        _256 = E::<fn()>::is_none(move _257) -> bb118;
    }

    bb118: {
        _255 = Not(move _256);
        switchInt(move _255) -> [0: bb120, otherwise: bb119];
    }

    bb119: {
        _259 = core::panicking::panic(const "assertion failed: E::Nothing::<fn()>((), ((), ()), [23; 0]).is_none()");
    }

    bb120: {
        _261 = main as fn() (Pointer(ReifyFnPointer));
        _260 = E::<fn()>::Thing(const 23_isize, move _261);
        _263 = &_260;
        _262 = E::<fn()>::get_ref(move _263) -> bb121;
    }

    bb121: {
        switchInt((_262.0: isize)) -> [23: bb123, otherwise: bb122];
    }

    bb122: {
        _283 = [const "Thing::<fn()>(23, main).get_ref() != (23, _)"];
        _282 = &_283;
        _281 = _282 as &[&str] (Pointer(Unsize));
        _286 = core::fmt::rt::Argument::<'_>::none() -> bb126;
    }

    bb123: {
        _264 = (_262.1: &fn());
        _267 = main as fn() (Pointer(ReifyFnPointer));
        _266 = &_267;
        _269 = (*_264);
        _268 = &_269;
        _265 = (move _266, move _268);
        _270 = (_265.0: &fn());
        _271 = (_265.1: &fn());
        _274 = (*_270);
        _275 = (*_271);
        _273 = Eq(move _274, move _275);
        _272 = Not(move _273);
        switchInt(move _272) -> [0: bb125, otherwise: bb124];
    }

    bb124: {
        _276 = core::panicking::AssertKind::Eq;
        _278 = Option::<Arguments<'_>>::None;
        _277 = core::panicking::assert_failed::<fn(), fn()>(move _276, _270, _271, move _278);
    }

    bb125: {
        return;
    }

    bb126: {
        _285 = &_286;
        _284 = _285 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _280 = Arguments::<'_>::new_v1(move _281, move _284) -> bb127;
    }

    bb127: {
        _279 = panic_fmt(move _280);
    }

    bb128 (cleanup): {
        drop(_210) -> [return: bb129, unwind terminate];
    }

    bb129 (cleanup): {
        drop(_203) -> [return: bb149, unwind terminate];
    }

    bb130 (cleanup): {
        drop(_195) -> [return: bb149, unwind terminate];
    }

    bb131 (cleanup): {
        drop(_171) -> [return: bb132, unwind terminate];
    }

    bb132 (cleanup): {
        drop(_179) -> [return: bb149, unwind terminate];
    }

    bb133 (cleanup): {
        drop(_171) -> [return: bb149, unwind terminate];
    }

    bb134 (cleanup): {
        drop(_163) -> [return: bb149, unwind terminate];
    }

    bb135 (cleanup): {
        drop(_143) -> [return: bb136, unwind terminate];
    }

    bb136 (cleanup): {
        drop(_136) -> [return: bb149, unwind terminate];
    }

    bb137 (cleanup): {
        drop(_132) -> [return: bb149, unwind terminate];
    }

    bb138 (cleanup): {
        drop(_112) -> [return: bb139, unwind terminate];
    }

    bb139 (cleanup): {
        drop(_120) -> [return: bb149, unwind terminate];
    }

    bb140 (cleanup): {
        drop(_112) -> [return: bb149, unwind terminate];
    }

    bb141 (cleanup): {
        drop(_108) -> [return: bb149, unwind terminate];
    }

    bb142 (cleanup): {
        drop(_89) -> [return: bb143, unwind terminate];
    }

    bb143 (cleanup): {
        drop(_82) -> [return: bb149, unwind terminate];
    }

    bb144 (cleanup): {
        drop(_79) -> [return: bb149, unwind terminate];
    }

    bb145 (cleanup): {
        drop(_60) -> [return: bb146, unwind terminate];
    }

    bb146 (cleanup): {
        drop(_68) -> [return: bb149, unwind terminate];
    }

    bb147 (cleanup): {
        drop(_60) -> [return: bb149, unwind terminate];
    }

    bb148 (cleanup): {
        drop(_57) -> [return: bb149, unwind terminate];
    }

    bb149 (cleanup): {
        resume;
    }

    bb150: {
        (*_290) = [const 20_isize, const 22_isize];
        _211 = move _215 as std::boxed::Box<[isize]> (Pointer(Unsize));
        _210 = slice::<impl [isize]>::into_vec::<std::alloc::Global>(move _211) -> [return: bb103, unwind: bb129];
    }

    bb151: {
        (*_289) = [const 20_isize, const 22_isize];
        _198 = move _202 as std::boxed::Box<[isize]> (Pointer(Unsize));
        _197 = slice::<impl [isize]>::into_vec::<std::alloc::Global>(move _198) -> bb98;
    }

    bb152: {
        (*_288) = [const 20_isize, const 22_isize];
        _180 = move _184 as std::boxed::Box<[isize]> (Pointer(Unsize));
        _179 = slice::<impl [isize]>::into_vec::<std::alloc::Global>(move _180) -> [return: bb87, unwind: bb133];
    }

    bb153: {
        (*_287) = [const 20_isize, const 22_isize];
        _166 = move _170 as std::boxed::Box<[isize]> (Pointer(Unsize));
        _165 = slice::<impl [isize]>::into_vec::<std::alloc::Global>(move _166) -> bb83;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

main::{constant#2}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

main::{constant#3}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

main::{constant#4}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

fn E::Thing(_1: isize, _2: T) -> E<T> {
    let mut _0: E<T>;

    bb0: {
        _0 = E::<T>::Thing(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn E::Thing(_1: isize, _2: T) -> E<T> {
    let mut _0: E<T>;

    bb0: {
        _0 = E::<T>::Thing(move _1, move _2);
        return;
    }
}

fn E::Nothing(_1: (), _2: ((), ()), _3: [i8; 0]) -> E<T> {
    let mut _0: E<T>;

    bb0: {
        _0 = E::<T>::Nothing(move _1, move _2, move _3);
        return;
    }
}

// MIR FOR CTFE
fn E::Nothing(_1: (), _2: ((), ()), _3: [i8; 0]) -> E<T> {
    let mut _0: E<T>;

    bb0: {
        _0 = E::<T>::Nothing(move _1, move _2, move _3);
        return;
    }
}
