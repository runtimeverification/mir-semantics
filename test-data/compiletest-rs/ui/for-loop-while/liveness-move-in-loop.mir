// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn take(_1: isize) -> isize {
    debug x => _1;
    let mut _0: isize;

    bb0: {
        _0 = _1;
        return;
    }
}

fn the_loop() -> () {
    let mut _0: ();
    let mut _1: std::vec::Vec<isize>;
    let mut _3: bool;
    let _4: ();
    let mut _5: &mut std::vec::Vec<isize>;
    let mut _6: isize;
    scope 1 {
        debug list => _1;
        let _2: isize;
        scope 2 {
            debug x => _2;
        }
    }

    bb0: {
        _1 = Vec::<isize>::new() -> bb1;
    }

    bb1: {
        _2 = const 5_isize;
        _3 = Gt(_2, const 3_isize);
        switchInt(move _3) -> [0: bb4, otherwise: bb2];
    }

    bb2: {
        _5 = &mut _1;
        _6 = take(_2) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _4 = Vec::<isize>::push(move _5, move _6) -> [return: bb8, unwind: bb6];
    }

    bb4: {
        drop(_1) -> bb5;
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_1) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }

    bb8: {
        goto -> bb1;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
