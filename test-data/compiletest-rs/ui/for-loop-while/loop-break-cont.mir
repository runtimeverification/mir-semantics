// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: usize;
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 1];
    let _6: [&str; 1];
    let mut _7: usize;
    let mut _8: (&usize, &usize);
    let mut _9: &usize;
    let mut _10: &usize;
    let _11: usize;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: usize;
    let mut _17: usize;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _22: usize;
    let _23: ();
    let mut _24: std::fmt::Arguments<'_>;
    let mut _25: &[&str];
    let _26: &[&str; 1];
    let _27: [&str; 1];
    let mut _28: usize;
    let mut _29: usize;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: !;
    let _35: ();
    let mut _36: std::fmt::Arguments<'_>;
    let mut _37: &[&str];
    let _38: &[&str; 1];
    let _39: [&str; 1];
    let mut _40: usize;
    let mut _41: usize;
    let mut _42: usize;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: !;
    scope 1 {
        debug i => _1;
        let _12: &usize;
        let _13: &usize;
        let mut _21: bool;
        scope 2 {
            debug left_val => _12;
            debug right_val => _13;
            let _18: core::panicking::AssertKind;
            scope 3 {
                debug kind => _18;
            }
        }
        scope 4 {
            debug is_even => _21;
        }
    }

    bb0: {
        _1 = const 0_usize;
        goto -> bb1;
    }

    bb1: {
        _6 = [const "a\n"];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_const(move _4) -> bb2;
    }

    bb2: {
        _2 = _print(move _3) -> bb3;
    }

    bb3: {
        _1 = Add(_1, const 1_usize);
        _7 = _1;
        switchInt(move _7) -> [10: bb4, otherwise: bb1];
    }

    bb4: {
        _9 = &_1;
        _11 = const 10_usize;
        _10 = &_11;
        _8 = (move _9, move _10);
        _12 = (_8.0: &usize);
        _13 = (_8.1: &usize);
        _16 = (*_12);
        _17 = (*_13);
        _15 = Eq(move _16, move _17);
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<usize, usize>(move _18, _12, _13, move _20);
    }

    bb6: {
        _21 = const false;
        goto -> bb7;
    }

    bb7: {
        _22 = _1;
        switchInt(move _22) -> [21: bb8, otherwise: bb9];
    }

    bb8: {
        _33 = _21;
        _32 = Not(move _33);
        _31 = Not(move _32);
        switchInt(move _31) -> [0: bb15, otherwise: bb14];
    }

    bb9: {
        _27 = [const "b\n"];
        _26 = &_27;
        _25 = _26 as &[&str] (Pointer(Unsize));
        _24 = Arguments::<'_>::new_const(move _25) -> bb10;
    }

    bb10: {
        _23 = _print(move _24) -> bb11;
    }

    bb11: {
        _21 = const false;
        _1 = Add(_1, const 1_usize);
        _29 = _1;
        _30 = Eq(const 2_usize, const 0_usize);
        assert(!move _30, "attempt to calculate the remainder of `{}` with a divisor of zero", _29) -> bb12;
    }

    bb12: {
        _28 = Rem(move _29, const 2_usize);
        switchInt(move _28) -> [0: bb13, otherwise: bb7];
    }

    bb13: {
        _21 = const true;
        goto -> bb7;
    }

    bb14: {
        _34 = core::panicking::panic(const "assertion failed: !is_even");
    }

    bb15: {
        _39 = [const "c\n"];
        _38 = &_39;
        _37 = _38 as &[&str] (Pointer(Unsize));
        _36 = Arguments::<'_>::new_const(move _37) -> bb16;
    }

    bb16: {
        _35 = _print(move _36) -> bb17;
    }

    bb17: {
        _40 = _1;
        switchInt(move _40) -> [22: bb18, otherwise: bb19];
    }

    bb18: {
        _45 = _21;
        _44 = Not(move _45);
        switchInt(move _44) -> [0: bb23, otherwise: bb22];
    }

    bb19: {
        _21 = const false;
        _1 = Add(_1, const 1_usize);
        _42 = _1;
        _43 = Eq(const 2_usize, const 0_usize);
        assert(!move _43, "attempt to calculate the remainder of `{}` with a divisor of zero", _42) -> bb20;
    }

    bb20: {
        _41 = Rem(move _42, const 2_usize);
        switchInt(move _41) -> [0: bb21, otherwise: bb15];
    }

    bb21: {
        _21 = const true;
        goto -> bb15;
    }

    bb22: {
        _46 = core::panicking::panic(const "assertion failed: is_even");
    }

    bb23: {
        return;
    }
}
