// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: i32;
    let mut _2: std::vec::IntoIter<i32>;
    let mut _3: std::vec::Vec<i32>;
    let mut _5: std::option::Option<i32>;
    let mut _6: &mut std::vec::IntoIter<i32>;
    let mut _7: isize;
    let _9: ();
    let mut _10: &mut i32;
    let mut _11: &i32;
    scope 1 {
        debug sum => _1;
        let mut _4: std::vec::IntoIter<i32>;
        scope 2 {
            debug iter => _4;
            let _8: i32;
            scope 3 {
                debug i => _8;
            }
        }
    }

    bb0: {
        _1 = const 0_i32;
        _3 = Vec::<i32>::new() -> bb1;
    }

    bb1: {
        _2 = <Vec<i32> as IntoIterator>::into_iter(move _3) -> bb2;
    }

    bb2: {
        _4 = move _2;
        goto -> bb3;
    }

    bb3: {
        _6 = &mut _4;
        _5 = <std::vec::IntoIter<i32> as Iterator>::next(_6) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        _8 = ((_5 as Some).0: i32);
        _10 = &mut _1;
        _11 = &_8;
        _9 = <i32 as AddAssign<&i32>>::add_assign(move _10, move _11) -> [return: bb11, unwind: bb9];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        drop(_4) -> bb8;
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_4) -> [return: bb10, unwind terminate];
    }

    bb10 (cleanup): {
        resume;
    }

    bb11: {
        goto -> bb3;
    }
}
