// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: std::collections::HashMap<i32, i32>;
    let mut _3: (i32, i32);
    let mut _4: (i32, i32);
    let mut _5: (i32, i32);
    let mut _6: std::slice::Iter<'_, (i32, i32)>;
    let mut _7: &[(i32, i32); 3];
    let mut _9: std::option::Option<&(i32, i32)>;
    let mut _10: &mut std::slice::Iter<'_, (i32, i32)>;
    let mut _11: isize;
    let _14: std::option::Option<i32>;
    let mut _15: &mut std::collections::HashMap<i32, i32>;
    let mut _19: &std::collections::HashMap<i32, i32>;
    let mut _20: &mut std::collections::hash_map::Iter<'_, i32, i32>;
    let mut _21: &mut std::collections::hash_map::Iter<'_, i32, i32>;
    let mut _22: &mut std::collections::hash_map::Iter<'_, i32, i32>;
    let mut _24: std::option::Option<(&i32, &i32)>;
    let mut _25: &mut &mut std::collections::hash_map::Iter<'_, i32, i32>;
    let mut _26: isize;
    let mut _29: std::collections::hash_map::Iter<'_, i32, i32>;
    let mut _30: std::collections::hash_map::Iter<'_, i32, i32>;
    let mut _32: std::option::Option<(&i32, &i32)>;
    let mut _33: &mut std::collections::hash_map::Iter<'_, i32, i32>;
    let mut _34: isize;
    let mut _37: (&i32, &i32);
    let mut _38: &i32;
    let mut _39: &i32;
    let _40: i32;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: i32;
    let mut _46: i32;
    let _48: !;
    let mut _49: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _50: (&i32, &i32);
    let mut _51: &i32;
    let mut _52: &i32;
    let _53: i32;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: i32;
    let mut _59: i32;
    let _61: !;
    let mut _62: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _63: &(i32, i32);
    let mut _64: &(i32, i32);
    let mut _65: &i32;
    let mut _66: &i32;
    let mut _67: &i32;
    let mut _68: &i32;
    scope 1 {
        debug h => _1;
        let _2: [(i32, i32); 3];
        scope 2 {
            debug kvs => _2;
            let mut _8: std::slice::Iter<'_, (i32, i32)>;
            let mut _16: i32;
            scope 3 {
                debug iter => _8;
                let _12: i32;
                let _13: i32;
                scope 4 {
                    debug k => _12;
                    debug v => _13;
                }
            }
            scope 5 {
                debug x => _16;
                let mut _17: i32;
                scope 6 {
                    debug y => _17;
                    let mut _18: std::collections::hash_map::Iter<'_, i32, i32>;
                    scope 7 {
                        debug i => _18;
                        let mut _23: &mut std::collections::hash_map::Iter<'_, i32, i32>;
                        let mut _31: std::collections::hash_map::Iter<'_, i32, i32>;
                        let _41: &i32;
                        let _42: &i32;
                        let _54: &i32;
                        let _55: &i32;
                        scope 8 {
                            debug iter => _23;
                            let _27: i32;
                            let _28: i32;
                            scope 9 {
                                debug k => _27;
                                debug v => _28;
                            }
                        }
                        scope 10 {
                            debug iter => _31;
                            let _35: i32;
                            let _36: i32;
                            scope 11 {
                                debug k => _35;
                                debug v => _36;
                            }
                        }
                        scope 12 {
                            debug left_val => _41;
                            debug right_val => _42;
                            let _47: core::panicking::AssertKind;
                            scope 13 {
                                debug kind => _47;
                            }
                        }
                        scope 14 {
                            debug left_val => _54;
                            debug right_val => _55;
                            let _60: core::panicking::AssertKind;
                            scope 15 {
                                debug kind => _60;
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = HashMap::<i32, i32>::new() -> bb1;
    }

    bb1: {
        _3 = (const 1_i32, const 10_i32);
        _4 = (const 2_i32, const 20_i32);
        _5 = (const 3_i32, const 30_i32);
        _2 = [move _3, move _4, move _5];
        _7 = &_2;
        _6 = <&[(i32, i32); 3] as IntoIterator>::into_iter(move _7) -> [return: bb2, unwind: bb24];
    }

    bb2: {
        _8 = move _6;
        goto -> bb3;
    }

    bb3: {
        _10 = &mut _8;
        _9 = <std::slice::Iter<'_, (i32, i32)> as Iterator>::next(_10) -> [return: bb4, unwind: bb24];
    }

    bb4: {
        _11 = discriminant(_9);
        switchInt(move _11) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        _63 = deref_copy ((_9 as Some).0: &(i32, i32));
        _12 = ((*_63).0: i32);
        _64 = deref_copy ((_9 as Some).0: &(i32, i32));
        _13 = ((*_64).1: i32);
        _15 = &mut _1;
        _14 = HashMap::<i32, i32>::insert(move _15, _12, _13) -> [return: bb26, unwind: bb24];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _16 = const 0_i32;
        _17 = const 0_i32;
        _19 = &_1;
        _18 = HashMap::<i32, i32>::iter(move _19) -> [return: bb8, unwind: bb24];
    }

    bb8: {
        _22 = &mut _18;
        _21 = <std::collections::hash_map::Iter<'_, i32, i32> as Iterator>::by_ref(move _22) -> [return: bb9, unwind: bb24];
    }

    bb9: {
        _20 = <&mut std::collections::hash_map::Iter<'_, i32, i32> as IntoIterator>::into_iter(move _21) -> [return: bb10, unwind: bb24];
    }

    bb10: {
        _23 = move _20;
        _25 = &mut _23;
        _24 = <&mut std::collections::hash_map::Iter<'_, i32, i32> as Iterator>::next(_25) -> [return: bb11, unwind: bb24];
    }

    bb11: {
        _26 = discriminant(_24);
        switchInt(move _26) -> [0: bb13, 1: bb12, otherwise: bb6];
    }

    bb12: {
        _65 = deref_copy (((_24 as Some).0: (&i32, &i32)).0: &i32);
        _27 = (*_65);
        _66 = deref_copy (((_24 as Some).0: (&i32, &i32)).1: &i32);
        _28 = (*_66);
        _16 = Add(_16, _27);
        _17 = Add(_17, _28);
        goto -> bb13;
    }

    bb13: {
        _30 = move _18;
        _29 = <std::collections::hash_map::Iter<'_, i32, i32> as IntoIterator>::into_iter(move _30) -> [return: bb14, unwind: bb24];
    }

    bb14: {
        _31 = move _29;
        goto -> bb15;
    }

    bb15: {
        _33 = &mut _31;
        _32 = <std::collections::hash_map::Iter<'_, i32, i32> as Iterator>::next(_33) -> [return: bb16, unwind: bb24];
    }

    bb16: {
        _34 = discriminant(_32);
        switchInt(move _34) -> [0: bb18, 1: bb17, otherwise: bb6];
    }

    bb17: {
        _67 = deref_copy (((_32 as Some).0: (&i32, &i32)).0: &i32);
        _35 = (*_67);
        _68 = deref_copy (((_32 as Some).0: (&i32, &i32)).1: &i32);
        _36 = (*_68);
        _16 = Add(_16, _35);
        _17 = Add(_17, _36);
        goto -> bb15;
    }

    bb18: {
        _38 = &_16;
        _40 = const 6_i32;
        _39 = &_40;
        _37 = (move _38, move _39);
        _41 = (_37.0: &i32);
        _42 = (_37.1: &i32);
        _45 = (*_41);
        _46 = (*_42);
        _44 = Eq(move _45, move _46);
        _43 = Not(move _44);
        switchInt(move _43) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _47 = core::panicking::AssertKind::Eq;
        _49 = Option::<Arguments<'_>>::None;
        _48 = core::panicking::assert_failed::<i32, i32>(move _47, _41, _42, move _49) -> bb24;
    }

    bb20: {
        _51 = &_17;
        _53 = const 60_i32;
        _52 = &_53;
        _50 = (move _51, move _52);
        _54 = (_50.0: &i32);
        _55 = (_50.1: &i32);
        _58 = (*_54);
        _59 = (*_55);
        _57 = Eq(move _58, move _59);
        _56 = Not(move _57);
        switchInt(move _56) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _60 = core::panicking::AssertKind::Eq;
        _62 = Option::<Arguments<'_>>::None;
        _61 = core::panicking::assert_failed::<i32, i32>(move _60, _54, _55, move _62) -> bb24;
    }

    bb22: {
        drop(_1) -> bb23;
    }

    bb23: {
        return;
    }

    bb24 (cleanup): {
        drop(_1) -> [return: bb25, unwind terminate];
    }

    bb25 (cleanup): {
        resume;
    }

    bb26: {
        goto -> bb3;
    }
}
