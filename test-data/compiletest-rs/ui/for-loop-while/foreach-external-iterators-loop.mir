// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: [i32; 100];
    let mut _3: std::iter::Enumerate<std::slice::Iter<'_, i32>>;
    let mut _4: std::iter::Enumerate<std::slice::Iter<'_, i32>>;
    let mut _5: std::slice::Iter<'_, i32>;
    let mut _6: &[i32];
    let mut _7: &[i32; 100];
    let mut _9: std::option::Option<(usize, &i32)>;
    let mut _10: &mut std::iter::Enumerate<std::slice::Iter<'_, i32>>;
    let mut _11: isize;
    let mut _14: bool;
    let mut _15: i32;
    let mut _16: (&i32, &i32);
    let mut _17: &i32;
    let mut _18: &i32;
    let _19: i32;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: i32;
    let mut _25: i32;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let mut _2: i32;
        scope 2 {
            debug y => _2;
            let mut _8: std::iter::Enumerate<std::slice::Iter<'_, i32>>;
            let _20: &i32;
            let _21: &i32;
            scope 3 {
                debug iter => _8;
                let _12: usize;
                let _13: &i32;
                scope 4 {
                    debug n => _12;
                    debug i => _13;
                }
            }
            scope 5 {
                debug left_val => _20;
                debug right_val => _21;
                let _26: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _26;
                }
            }
        }
    }

    bb0: {
        _1 = [const 1_i32; 100];
        _2 = const 0_i32;
        _7 = &_1;
        _6 = move _7 as &[i32] (Pointer(Unsize));
        _5 = core::slice::<impl [i32]>::iter(move _6) -> bb1;
    }

    bb1: {
        _4 = <std::slice::Iter<'_, i32> as Iterator>::enumerate(move _5) -> bb2;
    }

    bb2: {
        _3 = <Enumerate<std::slice::Iter<'_, i32>> as IntoIterator>::into_iter(move _4) -> bb3;
    }

    bb3: {
        _8 = move _3;
        goto -> bb4;
    }

    bb4: {
        _10 = &mut _8;
        _9 = <Enumerate<std::slice::Iter<'_, i32>> as Iterator>::next(_10) -> bb5;
    }

    bb5: {
        _11 = discriminant(_9);
        switchInt(move _11) -> [0: bb8, 1: bb6, otherwise: bb7];
    }

    bb6: {
        _12 = (((_9 as Some).0: (usize, &i32)).0: usize);
        _13 = (((_9 as Some).0: (usize, &i32)).1: &i32);
        _14 = Lt(_12, const 10_usize);
        switchInt(move _14) -> [0: bb9, otherwise: bb4];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        _17 = &_2;
        _19 = const 90_i32;
        _18 = &_19;
        _16 = (move _17, move _18);
        _20 = (_16.0: &i32);
        _21 = (_16.1: &i32);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb11, otherwise: bb10];
    }

    bb9: {
        _15 = (*_13);
        _2 = Add(_2, move _15);
        goto -> bb4;
    }

    bb10: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<i32, i32>(move _26, _20, _21, move _28);
    }

    bb11: {
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 100_usize;
        return;
    }
}
