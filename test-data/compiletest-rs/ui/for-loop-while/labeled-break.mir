// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: std::ops::Range<i32>;
    let mut _2: std::ops::Range<i32>;
    let mut _3: std::ops::Range<i32>;
    let mut _4: std::option::Option<i32>;
    let mut _5: &mut std::ops::Range<i32>;
    let mut _6: isize;
    scope 1 {
        debug iter => _3;
    }

    bb0: {
        _2 = std::ops::Range::<i32> { start: const 0_i32, end: const 100_i32 };
        _1 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _2) -> bb2;
    }

    bb1: {
        unreachable;
    }

    bb2: {
        _3 = move _1;
        _5 = &mut _3;
        _4 = <std::ops::Range<i32> as Iterator>::next(_5) -> bb3;
    }

    bb3: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb4, 1: bb4, otherwise: bb1];
    }

    bb4: {
        return;
    }
}
