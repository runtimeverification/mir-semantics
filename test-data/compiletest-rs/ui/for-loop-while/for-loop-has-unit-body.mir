// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: std::ops::Range<i32>;
    let mut _2: std::ops::Range<i32>;
    let mut _3: std::ops::Range<i32>;
    let _4: ();
    let mut _5: std::option::Option<i32>;
    let mut _6: &mut std::ops::Range<i32>;
    let mut _7: isize;
    let mut _8: std::ops::Range<i32>;
    let mut _9: std::ops::Range<i32>;
    let mut _10: std::ops::Range<i32>;
    let mut _11: std::option::Option<i32>;
    let mut _12: &mut std::ops::Range<i32>;
    let mut _13: isize;
    scope 1 {
        debug iter => _3;
        scope 2 {
        }
    }
    scope 3 {
        debug iter => _10;
    }

    bb0: {
        _2 = std::ops::Range::<i32> { start: const 0_i32, end: const 3_i32 };
        _1 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _2) -> bb1;
    }

    bb1: {
        _3 = move _1;
        goto -> bb2;
    }

    bb2: {
        _6 = &mut _3;
        _5 = <std::ops::Range<i32> as Iterator>::next(_6) -> bb3;
    }

    bb3: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        _4 = zeroed::<()>() -> bb2;
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _9 = std::ops::Range::<i32> { start: const 0_i32, end: const 3_i32 };
        _8 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _9) -> bb7;
    }

    bb7: {
        _10 = move _8;
        goto -> bb8;
    }

    bb8: {
        _12 = &mut _10;
        _11 = <std::ops::Range<i32> as Iterator>::next(_12) -> bb9;
    }

    bb9: {
        _13 = discriminant(_11);
        switchInt(move _13) -> [0: bb10, 1: bb8, otherwise: bb5];
    }

    bb10: {
        return;
    }
}
