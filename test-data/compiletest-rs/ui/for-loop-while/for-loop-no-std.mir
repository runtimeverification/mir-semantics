// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn start(_1: isize, _2: *const *const u8) -> isize {
    debug _argc => _1;
    debug _argv => _2;
    let mut _0: isize;
    let mut _3: core::slice::Iter<'_, i32>;
    let mut _4: core::slice::Iter<'_, i32>;
    let mut _5: &[i32];
    let mut _6: &[i32; 3];
    let _7: [i32; 3];
    let mut _8: core::slice::Iter<'_, i32>;
    let mut _9: core::option::Option<&i32>;
    let mut _10: &mut core::slice::Iter<'_, i32>;
    let mut _11: isize;
    scope 1 {
        debug iter => _8;
    }

    bb0: {
        _7 = [const 1_i32, const 2_i32, const 3_i32];
        _6 = &_7;
        _5 = move _6 as &[i32] (Pointer(Unsize));
        _4 = core::slice::<impl [i32]>::iter(move _5) -> bb1;
    }

    bb1: {
        _3 = <core::slice::Iter<'_, i32> as IntoIterator>::into_iter(move _4) -> bb2;
    }

    bb2: {
        _8 = move _3;
        goto -> bb3;
    }

    bb3: {
        _10 = &mut _8;
        _9 = <core::slice::Iter<'_, i32> as Iterator>::next(_10) -> bb4;
    }

    bb4: {
        _11 = discriminant(_9);
        switchInt(move _11) -> [0: bb6, 1: bb3, otherwise: bb5];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _0 = const 0_isize;
        return;
    }
}
