// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/for-loop-while/while-prelude-drop.rs:6:10: 6:19>::eq(_1: &t, _2: &t) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: (&t, &t);
    let mut _8: isize;
    let mut _9: isize;
    let mut _12: &t;
    let mut _13: &t;
    let mut _14: &t;
    let mut _15: &t;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
            let _10: &std::string::String;
            let _11: &std::string::String;
            scope 3 {
                debug __self_0 => _10;
                debug __arg1_0 => _11;
            }
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _5 = Eq(_3, _4);
        switchInt(move _5) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _7 = (_1, _2);
        _12 = deref_copy (_7.0: &t);
        _9 = discriminant((*_12));
        switchInt(move _9) -> [1: bb5, otherwise: bb4];
    }

    bb3: {
        return;
    }

    bb4: {
        _6 = const true;
        goto -> bb7;
    }

    bb5: {
        _13 = deref_copy (_7.1: &t);
        _8 = discriminant((*_13));
        switchInt(move _8) -> [1: bb6, otherwise: bb4];
    }

    bb6: {
        _14 = deref_copy (_7.0: &t);
        _10 = &(((*_14) as b).0: std::string::String);
        _15 = deref_copy (_7.1: &t);
        _11 = &(((*_15) as b).0: std::string::String);
        _6 = <String as PartialEq>::eq(_10, _11) -> bb7;
    }

    bb7: {
        _0 = move _6;
        goto -> bb3;
    }
}

fn make(_1: isize) -> t {
    debug i => _1;
    let mut _0: t;
    let mut _2: bool;
    let mut _3: std::string::String;
    let _4: ();
    let mut _5: &mut std::string::String;
    let _6: &str;
    let mut _7: std::string::String;
    scope 1 {
        debug s => _3;
    }

    bb0: {
        _2 = Gt(_1, const 10_isize);
        switchInt(move _2) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _0 = t::a;
        goto -> bb5;
    }

    bb2: {
        _3 = <String as From<&str>>::from(const "hello") -> bb3;
    }

    bb3: {
        _5 = &mut _3;
        _6 = const "there";
        _4 = String::push_str(move _5, _6) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        _7 = move _3;
        _0 = t::b(move _7);
        goto -> bb5;
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_3) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: isize;
    let mut _2: bool;
    let mut _3: &t;
    let _4: t;
    let mut _5: isize;
    let mut _6: &t;
    let _7: t;
    scope 1 {
        debug i => _1;
    }

    bb0: {
        _1 = const 0_isize;
        goto -> bb1;
    }

    bb1: {
        _5 = _1;
        _4 = make(move _5) -> bb2;
    }

    bb2: {
        _3 = &_4;
        _7 = t::a;
        _6 = &_7;
        _2 = <t as PartialEq>::ne(move _3, move _6) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        drop(_7) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        drop(_4) -> bb5;
    }

    bb5: {
        switchInt(move _2) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _1 = Add(_1, const 1_isize);
        goto -> bb1;
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_7) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        drop(_4) -> [return: bb10, unwind terminate];
    }

    bb10 (cleanup): {
        resume;
    }
}

fn t::b(_1: String) -> t {
    let mut _0: t;

    bb0: {
        _0 = t::b(move _1);
        return;
    }
}

// MIR FOR CTFE
fn t::b(_1: String) -> t {
    let mut _0: t;

    bb0: {
        _0 = t::b(move _1);
        return;
    }
}
