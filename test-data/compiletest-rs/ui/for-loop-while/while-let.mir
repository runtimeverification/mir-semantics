// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn make_pq() -> BinaryHeap<isize> {
    let mut _0: std::collections::BinaryHeap<isize>;
    let mut _1: std::vec::Vec<isize>;
    let mut _2: std::boxed::Box<[isize]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[isize; 3]>;
    let mut _7: *const [isize; 3];
    let mut _8: *const ();
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: usize;
    let mut _12: usize;
    let mut _13: bool;
    scope 1 {
    }

    bb0: {
        _3 = SizeOf([isize; 3]);
        _4 = AlignOf([isize; 3]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> bb1;
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [isize; 3]);
        _7 = (((_6.0: std::ptr::Unique<[isize; 3]>).0: std::ptr::NonNull<[isize; 3]>).0: *const [isize; 3]);
        _8 = _7 as *const () (PtrToPtr);
        _9 = _8 as usize (Transmute);
        _10 = AlignOf(isize);
        _11 = Sub(_10, const 1_usize);
        _12 = BitAnd(_9, _11);
        _13 = Eq(_12, const 0_usize);
        assert(_13, "misaligned pointer dereference: address must be a multiple of {} but is {}", _10, _9) -> [success: bb4, unwind unreachable];
    }

    bb2: {
        _0 = <BinaryHeap<isize> as From<Vec<isize>>>::from(move _1) -> bb3;
    }

    bb3: {
        return;
    }

    bb4: {
        (*_7) = [const 1_isize, const 2_isize, const 3_isize];
        _2 = move _6 as std::boxed::Box<[isize]> (Pointer(Unsize));
        _1 = slice::<impl [isize]>::into_vec::<std::alloc::Global>(move _2) -> bb2;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: std::collections::BinaryHeap<isize>;
    let mut _3: std::option::Option<isize>;
    let mut _4: &mut std::collections::BinaryHeap<isize>;
    let mut _5: isize;
    let mut _7: (&isize, &isize);
    let mut _8: &isize;
    let mut _9: &isize;
    let _10: isize;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: isize;
    let mut _16: isize;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _20: std::collections::BinaryHeap<isize>;
    let mut _21: std::option::Option<isize>;
    let mut _22: &mut std::collections::BinaryHeap<isize>;
    let mut _23: isize;
    let mut _25: (&isize, &isize);
    let mut _26: &isize;
    let mut _27: &isize;
    let _28: isize;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: isize;
    let mut _34: isize;
    let _36: !;
    let mut _37: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _38: std::collections::BinaryHeap<isize>;
    let mut _39: std::option::Option<isize>;
    let mut _40: &mut std::collections::BinaryHeap<isize>;
    let mut _41: isize;
    let mut _43: (&isize, &isize);
    let mut _44: &isize;
    let mut _45: &isize;
    let _46: isize;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: isize;
    let mut _52: isize;
    let _54: !;
    let mut _55: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _57: std::option::Option<isize>;
    let mut _58: &mut std::collections::BinaryHeap<isize>;
    let mut _59: isize;
    let mut _62: std::option::Option<isize>;
    let mut _63: &mut std::collections::BinaryHeap<isize>;
    let mut _64: isize;
    let mut _66: isize;
    let mut _67: (&isize, &isize);
    let mut _68: &isize;
    let mut _69: &isize;
    let _70: isize;
    let mut _71: isize;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: isize;
    let mut _77: isize;
    let _79: !;
    let mut _80: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug pq => _1;
        let mut _2: isize;
        scope 2 {
            debug sum => _2;
            let _11: &isize;
            let _12: &isize;
            let _29: &isize;
            let _30: &isize;
            let _47: &isize;
            let _48: &isize;
            let mut _56: std::collections::BinaryHeap<isize>;
            scope 3 {
                debug x => _6;
                let _6: isize;
            }
            scope 4 {
                debug left_val => _11;
                debug right_val => _12;
                let _17: core::panicking::AssertKind;
                scope 5 {
                    debug kind => _17;
                }
            }
            scope 6 {
                debug x => _24;
                let _24: isize;
            }
            scope 7 {
                debug left_val => _29;
                debug right_val => _30;
                let _35: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _35;
                }
            }
            scope 9 {
                debug x => _42;
                let _42: isize;
            }
            scope 10 {
                debug left_val => _47;
                debug right_val => _48;
                let _53: core::panicking::AssertKind;
                scope 11 {
                    debug kind => _53;
                }
            }
            scope 12 {
                debug pq1 => _56;
                let _72: &isize;
                let _73: &isize;
                scope 13 {
                    debug x => _60;
                    let _60: isize;
                    let mut _61: std::collections::BinaryHeap<isize>;
                    scope 14 {
                        debug pq2 => _61;
                        scope 15 {
                            debug y => _65;
                            let _65: isize;
                        }
                    }
                }
                scope 16 {
                    debug left_val => _72;
                    debug right_val => _73;
                    let _78: core::panicking::AssertKind;
                    scope 17 {
                        debug kind => _78;
                    }
                }
            }
        }
    }

    bb0: {
        _1 = make_pq() -> bb1;
    }

    bb1: {
        _2 = const 0_isize;
        goto -> bb2;
    }

    bb2: {
        _4 = &mut _1;
        _3 = BinaryHeap::<isize>::pop(move _4) -> [return: bb3, unwind: bb42];
    }

    bb3: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [1: bb4, otherwise: bb5];
    }

    bb4: {
        _6 = ((_3 as Some).0: isize);
        _2 = Add(_2, _6);
        goto -> bb2;
    }

    bb5: {
        _8 = &_2;
        _10 = const 6_isize;
        _9 = &_10;
        _7 = (move _8, move _9);
        _11 = (_7.0: &isize);
        _12 = (_7.1: &isize);
        _15 = (*_11);
        _16 = (*_12);
        _14 = Eq(move _15, move _16);
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<isize, isize>(move _17, _11, _12, move _19) -> bb42;
    }

    bb7: {
        _20 = make_pq() -> [return: bb8, unwind: bb42];
    }

    bb8: {
        drop(_1) -> [return: bb9, unwind: bb10];
    }

    bb9: {
        _1 = move _20;
        _2 = const 0_isize;
        goto -> bb11;
    }

    bb10 (cleanup): {
        _1 = move _20;
        goto -> bb42;
    }

    bb11: {
        _22 = &mut _1;
        _21 = BinaryHeap::<isize>::pop(move _22) -> [return: bb12, unwind: bb42];
    }

    bb12: {
        _23 = discriminant(_21);
        switchInt(move _23) -> [1: bb13, otherwise: bb14];
    }

    bb13: {
        _24 = ((_21 as Some).0: isize);
        _2 = Add(_2, _24);
        switchInt(move _24) -> [2: bb14, otherwise: bb11];
    }

    bb14: {
        _26 = &_2;
        _28 = const 5_isize;
        _27 = &_28;
        _25 = (move _26, move _27);
        _29 = (_25.0: &isize);
        _30 = (_25.1: &isize);
        _33 = (*_29);
        _34 = (*_30);
        _32 = Eq(move _33, move _34);
        _31 = Not(move _32);
        switchInt(move _31) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _35 = core::panicking::AssertKind::Eq;
        _37 = Option::<Arguments<'_>>::None;
        _36 = core::panicking::assert_failed::<isize, isize>(move _35, _29, _30, move _37) -> bb42;
    }

    bb16: {
        _38 = make_pq() -> [return: bb17, unwind: bb42];
    }

    bb17: {
        drop(_1) -> [return: bb18, unwind: bb19];
    }

    bb18: {
        _1 = move _38;
        _2 = const 0_isize;
        goto -> bb20;
    }

    bb19 (cleanup): {
        _1 = move _38;
        goto -> bb42;
    }

    bb20: {
        _40 = &mut _1;
        _39 = BinaryHeap::<isize>::pop(move _40) -> [return: bb21, unwind: bb42];
    }

    bb21: {
        _41 = discriminant(_39);
        switchInt(move _41) -> [1: bb22, otherwise: bb24];
    }

    bb22: {
        _42 = ((_39 as Some).0: isize);
        switchInt(move _42) -> [3: bb20, otherwise: bb23];
    }

    bb23: {
        _2 = Add(_2, _42);
        goto -> bb20;
    }

    bb24: {
        _44 = &_2;
        _46 = const 3_isize;
        _45 = &_46;
        _43 = (move _44, move _45);
        _47 = (_43.0: &isize);
        _48 = (_43.1: &isize);
        _51 = (*_47);
        _52 = (*_48);
        _50 = Eq(move _51, move _52);
        _49 = Not(move _50);
        switchInt(move _49) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _53 = core::panicking::AssertKind::Eq;
        _55 = Option::<Arguments<'_>>::None;
        _54 = core::panicking::assert_failed::<isize, isize>(move _53, _47, _48, move _55) -> bb42;
    }

    bb26: {
        _56 = make_pq() -> [return: bb27, unwind: bb42];
    }

    bb27: {
        _2 = const 0_isize;
        goto -> bb28;
    }

    bb28: {
        _58 = &mut _56;
        _57 = BinaryHeap::<isize>::pop(move _58) -> [return: bb29, unwind: bb41];
    }

    bb29: {
        _59 = discriminant(_57);
        switchInt(move _59) -> [1: bb30, otherwise: bb35];
    }

    bb30: {
        _60 = ((_57 as Some).0: isize);
        _61 = make_pq() -> [return: bb44, unwind: bb41];
    }

    bb31: {
        _63 = &mut _61;
        _62 = BinaryHeap::<isize>::pop(move _63) -> [return: bb32, unwind: bb40];
    }

    bb32: {
        _64 = discriminant(_62);
        switchInt(move _64) -> [1: bb33, otherwise: bb34];
    }

    bb33: {
        _65 = ((_62 as Some).0: isize);
        _66 = Mul(_60, _65);
        _2 = Add(_2, move _66);
        goto -> bb31;
    }

    bb34: {
        drop(_61) -> [return: bb28, unwind: bb41];
    }

    bb35: {
        _68 = &_2;
        _71 = Add(const 6_isize, const 12_isize);
        _70 = Add(move _71, const 18_isize);
        _69 = &_70;
        _67 = (move _68, move _69);
        _72 = (_67.0: &isize);
        _73 = (_67.1: &isize);
        _76 = (*_72);
        _77 = (*_73);
        _75 = Eq(move _76, move _77);
        _74 = Not(move _75);
        switchInt(move _74) -> [0: bb37, otherwise: bb36];
    }

    bb36: {
        _78 = core::panicking::AssertKind::Eq;
        _80 = Option::<Arguments<'_>>::None;
        _79 = core::panicking::assert_failed::<isize, isize>(move _78, _72, _73, move _80) -> bb41;
    }

    bb37: {
        drop(_56) -> [return: bb38, unwind: bb42];
    }

    bb38: {
        drop(_1) -> bb39;
    }

    bb39: {
        return;
    }

    bb40 (cleanup): {
        drop(_61) -> [return: bb41, unwind terminate];
    }

    bb41 (cleanup): {
        drop(_56) -> [return: bb42, unwind terminate];
    }

    bb42 (cleanup): {
        drop(_1) -> [return: bb43, unwind terminate];
    }

    bb43 (cleanup): {
        resume;
    }

    bb44: {
        goto -> bb31;
    }
}
