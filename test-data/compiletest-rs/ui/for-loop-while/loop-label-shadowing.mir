// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: std::vec::Vec<i32>;
    let mut _2: std::slice::Iter<'_, i32>;
    let mut _3: &[i32; 3];
    let _4: [i32; 3];
    let mut _6: std::option::Option<&i32>;
    let mut _7: &mut std::slice::Iter<'_, i32>;
    let mut _8: isize;
    let _10: ();
    let mut _11: &mut std::vec::Vec<i32>;
    let mut _12: i32;
    scope 1 {
        debug foo => _1;
        scope 2 {
            let mut _5: std::slice::Iter<'_, i32>;
            scope 3 {
                debug iter => _5;
                let _9: &i32;
                scope 4 {
                    debug i => _9;
                }
            }
        }
    }

    bb0: {
        _1 = Vec::<i32>::new() -> bb1;
    }

    bb1: {
        _4 = [const 1_i32, const 2_i32, const 3_i32];
        _3 = &_4;
        _2 = <&[i32; 3] as IntoIterator>::into_iter(move _3) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        _5 = move _2;
        goto -> bb3;
    }

    bb3: {
        _7 = &mut _5;
        _6 = <std::slice::Iter<'_, i32> as Iterator>::next(_7) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        _9 = ((_6 as Some).0: &i32);
        _11 = &mut _1;
        _12 = (*_9);
        _10 = Vec::<i32>::push(move _11, move _12) -> [return: bb11, unwind: bb9];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        drop(_1) -> bb8;
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_1) -> [return: bb10, unwind terminate];
    }

    bb10 (cleanup): {
        resume;
    }

    bb11: {
        goto -> bb3;
    }
}
