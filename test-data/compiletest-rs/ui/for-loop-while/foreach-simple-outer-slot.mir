// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: isize;
    let _2: ();
    let mut _3: [closure@ui/for-loop-while/foreach-simple-outer-slot.rs:7:15: 7:18];
    let mut _4: &mut isize;
    let _5: ();
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str];
    let _8: &[&str; 1];
    let _9: [&str; 1];
    let _10: ();
    let mut _11: std::fmt::Arguments<'_>;
    let mut _12: &[&str];
    let _13: &[&str; 2];
    let _14: [&str; 2];
    let mut _15: &[core::fmt::rt::Argument<'_>];
    let _16: &[core::fmt::rt::Argument<'_>; 1];
    let _17: [core::fmt::rt::Argument<'_>; 1];
    let mut _18: core::fmt::rt::Argument<'_>;
    let _19: &isize;
    let mut _20: (&isize, &isize);
    let mut _21: &isize;
    let mut _22: &isize;
    let _23: isize;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: isize;
    let mut _29: isize;
    let _31: !;
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug sum => _1;
        let _24: &isize;
        let _25: &isize;
        scope 2 {
            debug left_val => _24;
            debug right_val => _25;
            let _30: core::panicking::AssertKind;
            scope 3 {
                debug kind => _30;
            }
        }
    }

    bb0: {
        _1 = const 0_isize;
        _4 = &mut _1;
        _3 = [closure@ui/for-loop-while/foreach-simple-outer-slot.rs:7:15: 7:18] { sum: move _4 };
        _2 = first_ten::<[closure@ui/for-loop-while/foreach-simple-outer-slot.rs:7:15: 7:18]>(move _3) -> bb1;
    }

    bb1: {
        _9 = [const "sum\n"];
        _8 = &_9;
        _7 = _8 as &[&str] (Pointer(Unsize));
        _6 = Arguments::<'_>::new_const(move _7) -> bb2;
    }

    bb2: {
        _5 = _print(move _6) -> bb3;
    }

    bb3: {
        _14 = [const "", const "\n"];
        _13 = &_14;
        _12 = _13 as &[&str] (Pointer(Unsize));
        _19 = &_1;
        _18 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_19) -> bb4;
    }

    bb4: {
        _17 = [move _18];
        _16 = &_17;
        _15 = _16 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _11 = Arguments::<'_>::new_v1(move _12, move _15) -> bb5;
    }

    bb5: {
        _10 = _print(move _11) -> bb6;
    }

    bb6: {
        _21 = &_1;
        _23 = const 45_isize;
        _22 = &_23;
        _20 = (move _21, move _22);
        _24 = (_20.0: &isize);
        _25 = (_20.1: &isize);
        _28 = (*_24);
        _29 = (*_25);
        _27 = Eq(move _28, move _29);
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _30 = core::panicking::AssertKind::Eq;
        _32 = Option::<Arguments<'_>>::None;
        _31 = core::panicking::assert_failed::<isize, isize>(move _30, _24, _25, move _32);
    }

    bb8: {
        return;
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/for-loop-while/foreach-simple-outer-slot.rs:7:15: 7:18], _2: isize) -> () {
    debug i => _2;
    debug sum => (*((*_1).0: &mut isize));
    let mut _0: ();
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let _6: &[&str; 1];
    let _7: [&str; 1];
    let _8: ();
    let mut _9: std::fmt::Arguments<'_>;
    let mut _10: &[&str];
    let _11: &[&str; 2];
    let _12: [&str; 2];
    let mut _13: &[core::fmt::rt::Argument<'_>];
    let _14: &[core::fmt::rt::Argument<'_>; 1];
    let _15: [core::fmt::rt::Argument<'_>; 1];
    let mut _16: core::fmt::rt::Argument<'_>;
    let _17: &isize;
    let mut _18: isize;
    let mut _19: isize;
    let mut _20: &mut isize;
    let mut _21: &mut isize;

    bb0: {
        _7 = [const "main\n"];
        _6 = &_7;
        _5 = _6 as &[&str] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_const(move _5) -> bb1;
    }

    bb1: {
        _3 = _print(move _4) -> bb2;
    }

    bb2: {
        _12 = [const "", const "\n"];
        _11 = &_12;
        _10 = _11 as &[&str] (Pointer(Unsize));
        _17 = &_2;
        _16 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_17) -> bb3;
    }

    bb3: {
        _15 = [move _16];
        _14 = &_15;
        _13 = _14 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _9 = Arguments::<'_>::new_v1(move _10, move _13) -> bb4;
    }

    bb4: {
        _8 = _print(move _9) -> bb5;
    }

    bb5: {
        _20 = deref_copy ((*_1).0: &mut isize);
        _18 = (*_20);
        _19 = _2;
        _21 = deref_copy ((*_1).0: &mut isize);
        (*_21) = Add(move _18, move _19);
        return;
    }
}

fn first_ten(_1: F) -> () {
    debug it => _1;
    let mut _0: ();
    let mut _2: isize;
    let mut _3: bool;
    let mut _4: isize;
    let _5: ();
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str];
    let _8: &[&str; 1];
    let _9: [&str; 1];
    let _10: ();
    let mut _11: &mut F;
    let mut _12: (isize,);
    let mut _13: isize;
    let mut _14: isize;
    scope 1 {
        debug i => _2;
    }

    bb0: {
        _2 = const 0_isize;
        goto -> bb1;
    }

    bb1: {
        _4 = _2;
        _3 = Lt(move _4, const 10_isize);
        switchInt(move _3) -> [0: bb6, otherwise: bb2];
    }

    bb2: {
        _9 = [const "first_ten\n"];
        _8 = &_9;
        _7 = _8 as &[&str] (Pointer(Unsize));
        _6 = Arguments::<'_>::new_const(move _7) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        _5 = _print(move _6) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _11 = &mut _1;
        _13 = _2;
        _12 = (move _13,);
        _10 = <F as FnMut<(isize,)>>::call_mut(move _11, move _12) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        _14 = _2;
        _2 = Add(move _14, const 1_isize);
        goto -> bb1;
    }

    bb6: {
        drop(_1) -> bb7;
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_1) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        resume;
    }
}
