// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn two(_1: F) -> () {
    debug it => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: &mut F;
    let mut _4: (isize,);
    let _5: ();
    let mut _6: &mut F;
    let mut _7: (isize,);

    bb0: {
        _3 = &mut _1;
        _4 = (const 0_isize,);
        _2 = <F as FnMut<(isize,)>>::call_mut(move _3, move _4) -> [return: bb1, unwind: bb4];
    }

    bb1: {
        _6 = &mut _1;
        _7 = (const 1_isize,);
        _5 = <F as FnMut<(isize,)>>::call_mut(move _6, move _7) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_1) -> bb3;
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_1) -> [return: bb5, unwind terminate];
    }

    bb5 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: std::vec::Vec<isize>;
    let mut _2: std::boxed::Box<[isize]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[isize; 4]>;
    let _8: ();
    let mut _9: [closure@ui/for-loop-while/foreach-nested.rs:9:9: 9:12];
    let mut _10: &mut std::vec::Vec<isize>;
    let mut _11: &mut isize;
    let mut _12: (&isize, &isize);
    let mut _13: &isize;
    let _14: &isize;
    let mut _15: &std::vec::Vec<isize>;
    let mut _16: &isize;
    let _17: isize;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: isize;
    let mut _23: isize;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _27: (&isize, &isize);
    let mut _28: &isize;
    let _29: &isize;
    let mut _30: &std::vec::Vec<isize>;
    let mut _31: &isize;
    let _32: isize;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: isize;
    let mut _38: isize;
    let _40: !;
    let mut _41: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _42: (&isize, &isize);
    let mut _43: &isize;
    let _44: &isize;
    let mut _45: &std::vec::Vec<isize>;
    let mut _46: &isize;
    let _47: isize;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: isize;
    let mut _53: isize;
    let _55: !;
    let mut _56: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _57: (&isize, &isize);
    let mut _58: &isize;
    let _59: &isize;
    let mut _60: &std::vec::Vec<isize>;
    let mut _61: &isize;
    let _62: isize;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: isize;
    let mut _68: isize;
    let _70: !;
    let mut _71: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _72: *const [isize; 4];
    let mut _73: *const ();
    let mut _74: usize;
    let mut _75: usize;
    let mut _76: usize;
    let mut _77: usize;
    let mut _78: bool;
    scope 1 {
        debug a => _1;
        let mut _7: isize;
        scope 3 {
            debug p => _7;
            let _18: &isize;
            let _19: &isize;
            let _33: &isize;
            let _34: &isize;
            let _48: &isize;
            let _49: &isize;
            let _63: &isize;
            let _64: &isize;
            scope 4 {
                debug left_val => _18;
                debug right_val => _19;
                let _24: core::panicking::AssertKind;
                scope 5 {
                    debug kind => _24;
                }
            }
            scope 6 {
                debug left_val => _33;
                debug right_val => _34;
                let _39: core::panicking::AssertKind;
                scope 7 {
                    debug kind => _39;
                }
            }
            scope 8 {
                debug left_val => _48;
                debug right_val => _49;
                let _54: core::panicking::AssertKind;
                scope 9 {
                    debug kind => _54;
                }
            }
            scope 10 {
                debug left_val => _63;
                debug right_val => _64;
                let _69: core::panicking::AssertKind;
                scope 11 {
                    debug kind => _69;
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _3 = SizeOf([isize; 4]);
        _4 = AlignOf([isize; 4]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> bb1;
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [isize; 4]);
        _72 = (((_6.0: std::ptr::Unique<[isize; 4]>).0: std::ptr::NonNull<[isize; 4]>).0: *const [isize; 4]);
        _73 = _72 as *const () (PtrToPtr);
        _74 = _73 as usize (Transmute);
        _75 = AlignOf(isize);
        _76 = Sub(_75, const 1_usize);
        _77 = BitAnd(_74, _76);
        _78 = Eq(_77, const 0_usize);
        assert(_78, "misaligned pointer dereference: address must be a multiple of {} but is {}", _75, _74) -> [success: bb19, unwind unreachable];
    }

    bb2: {
        _7 = const 0_isize;
        _10 = &mut _1;
        _11 = &mut _7;
        _9 = [closure@ui/for-loop-while/foreach-nested.rs:9:9: 9:12] { a: move _10, p: move _11 };
        _8 = two::<[closure@ui/for-loop-while/foreach-nested.rs:9:9: 9:12]>(move _9) -> [return: bb3, unwind: bb17];
    }

    bb3: {
        _15 = &_1;
        _14 = <Vec<isize> as Index<usize>>::index(move _15, const 0_usize) -> [return: bb4, unwind: bb17];
    }

    bb4: {
        _13 = _14;
        _17 = const 0_isize;
        _16 = &_17;
        _12 = (move _13, move _16);
        _18 = (_12.0: &isize);
        _19 = (_12.1: &isize);
        _22 = (*_18);
        _23 = (*_19);
        _21 = Eq(move _22, move _23);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<isize, isize>(move _24, _18, _19, move _26) -> bb17;
    }

    bb6: {
        _30 = &_1;
        _29 = <Vec<isize> as Index<usize>>::index(move _30, const 1_usize) -> [return: bb7, unwind: bb17];
    }

    bb7: {
        _28 = _29;
        _32 = const 1_isize;
        _31 = &_32;
        _27 = (move _28, move _31);
        _33 = (_27.0: &isize);
        _34 = (_27.1: &isize);
        _37 = (*_33);
        _38 = (*_34);
        _36 = Eq(move _37, move _38);
        _35 = Not(move _36);
        switchInt(move _35) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _39 = core::panicking::AssertKind::Eq;
        _41 = Option::<Arguments<'_>>::None;
        _40 = core::panicking::assert_failed::<isize, isize>(move _39, _33, _34, move _41) -> bb17;
    }

    bb9: {
        _45 = &_1;
        _44 = <Vec<isize> as Index<usize>>::index(move _45, const 2_usize) -> [return: bb10, unwind: bb17];
    }

    bb10: {
        _43 = _44;
        _47 = const 10_isize;
        _46 = &_47;
        _42 = (move _43, move _46);
        _48 = (_42.0: &isize);
        _49 = (_42.1: &isize);
        _52 = (*_48);
        _53 = (*_49);
        _51 = Eq(move _52, move _53);
        _50 = Not(move _51);
        switchInt(move _50) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _54 = core::panicking::AssertKind::Eq;
        _56 = Option::<Arguments<'_>>::None;
        _55 = core::panicking::assert_failed::<isize, isize>(move _54, _48, _49, move _56) -> bb17;
    }

    bb12: {
        _60 = &_1;
        _59 = <Vec<isize> as Index<usize>>::index(move _60, const 3_usize) -> [return: bb13, unwind: bb17];
    }

    bb13: {
        _58 = _59;
        _62 = const 11_isize;
        _61 = &_62;
        _57 = (move _58, move _61);
        _63 = (_57.0: &isize);
        _64 = (_57.1: &isize);
        _67 = (*_63);
        _68 = (*_64);
        _66 = Eq(move _67, move _68);
        _65 = Not(move _66);
        switchInt(move _65) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _69 = core::panicking::AssertKind::Eq;
        _71 = Option::<Arguments<'_>>::None;
        _70 = core::panicking::assert_failed::<isize, isize>(move _69, _63, _64, move _71) -> bb17;
    }

    bb15: {
        drop(_1) -> bb16;
    }

    bb16: {
        return;
    }

    bb17 (cleanup): {
        drop(_1) -> [return: bb18, unwind terminate];
    }

    bb18 (cleanup): {
        resume;
    }

    bb19: {
        (*_72) = [const -1_isize, const -1_isize, const -1_isize, const -1_isize];
        _2 = move _6 as std::boxed::Box<[isize]> (Pointer(Unsize));
        _1 = slice::<impl [isize]>::into_vec::<std::alloc::Global>(move _2) -> bb2;
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/for-loop-while/foreach-nested.rs:9:9: 9:12], _2: isize) -> () {
    debug i => _2;
    debug a => (*((*_1).0: &mut std::vec::Vec<isize>));
    debug p => (*((*_1).1: &mut isize));
    let mut _0: ();
    let mut _3: [closure@ui/for-loop-while/foreach-nested.rs:10:13: 10:16];
    let mut _4: &isize;
    let mut _5: &mut std::vec::Vec<isize>;
    let mut _6: &mut isize;

    bb0: {
        _5 = deref_copy ((*_1).0: &mut std::vec::Vec<isize>);
        _6 = deref_copy ((*_1).1: &mut isize);
        _4 = &_2;
        _3 = [closure@ui/for-loop-while/foreach-nested.rs:10:13: 10:16] { i: _5, a: _6, p: move _4 };
        _0 = two::<[closure@ui/for-loop-while/foreach-nested.rs:10:13: 10:16]>(move _3) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main::{closure#0}::{closure#0}(_1: &mut [closure@ui/for-loop-while/foreach-nested.rs:10:13: 10:16], _2: isize) -> () {
    debug j => _2;
    debug a => (*((*_1).0: &mut std::vec::Vec<isize>));
    debug p => (*((*_1).1: &mut isize));
    debug i => (*((*_1).2: &isize));
    let mut _0: ();
    let mut _3: isize;
    let mut _4: isize;
    let mut _5: &mut isize;
    let mut _6: usize;
    let mut _7: isize;
    let mut _8: &isize;
    let mut _9: &mut std::vec::Vec<isize>;
    let mut _10: &mut isize;
    let mut _11: &mut isize;
    let mut _12: &mut isize;

    bb0: {
        _8 = deref_copy ((*_1).2: &isize);
        _4 = (*_8);
        _3 = Mul(const 10_isize, move _4);
        _9 = deref_copy ((*_1).0: &mut std::vec::Vec<isize>);
        _10 = deref_copy ((*_1).1: &mut isize);
        _7 = (*_10);
        _6 = move _7 as usize (IntToInt);
        _5 = <Vec<isize> as IndexMut<usize>>::index_mut(_9, move _6) -> bb1;
    }

    bb1: {
        (*_5) = Add(move _3, _2);
        _11 = deref_copy ((*_1).1: &mut isize);
        _12 = deref_copy ((*_1).1: &mut isize);
        (*_11) = Add((*_12), const 1_isize);
        return;
    }
}
