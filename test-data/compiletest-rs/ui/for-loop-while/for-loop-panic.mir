// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<isize>;
    let mut _2: std::slice::Iter<'_, isize>;
    let mut _3: &std::vec::Vec<isize>;
    let mut _5: std::option::Option<&isize>;
    let mut _6: &mut std::slice::Iter<'_, isize>;
    let mut _7: isize;
    let _8: !;
    scope 1 {
        debug x => _1;
        let mut _4: std::slice::Iter<'_, isize>;
        scope 2 {
            debug iter => _4;
        }
    }

    bb0: {
        _1 = Vec::<isize>::new() -> bb1;
    }

    bb1: {
        _3 = &_1;
        _2 = <&Vec<isize> as IntoIterator>::into_iter(move _3) -> [return: bb2, unwind: bb8];
    }

    bb2: {
        _4 = move _2;
        _6 = &mut _4;
        _5 = <std::slice::Iter<'_, isize> as Iterator>::next(_6) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        _8 = begin_panic::<&str>(const "moop") -> bb8;
    }

    bb5: {
        unreachable;
    }

    bb6: {
        drop(_1) -> bb7;
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_1) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        resume;
    }
}
