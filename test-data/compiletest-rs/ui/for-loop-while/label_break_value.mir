// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn label_break(_1: bool, _2: bool) -> u32 {
    debug a => _1;
    debug b => _2;
    let mut _0: u32;
    let mut _3: u32;
    scope 1 {
        debug v => _3;
    }

    bb0: {
        _3 = const 0_u32;
        _3 = const 1_u32;
        switchInt(_1) -> [0: bb1, otherwise: bb3];
    }

    bb1: {
        _3 = const 2_u32;
        switchInt(_2) -> [0: bb2, otherwise: bb3];
    }

    bb2: {
        _3 = const 3_u32;
        goto -> bb3;
    }

    bb3: {
        _0 = _3;
        return;
    }
}

fn break_value(_1: bool, _2: bool) -> u32 {
    debug a => _1;
    debug b => _2;
    let mut _0: u32;
    let _3: u32;
    scope 1 {
        debug result => _3;
    }

    bb0: {
        switchInt(_1) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _3 = const 1_u32;
        goto -> bb5;
    }

    bb2: {
        switchInt(_2) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _3 = const 2_u32;
        goto -> bb5;
    }

    bb4: {
        _3 = const 3_u32;
        goto -> bb5;
    }

    bb5: {
        _0 = _3;
        return;
    }
}

fn label_break_nested() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let _4: &[&str; 1];
    let _5: [&str; 1];
    let mut _6: bool;
    let mut _7: bool;
    let _8: ();
    let mut _9: std::fmt::Arguments<'_>;
    let mut _10: &[&str];
    let _11: &[&str; 1];
    let _12: [&str; 1];

    bb0: {
        _5 = [const "hi\n"];
        _4 = &_5;
        _3 = _4 as &[&str] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_const(move _3) -> bb1;
    }

    bb1: {
        _1 = _print(move _2) -> bb2;
    }

    bb2: {
        _6 = const false;
        switchInt(move _6) -> [0: bb3, otherwise: bb6];
    }

    bb3: {
        _7 = const false;
        switchInt(move _7) -> [0: bb4, otherwise: bb6];
    }

    bb4: {
        _12 = [const "hello\n"];
        _11 = &_12;
        _10 = _11 as &[&str] (Pointer(Unsize));
        _9 = Arguments::<'_>::new_const(move _10) -> bb5;
    }

    bb5: {
        _8 = _print(move _9) -> bb6;
    }

    bb6: {
        return;
    }
}

fn label_break_mixed(_1: u32) -> u32 {
    debug v => _1;
    let mut _0: u32;
    let mut _2: u32;
    let mut _3: u32;
    let mut _4: (&u32, &u32);
    let mut _5: &u32;
    let mut _6: &u32;
    let _7: u32;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: u32;
    let mut _13: u32;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: bool;
    let mut _18: u32;
    let mut _19: u32;
    let mut _20: (&u32, &u32);
    let mut _21: &u32;
    let mut _22: &u32;
    let _23: u32;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: u32;
    let mut _29: u32;
    let _31: !;
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: u32;
    let mut _36: !;
    scope 1 {
        debug r => _2;
        let _8: &u32;
        let _9: &u32;
        let _24: &u32;
        let _25: &u32;
        scope 2 {
            debug left_val => _8;
            debug right_val => _9;
            let _14: core::panicking::AssertKind;
            scope 3 {
                debug kind => _14;
            }
        }
        scope 4 {
            debug left_val => _24;
            debug right_val => _25;
            let _30: core::panicking::AssertKind;
            scope 5 {
                debug kind => _30;
            }
        }
    }

    bb0: {
        _2 = const 0_u32;
        switchInt(move _1) -> [0: bb14, otherwise: bb1];
    }

    bb1: {
        _3 = _2;
        switchInt(move _3) -> [1: bb2, otherwise: bb3];
    }

    bb2: {
        _5 = &_2;
        _7 = const 1_u32;
        _6 = &_7;
        _4 = (move _5, move _6);
        _8 = (_4.0: &u32);
        _9 = (_4.1: &u32);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb5, otherwise: bb4];
    }

    bb3: {
        _2 = Add(_2, const 1_u32);
        goto -> bb1;
    }

    bb4: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<u32, u32>(move _14, _8, _9, move _16);
    }

    bb5: {
        switchInt(move _1) -> [1: bb14, otherwise: bb6];
    }

    bb6: {
        _18 = _2;
        _17 = Eq(_1, move _18);
        switchInt(move _17) -> [0: bb7, otherwise: bb14];
    }

    bb7: {
        _19 = _2;
        switchInt(move _19) -> [5: bb8, otherwise: bb9];
    }

    bb8: {
        _21 = &_2;
        _23 = const 5_u32;
        _22 = &_23;
        _20 = (move _21, move _22);
        _24 = (_20.0: &u32);
        _25 = (_20.1: &u32);
        _28 = (*_24);
        _29 = (*_25);
        _27 = Eq(move _28, move _29);
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb11, otherwise: bb10];
    }

    bb9: {
        _2 = Add(_2, const 1_u32);
        goto -> bb6;
    }

    bb10: {
        _30 = core::panicking::AssertKind::Eq;
        _32 = Option::<Arguments<'_>>::None;
        _31 = core::panicking::assert_failed::<u32, u32>(move _30, _24, _25, move _32);
    }

    bb11: {
        _35 = _2;
        _34 = Gt(_1, move _35);
        _33 = Not(move _34);
        switchInt(move _33) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _36 = core::panicking::panic(const "assertion failed: v > r");
    }

    bb13: {
        _0 = _1;
        goto -> bb15;
    }

    bb14: {
        _0 = _2;
        goto -> bb15;
    }

    bb15: {
        return;
    }
}

fn label_break_match(_1: u8, _2: u8, _3: i8) -> () {
    debug c => _1;
    debug xe => _2;
    debug ye => _3;
    let mut _0: ();
    let mut _4: u8;
    let mut _8: u8;
    let mut _9: u8;
    let mut _10: bool;
    let mut _11: u8;
    let mut _12: u8;
    let mut _13: bool;
    let mut _16: u8;
    let mut _17: (&u8, &u8);
    let mut _18: &u8;
    let mut _19: &u8;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: u8;
    let mut _25: u8;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: (&i8, &i8);
    let mut _30: &i8;
    let mut _31: &i8;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: i8;
    let mut _37: i8;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _4;
        let _5: i8;
        let _6: u8;
        let _7: &u8;
        let _14: u8;
        let _15: &u8;
        scope 2 {
            debug y => _5;
            let _20: &u8;
            let _21: &u8;
            let _32: &i8;
            let _33: &i8;
            scope 5 {
                debug left_val => _20;
                debug right_val => _21;
                let _26: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _26;
                }
            }
            scope 7 {
                debug left_val => _32;
                debug right_val => _33;
                let _38: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _38;
                }
            }
        }
        scope 3 {
            debug v => _6;
            debug v => _7;
        }
        scope 4 {
            debug v => _14;
            debug v => _15;
        }
    }

    bb0: {
        _4 = const 0_u8;
        switchInt(_1) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _5 = const 0_i8;
        goto -> bb11;
    }

    bb2: {
        _7 = &_1;
        _9 = (*_7);
        _10 = Eq(const 2_u8, const 0_u8);
        assert(!move _10, "attempt to calculate the remainder of `{}` with a divisor of zero", _9) -> bb3;
    }

    bb3: {
        _8 = Rem(move _9, const 2_u8);
        switchInt(move _8) -> [0: bb4, otherwise: bb5];
    }

    bb4: {
        _5 = const 1_i8;
        goto -> bb11;
    }

    bb5: {
        _12 = (*_7);
        _13 = Eq(const 3_u8, const 0_u8);
        assert(!move _13, "attempt to calculate the remainder of `{}` with a divisor of zero", _12) -> bb6;
    }

    bb6: {
        _11 = Rem(move _12, const 3_u8);
        switchInt(move _11) -> [0: bb7, otherwise: bb8];
    }

    bb7: {
        _6 = _1;
        _4 = Add(_4, const 1_u8);
        goto -> bb10;
    }

    bb8: {
        _15 = &_1;
        _16 = (*_15);
        switchInt(move _16) -> [5: bb9, otherwise: bb10];
    }

    bb9: {
        _14 = _1;
        _4 = const 41_u8;
        goto -> bb10;
    }

    bb10: {
        _4 = Add(_4, const 1_u8);
        _5 = const -1_i8;
        goto -> bb11;
    }

    bb11: {
        _18 = &_4;
        _19 = &_2;
        _17 = (move _18, move _19);
        _20 = (_17.0: &u8);
        _21 = (_17.1: &u8);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<u8, u8>(move _26, _20, _21, move _28);
    }

    bb13: {
        _30 = &_5;
        _31 = &_3;
        _29 = (move _30, move _31);
        _32 = (_29.0: &i8);
        _33 = (_29.1: &i8);
        _36 = (*_32);
        _37 = (*_33);
        _35 = Eq(move _36, move _37);
        _34 = Not(move _35);
        switchInt(move _34) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<i8, i8>(move _38, _32, _33, move _40);
    }

    bb15: {
        return;
    }
}

fn label_break_macro() -> () {
    let mut _0: ();
    let _1: u8;
    let mut _2: (&u8, &u8);
    let mut _3: &u8;
    let mut _4: &u8;
    let _5: u8;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: u8;
    let mut _11: u8;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: bool;
    let mut _17: (&u8, &u8);
    let mut _18: &u8;
    let mut _19: &u8;
    let _20: u8;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: u8;
    let mut _26: u8;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _6: &u8;
        let _7: &u8;
        let _15: u8;
        scope 2 {
            debug left_val => _6;
            debug right_val => _7;
            let _12: core::panicking::AssertKind;
            scope 3 {
                debug kind => _12;
            }
        }
        scope 4 {
            debug x => _15;
            let _21: &u8;
            let _22: &u8;
            scope 5 {
                debug left_val => _21;
                debug right_val => _22;
                let _27: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _27;
                }
            }
        }
    }

    bb0: {
        _1 = const 0_u8;
        _3 = &_1;
        _5 = const 0_u8;
        _4 = &_5;
        _2 = (move _3, move _4);
        _6 = (_2.0: &u8);
        _7 = (_2.1: &u8);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<u8, u8>(move _12, _6, _7, move _14);
    }

    bb2: {
        _16 = const true;
        switchInt(move _16) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _15 = const 1_u8;
        goto -> bb5;
    }

    bb4: {
        _15 = const 0_u8;
        goto -> bb5;
    }

    bb5: {
        _18 = &_15;
        _20 = const 1_u8;
        _19 = &_20;
        _17 = (move _18, move _19);
        _21 = (_17.0: &u8);
        _22 = (_17.1: &u8);
        _25 = (*_21);
        _26 = (*_22);
        _24 = Eq(move _25, move _26);
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<u8, u8>(move _27, _21, _22, move _29);
    }

    bb7: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&u32, &u32);
    let mut _2: &u32;
    let _3: u32;
    let mut _4: &u32;
    let _5: u32;
    let _6: &u32;
    let _7: &u32;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: u32;
    let mut _11: u32;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&u32, &u32);
    let mut _16: &u32;
    let _17: u32;
    let mut _18: &u32;
    let _19: u32;
    let _20: &u32;
    let _21: &u32;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: u32;
    let mut _25: u32;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: (&u32, &u32);
    let mut _30: &u32;
    let _31: u32;
    let mut _32: &u32;
    let _33: u32;
    let _34: &u32;
    let _35: &u32;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: u32;
    let mut _39: u32;
    let _41: !;
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _43: (&u32, &u32);
    let mut _44: &u32;
    let _45: u32;
    let mut _46: &u32;
    let _47: u32;
    let _48: &u32;
    let _49: &u32;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: u32;
    let mut _53: u32;
    let _55: !;
    let mut _56: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _57: (&u32, &u32);
    let mut _58: &u32;
    let _59: u32;
    let mut _60: &u32;
    let _61: u32;
    let _62: &u32;
    let _63: &u32;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: u32;
    let mut _67: u32;
    let _69: !;
    let mut _70: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _71: (&u32, &u32);
    let mut _72: &u32;
    let _73: u32;
    let mut _74: &u32;
    let _75: u32;
    let _76: &u32;
    let _77: &u32;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: u32;
    let mut _81: u32;
    let _83: !;
    let mut _84: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _85: (&u32, &u32);
    let mut _86: &u32;
    let _87: u32;
    let mut _88: &u32;
    let _89: u32;
    let _90: &u32;
    let _91: &u32;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: u32;
    let mut _95: u32;
    let _97: !;
    let mut _98: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _99: (&u32, &u32);
    let mut _100: &u32;
    let _101: u32;
    let mut _102: &u32;
    let _103: u32;
    let _104: &u32;
    let _105: &u32;
    let mut _106: bool;
    let mut _107: bool;
    let mut _108: u32;
    let mut _109: u32;
    let _111: !;
    let mut _112: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _113: (&u32, &u32);
    let mut _114: &u32;
    let _115: u32;
    let mut _116: &u32;
    let _117: u32;
    let _118: &u32;
    let _119: &u32;
    let mut _120: bool;
    let mut _121: bool;
    let mut _122: u32;
    let mut _123: u32;
    let _125: !;
    let mut _126: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _127: (&u32, &u32);
    let mut _128: &u32;
    let _129: u32;
    let mut _130: &u32;
    let _131: u32;
    let _132: &u32;
    let _133: &u32;
    let mut _134: bool;
    let mut _135: bool;
    let mut _136: u32;
    let mut _137: u32;
    let _139: !;
    let mut _140: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _141: (&u32, &u32);
    let mut _142: &u32;
    let _143: u32;
    let mut _144: &u32;
    let _145: u32;
    let _146: &u32;
    let _147: &u32;
    let mut _148: bool;
    let mut _149: bool;
    let mut _150: u32;
    let mut _151: u32;
    let _153: !;
    let mut _154: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _155: (&u32, &u32);
    let mut _156: &u32;
    let _157: u32;
    let mut _158: &u32;
    let _159: u32;
    let _160: &u32;
    let _161: &u32;
    let mut _162: bool;
    let mut _163: bool;
    let mut _164: u32;
    let mut _165: u32;
    let _167: !;
    let mut _168: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _169: (&u32, &u32);
    let mut _170: &u32;
    let _171: u32;
    let mut _172: &u32;
    let _173: u32;
    let _174: &u32;
    let _175: &u32;
    let mut _176: bool;
    let mut _177: bool;
    let mut _178: u32;
    let mut _179: u32;
    let _181: !;
    let mut _182: std::option::Option<std::fmt::Arguments<'_>>;
    let _183: ();
    let _184: ();
    let _185: ();
    let _186: ();
    let _187: ();
    let _188: ();
    let _189: ();
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }
    scope 3 {
        debug left_val => _20;
        debug right_val => _21;
        let _26: core::panicking::AssertKind;
        scope 4 {
            debug kind => _26;
        }
    }
    scope 5 {
        debug left_val => _34;
        debug right_val => _35;
        let _40: core::panicking::AssertKind;
        scope 6 {
            debug kind => _40;
        }
    }
    scope 7 {
        debug left_val => _48;
        debug right_val => _49;
        let _54: core::panicking::AssertKind;
        scope 8 {
            debug kind => _54;
        }
    }
    scope 9 {
        debug left_val => _62;
        debug right_val => _63;
        let _68: core::panicking::AssertKind;
        scope 10 {
            debug kind => _68;
        }
    }
    scope 11 {
        debug left_val => _76;
        debug right_val => _77;
        let _82: core::panicking::AssertKind;
        scope 12 {
            debug kind => _82;
        }
    }
    scope 13 {
        debug left_val => _90;
        debug right_val => _91;
        let _96: core::panicking::AssertKind;
        scope 14 {
            debug kind => _96;
        }
    }
    scope 15 {
        debug left_val => _104;
        debug right_val => _105;
        let _110: core::panicking::AssertKind;
        scope 16 {
            debug kind => _110;
        }
    }
    scope 17 {
        debug left_val => _118;
        debug right_val => _119;
        let _124: core::panicking::AssertKind;
        scope 18 {
            debug kind => _124;
        }
    }
    scope 19 {
        debug left_val => _132;
        debug right_val => _133;
        let _138: core::panicking::AssertKind;
        scope 20 {
            debug kind => _138;
        }
    }
    scope 21 {
        debug left_val => _146;
        debug right_val => _147;
        let _152: core::panicking::AssertKind;
        scope 22 {
            debug kind => _152;
        }
    }
    scope 23 {
        debug left_val => _160;
        debug right_val => _161;
        let _166: core::panicking::AssertKind;
        scope 24 {
            debug kind => _166;
        }
    }
    scope 25 {
        debug left_val => _174;
        debug right_val => _175;
        let _180: core::panicking::AssertKind;
        scope 26 {
            debug kind => _180;
        }
    }

    bb0: {
        _3 = label_break(const true, const false) -> bb1;
    }

    bb1: {
        _2 = &_3;
        _5 = const 1_u32;
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &u32);
        _7 = (_1.1: &u32);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<u32, u32>(move _12, _6, _7, move _14);
    }

    bb3: {
        _17 = label_break(const false, const true) -> bb4;
    }

    bb4: {
        _16 = &_17;
        _19 = const 2_u32;
        _18 = &_19;
        _15 = (move _16, move _18);
        _20 = (_15.0: &u32);
        _21 = (_15.1: &u32);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<u32, u32>(move _26, _20, _21, move _28);
    }

    bb6: {
        _31 = label_break(const false, const false) -> bb7;
    }

    bb7: {
        _30 = &_31;
        _33 = const 3_u32;
        _32 = &_33;
        _29 = (move _30, move _32);
        _34 = (_29.0: &u32);
        _35 = (_29.1: &u32);
        _38 = (*_34);
        _39 = (*_35);
        _37 = Eq(move _38, move _39);
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _40 = core::panicking::AssertKind::Eq;
        _42 = Option::<Arguments<'_>>::None;
        _41 = core::panicking::assert_failed::<u32, u32>(move _40, _34, _35, move _42);
    }

    bb9: {
        _45 = break_value(const true, const false) -> bb10;
    }

    bb10: {
        _44 = &_45;
        _47 = const 1_u32;
        _46 = &_47;
        _43 = (move _44, move _46);
        _48 = (_43.0: &u32);
        _49 = (_43.1: &u32);
        _52 = (*_48);
        _53 = (*_49);
        _51 = Eq(move _52, move _53);
        _50 = Not(move _51);
        switchInt(move _50) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _54 = core::panicking::AssertKind::Eq;
        _56 = Option::<Arguments<'_>>::None;
        _55 = core::panicking::assert_failed::<u32, u32>(move _54, _48, _49, move _56);
    }

    bb12: {
        _59 = break_value(const false, const true) -> bb13;
    }

    bb13: {
        _58 = &_59;
        _61 = const 2_u32;
        _60 = &_61;
        _57 = (move _58, move _60);
        _62 = (_57.0: &u32);
        _63 = (_57.1: &u32);
        _66 = (*_62);
        _67 = (*_63);
        _65 = Eq(move _66, move _67);
        _64 = Not(move _65);
        switchInt(move _64) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _68 = core::panicking::AssertKind::Eq;
        _70 = Option::<Arguments<'_>>::None;
        _69 = core::panicking::assert_failed::<u32, u32>(move _68, _62, _63, move _70);
    }

    bb15: {
        _73 = break_value(const false, const false) -> bb16;
    }

    bb16: {
        _72 = &_73;
        _75 = const 3_u32;
        _74 = &_75;
        _71 = (move _72, move _74);
        _76 = (_71.0: &u32);
        _77 = (_71.1: &u32);
        _80 = (*_76);
        _81 = (*_77);
        _79 = Eq(move _80, move _81);
        _78 = Not(move _79);
        switchInt(move _78) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _82 = core::panicking::AssertKind::Eq;
        _84 = Option::<Arguments<'_>>::None;
        _83 = core::panicking::assert_failed::<u32, u32>(move _82, _76, _77, move _84);
    }

    bb18: {
        _87 = label_break_mixed(const 0_u32) -> bb19;
    }

    bb19: {
        _86 = &_87;
        _89 = const 0_u32;
        _88 = &_89;
        _85 = (move _86, move _88);
        _90 = (_85.0: &u32);
        _91 = (_85.1: &u32);
        _94 = (*_90);
        _95 = (*_91);
        _93 = Eq(move _94, move _95);
        _92 = Not(move _93);
        switchInt(move _92) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _96 = core::panicking::AssertKind::Eq;
        _98 = Option::<Arguments<'_>>::None;
        _97 = core::panicking::assert_failed::<u32, u32>(move _96, _90, _91, move _98);
    }

    bb21: {
        _101 = label_break_mixed(const 1_u32) -> bb22;
    }

    bb22: {
        _100 = &_101;
        _103 = const 1_u32;
        _102 = &_103;
        _99 = (move _100, move _102);
        _104 = (_99.0: &u32);
        _105 = (_99.1: &u32);
        _108 = (*_104);
        _109 = (*_105);
        _107 = Eq(move _108, move _109);
        _106 = Not(move _107);
        switchInt(move _106) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _110 = core::panicking::AssertKind::Eq;
        _112 = Option::<Arguments<'_>>::None;
        _111 = core::panicking::assert_failed::<u32, u32>(move _110, _104, _105, move _112);
    }

    bb24: {
        _115 = label_break_mixed(const 2_u32) -> bb25;
    }

    bb25: {
        _114 = &_115;
        _117 = const 2_u32;
        _116 = &_117;
        _113 = (move _114, move _116);
        _118 = (_113.0: &u32);
        _119 = (_113.1: &u32);
        _122 = (*_118);
        _123 = (*_119);
        _121 = Eq(move _122, move _123);
        _120 = Not(move _121);
        switchInt(move _120) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _124 = core::panicking::AssertKind::Eq;
        _126 = Option::<Arguments<'_>>::None;
        _125 = core::panicking::assert_failed::<u32, u32>(move _124, _118, _119, move _126);
    }

    bb27: {
        _129 = label_break_mixed(const 3_u32) -> bb28;
    }

    bb28: {
        _128 = &_129;
        _131 = const 3_u32;
        _130 = &_131;
        _127 = (move _128, move _130);
        _132 = (_127.0: &u32);
        _133 = (_127.1: &u32);
        _136 = (*_132);
        _137 = (*_133);
        _135 = Eq(move _136, move _137);
        _134 = Not(move _135);
        switchInt(move _134) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _138 = core::panicking::AssertKind::Eq;
        _140 = Option::<Arguments<'_>>::None;
        _139 = core::panicking::assert_failed::<u32, u32>(move _138, _132, _133, move _140);
    }

    bb30: {
        _143 = label_break_mixed(const 4_u32) -> bb31;
    }

    bb31: {
        _142 = &_143;
        _145 = const 4_u32;
        _144 = &_145;
        _141 = (move _142, move _144);
        _146 = (_141.0: &u32);
        _147 = (_141.1: &u32);
        _150 = (*_146);
        _151 = (*_147);
        _149 = Eq(move _150, move _151);
        _148 = Not(move _149);
        switchInt(move _148) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _152 = core::panicking::AssertKind::Eq;
        _154 = Option::<Arguments<'_>>::None;
        _153 = core::panicking::assert_failed::<u32, u32>(move _152, _146, _147, move _154);
    }

    bb33: {
        _157 = label_break_mixed(const 5_u32) -> bb34;
    }

    bb34: {
        _156 = &_157;
        _159 = const 5_u32;
        _158 = &_159;
        _155 = (move _156, move _158);
        _160 = (_155.0: &u32);
        _161 = (_155.1: &u32);
        _164 = (*_160);
        _165 = (*_161);
        _163 = Eq(move _164, move _165);
        _162 = Not(move _163);
        switchInt(move _162) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _166 = core::panicking::AssertKind::Eq;
        _168 = Option::<Arguments<'_>>::None;
        _167 = core::panicking::assert_failed::<u32, u32>(move _166, _160, _161, move _168);
    }

    bb36: {
        _171 = label_break_mixed(const 6_u32) -> bb37;
    }

    bb37: {
        _170 = &_171;
        _173 = const 6_u32;
        _172 = &_173;
        _169 = (move _170, move _172);
        _174 = (_169.0: &u32);
        _175 = (_169.1: &u32);
        _178 = (*_174);
        _179 = (*_175);
        _177 = Eq(move _178, move _179);
        _176 = Not(move _177);
        switchInt(move _176) -> [0: bb39, otherwise: bb38];
    }

    bb38: {
        _180 = core::panicking::AssertKind::Eq;
        _182 = Option::<Arguments<'_>>::None;
        _181 = core::panicking::assert_failed::<u32, u32>(move _180, _174, _175, move _182);
    }

    bb39: {
        _183 = label_break_match(const 0_u8, const 0_u8, const 0_i8) -> bb40;
    }

    bb40: {
        _184 = label_break_match(const 1_u8, const 1_u8, const -1_i8) -> bb41;
    }

    bb41: {
        _185 = label_break_match(const 2_u8, const 0_u8, const 1_i8) -> bb42;
    }

    bb42: {
        _186 = label_break_match(const 3_u8, const 2_u8, const -1_i8) -> bb43;
    }

    bb43: {
        _187 = label_break_match(const 5_u8, const 42_u8, const -1_i8) -> bb44;
    }

    bb44: {
        _188 = label_break_match(const 7_u8, const 1_u8, const -1_i8) -> bb45;
    }

    bb45: {
        _189 = label_break_macro() -> bb46;
    }

    bb46: {
        return;
    }
}
