// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:6:1: 6:16>::drop(_1: &mut S) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn my_panic() -> ! {
    let mut _0: !;

    bb0: {
        goto -> bb1;
    }

    bb1: {
        goto -> bb1;
    }
}

fn step(_1: bool) -> () {
    debug f => _1;
    let mut _0: ();
    let mut _2: S;
    let mut _4: bool;
    let mut _5: i32;
    let _7: !;
    let mut _8: bool;
    scope 1 {
        debug g => const S;
        let mut _3: i32;
        scope 2 {
            debug i => _3;
            let _6: S;
            scope 3 {
                debug _g => const S;
            }
        }
    }

    bb0: {
        _8 = const false;
        _8 = const true;
        _3 = const 0_i32;
        goto -> bb1;
    }

    bb1: {
        _5 = _3;
        _4 = Gt(move _5, const 10_i32);
        switchInt(move _4) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        drop(_2) -> bb6;
    }

    bb3: {
        _3 = Add(_3, const 1_i32);
        _8 = const false;
        switchInt(_1) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _8 = const true;
        drop(_6) -> [return: bb1, unwind: bb10];
    }

    bb5: {
        _7 = my_panic() -> bb7;
    }

    bb6: {
        _8 = const false;
        return;
    }

    bb7 (cleanup): {
        drop(_6) -> [return: bb10, unwind terminate];
    }

    bb8 (cleanup): {
        resume;
    }

    bb9 (cleanup): {
        drop(_2) -> [return: bb8, unwind terminate];
    }

    bb10 (cleanup): {
        switchInt(_8) -> [0: bb8, otherwise: bb9];
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();

    bb0: {
        _1 = step(const true) -> bb1;
    }

    bb1: {
        return;
    }
}
