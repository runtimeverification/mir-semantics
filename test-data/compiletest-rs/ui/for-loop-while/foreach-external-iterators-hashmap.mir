// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: std::collections::HashMap<i32, i32>;
    let mut _3: (i32, i32);
    let mut _4: (i32, i32);
    let mut _5: (i32, i32);
    let mut _6: std::slice::Iter<'_, (i32, i32)>;
    let mut _7: &[(i32, i32); 3];
    let mut _9: std::option::Option<&(i32, i32)>;
    let mut _10: &mut std::slice::Iter<'_, (i32, i32)>;
    let mut _11: isize;
    let _14: std::option::Option<i32>;
    let mut _15: &mut std::collections::HashMap<i32, i32>;
    let mut _18: std::collections::hash_map::Iter<'_, i32, i32>;
    let mut _19: &std::collections::HashMap<i32, i32>;
    let mut _21: std::option::Option<(&i32, &i32)>;
    let mut _22: &mut std::collections::hash_map::Iter<'_, i32, i32>;
    let mut _23: isize;
    let mut _26: (&i32, &i32);
    let mut _27: &i32;
    let mut _28: &i32;
    let _29: i32;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: i32;
    let mut _35: i32;
    let _37: !;
    let mut _38: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _39: (&i32, &i32);
    let mut _40: &i32;
    let mut _41: &i32;
    let _42: i32;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: i32;
    let mut _48: i32;
    let _50: !;
    let mut _51: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _52: &(i32, i32);
    let mut _53: &(i32, i32);
    let mut _54: &i32;
    let mut _55: &i32;
    scope 1 {
        debug h => _1;
        let _2: [(i32, i32); 3];
        scope 2 {
            debug kvs => _2;
            let mut _8: std::slice::Iter<'_, (i32, i32)>;
            let mut _16: i32;
            scope 3 {
                debug iter => _8;
                let _12: i32;
                let _13: i32;
                scope 4 {
                    debug k => _12;
                    debug v => _13;
                }
            }
            scope 5 {
                debug x => _16;
                let mut _17: i32;
                scope 6 {
                    debug y => _17;
                    let mut _20: std::collections::hash_map::Iter<'_, i32, i32>;
                    let _30: &i32;
                    let _31: &i32;
                    let _43: &i32;
                    let _44: &i32;
                    scope 7 {
                        debug iter => _20;
                        let _24: i32;
                        let _25: i32;
                        scope 8 {
                            debug k => _24;
                            debug v => _25;
                        }
                    }
                    scope 9 {
                        debug left_val => _30;
                        debug right_val => _31;
                        let _36: core::panicking::AssertKind;
                        scope 10 {
                            debug kind => _36;
                        }
                    }
                    scope 11 {
                        debug left_val => _43;
                        debug right_val => _44;
                        let _49: core::panicking::AssertKind;
                        scope 12 {
                            debug kind => _49;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = HashMap::<i32, i32>::new() -> bb1;
    }

    bb1: {
        _3 = (const 1_i32, const 10_i32);
        _4 = (const 2_i32, const 20_i32);
        _5 = (const 3_i32, const 30_i32);
        _2 = [move _3, move _4, move _5];
        _7 = &_2;
        _6 = <&[(i32, i32); 3] as IntoIterator>::into_iter(move _7) -> [return: bb2, unwind: bb18];
    }

    bb2: {
        _8 = move _6;
        goto -> bb3;
    }

    bb3: {
        _10 = &mut _8;
        _9 = <std::slice::Iter<'_, (i32, i32)> as Iterator>::next(_10) -> [return: bb4, unwind: bb18];
    }

    bb4: {
        _11 = discriminant(_9);
        switchInt(move _11) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        _52 = deref_copy ((_9 as Some).0: &(i32, i32));
        _12 = ((*_52).0: i32);
        _53 = deref_copy ((_9 as Some).0: &(i32, i32));
        _13 = ((*_53).1: i32);
        _15 = &mut _1;
        _14 = HashMap::<i32, i32>::insert(move _15, _12, _13) -> [return: bb20, unwind: bb18];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _16 = const 0_i32;
        _17 = const 0_i32;
        _19 = &_1;
        _18 = <&HashMap<i32, i32> as IntoIterator>::into_iter(move _19) -> [return: bb8, unwind: bb18];
    }

    bb8: {
        _20 = move _18;
        goto -> bb9;
    }

    bb9: {
        _22 = &mut _20;
        _21 = <std::collections::hash_map::Iter<'_, i32, i32> as Iterator>::next(_22) -> [return: bb10, unwind: bb18];
    }

    bb10: {
        _23 = discriminant(_21);
        switchInt(move _23) -> [0: bb12, 1: bb11, otherwise: bb6];
    }

    bb11: {
        _54 = deref_copy (((_21 as Some).0: (&i32, &i32)).0: &i32);
        _24 = (*_54);
        _55 = deref_copy (((_21 as Some).0: (&i32, &i32)).1: &i32);
        _25 = (*_55);
        _16 = Add(_16, _24);
        _17 = Add(_17, _25);
        goto -> bb9;
    }

    bb12: {
        _27 = &_16;
        _29 = const 6_i32;
        _28 = &_29;
        _26 = (move _27, move _28);
        _30 = (_26.0: &i32);
        _31 = (_26.1: &i32);
        _34 = (*_30);
        _35 = (*_31);
        _33 = Eq(move _34, move _35);
        _32 = Not(move _33);
        switchInt(move _32) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _36 = core::panicking::AssertKind::Eq;
        _38 = Option::<Arguments<'_>>::None;
        _37 = core::panicking::assert_failed::<i32, i32>(move _36, _30, _31, move _38) -> bb18;
    }

    bb14: {
        _40 = &_17;
        _42 = const 60_i32;
        _41 = &_42;
        _39 = (move _40, move _41);
        _43 = (_39.0: &i32);
        _44 = (_39.1: &i32);
        _47 = (*_43);
        _48 = (*_44);
        _46 = Eq(move _47, move _48);
        _45 = Not(move _46);
        switchInt(move _45) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _49 = core::panicking::AssertKind::Eq;
        _51 = Option::<Arguments<'_>>::None;
        _50 = core::panicking::assert_failed::<i32, i32>(move _49, _43, _44, move _51) -> bb18;
    }

    bb16: {
        drop(_1) -> bb17;
    }

    bb17: {
        return;
    }

    bb18 (cleanup): {
        drop(_1) -> [return: bb19, unwind terminate];
    }

    bb19 (cleanup): {
        resume;
    }

    bb20: {
        goto -> bb3;
    }
}
