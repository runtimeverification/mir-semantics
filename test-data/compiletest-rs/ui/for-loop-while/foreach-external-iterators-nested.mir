// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: [i32; 100];
    let mut _5: std::slice::Iter<'_, i32>;
    let mut _6: &[i32];
    let _7: &[i32];
    let mut _8: &[i32; 100];
    let mut _10: std::option::Option<&i32>;
    let mut _11: &mut std::slice::Iter<'_, i32>;
    let mut _12: isize;
    let mut _14: std::slice::Iter<'_, i32>;
    let mut _15: &[i32];
    let _16: &[i32];
    let mut _17: &[i32; 100];
    let mut _19: std::option::Option<&i32>;
    let mut _20: &mut std::slice::Iter<'_, i32>;
    let mut _21: isize;
    let mut _23: i32;
    let mut _24: i32;
    let mut _25: i32;
    let mut _26: i32;
    let mut _27: (&i32, &i32);
    let mut _28: &i32;
    let mut _29: &i32;
    let _30: i32;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: i32;
    let mut _36: i32;
    let _38: !;
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _2: [i32; 100];
        scope 2 {
            debug y => _2;
            let mut _3: i32;
            scope 3 {
                debug p => _3;
                let mut _4: i32;
                scope 4 {
                    debug q => _4;
                    let mut _9: std::slice::Iter<'_, i32>;
                    let _31: &i32;
                    let _32: &i32;
                    scope 5 {
                        debug iter => _9;
                        let _13: &i32;
                        scope 6 {
                            debug i => _13;
                            let mut _18: std::slice::Iter<'_, i32>;
                            scope 7 {
                                debug iter => _18;
                                let _22: &i32;
                                scope 8 {
                                    debug j => _22;
                                }
                            }
                        }
                    }
                    scope 9 {
                        debug left_val => _31;
                        debug right_val => _32;
                        let _37: core::panicking::AssertKind;
                        scope 10 {
                            debug kind => _37;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = [const 1_i32; 100];
        _2 = [const 2_i32; 100];
        _3 = const 0_i32;
        _4 = const 0_i32;
        _8 = &_1;
        _7 = <[i32; 100] as Index<RangeFull>>::index(move _8, const RangeFull) -> bb1;
    }

    bb1: {
        _6 = _7;
        _5 = <&[i32] as IntoIterator>::into_iter(move _6) -> bb2;
    }

    bb2: {
        _9 = move _5;
        goto -> bb3;
    }

    bb3: {
        _11 = &mut _9;
        _10 = <std::slice::Iter<'_, i32> as Iterator>::next(_11) -> bb4;
    }

    bb4: {
        _12 = discriminant(_10);
        switchInt(move _12) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        _13 = ((_10 as Some).0: &i32);
        _17 = &_2;
        _16 = <[i32; 100] as Index<RangeFull>>::index(move _17, const RangeFull) -> bb8;
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _28 = &_4;
        _30 = const 1010100_i32;
        _29 = &_30;
        _27 = (move _28, move _29);
        _31 = (_27.0: &i32);
        _32 = (_27.1: &i32);
        _35 = (*_31);
        _36 = (*_32);
        _34 = Eq(move _35, move _36);
        _33 = Not(move _34);
        switchInt(move _33) -> [0: bb15, otherwise: bb14];
    }

    bb8: {
        _15 = _16;
        _14 = <&[i32] as IntoIterator>::into_iter(move _15) -> bb9;
    }

    bb9: {
        _18 = move _14;
        goto -> bb10;
    }

    bb10: {
        _20 = &mut _18;
        _19 = <std::slice::Iter<'_, i32> as Iterator>::next(_20) -> bb11;
    }

    bb11: {
        _21 = discriminant(_19);
        switchInt(move _21) -> [0: bb13, 1: bb12, otherwise: bb6];
    }

    bb12: {
        _22 = ((_19 as Some).0: &i32);
        _23 = (*_22);
        _3 = Add(_3, move _23);
        goto -> bb10;
    }

    bb13: {
        _25 = (*_13);
        _26 = _3;
        _24 = Add(move _25, move _26);
        _4 = Add(_4, move _24);
        goto -> bb3;
    }

    bb14: {
        _37 = core::panicking::AssertKind::Eq;
        _39 = Option::<Arguments<'_>>::None;
        _38 = core::panicking::assert_failed::<i32, i32>(move _37, _31, _32, move _39);
    }

    bb15: {
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 100_usize;
        return;
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 100_usize;
        return;
    }
}
