// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: [i32; 3];
    let mut _2: std::slice::Iter<'_, i32>;
    let mut _3: &[i32; 3];
    let mut _5: std::option::Option<&i32>;
    let mut _6: &mut std::slice::Iter<'_, i32>;
    let mut _7: isize;
    let mut _9: (&i32, &i32);
    let mut _10: &i32;
    let _11: i32;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: i32;
    let mut _17: i32;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let mut _4: std::slice::Iter<'_, i32>;
        scope 2 {
            debug iter => _4;
            let _8: &i32;
            scope 3 {
                debug i => _8;
                let _12: &i32;
                let _13: &i32;
                scope 4 {
                    debug left_val => _12;
                    debug right_val => _13;
                    let _18: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _18;
                    }
                }
            }
        }
    }

    bb0: {
        _1 = [const 3_i32, const 3_i32, const 3_i32];
        _3 = &_1;
        _2 = <&[i32; 3] as IntoIterator>::into_iter(move _3) -> bb1;
    }

    bb1: {
        _4 = move _2;
        goto -> bb2;
    }

    bb2: {
        _6 = &mut _4;
        _5 = <std::slice::Iter<'_, i32> as std::iter::Iterator>::next(_6) -> bb3;
    }

    bb3: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        _8 = ((_5 as Some).0: &i32);
        _11 = const 3_i32;
        _10 = &_11;
        _9 = (_8, move _10);
        _12 = (_9.0: &i32);
        _13 = (_9.1: &i32);
        _16 = (*_12);
        _17 = (*_13);
        _15 = Eq(move _16, move _17);
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb2, otherwise: bb7];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        return;
    }

    bb7: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<i32, i32>(move _18, _12, _13, move _20);
    }
}

fn BogusOption::Some(_1: T) -> BogusOption<T> {
    let mut _0: BogusOption<T>;

    bb0: {
        _0 = BogusOption::<T>::Some(move _1);
        return;
    }
}

// MIR FOR CTFE
fn BogusOption::Some(_1: T) -> BogusOption<T> {
    let mut _0: BogusOption<T>;

    bb0: {
        _0 = BogusOption::<T>::Some(move _1);
        return;
    }
}
