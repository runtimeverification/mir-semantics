// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: std::vec::Vec<i32>;
    let mut _2: std::boxed::Box<[i32]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[i32; 1]>;
    let mut _7: std::slice::Iter<'_, i32>;
    let mut _8: &std::vec::Vec<i32>;
    let mut _10: std::option::Option<&i32>;
    let mut _11: &mut std::slice::Iter<'_, i32>;
    let mut _12: isize;
    let mut _14: (&&i32, &&i32);
    let mut _15: &&i32;
    let mut _16: &&i32;
    let _17: &i32;
    let _18: i32;
    let mut _21: bool;
    let mut _22: bool;
    let _24: !;
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _26: std::slice::IterMut<'_, i32>;
    let mut _27: &mut std::vec::Vec<i32>;
    let mut _29: std::option::Option<&mut i32>;
    let mut _30: &mut std::slice::IterMut<'_, i32>;
    let mut _31: isize;
    let mut _33: (&&mut i32, &&mut i32);
    let mut _34: &&mut i32;
    let mut _35: &&mut i32;
    let _36: &mut i32;
    let mut _37: i32;
    let mut _40: bool;
    let mut _41: bool;
    let _43: !;
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _45: std::vec::IntoIter<i32>;
    let mut _46: std::vec::Vec<i32>;
    let mut _48: std::option::Option<i32>;
    let mut _49: &mut std::vec::IntoIter<i32>;
    let mut _50: isize;
    let mut _52: (&i32, &i32);
    let mut _53: &i32;
    let mut _54: &i32;
    let _55: i32;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: i32;
    let mut _61: i32;
    let _63: !;
    let mut _64: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _65: bool;
    let mut _66: *const [i32; 1];
    let mut _67: *const ();
    let mut _68: usize;
    let mut _69: usize;
    let mut _70: usize;
    let mut _71: usize;
    let mut _72: bool;
    scope 1 {
        debug v => _1;
        let mut _9: std::slice::Iter<'_, i32>;
        let mut _28: std::slice::IterMut<'_, i32>;
        let mut _47: std::vec::IntoIter<i32>;
        scope 3 {
            debug iter => _9;
            let _13: &i32;
            scope 4 {
                debug x => _13;
                let _19: &&i32;
                let _20: &&i32;
                scope 5 {
                    debug left_val => _19;
                    debug right_val => _20;
                    let _23: core::panicking::AssertKind;
                    scope 6 {
                        debug kind => _23;
                    }
                }
            }
        }
        scope 7 {
            debug iter => _28;
            let _32: &mut i32;
            scope 8 {
                debug x => _32;
                let _38: &&mut i32;
                let _39: &&mut i32;
                scope 9 {
                    debug left_val => _38;
                    debug right_val => _39;
                    let _42: core::panicking::AssertKind;
                    scope 10 {
                        debug kind => _42;
                    }
                }
            }
        }
        scope 11 {
            debug iter => _47;
            let _51: i32;
            scope 12 {
                debug x => _51;
                let _56: &i32;
                let _57: &i32;
                scope 13 {
                    debug left_val => _56;
                    debug right_val => _57;
                    let _62: core::panicking::AssertKind;
                    scope 14 {
                        debug kind => _62;
                    }
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _65 = const false;
        _3 = SizeOf([i32; 1]);
        _4 = AlignOf([i32; 1]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> bb1;
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [i32; 1]);
        _66 = (((_6.0: std::ptr::Unique<[i32; 1]>).0: std::ptr::NonNull<[i32; 1]>).0: *const [i32; 1]);
        _67 = _66 as *const () (PtrToPtr);
        _68 = _67 as usize (Transmute);
        _69 = AlignOf(i32);
        _70 = Sub(_69, const 1_usize);
        _71 = BitAnd(_68, _70);
        _72 = Eq(_71, const 0_usize);
        assert(_72, "misaligned pointer dereference: address must be a multiple of {} but is {}", _69, _68) -> [success: bb29, unwind unreachable];
    }

    bb2: {
        _65 = const true;
        _8 = &_1;
        _7 = <&Vec<i32> as IntoIterator>::into_iter(move _8) -> [return: bb3, unwind: bb28];
    }

    bb3: {
        _9 = move _7;
        goto -> bb4;
    }

    bb4: {
        _11 = &mut _9;
        _10 = <std::slice::Iter<'_, i32> as Iterator>::next(_11) -> [return: bb5, unwind: bb28];
    }

    bb5: {
        _12 = discriminant(_10);
        switchInt(move _12) -> [0: bb8, 1: bb6, otherwise: bb7];
    }

    bb6: {
        _13 = ((_10 as Some).0: &i32);
        _15 = &_13;
        _18 = const 1_i32;
        _17 = &_18;
        _16 = &_17;
        _14 = (move _15, move _16);
        _19 = (_14.0: &&i32);
        _20 = (_14.1: &&i32);
        _22 = <&i32 as PartialEq>::eq(_19, _20) -> [return: bb9, unwind: bb28];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        _27 = &mut _1;
        _26 = <&mut Vec<i32> as IntoIterator>::into_iter(move _27) -> [return: bb11, unwind: bb28];
    }

    bb9: {
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb4, otherwise: bb10];
    }

    bb10: {
        _23 = core::panicking::AssertKind::Eq;
        _25 = Option::<Arguments<'_>>::None;
        _24 = core::panicking::assert_failed::<&i32, &i32>(move _23, _19, _20, move _25) -> bb28;
    }

    bb11: {
        _28 = move _26;
        goto -> bb12;
    }

    bb12: {
        _30 = &mut _28;
        _29 = <std::slice::IterMut<'_, i32> as Iterator>::next(_30) -> [return: bb13, unwind: bb28];
    }

    bb13: {
        _31 = discriminant(_29);
        switchInt(move _31) -> [0: bb15, 1: bb14, otherwise: bb7];
    }

    bb14: {
        _32 = move ((_29 as Some).0: &mut i32);
        _34 = &_32;
        _37 = const 1_i32;
        _36 = &mut _37;
        _35 = &_36;
        _33 = (move _34, move _35);
        _38 = (_33.0: &&mut i32);
        _39 = (_33.1: &&mut i32);
        _41 = <&mut i32 as PartialEq>::eq(_38, _39) -> [return: bb16, unwind: bb28];
    }

    bb15: {
        _65 = const false;
        _46 = move _1;
        _45 = <Vec<i32> as IntoIterator>::into_iter(move _46) -> [return: bb18, unwind: bb28];
    }

    bb16: {
        _40 = Not(move _41);
        switchInt(move _40) -> [0: bb12, otherwise: bb17];
    }

    bb17: {
        _42 = core::panicking::AssertKind::Eq;
        _44 = Option::<Arguments<'_>>::None;
        _43 = core::panicking::assert_failed::<&mut i32, &mut i32>(move _42, _38, _39, move _44) -> bb28;
    }

    bb18: {
        _47 = move _45;
        goto -> bb19;
    }

    bb19: {
        _49 = &mut _47;
        _48 = <std::vec::IntoIter<i32> as Iterator>::next(_49) -> [return: bb20, unwind: bb25];
    }

    bb20: {
        _50 = discriminant(_48);
        switchInt(move _50) -> [0: bb22, 1: bb21, otherwise: bb7];
    }

    bb21: {
        _51 = ((_48 as Some).0: i32);
        _53 = &_51;
        _55 = const 1_i32;
        _54 = &_55;
        _52 = (move _53, move _54);
        _56 = (_52.0: &i32);
        _57 = (_52.1: &i32);
        _60 = (*_56);
        _61 = (*_57);
        _59 = Eq(move _60, move _61);
        _58 = Not(move _59);
        switchInt(move _58) -> [0: bb19, otherwise: bb23];
    }

    bb22: {
        drop(_47) -> [return: bb24, unwind: bb28];
    }

    bb23: {
        _62 = core::panicking::AssertKind::Eq;
        _64 = Option::<Arguments<'_>>::None;
        _63 = core::panicking::assert_failed::<i32, i32>(move _62, _56, _57, move _64) -> bb25;
    }

    bb24: {
        _65 = const false;
        return;
    }

    bb25 (cleanup): {
        drop(_47) -> [return: bb28, unwind terminate];
    }

    bb26 (cleanup): {
        resume;
    }

    bb27 (cleanup): {
        drop(_1) -> [return: bb26, unwind terminate];
    }

    bb28 (cleanup): {
        switchInt(_65) -> [0: bb26, otherwise: bb27];
    }

    bb29: {
        (*_66) = [const 1_i32];
        _2 = move _6 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _1 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _2) -> bb2;
    }
}
