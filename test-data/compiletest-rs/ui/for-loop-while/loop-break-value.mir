// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn never_returns() -> () {
    let mut _0: ();

    bb0: {
        goto -> bb1;
    }

    bb1: {
        goto -> bb1;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _2: bool;
    let mut _3: !;
    let mut _4: (&i32, &i32);
    let mut _5: &i32;
    let mut _6: &i32;
    let _7: i32;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: i32;
    let mut _13: i32;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let _21: &[u32];
    let mut _22: i32;
    let _23: &[u32; 3];
    let _24: &[u32; 1];
    let _25: &[u32; 0];
    let mut _26: (&&[u32], &&[u32; 1]);
    let mut _27: &&[u32];
    let mut _28: &&[u32; 1];
    let _29: &[u32; 1];
    let _30: [u32; 1];
    let mut _33: bool;
    let mut _34: bool;
    let _36: !;
    let mut _37: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _39: bool;
    let mut _40: (&[i32; 2], &[i32; 2]);
    let mut _41: &[i32; 2];
    let mut _42: &[i32; 2];
    let _43: [i32; 2];
    let mut _46: bool;
    let mut _47: bool;
    let _49: !;
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _52: bool;
    let mut _53: std::string::String;
    let mut _54: (&[std::string::String; 1], &[&str; 1]);
    let mut _55: &[std::string::String; 1];
    let mut _56: &[&str; 1];
    let _57: [&str; 1];
    let mut _60: bool;
    let mut _61: bool;
    let _63: !;
    let mut _64: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _66: bool;
    let mut _67: std::string::String;
    let mut _68: std::string::String;
    let _69: &str;
    let mut _70: (&[std::string::String; 1], &[&str; 1]);
    let mut _71: &[std::string::String; 1];
    let mut _72: &[&str; 1];
    let _73: [&str; 1];
    let mut _76: bool;
    let mut _77: bool;
    let _79: !;
    let mut _80: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _82: bool;
    let mut _83: (&(), &());
    let mut _84: &();
    let mut _85: &();
    let _86: ();
    let mut _89: bool;
    let mut _90: bool;
    let _92: !;
    let mut _93: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _95: bool;
    let mut _96: (&(), &());
    let mut _97: &();
    let mut _98: &();
    let _99: ();
    let mut _102: bool;
    let mut _103: bool;
    let _105: !;
    let mut _106: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _108: bool;
    let mut _109: (&(), &());
    let mut _110: &();
    let mut _111: &();
    let _112: ();
    let mut _115: bool;
    let mut _116: bool;
    let _118: !;
    let mut _119: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _121: (&(), &());
    let mut _122: &();
    let mut _123: &();
    let _124: ();
    let mut _127: bool;
    let mut _128: bool;
    let _130: !;
    let mut _131: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _133: (&(), &());
    let mut _134: &();
    let mut _135: &();
    let _136: ();
    let mut _139: bool;
    let mut _140: bool;
    let _142: !;
    let mut _143: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _146: bool;
    let mut _147: !;
    let mut _148: (&&str, &&str);
    let mut _149: &&str;
    let mut _150: &&str;
    let _151: &str;
    let mut _154: bool;
    let mut _155: bool;
    let _157: !;
    let mut _158: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _160: (&i32, &i32);
    let mut _161: &i32;
    let mut _162: &i32;
    let _163: i32;
    let mut _166: bool;
    let mut _167: bool;
    let mut _168: i32;
    let mut _169: i32;
    let _171: !;
    let mut _172: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _174: (&i32, &i32);
    let mut _175: &i32;
    let mut _176: &i32;
    let _177: i32;
    let mut _180: bool;
    let mut _181: bool;
    let mut _182: i32;
    let mut _183: i32;
    let _185: !;
    let mut _186: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _188: bool;
    let mut _189: !;
    scope 1 {
        debug value => _1;
        let _8: &i32;
        let _9: &i32;
        let _17: [u32; 3];
        scope 3 {
            debug left_val => _8;
            debug right_val => _9;
            let _14: core::panicking::AssertKind;
            scope 4 {
                debug kind => _14;
            }
        }
        scope 5 {
            debug x => _17;
            let _18: [u32; 1];
            scope 6 {
                debug y => _18;
                let _19: [u32; 0];
                scope 7 {
                    debug z => const [];
                    let _20: &[u32];
                    scope 8 {
                        debug coerced => _20;
                        let _31: &&[u32];
                        let _32: &&[u32; 1];
                        let _38: [i32; 2];
                        scope 9 {
                            debug left_val => _31;
                            debug right_val => _32;
                            let _35: core::panicking::AssertKind;
                            scope 10 {
                                debug kind => _35;
                            }
                        }
                        scope 11 {
                            debug trait_unified => _38;
                            let _44: &[i32; 2];
                            let _45: &[i32; 2];
                            let _51: [std::string::String; 1];
                            scope 12 {
                                debug left_val => _44;
                                debug right_val => _45;
                                let _48: core::panicking::AssertKind;
                                scope 13 {
                                    debug kind => _48;
                                }
                            }
                            scope 14 {
                                debug trait_unified_2 => _51;
                                let _58: &[std::string::String; 1];
                                let _59: &[&str; 1];
                                let _65: [std::string::String; 1];
                                scope 15 {
                                    debug left_val => _58;
                                    debug right_val => _59;
                                    let _62: core::panicking::AssertKind;
                                    scope 16 {
                                        debug kind => _62;
                                    }
                                }
                                scope 17 {
                                    debug trait_unified_3 => _65;
                                    let _74: &[std::string::String; 1];
                                    let _75: &[&str; 1];
                                    let _81: ();
                                    scope 18 {
                                        debug left_val => _74;
                                        debug right_val => _75;
                                        let _78: core::panicking::AssertKind;
                                        scope 19 {
                                            debug kind => _78;
                                        }
                                    }
                                    scope 20 {
                                        debug regular_break => const ();
                                        let _87: &();
                                        let _88: &();
                                        let _94: ();
                                        scope 21 {
                                            debug left_val => _87;
                                            debug right_val => _88;
                                            let _91: core::panicking::AssertKind;
                                            scope 22 {
                                                debug kind => _91;
                                            }
                                        }
                                        scope 23 {
                                            debug regular_break_2 => const ();
                                            let _100: &();
                                            let _101: &();
                                            let _107: ();
                                            scope 24 {
                                                debug left_val => _100;
                                                debug right_val => _101;
                                                let _104: core::panicking::AssertKind;
                                                scope 25 {
                                                    debug kind => _104;
                                                }
                                            }
                                            scope 26 {
                                                debug regular_break_3 => const ();
                                                let _113: &();
                                                let _114: &();
                                                let _120: ();
                                                scope 27 {
                                                    debug left_val => _113;
                                                    debug right_val => _114;
                                                    let _117: core::panicking::AssertKind;
                                                    scope 28 {
                                                        debug kind => _117;
                                                    }
                                                }
                                                scope 29 {
                                                    debug regular_break_4 => const ();
                                                    let _125: &();
                                                    let _126: &();
                                                    let _132: ();
                                                    scope 30 {
                                                        debug left_val => _125;
                                                        debug right_val => _126;
                                                        let _129: core::panicking::AssertKind;
                                                        scope 31 {
                                                            debug kind => _129;
                                                        }
                                                    }
                                                    scope 32 {
                                                        debug regular_break_5 => const ();
                                                        let _137: &();
                                                        let _138: &();
                                                        let _144: &str;
                                                        let _145: u32;
                                                        scope 33 {
                                                            debug left_val => _137;
                                                            debug right_val => _138;
                                                            let _141: core::panicking::AssertKind;
                                                            scope 34 {
                                                                debug kind => _141;
                                                            }
                                                        }
                                                        scope 35 {
                                                            debug nested_break_value => _144;
                                                            let _152: &&str;
                                                            let _153: &&str;
                                                            let _159: i32;
                                                            scope 37 {
                                                                debug left_val => _152;
                                                                debug right_val => _153;
                                                                let _156: core::panicking::AssertKind;
                                                                scope 38 {
                                                                    debug kind => _156;
                                                                }
                                                            }
                                                            scope 39 {
                                                                debug break_from_while_cond => _159;
                                                                let _164: &i32;
                                                                let _165: &i32;
                                                                let _173: i32;
                                                                scope 40 {
                                                                    debug left_val => _164;
                                                                    debug right_val => _165;
                                                                    let _170: core::panicking::AssertKind;
                                                                    scope 41 {
                                                                        debug kind => _170;
                                                                    }
                                                                }
                                                                scope 42 {
                                                                    debug break_from_while_to_outer => _173;
                                                                    let _178: &i32;
                                                                    let _179: &i32;
                                                                    let _187: bool;
                                                                    scope 43 {
                                                                        debug left_val => _178;
                                                                        debug right_val => _179;
                                                                        let _184: core::panicking::AssertKind;
                                                                        scope 44 {
                                                                            debug kind => _184;
                                                                        }
                                                                    }
                                                                    scope 45 {
                                                                        debug rust => _187;
                                                                        scope 46 {
                                                                            debug value => _187;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        scope 36 {
                                                            debug _a => _145;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    scope 2 {
        debug _never => const ZeroSized: !;
    }

    bb0: {
        _2 = Eq(const 1_i32, const 1_i32);
        switchInt(move _2) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _1 = const 13_i32;
        _5 = &_1;
        _7 = const 13_i32;
        _6 = &_7;
        _4 = (move _5, move _6);
        _8 = (_4.0: &i32);
        _9 = (_4.1: &i32);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb4, otherwise: bb3];
    }

    bb2: {
        _3 = begin_panic::<&str>(const "explicit panic");
    }

    bb3: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<i32, i32>(move _14, _8, _9, move _16);
    }

    bb4: {
        _17 = [const 1_u32, const 3_u32, const 5_u32];
        _18 = [const 17_u32];
        goto -> bb5;
    }

    bb5: {
        _22 = const 2_i32;
        switchInt(_22) -> [1: bb6, 2: bb7, 3: bb8, otherwise: bb5];
    }

    bb6: {
        _23 = &_17;
        _21 = _23 as &[u32] (Pointer(Unsize));
        goto -> bb9;
    }

    bb7: {
        _24 = &_18;
        _21 = _24 as &[u32] (Pointer(Unsize));
        goto -> bb9;
    }

    bb8: {
        _25 = &_19;
        _21 = _25 as &[u32] (Pointer(Unsize));
        goto -> bb9;
    }

    bb9: {
        _20 = _21;
        _27 = &_20;
        _30 = [const 17_u32];
        _29 = &_30;
        _28 = &_29;
        _26 = (move _27, move _28);
        _31 = (_26.0: &&[u32]);
        _32 = (_26.1: &&[u32; 1]);
        _34 = <&[u32] as PartialEq<&[u32; 1]>>::eq(_31, _32) -> bb10;
    }

    bb10: {
        _33 = Not(move _34);
        switchInt(move _33) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _35 = core::panicking::AssertKind::Eq;
        _37 = Option::<Arguments<'_>>::None;
        _36 = core::panicking::assert_failed::<&[u32], &[u32; 1]>(move _35, _31, _32, move _37);
    }

    bb12: {
        _39 = const true;
        switchInt(move _39) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _38 = <[i32; 2] as Default>::default() -> bb15;
    }

    bb14: {
        _38 = [const 13_i32, const 14_i32];
        goto -> bb15;
    }

    bb15: {
        _41 = &_38;
        _43 = [const 0_i32, const 0_i32];
        _42 = &_43;
        _40 = (move _41, move _42);
        _44 = (_40.0: &[i32; 2]);
        _45 = (_40.1: &[i32; 2]);
        _47 = <[i32; 2] as PartialEq>::eq(_44, _45) -> bb16;
    }

    bb16: {
        _46 = Not(move _47);
        switchInt(move _46) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _48 = core::panicking::AssertKind::Eq;
        _50 = Option::<Arguments<'_>>::None;
        _49 = core::panicking::assert_failed::<[i32; 2], [i32; 2]>(move _48, _44, _45, move _50);
    }

    bb18: {
        _52 = const false;
        switchInt(move _52) -> [0: bb21, otherwise: bb19];
    }

    bb19: {
        _53 = <String as From<&str>>::from(const "Hello") -> bb20;
    }

    bb20: {
        _51 = [move _53];
        goto -> bb22;
    }

    bb21: {
        _51 = <[String; 1] as Default>::default() -> bb22;
    }

    bb22: {
        _55 = &_51;
        _57 = [const ""];
        _56 = &_57;
        _54 = (move _55, move _56);
        _58 = (_54.0: &[std::string::String; 1]);
        _59 = (_54.1: &[&str; 1]);
        _61 = <[String; 1] as PartialEq<[&str; 1]>>::eq(_58, _59) -> [return: bb23, unwind: bb69];
    }

    bb23: {
        _60 = Not(move _61);
        switchInt(move _60) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _62 = core::panicking::AssertKind::Eq;
        _64 = Option::<Arguments<'_>>::None;
        _63 = core::panicking::assert_failed::<[String; 1], [&str; 1]>(move _62, _58, _59, move _64) -> bb69;
    }

    bb25: {
        _66 = const false;
        switchInt(move _66) -> [0: bb28, otherwise: bb26];
    }

    bb26: {
        _67 = <String as From<&str>>::from(const "Hello") -> [return: bb27, unwind: bb69];
    }

    bb27: {
        _65 = [move _67];
        goto -> bb30;
    }

    bb28: {
        _69 = const "Yes";
        _68 = <&str as Into<String>>::into(_69) -> [return: bb29, unwind: bb69];
    }

    bb29: {
        _65 = [move _68];
        goto -> bb30;
    }

    bb30: {
        _71 = &_65;
        _73 = [const "Yes"];
        _72 = &_73;
        _70 = (move _71, move _72);
        _74 = (_70.0: &[std::string::String; 1]);
        _75 = (_70.1: &[&str; 1]);
        _77 = <[String; 1] as PartialEq<[&str; 1]>>::eq(_74, _75) -> [return: bb31, unwind: bb68];
    }

    bb31: {
        _76 = Not(move _77);
        switchInt(move _76) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _78 = core::panicking::AssertKind::Eq;
        _80 = Option::<Arguments<'_>>::None;
        _79 = core::panicking::assert_failed::<[String; 1], [&str; 1]>(move _78, _74, _75, move _80) -> bb68;
    }

    bb33: {
        _82 = const true;
        switchInt(move _82) -> [0: bb34, otherwise: bb35];
    }

    bb34: {
        _81 = <() as Default>::default() -> [return: bb71, unwind: bb68];
    }

    bb35: {
        _84 = &_81;
        _85 = &_86;
        _83 = (move _84, move _85);
        _87 = (_83.0: &());
        _88 = (_83.1: &());
        _90 = <() as PartialEq>::eq(_87, _88) -> [return: bb36, unwind: bb68];
    }

    bb36: {
        _89 = Not(move _90);
        switchInt(move _89) -> [0: bb38, otherwise: bb37];
    }

    bb37: {
        _91 = core::panicking::AssertKind::Eq;
        _93 = Option::<Arguments<'_>>::None;
        _92 = core::panicking::assert_failed::<(), ()>(move _91, _87, _88, move _93) -> bb68;
    }

    bb38: {
        _95 = const true;
        switchInt(move _95) -> [0: bb40, otherwise: bb39];
    }

    bb39: {
        _94 = <() as Default>::default() -> [return: bb72, unwind: bb68];
    }

    bb40: {
        _97 = &_94;
        _98 = &_99;
        _96 = (move _97, move _98);
        _100 = (_96.0: &());
        _101 = (_96.1: &());
        _103 = <() as PartialEq>::eq(_100, _101) -> [return: bb41, unwind: bb68];
    }

    bb41: {
        _102 = Not(move _103);
        switchInt(move _102) -> [0: bb43, otherwise: bb42];
    }

    bb42: {
        _104 = core::panicking::AssertKind::Eq;
        _106 = Option::<Arguments<'_>>::None;
        _105 = core::panicking::assert_failed::<(), ()>(move _104, _100, _101, move _106) -> bb68;
    }

    bb43: {
        _108 = const true;
        switchInt(move _108) -> [0: bb45, otherwise: bb44];
    }

    bb44: {
        _107 = <() as Default>::default() -> [return: bb73, unwind: bb68];
    }

    bb45: {
        _110 = &_107;
        _111 = &_112;
        _109 = (move _110, move _111);
        _113 = (_109.0: &());
        _114 = (_109.1: &());
        _116 = <() as PartialEq>::eq(_113, _114) -> [return: bb46, unwind: bb68];
    }

    bb46: {
        _115 = Not(move _116);
        switchInt(move _115) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _117 = core::panicking::AssertKind::Eq;
        _119 = Option::<Arguments<'_>>::None;
        _118 = core::panicking::assert_failed::<(), ()>(move _117, _113, _114, move _119) -> bb68;
    }

    bb48: {
        _122 = &_120;
        _123 = &_124;
        _121 = (move _122, move _123);
        _125 = (_121.0: &());
        _126 = (_121.1: &());
        _128 = <() as PartialEq>::eq(_125, _126) -> [return: bb49, unwind: bb68];
    }

    bb49: {
        _127 = Not(move _128);
        switchInt(move _127) -> [0: bb51, otherwise: bb50];
    }

    bb50: {
        _129 = core::panicking::AssertKind::Eq;
        _131 = Option::<Arguments<'_>>::None;
        _130 = core::panicking::assert_failed::<(), ()>(move _129, _125, _126, move _131) -> bb68;
    }

    bb51: {
        _134 = &_132;
        _135 = &_136;
        _133 = (move _134, move _135);
        _137 = (_133.0: &());
        _138 = (_133.1: &());
        _140 = <() as PartialEq>::eq(_137, _138) -> [return: bb52, unwind: bb68];
    }

    bb52: {
        _139 = Not(move _140);
        switchInt(move _139) -> [0: bb54, otherwise: bb53];
    }

    bb53: {
        _141 = core::panicking::AssertKind::Eq;
        _143 = Option::<Arguments<'_>>::None;
        _142 = core::panicking::assert_failed::<(), ()>(move _141, _137, _138, move _143) -> bb68;
    }

    bb54: {
        _146 = const true;
        switchInt(move _146) -> [0: bb56, otherwise: bb55];
    }

    bb55: {
        _144 = const "hello";
        _149 = &_144;
        _151 = const "hello";
        _150 = &_151;
        _148 = (move _149, move _150);
        _152 = (_148.0: &&str);
        _153 = (_148.1: &&str);
        _155 = <&str as PartialEq>::eq(_152, _153) -> [return: bb57, unwind: bb68];
    }

    bb56: {
        _145 = const 17_u32;
        _147 = begin_panic::<&str>(const "explicit panic") -> bb68;
    }

    bb57: {
        _154 = Not(move _155);
        switchInt(move _154) -> [0: bb59, otherwise: bb58];
    }

    bb58: {
        _156 = core::panicking::AssertKind::Eq;
        _158 = Option::<Arguments<'_>>::None;
        _157 = core::panicking::assert_failed::<&str, &str>(move _156, _152, _153, move _158) -> bb68;
    }

    bb59: {
        _159 = const 123_i32;
        _161 = &_159;
        _163 = const 123_i32;
        _162 = &_163;
        _160 = (move _161, move _162);
        _164 = (_160.0: &i32);
        _165 = (_160.1: &i32);
        _168 = (*_164);
        _169 = (*_165);
        _167 = Eq(move _168, move _169);
        _166 = Not(move _167);
        switchInt(move _166) -> [0: bb61, otherwise: bb60];
    }

    bb60: {
        _170 = core::panicking::AssertKind::Eq;
        _172 = Option::<Arguments<'_>>::None;
        _171 = core::panicking::assert_failed::<i32, i32>(move _170, _164, _165, move _172) -> bb68;
    }

    bb61: {
        _173 = const 567_i32;
        _175 = &_173;
        _177 = const 567_i32;
        _176 = &_177;
        _174 = (move _175, move _176);
        _178 = (_174.0: &i32);
        _179 = (_174.1: &i32);
        _182 = (*_178);
        _183 = (*_179);
        _181 = Eq(move _182, move _183);
        _180 = Not(move _181);
        switchInt(move _180) -> [0: bb63, otherwise: bb62];
    }

    bb62: {
        _184 = core::panicking::AssertKind::Eq;
        _186 = Option::<Arguments<'_>>::None;
        _185 = core::panicking::assert_failed::<i32, i32>(move _184, _178, _179, move _186) -> bb68;
    }

    bb63: {
        _187 = const true;
        _188 = Not(_187);
        switchInt(move _188) -> [0: bb65, otherwise: bb64];
    }

    bb64: {
        _189 = core::panicking::panic(const "assertion failed: value") -> bb68;
    }

    bb65: {
        drop(_65) -> [return: bb66, unwind: bb69];
    }

    bb66: {
        drop(_51) -> bb67;
    }

    bb67: {
        return;
    }

    bb68 (cleanup): {
        drop(_65) -> [return: bb69, unwind terminate];
    }

    bb69 (cleanup): {
        drop(_51) -> [return: bb70, unwind terminate];
    }

    bb70 (cleanup): {
        resume;
    }

    bb71: {
        goto -> bb35;
    }

    bb72: {
        goto -> bb40;
    }

    bb73: {
        goto -> bb45;
    }
}
