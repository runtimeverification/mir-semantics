// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: i32;
    let mut _2: bool;
    let mut _3: i32;
    let mut _4: i32;
    let mut _5: (&i32, &i32);
    let mut _6: &i32;
    let mut _7: &i32;
    let _8: i32;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: i32;
    let mut _14: i32;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: i32;
    let mut _19: (&i32, &i32);
    let mut _20: &i32;
    let mut _21: &i32;
    let _22: i32;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: i32;
    let mut _28: i32;
    let _30: !;
    let mut _31: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _33: std::slice::Iter<'_, i32>;
    let mut _34: &[i32; 6];
    let mut _36: std::option::Option<&i32>;
    let mut _37: &mut std::slice::Iter<'_, i32>;
    let mut _38: isize;
    let mut _40: i32;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: i32;
    let mut _44: !;
    let mut _45: bool;
    let mut _46: i32;
    let mut _47: i32;
    let mut _48: i32;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: i32;
    let mut _56: i32;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: !;
    let mut _62: i32;
    let mut _63: i32;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: i32;
    let mut _71: i32;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: !;
    let mut _77: bool;
    let mut _78: i32;
    let mut _80: std::boxed::Box<[i32]>;
    let mut _81: usize;
    let mut _82: usize;
    let mut _83: *mut u8;
    let mut _84: std::boxed::Box<[i32; 6]>;
    let mut _85: std::slice::Iter<'_, i32>;
    let mut _86: &std::vec::Vec<i32>;
    let mut _88: std::option::Option<&i32>;
    let mut _89: &mut std::slice::Iter<'_, i32>;
    let mut _90: isize;
    let mut _92: i32;
    let mut _93: i32;
    let mut _94: bool;
    let mut _95: bool;
    let mut _96: bool;
    let mut _97: bool;
    let mut _98: bool;
    let mut _99: bool;
    let mut _100: i32;
    let mut _101: i32;
    let mut _102: bool;
    let mut _103: bool;
    let mut _104: bool;
    let mut _105: bool;
    let mut _106: !;
    let mut _107: *const [i32; 6];
    scope 1 {
        debug i => _1;
        let _9: &i32;
        let _10: &i32;
        let _23: &i32;
        let _24: &i32;
        let _32: [i32; 6];
        scope 2 {
            debug left_val => _9;
            debug right_val => _10;
            let _15: core::panicking::AssertKind;
            scope 3 {
                debug kind => _15;
            }
        }
        scope 4 {
            debug left_val => _23;
            debug right_val => _24;
            let _29: core::panicking::AssertKind;
            scope 5 {
                debug kind => _29;
            }
        }
        scope 6 {
            debug xs => _32;
            let mut _35: std::slice::Iter<'_, i32>;
            let _79: std::vec::Vec<i32>;
            let mut _108: *const ();
            let mut _109: usize;
            let mut _110: usize;
            let mut _111: usize;
            let mut _112: usize;
            let mut _113: bool;
            scope 7 {
                debug iter => _35;
                let _39: &i32;
                scope 8 {
                    debug x => _39;
                }
            }
            scope 9 {
                debug ys => _79;
                let mut _87: std::slice::Iter<'_, i32>;
                scope 11 {
                    debug iter => _87;
                    let _91: &i32;
                    scope 12 {
                        debug x => _91;
                    }
                }
            }
            scope 10 {
            }
        }
    }

    bb0: {
        _1 = const 0_i32;
        goto -> bb1;
    }

    bb1: {
        _3 = _1;
        _2 = Lt(move _3, const 20_i32);
        switchInt(move _2) -> [0: bb4, otherwise: bb2];
    }

    bb2: {
        _1 = Add(_1, const 1_i32);
        _4 = _1;
        switchInt(move _4) -> [10: bb4, otherwise: bb1];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = &_1;
        _8 = const 10_i32;
        _7 = &_8;
        _5 = (move _6, move _7);
        _9 = (_5.0: &i32);
        _10 = (_5.1: &i32);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<i32, i32>(move _15, _9, _10, move _17);
    }

    bb6: {
        _1 = Add(_1, const 1_i32);
        _18 = _1;
        switchInt(move _18) -> [20: bb7, otherwise: bb6];
    }

    bb7: {
        _20 = &_1;
        _22 = const 20_i32;
        _21 = &_22;
        _19 = (move _20, move _21);
        _23 = (_19.0: &i32);
        _24 = (_19.1: &i32);
        _27 = (*_23);
        _28 = (*_24);
        _26 = Eq(move _27, move _28);
        _25 = Not(move _26);
        switchInt(move _25) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _29 = core::panicking::AssertKind::Eq;
        _31 = Option::<Arguments<'_>>::None;
        _30 = core::panicking::assert_failed::<i32, i32>(move _29, _23, _24, move _31);
    }

    bb9: {
        _32 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32, const 6_i32];
        _34 = &_32;
        _33 = <&[i32; 6] as IntoIterator>::into_iter(move _34) -> bb10;
    }

    bb10: {
        _35 = move _33;
        goto -> bb11;
    }

    bb11: {
        _37 = &mut _35;
        _36 = <std::slice::Iter<'_, i32> as Iterator>::next(_37) -> bb12;
    }

    bb12: {
        _38 = discriminant(_36);
        switchInt(move _38) -> [0: bb16, 1: bb13, otherwise: bb3];
    }

    bb13: {
        _39 = ((_36 as Some).0: &i32);
        _40 = (*_39);
        switchInt(move _40) -> [3: bb16, otherwise: bb14];
    }

    bb14: {
        _43 = (*_39);
        _42 = Le(move _43, const 3_i32);
        _41 = Not(move _42);
        switchInt(move _41) -> [0: bb11, otherwise: bb15];
    }

    bb15: {
        _44 = core::panicking::panic(const "assertion failed: (*x <= 3)");
    }

    bb16: {
        _1 = const 0_i32;
        goto -> bb17;
    }

    bb17: {
        _46 = _1;
        _45 = Lt(move _46, const 10_i32);
        switchInt(move _45) -> [0: bb25, otherwise: bb18];
    }

    bb18: {
        _1 = Add(_1, const 1_i32);
        _48 = _1;
        _49 = Eq(const 2_i32, const 0_i32);
        assert(!move _49, "attempt to calculate the remainder of `{}` with a divisor of zero", _48) -> bb19;
    }

    bb19: {
        _50 = Eq(const 2_i32, const -1_i32);
        _51 = Eq(_48, const i32::MIN);
        _52 = BitAnd(move _50, move _51);
        assert(!move _52, "attempt to compute the remainder of `{} % {}`, which would overflow", _48, const 2_i32) -> bb20;
    }

    bb20: {
        _47 = Rem(move _48, const 2_i32);
        switchInt(move _47) -> [0: bb17, otherwise: bb21];
    }

    bb21: {
        _56 = _1;
        _57 = Eq(const 2_i32, const 0_i32);
        assert(!move _57, "attempt to calculate the remainder of `{}` with a divisor of zero", _56) -> bb22;
    }

    bb22: {
        _58 = Eq(const 2_i32, const -1_i32);
        _59 = Eq(_56, const i32::MIN);
        _60 = BitAnd(move _58, move _59);
        assert(!move _60, "attempt to compute the remainder of `{} % {}`, which would overflow", _56, const 2_i32) -> bb23;
    }

    bb23: {
        _55 = Rem(move _56, const 2_i32);
        _54 = Ne(move _55, const 0_i32);
        _53 = Not(move _54);
        switchInt(move _53) -> [0: bb17, otherwise: bb24];
    }

    bb24: {
        _61 = core::panicking::panic(const "assertion failed: (i % 2 != 0)");
    }

    bb25: {
        _1 = const 0_i32;
        goto -> bb26;
    }

    bb26: {
        _1 = Add(_1, const 1_i32);
        _63 = _1;
        _64 = Eq(const 2_i32, const 0_i32);
        assert(!move _64, "attempt to calculate the remainder of `{}` with a divisor of zero", _63) -> bb27;
    }

    bb27: {
        _65 = Eq(const 2_i32, const -1_i32);
        _66 = Eq(_63, const i32::MIN);
        _67 = BitAnd(move _65, move _66);
        assert(!move _67, "attempt to compute the remainder of `{} % {}`, which would overflow", _63, const 2_i32) -> bb28;
    }

    bb28: {
        _62 = Rem(move _63, const 2_i32);
        switchInt(move _62) -> [0: bb26, otherwise: bb29];
    }

    bb29: {
        _71 = _1;
        _72 = Eq(const 2_i32, const 0_i32);
        assert(!move _72, "attempt to calculate the remainder of `{}` with a divisor of zero", _71) -> bb30;
    }

    bb30: {
        _73 = Eq(const 2_i32, const -1_i32);
        _74 = Eq(_71, const i32::MIN);
        _75 = BitAnd(move _73, move _74);
        assert(!move _75, "attempt to compute the remainder of `{} % {}`, which would overflow", _71, const 2_i32) -> bb31;
    }

    bb31: {
        _70 = Rem(move _71, const 2_i32);
        _69 = Ne(move _70, const 0_i32);
        _68 = Not(move _69);
        switchInt(move _68) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _76 = core::panicking::panic(const "assertion failed: (i % 2 != 0)");
    }

    bb33: {
        _78 = _1;
        _77 = Ge(move _78, const 10_i32);
        switchInt(move _77) -> [0: bb26, otherwise: bb34];
    }

    bb34: {
        _81 = SizeOf([i32; 6]);
        _82 = AlignOf([i32; 6]);
        _83 = alloc::alloc::exchange_malloc(move _81, move _82) -> bb35;
    }

    bb35: {
        _84 = ShallowInitBox(move _83, [i32; 6]);
        _107 = (((_84.0: std::ptr::Unique<[i32; 6]>).0: std::ptr::NonNull<[i32; 6]>).0: *const [i32; 6]);
        _108 = _107 as *const () (PtrToPtr);
        _109 = _108 as usize (Transmute);
        _110 = AlignOf(i32);
        _111 = Sub(_110, const 1_usize);
        _112 = BitAnd(_109, _111);
        _113 = Eq(_112, const 0_usize);
        assert(_113, "misaligned pointer dereference: address must be a multiple of {} but is {}", _110, _109) -> [success: bb51, unwind unreachable];
    }

    bb36: {
        _86 = &_79;
        _85 = <&Vec<i32> as IntoIterator>::into_iter(move _86) -> [return: bb37, unwind: bb49];
    }

    bb37: {
        _87 = move _85;
        goto -> bb38;
    }

    bb38: {
        _89 = &mut _87;
        _88 = <std::slice::Iter<'_, i32> as Iterator>::next(_89) -> [return: bb39, unwind: bb49];
    }

    bb39: {
        _90 = discriminant(_88);
        switchInt(move _90) -> [0: bb41, 1: bb40, otherwise: bb3];
    }

    bb40: {
        _91 = ((_88 as Some).0: &i32);
        _93 = (*_91);
        _94 = Eq(const 2_i32, const 0_i32);
        assert(!move _94, "attempt to calculate the remainder of `{}` with a divisor of zero", _93) -> [success: bb42, unwind: bb49];
    }

    bb41: {
        drop(_79) -> bb48;
    }

    bb42: {
        _95 = Eq(const 2_i32, const -1_i32);
        _96 = Eq(_93, const i32::MIN);
        _97 = BitAnd(move _95, move _96);
        assert(!move _97, "attempt to compute the remainder of `{} % {}`, which would overflow", _93, const 2_i32) -> [success: bb43, unwind: bb49];
    }

    bb43: {
        _92 = Rem(move _93, const 2_i32);
        switchInt(move _92) -> [0: bb38, otherwise: bb44];
    }

    bb44: {
        _101 = (*_91);
        _102 = Eq(const 2_i32, const 0_i32);
        assert(!move _102, "attempt to calculate the remainder of `{}` with a divisor of zero", _101) -> [success: bb45, unwind: bb49];
    }

    bb45: {
        _103 = Eq(const 2_i32, const -1_i32);
        _104 = Eq(_101, const i32::MIN);
        _105 = BitAnd(move _103, move _104);
        assert(!move _105, "attempt to compute the remainder of `{} % {}`, which would overflow", _101, const 2_i32) -> [success: bb46, unwind: bb49];
    }

    bb46: {
        _100 = Rem(move _101, const 2_i32);
        _99 = Ne(move _100, const 0_i32);
        _98 = Not(move _99);
        switchInt(move _98) -> [0: bb38, otherwise: bb47];
    }

    bb47: {
        _106 = core::panicking::panic(const "assertion failed: (*x % 2 != 0)") -> bb49;
    }

    bb48: {
        return;
    }

    bb49 (cleanup): {
        drop(_79) -> [return: bb50, unwind terminate];
    }

    bb50 (cleanup): {
        resume;
    }

    bb51: {
        (*_107) = [const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32, const 6_i32];
        _80 = move _84 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _79 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _80) -> bb36;
    }
}
