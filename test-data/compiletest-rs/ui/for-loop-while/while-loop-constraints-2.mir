// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: isize;
    let mut _3: bool;
    let mut _4: isize;
    let mut _5: bool;
    let mut _6: isize;
    let mut _7: isize;
    let _8: ();
    let mut _9: std::fmt::Arguments<'_>;
    let mut _10: &[&str];
    let _11: &[&str; 2];
    let _12: [&str; 2];
    let mut _13: &[core::fmt::rt::Argument<'_>];
    let _14: &[core::fmt::rt::Argument<'_>; 1];
    let _15: [core::fmt::rt::Argument<'_>; 1];
    let mut _16: core::fmt::rt::Argument<'_>;
    let _17: &isize;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: isize;
    let mut _21: bool;
    let mut _22: isize;
    let mut _23: !;
    scope 1 {
        debug y => _1;
        let mut _2: isize;
        scope 2 {
            debug z => _2;
            scope 3 {
                debug x => _6;
            }
        }
    }

    bb0: {
        _1 = const 42_isize;
        _2 = const 42_isize;
        goto -> bb1;
    }

    bb1: {
        _4 = _2;
        _3 = Lt(move _4, const 50_isize);
        switchInt(move _3) -> [0: bb8, otherwise: bb2];
    }

    bb2: {
        _2 = Add(_2, const 1_isize);
        goto -> bb3;
    }

    bb3: {
        _5 = const false;
        switchInt(move _5) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _6 = _1;
        _7 = _2;
        _1 = move _7;
        goto -> bb3;
    }

    bb5: {
        _12 = [const "", const "\n"];
        _11 = &_12;
        _10 = _11 as &[&str] (Pointer(Unsize));
        _17 = &_1;
        _16 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_17) -> bb6;
    }

    bb6: {
        _15 = [move _16];
        _14 = &_15;
        _13 = _14 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _9 = Arguments::<'_>::new_v1(move _10, move _13) -> bb7;
    }

    bb7: {
        _8 = _print(move _9) -> bb1;
    }

    bb8: {
        _20 = _1;
        switchInt(move _20) -> [42: bb10, otherwise: bb9];
    }

    bb9: {
        _19 = const false;
        goto -> bb11;
    }

    bb10: {
        _22 = _2;
        _21 = Eq(move _22, const 50_isize);
        _19 = move _21;
        goto -> bb11;
    }

    bb11: {
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _23 = core::panicking::panic(const "assertion failed: (y == 42 && z == 50)");
    }

    bb13: {
        return;
    }
}
