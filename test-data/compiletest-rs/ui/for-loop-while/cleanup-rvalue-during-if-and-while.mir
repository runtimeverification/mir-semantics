// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static mut DROPPED: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 0_isize;
        return;
    }
}

fn <impl at ui/for-loop-while/cleanup-rvalue-during-if-and-while.rs:9:1: 9:24>::drop(_1: &mut Temporary) -> () {
    debug self => _1;
    let mut _0: ();
    let mut _2: *mut isize;
    scope 1 {
        let mut _3: *const ();
        let mut _4: usize;
        let mut _5: usize;
        let mut _6: usize;
        let mut _7: usize;
        let mut _8: bool;
        let mut _9: *const ();
        let mut _10: usize;
        let mut _11: usize;
        let mut _12: usize;
        let mut _13: usize;
        let mut _14: bool;
    }

    bb0: {
        _2 = const {alloc1: *mut isize};
        _9 = _2 as *const () (PtrToPtr);
        _10 = _9 as usize (Transmute);
        _11 = AlignOf(isize);
        _12 = Sub(_11, const 1_usize);
        _13 = BitAnd(_10, _12);
        _14 = Eq(_13, const 0_usize);
        assert(_14, "misaligned pointer dereference: address must be a multiple of {} but is {}", _11, _10) -> [success: bb2, unwind unreachable];
    }

    bb1: {
        (*_2) = Add((*_2), const 1_isize);
        return;
    }

    bb2: {
        _3 = _2 as *const () (PtrToPtr);
        _4 = _3 as usize (Transmute);
        _5 = AlignOf(isize);
        _6 = Sub(_5, const 1_usize);
        _7 = BitAnd(_4, _6);
        _8 = Eq(_7, const 0_usize);
        assert(_8, "misaligned pointer dereference: address must be a multiple of {} but is {}", _5, _4) -> [success: bb1, unwind unreachable];
    }
}

alloc1 (static: DROPPED, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn <impl at ui/for-loop-while/cleanup-rvalue-during-if-and-while.rs:15:1: 15:15>::do_stuff(_1: &Temporary) -> bool {
    debug self => _1;
    let mut _0: bool;

    bb0: {
        _0 = const true;
        return;
    }
}

fn borrow() -> Box<Temporary> {
    let mut _0: std::boxed::Box<Temporary>;

    bb0: {
        _0 = Box::<Temporary>::new(const Temporary) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: isize;
    let mut _2: bool;
    let mut _3: &Temporary;
    let _4: std::boxed::Box<Temporary>;
    let mut _5: (&isize, &isize);
    let mut _6: &isize;
    let _7: *mut isize;
    let mut _8: &isize;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: isize;
    let mut _14: isize;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: bool;
    let mut _19: isize;
    let mut _20: bool;
    let mut _21: &Temporary;
    let _22: std::boxed::Box<Temporary>;
    let mut _23: (&isize, &isize);
    let mut _24: &isize;
    let _25: *mut isize;
    let mut _26: &isize;
    let _27: isize;
    let mut _28: isize;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: isize;
    let mut _34: isize;
    let _36: !;
    let mut _37: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _38: *const Temporary;
    let mut _39: *const Temporary;
    scope 1 {
        debug i => _1;
        let mut _46: *const ();
        let mut _47: usize;
        let mut _48: usize;
        let mut _49: usize;
        let mut _50: usize;
        let mut _51: bool;
        let mut _58: *const ();
        let mut _59: usize;
        let mut _60: usize;
        let mut _61: usize;
        let mut _62: usize;
        let mut _63: bool;
        scope 2 {
            let _9: &isize;
            let _10: &isize;
            let mut _52: *const ();
            let mut _53: usize;
            let mut _54: usize;
            let mut _55: usize;
            let mut _56: usize;
            let mut _57: bool;
            scope 3 {
                debug left_val => _9;
                debug right_val => _10;
                let _15: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _15;
                }
            }
        }
        scope 5 {
            let _29: &isize;
            let _30: &isize;
            let mut _40: *const ();
            let mut _41: usize;
            let mut _42: usize;
            let mut _43: usize;
            let mut _44: usize;
            let mut _45: bool;
            scope 6 {
                debug left_val => _29;
                debug right_val => _30;
                let _35: core::panicking::AssertKind;
                scope 7 {
                    debug kind => _35;
                }
            }
        }
    }

    bb0: {
        _1 = const 0_isize;
        goto -> bb1;
    }

    bb1: {
        _4 = borrow() -> bb2;
    }

    bb2: {
        _38 = (((_4.0: std::ptr::Unique<Temporary>).0: std::ptr::NonNull<Temporary>).0: *const Temporary);
        _58 = _38 as *const () (PtrToPtr);
        _59 = _58 as usize (Transmute);
        _60 = AlignOf(Temporary);
        _61 = Sub(_60, const 1_usize);
        _62 = BitAnd(_59, _61);
        _63 = Eq(_62, const 0_usize);
        assert(_63, "misaligned pointer dereference: address must be a multiple of {} but is {}", _60, _59) -> [success: bb21, unwind unreachable];
    }

    bb3: {
        drop(_4) -> bb4;
    }

    bb4: {
        switchInt(move _2) -> [0: bb8, otherwise: bb5];
    }

    bb5: {
        _1 = Add(_1, const 1_isize);
        _7 = const {alloc1: *mut isize};
        _52 = _7 as *const () (PtrToPtr);
        _53 = _52 as usize (Transmute);
        _54 = AlignOf(isize);
        _55 = Sub(_54, const 1_usize);
        _56 = BitAnd(_53, _55);
        _57 = Eq(_56, const 0_usize);
        assert(_57, "misaligned pointer dereference: address must be a multiple of {} but is {}", _54, _53) -> [success: bb20, unwind unreachable];
    }

    bb6: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<isize, isize>(move _15, _9, _10, move _17);
    }

    bb7: {
        _19 = _1;
        _18 = Gt(move _19, const 5_isize);
        switchInt(move _18) -> [0: bb1, otherwise: bb8];
    }

    bb8: {
        _22 = borrow() -> bb9;
    }

    bb9: {
        _39 = (((_22.0: std::ptr::Unique<Temporary>).0: std::ptr::NonNull<Temporary>).0: *const Temporary);
        _46 = _39 as *const () (PtrToPtr);
        _47 = _46 as usize (Transmute);
        _48 = AlignOf(Temporary);
        _49 = Sub(_48, const 1_usize);
        _50 = BitAnd(_47, _49);
        _51 = Eq(_50, const 0_usize);
        assert(_51, "misaligned pointer dereference: address must be a multiple of {} but is {}", _48, _47) -> [success: bb19, unwind unreachable];
    }

    bb10: {
        drop(_22) -> bb11;
    }

    bb11: {
        switchInt(move _20) -> [0: bb14, otherwise: bb12];
    }

    bb12: {
        _25 = const {alloc1: *mut isize};
        _40 = _25 as *const () (PtrToPtr);
        _41 = _40 as usize (Transmute);
        _42 = AlignOf(isize);
        _43 = Sub(_42, const 1_usize);
        _44 = BitAnd(_41, _43);
        _45 = Eq(_44, const 0_usize);
        assert(_45, "misaligned pointer dereference: address must be a multiple of {} but is {}", _42, _41) -> [success: bb18, unwind unreachable];
    }

    bb13: {
        _35 = core::panicking::AssertKind::Eq;
        _37 = Option::<Arguments<'_>>::None;
        _36 = core::panicking::assert_failed::<isize, isize>(move _35, _29, _30, move _37);
    }

    bb14: {
        return;
    }

    bb15 (cleanup): {
        drop(_22) -> [return: bb17, unwind terminate];
    }

    bb16 (cleanup): {
        drop(_4) -> [return: bb17, unwind terminate];
    }

    bb17 (cleanup): {
        resume;
    }

    bb18: {
        _24 = &(*_25);
        _28 = _1;
        _27 = Add(move _28, const 1_isize);
        _26 = &_27;
        _23 = (move _24, move _26);
        _29 = (_23.0: &isize);
        _30 = (_23.1: &isize);
        _33 = (*_29);
        _34 = (*_30);
        _32 = Eq(move _33, move _34);
        _31 = Not(move _32);
        switchInt(move _31) -> [0: bb14, otherwise: bb13];
    }

    bb19: {
        _21 = &(*_39);
        _20 = Temporary::do_stuff(move _21) -> [return: bb10, unwind: bb15];
    }

    bb20: {
        _6 = &(*_7);
        _8 = &_1;
        _5 = (move _6, move _8);
        _9 = (_5.0: &isize);
        _10 = (_5.1: &isize);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb7, otherwise: bb6];
    }

    bb21: {
        _3 = &(*_38);
        _2 = Temporary::do_stuff(move _3) -> [return: bb3, unwind: bb16];
    }
}

alloc1 (static: DROPPED, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}
