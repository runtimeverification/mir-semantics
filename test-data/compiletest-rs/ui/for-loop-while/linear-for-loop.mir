// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<i32>;
    let mut _2: std::boxed::Box<[i32]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[i32; 3]>;
    let mut _8: std::slice::Iter<'_, i32>;
    let mut _9: &std::vec::Vec<i32>;
    let mut _11: std::option::Option<&i32>;
    let mut _12: &mut std::slice::Iter<'_, i32>;
    let mut _13: isize;
    let _15: ();
    let mut _16: std::fmt::Arguments<'_>;
    let mut _17: &[&str];
    let _18: &[&str; 2];
    let _19: [&str; 2];
    let mut _20: &[core::fmt::rt::Argument<'_>];
    let _21: &[core::fmt::rt::Argument<'_>; 1];
    let _22: [core::fmt::rt::Argument<'_>; 1];
    let mut _23: core::fmt::rt::Argument<'_>;
    let mut _24: i32;
    let _25: ();
    let mut _26: std::fmt::Arguments<'_>;
    let mut _27: &[&str];
    let _28: &[&str; 2];
    let _29: [&str; 2];
    let mut _30: &[core::fmt::rt::Argument<'_>];
    let _31: &[core::fmt::rt::Argument<'_>; 1];
    let _32: [core::fmt::rt::Argument<'_>; 1];
    let mut _33: core::fmt::rt::Argument<'_>;
    let _34: &i32;
    let mut _35: (&i32, &i32);
    let mut _36: &i32;
    let mut _37: &i32;
    let _38: i32;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: i32;
    let mut _44: i32;
    let _46: !;
    let mut _47: std::option::Option<std::fmt::Arguments<'_>>;
    let _49: &str;
    let mut _51: std::str::Bytes<'_>;
    let mut _52: std::str::Bytes<'_>;
    let mut _53: &str;
    let _54: &str;
    let mut _55: &std::string::String;
    let mut _57: std::option::Option<u8>;
    let mut _58: &mut std::str::Bytes<'_>;
    let mut _59: isize;
    let mut _61: isize;
    let mut _62: (&u8, &u8);
    let mut _63: &u8;
    let mut _64: &u8;
    let _65: u8;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: u8;
    let mut _71: u8;
    let _73: !;
    let mut _74: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _75: isize;
    let mut _76: (&u8, &u8);
    let mut _77: &u8;
    let mut _78: &u8;
    let _79: u8;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: u8;
    let mut _85: u8;
    let _87: !;
    let mut _88: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _89: isize;
    let mut _90: (&u8, &u8);
    let mut _91: &u8;
    let mut _92: &u8;
    let _93: u8;
    let mut _96: bool;
    let mut _97: bool;
    let mut _98: u8;
    let mut _99: u8;
    let _101: !;
    let mut _102: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _103: isize;
    let mut _104: (&u8, &u8);
    let mut _105: &u8;
    let mut _106: &u8;
    let _107: u8;
    let mut _110: bool;
    let mut _111: bool;
    let mut _112: u8;
    let mut _113: u8;
    let _115: !;
    let mut _116: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _117: isize;
    let mut _118: (&u8, &u8);
    let mut _119: &u8;
    let mut _120: &u8;
    let _121: u8;
    let mut _124: bool;
    let mut _125: bool;
    let mut _126: u8;
    let mut _127: u8;
    let _129: !;
    let mut _130: std::option::Option<std::fmt::Arguments<'_>>;
    let _131: ();
    let mut _132: std::fmt::Arguments<'_>;
    let mut _133: &[&str];
    let _134: &[&str; 2];
    let _135: [&str; 2];
    let mut _136: &[core::fmt::rt::Argument<'_>];
    let _137: &[core::fmt::rt::Argument<'_>; 1];
    let _138: [core::fmt::rt::Argument<'_>; 1];
    let mut _139: core::fmt::rt::Argument<'_>;
    let _140: &isize;
    let _141: ();
    let mut _142: std::fmt::Arguments<'_>;
    let mut _143: &[&str];
    let _144: &[&str; 2];
    let _145: [&str; 2];
    let mut _146: &[core::fmt::rt::Argument<'_>];
    let _147: &[core::fmt::rt::Argument<'_>; 1];
    let _148: [core::fmt::rt::Argument<'_>; 1];
    let mut _149: core::fmt::rt::Argument<'_>;
    let _150: &u8;
    let mut _151: (&isize, &isize);
    let mut _152: &isize;
    let mut _153: &isize;
    let _154: isize;
    let mut _157: bool;
    let mut _158: bool;
    let mut _159: isize;
    let mut _160: isize;
    let _162: !;
    let mut _163: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _164: *const [i32; 3];
    let mut _165: *const ();
    let mut _166: usize;
    let mut _167: usize;
    let mut _168: usize;
    let mut _169: usize;
    let mut _170: bool;
    scope 1 {
        debug x => _1;
        let mut _7: i32;
        scope 3 {
            debug y => _7;
            let mut _10: std::slice::Iter<'_, i32>;
            let _39: &i32;
            let _40: &i32;
            let _48: std::string::String;
            scope 4 {
                debug iter => _10;
                let _14: &i32;
                scope 5 {
                    debug i => _14;
                }
            }
            scope 6 {
                debug left_val => _39;
                debug right_val => _40;
                let _45: core::panicking::AssertKind;
                scope 7 {
                    debug kind => _45;
                }
            }
            scope 8 {
                debug s => _48;
                let mut _50: isize;
                scope 9 {
                    debug i => _50;
                    let mut _56: std::str::Bytes<'_>;
                    let _155: &isize;
                    let _156: &isize;
                    scope 10 {
                        debug iter => _56;
                        let _60: u8;
                        scope 11 {
                            debug c => _60;
                            let _66: &u8;
                            let _67: &u8;
                            let _80: &u8;
                            let _81: &u8;
                            let _94: &u8;
                            let _95: &u8;
                            let _108: &u8;
                            let _109: &u8;
                            let _122: &u8;
                            let _123: &u8;
                            scope 12 {
                                debug left_val => _66;
                                debug right_val => _67;
                                let _72: core::panicking::AssertKind;
                                scope 13 {
                                    debug kind => _72;
                                }
                            }
                            scope 14 {
                                debug left_val => _80;
                                debug right_val => _81;
                                let _86: core::panicking::AssertKind;
                                scope 15 {
                                    debug kind => _86;
                                }
                            }
                            scope 16 {
                                debug left_val => _94;
                                debug right_val => _95;
                                let _100: core::panicking::AssertKind;
                                scope 17 {
                                    debug kind => _100;
                                }
                            }
                            scope 18 {
                                debug left_val => _108;
                                debug right_val => _109;
                                let _114: core::panicking::AssertKind;
                                scope 19 {
                                    debug kind => _114;
                                }
                            }
                            scope 20 {
                                debug left_val => _122;
                                debug right_val => _123;
                                let _128: core::panicking::AssertKind;
                                scope 21 {
                                    debug kind => _128;
                                }
                            }
                        }
                    }
                    scope 22 {
                        debug left_val => _155;
                        debug right_val => _156;
                        let _161: core::panicking::AssertKind;
                        scope 23 {
                            debug kind => _161;
                        }
                    }
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _3 = SizeOf([i32; 3]);
        _4 = AlignOf([i32; 3]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> bb1;
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [i32; 3]);
        _164 = (((_6.0: std::ptr::Unique<[i32; 3]>).0: std::ptr::NonNull<[i32; 3]>).0: *const [i32; 3]);
        _165 = _164 as *const () (PtrToPtr);
        _166 = _165 as usize (Transmute);
        _167 = AlignOf(i32);
        _168 = Sub(_167, const 1_usize);
        _169 = BitAnd(_166, _168);
        _170 = Eq(_169, const 0_usize);
        assert(_170, "misaligned pointer dereference: address must be a multiple of {} but is {}", _167, _166) -> [success: bb52, unwind unreachable];
    }

    bb2: {
        _7 = const 0_i32;
        _9 = &_1;
        _8 = <&Vec<i32> as IntoIterator>::into_iter(move _9) -> [return: bb3, unwind: bb50];
    }

    bb3: {
        _10 = move _8;
        goto -> bb4;
    }

    bb4: {
        _12 = &mut _10;
        _11 = <std::slice::Iter<'_, i32> as Iterator>::next(_12) -> [return: bb5, unwind: bb50];
    }

    bb5: {
        _13 = discriminant(_11);
        switchInt(move _13) -> [0: bb8, 1: bb6, otherwise: bb7];
    }

    bb6: {
        _14 = ((_11 as Some).0: &i32);
        _19 = [const "", const "\n"];
        _18 = &_19;
        _17 = _18 as &[&str] (Pointer(Unsize));
        _23 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_14) -> [return: bb9, unwind: bb50];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        _29 = [const "", const "\n"];
        _28 = &_29;
        _27 = _28 as &[&str] (Pointer(Unsize));
        _34 = &_7;
        _33 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_34) -> [return: bb12, unwind: bb50];
    }

    bb9: {
        _22 = [move _23];
        _21 = &_22;
        _20 = _21 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _16 = Arguments::<'_>::new_v1(move _17, move _20) -> [return: bb10, unwind: bb50];
    }

    bb10: {
        _15 = _print(move _16) -> [return: bb11, unwind: bb50];
    }

    bb11: {
        _24 = (*_14);
        _7 = Add(_7, move _24);
        goto -> bb4;
    }

    bb12: {
        _32 = [move _33];
        _31 = &_32;
        _30 = _31 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _26 = Arguments::<'_>::new_v1(move _27, move _30) -> [return: bb13, unwind: bb50];
    }

    bb13: {
        _25 = _print(move _26) -> [return: bb14, unwind: bb50];
    }

    bb14: {
        _36 = &_7;
        _38 = const 6_i32;
        _37 = &_38;
        _35 = (move _36, move _37);
        _39 = (_35.0: &i32);
        _40 = (_35.1: &i32);
        _43 = (*_39);
        _44 = (*_40);
        _42 = Eq(move _43, move _44);
        _41 = Not(move _42);
        switchInt(move _41) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _45 = core::panicking::AssertKind::Eq;
        _47 = Option::<Arguments<'_>>::None;
        _46 = core::panicking::assert_failed::<i32, i32>(move _45, _39, _40, move _47) -> bb50;
    }

    bb16: {
        _49 = const "hello there";
        _48 = <str as ToString>::to_string(_49) -> [return: bb17, unwind: bb50];
    }

    bb17: {
        _50 = const 0_isize;
        _55 = &_48;
        _54 = <String as Deref>::deref(move _55) -> [return: bb18, unwind: bb49];
    }

    bb18: {
        _53 = _54;
        _52 = core::str::<impl str>::bytes(move _53) -> [return: bb19, unwind: bb49];
    }

    bb19: {
        _51 = <std::str::Bytes<'_> as IntoIterator>::into_iter(move _52) -> [return: bb20, unwind: bb49];
    }

    bb20: {
        _56 = move _51;
        goto -> bb21;
    }

    bb21: {
        _58 = &mut _56;
        _57 = <std::str::Bytes<'_> as Iterator>::next(_58) -> [return: bb22, unwind: bb49];
    }

    bb22: {
        _59 = discriminant(_57);
        switchInt(move _59) -> [0: bb24, 1: bb23, otherwise: bb7];
    }

    bb23: {
        _60 = ((_57 as Some).0: u8);
        _61 = _50;
        switchInt(move _61) -> [0: bb25, otherwise: bb27];
    }

    bb24: {
        _152 = &_50;
        _154 = const 11_isize;
        _153 = &_154;
        _151 = (move _152, move _153);
        _155 = (_151.0: &isize);
        _156 = (_151.1: &isize);
        _159 = (*_155);
        _160 = (*_156);
        _158 = Eq(move _159, move _160);
        _157 = Not(move _158);
        switchInt(move _157) -> [0: bb46, otherwise: bb45];
    }

    bb25: {
        _63 = &_60;
        _65 = const 'h' as u8 (IntToInt);
        _64 = &_65;
        _62 = (move _63, move _64);
        _66 = (_62.0: &u8);
        _67 = (_62.1: &u8);
        _70 = (*_66);
        _71 = (*_67);
        _69 = Eq(move _70, move _71);
        _68 = Not(move _69);
        switchInt(move _68) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _72 = core::panicking::AssertKind::Eq;
        _74 = Option::<Arguments<'_>>::None;
        _73 = core::panicking::assert_failed::<u8, u8>(move _72, _66, _67, move _74) -> bb49;
    }

    bb27: {
        _75 = _50;
        switchInt(move _75) -> [1: bb28, otherwise: bb30];
    }

    bb28: {
        _77 = &_60;
        _79 = const 'e' as u8 (IntToInt);
        _78 = &_79;
        _76 = (move _77, move _78);
        _80 = (_76.0: &u8);
        _81 = (_76.1: &u8);
        _84 = (*_80);
        _85 = (*_81);
        _83 = Eq(move _84, move _85);
        _82 = Not(move _83);
        switchInt(move _82) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _86 = core::panicking::AssertKind::Eq;
        _88 = Option::<Arguments<'_>>::None;
        _87 = core::panicking::assert_failed::<u8, u8>(move _86, _80, _81, move _88) -> bb49;
    }

    bb30: {
        _89 = _50;
        switchInt(move _89) -> [2: bb31, otherwise: bb33];
    }

    bb31: {
        _91 = &_60;
        _93 = const 'l' as u8 (IntToInt);
        _92 = &_93;
        _90 = (move _91, move _92);
        _94 = (_90.0: &u8);
        _95 = (_90.1: &u8);
        _98 = (*_94);
        _99 = (*_95);
        _97 = Eq(move _98, move _99);
        _96 = Not(move _97);
        switchInt(move _96) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _100 = core::panicking::AssertKind::Eq;
        _102 = Option::<Arguments<'_>>::None;
        _101 = core::panicking::assert_failed::<u8, u8>(move _100, _94, _95, move _102) -> bb49;
    }

    bb33: {
        _103 = _50;
        switchInt(move _103) -> [3: bb34, otherwise: bb36];
    }

    bb34: {
        _105 = &_60;
        _107 = const 'l' as u8 (IntToInt);
        _106 = &_107;
        _104 = (move _105, move _106);
        _108 = (_104.0: &u8);
        _109 = (_104.1: &u8);
        _112 = (*_108);
        _113 = (*_109);
        _111 = Eq(move _112, move _113);
        _110 = Not(move _111);
        switchInt(move _110) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _114 = core::panicking::AssertKind::Eq;
        _116 = Option::<Arguments<'_>>::None;
        _115 = core::panicking::assert_failed::<u8, u8>(move _114, _108, _109, move _116) -> bb49;
    }

    bb36: {
        _117 = _50;
        switchInt(move _117) -> [4: bb37, otherwise: bb39];
    }

    bb37: {
        _119 = &_60;
        _121 = const 'o' as u8 (IntToInt);
        _120 = &_121;
        _118 = (move _119, move _120);
        _122 = (_118.0: &u8);
        _123 = (_118.1: &u8);
        _126 = (*_122);
        _127 = (*_123);
        _125 = Eq(move _126, move _127);
        _124 = Not(move _125);
        switchInt(move _124) -> [0: bb39, otherwise: bb38];
    }

    bb38: {
        _128 = core::panicking::AssertKind::Eq;
        _130 = Option::<Arguments<'_>>::None;
        _129 = core::panicking::assert_failed::<u8, u8>(move _128, _122, _123, move _130) -> bb49;
    }

    bb39: {
        _50 = Add(_50, const 1_isize);
        _135 = [const "", const "\n"];
        _134 = &_135;
        _133 = _134 as &[&str] (Pointer(Unsize));
        _140 = &_50;
        _139 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_140) -> [return: bb40, unwind: bb49];
    }

    bb40: {
        _138 = [move _139];
        _137 = &_138;
        _136 = _137 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _132 = Arguments::<'_>::new_v1(move _133, move _136) -> [return: bb41, unwind: bb49];
    }

    bb41: {
        _131 = _print(move _132) -> [return: bb42, unwind: bb49];
    }

    bb42: {
        _145 = [const "", const "\n"];
        _144 = &_145;
        _143 = _144 as &[&str] (Pointer(Unsize));
        _150 = &_60;
        _149 = core::fmt::rt::Argument::<'_>::new_display::<u8>(_150) -> [return: bb43, unwind: bb49];
    }

    bb43: {
        _148 = [move _149];
        _147 = &_148;
        _146 = _147 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _142 = Arguments::<'_>::new_v1(move _143, move _146) -> [return: bb44, unwind: bb49];
    }

    bb44: {
        _141 = _print(move _142) -> [return: bb53, unwind: bb49];
    }

    bb45: {
        _161 = core::panicking::AssertKind::Eq;
        _163 = Option::<Arguments<'_>>::None;
        _162 = core::panicking::assert_failed::<isize, isize>(move _161, _155, _156, move _163) -> bb49;
    }

    bb46: {
        drop(_48) -> [return: bb47, unwind: bb50];
    }

    bb47: {
        drop(_1) -> bb48;
    }

    bb48: {
        return;
    }

    bb49 (cleanup): {
        drop(_48) -> [return: bb50, unwind terminate];
    }

    bb50 (cleanup): {
        drop(_1) -> [return: bb51, unwind terminate];
    }

    bb51 (cleanup): {
        resume;
    }

    bb52: {
        (*_164) = [const 1_i32, const 2_i32, const 3_i32];
        _2 = move _6 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _1 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _2) -> bb2;
    }

    bb53: {
        goto -> bb21;
    }
}
