// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::option::Option<std::string::String>;
    let mut _3: std::string::String;
    let _4: ();
    let mut _5: std::option::Option<std::string::String>;
    let mut _6: std::string::String;
    let _7: ();
    let mut _8: std::option::Option<std::string::String>;

    bb0: {
        _3 = <String as From<&str>>::from(const "42") -> bb1;
    }

    bb1: {
        _2 = Option::<String>::Some(move _3);
        _1 = test(move _2) -> bb2;
    }

    bb2: {
        _6 = String::new() -> bb3;
    }

    bb3: {
        _5 = Option::<String>::Some(move _6);
        _4 = test(move _5) -> bb4;
    }

    bb4: {
        _8 = Option::<String>::None;
        _7 = test(move _8) -> bb5;
    }

    bb5: {
        return;
    }
}

fn test(_1: Option<String>) -> () {
    debug o => _1;
    let mut _0: ();
    let mut _2: &std::string::String;
    let mut _3: &str;
    let mut _4: bool;
    let mut _5: isize;
    let _6: ();
    let mut _7: std::fmt::Arguments<'_>;
    let mut _8: &[&str];
    let _9: &[&str; 1];
    let _10: [&str; 1];
    let _11: ();
    let mut _12: std::fmt::Arguments<'_>;
    let mut _13: &[&str];
    let _14: &[&str; 1];
    let _15: [&str; 1];
    let _16: ();
    let mut _17: std::fmt::Arguments<'_>;
    let mut _18: &[&str];
    let _19: &[&str; 1];
    let _20: [&str; 1];

    bb0: {
        _5 = discriminant(_1);
        switchInt(move _5) -> [0: bb1, 1: bb2, otherwise: bb5];
    }

    bb1: {
        _20 = [const "nil\n"];
        _19 = &_20;
        _18 = _19 as &[&str] (Pointer(Unsize));
        _17 = Arguments::<'_>::new_const(move _18) -> [return: bb10, unwind: bb13];
    }

    bb2: {
        _2 = &((_1 as Some).0: std::string::String);
        _3 = <String as Deref>::deref(move _2) -> bb3;
    }

    bb3: {
        _4 = <str as PartialEq>::eq(_3, const "42") -> [return: bb4, unwind: bb13];
    }

    bb4: {
        switchInt(move _4) -> [0: bb8, otherwise: bb6];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _10 = [const "the answer\n"];
        _9 = &_10;
        _8 = _9 as &[&str] (Pointer(Unsize));
        _7 = Arguments::<'_>::new_const(move _8) -> [return: bb7, unwind: bb13];
    }

    bb7: {
        _6 = _print(move _7) -> [return: bb15, unwind: bb13];
    }

    bb8: {
        _15 = [const "something else?\n"];
        _14 = &_15;
        _13 = _14 as &[&str] (Pointer(Unsize));
        _12 = Arguments::<'_>::new_const(move _13) -> [return: bb9, unwind: bb13];
    }

    bb9: {
        _11 = _print(move _12) -> [return: bb16, unwind: bb13];
    }

    bb10: {
        _16 = _print(move _17) -> [return: bb17, unwind: bb13];
    }

    bb11: {
        drop(_1) -> bb12;
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        drop(_1) -> [return: bb14, unwind terminate];
    }

    bb14 (cleanup): {
        resume;
    }

    bb15: {
        goto -> bb11;
    }

    bb16: {
        goto -> bb11;
    }

    bb17: {
        goto -> bb11;
    }
}
