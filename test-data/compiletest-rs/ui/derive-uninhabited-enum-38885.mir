// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/derive-uninhabited-enum-38885.rs:7:10: 7:15>::fmt(_1: &Void, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    scope 1 {
    }

    bb0: {
        unreachable;
    }
}

fn <impl at ui/derive-uninhabited-enum-38885.rs:10:10: 10:15>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &u8;
    let _5: &str;
    let mut _6: &dyn std::fmt::Debug;
    let _7: &&u8;
    let _8: &Void;
    scope 1 {
        debug __self_0 => _4;
    }
    scope 2 {
        debug __self_0 => _8;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        unreachable;
    }

    bb2: {
        _4 = &(((*_1) as Bar).0: u8);
        _5 = const "Bar";
        _7 = &_4;
        _6 = _7 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _5, move _6) -> bb3;
    }

    bb3: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Foo;
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 2];
    let _6: [&str; 2];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &Foo;
    scope 1 {
        debug x => _1;
    }

    bb0: {
        _1 = Foo::Bar(const 42_u8);
        _6 = [const "", const "\n"];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _11 = &_1;
        _10 = core::fmt::rt::Argument::<'_>::new_debug::<Foo>(_11) -> bb1;
    }

    bb1: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb2;
    }

    bb2: {
        _2 = _print(move _3) -> bb3;
    }

    bb3: {
        return;
    }
}

fn Foo::Bar(_1: u8) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::Bar(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo::Bar(_1: u8) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::Bar(move _1);
        return;
    }
}

fn Foo::Void(_1: Void) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::Void(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo::Void(_1: Void) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::Void(move _1);
        return;
    }
}
