// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static mut FLAGS: u64 = {
    let mut _0: u64;

    bb0: {
        _0 = const 0_u64;
        return;
    }
}

fn AddFlags(_1: u64) -> AddFlags {
    debug bits => _1;
    let mut _0: AddFlags;

    bb0: {
        _0 = AddFlags { bits: _1 };
        return;
    }
}

fn arg(_1: u64, _2: &AddFlags) -> () {
    debug exp => _1;
    debug _x => _2;
    let mut _0: ();
    let _3: ();

    bb0: {
        _3 = check_flags(_1) -> bb1;
    }

    bb1: {
        return;
    }
}

fn pass(_1: T) -> T {
    debug v => _1;
    let mut _0: T;

    bb0: {
        _0 = move _1;
        return;
    }
}

fn check_flags(_1: u64) -> () {
    debug exp => _1;
    let mut _0: ();
    let mut _3: *mut u64;
    let mut _4: *mut u64;
    let _5: ();
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str];
    let _8: &[&str; 3];
    let _9: [&str; 3];
    let mut _10: &[core::fmt::rt::Argument<'_>];
    let _11: &[core::fmt::rt::Argument<'_>; 2];
    let _12: [core::fmt::rt::Argument<'_>; 2];
    let mut _13: core::fmt::rt::Argument<'_>;
    let _14: &u64;
    let mut _15: core::fmt::rt::Argument<'_>;
    let _16: &u64;
    let mut _17: (&u64, &u64);
    let mut _18: &u64;
    let mut _19: &u64;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: u64;
    let mut _25: u64;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        let _2: u64;
        let mut _35: *const ();
        let mut _36: usize;
        let mut _37: usize;
        let mut _38: usize;
        let mut _39: usize;
        let mut _40: bool;
        scope 2 {
            debug x => _2;
            let _20: &u64;
            let _21: &u64;
            let mut _29: *const ();
            let mut _30: usize;
            let mut _31: usize;
            let mut _32: usize;
            let mut _33: usize;
            let mut _34: bool;
            scope 3 {
                debug left_val => _20;
                debug right_val => _21;
                let _26: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _26;
                }
            }
        }
    }

    bb0: {
        _3 = const {alloc1: *mut u64};
        _35 = _3 as *const () (PtrToPtr);
        _36 = _35 as usize (Transmute);
        _37 = AlignOf(u64);
        _38 = Sub(_37, const 1_usize);
        _39 = BitAnd(_36, _38);
        _40 = Eq(_39, const 0_usize);
        assert(_40, "misaligned pointer dereference: address must be a multiple of {} but is {}", _37, _36) -> [success: bb8, unwind unreachable];
    }

    bb1: {
        _16 = &_1;
        _15 = core::fmt::rt::Argument::<'_>::new_display::<u64>(_16) -> bb2;
    }

    bb2: {
        _12 = [move _13, move _15];
        _11 = &_12;
        _10 = _11 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _6 = Arguments::<'_>::new_v1(move _7, move _10) -> bb3;
    }

    bb3: {
        _5 = _print(move _6) -> bb4;
    }

    bb4: {
        _18 = &_2;
        _19 = &_1;
        _17 = (move _18, move _19);
        _20 = (_17.0: &u64);
        _21 = (_17.1: &u64);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<u64, u64>(move _26, _20, _21, move _28);
    }

    bb6: {
        return;
    }

    bb7: {
        (*_4) = const 0_u64;
        _9 = [const "flags ", const ", expected ", const "\n"];
        _8 = &_9;
        _7 = _8 as &[&str] (Pointer(Unsize));
        _14 = &_2;
        _13 = core::fmt::rt::Argument::<'_>::new_display::<u64>(_14) -> bb1;
    }

    bb8: {
        _2 = (*_3);
        _4 = const {alloc1: *mut u64};
        _29 = _4 as *const () (PtrToPtr);
        _30 = _29 as usize (Transmute);
        _31 = AlignOf(u64);
        _32 = Sub(_31, const 1_usize);
        _33 = BitAnd(_30, _32);
        _34 = Eq(_33, const 0_usize);
        assert(_34, "misaligned pointer dereference: address must be a multiple of {} but is {}", _31, _30) -> [success: bb7, unwind unreachable];
    }
}

alloc1 (static: FLAGS, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn <impl at ui/cleanup-rvalue-for-scope.rs:37:1: 37:14>::check_flags(_1: &AddFlags, _2: u64) -> &AddFlags {
    debug self => _1;
    debug exp => _2;
    let mut _0: &AddFlags;
    let _3: ();

    bb0: {
        _3 = check_flags(_2) -> bb1;
    }

    bb1: {
        _0 = _1;
        return;
    }
}

fn <impl at ui/cleanup-rvalue-for-scope.rs:37:1: 37:14>::bits(_1: &AddFlags) -> u64 {
    debug self => _1;
    let mut _0: u64;

    bb0: {
        _0 = ((*_1).0: u64);
        return;
    }
}

fn <impl at ui/cleanup-rvalue-for-scope.rs:48:1: 48:23>::drop(_1: &mut AddFlags) -> () {
    debug self => _1;
    let mut _0: ();
    let mut _2: u64;
    let mut _3: *mut u64;
    let mut _4: u64;
    let mut _5: *mut u64;
    scope 1 {
        let mut _6: *const ();
        let mut _7: usize;
        let mut _8: usize;
        let mut _9: usize;
        let mut _10: usize;
        let mut _11: bool;
        let mut _12: *const ();
        let mut _13: usize;
        let mut _14: usize;
        let mut _15: usize;
        let mut _16: usize;
        let mut _17: bool;
    }

    bb0: {
        _3 = const {alloc1: *mut u64};
        _12 = _3 as *const () (PtrToPtr);
        _13 = _12 as usize (Transmute);
        _14 = AlignOf(u64);
        _15 = Sub(_14, const 1_usize);
        _16 = BitAnd(_13, _15);
        _17 = Eq(_16, const 0_usize);
        assert(_17, "misaligned pointer dereference: address must be a multiple of {} but is {}", _14, _13) -> [success: bb2, unwind unreachable];
    }

    bb1: {
        (*_5) = Add(move _2, move _4);
        return;
    }

    bb2: {
        _2 = (*_3);
        _4 = ((*_1).0: u64);
        _5 = const {alloc1: *mut u64};
        _6 = _5 as *const () (PtrToPtr);
        _7 = _6 as usize (Transmute);
        _8 = AlignOf(u64);
        _9 = Sub(_8, const 1_usize);
        _10 = BitAnd(_7, _9);
        _11 = Eq(_10, const 0_usize);
        assert(_11, "misaligned pointer dereference: address must be a multiple of {} but is {}", _8, _7) -> [success: bb1, unwind unreachable];
    }
}

alloc1 (static: FLAGS, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn main() -> () {
    let mut _0: ();
    let mut _1: std::slice::Iter<'_, AddFlags>;
    let mut _2: &[AddFlags; 1];
    let _3: [AddFlags; 1];
    let mut _4: AddFlags;
    let mut _5: std::slice::Iter<'_, AddFlags>;
    let mut _6: std::option::Option<&AddFlags>;
    let mut _7: &mut std::slice::Iter<'_, AddFlags>;
    let mut _8: isize;
    let _10: ();
    let _11: ();
    scope 1 {
        debug iter => _5;
        let _9: &AddFlags;
        scope 2 {
            debug x => _9;
        }
    }

    bb0: {
        _4 = AddFlags(const 1_u64) -> bb1;
    }

    bb1: {
        _3 = [move _4];
        _2 = &_3;
        _1 = <&[AddFlags; 1] as IntoIterator>::into_iter(move _2) -> [return: bb2, unwind: bb10];
    }

    bb2: {
        _5 = move _1;
        goto -> bb3;
    }

    bb3: {
        _7 = &mut _5;
        _6 = <std::slice::Iter<'_, AddFlags> as Iterator>::next(_7) -> [return: bb4, unwind: bb10];
    }

    bb4: {
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        _9 = ((_6 as Some).0: &AddFlags);
        _10 = check_flags(const 0_u64) -> [return: bb12, unwind: bb10];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        drop(_3) -> bb8;
    }

    bb8: {
        _11 = check_flags(const 1_u64) -> bb9;
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_3) -> [return: bb11, unwind terminate];
    }

    bb11 (cleanup): {
        resume;
    }

    bb12: {
        goto -> bb3;
    }
}
