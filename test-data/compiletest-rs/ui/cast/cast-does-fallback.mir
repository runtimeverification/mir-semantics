// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: u8;
    let mut _2: &u8;
    let _3: u8;
    let mut _4: u8;
    let mut _5: &u8;
    let _6: u8;
    let _7: i32;
    let mut _8: (&i32, &i32);
    let mut _9: &i32;
    let mut _10: &i32;
    let _11: i32;
    let mut _14: bool;
    let mut _15: i32;
    let mut _16: i32;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug cap => _7;
        let _12: &i32;
        let _13: &i32;
        scope 2 {
            debug left_val => _12;
            debug right_val => _13;
            let _17: core::panicking::AssertKind;
            scope 3 {
                debug kind => _17;
            }
        }
    }

    bb0: {
        _3 = const 42_u8;
        _2 = &_3;
        _1 = <&u8 as Shr<i32>>::shr(move _2, const 4_i32) -> bb1;
    }

    bb1: {
        _6 = const 42_u8;
        _5 = &_6;
        _4 = <&u8 as Shl<i32>>::shl(move _5, const 4_i32) -> bb2;
    }

    bb2: {
        _7 = Mul(const 512_i32, const 512_i32);
        _9 = &_7;
        _11 = const 0_i32;
        _10 = &_11;
        _8 = (move _9, move _10);
        _12 = (_8.0: &i32);
        _13 = (_8.1: &i32);
        _15 = (*_12);
        _16 = (*_13);
        _14 = Eq(move _15, move _16);
        switchInt(move _14) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _17 = core::panicking::AssertKind::Ne;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<i32, i32>(move _17, _12, _13, move _19);
    }

    bb4: {
        return;
    }
}
