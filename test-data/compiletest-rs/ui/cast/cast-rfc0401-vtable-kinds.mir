// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Foo::foo(_1: &Self, _2: T) -> u32 {
    debug self => _1;
    let mut _0: u32;

    bb0: {
        _0 = const 42_u32;
        drop(_2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn Bar::bar(_1: &Self) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 1];
    let _6: [&str; 1];

    bb0: {
        _6 = [const "Bar!\n"];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_const(move _4) -> bb1;
    }

    bb1: {
        _2 = _print(move _3) -> bb2;
    }

    bb2: {
        return;
    }
}

fn <impl at ui/cast/cast-rfc0401-vtable-kinds.rs:16:1: 16:22>::foo(_1: &u32, _2: u32) -> u32 {
    debug self => _1;
    let mut _0: u32;

    bb0: {
        _0 = <&u32 as Add<u32>>::add(_1, const 43_u32) -> bb1;
    }

    bb1: {
        return;
    }
}

fn round_trip_and_call(_1: *const dyn Foo<u32>) -> u32 {
    debug t => _1;
    let mut _0: u32;
    let mut _2: *const dyn Foo<u16>;
    let mut _3: *mut dyn Foo<u32>;
    let _4: &dyn Foo<u32>;
    scope 1 {
        debug foo_e => _2;
        scope 2 {
            debug r_1 => _3;
        }
    }

    bb0: {
        _2 = _1 as *const dyn Foo<u16> (PtrToPtr);
        _3 = _2 as *mut dyn Foo<u32> (PtrToPtr);
        _4 = &(*_3);
        _0 = <dyn Foo<u32> as Foo<u32>>::foo(_4, const 0_u32) -> bb1;
    }

    bb1: {
        return;
    }
}

fn foo_to_bar(_1: *const FooS<T>) -> *const BarS<T> {
    debug u => _1;
    let mut _0: *const BarS<T>;

    bb0: {
        _0 = _1 as *const BarS<T> (PtrToPtr);
        return;
    }
}

fn tuple_i32_to_u32(_1: *const (i32, T)) -> *const (u32, T) {
    debug u => _1;
    let mut _0: *const (u32, T);

    bb0: {
        _0 = _1 as *const (u32, T) (PtrToPtr);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: u32;
    let _3: &u32;
    let mut _5: *const dyn Foo<u32>;
    let mut _6: (&u32, &u32);
    let mut _7: &u32;
    let mut _8: &u32;
    let _9: u32;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: u32;
    let mut _15: u32;
    let _17: !;
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _20: [u32; 3];
    let _22: &FooS<[u32; 3]>;
    let _25: &BarS<[u32]>;
    let mut _26: (&&[u32], &&[u32; 3]);
    let mut _27: &&[u32];
    let _28: &[u32];
    let mut _29: &&[u32; 3];
    let _30: &[u32; 3];
    let _31: [u32; 3];
    let mut _34: bool;
    let mut _35: bool;
    let _37: !;
    let mut _38: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _40: [u8; 3];
    let _42: &(i32, [u8; 3]);
    let mut _45: (&&[u8], &&[u8; 3]);
    let mut _46: &&[u8];
    let _47: &[u8];
    let mut _48: &&[u8; 3];
    let _49: &[u8; 3];
    let _50: [u8; 3];
    let mut _53: bool;
    let mut _54: bool;
    let _56: !;
    let mut _57: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _2: &dyn Foo<u32>;
        scope 2 {
            debug y => _2;
            let _4: u32;
            scope 3 {
                debug fl => _4;
                let _10: &u32;
                let _11: &u32;
                let _19: FooS<[u32; 3]>;
                scope 5 {
                    debug left_val => _10;
                    debug right_val => _11;
                    let _16: core::panicking::AssertKind;
                    scope 6 {
                        debug kind => _16;
                    }
                }
                scope 7 {
                    debug s => _19;
                    let _21: &FooS<[u32]>;
                    scope 8 {
                        debug u => _21;
                        let _23: *const FooS<[u32]>;
                        scope 9 {
                            debug u => _23;
                            let _24: *const BarS<[u32]>;
                            scope 10 {
                                debug bar_ref => _24;
                                scope 11 {
                                    debug z => _25;
                                    let _32: &&[u32];
                                    let _33: &&[u32; 3];
                                    let _39: (i32, [u8; 3]);
                                    scope 13 {
                                        debug left_val => _32;
                                        debug right_val => _33;
                                        let _36: core::panicking::AssertKind;
                                        scope 14 {
                                            debug kind => _36;
                                        }
                                    }
                                    scope 15 {
                                        debug s => _39;
                                        let _41: &(i32, [u8]);
                                        scope 16 {
                                            debug u => _41;
                                            let _43: *const (i32, [u8]);
                                            scope 17 {
                                                debug u => _43;
                                                let _44: *const (u32, [u8]);
                                                scope 18 {
                                                    debug u_u32 => _44;
                                                    scope 19 {
                                                        let _51: &&[u8];
                                                        let _52: &&[u8; 3];
                                                        scope 20 {
                                                            debug left_val => _51;
                                                            debug right_val => _52;
                                                            let _55: core::panicking::AssertKind;
                                                            scope 21 {
                                                                debug kind => _55;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                scope 12 {
                                }
                            }
                        }
                    }
                }
            }
            scope 4 {
            }
        }
    }

    bb0: {
        _1 = const 4_u32;
        _3 = &_1;
        _2 = _3 as &dyn Foo<u32> (Pointer(Unsize));
        _5 = &raw const (*_2);
        _4 = round_trip_and_call(_5) -> bb1;
    }

    bb1: {
        _7 = &_4;
        _9 = Add(const 43_u32, const 4_u32);
        _8 = &_9;
        _6 = (move _7, move _8);
        _10 = (_6.0: &u32);
        _11 = (_6.1: &u32);
        _14 = (*_10);
        _15 = (*_11);
        _13 = Eq(move _14, move _15);
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _16 = core::panicking::AssertKind::Eq;
        _18 = Option::<Arguments<'_>>::None;
        _17 = core::panicking::assert_failed::<u32, u32>(move _16, _10, _11, move _18);
    }

    bb3: {
        _20 = [const 0_u32, const 1_u32, const 2_u32];
        _19 = FooS::<[u32; 3]>(move _20);
        _22 = &_19;
        _21 = _22 as &FooS<[u32]> (Pointer(Unsize));
        _23 = &raw const (*_21);
        _24 = foo_to_bar::<[u32]>(_23) -> bb4;
    }

    bb4: {
        _25 = &(*_24);
        _28 = &((*_25).0: [u32]);
        _27 = &_28;
        _31 = [const 0_u32, const 1_u32, const 2_u32];
        _30 = &_31;
        _29 = &_30;
        _26 = (move _27, move _29);
        _32 = (_26.0: &&[u32]);
        _33 = (_26.1: &&[u32; 3]);
        _35 = <&[u32] as PartialEq<&[u32; 3]>>::eq(_32, _33) -> bb5;
    }

    bb5: {
        _34 = Not(move _35);
        switchInt(move _34) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _36 = core::panicking::AssertKind::Eq;
        _38 = Option::<Arguments<'_>>::None;
        _37 = core::panicking::assert_failed::<&[u32], &[u32; 3]>(move _36, _32, _33, move _38);
    }

    bb7: {
        _40 = [const 0_u8, const 1_u8, const 2_u8];
        _39 = (const 0_i32, move _40);
        _42 = &_39;
        _41 = _42 as &(i32, [u8]) (Pointer(Unsize));
        _43 = &raw const (*_41);
        _44 = tuple_i32_to_u32::<[u8]>(_43) -> bb8;
    }

    bb8: {
        _47 = &((*_44).1: [u8]);
        _46 = &_47;
        _50 = [const 0_u8, const 1_u8, const 2_u8];
        _49 = &_50;
        _48 = &_49;
        _45 = (move _46, move _48);
        _51 = (_45.0: &&[u8]);
        _52 = (_45.1: &&[u8; 3]);
        _54 = <&[u8] as PartialEq<&[u8; 3]>>::eq(_51, _52) -> bb9;
    }

    bb9: {
        _53 = Not(move _54);
        switchInt(move _53) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _55 = core::panicking::AssertKind::Eq;
        _57 = Option::<Arguments<'_>>::None;
        _56 = core::panicking::assert_failed::<&[u8], &[u8; 3]>(move _55, _51, _52, move _57);
    }

    bb11: {
        return;
    }
}

fn FooS(_1: T) -> FooS<T> {
    let mut _0: FooS<T>;

    bb0: {
        _0 = FooS::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn FooS(_1: T) -> FooS<T> {
    let mut _0: FooS<T>;

    bb0: {
        _0 = FooS::<T>(move _1);
        return;
    }
}

fn BarS(_1: T) -> BarS<T> {
    let mut _0: BarS<T>;

    bb0: {
        _0 = BarS::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn BarS(_1: T) -> BarS<T> {
    let mut _0: BarS<T>;

    bb0: {
        _0 = BarS::<T>(move _1);
        return;
    }
}
