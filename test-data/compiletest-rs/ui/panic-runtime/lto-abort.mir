// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/panic-runtime/lto-abort.rs:13:1: 13:19>::drop(_1: &mut Bomb) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: !;

    bb0: {
        _2 = exit(const 0_i32);
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: std::env::ArgsOs;
    let mut _3: std::option::Option<std::ffi::OsString>;
    let mut _4: &mut std::env::ArgsOs;
    let mut _5: std::option::Option<std::ffi::OsString>;
    let mut _6: &mut std::env::ArgsOs;
    let mut _7: isize;
    let mut _9: bool;
    let mut _10: &&std::ffi::OsStr;
    let _11: &std::ffi::OsStr;
    let _12: &std::ffi::OsStr;
    let mut _13: &std::ffi::OsString;
    let mut _14: &&str;
    let _15: &str;
    let _17: !;
    let mut _19: &mut std::process::Command;
    let mut _20: &mut std::process::Command;
    let mut _21: &mut std::process::Command;
    let mut _22: std::process::Command;
    let mut _23: std::ffi::OsString;
    let mut _24: std::option::Option<std::ffi::OsString>;
    let mut _25: &mut std::env::ArgsOs;
    let mut _26: std::env::ArgsOs;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: &std::option::Option<i32>;
    let _30: std::option::Option<i32>;
    let mut _31: &std::process::ExitStatus;
    let _32: std::process::ExitStatus;
    let mut _33: std::result::Result<std::process::ExitStatus, std::io::Error>;
    let mut _34: &std::option::Option<i32>;
    let _35: std::option::Option<i32>;
    let mut _36: !;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: isize;
    scope 1 {
        debug args => _1;
        let _2: std::ffi::OsString;
        scope 2 {
            debug me => _2;
            let _18: std::result::Result<std::process::ExitStatus, std::io::Error>;
            scope 3 {
                debug s => _8;
                let _8: std::ffi::OsString;
                let _16: Bomb;
                scope 4 {
                    debug _bomb => const Bomb;
                }
            }
            scope 5 {
                debug s => _18;
            }
        }
    }

    bb0: {
        _38 = const false;
        _37 = const false;
        _1 = args_os() -> bb1;
    }

    bb1: {
        _4 = &mut _1;
        _3 = <ArgsOs as Iterator>::next(move _4) -> [return: bb2, unwind: bb31];
    }

    bb2: {
        _2 = Option::<OsString>::unwrap(move _3) -> [return: bb3, unwind: bb31];
    }

    bb3: {
        _6 = &mut _1;
        _5 = <ArgsOs as Iterator>::next(move _6) -> [return: bb4, unwind: bb30];
    }

    bb4: {
        _37 = const true;
        _7 = discriminant(_5);
        switchInt(move _7) -> [1: bb5, otherwise: bb36];
    }

    bb5: {
        _37 = const false;
        _8 = move ((_5 as Some).0: std::ffi::OsString);
        _13 = &_8;
        _12 = <OsString as Deref>::deref(move _13) -> [return: bb6, unwind: bb29];
    }

    bb6: {
        _11 = _12;
        _10 = &_11;
        _15 = const "foo";
        _14 = &_15;
        _9 = <&OsStr as PartialEq<&str>>::eq(move _10, move _14) -> [return: bb7, unwind: bb29];
    }

    bb7: {
        switchInt(move _9) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _17 = begin_panic::<&str>(const "try to catch me") -> bb28;
    }

    bb9: {
        drop(_8) -> [return: bb36, unwind: bb30];
    }

    bb10: {
        _25 = &mut _26;
        _24 = <ArgsOs as Iterator>::next(move _25) -> [return: bb11, unwind: bb27];
    }

    bb11: {
        _23 = Option::<OsString>::unwrap(move _24) -> [return: bb12, unwind: bb27];
    }

    bb12: {
        _22 = Command::new::<OsString>(move _23) -> [return: bb13, unwind: bb27];
    }

    bb13: {
        _21 = &mut _22;
        _20 = Command::arg::<&str>(move _21, const "foo") -> [return: bb14, unwind: bb26];
    }

    bb14: {
        _19 = _20;
        _18 = Command::status(move _19) -> [return: bb15, unwind: bb26];
    }

    bb15: {
        _38 = const true;
        drop(_22) -> [return: bb16, unwind: bb25];
    }

    bb16: {
        drop(_26) -> [return: bb17, unwind: bb38];
    }

    bb17: {
        _38 = const false;
        _33 = move _18;
        _32 = Result::<ExitStatus, std::io::Error>::unwrap(move _33) -> [return: bb18, unwind: bb38];
    }

    bb18: {
        _31 = &_32;
        _30 = ExitStatus::code(move _31) -> [return: bb19, unwind: bb38];
    }

    bb19: {
        _29 = &_30;
        _35 = Option::<i32>::Some(const 0_i32);
        _34 = &_35;
        _28 = <Option<i32> as PartialEq>::ne(move _29, move _34) -> [return: bb20, unwind: bb38];
    }

    bb20: {
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _36 = core::panicking::panic(const "assertion failed: s.unwrap().code() != Some(0)") -> bb38;
    }

    bb22: {
        _38 = const false;
        drop(_2) -> [return: bb23, unwind: bb31];
    }

    bb23: {
        drop(_1) -> bb24;
    }

    bb24: {
        return;
    }

    bb25 (cleanup): {
        drop(_26) -> [return: bb38, unwind terminate];
    }

    bb26 (cleanup): {
        drop(_22) -> [return: bb27, unwind terminate];
    }

    bb27 (cleanup): {
        drop(_26) -> [return: bb30, unwind terminate];
    }

    bb28 (cleanup): {
        drop(_16) -> [return: bb29, unwind terminate];
    }

    bb29 (cleanup): {
        drop(_8) -> [return: bb30, unwind terminate];
    }

    bb30 (cleanup): {
        drop(_2) -> [return: bb31, unwind terminate];
    }

    bb31 (cleanup): {
        drop(_1) -> [return: bb32, unwind terminate];
    }

    bb32 (cleanup): {
        resume;
    }

    bb33: {
        _37 = const false;
        _26 = args_os() -> [return: bb10, unwind: bb30];
    }

    bb34: {
        switchInt(_37) -> [0: bb33, otherwise: bb35];
    }

    bb35: {
        drop(((_5 as Some).0: std::ffi::OsString)) -> [return: bb33, unwind: bb30];
    }

    bb36: {
        _39 = discriminant(_5);
        switchInt(move _39) -> [1: bb34, otherwise: bb33];
    }

    bb37 (cleanup): {
        drop(_18) -> [return: bb30, unwind terminate];
    }

    bb38 (cleanup): {
        switchInt(_38) -> [0: bb30, otherwise: bb37];
    }
}
