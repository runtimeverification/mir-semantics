// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn build1() -> Vec<isize> {
    let mut _0: std::vec::Vec<isize>;
    let mut _1: std::boxed::Box<[isize]>;
    let mut _2: usize;
    let mut _3: usize;
    let mut _4: *mut u8;
    let mut _5: std::boxed::Box<[isize; 7]>;
    let mut _6: *const [isize; 7];
    let mut _7: *const ();
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: usize;
    let mut _12: bool;
    scope 1 {
    }

    bb0: {
        _2 = SizeOf([isize; 7]);
        _3 = AlignOf([isize; 7]);
        _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> bb1;
    }

    bb1: {
        _5 = ShallowInitBox(move _4, [isize; 7]);
        _6 = (((_5.0: std::ptr::Unique<[isize; 7]>).0: std::ptr::NonNull<[isize; 7]>).0: *const [isize; 7]);
        _7 = _6 as *const () (PtrToPtr);
        _8 = _7 as usize (Transmute);
        _9 = AlignOf(isize);
        _10 = Sub(_9, const 1_usize);
        _11 = BitAnd(_8, _10);
        _12 = Eq(_11, const 0_usize);
        assert(_12, "misaligned pointer dereference: address must be a multiple of {} but is {}", _9, _8) -> [success: bb3, unwind unreachable];
    }

    bb2: {
        return;
    }

    bb3: {
        (*_6) = [const 0_isize, const 0_isize, const 0_isize, const 0_isize, const 0_isize, const 0_isize, const 0_isize];
        _1 = move _5 as std::boxed::Box<[isize]> (Pointer(Unsize));
        _0 = slice::<impl [isize]>::into_vec::<std::alloc::Global>(move _1) -> bb2;
    }
}

fn build2() -> Vec<isize> {
    let mut _0: std::vec::Vec<isize>;
    let mut _1: !;

    bb0: {
        _1 = begin_panic::<&str>(const "explicit panic");
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Blk;
    let mut _2: std::vec::Vec<isize>;
    let mut _3: std::vec::Vec<isize>;
    scope 1 {
        debug _blk => _1;
    }

    bb0: {
        _2 = build1() -> bb1;
    }

    bb1: {
        _3 = build2() -> [return: bb2, unwind: bb4];
    }

    bb2: {
        _1 = Blk { node: move _2, span: move _3 };
        drop(_1) -> bb3;
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_2) -> [return: bb5, unwind terminate];
    }

    bb5 (cleanup): {
        resume;
    }
}
