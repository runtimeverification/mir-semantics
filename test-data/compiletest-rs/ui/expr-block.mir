// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test_basic() -> () {
    let mut _0: ();
    let _1: bool;
    let mut _2: bool;
    let mut _3: !;
    scope 1 {
        debug rs => _1;
    }

    bb0: {
        _1 = const true;
        _2 = Not(_1);
        switchInt(move _2) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _3 = core::panicking::panic(const "assertion failed: (rs)");
    }

    bb2: {
        return;
    }
}

fn test_rec() -> () {
    let mut _0: ();
    let _1: RS;
    let mut _2: (&isize, &isize);
    let mut _3: &isize;
    let mut _4: &isize;
    let _5: isize;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: isize;
    let mut _11: isize;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug rs => _1;
        let _6: &isize;
        let _7: &isize;
        scope 2 {
            debug left_val => _6;
            debug right_val => _7;
            let _12: core::panicking::AssertKind;
            scope 3 {
                debug kind => _12;
            }
        }
    }

    bb0: {
        _1 = RS { v1: const 10_isize, v2: const 20_isize };
        _3 = &(_1.1: isize);
        _5 = const 20_isize;
        _4 = &_5;
        _2 = (move _3, move _4);
        _6 = (_2.0: &isize);
        _7 = (_2.1: &isize);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<isize, isize>(move _12, _6, _7, move _14);
    }

    bb2: {
        return;
    }
}

fn test_filled_with_stuff() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _2: i32;
    let mut _3: bool;
    let mut _4: i32;
    let mut _5: (&i32, &i32);
    let mut _6: &i32;
    let mut _7: &i32;
    let _8: i32;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: i32;
    let mut _14: i32;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug rs => _1;
        let _9: &i32;
        let _10: &i32;
        scope 3 {
            debug left_val => _9;
            debug right_val => _10;
            let _15: core::panicking::AssertKind;
            scope 4 {
                debug kind => _15;
            }
        }
    }
    scope 2 {
        debug a => _2;
    }

    bb0: {
        _2 = const 0_i32;
        goto -> bb1;
    }

    bb1: {
        _4 = _2;
        _3 = Lt(move _4, const 10_i32);
        switchInt(move _3) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _2 = Add(_2, const 1_i32);
        goto -> bb1;
    }

    bb3: {
        _1 = _2;
        _6 = &_1;
        _8 = const 10_i32;
        _7 = &_8;
        _5 = (move _6, move _7);
        _9 = (_5.0: &i32);
        _10 = (_5.1: &i32);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<i32, i32>(move _15, _9, _10, move _17);
    }

    bb5: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let _3: ();

    bb0: {
        _1 = test_basic() -> bb1;
    }

    bb1: {
        _2 = test_rec() -> bb2;
    }

    bb2: {
        _3 = test_filled_with_stuff() -> bb3;
    }

    bb3: {
        return;
    }
}
