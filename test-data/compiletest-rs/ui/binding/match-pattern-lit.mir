// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn altlit(_1: isize) -> isize {
    debug f => _1;
    let mut _0: isize;
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 1];
    let _6: [&str; 1];
    let _7: ();
    let mut _8: std::fmt::Arguments<'_>;
    let mut _9: &[&str];
    let _10: &[&str; 1];
    let _11: [&str; 1];
    let _12: !;

    bb0: {
        switchInt(_1) -> [10: bb2, 11: bb5, otherwise: bb1];
    }

    bb1: {
        _12 = begin_panic::<&str>(const "the impossible happened");
    }

    bb2: {
        _6 = [const "case 10\n"];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_const(move _4) -> bb3;
    }

    bb3: {
        _2 = _print(move _3) -> bb4;
    }

    bb4: {
        _0 = const 20_isize;
        goto -> bb8;
    }

    bb5: {
        _11 = [const "case 11\n"];
        _10 = &_11;
        _9 = _10 as &[&str] (Pointer(Unsize));
        _8 = Arguments::<'_>::new_const(move _9) -> bb6;
    }

    bb6: {
        _7 = _print(move _8) -> bb7;
    }

    bb7: {
        _0 = const 22_isize;
        goto -> bb8;
    }

    bb8: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&isize, &isize);
    let mut _2: &isize;
    let _3: isize;
    let mut _4: &isize;
    let _5: isize;
    let _6: &isize;
    let _7: &isize;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: isize;
    let mut _11: isize;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&isize, &isize);
    let mut _16: &isize;
    let _17: isize;
    let mut _18: &isize;
    let _19: isize;
    let _20: &isize;
    let _21: &isize;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: isize;
    let mut _25: isize;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }
    scope 3 {
        debug left_val => _20;
        debug right_val => _21;
        let _26: core::panicking::AssertKind;
        scope 4 {
            debug kind => _26;
        }
    }

    bb0: {
        _3 = altlit(const 10_isize) -> bb1;
    }

    bb1: {
        _2 = &_3;
        _5 = const 20_isize;
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &isize);
        _7 = (_1.1: &isize);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<isize, isize>(move _12, _6, _7, move _14);
    }

    bb3: {
        _17 = altlit(const 11_isize) -> bb4;
    }

    bb4: {
        _16 = &_17;
        _19 = const 22_isize;
        _18 = &_19;
        _15 = (move _16, move _18);
        _20 = (_15.0: &isize);
        _21 = (_15.1: &isize);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<isize, isize>(move _26, _20, _21, move _28);
    }

    bb6: {
        return;
    }
}
