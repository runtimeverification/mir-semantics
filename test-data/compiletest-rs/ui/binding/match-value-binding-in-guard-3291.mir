// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: Option<Box<isize>>, _2: bool) -> isize {
    debug x => _1;
    debug b => _2;
    let mut _0: isize;
    let mut _3: isize;
    let _4: &std::boxed::Box<isize>;
    let _5: &&std::boxed::Box<isize>;
    let mut _6: std::boxed::Box<isize>;
    let mut _7: &std::boxed::Box<isize>;
    let mut _8: *const isize;
    scope 1 {
        debug x => _4;
        debug x => _5;
        let mut _9: *const ();
        let mut _10: usize;
        let mut _11: usize;
        let mut _12: usize;
        let mut _13: usize;
        let mut _14: bool;
    }

    bb0: {
        _3 = discriminant(_1);
        switchInt(move _3) -> [0: bb2, 1: bb3, otherwise: bb1];
    }

    bb1: {
        unreachable;
    }

    bb2: {
        _0 = const 1_isize;
        goto -> bb7;
    }

    bb3: {
        _4 = &((_1 as Some).0: std::boxed::Box<isize>);
        _5 = &_4;
        switchInt(_2) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _7 = _4;
        _6 = <Box<isize> as Clone>::clone(move _7) -> [return: bb6, unwind: bb9];
    }

    bb5: {
        _0 = const 0_isize;
        goto -> bb7;
    }

    bb6: {
        _8 = (((_6.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize);
        _9 = _8 as *const () (PtrToPtr);
        _10 = _9 as usize (Transmute);
        _11 = AlignOf(isize);
        _12 = Sub(_11, const 1_usize);
        _13 = BitAnd(_10, _12);
        _14 = Eq(_13, const 0_usize);
        assert(_14, "misaligned pointer dereference: address must be a multiple of {} but is {}", _11, _10) -> [success: bb11, unwind unreachable];
    }

    bb7: {
        drop(_1) -> bb8;
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_1) -> [return: bb10, unwind terminate];
    }

    bb10 (cleanup): {
        resume;
    }

    bb11: {
        _0 = (*_8);
        drop(_6) -> [return: bb7, unwind: bb9];
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: isize;
    let mut _2: std::option::Option<std::boxed::Box<isize>>;
    let mut _3: std::boxed::Box<isize>;
    let _4: isize;
    let mut _5: std::option::Option<std::boxed::Box<isize>>;
    let mut _6: std::boxed::Box<isize>;
    let _7: isize;
    let mut _8: std::option::Option<std::boxed::Box<isize>>;
    let _9: isize;
    let mut _10: std::option::Option<std::boxed::Box<isize>>;

    bb0: {
        _3 = Box::<isize>::new(const 22_isize) -> bb1;
    }

    bb1: {
        _2 = Option::<Box<isize>>::Some(move _3);
        _1 = foo(move _2, const true) -> bb2;
    }

    bb2: {
        _6 = Box::<isize>::new(const 22_isize) -> bb3;
    }

    bb3: {
        _5 = Option::<Box<isize>>::Some(move _6);
        _4 = foo(move _5, const false) -> bb4;
    }

    bb4: {
        _8 = Option::<Box<isize>>::None;
        _7 = foo(move _8, const true) -> bb5;
    }

    bb5: {
        _10 = Option::<Box<isize>>::None;
        _9 = foo(move _10, const false) -> bb6;
    }

    bb6: {
        return;
    }
}
