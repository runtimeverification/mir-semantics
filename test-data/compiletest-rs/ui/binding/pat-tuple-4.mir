// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn tuple() -> () {
    let mut _0: ();
    let _1: (i32, i32, i32);
    let mut _2: !;
    let mut _3: !;
    let mut _4: !;
    let mut _5: !;
    let mut _6: !;
    let mut _10: (&i32, &i32);
    let mut _11: &i32;
    let _12: i32;
    let mut _13: &i32;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: i32;
    let mut _19: i32;
    let _21: !;
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _23: (&i32, &i32);
    let mut _24: &i32;
    let _25: i32;
    let mut _26: &i32;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: i32;
    let mut _32: i32;
    let _34: !;
    let mut _35: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _36: (&i32, &i32);
    let mut _37: &i32;
    let _38: i32;
    let mut _39: &i32;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: i32;
    let mut _45: i32;
    let _47: !;
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _7: i32;
        let _8: i32;
        let _9: i32;
        scope 2 {
            debug a => _7;
            debug b => _8;
            debug c => _9;
            let _14: &i32;
            let _15: &i32;
            let _27: &i32;
            let _28: &i32;
            let _40: &i32;
            let _41: &i32;
            scope 3 {
                debug left_val => _14;
                debug right_val => _15;
                let _20: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _20;
                }
            }
            scope 5 {
                debug left_val => _27;
                debug right_val => _28;
                let _33: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _33;
                }
            }
            scope 7 {
                debug left_val => _40;
                debug right_val => _41;
                let _46: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _46;
                }
            }
        }
    }

    bb0: {
        _1 = (const 1_i32, const 2_i32, const 3_i32);
        switchInt((_1.0: i32)) -> [1: bb1, 0: bb4, otherwise: bb3];
    }

    bb1: {
        switchInt((_1.1: i32)) -> [2: bb2, otherwise: bb3];
    }

    bb2: {
        switchInt((_1.2: i32)) -> [4: bb7, 3: bb11, otherwise: bb3];
    }

    bb3: {
        _6 = core::panicking::panic(const "internal error: entered unreachable code");
    }

    bb4: {
        switchInt((_1.1: i32)) -> [2: bb5, otherwise: bb6];
    }

    bb5: {
        switchInt((_1.2: i32)) -> [3: bb8, otherwise: bb6];
    }

    bb6: {
        switchInt((_1.2: i32)) -> [3: bb9, otherwise: bb10];
    }

    bb7: {
        _2 = core::panicking::panic(const "internal error: entered unreachable code");
    }

    bb8: {
        _3 = core::panicking::panic(const "internal error: entered unreachable code");
    }

    bb9: {
        _4 = core::panicking::panic(const "internal error: entered unreachable code");
    }

    bb10: {
        _5 = core::panicking::panic(const "internal error: entered unreachable code");
    }

    bb11: {
        _7 = (_1.0: i32);
        _8 = (_1.1: i32);
        _9 = (_1.2: i32);
        _12 = const 1_i32;
        _11 = &_12;
        _13 = &_7;
        _10 = (move _11, move _13);
        _14 = (_10.0: &i32);
        _15 = (_10.1: &i32);
        _18 = (*_14);
        _19 = (*_15);
        _17 = Eq(move _18, move _19);
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _20 = core::panicking::AssertKind::Eq;
        _22 = Option::<Arguments<'_>>::None;
        _21 = core::panicking::assert_failed::<i32, i32>(move _20, _14, _15, move _22);
    }

    bb13: {
        _25 = const 2_i32;
        _24 = &_25;
        _26 = &_8;
        _23 = (move _24, move _26);
        _27 = (_23.0: &i32);
        _28 = (_23.1: &i32);
        _31 = (*_27);
        _32 = (*_28);
        _30 = Eq(move _31, move _32);
        _29 = Not(move _30);
        switchInt(move _29) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _33 = core::panicking::AssertKind::Eq;
        _35 = Option::<Arguments<'_>>::None;
        _34 = core::panicking::assert_failed::<i32, i32>(move _33, _27, _28, move _35);
    }

    bb15: {
        _38 = const 3_i32;
        _37 = &_38;
        _39 = &_9;
        _36 = (move _37, move _39);
        _40 = (_36.0: &i32);
        _41 = (_36.1: &i32);
        _44 = (*_40);
        _45 = (*_41);
        _43 = Eq(move _44, move _45);
        _42 = Not(move _43);
        switchInt(move _42) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _46 = core::panicking::AssertKind::Eq;
        _48 = Option::<Arguments<'_>>::None;
        _47 = core::panicking::assert_failed::<i32, i32>(move _46, _40, _41, move _48);
    }

    bb17: {
        return;
    }
}

fn tuple_struct() -> () {
    let mut _0: ();
    let _1: tuple_struct::S;
    let mut _2: !;
    let mut _3: !;
    let mut _4: !;
    let mut _5: !;
    let mut _6: !;
    let mut _10: (&u8, &u8);
    let mut _11: &u8;
    let _12: u8;
    let mut _13: &u8;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: u8;
    let mut _19: u8;
    let _21: !;
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _23: (&u8, &u8);
    let mut _24: &u8;
    let _25: u8;
    let mut _26: &u8;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: u8;
    let mut _32: u8;
    let _34: !;
    let mut _35: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _36: (&u8, &u8);
    let mut _37: &u8;
    let _38: u8;
    let mut _39: &u8;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: u8;
    let mut _45: u8;
    let _47: !;
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _7: u8;
        let _8: u8;
        let _9: u8;
        scope 2 {
            debug a => _7;
            debug b => _8;
            debug c => _9;
            let _14: &u8;
            let _15: &u8;
            let _27: &u8;
            let _28: &u8;
            let _40: &u8;
            let _41: &u8;
            scope 3 {
                debug left_val => _14;
                debug right_val => _15;
                let _20: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _20;
                }
            }
            scope 5 {
                debug left_val => _27;
                debug right_val => _28;
                let _33: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _33;
                }
            }
            scope 7 {
                debug left_val => _40;
                debug right_val => _41;
                let _46: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _46;
                }
            }
        }
    }

    bb0: {
        _1 = S(const 1_u8, const 2_u8, const 3_u8);
        switchInt((_1.0: u8)) -> [1: bb1, 0: bb4, otherwise: bb3];
    }

    bb1: {
        switchInt((_1.1: u8)) -> [2: bb2, otherwise: bb3];
    }

    bb2: {
        switchInt((_1.2: u8)) -> [4: bb7, 3: bb11, otherwise: bb3];
    }

    bb3: {
        _6 = core::panicking::panic(const "internal error: entered unreachable code");
    }

    bb4: {
        switchInt((_1.1: u8)) -> [2: bb5, otherwise: bb6];
    }

    bb5: {
        switchInt((_1.2: u8)) -> [3: bb8, otherwise: bb6];
    }

    bb6: {
        switchInt((_1.2: u8)) -> [3: bb9, otherwise: bb10];
    }

    bb7: {
        _2 = core::panicking::panic(const "internal error: entered unreachable code");
    }

    bb8: {
        _3 = core::panicking::panic(const "internal error: entered unreachable code");
    }

    bb9: {
        _4 = core::panicking::panic(const "internal error: entered unreachable code");
    }

    bb10: {
        _5 = core::panicking::panic(const "internal error: entered unreachable code");
    }

    bb11: {
        _7 = (_1.0: u8);
        _8 = (_1.1: u8);
        _9 = (_1.2: u8);
        _12 = const 1_u8;
        _11 = &_12;
        _13 = &_7;
        _10 = (move _11, move _13);
        _14 = (_10.0: &u8);
        _15 = (_10.1: &u8);
        _18 = (*_14);
        _19 = (*_15);
        _17 = Eq(move _18, move _19);
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _20 = core::panicking::AssertKind::Eq;
        _22 = Option::<Arguments<'_>>::None;
        _21 = core::panicking::assert_failed::<u8, u8>(move _20, _14, _15, move _22);
    }

    bb13: {
        _25 = const 2_u8;
        _24 = &_25;
        _26 = &_8;
        _23 = (move _24, move _26);
        _27 = (_23.0: &u8);
        _28 = (_23.1: &u8);
        _31 = (*_27);
        _32 = (*_28);
        _30 = Eq(move _31, move _32);
        _29 = Not(move _30);
        switchInt(move _29) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _33 = core::panicking::AssertKind::Eq;
        _35 = Option::<Arguments<'_>>::None;
        _34 = core::panicking::assert_failed::<u8, u8>(move _33, _27, _28, move _35);
    }

    bb15: {
        _38 = const 3_u8;
        _37 = &_38;
        _39 = &_9;
        _36 = (move _37, move _39);
        _40 = (_36.0: &u8);
        _41 = (_36.1: &u8);
        _44 = (*_40);
        _45 = (*_41);
        _43 = Eq(move _44, move _45);
        _42 = Not(move _43);
        switchInt(move _42) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _46 = core::panicking::AssertKind::Eq;
        _48 = Option::<Arguments<'_>>::None;
        _47 = core::panicking::assert_failed::<u8, u8>(move _46, _40, _41, move _48);
    }

    bb17: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();

    bb0: {
        _1 = tuple() -> bb1;
    }

    bb1: {
        _2 = tuple_struct() -> bb2;
    }

    bb2: {
        return;
    }
}

fn S(_1: u8, _2: u8, _3: u8) -> S {
    let mut _0: tuple_struct::S;

    bb0: {
        _0 = S(move _1, move _2, move _3);
        return;
    }
}

// MIR FOR CTFE
fn S(_1: u8, _2: u8, _3: u8) -> S {
    let mut _0: tuple_struct::S;

    bb0: {
        _0 = S(move _1, move _2, move _3);
        return;
    }
}
