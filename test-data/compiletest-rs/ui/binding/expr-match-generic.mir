// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test_generic(_1: T, _2: fn(T, T) -> bool) -> () {
    debug expected => _1;
    debug eq => _2;
    let mut _0: ();
    let _3: T;
    let mut _4: bool;
    let mut _5: &T;
    let _6: !;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: T;
    let mut _10: T;
    let mut _11: !;
    let mut _12: bool;
    scope 1 {
        debug actual => _3;
    }

    bb0: {
        _12 = const false;
        _12 = const true;
        _4 = const true;
        switchInt(_4) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _6 = begin_panic::<&str>(const "wat") -> bb9;
    }

    bb2: {
        _5 = &_1;
        _3 = <T as Clone>::clone(move _5) -> [return: bb3, unwind: bb9];
    }

    bb3: {
        _12 = const false;
        _9 = move _1;
        _10 = move _3;
        _8 = _2(move _9, move _10) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _11 = core::panicking::panic(const "assertion failed: (eq(expected, actual))") -> bb9;
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        resume;
    }

    bb8 (cleanup): {
        drop(_1) -> [return: bb7, unwind terminate];
    }

    bb9 (cleanup): {
        switchInt(_12) -> [0: bb7, otherwise: bb8];
    }
}

fn test_bool() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: fn(bool, bool) -> bool;

    bb0: {
        _2 = compare_bool as fn(bool, bool) -> bool (Pointer(ReifyFnPointer));
        _1 = test_generic::<bool>(const true, move _2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn compare_bool(_1: bool, _2: bool) -> bool {
    debug b1 => _1;
    debug b2 => _2;
    let mut _0: bool;

    bb0: {
        _0 = Eq(_1, _2);
        return;
    }
}

fn <impl at ui/binding/expr-match-generic.rs:16:10: 16:15>::clone(_1: &Pair) -> Pair {
    debug self => _1;
    let mut _0: Pair;
    let mut _2: isize;
    let _3: &isize;
    let mut _4: isize;
    let _5: &isize;

    bb0: {
        _3 = &((*_1).0: isize);
        _2 = (*_3);
        _5 = &((*_1).1: isize);
        _4 = (*_5);
        _0 = Pair { a: move _2, b: move _4 };
        return;
    }
}

fn test_rec() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: Pair;
    let mut _3: fn(Pair, Pair) -> bool;

    bb0: {
        _2 = Pair { a: const 1_isize, b: const 2_isize };
        _3 = compare_rec as fn(Pair, Pair) -> bool (Pointer(ReifyFnPointer));
        _1 = test_generic::<Pair>(move _2, move _3) -> bb1;
    }

    bb1: {
        return;
    }
}

fn compare_rec(_1: Pair, _2: Pair) -> bool {
    debug t1 => _1;
    debug t2 => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: isize;
    let mut _5: isize;
    let mut _6: bool;
    let mut _7: isize;
    let mut _8: isize;

    bb0: {
        _4 = (_1.0: isize);
        _5 = (_2.0: isize);
        _3 = Eq(move _4, move _5);
        switchInt(move _3) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _7 = (_1.1: isize);
        _8 = (_2.1: isize);
        _6 = Eq(move _7, move _8);
        _0 = move _6;
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();

    bb0: {
        _1 = test_bool() -> bb1;
    }

    bb1: {
        _2 = test_rec() -> bb2;
    }

    bb2: {
        return;
    }
}
