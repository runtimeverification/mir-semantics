// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::option::Option<std::sync::Mutex<bool>>;
    let mut _2: std::sync::Mutex<bool>;
    let mut _3: isize;
    let mut _6: bool;
    let mut _7: &bool;
    let mut _8: &std::sync::MutexGuard<'_, bool>;
    let _9: std::sync::MutexGuard<'_, bool>;
    let mut _10: std::result::Result<std::sync::MutexGuard<'_, bool>, std::sync::PoisonError<std::sync::MutexGuard<'_, bool>>>;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: &bool;
    let mut _14: &std::sync::MutexGuard<'_, bool>;
    let _15: std::sync::MutexGuard<'_, bool>;
    let mut _16: std::result::Result<std::sync::MutexGuard<'_, bool>, std::sync::PoisonError<std::sync::MutexGuard<'_, bool>>>;
    let mut _17: &std::sync::Mutex<bool>;
    let mut _18: !;
    let mut _19: !;
    let mut _20: &std::sync::Mutex<bool>;
    scope 1 {
        debug x => _1;
        let _4: &std::sync::Mutex<bool>;
        let _5: &&std::sync::Mutex<bool>;
        scope 2 {
            debug z => _4;
            debug z => _5;
        }
    }

    bb0: {
        _2 = Mutex::<bool>::new(const true) -> bb1;
    }

    bb1: {
        _1 = Option::<Mutex<bool>>::Some(move _2);
        _3 = discriminant(_1);
        switchInt(move _3) -> [1: bb3, otherwise: bb2];
    }

    bb2: {
        _19 = begin_panic::<&str>(const "explicit panic");
    }

    bb3: {
        _4 = &((_1 as Some).0: std::sync::Mutex<bool>);
        _5 = &_4;
        _20 = deref_copy (*_5);
        _10 = Mutex::<bool>::lock(_20) -> bb4;
    }

    bb4: {
        _9 = Result::<MutexGuard<'_, bool>, PoisonError<MutexGuard<'_, bool>>>::unwrap(move _10) -> bb5;
    }

    bb5: {
        _8 = &_9;
        _7 = <MutexGuard<'_, bool> as Deref>::deref(move _8) -> [return: bb6, unwind: bb17];
    }

    bb6: {
        _6 = (*_7);
        switchInt(move _6) -> [0: bb9, otherwise: bb7];
    }

    bb7: {
        drop(_9) -> bb8;
    }

    bb8: {
        _17 = _4;
        _16 = Mutex::<bool>::lock(move _17) -> bb10;
    }

    bb9: {
        drop(_9) -> bb2;
    }

    bb10: {
        _15 = Result::<MutexGuard<'_, bool>, PoisonError<MutexGuard<'_, bool>>>::unwrap(move _16) -> bb11;
    }

    bb11: {
        _14 = &_15;
        _13 = <MutexGuard<'_, bool> as Deref>::deref(move _14) -> [return: bb12, unwind: bb16];
    }

    bb12: {
        _12 = (*_13);
        _11 = Not(move _12);
        drop(_15) -> bb13;
    }

    bb13: {
        switchInt(move _11) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _18 = core::panicking::panic(const "assertion failed: *z.lock().unwrap()");
    }

    bb15: {
        return;
    }

    bb16 (cleanup): {
        drop(_15) -> [return: bb18, unwind terminate];
    }

    bb17 (cleanup): {
        drop(_9) -> [return: bb18, unwind terminate];
    }

    bb18 (cleanup): {
        resume;
    }
}
