// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: [closure@ui/binding/fn-pattern-expected-type.rs:4:13: 4:37];
    let _2: ();
    let mut _3: &[closure@ui/binding/fn-pattern-expected-type.rs:4:13: 4:37];
    let mut _4: ((isize, isize),);
    let mut _5: (isize, isize);
    scope 1 {
        debug f => const ZeroSized: [closure@ui/binding/fn-pattern-expected-type.rs:4:13: 4:37];
    }

    bb0: {
        _3 = &_1;
        _5 = (const 1_isize, const 2_isize);
        _4 = (move _5,);
        _2 = <[closure@ui/binding/fn-pattern-expected-type.rs:4:13: 4:37] as Fn<((isize, isize),)>>::call(move _3, move _4) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/binding/fn-pattern-expected-type.rs:4:13: 4:37], _2: (isize, isize)) -> () {
    let mut _0: ();
    let _3: isize;
    let _4: isize;
    let mut _5: (&isize, &isize);
    let mut _6: &isize;
    let mut _7: &isize;
    let _8: isize;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: isize;
    let mut _14: isize;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: (&isize, &isize);
    let mut _19: &isize;
    let mut _20: &isize;
    let _21: isize;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: isize;
    let mut _27: isize;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _3;
        debug y => _4;
        let _9: &isize;
        let _10: &isize;
        let _22: &isize;
        let _23: &isize;
        scope 2 {
            debug left_val => _9;
            debug right_val => _10;
            let _15: core::panicking::AssertKind;
            scope 3 {
                debug kind => _15;
            }
        }
        scope 4 {
            debug left_val => _22;
            debug right_val => _23;
            let _28: core::panicking::AssertKind;
            scope 5 {
                debug kind => _28;
            }
        }
    }

    bb0: {
        _3 = (_2.0: isize);
        _4 = (_2.1: isize);
        _6 = &_3;
        _8 = const 1_isize;
        _7 = &_8;
        _5 = (move _6, move _7);
        _9 = (_5.0: &isize);
        _10 = (_5.1: &isize);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<isize, isize>(move _15, _9, _10, move _17);
    }

    bb2: {
        _19 = &_4;
        _21 = const 2_isize;
        _20 = &_21;
        _18 = (move _19, move _20);
        _22 = (_18.0: &isize);
        _23 = (_18.1: &isize);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<isize, isize>(move _28, _22, _23, move _30);
    }

    bb4: {
        return;
    }
}
