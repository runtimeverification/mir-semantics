// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: &[u8; 4];
    let _2: [u8; 4];
    let mut _3: !;
    let mut _4: !;
    let mut _5: !;
    let mut _6: !;
    let mut _7: !;
    let mut _9: (&u8, &u8);
    let mut _10: &u8;
    let mut _11: &u8;
    let _12: u8;
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: u8;
    let mut _18: u8;
    let _20: !;
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _22: !;
    let mut _24: usize;
    let mut _25: usize;
    let mut _26: bool;
    let mut _27: usize;
    let mut _28: usize;
    let mut _29: bool;
    let mut _30: usize;
    let mut _31: usize;
    let mut _32: bool;
    let mut _33: !;
    let mut _34: !;
    let mut _35: !;
    let mut _36: !;
    let mut _37: usize;
    let mut _38: usize;
    let mut _39: bool;
    let mut _40: !;
    let mut _41: !;
    let mut _42: usize;
    let mut _43: usize;
    let mut _44: bool;
    let mut _45: !;
    let mut _47: (&u8, &u8);
    let mut _48: &u8;
    let mut _49: &u8;
    let _50: u8;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: u8;
    let mut _56: u8;
    let _58: !;
    let mut _59: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _60: !;
    scope 1 {
        debug buf => _1;
        let _8: u8;
        let _23: &[u8];
        scope 2 {
            debug x => _8;
            let _13: &u8;
            let _14: &u8;
            scope 3 {
                debug left_val => _13;
                debug right_val => _14;
                let _19: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _19;
                }
            }
        }
        scope 5 {
            debug buf => _23;
            let _46: u8;
            scope 6 {
                debug x => _46;
                let _51: &u8;
                let _52: &u8;
                scope 7 {
                    debug left_val => _51;
                    debug right_val => _52;
                    let _57: core::panicking::AssertKind;
                    scope 8 {
                        debug kind => _57;
                    }
                }
            }
        }
    }

    bb0: {
        _2 = [const 0_u8; 4];
        _1 = &_2;
        switchInt((*_1)[0 of 4]) -> [0: bb1, 116: bb5, otherwise: bb4];
    }

    bb1: {
        switchInt((*_1)[1 of 4]) -> [1: bb2, otherwise: bb4];
    }

    bb2: {
        switchInt((*_1)[2 of 4]) -> [0: bb3, otherwise: bb4];
    }

    bb3: {
        switchInt((*_1)[3 of 4]) -> [0: bb8, otherwise: bb4];
    }

    bb4: {
        switchInt((*_1)[0 of 4]) -> [116: bb10, 0: bb14, otherwise: bb13];
    }

    bb5: {
        switchInt((*_1)[1 of 4]) -> [114: bb6, otherwise: bb4];
    }

    bb6: {
        switchInt((*_1)[2 of 4]) -> [117: bb7, otherwise: bb4];
    }

    bb7: {
        switchInt((*_1)[3 of 4]) -> [101: bb9, otherwise: bb4];
    }

    bb8: {
        _3 = core::panicking::panic(const "not implemented");
    }

    bb9: {
        _4 = core::panicking::panic(const "not implemented");
    }

    bb10: {
        switchInt((*_1)[1 of 4]) -> [114: bb11, otherwise: bb13];
    }

    bb11: {
        switchInt((*_1)[2 of 4]) -> [117: bb12, otherwise: bb13];
    }

    bb12: {
        switchInt((*_1)[3 of 4]) -> [101: bb17, otherwise: bb13];
    }

    bb13: {
        switchInt((*_1)[0 of 4]) -> [116: bb19, 0: bb23, otherwise: bb22];
    }

    bb14: {
        switchInt((*_1)[1 of 4]) -> [1: bb15, otherwise: bb13];
    }

    bb15: {
        switchInt((*_1)[2 of 4]) -> [0: bb16, otherwise: bb13];
    }

    bb16: {
        switchInt((*_1)[3 of 4]) -> [0: bb18, otherwise: bb13];
    }

    bb17: {
        _5 = core::panicking::panic(const "not implemented");
    }

    bb18: {
        _6 = core::panicking::panic(const "not implemented");
    }

    bb19: {
        switchInt((*_1)[1 of 4]) -> [114: bb20, otherwise: bb22];
    }

    bb20: {
        switchInt((*_1)[2 of 4]) -> [117: bb21, otherwise: bb22];
    }

    bb21: {
        switchInt((*_1)[3 of 4]) -> [101: bb25, otherwise: bb22];
    }

    bb22: {
        _22 = core::panicking::panic(const "not implemented");
    }

    bb23: {
        switchInt((*_1)[2 of 4]) -> [0: bb24, otherwise: bb22];
    }

    bb24: {
        switchInt((*_1)[3 of 4]) -> [0: bb26, otherwise: bb22];
    }

    bb25: {
        _7 = core::panicking::panic(const "not implemented");
    }

    bb26: {
        _8 = (*_1)[1 of 4];
        _10 = &_8;
        _12 = const 0_u8;
        _11 = &_12;
        _9 = (move _10, move _11);
        _13 = (_9.0: &u8);
        _14 = (_9.1: &u8);
        _17 = (*_13);
        _18 = (*_14);
        _16 = Eq(move _17, move _18);
        _15 = Not(move _16);
        switchInt(move _15) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _19 = core::panicking::AssertKind::Eq;
        _21 = Option::<Arguments<'_>>::None;
        _20 = core::panicking::assert_failed::<u8, u8>(move _19, _13, _14, move _21);
    }

    bb28: {
        _23 = _1 as &[u8] (Pointer(Unsize));
        _30 = Len((*_23));
        _31 = const 4_usize;
        _32 = Eq(move _30, move _31);
        switchInt(move _32) -> [0: bb37, otherwise: bb29];
    }

    bb29: {
        switchInt((*_23)[0 of 4]) -> [0: bb30, 116: bb34, otherwise: bb33];
    }

    bb30: {
        switchInt((*_23)[1 of 4]) -> [1: bb31, otherwise: bb33];
    }

    bb31: {
        switchInt((*_23)[2 of 4]) -> [0: bb32, otherwise: bb33];
    }

    bb32: {
        switchInt((*_23)[3 of 4]) -> [0: bb39, otherwise: bb33];
    }

    bb33: {
        _37 = Len((*_23));
        _38 = const 4_usize;
        _39 = Eq(move _37, move _38);
        switchInt(move _39) -> [0: bb47, otherwise: bb43];
    }

    bb34: {
        switchInt((*_23)[1 of 4]) -> [114: bb35, otherwise: bb33];
    }

    bb35: {
        switchInt((*_23)[2 of 4]) -> [117: bb36, otherwise: bb33];
    }

    bb36: {
        switchInt((*_23)[3 of 4]) -> [101: bb42, otherwise: bb33];
    }

    bb37: {
        _27 = Len((*_23));
        _28 = const 1_usize;
        _29 = Eq(move _27, move _28);
        switchInt(move _29) -> [0: bb38, otherwise: bb40];
    }

    bb38: {
        _24 = Len((*_23));
        _25 = const 5_usize;
        _26 = Ge(move _24, move _25);
        switchInt(move _26) -> [0: bb33, otherwise: bb41];
    }

    bb39: {
        _33 = core::panicking::panic(const "not implemented");
    }

    bb40: {
        _34 = core::panicking::panic(const "not implemented");
    }

    bb41: {
        _35 = core::panicking::panic(const "not implemented");
    }

    bb42: {
        _36 = core::panicking::panic(const "not implemented");
    }

    bb43: {
        switchInt((*_23)[0 of 4]) -> [116: bb44, 0: bb48, otherwise: bb47];
    }

    bb44: {
        switchInt((*_23)[1 of 4]) -> [114: bb45, otherwise: bb47];
    }

    bb45: {
        switchInt((*_23)[2 of 4]) -> [117: bb46, otherwise: bb47];
    }

    bb46: {
        switchInt((*_23)[3 of 4]) -> [101: bb51, otherwise: bb47];
    }

    bb47: {
        _42 = Len((*_23));
        _43 = const 4_usize;
        _44 = Eq(move _42, move _43);
        switchInt(move _44) -> [0: bb57, otherwise: bb53];
    }

    bb48: {
        switchInt((*_23)[1 of 4]) -> [1: bb49, otherwise: bb47];
    }

    bb49: {
        switchInt((*_23)[2 of 4]) -> [0: bb50, otherwise: bb47];
    }

    bb50: {
        switchInt((*_23)[3 of 4]) -> [0: bb52, otherwise: bb47];
    }

    bb51: {
        _40 = core::panicking::panic(const "not implemented");
    }

    bb52: {
        _41 = core::panicking::panic(const "not implemented");
    }

    bb53: {
        switchInt((*_23)[0 of 4]) -> [116: bb54, 0: bb58, otherwise: bb57];
    }

    bb54: {
        switchInt((*_23)[1 of 4]) -> [114: bb55, otherwise: bb57];
    }

    bb55: {
        switchInt((*_23)[2 of 4]) -> [117: bb56, otherwise: bb57];
    }

    bb56: {
        switchInt((*_23)[3 of 4]) -> [101: bb60, otherwise: bb57];
    }

    bb57: {
        _60 = core::panicking::panic(const "not implemented");
    }

    bb58: {
        switchInt((*_23)[2 of 4]) -> [0: bb59, otherwise: bb57];
    }

    bb59: {
        switchInt((*_23)[3 of 4]) -> [0: bb61, otherwise: bb57];
    }

    bb60: {
        _45 = core::panicking::panic(const "not implemented");
    }

    bb61: {
        _46 = (*_23)[1 of 4];
        _48 = &_46;
        _50 = const 0_u8;
        _49 = &_50;
        _47 = (move _48, move _49);
        _51 = (_47.0: &u8);
        _52 = (_47.1: &u8);
        _55 = (*_51);
        _56 = (*_52);
        _54 = Eq(move _55, move _56);
        _53 = Not(move _54);
        switchInt(move _53) -> [0: bb63, otherwise: bb62];
    }

    bb62: {
        _57 = core::panicking::AssertKind::Eq;
        _59 = Option::<Arguments<'_>>::None;
        _58 = core::panicking::assert_failed::<u8, u8>(move _57, _51, _52, move _59);
    }

    bb63: {
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}
