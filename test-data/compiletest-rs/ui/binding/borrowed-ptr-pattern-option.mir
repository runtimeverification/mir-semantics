// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn select(_1: &Option<isize>, _2: &Option<isize>) -> &Option<isize> {
    debug x => _1;
    debug y => _2;
    let mut _0: &std::option::Option<isize>;
    let mut _3: (&std::option::Option<isize>, &std::option::Option<isize>);
    let mut _4: isize;
    let mut _5: isize;
    let mut _6: &std::option::Option<isize>;
    let mut _7: &std::option::Option<isize>;

    bb0: {
        _3 = (_1, _2);
        _6 = deref_copy (_3.0: &std::option::Option<isize>);
        _5 = discriminant((*_6));
        switchInt(move _5) -> [0: bb1, 1: bb5, otherwise: bb3];
    }

    bb1: {
        _7 = deref_copy (_3.1: &std::option::Option<isize>);
        _4 = discriminant((*_7));
        switchInt(move _4) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _0 = _2;
        goto -> bb6;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _0 = _1;
        goto -> bb6;
    }

    bb5: {
        _0 = _1;
        goto -> bb6;
    }

    bb6: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::option::Option<isize>;
    let mut _3: (&isize, &isize);
    let mut _4: &isize;
    let _5: isize;
    let mut _6: std::option::Option<isize>;
    let mut _7: &std::option::Option<isize>;
    let _8: &std::option::Option<isize>;
    let _9: &std::option::Option<isize>;
    let mut _10: &isize;
    let _11: isize;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: isize;
    let mut _17: isize;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _2: std::option::Option<isize>;
        scope 2 {
            debug y => _2;
            let _12: &isize;
            let _13: &isize;
            scope 3 {
                debug left_val => _12;
                debug right_val => _13;
                let _18: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _18;
                }
            }
        }
    }

    bb0: {
        _1 = Option::<isize>::None;
        _2 = Option::<isize>::Some(const 3_isize);
        _8 = &_1;
        _9 = &_2;
        _7 = select(_8, _9) -> bb1;
    }

    bb1: {
        _6 = (*_7);
        _5 = Option::<isize>::unwrap(move _6) -> bb2;
    }

    bb2: {
        _4 = &_5;
        _11 = const 3_isize;
        _10 = &_11;
        _3 = (move _4, move _10);
        _12 = (_3.0: &isize);
        _13 = (_3.1: &isize);
        _16 = (*_12);
        _17 = (*_13);
        _15 = Eq(move _16, move _17);
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<isize, isize>(move _18, _12, _13, move _20);
    }

    bb4: {
        return;
    }
}
