// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn baz() -> ! {
    let mut _0: !;
    let mut _1: !;

    bb0: {
        _1 = begin_panic::<&str>(const "explicit panic");
    }
}

fn foo() -> () {
    let mut _0: ();
    let mut _1: std::option::Option<isize>;
    let mut _2: isize;
    let _3: isize;
    let mut _5: std::option::Option<isize>;
    let mut _6: isize;
    let _7: !;
    let _8: ();
    let mut _9: std::fmt::Arguments<'_>;
    let mut _10: &[&str];
    let _11: &[&str; 2];
    let _12: [&str; 2];
    let mut _13: &[core::fmt::rt::Argument<'_>];
    let _14: &[core::fmt::rt::Argument<'_>; 1];
    let _15: [core::fmt::rt::Argument<'_>; 1];
    let mut _16: core::fmt::rt::Argument<'_>;
    let _17: &i32;
    let _18: ();
    let mut _19: std::fmt::Arguments<'_>;
    let mut _20: &[&str];
    let _21: &[&str; 1];
    let _22: [&str; 1];
    scope 1 {
        debug _x => _3;
        let mut _4: i32;
        scope 2 {
            debug bar => _4;
        }
    }

    bb0: {
        _1 = Option::<isize>::Some(const 5_isize);
        _2 = discriminant(_1);
        switchInt(move _2) -> [0: bb1, 1: bb3, otherwise: bb2];
    }

    bb1: {
        _22 = [const "hello\n"];
        _21 = &_22;
        _20 = _21 as &[&str] (Pointer(Unsize));
        _19 = Arguments::<'_>::new_const(move _20) -> bb8;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _3 = ((_1 as Some).0: isize);
        _5 = Option::<isize>::None;
        _6 = discriminant(_5);
        switchInt(move _6) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _7 = baz();
    }

    bb5: {
        _4 = const 5_i32;
        _12 = [const "", const "\n"];
        _11 = &_12;
        _10 = _11 as &[&str] (Pointer(Unsize));
        _17 = &_4;
        _16 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_17) -> bb6;
    }

    bb6: {
        _15 = [move _16];
        _14 = &_15;
        _13 = _14 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _9 = Arguments::<'_>::new_v1(move _10, move _13) -> bb7;
    }

    bb7: {
        _8 = _print(move _9) -> bb9;
    }

    bb8: {
        _18 = _print(move _19) -> bb9;
    }

    bb9: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();

    bb0: {
        _1 = foo() -> bb1;
    }

    bb1: {
        return;
    }
}
