// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: &[i32]) -> &[i32] {
    debug s => _1;
    let mut _0: &[i32];
    scope 1 {
        debug xs => _0;
    }

    bb0: {
        _0 = &(*_1)[0:];
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: [i32; 3];
    let mut _3: &[i32];
    let _4: &[i32; 3];
    let mut _5: (&[i32; 3], &&[i32]);
    let mut _6: &[i32; 3];
    let mut _7: &&[i32];
    let mut _10: bool;
    let mut _11: bool;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _2: &[i32];
        scope 2 {
            debug y => _2;
            let _8: &[i32; 3];
            let _9: &&[i32];
            scope 3 {
                debug left_val => _8;
                debug right_val => _9;
                let _12: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _12;
                }
            }
        }
    }

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32];
        _4 = &_1;
        _3 = _4 as &[i32] (Pointer(Unsize));
        _2 = foo(move _3) -> bb1;
    }

    bb1: {
        _6 = &_1;
        _7 = &_2;
        _5 = (move _6, move _7);
        _8 = (_5.0: &[i32; 3]);
        _9 = (_5.1: &&[i32]);
        _11 = <[i32; 3] as PartialEq<&[i32]>>::eq(_8, _9) -> bb2;
    }

    bb2: {
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<[i32; 3], &[i32]>(move _12, _8, _9, move _14);
    }

    bb4: {
        return;
    }
}
