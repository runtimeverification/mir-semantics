// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Foo::foo(_1: &Self, _2: isize) -> isize {
    debug self => _1;
    debug x => _2;
    let mut _0: isize;
    let _3: isize;
    let mut _4: isize;
    let mut _5: isize;
    scope 1 {
        debug val => _3;
    }

    bb0: {
        _3 = _2;
        _4 = _2;
        _2 = Mul(const 37_isize, move _4);
        _5 = _2;
        _0 = Add(_3, move _5);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _2: i32;
    let mut _3: (i32, i32);
    let mut _4: (&i32, &i32);
    let mut _5: &i32;
    let mut _6: &i32;
    let _7: i32;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: i32;
    let mut _13: i32;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&i32, &i32);
    let mut _18: &i32;
    let mut _19: &i32;
    let _20: i32;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: i32;
    let mut _26: i32;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _30: i32;
    let mut _31: i32;
    let mut _32: (&i32, &i32);
    let mut _33: &i32;
    let mut _34: &i32;
    let _35: i32;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: i32;
    let mut _41: i32;
    let _43: !;
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _45: (&isize, &isize);
    let mut _46: &isize;
    let _47: isize;
    let mut _48: &X;
    let _49: X;
    let mut _50: &isize;
    let _51: isize;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: isize;
    let mut _57: isize;
    let _59: !;
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _63: (i32, main::Bar);
    let mut _64: main::Bar;
    let mut _66: (&i32, &i32);
    let mut _67: &i32;
    let mut _68: &i32;
    let _69: i32;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: i32;
    let mut _75: i32;
    let _77: !;
    let mut _78: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _79: (&i32, &i32);
    let mut _80: &i32;
    let mut _81: &i32;
    let _82: i32;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: i32;
    let mut _88: i32;
    let _90: !;
    let mut _91: std::option::Option<std::fmt::Arguments<'_>>;
    let _92: ();
    let _93: &main::Bar;
    let mut _94: main::Bar;
    let _95: ();
    let _96: &main::Bar;
    let mut _98: main::A;
    let mut _99: (&isize, &isize);
    let mut _100: &isize;
    let mut _101: &isize;
    let _102: isize;
    let mut _105: bool;
    let mut _106: bool;
    let mut _107: isize;
    let mut _108: isize;
    let _110: !;
    let mut _111: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _112: (&isize, &isize);
    let mut _113: &isize;
    let mut _114: &isize;
    let _115: isize;
    let mut _118: bool;
    let mut _119: bool;
    let mut _120: isize;
    let mut _121: isize;
    let _123: !;
    let mut _124: std::option::Option<std::fmt::Arguments<'_>>;
    let _125: isize;
    let mut _126: &[closure@ui/binding/mut-in-ident-patterns.rs:74:6: 74:25];
    let _127: [closure@ui/binding/mut-in-ident-patterns.rs:74:6: 74:25];
    let mut _128: (main::A,);
    let mut _129: main::A;
    scope 1 {
        debug a => _1;
        debug b => _2;
        let _8: &i32;
        let _9: &i32;
        let _21: &i32;
        let _22: &i32;
        let _36: &i32;
        let _37: &i32;
        let _52: &isize;
        let _53: &isize;
        let _61: i32;
        let mut _62: main::Bar;
        scope 2 {
            debug left_val => _8;
            debug right_val => _9;
            let _14: core::panicking::AssertKind;
            scope 3 {
                debug kind => _14;
            }
        }
        scope 4 {
            debug left_val => _21;
            debug right_val => _22;
            let _27: core::panicking::AssertKind;
            scope 5 {
                debug kind => _27;
            }
        }
        scope 6 {
            debug left_val => _36;
            debug right_val => _37;
            let _42: core::panicking::AssertKind;
            scope 7 {
                debug kind => _42;
            }
        }
        scope 8 {
            debug left_val => _52;
            debug right_val => _53;
            let _58: core::panicking::AssertKind;
            scope 9 {
                debug kind => _58;
            }
        }
        scope 10 {
            debug x => _61;
            debug y => _62;
            let mut _65: i32;
            let mut _97: isize;
            scope 11 {
                debug z => _65;
                let _70: &i32;
                let _71: &i32;
                let _83: &i32;
                let _84: &i32;
                scope 12 {
                    debug left_val => _70;
                    debug right_val => _71;
                    let _76: core::panicking::AssertKind;
                    scope 13 {
                        debug kind => _76;
                    }
                }
                scope 14 {
                    debug left_val => _83;
                    debug right_val => _84;
                    let _89: core::panicking::AssertKind;
                    scope 15 {
                        debug kind => _89;
                    }
                }
            }
            scope 16 {
                debug x => _97;
                let _103: &isize;
                let _104: &isize;
                let _116: &isize;
                let _117: &isize;
                scope 17 {
                    debug left_val => _103;
                    debug right_val => _104;
                    let _109: core::panicking::AssertKind;
                    scope 18 {
                        debug kind => _109;
                    }
                }
                scope 19 {
                    debug left_val => _116;
                    debug right_val => _117;
                    let _122: core::panicking::AssertKind;
                    scope 20 {
                        debug kind => _122;
                    }
                }
            }
        }
    }

    bb0: {
        _3 = (const 23_i32, const 4_i32);
        _1 = (_3.0: i32);
        _2 = (_3.1: i32);
        _5 = &_1;
        _7 = const 23_i32;
        _6 = &_7;
        _4 = (move _5, move _6);
        _8 = (_4.0: &i32);
        _9 = (_4.1: &i32);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<i32, i32>(move _14, _8, _9, move _16);
    }

    bb2: {
        _18 = &_2;
        _20 = const 4_i32;
        _19 = &_20;
        _17 = (move _18, move _19);
        _21 = (_17.0: &i32);
        _22 = (_17.1: &i32);
        _25 = (*_21);
        _26 = (*_22);
        _24 = Eq(move _25, move _26);
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<i32, i32>(move _27, _21, _22, move _29);
    }

    bb4: {
        _30 = _1;
        _31 = _2;
        _2 = Add(move _30, move _31);
        _33 = &_2;
        _35 = const 27_i32;
        _34 = &_35;
        _32 = (move _33, move _34);
        _36 = (_32.0: &i32);
        _37 = (_32.1: &i32);
        _40 = (*_36);
        _41 = (*_37);
        _39 = Eq(move _40, move _41);
        _38 = Not(move _39);
        switchInt(move _38) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _42 = core::panicking::AssertKind::Eq;
        _44 = Option::<Arguments<'_>>::None;
        _43 = core::panicking::assert_failed::<i32, i32>(move _42, _36, _37, move _44);
    }

    bb6: {
        _48 = &_49;
        _47 = <X as Foo>::foo(move _48, const 2_isize) -> bb7;
    }

    bb7: {
        _46 = &_47;
        _51 = const 76_isize;
        _50 = &_51;
        _45 = (move _46, move _50);
        _52 = (_45.0: &isize);
        _53 = (_45.1: &isize);
        _56 = (*_52);
        _57 = (*_53);
        _55 = Eq(move _56, move _57);
        _54 = Not(move _55);
        switchInt(move _54) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _58 = core::panicking::AssertKind::Eq;
        _60 = Option::<Arguments<'_>>::None;
        _59 = core::panicking::assert_failed::<isize, isize>(move _58, _52, _53, move _60);
    }

    bb9: {
        _64 = Bar::Foo(const 21_isize);
        _63 = (const 32_i32, move _64);
        _61 = (_63.0: i32);
        _62 = move (_63.1: main::Bar);
        switchInt(_61) -> [32: bb10, otherwise: bb14];
    }

    bb10: {
        _65 = _61;
        _67 = &_65;
        _69 = const 32_i32;
        _68 = &_69;
        _66 = (move _67, move _68);
        _70 = (_66.0: &i32);
        _71 = (_66.1: &i32);
        _74 = (*_70);
        _75 = (*_71);
        _73 = Eq(move _74, move _75);
        _72 = Not(move _73);
        switchInt(move _72) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _76 = core::panicking::AssertKind::Eq;
        _78 = Option::<Arguments<'_>>::None;
        _77 = core::panicking::assert_failed::<i32, i32>(move _76, _70, _71, move _78);
    }

    bb12: {
        _65 = const 34_i32;
        _80 = &_65;
        _82 = const 34_i32;
        _81 = &_82;
        _79 = (move _80, move _81);
        _83 = (_79.0: &i32);
        _84 = (_79.1: &i32);
        _87 = (*_83);
        _88 = (*_84);
        _86 = Eq(move _87, move _88);
        _85 = Not(move _86);
        switchInt(move _85) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _89 = core::panicking::AssertKind::Eq;
        _91 = Option::<Arguments<'_>>::None;
        _90 = core::panicking::assert_failed::<i32, i32>(move _89, _83, _84, move _91);
    }

    bb14: {
        _93 = &_62;
        _92 = check_bar(_93) -> bb15;
    }

    bb15: {
        _94 = Bar::Baz(const 10f32, const 3_u8);
        _62 = move _94;
        _96 = &_62;
        _95 = check_bar(_96) -> bb16;
    }

    bb16: {
        _98 = A { x: const 10_isize };
        _97 = (_98.0: isize);
        _100 = &_97;
        _102 = const 10_isize;
        _101 = &_102;
        _99 = (move _100, move _101);
        _103 = (_99.0: &isize);
        _104 = (_99.1: &isize);
        _107 = (*_103);
        _108 = (*_104);
        _106 = Eq(move _107, move _108);
        _105 = Not(move _106);
        switchInt(move _105) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _109 = core::panicking::AssertKind::Eq;
        _111 = Option::<Arguments<'_>>::None;
        _110 = core::panicking::assert_failed::<isize, isize>(move _109, _103, _104, move _111);
    }

    bb18: {
        _97 = const 30_isize;
        _113 = &_97;
        _115 = const 30_isize;
        _114 = &_115;
        _112 = (move _113, move _114);
        _116 = (_112.0: &isize);
        _117 = (_112.1: &isize);
        _120 = (*_116);
        _121 = (*_117);
        _119 = Eq(move _120, move _121);
        _118 = Not(move _119);
        switchInt(move _118) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _122 = core::panicking::AssertKind::Eq;
        _124 = Option::<Arguments<'_>>::None;
        _123 = core::panicking::assert_failed::<isize, isize>(move _122, _116, _117, move _124);
    }

    bb20: {
        _126 = &_127;
        _129 = A { x: const 34_isize };
        _128 = (move _129,);
        _125 = <[closure@ui/binding/mut-in-ident-patterns.rs:74:6: 74:25] as Fn<(A,)>>::call(move _126, move _128) -> bb21;
    }

    bb21: {
        return;
    }
}

fn check_bar(_1: &Bar) -> () {
    debug y => _1;
    let mut _0: ();
    let mut _2: isize;
    let _3: isize;
    let mut _4: (&isize, &isize);
    let mut _5: &isize;
    let mut _6: &isize;
    let _7: isize;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: isize;
    let mut _13: isize;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let _17: f32;
    let _18: u8;
    let mut _19: (&f32, &f32);
    let mut _20: &f32;
    let mut _21: &f32;
    let _22: f32;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: f32;
    let mut _28: f32;
    let _30: !;
    let mut _31: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _32: (&u8, &u8);
    let mut _33: &u8;
    let mut _34: &u8;
    let _35: u8;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: u8;
    let mut _41: u8;
    let _43: !;
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug a => _3;
        let _8: &isize;
        let _9: &isize;
        scope 2 {
            debug left_val => _8;
            debug right_val => _9;
            let _14: core::panicking::AssertKind;
            scope 3 {
                debug kind => _14;
            }
        }
    }
    scope 4 {
        debug a => _17;
        debug b => _18;
        let _23: &f32;
        let _24: &f32;
        let _36: &u8;
        let _37: &u8;
        scope 5 {
            debug left_val => _23;
            debug right_val => _24;
            let _29: core::panicking::AssertKind;
            scope 6 {
                debug kind => _29;
            }
        }
        scope 7 {
            debug left_val => _36;
            debug right_val => _37;
            let _42: core::panicking::AssertKind;
            scope 8 {
                debug kind => _42;
            }
        }
    }

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _17 = (((*_1) as Baz).0: f32);
        _18 = (((*_1) as Baz).1: u8);
        _20 = &_17;
        _22 = const 10f32;
        _21 = &_22;
        _19 = (move _20, move _21);
        _23 = (_19.0: &f32);
        _24 = (_19.1: &f32);
        _27 = (*_23);
        _28 = (*_24);
        _26 = Eq(move _27, move _28);
        _25 = Not(move _26);
        switchInt(move _25) -> [0: bb6, otherwise: bb5];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _3 = (((*_1) as Foo).0: isize);
        _5 = &_3;
        _7 = const 21_isize;
        _6 = &_7;
        _4 = (move _5, move _6);
        _8 = (_4.0: &isize);
        _9 = (_4.1: &isize);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb8, otherwise: bb4];
    }

    bb4: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<isize, isize>(move _14, _8, _9, move _16);
    }

    bb5: {
        _29 = core::panicking::AssertKind::Eq;
        _31 = Option::<Arguments<'_>>::None;
        _30 = core::panicking::assert_failed::<f32, f32>(move _29, _23, _24, move _31);
    }

    bb6: {
        _33 = &_18;
        _35 = const 3_u8;
        _34 = &_35;
        _32 = (move _33, move _34);
        _36 = (_32.0: &u8);
        _37 = (_32.1: &u8);
        _40 = (*_36);
        _41 = (*_37);
        _39 = Eq(move _40, move _41);
        _38 = Not(move _39);
        switchInt(move _38) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _42 = core::panicking::AssertKind::Eq;
        _44 = Option::<Arguments<'_>>::None;
        _43 = core::panicking::assert_failed::<u8, u8>(move _42, _36, _37, move _44);
    }

    bb8: {
        return;
    }
}

fn foo1(_1: (f64, isize), _2: isize) -> isize {
    debug z => _2;
    let mut _0: isize;
    let _3: f64;
    let mut _4: isize;
    let mut _5: isize;
    let mut _6: isize;
    let mut _7: isize;
    let mut _8: isize;
    scope 1 {
        debug x => _3;
        debug y => _4;
    }

    bb0: {
        _3 = (_1.0: f64);
        _4 = (_1.1: isize);
        _4 = Mul(const 2_isize, const 6_isize);
        _5 = _4;
        _6 = _3 as isize (FloatToInt);
        _2 = Add(move _5, move _6);
        _7 = _4;
        _8 = _2;
        _0 = Sub(move _7, move _8);
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/binding/mut-in-ident-patterns.rs:74:6: 74:25], _2: A) -> isize {
    let mut _0: isize;
    let mut _3: isize;
    let mut _4: isize;
    scope 1 {
        debug t => _3;
    }

    bb0: {
        _3 = (_2.0: isize);
        _4 = _3;
        _3 = Add(move _4, const 1_isize);
        _0 = _3;
        return;
    }
}

fn Bar::Foo(_1: isize) -> Bar {
    let mut _0: main::Bar;

    bb0: {
        _0 = Bar::Foo(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Bar::Foo(_1: isize) -> Bar {
    let mut _0: main::Bar;

    bb0: {
        _0 = Bar::Foo(move _1);
        return;
    }
}

fn Bar::Baz(_1: f32, _2: u8) -> Bar {
    let mut _0: main::Bar;

    bb0: {
        _0 = Bar::Baz(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn Bar::Baz(_1: f32, _2: u8) -> Bar {
    let mut _0: main::Bar;

    bb0: {
        _0 = Bar::Baz(move _1, move _2);
        return;
    }
}
