// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test1() -> () {
    let mut _0: ();
    let mut _1: ((i32, std::string::String), (i32, std::string::String));
    let mut _2: (i32, std::string::String);
    let mut _3: std::string::String;
    let _4: &str;
    let mut _5: (i32, std::string::String);
    let mut _6: std::string::String;
    let _7: &str;
    let _8: std::string::String;
    let _9: std::string::String;
    let mut _10: (&std::string::String, &std::string::String);
    let mut _11: &std::string::String;
    let mut _12: &std::string::String;
    let _13: std::string::String;
    let _14: &str;
    let mut _17: bool;
    let mut _18: bool;
    let _20: !;
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _22: (&std::string::String, &std::string::String);
    let mut _23: &std::string::String;
    let mut _24: &std::string::String;
    let _25: std::string::String;
    let _26: &str;
    let mut _29: bool;
    let mut _30: bool;
    let _32: !;
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _34: !;
    let mut _35: bool;
    let mut _36: bool;
    scope 1 {
        debug a => _8;
        debug b => _9;
        let _15: &std::string::String;
        let _16: &std::string::String;
        let _27: &std::string::String;
        let _28: &std::string::String;
        scope 2 {
            debug left_val => _15;
            debug right_val => _16;
            let _19: core::panicking::AssertKind;
            scope 3 {
                debug kind => _19;
            }
        }
        scope 4 {
            debug left_val => _27;
            debug right_val => _28;
            let _31: core::panicking::AssertKind;
            scope 5 {
                debug kind => _31;
            }
        }
    }

    bb0: {
        _36 = const false;
        _35 = const false;
        _4 = const "a";
        _3 = <str as ToString>::to_string(_4) -> bb1;
    }

    bb1: {
        _2 = (const 1_i32, move _3);
        _7 = const "b";
        _6 = <str as ToString>::to_string(_7) -> [return: bb2, unwind: bb25];
    }

    bb2: {
        _5 = (const 2_i32, move _6);
        _35 = const true;
        _36 = const true;
        _1 = (move _2, move _5);
        switchInt(((_1.0: (i32, std::string::String)).0: i32)) -> [1: bb3, 2: bb5, otherwise: bb4];
    }

    bb3: {
        switchInt(((_1.1: (i32, std::string::String)).0: i32)) -> [2: bb7, otherwise: bb4];
    }

    bb4: {
        _34 = begin_panic::<&str>(const "explicit panic") -> bb30;
    }

    bb5: {
        switchInt(((_1.1: (i32, std::string::String)).0: i32)) -> [1: bb8, otherwise: bb4];
    }

    bb6: {
        _11 = &_8;
        _14 = const "a";
        _13 = <str as ToString>::to_string(_14) -> [return: bb9, unwind: bb23];
    }

    bb7: {
        _36 = const false;
        _8 = move ((_1.0: (i32, std::string::String)).1: std::string::String);
        _35 = const false;
        _9 = move ((_1.1: (i32, std::string::String)).1: std::string::String);
        goto -> bb6;
    }

    bb8: {
        _36 = const false;
        _9 = move ((_1.0: (i32, std::string::String)).1: std::string::String);
        _35 = const false;
        _8 = move ((_1.1: (i32, std::string::String)).1: std::string::String);
        goto -> bb6;
    }

    bb9: {
        _12 = &_13;
        _10 = (move _11, move _12);
        _15 = (_10.0: &std::string::String);
        _16 = (_10.1: &std::string::String);
        _18 = <String as PartialEq>::eq(_15, _16) -> [return: bb10, unwind: bb22];
    }

    bb10: {
        _17 = Not(move _18);
        switchInt(move _17) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _19 = core::panicking::AssertKind::Eq;
        _21 = Option::<Arguments<'_>>::None;
        _20 = core::panicking::assert_failed::<String, String>(move _19, _15, _16, move _21) -> bb22;
    }

    bb12: {
        drop(_13) -> [return: bb13, unwind: bb23];
    }

    bb13: {
        _23 = &_9;
        _26 = const "b";
        _25 = <str as ToString>::to_string(_26) -> [return: bb14, unwind: bb23];
    }

    bb14: {
        _24 = &_25;
        _22 = (move _23, move _24);
        _27 = (_22.0: &std::string::String);
        _28 = (_22.1: &std::string::String);
        _30 = <String as PartialEq>::eq(_27, _28) -> [return: bb15, unwind: bb21];
    }

    bb15: {
        _29 = Not(move _30);
        switchInt(move _29) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _31 = core::panicking::AssertKind::Eq;
        _33 = Option::<Arguments<'_>>::None;
        _32 = core::panicking::assert_failed::<String, String>(move _31, _27, _28, move _33) -> bb21;
    }

    bb17: {
        drop(_25) -> [return: bb18, unwind: bb23];
    }

    bb18: {
        drop(_8) -> [return: bb19, unwind: bb24];
    }

    bb19: {
        drop(_9) -> [return: bb20, unwind: bb30];
    }

    bb20: {
        _35 = const false;
        _36 = const false;
        return;
    }

    bb21 (cleanup): {
        drop(_25) -> [return: bb23, unwind terminate];
    }

    bb22 (cleanup): {
        drop(_13) -> [return: bb23, unwind terminate];
    }

    bb23 (cleanup): {
        drop(_8) -> [return: bb24, unwind terminate];
    }

    bb24 (cleanup): {
        drop(_9) -> [return: bb30, unwind terminate];
    }

    bb25 (cleanup): {
        drop(_2) -> [return: bb26, unwind terminate];
    }

    bb26 (cleanup): {
        resume;
    }

    bb27 (cleanup): {
        switchInt(_35) -> [0: bb26, otherwise: bb28];
    }

    bb28 (cleanup): {
        drop(((_1.1: (i32, std::string::String)).1: std::string::String)) -> [return: bb26, unwind terminate];
    }

    bb29 (cleanup): {
        drop(((_1.0: (i32, std::string::String)).1: std::string::String)) -> [return: bb27, unwind terminate];
    }

    bb30 (cleanup): {
        switchInt(_36) -> [0: bb27, otherwise: bb29];
    }
}

fn test2() -> () {
    let mut _0: ();
    let mut _1: (i32, i32, i32);
    let _2: i32;
    let _3: i32;
    let mut _4: (&i32, &i32);
    let mut _5: &i32;
    let mut _6: &i32;
    let _7: i32;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: i32;
    let mut _13: i32;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&i32, &i32);
    let mut _18: &i32;
    let mut _19: &i32;
    let _20: i32;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: i32;
    let mut _26: i32;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _30: !;
    scope 1 {
        debug a => _2;
        debug b => _3;
        let _8: &i32;
        let _9: &i32;
        let _21: &i32;
        let _22: &i32;
        scope 2 {
            debug left_val => _8;
            debug right_val => _9;
            let _14: core::panicking::AssertKind;
            scope 3 {
                debug kind => _14;
            }
        }
        scope 4 {
            debug left_val => _21;
            debug right_val => _22;
            let _27: core::panicking::AssertKind;
            scope 5 {
                debug kind => _27;
            }
        }
    }

    bb0: {
        _1 = (const 1_i32, const 2_i32, const 3_i32);
        switchInt((_1.0: i32)) -> [1: bb3, 2: bb4, otherwise: bb1];
    }

    bb1: {
        _30 = begin_panic::<&str>(const "explicit panic");
    }

    bb2: {
        _5 = &_2;
        _7 = const 2_i32;
        _6 = &_7;
        _4 = (move _5, move _6);
        _8 = (_4.0: &i32);
        _9 = (_4.1: &i32);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb6, otherwise: bb5];
    }

    bb3: {
        _2 = (_1.1: i32);
        _3 = (_1.2: i32);
        goto -> bb2;
    }

    bb4: {
        _3 = (_1.1: i32);
        _2 = (_1.2: i32);
        goto -> bb2;
    }

    bb5: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<i32, i32>(move _14, _8, _9, move _16);
    }

    bb6: {
        _18 = &_3;
        _20 = const 3_i32;
        _19 = &_20;
        _17 = (move _18, move _19);
        _21 = (_17.0: &i32);
        _22 = (_17.1: &i32);
        _25 = (*_21);
        _26 = (*_22);
        _24 = Eq(move _25, move _26);
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<i32, i32>(move _27, _21, _22, move _29);
    }

    bb8: {
        return;
    }
}

fn test3() -> () {
    let mut _0: ();
    let mut _1: (i32, i32, i32);
    let _2: &i32;
    let _3: &i32;
    let mut _4: (&i32, &i32);
    let mut _5: &i32;
    let mut _6: &i32;
    let _7: i32;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: i32;
    let mut _13: i32;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&i32, &i32);
    let mut _18: &i32;
    let mut _19: &i32;
    let _20: i32;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: i32;
    let mut _26: i32;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _30: !;
    scope 1 {
        debug a => _2;
        debug b => _3;
        let _8: &i32;
        let _9: &i32;
        let _21: &i32;
        let _22: &i32;
        scope 2 {
            debug left_val => _8;
            debug right_val => _9;
            let _14: core::panicking::AssertKind;
            scope 3 {
                debug kind => _14;
            }
        }
        scope 4 {
            debug left_val => _21;
            debug right_val => _22;
            let _27: core::panicking::AssertKind;
            scope 5 {
                debug kind => _27;
            }
        }
    }

    bb0: {
        _1 = (const 1_i32, const 2_i32, const 3_i32);
        switchInt((_1.0: i32)) -> [1: bb3, 2: bb4, otherwise: bb1];
    }

    bb1: {
        _30 = begin_panic::<&str>(const "explicit panic");
    }

    bb2: {
        _5 = _2;
        _7 = const 2_i32;
        _6 = &_7;
        _4 = (move _5, move _6);
        _8 = (_4.0: &i32);
        _9 = (_4.1: &i32);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb6, otherwise: bb5];
    }

    bb3: {
        _2 = &(_1.1: i32);
        _3 = &(_1.2: i32);
        goto -> bb2;
    }

    bb4: {
        _3 = &(_1.1: i32);
        _2 = &(_1.2: i32);
        goto -> bb2;
    }

    bb5: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<i32, i32>(move _14, _8, _9, move _16);
    }

    bb6: {
        _18 = _3;
        _20 = const 3_i32;
        _19 = &_20;
        _17 = (move _18, move _19);
        _21 = (_17.0: &i32);
        _22 = (_17.1: &i32);
        _25 = (*_21);
        _26 = (*_22);
        _24 = Eq(move _25, move _26);
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<i32, i32>(move _27, _21, _22, move _29);
    }

    bb8: {
        return;
    }
}

fn test4() -> () {
    let mut _0: ();
    let mut _1: (i32, i32, i32);
    let _2: i32;
    let _3: &i32;
    let _4: i32;
    let _5: &i32;
    let mut _6: i32;
    let mut _7: i32;
    let mut _8: (&i32, &i32);
    let mut _9: &i32;
    let mut _10: &i32;
    let _11: i32;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: i32;
    let mut _17: i32;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: (&i32, &i32);
    let mut _22: &i32;
    let mut _23: &i32;
    let _24: i32;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: i32;
    let mut _30: i32;
    let _32: !;
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _34: !;
    scope 1 {
        debug a => _2;
        debug a => _3;
        debug b => _4;
        debug b => _5;
        let _12: &i32;
        let _13: &i32;
        let _25: &i32;
        let _26: &i32;
        scope 2 {
            debug left_val => _12;
            debug right_val => _13;
            let _18: core::panicking::AssertKind;
            scope 3 {
                debug kind => _18;
            }
        }
        scope 4 {
            debug left_val => _25;
            debug right_val => _26;
            let _31: core::panicking::AssertKind;
            scope 5 {
                debug kind => _31;
            }
        }
    }

    bb0: {
        _1 = (const 1_i32, const 2_i32, const 3_i32);
        switchInt((_1.0: i32)) -> [1: bb3, 2: bb5, otherwise: bb1];
    }

    bb1: {
        _34 = begin_panic::<&str>(const "explicit panic");
    }

    bb2: {
        _9 = &_2;
        _11 = const 2_i32;
        _10 = &_11;
        _8 = (move _9, move _10);
        _12 = (_8.0: &i32);
        _13 = (_8.1: &i32);
        _16 = (*_12);
        _17 = (*_13);
        _15 = Eq(move _16, move _17);
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb8, otherwise: bb7];
    }

    bb3: {
        _3 = &(_1.1: i32);
        _5 = &(_1.2: i32);
        _6 = (*_3);
        switchInt(move _6) -> [2: bb4, otherwise: bb1];
    }

    bb4: {
        _2 = (_1.1: i32);
        _4 = (_1.2: i32);
        goto -> bb2;
    }

    bb5: {
        _5 = &(_1.1: i32);
        _3 = &(_1.2: i32);
        _7 = (*_3);
        switchInt(move _7) -> [2: bb6, otherwise: bb1];
    }

    bb6: {
        _4 = (_1.1: i32);
        _2 = (_1.2: i32);
        goto -> bb2;
    }

    bb7: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<i32, i32>(move _18, _12, _13, move _20);
    }

    bb8: {
        _22 = &_4;
        _24 = const 3_i32;
        _23 = &_24;
        _21 = (move _22, move _23);
        _25 = (_21.0: &i32);
        _26 = (_21.1: &i32);
        _29 = (*_25);
        _30 = (*_26);
        _28 = Eq(move _29, move _30);
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _31 = core::panicking::AssertKind::Eq;
        _33 = Option::<Arguments<'_>>::None;
        _32 = core::panicking::assert_failed::<i32, i32>(move _31, _25, _26, move _33);
    }

    bb10: {
        return;
    }
}

fn test5() -> () {
    let mut _0: ();
    let mut _1: (i32, i32, i32);
    let _2: &i32;
    let _3: &&i32;
    let _4: &i32;
    let _5: &&i32;
    let mut _6: i32;
    let mut _7: i32;
    let mut _8: (&i32, &i32);
    let mut _9: &i32;
    let mut _10: &i32;
    let _11: i32;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: i32;
    let mut _17: i32;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: (&i32, &i32);
    let mut _22: &i32;
    let mut _23: &i32;
    let _24: i32;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: i32;
    let mut _30: i32;
    let _32: !;
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _34: !;
    let mut _35: &i32;
    let mut _36: &i32;
    scope 1 {
        debug a => _2;
        debug a => _3;
        debug b => _4;
        debug b => _5;
        let _12: &i32;
        let _13: &i32;
        let _25: &i32;
        let _26: &i32;
        scope 2 {
            debug left_val => _12;
            debug right_val => _13;
            let _18: core::panicking::AssertKind;
            scope 3 {
                debug kind => _18;
            }
        }
        scope 4 {
            debug left_val => _25;
            debug right_val => _26;
            let _31: core::panicking::AssertKind;
            scope 5 {
                debug kind => _31;
            }
        }
    }

    bb0: {
        _1 = (const 1_i32, const 2_i32, const 3_i32);
        switchInt((_1.0: i32)) -> [1: bb3, 2: bb4, otherwise: bb1];
    }

    bb1: {
        _34 = begin_panic::<&str>(const "explicit panic");
    }

    bb2: {
        _9 = _2;
        _11 = const 2_i32;
        _10 = &_11;
        _8 = (move _9, move _10);
        _12 = (_8.0: &i32);
        _13 = (_8.1: &i32);
        _16 = (*_12);
        _17 = (*_13);
        _15 = Eq(move _16, move _17);
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb6, otherwise: bb5];
    }

    bb3: {
        _2 = &(_1.1: i32);
        _3 = &_2;
        _4 = &(_1.2: i32);
        _5 = &_4;
        _35 = deref_copy (*_3);
        _6 = (*_35);
        switchInt(move _6) -> [2: bb2, otherwise: bb1];
    }

    bb4: {
        _4 = &(_1.1: i32);
        _5 = &_4;
        _2 = &(_1.2: i32);
        _3 = &_2;
        _36 = deref_copy (*_3);
        _7 = (*_36);
        switchInt(move _7) -> [2: bb2, otherwise: bb1];
    }

    bb5: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<i32, i32>(move _18, _12, _13, move _20);
    }

    bb6: {
        _22 = _4;
        _24 = const 3_i32;
        _23 = &_24;
        _21 = (move _22, move _23);
        _25 = (_21.0: &i32);
        _26 = (_21.1: &i32);
        _29 = (*_25);
        _30 = (*_26);
        _28 = Eq(move _29, move _30);
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _31 = core::panicking::AssertKind::Eq;
        _33 = Option::<Arguments<'_>>::None;
        _32 = core::panicking::assert_failed::<i32, i32>(move _31, _25, _26, move _33);
    }

    bb8: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let _3: ();
    let _4: ();
    let _5: ();

    bb0: {
        _1 = test1() -> bb1;
    }

    bb1: {
        _2 = test2() -> bb2;
    }

    bb2: {
        _3 = test3() -> bb3;
    }

    bb3: {
        _4 = test4() -> bb4;
    }

    bb4: {
        _5 = test5() -> bb5;
    }

    bb5: {
        return;
    }
}
