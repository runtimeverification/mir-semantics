// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: std::boxed::Box<Pair>;
    let mut _2: Pair;
    let mut _3: std::boxed::Box<isize>;
    let mut _4: std::boxed::Box<isize>;
    let mut _8: (&isize, &isize);
    let mut _9: &isize;
    let mut _10: &isize;
    let _11: isize;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: isize;
    let mut _17: isize;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: std::boxed::Box<isize>;
    let mut _22: (&isize, &isize);
    let mut _23: &isize;
    let mut _24: &isize;
    let _25: isize;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: isize;
    let mut _31: isize;
    let _33: !;
    let mut _34: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _35: std::boxed::Box<isize>;
    let mut _36: std::boxed::Box<isize>;
    let mut _37: *const Pair;
    let mut _38: *const isize;
    let mut _39: *const isize;
    scope 1 {
        debug x => _1;
        let _5: &mut Pair;
        let mut _52: *const ();
        let mut _53: usize;
        let mut _54: usize;
        let mut _55: usize;
        let mut _56: usize;
        let mut _57: bool;
        scope 2 {
            debug x_internal => _5;
            let _6: &mut std::boxed::Box<isize>;
            let _7: &mut std::boxed::Box<isize>;
            scope 3 {
                debug a => _6;
                debug _b => _7;
                let _12: &isize;
                let _13: &isize;
                let _26: &isize;
                let _27: &isize;
                let mut _40: *const ();
                let mut _41: usize;
                let mut _42: usize;
                let mut _43: usize;
                let mut _44: usize;
                let mut _45: bool;
                let mut _46: *const ();
                let mut _47: usize;
                let mut _48: usize;
                let mut _49: usize;
                let mut _50: usize;
                let mut _51: bool;
                scope 4 {
                    debug left_val => _12;
                    debug right_val => _13;
                    let _18: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _18;
                    }
                }
                scope 6 {
                    debug left_val => _26;
                    debug right_val => _27;
                    let _32: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _32;
                    }
                }
            }
        }
    }

    bb0: {
        _3 = Box::<isize>::new(const 10_isize) -> bb1;
    }

    bb1: {
        _4 = Box::<isize>::new(const 20_isize) -> [return: bb2, unwind: bb13];
    }

    bb2: {
        _2 = Pair { a: move _3, b: move _4 };
        _1 = Box::<Pair>::new(move _2) -> bb3;
    }

    bb3: {
        _37 = (((_1.0: std::ptr::Unique<Pair>).0: std::ptr::NonNull<Pair>).0: *const Pair);
        _52 = _37 as *const () (PtrToPtr);
        _53 = _52 as usize (Transmute);
        _54 = AlignOf(Pair);
        _55 = Sub(_54, const 1_usize);
        _56 = BitAnd(_53, _55);
        _57 = Eq(_56, const 0_usize);
        assert(_57, "misaligned pointer dereference: address must be a multiple of {} but is {}", _54, _53) -> [success: bb17, unwind unreachable];
    }

    bb4: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<isize, isize>(move _18, _12, _13, move _20) -> bb12;
    }

    bb5: {
        _21 = Box::<isize>::new(const 30_isize) -> [return: bb6, unwind: bb12];
    }

    bb6: {
        drop((*_6)) -> [return: bb7, unwind: bb8];
    }

    bb7: {
        (*_6) = move _21;
        _36 = deref_copy (*_6);
        _39 = (((_36.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize);
        _40 = _39 as *const () (PtrToPtr);
        _41 = _40 as usize (Transmute);
        _42 = AlignOf(isize);
        _43 = Sub(_42, const 1_usize);
        _44 = BitAnd(_41, _43);
        _45 = Eq(_44, const 0_usize);
        assert(_45, "misaligned pointer dereference: address must be a multiple of {} but is {}", _42, _41) -> [success: bb15, unwind unreachable];
    }

    bb8 (cleanup): {
        (*_6) = move _21;
        goto -> bb12;
    }

    bb9: {
        _32 = core::panicking::AssertKind::Eq;
        _34 = Option::<Arguments<'_>>::None;
        _33 = core::panicking::assert_failed::<isize, isize>(move _32, _26, _27, move _34) -> bb12;
    }

    bb10: {
        drop(_1) -> bb11;
    }

    bb11: {
        return;
    }

    bb12 (cleanup): {
        drop(_1) -> [return: bb14, unwind terminate];
    }

    bb13 (cleanup): {
        drop(_3) -> [return: bb14, unwind terminate];
    }

    bb14 (cleanup): {
        resume;
    }

    bb15: {
        _23 = &(*_39);
        _25 = const 30_isize;
        _24 = &_25;
        _22 = (move _23, move _24);
        _26 = (_22.0: &isize);
        _27 = (_22.1: &isize);
        _30 = (*_26);
        _31 = (*_27);
        _29 = Eq(move _30, move _31);
        _28 = Not(move _29);
        switchInt(move _28) -> [0: bb10, otherwise: bb9];
    }

    bb16: {
        _9 = &(*_38);
        _11 = const 10_isize;
        _10 = &_11;
        _8 = (move _9, move _10);
        _12 = (_8.0: &isize);
        _13 = (_8.1: &isize);
        _16 = (*_12);
        _17 = (*_13);
        _15 = Eq(move _16, move _17);
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb5, otherwise: bb4];
    }

    bb17: {
        _5 = &mut (*_37);
        _6 = &mut ((*_5).0: std::boxed::Box<isize>);
        _7 = &mut ((*_5).1: std::boxed::Box<isize>);
        _35 = deref_copy (*_6);
        _38 = (((_35.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize);
        _46 = _38 as *const () (PtrToPtr);
        _47 = _46 as usize (Transmute);
        _48 = AlignOf(isize);
        _49 = Sub(_48, const 1_usize);
        _50 = BitAnd(_47, _49);
        _51 = Eq(_50, const 0_usize);
        assert(_51, "misaligned pointer dereference: address must be a multiple of {} but is {}", _48, _47) -> [success: bb16, unwind unreachable];
    }
}
