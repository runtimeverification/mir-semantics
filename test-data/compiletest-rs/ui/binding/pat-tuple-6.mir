// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn tuple() -> () {
    let mut _0: ();
    let _1: (i32, i32, i32, i32, i32);
    let mut _5: (&i32, &i32);
    let mut _6: &i32;
    let mut _7: &i32;
    let _8: i32;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: i32;
    let mut _14: i32;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: (&i32, &i32);
    let mut _19: &i32;
    let mut _20: &i32;
    let _21: i32;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: i32;
    let mut _27: i32;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&i32, &i32);
    let mut _32: &i32;
    let mut _33: &i32;
    let _34: i32;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: i32;
    let mut _40: i32;
    let _42: !;
    let mut _43: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _48: (&i32, &i32);
    let mut _49: &i32;
    let mut _50: &i32;
    let _51: i32;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: i32;
    let mut _57: i32;
    let _59: !;
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _61: (&i32, &i32);
    let mut _62: &i32;
    let mut _63: &i32;
    let _64: i32;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: i32;
    let mut _70: i32;
    let _72: !;
    let mut _73: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _74: (&i32, &i32);
    let mut _75: &i32;
    let mut _76: &i32;
    let _77: i32;
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: i32;
    let mut _83: i32;
    let _85: !;
    let mut _86: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _87: (&i32, &i32);
    let mut _88: &i32;
    let mut _89: &i32;
    let _90: i32;
    let mut _93: bool;
    let mut _94: bool;
    let mut _95: i32;
    let mut _96: i32;
    let _98: !;
    let mut _99: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _2: i32;
        let _3: i32;
        let _4: i32;
        let _44: i32;
        let _45: i32;
        let _46: i32;
        let _47: i32;
        scope 2 {
            debug a => _2;
            debug b => _3;
            debug c => _4;
            let _9: &i32;
            let _10: &i32;
            let _22: &i32;
            let _23: &i32;
            let _35: &i32;
            let _36: &i32;
            scope 3 {
                debug left_val => _9;
                debug right_val => _10;
                let _15: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _15;
                }
            }
            scope 5 {
                debug left_val => _22;
                debug right_val => _23;
                let _28: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _28;
                }
            }
            scope 7 {
                debug left_val => _35;
                debug right_val => _36;
                let _41: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _41;
                }
            }
        }
        scope 9 {
            debug a => _44;
            debug b => _45;
            debug c => _46;
            debug d => _47;
            let _52: &i32;
            let _53: &i32;
            let _65: &i32;
            let _66: &i32;
            let _78: &i32;
            let _79: &i32;
            let _91: &i32;
            let _92: &i32;
            scope 10 {
                debug left_val => _52;
                debug right_val => _53;
                let _58: core::panicking::AssertKind;
                scope 11 {
                    debug kind => _58;
                }
            }
            scope 12 {
                debug left_val => _65;
                debug right_val => _66;
                let _71: core::panicking::AssertKind;
                scope 13 {
                    debug kind => _71;
                }
            }
            scope 14 {
                debug left_val => _78;
                debug right_val => _79;
                let _84: core::panicking::AssertKind;
                scope 15 {
                    debug kind => _84;
                }
            }
            scope 16 {
                debug left_val => _91;
                debug right_val => _92;
                let _97: core::panicking::AssertKind;
                scope 17 {
                    debug kind => _97;
                }
            }
        }
    }

    bb0: {
        _1 = (const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32);
        _2 = (_1.0: i32);
        _3 = (_1.3: i32);
        _4 = (_1.4: i32);
        _6 = &_2;
        _8 = const 1_i32;
        _7 = &_8;
        _5 = (move _6, move _7);
        _9 = (_5.0: &i32);
        _10 = (_5.1: &i32);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<i32, i32>(move _15, _9, _10, move _17);
    }

    bb2: {
        _19 = &_3;
        _21 = const 4_i32;
        _20 = &_21;
        _18 = (move _19, move _20);
        _22 = (_18.0: &i32);
        _23 = (_18.1: &i32);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<i32, i32>(move _28, _22, _23, move _30);
    }

    bb4: {
        _32 = &_4;
        _34 = const 5_i32;
        _33 = &_34;
        _31 = (move _32, move _33);
        _35 = (_31.0: &i32);
        _36 = (_31.1: &i32);
        _39 = (*_35);
        _40 = (*_36);
        _38 = Eq(move _39, move _40);
        _37 = Not(move _38);
        switchInt(move _37) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _41 = core::panicking::AssertKind::Eq;
        _43 = Option::<Arguments<'_>>::None;
        _42 = core::panicking::assert_failed::<i32, i32>(move _41, _35, _36, move _43);
    }

    bb6: {
        _44 = (_1.0: i32);
        _45 = (_1.1: i32);
        _46 = (_1.2: i32);
        _47 = (_1.4: i32);
        _49 = &_44;
        _51 = const 1_i32;
        _50 = &_51;
        _48 = (move _49, move _50);
        _52 = (_48.0: &i32);
        _53 = (_48.1: &i32);
        _56 = (*_52);
        _57 = (*_53);
        _55 = Eq(move _56, move _57);
        _54 = Not(move _55);
        switchInt(move _54) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _58 = core::panicking::AssertKind::Eq;
        _60 = Option::<Arguments<'_>>::None;
        _59 = core::panicking::assert_failed::<i32, i32>(move _58, _52, _53, move _60);
    }

    bb8: {
        _62 = &_45;
        _64 = const 2_i32;
        _63 = &_64;
        _61 = (move _62, move _63);
        _65 = (_61.0: &i32);
        _66 = (_61.1: &i32);
        _69 = (*_65);
        _70 = (*_66);
        _68 = Eq(move _69, move _70);
        _67 = Not(move _68);
        switchInt(move _67) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _71 = core::panicking::AssertKind::Eq;
        _73 = Option::<Arguments<'_>>::None;
        _72 = core::panicking::assert_failed::<i32, i32>(move _71, _65, _66, move _73);
    }

    bb10: {
        _75 = &_46;
        _77 = const 3_i32;
        _76 = &_77;
        _74 = (move _75, move _76);
        _78 = (_74.0: &i32);
        _79 = (_74.1: &i32);
        _82 = (*_78);
        _83 = (*_79);
        _81 = Eq(move _82, move _83);
        _80 = Not(move _81);
        switchInt(move _80) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _84 = core::panicking::AssertKind::Eq;
        _86 = Option::<Arguments<'_>>::None;
        _85 = core::panicking::assert_failed::<i32, i32>(move _84, _78, _79, move _86);
    }

    bb12: {
        _88 = &_47;
        _90 = const 5_i32;
        _89 = &_90;
        _87 = (move _88, move _89);
        _91 = (_87.0: &i32);
        _92 = (_87.1: &i32);
        _95 = (*_91);
        _96 = (*_92);
        _94 = Eq(move _95, move _96);
        _93 = Not(move _94);
        switchInt(move _93) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _97 = core::panicking::AssertKind::Eq;
        _99 = Option::<Arguments<'_>>::None;
        _98 = core::panicking::assert_failed::<i32, i32>(move _97, _91, _92, move _99);
    }

    bb14: {
        return;
    }
}

fn tuple_struct() -> () {
    let mut _0: ();
    let _1: tuple_struct::S;
    let mut _5: (&u8, &u8);
    let mut _6: &u8;
    let mut _7: &u8;
    let _8: u8;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: u8;
    let mut _14: u8;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: (&u8, &u8);
    let mut _19: &u8;
    let mut _20: &u8;
    let _21: u8;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: u8;
    let mut _27: u8;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&u8, &u8);
    let mut _32: &u8;
    let mut _33: &u8;
    let _34: u8;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: u8;
    let mut _40: u8;
    let _42: !;
    let mut _43: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _48: (&u8, &u8);
    let mut _49: &u8;
    let mut _50: &u8;
    let _51: u8;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: u8;
    let mut _57: u8;
    let _59: !;
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _61: (&u8, &u8);
    let mut _62: &u8;
    let mut _63: &u8;
    let _64: u8;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: u8;
    let mut _70: u8;
    let _72: !;
    let mut _73: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _74: (&u8, &u8);
    let mut _75: &u8;
    let mut _76: &u8;
    let _77: u8;
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: u8;
    let mut _83: u8;
    let _85: !;
    let mut _86: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _87: (&u8, &u8);
    let mut _88: &u8;
    let mut _89: &u8;
    let _90: u8;
    let mut _93: bool;
    let mut _94: bool;
    let mut _95: u8;
    let mut _96: u8;
    let _98: !;
    let mut _99: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _2: u8;
        let _3: u8;
        let _4: u8;
        let _44: u8;
        let _45: u8;
        let _46: u8;
        let _47: u8;
        scope 2 {
            debug a => _2;
            debug b => _3;
            debug c => _4;
            let _9: &u8;
            let _10: &u8;
            let _22: &u8;
            let _23: &u8;
            let _35: &u8;
            let _36: &u8;
            scope 3 {
                debug left_val => _9;
                debug right_val => _10;
                let _15: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _15;
                }
            }
            scope 5 {
                debug left_val => _22;
                debug right_val => _23;
                let _28: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _28;
                }
            }
            scope 7 {
                debug left_val => _35;
                debug right_val => _36;
                let _41: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _41;
                }
            }
        }
        scope 9 {
            debug a => _44;
            debug b => _45;
            debug c => _46;
            debug d => _47;
            let _52: &u8;
            let _53: &u8;
            let _65: &u8;
            let _66: &u8;
            let _78: &u8;
            let _79: &u8;
            let _91: &u8;
            let _92: &u8;
            scope 10 {
                debug left_val => _52;
                debug right_val => _53;
                let _58: core::panicking::AssertKind;
                scope 11 {
                    debug kind => _58;
                }
            }
            scope 12 {
                debug left_val => _65;
                debug right_val => _66;
                let _71: core::panicking::AssertKind;
                scope 13 {
                    debug kind => _71;
                }
            }
            scope 14 {
                debug left_val => _78;
                debug right_val => _79;
                let _84: core::panicking::AssertKind;
                scope 15 {
                    debug kind => _84;
                }
            }
            scope 16 {
                debug left_val => _91;
                debug right_val => _92;
                let _97: core::panicking::AssertKind;
                scope 17 {
                    debug kind => _97;
                }
            }
        }
    }

    bb0: {
        _1 = S(const 1_u8, const 2_u8, const 3_u8, const 4_u8, const 5_u8);
        _2 = (_1.0: u8);
        _3 = (_1.3: u8);
        _4 = (_1.4: u8);
        _6 = &_2;
        _8 = const 1_u8;
        _7 = &_8;
        _5 = (move _6, move _7);
        _9 = (_5.0: &u8);
        _10 = (_5.1: &u8);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<u8, u8>(move _15, _9, _10, move _17);
    }

    bb2: {
        _19 = &_3;
        _21 = const 4_u8;
        _20 = &_21;
        _18 = (move _19, move _20);
        _22 = (_18.0: &u8);
        _23 = (_18.1: &u8);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<u8, u8>(move _28, _22, _23, move _30);
    }

    bb4: {
        _32 = &_4;
        _34 = const 5_u8;
        _33 = &_34;
        _31 = (move _32, move _33);
        _35 = (_31.0: &u8);
        _36 = (_31.1: &u8);
        _39 = (*_35);
        _40 = (*_36);
        _38 = Eq(move _39, move _40);
        _37 = Not(move _38);
        switchInt(move _37) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _41 = core::panicking::AssertKind::Eq;
        _43 = Option::<Arguments<'_>>::None;
        _42 = core::panicking::assert_failed::<u8, u8>(move _41, _35, _36, move _43);
    }

    bb6: {
        _44 = (_1.0: u8);
        _45 = (_1.1: u8);
        _46 = (_1.2: u8);
        _47 = (_1.4: u8);
        _49 = &_44;
        _51 = const 1_u8;
        _50 = &_51;
        _48 = (move _49, move _50);
        _52 = (_48.0: &u8);
        _53 = (_48.1: &u8);
        _56 = (*_52);
        _57 = (*_53);
        _55 = Eq(move _56, move _57);
        _54 = Not(move _55);
        switchInt(move _54) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _58 = core::panicking::AssertKind::Eq;
        _60 = Option::<Arguments<'_>>::None;
        _59 = core::panicking::assert_failed::<u8, u8>(move _58, _52, _53, move _60);
    }

    bb8: {
        _62 = &_45;
        _64 = const 2_u8;
        _63 = &_64;
        _61 = (move _62, move _63);
        _65 = (_61.0: &u8);
        _66 = (_61.1: &u8);
        _69 = (*_65);
        _70 = (*_66);
        _68 = Eq(move _69, move _70);
        _67 = Not(move _68);
        switchInt(move _67) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _71 = core::panicking::AssertKind::Eq;
        _73 = Option::<Arguments<'_>>::None;
        _72 = core::panicking::assert_failed::<u8, u8>(move _71, _65, _66, move _73);
    }

    bb10: {
        _75 = &_46;
        _77 = const 3_u8;
        _76 = &_77;
        _74 = (move _75, move _76);
        _78 = (_74.0: &u8);
        _79 = (_74.1: &u8);
        _82 = (*_78);
        _83 = (*_79);
        _81 = Eq(move _82, move _83);
        _80 = Not(move _81);
        switchInt(move _80) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _84 = core::panicking::AssertKind::Eq;
        _86 = Option::<Arguments<'_>>::None;
        _85 = core::panicking::assert_failed::<u8, u8>(move _84, _78, _79, move _86);
    }

    bb12: {
        _88 = &_47;
        _90 = const 5_u8;
        _89 = &_90;
        _87 = (move _88, move _89);
        _91 = (_87.0: &u8);
        _92 = (_87.1: &u8);
        _95 = (*_91);
        _96 = (*_92);
        _94 = Eq(move _95, move _96);
        _93 = Not(move _94);
        switchInt(move _93) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _97 = core::panicking::AssertKind::Eq;
        _99 = Option::<Arguments<'_>>::None;
        _98 = core::panicking::assert_failed::<u8, u8>(move _97, _91, _92, move _99);
    }

    bb14: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();

    bb0: {
        _1 = tuple() -> bb1;
    }

    bb1: {
        _2 = tuple_struct() -> bb2;
    }

    bb2: {
        return;
    }
}

fn S(_1: u8, _2: u8, _3: u8, _4: u8, _5: u8) -> S {
    let mut _0: tuple_struct::S;

    bb0: {
        _0 = S(move _1, move _2, move _3, move _4, move _5);
        return;
    }
}

// MIR FOR CTFE
fn S(_1: u8, _2: u8, _3: u8, _4: u8, _5: u8) -> S {
    let mut _0: tuple_struct::S;

    bb0: {
        _0 = S(move _1, move _2, move _3, move _4, move _5);
        return;
    }
}
