// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: usize) -> () {
    debug src => _1;
    let mut _0: ();
    let mut _2: std::option::Option<usize>;
    let mut _3: isize;
    let _4: usize;
    let mut _5: std::ops::Range<usize>;
    let mut _6: std::ops::Range<usize>;
    let mut _8: std::option::Option<usize>;
    let mut _9: &mut std::ops::Range<usize>;
    let mut _10: isize;
    let mut _13: (&usize, &usize);
    let mut _14: &usize;
    let mut _15: &usize;
    let _16: usize;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: usize;
    let mut _22: usize;
    let _24: !;
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug src_id => _4;
        let mut _7: std::ops::Range<usize>;
        scope 2 {
            debug iter => _7;
            let _11: usize;
            scope 3 {
                debug _i => _11;
                let _12: usize;
                scope 4 {
                    debug yyy => _12;
                    let _17: &usize;
                    let _18: &usize;
                    scope 5 {
                        debug left_val => _17;
                        debug right_val => _18;
                        let _23: core::panicking::AssertKind;
                        scope 6 {
                            debug kind => _23;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = Option::<usize>::Some(_1);
        _3 = discriminant(_2);
        switchInt(move _3) -> [1: bb1, otherwise: bb8];
    }

    bb1: {
        _4 = ((_2 as Some).0: usize);
        _6 = std::ops::Range::<usize> { start: const 0_usize, end: const 10_usize };
        _5 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _6) -> bb2;
    }

    bb2: {
        _7 = move _5;
        goto -> bb3;
    }

    bb3: {
        _9 = &mut _7;
        _8 = <std::ops::Range<usize> as Iterator>::next(_9) -> bb4;
    }

    bb4: {
        _10 = discriminant(_8);
        switchInt(move _10) -> [0: bb8, 1: bb5, otherwise: bb6];
    }

    bb5: {
        _11 = ((_8 as Some).0: usize);
        _12 = _4;
        _14 = &_12;
        _16 = const 0_usize;
        _15 = &_16;
        _13 = (move _14, move _15);
        _17 = (_13.0: &usize);
        _18 = (_13.1: &usize);
        _21 = (*_17);
        _22 = (*_18);
        _20 = Eq(move _21, move _22);
        _19 = Not(move _20);
        switchInt(move _19) -> [0: bb3, otherwise: bb7];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _23 = core::panicking::AssertKind::Eq;
        _25 = Option::<Arguments<'_>>::None;
        _24 = core::panicking::assert_failed::<usize, usize>(move _23, _17, _18, move _25);
    }

    bb8: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();

    bb0: {
        _1 = foo(const 0_usize) -> bb1;
    }

    bb1: {
        return;
    }
}
