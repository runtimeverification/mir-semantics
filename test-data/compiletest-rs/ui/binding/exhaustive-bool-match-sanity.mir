// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: bool, _2: bool) -> u32 {
    debug x => _1;
    debug y => _2;
    let mut _0: u32;
    let mut _3: (bool, bool);

    bb0: {
        _3 = (_1, _2);
        switchInt((_3.0: bool)) -> [0: bb5, otherwise: bb1];
    }

    bb1: {
        switchInt((_3.1: bool)) -> [0: bb6, otherwise: bb2];
    }

    bb2: {
        switchInt((_3.0: bool)) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _0 = const 2_u32;
        goto -> bb7;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _0 = const 0_u32;
        goto -> bb7;
    }

    bb6: {
        _0 = const 1_u32;
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&u32, &u32);
    let mut _2: &u32;
    let _3: u32;
    let mut _4: &u32;
    let _5: u32;
    let _6: &u32;
    let _7: &u32;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: u32;
    let mut _11: u32;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&u32, &u32);
    let mut _16: &u32;
    let _17: u32;
    let mut _18: &u32;
    let _19: u32;
    let _20: &u32;
    let _21: &u32;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: u32;
    let mut _25: u32;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: (&u32, &u32);
    let mut _30: &u32;
    let _31: u32;
    let mut _32: &u32;
    let _33: u32;
    let _34: &u32;
    let _35: &u32;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: u32;
    let mut _39: u32;
    let _41: !;
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _43: (&u32, &u32);
    let mut _44: &u32;
    let _45: u32;
    let mut _46: &u32;
    let _47: u32;
    let _48: &u32;
    let _49: &u32;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: u32;
    let mut _53: u32;
    let _55: !;
    let mut _56: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }
    scope 3 {
        debug left_val => _20;
        debug right_val => _21;
        let _26: core::panicking::AssertKind;
        scope 4 {
            debug kind => _26;
        }
    }
    scope 5 {
        debug left_val => _34;
        debug right_val => _35;
        let _40: core::panicking::AssertKind;
        scope 6 {
            debug kind => _40;
        }
    }
    scope 7 {
        debug left_val => _48;
        debug right_val => _49;
        let _54: core::panicking::AssertKind;
        scope 8 {
            debug kind => _54;
        }
    }

    bb0: {
        _3 = foo(const false, const true) -> bb1;
    }

    bb1: {
        _2 = &_3;
        _5 = const 0_u32;
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &u32);
        _7 = (_1.1: &u32);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<u32, u32>(move _12, _6, _7, move _14);
    }

    bb3: {
        _17 = foo(const false, const false) -> bb4;
    }

    bb4: {
        _16 = &_17;
        _19 = const 0_u32;
        _18 = &_19;
        _15 = (move _16, move _18);
        _20 = (_15.0: &u32);
        _21 = (_15.1: &u32);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<u32, u32>(move _26, _20, _21, move _28);
    }

    bb6: {
        _31 = foo(const true, const false) -> bb7;
    }

    bb7: {
        _30 = &_31;
        _33 = const 1_u32;
        _32 = &_33;
        _29 = (move _30, move _32);
        _34 = (_29.0: &u32);
        _35 = (_29.1: &u32);
        _38 = (*_34);
        _39 = (*_35);
        _37 = Eq(move _38, move _39);
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _40 = core::panicking::AssertKind::Eq;
        _42 = Option::<Arguments<'_>>::None;
        _41 = core::panicking::assert_failed::<u32, u32>(move _40, _34, _35, move _42);
    }

    bb9: {
        _45 = foo(const true, const true) -> bb10;
    }

    bb10: {
        _44 = &_45;
        _47 = const 2_u32;
        _46 = &_47;
        _43 = (move _44, move _46);
        _48 = (_43.0: &u32);
        _49 = (_43.1: &u32);
        _52 = (*_48);
        _53 = (*_49);
        _51 = Eq(move _52, move _53);
        _50 = Not(move _51);
        switchInt(move _50) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _54 = core::panicking::AssertKind::Eq;
        _56 = Option::<Arguments<'_>>::None;
        _55 = core::panicking::assert_failed::<u32, u32>(move _54, _48, _49, move _56);
    }

    bb12: {
        return;
    }
}
