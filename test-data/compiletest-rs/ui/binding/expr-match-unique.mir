// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test_box() -> () {
    let mut _0: ();
    let _1: std::boxed::Box<i32>;
    let mut _2: bool;
    let mut _3: !;
    let mut _4: (&i32, &i32);
    let mut _5: &i32;
    let mut _6: &i32;
    let _7: i32;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: i32;
    let mut _13: i32;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: *const i32;
    scope 1 {
        debug res => _1;
        let _8: &i32;
        let _9: &i32;
        let mut _18: *const ();
        let mut _19: usize;
        let mut _20: usize;
        let mut _21: usize;
        let mut _22: usize;
        let mut _23: bool;
        scope 2 {
            debug left_val => _8;
            debug right_val => _9;
            let _14: core::panicking::AssertKind;
            scope 3 {
                debug kind => _14;
            }
        }
    }

    bb0: {
        _2 = const true;
        switchInt(_2) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _3 = begin_panic::<&str>(const "explicit panic");
    }

    bb2: {
        _1 = Box::<i32>::new(const 100_i32) -> bb3;
    }

    bb3: {
        _17 = (((_1.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32);
        _18 = _17 as *const () (PtrToPtr);
        _19 = _18 as usize (Transmute);
        _20 = AlignOf(i32);
        _21 = Sub(_20, const 1_usize);
        _22 = BitAnd(_19, _21);
        _23 = Eq(_22, const 0_usize);
        assert(_23, "misaligned pointer dereference: address must be a multiple of {} but is {}", _20, _19) -> [success: bb9, unwind unreachable];
    }

    bb4: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<i32, i32>(move _14, _8, _9, move _16) -> bb7;
    }

    bb5: {
        drop(_1) -> bb6;
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_1) -> [return: bb8, unwind terminate];
    }

    bb8 (cleanup): {
        resume;
    }

    bb9: {
        _5 = &(*_17);
        _7 = const 100_i32;
        _6 = &_7;
        _4 = (move _5, move _6);
        _8 = (_4.0: &i32);
        _9 = (_4.1: &i32);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb5, otherwise: bb4];
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();

    bb0: {
        _1 = test_box() -> bb1;
    }

    bb1: {
        return;
    }
}
