// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: usize;
    let mut _2: bool;
    let mut _3: bool;
    let _4: !;
    let mut _5: usize;
    let mut _6: bool;
    let mut _7: bool;
    let _8: !;
    let mut _9: usize;
    let mut _10: bool;
    let mut _11: bool;
    let _12: !;
    let mut _13: usize;
    let mut _14: bool;
    let mut _15: bool;
    let _16: !;
    let mut _17: usize;
    let mut _18: bool;
    let mut _19: bool;
    let _20: !;
    let _21: !;
    let mut _22: char;
    let mut _23: bool;
    let mut _24: bool;
    let _25: !;
    let mut _26: i32;
    let mut _27: bool;
    let mut _28: bool;
    let _29: !;
    let mut _30: f64;
    let mut _31: bool;
    let mut _32: bool;
    let _33: !;
    let mut _34: f64;
    let mut _35: bool;
    let mut _36: bool;
    let _37: !;
    let mut _38: f64;
    let mut _39: bool;
    let mut _40: bool;
    let _41: !;
    let mut _42: f64;
    let mut _43: bool;
    let mut _44: bool;
    let _45: !;

    bb0: {
        _1 = const 5_usize;
        _2 = Le(const 1_usize, _1);
        switchInt(move _2) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _3 = Le(_1, const 5_usize);
        switchInt(move _3) -> [0: bb2, otherwise: bb3];
    }

    bb2: {
        _4 = begin_panic::<&str>(const "should match range");
    }

    bb3: {
        _5 = const 1_usize;
        _6 = Le(const 1_usize, _5);
        switchInt(move _6) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _7 = Lt(_5, const 5_usize);
        switchInt(move _7) -> [0: bb5, otherwise: bb6];
    }

    bb5: {
        _8 = begin_panic::<&str>(const "should match range start");
    }

    bb6: {
        _9 = const 5_usize;
        _10 = Le(const 6_usize, _9);
        switchInt(move _10) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _11 = Le(_9, const 7_usize);
        switchInt(move _11) -> [0: bb8, otherwise: bb9];
    }

    bb8: {
        _13 = const 7_usize;
        _14 = Le(const 6_usize, _13);
        switchInt(move _14) -> [0: bb11, otherwise: bb10];
    }

    bb9: {
        _12 = begin_panic::<&str>(const "shouldn't match range");
    }

    bb10: {
        _15 = Lt(_13, const 7_usize);
        switchInt(move _15) -> [0: bb11, otherwise: bb12];
    }

    bb11: {
        _17 = const 5_usize;
        switchInt(_17) -> [1: bb16, otherwise: bb13];
    }

    bb12: {
        _16 = begin_panic::<&str>(const "shouldn't match range end");
    }

    bb13: {
        _18 = Le(const 2_usize, _17);
        switchInt(move _18) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _19 = Le(_17, const 6_usize);
        switchInt(move _19) -> [0: bb15, otherwise: bb17];
    }

    bb15: {
        _21 = begin_panic::<&str>(const "math is broken");
    }

    bb16: {
        _20 = begin_panic::<&str>(const "should match non-first range");
    }

    bb17: {
        _22 = const 'c';
        _23 = Le(const 'a', _22);
        switchInt(move _23) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _24 = Le(_22, const 'z');
        switchInt(move _24) -> [0: bb19, otherwise: bb20];
    }

    bb19: {
        _25 = begin_panic::<&str>(const "should support char ranges");
    }

    bb20: {
        _26 = const -3_i32;
        _27 = Le(const -7_i32, _26);
        switchInt(move _27) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _28 = Le(_26, const 5_i32);
        switchInt(move _28) -> [0: bb22, otherwise: bb23];
    }

    bb22: {
        _29 = begin_panic::<&str>(const "should match signed range");
    }

    bb23: {
        _30 = const 3f64;
        _31 = Le(const 1f64, _30);
        switchInt(move _31) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _32 = Le(_30, const 5f64);
        switchInt(move _32) -> [0: bb25, otherwise: bb26];
    }

    bb25: {
        _33 = begin_panic::<&str>(const "should match float range");
    }

    bb26: {
        _34 = const -1.5f64;
        _35 = Le(const -3.6000000000000001f64, _34);
        switchInt(move _35) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _36 = Le(_34, const 3.6000000000000001f64);
        switchInt(move _36) -> [0: bb28, otherwise: bb29];
    }

    bb28: {
        _37 = begin_panic::<&str>(const "should match negative float range");
    }

    bb29: {
        _38 = const 3.5f64;
        _39 = Le(const 0f64, _38);
        switchInt(move _39) -> [0: bb31, otherwise: bb30];
    }

    bb30: {
        _40 = Lt(_38, const 3.5f64);
        switchInt(move _40) -> [0: bb31, otherwise: bb32];
    }

    bb31: {
        _42 = const 0f64;
        _43 = Le(const 0f64, _42);
        switchInt(move _43) -> [0: bb34, otherwise: bb33];
    }

    bb32: {
        _41 = begin_panic::<&str>(const "should not match the range end");
    }

    bb33: {
        _44 = Lt(_42, const 3.5f64);
        switchInt(move _44) -> [0: bb34, otherwise: bb35];
    }

    bb34: {
        _45 = begin_panic::<&str>(const "should match the range start");
    }

    bb35: {
        return;
    }
}
