// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn or_alt(_1: blah) -> isize {
    debug q => _1;
    let mut _0: isize;
    let mut _2: isize;
    let _3: isize;
    let _4: isize;
    let mut _5: isize;
    let mut _6: isize;
    scope 1 {
        debug x => _3;
        debug y => _4;
    }

    bb0: {
        _2 = discriminant(_1);
        switchInt(move _2) -> [0: bb4, 1: bb5, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const 0_isize;
        goto -> bb6;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = _3;
        _6 = _4;
        _0 = Add(move _5, move _6);
        goto -> bb6;
    }

    bb4: {
        _3 = ((_1 as a).0: isize);
        _4 = ((_1 as a).1: isize);
        goto -> bb3;
    }

    bb5: {
        _3 = ((_1 as b).0: isize);
        _4 = ((_1 as b).1: isize);
        goto -> bb3;
    }

    bb6: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&isize, &isize);
    let mut _2: &isize;
    let _3: isize;
    let mut _4: blah;
    let mut _5: &isize;
    let _6: isize;
    let _7: &isize;
    let _8: &isize;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: isize;
    let mut _12: isize;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&isize, &isize);
    let mut _17: &isize;
    let _18: isize;
    let mut _19: blah;
    let mut _20: &isize;
    let _21: isize;
    let _22: &isize;
    let _23: &isize;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: isize;
    let mut _27: isize;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&isize, &isize);
    let mut _32: &isize;
    let _33: isize;
    let mut _34: blah;
    let mut _35: &isize;
    let _36: isize;
    let _37: &isize;
    let _38: &isize;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: isize;
    let mut _42: isize;
    let _44: !;
    let mut _45: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _7;
        debug right_val => _8;
        let _13: core::panicking::AssertKind;
        scope 2 {
            debug kind => _13;
        }
    }
    scope 3 {
        debug left_val => _22;
        debug right_val => _23;
        let _28: core::panicking::AssertKind;
        scope 4 {
            debug kind => _28;
        }
    }
    scope 5 {
        debug left_val => _37;
        debug right_val => _38;
        let _43: core::panicking::AssertKind;
        scope 6 {
            debug kind => _43;
        }
    }

    bb0: {
        _4 = blah::c;
        _3 = or_alt(move _4) -> bb1;
    }

    bb1: {
        _2 = &_3;
        _6 = const 0_isize;
        _5 = &_6;
        _1 = (move _2, move _5);
        _7 = (_1.0: &isize);
        _8 = (_1.1: &isize);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<isize, isize>(move _13, _7, _8, move _15);
    }

    bb3: {
        _19 = blah::a(const 10_isize, const 100_isize, const 0_usize);
        _18 = or_alt(move _19) -> bb4;
    }

    bb4: {
        _17 = &_18;
        _21 = const 110_isize;
        _20 = &_21;
        _16 = (move _17, move _20);
        _22 = (_16.0: &isize);
        _23 = (_16.1: &isize);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<isize, isize>(move _28, _22, _23, move _30);
    }

    bb6: {
        _34 = blah::b(const 20_isize, const 200_isize);
        _33 = or_alt(move _34) -> bb7;
    }

    bb7: {
        _32 = &_33;
        _36 = const 220_isize;
        _35 = &_36;
        _31 = (move _32, move _35);
        _37 = (_31.0: &isize);
        _38 = (_31.1: &isize);
        _41 = (*_37);
        _42 = (*_38);
        _40 = Eq(move _41, move _42);
        _39 = Not(move _40);
        switchInt(move _39) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _43 = core::panicking::AssertKind::Eq;
        _45 = Option::<Arguments<'_>>::None;
        _44 = core::panicking::assert_failed::<isize, isize>(move _43, _37, _38, move _45);
    }

    bb9: {
        return;
    }
}

fn blah::a(_1: isize, _2: isize, _3: usize) -> blah {
    let mut _0: blah;

    bb0: {
        _0 = blah::a(move _1, move _2, move _3);
        return;
    }
}

// MIR FOR CTFE
fn blah::a(_1: isize, _2: isize, _3: usize) -> blah {
    let mut _0: blah;

    bb0: {
        _0 = blah::a(move _1, move _2, move _3);
        return;
    }
}

fn blah::b(_1: isize, _2: isize) -> blah {
    let mut _0: blah;

    bb0: {
        _0 = blah::b(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn blah::b(_1: isize, _2: isize) -> blah {
    let mut _0: blah;

    bb0: {
        _0 = blah::b(move _1, move _2);
        return;
    }
}
