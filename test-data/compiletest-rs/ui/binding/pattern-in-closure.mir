// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: [closure@ui/binding/pattern-in-closure.rs:10:13: 10:37];
    let _3: ();
    let mut _4: &[closure@ui/binding/pattern-in-closure.rs:10:13: 10:37];
    let mut _5: ((isize, isize),);
    let mut _6: (isize, isize);
    let _7: ();
    let mut _8: &[closure@ui/binding/pattern-in-closure.rs:11:13: 11:39];
    let mut _9: (Foo,);
    let mut _10: Foo;
    scope 1 {
        debug f => const ZeroSized: [closure@ui/binding/pattern-in-closure.rs:10:13: 10:37];
        let _2: [closure@ui/binding/pattern-in-closure.rs:11:13: 11:39];
        scope 2 {
            debug g => const ZeroSized: [closure@ui/binding/pattern-in-closure.rs:11:13: 11:39];
        }
    }

    bb0: {
        _4 = &_1;
        _6 = (const 2_isize, const 3_isize);
        _5 = (move _6,);
        _3 = <[closure@ui/binding/pattern-in-closure.rs:10:13: 10:37] as Fn<((isize, isize),)>>::call(move _4, move _5) -> bb1;
    }

    bb1: {
        _8 = &_2;
        _10 = Foo { x: const 1_isize, y: const 2_isize };
        _9 = (move _10,);
        _7 = <[closure@ui/binding/pattern-in-closure.rs:11:13: 11:39] as Fn<(Foo,)>>::call(move _8, move _9) -> bb2;
    }

    bb2: {
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/binding/pattern-in-closure.rs:10:13: 10:37], _2: (isize, isize)) -> () {
    let mut _0: ();
    let _3: isize;
    let _4: ();
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let _7: &[&str; 2];
    let _8: [&str; 2];
    let mut _9: &[core::fmt::rt::Argument<'_>];
    let _10: &[core::fmt::rt::Argument<'_>; 1];
    let _11: [core::fmt::rt::Argument<'_>; 1];
    let mut _12: core::fmt::rt::Argument<'_>;
    let _13: &isize;
    let _14: isize;
    scope 1 {
        debug x => _3;
    }

    bb0: {
        _3 = (_2.0: isize);
        _8 = [const "", const "\n"];
        _7 = &_8;
        _6 = _7 as &[&str] (Pointer(Unsize));
        _14 = Add(_3, const 1_isize);
        _13 = &_14;
        _12 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_13) -> bb1;
    }

    bb1: {
        _11 = [move _12];
        _10 = &_11;
        _9 = _10 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _5 = Arguments::<'_>::new_v1(move _6, move _9) -> bb2;
    }

    bb2: {
        _4 = _print(move _5) -> bb3;
    }

    bb3: {
        return;
    }
}

fn main::{closure#1}(_1: &[closure@ui/binding/pattern-in-closure.rs:11:13: 11:39], _2: Foo) -> () {
    let mut _0: ();
    let _3: isize;
    let _4: isize;
    let _5: ();
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str];
    let _8: &[&str; 2];
    let _9: [&str; 2];
    let mut _10: &[core::fmt::rt::Argument<'_>];
    let _11: &[core::fmt::rt::Argument<'_>; 1];
    let _12: [core::fmt::rt::Argument<'_>; 1];
    let mut _13: core::fmt::rt::Argument<'_>;
    let _14: &isize;
    let _15: isize;
    scope 1 {
        debug x => _3;
        debug _y => _4;
    }

    bb0: {
        _3 = (_2.0: isize);
        _4 = (_2.1: isize);
        _9 = [const "", const "\n"];
        _8 = &_9;
        _7 = _8 as &[&str] (Pointer(Unsize));
        _15 = Add(_3, const 1_isize);
        _14 = &_15;
        _13 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_14) -> bb1;
    }

    bb1: {
        _12 = [move _13];
        _11 = &_12;
        _10 = _11 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _6 = Arguments::<'_>::new_v1(move _7, move _10) -> bb2;
    }

    bb2: {
        _5 = _print(move _6) -> bb3;
    }

    bb3: {
        return;
    }
}
