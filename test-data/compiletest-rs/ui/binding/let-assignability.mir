// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f() -> () {
    let mut _0: ();
    let _1: std::boxed::Box<isize>;
    let _3: &isize;
    let _4: ();
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let _7: &[&str; 2];
    let _8: [&str; 2];
    let mut _9: &[core::fmt::rt::Argument<'_>];
    let _10: &[core::fmt::rt::Argument<'_>; 1];
    let _11: [core::fmt::rt::Argument<'_>; 1];
    let mut _12: core::fmt::rt::Argument<'_>;
    let _13: &&isize;
    let mut _14: *const isize;
    scope 1 {
        debug a => _1;
        let _2: &isize;
        let mut _15: *const ();
        let mut _16: usize;
        let mut _17: usize;
        let mut _18: usize;
        let mut _19: usize;
        let mut _20: bool;
        scope 2 {
            debug b => _2;
        }
    }

    bb0: {
        _1 = Box::<isize>::new(const 1_isize) -> bb1;
    }

    bb1: {
        _14 = (((_1.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize);
        _15 = _14 as *const () (PtrToPtr);
        _16 = _15 as usize (Transmute);
        _17 = AlignOf(isize);
        _18 = Sub(_17, const 1_usize);
        _19 = BitAnd(_16, _18);
        _20 = Eq(_19, const 0_usize);
        assert(_20, "misaligned pointer dereference: address must be a multiple of {} but is {}", _17, _16) -> [success: bb8, unwind unreachable];
    }

    bb2: {
        _11 = [move _12];
        _10 = &_11;
        _9 = _10 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _5 = Arguments::<'_>::new_v1(move _6, move _9) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _4 = _print(move _5) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_1) -> bb5;
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_1) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }

    bb8: {
        _3 = &(*_14);
        _2 = _3;
        _8 = [const "", const "\n"];
        _7 = &_8;
        _6 = _7 as &[&str] (Pointer(Unsize));
        _13 = &_2;
        _12 = core::fmt::rt::Argument::<'_>::new_display::<&isize>(_13) -> [return: bb2, unwind: bb6];
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();

    bb0: {
        _1 = f() -> bb1;
    }

    bb1: {
        return;
    }
}
