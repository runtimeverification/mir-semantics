// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let _4: &[&str; 2];
    let _5: [&str; 2];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &i32;
    let _11: i32;
    let mut _12: color;
    let mut _13: isize;

    bb0: {
        _5 = [const "", const "\n"];
        _4 = &_5;
        _3 = _4 as &[&str] (Pointer(Unsize));
        _12 = color::red;
        _13 = discriminant(_12);
        switchInt(move _13) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _11 = const 3_i32;
        goto -> bb5;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _11 = const 1_i32;
        goto -> bb5;
    }

    bb4: {
        _11 = const 2_i32;
        goto -> bb5;
    }

    bb5: {
        _10 = &_11;
        _9 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_10) -> bb6;
    }

    bb6: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_v1(move _3, move _6) -> bb7;
    }

    bb7: {
        _1 = _print(move _2) -> bb8;
    }

    bb8: {
        return;
    }
}
