// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: (isize, isize)) -> isize {
    let mut _0: isize;
    scope 1 {
        debug x => _0;
    }

    bb0: {
        _0 = (_1.0: isize);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&isize, &isize);
    let mut _2: &isize;
    let _3: isize;
    let mut _4: (isize, isize);
    let mut _5: &isize;
    let _6: isize;
    let _7: &isize;
    let _8: &isize;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: isize;
    let mut _12: isize;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _7;
        debug right_val => _8;
        let _13: core::panicking::AssertKind;
        scope 2 {
            debug kind => _13;
        }
    }

    bb0: {
        _4 = (const 22_isize, const 23_isize);
        _3 = foo(move _4) -> bb1;
    }

    bb1: {
        _2 = &_3;
        _6 = const 22_isize;
        _5 = &_6;
        _1 = (move _2, move _5);
        _7 = (_1.0: &isize);
        _8 = (_1.1: &isize);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<isize, isize>(move _13, _7, _8, move _15);
    }

    bb3: {
        return;
    }
}
