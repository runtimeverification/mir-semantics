// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::option::Option<i32>;
    let mut _2: isize;
    let mut _4: (&i32, &i32);
    let mut _5: &i32;
    let mut _6: &i32;
    let _7: i32;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: i32;
    let mut _13: i32;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let _17: !;
    let mut _19: isize;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: !;
    let mut _24: std::option::Option<&str>;
    let mut _25: isize;
    let mut _26: bool;
    let mut _27: std::result::Result<(), &str>;
    let mut _28: isize;
    let mut _29: (&usize, &usize);
    let mut _30: &usize;
    let mut _31: &usize;
    let _32: usize;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: usize;
    let mut _38: usize;
    let _40: !;
    let mut _41: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _42: bool;
    let _43: !;
    let mut _44: i32;
    let _45: !;
    let mut _47: std::string::String;
    let _48: &str;
    let mut _49: isize;
    let _50: !;
    let mut _51: isize;
    let _53: !;
    let mut _54: isize;
    let mut _56: (&std::string::String, &&str);
    let mut _57: &std::string::String;
    let mut _58: &&str;
    let _59: &str;
    let mut _62: bool;
    let mut _63: bool;
    let _65: !;
    let mut _66: std::option::Option<std::fmt::Arguments<'_>>;
    let _67: !;
    let mut _68: bool;
    let _69: !;
    let mut _70: main::Foo;
    let mut _71: isize;
    let mut _73: isize;
    let mut _75: (&usize, &usize);
    let mut _76: &usize;
    let mut _77: &usize;
    let _78: usize;
    let mut _81: bool;
    let mut _82: bool;
    let mut _83: usize;
    let mut _84: usize;
    let _86: !;
    let mut _87: std::option::Option<std::fmt::Arguments<'_>>;
    let _88: !;
    let mut _89: bool;
    let mut _90: bool;
    let mut _91: isize;
    scope 1 {
        debug x => _1;
        let mut _18: bool;
        scope 2 {
            debug y => _3;
            let _3: i32;
            let _8: &i32;
            let _9: &i32;
            scope 3 {
                debug left_val => _8;
                debug right_val => _9;
                let _14: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _14;
                }
            }
        }
        scope 5 {
            debug worked => _18;
            let _23: usize;
            scope 6 {
            }
            scope 7 {
                debug clause => _23;
                let _33: &usize;
                let _34: &usize;
                let _46: main::Foo;
                scope 8 {
                }
                scope 9 {
                }
                scope 10 {
                    debug left_val => _33;
                    debug right_val => _34;
                    let _39: core::panicking::AssertKind;
                    scope 11 {
                        debug kind => _39;
                    }
                }
                scope 12 {
                }
                scope 13 {
                    debug foo => _46;
                    scope 14 {
                    }
                    scope 15 {
                        debug _x => _52;
                        let _52: usize;
                    }
                    scope 16 {
                        debug s => _55;
                        let _55: std::string::String;
                        let _60: &std::string::String;
                        let _61: &&str;
                        scope 17 {
                            debug left_val => _60;
                            debug right_val => _61;
                            let _64: core::panicking::AssertKind;
                            scope 18 {
                                debug kind => _64;
                            }
                        }
                    }
                    scope 19 {
                        debug a => _72;
                        let _72: main::Foo;
                        scope 20 {
                            debug b => _74;
                            let _74: usize;
                            let _79: &usize;
                            let _80: &usize;
                            scope 21 {
                                debug left_val => _79;
                                debug right_val => _80;
                                let _85: core::panicking::AssertKind;
                                scope 22 {
                                    debug kind => _85;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _89 = const false;
        _90 = const false;
        _1 = Option::<i32>::Some(const 3_i32);
        _2 = discriminant(_1);
        switchInt(move _2) -> [1: bb1, otherwise: bb4];
    }

    bb1: {
        _3 = ((_1 as Some).0: i32);
        _5 = &_3;
        _7 = const 3_i32;
        _6 = &_7;
        _4 = (move _5, move _6);
        _8 = (_4.0: &i32);
        _9 = (_4.1: &i32);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<i32, i32>(move _14, _8, _9, move _16);
    }

    bb3: {
        _18 = const false;
        _19 = discriminant(_1);
        switchInt(move _19) -> [1: bb5, otherwise: bb6];
    }

    bb4: {
        _17 = begin_panic::<&str>(const "`if let` panicked");
    }

    bb5: {
        _18 = const true;
        goto -> bb6;
    }

    bb6: {
        _21 = _18;
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _22 = core::panicking::panic(const "assertion failed: worked");
    }

    bb8: {
        _24 = Option::<&str>::Some(const "test");
        _25 = discriminant(_24);
        switchInt(move _25) -> [0: bb9, otherwise: bb10];
    }

    bb9: {
        _23 = const 1_usize;
        goto -> bb15;
    }

    bb10: {
        _26 = Gt(const 4_usize, const 5_usize);
        switchInt(move _26) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _23 = const 2_usize;
        goto -> bb15;
    }

    bb12: {
        _27 = Result::<(), &str>::Err(const "test");
        _28 = discriminant(_27);
        switchInt(move _28) -> [0: bb13, otherwise: bb14];
    }

    bb13: {
        _23 = const 3_usize;
        goto -> bb15;
    }

    bb14: {
        _23 = const 4_usize;
        goto -> bb15;
    }

    bb15: {
        _30 = &_23;
        _32 = const 4_usize;
        _31 = &_32;
        _29 = (move _30, move _31);
        _33 = (_29.0: &usize);
        _34 = (_29.1: &usize);
        _37 = (*_33);
        _38 = (*_34);
        _36 = Eq(move _37, move _38);
        _35 = Not(move _36);
        switchInt(move _35) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _39 = core::panicking::AssertKind::Eq;
        _41 = Option::<Arguments<'_>>::None;
        _40 = core::panicking::assert_failed::<usize, usize>(move _39, _33, _34, move _41);
    }

    bb17: {
        _42 = Gt(const 3_i32, const 4_i32);
        switchInt(move _42) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _43 = begin_panic::<&str>(const "bad math");
    }

    bb19: {
        _44 = const 2_i32;
        switchInt(_44) -> [1: bb20, otherwise: bb21];
    }

    bb20: {
        _45 = begin_panic::<&str>(const "bad pattern match");
    }

    bb21: {
        _48 = const "three";
        _47 = <str as ToString>::to_string(_48) -> bb22;
    }

    bb22: {
        _90 = const true;
        _46 = Foo::Three(move _47, const 42_isize);
        _49 = discriminant(_46);
        switchInt(move _49) -> [0: bb23, otherwise: bb24];
    }

    bb23: {
        _50 = begin_panic::<&str>(const "bad pattern match") -> bb48;
    }

    bb24: {
        _51 = discriminant(_46);
        switchInt(move _51) -> [1: bb25, otherwise: bb26];
    }

    bb25: {
        _52 = ((_46 as Two).0: usize);
        _53 = begin_panic::<&str>(const "bad pattern match") -> bb48;
    }

    bb26: {
        _54 = discriminant(_46);
        switchInt(move _54) -> [2: bb27, otherwise: bb31];
    }

    bb27: {
        _90 = const false;
        _55 = move ((_46 as Three).0: std::string::String);
        _57 = &_55;
        _59 = const "three";
        _58 = &_59;
        _56 = (move _57, move _58);
        _60 = (_56.0: &std::string::String);
        _61 = (_56.1: &&str);
        _63 = <String as PartialEq<&str>>::eq(_60, _61) -> [return: bb28, unwind: bb42];
    }

    bb28: {
        _62 = Not(move _63);
        switchInt(move _62) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _64 = core::panicking::AssertKind::Eq;
        _66 = Option::<Arguments<'_>>::None;
        _65 = core::panicking::assert_failed::<String, &str>(move _64, _60, _61, move _66) -> bb42;
    }

    bb30: {
        drop(_55) -> [return: bb32, unwind: bb48];
    }

    bb31: {
        _67 = begin_panic::<&str>(const "bad else") -> bb48;
    }

    bb32: {
        _68 = const false;
        switchInt(move _68) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        _69 = begin_panic::<&str>(const "wat") -> bb48;
    }

    bb34: {
        _89 = const true;
        _70 = Foo::Two(const 42_usize);
        _71 = discriminant(_70);
        switchInt(move _71) -> [1: bb35, otherwise: bb45];
    }

    bb35: {
        _89 = const false;
        _72 = move _70;
        _73 = discriminant(_72);
        switchInt(move _73) -> [1: bb36, otherwise: bb39];
    }

    bb36: {
        _74 = ((_72 as Two).0: usize);
        _76 = &_74;
        _78 = const 42_usize;
        _77 = &_78;
        _75 = (move _76, move _77);
        _79 = (_75.0: &usize);
        _80 = (_75.1: &usize);
        _83 = (*_79);
        _84 = (*_80);
        _82 = Eq(move _83, move _84);
        _81 = Not(move _82);
        switchInt(move _81) -> [0: bb38, otherwise: bb37];
    }

    bb37: {
        _85 = core::panicking::AssertKind::Eq;
        _87 = Option::<Arguments<'_>>::None;
        _86 = core::panicking::assert_failed::<usize, usize>(move _85, _79, _80, move _87) -> bb41;
    }

    bb38: {
        drop(_72) -> [return: bb45, unwind: bb48];
    }

    bb39: {
        _88 = begin_panic::<&str>(const "panic in nested `if let`") -> bb41;
    }

    bb40: {
        _89 = const false;
        _90 = const false;
        return;
    }

    bb41 (cleanup): {
        drop(_72) -> [return: bb48, unwind terminate];
    }

    bb42 (cleanup): {
        drop(_55) -> [return: bb48, unwind terminate];
    }

    bb43 (cleanup): {
        resume;
    }

    bb44: {
        drop(_70) -> [return: bb40, unwind: bb48];
    }

    bb45: {
        switchInt(_89) -> [0: bb40, otherwise: bb44];
    }

    bb46 (cleanup): {
        switchInt(_90) -> [0: bb43, otherwise: bb47];
    }

    bb47 (cleanup): {
        drop(((_46 as Three).0: std::string::String)) -> [return: bb43, unwind terminate];
    }

    bb48 (cleanup): {
        _91 = discriminant(_46);
        switchInt(move _91) -> [2: bb46, otherwise: bb43];
    }
}

fn Foo::Two(_1: usize) -> Foo {
    let mut _0: main::Foo;

    bb0: {
        _0 = Foo::Two(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo::Two(_1: usize) -> Foo {
    let mut _0: main::Foo;

    bb0: {
        _0 = Foo::Two(move _1);
        return;
    }
}

fn Foo::Three(_1: String, _2: isize) -> Foo {
    let mut _0: main::Foo;

    bb0: {
        _0 = Foo::Three(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn Foo::Three(_1: String, _2: isize) -> Foo {
    let mut _0: main::Foo;

    bb0: {
        _0 = Foo::Three(move _1, move _2);
        return;
    }
}
