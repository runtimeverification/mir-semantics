// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: F) -> () {
    debug it => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: (isize,);

    bb0: {
        _3 = (const 10_isize,);
        _2 = <F as FnOnce<(isize,)>>::call_once(move _1, move _3) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: thing;
    let mut _3: isize;
    scope 1 {
        debug x => _1;
    }

    bb0: {
        _1 = const true;
        _2 = thing::a;
        _3 = discriminant(_2);
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _1 = const false;
        goto -> bb5;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _1 = const true;
        _0 = foo::<[closure@ui/binding/match-phi.rs:15:35: 15:39]>(const ZeroSized: [closure@ui/binding/match-phi.rs:15:35: 15:39]) -> bb5;
    }

    bb4: {
        _1 = const false;
        goto -> bb5;
    }

    bb5: {
        return;
    }
}

fn main::{closure#0}(_1: [closure@ui/binding/match-phi.rs:15:35: 15:39], _2: isize) -> () {
    debug _i => _2;
    let mut _0: ();

    bb0: {
        return;
    }
}
