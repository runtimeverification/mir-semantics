// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: std::slice::Iter<'_, Foo>;
    let mut _2: &[Foo; 5];
    let _3: [Foo; 5];
    let mut _4: Foo;
    let mut _5: Foo;
    let mut _6: Foo;
    let mut _7: Foo;
    let mut _8: Foo;
    let mut _9: std::slice::Iter<'_, Foo>;
    let mut _10: std::option::Option<&Foo>;
    let mut _11: &mut std::slice::Iter<'_, Foo>;
    let mut _12: isize;
    let mut _14: isize;
    let _15: ();
    let mut _16: std::fmt::Arguments<'_>;
    let mut _17: &[&str];
    let _18: &[&str; 1];
    let _19: [&str; 1];
    let mut _20: bool;
    let mut _21: bool;
    let _22: ();
    let mut _23: std::fmt::Arguments<'_>;
    let mut _24: &[&str];
    let _25: &[&str; 1];
    let _26: [&str; 1];
    scope 1 {
        debug iter => _9;
        let _13: &Foo;
        scope 2 {
            debug foo => _13;
        }
    }

    bb0: {
        _4 = Foo::A;
        _5 = Foo::B;
        _6 = Foo::C;
        _7 = Foo::D;
        _8 = Foo::E;
        _3 = [move _4, move _5, move _6, move _7, move _8];
        _2 = &_3;
        _1 = <&[Foo; 5] as IntoIterator>::into_iter(move _2) -> bb1;
    }

    bb1: {
        _9 = move _1;
        goto -> bb2;
    }

    bb2: {
        _11 = &mut _9;
        _10 = <std::slice::Iter<'_, Foo> as Iterator>::next(_11) -> bb3;
    }

    bb3: {
        _12 = discriminant(_10);
        switchInt(move _12) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        _13 = ((_10 as Some).0: &Foo);
        _14 = discriminant((*_13));
        switchInt(move _14) -> [0: bb7, 1: bb10, 2: bb11, otherwise: bb2];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        return;
    }

    bb7: {
        _19 = [const "A\n"];
        _18 = &_19;
        _17 = _18 as &[&str] (Pointer(Unsize));
        _16 = Arguments::<'_>::new_const(move _17) -> bb8;
    }

    bb8: {
        _15 = _print(move _16) -> bb2;
    }

    bb9: {
        _26 = [const "BC!\n"];
        _25 = &_26;
        _24 = _25 as &[&str] (Pointer(Unsize));
        _23 = Arguments::<'_>::new_const(move _24) -> bb12;
    }

    bb10: {
        _20 = Lt(const 1_i32, const 2_i32);
        switchInt(move _20) -> [0: bb2, otherwise: bb9];
    }

    bb11: {
        _21 = Lt(const 1_i32, const 2_i32);
        switchInt(move _21) -> [0: bb2, otherwise: bb9];
    }

    bb12: {
        _22 = _print(move _23) -> bb2;
    }
}
