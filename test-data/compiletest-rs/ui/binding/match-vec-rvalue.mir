// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: std::vec::Vec<i32>;
    let mut _2: std::boxed::Box<[i32]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[i32; 3]>;
    let _7: std::vec::Vec<i32>;
    let mut _8: (&usize, &usize);
    let mut _9: &usize;
    let _10: usize;
    let mut _11: &std::vec::Vec<i32>;
    let mut _12: &usize;
    let _13: usize;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: usize;
    let mut _19: usize;
    let _21: !;
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _23: (&i32, &i32);
    let mut _24: &i32;
    let _25: &i32;
    let mut _26: &std::vec::Vec<i32>;
    let mut _27: &i32;
    let _28: i32;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: i32;
    let mut _34: i32;
    let _36: !;
    let mut _37: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _38: (&i32, &i32);
    let mut _39: &i32;
    let _40: &i32;
    let mut _41: &std::vec::Vec<i32>;
    let mut _42: &i32;
    let _43: i32;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: i32;
    let mut _49: i32;
    let _51: !;
    let mut _52: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _53: (&i32, &i32);
    let mut _54: &i32;
    let _55: &i32;
    let mut _56: &std::vec::Vec<i32>;
    let mut _57: &i32;
    let _58: i32;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: i32;
    let mut _64: i32;
    let _66: !;
    let mut _67: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _68: *const [i32; 3];
    let mut _69: *const ();
    let mut _70: usize;
    let mut _71: usize;
    let mut _72: usize;
    let mut _73: usize;
    let mut _74: bool;
    scope 1 {
    }
    scope 2 {
        debug x => _7;
        let _14: &usize;
        let _15: &usize;
        let _29: &i32;
        let _30: &i32;
        let _44: &i32;
        let _45: &i32;
        let _59: &i32;
        let _60: &i32;
        scope 3 {
            debug left_val => _14;
            debug right_val => _15;
            let _20: core::panicking::AssertKind;
            scope 4 {
                debug kind => _20;
            }
        }
        scope 5 {
            debug left_val => _29;
            debug right_val => _30;
            let _35: core::panicking::AssertKind;
            scope 6 {
                debug kind => _35;
            }
        }
        scope 7 {
            debug left_val => _44;
            debug right_val => _45;
            let _50: core::panicking::AssertKind;
            scope 8 {
                debug kind => _50;
            }
        }
        scope 9 {
            debug left_val => _59;
            debug right_val => _60;
            let _65: core::panicking::AssertKind;
            scope 10 {
                debug kind => _65;
            }
        }
    }

    bb0: {
        _3 = SizeOf([i32; 3]);
        _4 = AlignOf([i32; 3]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> bb1;
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [i32; 3]);
        _68 = (((_6.0: std::ptr::Unique<[i32; 3]>).0: std::ptr::NonNull<[i32; 3]>).0: *const [i32; 3]);
        _69 = _68 as *const () (PtrToPtr);
        _70 = _69 as usize (Transmute);
        _71 = AlignOf(i32);
        _72 = Sub(_71, const 1_usize);
        _73 = BitAnd(_70, _72);
        _74 = Eq(_73, const 0_usize);
        assert(_74, "misaligned pointer dereference: address must be a multiple of {} but is {}", _71, _70) -> [success: bb18, unwind unreachable];
    }

    bb2: {
        _7 = move _1;
        _11 = &_7;
        _10 = Vec::<i32>::len(move _11) -> [return: bb3, unwind: bb16];
    }

    bb3: {
        _9 = &_10;
        _13 = const 3_usize;
        _12 = &_13;
        _8 = (move _9, move _12);
        _14 = (_8.0: &usize);
        _15 = (_8.1: &usize);
        _18 = (*_14);
        _19 = (*_15);
        _17 = Eq(move _18, move _19);
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _20 = core::panicking::AssertKind::Eq;
        _22 = Option::<Arguments<'_>>::None;
        _21 = core::panicking::assert_failed::<usize, usize>(move _20, _14, _15, move _22) -> bb16;
    }

    bb5: {
        _26 = &_7;
        _25 = <Vec<i32> as Index<usize>>::index(move _26, const 0_usize) -> [return: bb6, unwind: bb16];
    }

    bb6: {
        _24 = _25;
        _28 = const 1_i32;
        _27 = &_28;
        _23 = (move _24, move _27);
        _29 = (_23.0: &i32);
        _30 = (_23.1: &i32);
        _33 = (*_29);
        _34 = (*_30);
        _32 = Eq(move _33, move _34);
        _31 = Not(move _32);
        switchInt(move _31) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _35 = core::panicking::AssertKind::Eq;
        _37 = Option::<Arguments<'_>>::None;
        _36 = core::panicking::assert_failed::<i32, i32>(move _35, _29, _30, move _37) -> bb16;
    }

    bb8: {
        _41 = &_7;
        _40 = <Vec<i32> as Index<usize>>::index(move _41, const 1_usize) -> [return: bb9, unwind: bb16];
    }

    bb9: {
        _39 = _40;
        _43 = const 2_i32;
        _42 = &_43;
        _38 = (move _39, move _42);
        _44 = (_38.0: &i32);
        _45 = (_38.1: &i32);
        _48 = (*_44);
        _49 = (*_45);
        _47 = Eq(move _48, move _49);
        _46 = Not(move _47);
        switchInt(move _46) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _50 = core::panicking::AssertKind::Eq;
        _52 = Option::<Arguments<'_>>::None;
        _51 = core::panicking::assert_failed::<i32, i32>(move _50, _44, _45, move _52) -> bb16;
    }

    bb11: {
        _56 = &_7;
        _55 = <Vec<i32> as Index<usize>>::index(move _56, const 2_usize) -> [return: bb12, unwind: bb16];
    }

    bb12: {
        _54 = _55;
        _58 = const 3_i32;
        _57 = &_58;
        _53 = (move _54, move _57);
        _59 = (_53.0: &i32);
        _60 = (_53.1: &i32);
        _63 = (*_59);
        _64 = (*_60);
        _62 = Eq(move _63, move _64);
        _61 = Not(move _62);
        switchInt(move _61) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _65 = core::panicking::AssertKind::Eq;
        _67 = Option::<Arguments<'_>>::None;
        _66 = core::panicking::assert_failed::<i32, i32>(move _65, _59, _60, move _67) -> bb16;
    }

    bb14: {
        drop(_7) -> bb15;
    }

    bb15: {
        return;
    }

    bb16 (cleanup): {
        drop(_7) -> [return: bb17, unwind terminate];
    }

    bb17 (cleanup): {
        resume;
    }

    bb18: {
        (*_68) = [const 1_i32, const 2_i32, const 3_i32];
        _2 = move _6 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _1 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _2) -> bb2;
    }
}
