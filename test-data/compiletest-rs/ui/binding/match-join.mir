// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: Option<T>) -> () {
    debug y => _1;
    let mut _0: ();
    let mut _2: isize;
    let mut _4: bool;
    let mut _5: isize;
    let _6: ();
    let mut _7: &mut std::vec::Vec<isize>;
    let mut _8: isize;
    scope 1 {
        debug x => _2;
        let mut _3: std::vec::Vec<isize>;
        scope 2 {
            debug rs => _3;
        }
    }

    bb0: {
        _3 = Vec::<isize>::new() -> [return: bb1, unwind: bb10];
    }

    bb1: {
        _4 = const true;
        switchInt(move _4) -> [0: bb2, otherwise: bb6];
    }

    bb2: {
        _5 = discriminant(_1);
        switchInt(move _5) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _2 = const 42_isize;
        goto -> bb5;
    }

    bb4: {
        _2 = const 17_isize;
        goto -> bb5;
    }

    bb5: {
        _7 = &mut _3;
        _8 = _2;
        _6 = Vec::<isize>::push(move _7, move _8) -> [return: bb12, unwind: bb9];
    }

    bb6: {
        drop(_3) -> [return: bb7, unwind: bb10];
    }

    bb7: {
        drop(_1) -> bb8;
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_3) -> [return: bb10, unwind terminate];
    }

    bb10 (cleanup): {
        drop(_1) -> [return: bb11, unwind terminate];
    }

    bb11 (cleanup): {
        resume;
    }

    bb12: {
        goto -> bb6;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let _4: &[&str; 1];
    let _5: [&str; 1];
    let _6: ();
    let mut _7: std::option::Option<isize>;

    bb0: {
        _5 = [const "hello\n"];
        _4 = &_5;
        _3 = _4 as &[&str] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_const(move _3) -> bb1;
    }

    bb1: {
        _1 = _print(move _2) -> bb2;
    }

    bb2: {
        _7 = Option::<isize>::Some(const 5_isize);
        _6 = foo::<isize>(move _7) -> bb3;
    }

    bb3: {
        return;
    }
}
