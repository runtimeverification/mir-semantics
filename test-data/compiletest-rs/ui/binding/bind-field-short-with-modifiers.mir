// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: main::Foo;
    let mut _5: (&isize, &isize);
    let mut _6: &isize;
    let mut _7: &isize;
    let _8: isize;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: isize;
    let mut _14: isize;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: (&isize, &isize);
    let mut _19: &isize;
    let mut _20: &isize;
    let _21: isize;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: isize;
    let mut _27: isize;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _33: (&isize, &isize);
    let mut _34: &isize;
    let mut _35: &isize;
    let _36: isize;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: isize;
    let mut _42: isize;
    let _44: !;
    let mut _45: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _46: (&isize, &isize);
    let mut _47: &isize;
    let mut _48: &isize;
    let _49: isize;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: isize;
    let mut _55: isize;
    let _57: !;
    let mut _58: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug f => _1;
        let _2: &mut isize;
        let _3: &isize;
        let _4: &isize;
        let mut _31: isize;
        let _32: &mut isize;
        let _37: &isize;
        let _38: &isize;
        let _50: &isize;
        let _51: &isize;
        scope 2 {
            debug x => _2;
        }
        scope 3 {
            debug x => _3;
            debug y => _4;
            let _9: &isize;
            let _10: &isize;
            let _22: &isize;
            let _23: &isize;
            scope 4 {
                debug left_val => _9;
                debug right_val => _10;
                let _15: core::panicking::AssertKind;
                scope 5 {
                    debug kind => _15;
                }
            }
            scope 6 {
                debug left_val => _22;
                debug right_val => _23;
                let _28: core::panicking::AssertKind;
                scope 7 {
                    debug kind => _28;
                }
            }
        }
        scope 8 {
            debug x => _31;
            debug y => _32;
        }
        scope 9 {
            debug left_val => _37;
            debug right_val => _38;
            let _43: core::panicking::AssertKind;
            scope 10 {
                debug kind => _43;
            }
        }
        scope 11 {
            debug left_val => _50;
            debug right_val => _51;
            let _56: core::panicking::AssertKind;
            scope 12 {
                debug kind => _56;
            }
        }
    }

    bb0: {
        _1 = Foo { x: const 10_isize, y: const 0_isize };
        _2 = &mut (_1.0: isize);
        (*_2) = const 11_isize;
        _3 = &(_1.0: isize);
        _4 = &(_1.1: isize);
        _6 = &(_1.0: isize);
        _8 = const 11_isize;
        _7 = &_8;
        _5 = (move _6, move _7);
        _9 = (_5.0: &isize);
        _10 = (_5.1: &isize);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<isize, isize>(move _15, _9, _10, move _17);
    }

    bb2: {
        _19 = &(_1.1: isize);
        _21 = const 0_isize;
        _20 = &_21;
        _18 = (move _19, move _20);
        _22 = (_18.0: &isize);
        _23 = (_18.1: &isize);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<isize, isize>(move _28, _22, _23, move _30);
    }

    bb4: {
        _31 = (_1.0: isize);
        _32 = &mut (_1.1: isize);
        _31 = const 12_isize;
        (*_32) = const 1_isize;
        _34 = &(_1.0: isize);
        _36 = const 11_isize;
        _35 = &_36;
        _33 = (move _34, move _35);
        _37 = (_33.0: &isize);
        _38 = (_33.1: &isize);
        _41 = (*_37);
        _42 = (*_38);
        _40 = Eq(move _41, move _42);
        _39 = Not(move _40);
        switchInt(move _39) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _43 = core::panicking::AssertKind::Eq;
        _45 = Option::<Arguments<'_>>::None;
        _44 = core::panicking::assert_failed::<isize, isize>(move _43, _37, _38, move _45);
    }

    bb6: {
        _47 = &(_1.1: isize);
        _49 = const 1_isize;
        _48 = &_49;
        _46 = (move _47, move _48);
        _50 = (_46.0: &isize);
        _51 = (_46.1: &isize);
        _54 = (*_50);
        _55 = (*_51);
        _53 = Eq(move _54, move _55);
        _52 = Not(move _53);
        switchInt(move _52) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _56 = core::panicking::AssertKind::Eq;
        _58 = Option::<Arguments<'_>>::None;
        _57 = core::panicking::assert_failed::<isize, isize>(move _56, _50, _51, move _58);
    }

    bb8: {
        return;
    }
}
