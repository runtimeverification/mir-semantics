// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const VALUE: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 21_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: &i32;
    let _2: i32;
    let _3: !;
    let mut _4: &usize;
    let _5: usize;
    let _6: !;
    let mut _7: std::boxed::Box<i32>;
    let _8: !;
    let mut _9: std::boxed::Box<usize>;
    let _10: !;
    let mut _11: *const i32;
    let mut _12: *const usize;

    bb0: {
        _2 = const 18_i32;
        _1 = &_2;
        switchInt((*_1)) -> [18: bb2, otherwise: bb1];
    }

    bb1: {
        _3 = core::panicking::panic(const "internal error: entered unreachable code");
    }

    bb2: {
        _5 = const 21_usize;
        _4 = &_5;
        switchInt((*_4)) -> [21: bb4, otherwise: bb3];
    }

    bb3: {
        _6 = core::panicking::panic(const "internal error: entered unreachable code");
    }

    bb4: {
        _7 = Box::<i32>::new(const 18_i32) -> bb5;
    }

    bb5: {
        _11 = (((_7.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32);
        switchInt((*_11)) -> [18: bb7, otherwise: bb6];
    }

    bb6: {
        _8 = core::panicking::panic(const "internal error: entered unreachable code") -> bb14;
    }

    bb7: {
        drop(_7) -> bb8;
    }

    bb8: {
        _9 = Box::<usize>::new(const 21_usize) -> bb9;
    }

    bb9: {
        _12 = (((_9.0: std::ptr::Unique<usize>).0: std::ptr::NonNull<usize>).0: *const usize);
        switchInt((*_12)) -> [21: bb11, otherwise: bb10];
    }

    bb10: {
        _10 = core::panicking::panic(const "internal error: entered unreachable code") -> bb13;
    }

    bb11: {
        drop(_9) -> bb12;
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        drop(_9) -> [return: bb15, unwind terminate];
    }

    bb14 (cleanup): {
        drop(_7) -> [return: bb15, unwind terminate];
    }

    bb15 (cleanup): {
        resume;
    }
}
