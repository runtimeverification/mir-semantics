// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: &str;
    let mut _2: &str;
    let mut _3: (&&str, &&str);
    let mut _4: &&str;
    let mut _5: &&str;
    let _6: &str;
    let mut _9: bool;
    let mut _10: bool;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: &str;
    let mut _16: (&&str, &&str);
    let mut _17: &&str;
    let mut _18: &&str;
    let _19: &str;
    let mut _22: bool;
    let mut _23: bool;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug a => _1;
        let _7: &&str;
        let _8: &&str;
        let _15: &str;
        scope 2 {
            debug left_val => _7;
            debug right_val => _8;
            let _11: core::panicking::AssertKind;
            scope 3 {
                debug kind => _11;
            }
        }
        scope 4 {
            debug b => _15;
            let _20: &&str;
            let _21: &&str;
            scope 5 {
                debug left_val => _20;
                debug right_val => _21;
                let _24: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _24;
                }
            }
        }
    }

    bb0: {
        _2 = const "abcdef";
        _1 = _2;
        _4 = &_1;
        _6 = const "abcdef";
        _5 = &_6;
        _3 = (move _4, move _5);
        _7 = (_3.0: &&str);
        _8 = (_3.1: &&str);
        _10 = <&str as PartialEq>::eq(_7, _8) -> bb1;
    }

    bb1: {
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<&str, &str>(move _11, _7, _8, move _13);
    }

    bb3: {
        _14 = const "12345";
        _15 = _14;
        _17 = &_15;
        _19 = const "12345";
        _18 = &_19;
        _16 = (move _17, move _18);
        _20 = (_16.0: &&str);
        _21 = (_16.1: &&str);
        _23 = <&str as PartialEq>::eq(_20, _21) -> bb4;
    }

    bb4: {
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<&str, &str>(move _24, _20, _21, move _26);
    }

    bb6: {
        return;
    }
}
