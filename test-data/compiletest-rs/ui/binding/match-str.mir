// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: &str;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;
    let mut _5: !;
    let mut _6: main::t;
    let mut _7: std::string::String;
    let _8: &str;
    let mut _9: isize;
    let mut _10: !;
    let _11: &std::string::String;
    let _12: &&std::string::String;
    let mut _13: bool;
    let mut _14: &&str;
    let _15: &str;
    let mut _16: &&str;
    let _17: &str;
    let _18: &str;
    let mut _19: !;
    let _20: &std::string::String;
    let _21: &&std::string::String;
    let mut _22: bool;
    let mut _23: &&str;
    let _24: &str;
    let mut _25: &&str;
    let _26: &str;
    let _27: &str;
    let mut _28: !;
    let _29: i32;
    let mut _30: &str;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: !;
    let mut _34: (&i32, &i32);
    let mut _35: &i32;
    let mut _36: &i32;
    let _37: i32;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: i32;
    let mut _43: i32;
    let _45: !;
    let mut _46: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _47: &str;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: !;
    let mut _51: &std::string::String;
    let mut _52: &std::string::String;
    scope 1 {
        debug s => _11;
        debug s => _12;
    }
    scope 2 {
        debug s => _20;
        debug s => _21;
    }
    scope 3 {
        debug x => _29;
        let _38: &i32;
        let _39: &i32;
        scope 4 {
            debug left_val => _38;
            debug right_val => _39;
            let _44: core::panicking::AssertKind;
            scope 5 {
                debug kind => _44;
            }
        }
    }

    bb0: {
        _1 = const "test";
        _2 = <str as PartialEq>::eq(_1, const "not-test") -> bb1;
    }

    bb1: {
        switchInt(move _2) -> [0: bb2, otherwise: bb5];
    }

    bb2: {
        _3 = <str as PartialEq>::eq(_1, const "test") -> bb3;
    }

    bb3: {
        switchInt(move _3) -> [0: bb4, otherwise: bb6];
    }

    bb4: {
        _5 = begin_panic::<&str>(const "explicit panic");
    }

    bb5: {
        _4 = begin_panic::<&str>(const "explicit panic");
    }

    bb6: {
        _8 = const "test";
        _7 = <str as ToString>::to_string(_8) -> bb7;
    }

    bb7: {
        _6 = t::tag1(move _7);
        _9 = discriminant(_6);
        switchInt(move _9) -> [0: bb9, 1: bb8, otherwise: bb35];
    }

    bb8: {
        _10 = begin_panic::<&str>(const "explicit panic") -> bb33;
    }

    bb9: {
        _11 = &((_6 as tag1).0: std::string::String);
        _12 = &_11;
        _15 = const "test";
        _14 = &_15;
        _51 = deref_copy (*_12);
        _18 = <String as Deref>::deref(_51) -> [return: bb10, unwind: bb33];
    }

    bb10: {
        _17 = _18;
        _16 = &_17;
        _13 = <&str as PartialEq>::ne(move _14, move _16) -> [return: bb11, unwind: bb33];
    }

    bb11: {
        switchInt(move _13) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _19 = begin_panic::<&str>(const "explicit panic") -> bb33;
    }

    bb13: {
        _20 = &((_6 as tag1).0: std::string::String);
        _21 = &_20;
        _24 = const "test";
        _23 = &_24;
        _52 = deref_copy (*_21);
        _27 = <String as Deref>::deref(_52) -> [return: bb14, unwind: bb33];
    }

    bb14: {
        _26 = _27;
        _25 = &_26;
        _22 = <&str as PartialEq>::eq(move _23, move _25) -> [return: bb15, unwind: bb33];
    }

    bb15: {
        switchInt(move _22) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        drop(_6) -> bb18;
    }

    bb17: {
        _28 = begin_panic::<&str>(const "explicit panic") -> bb33;
    }

    bb18: {
        _30 = const "a";
        _31 = <str as PartialEq>::eq(_30, const "a") -> bb19;
    }

    bb19: {
        switchInt(move _31) -> [0: bb20, otherwise: bb23];
    }

    bb20: {
        _32 = <str as PartialEq>::eq(_30, const "b") -> bb21;
    }

    bb21: {
        switchInt(move _32) -> [0: bb22, otherwise: bb24];
    }

    bb22: {
        _33 = begin_panic::<&str>(const "explicit panic");
    }

    bb23: {
        _29 = const 1_i32;
        goto -> bb25;
    }

    bb24: {
        _29 = const 2_i32;
        goto -> bb25;
    }

    bb25: {
        _35 = &_29;
        _37 = const 1_i32;
        _36 = &_37;
        _34 = (move _35, move _36);
        _38 = (_34.0: &i32);
        _39 = (_34.1: &i32);
        _42 = (*_38);
        _43 = (*_39);
        _41 = Eq(move _42, move _43);
        _40 = Not(move _41);
        switchInt(move _40) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _44 = core::panicking::AssertKind::Eq;
        _46 = Option::<Arguments<'_>>::None;
        _45 = core::panicking::assert_failed::<i32, i32>(move _44, _38, _39, move _46);
    }

    bb27: {
        _47 = const "a";
        _48 = <str as PartialEq>::eq(_47, const "a") -> bb28;
    }

    bb28: {
        switchInt(move _48) -> [0: bb29, otherwise: bb32];
    }

    bb29: {
        _49 = <str as PartialEq>::eq(_47, const "b") -> bb30;
    }

    bb30: {
        switchInt(move _49) -> [0: bb31, otherwise: bb32];
    }

    bb31: {
        _50 = begin_panic::<&str>(const "explicit panic");
    }

    bb32: {
        return;
    }

    bb33 (cleanup): {
        drop(_6) -> [return: bb34, unwind terminate];
    }

    bb34 (cleanup): {
        resume;
    }

    bb35: {
        unreachable;
    }
}

fn t::tag1(_1: String) -> t {
    let mut _0: main::t;

    bb0: {
        _0 = t::tag1(move _1);
        return;
    }
}

// MIR FOR CTFE
fn t::tag1(_1: String) -> t {
    let mut _0: main::t;

    bb0: {
        _0 = t::tag1(move _1);
        return;
    }
}
