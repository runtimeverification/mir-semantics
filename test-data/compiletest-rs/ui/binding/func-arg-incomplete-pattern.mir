// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: Foo) -> *const usize {
    let mut _0: *const usize;
    let _2: std::boxed::Box<usize>;
    let _3: &usize;
    let mut _4: *const usize;
    scope 1 {
        debug x => _2;
        let mut _5: *const ();
        let mut _6: usize;
        let mut _7: usize;
        let mut _8: usize;
        let mut _9: usize;
        let mut _10: bool;
        scope 2 {
            debug addr => _0;
        }
    }

    bb0: {
        _2 = move (_1.0: std::boxed::Box<usize>);
        _4 = (((_2.0: std::ptr::Unique<usize>).0: std::ptr::NonNull<usize>).0: *const usize);
        _5 = _4 as *const () (PtrToPtr);
        _6 = _5 as usize (Transmute);
        _7 = AlignOf(usize);
        _8 = Sub(_7, const 1_usize);
        _9 = BitAnd(_6, _8);
        _10 = Eq(_9, const 0_usize);
        assert(_10, "misaligned pointer dereference: address must be a multiple of {} but is {}", _7, _6) -> [success: bb5, unwind unreachable];
    }

    bb1: {
        drop((_1.1: std::boxed::Box<usize>)) -> bb3;
    }

    bb2 (cleanup): {
        resume;
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop((_1.1: std::boxed::Box<usize>)) -> [return: bb2, unwind terminate];
    }

    bb5: {
        _3 = &(*_4);
        _0 = &raw const (*_3);
        drop(_2) -> [return: bb1, unwind: bb4];
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::boxed::Box<usize>;
    let _3: &usize;
    let mut _5: std::boxed::Box<usize>;
    let mut _6: std::boxed::Box<usize>;
    let mut _8: (&*const usize, &*const usize);
    let mut _9: &*const usize;
    let mut _10: &*const usize;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: *const usize;
    let mut _16: *const usize;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _20: *const usize;
    scope 1 {
        debug obj => _1;
        let _2: *const usize;
        let mut _21: *const ();
        let mut _22: usize;
        let mut _23: usize;
        let mut _24: usize;
        let mut _25: usize;
        let mut _26: bool;
        scope 2 {
            debug objptr => _2;
            let _4: Foo;
            scope 3 {
                debug f => _4;
                let _7: *const usize;
                scope 4 {
                    debug xptr => _7;
                    let _11: &*const usize;
                    let _12: &*const usize;
                    scope 5 {
                        debug left_val => _11;
                        debug right_val => _12;
                        let _17: core::panicking::AssertKind;
                        scope 6 {
                            debug kind => _17;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = Box::<usize>::new(const 1_usize) -> bb1;
    }

    bb1: {
        _20 = (((_1.0: std::ptr::Unique<usize>).0: std::ptr::NonNull<usize>).0: *const usize);
        _21 = _20 as *const () (PtrToPtr);
        _22 = _21 as usize (Transmute);
        _23 = AlignOf(usize);
        _24 = Sub(_23, const 1_usize);
        _25 = BitAnd(_22, _24);
        _26 = Eq(_25, const 0_usize);
        assert(_26, "misaligned pointer dereference: address must be a multiple of {} but is {}", _23, _22) -> [success: bb8, unwind unreachable];
    }

    bb2: {
        _4 = Foo { x: move _5, y: move _6 };
        _7 = foo(move _4) -> bb3;
    }

    bb3: {
        _9 = &_2;
        _10 = &_7;
        _8 = (move _9, move _10);
        _11 = (_8.0: &*const usize);
        _12 = (_8.1: &*const usize);
        _15 = (*_11);
        _16 = (*_12);
        _14 = Eq(move _15, move _16);
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<*const usize, *const usize>(move _17, _11, _12, move _19);
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_5) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }

    bb8: {
        _3 = &(*_20);
        _2 = &raw const (*_3);
        _5 = move _1;
        _6 = Box::<usize>::new(const 2_usize) -> [return: bb2, unwind: bb6];
    }
}
