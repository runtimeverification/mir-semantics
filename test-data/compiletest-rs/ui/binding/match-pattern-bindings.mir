// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::option::Option<i32>;
    let mut _2: (&&std::option::Option<i32>, &&std::option::Option<i32>);
    let mut _3: &&std::option::Option<i32>;
    let _4: &std::option::Option<i32>;
    let mut _5: isize;
    let mut _8: &&std::option::Option<i32>;
    let _9: &std::option::Option<i32>;
    let _10: std::option::Option<i32>;
    let mut _13: bool;
    let mut _14: bool;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: (&&std::option::Option<i32>, &&std::option::Option<i32>);
    let mut _19: &&std::option::Option<i32>;
    let _20: &std::option::Option<i32>;
    let mut _21: isize;
    let mut _24: &&std::option::Option<i32>;
    let _25: &std::option::Option<i32>;
    let _26: std::option::Option<i32>;
    let mut _29: bool;
    let mut _30: bool;
    let _32: !;
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _34: (&&str, &&str);
    let mut _35: &&str;
    let _36: &str;
    let mut _37: &str;
    let mut _38: &&str;
    let _39: &str;
    let mut _42: bool;
    let mut _43: bool;
    let _45: !;
    let mut _46: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _48: &str;
    let mut _49: (&&str, &&str);
    let mut _50: &&str;
    let mut _51: &&str;
    let _52: &str;
    let mut _55: bool;
    let mut _56: bool;
    let _58: !;
    let mut _59: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _62: (&&std::option::Option<bool>, &&std::option::Option<bool>);
    let mut _63: &&std::option::Option<bool>;
    let mut _64: &&std::option::Option<bool>;
    let _65: &std::option::Option<bool>;
    let _66: std::option::Option<bool>;
    let mut _69: bool;
    let mut _70: bool;
    let _72: !;
    let mut _73: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug value => _1;
        let _6: &std::option::Option<i32>;
        let _7: &std::option::Option<i32>;
        let _11: &&std::option::Option<i32>;
        let _12: &&std::option::Option<i32>;
        let _22: &std::option::Option<i32>;
        let _23: &std::option::Option<i32>;
        let _27: &&std::option::Option<i32>;
        let _28: &&std::option::Option<i32>;
        let _40: &&str;
        let _41: &&str;
        let _47: &str;
        scope 2 {
            debug a => _6;
        }
        scope 3 {
            debug b => _7;
        }
        scope 4 {
            debug left_val => _11;
            debug right_val => _12;
            let _15: core::panicking::AssertKind;
            scope 5 {
                debug kind => _15;
            }
        }
        scope 6 {
            debug c => _22;
        }
        scope 7 {
            debug b => _23;
        }
        scope 8 {
            debug left_val => _27;
            debug right_val => _28;
            let _31: core::panicking::AssertKind;
            scope 9 {
                debug kind => _31;
            }
        }
        scope 10 {
            debug b => _37;
        }
        scope 11 {
            debug left_val => _40;
            debug right_val => _41;
            let _44: core::panicking::AssertKind;
            scope 12 {
                debug kind => _44;
            }
        }
        scope 13 {
            debug a => _47;
            let _53: &&str;
            let _54: &&str;
            let _60: std::option::Option<bool>;
            scope 14 {
                debug left_val => _53;
                debug right_val => _54;
                let _57: core::panicking::AssertKind;
                scope 15 {
                    debug kind => _57;
                }
            }
            scope 16 {
                debug value => _60;
                let _61: &std::option::Option<bool>;
                scope 17 {
                    debug a => _61;
                    let _67: &&std::option::Option<bool>;
                    let _68: &&std::option::Option<bool>;
                    scope 18 {
                        debug left_val => _67;
                        debug right_val => _68;
                        let _71: core::panicking::AssertKind;
                        scope 19 {
                            debug kind => _71;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = Option::<i32>::Some(const 1_i32);
        _5 = discriminant(_1);
        switchInt(move _5) -> [0: bb1, 1: bb3, otherwise: bb2];
    }

    bb1: {
        _7 = &_1;
        _4 = _7;
        goto -> bb4;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _6 = &_1;
        _4 = _6;
        goto -> bb4;
    }

    bb4: {
        _3 = &_4;
        _10 = Option::<i32>::Some(const 1_i32);
        _9 = &_10;
        _8 = &_9;
        _2 = (move _3, move _8);
        _11 = (_2.0: &&std::option::Option<i32>);
        _12 = (_2.1: &&std::option::Option<i32>);
        _14 = <&Option<i32> as PartialEq>::eq(_11, _12) -> bb5;
    }

    bb5: {
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<&Option<i32>, &Option<i32>>(move _15, _11, _12, move _17);
    }

    bb7: {
        _21 = discriminant(_1);
        switchInt(move _21) -> [0: bb8, 1: bb9, otherwise: bb2];
    }

    bb8: {
        _23 = &_1;
        _20 = _23;
        goto -> bb10;
    }

    bb9: {
        _22 = &_1;
        _20 = _22;
        goto -> bb10;
    }

    bb10: {
        _19 = &_20;
        _26 = Option::<i32>::Some(const 1_i32);
        _25 = &_26;
        _24 = &_25;
        _18 = (move _19, move _24);
        _27 = (_18.0: &&std::option::Option<i32>);
        _28 = (_18.1: &&std::option::Option<i32>);
        _30 = <&Option<i32> as PartialEq>::eq(_27, _28) -> bb11;
    }

    bb11: {
        _29 = Not(move _30);
        switchInt(move _29) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _31 = core::panicking::AssertKind::Eq;
        _33 = Option::<Arguments<'_>>::None;
        _32 = core::panicking::assert_failed::<&Option<i32>, &Option<i32>>(move _31, _27, _28, move _33);
    }

    bb13: {
        _37 = const "foobarbaz";
        _36 = _37;
        _35 = &_36;
        _39 = const "foobarbaz";
        _38 = &_39;
        _34 = (move _35, move _38);
        _40 = (_34.0: &&str);
        _41 = (_34.1: &&str);
        _43 = <&str as PartialEq>::eq(_40, _41) -> bb14;
    }

    bb14: {
        _42 = Not(move _43);
        switchInt(move _42) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _44 = core::panicking::AssertKind::Eq;
        _46 = Option::<Arguments<'_>>::None;
        _45 = core::panicking::assert_failed::<&str, &str>(move _44, _40, _41, move _46);
    }

    bb16: {
        _48 = const "foobarbaz";
        _47 = _48;
        _50 = &_47;
        _52 = const "foobarbaz";
        _51 = &_52;
        _49 = (move _50, move _51);
        _53 = (_49.0: &&str);
        _54 = (_49.1: &&str);
        _56 = <&str as PartialEq>::eq(_53, _54) -> bb17;
    }

    bb17: {
        _55 = Not(move _56);
        switchInt(move _55) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _57 = core::panicking::AssertKind::Eq;
        _59 = Option::<Arguments<'_>>::None;
        _58 = core::panicking::assert_failed::<&str, &str>(move _57, _53, _54, move _59);
    }

    bb19: {
        _60 = Option::<bool>::Some(const true);
        _61 = &_60;
        _63 = &_61;
        _66 = Option::<bool>::Some(const true);
        _65 = &_66;
        _64 = &_65;
        _62 = (move _63, move _64);
        _67 = (_62.0: &&std::option::Option<bool>);
        _68 = (_62.1: &&std::option::Option<bool>);
        _70 = <&Option<bool> as PartialEq>::eq(_67, _68) -> bb20;
    }

    bb20: {
        _69 = Not(move _70);
        switchInt(move _69) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _71 = core::panicking::AssertKind::Eq;
        _73 = Option::<Arguments<'_>>::None;
        _72 = core::panicking::assert_failed::<&Option<bool>, &Option<bool>>(move _71, _67, _68, move _73);
    }

    bb22: {
        return;
    }
}
