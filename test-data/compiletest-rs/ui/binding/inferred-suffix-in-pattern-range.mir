// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _3: bool;
    let mut _4: bool;
    let _5: &str;
    let _6: &str;
    let mut _7: (&std::string::String, &std::string::String);
    let mut _8: &std::string::String;
    let mut _9: &std::string::String;
    let _10: std::string::String;
    let _11: &str;
    let mut _14: bool;
    let mut _15: bool;
    let _17: !;
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: bool;
    let mut _22: bool;
    let _23: &str;
    let _24: &str;
    let mut _25: (&std::string::String, &std::string::String);
    let mut _26: &std::string::String;
    let mut _27: &std::string::String;
    let _28: std::string::String;
    let _29: &str;
    let mut _32: bool;
    let mut _33: bool;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _39: bool;
    let mut _40: bool;
    let _41: &str;
    let _42: &str;
    let mut _43: (&std::string::String, &std::string::String);
    let mut _44: &std::string::String;
    let mut _45: &std::string::String;
    let _46: std::string::String;
    let _47: &str;
    let mut _50: bool;
    let mut _51: bool;
    let _53: !;
    let mut _54: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _2: std::string::String;
        scope 2 {
            debug x_message => _2;
            let _12: &std::string::String;
            let _13: &std::string::String;
            let _19: i32;
            scope 3 {
                debug left_val => _12;
                debug right_val => _13;
                let _16: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _16;
                }
            }
            scope 5 {
                debug y => _19;
                let _20: std::string::String;
                scope 6 {
                    debug y_message => _20;
                    let _30: &std::string::String;
                    let _31: &std::string::String;
                    let _37: u64;
                    scope 7 {
                        debug left_val => _30;
                        debug right_val => _31;
                        let _34: core::panicking::AssertKind;
                        scope 8 {
                            debug kind => _34;
                        }
                    }
                    scope 9 {
                        debug z => _37;
                        let _38: std::string::String;
                        scope 10 {
                            debug z_message => _38;
                            let _48: &std::string::String;
                            let _49: &std::string::String;
                            scope 11 {
                                debug left_val => _48;
                                debug right_val => _49;
                                let _52: core::panicking::AssertKind;
                                scope 12 {
                                    debug kind => _52;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const 2_i32;
        _3 = Le(const 0_i32, _1);
        switchInt(move _3) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _4 = Le(_1, const 1_i32);
        switchInt(move _4) -> [0: bb2, otherwise: bb3];
    }

    bb2: {
        _6 = const "lots";
        _2 = <str as ToString>::to_string(_6) -> bb4;
    }

    bb3: {
        _5 = const "not many";
        _2 = <str as ToString>::to_string(_5) -> bb4;
    }

    bb4: {
        _8 = &_2;
        _11 = const "lots";
        _10 = <str as ToString>::to_string(_11) -> [return: bb5, unwind: bb36];
    }

    bb5: {
        _9 = &_10;
        _7 = (move _8, move _9);
        _12 = (_7.0: &std::string::String);
        _13 = (_7.1: &std::string::String);
        _15 = <String as PartialEq>::eq(_12, _13) -> [return: bb6, unwind: bb35];
    }

    bb6: {
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _16 = core::panicking::AssertKind::Eq;
        _18 = Option::<Arguments<'_>>::None;
        _17 = core::panicking::assert_failed::<String, String>(move _16, _12, _13, move _18) -> bb35;
    }

    bb8: {
        drop(_10) -> [return: bb9, unwind: bb36];
    }

    bb9: {
        _19 = const 2_i32;
        _21 = Le(const 0_i32, _19);
        switchInt(move _21) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _22 = Le(_19, const 1_i32);
        switchInt(move _22) -> [0: bb11, otherwise: bb12];
    }

    bb11: {
        _24 = const "lots";
        _20 = <str as ToString>::to_string(_24) -> [return: bb38, unwind: bb36];
    }

    bb12: {
        _23 = const "not many";
        _20 = <str as ToString>::to_string(_23) -> [return: bb39, unwind: bb36];
    }

    bb13: {
        _26 = &_20;
        _29 = const "lots";
        _28 = <str as ToString>::to_string(_29) -> [return: bb14, unwind: bb34];
    }

    bb14: {
        _27 = &_28;
        _25 = (move _26, move _27);
        _30 = (_25.0: &std::string::String);
        _31 = (_25.1: &std::string::String);
        _33 = <String as PartialEq>::eq(_30, _31) -> [return: bb15, unwind: bb33];
    }

    bb15: {
        _32 = Not(move _33);
        switchInt(move _32) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = core::panicking::assert_failed::<String, String>(move _34, _30, _31, move _36) -> bb33;
    }

    bb17: {
        drop(_28) -> [return: bb18, unwind: bb34];
    }

    bb18: {
        _37 = const 1_u64;
        _39 = Le(const 0_u64, _37);
        switchInt(move _39) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _40 = Le(_37, const 1_u64);
        switchInt(move _40) -> [0: bb20, otherwise: bb21];
    }

    bb20: {
        _42 = const "lots";
        _38 = <str as ToString>::to_string(_42) -> [return: bb40, unwind: bb34];
    }

    bb21: {
        _41 = const "not many";
        _38 = <str as ToString>::to_string(_41) -> [return: bb41, unwind: bb34];
    }

    bb22: {
        _44 = &_38;
        _47 = const "not many";
        _46 = <str as ToString>::to_string(_47) -> [return: bb23, unwind: bb32];
    }

    bb23: {
        _45 = &_46;
        _43 = (move _44, move _45);
        _48 = (_43.0: &std::string::String);
        _49 = (_43.1: &std::string::String);
        _51 = <String as PartialEq>::eq(_48, _49) -> [return: bb24, unwind: bb31];
    }

    bb24: {
        _50 = Not(move _51);
        switchInt(move _50) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _52 = core::panicking::AssertKind::Eq;
        _54 = Option::<Arguments<'_>>::None;
        _53 = core::panicking::assert_failed::<String, String>(move _52, _48, _49, move _54) -> bb31;
    }

    bb26: {
        drop(_46) -> [return: bb27, unwind: bb32];
    }

    bb27: {
        drop(_38) -> [return: bb28, unwind: bb34];
    }

    bb28: {
        drop(_20) -> [return: bb29, unwind: bb36];
    }

    bb29: {
        drop(_2) -> bb30;
    }

    bb30: {
        return;
    }

    bb31 (cleanup): {
        drop(_46) -> [return: bb32, unwind terminate];
    }

    bb32 (cleanup): {
        drop(_38) -> [return: bb34, unwind terminate];
    }

    bb33 (cleanup): {
        drop(_28) -> [return: bb34, unwind terminate];
    }

    bb34 (cleanup): {
        drop(_20) -> [return: bb36, unwind terminate];
    }

    bb35 (cleanup): {
        drop(_10) -> [return: bb36, unwind terminate];
    }

    bb36 (cleanup): {
        drop(_2) -> [return: bb37, unwind terminate];
    }

    bb37 (cleanup): {
        resume;
    }

    bb38: {
        goto -> bb13;
    }

    bb39: {
        goto -> bb13;
    }

    bb40: {
        goto -> bb22;
    }

    bb41: {
        goto -> bb22;
    }
}
