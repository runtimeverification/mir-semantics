// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: std::boxed::Box<i32>;
    let _2: i32;
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let _6: &[&str; 2];
    let _7: [&str; 2];
    let mut _8: &[core::fmt::rt::Argument<'_>];
    let _9: &[core::fmt::rt::Argument<'_>; 1];
    let _10: [core::fmt::rt::Argument<'_>; 1];
    let mut _11: core::fmt::rt::Argument<'_>;
    let _12: &i32;
    let mut _13: (&i32, &i32);
    let mut _14: &i32;
    let mut _15: &i32;
    let _16: i32;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: i32;
    let mut _22: i32;
    let _24: !;
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _26: *const i32;
    let mut _27: *const ();
    let mut _28: usize;
    let mut _29: usize;
    let mut _30: usize;
    let mut _31: usize;
    let mut _32: bool;
    scope 1 {
        debug x => _2;
        let _17: &i32;
        let _18: &i32;
        scope 2 {
            debug left_val => _17;
            debug right_val => _18;
            let _23: core::panicking::AssertKind;
            scope 3 {
                debug kind => _23;
            }
        }
    }

    bb0: {
        _1 = Box::<i32>::new(const 100_i32) -> bb1;
    }

    bb1: {
        _26 = (((_1.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32);
        _27 = _26 as *const () (PtrToPtr);
        _28 = _27 as usize (Transmute);
        _29 = AlignOf(i32);
        _30 = Sub(_29, const 1_usize);
        _31 = BitAnd(_28, _30);
        _32 = Eq(_31, const 0_usize);
        assert(_32, "misaligned pointer dereference: address must be a multiple of {} but is {}", _29, _28) -> [success: bb10, unwind unreachable];
    }

    bb2: {
        _10 = [move _11];
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        _3 = _print(move _4) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _14 = &_2;
        _16 = const 100_i32;
        _15 = &_16;
        _13 = (move _14, move _15);
        _17 = (_13.0: &i32);
        _18 = (_13.1: &i32);
        _21 = (*_17);
        _22 = (*_18);
        _20 = Eq(move _21, move _22);
        _19 = Not(move _20);
        switchInt(move _19) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _23 = core::panicking::AssertKind::Eq;
        _25 = Option::<Arguments<'_>>::None;
        _24 = core::panicking::assert_failed::<i32, i32>(move _23, _17, _18, move _25) -> bb8;
    }

    bb6: {
        drop(_1) -> bb7;
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_1) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        resume;
    }

    bb10: {
        _2 = (*_26);
        _7 = [const "", const "\n"];
        _6 = &_7;
        _5 = _6 as &[&str] (Pointer(Unsize));
        _12 = &_2;
        _11 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_12) -> [return: bb2, unwind: bb8];
    }
}
