// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn tuple() -> () {
    let mut _0: ();
    let _1: (i32, i32, i32);
    let mut _4: (&i32, &i32);
    let mut _5: &i32;
    let mut _6: &i32;
    let _7: i32;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: i32;
    let mut _13: i32;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&i32, &i32);
    let mut _18: &i32;
    let mut _19: &i32;
    let _20: i32;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: i32;
    let mut _26: i32;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _32: (&i32, &i32);
    let mut _33: &i32;
    let mut _34: &i32;
    let _35: i32;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: i32;
    let mut _41: i32;
    let _43: !;
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _45: (&i32, &i32);
    let mut _46: &i32;
    let mut _47: &i32;
    let _48: i32;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: i32;
    let mut _54: i32;
    let _56: !;
    let mut _57: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _60: (&i32, &i32);
    let mut _61: &i32;
    let mut _62: &i32;
    let _63: i32;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: i32;
    let mut _69: i32;
    let _71: !;
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _73: (&i32, &i32);
    let mut _74: &i32;
    let mut _75: &i32;
    let _76: i32;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: i32;
    let mut _82: i32;
    let _84: !;
    let mut _85: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _89: (&i32, &i32);
    let mut _90: &i32;
    let mut _91: &i32;
    let _92: i32;
    let mut _95: bool;
    let mut _96: bool;
    let mut _97: i32;
    let mut _98: i32;
    let _100: !;
    let mut _101: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _102: (&i32, &i32);
    let mut _103: &i32;
    let mut _104: &i32;
    let _105: i32;
    let mut _108: bool;
    let mut _109: bool;
    let mut _110: i32;
    let mut _111: i32;
    let _113: !;
    let mut _114: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _115: (&i32, &i32);
    let mut _116: &i32;
    let mut _117: &i32;
    let _118: i32;
    let mut _121: bool;
    let mut _122: bool;
    let mut _123: i32;
    let mut _124: i32;
    let _126: !;
    let mut _127: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _131: (&i32, &i32);
    let mut _132: &i32;
    let mut _133: &i32;
    let _134: i32;
    let mut _137: bool;
    let mut _138: bool;
    let mut _139: i32;
    let mut _140: i32;
    let _142: !;
    let mut _143: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _144: (&i32, &i32);
    let mut _145: &i32;
    let mut _146: &i32;
    let _147: i32;
    let mut _150: bool;
    let mut _151: bool;
    let mut _152: i32;
    let mut _153: i32;
    let _155: !;
    let mut _156: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _157: (&i32, &i32);
    let mut _158: &i32;
    let mut _159: &i32;
    let _160: i32;
    let mut _163: bool;
    let mut _164: bool;
    let mut _165: i32;
    let mut _166: i32;
    let _168: !;
    let mut _169: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _173: (&i32, &i32);
    let mut _174: &i32;
    let mut _175: &i32;
    let _176: i32;
    let mut _179: bool;
    let mut _180: bool;
    let mut _181: i32;
    let mut _182: i32;
    let _184: !;
    let mut _185: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _186: (&i32, &i32);
    let mut _187: &i32;
    let mut _188: &i32;
    let _189: i32;
    let mut _192: bool;
    let mut _193: bool;
    let mut _194: i32;
    let mut _195: i32;
    let _197: !;
    let mut _198: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _199: (&i32, &i32);
    let mut _200: &i32;
    let mut _201: &i32;
    let _202: i32;
    let mut _205: bool;
    let mut _206: bool;
    let mut _207: i32;
    let mut _208: i32;
    let _210: !;
    let mut _211: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _2: i32;
        let _3: i32;
        let _30: i32;
        let _31: i32;
        let _58: i32;
        let _59: i32;
        let _86: i32;
        let _87: i32;
        let _88: i32;
        let _128: i32;
        let _129: i32;
        let _130: i32;
        let _170: i32;
        let _171: i32;
        let _172: i32;
        scope 2 {
            debug a => _2;
            debug b => _3;
            let _8: &i32;
            let _9: &i32;
            let _21: &i32;
            let _22: &i32;
            scope 3 {
                debug left_val => _8;
                debug right_val => _9;
                let _14: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _14;
                }
            }
            scope 5 {
                debug left_val => _21;
                debug right_val => _22;
                let _27: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _27;
                }
            }
        }
        scope 7 {
            debug b => _30;
            debug c => _31;
            let _36: &i32;
            let _37: &i32;
            let _49: &i32;
            let _50: &i32;
            scope 8 {
                debug left_val => _36;
                debug right_val => _37;
                let _42: core::panicking::AssertKind;
                scope 9 {
                    debug kind => _42;
                }
            }
            scope 10 {
                debug left_val => _49;
                debug right_val => _50;
                let _55: core::panicking::AssertKind;
                scope 11 {
                    debug kind => _55;
                }
            }
        }
        scope 12 {
            debug a => _58;
            debug c => _59;
            let _64: &i32;
            let _65: &i32;
            let _77: &i32;
            let _78: &i32;
            scope 13 {
                debug left_val => _64;
                debug right_val => _65;
                let _70: core::panicking::AssertKind;
                scope 14 {
                    debug kind => _70;
                }
            }
            scope 15 {
                debug left_val => _77;
                debug right_val => _78;
                let _83: core::panicking::AssertKind;
                scope 16 {
                    debug kind => _83;
                }
            }
        }
        scope 17 {
            debug a => _86;
            debug b => _87;
            debug c => _88;
            let _93: &i32;
            let _94: &i32;
            let _106: &i32;
            let _107: &i32;
            let _119: &i32;
            let _120: &i32;
            scope 18 {
                debug left_val => _93;
                debug right_val => _94;
                let _99: core::panicking::AssertKind;
                scope 19 {
                    debug kind => _99;
                }
            }
            scope 20 {
                debug left_val => _106;
                debug right_val => _107;
                let _112: core::panicking::AssertKind;
                scope 21 {
                    debug kind => _112;
                }
            }
            scope 22 {
                debug left_val => _119;
                debug right_val => _120;
                let _125: core::panicking::AssertKind;
                scope 23 {
                    debug kind => _125;
                }
            }
        }
        scope 24 {
            debug a => _128;
            debug b => _129;
            debug c => _130;
            let _135: &i32;
            let _136: &i32;
            let _148: &i32;
            let _149: &i32;
            let _161: &i32;
            let _162: &i32;
            scope 25 {
                debug left_val => _135;
                debug right_val => _136;
                let _141: core::panicking::AssertKind;
                scope 26 {
                    debug kind => _141;
                }
            }
            scope 27 {
                debug left_val => _148;
                debug right_val => _149;
                let _154: core::panicking::AssertKind;
                scope 28 {
                    debug kind => _154;
                }
            }
            scope 29 {
                debug left_val => _161;
                debug right_val => _162;
                let _167: core::panicking::AssertKind;
                scope 30 {
                    debug kind => _167;
                }
            }
        }
        scope 31 {
            debug a => _170;
            debug b => _171;
            debug c => _172;
            let _177: &i32;
            let _178: &i32;
            let _190: &i32;
            let _191: &i32;
            let _203: &i32;
            let _204: &i32;
            scope 32 {
                debug left_val => _177;
                debug right_val => _178;
                let _183: core::panicking::AssertKind;
                scope 33 {
                    debug kind => _183;
                }
            }
            scope 34 {
                debug left_val => _190;
                debug right_val => _191;
                let _196: core::panicking::AssertKind;
                scope 35 {
                    debug kind => _196;
                }
            }
            scope 36 {
                debug left_val => _203;
                debug right_val => _204;
                let _209: core::panicking::AssertKind;
                scope 37 {
                    debug kind => _209;
                }
            }
        }
    }

    bb0: {
        _1 = (const 1_i32, const 2_i32, const 3_i32);
        _2 = (_1.0: i32);
        _3 = (_1.1: i32);
        _5 = &_2;
        _7 = const 1_i32;
        _6 = &_7;
        _4 = (move _5, move _6);
        _8 = (_4.0: &i32);
        _9 = (_4.1: &i32);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<i32, i32>(move _14, _8, _9, move _16);
    }

    bb2: {
        _18 = &_3;
        _20 = const 2_i32;
        _19 = &_20;
        _17 = (move _18, move _19);
        _21 = (_17.0: &i32);
        _22 = (_17.1: &i32);
        _25 = (*_21);
        _26 = (*_22);
        _24 = Eq(move _25, move _26);
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<i32, i32>(move _27, _21, _22, move _29);
    }

    bb4: {
        _30 = (_1.1: i32);
        _31 = (_1.2: i32);
        _33 = &_30;
        _35 = const 2_i32;
        _34 = &_35;
        _32 = (move _33, move _34);
        _36 = (_32.0: &i32);
        _37 = (_32.1: &i32);
        _40 = (*_36);
        _41 = (*_37);
        _39 = Eq(move _40, move _41);
        _38 = Not(move _39);
        switchInt(move _38) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _42 = core::panicking::AssertKind::Eq;
        _44 = Option::<Arguments<'_>>::None;
        _43 = core::panicking::assert_failed::<i32, i32>(move _42, _36, _37, move _44);
    }

    bb6: {
        _46 = &_31;
        _48 = const 3_i32;
        _47 = &_48;
        _45 = (move _46, move _47);
        _49 = (_45.0: &i32);
        _50 = (_45.1: &i32);
        _53 = (*_49);
        _54 = (*_50);
        _52 = Eq(move _53, move _54);
        _51 = Not(move _52);
        switchInt(move _51) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _55 = core::panicking::AssertKind::Eq;
        _57 = Option::<Arguments<'_>>::None;
        _56 = core::panicking::assert_failed::<i32, i32>(move _55, _49, _50, move _57);
    }

    bb8: {
        _58 = (_1.0: i32);
        _59 = (_1.2: i32);
        _61 = &_58;
        _63 = const 1_i32;
        _62 = &_63;
        _60 = (move _61, move _62);
        _64 = (_60.0: &i32);
        _65 = (_60.1: &i32);
        _68 = (*_64);
        _69 = (*_65);
        _67 = Eq(move _68, move _69);
        _66 = Not(move _67);
        switchInt(move _66) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _70 = core::panicking::AssertKind::Eq;
        _72 = Option::<Arguments<'_>>::None;
        _71 = core::panicking::assert_failed::<i32, i32>(move _70, _64, _65, move _72);
    }

    bb10: {
        _74 = &_59;
        _76 = const 3_i32;
        _75 = &_76;
        _73 = (move _74, move _75);
        _77 = (_73.0: &i32);
        _78 = (_73.1: &i32);
        _81 = (*_77);
        _82 = (*_78);
        _80 = Eq(move _81, move _82);
        _79 = Not(move _80);
        switchInt(move _79) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _83 = core::panicking::AssertKind::Eq;
        _85 = Option::<Arguments<'_>>::None;
        _84 = core::panicking::assert_failed::<i32, i32>(move _83, _77, _78, move _85);
    }

    bb12: {
        _86 = (_1.0: i32);
        _87 = (_1.1: i32);
        _88 = (_1.2: i32);
        _90 = &_86;
        _92 = const 1_i32;
        _91 = &_92;
        _89 = (move _90, move _91);
        _93 = (_89.0: &i32);
        _94 = (_89.1: &i32);
        _97 = (*_93);
        _98 = (*_94);
        _96 = Eq(move _97, move _98);
        _95 = Not(move _96);
        switchInt(move _95) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _99 = core::panicking::AssertKind::Eq;
        _101 = Option::<Arguments<'_>>::None;
        _100 = core::panicking::assert_failed::<i32, i32>(move _99, _93, _94, move _101);
    }

    bb14: {
        _103 = &_87;
        _105 = const 2_i32;
        _104 = &_105;
        _102 = (move _103, move _104);
        _106 = (_102.0: &i32);
        _107 = (_102.1: &i32);
        _110 = (*_106);
        _111 = (*_107);
        _109 = Eq(move _110, move _111);
        _108 = Not(move _109);
        switchInt(move _108) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _112 = core::panicking::AssertKind::Eq;
        _114 = Option::<Arguments<'_>>::None;
        _113 = core::panicking::assert_failed::<i32, i32>(move _112, _106, _107, move _114);
    }

    bb16: {
        _116 = &_88;
        _118 = const 3_i32;
        _117 = &_118;
        _115 = (move _116, move _117);
        _119 = (_115.0: &i32);
        _120 = (_115.1: &i32);
        _123 = (*_119);
        _124 = (*_120);
        _122 = Eq(move _123, move _124);
        _121 = Not(move _122);
        switchInt(move _121) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _125 = core::panicking::AssertKind::Eq;
        _127 = Option::<Arguments<'_>>::None;
        _126 = core::panicking::assert_failed::<i32, i32>(move _125, _119, _120, move _127);
    }

    bb18: {
        _128 = (_1.0: i32);
        _129 = (_1.1: i32);
        _130 = (_1.2: i32);
        _132 = &_128;
        _134 = const 1_i32;
        _133 = &_134;
        _131 = (move _132, move _133);
        _135 = (_131.0: &i32);
        _136 = (_131.1: &i32);
        _139 = (*_135);
        _140 = (*_136);
        _138 = Eq(move _139, move _140);
        _137 = Not(move _138);
        switchInt(move _137) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _141 = core::panicking::AssertKind::Eq;
        _143 = Option::<Arguments<'_>>::None;
        _142 = core::panicking::assert_failed::<i32, i32>(move _141, _135, _136, move _143);
    }

    bb20: {
        _145 = &_129;
        _147 = const 2_i32;
        _146 = &_147;
        _144 = (move _145, move _146);
        _148 = (_144.0: &i32);
        _149 = (_144.1: &i32);
        _152 = (*_148);
        _153 = (*_149);
        _151 = Eq(move _152, move _153);
        _150 = Not(move _151);
        switchInt(move _150) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _154 = core::panicking::AssertKind::Eq;
        _156 = Option::<Arguments<'_>>::None;
        _155 = core::panicking::assert_failed::<i32, i32>(move _154, _148, _149, move _156);
    }

    bb22: {
        _158 = &_130;
        _160 = const 3_i32;
        _159 = &_160;
        _157 = (move _158, move _159);
        _161 = (_157.0: &i32);
        _162 = (_157.1: &i32);
        _165 = (*_161);
        _166 = (*_162);
        _164 = Eq(move _165, move _166);
        _163 = Not(move _164);
        switchInt(move _163) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _167 = core::panicking::AssertKind::Eq;
        _169 = Option::<Arguments<'_>>::None;
        _168 = core::panicking::assert_failed::<i32, i32>(move _167, _161, _162, move _169);
    }

    bb24: {
        _170 = (_1.0: i32);
        _171 = (_1.1: i32);
        _172 = (_1.2: i32);
        _174 = &_170;
        _176 = const 1_i32;
        _175 = &_176;
        _173 = (move _174, move _175);
        _177 = (_173.0: &i32);
        _178 = (_173.1: &i32);
        _181 = (*_177);
        _182 = (*_178);
        _180 = Eq(move _181, move _182);
        _179 = Not(move _180);
        switchInt(move _179) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _183 = core::panicking::AssertKind::Eq;
        _185 = Option::<Arguments<'_>>::None;
        _184 = core::panicking::assert_failed::<i32, i32>(move _183, _177, _178, move _185);
    }

    bb26: {
        _187 = &_171;
        _189 = const 2_i32;
        _188 = &_189;
        _186 = (move _187, move _188);
        _190 = (_186.0: &i32);
        _191 = (_186.1: &i32);
        _194 = (*_190);
        _195 = (*_191);
        _193 = Eq(move _194, move _195);
        _192 = Not(move _193);
        switchInt(move _192) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _196 = core::panicking::AssertKind::Eq;
        _198 = Option::<Arguments<'_>>::None;
        _197 = core::panicking::assert_failed::<i32, i32>(move _196, _190, _191, move _198);
    }

    bb28: {
        _200 = &_172;
        _202 = const 3_i32;
        _201 = &_202;
        _199 = (move _200, move _201);
        _203 = (_199.0: &i32);
        _204 = (_199.1: &i32);
        _207 = (*_203);
        _208 = (*_204);
        _206 = Eq(move _207, move _208);
        _205 = Not(move _206);
        switchInt(move _205) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _209 = core::panicking::AssertKind::Eq;
        _211 = Option::<Arguments<'_>>::None;
        _210 = core::panicking::assert_failed::<i32, i32>(move _209, _203, _204, move _211);
    }

    bb30: {
        return;
    }
}

fn tuple_struct() -> () {
    let mut _0: ();
    let _1: tuple_struct::S;
    let mut _4: (&u8, &u8);
    let mut _5: &u8;
    let mut _6: &u8;
    let _7: u8;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: u8;
    let mut _13: u8;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&u8, &u8);
    let mut _18: &u8;
    let mut _19: &u8;
    let _20: u8;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: u8;
    let mut _26: u8;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _32: (&u8, &u8);
    let mut _33: &u8;
    let mut _34: &u8;
    let _35: u8;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: u8;
    let mut _41: u8;
    let _43: !;
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _45: (&u8, &u8);
    let mut _46: &u8;
    let mut _47: &u8;
    let _48: u8;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: u8;
    let mut _54: u8;
    let _56: !;
    let mut _57: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _60: (&u8, &u8);
    let mut _61: &u8;
    let mut _62: &u8;
    let _63: u8;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: u8;
    let mut _69: u8;
    let _71: !;
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _73: (&u8, &u8);
    let mut _74: &u8;
    let mut _75: &u8;
    let _76: u8;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: u8;
    let mut _82: u8;
    let _84: !;
    let mut _85: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _89: (&u8, &u8);
    let mut _90: &u8;
    let mut _91: &u8;
    let _92: u8;
    let mut _95: bool;
    let mut _96: bool;
    let mut _97: u8;
    let mut _98: u8;
    let _100: !;
    let mut _101: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _102: (&u8, &u8);
    let mut _103: &u8;
    let mut _104: &u8;
    let _105: u8;
    let mut _108: bool;
    let mut _109: bool;
    let mut _110: u8;
    let mut _111: u8;
    let _113: !;
    let mut _114: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _115: (&u8, &u8);
    let mut _116: &u8;
    let mut _117: &u8;
    let _118: u8;
    let mut _121: bool;
    let mut _122: bool;
    let mut _123: u8;
    let mut _124: u8;
    let _126: !;
    let mut _127: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _131: (&u8, &u8);
    let mut _132: &u8;
    let mut _133: &u8;
    let _134: u8;
    let mut _137: bool;
    let mut _138: bool;
    let mut _139: u8;
    let mut _140: u8;
    let _142: !;
    let mut _143: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _144: (&u8, &u8);
    let mut _145: &u8;
    let mut _146: &u8;
    let _147: u8;
    let mut _150: bool;
    let mut _151: bool;
    let mut _152: u8;
    let mut _153: u8;
    let _155: !;
    let mut _156: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _157: (&u8, &u8);
    let mut _158: &u8;
    let mut _159: &u8;
    let _160: u8;
    let mut _163: bool;
    let mut _164: bool;
    let mut _165: u8;
    let mut _166: u8;
    let _168: !;
    let mut _169: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _173: (&u8, &u8);
    let mut _174: &u8;
    let mut _175: &u8;
    let _176: u8;
    let mut _179: bool;
    let mut _180: bool;
    let mut _181: u8;
    let mut _182: u8;
    let _184: !;
    let mut _185: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _186: (&u8, &u8);
    let mut _187: &u8;
    let mut _188: &u8;
    let _189: u8;
    let mut _192: bool;
    let mut _193: bool;
    let mut _194: u8;
    let mut _195: u8;
    let _197: !;
    let mut _198: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _199: (&u8, &u8);
    let mut _200: &u8;
    let mut _201: &u8;
    let _202: u8;
    let mut _205: bool;
    let mut _206: bool;
    let mut _207: u8;
    let mut _208: u8;
    let _210: !;
    let mut _211: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _2: u8;
        let _3: u8;
        let _30: u8;
        let _31: u8;
        let _58: u8;
        let _59: u8;
        let _86: u8;
        let _87: u8;
        let _88: u8;
        let _128: u8;
        let _129: u8;
        let _130: u8;
        let _170: u8;
        let _171: u8;
        let _172: u8;
        scope 2 {
            debug a => _2;
            debug b => _3;
            let _8: &u8;
            let _9: &u8;
            let _21: &u8;
            let _22: &u8;
            scope 3 {
                debug left_val => _8;
                debug right_val => _9;
                let _14: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _14;
                }
            }
            scope 5 {
                debug left_val => _21;
                debug right_val => _22;
                let _27: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _27;
                }
            }
        }
        scope 7 {
            debug b => _30;
            debug c => _31;
            let _36: &u8;
            let _37: &u8;
            let _49: &u8;
            let _50: &u8;
            scope 8 {
                debug left_val => _36;
                debug right_val => _37;
                let _42: core::panicking::AssertKind;
                scope 9 {
                    debug kind => _42;
                }
            }
            scope 10 {
                debug left_val => _49;
                debug right_val => _50;
                let _55: core::panicking::AssertKind;
                scope 11 {
                    debug kind => _55;
                }
            }
        }
        scope 12 {
            debug a => _58;
            debug c => _59;
            let _64: &u8;
            let _65: &u8;
            let _77: &u8;
            let _78: &u8;
            scope 13 {
                debug left_val => _64;
                debug right_val => _65;
                let _70: core::panicking::AssertKind;
                scope 14 {
                    debug kind => _70;
                }
            }
            scope 15 {
                debug left_val => _77;
                debug right_val => _78;
                let _83: core::panicking::AssertKind;
                scope 16 {
                    debug kind => _83;
                }
            }
        }
        scope 17 {
            debug a => _86;
            debug b => _87;
            debug c => _88;
            let _93: &u8;
            let _94: &u8;
            let _106: &u8;
            let _107: &u8;
            let _119: &u8;
            let _120: &u8;
            scope 18 {
                debug left_val => _93;
                debug right_val => _94;
                let _99: core::panicking::AssertKind;
                scope 19 {
                    debug kind => _99;
                }
            }
            scope 20 {
                debug left_val => _106;
                debug right_val => _107;
                let _112: core::panicking::AssertKind;
                scope 21 {
                    debug kind => _112;
                }
            }
            scope 22 {
                debug left_val => _119;
                debug right_val => _120;
                let _125: core::panicking::AssertKind;
                scope 23 {
                    debug kind => _125;
                }
            }
        }
        scope 24 {
            debug a => _128;
            debug b => _129;
            debug c => _130;
            let _135: &u8;
            let _136: &u8;
            let _148: &u8;
            let _149: &u8;
            let _161: &u8;
            let _162: &u8;
            scope 25 {
                debug left_val => _135;
                debug right_val => _136;
                let _141: core::panicking::AssertKind;
                scope 26 {
                    debug kind => _141;
                }
            }
            scope 27 {
                debug left_val => _148;
                debug right_val => _149;
                let _154: core::panicking::AssertKind;
                scope 28 {
                    debug kind => _154;
                }
            }
            scope 29 {
                debug left_val => _161;
                debug right_val => _162;
                let _167: core::panicking::AssertKind;
                scope 30 {
                    debug kind => _167;
                }
            }
        }
        scope 31 {
            debug a => _170;
            debug b => _171;
            debug c => _172;
            let _177: &u8;
            let _178: &u8;
            let _190: &u8;
            let _191: &u8;
            let _203: &u8;
            let _204: &u8;
            scope 32 {
                debug left_val => _177;
                debug right_val => _178;
                let _183: core::panicking::AssertKind;
                scope 33 {
                    debug kind => _183;
                }
            }
            scope 34 {
                debug left_val => _190;
                debug right_val => _191;
                let _196: core::panicking::AssertKind;
                scope 35 {
                    debug kind => _196;
                }
            }
            scope 36 {
                debug left_val => _203;
                debug right_val => _204;
                let _209: core::panicking::AssertKind;
                scope 37 {
                    debug kind => _209;
                }
            }
        }
    }

    bb0: {
        _1 = S(const 1_u8, const 2_u8, const 3_u8);
        _2 = (_1.0: u8);
        _3 = (_1.1: u8);
        _5 = &_2;
        _7 = const 1_u8;
        _6 = &_7;
        _4 = (move _5, move _6);
        _8 = (_4.0: &u8);
        _9 = (_4.1: &u8);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<u8, u8>(move _14, _8, _9, move _16);
    }

    bb2: {
        _18 = &_3;
        _20 = const 2_u8;
        _19 = &_20;
        _17 = (move _18, move _19);
        _21 = (_17.0: &u8);
        _22 = (_17.1: &u8);
        _25 = (*_21);
        _26 = (*_22);
        _24 = Eq(move _25, move _26);
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<u8, u8>(move _27, _21, _22, move _29);
    }

    bb4: {
        _30 = (_1.1: u8);
        _31 = (_1.2: u8);
        _33 = &_30;
        _35 = const 2_u8;
        _34 = &_35;
        _32 = (move _33, move _34);
        _36 = (_32.0: &u8);
        _37 = (_32.1: &u8);
        _40 = (*_36);
        _41 = (*_37);
        _39 = Eq(move _40, move _41);
        _38 = Not(move _39);
        switchInt(move _38) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _42 = core::panicking::AssertKind::Eq;
        _44 = Option::<Arguments<'_>>::None;
        _43 = core::panicking::assert_failed::<u8, u8>(move _42, _36, _37, move _44);
    }

    bb6: {
        _46 = &_31;
        _48 = const 3_u8;
        _47 = &_48;
        _45 = (move _46, move _47);
        _49 = (_45.0: &u8);
        _50 = (_45.1: &u8);
        _53 = (*_49);
        _54 = (*_50);
        _52 = Eq(move _53, move _54);
        _51 = Not(move _52);
        switchInt(move _51) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _55 = core::panicking::AssertKind::Eq;
        _57 = Option::<Arguments<'_>>::None;
        _56 = core::panicking::assert_failed::<u8, u8>(move _55, _49, _50, move _57);
    }

    bb8: {
        _58 = (_1.0: u8);
        _59 = (_1.2: u8);
        _61 = &_58;
        _63 = const 1_u8;
        _62 = &_63;
        _60 = (move _61, move _62);
        _64 = (_60.0: &u8);
        _65 = (_60.1: &u8);
        _68 = (*_64);
        _69 = (*_65);
        _67 = Eq(move _68, move _69);
        _66 = Not(move _67);
        switchInt(move _66) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _70 = core::panicking::AssertKind::Eq;
        _72 = Option::<Arguments<'_>>::None;
        _71 = core::panicking::assert_failed::<u8, u8>(move _70, _64, _65, move _72);
    }

    bb10: {
        _74 = &_59;
        _76 = const 3_u8;
        _75 = &_76;
        _73 = (move _74, move _75);
        _77 = (_73.0: &u8);
        _78 = (_73.1: &u8);
        _81 = (*_77);
        _82 = (*_78);
        _80 = Eq(move _81, move _82);
        _79 = Not(move _80);
        switchInt(move _79) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _83 = core::panicking::AssertKind::Eq;
        _85 = Option::<Arguments<'_>>::None;
        _84 = core::panicking::assert_failed::<u8, u8>(move _83, _77, _78, move _85);
    }

    bb12: {
        _86 = (_1.0: u8);
        _87 = (_1.1: u8);
        _88 = (_1.2: u8);
        _90 = &_86;
        _92 = const 1_u8;
        _91 = &_92;
        _89 = (move _90, move _91);
        _93 = (_89.0: &u8);
        _94 = (_89.1: &u8);
        _97 = (*_93);
        _98 = (*_94);
        _96 = Eq(move _97, move _98);
        _95 = Not(move _96);
        switchInt(move _95) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _99 = core::panicking::AssertKind::Eq;
        _101 = Option::<Arguments<'_>>::None;
        _100 = core::panicking::assert_failed::<u8, u8>(move _99, _93, _94, move _101);
    }

    bb14: {
        _103 = &_87;
        _105 = const 2_u8;
        _104 = &_105;
        _102 = (move _103, move _104);
        _106 = (_102.0: &u8);
        _107 = (_102.1: &u8);
        _110 = (*_106);
        _111 = (*_107);
        _109 = Eq(move _110, move _111);
        _108 = Not(move _109);
        switchInt(move _108) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _112 = core::panicking::AssertKind::Eq;
        _114 = Option::<Arguments<'_>>::None;
        _113 = core::panicking::assert_failed::<u8, u8>(move _112, _106, _107, move _114);
    }

    bb16: {
        _116 = &_88;
        _118 = const 3_u8;
        _117 = &_118;
        _115 = (move _116, move _117);
        _119 = (_115.0: &u8);
        _120 = (_115.1: &u8);
        _123 = (*_119);
        _124 = (*_120);
        _122 = Eq(move _123, move _124);
        _121 = Not(move _122);
        switchInt(move _121) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _125 = core::panicking::AssertKind::Eq;
        _127 = Option::<Arguments<'_>>::None;
        _126 = core::panicking::assert_failed::<u8, u8>(move _125, _119, _120, move _127);
    }

    bb18: {
        _128 = (_1.0: u8);
        _129 = (_1.1: u8);
        _130 = (_1.2: u8);
        _132 = &_128;
        _134 = const 1_u8;
        _133 = &_134;
        _131 = (move _132, move _133);
        _135 = (_131.0: &u8);
        _136 = (_131.1: &u8);
        _139 = (*_135);
        _140 = (*_136);
        _138 = Eq(move _139, move _140);
        _137 = Not(move _138);
        switchInt(move _137) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _141 = core::panicking::AssertKind::Eq;
        _143 = Option::<Arguments<'_>>::None;
        _142 = core::panicking::assert_failed::<u8, u8>(move _141, _135, _136, move _143);
    }

    bb20: {
        _145 = &_129;
        _147 = const 2_u8;
        _146 = &_147;
        _144 = (move _145, move _146);
        _148 = (_144.0: &u8);
        _149 = (_144.1: &u8);
        _152 = (*_148);
        _153 = (*_149);
        _151 = Eq(move _152, move _153);
        _150 = Not(move _151);
        switchInt(move _150) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _154 = core::panicking::AssertKind::Eq;
        _156 = Option::<Arguments<'_>>::None;
        _155 = core::panicking::assert_failed::<u8, u8>(move _154, _148, _149, move _156);
    }

    bb22: {
        _158 = &_130;
        _160 = const 3_u8;
        _159 = &_160;
        _157 = (move _158, move _159);
        _161 = (_157.0: &u8);
        _162 = (_157.1: &u8);
        _165 = (*_161);
        _166 = (*_162);
        _164 = Eq(move _165, move _166);
        _163 = Not(move _164);
        switchInt(move _163) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _167 = core::panicking::AssertKind::Eq;
        _169 = Option::<Arguments<'_>>::None;
        _168 = core::panicking::assert_failed::<u8, u8>(move _167, _161, _162, move _169);
    }

    bb24: {
        _170 = (_1.0: u8);
        _171 = (_1.1: u8);
        _172 = (_1.2: u8);
        _174 = &_170;
        _176 = const 1_u8;
        _175 = &_176;
        _173 = (move _174, move _175);
        _177 = (_173.0: &u8);
        _178 = (_173.1: &u8);
        _181 = (*_177);
        _182 = (*_178);
        _180 = Eq(move _181, move _182);
        _179 = Not(move _180);
        switchInt(move _179) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _183 = core::panicking::AssertKind::Eq;
        _185 = Option::<Arguments<'_>>::None;
        _184 = core::panicking::assert_failed::<u8, u8>(move _183, _177, _178, move _185);
    }

    bb26: {
        _187 = &_171;
        _189 = const 2_u8;
        _188 = &_189;
        _186 = (move _187, move _188);
        _190 = (_186.0: &u8);
        _191 = (_186.1: &u8);
        _194 = (*_190);
        _195 = (*_191);
        _193 = Eq(move _194, move _195);
        _192 = Not(move _193);
        switchInt(move _192) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _196 = core::panicking::AssertKind::Eq;
        _198 = Option::<Arguments<'_>>::None;
        _197 = core::panicking::assert_failed::<u8, u8>(move _196, _190, _191, move _198);
    }

    bb28: {
        _200 = &_172;
        _202 = const 3_u8;
        _201 = &_202;
        _199 = (move _200, move _201);
        _203 = (_199.0: &u8);
        _204 = (_199.1: &u8);
        _207 = (*_203);
        _208 = (*_204);
        _206 = Eq(move _207, move _208);
        _205 = Not(move _206);
        switchInt(move _205) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _209 = core::panicking::AssertKind::Eq;
        _211 = Option::<Arguments<'_>>::None;
        _210 = core::panicking::assert_failed::<u8, u8>(move _209, _203, _204, move _211);
    }

    bb30: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();

    bb0: {
        _1 = tuple() -> bb1;
    }

    bb1: {
        _2 = tuple_struct() -> bb2;
    }

    bb2: {
        return;
    }
}

fn S(_1: u8, _2: u8, _3: u8) -> S {
    let mut _0: tuple_struct::S;

    bb0: {
        _0 = S(move _1, move _2, move _3);
        return;
    }
}

// MIR FOR CTFE
fn S(_1: u8, _2: u8, _3: u8) -> S {
    let mut _0: tuple_struct::S;

    bb0: {
        _0 = S(move _1, move _2, move _3);
        return;
    }
}
