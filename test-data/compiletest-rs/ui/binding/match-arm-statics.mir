// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/binding/match-arm-statics.rs:6:10: 6:19>::eq(_1: &NewBool, _2: &NewBool) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: bool;

    bb0: {
        _3 = ((*_1).0: bool);
        _4 = ((*_2).0: bool);
        _0 = Eq(move _3, move _4);
        return;
    }
}

fn <impl at ui/binding/match-arm-statics.rs:6:21: 6:23>::assert_receiver_is_total_eq(_1: &NewBool) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn <impl at ui/binding/match-arm-statics.rs:9:10: 9:19>::eq(_1: &Direction, _2: &Direction) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _0 = Eq(_3, _4);
        return;
    }
}

fn <impl at ui/binding/match-arm-statics.rs:9:21: 9:23>::assert_receiver_is_total_eq(_1: &Direction) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/binding/match-arm-statics.rs:17:10: 17:19>::eq(_1: &Foo, _2: &Foo) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: &std::option::Option<Direction>;
    let mut _5: &std::option::Option<Direction>;
    let mut _6: bool;
    let mut _7: &NewBool;
    let mut _8: &NewBool;

    bb0: {
        _4 = &((*_1).0: std::option::Option<Direction>);
        _5 = &((*_2).0: std::option::Option<Direction>);
        _3 = <Option<Direction> as PartialEq>::eq(move _4, move _5) -> bb4;
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _7 = &((*_1).1: NewBool);
        _8 = &((*_2).1: NewBool);
        _6 = <NewBool as PartialEq>::eq(move _7, move _8) -> bb5;
    }

    bb3: {
        return;
    }

    bb4: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2];
    }

    bb5: {
        _0 = move _6;
        goto -> bb3;
    }
}

fn <impl at ui/binding/match-arm-statics.rs:17:21: 17:23>::assert_receiver_is_total_eq(_1: &Foo) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        return;
    }
}

fn <impl at ui/binding/match-arm-statics.rs:23:10: 23:19>::eq(_1: &EnumWithStructVariants, _2: &EnumWithStructVariants) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: (&EnumWithStructVariants, &EnumWithStructVariants);
    let mut _8: isize;
    let mut _9: isize;
    let mut _10: isize;
    let mut _13: bool;
    let mut _14: bool;
    let mut _17: &EnumWithStructVariants;
    let mut _18: &EnumWithStructVariants;
    let mut _19: &EnumWithStructVariants;
    let mut _20: &EnumWithStructVariants;
    let mut _21: &EnumWithStructVariants;
    let mut _22: &EnumWithStructVariants;
    let mut _23: &EnumWithStructVariants;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
            let _11: &bool;
            let _12: &bool;
            let _15: &Direction;
            let _16: &Direction;
            scope 3 {
                debug __self_0 => _11;
                debug __arg1_0 => _12;
            }
            scope 4 {
                debug __self_0 => _15;
                debug __arg1_0 => _16;
            }
            scope 5 {
            }
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _5 = Eq(_3, _4);
        switchInt(move _5) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _7 = (_1, _2);
        _17 = deref_copy (_7.0: &EnumWithStructVariants);
        _10 = discriminant((*_17));
        switchInt(move _10) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb3: {
        return;
    }

    bb4: {
        _18 = deref_copy (_7.1: &EnumWithStructVariants);
        _8 = discriminant((*_18));
        switchInt(move _8) -> [0: bb7, otherwise: bb5];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _19 = deref_copy (_7.1: &EnumWithStructVariants);
        _9 = discriminant((*_19));
        switchInt(move _9) -> [1: bb8, otherwise: bb5];
    }

    bb7: {
        _20 = deref_copy (_7.0: &EnumWithStructVariants);
        _11 = &(((*_20) as Variant1).0: bool);
        _21 = deref_copy (_7.1: &EnumWithStructVariants);
        _12 = &(((*_21) as Variant1).0: bool);
        _13 = (*_11);
        _14 = (*_12);
        _6 = Eq(move _13, move _14);
        goto -> bb9;
    }

    bb8: {
        _22 = deref_copy (_7.0: &EnumWithStructVariants);
        _15 = &(((*_22) as Variant2).0: Direction);
        _23 = deref_copy (_7.1: &EnumWithStructVariants);
        _16 = &(((*_23) as Variant2).0: Direction);
        _6 = <Direction as PartialEq>::eq(_15, _16) -> bb9;
    }

    bb9: {
        _0 = move _6;
        goto -> bb3;
    }
}

fn <impl at ui/binding/match-arm-statics.rs:23:21: 23:23>::assert_receiver_is_total_eq(_1: &EnumWithStructVariants) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        return;
    }
}

const TRUE_TRUE: (bool, bool) = {
    let mut _0: (bool, bool);

    bb0: {
        _0 = (const true, const true);
        return;
    }
}

const NONE: Option<Direction> = {
    let mut _0: std::option::Option<Direction>;

    bb0: {
        _0 = Option::<Direction>::None;
        return;
    }
}

const EAST: Direction = {
    let mut _0: Direction;

    bb0: {
        _0 = Direction::East;
        return;
    }
}

const NEW_FALSE: NewBool = {
    let mut _0: NewBool;

    bb0: {
        _0 = NewBool(const false);
        return;
    }
}

const STATIC_FOO: Foo = {
    let mut _0: Foo;
    let mut _1: std::option::Option<Direction>;
    let mut _2: Direction;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = Direction::South;
        _1 = Option::<Direction>::Some(move _2);
        StorageDead(_2);
        _0 = Foo { bar: move _1, baz: const _ };
        StorageDead(_1);
        return;
    }
}

const VARIANT2_NORTH: EnumWithStructVariants = {
    let mut _0: EnumWithStructVariants;
    let mut _1: Direction;

    bb0: {
        StorageLive(_1);
        _1 = Direction::North;
        _0 = EnumWithStructVariants::Variant2 { dir: move _1 };
        StorageDead(_1);
        return;
    }
}

fn glfw::<impl at ui/binding/match-arm-statics.rs:40:20: 40:25>::clone(_1: &InputState) -> InputState {
    debug self => _1;
    let mut _0: glfw::InputState;
    scope 1 {
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn glfw::<impl at ui/binding/match-arm-statics.rs:40:27: 40:36>::eq(_1: &InputState, _2: &InputState) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: usize;
    let mut _4: usize;

    bb0: {
        _3 = ((*_1).0: usize);
        _4 = ((*_2).0: usize);
        _0 = Eq(move _3, move _4);
        return;
    }
}

fn glfw::<impl at ui/binding/match-arm-statics.rs:40:38: 40:40>::assert_receiver_is_total_eq(_1: &InputState) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

const RELEASE: InputState = {
    let mut _0: glfw::InputState;

    bb0: {
        _0 = InputState(const 0_usize);
        return;
    }
}

const PRESS: InputState = {
    let mut _0: glfw::InputState;

    bb0: {
        _0 = InputState(const 1_usize);
        return;
    }
}

const REPEAT: InputState = {
    let mut _0: glfw::InputState;

    bb0: {
        _0 = InputState(const 2_usize);
        return;
    }
}

fn issue_6533() -> () {
    let mut _0: ();
    let mut _1: (&&str, &&str);
    let mut _2: &&str;
    let _3: &str;
    let mut _4: &&str;
    let _5: &str;
    let _6: &&str;
    let _7: &&str;
    let mut _8: bool;
    let mut _9: bool;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: (&&str, &&str);
    let mut _14: &&str;
    let _15: &str;
    let mut _16: &&str;
    let _17: &str;
    let _18: &&str;
    let _19: &&str;
    let mut _20: bool;
    let mut _21: bool;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: (&&str, &&str);
    let mut _26: &&str;
    let _27: &str;
    let mut _28: &&str;
    let _29: &str;
    let _30: &&str;
    let _31: &&str;
    let mut _32: bool;
    let mut _33: bool;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }
    scope 3 {
        debug left_val => _18;
        debug right_val => _19;
        let _22: core::panicking::AssertKind;
        scope 4 {
            debug kind => _22;
        }
    }
    scope 5 {
        debug left_val => _30;
        debug right_val => _31;
        let _34: core::panicking::AssertKind;
        scope 6 {
            debug kind => _34;
        }
    }

    bb0: {
        _3 = action_to_str(const _) -> bb1;
    }

    bb1: {
        _2 = &_3;
        _5 = const "Released";
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &&str);
        _7 = (_1.1: &&str);
        _9 = <&str as PartialEq>::eq(_6, _7) -> bb2;
    }

    bb2: {
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<&str, &str>(move _10, _6, _7, move _12);
    }

    bb4: {
        _15 = action_to_str(const _) -> bb5;
    }

    bb5: {
        _14 = &_15;
        _17 = const "Pressed";
        _16 = &_17;
        _13 = (move _14, move _16);
        _18 = (_13.0: &&str);
        _19 = (_13.1: &&str);
        _21 = <&str as PartialEq>::eq(_18, _19) -> bb6;
    }

    bb6: {
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<&str, &str>(move _22, _18, _19, move _24);
    }

    bb8: {
        _27 = action_to_str(const _) -> bb9;
    }

    bb9: {
        _26 = &_27;
        _29 = const "Repeated";
        _28 = &_29;
        _25 = (move _26, move _28);
        _30 = (_25.0: &&str);
        _31 = (_25.1: &&str);
        _33 = <&str as PartialEq>::eq(_30, _31) -> bb10;
    }

    bb10: {
        _32 = Not(move _33);
        switchInt(move _32) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = core::panicking::assert_failed::<&str, &str>(move _34, _30, _31, move _36);
    }

    bb12: {
        return;
    }
}

fn action_to_str(_1: InputState) -> &str {
    debug state => _1;
    let mut _0: &str;

    bb0: {
        switchInt((_1.0: usize)) -> [0: bb2, 1: bb3, 2: bb4, otherwise: bb1];
    }

    bb1: {
        _0 = const "Unknown";
        goto -> bb5;
    }

    bb2: {
        _0 = const "Released";
        goto -> bb5;
    }

    bb3: {
        _0 = const "Pressed";
        goto -> bb5;
    }

    bb4: {
        _0 = const "Repeated";
        goto -> bb5;
    }

    bb5: {
        return;
    }
}

fn issue_13626() -> () {
    let mut _0: ();
    let mut _1: [u8; 1];
    let mut _2: !;

    bb0: {
        _1 = [const 1_u8];
        switchInt(_1[0 of 1]) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        return;
    }

    bb2: {
        _2 = core::panicking::panic(const "internal error: entered unreachable code");
    }
}

const VAL: [u8; 1] = {
    let mut _0: [u8; 1];

    bb0: {
        _0 = [const 0_u8];
        return;
    }
}

VAL::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

fn issue_14576() -> () {
    let mut _0: ();
    let mut _1: (i32, i32);
    let mut _2: !;
    let mut _3: !;
    let mut _4: (&i32, &i32);
    let mut _5: &i32;
    let _6: i32;
    let mut _7: issue_14576::C;
    let mut _8: isize;
    let mut _9: &i32;
    let _10: i32;
    let _11: &i32;
    let _12: &i32;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: i32;
    let mut _16: i32;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _20: (&i32, &i32);
    let mut _21: &i32;
    let _22: i32;
    let mut _23: issue_14576::G;
    let mut _24: isize;
    let mut _25: &i32;
    let _26: i32;
    let _27: &i32;
    let _28: &i32;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: i32;
    let mut _32: i32;
    let _34: !;
    let mut _35: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _11;
        debug right_val => _12;
        let _17: core::panicking::AssertKind;
        scope 2 {
            debug kind => _17;
        }
    }
    scope 3 {
        debug left_val => _27;
        debug right_val => _28;
        let _33: core::panicking::AssertKind;
        scope 4 {
            debug kind => _33;
        }
    }

    bb0: {
        _1 = (const 1_i32, const 1_i32);
        switchInt((_1.0: i32)) -> [0: bb1, 1: bb3, otherwise: bb2];
    }

    bb1: {
        switchInt((_1.1: i32)) -> [0: bb4, otherwise: bb2];
    }

    bb2: {
        _3 = core::panicking::panic(const "internal error: entered unreachable code");
    }

    bb3: {
        switchInt((_1.1: i32)) -> [1: bb5, otherwise: bb2];
    }

    bb4: {
        _2 = core::panicking::panic(const "internal error: entered unreachable code");
    }

    bb5: {
        _7 = C::D;
        _8 = discriminant(_7);
        switchInt(move _8) -> [3: bb7, otherwise: bb6];
    }

    bb6: {
        _6 = const 2_i32;
        goto -> bb8;
    }

    bb7: {
        _6 = const 1_i32;
        goto -> bb8;
    }

    bb8: {
        _5 = &_6;
        _10 = const 1_i32;
        _9 = &_10;
        _4 = (move _5, move _9);
        _11 = (_4.0: &i32);
        _12 = (_4.1: &i32);
        _15 = (*_11);
        _16 = (*_12);
        _14 = Eq(move _15, move _16);
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<i32, i32>(move _17, _11, _12, move _19);
    }

    bb10: {
        _23 = G::I;
        _24 = discriminant(_23);
        switchInt(move _24) -> [5: bb12, otherwise: bb11];
    }

    bb11: {
        _22 = const 2_i32;
        goto -> bb13;
    }

    bb12: {
        _22 = const 1_i32;
        goto -> bb13;
    }

    bb13: {
        _21 = &_22;
        _26 = const 1_i32;
        _25 = &_26;
        _20 = (move _21, move _25);
        _27 = (_20.0: &i32);
        _28 = (_20.1: &i32);
        _31 = (*_27);
        _32 = (*_28);
        _30 = Eq(move _31, move _32);
        _29 = Not(move _30);
        switchInt(move _29) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _33 = core::panicking::AssertKind::Eq;
        _35 = Option::<Arguments<'_>>::None;
        _34 = core::panicking::assert_failed::<i32, i32>(move _33, _27, _28, move _35);
    }

    bb15: {
        return;
    }
}

const ON: (i32, i32) = {
    let mut _0: (i32, i32);

    bb0: {
        _0 = (const 1_i32, const 1_i32);
        return;
    }
}

const OFF: (i32, i32) = {
    let mut _0: (i32, i32);

    bb0: {
        _0 = (const 0_i32, const 0_i32);
        return;
    }
}

C::D::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 3_isize;
        return;
    }
}

C::E::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 4_isize;
        return;
    }
}

fn issue_14576::<impl at ui/binding/match-arm-statics.rs:83:14: 83:23>::eq(_1: &C, _2: &C) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _0 = Eq(_3, _4);
        return;
    }
}

fn issue_14576::<impl at ui/binding/match-arm-statics.rs:83:25: 83:27>::assert_receiver_is_total_eq(_1: &C) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

const F: C = {
    let mut _0: issue_14576::C;

    bb0: {
        _0 = C::D;
        return;
    }
}

G::H::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 3_isize;
        return;
    }
}

G::I::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 5_isize;
        return;
    }
}

fn issue_14576::<impl at ui/binding/match-arm-statics.rs:90:14: 90:23>::eq(_1: &G, _2: &G) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _0 = Eq(_3, _4);
        return;
    }
}

fn issue_14576::<impl at ui/binding/match-arm-statics.rs:90:25: 90:27>::assert_receiver_is_total_eq(_1: &G) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

const K: G = {
    let mut _0: issue_14576::G;

    bb0: {
        _0 = G::I;
        return;
    }
}

fn issue_13731() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn issue_13731::<impl at ui/binding/match-arm-statics.rs:98:14: 98:23>::eq(_1: &A, _2: &A) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: (&issue_13731::A, &issue_13731::A);
    let _4: &();
    let _5: &();
    let mut _6: &issue_13731::A;
    let mut _7: &issue_13731::A;
    scope 1 {
        debug __self_0 => _4;
        debug __arg1_0 => _5;
    }

    bb0: {
        _3 = (_1, _2);
        _6 = deref_copy (_3.0: &issue_13731::A);
        _4 = &(((*_6) as AA).0: ());
        _7 = deref_copy (_3.1: &issue_13731::A);
        _5 = &(((*_7) as AA).0: ());
        _0 = <() as PartialEq>::eq(_4, _5) -> bb1;
    }

    bb1: {
        return;
    }
}

fn issue_13731::<impl at ui/binding/match-arm-statics.rs:98:25: 98:27>::assert_receiver_is_total_eq(_1: &A) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

const B: A = {
    let mut _0: issue_13731::A;
    let mut _1: ();

    bb0: {
        StorageLive(_1);
        _1 = ();
        _0 = A::AA(move _1);
        StorageDead(_1);
        return;
    }
}

fn issue_15393() -> () {
    let mut _0: ();
    let mut _1: issue_15393::Flags;
    let mut _2: !;
    let mut _3: !;

    bb0: {
        _1 = Flags { bits: const 2_usize };
        switchInt((_1.0: usize)) -> [1: bb2, 2: bb3, otherwise: bb1];
    }

    bb1: {
        _3 = core::panicking::panic(const "internal error: entered unreachable code");
    }

    bb2: {
        _2 = core::panicking::panic(const "internal error: entered unreachable code");
    }

    bb3: {
        return;
    }
}

fn issue_15393::<impl at ui/binding/match-arm-statics.rs:109:14: 109:23>::eq(_1: &Flags, _2: &Flags) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: usize;
    let mut _4: usize;

    bb0: {
        _3 = ((*_1).0: usize);
        _4 = ((*_2).0: usize);
        _0 = Eq(move _3, move _4);
        return;
    }
}

fn issue_15393::<impl at ui/binding/match-arm-statics.rs:109:25: 109:27>::assert_receiver_is_total_eq(_1: &Flags) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

const FOO: Flags = {
    let mut _0: issue_15393::Flags;

    bb0: {
        _0 = Flags { bits: const 1_usize };
        return;
    }
}

const BAR: Flags = {
    let mut _0: issue_15393::Flags;

    bb0: {
        _0 = Flags { bits: const 2_usize };
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&i32, &i32);
    let mut _2: &i32;
    let _3: i32;
    let mut _4: (bool, bool);
    let mut _5: &i32;
    let _6: i32;
    let _7: &i32;
    let _8: &i32;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: i32;
    let mut _12: i32;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&i32, &i32);
    let mut _17: &i32;
    let _18: i32;
    let mut _19: std::option::Option<std::option::Option<Direction>>;
    let mut _20: std::option::Option<Direction>;
    let mut _21: Direction;
    let mut _22: isize;
    let mut _23: isize;
    let mut _24: isize;
    let mut _25: &i32;
    let _26: i32;
    let _27: &i32;
    let _28: &i32;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: i32;
    let mut _32: i32;
    let _34: !;
    let mut _35: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _36: (&i32, &i32);
    let mut _37: &i32;
    let _38: i32;
    let mut _39: Foo;
    let mut _40: std::option::Option<Direction>;
    let mut _41: Direction;
    let mut _42: NewBool;
    let mut _43: isize;
    let mut _44: isize;
    let mut _45: isize;
    let mut _46: isize;
    let mut _47: isize;
    let mut _48: isize;
    let mut _49: &i32;
    let _50: i32;
    let _51: &i32;
    let _52: &i32;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: i32;
    let mut _56: i32;
    let _58: !;
    let mut _59: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _60: (&i32, &i32);
    let mut _61: &i32;
    let _62: i32;
    let mut _63: EnumWithStructVariants;
    let mut _64: Direction;
    let mut _65: isize;
    let mut _66: isize;
    let mut _67: &i32;
    let _68: i32;
    let _69: &i32;
    let _70: &i32;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: i32;
    let mut _74: i32;
    let _76: !;
    let mut _77: std::option::Option<std::fmt::Arguments<'_>>;
    let _78: ();
    let _79: ();
    let _80: ();
    let _81: ();
    let _82: ();
    scope 1 {
        debug left_val => _7;
        debug right_val => _8;
        let _13: core::panicking::AssertKind;
        scope 2 {
            debug kind => _13;
        }
    }
    scope 3 {
        debug left_val => _27;
        debug right_val => _28;
        let _33: core::panicking::AssertKind;
        scope 4 {
            debug kind => _33;
        }
    }
    scope 5 {
        debug left_val => _51;
        debug right_val => _52;
        let _57: core::panicking::AssertKind;
        scope 6 {
            debug kind => _57;
        }
    }
    scope 7 {
        debug left_val => _69;
        debug right_val => _70;
        let _75: core::panicking::AssertKind;
        scope 8 {
            debug kind => _75;
        }
    }

    bb0: {
        _4 = (const true, const false);
        switchInt((_4.0: bool)) -> [0: bb3, otherwise: bb1];
    }

    bb1: {
        switchInt((_4.1: bool)) -> [0: bb2, otherwise: bb4];
    }

    bb2: {
        _3 = const 4_i32;
        goto -> bb7;
    }

    bb3: {
        switchInt((_4.1: bool)) -> [0: bb5, otherwise: bb6];
    }

    bb4: {
        _3 = const 1_i32;
        goto -> bb7;
    }

    bb5: {
        _3 = const 2_i32;
        goto -> bb7;
    }

    bb6: {
        _3 = const 3_i32;
        goto -> bb7;
    }

    bb7: {
        _2 = &_3;
        _6 = const 4_i32;
        _5 = &_6;
        _1 = (move _2, move _5);
        _7 = (_1.0: &i32);
        _8 = (_1.1: &i32);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<i32, i32>(move _13, _7, _8, move _15);
    }

    bb9: {
        _21 = Direction::North;
        _20 = Option::<Direction>::Some(move _21);
        _19 = Option::<Option<Direction>>::Some(move _20);
        _24 = discriminant(_19);
        switchInt(move _24) -> [0: bb10, 1: bb11, otherwise: bb13];
    }

    bb10: {
        _18 = const 6_i32;
        goto -> bb19;
    }

    bb11: {
        _23 = discriminant(((_19 as Some).0: std::option::Option<Direction>));
        switchInt(move _23) -> [0: bb14, 1: bb12, otherwise: bb13];
    }

    bb12: {
        _22 = discriminant(((((_19 as Some).0: std::option::Option<Direction>) as Some).0: Direction));
        switchInt(move _22) -> [0: bb15, 1: bb16, 2: bb17, 3: bb18, otherwise: bb13];
    }

    bb13: {
        unreachable;
    }

    bb14: {
        _18 = const 1_i32;
        goto -> bb19;
    }

    bb15: {
        _18 = const 2_i32;
        goto -> bb19;
    }

    bb16: {
        _18 = const 3_i32;
        goto -> bb19;
    }

    bb17: {
        _18 = const 4_i32;
        goto -> bb19;
    }

    bb18: {
        _18 = const 5_i32;
        goto -> bb19;
    }

    bb19: {
        _17 = &_18;
        _26 = const 2_i32;
        _25 = &_26;
        _16 = (move _17, move _25);
        _27 = (_16.0: &i32);
        _28 = (_16.1: &i32);
        _31 = (*_27);
        _32 = (*_28);
        _30 = Eq(move _31, move _32);
        _29 = Not(move _30);
        switchInt(move _29) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _33 = core::panicking::AssertKind::Eq;
        _35 = Option::<Arguments<'_>>::None;
        _34 = core::panicking::assert_failed::<i32, i32>(move _33, _27, _28, move _35);
    }

    bb21: {
        _41 = Direction::West;
        _40 = Option::<Direction>::Some(move _41);
        _42 = NewBool(const true);
        _39 = Foo { bar: move _40, baz: move _42 };
        _48 = discriminant((_39.0: std::option::Option<Direction>));
        switchInt(move _48) -> [0: bb22, 1: bb23, otherwise: bb13];
    }

    bb22: {
        switchInt(((_39.1: NewBool).0: bool)) -> [0: bb33, otherwise: bb32];
    }

    bb23: {
        switchInt(((_39.1: NewBool).0: bool)) -> [0: bb24, otherwise: bb25];
    }

    bb24: {
        _43 = discriminant((((_39.0: std::option::Option<Direction>) as Some).0: Direction));
        switchInt(move _43) -> [2: bb34, otherwise: bb25];
    }

    bb25: {
        switchInt(((_39.1: NewBool).0: bool)) -> [0: bb35, otherwise: bb26];
    }

    bb26: {
        _45 = discriminant((_39.0: std::option::Option<Direction>));
        switchInt(move _45) -> [1: bb28, otherwise: bb27];
    }

    bb27: {
        _47 = discriminant((_39.0: std::option::Option<Direction>));
        switchInt(move _47) -> [1: bb29, otherwise: bb13];
    }

    bb28: {
        _44 = discriminant((((_39.0: std::option::Option<Direction>) as Some).0: Direction));
        switchInt(move _44) -> [2: bb37, 3: bb36, otherwise: bb27];
    }

    bb29: {
        _46 = discriminant((((_39.0: std::option::Option<Direction>) as Some).0: Direction));
        switchInt(move _46) -> [0: bb30, 1: bb38, otherwise: bb13];
    }

    bb30: {
        switchInt(((_39.1: NewBool).0: bool)) -> [0: bb13, otherwise: bb31];
    }

    bb31: {
        _38 = const 8_i32;
        goto -> bb39;
    }

    bb32: {
        _38 = const 1_i32;
        goto -> bb39;
    }

    bb33: {
        _38 = const 2_i32;
        goto -> bb39;
    }

    bb34: {
        _38 = const 3_i32;
        goto -> bb39;
    }

    bb35: {
        _38 = const 4_i32;
        goto -> bb39;
    }

    bb36: {
        _38 = const 5_i32;
        goto -> bb39;
    }

    bb37: {
        _38 = const 6_i32;
        goto -> bb39;
    }

    bb38: {
        _38 = const 7_i32;
        goto -> bb39;
    }

    bb39: {
        _37 = &_38;
        _50 = const 5_i32;
        _49 = &_50;
        _36 = (move _37, move _49);
        _51 = (_36.0: &i32);
        _52 = (_36.1: &i32);
        _55 = (*_51);
        _56 = (*_52);
        _54 = Eq(move _55, move _56);
        _53 = Not(move _54);
        switchInt(move _53) -> [0: bb41, otherwise: bb40];
    }

    bb40: {
        _57 = core::panicking::AssertKind::Eq;
        _59 = Option::<Arguments<'_>>::None;
        _58 = core::panicking::assert_failed::<i32, i32>(move _57, _51, _52, move _59);
    }

    bb41: {
        _64 = Direction::North;
        _63 = EnumWithStructVariants::Variant2 { dir: move _64 };
        _66 = discriminant(_63);
        switchInt(move _66) -> [0: bb42, 1: bb43, otherwise: bb13];
    }

    bb42: {
        switchInt(((_63 as Variant1).0: bool)) -> [0: bb46, otherwise: bb45];
    }

    bb43: {
        _65 = discriminant(((_63 as Variant2).0: Direction));
        switchInt(move _65) -> [0: bb48, 1: bb44, 2: bb49, 3: bb47, otherwise: bb13];
    }

    bb44: {
        _62 = const 6_i32;
        goto -> bb50;
    }

    bb45: {
        _62 = const 1_i32;
        goto -> bb50;
    }

    bb46: {
        _62 = const 2_i32;
        goto -> bb50;
    }

    bb47: {
        _62 = const 3_i32;
        goto -> bb50;
    }

    bb48: {
        _62 = const 4_i32;
        goto -> bb50;
    }

    bb49: {
        _62 = const 5_i32;
        goto -> bb50;
    }

    bb50: {
        _61 = &_62;
        _68 = const 4_i32;
        _67 = &_68;
        _60 = (move _61, move _67);
        _69 = (_60.0: &i32);
        _70 = (_60.1: &i32);
        _73 = (*_69);
        _74 = (*_70);
        _72 = Eq(move _73, move _74);
        _71 = Not(move _72);
        switchInt(move _71) -> [0: bb52, otherwise: bb51];
    }

    bb51: {
        _75 = core::panicking::AssertKind::Eq;
        _77 = Option::<Arguments<'_>>::None;
        _76 = core::panicking::assert_failed::<i32, i32>(move _75, _69, _70, move _77);
    }

    bb52: {
        _78 = issue_6533() -> bb53;
    }

    bb53: {
        _79 = issue_13626() -> bb54;
    }

    bb54: {
        _80 = issue_13731() -> bb55;
    }

    bb55: {
        _81 = issue_14576() -> bb56;
    }

    bb56: {
        _82 = issue_15393() -> bb57;
    }

    bb57: {
        return;
    }
}

fn NewBool(_1: bool) -> NewBool {
    let mut _0: NewBool;

    bb0: {
        _0 = NewBool(move _1);
        return;
    }
}

// MIR FOR CTFE
fn NewBool(_1: bool) -> NewBool {
    let mut _0: NewBool;

    bb0: {
        _0 = NewBool(move _1);
        return;
    }
}

fn EnumWithStructVariants::Variant1(_1: bool) -> EnumWithStructVariants {
    let mut _0: EnumWithStructVariants;

    bb0: {
        _0 = EnumWithStructVariants::Variant1(move _1);
        return;
    }
}

// MIR FOR CTFE
fn EnumWithStructVariants::Variant1(_1: bool) -> EnumWithStructVariants {
    let mut _0: EnumWithStructVariants;

    bb0: {
        _0 = EnumWithStructVariants::Variant1(move _1);
        return;
    }
}

fn InputState(_1: usize) -> InputState {
    let mut _0: glfw::InputState;

    bb0: {
        _0 = InputState(move _1);
        return;
    }
}

// MIR FOR CTFE
fn InputState(_1: usize) -> InputState {
    let mut _0: glfw::InputState;

    bb0: {
        _0 = InputState(move _1);
        return;
    }
}

fn A::AA(_1: ()) -> A {
    let mut _0: issue_13731::A;

    bb0: {
        _0 = A::AA(move _1);
        return;
    }
}

// MIR FOR CTFE
fn A::AA(_1: ()) -> A {
    let mut _0: issue_13731::A;

    bb0: {
        _0 = A::AA(move _1);
        return;
    }
}
