// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn getaddr(_1: Box<usize>) -> *const usize {
    let mut _0: *const usize;
    let _2: &usize;
    let mut _3: *const usize;
    let mut _4: *const ();
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: bool;
    scope 1 {
        debug x => _2;
        scope 2 {
            debug addr => _0;
        }
    }

    bb0: {
        _3 = (((_1.0: std::ptr::Unique<usize>).0: std::ptr::NonNull<usize>).0: *const usize);
        _4 = _3 as *const () (PtrToPtr);
        _5 = _4 as usize (Transmute);
        _6 = AlignOf(usize);
        _7 = Sub(_6, const 1_usize);
        _8 = BitAnd(_5, _7);
        _9 = Eq(_8, const 0_usize);
        assert(_9, "misaligned pointer dereference: address must be a multiple of {} but is {}", _6, _5) -> [success: bb2, unwind unreachable];
    }

    bb1: {
        return;
    }

    bb2: {
        _2 = &(*_3);
        _0 = &raw const (*_2);
        drop(_1) -> bb1;
    }
}

fn checkval(_1: Box<usize>) -> usize {
    let mut _0: usize;
    let _2: &usize;
    let mut _3: *const usize;
    let mut _4: *const ();
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: bool;
    scope 1 {
        debug x => _2;
    }

    bb0: {
        _3 = (((_1.0: std::ptr::Unique<usize>).0: std::ptr::NonNull<usize>).0: *const usize);
        _4 = _3 as *const () (PtrToPtr);
        _5 = _4 as usize (Transmute);
        _6 = AlignOf(usize);
        _7 = Sub(_6, const 1_usize);
        _8 = BitAnd(_5, _7);
        _9 = Eq(_8, const 0_usize);
        assert(_9, "misaligned pointer dereference: address must be a multiple of {} but is {}", _6, _5) -> [success: bb2, unwind unreachable];
    }

    bb1: {
        return;
    }

    bb2: {
        _2 = &(*_3);
        _0 = (*_2);
        drop(_1) -> bb1;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::boxed::Box<usize>;
    let _3: &usize;
    let mut _5: std::boxed::Box<usize>;
    let mut _6: (&*const usize, &*const usize);
    let mut _7: &*const usize;
    let mut _8: &*const usize;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: *const usize;
    let mut _14: *const usize;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _19: (&usize, &usize);
    let mut _20: &usize;
    let _21: usize;
    let mut _22: std::boxed::Box<usize>;
    let mut _23: &usize;
    let _24: usize;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: usize;
    let mut _30: usize;
    let _32: !;
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _34: *const usize;
    scope 1 {
        debug obj => _1;
        let _2: *const usize;
        let mut _35: *const ();
        let mut _36: usize;
        let mut _37: usize;
        let mut _38: usize;
        let mut _39: usize;
        let mut _40: bool;
        scope 2 {
            debug objptr => _2;
            let _4: *const usize;
            scope 3 {
                debug xptr => _4;
                let _9: &*const usize;
                let _10: &*const usize;
                let _18: std::boxed::Box<usize>;
                scope 4 {
                    debug left_val => _9;
                    debug right_val => _10;
                    let _15: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _15;
                    }
                }
                scope 6 {
                    debug obj => _18;
                    let _25: &usize;
                    let _26: &usize;
                    scope 7 {
                        debug left_val => _25;
                        debug right_val => _26;
                        let _31: core::panicking::AssertKind;
                        scope 8 {
                            debug kind => _31;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = Box::<usize>::new(const 1_usize) -> bb1;
    }

    bb1: {
        _34 = (((_1.0: std::ptr::Unique<usize>).0: std::ptr::NonNull<usize>).0: *const usize);
        _35 = _34 as *const () (PtrToPtr);
        _36 = _35 as usize (Transmute);
        _37 = AlignOf(usize);
        _38 = Sub(_37, const 1_usize);
        _39 = BitAnd(_36, _38);
        _40 = Eq(_39, const 0_usize);
        assert(_40, "misaligned pointer dereference: address must be a multiple of {} but is {}", _37, _36) -> [success: bb9, unwind unreachable];
    }

    bb2: {
        _7 = &_2;
        _8 = &_4;
        _6 = (move _7, move _8);
        _9 = (_6.0: &*const usize);
        _10 = (_6.1: &*const usize);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<*const usize, *const usize>(move _15, _9, _10, move _17);
    }

    bb4: {
        _18 = Box::<usize>::new(const 22_usize) -> bb5;
    }

    bb5: {
        _22 = move _18;
        _21 = checkval(move _22) -> bb6;
    }

    bb6: {
        _20 = &_21;
        _24 = const 22_usize;
        _23 = &_24;
        _19 = (move _20, move _23);
        _25 = (_19.0: &usize);
        _26 = (_19.1: &usize);
        _29 = (*_25);
        _30 = (*_26);
        _28 = Eq(move _29, move _30);
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _31 = core::panicking::AssertKind::Eq;
        _33 = Option::<Arguments<'_>>::None;
        _32 = core::panicking::assert_failed::<usize, usize>(move _31, _25, _26, move _33);
    }

    bb8: {
        return;
    }

    bb9: {
        _3 = &(*_34);
        _2 = &raw const (*_3);
        _5 = move _1;
        _4 = getaddr(move _5) -> bb2;
    }
}
