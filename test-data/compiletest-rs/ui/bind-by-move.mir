// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn dispose(_1: Arc<bool>) -> () {
    debug _x => _1;
    let mut _0: ();

    bb0: {
        drop(_1) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::sync::Arc<bool>;
    let mut _3: std::sync::Arc<bool>;
    let mut _4: isize;
    let _6: ();
    let mut _7: !;
    scope 1 {
        debug p => _1;
        let _2: std::option::Option<std::sync::Arc<bool>>;
        scope 2 {
            debug x => _2;
            let _5: std::sync::Arc<bool>;
            scope 3 {
                debug z => _5;
            }
        }
    }

    bb0: {
        _1 = Arc::<bool>::new(const true) -> bb1;
    }

    bb1: {
        _3 = move _1;
        _2 = Option::<Arc<bool>>::Some(move _3);
        _4 = discriminant(_2);
        switchInt(move _4) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _7 = begin_panic::<&str>(const "explicit panic");
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _5 = move ((_2 as Some).0: std::sync::Arc<bool>);
        _6 = dispose(move _5) -> bb5;
    }

    bb5: {
        return;
    }
}
