// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test_assign() -> () {
    let mut _0: ();
    let mut _1: isize;
    let mut _3: (&isize, &isize);
    let mut _4: &isize;
    let mut _5: &isize;
    let _6: isize;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: isize;
    let mut _12: isize;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&(), &());
    let mut _17: &();
    let mut _18: &();
    let _19: ();
    let mut _22: bool;
    let mut _23: bool;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _28: (&isize, &isize);
    let mut _29: &isize;
    let mut _30: &isize;
    let _31: isize;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: isize;
    let mut _37: isize;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _41: (&(), &());
    let mut _42: &();
    let mut _43: &();
    let _44: ();
    let mut _47: bool;
    let mut _48: bool;
    let _50: !;
    let mut _51: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _52: (&isize, &isize);
    let mut _53: &isize;
    let mut _54: &isize;
    let _55: isize;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: isize;
    let mut _61: isize;
    let _63: !;
    let mut _64: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _65: (&(), &());
    let mut _66: &();
    let mut _67: &();
    let _68: ();
    let mut _71: bool;
    let mut _72: bool;
    let _74: !;
    let mut _75: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _2: ();
        scope 2 {
            debug y => const ();
            let _7: &isize;
            let _8: &isize;
            let _20: &();
            let _21: &();
            let mut _27: ();
            scope 3 {
                debug left_val => _7;
                debug right_val => _8;
                let _13: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _13;
                }
            }
            scope 5 {
                debug left_val => _20;
                debug right_val => _21;
                let _24: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _24;
                }
            }
            scope 7 {
                debug z => const ();
                let _32: &isize;
                let _33: &isize;
                let _45: &();
                let _46: &();
                let _56: &isize;
                let _57: &isize;
                let _69: &();
                let _70: &();
                scope 8 {
                    debug left_val => _32;
                    debug right_val => _33;
                    let _38: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _38;
                    }
                }
                scope 10 {
                    debug left_val => _45;
                    debug right_val => _46;
                    let _49: core::panicking::AssertKind;
                    scope 11 {
                        debug kind => _49;
                    }
                }
                scope 12 {
                    debug left_val => _56;
                    debug right_val => _57;
                    let _62: core::panicking::AssertKind;
                    scope 13 {
                        debug kind => _62;
                    }
                }
                scope 14 {
                    debug left_val => _69;
                    debug right_val => _70;
                    let _73: core::panicking::AssertKind;
                    scope 15 {
                        debug kind => _73;
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const 10_isize;
        _4 = &_1;
        _6 = const 10_isize;
        _5 = &_6;
        _3 = (move _4, move _5);
        _7 = (_3.0: &isize);
        _8 = (_3.1: &isize);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<isize, isize>(move _13, _7, _8, move _15);
    }

    bb2: {
        _17 = &_2;
        _18 = &_19;
        _16 = (move _17, move _18);
        _20 = (_16.0: &());
        _21 = (_16.1: &());
        _23 = <() as PartialEq>::eq(_20, _21) -> bb3;
    }

    bb3: {
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<(), ()>(move _24, _20, _21, move _26);
    }

    bb5: {
        _1 = const 11_isize;
        _29 = &_1;
        _31 = const 11_isize;
        _30 = &_31;
        _28 = (move _29, move _30);
        _32 = (_28.0: &isize);
        _33 = (_28.1: &isize);
        _36 = (*_32);
        _37 = (*_33);
        _35 = Eq(move _36, move _37);
        _34 = Not(move _35);
        switchInt(move _34) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<isize, isize>(move _38, _32, _33, move _40);
    }

    bb7: {
        _42 = &_27;
        _43 = &_44;
        _41 = (move _42, move _43);
        _45 = (_41.0: &());
        _46 = (_41.1: &());
        _48 = <() as PartialEq>::eq(_45, _46) -> bb8;
    }

    bb8: {
        _47 = Not(move _48);
        switchInt(move _47) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _49 = core::panicking::AssertKind::Eq;
        _51 = Option::<Arguments<'_>>::None;
        _50 = core::panicking::assert_failed::<(), ()>(move _49, _45, _46, move _51);
    }

    bb10: {
        _1 = const 12_isize;
        _53 = &_1;
        _55 = const 12_isize;
        _54 = &_55;
        _52 = (move _53, move _54);
        _56 = (_52.0: &isize);
        _57 = (_52.1: &isize);
        _60 = (*_56);
        _61 = (*_57);
        _59 = Eq(move _60, move _61);
        _58 = Not(move _59);
        switchInt(move _58) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _62 = core::panicking::AssertKind::Eq;
        _64 = Option::<Arguments<'_>>::None;
        _63 = core::panicking::assert_failed::<isize, isize>(move _62, _56, _57, move _64);
    }

    bb12: {
        _66 = &_27;
        _67 = &_68;
        _65 = (move _66, move _67);
        _69 = (_65.0: &());
        _70 = (_65.1: &());
        _72 = <() as PartialEq>::eq(_69, _70) -> bb13;
    }

    bb13: {
        _71 = Not(move _72);
        switchInt(move _71) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _73 = core::panicking::AssertKind::Eq;
        _75 = Option::<Arguments<'_>>::None;
        _74 = core::panicking::assert_failed::<(), ()>(move _73, _69, _70, move _75);
    }

    bb15: {
        return;
    }
}

fn test_assign_op() -> () {
    let mut _0: ();
    let mut _1: isize;
    let mut _3: (&isize, &isize);
    let mut _4: &isize;
    let mut _5: &isize;
    let _6: isize;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: isize;
    let mut _12: isize;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&(), &());
    let mut _17: &();
    let mut _18: &();
    let _19: ();
    let mut _22: bool;
    let mut _23: bool;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _28: (&isize, &isize);
    let mut _29: &isize;
    let mut _30: &isize;
    let _31: isize;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: isize;
    let mut _37: isize;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _41: (&(), &());
    let mut _42: &();
    let mut _43: &();
    let _44: ();
    let mut _47: bool;
    let mut _48: bool;
    let _50: !;
    let mut _51: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _52: (&isize, &isize);
    let mut _53: &isize;
    let mut _54: &isize;
    let _55: isize;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: isize;
    let mut _61: isize;
    let _63: !;
    let mut _64: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _65: (&(), &());
    let mut _66: &();
    let mut _67: &();
    let _68: ();
    let mut _71: bool;
    let mut _72: bool;
    let _74: !;
    let mut _75: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _2: ();
        scope 2 {
            debug y => const ();
            let _7: &isize;
            let _8: &isize;
            let _20: &();
            let _21: &();
            let mut _27: ();
            scope 3 {
                debug left_val => _7;
                debug right_val => _8;
                let _13: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _13;
                }
            }
            scope 5 {
                debug left_val => _20;
                debug right_val => _21;
                let _24: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _24;
                }
            }
            scope 7 {
                debug z => const ();
                let _32: &isize;
                let _33: &isize;
                let _45: &();
                let _46: &();
                let _56: &isize;
                let _57: &isize;
                let _69: &();
                let _70: &();
                scope 8 {
                    debug left_val => _32;
                    debug right_val => _33;
                    let _38: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _38;
                    }
                }
                scope 10 {
                    debug left_val => _45;
                    debug right_val => _46;
                    let _49: core::panicking::AssertKind;
                    scope 11 {
                        debug kind => _49;
                    }
                }
                scope 12 {
                    debug left_val => _56;
                    debug right_val => _57;
                    let _62: core::panicking::AssertKind;
                    scope 13 {
                        debug kind => _62;
                    }
                }
                scope 14 {
                    debug left_val => _69;
                    debug right_val => _70;
                    let _73: core::panicking::AssertKind;
                    scope 15 {
                        debug kind => _73;
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const 0_isize;
        _1 = Add(_1, const 10_isize);
        _4 = &_1;
        _6 = const 10_isize;
        _5 = &_6;
        _3 = (move _4, move _5);
        _7 = (_3.0: &isize);
        _8 = (_3.1: &isize);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<isize, isize>(move _13, _7, _8, move _15);
    }

    bb2: {
        _17 = &_2;
        _18 = &_19;
        _16 = (move _17, move _18);
        _20 = (_16.0: &());
        _21 = (_16.1: &());
        _23 = <() as PartialEq>::eq(_20, _21) -> bb3;
    }

    bb3: {
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<(), ()>(move _24, _20, _21, move _26);
    }

    bb5: {
        _1 = Add(_1, const 11_isize);
        _29 = &_1;
        _31 = const 21_isize;
        _30 = &_31;
        _28 = (move _29, move _30);
        _32 = (_28.0: &isize);
        _33 = (_28.1: &isize);
        _36 = (*_32);
        _37 = (*_33);
        _35 = Eq(move _36, move _37);
        _34 = Not(move _35);
        switchInt(move _34) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<isize, isize>(move _38, _32, _33, move _40);
    }

    bb7: {
        _42 = &_27;
        _43 = &_44;
        _41 = (move _42, move _43);
        _45 = (_41.0: &());
        _46 = (_41.1: &());
        _48 = <() as PartialEq>::eq(_45, _46) -> bb8;
    }

    bb8: {
        _47 = Not(move _48);
        switchInt(move _47) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _49 = core::panicking::AssertKind::Eq;
        _51 = Option::<Arguments<'_>>::None;
        _50 = core::panicking::assert_failed::<(), ()>(move _49, _45, _46, move _51);
    }

    bb10: {
        _1 = Add(_1, const 12_isize);
        _53 = &_1;
        _55 = const 33_isize;
        _54 = &_55;
        _52 = (move _53, move _54);
        _56 = (_52.0: &isize);
        _57 = (_52.1: &isize);
        _60 = (*_56);
        _61 = (*_57);
        _59 = Eq(move _60, move _61);
        _58 = Not(move _59);
        switchInt(move _58) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _62 = core::panicking::AssertKind::Eq;
        _64 = Option::<Arguments<'_>>::None;
        _63 = core::panicking::assert_failed::<isize, isize>(move _62, _56, _57, move _64);
    }

    bb12: {
        _66 = &_27;
        _67 = &_68;
        _65 = (move _66, move _67);
        _69 = (_65.0: &());
        _70 = (_65.1: &());
        _72 = <() as PartialEq>::eq(_69, _70) -> bb13;
    }

    bb13: {
        _71 = Not(move _72);
        switchInt(move _71) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _73 = core::panicking::AssertKind::Eq;
        _75 = Option::<Arguments<'_>>::None;
        _74 = core::panicking::assert_failed::<(), ()>(move _73, _69, _70, move _75);
    }

    bb15: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();

    bb0: {
        _1 = test_assign() -> bb1;
    }

    bb1: {
        _2 = test_assign_op() -> bb2;
    }

    bb2: {
        return;
    }
}
