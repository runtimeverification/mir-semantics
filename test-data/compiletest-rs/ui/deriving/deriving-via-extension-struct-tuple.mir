// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/deriving-via-extension-struct-tuple.rs:2:10: 2:19>::eq(_1: &Foo, _2: &Foo) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: isize;
    let mut _6: isize;
    let mut _7: bool;
    let mut _8: isize;
    let mut _9: isize;
    let mut _10: bool;
    let mut _11: &std::string::String;
    let mut _12: &std::string::String;

    bb0: {
        _5 = ((*_1).0: isize);
        _6 = ((*_2).0: isize);
        _4 = Eq(move _5, move _6);
        switchInt(move _4) -> [0: bb4, otherwise: bb5];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _11 = &((*_1).2: std::string::String);
        _12 = &((*_2).2: std::string::String);
        _10 = <String as PartialEq>::eq(move _11, move _12) -> bb7;
    }

    bb3: {
        return;
    }

    bb4: {
        _3 = const false;
        goto -> bb6;
    }

    bb5: {
        _8 = ((*_1).1: isize);
        _9 = ((*_2).1: isize);
        _7 = Eq(move _8, move _9);
        _3 = move _7;
        goto -> bb6;
    }

    bb6: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2];
    }

    bb7: {
        _0 = move _10;
        goto -> bb3;
    }
}

fn <impl at ui/deriving/deriving-via-extension-struct-tuple.rs:2:21: 2:26>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &isize;
    let mut _6: &dyn std::fmt::Debug;
    let _7: &isize;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&std::string::String;
    let _10: &std::string::String;

    bb0: {
        _3 = const "Foo";
        _5 = &((*_1).0: isize);
        _4 = _5 as &dyn std::fmt::Debug (Pointer(Unsize));
        _7 = &((*_1).1: isize);
        _6 = _7 as &dyn std::fmt::Debug (Pointer(Unsize));
        _10 = &((*_1).2: std::string::String);
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field3_finish(_2, _3, move _4, move _6, move _8) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Foo;
    let mut _2: std::string::String;
    let _3: &str;
    let mut _5: std::string::String;
    let _6: &str;
    let mut _8: std::string::String;
    let _9: &str;
    let mut _10: (&Foo, &Foo);
    let mut _11: &Foo;
    let mut _12: &Foo;
    let mut _15: bool;
    let mut _16: bool;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _20: (&Foo, &Foo);
    let mut _21: &Foo;
    let mut _22: &Foo;
    let mut _25: bool;
    let mut _26: bool;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: &Foo;
    let mut _34: &Foo;
    let mut _35: !;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: &Foo;
    let mut _39: &Foo;
    let mut _40: !;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: &Foo;
    let mut _45: &Foo;
    let mut _46: !;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: &Foo;
    let mut _51: &Foo;
    let mut _52: !;
    scope 1 {
        debug a1 => _1;
        let _4: Foo;
        scope 2 {
            debug a2 => _4;
            let _7: Foo;
            scope 3 {
                debug b => _7;
                let _13: &Foo;
                let _14: &Foo;
                let _23: &Foo;
                let _24: &Foo;
                scope 4 {
                    debug left_val => _13;
                    debug right_val => _14;
                    let _17: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _17;
                    }
                }
                scope 6 {
                    debug left_val => _23;
                    debug right_val => _24;
                    let _27: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _27;
                    }
                }
            }
        }
    }

    bb0: {
        _3 = const "abc";
        _2 = <str as ToString>::to_string(_3) -> bb1;
    }

    bb1: {
        _1 = Foo(const 5_isize, const 6_isize, move _2);
        _6 = const "abc";
        _5 = <str as ToString>::to_string(_6) -> [return: bb2, unwind: bb27];
    }

    bb2: {
        _4 = Foo(const 5_isize, const 6_isize, move _5);
        _9 = const "def";
        _8 = <str as ToString>::to_string(_9) -> [return: bb3, unwind: bb26];
    }

    bb3: {
        _7 = Foo(const 5_isize, const 7_isize, move _8);
        _11 = &_1;
        _12 = &_1;
        _10 = (move _11, move _12);
        _13 = (_10.0: &Foo);
        _14 = (_10.1: &Foo);
        _16 = <Foo as PartialEq>::eq(_13, _14) -> [return: bb4, unwind: bb25];
    }

    bb4: {
        _15 = Not(move _16);
        switchInt(move _15) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<Foo, Foo>(move _17, _13, _14, move _19) -> bb25;
    }

    bb6: {
        _21 = &_4;
        _22 = &_1;
        _20 = (move _21, move _22);
        _23 = (_20.0: &Foo);
        _24 = (_20.1: &Foo);
        _26 = <Foo as PartialEq>::eq(_23, _24) -> [return: bb7, unwind: bb25];
    }

    bb7: {
        _25 = Not(move _26);
        switchInt(move _25) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<Foo, Foo>(move _27, _23, _24, move _29) -> bb25;
    }

    bb9: {
        _33 = &_1;
        _34 = &_7;
        _32 = <Foo as PartialEq>::eq(move _33, move _34) -> [return: bb10, unwind: bb25];
    }

    bb10: {
        _31 = Not(move _32);
        _30 = Not(move _31);
        switchInt(move _30) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _35 = core::panicking::panic(const "assertion failed: !(a1 == b)") -> bb25;
    }

    bb12: {
        _38 = &_1;
        _39 = &_7;
        _37 = <Foo as PartialEq>::ne(move _38, move _39) -> [return: bb13, unwind: bb25];
    }

    bb13: {
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _40 = core::panicking::panic(const "assertion failed: a1 != b") -> bb25;
    }

    bb15: {
        _44 = &_1;
        _45 = &_1;
        _43 = <Foo as PartialEq>::ne(move _44, move _45) -> [return: bb16, unwind: bb25];
    }

    bb16: {
        _42 = Not(move _43);
        _41 = Not(move _42);
        switchInt(move _41) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _46 = core::panicking::panic(const "assertion failed: !(a1 != a1)") -> bb25;
    }

    bb18: {
        _50 = &_4;
        _51 = &_1;
        _49 = <Foo as PartialEq>::ne(move _50, move _51) -> [return: bb19, unwind: bb25];
    }

    bb19: {
        _48 = Not(move _49);
        _47 = Not(move _48);
        switchInt(move _47) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _52 = core::panicking::panic(const "assertion failed: !(a2 != a1)") -> bb25;
    }

    bb21: {
        drop(_7) -> [return: bb22, unwind: bb26];
    }

    bb22: {
        drop(_4) -> [return: bb23, unwind: bb27];
    }

    bb23: {
        drop(_1) -> bb24;
    }

    bb24: {
        return;
    }

    bb25 (cleanup): {
        drop(_7) -> [return: bb26, unwind terminate];
    }

    bb26 (cleanup): {
        drop(_4) -> [return: bb27, unwind terminate];
    }

    bb27 (cleanup): {
        drop(_1) -> [return: bb28, unwind terminate];
    }

    bb28 (cleanup): {
        resume;
    }
}

fn Foo(_1: isize, _2: isize, _3: String) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo(move _1, move _2, move _3);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: isize, _2: isize, _3: String) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo(move _1, move _2, move _3);
        return;
    }
}
