// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/deriving-clone-struct.rs:6:10: 6:15>::clone(_1: &S) -> S {
    debug self => _1;
    let mut _0: S;
    let mut _2: isize;
    let _3: &isize;
    let mut _4: i8;
    let _5: &i8;
    let mut _6: i16;
    let _7: &i16;
    let mut _8: i32;
    let _9: &i32;
    let mut _10: i64;
    let _11: &i64;
    let mut _12: usize;
    let _13: &usize;
    let mut _14: u8;
    let _15: &u8;
    let mut _16: u16;
    let _17: &u16;
    let mut _18: u32;
    let _19: &u32;
    let mut _20: u64;
    let _21: &u64;
    let mut _22: f32;
    let _23: &f32;
    let mut _24: f64;
    let _25: &f64;
    let mut _26: bool;
    let _27: &bool;
    let mut _28: char;
    let _29: &char;

    bb0: {
        _3 = &((*_1).0: isize);
        _2 = (*_3);
        _5 = &((*_1).1: i8);
        _4 = (*_5);
        _7 = &((*_1).2: i16);
        _6 = (*_7);
        _9 = &((*_1).3: i32);
        _8 = (*_9);
        _11 = &((*_1).4: i64);
        _10 = (*_11);
        _13 = &((*_1).5: usize);
        _12 = (*_13);
        _15 = &((*_1).6: u8);
        _14 = (*_15);
        _17 = &((*_1).7: u16);
        _16 = (*_17);
        _19 = &((*_1).8: u32);
        _18 = (*_19);
        _21 = &((*_1).9: u64);
        _20 = (*_21);
        _23 = &((*_1).10: f32);
        _22 = (*_23);
        _25 = &((*_1).11: f64);
        _24 = (*_25);
        _27 = &((*_1).12: bool);
        _26 = (*_27);
        _29 = &((*_1).13: char);
        _28 = (*_29);
        _0 = S { _int: move _2, _i8: move _4, _i16: move _6, _i32: move _8, _i64: move _10, _uint: move _12, _u8: move _14, _u16: move _16, _u32: move _18, _u64: move _20, _f32: move _22, _f64: move _24, _bool: move _26, _char: move _28, _nil: const () };
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
