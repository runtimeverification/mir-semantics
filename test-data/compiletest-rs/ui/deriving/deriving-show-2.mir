// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/deriving-show-2.rs:5:10: 5:15>::fmt(_1: &A, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    scope 1 {
    }

    bb0: {
        unreachable;
    }
}

fn <impl at ui/deriving/deriving-show-2.rs:7:10: 7:15>::fmt(_1: &B, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: &str;
    let mut _4: isize;
    let _5: &str;
    let _6: &str;
    let _7: &str;

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _7 = const "B3";
        _3 = _7;
        goto -> bb5;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = const "B1";
        _3 = _5;
        goto -> bb5;
    }

    bb4: {
        _6 = const "B2";
        _3 = _6;
        goto -> bb5;
    }

    bb5: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> bb6;
    }

    bb6: {
        return;
    }
}

fn <impl at ui/deriving/deriving-show-2.rs:9:10: 9:15>::fmt(_1: &C, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &isize;
    let _5: &str;
    let mut _6: &dyn std::fmt::Debug;
    let _7: &&isize;
    let _8: &B;
    let _9: &str;
    let mut _10: &dyn std::fmt::Debug;
    let _11: &&B;
    let _12: &std::string::String;
    let _13: &str;
    let mut _14: &dyn std::fmt::Debug;
    let _15: &&std::string::String;
    scope 1 {
        debug __self_0 => _4;
    }
    scope 2 {
        debug __self_0 => _8;
    }
    scope 3 {
        debug __self_0 => _12;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _12 = &(((*_1) as C3).0: std::string::String);
        _13 = const "C3";
        _15 = &_12;
        _14 = _15 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _13, move _14) -> bb5;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as C1).0: isize);
        _5 = const "C1";
        _7 = &_4;
        _6 = _7 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _5, move _6) -> bb5;
    }

    bb4: {
        _8 = &(((*_1) as C2).0: B);
        _9 = const "C2";
        _11 = &_8;
        _10 = _11 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _9, move _10) -> bb5;
    }

    bb5: {
        return;
    }
}

fn <impl at ui/deriving/deriving-show-2.rs:11:10: 11:15>::fmt(_1: &D, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &isize;
    let _4: &str;
    let _5: &str;
    let mut _6: &dyn std::fmt::Debug;
    let _7: &&isize;
    scope 1 {
        debug __self_0 => _3;
    }

    bb0: {
        _3 = &(((*_1) as D1).0: isize);
        _4 = const "D1";
        _5 = const "a";
        _7 = &_3;
        _6 = _7 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _4, _5, move _6) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/deriving/deriving-show-2.rs:13:10: 13:15>::fmt(_1: &E, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "E";
        _0 = Formatter::<'_>::write_str(_2, _3) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/deriving/deriving-show-2.rs:15:10: 15:15>::fmt(_1: &F, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&isize;
    let _6: &isize;

    bb0: {
        _3 = const "F";
        _6 = &((*_1).0: isize);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/deriving/deriving-show-2.rs:17:10: 17:15>::fmt(_1: &G, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &isize;
    let mut _6: &dyn std::fmt::Debug;
    let _7: &&isize;
    let _8: &isize;

    bb0: {
        _3 = const "G";
        _5 = &((*_1).0: isize);
        _4 = _5 as &dyn std::fmt::Debug (Pointer(Unsize));
        _8 = &((*_1).1: isize);
        _7 = &_8;
        _6 = _7 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field2_finish(_2, _3, move _4, move _6) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/deriving/deriving-show-2.rs:19:10: 19:15>::fmt(_1: &H, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &&isize;
    let _7: &isize;

    bb0: {
        _3 = const "H";
        _4 = const "a";
        _7 = &((*_1).0: isize);
        _6 = &_7;
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _3, _4, move _5) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/deriving/deriving-show-2.rs:21:10: 21:15>::fmt(_1: &I, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &isize;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&isize;
    let _10: &isize;

    bb0: {
        _3 = const "I";
        _4 = const "a";
        _6 = &((*_1).0: isize);
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize));
        _7 = const "b";
        _10 = &((*_1).1: isize);
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/deriving/deriving-show-2.rs:23:10: 23:15>::fmt(_1: &J, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&Custom;
    let _6: &Custom;

    bb0: {
        _3 = const "J";
        _6 = &((*_1).0: Custom);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/deriving/deriving-show-2.rs:27:1: 27:27>::fmt(_1: &Custom, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 1];
    let _6: [&str; 1];

    bb0: {
        _6 = [const "yay"];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_const(move _4) -> bb1;
    }

    bb1: {
        _0 = Formatter::<'_>::write_fmt(_2, move _3) -> bb2;
    }

    bb2: {
        return;
    }
}

fn <impl at ui/deriving/deriving-show-2.rs:37:1: 37:34>::to_show(_1: &T) -> String {
    debug self => _1;
    let mut _0: std::string::String;
    let _2: std::string::String;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 1];
    let _6: [&str; 1];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &&T;
    scope 1 {
        debug res => _2;
    }

    bb0: {
        _6 = [const ""];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _11 = &_1;
        _10 = core::fmt::rt::Argument::<'_>::new_debug::<&T>(_11) -> bb1;
    }

    bb1: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb2;
    }

    bb2: {
        _2 = format(move _3) -> bb3;
    }

    bb3: {
        _0 = move _2;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&std::string::String, &std::string::String);
    let mut _2: &std::string::String;
    let _3: std::string::String;
    let mut _4: &B;
    let _5: B;
    let mut _6: &std::string::String;
    let _7: std::string::String;
    let _8: &str;
    let _9: &std::string::String;
    let _10: &std::string::String;
    let mut _11: bool;
    let mut _12: bool;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&std::string::String, &std::string::String);
    let mut _17: &std::string::String;
    let _18: std::string::String;
    let mut _19: &B;
    let _20: B;
    let mut _21: &std::string::String;
    let _22: std::string::String;
    let _23: &str;
    let _24: &std::string::String;
    let _25: &std::string::String;
    let mut _26: bool;
    let mut _27: bool;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&std::string::String, &std::string::String);
    let mut _32: &std::string::String;
    let _33: std::string::String;
    let mut _34: &C;
    let _35: C;
    let mut _36: &std::string::String;
    let _37: std::string::String;
    let _38: &str;
    let _39: &std::string::String;
    let _40: &std::string::String;
    let mut _41: bool;
    let mut _42: bool;
    let _44: !;
    let mut _45: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _46: (&std::string::String, &std::string::String);
    let mut _47: &std::string::String;
    let _48: std::string::String;
    let mut _49: &C;
    let _50: C;
    let mut _51: B;
    let mut _52: &std::string::String;
    let _53: std::string::String;
    let _54: &str;
    let _55: &std::string::String;
    let _56: &std::string::String;
    let mut _57: bool;
    let mut _58: bool;
    let _60: !;
    let mut _61: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _62: (&std::string::String, &std::string::String);
    let mut _63: &std::string::String;
    let _64: std::string::String;
    let mut _65: &D;
    let _66: D;
    let mut _67: &std::string::String;
    let _68: std::string::String;
    let _69: &str;
    let _70: &std::string::String;
    let _71: &std::string::String;
    let mut _72: bool;
    let mut _73: bool;
    let _75: !;
    let mut _76: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _77: (&std::string::String, &std::string::String);
    let mut _78: &std::string::String;
    let _79: std::string::String;
    let mut _80: &E;
    let _81: E;
    let mut _82: &std::string::String;
    let _83: std::string::String;
    let _84: &str;
    let _85: &std::string::String;
    let _86: &std::string::String;
    let mut _87: bool;
    let mut _88: bool;
    let _90: !;
    let mut _91: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _92: (&std::string::String, &std::string::String);
    let mut _93: &std::string::String;
    let _94: std::string::String;
    let mut _95: &F;
    let _96: F;
    let mut _97: &std::string::String;
    let _98: std::string::String;
    let _99: &str;
    let _100: &std::string::String;
    let _101: &std::string::String;
    let mut _102: bool;
    let mut _103: bool;
    let _105: !;
    let mut _106: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _107: (&std::string::String, &std::string::String);
    let mut _108: &std::string::String;
    let _109: std::string::String;
    let mut _110: &G;
    let _111: G;
    let mut _112: &std::string::String;
    let _113: std::string::String;
    let _114: &str;
    let _115: &std::string::String;
    let _116: &std::string::String;
    let mut _117: bool;
    let mut _118: bool;
    let _120: !;
    let mut _121: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _122: (&std::string::String, &std::string::String);
    let mut _123: &std::string::String;
    let _124: std::string::String;
    let mut _125: &I;
    let _126: I;
    let mut _127: &std::string::String;
    let _128: std::string::String;
    let _129: &str;
    let _130: &std::string::String;
    let _131: &std::string::String;
    let mut _132: bool;
    let mut _133: bool;
    let _135: !;
    let mut _136: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _137: (&std::string::String, &std::string::String);
    let mut _138: &std::string::String;
    let _139: std::string::String;
    let mut _140: &J;
    let _141: J;
    let mut _142: &std::string::String;
    let _143: std::string::String;
    let _144: &str;
    let _145: &std::string::String;
    let _146: &std::string::String;
    let mut _147: bool;
    let mut _148: bool;
    let _150: !;
    let mut _151: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _9;
        debug right_val => _10;
        let _13: core::panicking::AssertKind;
        scope 2 {
            debug kind => _13;
        }
    }
    scope 3 {
        debug left_val => _24;
        debug right_val => _25;
        let _28: core::panicking::AssertKind;
        scope 4 {
            debug kind => _28;
        }
    }
    scope 5 {
        debug left_val => _39;
        debug right_val => _40;
        let _43: core::panicking::AssertKind;
        scope 6 {
            debug kind => _43;
        }
    }
    scope 7 {
        debug left_val => _55;
        debug right_val => _56;
        let _59: core::panicking::AssertKind;
        scope 8 {
            debug kind => _59;
        }
    }
    scope 9 {
        debug left_val => _70;
        debug right_val => _71;
        let _74: core::panicking::AssertKind;
        scope 10 {
            debug kind => _74;
        }
    }
    scope 11 {
        debug left_val => _85;
        debug right_val => _86;
        let _89: core::panicking::AssertKind;
        scope 12 {
            debug kind => _89;
        }
    }
    scope 13 {
        debug left_val => _100;
        debug right_val => _101;
        let _104: core::panicking::AssertKind;
        scope 14 {
            debug kind => _104;
        }
    }
    scope 15 {
        debug left_val => _115;
        debug right_val => _116;
        let _119: core::panicking::AssertKind;
        scope 16 {
            debug kind => _119;
        }
    }
    scope 17 {
        debug left_val => _130;
        debug right_val => _131;
        let _134: core::panicking::AssertKind;
        scope 18 {
            debug kind => _134;
        }
    }
    scope 19 {
        debug left_val => _145;
        debug right_val => _146;
        let _149: core::panicking::AssertKind;
        scope 20 {
            debug kind => _149;
        }
    }

    bb0: {
        _5 = B::B1;
        _4 = &_5;
        _3 = <B as ToDebug>::to_show(move _4) -> bb1;
    }

    bb1: {
        _2 = &_3;
        _8 = const "B1";
        _7 = <str as ToString>::to_string(_8) -> [return: bb2, unwind: bb94];
    }

    bb2: {
        _6 = &_7;
        _1 = (move _2, move _6);
        _9 = (_1.0: &std::string::String);
        _10 = (_1.1: &std::string::String);
        _12 = <String as PartialEq>::eq(_9, _10) -> [return: bb3, unwind: bb93];
    }

    bb3: {
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<String, String>(move _13, _9, _10, move _15) -> bb93;
    }

    bb5: {
        drop(_7) -> [return: bb6, unwind: bb94];
    }

    bb6: {
        drop(_3) -> bb7;
    }

    bb7: {
        _20 = B::B2;
        _19 = &_20;
        _18 = <B as ToDebug>::to_show(move _19) -> bb8;
    }

    bb8: {
        _17 = &_18;
        _23 = const "B2";
        _22 = <str as ToString>::to_string(_23) -> [return: bb9, unwind: bb92];
    }

    bb9: {
        _21 = &_22;
        _16 = (move _17, move _21);
        _24 = (_16.0: &std::string::String);
        _25 = (_16.1: &std::string::String);
        _27 = <String as PartialEq>::eq(_24, _25) -> [return: bb10, unwind: bb91];
    }

    bb10: {
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<String, String>(move _28, _24, _25, move _30) -> bb91;
    }

    bb12: {
        drop(_22) -> [return: bb13, unwind: bb92];
    }

    bb13: {
        drop(_18) -> bb14;
    }

    bb14: {
        _35 = C::C1(const 3_isize);
        _34 = &_35;
        _33 = <C as ToDebug>::to_show(move _34) -> [return: bb15, unwind: bb90];
    }

    bb15: {
        _32 = &_33;
        _38 = const "C1(3)";
        _37 = <str as ToString>::to_string(_38) -> [return: bb16, unwind: bb89];
    }

    bb16: {
        _36 = &_37;
        _31 = (move _32, move _36);
        _39 = (_31.0: &std::string::String);
        _40 = (_31.1: &std::string::String);
        _42 = <String as PartialEq>::eq(_39, _40) -> [return: bb17, unwind: bb88];
    }

    bb17: {
        _41 = Not(move _42);
        switchInt(move _41) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _43 = core::panicking::AssertKind::Eq;
        _45 = Option::<Arguments<'_>>::None;
        _44 = core::panicking::assert_failed::<String, String>(move _43, _39, _40, move _45) -> bb88;
    }

    bb19: {
        drop(_37) -> [return: bb20, unwind: bb89];
    }

    bb20: {
        drop(_33) -> [return: bb21, unwind: bb90];
    }

    bb21: {
        drop(_35) -> bb22;
    }

    bb22: {
        _51 = B::B2;
        _50 = C::C2(move _51);
        _49 = &_50;
        _48 = <C as ToDebug>::to_show(move _49) -> [return: bb23, unwind: bb87];
    }

    bb23: {
        _47 = &_48;
        _54 = const "C2(B2)";
        _53 = <str as ToString>::to_string(_54) -> [return: bb24, unwind: bb86];
    }

    bb24: {
        _52 = &_53;
        _46 = (move _47, move _52);
        _55 = (_46.0: &std::string::String);
        _56 = (_46.1: &std::string::String);
        _58 = <String as PartialEq>::eq(_55, _56) -> [return: bb25, unwind: bb85];
    }

    bb25: {
        _57 = Not(move _58);
        switchInt(move _57) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _59 = core::panicking::AssertKind::Eq;
        _61 = Option::<Arguments<'_>>::None;
        _60 = core::panicking::assert_failed::<String, String>(move _59, _55, _56, move _61) -> bb85;
    }

    bb27: {
        drop(_53) -> [return: bb28, unwind: bb86];
    }

    bb28: {
        drop(_48) -> [return: bb29, unwind: bb87];
    }

    bb29: {
        drop(_50) -> bb30;
    }

    bb30: {
        _66 = D::D1 { a: const 2_isize };
        _65 = &_66;
        _64 = <D as ToDebug>::to_show(move _65) -> bb31;
    }

    bb31: {
        _63 = &_64;
        _69 = const "D1 { a: 2 }";
        _68 = <str as ToString>::to_string(_69) -> [return: bb32, unwind: bb84];
    }

    bb32: {
        _67 = &_68;
        _62 = (move _63, move _67);
        _70 = (_62.0: &std::string::String);
        _71 = (_62.1: &std::string::String);
        _73 = <String as PartialEq>::eq(_70, _71) -> [return: bb33, unwind: bb83];
    }

    bb33: {
        _72 = Not(move _73);
        switchInt(move _72) -> [0: bb35, otherwise: bb34];
    }

    bb34: {
        _74 = core::panicking::AssertKind::Eq;
        _76 = Option::<Arguments<'_>>::None;
        _75 = core::panicking::assert_failed::<String, String>(move _74, _70, _71, move _76) -> bb83;
    }

    bb35: {
        drop(_68) -> [return: bb36, unwind: bb84];
    }

    bb36: {
        drop(_64) -> bb37;
    }

    bb37: {
        _80 = &_81;
        _79 = <E as ToDebug>::to_show(move _80) -> bb38;
    }

    bb38: {
        _78 = &_79;
        _84 = const "E";
        _83 = <str as ToString>::to_string(_84) -> [return: bb39, unwind: bb82];
    }

    bb39: {
        _82 = &_83;
        _77 = (move _78, move _82);
        _85 = (_77.0: &std::string::String);
        _86 = (_77.1: &std::string::String);
        _88 = <String as PartialEq>::eq(_85, _86) -> [return: bb40, unwind: bb81];
    }

    bb40: {
        _87 = Not(move _88);
        switchInt(move _87) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _89 = core::panicking::AssertKind::Eq;
        _91 = Option::<Arguments<'_>>::None;
        _90 = core::panicking::assert_failed::<String, String>(move _89, _85, _86, move _91) -> bb81;
    }

    bb42: {
        drop(_83) -> [return: bb43, unwind: bb82];
    }

    bb43: {
        drop(_79) -> bb44;
    }

    bb44: {
        _96 = F(const 3_isize);
        _95 = &_96;
        _94 = <F as ToDebug>::to_show(move _95) -> bb45;
    }

    bb45: {
        _93 = &_94;
        _99 = const "F(3)";
        _98 = <str as ToString>::to_string(_99) -> [return: bb46, unwind: bb80];
    }

    bb46: {
        _97 = &_98;
        _92 = (move _93, move _97);
        _100 = (_92.0: &std::string::String);
        _101 = (_92.1: &std::string::String);
        _103 = <String as PartialEq>::eq(_100, _101) -> [return: bb47, unwind: bb79];
    }

    bb47: {
        _102 = Not(move _103);
        switchInt(move _102) -> [0: bb49, otherwise: bb48];
    }

    bb48: {
        _104 = core::panicking::AssertKind::Eq;
        _106 = Option::<Arguments<'_>>::None;
        _105 = core::panicking::assert_failed::<String, String>(move _104, _100, _101, move _106) -> bb79;
    }

    bb49: {
        drop(_98) -> [return: bb50, unwind: bb80];
    }

    bb50: {
        drop(_94) -> bb51;
    }

    bb51: {
        _111 = G(const 3_isize, const 4_isize);
        _110 = &_111;
        _109 = <G as ToDebug>::to_show(move _110) -> bb52;
    }

    bb52: {
        _108 = &_109;
        _114 = const "G(3, 4)";
        _113 = <str as ToString>::to_string(_114) -> [return: bb53, unwind: bb78];
    }

    bb53: {
        _112 = &_113;
        _107 = (move _108, move _112);
        _115 = (_107.0: &std::string::String);
        _116 = (_107.1: &std::string::String);
        _118 = <String as PartialEq>::eq(_115, _116) -> [return: bb54, unwind: bb77];
    }

    bb54: {
        _117 = Not(move _118);
        switchInt(move _117) -> [0: bb56, otherwise: bb55];
    }

    bb55: {
        _119 = core::panicking::AssertKind::Eq;
        _121 = Option::<Arguments<'_>>::None;
        _120 = core::panicking::assert_failed::<String, String>(move _119, _115, _116, move _121) -> bb77;
    }

    bb56: {
        drop(_113) -> [return: bb57, unwind: bb78];
    }

    bb57: {
        drop(_109) -> bb58;
    }

    bb58: {
        _126 = I { a: const 2_isize, b: const 4_isize };
        _125 = &_126;
        _124 = <I as ToDebug>::to_show(move _125) -> bb59;
    }

    bb59: {
        _123 = &_124;
        _129 = const "I { a: 2, b: 4 }";
        _128 = <str as ToString>::to_string(_129) -> [return: bb60, unwind: bb76];
    }

    bb60: {
        _127 = &_128;
        _122 = (move _123, move _127);
        _130 = (_122.0: &std::string::String);
        _131 = (_122.1: &std::string::String);
        _133 = <String as PartialEq>::eq(_130, _131) -> [return: bb61, unwind: bb75];
    }

    bb61: {
        _132 = Not(move _133);
        switchInt(move _132) -> [0: bb63, otherwise: bb62];
    }

    bb62: {
        _134 = core::panicking::AssertKind::Eq;
        _136 = Option::<Arguments<'_>>::None;
        _135 = core::panicking::assert_failed::<String, String>(move _134, _130, _131, move _136) -> bb75;
    }

    bb63: {
        drop(_128) -> [return: bb64, unwind: bb76];
    }

    bb64: {
        drop(_124) -> bb65;
    }

    bb65: {
        _140 = &_141;
        _139 = <J as ToDebug>::to_show(move _140) -> bb66;
    }

    bb66: {
        _138 = &_139;
        _144 = const "J(yay)";
        _143 = <str as ToString>::to_string(_144) -> [return: bb67, unwind: bb74];
    }

    bb67: {
        _142 = &_143;
        _137 = (move _138, move _142);
        _145 = (_137.0: &std::string::String);
        _146 = (_137.1: &std::string::String);
        _148 = <String as PartialEq>::eq(_145, _146) -> [return: bb68, unwind: bb73];
    }

    bb68: {
        _147 = Not(move _148);
        switchInt(move _147) -> [0: bb70, otherwise: bb69];
    }

    bb69: {
        _149 = core::panicking::AssertKind::Eq;
        _151 = Option::<Arguments<'_>>::None;
        _150 = core::panicking::assert_failed::<String, String>(move _149, _145, _146, move _151) -> bb73;
    }

    bb70: {
        drop(_143) -> [return: bb71, unwind: bb74];
    }

    bb71: {
        drop(_139) -> bb72;
    }

    bb72: {
        return;
    }

    bb73 (cleanup): {
        drop(_143) -> [return: bb74, unwind terminate];
    }

    bb74 (cleanup): {
        drop(_139) -> [return: bb95, unwind terminate];
    }

    bb75 (cleanup): {
        drop(_128) -> [return: bb76, unwind terminate];
    }

    bb76 (cleanup): {
        drop(_124) -> [return: bb95, unwind terminate];
    }

    bb77 (cleanup): {
        drop(_113) -> [return: bb78, unwind terminate];
    }

    bb78 (cleanup): {
        drop(_109) -> [return: bb95, unwind terminate];
    }

    bb79 (cleanup): {
        drop(_98) -> [return: bb80, unwind terminate];
    }

    bb80 (cleanup): {
        drop(_94) -> [return: bb95, unwind terminate];
    }

    bb81 (cleanup): {
        drop(_83) -> [return: bb82, unwind terminate];
    }

    bb82 (cleanup): {
        drop(_79) -> [return: bb95, unwind terminate];
    }

    bb83 (cleanup): {
        drop(_68) -> [return: bb84, unwind terminate];
    }

    bb84 (cleanup): {
        drop(_64) -> [return: bb95, unwind terminate];
    }

    bb85 (cleanup): {
        drop(_53) -> [return: bb86, unwind terminate];
    }

    bb86 (cleanup): {
        drop(_48) -> [return: bb87, unwind terminate];
    }

    bb87 (cleanup): {
        drop(_50) -> [return: bb95, unwind terminate];
    }

    bb88 (cleanup): {
        drop(_37) -> [return: bb89, unwind terminate];
    }

    bb89 (cleanup): {
        drop(_33) -> [return: bb90, unwind terminate];
    }

    bb90 (cleanup): {
        drop(_35) -> [return: bb95, unwind terminate];
    }

    bb91 (cleanup): {
        drop(_22) -> [return: bb92, unwind terminate];
    }

    bb92 (cleanup): {
        drop(_18) -> [return: bb95, unwind terminate];
    }

    bb93 (cleanup): {
        drop(_7) -> [return: bb94, unwind terminate];
    }

    bb94 (cleanup): {
        drop(_3) -> [return: bb95, unwind terminate];
    }

    bb95 (cleanup): {
        resume;
    }
}

fn C::C1(_1: isize) -> C {
    let mut _0: C;

    bb0: {
        _0 = C::C1(move _1);
        return;
    }
}

// MIR FOR CTFE
fn C::C1(_1: isize) -> C {
    let mut _0: C;

    bb0: {
        _0 = C::C1(move _1);
        return;
    }
}

fn C::C2(_1: B) -> C {
    let mut _0: C;

    bb0: {
        _0 = C::C2(move _1);
        return;
    }
}

// MIR FOR CTFE
fn C::C2(_1: B) -> C {
    let mut _0: C;

    bb0: {
        _0 = C::C2(move _1);
        return;
    }
}

fn C::C3(_1: String) -> C {
    let mut _0: C;

    bb0: {
        _0 = C::C3(move _1);
        return;
    }
}

// MIR FOR CTFE
fn C::C3(_1: String) -> C {
    let mut _0: C;

    bb0: {
        _0 = C::C3(move _1);
        return;
    }
}

fn F(_1: isize) -> F {
    let mut _0: F;

    bb0: {
        _0 = F(move _1);
        return;
    }
}

// MIR FOR CTFE
fn F(_1: isize) -> F {
    let mut _0: F;

    bb0: {
        _0 = F(move _1);
        return;
    }
}

fn G(_1: isize, _2: isize) -> G {
    let mut _0: G;

    bb0: {
        _0 = G(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn G(_1: isize, _2: isize) -> G {
    let mut _0: G;

    bb0: {
        _0 = G(move _1, move _2);
        return;
    }
}

fn J(_1: Custom) -> J {
    let mut _0: J;

    bb0: {
        _0 = J(move _1);
        return;
    }
}

// MIR FOR CTFE
fn J(_1: Custom) -> J {
    let mut _0: J;

    bb0: {
        _0 = J(move _1);
        return;
    }
}
