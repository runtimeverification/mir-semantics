// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/deriving-cmp-shortcircuit.rs:10:1: 10:27>::eq(_1: &FailCmp, _2: &FailCmp) -> bool {
    debug self => _1;
    let mut _0: bool;
    let _3: !;

    bb0: {
        _3 = begin_panic::<&str>(const "eq");
    }
}

fn <impl at ui/deriving/deriving-cmp-shortcircuit.rs:14:1: 14:28>::partial_cmp(_1: &FailCmp, _2: &FailCmp) -> Option<std::cmp::Ordering> {
    debug self => _1;
    let mut _0: std::option::Option<std::cmp::Ordering>;
    let _3: !;

    bb0: {
        _3 = begin_panic::<&str>(const "partial_cmp");
    }
}

fn <impl at ui/deriving/deriving-cmp-shortcircuit.rs:20:1: 20:21>::cmp(_1: &FailCmp, _2: &FailCmp) -> std::cmp::Ordering {
    debug self => _1;
    let mut _0: std::cmp::Ordering;
    let _3: !;

    bb0: {
        _3 = begin_panic::<&str>(const "cmp");
    }
}

fn <impl at ui/deriving/deriving-cmp-shortcircuit.rs:24:10: 24:19>::eq(_1: &ShortCircuit, _2: &ShortCircuit) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: isize;
    let mut _5: isize;
    let mut _6: bool;
    let mut _7: &FailCmp;
    let mut _8: &FailCmp;

    bb0: {
        _4 = ((*_1).0: isize);
        _5 = ((*_2).0: isize);
        _3 = Eq(move _4, move _5);
        switchInt(move _3) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _7 = &((*_1).1: FailCmp);
        _8 = &((*_2).1: FailCmp);
        _6 = <FailCmp as PartialEq>::eq(move _7, move _8) -> bb4;
    }

    bb3: {
        return;
    }

    bb4: {
        _0 = move _6;
        goto -> bb3;
    }
}

fn <impl at ui/deriving/deriving-cmp-shortcircuit.rs:24:20: 24:30>::partial_cmp(_1: &ShortCircuit, _2: &ShortCircuit) -> Option<std::cmp::Ordering> {
    debug self => _1;
    debug other => _2;
    let mut _0: std::option::Option<std::cmp::Ordering>;
    let mut _3: std::option::Option<std::cmp::Ordering>;
    let _4: &isize;
    let _5: &isize;
    let mut _6: i8;
    let mut _7: isize;
    let _8: &FailCmp;
    let _9: &FailCmp;
    let _10: std::option::Option<std::cmp::Ordering>;
    scope 1 {
        debug cmp => _10;
    }

    bb0: {
        _4 = &((*_1).0: isize);
        _5 = &((*_2).0: isize);
        _3 = <isize as PartialOrd>::partial_cmp(_4, _5) -> bb1;
    }

    bb1: {
        _7 = discriminant(_3);
        switchInt(move _7) -> [1: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = _3;
        _0 = _10;
        goto -> bb5;
    }

    bb3: {
        _6 = discriminant(((_3 as Some).0: std::cmp::Ordering));
        switchInt(move _6) -> [0: bb4, otherwise: bb2];
    }

    bb4: {
        _8 = &((*_1).1: FailCmp);
        _9 = &((*_2).1: FailCmp);
        _0 = <FailCmp as PartialOrd>::partial_cmp(_8, _9) -> bb5;
    }

    bb5: {
        return;
    }
}

fn <impl at ui/deriving/deriving-cmp-shortcircuit.rs:24:31: 24:33>::assert_receiver_is_total_eq(_1: &ShortCircuit) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        return;
    }
}

fn <impl at ui/deriving/deriving-cmp-shortcircuit.rs:24:34: 24:37>::cmp(_1: &ShortCircuit, _2: &ShortCircuit) -> std::cmp::Ordering {
    debug self => _1;
    debug other => _2;
    let mut _0: std::cmp::Ordering;
    let mut _3: std::cmp::Ordering;
    let _4: &isize;
    let _5: &isize;
    let mut _6: i8;
    let _7: &FailCmp;
    let _8: &FailCmp;
    let _9: std::cmp::Ordering;
    scope 1 {
        debug cmp => _9;
    }

    bb0: {
        _4 = &((*_1).0: isize);
        _5 = &((*_2).0: isize);
        _3 = <isize as Ord>::cmp(_4, _5) -> bb1;
    }

    bb1: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _9 = _3;
        _0 = _9;
        goto -> bb4;
    }

    bb3: {
        _7 = &((*_1).1: FailCmp);
        _8 = &((*_2).1: FailCmp);
        _0 = <FailCmp as Ord>::cmp(_7, _8) -> bb4;
    }

    bb4: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ShortCircuit;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: &ShortCircuit;
    let mut _6: &ShortCircuit;
    let mut _7: !;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: &ShortCircuit;
    let mut _11: &ShortCircuit;
    let mut _12: !;
    let mut _13: (&std::cmp::Ordering, &std::cmp::Ordering);
    let mut _14: &std::cmp::Ordering;
    let _15: std::cmp::Ordering;
    let mut _16: &ShortCircuit;
    let _17: &ShortCircuit;
    let mut _18: &std::cmp::Ordering;
    let _19: std::cmp::Ordering;
    let mut _22: bool;
    let mut _23: bool;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug a => _1;
        let _2: ShortCircuit;
        scope 2 {
            debug b => _2;
            let _20: &std::cmp::Ordering;
            let _21: &std::cmp::Ordering;
            scope 3 {
                debug left_val => _20;
                debug right_val => _21;
                let _24: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _24;
                }
            }
        }
    }

    bb0: {
        _1 = ShortCircuit { x: const 1_isize, y: const FailCmp };
        _2 = ShortCircuit { x: const 2_isize, y: const FailCmp };
        _5 = &_1;
        _6 = &_2;
        _4 = <ShortCircuit as PartialEq>::ne(move _5, move _6) -> bb1;
    }

    bb1: {
        _3 = Not(move _4);
        switchInt(move _3) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _7 = core::panicking::panic(const "assertion failed: a != b");
    }

    bb3: {
        _10 = &_1;
        _11 = &_2;
        _9 = <ShortCircuit as PartialOrd>::lt(move _10, move _11) -> bb4;
    }

    bb4: {
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _12 = core::panicking::panic(const "assertion failed: a < b");
    }

    bb6: {
        _16 = &_1;
        _17 = &_2;
        _15 = <ShortCircuit as Ord>::cmp(move _16, _17) -> bb7;
    }

    bb7: {
        _14 = &_15;
        _19 = Less;
        _18 = &_19;
        _13 = (move _14, move _18);
        _20 = (_13.0: &std::cmp::Ordering);
        _21 = (_13.1: &std::cmp::Ordering);
        _23 = <std::cmp::Ordering as PartialEq>::eq(_20, _21) -> bb8;
    }

    bb8: {
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<std::cmp::Ordering, std::cmp::Ordering>(move _24, _20, _21, move _26);
    }

    bb10: {
        return;
    }
}
