// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/deriving-eq-ord-boxed-slice.rs:2:10: 2:19>::eq(_1: &Foo, _2: &Foo) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: &std::boxed::Box<[u8]>;
    let mut _4: &std::boxed::Box<[u8]>;

    bb0: {
        _3 = &((*_1).0: std::boxed::Box<[u8]>);
        _4 = &((*_2).0: std::boxed::Box<[u8]>);
        _0 = <Box<[u8]> as PartialEq>::eq(move _3, move _4) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/deriving/deriving-eq-ord-boxed-slice.rs:2:21: 2:31>::partial_cmp(_1: &Foo, _2: &Foo) -> Option<std::cmp::Ordering> {
    debug self => _1;
    debug other => _2;
    let mut _0: std::option::Option<std::cmp::Ordering>;
    let _3: &std::boxed::Box<[u8]>;
    let _4: &std::boxed::Box<[u8]>;

    bb0: {
        _3 = &((*_1).0: std::boxed::Box<[u8]>);
        _4 = &((*_2).0: std::boxed::Box<[u8]>);
        _0 = <Box<[u8]> as PartialOrd>::partial_cmp(_3, _4) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/deriving/deriving-eq-ord-boxed-slice.rs:2:33: 2:35>::assert_receiver_is_total_eq(_1: &Foo) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn <impl at ui/deriving/deriving-eq-ord-boxed-slice.rs:2:37: 2:40>::cmp(_1: &Foo, _2: &Foo) -> std::cmp::Ordering {
    debug self => _1;
    debug other => _2;
    let mut _0: std::cmp::Ordering;
    let _3: &std::boxed::Box<[u8]>;
    let _4: &std::boxed::Box<[u8]>;

    bb0: {
        _3 = &((*_1).0: std::boxed::Box<[u8]>);
        _4 = &((*_2).0: std::boxed::Box<[u8]>);
        _0 = <Box<[u8]> as Ord>::cmp(_3, _4) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/deriving/deriving-eq-ord-boxed-slice.rs:2:42: 2:47>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&std::boxed::Box<[u8]>;
    let _6: &std::boxed::Box<[u8]>;

    bb0: {
        _3 = const "Foo";
        _6 = &((*_1).0: std::boxed::Box<[u8]>);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Foo;
    let mut _2: std::boxed::Box<[u8]>;
    let mut _3: std::boxed::Box<[u8; 3]>;
    let mut _4: [u8; 3];
    let mut _6: std::boxed::Box<[u8]>;
    let mut _7: std::boxed::Box<[u8; 3]>;
    let mut _8: [u8; 3];
    let mut _9: (&Foo, &Foo);
    let mut _10: &Foo;
    let mut _11: &Foo;
    let mut _14: bool;
    let mut _15: bool;
    let _17: !;
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>;
    let _19: ();
    let mut _20: std::fmt::Arguments<'_>;
    let mut _21: &[&str];
    let _22: &[&str; 2];
    let _23: [&str; 2];
    let mut _24: &[core::fmt::rt::Argument<'_>];
    let _25: &[core::fmt::rt::Argument<'_>; 1];
    let _26: [core::fmt::rt::Argument<'_>; 1];
    let mut _27: core::fmt::rt::Argument<'_>;
    let _28: &bool;
    let _29: bool;
    let mut _30: &Foo;
    let mut _31: &Foo;
    let _32: ();
    let mut _33: std::fmt::Arguments<'_>;
    let mut _34: &[&str];
    let _35: &[&str; 2];
    let _36: [&str; 2];
    let mut _37: &[core::fmt::rt::Argument<'_>];
    let _38: &[core::fmt::rt::Argument<'_>; 1];
    let _39: [core::fmt::rt::Argument<'_>; 1];
    let mut _40: core::fmt::rt::Argument<'_>;
    let _41: &bool;
    let _42: bool;
    let mut _43: &Foo;
    let mut _44: &Foo;
    let _45: ();
    let mut _46: std::fmt::Arguments<'_>;
    let mut _47: &[&str];
    let _48: &[&str; 2];
    let _49: [&str; 2];
    let mut _50: &[core::fmt::rt::Argument<'_>];
    let _51: &[core::fmt::rt::Argument<'_>; 1];
    let _52: [core::fmt::rt::Argument<'_>; 1];
    let mut _53: core::fmt::rt::Argument<'_>;
    let _54: &bool;
    let _55: bool;
    let mut _56: &Foo;
    let mut _57: &Foo;
    let _58: ();
    let mut _59: std::fmt::Arguments<'_>;
    let mut _60: &[&str];
    let _61: &[&str; 2];
    let _62: [&str; 2];
    let mut _63: &[core::fmt::rt::Argument<'_>];
    let _64: &[core::fmt::rt::Argument<'_>; 1];
    let _65: [core::fmt::rt::Argument<'_>; 1];
    let mut _66: core::fmt::rt::Argument<'_>;
    let _67: &bool;
    let _68: bool;
    let mut _69: &Foo;
    let mut _70: &Foo;
    let _71: ();
    let mut _72: std::fmt::Arguments<'_>;
    let mut _73: &[&str];
    let _74: &[&str; 2];
    let _75: [&str; 2];
    let mut _76: &[core::fmt::rt::Argument<'_>];
    let _77: &[core::fmt::rt::Argument<'_>; 1];
    let _78: [core::fmt::rt::Argument<'_>; 1];
    let mut _79: core::fmt::rt::Argument<'_>;
    let _80: &bool;
    let _81: bool;
    let mut _82: &Foo;
    let mut _83: &Foo;
    let _84: ();
    let mut _85: std::fmt::Arguments<'_>;
    let mut _86: &[&str];
    let _87: &[&str; 2];
    let _88: [&str; 2];
    let mut _89: &[core::fmt::rt::Argument<'_>];
    let _90: &[core::fmt::rt::Argument<'_>; 1];
    let _91: [core::fmt::rt::Argument<'_>; 1];
    let mut _92: core::fmt::rt::Argument<'_>;
    let _93: &bool;
    let _94: bool;
    let mut _95: &Foo;
    let mut _96: &Foo;
    scope 1 {
        debug a => _1;
        let _5: Foo;
        scope 2 {
            debug b => _5;
            let _12: &Foo;
            let _13: &Foo;
            scope 3 {
                debug left_val => _12;
                debug right_val => _13;
                let _16: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _16;
                }
            }
        }
    }

    bb0: {
        _4 = [const 0_u8, const 1_u8, const 2_u8];
        _3 = Box::<[u8; 3]>::new(move _4) -> bb1;
    }

    bb1: {
        _2 = move _3 as std::boxed::Box<[u8]> (Pointer(Unsize));
        _1 = Foo(move _2);
        _8 = [const 0_u8, const 1_u8, const 2_u8];
        _7 = Box::<[u8; 3]>::new(move _8) -> [return: bb2, unwind: bb33];
    }

    bb2: {
        _6 = move _7 as std::boxed::Box<[u8]> (Pointer(Unsize));
        _5 = Foo(move _6);
        _10 = &_1;
        _11 = &_5;
        _9 = (move _10, move _11);
        _12 = (_9.0: &Foo);
        _13 = (_9.1: &Foo);
        _15 = <Foo as PartialEq>::eq(_12, _13) -> [return: bb3, unwind: bb32];
    }

    bb3: {
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _16 = core::panicking::AssertKind::Eq;
        _18 = Option::<Arguments<'_>>::None;
        _17 = core::panicking::assert_failed::<Foo, Foo>(move _16, _12, _13, move _18) -> bb32;
    }

    bb5: {
        _23 = [const "", const "\n"];
        _22 = &_23;
        _21 = _22 as &[&str] (Pointer(Unsize));
        _30 = &_1;
        _31 = &_5;
        _29 = <Foo as PartialEq>::ne(move _30, move _31) -> [return: bb6, unwind: bb32];
    }

    bb6: {
        _28 = &_29;
        _27 = core::fmt::rt::Argument::<'_>::new_display::<bool>(_28) -> [return: bb7, unwind: bb32];
    }

    bb7: {
        _26 = [move _27];
        _25 = &_26;
        _24 = _25 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _20 = Arguments::<'_>::new_v1(move _21, move _24) -> [return: bb8, unwind: bb32];
    }

    bb8: {
        _19 = _print(move _20) -> [return: bb9, unwind: bb32];
    }

    bb9: {
        _36 = [const "", const "\n"];
        _35 = &_36;
        _34 = _35 as &[&str] (Pointer(Unsize));
        _43 = &_1;
        _44 = &_5;
        _42 = <Foo as PartialOrd>::lt(move _43, move _44) -> [return: bb10, unwind: bb32];
    }

    bb10: {
        _41 = &_42;
        _40 = core::fmt::rt::Argument::<'_>::new_display::<bool>(_41) -> [return: bb11, unwind: bb32];
    }

    bb11: {
        _39 = [move _40];
        _38 = &_39;
        _37 = _38 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _33 = Arguments::<'_>::new_v1(move _34, move _37) -> [return: bb12, unwind: bb32];
    }

    bb12: {
        _32 = _print(move _33) -> [return: bb13, unwind: bb32];
    }

    bb13: {
        _49 = [const "", const "\n"];
        _48 = &_49;
        _47 = _48 as &[&str] (Pointer(Unsize));
        _56 = &_1;
        _57 = &_5;
        _55 = <Foo as PartialOrd>::le(move _56, move _57) -> [return: bb14, unwind: bb32];
    }

    bb14: {
        _54 = &_55;
        _53 = core::fmt::rt::Argument::<'_>::new_display::<bool>(_54) -> [return: bb15, unwind: bb32];
    }

    bb15: {
        _52 = [move _53];
        _51 = &_52;
        _50 = _51 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _46 = Arguments::<'_>::new_v1(move _47, move _50) -> [return: bb16, unwind: bb32];
    }

    bb16: {
        _45 = _print(move _46) -> [return: bb17, unwind: bb32];
    }

    bb17: {
        _62 = [const "", const "\n"];
        _61 = &_62;
        _60 = _61 as &[&str] (Pointer(Unsize));
        _69 = &_1;
        _70 = &_5;
        _68 = <Foo as PartialEq>::eq(move _69, move _70) -> [return: bb18, unwind: bb32];
    }

    bb18: {
        _67 = &_68;
        _66 = core::fmt::rt::Argument::<'_>::new_display::<bool>(_67) -> [return: bb19, unwind: bb32];
    }

    bb19: {
        _65 = [move _66];
        _64 = &_65;
        _63 = _64 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _59 = Arguments::<'_>::new_v1(move _60, move _63) -> [return: bb20, unwind: bb32];
    }

    bb20: {
        _58 = _print(move _59) -> [return: bb21, unwind: bb32];
    }

    bb21: {
        _75 = [const "", const "\n"];
        _74 = &_75;
        _73 = _74 as &[&str] (Pointer(Unsize));
        _82 = &_1;
        _83 = &_5;
        _81 = <Foo as PartialOrd>::gt(move _82, move _83) -> [return: bb22, unwind: bb32];
    }

    bb22: {
        _80 = &_81;
        _79 = core::fmt::rt::Argument::<'_>::new_display::<bool>(_80) -> [return: bb23, unwind: bb32];
    }

    bb23: {
        _78 = [move _79];
        _77 = &_78;
        _76 = _77 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _72 = Arguments::<'_>::new_v1(move _73, move _76) -> [return: bb24, unwind: bb32];
    }

    bb24: {
        _71 = _print(move _72) -> [return: bb25, unwind: bb32];
    }

    bb25: {
        _88 = [const "", const "\n"];
        _87 = &_88;
        _86 = _87 as &[&str] (Pointer(Unsize));
        _95 = &_1;
        _96 = &_5;
        _94 = <Foo as PartialOrd>::ge(move _95, move _96) -> [return: bb26, unwind: bb32];
    }

    bb26: {
        _93 = &_94;
        _92 = core::fmt::rt::Argument::<'_>::new_display::<bool>(_93) -> [return: bb27, unwind: bb32];
    }

    bb27: {
        _91 = [move _92];
        _90 = &_91;
        _89 = _90 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _85 = Arguments::<'_>::new_v1(move _86, move _89) -> [return: bb28, unwind: bb32];
    }

    bb28: {
        _84 = _print(move _85) -> [return: bb29, unwind: bb32];
    }

    bb29: {
        drop(_5) -> [return: bb30, unwind: bb33];
    }

    bb30: {
        drop(_1) -> bb31;
    }

    bb31: {
        return;
    }

    bb32 (cleanup): {
        drop(_5) -> [return: bb33, unwind terminate];
    }

    bb33 (cleanup): {
        drop(_1) -> [return: bb34, unwind terminate];
    }

    bb34 (cleanup): {
        resume;
    }
}

fn Foo(_1: Box<[u8]>) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: Box<[u8]>) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo(move _1);
        return;
    }
}
