// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/deriving-via-extension-struct-empty.rs:2:10: 2:19>::eq(_1: &Foo, _2: &Foo) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;

    bb0: {
        _0 = const true;
        return;
    }
}

fn <impl at ui/deriving/deriving-via-extension-struct-empty.rs:2:21: 2:26>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "Foo";
        _0 = Formatter::<'_>::write_str(_2, _3) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&Foo, &Foo);
    let mut _2: &Foo;
    let _3: Foo;
    let mut _4: &Foo;
    let _5: Foo;
    let _6: &Foo;
    let _7: &Foo;
    let mut _8: bool;
    let mut _9: bool;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: &Foo;
    let _17: Foo;
    let mut _18: &Foo;
    let _19: Foo;
    let mut _20: !;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }

    bb0: {
        _2 = &_3;
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &Foo);
        _7 = (_1.1: &Foo);
        _9 = <Foo as PartialEq>::eq(_6, _7) -> bb1;
    }

    bb1: {
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<Foo, Foo>(move _10, _6, _7, move _12);
    }

    bb3: {
        _16 = &_17;
        _18 = &_19;
        _15 = <Foo as PartialEq>::ne(move _16, move _18) -> bb4;
    }

    bb4: {
        _14 = Not(move _15);
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _20 = core::panicking::panic(const "assertion failed: !(Foo != Foo)");
    }

    bb6: {
        return;
    }
}
