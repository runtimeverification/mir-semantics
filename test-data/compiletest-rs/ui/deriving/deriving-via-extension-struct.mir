// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/deriving-via-extension-struct.rs:2:10: 2:19>::eq(_1: &Foo, _2: &Foo) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: isize;
    let mut _6: isize;
    let mut _7: bool;
    let mut _8: isize;
    let mut _9: isize;
    let mut _10: bool;
    let mut _11: isize;
    let mut _12: isize;

    bb0: {
        _5 = ((*_1).0: isize);
        _6 = ((*_2).0: isize);
        _4 = Eq(move _5, move _6);
        switchInt(move _4) -> [0: bb4, otherwise: bb5];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _11 = ((*_1).2: isize);
        _12 = ((*_2).2: isize);
        _10 = Eq(move _11, move _12);
        _0 = move _10;
        goto -> bb3;
    }

    bb3: {
        return;
    }

    bb4: {
        _3 = const false;
        goto -> bb6;
    }

    bb5: {
        _8 = ((*_1).1: isize);
        _9 = ((*_2).1: isize);
        _7 = Eq(move _8, move _9);
        _3 = move _7;
        goto -> bb6;
    }

    bb6: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2];
    }
}

fn <impl at ui/deriving/deriving-via-extension-struct.rs:2:21: 2:26>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &isize;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &isize;
    let _10: &str;
    let mut _11: &dyn std::fmt::Debug;
    let _12: &&isize;
    let _13: &isize;

    bb0: {
        _3 = const "Foo";
        _4 = const "x";
        _6 = &((*_1).0: isize);
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize));
        _7 = const "y";
        _9 = &((*_1).1: isize);
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize));
        _10 = const "z";
        _13 = &((*_1).2: isize);
        _12 = &_13;
        _11 = _12 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_struct_field3_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Foo;
    let mut _3: (&Foo, &Foo);
    let mut _4: &Foo;
    let mut _5: &Foo;
    let mut _8: bool;
    let mut _9: bool;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: &Foo;
    let mut _17: &Foo;
    let mut _18: !;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: &Foo;
    let _22: &Foo;
    let mut _23: !;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: &Foo;
    let _28: &Foo;
    let mut _29: !;
    scope 1 {
        debug a => _1;
        let _2: Foo;
        scope 2 {
            debug b => _2;
            let _6: &Foo;
            let _7: &Foo;
            scope 3 {
                debug left_val => _6;
                debug right_val => _7;
                let _10: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _10;
                }
            }
        }
    }

    bb0: {
        _1 = Foo { x: const 1_isize, y: const 2_isize, z: const 3_isize };
        _2 = Foo { x: const 1_isize, y: const 2_isize, z: const 3_isize };
        _4 = &_1;
        _5 = &_2;
        _3 = (move _4, move _5);
        _6 = (_3.0: &Foo);
        _7 = (_3.1: &Foo);
        _9 = <Foo as PartialEq>::eq(_6, _7) -> bb1;
    }

    bb1: {
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<Foo, Foo>(move _10, _6, _7, move _12);
    }

    bb3: {
        _16 = &_1;
        _17 = &_2;
        _15 = <Foo as PartialEq>::ne(move _16, move _17) -> bb4;
    }

    bb4: {
        _14 = Not(move _15);
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _18 = core::panicking::panic(const "assertion failed: !(a != b)");
    }

    bb6: {
        _21 = &_1;
        _22 = &_2;
        _20 = <Foo as PartialEq>::eq(move _21, _22) -> bb7;
    }

    bb7: {
        _19 = Not(move _20);
        switchInt(move _19) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _23 = core::panicking::panic(const "assertion failed: a.eq(&b)");
    }

    bb9: {
        _27 = &_1;
        _28 = &_2;
        _26 = <Foo as PartialEq>::ne(move _27, _28) -> bb10;
    }

    bb10: {
        _25 = Not(move _26);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _29 = core::panicking::panic(const "assertion failed: !a.ne(&b)");
    }

    bb12: {
        return;
    }
}
