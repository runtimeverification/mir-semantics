// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/deriving-clone-generic-enum.rs:5:10: 5:15>::clone(_1: &E<T, U>) -> E<T, U> {
    debug self => _1;
    let mut _0: E<T, U>;
    let mut _2: isize;
    let _3: &T;
    let mut _4: T;
    let _5: &T;
    let _6: &U;
    let mut _7: T;
    let mut _8: U;
    scope 1 {
        debug __self_0 => _3;
    }
    scope 2 {
        debug __self_0 => _5;
        debug __self_1 => _6;
    }

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb5, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = E::<T, U>::C;
        goto -> bb8;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _3 = &(((*_1) as A).0: T);
        _4 = <T as Clone>::clone(_3) -> bb4;
    }

    bb4: {
        _0 = E::<T, U>::A(move _4);
        goto -> bb8;
    }

    bb5: {
        _5 = &(((*_1) as B).0: T);
        _6 = &(((*_1) as B).1: U);
        _7 = <T as Clone>::clone(_5) -> bb6;
    }

    bb6: {
        _8 = <U as Clone>::clone(_6) -> [return: bb7, unwind: bb9];
    }

    bb7: {
        _0 = E::<T, U>::B(move _7, move _8);
        goto -> bb8;
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_7) -> [return: bb10, unwind terminate];
    }

    bb10 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: E<isize, isize>;
    let mut _2: &E<isize, isize>;
    let _3: E<isize, isize>;
    scope 1 {
    }

    bb0: {
        _3 = E::<isize, isize>::A(const 1_isize);
        _2 = &_3;
        _1 = <E<isize, isize> as Clone>::clone(move _2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn E::A(_1: T) -> E<T, U> {
    let mut _0: E<T, U>;

    bb0: {
        _0 = E::<T, U>::A(move _1);
        return;
    }
}

// MIR FOR CTFE
fn E::A(_1: T) -> E<T, U> {
    let mut _0: E<T, U>;

    bb0: {
        _0 = E::<T, U>::A(move _1);
        return;
    }
}

fn E::B(_1: T, _2: U) -> E<T, U> {
    let mut _0: E<T, U>;

    bb0: {
        _0 = E::<T, U>::B(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn E::B(_1: T, _2: U) -> E<T, U> {
    let mut _0: E<T, U>;

    bb0: {
        _0 = E::<T, U>::B(move _1, move _2);
        return;
    }
}
