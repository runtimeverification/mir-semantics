// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/deriving-self-lifetime-totalord-totaleq.rs:4:10: 4:19>::eq(_1: &A<'_>, _2: &A<'_>) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: &&isize;
    let mut _4: &&isize;

    bb0: {
        _3 = &((*_1).0: &isize);
        _4 = &((*_2).0: &isize);
        _0 = <&isize as PartialEq>::eq(move _3, move _4) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/deriving/deriving-self-lifetime-totalord-totaleq.rs:4:21: 4:23>::assert_receiver_is_total_eq(_1: &A<'_>) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn <impl at ui/deriving/deriving-self-lifetime-totalord-totaleq.rs:4:25: 4:35>::partial_cmp(_1: &A<'_>, _2: &A<'_>) -> Option<std::cmp::Ordering> {
    debug self => _1;
    debug other => _2;
    let mut _0: std::option::Option<std::cmp::Ordering>;
    let _3: &&isize;
    let _4: &&isize;

    bb0: {
        _3 = &((*_1).0: &isize);
        _4 = &((*_2).0: &isize);
        _0 = <&isize as PartialOrd>::partial_cmp(_3, _4) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/deriving/deriving-self-lifetime-totalord-totaleq.rs:4:37: 4:40>::cmp(_1: &A<'_>, _2: &A<'_>) -> std::cmp::Ordering {
    debug self => _1;
    debug other => _2;
    let mut _0: std::cmp::Ordering;
    let _3: &&isize;
    let _4: &&isize;

    bb0: {
        _3 = &((*_1).0: &isize);
        _4 = &((*_2).0: &isize);
        _0 = <&isize as Ord>::cmp(_3, _4) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: A<'_>;
    let _2: A<'_>;
    let mut _3: (A<'_>, A<'_>);
    let mut _4: A<'_>;
    let _5: &isize;
    let _6: isize;
    let mut _7: A<'_>;
    let _8: &isize;
    let _9: isize;
    let mut _10: (&std::cmp::Ordering, &std::cmp::Ordering);
    let mut _11: &std::cmp::Ordering;
    let _12: std::cmp::Ordering;
    let mut _13: &A<'_>;
    let _14: &A<'_>;
    let mut _15: &std::cmp::Ordering;
    let _16: std::cmp::Ordering;
    let mut _19: bool;
    let mut _20: bool;
    let _22: !;
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _24: (&std::cmp::Ordering, &std::cmp::Ordering);
    let mut _25: &std::cmp::Ordering;
    let _26: std::cmp::Ordering;
    let mut _27: &A<'_>;
    let _28: &A<'_>;
    let mut _29: &std::cmp::Ordering;
    let _30: std::cmp::Ordering;
    let mut _33: bool;
    let mut _34: bool;
    let _36: !;
    let mut _37: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _38: (&std::cmp::Ordering, &std::cmp::Ordering);
    let mut _39: &std::cmp::Ordering;
    let _40: std::cmp::Ordering;
    let mut _41: &A<'_>;
    let _42: &A<'_>;
    let mut _43: &std::cmp::Ordering;
    let _44: std::cmp::Ordering;
    let mut _47: bool;
    let mut _48: bool;
    let _50: !;
    let mut _51: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _52: (&std::cmp::Ordering, &std::cmp::Ordering);
    let mut _53: &std::cmp::Ordering;
    let _54: std::cmp::Ordering;
    let mut _55: &A<'_>;
    let _56: &A<'_>;
    let mut _57: &std::cmp::Ordering;
    let _58: std::cmp::Ordering;
    let mut _61: bool;
    let mut _62: bool;
    let _64: !;
    let mut _65: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug a => _1;
        debug b => _2;
        let _17: &std::cmp::Ordering;
        let _18: &std::cmp::Ordering;
        let _31: &std::cmp::Ordering;
        let _32: &std::cmp::Ordering;
        let _45: &std::cmp::Ordering;
        let _46: &std::cmp::Ordering;
        let _59: &std::cmp::Ordering;
        let _60: &std::cmp::Ordering;
        scope 2 {
            debug left_val => _17;
            debug right_val => _18;
            let _21: core::panicking::AssertKind;
            scope 3 {
                debug kind => _21;
            }
        }
        scope 4 {
            debug left_val => _31;
            debug right_val => _32;
            let _35: core::panicking::AssertKind;
            scope 5 {
                debug kind => _35;
            }
        }
        scope 6 {
            debug left_val => _45;
            debug right_val => _46;
            let _49: core::panicking::AssertKind;
            scope 7 {
                debug kind => _49;
            }
        }
        scope 8 {
            debug left_val => _59;
            debug right_val => _60;
            let _63: core::panicking::AssertKind;
            scope 9 {
                debug kind => _63;
            }
        }
    }

    bb0: {
        _6 = const 1_isize;
        _5 = &_6;
        _4 = A::<'_> { x: _5 };
        _9 = const 2_isize;
        _8 = &_9;
        _7 = A::<'_> { x: _8 };
        _3 = (move _4, move _7);
        _1 = move (_3.0: A<'_>);
        _2 = move (_3.1: A<'_>);
        _13 = &_1;
        _14 = &_1;
        _12 = <A<'_> as Ord>::cmp(move _13, _14) -> bb1;
    }

    bb1: {
        _11 = &_12;
        _16 = Equal;
        _15 = &_16;
        _10 = (move _11, move _15);
        _17 = (_10.0: &std::cmp::Ordering);
        _18 = (_10.1: &std::cmp::Ordering);
        _20 = <std::cmp::Ordering as PartialEq>::eq(_17, _18) -> bb2;
    }

    bb2: {
        _19 = Not(move _20);
        switchInt(move _19) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _21 = core::panicking::AssertKind::Eq;
        _23 = Option::<Arguments<'_>>::None;
        _22 = core::panicking::assert_failed::<std::cmp::Ordering, std::cmp::Ordering>(move _21, _17, _18, move _23);
    }

    bb4: {
        _27 = &_2;
        _28 = &_2;
        _26 = <A<'_> as Ord>::cmp(move _27, _28) -> bb5;
    }

    bb5: {
        _25 = &_26;
        _30 = Equal;
        _29 = &_30;
        _24 = (move _25, move _29);
        _31 = (_24.0: &std::cmp::Ordering);
        _32 = (_24.1: &std::cmp::Ordering);
        _34 = <std::cmp::Ordering as PartialEq>::eq(_31, _32) -> bb6;
    }

    bb6: {
        _33 = Not(move _34);
        switchInt(move _33) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _35 = core::panicking::AssertKind::Eq;
        _37 = Option::<Arguments<'_>>::None;
        _36 = core::panicking::assert_failed::<std::cmp::Ordering, std::cmp::Ordering>(move _35, _31, _32, move _37);
    }

    bb8: {
        _41 = &_1;
        _42 = &_2;
        _40 = <A<'_> as Ord>::cmp(move _41, _42) -> bb9;
    }

    bb9: {
        _39 = &_40;
        _44 = Less;
        _43 = &_44;
        _38 = (move _39, move _43);
        _45 = (_38.0: &std::cmp::Ordering);
        _46 = (_38.1: &std::cmp::Ordering);
        _48 = <std::cmp::Ordering as PartialEq>::eq(_45, _46) -> bb10;
    }

    bb10: {
        _47 = Not(move _48);
        switchInt(move _47) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _49 = core::panicking::AssertKind::Eq;
        _51 = Option::<Arguments<'_>>::None;
        _50 = core::panicking::assert_failed::<std::cmp::Ordering, std::cmp::Ordering>(move _49, _45, _46, move _51);
    }

    bb12: {
        _55 = &_2;
        _56 = &_1;
        _54 = <A<'_> as Ord>::cmp(move _55, _56) -> bb13;
    }

    bb13: {
        _53 = &_54;
        _58 = Greater;
        _57 = &_58;
        _52 = (move _53, move _57);
        _59 = (_52.0: &std::cmp::Ordering);
        _60 = (_52.1: &std::cmp::Ordering);
        _62 = <std::cmp::Ordering as PartialEq>::eq(_59, _60) -> bb14;
    }

    bb14: {
        _61 = Not(move _62);
        switchInt(move _61) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _63 = core::panicking::AssertKind::Eq;
        _65 = Option::<Arguments<'_>>::None;
        _64 = core::panicking::assert_failed::<std::cmp::Ordering, std::cmp::Ordering>(move _63, _59, _60, move _65);
    }

    bb16: {
        return;
    }
}
