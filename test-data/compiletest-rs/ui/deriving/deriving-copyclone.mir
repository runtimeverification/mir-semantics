// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static CLONED: AtomicBool = {
    let mut _0: std::sync::atomic::AtomicBool;

    bb0: {
        ConstEvalCounter;
        _0 = AtomicBool::new(const false) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/deriving/deriving-copyclone.rs:15:1: 15:20>::clone(_1: &Liar) -> Liar {
    debug self => _1;
    let mut _0: Liar;
    let _2: ();
    let _3: &std::sync::atomic::AtomicBool;
    let mut _4: std::sync::atomic::Ordering;

    bb0: {
        _3 = const {alloc1: &AtomicBool};
        _4 = SeqCst;
        _2 = AtomicBool::store(_3, const true, move _4) -> bb1;
    }

    bb1: {
        return;
    }
}

alloc1 (static: CLONED, size: 1, align: 1) {
    00                                              │ .
}

fn <impl at ui/deriving/deriving-copyclone.rs:25:16: 25:21>::clone(_1: &Innocent) -> Innocent {
    debug self => _1;
    let mut _0: Innocent;
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn <impl at ui/deriving/deriving-copyclone.rs:28:1: 28:14>::new() -> Innocent {
    let mut _0: Innocent;

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: Innocent;
    let mut _2: &Innocent;
    let _3: Innocent;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let _7: &std::sync::atomic::AtomicBool;
    let mut _8: std::sync::atomic::Ordering;
    let mut _9: !;
    scope 1 {
    }

    bb0: {
        _3 = Innocent::new() -> bb1;
    }

    bb1: {
        _2 = &_3;
        _1 = <Innocent as Clone>::clone(move _2) -> bb2;
    }

    bb2: {
        _7 = const {alloc1: &AtomicBool};
        _8 = SeqCst;
        _6 = AtomicBool::load(_7, move _8) -> bb3;
    }

    bb3: {
        _5 = Not(move _6);
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _9 = core::panicking::panic(const "assertion failed: !CLONED.load(Ordering::SeqCst)");
    }

    bb5: {
        return;
    }
}

alloc1 (static: CLONED, size: 1, align: 1) {
    00                                              │ .
}

fn Innocent(_1: Liar) -> Innocent {
    let mut _0: Innocent;

    bb0: {
        _0 = Innocent(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Innocent(_1: Liar) -> Innocent {
    let mut _0: Innocent;

    bb0: {
        _0 = Innocent(move _1);
        return;
    }
}
