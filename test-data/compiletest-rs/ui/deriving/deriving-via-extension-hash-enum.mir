// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/deriving-via-extension-hash-enum.rs:3:10: 3:14>::hash(_1: &Foo, _2: &mut __H) -> () {
    debug self => _1;
    debug state => _2;
    let mut _0: ();
    let _3: isize;
    let _4: ();
    let _5: &isize;
    let mut _6: isize;
    let _9: ();
    let _12: ();
    scope 1 {
        debug __self_tag => _3;
        let _7: &isize;
        let _8: &char;
        let _10: &char;
        let _11: &isize;
        scope 2 {
            debug __self_0 => _7;
            debug __self_1 => _8;
        }
        scope 3 {
            debug __self_0 => _10;
            debug __self_1 => _11;
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _5 = &_3;
        _4 = <isize as Hash>::hash::<__H>(_5, _2) -> bb1;
    }

    bb1: {
        _6 = discriminant((*_1));
        switchInt(move _6) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _10 = &(((*_1) as Baz).0: char);
        _11 = &(((*_1) as Baz).1: isize);
        _12 = <char as Hash>::hash::<__H>(_10, _2) -> bb6;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _7 = &(((*_1) as Bar).0: isize);
        _8 = &(((*_1) as Bar).1: char);
        _9 = <isize as Hash>::hash::<__H>(_7, _2) -> bb5;
    }

    bb5: {
        _0 = <char as Hash>::hash::<__H>(_8, _2) -> bb7;
    }

    bb6: {
        _0 = <isize as Hash>::hash::<__H>(_11, _2) -> bb7;
    }

    bb7: {
        return;
    }
}

fn <impl at ui/deriving/deriving-via-extension-hash-enum.rs:9:10: 9:14>::hash(_1: &A, _2: &mut __H) -> () {
    debug self => _1;
    debug state => _2;
    let mut _0: ();
    let _3: isize;
    let _4: &isize;
    scope 1 {
        debug __self_tag => _3;
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = &_3;
        _0 = <isize as Hash>::hash::<__H>(_4, _2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn Foo::Bar(_1: isize, _2: char) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::Bar(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn Foo::Bar(_1: isize, _2: char) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::Bar(move _1, move _2);
        return;
    }
}

fn Foo::Baz(_1: char, _2: isize) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::Baz(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn Foo::Baz(_1: char, _2: isize) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::Baz(move _1, move _2);
        return;
    }
}
