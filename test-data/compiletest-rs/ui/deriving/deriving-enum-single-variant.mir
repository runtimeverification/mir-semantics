// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/deriving-enum-single-variant.rs:7:10: 7:19>::eq(_1: &Task, _2: &Task) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: (&Task, &Task);
    let _4: &isize;
    let _5: &isize;
    let mut _6: isize;
    let mut _7: isize;
    let mut _8: &Task;
    let mut _9: &Task;
    scope 1 {
        debug __self_0 => _4;
        debug __arg1_0 => _5;
    }

    bb0: {
        _3 = (_1, _2);
        _8 = deref_copy (_3.0: &Task);
        _4 = &(((*_8) as TaskHandle).0: isize);
        _9 = deref_copy (_3.1: &Task);
        _5 = &(((*_9) as TaskHandle).0: isize);
        _6 = (*_4);
        _7 = (*_5);
        _0 = Eq(move _6, move _7);
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn Task::TaskHandle(_1: isize) -> Task {
    let mut _0: Task;

    bb0: {
        _0 = Task::TaskHandle(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Task::TaskHandle(_1: isize) -> Task {
    let mut _0: Task;

    bb0: {
        _0 = Task::TaskHandle(move _1);
        return;
    }
}
