// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/issue-3935.rs:3:10: 3:19>::eq(_1: &Bike, _2: &Bike) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: &std::string::String;
    let mut _4: &std::string::String;

    bb0: {
        _3 = &((*_1).0: std::string::String);
        _4 = &((*_2).0: std::string::String);
        _0 = <String as PartialEq>::eq(move _3, move _4) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Bike;
    let mut _2: std::string::String;
    let _3: &str;
    let mut _5: std::string::String;
    let _6: &str;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: &Bike;
    let mut _10: &Bike;
    let mut _11: !;
    scope 1 {
        debug town_bike => _1;
        let _4: Bike;
        scope 2 {
            debug my_bike => _4;
        }
    }

    bb0: {
        _3 = const "schwinn";
        _2 = <str as ToString>::to_string(_3) -> bb1;
    }

    bb1: {
        _1 = Bike { name: move _2 };
        _6 = const "surly";
        _5 = <str as ToString>::to_string(_6) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        _4 = Bike { name: move _5 };
        _9 = &_1;
        _10 = &_4;
        _8 = <Bike as PartialEq>::ne(move _9, move _10) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _11 = core::panicking::panic(const "assertion failed: town_bike != my_bike") -> bb8;
    }

    bb5: {
        drop(_4) -> [return: bb6, unwind: bb9];
    }

    bb6: {
        drop(_1) -> bb7;
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_4) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        drop(_1) -> [return: bb10, unwind terminate];
    }

    bb10 (cleanup): {
        resume;
    }
}
