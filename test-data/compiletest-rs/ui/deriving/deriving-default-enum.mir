// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/deriving-default-enum.rs:4:10: 4:15>::fmt(_1: &NotDefault, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "NotDefault";
        _0 = Formatter::<'_>::write_str(_2, _3) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/deriving/deriving-default-enum.rs:4:17: 4:26>::eq(_1: &NotDefault, _2: &NotDefault) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;

    bb0: {
        _0 = const true;
        return;
    }
}

fn <impl at ui/deriving/deriving-default-enum.rs:7:10: 7:15>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &str;
    let _5: &NotDefault;
    let _6: &str;
    let mut _7: &dyn std::fmt::Debug;
    let _8: &&NotDefault;
    scope 1 {
        debug __self_0 => _5;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _5 = &(((*_1) as Beta).0: NotDefault);
        _6 = const "Beta";
        _8 = &_5;
        _7 = _8 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _6, move _7) -> bb4;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = const "Alpha";
        _0 = Formatter::<'_>::write_str(_2, _4) -> bb4;
    }

    bb4: {
        return;
    }
}

fn <impl at ui/deriving/deriving-default-enum.rs:7:17: 7:24>::default() -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::Alpha;
        return;
    }
}

fn <impl at ui/deriving/deriving-default-enum.rs:7:26: 7:35>::eq(_1: &Foo, _2: &Foo) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: (&Foo, &Foo);
    let mut _8: isize;
    let mut _9: isize;
    let mut _12: &Foo;
    let mut _13: &Foo;
    let mut _14: &Foo;
    let mut _15: &Foo;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
            let _10: &NotDefault;
            let _11: &NotDefault;
            scope 3 {
                debug __self_0 => _10;
                debug __arg1_0 => _11;
            }
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _5 = Eq(_3, _4);
        switchInt(move _5) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _7 = (_1, _2);
        _12 = deref_copy (_7.0: &Foo);
        _9 = discriminant((*_12));
        switchInt(move _9) -> [1: bb5, otherwise: bb4];
    }

    bb3: {
        return;
    }

    bb4: {
        _6 = const true;
        goto -> bb7;
    }

    bb5: {
        _13 = deref_copy (_7.1: &Foo);
        _8 = discriminant((*_13));
        switchInt(move _8) -> [1: bb6, otherwise: bb4];
    }

    bb6: {
        _14 = deref_copy (_7.0: &Foo);
        _10 = &(((*_14) as Beta).0: NotDefault);
        _15 = deref_copy (_7.1: &Foo);
        _11 = &(((*_15) as Beta).0: NotDefault);
        _6 = <NotDefault as PartialEq>::eq(_10, _11) -> bb7;
    }

    bb7: {
        _0 = move _6;
        goto -> bb3;
    }
}

fn <impl at ui/deriving/deriving-default-enum.rs:16:10: 16:17>::default() -> MyOption<T> {
    let mut _0: MyOption<T>;

    bb0: {
        _0 = MyOption::<T>::None;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&Foo, &Foo);
    let mut _2: &Foo;
    let _3: Foo;
    let mut _4: &Foo;
    let _5: Foo;
    let _6: &Foo;
    let _7: &Foo;
    let mut _8: bool;
    let mut _9: bool;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: MyOption<NotDefault>;
    let mut _16: isize;
    let mut _17: !;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }

    bb0: {
        _3 = <Foo as Default>::default() -> bb1;
    }

    bb1: {
        _2 = &_3;
        _5 = Foo::Alpha;
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &Foo);
        _7 = (_1.1: &Foo);
        _9 = <Foo as PartialEq>::eq(_6, _7) -> bb2;
    }

    bb2: {
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<Foo, Foo>(move _10, _6, _7, move _12);
    }

    bb4: {
        _15 = <MyOption<NotDefault> as Default>::default() -> bb5;
    }

    bb5: {
        _16 = discriminant(_15);
        _14 = Eq(_16, const 0_isize);
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _17 = core::panicking::panic(const "assertion failed: matches!(MyOption :: < NotDefault > :: default(), MyOption :: None)");
    }

    bb7: {
        return;
    }
}

fn Foo::Beta(_1: NotDefault) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::Beta(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo::Beta(_1: NotDefault) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::Beta(move _1);
        return;
    }
}

fn MyOption::Some(_1: T) -> MyOption<T> {
    let mut _0: MyOption<T>;

    bb0: {
        _0 = MyOption::<T>::Some(move _1);
        return;
    }
}

// MIR FOR CTFE
fn MyOption::Some(_1: T) -> MyOption<T> {
    let mut _0: MyOption<T>;

    bb0: {
        _0 = MyOption::<T>::Some(move _1);
        return;
    }
}
