// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/deriving-cmp-generic-struct.rs:2:10: 2:19>::eq(_1: &S<T>, _2: &S<T>) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: &T;
    let mut _5: &T;
    let mut _6: bool;
    let mut _7: &T;
    let mut _8: &T;

    bb0: {
        _4 = &((*_1).0: T);
        _5 = &((*_2).0: T);
        _3 = <T as PartialEq>::eq(move _4, move _5) -> bb4;
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _7 = &((*_1).1: T);
        _8 = &((*_2).1: T);
        _6 = <T as PartialEq>::eq(move _7, move _8) -> bb5;
    }

    bb3: {
        return;
    }

    bb4: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2];
    }

    bb5: {
        _0 = move _6;
        goto -> bb3;
    }
}

fn <impl at ui/deriving/deriving-cmp-generic-struct.rs:2:21: 2:23>::assert_receiver_is_total_eq(_1: &S<T>) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn <impl at ui/deriving/deriving-cmp-generic-struct.rs:2:25: 2:35>::partial_cmp(_1: &S<T>, _2: &S<T>) -> Option<std::cmp::Ordering> {
    debug self => _1;
    debug other => _2;
    let mut _0: std::option::Option<std::cmp::Ordering>;
    let mut _3: std::option::Option<std::cmp::Ordering>;
    let _4: &T;
    let _5: &T;
    let mut _6: i8;
    let mut _7: isize;
    let _8: &T;
    let _9: &T;
    let _10: std::option::Option<std::cmp::Ordering>;
    scope 1 {
        debug cmp => _10;
    }

    bb0: {
        _4 = &((*_1).0: T);
        _5 = &((*_2).0: T);
        _3 = <T as PartialOrd>::partial_cmp(_4, _5) -> bb1;
    }

    bb1: {
        _7 = discriminant(_3);
        switchInt(move _7) -> [1: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = _3;
        _0 = _10;
        goto -> bb5;
    }

    bb3: {
        _6 = discriminant(((_3 as Some).0: std::cmp::Ordering));
        switchInt(move _6) -> [0: bb4, otherwise: bb2];
    }

    bb4: {
        _8 = &((*_1).1: T);
        _9 = &((*_2).1: T);
        _0 = <T as PartialOrd>::partial_cmp(_8, _9) -> bb5;
    }

    bb5: {
        return;
    }
}

fn <impl at ui/deriving/deriving-cmp-generic-struct.rs:2:37: 2:40>::cmp(_1: &S<T>, _2: &S<T>) -> std::cmp::Ordering {
    debug self => _1;
    debug other => _2;
    let mut _0: std::cmp::Ordering;
    let mut _3: std::cmp::Ordering;
    let _4: &T;
    let _5: &T;
    let mut _6: i8;
    let _7: &T;
    let _8: &T;
    let _9: std::cmp::Ordering;
    scope 1 {
        debug cmp => _9;
    }

    bb0: {
        _4 = &((*_1).0: T);
        _5 = &((*_2).0: T);
        _3 = <T as Ord>::cmp(_4, _5) -> bb1;
    }

    bb1: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _9 = _3;
        _0 = _9;
        goto -> bb4;
    }

    bb3: {
        _7 = &((*_1).1: T);
        _8 = &((*_2).1: T);
        _0 = <T as Ord>::cmp(_7, _8) -> bb4;
    }

    bb4: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: S<i32>;
    let mut _4: std::iter::Enumerate<std::slice::Iter<'_, S<i32>>>;
    let mut _5: std::iter::Enumerate<std::slice::Iter<'_, S<i32>>>;
    let mut _6: std::slice::Iter<'_, S<i32>>;
    let mut _7: &[S<i32>];
    let mut _8: &[S<i32>; 2];
    let mut _10: std::option::Option<(usize, &S<i32>)>;
    let mut _11: &mut std::iter::Enumerate<std::slice::Iter<'_, S<i32>>>;
    let mut _12: isize;
    let mut _15: std::iter::Enumerate<std::slice::Iter<'_, S<i32>>>;
    let mut _16: std::iter::Enumerate<std::slice::Iter<'_, S<i32>>>;
    let mut _17: std::slice::Iter<'_, S<i32>>;
    let mut _18: &[S<i32>];
    let mut _19: &[S<i32>; 2];
    let mut _21: std::option::Option<(usize, &S<i32>)>;
    let mut _22: &mut std::iter::Enumerate<std::slice::Iter<'_, S<i32>>>;
    let mut _23: isize;
    let mut _27: &usize;
    let _28: &usize;
    let mut _30: usize;
    let mut _31: usize;
    let mut _33: usize;
    let mut _34: usize;
    let mut _36: usize;
    let mut _37: usize;
    let mut _39: usize;
    let mut _40: usize;
    let mut _42: usize;
    let mut _43: usize;
    let mut _44: (&bool, &bool);
    let mut _45: &bool;
    let _46: bool;
    let mut _47: &bool;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: bool;
    let _55: !;
    let mut _56: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _57: (&bool, &bool);
    let mut _58: &bool;
    let _59: bool;
    let mut _60: &bool;
    let _61: bool;
    let mut _62: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let _70: !;
    let mut _71: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _72: (&bool, &bool);
    let mut _73: &bool;
    let _74: bool;
    let mut _75: &bool;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: bool;
    let _83: !;
    let mut _84: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _85: (&bool, &bool);
    let mut _86: &bool;
    let _87: bool;
    let mut _88: &bool;
    let mut _91: bool;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: bool;
    let _96: !;
    let mut _97: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _98: (&bool, &bool);
    let mut _99: &bool;
    let _100: bool;
    let mut _101: &bool;
    let mut _104: bool;
    let mut _105: bool;
    let mut _106: bool;
    let mut _107: bool;
    let _109: !;
    let mut _110: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _111: (&bool, &bool);
    let mut _112: &bool;
    let _113: bool;
    let mut _114: &bool;
    let mut _117: bool;
    let mut _118: bool;
    let mut _119: bool;
    let mut _120: bool;
    let _122: !;
    let mut _123: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _124: (&std::cmp::Ordering, &std::cmp::Ordering);
    let mut _125: &std::cmp::Ordering;
    let _126: std::cmp::Ordering;
    let mut _127: &std::cmp::Ordering;
    let mut _130: bool;
    let mut _131: bool;
    let _133: !;
    let mut _134: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug s1 => _1;
        let _2: S<i32>;
        scope 2 {
            debug s2 => _2;
            let _3: [S<i32>; 2];
            scope 3 {
                debug ss => _3;
                let mut _9: std::iter::Enumerate<std::slice::Iter<'_, S<i32>>>;
                scope 4 {
                    debug iter => _9;
                    let _13: usize;
                    let _14: &S<i32>;
                    scope 5 {
                        debug i => _13;
                        debug s1 => _14;
                        let mut _20: std::iter::Enumerate<std::slice::Iter<'_, S<i32>>>;
                        scope 6 {
                            debug iter => _20;
                            let _24: usize;
                            let _25: &S<i32>;
                            scope 7 {
                                debug j => _24;
                                debug s2 => _25;
                                let _26: std::cmp::Ordering;
                                scope 8 {
                                    debug ord => _26;
                                    let _29: bool;
                                    scope 9 {
                                        debug eq => _29;
                                        let _32: bool;
                                        scope 10 {
                                            debug lt => _32;
                                            let _35: bool;
                                            scope 11 {
                                                debug le => _35;
                                                let _38: bool;
                                                scope 12 {
                                                    debug gt => _38;
                                                    let _41: bool;
                                                    scope 13 {
                                                        debug ge => _41;
                                                        let _48: &bool;
                                                        let _49: &bool;
                                                        let _63: &bool;
                                                        let _64: &bool;
                                                        let _76: &bool;
                                                        let _77: &bool;
                                                        let _89: &bool;
                                                        let _90: &bool;
                                                        let _102: &bool;
                                                        let _103: &bool;
                                                        let _115: &bool;
                                                        let _116: &bool;
                                                        let _128: &std::cmp::Ordering;
                                                        let _129: &std::cmp::Ordering;
                                                        scope 14 {
                                                            debug left_val => _48;
                                                            debug right_val => _49;
                                                            let _54: core::panicking::AssertKind;
                                                            scope 15 {
                                                                debug kind => _54;
                                                            }
                                                        }
                                                        scope 16 {
                                                            debug left_val => _63;
                                                            debug right_val => _64;
                                                            let _69: core::panicking::AssertKind;
                                                            scope 17 {
                                                                debug kind => _69;
                                                            }
                                                        }
                                                        scope 18 {
                                                            debug left_val => _76;
                                                            debug right_val => _77;
                                                            let _82: core::panicking::AssertKind;
                                                            scope 19 {
                                                                debug kind => _82;
                                                            }
                                                        }
                                                        scope 20 {
                                                            debug left_val => _89;
                                                            debug right_val => _90;
                                                            let _95: core::panicking::AssertKind;
                                                            scope 21 {
                                                                debug kind => _95;
                                                            }
                                                        }
                                                        scope 22 {
                                                            debug left_val => _102;
                                                            debug right_val => _103;
                                                            let _108: core::panicking::AssertKind;
                                                            scope 23 {
                                                                debug kind => _108;
                                                            }
                                                        }
                                                        scope 24 {
                                                            debug left_val => _115;
                                                            debug right_val => _116;
                                                            let _121: core::panicking::AssertKind;
                                                            scope 25 {
                                                                debug kind => _121;
                                                            }
                                                        }
                                                        scope 26 {
                                                            debug left_val => _128;
                                                            debug right_val => _129;
                                                            let _132: core::panicking::AssertKind;
                                                            scope 27 {
                                                                debug kind => _132;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = S::<i32> { x: const 1_i32, y: const 1_i32 };
        _2 = S::<i32> { x: const 1_i32, y: const 2_i32 };
        _3 = [move _1, move _2];
        _8 = &_3;
        _7 = move _8 as &[S<i32>] (Pointer(Unsize));
        _6 = core::slice::<impl [S<i32>]>::iter(move _7) -> bb1;
    }

    bb1: {
        _5 = <std::slice::Iter<'_, S<i32>> as Iterator>::enumerate(move _6) -> bb2;
    }

    bb2: {
        _4 = <Enumerate<std::slice::Iter<'_, S<i32>>> as IntoIterator>::into_iter(move _5) -> bb3;
    }

    bb3: {
        _9 = move _4;
        goto -> bb4;
    }

    bb4: {
        _11 = &mut _9;
        _10 = <Enumerate<std::slice::Iter<'_, S<i32>>> as Iterator>::next(_11) -> bb5;
    }

    bb5: {
        _12 = discriminant(_10);
        switchInt(move _12) -> [0: bb8, 1: bb6, otherwise: bb7];
    }

    bb6: {
        _13 = (((_10 as Some).0: (usize, &S<i32>)).0: usize);
        _14 = (((_10 as Some).0: (usize, &S<i32>)).1: &S<i32>);
        _19 = &_3;
        _18 = move _19 as &[S<i32>] (Pointer(Unsize));
        _17 = core::slice::<impl [S<i32>]>::iter(move _18) -> bb9;
    }

    bb7: {
        unreachable;
    }

    bb8: {
        return;
    }

    bb9: {
        _16 = <std::slice::Iter<'_, S<i32>> as Iterator>::enumerate(move _17) -> bb10;
    }

    bb10: {
        _15 = <Enumerate<std::slice::Iter<'_, S<i32>>> as IntoIterator>::into_iter(move _16) -> bb11;
    }

    bb11: {
        _20 = move _15;
        goto -> bb12;
    }

    bb12: {
        _22 = &mut _20;
        _21 = <Enumerate<std::slice::Iter<'_, S<i32>>> as Iterator>::next(_22) -> bb13;
    }

    bb13: {
        _23 = discriminant(_21);
        switchInt(move _23) -> [0: bb4, 1: bb14, otherwise: bb7];
    }

    bb14: {
        _24 = (((_21 as Some).0: (usize, &S<i32>)).0: usize);
        _25 = (((_21 as Some).0: (usize, &S<i32>)).1: &S<i32>);
        _27 = &_13;
        _28 = &_24;
        _26 = <usize as Ord>::cmp(move _27, _28) -> bb15;
    }

    bb15: {
        _30 = _13;
        _31 = _24;
        _29 = Eq(move _30, move _31);
        _33 = _13;
        _34 = _24;
        _32 = Lt(move _33, move _34);
        _36 = _13;
        _37 = _24;
        _35 = Le(move _36, move _37);
        _39 = _13;
        _40 = _24;
        _38 = Gt(move _39, move _40);
        _42 = _13;
        _43 = _24;
        _41 = Ge(move _42, move _43);
        _46 = <S<i32> as PartialEq>::eq(_14, _25) -> bb16;
    }

    bb16: {
        _45 = &_46;
        _47 = &_29;
        _44 = (move _45, move _47);
        _48 = (_44.0: &bool);
        _49 = (_44.1: &bool);
        _52 = (*_48);
        _53 = (*_49);
        _51 = Eq(move _52, move _53);
        _50 = Not(move _51);
        switchInt(move _50) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _54 = core::panicking::AssertKind::Eq;
        _56 = Option::<Arguments<'_>>::None;
        _55 = core::panicking::assert_failed::<bool, bool>(move _54, _48, _49, move _56);
    }

    bb18: {
        _59 = <S<i32> as PartialEq>::ne(_14, _25) -> bb19;
    }

    bb19: {
        _58 = &_59;
        _62 = _29;
        _61 = Not(move _62);
        _60 = &_61;
        _57 = (move _58, move _60);
        _63 = (_57.0: &bool);
        _64 = (_57.1: &bool);
        _67 = (*_63);
        _68 = (*_64);
        _66 = Eq(move _67, move _68);
        _65 = Not(move _66);
        switchInt(move _65) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _69 = core::panicking::AssertKind::Eq;
        _71 = Option::<Arguments<'_>>::None;
        _70 = core::panicking::assert_failed::<bool, bool>(move _69, _63, _64, move _71);
    }

    bb21: {
        _74 = <S<i32> as PartialOrd>::lt(_14, _25) -> bb22;
    }

    bb22: {
        _73 = &_74;
        _75 = &_32;
        _72 = (move _73, move _75);
        _76 = (_72.0: &bool);
        _77 = (_72.1: &bool);
        _80 = (*_76);
        _81 = (*_77);
        _79 = Eq(move _80, move _81);
        _78 = Not(move _79);
        switchInt(move _78) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _82 = core::panicking::AssertKind::Eq;
        _84 = Option::<Arguments<'_>>::None;
        _83 = core::panicking::assert_failed::<bool, bool>(move _82, _76, _77, move _84);
    }

    bb24: {
        _87 = <S<i32> as PartialOrd>::gt(_14, _25) -> bb25;
    }

    bb25: {
        _86 = &_87;
        _88 = &_38;
        _85 = (move _86, move _88);
        _89 = (_85.0: &bool);
        _90 = (_85.1: &bool);
        _93 = (*_89);
        _94 = (*_90);
        _92 = Eq(move _93, move _94);
        _91 = Not(move _92);
        switchInt(move _91) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _95 = core::panicking::AssertKind::Eq;
        _97 = Option::<Arguments<'_>>::None;
        _96 = core::panicking::assert_failed::<bool, bool>(move _95, _89, _90, move _97);
    }

    bb27: {
        _100 = <S<i32> as PartialOrd>::le(_14, _25) -> bb28;
    }

    bb28: {
        _99 = &_100;
        _101 = &_35;
        _98 = (move _99, move _101);
        _102 = (_98.0: &bool);
        _103 = (_98.1: &bool);
        _106 = (*_102);
        _107 = (*_103);
        _105 = Eq(move _106, move _107);
        _104 = Not(move _105);
        switchInt(move _104) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _108 = core::panicking::AssertKind::Eq;
        _110 = Option::<Arguments<'_>>::None;
        _109 = core::panicking::assert_failed::<bool, bool>(move _108, _102, _103, move _110);
    }

    bb30: {
        _113 = <S<i32> as PartialOrd>::ge(_14, _25) -> bb31;
    }

    bb31: {
        _112 = &_113;
        _114 = &_41;
        _111 = (move _112, move _114);
        _115 = (_111.0: &bool);
        _116 = (_111.1: &bool);
        _119 = (*_115);
        _120 = (*_116);
        _118 = Eq(move _119, move _120);
        _117 = Not(move _118);
        switchInt(move _117) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _121 = core::panicking::AssertKind::Eq;
        _123 = Option::<Arguments<'_>>::None;
        _122 = core::panicking::assert_failed::<bool, bool>(move _121, _115, _116, move _123);
    }

    bb33: {
        _126 = <S<i32> as Ord>::cmp(_14, _25) -> bb34;
    }

    bb34: {
        _125 = &_126;
        _127 = &_26;
        _124 = (move _125, move _127);
        _128 = (_124.0: &std::cmp::Ordering);
        _129 = (_124.1: &std::cmp::Ordering);
        _131 = <std::cmp::Ordering as PartialEq>::eq(_128, _129) -> bb35;
    }

    bb35: {
        _130 = Not(move _131);
        switchInt(move _130) -> [0: bb12, otherwise: bb36];
    }

    bb36: {
        _132 = core::panicking::AssertKind::Eq;
        _134 = Option::<Arguments<'_>>::None;
        _133 = core::panicking::assert_failed::<std::cmp::Ordering, std::cmp::Ordering>(move _132, _128, _129, move _134);
    }
}
