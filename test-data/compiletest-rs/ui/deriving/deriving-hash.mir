// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/deriving-hash.rs:12:10: 12:14>::hash(_1: &Person, _2: &mut __H) -> () {
    debug self => _1;
    debug state => _2;
    let mut _0: ();
    let _3: ();
    let _4: &usize;
    let _5: ();
    let _6: &std::string::String;
    let _7: &usize;

    bb0: {
        _4 = &((*_1).0: usize);
        _3 = <usize as Hash>::hash::<__H>(_4, _2) -> bb1;
    }

    bb1: {
        _6 = &((*_1).1: std::string::String);
        _5 = <String as Hash>::hash::<__H>(_6, _2) -> bb2;
    }

    bb2: {
        _7 = &((*_1).2: usize);
        _0 = <usize as Hash>::hash::<__H>(_7, _2) -> bb3;
    }

    bb3: {
        return;
    }
}

fn <impl at ui/deriving/deriving-hash.rs:20:10: 20:14>::hash(_1: &__H__H, _2: &mut __H) -> () {
    debug self => _1;
    debug state => _2;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/deriving/deriving-hash.rs:21:10: 21:14>::hash(_1: &Collision<__H>, _2: &mut __H) -> () {
    debug self => _1;
    debug state => _2;
    let mut _0: ();
    let _3: &__H;
    scope 1 {
        debug __self_0 => _3;
    }

    bb0: {
        _3 = &(((*_1) as __H).0: __H);
        _0 = <__H as Hash>::hash::<__H>(_3, _2) -> bb1;
    }

    bb1: {
        return;
    }
}

E::A::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 1_isize;
        return;
    }
}

fn <impl at ui/deriving/deriving-hash.rs:23:10: 23:14>::hash(_1: &E, _2: &mut __H) -> () {
    debug self => _1;
    debug state => _2;
    let mut _0: ();
    let _3: isize;
    let _4: &isize;
    scope 1 {
        debug __self_tag => _3;
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = &_3;
        _0 = <isize as Hash>::hash::<__H>(_4, _2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn hash(_1: &T) -> u64 {
    debug t => _1;
    let mut _0: u64;
    let mut _2: std::hash::SipHasher;
    let _3: ();
    let mut _4: &mut std::hash::SipHasher;
    let mut _5: &std::hash::SipHasher;
    scope 1 {
        debug s => _2;
    }

    bb0: {
        _2 = SipHasher::new() -> bb1;
    }

    bb1: {
        _4 = &mut _2;
        _3 = <T as Hash>::hash::<SipHasher>(_1, _4) -> bb2;
    }

    bb2: {
        _5 = &_2;
        _0 = <SipHasher as Hasher>::finish(move _5) -> bb3;
    }

    bb3: {
        return;
    }
}

fn <impl at ui/deriving/deriving-hash.rs:33:1: 33:35>::finish(_1: &FakeHasher<'_>) -> u64 {
    debug self => _1;
    let mut _0: u64;
    let mut _2: !;

    bb0: {
        _2 = core::panicking::panic(const "not implemented");
    }
}

fn <impl at ui/deriving/deriving-hash.rs:33:1: 33:35>::write(_1: &mut FakeHasher<'_>, _2: &[u8]) -> () {
    debug self => _1;
    debug bytes => _2;
    let mut _0: ();
    let _3: ();
    let mut _4: &mut std::vec::Vec<u8>;

    bb0: {
        _4 = deref_copy ((*_1).0: &mut std::vec::Vec<u8>);
        _3 = <Vec<u8> as Extend<&u8>>::extend::<&[u8]>(_4, _2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn fake_hash(_1: &mut Vec<u8>, _2: A) -> () {
    debug v => _1;
    debug a => _2;
    let mut _0: ();
    let _3: ();
    let mut _4: &A;
    let mut _5: &mut FakeHasher<'_>;
    let mut _6: FakeHasher<'_>;

    bb0: {
        _4 = &_2;
        _6 = FakeHasher::<'_>(_1);
        _5 = &mut _6;
        _3 = <A as Hash>::hash::<FakeHasher<'_>>(move _4, _5) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_2) -> bb2;
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn <impl at ui/deriving/deriving-hash.rs:48:1: 48:34>::finish(_1: &OnlyOneByteHasher) -> u64 {
    debug self => _1;
    let mut _0: u64;
    let mut _2: !;

    bb0: {
        _2 = core::panicking::panic(const "internal error: entered unreachable code");
    }
}

fn <impl at ui/deriving/deriving-hash.rs:48:1: 48:34>::write(_1: &mut OnlyOneByteHasher, _2: &[u8]) -> () {
    debug self => _1;
    debug bytes => _2;
    let mut _0: ();
    let mut _3: (&usize, &usize);
    let mut _4: &usize;
    let _5: usize;
    let mut _6: &usize;
    let _7: usize;
    let _8: &usize;
    let _9: &usize;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _8;
        debug right_val => _9;
        let _14: core::panicking::AssertKind;
        scope 2 {
            debug kind => _14;
        }
    }

    bb0: {
        _5 = Len((*_2));
        _4 = &_5;
        _7 = const 1_usize;
        _6 = &_7;
        _3 = (move _4, move _6);
        _8 = (_3.0: &usize);
        _9 = (_3.1: &usize);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<usize, usize>(move _14, _8, _9, move _16);
    }

    bb2: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Person;
    let mut _2: std::string::String;
    let _3: &str;
    let mut _5: std::string::String;
    let _6: &str;
    let mut _7: (&u64, &u64);
    let mut _8: &u64;
    let _9: u64;
    let _10: &Person;
    let mut _11: &u64;
    let _12: u64;
    let _13: &Person;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: u64;
    let mut _19: u64;
    let _21: !;
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: u64;
    let _26: &Person;
    let mut _27: u64;
    let _28: &Person;
    let mut _29: !;
    let _32: ();
    let mut _33: &mut std::vec::Vec<u8>;
    let mut _34: main::E;
    let _35: ();
    let mut _36: &mut std::vec::Vec<u8>;
    let mut _37: main::E;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: &std::vec::Vec<u8>;
    let mut _41: &std::vec::Vec<u8>;
    let mut _42: !;
    let _44: ();
    let mut _45: &mut std::vec::Vec<u8>;
    let mut _46: main::SingleVariantEnum;
    let mut _47: (&std::vec::Vec<u8>, &std::vec::Vec<u8>);
    let mut _48: &std::vec::Vec<u8>;
    let _49: std::vec::Vec<u8>;
    let mut _50: std::boxed::Box<[u8]>;
    let mut _51: usize;
    let mut _52: usize;
    let mut _53: *mut u8;
    let mut _54: std::boxed::Box<[u8; 1]>;
    let mut _55: &std::vec::Vec<u8>;
    let mut _58: bool;
    let mut _59: bool;
    let _61: !;
    let mut _62: std::option::Option<std::fmt::Arguments<'_>>;
    let _63: ();
    let mut _64: &main::E;
    let _65: main::E;
    let mut _66: &mut OnlyOneByteHasher;
    let mut _67: OnlyOneByteHasher;
    let mut _68: *const [u8; 1];
    scope 1 {
        debug person1 => _1;
        let _4: Person;
        scope 2 {
            debug person2 => _4;
            let _14: &u64;
            let _15: &u64;
            let mut _30: std::vec::Vec<u8>;
            scope 3 {
                debug left_val => _14;
                debug right_val => _15;
                let _20: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _20;
                }
            }
            scope 5 {
                debug va => _30;
                let mut _31: std::vec::Vec<u8>;
                scope 6 {
                    debug vb => _31;
                    let mut _43: std::vec::Vec<u8>;
                    scope 7 {
                        debug v => _43;
                        let _56: &std::vec::Vec<u8>;
                        let _57: &std::vec::Vec<u8>;
                        scope 8 {
                        }
                        scope 9 {
                            debug left_val => _56;
                            debug right_val => _57;
                            let _60: core::panicking::AssertKind;
                            scope 10 {
                                debug kind => _60;
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _3 = const "Janet";
        _2 = <str as ToString>::to_string(_3) -> bb1;
    }

    bb1: {
        _1 = Person { id: const 5_usize, name: move _2, phone: const 5556667777_usize };
        _6 = const "Bob";
        _5 = <str as ToString>::to_string(_6) -> [return: bb2, unwind: bb37];
    }

    bb2: {
        _4 = Person { id: const 5_usize, name: move _5, phone: const 5556667777_usize };
        _10 = &_1;
        _9 = hash::<Person>(_10) -> [return: bb3, unwind: bb36];
    }

    bb3: {
        _8 = &_9;
        _13 = &_1;
        _12 = hash::<Person>(_13) -> [return: bb4, unwind: bb36];
    }

    bb4: {
        _11 = &_12;
        _7 = (move _8, move _11);
        _14 = (_7.0: &u64);
        _15 = (_7.1: &u64);
        _18 = (*_14);
        _19 = (*_15);
        _17 = Eq(move _18, move _19);
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _20 = core::panicking::AssertKind::Eq;
        _22 = Option::<Arguments<'_>>::None;
        _21 = core::panicking::assert_failed::<u64, u64>(move _20, _14, _15, move _22) -> bb36;
    }

    bb6: {
        _26 = &_1;
        _25 = hash::<Person>(_26) -> [return: bb7, unwind: bb36];
    }

    bb7: {
        _28 = &_4;
        _27 = hash::<Person>(_28) -> [return: bb8, unwind: bb36];
    }

    bb8: {
        _24 = Ne(move _25, move _27);
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _29 = core::panicking::panic(const "assertion failed: hash(&person1) != hash(&person2)") -> bb36;
    }

    bb10: {
        _30 = Vec::<u8>::new() -> [return: bb11, unwind: bb36];
    }

    bb11: {
        _31 = Vec::<u8>::new() -> [return: bb12, unwind: bb35];
    }

    bb12: {
        _33 = &mut _30;
        _34 = main::E::A;
        _32 = fake_hash::<main::E>(_33, move _34) -> [return: bb13, unwind: bb34];
    }

    bb13: {
        _36 = &mut _31;
        _37 = main::E::B;
        _35 = fake_hash::<main::E>(_36, move _37) -> [return: bb14, unwind: bb34];
    }

    bb14: {
        _40 = &_30;
        _41 = &_31;
        _39 = <Vec<u8> as PartialEq>::ne(move _40, move _41) -> [return: bb15, unwind: bb34];
    }

    bb15: {
        _38 = Not(move _39);
        switchInt(move _38) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _42 = core::panicking::panic(const "assertion failed: va != vb") -> bb34;
    }

    bb17: {
        _43 = Vec::<u8>::new() -> [return: bb18, unwind: bb34];
    }

    bb18: {
        _45 = &mut _43;
        _46 = SingleVariantEnum::A(const 17_u8);
        _44 = fake_hash::<SingleVariantEnum>(_45, move _46) -> [return: bb19, unwind: bb33];
    }

    bb19: {
        _51 = SizeOf([u8; 1]);
        _52 = AlignOf([u8; 1]);
        _53 = alloc::alloc::exchange_malloc(move _51, move _52) -> [return: bb20, unwind: bb33];
    }

    bb20: {
        _54 = ShallowInitBox(move _53, [u8; 1]);
        _68 = (((_54.0: std::ptr::Unique<[u8; 1]>).0: std::ptr::NonNull<[u8; 1]>).0: *const [u8; 1]);
        (*_68) = [const 17_u8];
        _50 = move _54 as std::boxed::Box<[u8]> (Pointer(Unsize));
        _49 = slice::<impl [u8]>::into_vec::<std::alloc::Global>(move _50) -> [return: bb21, unwind: bb33];
    }

    bb21: {
        _48 = &_49;
        _55 = &_43;
        _47 = (move _48, move _55);
        _56 = (_47.0: &std::vec::Vec<u8>);
        _57 = (_47.1: &std::vec::Vec<u8>);
        _59 = <Vec<u8> as PartialEq>::eq(_56, _57) -> [return: bb22, unwind: bb32];
    }

    bb22: {
        _58 = Not(move _59);
        switchInt(move _58) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _60 = core::panicking::AssertKind::Eq;
        _62 = Option::<Arguments<'_>>::None;
        _61 = core::panicking::assert_failed::<Vec<u8>, Vec<u8>>(move _60, _56, _57, move _62) -> bb32;
    }

    bb24: {
        drop(_49) -> [return: bb25, unwind: bb33];
    }

    bb25: {
        _65 = main::E::A;
        _64 = &_65;
        _66 = &mut _67;
        _63 = <main::E as Hash>::hash::<OnlyOneByteHasher>(move _64, _66) -> [return: bb26, unwind: bb33];
    }

    bb26: {
        drop(_43) -> [return: bb27, unwind: bb34];
    }

    bb27: {
        drop(_31) -> [return: bb28, unwind: bb35];
    }

    bb28: {
        drop(_30) -> [return: bb29, unwind: bb36];
    }

    bb29: {
        drop(_4) -> [return: bb30, unwind: bb37];
    }

    bb30: {
        drop(_1) -> bb31;
    }

    bb31: {
        return;
    }

    bb32 (cleanup): {
        drop(_49) -> [return: bb33, unwind terminate];
    }

    bb33 (cleanup): {
        drop(_43) -> [return: bb34, unwind terminate];
    }

    bb34 (cleanup): {
        drop(_31) -> [return: bb35, unwind terminate];
    }

    bb35 (cleanup): {
        drop(_30) -> [return: bb36, unwind terminate];
    }

    bb36 (cleanup): {
        drop(_4) -> [return: bb37, unwind terminate];
    }

    bb37 (cleanup): {
        drop(_1) -> [return: bb38, unwind terminate];
    }

    bb38 (cleanup): {
        resume;
    }
}

fn main::<impl at ui/deriving/deriving-hash.rs:80:14: 80:18>::hash(_1: &SingleVariantEnum, _2: &mut __H) -> () {
    debug self => _1;
    debug state => _2;
    let mut _0: ();
    let _3: &u8;
    scope 1 {
        debug __self_0 => _3;
    }

    bb0: {
        _3 = &(((*_1) as A).0: u8);
        _0 = <u8 as Hash>::hash::<__H>(_3, _2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main::<impl at ui/deriving/deriving-hash.rs:90:14: 90:18>::hash(_1: &main::E, _2: &mut __H) -> () {
    debug self => _1;
    debug state => _2;
    let mut _0: ();
    let _3: u8;
    let _4: &u8;
    scope 1 {
        debug __self_tag => _3;
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = &_3;
        _0 = <u8 as Hash>::hash::<__H>(_4, _2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn FakeHasher(_1: &mut Vec<u8>) -> FakeHasher<'_> {
    let mut _0: FakeHasher<'_>;

    bb0: {
        _0 = FakeHasher::<'_>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn FakeHasher(_1: &mut Vec<u8>) -> FakeHasher<'_> {
    let mut _0: FakeHasher<'_>;

    bb0: {
        _0 = FakeHasher::<'_>(move _1);
        return;
    }
}

fn SingleVariantEnum::A(_1: u8) -> SingleVariantEnum {
    let mut _0: main::SingleVariantEnum;

    bb0: {
        _0 = SingleVariantEnum::A(move _1);
        return;
    }
}

// MIR FOR CTFE
fn SingleVariantEnum::A(_1: u8) -> SingleVariantEnum {
    let mut _0: main::SingleVariantEnum;

    bb0: {
        _0 = SingleVariantEnum::A(move _1);
        return;
    }
}
