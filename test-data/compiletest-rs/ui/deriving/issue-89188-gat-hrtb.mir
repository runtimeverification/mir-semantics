// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/issue-89188-gat-hrtb.rs:9:10: 9:15>::clone(_1: &ShimMethod<T>) -> ShimMethod<T> {
    debug self => _1;
    let mut _0: ShimMethod<T>;
    let mut _2: &dyn for<'s> std::ops::Fn(&'s mut <T as CallWithShim>::Shim<'s>);
    let _3: &dyn for<'s> std::ops::Fn(&'s mut <T as CallWithShim>::Shim<'s>);
    let _4: &&dyn for<'s> std::ops::Fn(&'s mut <T as CallWithShim>::Shim<'s>);

    bb0: {
        _4 = &((*_1).0: &dyn for<'s> std::ops::Fn(&'s mut <T as CallWithShim>::Shim<'s>));
        _3 = <&dyn for<'s> Fn(&'s mut <T as CallWithShim>::Shim<'s>) as Clone>::clone(_4) -> bb1;
    }

    bb1: {
        _2 = _3;
        _0 = ShimMethod::<T>(move _2);
        return;
    }
}

fn <impl at ui/deriving/issue-89188-gat-hrtb.rs:18:10: 18:15>::clone(_1: &ShimMethod2<T>) -> ShimMethod2<T> {
    debug self => _1;
    let mut _0: ShimMethod2<T>;
    let mut _2: &dyn for<'s> std::ops::Fn(&'s mut <T as CallWithShim2>::Shim<S<'s>>);
    let _3: &dyn for<'s> std::ops::Fn(&'s mut <T as CallWithShim2>::Shim<S<'s>>);
    let _4: &&dyn for<'s> std::ops::Fn(&'s mut <T as CallWithShim2>::Shim<S<'s>>);

    bb0: {
        _4 = &((*_1).0: &dyn for<'s> std::ops::Fn(&'s mut <T as CallWithShim2>::Shim<S<'s>>));
        _3 = <&dyn for<'s> Fn(&'s mut <T as CallWithShim2>::Shim<S<'s>>) as Clone>::clone(_4) -> bb1;
    }

    bb1: {
        _2 = _3;
        _0 = ShimMethod2::<T>(move _2);
        return;
    }
}

fn <impl at ui/deriving/issue-89188-gat-hrtb.rs:23:10: 23:15>::clone(_1: &ShimMethod3<T>) -> ShimMethod3<T> {
    debug self => _1;
    let mut _0: ShimMethod3<T>;
    let mut _2: &dyn for<'s> std::ops::Fn(&'s mut <T as CallWithShim2>::Shim<(dyn for<'t> std::ops::Fn(&'s mut <T as CallWithShim2>::Shim<(dyn for<'u> Trait<'s, 't, 'u> + 's)>) + 's)>);
    let _3: &dyn for<'s> std::ops::Fn(&'s mut <T as CallWithShim2>::Shim<(dyn for<'t> std::ops::Fn(&'s mut <T as CallWithShim2>::Shim<(dyn for<'u> Trait<'s, 't, 'u> + 's)>) + 's)>);
    let _4: &&dyn for<'s> std::ops::Fn(&'s mut <T as CallWithShim2>::Shim<(dyn for<'t> std::ops::Fn(&'s mut <T as CallWithShim2>::Shim<(dyn for<'u> Trait<'s, 't, 'u> + 's)>) + 's)>);

    bb0: {
        _4 = &((*_1).0: &dyn for<'s> std::ops::Fn(&'s mut <T as CallWithShim2>::Shim<(dyn for<'t> std::ops::Fn(&'s mut <T as CallWithShim2>::Shim<(dyn for<'u> Trait<'s, 't, 'u> + 's)>) + 's)>));
        _3 = <&dyn for<'s> Fn(&'s mut <T as CallWithShim2>::Shim<(dyn for<'t> Fn(&'s mut <T as CallWithShim2>::Shim<(dyn for<'u> Trait<'s, 't, 'u> + 's)>) + 's)>) as Clone>::clone(_4) -> bb1;
    }

    bb1: {
        _2 = _3;
        _0 = ShimMethod3::<T>(move _2);
        return;
    }
}

fn <impl at ui/deriving/issue-89188-gat-hrtb.rs:34:10: 34:15>::clone(_1: &ShimMethod4<T>) -> ShimMethod4<T> {
    debug self => _1;
    let mut _0: ShimMethod4<T>;
    let mut _2: &dyn for<'s> std::ops::Fn(&'s mut <T as Trait2>::As);
    let _3: &dyn for<'s> std::ops::Fn(&'s mut <T as Trait2>::As);
    let _4: &&dyn for<'s> std::ops::Fn(&'s mut <T as Trait2>::As);

    bb0: {
        _4 = &((*_1).0: &dyn for<'s> std::ops::Fn(&'s mut <T as Trait2>::As));
        _3 = <&dyn for<'s> Fn(&'s mut <T as Trait2>::As) as Clone>::clone(_4) -> bb1;
    }

    bb1: {
        _2 = _3;
        _0 = ShimMethod4::<T>(move _2);
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn ShimMethod(_1: &dyn for<'a> Fn(&'a mut <T as CallWithShim>::Shim<'a>)) -> ShimMethod<T> {
    let mut _0: ShimMethod<T>;

    bb0: {
        _0 = ShimMethod::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn ShimMethod(_1: &dyn for<'a> Fn(&'a mut <T as CallWithShim>::Shim<'a>)) -> ShimMethod<T> {
    let mut _0: ShimMethod<T>;

    bb0: {
        _0 = ShimMethod::<T>(move _1);
        return;
    }
}

fn S(_1: &()) -> S<'_> {
    let mut _0: S<'_>;

    bb0: {
        _0 = S::<'_>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn S(_1: &()) -> S<'_> {
    let mut _0: S<'_>;

    bb0: {
        _0 = S::<'_>(move _1);
        return;
    }
}

fn ShimMethod2(_1: &dyn for<'a> Fn(&'a mut <T as CallWithShim2>::Shim<S<'a>>)) -> ShimMethod2<T> {
    let mut _0: ShimMethod2<T>;

    bb0: {
        _0 = ShimMethod2::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn ShimMethod2(_1: &dyn for<'a> Fn(&'a mut <T as CallWithShim2>::Shim<S<'a>>)) -> ShimMethod2<T> {
    let mut _0: ShimMethod2<T>;

    bb0: {
        _0 = ShimMethod2::<T>(move _1);
        return;
    }
}

fn ShimMethod3(_1: &dyn for<'a> Fn(&'a mut <T as CallWithShim2>::Shim<(dyn for<'a> Fn(&'a mut <T as CallWithShim2>::Shim<(dyn for<'a> Trait<'a, 'a, 'a> + 'a)>) + 'a)>)) -> ShimMethod3<T> {
    let mut _0: ShimMethod3<T>;

    bb0: {
        _0 = ShimMethod3::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn ShimMethod3(_1: &dyn for<'a> Fn(&'a mut <T as CallWithShim2>::Shim<(dyn for<'a> Fn(&'a mut <T as CallWithShim2>::Shim<(dyn for<'a> Trait<'a, 'a, 'a> + 'a)>) + 'a)>)) -> ShimMethod3<T> {
    let mut _0: ShimMethod3<T>;

    bb0: {
        _0 = ShimMethod3::<T>(move _1);
        return;
    }
}

fn ShimMethod4(_1: &dyn for<'a> Fn(&'a mut <T as Trait2>::As)) -> ShimMethod4<T> {
    let mut _0: ShimMethod4<T>;

    bb0: {
        _0 = ShimMethod4::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn ShimMethod4(_1: &dyn for<'a> Fn(&'a mut <T as Trait2>::As)) -> ShimMethod4<T> {
    let mut _0: ShimMethod4<T>;

    bb0: {
        _0 = ShimMethod4::<T>(move _1);
        return;
    }
}
