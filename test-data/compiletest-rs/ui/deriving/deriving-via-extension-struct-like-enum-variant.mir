// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19>::eq(_1: &S, _2: &S) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: (&S, &S);
    let mut _8: isize;
    let mut _9: isize;
    let mut _14: bool;
    let mut _15: isize;
    let mut _16: isize;
    let mut _17: bool;
    let mut _18: isize;
    let mut _19: isize;
    let mut _20: &S;
    let mut _21: &S;
    let mut _22: &S;
    let mut _23: &S;
    let mut _24: &S;
    let mut _25: &S;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
            let _10: &isize;
            let _11: &isize;
            let _12: &isize;
            let _13: &isize;
            scope 3 {
                debug __self_0 => _10;
                debug __self_1 => _11;
                debug __arg1_0 => _12;
                debug __arg1_1 => _13;
            }
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _5 = Eq(_3, _4);
        switchInt(move _5) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _7 = (_1, _2);
        _20 = deref_copy (_7.0: &S);
        _9 = discriminant((*_20));
        switchInt(move _9) -> [0: bb4, otherwise: bb5];
    }

    bb3: {
        return;
    }

    bb4: {
        _21 = deref_copy (_7.1: &S);
        _8 = discriminant((*_21));
        switchInt(move _8) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _6 = const true;
        goto -> bb9;
    }

    bb6: {
        _22 = deref_copy (_7.0: &S);
        _10 = &(((*_22) as X).0: isize);
        _23 = deref_copy (_7.0: &S);
        _11 = &(((*_23) as X).1: isize);
        _24 = deref_copy (_7.1: &S);
        _12 = &(((*_24) as X).0: isize);
        _25 = deref_copy (_7.1: &S);
        _13 = &(((*_25) as X).1: isize);
        _15 = (*_10);
        _16 = (*_12);
        _14 = Eq(move _15, move _16);
        switchInt(move _14) -> [0: bb7, otherwise: bb8];
    }

    bb7: {
        _6 = const false;
        goto -> bb9;
    }

    bb8: {
        _18 = (*_11);
        _19 = (*_13);
        _17 = Eq(move _18, move _19);
        _6 = move _17;
        goto -> bb9;
    }

    bb9: {
        _0 = move _6;
        goto -> bb3;
    }
}

fn <impl at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:21: 3:26>::fmt(_1: &S, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &isize;
    let _5: &isize;
    let _6: &str;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &str;
    let mut _10: &dyn std::fmt::Debug;
    let _11: &&isize;
    let _12: &str;
    scope 1 {
        debug __self_0 => _4;
        debug __self_1 => _5;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _12 = const "Y";
        _0 = Formatter::<'_>::write_str(_2, _12) -> bb4;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as X).0: isize);
        _5 = &(((*_1) as X).1: isize);
        _6 = const "X";
        _7 = const "x";
        _8 = _4 as &dyn std::fmt::Debug (Pointer(Unsize));
        _9 = const "y";
        _11 = &_5;
        _10 = _11 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _6, _7, move _8, _9, move _10) -> bb4;
    }

    bb4: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: S;
    let mut _2: (&S, &S);
    let mut _3: &S;
    let mut _4: &S;
    let mut _7: bool;
    let mut _8: bool;
    let _10: !;
    let mut _11: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: &S;
    let mut _16: &S;
    let mut _17: !;
    scope 1 {
        debug x => _1;
        let _5: &S;
        let _6: &S;
        scope 2 {
            debug left_val => _5;
            debug right_val => _6;
            let _9: core::panicking::AssertKind;
            scope 3 {
                debug kind => _9;
            }
        }
    }

    bb0: {
        _1 = S::X { x: const 1_isize, y: const 2_isize };
        _3 = &_1;
        _4 = &_1;
        _2 = (move _3, move _4);
        _5 = (_2.0: &S);
        _6 = (_2.1: &S);
        _8 = <S as PartialEq>::eq(_5, _6) -> bb1;
    }

    bb1: {
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _9 = core::panicking::AssertKind::Eq;
        _11 = Option::<Arguments<'_>>::None;
        _10 = core::panicking::assert_failed::<S, S>(move _9, _5, _6, move _11);
    }

    bb3: {
        _15 = &_1;
        _16 = &_1;
        _14 = <S as PartialEq>::ne(move _15, move _16) -> bb4;
    }

    bb4: {
        _13 = Not(move _14);
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _17 = core::panicking::panic(const "assertion failed: !(x != x)");
    }

    bb6: {
        return;
    }
}
