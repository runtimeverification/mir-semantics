// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/deriving-meta.rs:9:10: 9:19>::eq(_1: &Foo, _2: &Foo) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: bool;
    let mut _7: isize;
    let mut _8: isize;

    bb0: {
        _4 = ((*_1).0: usize);
        _5 = ((*_2).0: usize);
        _3 = Eq(move _4, move _5);
        switchInt(move _3) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _7 = ((*_1).1: isize);
        _8 = ((*_2).1: isize);
        _6 = Eq(move _7, move _8);
        _0 = move _6;
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn <impl at ui/deriving/deriving-meta.rs:9:21: 9:26>::clone(_1: &Foo) -> Foo {
    debug self => _1;
    let mut _0: Foo;
    let mut _2: usize;
    let _3: &usize;
    let mut _4: isize;
    let _5: &isize;

    bb0: {
        _3 = &((*_1).0: usize);
        _2 = (*_3);
        _5 = &((*_1).1: isize);
        _4 = (*_5);
        _0 = Foo { bar: move _2, baz: move _4 };
        return;
    }
}

fn <impl at ui/deriving/deriving-meta.rs:9:28: 9:32>::hash(_1: &Foo, _2: &mut __H) -> () {
    debug self => _1;
    debug state => _2;
    let mut _0: ();
    let _3: ();
    let _4: &usize;
    let _5: &isize;

    bb0: {
        _4 = &((*_1).0: usize);
        _3 = <usize as Hash>::hash::<__H>(_4, _2) -> bb1;
    }

    bb1: {
        _5 = &((*_1).1: isize);
        _0 = <isize as Hash>::hash::<__H>(_5, _2) -> bb2;
    }

    bb2: {
        return;
    }
}

fn hash(_1: &T) -> () {
    debug _t => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Foo;
    let _2: bool;
    let mut _3: &Foo;
    let mut _4: &Foo;
    let _5: Foo;
    let mut _6: &Foo;
    let _7: ();
    let _8: &Foo;
    scope 1 {
        debug a => _1;
    }

    bb0: {
        _1 = Foo { bar: const 4_usize, baz: const -3_isize };
        _3 = &_1;
        _4 = &_1;
        _2 = <Foo as PartialEq>::eq(move _3, move _4) -> bb1;
    }

    bb1: {
        _6 = &_1;
        _5 = <Foo as Clone>::clone(move _6) -> bb2;
    }

    bb2: {
        _8 = &_1;
        _7 = hash::<Foo>(_8) -> bb3;
    }

    bb3: {
        return;
    }
}
