// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: TestDescAndFn;
    let mut _2: TestDesc;
    let mut _3: TestName;
    let mut _4: std::string::String;
    let _5: &str;
    let mut _6: TestFn;
    let _7: ();
    let mut _8: &mut TestDescAndFn;
    scope 1 {
        debug test => _1;
    }

    bb0: {
        _5 = const "test";
        _4 = <str as ToString>::to_string(_5) -> bb1;
    }

    bb1: {
        _3 = TestName::DynTestName(move _4);
        _2 = TestDesc { name: move _3, should_fail: const false };
        _6 = TestFn::DynTestFn(const 22_isize);
        _1 = TestDescAndFn { desc: move _2, testfn: move _6 };
        _8 = &mut _1;
        _7 = do_swap(_8) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_1) -> bb3;
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_1) -> [return: bb5, unwind terminate];
    }

    bb5 (cleanup): {
        resume;
    }
}

fn do_swap(_1: &mut TestDescAndFn) -> () {
    debug test => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: *mut TestDescAndFn;
    let mut _4: *mut TestDescAndFn;
    scope 1 {
    }

    bb0: {
        _3 = &raw mut (*_1);
        _4 = &raw mut (*_1);
        _2 = std::ptr::swap::<TestDescAndFn>(move _3, move _4) -> bb1;
    }

    bb1: {
        return;
    }
}

fn TestName::DynTestName(_1: String) -> TestName {
    let mut _0: TestName;

    bb0: {
        _0 = TestName::DynTestName(move _1);
        return;
    }
}

// MIR FOR CTFE
fn TestName::DynTestName(_1: String) -> TestName {
    let mut _0: TestName;

    bb0: {
        _0 = TestName::DynTestName(move _1);
        return;
    }
}

fn TestFn::DynTestFn(_1: isize) -> TestFn {
    let mut _0: TestFn;

    bb0: {
        _0 = TestFn::DynTestFn(move _1);
        return;
    }
}

// MIR FOR CTFE
fn TestFn::DynTestFn(_1: isize) -> TestFn {
    let mut _0: TestFn;

    bb0: {
        _0 = TestFn::DynTestFn(move _1);
        return;
    }
}

fn TestFn::DynBenchFn(_1: isize) -> TestFn {
    let mut _0: TestFn;

    bb0: {
        _0 = TestFn::DynBenchFn(move _1);
        return;
    }
}

// MIR FOR CTFE
fn TestFn::DynBenchFn(_1: isize) -> TestFn {
    let mut _0: TestFn;

    bb0: {
        _0 = TestFn::DynBenchFn(move _1);
        return;
    }
}
