// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: ();

    bb0: {
        _1 = TranslatorI::visit_pre(const TranslatorI) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/debuginfo/issue-105386-debuginfo-ub.rs:8:1: 8:17>::visit_pre(_1: TranslatorI) -> () {
    debug self => const TranslatorI;
    let mut _0: ();
    let _2: ();
    let mut _3: std::option::Option<()>;
    let mut _4: std::option::Option<()>;
    let mut _5: [closure@ui/debuginfo/issue-105386-debuginfo-ub.rs:11:18: 11:21];
    let mut _6: &TranslatorI;
    let mut _7: [closure@ui/debuginfo/issue-105386-debuginfo-ub.rs:12:29: 12:31];
    let mut _8: &TranslatorI;

    bb0: {
        _4 = Option::<()>::Some(const ());
        _6 = &_1;
        _5 = [closure@ui/debuginfo/issue-105386-debuginfo-ub.rs:11:18: 11:21] { self: move _6 };
        _3 = Option::<()>::map::<(), [closure@ui/debuginfo/issue-105386-debuginfo-ub.rs:11:18: 11:21]>(move _4, move _5) -> bb1;
    }

    bb1: {
        _8 = &_1;
        _7 = [closure@ui/debuginfo/issue-105386-debuginfo-ub.rs:12:29: 12:31] { self: move _8 };
        _2 = Option::<()>::unwrap_or_else::<[closure@ui/debuginfo/issue-105386-debuginfo-ub.rs:12:29: 12:31]>(move _3, move _7) -> bb2;
    }

    bb2: {
        return;
    }
}

fn <impl at ui/debuginfo/issue-105386-debuginfo-ub.rs:8:1: 8:17>::visit_pre::{closure#0}(_1: [closure@ui/debuginfo/issue-105386-debuginfo-ub.rs:11:18: 11:21], _2: ()) -> () {
    debug self => const TranslatorI;
    let mut _0: ();
    let mut _3: &TranslatorI;

    bb0: {
        _3 = deref_copy (_1.0: &TranslatorI);
        _0 = TranslatorI::flags(_3) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/debuginfo/issue-105386-debuginfo-ub.rs:8:1: 8:17>::visit_pre::{closure#1}(_1: [closure@ui/debuginfo/issue-105386-debuginfo-ub.rs:12:29: 12:31]) -> () {
    debug self => const TranslatorI;
    let mut _0: ();
    let mut _2: &TranslatorI;

    bb0: {
        _2 = deref_copy (_1.0: &TranslatorI);
        _0 = TranslatorI::flags(_2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/debuginfo/issue-105386-debuginfo-ub.rs:18:1: 18:17>::flags(_1: &TranslatorI) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}
