// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn with_closure_expecting_different(_1: F) -> () {
    let mut _0: ();

    bb0: {
        drop(_1) -> bb1;
    }

    bb1: {
        return;
    }
}

fn with_closure_expecting_different_anon(_1: F) -> () {
    let mut _0: ();

    bb0: {
        drop(_1) -> bb1;
    }

    bb1: {
        return;
    }
}

fn supplying_nothing_expecting_anon() -> () {
    let mut _0: ();

    bb0: {
        _0 = with_closure_expecting_different_anon::<[closure@ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:19:43: 19:57]>(const ZeroSized: [closure@ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:19:43: 19:57]) -> bb1;
    }

    bb1: {
        return;
    }
}

fn supplying_nothing_expecting_anon::{closure#0}(_1: [closure@ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:19:43: 19:57], _2: &mut (&(), &())) -> () {
    debug x => _2;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn supplying_nothing_expecting_named() -> () {
    let mut _0: ();

    bb0: {
        _0 = with_closure_expecting_different::<[closure@ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:24:38: 24:52]>(const ZeroSized: [closure@ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:24:38: 24:52]) -> bb1;
    }

    bb1: {
        return;
    }
}

fn supplying_nothing_expecting_named::{closure#0}(_1: [closure@ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:24:38: 24:52], _2: &mut (&(), &())) -> () {
    debug x => _2;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn supplying_underscore_expecting_anon() -> () {
    let mut _0: ();

    bb0: {
        _0 = with_closure_expecting_different_anon::<[closure@ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:29:43: 29:65]>(const ZeroSized: [closure@ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:29:43: 29:65]) -> bb1;
    }

    bb1: {
        return;
    }
}

fn supplying_underscore_expecting_anon::{closure#0}(_1: [closure@ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:29:43: 29:65], _2: &mut (&(), &())) -> () {
    debug x => _2;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn supplying_underscore_expecting_named() -> () {
    let mut _0: ();

    bb0: {
        _0 = with_closure_expecting_different::<[closure@ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:34:38: 34:60]>(const ZeroSized: [closure@ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:34:38: 34:60]) -> bb1;
    }

    bb1: {
        return;
    }
}

fn supplying_underscore_expecting_named::{closure#0}(_1: [closure@ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:34:38: 34:60], _2: &mut (&(), &())) -> () {
    debug x => _2;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
