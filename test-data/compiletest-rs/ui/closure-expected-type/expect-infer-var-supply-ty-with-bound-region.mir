// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn with_closure(_1: F) -> () {
    let mut _0: ();

    bb0: {
        drop(_1) -> bb1;
    }

    bb1: {
        return;
    }
}

fn foo() -> () {
    let mut _0: ();
    let _1: ();

    bb0: {
        _1 = with_closure::<[closure@ui/closure-expected-type/expect-infer-var-supply-ty-with-bound-region.rs:11:18: 11:29], u32>(const ZeroSized: [closure@ui/closure-expected-type/expect-infer-var-supply-ty-with-bound-region.rs:11:18: 11:29]) -> bb1;
    }

    bb1: {
        return;
    }
}

fn foo::{closure#0}(_1: [closure@ui/closure-expected-type/expect-infer-var-supply-ty-with-bound-region.rs:11:18: 11:29], _2: u32, _3: &u32) -> () {
    debug x => _2;
    debug y => _3;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn bar() -> () {
    let mut _0: ();
    let _1: ();

    bb0: {
        _1 = with_closure::<[closure@ui/closure-expected-type/expect-infer-var-supply-ty-with-bound-region.rs:16:18: 16:30], &u32>(const ZeroSized: [closure@ui/closure-expected-type/expect-infer-var-supply-ty-with-bound-region.rs:16:18: 16:30]) -> bb1;
    }

    bb1: {
        return;
    }
}

fn bar::{closure#0}(_1: [closure@ui/closure-expected-type/expect-infer-var-supply-ty-with-bound-region.rs:16:18: 16:30], _2: &u32, _3: &u32) -> () {
    debug x => _2;
    debug y => _3;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
