// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn good(_1: &String) -> Foo<'_> {
    debug s => _1;
    let mut _0: Foo<'_>;
    let mut _2: &str;
    let _3: &str;

    bb0: {
        _3 = <String as Deref>::deref(_1) -> bb1;
    }

    bb1: {
        _2 = _3;
        _0 = Foo::<'_>(move _2);
        return;
    }
}

fn bad1(_1: String) -> Option<&str> {
    debug s => _1;
    let mut _0: std::option::Option<&str>;
    let _2: std::boxed::Box<dyn std::any::Any>;
    let mut _3: std::boxed::Box<for<'a> fn(&'a std::string::String) -> Foo<'a>>;
    let mut _4: for<'a> fn(&'a std::string::String) -> Foo<'a>;
    let mut _5: std::option::Option<&for<'a> fn(&'a std::string::String) -> Foo<'_>>;
    let mut _6: &dyn std::any::Any;
    let mut _7: [closure@ui/type-id-higher-rank-2.rs:12:57: 12:60];
    let mut _8: &std::string::String;
    let mut _9: *const dyn std::any::Any;
    scope 1 {
        debug a => _2;
    }

    bb0: {
        _4 = good as for<'a> fn(&'a std::string::String) -> Foo<'a> (Pointer(ReifyFnPointer));
        _3 = Box::<for<'a> fn(&'a String) -> Foo<'a>>::new(move _4) -> [return: bb1, unwind: bb7];
    }

    bb1: {
        _2 = move _3 as std::boxed::Box<dyn std::any::Any> (Pointer(Unsize));
        _9 = (((_2.0: std::ptr::Unique<dyn std::any::Any>).0: std::ptr::NonNull<dyn std::any::Any>).0: *const dyn std::any::Any);
        _6 = &(*_9);
        _5 = <(dyn Any + 'static)>::downcast_ref::<for<'a> fn(&'a String) -> Foo<'_>>(move _6) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _8 = &_1;
        _7 = [closure@ui/type-id-higher-rank-2.rs:12:57: 12:60] { s: move _8 };
        _0 = Option::<&for<'a> fn(&'a String) -> Foo<'_>>::map::<&str, [closure@ui/type-id-higher-rank-2.rs:12:57: 12:60]>(move _5, move _7) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        drop(_2) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        drop(_1) -> bb5;
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        drop(_1) -> [return: bb8, unwind terminate];
    }

    bb8 (cleanup): {
        resume;
    }
}

fn bad1::{closure#0}(_1: [closure@ui/type-id-higher-rank-2.rs:12:57: 12:60], _2: &for<'a> fn(&'a String) -> Foo<'_>) -> &str {
    debug f => _2;
    debug s => (*(_1.0: &std::string::String));
    let mut _0: &str;
    let mut _3: Foo<'_>;
    let mut _4: for<'a> fn(&'a std::string::String) -> Foo<'_>;
    let mut _5: &std::string::String;

    bb0: {
        _4 = (*_2);
        _5 = deref_copy (_1.0: &std::string::String);
        _3 = move _4(_5) -> bb1;
    }

    bb1: {
        _0 = (_3.0: &str);
        return;
    }
}

fn <impl at ui/type-id-higher-rank-2.rs:19:1: 19:34>::get(_1: &String) -> &str {
    debug self => _1;
    let mut _0: &str;
    let _2: &str;

    bb0: {
        _2 = <String as Deref>::deref(_1) -> bb1;
    }

    bb1: {
        _0 = _2;
        return;
    }
}

fn bad2(_1: String) -> Option<&str> {
    debug s => _1;
    let mut _0: std::option::Option<&str>;
    let _2: std::boxed::Box<dyn std::any::Any>;
    let mut _3: std::boxed::Box<std::boxed::Box<dyn for<'a> AsStr<'a, 'a>>>;
    let mut _4: std::boxed::Box<dyn for<'a> AsStr<'a, 'a>>;
    let mut _5: std::boxed::Box<std::string::String>;
    let mut _6: std::option::Option<&std::boxed::Box<dyn for<'a> AsStr<'a, '_>>>;
    let mut _7: &dyn std::any::Any;
    let mut _8: *const dyn std::any::Any;
    scope 1 {
        debug a => _2;
    }

    bb0: {
        _5 = Box::<String>::new(move _1) -> bb1;
    }

    bb1: {
        _4 = move _5 as std::boxed::Box<dyn for<'a> AsStr<'a, 'a>> (Pointer(Unsize));
        _3 = Box::<Box<dyn for<'a> AsStr<'a, 'a>>>::new(move _4) -> bb2;
    }

    bb2: {
        _2 = move _3 as std::boxed::Box<dyn std::any::Any> (Pointer(Unsize));
        _8 = (((_2.0: std::ptr::Unique<dyn std::any::Any>).0: std::ptr::NonNull<dyn std::any::Any>).0: *const dyn std::any::Any);
        _7 = &(*_8);
        _6 = <(dyn Any + 'static)>::downcast_ref::<Box<dyn for<'a> AsStr<'a, '_>>>(move _7) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _0 = Option::<&Box<dyn for<'a> AsStr<'a, '_>>>::map::<&str, [closure@ui/type-id-higher-rank-2.rs:25:65: 25:68]>(move _6, const ZeroSized: [closure@ui/type-id-higher-rank-2.rs:25:65: 25:68]) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_2) -> bb5;
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }
}

fn bad2::{closure#0}(_1: [closure@ui/type-id-higher-rank-2.rs:25:65: 25:68], _2: &Box<dyn for<'a> AsStr<'a, '_>>) -> &str {
    debug x => _2;
    let mut _0: &str;
    let mut _3: &dyn for<'a> AsStr<'a, '_>;
    let mut _4: std::boxed::Box<dyn for<'a> AsStr<'a, '_>>;
    let mut _5: *const dyn for<'a> AsStr<'a, '_>;

    bb0: {
        _4 = deref_copy (*_2);
        _5 = (((_4.0: std::ptr::Unique<dyn for<'a> AsStr<'a, '_>>).0: std::ptr::NonNull<dyn for<'a> AsStr<'a, '_>>).0: *const dyn for<'a> AsStr<'a, '_>);
        _3 = &(*_5);
        _0 = <dyn for<'a> AsStr<'a, '_> as AsStr<'_, '_>>::get(move _3) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&std::option::Option<&str>, &std::option::Option<&str>);
    let mut _2: &std::option::Option<&str>;
    let _3: std::option::Option<&str>;
    let mut _4: std::string::String;
    let mut _5: &std::option::Option<&str>;
    let _6: std::option::Option<&str>;
    let _7: &std::option::Option<&str>;
    let _8: &std::option::Option<&str>;
    let mut _9: bool;
    let mut _10: bool;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: (&std::option::Option<&str>, &std::option::Option<&str>);
    let mut _15: &std::option::Option<&str>;
    let _16: std::option::Option<&str>;
    let mut _17: std::string::String;
    let mut _18: &std::option::Option<&str>;
    let _19: std::option::Option<&str>;
    let _20: &std::option::Option<&str>;
    let _21: &std::option::Option<&str>;
    let mut _22: bool;
    let mut _23: bool;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _7;
        debug right_val => _8;
        let _11: core::panicking::AssertKind;
        scope 2 {
            debug kind => _11;
        }
    }
    scope 3 {
        debug left_val => _20;
        debug right_val => _21;
        let _24: core::panicking::AssertKind;
        scope 4 {
            debug kind => _24;
        }
    }

    bb0: {
        _4 = <String as From<&str>>::from(const "foo") -> bb1;
    }

    bb1: {
        _3 = bad1(move _4) -> bb2;
    }

    bb2: {
        _2 = &_3;
        _6 = Option::<&str>::None;
        _5 = &_6;
        _1 = (move _2, move _5);
        _7 = (_1.0: &std::option::Option<&str>);
        _8 = (_1.1: &std::option::Option<&str>);
        _10 = <Option<&str> as PartialEq>::eq(_7, _8) -> bb3;
    }

    bb3: {
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<Option<&str>, Option<&str>>(move _11, _7, _8, move _13);
    }

    bb5: {
        _17 = <String as From<&str>>::from(const "bar") -> bb6;
    }

    bb6: {
        _16 = bad2(move _17) -> bb7;
    }

    bb7: {
        _15 = &_16;
        _19 = Option::<&str>::None;
        _18 = &_19;
        _14 = (move _15, move _18);
        _20 = (_14.0: &std::option::Option<&str>);
        _21 = (_14.1: &std::option::Option<&str>);
        _23 = <Option<&str> as PartialEq>::eq(_20, _21) -> bb8;
    }

    bb8: {
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<Option<&str>, Option<&str>>(move _24, _20, _21, move _26);
    }

    bb10: {
        return;
    }
}

fn Foo(_1: &str) -> Foo<'_> {
    let mut _0: Foo<'_>;

    bb0: {
        _0 = Foo::<'_>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: &str) -> Foo<'_> {
    let mut _0: Foo<'_>;

    bb0: {
        _0 = Foo::<'_>(move _1);
        return;
    }
}
