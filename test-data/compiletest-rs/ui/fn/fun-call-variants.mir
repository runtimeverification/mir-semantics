// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn ho(_1: F) -> isize {
    debug f => _1;
    let mut _0: isize;
    let _2: isize;
    let mut _3: (isize,);
    scope 1 {
        debug n => _2;
    }

    bb0: {
        _3 = (const 3_isize,);
        _2 = <F as FnOnce<(isize,)>>::call_once(move _1, move _3) -> bb1;
    }

    bb1: {
        _0 = _2;
        return;
    }
}

fn direct(_1: isize) -> isize {
    debug x => _1;
    let mut _0: isize;

    bb0: {
        _0 = Add(_1, const 1_isize);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: isize;
    let mut _3: (&isize, &isize);
    let mut _4: &isize;
    let mut _5: &isize;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: isize;
    let mut _11: isize;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug a => _1;
        let _2: isize;
        scope 2 {
            debug b => _2;
            let _6: &isize;
            let _7: &isize;
            scope 3 {
                debug left_val => _6;
                debug right_val => _7;
                let _12: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _12;
                }
            }
        }
    }

    bb0: {
        _1 = direct(const 3_isize) -> bb1;
    }

    bb1: {
        _2 = ho::<fn(isize) -> isize {direct}>(direct) -> bb2;
    }

    bb2: {
        _4 = &_1;
        _5 = &_2;
        _3 = (move _4, move _5);
        _6 = (_3.0: &isize);
        _7 = (_3.1: &isize);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<isize, isize>(move _12, _6, _7, move _14);
    }

    bb4: {
        return;
    }
}
