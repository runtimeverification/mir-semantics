// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn as_result() -> Result<(), E> {
    let mut _0: std::result::Result<(), E>;
    let mut _1: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, E>, K>;
    let mut _2: std::result::Result<K, E>;
    let mut _3: isize;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, E>, std::task::Poll<K>>;
    let mut _5: std::task::Poll<std::result::Result<K, E>>;
    let mut _6: std::result::Result<K, E>;
    let mut _7: isize;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, E>, std::task::Poll<std::option::Option<K>>>;
    let mut _10: std::task::Poll<std::option::Option<std::result::Result<K, E>>>;
    let mut _11: std::option::Option<std::result::Result<K, E>>;
    let mut _12: isize;
    scope 1 {
        let _8: std::task::Poll<K>;
        scope 6 {
            let _13: std::task::Poll<std::option::Option<K>>;
            scope 11 {
            }
            scope 12 {
                debug residual => const Result::<Infallible, E>::Err(E);
                scope 13 {
                }
            }
            scope 14 {
                debug val => _13;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => const Result::<Infallible, E>::Err(E);
            scope 8 {
            }
        }
        scope 9 {
            debug val => _8;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => const Result::<Infallible, E>::Err(E);
        scope 3 {
        }
    }
    scope 4 {
        debug val => const K;
        scope 5 {
        }
    }

    bb0: {
        _2 = Result::<K, E>::Ok(const K);
        _1 = <Result<K, E> as Try>::branch(move _2) -> bb1;
    }

    bb1: {
        _3 = discriminant(_1);
        switchInt(move _3) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _6 = Result::<K, E>::Ok(const K);
        _5 = Poll::<Result<K, E>>::Ready(move _6);
        _4 = <Poll<Result<K, E>> as Try>::branch(move _5) -> bb5;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _0 = <Result<(), E> as FromResidual<Result<Infallible, E>>>::from_residual(const Result::<Infallible, E>::Err(E)) -> bb11;
    }

    bb5: {
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb6, 1: bb7, otherwise: bb3];
    }

    bb6: {
        _8 = move ((_4 as Continue).0: std::task::Poll<K>);
        _11 = Option::<Result<K, E>>::None;
        _10 = Poll::<Option<Result<K, E>>>::Ready(move _11);
        _9 = <Poll<Option<Result<K, E>>> as Try>::branch(move _10) -> bb8;
    }

    bb7: {
        _0 = <Result<(), E> as FromResidual<Result<Infallible, E>>>::from_residual(const Result::<Infallible, E>::Err(E)) -> bb11;
    }

    bb8: {
        _12 = discriminant(_9);
        switchInt(move _12) -> [0: bb9, 1: bb10, otherwise: bb3];
    }

    bb9: {
        _13 = move ((_9 as Continue).0: std::task::Poll<std::option::Option<K>>);
        _0 = Result::<(), E>::Ok(const ());
        goto -> bb11;
    }

    bb10: {
        _0 = <Result<(), E> as FromResidual<Result<Infallible, E>>>::from_residual(const Result::<Infallible, E>::Err(E)) -> bb11;
    }

    bb11: {
        return;
    }
}

fn as_poll_result() -> Poll<Result<(), E>> {
    let mut _0: std::task::Poll<std::result::Result<(), E>>;
    let mut _1: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, E>, K>;
    let mut _2: std::result::Result<K, E>;
    let mut _3: isize;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, E>, std::task::Poll<K>>;
    let mut _5: std::task::Poll<std::result::Result<K, E>>;
    let mut _6: std::result::Result<K, E>;
    let mut _7: isize;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, E>, std::task::Poll<std::option::Option<K>>>;
    let mut _10: std::task::Poll<std::option::Option<std::result::Result<K, E>>>;
    let mut _11: std::option::Option<std::result::Result<K, E>>;
    let mut _12: isize;
    let mut _14: std::result::Result<(), E>;
    scope 1 {
        let _8: std::task::Poll<K>;
        scope 6 {
            let _13: std::task::Poll<std::option::Option<K>>;
            scope 11 {
            }
            scope 12 {
                debug residual => const Result::<Infallible, E>::Err(E);
                scope 13 {
                }
            }
            scope 14 {
                debug val => _13;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => const Result::<Infallible, E>::Err(E);
            scope 8 {
            }
        }
        scope 9 {
            debug val => _8;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => const Result::<Infallible, E>::Err(E);
        scope 3 {
        }
    }
    scope 4 {
        debug val => const K;
        scope 5 {
        }
    }

    bb0: {
        _2 = Result::<K, E>::Ok(const K);
        _1 = <Result<K, E> as Try>::branch(move _2) -> bb1;
    }

    bb1: {
        _3 = discriminant(_1);
        switchInt(move _3) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _6 = Result::<K, E>::Ok(const K);
        _5 = Poll::<Result<K, E>>::Ready(move _6);
        _4 = <Poll<Result<K, E>> as Try>::branch(move _5) -> bb5;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _0 = <Poll<Result<(), E>> as FromResidual<Result<Infallible, E>>>::from_residual(const Result::<Infallible, E>::Err(E)) -> bb11;
    }

    bb5: {
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb6, 1: bb7, otherwise: bb3];
    }

    bb6: {
        _8 = move ((_4 as Continue).0: std::task::Poll<K>);
        _11 = Option::<Result<K, E>>::None;
        _10 = Poll::<Option<Result<K, E>>>::Ready(move _11);
        _9 = <Poll<Option<Result<K, E>>> as Try>::branch(move _10) -> bb8;
    }

    bb7: {
        _0 = <Poll<Result<(), E>> as FromResidual<Result<Infallible, E>>>::from_residual(const Result::<Infallible, E>::Err(E)) -> bb11;
    }

    bb8: {
        _12 = discriminant(_9);
        switchInt(move _12) -> [0: bb9, 1: bb10, otherwise: bb3];
    }

    bb9: {
        _13 = move ((_9 as Continue).0: std::task::Poll<std::option::Option<K>>);
        _14 = Result::<(), E>::Ok(const ());
        _0 = Poll::<Result<(), E>>::Ready(move _14);
        goto -> bb11;
    }

    bb10: {
        _0 = <Poll<Result<(), E>> as FromResidual<Result<Infallible, E>>>::from_residual(const Result::<Infallible, E>::Err(E)) -> bb11;
    }

    bb11: {
        return;
    }
}

fn as_poll_option_result() -> Poll<Option<Result<(), E>>> {
    let mut _0: std::task::Poll<std::option::Option<std::result::Result<(), E>>>;
    let mut _1: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, E>, K>;
    let mut _2: std::result::Result<K, E>;
    let mut _3: isize;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, E>, std::task::Poll<K>>;
    let mut _5: std::task::Poll<std::result::Result<K, E>>;
    let mut _6: std::result::Result<K, E>;
    let mut _7: isize;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, E>, std::task::Poll<std::option::Option<K>>>;
    let mut _10: std::task::Poll<std::option::Option<std::result::Result<K, E>>>;
    let mut _11: std::option::Option<std::result::Result<K, E>>;
    let mut _12: isize;
    let mut _14: std::option::Option<std::result::Result<(), E>>;
    let mut _15: std::result::Result<(), E>;
    scope 1 {
        let _8: std::task::Poll<K>;
        scope 6 {
            let _13: std::task::Poll<std::option::Option<K>>;
            scope 11 {
            }
            scope 12 {
                debug residual => const Result::<Infallible, E>::Err(E);
                scope 13 {
                }
            }
            scope 14 {
                debug val => _13;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => const Result::<Infallible, E>::Err(E);
            scope 8 {
            }
        }
        scope 9 {
            debug val => _8;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => const Result::<Infallible, E>::Err(E);
        scope 3 {
        }
    }
    scope 4 {
        debug val => const K;
        scope 5 {
        }
    }

    bb0: {
        _2 = Result::<K, E>::Ok(const K);
        _1 = <Result<K, E> as Try>::branch(move _2) -> bb1;
    }

    bb1: {
        _3 = discriminant(_1);
        switchInt(move _3) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _6 = Result::<K, E>::Ok(const K);
        _5 = Poll::<Result<K, E>>::Ready(move _6);
        _4 = <Poll<Result<K, E>> as Try>::branch(move _5) -> bb5;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _0 = <Poll<Option<Result<(), E>>> as FromResidual<Result<Infallible, E>>>::from_residual(const Result::<Infallible, E>::Err(E)) -> bb11;
    }

    bb5: {
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb6, 1: bb7, otherwise: bb3];
    }

    bb6: {
        _8 = move ((_4 as Continue).0: std::task::Poll<K>);
        _11 = Option::<Result<K, E>>::None;
        _10 = Poll::<Option<Result<K, E>>>::Ready(move _11);
        _9 = <Poll<Option<Result<K, E>>> as Try>::branch(move _10) -> bb8;
    }

    bb7: {
        _0 = <Poll<Option<Result<(), E>>> as FromResidual<Result<Infallible, E>>>::from_residual(const Result::<Infallible, E>::Err(E)) -> bb11;
    }

    bb8: {
        _12 = discriminant(_9);
        switchInt(move _12) -> [0: bb9, 1: bb10, otherwise: bb3];
    }

    bb9: {
        _13 = move ((_9 as Continue).0: std::task::Poll<std::option::Option<K>>);
        _15 = Result::<(), E>::Ok(const ());
        _14 = Option::<Result<(), E>>::Some(move _15);
        _0 = Poll::<Option<Result<(), E>>>::Ready(move _14);
        goto -> bb11;
    }

    bb10: {
        _0 = <Poll<Option<Result<(), E>>> as FromResidual<Result<Infallible, E>>>::from_residual(const Result::<Infallible, E>::Err(E)) -> bb11;
    }

    bb11: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
