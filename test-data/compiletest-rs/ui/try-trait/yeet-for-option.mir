// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn always_yeet() -> Option<String> {
    let mut _0: std::option::Option<std::string::String>;

    bb0: {
        _0 = ops::try_trait::from_yeet::<Option<String>, ()>(const ()) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&std::option::Option<std::string::String>, &std::option::Option<std::string::String>);
    let mut _2: &std::option::Option<std::string::String>;
    let _3: std::option::Option<std::string::String>;
    let mut _4: &std::option::Option<std::string::String>;
    let _5: std::option::Option<std::string::String>;
    let _6: &std::option::Option<std::string::String>;
    let _7: &std::option::Option<std::string::String>;
    let mut _8: bool;
    let mut _9: bool;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }

    bb0: {
        _3 = always_yeet() -> bb1;
    }

    bb1: {
        _2 = &_3;
        _5 = Option::<String>::None;
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &std::option::Option<std::string::String>);
        _7 = (_1.1: &std::option::Option<std::string::String>);
        _9 = <Option<String> as PartialEq>::eq(_6, _7) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<Option<String>, Option<String>>(move _10, _6, _7, move _12) -> bb7;
    }

    bb4: {
        drop(_5) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        drop(_3) -> bb6;
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_5) -> [return: bb8, unwind terminate];
    }

    bb8 (cleanup): {
        drop(_3) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        resume;
    }
}
