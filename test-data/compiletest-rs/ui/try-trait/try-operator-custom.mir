// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/try-trait/try-operator-custom.rs:15:1: 15:34>::from_output(_1: U) -> MyResult<U, V> {
    debug u => _1;
    let mut _0: MyResult<U, V>;

    bb0: {
        _0 = MyResult::<U, V>::Awesome(move _1);
        return;
    }
}

fn <impl at ui/try-trait/try-operator-custom.rs:15:1: 15:34>::branch(_1: MyResult<U, V>) -> ControlFlow<MyResult<Never, V>, U> {
    debug self => _1;
    let mut _0: std::ops::ControlFlow<MyResult<Never, V>, U>;
    let mut _2: isize;
    let _3: U;
    let _4: V;
    let mut _5: MyResult<Never, V>;
    scope 1 {
        debug u => _3;
    }
    scope 2 {
        debug e => _4;
    }

    bb0: {
        _2 = discriminant(_1);
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _4 = move ((_1 as Terrible).0: V);
        _5 = MyResult::<Never, V>::Terrible(move _4);
        _0 = ControlFlow::<MyResult<Never, V>, U>::Break(move _5);
        goto -> bb4;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _3 = move ((_1 as Awesome).0: U);
        _0 = ControlFlow::<MyResult<Never, V>, U>::Continue(move _3);
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

fn <impl at ui/try-trait/try-operator-custom.rs:31:1: 31:66>::from_residual(_1: MyResult<Never, V>) -> MyResult<U, W> {
    debug x => _1;
    let mut _0: MyResult<U, W>;
    let mut _2: isize;
    let _3: V;
    let mut _4: W;
    scope 1 {
        debug u => const ZeroSized: Never;
    }
    scope 2 {
        debug e => _3;
    }

    bb0: {
        _2 = discriminant(_1);
        switchInt(move _2) -> [1: bb1, otherwise: bb2];
    }

    bb1: {
        _3 = move ((_1 as Terrible).0: V);
        _4 = <V as Into<W>>::into(move _3) -> bb3;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _0 = MyResult::<U, W>::Terrible(move _4);
        return;
    }
}

fn <impl at ui/try-trait/try-operator-custom.rs:42:1: 42:65>::from_residual(_1: Result<Infallible, V>) -> MyResult<U, W> {
    debug x => _1;
    let mut _0: MyResult<U, W>;
    let mut _2: isize;
    let _3: V;
    let mut _4: W;
    scope 1 {
        debug v => const ZeroSized: Infallible;
    }
    scope 2 {
        debug e => _3;
    }

    bb0: {
        _2 = discriminant(_1);
        switchInt(move _2) -> [1: bb1, otherwise: bb2];
    }

    bb1: {
        _3 = move ((_1 as Err).0: V);
        _4 = <V as Into<W>>::into(move _3) -> bb3;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _0 = MyResult::<U, W>::Terrible(move _4);
        return;
    }
}

fn <impl at ui/try-trait/try-operator-custom.rs:51:1: 51:64>::from_residual(_1: MyResult<Never, V>) -> Result<U, W> {
    debug x => _1;
    let mut _0: std::result::Result<U, W>;
    let mut _2: isize;
    let _3: V;
    let mut _4: W;
    scope 1 {
        debug u => const ZeroSized: Never;
    }
    scope 2 {
        debug e => _3;
    }

    bb0: {
        _2 = discriminant(_1);
        switchInt(move _2) -> [1: bb1, otherwise: bb2];
    }

    bb1: {
        _3 = move ((_1 as Terrible).0: V);
        _4 = <V as Into<W>>::into(move _3) -> bb3;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _0 = Result::<U, W>::Err(move _4);
        return;
    }
}

fn f(_1: i32) -> Result<i32, String> {
    debug x => _1;
    let mut _0: std::result::Result<i32, std::string::String>;
    let mut _2: std::ops::ControlFlow<MyResult<Never, std::string::String>, i32>;
    let mut _3: MyResult<i32, std::string::String>;
    let mut _4: isize;
    let _5: MyResult<Never, std::string::String>;
    let _6: i32;
    scope 1 {
        debug y => _6;
    }
    scope 2 {
        debug residual => _5;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _6;
        scope 5 {
        }
    }

    bb0: {
        switchInt(move _1) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = Result::<i32, String>::Ok(const 42_i32);
        goto -> bb8;
    }

    bb2: {
        _3 = g(_1) -> bb3;
    }

    bb3: {
        _2 = <MyResult<i32, String> as Try>::branch(move _3) -> bb4;
    }

    bb4: {
        _4 = discriminant(_2);
        switchInt(move _4) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        _6 = ((_2 as Continue).0: i32);
        _0 = Result::<i32, String>::Ok(_6);
        goto -> bb8;
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _5 = move ((_2 as Break).0: MyResult<Never, std::string::String>);
        _0 = <Result<i32, String> as FromResidual<MyResult<Never, String>>>::from_residual(move _5) -> bb8;
    }

    bb8: {
        return;
    }
}

fn g(_1: i32) -> MyResult<i32, String> {
    debug x => _1;
    let mut _0: MyResult<i32, std::string::String>;
    let mut _2: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::string::String>, i32>;
    let mut _3: std::result::Result<i32, std::string::String>;
    let mut _4: i32;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, std::string::String>;
    let _7: i32;
    let mut _8: std::string::String;
    let _9: &str;
    scope 1 {
        debug _y => _7;
    }
    scope 2 {
        debug residual => _6;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _7;
        scope 5 {
        }
    }

    bb0: {
        _4 = Sub(_1, const 1_i32);
        _3 = f(move _4) -> bb1;
    }

    bb1: {
        _2 = <Result<i32, String> as Try>::branch(move _3) -> bb2;
    }

    bb2: {
        _5 = discriminant(_2);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _7 = ((_2 as Continue).0: i32);
        _9 = const "Hello";
        _8 = <str as ToOwned>::to_owned(_9) -> bb6;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = move ((_2 as Break).0: std::result::Result<std::convert::Infallible, std::string::String>);
        _0 = <MyResult<i32, String> as FromResidual<Result<Infallible, String>>>::from_residual(move _6) -> bb7;
    }

    bb6: {
        _0 = MyResult::<i32, String>::Terrible(move _8);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn h() -> MyResult<i32, String> {
    let mut _0: MyResult<i32, std::string::String>;
    let _1: std::result::Result<i32, &str>;
    let _2: &str;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, &str>, i32>;
    let mut _4: isize;
    scope 1 {
        debug a => _1;
        let _5: std::result::Result<std::convert::Infallible, &str>;
        let _6: i32;
        scope 2 {
            debug b => _6;
        }
        scope 3 {
            debug residual => _5;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _6;
            scope 6 {
            }
        }
    }

    bb0: {
        _2 = const "Hello";
        _1 = Result::<i32, &str>::Err(_2);
        _3 = <Result<i32, &str> as Try>::branch(_1) -> bb1;
    }

    bb1: {
        _4 = discriminant(_3);
        switchInt(move _4) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _6 = ((_3 as Continue).0: i32);
        _0 = MyResult::<i32, String>::Awesome(_6);
        goto -> bb5;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _5 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, &str>);
        _0 = <MyResult<i32, String> as FromResidual<Result<Infallible, &str>>>::from_residual(_5) -> bb5;
    }

    bb5: {
        return;
    }
}

fn i() -> MyResult<i32, String> {
    let mut _0: MyResult<i32, std::string::String>;
    let _1: MyResult<i32, &str>;
    let _2: &str;
    let mut _3: std::ops::ControlFlow<MyResult<Never, &str>, i32>;
    let mut _4: isize;
    scope 1 {
        debug a => _1;
        let _5: MyResult<Never, &str>;
        let _6: i32;
        scope 2 {
            debug b => _6;
        }
        scope 3 {
            debug residual => _5;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _6;
            scope 6 {
            }
        }
    }

    bb0: {
        _2 = const "Hello";
        _1 = MyResult::<i32, &str>::Terrible(_2);
        _3 = <MyResult<i32, &str> as Try>::branch(move _1) -> bb1;
    }

    bb1: {
        _4 = discriminant(_3);
        switchInt(move _4) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _6 = ((_3 as Continue).0: i32);
        _0 = MyResult::<i32, String>::Awesome(_6);
        goto -> bb5;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _5 = move ((_3 as Break).0: MyResult<Never, &str>);
        _0 = <MyResult<i32, String> as FromResidual<MyResult<Never, &str>>>::from_residual(move _5) -> bb5;
    }

    bb5: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: &std::result::Result<i32, std::string::String>;
    let _4: std::result::Result<i32, std::string::String>;
    let mut _5: &std::result::Result<i32, std::string::String>;
    let _6: std::result::Result<i32, std::string::String>;
    let mut _7: !;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: &std::result::Result<i32, std::string::String>;
    let _11: std::result::Result<i32, std::string::String>;
    let mut _12: &std::result::Result<i32, std::string::String>;
    let _13: std::result::Result<i32, std::string::String>;
    let mut _14: std::string::String;
    let _15: &str;
    let mut _16: !;
    let mut _17: MyResult<i32, std::string::String>;
    let mut _18: MyResult<i32, std::string::String>;
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        _4 = f(const 0_i32) -> bb1;
    }

    bb1: {
        _3 = &_4;
        _6 = Result::<i32, String>::Ok(const 42_i32);
        _5 = &_6;
        _2 = <Result<i32, String> as PartialEq>::eq(move _3, move _5) -> [return: bb2, unwind: bb20];
    }

    bb2: {
        _1 = Not(move _2);
        drop(_6) -> [return: bb3, unwind: bb21];
    }

    bb3: {
        drop(_4) -> bb4;
    }

    bb4: {
        switchInt(move _1) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _7 = core::panicking::panic(const "assertion failed: f(0) == Ok(42)");
    }

    bb6: {
        _11 = f(const 10_i32) -> bb7;
    }

    bb7: {
        _10 = &_11;
        _15 = const "Hello";
        _14 = <str as ToOwned>::to_owned(_15) -> [return: bb8, unwind: bb19];
    }

    bb8: {
        _13 = Result::<i32, String>::Err(move _14);
        _12 = &_13;
        _9 = <Result<i32, String> as PartialEq>::eq(move _10, move _12) -> [return: bb9, unwind: bb18];
    }

    bb9: {
        _8 = Not(move _9);
        drop(_13) -> [return: bb10, unwind: bb19];
    }

    bb10: {
        drop(_11) -> bb11;
    }

    bb11: {
        switchInt(move _8) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _16 = core::panicking::panic(const "assertion failed: f(10) == Err(\\\"Hello\\\".to_owned())");
    }

    bb13: {
        _17 = h() -> bb14;
    }

    bb14: {
        drop(_17) -> bb15;
    }

    bb15: {
        _18 = i() -> bb16;
    }

    bb16: {
        drop(_18) -> bb17;
    }

    bb17: {
        return;
    }

    bb18 (cleanup): {
        drop(_13) -> [return: bb19, unwind terminate];
    }

    bb19 (cleanup): {
        drop(_11) -> [return: bb22, unwind terminate];
    }

    bb20 (cleanup): {
        drop(_6) -> [return: bb21, unwind terminate];
    }

    bb21 (cleanup): {
        drop(_4) -> [return: bb22, unwind terminate];
    }

    bb22 (cleanup): {
        resume;
    }
}

fn MyResult::Awesome(_1: T) -> MyResult<T, U> {
    let mut _0: MyResult<T, U>;

    bb0: {
        _0 = MyResult::<T, U>::Awesome(move _1);
        return;
    }
}

// MIR FOR CTFE
fn MyResult::Awesome(_1: T) -> MyResult<T, U> {
    let mut _0: MyResult<T, U>;

    bb0: {
        _0 = MyResult::<T, U>::Awesome(move _1);
        return;
    }
}

fn MyResult::Terrible(_1: U) -> MyResult<T, U> {
    let mut _0: MyResult<T, U>;

    bb0: {
        _0 = MyResult::<T, U>::Terrible(move _1);
        return;
    }
}

// MIR FOR CTFE
fn MyResult::Terrible(_1: U) -> MyResult<T, U> {
    let mut _0: MyResult<T, U>;

    bb0: {
        _0 = MyResult::<T, U>::Terrible(move _1);
        return;
    }
}
