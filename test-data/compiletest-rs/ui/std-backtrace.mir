// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<std::string::String>;
    let mut _2: std::env::Args;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: usize;
    let mut _6: &std::vec::Vec<std::string::String>;
    let mut _7: bool;
    let mut _8: &std::string::String;
    let _9: &std::string::String;
    let mut _10: &std::vec::Vec<std::string::String>;
    let mut _11: &&str;
    let _12: &str;
    let _13: ();
    let mut _14: std::fmt::Arguments<'_>;
    let mut _15: &[&str];
    let _16: &[&str; 2];
    let _17: [&str; 2];
    let mut _18: &[core::fmt::rt::Argument<'_>];
    let _19: &[core::fmt::rt::Argument<'_>; 1];
    let _20: [core::fmt::rt::Argument<'_>; 1];
    let mut _21: core::fmt::rt::Argument<'_>;
    let _22: &std::backtrace::Backtrace;
    let _23: std::backtrace::Backtrace;
    let mut _24: bool;
    let mut _25: usize;
    let mut _26: &std::vec::Vec<std::string::String>;
    let _27: ();
    let mut _28: std::fmt::Arguments<'_>;
    let mut _29: &[&str];
    let _30: &[&str; 2];
    let _31: [&str; 2];
    let mut _32: &[core::fmt::rt::Argument<'_>];
    let _33: &[core::fmt::rt::Argument<'_>; 1];
    let _34: [core::fmt::rt::Argument<'_>; 1];
    let mut _35: core::fmt::rt::Argument<'_>;
    let _36: &std::backtrace::Backtrace;
    let _37: std::backtrace::Backtrace;
    let _38: ();
    let mut _39: &str;
    let _40: &str;
    let _41: &std::string::String;
    let _42: &std::string::String;
    let mut _43: &std::vec::Vec<std::string::String>;
    let _44: ();
    let mut _45: std::fmt::Arguments<'_>;
    let mut _46: &[&str];
    let _47: &[&str; 1];
    let _48: [&str; 1];
    scope 1 {
        debug args => _1;
    }

    bb0: {
        _2 = args() -> bb1;
    }

    bb1: {
        _1 = <Args as Iterator>::collect::<Vec<String>>(move _2) -> bb2;
    }

    bb2: {
        _6 = &_1;
        _5 = Vec::<String>::len(move _6) -> [return: bb6, unwind: bb30];
    }

    bb3: {
        _3 = const false;
        goto -> bb5;
    }

    bb4: {
        _10 = &_1;
        _9 = <Vec<String> as Index<usize>>::index(move _10, const 1_usize) -> [return: bb7, unwind: bb30];
    }

    bb5: {
        switchInt(move _3) -> [0: bb14, otherwise: bb9];
    }

    bb6: {
        _4 = Ge(move _5, const 2_usize);
        switchInt(move _4) -> [0: bb3, otherwise: bb4];
    }

    bb7: {
        _8 = _9;
        _12 = const "force";
        _11 = &_12;
        _7 = <String as PartialEq<&str>>::eq(move _8, move _11) -> [return: bb8, unwind: bb30];
    }

    bb8: {
        _3 = move _7;
        goto -> bb5;
    }

    bb9: {
        _17 = [const "stack backtrace:\n", const "\n"];
        _16 = &_17;
        _15 = _16 as &[&str] (Pointer(Unsize));
        _23 = Backtrace::force_capture() -> [return: bb10, unwind: bb30];
    }

    bb10: {
        _22 = &_23;
        _21 = core::fmt::rt::Argument::<'_>::new_display::<Backtrace>(_22) -> [return: bb11, unwind: bb29];
    }

    bb11: {
        _20 = [move _21];
        _19 = &_20;
        _18 = _19 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _14 = Arguments::<'_>::new_v1(move _15, move _18) -> [return: bb12, unwind: bb29];
    }

    bb12: {
        _13 = _print(move _14) -> [return: bb13, unwind: bb29];
    }

    bb13: {
        drop(_23) -> [return: bb26, unwind: bb30];
    }

    bb14: {
        _26 = &_1;
        _25 = Vec::<String>::len(move _26) -> [return: bb15, unwind: bb30];
    }

    bb15: {
        _24 = Ge(move _25, const 2_usize);
        switchInt(move _24) -> [0: bb21, otherwise: bb16];
    }

    bb16: {
        _31 = [const "stack backtrace:\n", const "\n"];
        _30 = &_31;
        _29 = _30 as &[&str] (Pointer(Unsize));
        _37 = Backtrace::capture() -> [return: bb17, unwind: bb30];
    }

    bb17: {
        _36 = &_37;
        _35 = core::fmt::rt::Argument::<'_>::new_display::<Backtrace>(_36) -> [return: bb18, unwind: bb28];
    }

    bb18: {
        _34 = [move _35];
        _33 = &_34;
        _32 = _33 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _28 = Arguments::<'_>::new_v1(move _29, move _32) -> [return: bb19, unwind: bb28];
    }

    bb19: {
        _27 = _print(move _28) -> [return: bb20, unwind: bb28];
    }

    bb20: {
        drop(_37) -> [return: bb26, unwind: bb30];
    }

    bb21: {
        _43 = &_1;
        _42 = <Vec<String> as Index<usize>>::index(move _43, const 0_usize) -> [return: bb22, unwind: bb30];
    }

    bb22: {
        _41 = _42;
        _40 = <String as Deref>::deref(_41) -> [return: bb23, unwind: bb30];
    }

    bb23: {
        _39 = _40;
        _38 = runtest(move _39) -> [return: bb24, unwind: bb30];
    }

    bb24: {
        _48 = [const "test ok\n"];
        _47 = &_48;
        _46 = _47 as &[&str] (Pointer(Unsize));
        _45 = Arguments::<'_>::new_const(move _46) -> [return: bb25, unwind: bb30];
    }

    bb25: {
        _44 = _print(move _45) -> [return: bb32, unwind: bb30];
    }

    bb26: {
        drop(_1) -> bb27;
    }

    bb27: {
        return;
    }

    bb28 (cleanup): {
        drop(_37) -> [return: bb30, unwind terminate];
    }

    bb29 (cleanup): {
        drop(_23) -> [return: bb30, unwind terminate];
    }

    bb30 (cleanup): {
        drop(_1) -> [return: bb31, unwind terminate];
    }

    bb31 (cleanup): {
        resume;
    }

    bb32: {
        goto -> bb26;
    }
}

fn runtest(_1: &str) -> () {
    debug me => _1;
    let mut _0: ();
    let _2: ();
    let _3: ();
    let _4: std::process::Output;
    let mut _5: std::result::Result<std::process::Output, std::io::Error>;
    let mut _6: &mut std::process::Command;
    let mut _7: &mut std::process::Command;
    let mut _8: &mut std::process::Command;
    let mut _9: &mut std::process::Command;
    let mut _10: &mut std::process::Command;
    let mut _11: std::process::Command;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: &std::process::ExitStatus;
    let mut _15: !;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: &str;
    let _19: &str;
    let mut _20: &std::borrow::Cow<'_, str>;
    let _21: std::borrow::Cow<'_, str>;
    let mut _22: &[u8];
    let _23: &[u8];
    let _24: &std::vec::Vec<u8>;
    let mut _25: !;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: &str;
    let _29: &str;
    let mut _30: &std::borrow::Cow<'_, str>;
    let _31: std::borrow::Cow<'_, str>;
    let mut _32: &[u8];
    let _33: &[u8];
    let _34: &std::vec::Vec<u8>;
    let mut _35: !;
    let mut _37: std::result::Result<std::process::Output, std::io::Error>;
    let mut _38: &mut std::process::Command;
    let mut _39: &mut std::process::Command;
    let mut _40: &mut std::process::Command;
    let mut _41: &mut std::process::Command;
    let mut _42: &mut std::process::Command;
    let mut _43: std::process::Command;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: &std::process::ExitStatus;
    let mut _47: !;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: &str;
    let _51: &str;
    let mut _52: &std::borrow::Cow<'_, str>;
    let _53: std::borrow::Cow<'_, str>;
    let mut _54: &[u8];
    let _55: &[u8];
    let _56: &std::vec::Vec<u8>;
    let mut _57: !;
    let mut _59: std::result::Result<std::process::Output, std::io::Error>;
    let mut _60: &mut std::process::Command;
    let mut _61: &mut std::process::Command;
    let mut _62: &mut std::process::Command;
    let mut _63: std::process::Command;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: &std::process::ExitStatus;
    let mut _67: !;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: &str;
    let _71: &str;
    let mut _72: &std::borrow::Cow<'_, str>;
    let _73: std::borrow::Cow<'_, str>;
    let mut _74: &[u8];
    let _75: &[u8];
    let _76: &std::vec::Vec<u8>;
    let mut _77: !;
    let mut _79: std::result::Result<std::process::Output, std::io::Error>;
    let mut _80: &mut std::process::Command;
    let mut _81: &mut std::process::Command;
    let mut _82: &mut std::process::Command;
    let mut _83: &mut std::process::Command;
    let mut _84: &mut std::process::Command;
    let mut _85: &mut std::process::Command;
    let mut _86: &mut std::process::Command;
    let mut _87: std::process::Command;
    let mut _88: bool;
    let mut _89: bool;
    let mut _90: &std::process::ExitStatus;
    let mut _91: !;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: &str;
    let _95: &str;
    let mut _96: &std::borrow::Cow<'_, str>;
    let _97: std::borrow::Cow<'_, str>;
    let mut _98: &[u8];
    let _99: &[u8];
    let _100: &std::vec::Vec<u8>;
    let mut _101: !;
    let mut _103: std::result::Result<std::process::Output, std::io::Error>;
    let mut _104: &mut std::process::Command;
    let mut _105: &mut std::process::Command;
    let mut _106: &mut std::process::Command;
    let mut _107: &mut std::process::Command;
    let mut _108: &mut std::process::Command;
    let mut _109: &mut std::process::Command;
    let mut _110: &mut std::process::Command;
    let mut _111: std::process::Command;
    let mut _112: bool;
    let mut _113: bool;
    let mut _114: &std::process::ExitStatus;
    let mut _115: !;
    let mut _116: bool;
    let mut _117: bool;
    let mut _118: &str;
    let _119: &str;
    let mut _120: &std::borrow::Cow<'_, str>;
    let _121: std::borrow::Cow<'_, str>;
    let mut _122: &[u8];
    let _123: &[u8];
    let _124: &std::vec::Vec<u8>;
    let mut _125: !;
    let mut _127: std::result::Result<std::process::Output, std::io::Error>;
    let mut _128: &mut std::process::Command;
    let mut _129: &mut std::process::Command;
    let mut _130: &mut std::process::Command;
    let mut _131: &mut std::process::Command;
    let mut _132: &mut std::process::Command;
    let mut _133: &mut std::process::Command;
    let mut _134: &mut std::process::Command;
    let mut _135: std::process::Command;
    let mut _136: bool;
    let mut _137: bool;
    let mut _138: &std::process::ExitStatus;
    let mut _139: !;
    let mut _140: bool;
    let mut _141: bool;
    let mut _142: &str;
    let _143: &str;
    let mut _144: &std::borrow::Cow<'_, str>;
    let _145: std::borrow::Cow<'_, str>;
    let mut _146: &[u8];
    let _147: &[u8];
    let _148: &std::vec::Vec<u8>;
    let mut _149: !;
    let mut _151: std::result::Result<std::process::Output, std::io::Error>;
    let mut _152: &mut std::process::Command;
    let mut _153: &mut std::process::Command;
    let mut _154: &mut std::process::Command;
    let mut _155: std::process::Command;
    let mut _156: bool;
    let mut _157: bool;
    let mut _158: &std::process::ExitStatus;
    let mut _159: !;
    let mut _160: bool;
    let mut _161: bool;
    let mut _162: &str;
    let _163: &str;
    let mut _164: &std::borrow::Cow<'_, str>;
    let _165: std::borrow::Cow<'_, str>;
    let mut _166: &[u8];
    let _167: &[u8];
    let _168: &std::vec::Vec<u8>;
    let mut _169: !;
    scope 1 {
        debug p => _4;
        let _36: std::process::Output;
        scope 2 {
            debug p => _36;
            let _58: std::process::Output;
            scope 3 {
                debug p => _58;
                let _78: std::process::Output;
                scope 4 {
                    debug p => _78;
                    let _102: std::process::Output;
                    scope 5 {
                        debug p => _102;
                        let _126: std::process::Output;
                        scope 6 {
                            debug p => _126;
                            let _150: std::process::Output;
                            scope 7 {
                                debug p => _150;
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = remove_var::<&str>(const "RUST_BACKTRACE") -> bb1;
    }

    bb1: {
        _3 = remove_var::<&str>(const "RUST_LIB_BACKTRACE") -> bb2;
    }

    bb2: {
        _11 = Command::new::<&str>(_1) -> bb3;
    }

    bb3: {
        _10 = &mut _11;
        _9 = Command::arg::<&str>(move _10, const "a") -> [return: bb4, unwind: bb151];
    }

    bb4: {
        _8 = _9;
        _7 = Command::env::<&str, &str>(move _8, const "RUST_BACKTRACE", const "1") -> [return: bb5, unwind: bb151];
    }

    bb5: {
        _6 = _7;
        _5 = Command::output(move _6) -> [return: bb6, unwind: bb151];
    }

    bb6: {
        _4 = Result::<Output, std::io::Error>::unwrap(move _5) -> [return: bb7, unwind: bb151];
    }

    bb7: {
        drop(_11) -> [return: bb8, unwind: bb150];
    }

    bb8: {
        _14 = &(_4.0: std::process::ExitStatus);
        _13 = ExitStatus::success(move _14) -> [return: bb9, unwind: bb150];
    }

    bb9: {
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _15 = core::panicking::panic(const "assertion failed: p.status.success()") -> bb150;
    }

    bb11: {
        _24 = &(_4.1: std::vec::Vec<u8>);
        _23 = <Vec<u8> as Deref>::deref(_24) -> [return: bb12, unwind: bb150];
    }

    bb12: {
        _22 = _23;
        _21 = String::from_utf8_lossy(move _22) -> [return: bb13, unwind: bb150];
    }

    bb13: {
        _20 = &_21;
        _19 = <Cow<'_, str> as Deref>::deref(move _20) -> [return: bb14, unwind: bb149];
    }

    bb14: {
        _18 = _19;
        _17 = core::str::<impl str>::contains::<'_, &str>(move _18, const "stack backtrace:\n") -> [return: bb15, unwind: bb149];
    }

    bb15: {
        _16 = Not(move _17);
        drop(_21) -> [return: bb16, unwind: bb150];
    }

    bb16: {
        switchInt(move _16) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _25 = core::panicking::panic(const "assertion failed: String::from_utf8_lossy(&p.stdout).contains(\\\"stack backtrace:\\\\n\\\")") -> bb150;
    }

    bb18: {
        _34 = &(_4.1: std::vec::Vec<u8>);
        _33 = <Vec<u8> as Deref>::deref(_34) -> [return: bb19, unwind: bb150];
    }

    bb19: {
        _32 = _33;
        _31 = String::from_utf8_lossy(move _32) -> [return: bb20, unwind: bb150];
    }

    bb20: {
        _30 = &_31;
        _29 = <Cow<'_, str> as Deref>::deref(move _30) -> [return: bb21, unwind: bb148];
    }

    bb21: {
        _28 = _29;
        _27 = core::str::<impl str>::contains::<'_, &str>(move _28, const "backtrace::main") -> [return: bb22, unwind: bb148];
    }

    bb22: {
        _26 = Not(move _27);
        drop(_31) -> [return: bb23, unwind: bb150];
    }

    bb23: {
        switchInt(move _26) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _35 = core::panicking::panic(const "assertion failed: String::from_utf8_lossy(&p.stdout).contains(\\\"backtrace::main\\\")") -> bb150;
    }

    bb25: {
        _43 = Command::new::<&str>(_1) -> [return: bb26, unwind: bb150];
    }

    bb26: {
        _42 = &mut _43;
        _41 = Command::arg::<&str>(move _42, const "a") -> [return: bb27, unwind: bb147];
    }

    bb27: {
        _40 = _41;
        _39 = Command::env::<&str, &str>(move _40, const "RUST_BACKTRACE", const "0") -> [return: bb28, unwind: bb147];
    }

    bb28: {
        _38 = _39;
        _37 = Command::output(move _38) -> [return: bb29, unwind: bb147];
    }

    bb29: {
        _36 = Result::<Output, std::io::Error>::unwrap(move _37) -> [return: bb30, unwind: bb147];
    }

    bb30: {
        drop(_43) -> [return: bb31, unwind: bb146];
    }

    bb31: {
        _46 = &(_36.0: std::process::ExitStatus);
        _45 = ExitStatus::success(move _46) -> [return: bb32, unwind: bb146];
    }

    bb32: {
        _44 = Not(move _45);
        switchInt(move _44) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        _47 = core::panicking::panic(const "assertion failed: p.status.success()") -> bb146;
    }

    bb34: {
        _56 = &(_36.1: std::vec::Vec<u8>);
        _55 = <Vec<u8> as Deref>::deref(_56) -> [return: bb35, unwind: bb146];
    }

    bb35: {
        _54 = _55;
        _53 = String::from_utf8_lossy(move _54) -> [return: bb36, unwind: bb146];
    }

    bb36: {
        _52 = &_53;
        _51 = <Cow<'_, str> as Deref>::deref(move _52) -> [return: bb37, unwind: bb145];
    }

    bb37: {
        _50 = _51;
        _49 = core::str::<impl str>::contains::<'_, &str>(move _50, const "disabled backtrace\n") -> [return: bb38, unwind: bb145];
    }

    bb38: {
        _48 = Not(move _49);
        drop(_53) -> [return: bb39, unwind: bb146];
    }

    bb39: {
        switchInt(move _48) -> [0: bb41, otherwise: bb40];
    }

    bb40: {
        _57 = core::panicking::panic(const "assertion failed: String::from_utf8_lossy(&p.stdout).contains(\\\"disabled backtrace\\\\n\\\")") -> bb146;
    }

    bb41: {
        _63 = Command::new::<&str>(_1) -> [return: bb42, unwind: bb146];
    }

    bb42: {
        _62 = &mut _63;
        _61 = Command::arg::<&str>(move _62, const "a") -> [return: bb43, unwind: bb144];
    }

    bb43: {
        _60 = _61;
        _59 = Command::output(move _60) -> [return: bb44, unwind: bb144];
    }

    bb44: {
        _58 = Result::<Output, std::io::Error>::unwrap(move _59) -> [return: bb45, unwind: bb144];
    }

    bb45: {
        drop(_63) -> [return: bb46, unwind: bb143];
    }

    bb46: {
        _66 = &(_58.0: std::process::ExitStatus);
        _65 = ExitStatus::success(move _66) -> [return: bb47, unwind: bb143];
    }

    bb47: {
        _64 = Not(move _65);
        switchInt(move _64) -> [0: bb49, otherwise: bb48];
    }

    bb48: {
        _67 = core::panicking::panic(const "assertion failed: p.status.success()") -> bb143;
    }

    bb49: {
        _76 = &(_58.1: std::vec::Vec<u8>);
        _75 = <Vec<u8> as Deref>::deref(_76) -> [return: bb50, unwind: bb143];
    }

    bb50: {
        _74 = _75;
        _73 = String::from_utf8_lossy(move _74) -> [return: bb51, unwind: bb143];
    }

    bb51: {
        _72 = &_73;
        _71 = <Cow<'_, str> as Deref>::deref(move _72) -> [return: bb52, unwind: bb142];
    }

    bb52: {
        _70 = _71;
        _69 = core::str::<impl str>::contains::<'_, &str>(move _70, const "disabled backtrace\n") -> [return: bb53, unwind: bb142];
    }

    bb53: {
        _68 = Not(move _69);
        drop(_73) -> [return: bb54, unwind: bb143];
    }

    bb54: {
        switchInt(move _68) -> [0: bb56, otherwise: bb55];
    }

    bb55: {
        _77 = core::panicking::panic(const "assertion failed: String::from_utf8_lossy(&p.stdout).contains(\\\"disabled backtrace\\\\n\\\")") -> bb143;
    }

    bb56: {
        _87 = Command::new::<&str>(_1) -> [return: bb57, unwind: bb143];
    }

    bb57: {
        _86 = &mut _87;
        _85 = Command::arg::<&str>(move _86, const "a") -> [return: bb58, unwind: bb141];
    }

    bb58: {
        _84 = _85;
        _83 = Command::env::<&str, &str>(move _84, const "RUST_LIB_BACKTRACE", const "1") -> [return: bb59, unwind: bb141];
    }

    bb59: {
        _82 = _83;
        _81 = Command::env::<&str, &str>(move _82, const "RUST_BACKTRACE", const "1") -> [return: bb60, unwind: bb141];
    }

    bb60: {
        _80 = _81;
        _79 = Command::output(move _80) -> [return: bb61, unwind: bb141];
    }

    bb61: {
        _78 = Result::<Output, std::io::Error>::unwrap(move _79) -> [return: bb62, unwind: bb141];
    }

    bb62: {
        drop(_87) -> [return: bb63, unwind: bb140];
    }

    bb63: {
        _90 = &(_78.0: std::process::ExitStatus);
        _89 = ExitStatus::success(move _90) -> [return: bb64, unwind: bb140];
    }

    bb64: {
        _88 = Not(move _89);
        switchInt(move _88) -> [0: bb66, otherwise: bb65];
    }

    bb65: {
        _91 = core::panicking::panic(const "assertion failed: p.status.success()") -> bb140;
    }

    bb66: {
        _100 = &(_78.1: std::vec::Vec<u8>);
        _99 = <Vec<u8> as Deref>::deref(_100) -> [return: bb67, unwind: bb140];
    }

    bb67: {
        _98 = _99;
        _97 = String::from_utf8_lossy(move _98) -> [return: bb68, unwind: bb140];
    }

    bb68: {
        _96 = &_97;
        _95 = <Cow<'_, str> as Deref>::deref(move _96) -> [return: bb69, unwind: bb139];
    }

    bb69: {
        _94 = _95;
        _93 = core::str::<impl str>::contains::<'_, &str>(move _94, const "stack backtrace:\n") -> [return: bb70, unwind: bb139];
    }

    bb70: {
        _92 = Not(move _93);
        drop(_97) -> [return: bb71, unwind: bb140];
    }

    bb71: {
        switchInt(move _92) -> [0: bb73, otherwise: bb72];
    }

    bb72: {
        _101 = core::panicking::panic(const "assertion failed: String::from_utf8_lossy(&p.stdout).contains(\\\"stack backtrace:\\\\n\\\")") -> bb140;
    }

    bb73: {
        _111 = Command::new::<&str>(_1) -> [return: bb74, unwind: bb140];
    }

    bb74: {
        _110 = &mut _111;
        _109 = Command::arg::<&str>(move _110, const "a") -> [return: bb75, unwind: bb138];
    }

    bb75: {
        _108 = _109;
        _107 = Command::env::<&str, &str>(move _108, const "RUST_LIB_BACKTRACE", const "0") -> [return: bb76, unwind: bb138];
    }

    bb76: {
        _106 = _107;
        _105 = Command::env::<&str, &str>(move _106, const "RUST_BACKTRACE", const "1") -> [return: bb77, unwind: bb138];
    }

    bb77: {
        _104 = _105;
        _103 = Command::output(move _104) -> [return: bb78, unwind: bb138];
    }

    bb78: {
        _102 = Result::<Output, std::io::Error>::unwrap(move _103) -> [return: bb79, unwind: bb138];
    }

    bb79: {
        drop(_111) -> [return: bb80, unwind: bb137];
    }

    bb80: {
        _114 = &(_102.0: std::process::ExitStatus);
        _113 = ExitStatus::success(move _114) -> [return: bb81, unwind: bb137];
    }

    bb81: {
        _112 = Not(move _113);
        switchInt(move _112) -> [0: bb83, otherwise: bb82];
    }

    bb82: {
        _115 = core::panicking::panic(const "assertion failed: p.status.success()") -> bb137;
    }

    bb83: {
        _124 = &(_102.1: std::vec::Vec<u8>);
        _123 = <Vec<u8> as Deref>::deref(_124) -> [return: bb84, unwind: bb137];
    }

    bb84: {
        _122 = _123;
        _121 = String::from_utf8_lossy(move _122) -> [return: bb85, unwind: bb137];
    }

    bb85: {
        _120 = &_121;
        _119 = <Cow<'_, str> as Deref>::deref(move _120) -> [return: bb86, unwind: bb136];
    }

    bb86: {
        _118 = _119;
        _117 = core::str::<impl str>::contains::<'_, &str>(move _118, const "disabled backtrace\n") -> [return: bb87, unwind: bb136];
    }

    bb87: {
        _116 = Not(move _117);
        drop(_121) -> [return: bb88, unwind: bb137];
    }

    bb88: {
        switchInt(move _116) -> [0: bb90, otherwise: bb89];
    }

    bb89: {
        _125 = core::panicking::panic(const "assertion failed: String::from_utf8_lossy(&p.stdout).contains(\\\"disabled backtrace\\\\n\\\")") -> bb137;
    }

    bb90: {
        _135 = Command::new::<&str>(_1) -> [return: bb91, unwind: bb137];
    }

    bb91: {
        _134 = &mut _135;
        _133 = Command::arg::<&str>(move _134, const "force") -> [return: bb92, unwind: bb135];
    }

    bb92: {
        _132 = _133;
        _131 = Command::env::<&str, &str>(move _132, const "RUST_LIB_BACKTRACE", const "0") -> [return: bb93, unwind: bb135];
    }

    bb93: {
        _130 = _131;
        _129 = Command::env::<&str, &str>(move _130, const "RUST_BACKTRACE", const "0") -> [return: bb94, unwind: bb135];
    }

    bb94: {
        _128 = _129;
        _127 = Command::output(move _128) -> [return: bb95, unwind: bb135];
    }

    bb95: {
        _126 = Result::<Output, std::io::Error>::unwrap(move _127) -> [return: bb96, unwind: bb135];
    }

    bb96: {
        drop(_135) -> [return: bb97, unwind: bb134];
    }

    bb97: {
        _138 = &(_126.0: std::process::ExitStatus);
        _137 = ExitStatus::success(move _138) -> [return: bb98, unwind: bb134];
    }

    bb98: {
        _136 = Not(move _137);
        switchInt(move _136) -> [0: bb100, otherwise: bb99];
    }

    bb99: {
        _139 = core::panicking::panic(const "assertion failed: p.status.success()") -> bb134;
    }

    bb100: {
        _148 = &(_126.1: std::vec::Vec<u8>);
        _147 = <Vec<u8> as Deref>::deref(_148) -> [return: bb101, unwind: bb134];
    }

    bb101: {
        _146 = _147;
        _145 = String::from_utf8_lossy(move _146) -> [return: bb102, unwind: bb134];
    }

    bb102: {
        _144 = &_145;
        _143 = <Cow<'_, str> as Deref>::deref(move _144) -> [return: bb103, unwind: bb133];
    }

    bb103: {
        _142 = _143;
        _141 = core::str::<impl str>::contains::<'_, &str>(move _142, const "stack backtrace:\n") -> [return: bb104, unwind: bb133];
    }

    bb104: {
        _140 = Not(move _141);
        drop(_145) -> [return: bb105, unwind: bb134];
    }

    bb105: {
        switchInt(move _140) -> [0: bb107, otherwise: bb106];
    }

    bb106: {
        _149 = core::panicking::panic(const "assertion failed: String::from_utf8_lossy(&p.stdout).contains(\\\"stack backtrace:\\\\n\\\")") -> bb134;
    }

    bb107: {
        _155 = Command::new::<&str>(_1) -> [return: bb108, unwind: bb134];
    }

    bb108: {
        _154 = &mut _155;
        _153 = Command::arg::<&str>(move _154, const "force") -> [return: bb109, unwind: bb132];
    }

    bb109: {
        _152 = _153;
        _151 = Command::output(move _152) -> [return: bb110, unwind: bb132];
    }

    bb110: {
        _150 = Result::<Output, std::io::Error>::unwrap(move _151) -> [return: bb111, unwind: bb132];
    }

    bb111: {
        drop(_155) -> [return: bb112, unwind: bb131];
    }

    bb112: {
        _158 = &(_150.0: std::process::ExitStatus);
        _157 = ExitStatus::success(move _158) -> [return: bb113, unwind: bb131];
    }

    bb113: {
        _156 = Not(move _157);
        switchInt(move _156) -> [0: bb115, otherwise: bb114];
    }

    bb114: {
        _159 = core::panicking::panic(const "assertion failed: p.status.success()") -> bb131;
    }

    bb115: {
        _168 = &(_150.1: std::vec::Vec<u8>);
        _167 = <Vec<u8> as Deref>::deref(_168) -> [return: bb116, unwind: bb131];
    }

    bb116: {
        _166 = _167;
        _165 = String::from_utf8_lossy(move _166) -> [return: bb117, unwind: bb131];
    }

    bb117: {
        _164 = &_165;
        _163 = <Cow<'_, str> as Deref>::deref(move _164) -> [return: bb118, unwind: bb130];
    }

    bb118: {
        _162 = _163;
        _161 = core::str::<impl str>::contains::<'_, &str>(move _162, const "stack backtrace:\n") -> [return: bb119, unwind: bb130];
    }

    bb119: {
        _160 = Not(move _161);
        drop(_165) -> [return: bb120, unwind: bb131];
    }

    bb120: {
        switchInt(move _160) -> [0: bb122, otherwise: bb121];
    }

    bb121: {
        _169 = core::panicking::panic(const "assertion failed: String::from_utf8_lossy(&p.stdout).contains(\\\"stack backtrace:\\\\n\\\")") -> bb131;
    }

    bb122: {
        drop(_150) -> [return: bb123, unwind: bb134];
    }

    bb123: {
        drop(_126) -> [return: bb124, unwind: bb137];
    }

    bb124: {
        drop(_102) -> [return: bb125, unwind: bb140];
    }

    bb125: {
        drop(_78) -> [return: bb126, unwind: bb143];
    }

    bb126: {
        drop(_58) -> [return: bb127, unwind: bb146];
    }

    bb127: {
        drop(_36) -> [return: bb128, unwind: bb150];
    }

    bb128: {
        drop(_4) -> bb129;
    }

    bb129: {
        return;
    }

    bb130 (cleanup): {
        drop(_165) -> [return: bb131, unwind terminate];
    }

    bb131 (cleanup): {
        drop(_150) -> [return: bb134, unwind terminate];
    }

    bb132 (cleanup): {
        drop(_155) -> [return: bb134, unwind terminate];
    }

    bb133 (cleanup): {
        drop(_145) -> [return: bb134, unwind terminate];
    }

    bb134 (cleanup): {
        drop(_126) -> [return: bb137, unwind terminate];
    }

    bb135 (cleanup): {
        drop(_135) -> [return: bb137, unwind terminate];
    }

    bb136 (cleanup): {
        drop(_121) -> [return: bb137, unwind terminate];
    }

    bb137 (cleanup): {
        drop(_102) -> [return: bb140, unwind terminate];
    }

    bb138 (cleanup): {
        drop(_111) -> [return: bb140, unwind terminate];
    }

    bb139 (cleanup): {
        drop(_97) -> [return: bb140, unwind terminate];
    }

    bb140 (cleanup): {
        drop(_78) -> [return: bb143, unwind terminate];
    }

    bb141 (cleanup): {
        drop(_87) -> [return: bb143, unwind terminate];
    }

    bb142 (cleanup): {
        drop(_73) -> [return: bb143, unwind terminate];
    }

    bb143 (cleanup): {
        drop(_58) -> [return: bb146, unwind terminate];
    }

    bb144 (cleanup): {
        drop(_63) -> [return: bb146, unwind terminate];
    }

    bb145 (cleanup): {
        drop(_53) -> [return: bb146, unwind terminate];
    }

    bb146 (cleanup): {
        drop(_36) -> [return: bb150, unwind terminate];
    }

    bb147 (cleanup): {
        drop(_43) -> [return: bb150, unwind terminate];
    }

    bb148 (cleanup): {
        drop(_31) -> [return: bb150, unwind terminate];
    }

    bb149 (cleanup): {
        drop(_21) -> [return: bb150, unwind terminate];
    }

    bb150 (cleanup): {
        drop(_4) -> [return: bb152, unwind terminate];
    }

    bb151 (cleanup): {
        drop(_11) -> [return: bb152, unwind terminate];
    }

    bb152 (cleanup): {
        resume;
    }
}
