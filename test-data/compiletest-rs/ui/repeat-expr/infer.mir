// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/repeat-expr/infer.rs:3:10: 3:15>::clone(_1: &MaybeCopy<T>) -> MaybeCopy<T> {
    debug self => _1;
    let mut _0: MaybeCopy<T>;
    let mut _2: T;
    let _3: &T;

    bb0: {
        _3 = &((*_1).0: T);
        _2 = <T as Clone>::clone(_3) -> bb1;
    }

    bb1: {
        _0 = MaybeCopy::<T>(move _2);
        return;
    }
}

fn <impl at ui/repeat-expr/infer.rs:3:17: 3:24>::default() -> MaybeCopy<T> {
    let mut _0: MaybeCopy<T>;
    let mut _1: T;

    bb0: {
        _1 = <T as Default>::default() -> bb1;
    }

    bb1: {
        _0 = MaybeCopy::<T>(move _1);
        return;
    }
}

fn is_copy(_1: T) -> () {
    debug x => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 2];
    let _6: [&str; 2];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &&str;
    let _12: &str;

    bb0: {
        _6 = [const "", const "\n"];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _12 = std::any::type_name::<T>() -> bb1;
    }

    bb1: {
        _11 = &_12;
        _10 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_11) -> bb2;
    }

    bb2: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb3;
    }

    bb3: {
        _2 = _print(move _3) -> bb4;
    }

    bb4: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: MaybeCopy<u8>;
    let mut _3: MaybeCopy<u8>;

    bb0: {
        _2 = <MaybeCopy<u8> as Default>::default() -> bb1;
    }

    bb1: {
        _1 = is_copy::<MaybeCopy<u8>>(move _2) -> bb2;
    }

    bb2: {
        _3 = <MaybeCopy<u8> as Default>::default() -> bb3;
    }

    bb3: {
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 13_usize;
        return;
    }
}

fn MaybeCopy(_1: T) -> MaybeCopy<T> {
    let mut _0: MaybeCopy<T>;

    bb0: {
        _0 = MaybeCopy::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn MaybeCopy(_1: T) -> MaybeCopy<T> {
    let mut _0: MaybeCopy<T>;

    bb0: {
        _0 = MaybeCopy::<T>(move _1);
        return;
    }
}
