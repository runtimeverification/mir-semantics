// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static FOO: [isize; 4] = {
    let mut _0: [isize; 4];

    bb0: {
        _0 = [const 32_isize; 4];
        return;
    }
}

FOO::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}

FOO::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}

static BAR: [isize; 4] = {
    let mut _0: [isize; 4];

    bb0: {
        _0 = [const 32_isize, const 32_isize, const 32_isize, const 32_isize];
        return;
    }
}

BAR::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&[isize; 4], &[isize; 4]);
    let _2: &[isize; 4];
    let _3: &[isize; 4];
    let _4: &[isize; 4];
    let _5: &[isize; 4];
    let mut _6: bool;
    let mut _7: bool;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _4;
        debug right_val => _5;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }

    bb0: {
        _2 = const {alloc1: &[isize; 4]};
        _3 = const {alloc2: &[isize; 4]};
        _1 = (_2, _3);
        _4 = (_1.0: &[isize; 4]);
        _5 = (_1.1: &[isize; 4]);
        _7 = <[isize; 4] as PartialEq>::eq(_4, _5) -> bb1;
    }

    bb1: {
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<[isize; 4], [isize; 4]>(move _8, _4, _5, move _10);
    }

    bb3: {
        return;
    }
}

alloc2 (static: BAR, size: 32, align: 8) {
    0x00 │ 20 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 │  ....... .......
    0x10 │ 20 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 │  ....... .......
}

alloc1 (static: FOO, size: 32, align: 8) {
    0x00 │ 20 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 │  ....... .......
    0x10 │ 20 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 │  ....... .......
}
