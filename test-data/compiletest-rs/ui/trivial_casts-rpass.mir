// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Foo::foo(_1: &Self) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: &u32;
    let _2: u32;
    let mut _3: &mut u32;
    let mut _4: u32;
    let _5: &[u32; 3];
    let _6: [u32; 3];
    let mut _7: &mut [u32; 3];
    let mut _8: [u32; 3];
    let mut _10: [u32; 3];
    let mut _11: std::boxed::Box<[u32]>;
    let mut _12: std::boxed::Box<[u32; 3]>;
    let _13: &Bar;
    let _14: Bar;
    let mut _15: &mut Bar;
    let mut _16: Bar;
    let mut _18: std::boxed::Box<dyn Foo>;
    let mut _19: std::boxed::Box<Bar>;
    scope 1 {
        scope 2 {
            scope 3 {
                debug x => _1;
                scope 4 {
                    scope 5 {
                        debug x => _3;
                        scope 6 {
                            scope 7 {
                                debug x => _5;
                                scope 8 {
                                    scope 9 {
                                        scope 10 {
                                            debug x => _7;
                                            scope 11 {
                                                scope 12 {
                                                    let _9: std::boxed::Box<[u32; 3]>;
                                                    scope 13 {
                                                        debug x => _9;
                                                        scope 14 {
                                                            scope 15 {
                                                                debug x => _13;
                                                                scope 16 {
                                                                    scope 17 {
                                                                        scope 18 {
                                                                            debug x => _15;
                                                                            scope 19 {
                                                                                scope 20 {
                                                                                    let _17: std::boxed::Box<Bar>;
                                                                                    scope 21 {
                                                                                        debug x => _17;
                                                                                        scope 22 {
                                                                                            scope 23 {
                                                                                                scope 24 {
                                                                                                    debug x => const ZeroSized: [closure@ui/trivial_casts-rpass.rs:53:13: 53:22];
                                                                                                    scope 25 {
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = const 42_u32;
        _1 = &_2;
        _4 = const 42_u32;
        _3 = &mut _4;
        _6 = [const 42_u32, const 43_u32, const 44_u32];
        _5 = &_6;
        _8 = [const 42_u32, const 43_u32, const 44_u32];
        _7 = &mut _8;
        _10 = [const 42_u32, const 43_u32, const 44_u32];
        _9 = Box::<[u32; 3]>::new(move _10) -> bb1;
    }

    bb1: {
        _12 = move _9;
        _11 = move _12 as std::boxed::Box<[u32]> (Pointer(Unsize));
        drop(_11) -> bb2;
    }

    bb2: {
        _13 = &_14;
        _15 = &mut _16;
        _17 = Box::<Bar>::new(const Bar) -> bb3;
    }

    bb3: {
        _19 = move _17;
        _18 = move _19 as std::boxed::Box<dyn Foo> (Pointer(Unsize));
        drop(_18) -> bb4;
    }

    bb4: {
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

main::{constant#2}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

fn baz(_1: i32) -> () {
    debug _x => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/trivial_casts-rpass.rs:53:13: 53:22], _2: i32) -> () {
    debug _x => _2;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn test_subtyping(_1: &Bar, _2: &Bar) -> () {
    debug a => _1;
    debug b => _2;
    let mut _0: ();
    scope 1 {
        scope 2 {
            scope 3 {
            }
        }
    }

    bb0: {
        return;
    }
}
