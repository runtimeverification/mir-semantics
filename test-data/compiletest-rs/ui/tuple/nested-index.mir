// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _2: (i32, (i32, i32));
    let mut _3: (i32, i32);
    let mut _4: (&i32, &i32);
    let mut _5: &i32;
    let mut _6: &i32;
    let _7: i32;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: i32;
    let mut _13: i32;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: (i32, (i32, (i32, i32)));
    let mut _19: (i32, (i32, i32));
    let mut _20: (i32, i32);
    let mut _21: (&i32, &i32);
    let mut _22: &i32;
    let mut _23: &i32;
    let _24: i32;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: i32;
    let mut _30: i32;
    let _32: !;
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug n => _1;
        let _8: &i32;
        let _9: &i32;
        let _17: i32;
        scope 2 {
            debug left_val => _8;
            debug right_val => _9;
            let _14: core::panicking::AssertKind;
            scope 3 {
                debug kind => _14;
            }
        }
        scope 4 {
            debug n => _17;
            let _25: &i32;
            let _26: &i32;
            scope 5 {
                debug left_val => _25;
                debug right_val => _26;
                let _31: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _31;
                }
            }
            scope 7 {
            }
        }
    }

    bb0: {
        _3 = (const 2_i32, const 3_i32);
        _2 = (const 1_i32, move _3);
        _1 = ((_2.1: (i32, i32)).1: i32);
        _5 = &_1;
        _7 = const 3_i32;
        _6 = &_7;
        _4 = (move _5, move _6);
        _8 = (_4.0: &i32);
        _9 = (_4.1: &i32);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<i32, i32>(move _14, _8, _9, move _16);
    }

    bb2: {
        _20 = (const 3_i32, const 4_i32);
        _19 = (const 2_i32, move _20);
        _18 = (const 1_i32, move _19);
        _17 = (((_18.1: (i32, (i32, i32))).1: (i32, i32)).1: i32);
        _22 = &_17;
        _24 = const 4_i32;
        _23 = &_24;
        _21 = (move _22, move _23);
        _25 = (_21.0: &i32);
        _26 = (_21.1: &i32);
        _29 = (*_25);
        _30 = (*_26);
        _28 = Eq(move _29, move _30);
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _31 = core::panicking::AssertKind::Eq;
        _33 = Option::<Arguments<'_>>::None;
        _32 = core::panicking::assert_failed::<i32, i32>(move _31, _25, _26, move _33);
    }

    bb4: {
        return;
    }
}
