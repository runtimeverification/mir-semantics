// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (char,);
    let _2: char;
    let mut _3: (&char, &char);
    let mut _4: &char;
    let mut _5: &char;
    let _6: char;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: char;
    let mut _12: char;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let _16: (char,);
    let mut _18: (&char, &char);
    let mut _19: &char;
    let mut _20: &char;
    let _21: char;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: char;
    let mut _27: char;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _2;
        let _7: &char;
        let _8: &char;
        scope 2 {
            debug left_val => _7;
            debug right_val => _8;
            let _13: core::panicking::AssertKind;
            scope 3 {
                debug kind => _13;
            }
        }
    }
    scope 4 {
        debug x => _16;
        let _17: char;
        scope 5 {
            debug y => _17;
            let _22: &char;
            let _23: &char;
            scope 6 {
                debug left_val => _22;
                debug right_val => _23;
                let _28: core::panicking::AssertKind;
                scope 7 {
                    debug kind => _28;
                }
            }
        }
    }

    bb0: {
        _1 = (const 'c',);
        _2 = (_1.0: char);
        _4 = &_2;
        _6 = const 'c';
        _5 = &_6;
        _3 = (move _4, move _5);
        _7 = (_3.0: &char);
        _8 = (_3.1: &char);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<char, char>(move _13, _7, _8, move _15);
    }

    bb2: {
        _16 = (const 'd',);
        _17 = (_16.0: char);
        _19 = &_17;
        _21 = const 'd';
        _20 = &_21;
        _18 = (move _19, move _20);
        _22 = (_18.0: &char);
        _23 = (_18.1: &char);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<char, char>(move _28, _22, _23, move _30);
    }

    bb4: {
        return;
    }
}
