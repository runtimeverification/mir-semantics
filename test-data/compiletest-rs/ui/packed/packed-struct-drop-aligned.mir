// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn check_align(_1: *const Aligned<'_>) -> () {
    debug ptr => _1;
    let mut _0: ();
    let mut _2: (&usize, &usize);
    let mut _3: &usize;
    let _4: usize;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: bool;
    let mut _8: &usize;
    let _9: usize;
    let _10: &usize;
    let _11: &usize;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: usize;
    let mut _15: usize;
    let _17: !;
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _10;
        debug right_val => _11;
        let _16: core::panicking::AssertKind;
        scope 2 {
            debug kind => _16;
        }
    }

    bb0: {
        _5 = _1 as usize (PointerExposeAddress);
        _6 = align_of::<Aligned<'_>>() -> bb1;
    }

    bb1: {
        _7 = Eq(_6, const 0_usize);
        assert(!move _7, "attempt to calculate the remainder of `{}` with a divisor of zero", _5) -> bb2;
    }

    bb2: {
        _4 = Rem(move _5, move _6);
        _3 = &_4;
        _9 = const 0_usize;
        _8 = &_9;
        _2 = (move _3, move _8);
        _10 = (_2.0: &usize);
        _11 = (_2.1: &usize);
        _14 = (*_10);
        _15 = (*_11);
        _13 = Eq(move _14, move _15);
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _16 = core::panicking::AssertKind::Eq;
        _18 = Option::<Arguments<'_>>::None;
        _17 = core::panicking::assert_failed::<usize, usize>(move _16, _10, _11, move _18);
    }

    bb4: {
        return;
    }
}

fn <impl at ui/packed/packed-struct-drop-aligned.rs:19:1: 19:30>::drop(_1: &mut Aligned<'_>) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: *const Aligned<'_>;
    let _4: ();
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: &std::cell::Cell<usize>;
    let mut _8: &std::cell::Cell<usize>;

    bb0: {
        _3 = &raw const (*_1);
        _2 = check_align(move _3) -> bb1;
    }

    bb1: {
        _7 = deref_copy ((*_1).0: &std::cell::Cell<usize>);
        _8 = deref_copy ((*_1).0: &std::cell::Cell<usize>);
        _6 = Cell::<usize>::get(_8) -> bb2;
    }

    bb2: {
        _5 = Add(move _6, const 1_usize);
        _4 = Cell::<usize>::set(_7, move _5) -> bb3;
    }

    bb3: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: &std::cell::Cell<usize>;
    let _2: std::cell::Cell<usize>;
    let mut _4: NotCopy;
    let mut _5: Aligned<'_>;
    let mut _6: Aligned<'_>;
    let mut _7: (&usize, &usize);
    let mut _8: &usize;
    let _9: usize;
    let mut _10: &usize;
    let _11: usize;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: usize;
    let mut _17: usize;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: (&usize, &usize);
    let mut _22: &usize;
    let _23: usize;
    let mut _24: &usize;
    let _25: usize;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: usize;
    let mut _31: usize;
    let _33: !;
    let mut _34: std::option::Option<std::fmt::Arguments<'_>>;
    let _36: std::cell::Cell<usize>;
    let mut _38: &&std::cell::Cell<usize>;
    let _39: std::ops::GeneratorState<(), ()>;
    let mut _40: std::pin::Pin<&mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]>;
    let mut _41: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19];
    let mut _42: (&usize, &usize);
    let mut _43: &usize;
    let _44: usize;
    let mut _45: &std::cell::Cell<usize>;
    let mut _46: &usize;
    let _47: usize;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: usize;
    let mut _53: usize;
    let _55: !;
    let mut _56: std::option::Option<std::fmt::Arguments<'_>>;
    let _57: ();
    let mut _58: [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19];
    let mut _59: (&usize, &usize);
    let mut _60: &usize;
    let _61: usize;
    let mut _62: &std::cell::Cell<usize>;
    let mut _63: &usize;
    let _64: usize;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: usize;
    let mut _70: usize;
    let _72: !;
    let mut _73: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _74: bool;
    let mut _75: Aligned<'_>;
    scope 1 {
        debug drop_count => _1;
        let mut _3: Packed<'_>;
        let _26: &usize;
        let _27: &usize;
        let _35: &std::cell::Cell<usize>;
        scope 2 {
            debug p => _3;
            let _12: &usize;
            let _13: &usize;
            scope 3 {
                debug left_val => _12;
                debug right_val => _13;
                let _18: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _18;
                }
            }
        }
        scope 5 {
            debug left_val => _26;
            debug right_val => _27;
            let _32: core::panicking::AssertKind;
            scope 6 {
                debug kind => _32;
            }
        }
        scope 7 {
            debug drop_count => _35;
            let mut _37: [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19];
            scope 8 {
                debug g => _37;
                let _48: &usize;
                let _49: &usize;
                let _65: &usize;
                let _66: &usize;
                scope 9 {
                    debug left_val => _48;
                    debug right_val => _49;
                    let _54: core::panicking::AssertKind;
                    scope 10 {
                        debug kind => _54;
                    }
                }
                scope 11 {
                    debug left_val => _65;
                    debug right_val => _66;
                    let _71: core::panicking::AssertKind;
                    scope 12 {
                        debug kind => _71;
                    }
                }
            }
        }
    }

    bb0: {
        _74 = const false;
        _2 = Cell::<usize>::new(const 0_usize) -> bb1;
    }

    bb1: {
        _1 = &_2;
        _4 = NotCopy(const 0_u8);
        _5 = Aligned::<'_> { drop_count: _1 };
        _3 = Packed::<'_>(move _4, move _5);
        _6 = Aligned::<'_> { drop_count: _1 };
        _75 = move (_3.1: Aligned<'_>);
        drop(_75) -> [return: bb24, unwind: bb2];
    }

    bb2 (cleanup): {
        (_3.1: Aligned<'_>) = move _6;
        goto -> bb20;
    }

    bb3: {
        _8 = &_9;
        _11 = const 1_usize;
        _10 = &_11;
        _7 = (move _8, move _10);
        _12 = (_7.0: &usize);
        _13 = (_7.1: &usize);
        _16 = (*_12);
        _17 = (*_13);
        _15 = Eq(move _16, move _17);
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<usize, usize>(move _18, _12, _13, move _20) -> bb20;
    }

    bb5: {
        drop(_3) -> bb6;
    }

    bb6: {
        _23 = Cell::<usize>::get(_1) -> bb7;
    }

    bb7: {
        _22 = &_23;
        _25 = const 2_usize;
        _24 = &_25;
        _21 = (move _22, move _24);
        _26 = (_21.0: &usize);
        _27 = (_21.1: &usize);
        _30 = (*_26);
        _31 = (*_27);
        _29 = Eq(move _30, move _31);
        _28 = Not(move _29);
        switchInt(move _28) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _32 = core::panicking::AssertKind::Eq;
        _34 = Option::<Arguments<'_>>::None;
        _33 = core::panicking::assert_failed::<usize, usize>(move _32, _26, _27, move _34);
    }

    bb9: {
        _36 = Cell::<usize>::new(const 0_usize) -> bb10;
    }

    bb10: {
        _35 = &_36;
        _38 = &_35;
        _74 = const true;
        _37 = [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19 (#0)] { drop_count: move _38 };
        _41 = &mut _37;
        _40 = Pin::<&mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]>::new(move _41) -> [return: bb11, unwind: bb23];
    }

    bb11: {
        _39 = <[generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19] as Generator>::resume(move _40, const ()) -> [return: bb12, unwind: bb23];
    }

    bb12: {
        _45 = _35;
        _44 = Cell::<usize>::get(move _45) -> [return: bb13, unwind: bb23];
    }

    bb13: {
        _43 = &_44;
        _47 = const 1_usize;
        _46 = &_47;
        _42 = (move _43, move _46);
        _48 = (_42.0: &usize);
        _49 = (_42.1: &usize);
        _52 = (*_48);
        _53 = (*_49);
        _51 = Eq(move _52, move _53);
        _50 = Not(move _51);
        switchInt(move _50) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _54 = core::panicking::AssertKind::Eq;
        _56 = Option::<Arguments<'_>>::None;
        _55 = core::panicking::assert_failed::<usize, usize>(move _54, _48, _49, move _56) -> bb23;
    }

    bb15: {
        _74 = const false;
        _58 = move _37;
        _57 = std::mem::drop::<[generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]>(move _58) -> [return: bb16, unwind: bb23];
    }

    bb16: {
        _62 = _35;
        _61 = Cell::<usize>::get(move _62) -> [return: bb17, unwind: bb23];
    }

    bb17: {
        _60 = &_61;
        _64 = const 2_usize;
        _63 = &_64;
        _59 = (move _60, move _63);
        _65 = (_59.0: &usize);
        _66 = (_59.1: &usize);
        _69 = (*_65);
        _70 = (*_66);
        _68 = Eq(move _69, move _70);
        _67 = Not(move _68);
        switchInt(move _67) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _71 = core::panicking::AssertKind::Eq;
        _73 = Option::<Arguments<'_>>::None;
        _72 = core::panicking::assert_failed::<usize, usize>(move _71, _65, _66, move _73) -> bb23;
    }

    bb19: {
        _74 = const false;
        return;
    }

    bb20 (cleanup): {
        drop(_3) -> [return: bb21, unwind terminate];
    }

    bb21 (cleanup): {
        resume;
    }

    bb22 (cleanup): {
        drop(_37) -> [return: bb21, unwind terminate];
    }

    bb23 (cleanup): {
        switchInt(_74) -> [0: bb21, otherwise: bb22];
    }

    bb24: {
        (_3.1: Aligned<'_>) = move _6;
        _9 = Cell::<usize>::get(_1) -> [return: bb3, unwind: bb20];
    }
}

fn main::{closure#0}(_1: Pin<&mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]>, _2: ()) -> GeneratorState<(), ()> {
    debug drop_count => (*((*(_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19])).0: &&std::cell::Cell<usize>));
    let mut _0: std::ops::GeneratorState<(), ()>;
    let mut _3: NotCopy;
    let mut _4: Aligned<'_>;
    let mut _5: Aligned<'_>;
    let mut _6: (&usize, &usize);
    let mut _7: &usize;
    let _8: usize;
    let mut _9: &usize;
    let _10: usize;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: usize;
    let mut _16: usize;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    let _20: ();
    let mut _21: NotCopy;
    let mut _22: ();
    let mut _23: &&std::cell::Cell<usize>;
    let mut _24: &std::cell::Cell<usize>;
    let mut _25: &&std::cell::Cell<usize>;
    let mut _26: &std::cell::Cell<usize>;
    let mut _27: &&std::cell::Cell<usize>;
    let mut _28: &std::cell::Cell<usize>;
    let mut _29: Aligned<'_>;
    let mut _30: Aligned<'_>;
    let mut _31: Aligned<'_>;
    let mut _32: ();
    let mut _33: u32;
    let mut _34: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19];
    let mut _35: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19];
    let mut _36: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19];
    let mut _37: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19];
    let mut _38: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19];
    let mut _39: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19];
    let mut _40: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19];
    let mut _41: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19];
    let mut _42: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19];
    let mut _43: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19];
    let mut _44: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19];
    let mut _45: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19];
    let mut _46: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19];
    let mut _47: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19];
    scope 1 {
        debug p => (((*(_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19])) as variant#3).0: Packed<'_>);
        scope 2 {
            let _11: &usize;
            let _12: &usize;
            scope 3 {
                debug left_val => _11;
                debug right_val => _12;
                let _17: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _17;
                }
            }
        }
    }

    bb0: {
        _34 = deref_copy (_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]);
        _33 = discriminant((*_34));
        switchInt(move _33) -> [0: bb1, 1: bb13, 2: bb12, 3: bb11, otherwise: bb14];
    }

    bb1: {
        _3 = NotCopy(const 0_u8);
        _35 = deref_copy (_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]);
        _23 = deref_copy ((*_35).0: &&std::cell::Cell<usize>);
        _24 = deref_copy (*_23);
        _4 = Aligned::<'_> { drop_count: _24 };
        _36 = deref_copy (_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]);
        (((*_36) as variant#3).0: Packed<'_>) = Packed::<'_>(move _3, move _4);
        _37 = deref_copy (_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]);
        _25 = deref_copy ((*_37).0: &&std::cell::Cell<usize>);
        _26 = deref_copy (*_25);
        _5 = Aligned::<'_> { drop_count: _26 };
        _38 = deref_copy (_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]);
        _29 = move ((((*_38) as variant#3).0: Packed<'_>).1: Aligned<'_>);
        drop(_29) -> [return: bb9, unwind: bb2];
    }

    bb2 (cleanup): {
        _40 = deref_copy (_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]);
        ((((*_40) as variant#3).0: Packed<'_>).1: Aligned<'_>) = move _5;
        goto -> bb8;
    }

    bb3: {
        _7 = &_8;
        _10 = const 1_usize;
        _9 = &_10;
        _6 = (move _7, move _9);
        _11 = (_6.0: &usize);
        _12 = (_6.1: &usize);
        _15 = (*_11);
        _16 = (*_12);
        _14 = Eq(move _15, move _16);
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<usize, usize>(move _17, _11, _12, move _19) -> bb8;
    }

    bb5: {
        _42 = deref_copy (_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]);
        _21 = move ((((*_42) as variant#3).0: Packed<'_>).0: NotCopy);
        _20 = std::mem::drop::<NotCopy>(move _21) -> [return: bb6, unwind: bb8];
    }

    bb6: {
        _22 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _22);
        _43 = deref_copy (_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]);
        discriminant((*_43)) = 3;
        return;
    }

    bb7 (cleanup): {
        _47 = deref_copy (_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]);
        discriminant((*_47)) = 2;
        resume;
    }

    bb8 (cleanup): {
        _46 = deref_copy (_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]);
        _31 = move ((((*_46) as variant#3).0: Packed<'_>).1: Aligned<'_>);
        drop(_31) -> [return: bb7, unwind terminate];
    }

    bb9: {
        _39 = deref_copy (_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]);
        ((((*_39) as variant#3).0: Packed<'_>).1: Aligned<'_>) = move _5;
        _41 = deref_copy (_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]);
        _27 = deref_copy ((*_41).0: &&std::cell::Cell<usize>);
        _28 = deref_copy (*_27);
        _8 = Cell::<usize>::get(_28) -> [return: bb3, unwind: bb8];
    }

    bb10: {
        _0 = GeneratorState::<(), ()>::Complete(move _32);
        _44 = deref_copy (_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]);
        discriminant((*_44)) = 1;
        return;
    }

    bb11: {
        _32 = const ();
        _45 = deref_copy (_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]);
        _30 = move ((((*_45) as variant#3).0: Packed<'_>).1: Aligned<'_>);
        drop(_30) -> [return: bb10, unwind: bb7];
    }

    bb12: {
        assert(const false, "generator resumed after panicking") -> bb12;
    }

    bb13: {
        assert(const false, "generator resumed after completion") -> bb13;
    }

    bb14: {
        unreachable;
    }
}

fn NotCopy(_1: u8) -> NotCopy {
    let mut _0: NotCopy;

    bb0: {
        _0 = NotCopy(move _1);
        return;
    }
}

// MIR FOR CTFE
fn NotCopy(_1: u8) -> NotCopy {
    let mut _0: NotCopy;

    bb0: {
        _0 = NotCopy(move _1);
        return;
    }
}

fn Packed(_1: NotCopy, _2: Aligned<'_>) -> Packed<'_> {
    let mut _0: Packed<'_>;

    bb0: {
        _0 = Packed::<'_>(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn Packed(_1: NotCopy, _2: Aligned<'_>) -> Packed<'_> {
    let mut _0: Packed<'_>;

    bb0: {
        _0 = Packed::<'_>(move _1, move _2);
        return;
    }
}
