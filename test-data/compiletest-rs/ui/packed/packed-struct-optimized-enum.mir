// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/packed/packed-struct-optimized-enum.rs:6:1: 6:34>::clone(_1: &Packed<T>) -> Packed<T> {
    debug self => _1;
    let mut _0: Packed<T>;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn sanity_check_size(_1: T) -> () {
    debug one => _1;
    let mut _0: ();
    let _2: [T; 2];
    let mut _4: usize;
    let mut _5: *const T;
    let _6: &T;
    let _7: usize;
    let mut _8: usize;
    let mut _9: bool;
    let mut _10: usize;
    let mut _11: *const T;
    let _12: &T;
    let _13: usize;
    let mut _14: usize;
    let mut _15: bool;
    let mut _18: (usize, usize);
    let mut _19: usize;
    let mut _20: usize;
    let mut _21: (&usize, &usize);
    let mut _22: &usize;
    let mut _23: &usize;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: usize;
    let mut _29: usize;
    let _31: !;
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _33: (&usize, &usize);
    let mut _34: &usize;
    let _35: usize;
    let mut _36: usize;
    let mut _37: bool;
    let mut _38: &usize;
    let _39: usize;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: usize;
    let mut _45: usize;
    let _47: !;
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug two => _2;
        let _3: usize;
        scope 2 {
            debug stride => _3;
            let _16: usize;
            let _17: usize;
            scope 3 {
                debug size => _16;
                debug align => _17;
                let _24: &usize;
                let _25: &usize;
                let _40: &usize;
                let _41: &usize;
                scope 4 {
                    debug left_val => _24;
                    debug right_val => _25;
                    let _30: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _30;
                    }
                }
                scope 6 {
                    debug left_val => _40;
                    debug right_val => _41;
                    let _46: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _46;
                    }
                }
            }
        }
    }

    bb0: {
        _2 = [_1, _1];
        _7 = const 1_usize;
        _8 = const 2_usize;
        _9 = Lt(_7, _8);
        assert(move _9, "index out of bounds: the length is {} but the index is {}", move _8, _7) -> bb1;
    }

    bb1: {
        _6 = &_2[_7];
        _5 = &raw const (*_6);
        _4 = _5 as usize (PointerExposeAddress);
        _13 = const 0_usize;
        _14 = const 2_usize;
        _15 = Lt(_13, _14);
        assert(move _15, "index out of bounds: the length is {} but the index is {}", move _14, _13) -> bb2;
    }

    bb2: {
        _12 = &_2[_13];
        _11 = &raw const (*_12);
        _10 = _11 as usize (PointerExposeAddress);
        _3 = Sub(move _4, move _10);
        _19 = std::mem::size_of::<T>() -> bb3;
    }

    bb3: {
        _20 = align_of::<T>() -> bb4;
    }

    bb4: {
        _18 = (move _19, move _20);
        _16 = (_18.0: usize);
        _17 = (_18.1: usize);
        _22 = &_3;
        _23 = &_16;
        _21 = (move _22, move _23);
        _24 = (_21.0: &usize);
        _25 = (_21.1: &usize);
        _28 = (*_24);
        _29 = (*_25);
        _27 = Eq(move _28, move _29);
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _30 = core::panicking::AssertKind::Eq;
        _32 = Option::<Arguments<'_>>::None;
        _31 = core::panicking::assert_failed::<usize, usize>(move _30, _24, _25, move _32);
    }

    bb6: {
        _36 = _16;
        _37 = Eq(_17, const 0_usize);
        assert(!move _37, "attempt to calculate the remainder of `{}` with a divisor of zero", _36) -> bb7;
    }

    bb7: {
        _35 = Rem(move _36, _17);
        _34 = &_35;
        _39 = const 0_usize;
        _38 = &_39;
        _33 = (move _34, move _38);
        _40 = (_33.0: &usize);
        _41 = (_33.1: &usize);
        _44 = (*_40);
        _45 = (*_41);
        _43 = Eq(move _44, move _45);
        _42 = Not(move _43);
        switchInt(move _42) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _46 = core::panicking::AssertKind::Eq;
        _48 = Option::<Arguments<'_>>::None;
        _47 = core::panicking::assert_failed::<usize, usize>(move _46, _40, _41, move _48);
    }

    bb9: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: (std::option::Option<Packed<(&(), i32)>>, bool);
    let mut _3: std::option::Option<Packed<(&(), i32)>>;
    let mut _4: Packed<(&(), i32)>;
    let mut _5: (&(), i32);
    let mut _6: &();
    let _7: ();
    let _8: ();
    let mut _9: std::option::Option<(Packed<&()>, bool)>;
    let mut _10: (Packed<&()>, bool);
    let mut _11: Packed<&()>;
    let _12: &();
    let _13: ();
    let mut _14: (&usize, &usize);
    let mut _15: &usize;
    let _16: usize;
    let mut _17: &usize;
    let _18: usize;
    let _19: &usize;
    let _20: &usize;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: usize;
    let mut _24: usize;
    let _26: !;
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _28: (&usize, &usize);
    let mut _29: &usize;
    let _30: usize;
    let mut _31: &usize;
    let _32: usize;
    let _33: &usize;
    let _34: &usize;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: usize;
    let mut _38: usize;
    let _40: !;
    let mut _41: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _19;
        debug right_val => _20;
        let _25: core::panicking::AssertKind;
        scope 2 {
            debug kind => _25;
        }
    }
    scope 3 {
        debug left_val => _33;
        debug right_val => _34;
        let _39: core::panicking::AssertKind;
        scope 4 {
            debug kind => _39;
        }
    }

    bb0: {
        _6 = &_7;
        _5 = (move _6, const 0_i32);
        _4 = Packed::<(&(), i32)>(move _5);
        _3 = Option::<Packed<(&(), i32)>>::Some(move _4);
        _2 = (move _3, const true);
        _1 = sanity_check_size::<(Option<Packed<(&(), i32)>>, bool)>(move _2) -> bb1;
    }

    bb1: {
        _12 = &_13;
        _11 = Packed::<&()>(_12);
        _10 = (move _11, const true);
        _9 = Option::<(Packed<&()>, bool)>::Some(move _10);
        _8 = sanity_check_size::<Option<(Packed<&()>, bool)>>(move _9) -> bb2;
    }

    bb2: {
        _16 = align_of::<Option<(Packed<&()>, bool)>>() -> bb3;
    }

    bb3: {
        _15 = &_16;
        _18 = const 1_usize;
        _17 = &_18;
        _14 = (move _15, move _17);
        _19 = (_14.0: &usize);
        _20 = (_14.1: &usize);
        _23 = (*_19);
        _24 = (*_20);
        _22 = Eq(move _23, move _24);
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _25 = core::panicking::AssertKind::Eq;
        _27 = Option::<Arguments<'_>>::None;
        _26 = core::panicking::assert_failed::<usize, usize>(move _25, _19, _20, move _27);
    }

    bb5: {
        _30 = std::mem::size_of::<Option<(Packed<&()>, bool)>>() -> bb6;
    }

    bb6: {
        _29 = &_30;
        _32 = std::mem::size_of::<(Packed<&()>, bool)>() -> bb7;
    }

    bb7: {
        _31 = &_32;
        _28 = (move _29, move _31);
        _33 = (_28.0: &usize);
        _34 = (_28.1: &usize);
        _37 = (*_33);
        _38 = (*_34);
        _36 = Eq(move _37, move _38);
        _35 = Not(move _36);
        switchInt(move _35) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _39 = core::panicking::AssertKind::Eq;
        _41 = Option::<Arguments<'_>>::None;
        _40 = core::panicking::assert_failed::<usize, usize>(move _39, _33, _34, move _41);
    }

    bb9: {
        return;
    }
}

fn Packed(_1: T) -> Packed<T> {
    let mut _0: Packed<T>;

    bb0: {
        _0 = Packed::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Packed(_1: T) -> Packed<T> {
    let mut _0: Packed<T>;

    bb0: {
        _0 = Packed::<T>(move _1);
        return;
    }
}
