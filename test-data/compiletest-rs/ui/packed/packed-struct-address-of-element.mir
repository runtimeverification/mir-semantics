// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: Foo1;
    let mut _3: (&usize, &usize);
    let mut _4: &usize;
    let _5: usize;
    let mut _6: &usize;
    let _7: usize;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _19: (&usize, &usize);
    let mut _20: &usize;
    let _21: usize;
    let mut _22: &usize;
    let _23: usize;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: usize;
    let mut _29: usize;
    let _31: !;
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _35: (&usize, &usize);
    let mut _36: &usize;
    let _37: usize;
    let mut _38: &usize;
    let _39: usize;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: usize;
    let mut _45: usize;
    let _47: !;
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug foo => _1;
        let _2: *const usize;
        scope 2 {
            debug brw => _2;
            let _17: Foo2;
            scope 3 {
                let _8: &usize;
                let _9: &usize;
                scope 4 {
                    debug left_val => _8;
                    debug right_val => _9;
                    let _14: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _14;
                    }
                }
            }
            scope 6 {
                debug foo => _17;
                let _18: *const usize;
                scope 7 {
                    debug brw => _18;
                    let mut _33: Foo4C;
                    scope 8 {
                        let _24: &usize;
                        let _25: &usize;
                        scope 9 {
                            debug left_val => _24;
                            debug right_val => _25;
                            let _30: core::panicking::AssertKind;
                            scope 10 {
                                debug kind => _30;
                            }
                        }
                    }
                    scope 11 {
                        debug foo => _33;
                        let _34: *mut usize;
                        scope 12 {
                            debug brw => _34;
                            scope 13 {
                                let _40: &usize;
                                let _41: &usize;
                                scope 14 {
                                    debug left_val => _40;
                                    debug right_val => _41;
                                    let _46: core::panicking::AssertKind;
                                    scope 15 {
                                        debug kind => _46;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = Foo1 { bar: const 1_u8, baz: const 2_usize };
        _2 = &raw const (_1.1: usize);
        _5 = ptr::const_ptr::<impl *const usize>::read_unaligned(_2) -> bb1;
    }

    bb1: {
        _4 = &_5;
        _7 = const 2_usize;
        _6 = &_7;
        _3 = (move _4, move _6);
        _8 = (_3.0: &usize);
        _9 = (_3.1: &usize);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<usize, usize>(move _14, _8, _9, move _16);
    }

    bb3: {
        _17 = Foo2 { bar: const 1_u8, baz: const 2_usize };
        _18 = &raw const (_17.1: usize);
        _21 = ptr::const_ptr::<impl *const usize>::read_unaligned(_18) -> bb4;
    }

    bb4: {
        _20 = &_21;
        _23 = const 2_usize;
        _22 = &_23;
        _19 = (move _20, move _22);
        _24 = (_19.0: &usize);
        _25 = (_19.1: &usize);
        _28 = (*_24);
        _29 = (*_25);
        _27 = Eq(move _28, move _29);
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _30 = core::panicking::AssertKind::Eq;
        _32 = Option::<Arguments<'_>>::None;
        _31 = core::panicking::assert_failed::<usize, usize>(move _30, _24, _25, move _32);
    }

    bb6: {
        _33 = Foo4C { bar: const 1_u8, baz: const 2_usize };
        _34 = &raw mut (_33.1: usize);
        _37 = ptr::mut_ptr::<impl *mut usize>::read_unaligned(_34) -> bb7;
    }

    bb7: {
        _36 = &_37;
        _39 = const 2_usize;
        _38 = &_39;
        _35 = (move _36, move _38);
        _40 = (_35.0: &usize);
        _41 = (_35.1: &usize);
        _44 = (*_40);
        _45 = (*_41);
        _43 = Eq(move _44, move _45);
        _42 = Not(move _43);
        switchInt(move _42) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _46 = core::panicking::AssertKind::Eq;
        _48 = Option::<Arguments<'_>>::None;
        _47 = core::panicking::assert_failed::<usize, usize>(move _46, _40, _41, move _48);
    }

    bb9: {
        return;
    }
}
