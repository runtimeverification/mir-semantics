// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: Foo1;
    let mut _4: (&u8, &u8);
    let mut _5: &u8;
    let mut _6: &u8;
    let _7: u8;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: u8;
    let mut _13: u8;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&usize, &usize);
    let mut _18: &usize;
    let mut _19: &usize;
    let _20: usize;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: usize;
    let mut _26: usize;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _33: (&u8, &u8);
    let mut _34: &u8;
    let mut _35: &u8;
    let _36: u8;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: u8;
    let mut _42: u8;
    let _44: !;
    let mut _45: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _46: (&usize, &usize);
    let mut _47: &usize;
    let mut _48: &usize;
    let _49: usize;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: usize;
    let mut _55: usize;
    let _57: !;
    let mut _58: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _62: (&u8, &u8);
    let mut _63: &u8;
    let mut _64: &u8;
    let _65: u8;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: u8;
    let mut _71: u8;
    let _73: !;
    let mut _74: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _75: (&usize, &usize);
    let mut _76: &usize;
    let mut _77: &usize;
    let _78: usize;
    let mut _81: bool;
    let mut _82: bool;
    let mut _83: usize;
    let mut _84: usize;
    let _86: !;
    let mut _87: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug foo1 => _1;
        let _2: u8;
        let _3: usize;
        let _30: Foo2;
        scope 2 {
            debug bar => _2;
            debug baz => _3;
            let _8: &u8;
            let _9: &u8;
            let _21: &usize;
            let _22: &usize;
            scope 3 {
                debug left_val => _8;
                debug right_val => _9;
                let _14: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _14;
                }
            }
            scope 5 {
                debug left_val => _21;
                debug right_val => _22;
                let _27: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _27;
                }
            }
        }
        scope 7 {
            debug foo2 => _30;
            let _31: u8;
            let _32: usize;
            let _59: Foo4C;
            scope 8 {
                debug bar => _31;
                debug baz => _32;
                let _37: &u8;
                let _38: &u8;
                let _50: &usize;
                let _51: &usize;
                scope 9 {
                    debug left_val => _37;
                    debug right_val => _38;
                    let _43: core::panicking::AssertKind;
                    scope 10 {
                        debug kind => _43;
                    }
                }
                scope 11 {
                    debug left_val => _50;
                    debug right_val => _51;
                    let _56: core::panicking::AssertKind;
                    scope 12 {
                        debug kind => _56;
                    }
                }
            }
            scope 13 {
                debug foo4 => _59;
                let _60: u8;
                let _61: usize;
                scope 14 {
                    debug bar => _60;
                    debug baz => _61;
                    let _66: &u8;
                    let _67: &u8;
                    let _79: &usize;
                    let _80: &usize;
                    scope 15 {
                        debug left_val => _66;
                        debug right_val => _67;
                        let _72: core::panicking::AssertKind;
                        scope 16 {
                            debug kind => _72;
                        }
                    }
                    scope 17 {
                        debug left_val => _79;
                        debug right_val => _80;
                        let _85: core::panicking::AssertKind;
                        scope 18 {
                            debug kind => _85;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = Foo1 { bar: const 1_u8, baz: const 2_usize };
        _2 = (_1.0: u8);
        _3 = (_1.1: usize);
        _5 = &_2;
        _7 = const 1_u8;
        _6 = &_7;
        _4 = (move _5, move _6);
        _8 = (_4.0: &u8);
        _9 = (_4.1: &u8);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<u8, u8>(move _14, _8, _9, move _16);
    }

    bb2: {
        _18 = &_3;
        _20 = const 2_usize;
        _19 = &_20;
        _17 = (move _18, move _19);
        _21 = (_17.0: &usize);
        _22 = (_17.1: &usize);
        _25 = (*_21);
        _26 = (*_22);
        _24 = Eq(move _25, move _26);
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<usize, usize>(move _27, _21, _22, move _29);
    }

    bb4: {
        _30 = Foo2 { bar: const 1_u8, baz: const 2_usize };
        _31 = (_30.0: u8);
        _32 = (_30.1: usize);
        _34 = &_31;
        _36 = const 1_u8;
        _35 = &_36;
        _33 = (move _34, move _35);
        _37 = (_33.0: &u8);
        _38 = (_33.1: &u8);
        _41 = (*_37);
        _42 = (*_38);
        _40 = Eq(move _41, move _42);
        _39 = Not(move _40);
        switchInt(move _39) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _43 = core::panicking::AssertKind::Eq;
        _45 = Option::<Arguments<'_>>::None;
        _44 = core::panicking::assert_failed::<u8, u8>(move _43, _37, _38, move _45);
    }

    bb6: {
        _47 = &_32;
        _49 = const 2_usize;
        _48 = &_49;
        _46 = (move _47, move _48);
        _50 = (_46.0: &usize);
        _51 = (_46.1: &usize);
        _54 = (*_50);
        _55 = (*_51);
        _53 = Eq(move _54, move _55);
        _52 = Not(move _53);
        switchInt(move _52) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _56 = core::panicking::AssertKind::Eq;
        _58 = Option::<Arguments<'_>>::None;
        _57 = core::panicking::assert_failed::<usize, usize>(move _56, _50, _51, move _58);
    }

    bb8: {
        _59 = Foo4C { bar: const 1_u8, baz: const 2_usize };
        _60 = (_59.0: u8);
        _61 = (_59.1: usize);
        _63 = &_60;
        _65 = const 1_u8;
        _64 = &_65;
        _62 = (move _63, move _64);
        _66 = (_62.0: &u8);
        _67 = (_62.1: &u8);
        _70 = (*_66);
        _71 = (*_67);
        _69 = Eq(move _70, move _71);
        _68 = Not(move _69);
        switchInt(move _68) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _72 = core::panicking::AssertKind::Eq;
        _74 = Option::<Arguments<'_>>::None;
        _73 = core::panicking::assert_failed::<u8, u8>(move _72, _66, _67, move _74);
    }

    bb10: {
        _76 = &_61;
        _78 = const 2_usize;
        _77 = &_78;
        _75 = (move _76, move _77);
        _79 = (_75.0: &usize);
        _80 = (_75.1: &usize);
        _83 = (*_79);
        _84 = (*_80);
        _82 = Eq(move _83, move _84);
        _81 = Not(move _82);
        switchInt(move _81) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _85 = core::panicking::AssertKind::Eq;
        _87 = Option::<Arguments<'_>>::None;
        _86 = core::panicking::assert_failed::<usize, usize>(move _85, _79, _80, move _87);
    }

    bb12: {
        return;
    }
}
