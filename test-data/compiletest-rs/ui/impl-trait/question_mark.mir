// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/impl-trait/question_mark.rs:5:10: 5:15>::fmt(_1: &Target, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "Target";
        _0 = Formatter::<'_>::write_str(_2, _3) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/impl-trait/question_mark.rs:8:10: 8:15>::fmt(_1: &Source, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "Source";
        _0 = Formatter::<'_>::write_str(_2, _3) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/impl-trait/question_mark.rs:10:1: 10:29>::from(_1: Source) -> Target {
    let mut _0: Target;

    bb0: {
        return;
    }
}

fn maybe_source() -> Result<(), Source> {
    let mut _0: std::result::Result<(), Source>;
    let mut _1: !;

    bb0: {
        _1 = core::panicking::panic(const "not yet implemented");
    }
}

fn typaram() -> Result<(), impl Debug> {
    let mut _0: std::result::Result<(), impl std::fmt::Debug>;
    let mut _1: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, Source>>;
    let mut _2: std::result::Result<(), Source>;
    let mut _3: isize;
    scope 1 {
        debug residual => const Result::<Infallible, Source>::Err(Source);
        scope 2 {
        }
    }
    scope 3 {
        debug val => const ();
        scope 4 {
        }
    }

    bb0: {
        _2 = maybe_source() -> bb1;
    }

    bb1: {
        _1 = <Result<(), Source> as Try>::branch(move _2) -> bb2;
    }

    bb2: {
        _3 = discriminant(_1);
        switchInt(move _3) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _0 = Result::<(), Target>::Ok(const ());
        goto -> bb6;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _0 = <Result<(), Target> as FromResidual<Result<Infallible, Source>>>::from_residual(const Result::<Infallible, Source>::Err(Source)) -> bb6;
    }

    bb6: {
        return;
    }
}

fn direct() -> Result<(), impl Debug> {
    let mut _0: std::result::Result<(), impl std::fmt::Debug>;
    let mut _1: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, Source>>;
    let mut _2: std::result::Result<(), Source>;
    let mut _3: isize;
    scope 1 {
        debug residual => const Result::<Infallible, Source>::Err(Source);
        scope 2 {
        }
    }
    scope 3 {
        debug val => const ();
        scope 4 {
        }
    }

    bb0: {
        _2 = maybe_source() -> bb1;
    }

    bb1: {
        _1 = <Result<(), Source> as Try>::branch(move _2) -> bb2;
    }

    bb2: {
        _3 = discriminant(_1);
        switchInt(move _3) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _0 = Result::<(), Target>::Err(const Target);
        goto -> bb6;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _0 = <Result<(), Target> as FromResidual<Result<Infallible, Source>>>::from_residual(const Result::<Infallible, Source>::Err(Source)) -> bb6;
    }

    bb6: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
