// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> impl Into<for<'a> fn(&'a ())> {
    let mut _0: impl std::convert::Into<for<'a> fn(&'a ())>;

    bb0: {
        _0 = const ZeroSized: [closure@ui/impl-trait/issue-51185.rs:3:6: 3:9] as for<'a> fn(&'a ()) (Pointer(ClosureFnPointer(Normal)));
        return;
    }
}

fn foo::{closure#0}(_1: &[closure@ui/impl-trait/issue-51185.rs:3:6: 3:9], _2: &()) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: for<'a> fn(&'a ());
    let mut _3: impl std::convert::Into<for<'a> fn(&'a ())>;
    let _4: &();
    let _5: ();

    bb0: {
        _3 = foo() -> bb1;
    }

    bb1: {
        _2 = <impl Into<for<'a> fn(&'a ())> as Into<for<'a> fn(&'a ())>>::into(move _3) -> bb2;
    }

    bb2: {
        _4 = &_5;
        _1 = move _2(_4) -> bb3;
    }

    bb3: {
        return;
    }
}
