// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn not_restricted(_1: bool) -> impl Sized {
    debug c => _1;
    let mut _0: impl Sized;
    let _2: AnyValue<impl Sized>;
    let mut _3: impl Sized;
    scope 1 {
        debug x => _2;
    }

    bb0: {
        switchInt(_1) -> [0: bb3, otherwise: bb1];
    }

    bb1: {
        _3 = not_restricted(const false) -> bb2;
    }

    bb2: {
        _2 = AnyValue::<impl Sized>(move _3);
        goto -> bb3;
    }

    bb3: {
        _0 = const 2_u32;
        return;
    }
}

fn not_field(_1: bool) -> impl Sized {
    debug c => _1;
    let mut _0: impl Sized;
    let _2: NonZero<impl Sized>;
    let mut _3: impl Sized;
    scope 1 {
        debug x => _2;
    }
    scope 2 {
    }

    bb0: {
        switchInt(_1) -> [0: bb3, otherwise: bb1];
    }

    bb1: {
        _3 = not_field(const false) -> bb2;
    }

    bb2: {
        _2 = NonZero::<impl Sized>(move _3);
        goto -> bb3;
    }

    bb3: {
        _0 = const 5_u32;
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn AnyValue(_1: T) -> AnyValue<T> {
    let mut _0: AnyValue<T>;

    bb0: {
        _0 = AnyValue::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn AnyValue(_1: T) -> AnyValue<T> {
    let mut _0: AnyValue<T>;

    bb0: {
        _0 = AnyValue::<T>(move _1);
        return;
    }
}

fn NonZero(_1: T) -> NonZero<T> {
    let mut _0: NonZero<T>;

    bb0: {
        _0 = NonZero::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn NonZero(_1: T) -> NonZero<T> {
    let mut _0: NonZero<T>;

    bb0: {
        _0 = NonZero::<T>(move _1);
        return;
    }
}
