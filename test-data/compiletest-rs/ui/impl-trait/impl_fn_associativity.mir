// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f_debug() -> impl Fn() -> impl Debug {
    let mut _0: impl Fn() -> impl std::fmt::Debug;

    bb0: {
        return;
    }
}

fn f_debug::{closure#0}(_1: &[closure@ui/impl-trait/impl_fn_associativity.rs:6:5: 6:7]) -> impl Debug {
    let mut _0: impl std::fmt::Debug;

    bb0: {
        return;
    }
}

fn ff_debug() -> impl Fn() -> impl Fn() -> impl Debug {
    let mut _0: impl Fn() -> impl Fn() -> impl std::fmt::Debug;

    bb0: {
        return;
    }
}

fn ff_debug::{closure#0}(_1: &[closure@ui/impl-trait/impl_fn_associativity.rs:10:5: 10:7]) -> impl Fn() -> impl Debug {
    let mut _0: impl Fn() -> impl std::fmt::Debug;

    bb0: {
        _0 = f_debug() -> bb1;
    }

    bb1: {
        return;
    }
}

fn multi() -> impl Fn() -> impl Debug + Send {
    let mut _0: impl Fn() -> impl std::fmt::Debug + std::marker::Send;

    bb0: {
        return;
    }
}

fn multi::{closure#0}(_1: &[closure@ui/impl-trait/impl_fn_associativity.rs:14:5: 14:7]) -> impl Debug + Send {
    let mut _0: impl std::fmt::Debug + std::marker::Send;

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: impl std::fmt::Debug;
    let mut _2: &impl Fn() -> impl std::fmt::Debug;
    let _3: impl Fn() -> impl std::fmt::Debug;
    let mut _4: &impl Fn() -> impl Fn() -> impl std::fmt::Debug;
    let _5: impl Fn() -> impl Fn() -> impl std::fmt::Debug;
    let mut _6: (&std::string::String, &&str);
    let mut _7: &std::string::String;
    let _8: std::string::String;
    let mut _10: std::fmt::Arguments<'_>;
    let mut _11: &[&str];
    let _12: &[&str; 1];
    let _13: [&str; 1];
    let mut _14: &[core::fmt::rt::Argument<'_>];
    let _15: &[core::fmt::rt::Argument<'_>; 1];
    let _16: [core::fmt::rt::Argument<'_>; 1];
    let mut _17: core::fmt::rt::Argument<'_>;
    let _18: &impl std::fmt::Debug;
    let mut _19: &&str;
    let _20: &str;
    let mut _23: bool;
    let mut _24: bool;
    let _26: !;
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: &impl Fn() -> impl std::fmt::Debug + std::marker::Send;
    let _30: impl Fn() -> impl std::fmt::Debug + std::marker::Send;
    let mut _31: (&std::string::String, &&str);
    let mut _32: &std::string::String;
    let _33: std::string::String;
    let mut _35: std::fmt::Arguments<'_>;
    let mut _36: &[&str];
    let _37: &[&str; 1];
    let _38: [&str; 1];
    let mut _39: &[core::fmt::rt::Argument<'_>];
    let _40: &[core::fmt::rt::Argument<'_>; 1];
    let _41: [core::fmt::rt::Argument<'_>; 1];
    let mut _42: core::fmt::rt::Argument<'_>;
    let _43: &impl std::fmt::Debug + std::marker::Send;
    let mut _44: &&str;
    let _45: &str;
    let mut _48: bool;
    let mut _49: bool;
    let _51: !;
    let mut _52: std::option::Option<std::fmt::Arguments<'_>>;
    let _53: ();
    let _54: &impl std::fmt::Debug + std::marker::Send;
    scope 1 {
        debug debug => const ZeroSized: impl Debug;
        let _9: std::string::String;
        let _21: &std::string::String;
        let _22: &&str;
        let _28: impl std::fmt::Debug + std::marker::Send;
        scope 2 {
            debug res => _9;
        }
        scope 3 {
            debug left_val => _21;
            debug right_val => _22;
            let _25: core::panicking::AssertKind;
            scope 4 {
                debug kind => _25;
            }
        }
        scope 5 {
            debug x => const ZeroSized: impl Debug + Send;
            let _34: std::string::String;
            let _46: &std::string::String;
            let _47: &&str;
            scope 6 {
                debug res => _34;
            }
            scope 7 {
                debug left_val => _46;
                debug right_val => _47;
                let _50: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _50;
                }
            }
        }
    }

    bb0: {
        _5 = ff_debug() -> bb1;
    }

    bb1: {
        _4 = &_5;
        _3 = <impl Fn() -> impl Fn() -> impl Debug as Fn<()>>::call(move _4, const ()) -> bb2;
    }

    bb2: {
        _2 = &_3;
        _1 = <impl Fn() -> impl Debug as Fn<()>>::call(move _2, const ()) -> bb3;
    }

    bb3: {
        _13 = [const ""];
        _12 = &_13;
        _11 = _12 as &[&str] (Pointer(Unsize));
        _18 = &_1;
        _17 = core::fmt::rt::Argument::<'_>::new_debug::<impl Debug>(_18) -> bb4;
    }

    bb4: {
        _16 = [move _17];
        _15 = &_16;
        _14 = _15 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _10 = Arguments::<'_>::new_v1(move _11, move _14) -> bb5;
    }

    bb5: {
        _9 = format(move _10) -> bb6;
    }

    bb6: {
        _8 = move _9;
        _7 = &_8;
        _20 = const "()";
        _19 = &_20;
        _6 = (move _7, move _19);
        _21 = (_6.0: &std::string::String);
        _22 = (_6.1: &&str);
        _24 = <String as PartialEq<&str>>::eq(_21, _22) -> [return: bb7, unwind: bb22];
    }

    bb7: {
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _25 = core::panicking::AssertKind::Eq;
        _27 = Option::<Arguments<'_>>::None;
        _26 = core::panicking::assert_failed::<String, &str>(move _25, _21, _22, move _27) -> bb22;
    }

    bb9: {
        drop(_8) -> bb10;
    }

    bb10: {
        _30 = multi() -> bb11;
    }

    bb11: {
        _29 = &_30;
        _28 = <impl Fn() -> impl Debug + Send as Fn<()>>::call(move _29, const ()) -> bb12;
    }

    bb12: {
        _38 = [const ""];
        _37 = &_38;
        _36 = _37 as &[&str] (Pointer(Unsize));
        _43 = &_28;
        _42 = core::fmt::rt::Argument::<'_>::new_debug::<impl Debug + Send>(_43) -> bb13;
    }

    bb13: {
        _41 = [move _42];
        _40 = &_41;
        _39 = _40 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _35 = Arguments::<'_>::new_v1(move _36, move _39) -> bb14;
    }

    bb14: {
        _34 = format(move _35) -> bb15;
    }

    bb15: {
        _33 = move _34;
        _32 = &_33;
        _45 = const "()";
        _44 = &_45;
        _31 = (move _32, move _44);
        _46 = (_31.0: &std::string::String);
        _47 = (_31.1: &&str);
        _49 = <String as PartialEq<&str>>::eq(_46, _47) -> [return: bb16, unwind: bb21];
    }

    bb16: {
        _48 = Not(move _49);
        switchInt(move _48) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _50 = core::panicking::AssertKind::Eq;
        _52 = Option::<Arguments<'_>>::None;
        _51 = core::panicking::assert_failed::<String, &str>(move _50, _46, _47, move _52) -> bb21;
    }

    bb18: {
        drop(_33) -> bb19;
    }

    bb19: {
        _54 = &_28;
        _53 = assert_send::<impl Debug + Send>(_54) -> bb20;
    }

    bb20: {
        return;
    }

    bb21 (cleanup): {
        drop(_33) -> [return: bb23, unwind terminate];
    }

    bb22 (cleanup): {
        drop(_8) -> [return: bb23, unwind terminate];
    }

    bb23 (cleanup): {
        resume;
    }
}

fn assert_send(_1: &impl Send) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
