// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn equal_regions_static(_1: &i32) -> impl Sized {
    debug x => _1;
    let mut _0: impl Sized;

    bb0: {
        _0 = _1;
        return;
    }
}

fn equal_regions(_1: &i32) -> impl Sized + '_ {
    debug x => _1;
    let mut _0: impl Sized + '_;
    scope 1 {
        debug y => _1;
        scope 2 {
            debug z => _1;
        }
    }

    bb0: {
        _0 = _1;
        return;
    }
}

fn equal_regions_rev(_1: &i32) -> impl Sized + '_ {
    debug x => _1;
    let mut _0: impl Sized + '_;
    scope 1 {
        debug y => _1;
        scope 2 {
            debug z => _1;
        }
    }

    bb0: {
        _0 = _1;
        return;
    }
}

fn equal_regions_inv(_1: *mut &i32) -> impl Sized + '_ {
    debug x => _1;
    let mut _0: impl Sized + '_;
    scope 1 {
        debug y => _1;
        scope 2 {
            debug z => _1;
        }
    }

    bb0: {
        _0 = _1;
        return;
    }
}

fn equal_regions_inv_rev(_1: *mut &i32) -> impl Sized + '_ {
    debug x => _1;
    let mut _0: impl Sized + '_;
    scope 1 {
        debug y => _1;
        scope 2 {
            debug z => _1;
        }
    }

    bb0: {
        _0 = _1;
        return;
    }
}

fn contravariant_lub(_1: fn(&()), _2: fn(&()), _3: bool) -> impl Sized + '_ {
    debug x => _1;
    debug y => _2;
    debug c => _3;
    let mut _0: impl Sized + '_;

    bb0: {
        switchInt(_3) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _0 = _1;
        goto -> bb3;
    }

    bb2: {
        _0 = _2;
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
