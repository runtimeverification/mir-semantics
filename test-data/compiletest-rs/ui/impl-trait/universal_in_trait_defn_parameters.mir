// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/impl-trait/universal_in_trait_defn_parameters.rs:9:1: 9:34>::in_parameters(_1: impl Debug) -> String {
    debug v => _1;
    let mut _0: std::string::String;
    let _2: std::string::String;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 1];
    let _6: [&str; 1];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &impl Debug;
    scope 1 {
        debug res => _2;
    }

    bb0: {
        _6 = [const "() + "];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _11 = &_1;
        _10 = core::fmt::rt::Argument::<'_>::new_debug::<impl Debug>(_11) -> [return: bb1, unwind: bb5];
    }

    bb1: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _2 = format(move _3) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        _0 = move _2;
        drop(_1) -> bb4;
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_1) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::string::String;
    let mut _2: (&std::string::String, &&str);
    let mut _3: &std::string::String;
    let mut _4: &&str;
    let _5: &str;
    let mut _8: bool;
    let mut _9: bool;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug s => _1;
        let _6: &std::string::String;
        let _7: &&str;
        scope 2 {
            debug left_val => _6;
            debug right_val => _7;
            let _10: core::panicking::AssertKind;
            scope 3 {
                debug kind => _10;
            }
        }
    }

    bb0: {
        _1 = <() as InTraitDefnParameters>::in_parameters::<i32>(const 22_i32) -> bb1;
    }

    bb1: {
        _3 = &_1;
        _5 = const "() + 22";
        _4 = &_5;
        _2 = (move _3, move _4);
        _6 = (_2.0: &std::string::String);
        _7 = (_2.1: &&str);
        _9 = <String as PartialEq<&str>>::eq(_6, _7) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<String, &str>(move _10, _6, _7, move _12) -> bb6;
    }

    bb4: {
        drop(_1) -> bb5;
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_1) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }
}
