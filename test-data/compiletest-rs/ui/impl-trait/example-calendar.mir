// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/impl-trait/example-calendar.rs:15:16: 15:21>::clone(_1: &NaiveDate) -> NaiveDate {
    debug self => _1;
    let mut _0: NaiveDate;
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:15:23: 15:28>::fmt(_1: &NaiveDate, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &i32;
    let mut _6: &dyn std::fmt::Debug;
    let _7: &u32;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&u32;
    let _10: &u32;

    bb0: {
        _3 = const "NaiveDate";
        _5 = &((*_1).0: i32);
        _4 = _5 as &dyn std::fmt::Debug (Pointer(Unsize));
        _7 = &((*_1).1: u32);
        _6 = _7 as &dyn std::fmt::Debug (Pointer(Unsize));
        _10 = &((*_1).2: u32);
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field3_finish(_2, _3, move _4, move _6, move _8) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:15:30: 15:32>::assert_receiver_is_total_eq(_1: &NaiveDate) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        return;
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:15:34: 15:37>::cmp(_1: &NaiveDate, _2: &NaiveDate) -> std::cmp::Ordering {
    debug self => _1;
    debug other => _2;
    let mut _0: std::cmp::Ordering;
    let mut _3: std::cmp::Ordering;
    let _4: &i32;
    let _5: &i32;
    let mut _6: i8;
    let mut _7: std::cmp::Ordering;
    let _8: &u32;
    let _9: &u32;
    let mut _10: i8;
    let _11: &u32;
    let _12: &u32;
    let _13: std::cmp::Ordering;
    let _14: std::cmp::Ordering;
    scope 1 {
        debug cmp => _13;
    }
    scope 2 {
        debug cmp => _14;
    }

    bb0: {
        _4 = &((*_1).0: i32);
        _5 = &((*_2).0: i32);
        _3 = <i32 as Ord>::cmp(_4, _5) -> bb1;
    }

    bb1: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _14 = _3;
        _0 = _14;
        goto -> bb7;
    }

    bb3: {
        _8 = &((*_1).1: u32);
        _9 = &((*_2).1: u32);
        _7 = <u32 as Ord>::cmp(_8, _9) -> bb4;
    }

    bb4: {
        _10 = discriminant(_7);
        switchInt(move _10) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _13 = _7;
        _0 = _13;
        goto -> bb7;
    }

    bb6: {
        _11 = &((*_1).2: u32);
        _12 = &((*_2).2: u32);
        _0 = <u32 as Ord>::cmp(_11, _12) -> bb7;
    }

    bb7: {
        return;
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:15:39: 15:48>::eq(_1: &NaiveDate, _2: &NaiveDate) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: i32;
    let mut _6: i32;
    let mut _7: bool;
    let mut _8: u32;
    let mut _9: u32;
    let mut _10: bool;
    let mut _11: u32;
    let mut _12: u32;

    bb0: {
        _5 = ((*_1).0: i32);
        _6 = ((*_2).0: i32);
        _4 = Eq(move _5, move _6);
        switchInt(move _4) -> [0: bb4, otherwise: bb5];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _11 = ((*_1).2: u32);
        _12 = ((*_2).2: u32);
        _10 = Eq(move _11, move _12);
        _0 = move _10;
        goto -> bb3;
    }

    bb3: {
        return;
    }

    bb4: {
        _3 = const false;
        goto -> bb6;
    }

    bb5: {
        _8 = ((*_1).1: u32);
        _9 = ((*_2).1: u32);
        _7 = Eq(move _8, move _9);
        _3 = move _7;
        goto -> bb6;
    }

    bb6: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2];
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:15:50: 15:60>::partial_cmp(_1: &NaiveDate, _2: &NaiveDate) -> Option<std::cmp::Ordering> {
    debug self => _1;
    debug other => _2;
    let mut _0: std::option::Option<std::cmp::Ordering>;
    let mut _3: std::option::Option<std::cmp::Ordering>;
    let _4: &i32;
    let _5: &i32;
    let mut _6: i8;
    let mut _7: isize;
    let mut _8: std::option::Option<std::cmp::Ordering>;
    let _9: &u32;
    let _10: &u32;
    let mut _11: i8;
    let mut _12: isize;
    let _13: &u32;
    let _14: &u32;
    let _15: std::option::Option<std::cmp::Ordering>;
    let _16: std::option::Option<std::cmp::Ordering>;
    scope 1 {
        debug cmp => _15;
    }
    scope 2 {
        debug cmp => _16;
    }

    bb0: {
        _4 = &((*_1).0: i32);
        _5 = &((*_2).0: i32);
        _3 = <i32 as PartialOrd>::partial_cmp(_4, _5) -> bb1;
    }

    bb1: {
        _7 = discriminant(_3);
        switchInt(move _7) -> [1: bb3, otherwise: bb2];
    }

    bb2: {
        _16 = _3;
        _0 = _16;
        goto -> bb9;
    }

    bb3: {
        _6 = discriminant(((_3 as Some).0: std::cmp::Ordering));
        switchInt(move _6) -> [0: bb4, otherwise: bb2];
    }

    bb4: {
        _9 = &((*_1).1: u32);
        _10 = &((*_2).1: u32);
        _8 = <u32 as PartialOrd>::partial_cmp(_9, _10) -> bb5;
    }

    bb5: {
        _12 = discriminant(_8);
        switchInt(move _12) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        _15 = _8;
        _0 = _15;
        goto -> bb9;
    }

    bb7: {
        _11 = discriminant(((_8 as Some).0: std::cmp::Ordering));
        switchInt(move _11) -> [0: bb8, otherwise: bb6];
    }

    bb8: {
        _13 = &((*_1).2: u32);
        _14 = &((*_2).2: u32);
        _0 = <u32 as PartialOrd>::partial_cmp(_13, _14) -> bb9;
    }

    bb9: {
        return;
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:18:1: 18:15>::from_ymd(_1: i32, _2: u32, _3: u32) -> NaiveDate {
    debug y => _1;
    debug m => _2;
    debug d => _3;
    let mut _0: NaiveDate;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: u32;
    let mut _8: bool;
    let mut _9: u32;
    let _10: !;
    let mut _11: std::fmt::Arguments<'_>;
    let mut _12: &[&str];
    let _13: &[&str; 1];
    let _14: [&str; 1];
    let mut _15: &[core::fmt::rt::Argument<'_>];
    let _16: &[core::fmt::rt::Argument<'_>; 1];
    let _17: [core::fmt::rt::Argument<'_>; 1];
    let mut _18: core::fmt::rt::Argument<'_>;
    let _19: &u32;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: u32;
    let mut _24: bool;
    let mut _25: u32;
    let mut _26: u32;
    let mut _27: &NaiveDate;
    let _28: NaiveDate;
    let mut _29: u32;
    let _30: !;
    let mut _31: std::fmt::Arguments<'_>;
    let mut _32: &[&str];
    let _33: &[&str; 1];
    let _34: [&str; 1];
    let mut _35: &[core::fmt::rt::Argument<'_>];
    let _36: &[core::fmt::rt::Argument<'_>; 1];
    let _37: [core::fmt::rt::Argument<'_>; 1];
    let mut _38: core::fmt::rt::Argument<'_>;
    let _39: &u32;
    let mut _40: u32;
    let mut _41: u32;

    bb0: {
        _7 = _2;
        _6 = Le(const 1_u32, move _7);
        switchInt(move _6) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _5 = const false;
        goto -> bb3;
    }

    bb2: {
        _9 = _2;
        _8 = Le(move _9, const 12_u32);
        _5 = move _8;
        goto -> bb3;
    }

    bb3: {
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb7, otherwise: bb4];
    }

    bb4: {
        _14 = [const "m = "];
        _13 = &_14;
        _12 = _13 as &[&str] (Pointer(Unsize));
        _19 = &_2;
        _18 = core::fmt::rt::Argument::<'_>::new_debug::<u32>(_19) -> bb5;
    }

    bb5: {
        _17 = [move _18];
        _16 = &_17;
        _15 = _16 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _11 = Arguments::<'_>::new_v1(move _12, move _15) -> bb6;
    }

    bb6: {
        _10 = panic_fmt(move _11);
    }

    bb7: {
        _23 = _3;
        _22 = Le(const 1_u32, move _23);
        switchInt(move _22) -> [0: bb8, otherwise: bb9];
    }

    bb8: {
        _21 = const false;
        goto -> bb10;
    }

    bb9: {
        _25 = _3;
        _29 = _2;
        _28 = NaiveDate(_1, move _29, const 1_u32);
        _27 = &_28;
        _26 = NaiveDate::days_in_month(move _27) -> bb11;
    }

    bb10: {
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb15, otherwise: bb12];
    }

    bb11: {
        _24 = Le(move _25, move _26);
        _21 = move _24;
        goto -> bb10;
    }

    bb12: {
        _34 = [const "d = "];
        _33 = &_34;
        _32 = _33 as &[&str] (Pointer(Unsize));
        _39 = &_3;
        _38 = core::fmt::rt::Argument::<'_>::new_debug::<u32>(_39) -> bb13;
    }

    bb13: {
        _37 = [move _38];
        _36 = &_37;
        _35 = _36 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _31 = Arguments::<'_>::new_v1(move _32, move _35) -> bb14;
    }

    bb14: {
        _30 = panic_fmt(move _31);
    }

    bb15: {
        _40 = _2;
        _41 = _3;
        _0 = NaiveDate(_1, move _40, move _41);
        return;
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:18:1: 18:15>::year(_1: &NaiveDate) -> i32 {
    debug self => _1;
    let mut _0: i32;

    bb0: {
        _0 = ((*_1).0: i32);
        return;
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:18:1: 18:15>::month(_1: &NaiveDate) -> u32 {
    debug self => _1;
    let mut _0: u32;

    bb0: {
        _0 = ((*_1).1: u32);
        return;
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:18:1: 18:15>::day(_1: &NaiveDate) -> u32 {
    debug self => _1;
    let mut _0: u32;

    bb0: {
        _0 = ((*_1).2: u32);
        return;
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:18:1: 18:15>::succ(_1: &NaiveDate) -> NaiveDate {
    debug self => _1;
    let mut _0: NaiveDate;
    let mut _2: i32;
    let mut _3: u32;
    let mut _4: u32;
    let _5: u32;
    let mut _6: (i32, u32, u32, u32);
    let mut _7: i32;
    let mut _8: u32;
    let mut _9: u32;
    let mut _10: u32;
    let mut _11: u32;
    let mut _12: bool;
    let mut _13: u32;
    let mut _14: bool;
    let mut _15: u32;
    let mut _16: i32;
    let mut _17: u32;
    let mut _18: u32;
    scope 1 {
        debug y => _2;
        debug m => _3;
        debug d => _4;
        debug n => _5;
    }

    bb0: {
        _7 = NaiveDate::year(_1) -> bb1;
    }

    bb1: {
        _8 = NaiveDate::month(_1) -> bb2;
    }

    bb2: {
        _10 = NaiveDate::day(_1) -> bb3;
    }

    bb3: {
        _9 = Add(move _10, const 1_u32);
        _11 = NaiveDate::days_in_month(_1) -> bb4;
    }

    bb4: {
        _6 = (move _7, move _8, move _9, move _11);
        _2 = (_6.0: i32);
        _3 = (_6.1: u32);
        _4 = (_6.2: u32);
        _5 = (_6.3: u32);
        _13 = _4;
        _12 = Gt(move _13, _5);
        switchInt(move _12) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _4 = const 1_u32;
        _3 = Add(_3, const 1_u32);
        goto -> bb6;
    }

    bb6: {
        _15 = _3;
        _14 = Gt(move _15, const 12_u32);
        switchInt(move _14) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _3 = const 1_u32;
        _2 = Add(_2, const 1_i32);
        goto -> bb8;
    }

    bb8: {
        _16 = _2;
        _17 = _3;
        _18 = _4;
        _0 = NaiveDate::from_ymd(move _16, move _17, move _18) -> bb9;
    }

    bb9: {
        return;
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:18:1: 18:15>::weekday(_1: &NaiveDate) -> Weekday {
    debug self => _1;
    let mut _0: Weekday;
    let _2: i32;
    let mut _4: i32;
    let mut _5: i32;
    let mut _6: i32;
    let mut _7: i32;
    let mut _8: i32;
    let mut _9: i32;
    let mut _10: i32;
    let mut _11: i32;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: i32;
    let mut _17: i32;
    let mut _18: i32;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: i32;
    let mut _24: i32;
    let mut _25: i32;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: bool;
    let mut _35: i32;
    let mut _36: i32;
    let mut _37: i32;
    let mut _38: u32;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: [Weekday; 7];
    let mut _44: Weekday;
    let mut _45: Weekday;
    let mut _46: Weekday;
    let mut _47: Weekday;
    let mut _48: Weekday;
    let mut _49: Weekday;
    let mut _50: Weekday;
    let _51: usize;
    let mut _52: usize;
    let mut _53: bool;
    scope 1 {
        debug year => _2;
        let _3: i32;
        scope 2 {
            debug dow_jan_1 => _3;
            let _34: i32;
            scope 3 {
                debug dow => _34;
            }
        }
    }

    bb0: {
        _2 = NaiveDate::year(_1) -> bb1;
    }

    bb1: {
        _8 = _2;
        _7 = Mul(move _8, const 365_i32);
        _11 = _2;
        _10 = Sub(move _11, const 1_i32);
        _12 = Eq(const 4_i32, const 0_i32);
        assert(!move _12, "attempt to divide `{}` by zero", _10) -> bb2;
    }

    bb2: {
        _13 = Eq(const 4_i32, const -1_i32);
        _14 = Eq(_10, const i32::MIN);
        _15 = BitAnd(move _13, move _14);
        assert(!move _15, "attempt to compute `{} / {}`, which would overflow", _10, const 4_i32) -> bb3;
    }

    bb3: {
        _9 = Div(move _10, const 4_i32);
        _6 = Add(move _7, move _9);
        _18 = _2;
        _17 = Sub(move _18, const 1_i32);
        _19 = Eq(const 100_i32, const 0_i32);
        assert(!move _19, "attempt to divide `{}` by zero", _17) -> bb4;
    }

    bb4: {
        _20 = Eq(const 100_i32, const -1_i32);
        _21 = Eq(_17, const i32::MIN);
        _22 = BitAnd(move _20, move _21);
        assert(!move _22, "attempt to compute `{} / {}`, which would overflow", _17, const 100_i32) -> bb5;
    }

    bb5: {
        _16 = Div(move _17, const 100_i32);
        _5 = Sub(move _6, move _16);
        _25 = _2;
        _24 = Sub(move _25, const 1_i32);
        _26 = Eq(const 400_i32, const 0_i32);
        assert(!move _26, "attempt to divide `{}` by zero", _24) -> bb6;
    }

    bb6: {
        _27 = Eq(const 400_i32, const -1_i32);
        _28 = Eq(_24, const i32::MIN);
        _29 = BitAnd(move _27, move _28);
        assert(!move _29, "attempt to compute `{} / {}`, which would overflow", _24, const 400_i32) -> bb7;
    }

    bb7: {
        _23 = Div(move _24, const 400_i32);
        _4 = Add(move _5, move _23);
        _30 = Eq(const 7_i32, const 0_i32);
        assert(!move _30, "attempt to calculate the remainder of `{}` with a divisor of zero", _4) -> bb8;
    }

    bb8: {
        _31 = Eq(const 7_i32, const -1_i32);
        _32 = Eq(_4, const i32::MIN);
        _33 = BitAnd(move _31, move _32);
        assert(!move _33, "attempt to compute the remainder of `{} % {}`, which would overflow", _4, const 7_i32) -> bb9;
    }

    bb9: {
        _3 = Rem(move _4, const 7_i32);
        _38 = NaiveDate::day_of_year(_1) -> bb10;
    }

    bb10: {
        _37 = move _38 as i32 (IntToInt);
        _36 = Sub(move _37, const 1_i32);
        _35 = Add(_3, move _36);
        _39 = Eq(const 7_i32, const 0_i32);
        assert(!move _39, "attempt to calculate the remainder of `{}` with a divisor of zero", _35) -> bb11;
    }

    bb11: {
        _40 = Eq(const 7_i32, const -1_i32);
        _41 = Eq(_35, const i32::MIN);
        _42 = BitAnd(move _40, move _41);
        assert(!move _42, "attempt to compute the remainder of `{} % {}`, which would overflow", _35, const 7_i32) -> bb12;
    }

    bb12: {
        _34 = Rem(move _35, const 7_i32);
        _44 = Weekday::Sun;
        _45 = Weekday::Mon;
        _46 = Weekday::Tue;
        _47 = Weekday::Wed;
        _48 = Weekday::Thu;
        _49 = Weekday::Fri;
        _50 = Weekday::Sat;
        _43 = [move _44, move _45, move _46, move _47, move _48, move _49, move _50];
        _51 = _34 as usize (IntToInt);
        _52 = const 7_usize;
        _53 = Lt(_51, _52);
        assert(move _53, "index out of bounds: the length is {} but the index is {}", move _52, _51) -> bb13;
    }

    bb13: {
        _0 = _43[_51];
        return;
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:18:1: 18:15>::isoweekdate(_1: &NaiveDate) -> (i32, u32, Weekday) {
    debug self => _1;
    let mut _0: (i32, u32, Weekday);
    let _2: u32;
    let mut _3: &Weekday;
    let _4: Weekday;
    let mut _6: u32;
    let mut _8: u32;
    let mut _9: u32;
    let mut _10: u32;
    let mut _11: bool;
    let mut _12: bool;
    let mut _16: bool;
    let mut _17: i32;
    let mut _18: i32;
    let mut _19: i32;
    let mut _20: u32;
    let mut _21: &NaiveDate;
    let _22: NaiveDate;
    let mut _23: i32;
    let mut _24: i32;
    let mut _25: Weekday;
    let mut _26: bool;
    let mut _27: i32;
    let mut _28: i32;
    let mut _29: u32;
    let mut _30: i32;
    let mut _31: i32;
    let mut _32: u32;
    let mut _33: i32;
    let mut _34: i32;
    let mut _35: i32;
    let mut _36: i32;
    let mut _37: u32;
    let mut _38: Weekday;
    let mut _39: i32;
    let mut _40: u32;
    let mut _41: i32;
    let mut _42: i32;
    let mut _43: Weekday;
    scope 1 {
        debug first_dow_mon_0 => _2;
        let _5: u32;
        scope 2 {
            debug doy_0 => _5;
            let mut _7: i32;
            scope 3 {
                debug week_mon_0 => _7;
                let _13: u32;
                scope 4 {
                    debug weeks_in_year => _13;
                    let _14: i32;
                    scope 5 {
                        debug year => _14;
                        let _15: Weekday;
                        scope 6 {
                            debug wd => _15;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _4 = NaiveDate::year_first_day_of_week(_1) -> bb1;
    }

    bb1: {
        _3 = &_4;
        _2 = Weekday::num_days_from_monday(move _3) -> bb2;
    }

    bb2: {
        _6 = NaiveDate::day_of_year(_1) -> bb3;
    }

    bb3: {
        _5 = Sub(move _6, const 1_u32);
        _10 = _2;
        _9 = Add(move _10, _5);
        _11 = Eq(const 7_u32, const 0_u32);
        assert(!move _11, "attempt to divide `{}` by zero", _9) -> bb4;
    }

    bb4: {
        _8 = Div(move _9, const 7_u32);
        _7 = move _8 as i32 (IntToInt);
        _12 = NaiveDate::first_week_in_prev_year(_1) -> bb5;
    }

    bb5: {
        switchInt(move _12) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _7 = Sub(_7, const 1_i32);
        goto -> bb7;
    }

    bb7: {
        _13 = NaiveDate::last_week_number(_1) -> bb8;
    }

    bb8: {
        _14 = NaiveDate::year(_1) -> bb9;
    }

    bb9: {
        _15 = NaiveDate::weekday(_1) -> bb10;
    }

    bb10: {
        _17 = _7;
        _16 = Lt(move _17, const 0_i32);
        switchInt(move _16) -> [0: bb14, otherwise: bb11];
    }

    bb11: {
        _19 = _14;
        _18 = Sub(move _19, const 1_i32);
        _24 = _14;
        _23 = Sub(move _24, const 1_i32);
        _22 = NaiveDate::from_ymd(move _23, const 1_u32, const 1_u32) -> bb12;
    }

    bb12: {
        _21 = &_22;
        _20 = NaiveDate::last_week_number(move _21) -> bb13;
    }

    bb13: {
        _25 = _15;
        _0 = (move _18, move _20, move _25);
        goto -> bb17;
    }

    bb14: {
        _27 = _7;
        _29 = _13;
        _28 = move _29 as i32 (IntToInt);
        _26 = Ge(move _27, move _28);
        switchInt(move _26) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _31 = _14;
        _30 = Add(move _31, const 1_i32);
        _35 = _7;
        _34 = Add(move _35, const 1_i32);
        _37 = _13;
        _36 = move _37 as i32 (IntToInt);
        _33 = Sub(move _34, move _36);
        _32 = move _33 as u32 (IntToInt);
        _38 = _15;
        _0 = (move _30, move _32, move _38);
        goto -> bb17;
    }

    bb16: {
        _39 = _14;
        _42 = _7;
        _41 = Add(move _42, const 1_i32);
        _40 = move _41 as u32 (IntToInt);
        _43 = _15;
        _0 = (move _39, move _40, move _43);
        goto -> bb17;
    }

    bb17: {
        return;
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:18:1: 18:15>::first_week_in_prev_year(_1: &NaiveDate) -> bool {
    debug self => _1;
    let mut _0: bool;
    let _2: u32;
    let mut _3: &Weekday;
    let _4: Weekday;
    let mut _5: u32;
    let mut _6: u32;
    let mut _7: u32;
    let mut _8: bool;
    scope 1 {
        debug first_dow_mon_0 => _2;
    }

    bb0: {
        _4 = NaiveDate::year_first_day_of_week(_1) -> bb1;
    }

    bb1: {
        _3 = &_4;
        _2 = Weekday::num_days_from_monday(move _3) -> bb2;
    }

    bb2: {
        _7 = _2;
        _6 = Sub(const 7_u32, move _7);
        _8 = Eq(const 7_u32, const 0_u32);
        assert(!move _8, "attempt to calculate the remainder of `{}` with a divisor of zero", _6) -> bb3;
    }

    bb3: {
        _5 = Rem(move _6, const 7_u32);
        _0 = Lt(move _5, const 4_u32);
        return;
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:18:1: 18:15>::year_first_day_of_week(_1: &NaiveDate) -> Weekday {
    debug self => _1;
    let mut _0: Weekday;
    let mut _2: &NaiveDate;
    let _3: NaiveDate;
    let mut _4: i32;

    bb0: {
        _4 = NaiveDate::year(_1) -> bb1;
    }

    bb1: {
        _3 = NaiveDate::from_ymd(move _4, const 1_u32, const 1_u32) -> bb2;
    }

    bb2: {
        _2 = &_3;
        _0 = NaiveDate::weekday(move _2) -> bb3;
    }

    bb3: {
        return;
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:18:1: 18:15>::weeks_in_year(_1: &NaiveDate) -> u32 {
    debug self => _1;
    let mut _0: u32;
    let _2: u32;
    let mut _3: u32;
    let mut _4: &Weekday;
    let _5: Weekday;
    let mut _6: bool;
    scope 1 {
        debug days_in_last_week => _2;
    }

    bb0: {
        _5 = NaiveDate::year_first_day_of_week(_1) -> bb1;
    }

    bb1: {
        _4 = &_5;
        _3 = Weekday::num_days_from_monday(move _4) -> bb2;
    }

    bb2: {
        _2 = Add(move _3, const 1_u32);
        _6 = Ge(_2, const 4_u32);
        switchInt(move _6) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _0 = const 53_u32;
        goto -> bb5;
    }

    bb4: {
        _0 = const 52_u32;
        goto -> bb5;
    }

    bb5: {
        return;
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:18:1: 18:15>::last_week_number(_1: &NaiveDate) -> u32 {
    debug self => _1;
    let mut _0: u32;
    let _2: u32;
    let mut _3: bool;
    let mut _4: u32;
    scope 1 {
        debug wiy => _2;
    }

    bb0: {
        _2 = NaiveDate::weeks_in_year(_1) -> bb1;
    }

    bb1: {
        _3 = NaiveDate::first_week_in_prev_year(_1) -> bb2;
    }

    bb2: {
        switchInt(move _3) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _4 = _2;
        _0 = Sub(move _4, const 1_u32);
        goto -> bb5;
    }

    bb4: {
        _0 = _2;
        goto -> bb5;
    }

    bb5: {
        return;
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:18:1: 18:15>::day_of_year(_1: &NaiveDate) -> u32 {
    debug self => _1;
    let mut _0: u32;
    let mut _2: u32;
    let mut _3: std::iter::Map<std::ops::Range<u32>, [closure@ui/impl-trait/example-calendar.rs:113:25: 113:28]>;
    let mut _4: std::ops::Range<u32>;
    let mut _5: u32;
    let mut _6: [closure@ui/impl-trait/example-calendar.rs:113:25: 113:28];
    let mut _7: &&NaiveDate;
    let mut _8: u32;
    let mut _9: &NaiveDate;

    bb0: {
        _5 = ((*_1).1: u32);
        _4 = std::ops::Range::<u32> { start: const 1_u32, end: move _5 };
        _7 = &_1;
        _6 = [closure@ui/impl-trait/example-calendar.rs:113:25: 113:28] { self: move _7 };
        _3 = <std::ops::Range<u32> as Iterator>::map::<u32, [closure@ui/impl-trait/example-calendar.rs:113:25: 113:28]>(move _4, move _6) -> bb1;
    }

    bb1: {
        _2 = <Map<std::ops::Range<u32>, [closure@ui/impl-trait/example-calendar.rs:113:25: 113:28]> as Iterator>::fold::<u32, [closure@ui/impl-trait/example-calendar.rs:114:22: 114:27]>(move _3, const 0_u32, const ZeroSized: [closure@ui/impl-trait/example-calendar.rs:114:22: 114:27]) -> bb2;
    }

    bb2: {
        _9 = _1;
        _8 = NaiveDate::day(move _9) -> bb3;
    }

    bb3: {
        _0 = Add(move _2, move _8);
        return;
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:18:1: 18:15>::day_of_year::{closure#0}(_1: &mut [closure@ui/impl-trait/example-calendar.rs:113:25: 113:28], _2: u32) -> u32 {
    debug m => _2;
    debug self => (*((*_1).0: &&NaiveDate));
    let mut _0: u32;
    let mut _3: &NaiveDate;
    let _4: NaiveDate;
    let mut _5: i32;
    let mut _6: &&NaiveDate;
    let mut _7: &NaiveDate;

    bb0: {
        _6 = deref_copy ((*_1).0: &&NaiveDate);
        _7 = deref_copy (*_6);
        _5 = NaiveDate::year(_7) -> bb1;
    }

    bb1: {
        _4 = NaiveDate::from_ymd(move _5, _2, const 1_u32) -> bb2;
    }

    bb2: {
        _3 = &_4;
        _0 = NaiveDate::days_in_month(move _3) -> bb3;
    }

    bb3: {
        return;
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:18:1: 18:15>::day_of_year::{closure#1}(_1: &mut [closure@ui/impl-trait/example-calendar.rs:114:22: 114:27], _2: u32, _3: u32) -> u32 {
    debug a => _2;
    debug b => _3;
    let mut _0: u32;

    bb0: {
        _0 = Add(_2, _3);
        return;
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:18:1: 18:15>::is_leap_year(_1: &NaiveDate) -> bool {
    debug self => _1;
    let mut _0: bool;
    let _2: i32;
    let mut _3: i32;
    let mut _4: i32;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: i32;
    let mut _10: i32;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: i32;
    let mut _17: i32;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: bool;
    scope 1 {
        debug year => _2;
    }

    bb0: {
        _2 = NaiveDate::year(_1) -> bb1;
    }

    bb1: {
        _4 = _2;
        _5 = Eq(const 4_i32, const 0_i32);
        assert(!move _5, "attempt to calculate the remainder of `{}` with a divisor of zero", _4) -> bb2;
    }

    bb2: {
        _6 = Eq(const 4_i32, const -1_i32);
        _7 = Eq(_4, const i32::MIN);
        _8 = BitAnd(move _6, move _7);
        assert(!move _8, "attempt to compute the remainder of `{} % {}`, which would overflow", _4, const 4_i32) -> bb3;
    }

    bb3: {
        _3 = Rem(move _4, const 4_i32);
        switchInt(move _3) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _0 = const false;
        goto -> bb12;
    }

    bb5: {
        _10 = _2;
        _11 = Eq(const 100_i32, const 0_i32);
        assert(!move _11, "attempt to calculate the remainder of `{}` with a divisor of zero", _10) -> bb6;
    }

    bb6: {
        _12 = Eq(const 100_i32, const -1_i32);
        _13 = Eq(_10, const i32::MIN);
        _14 = BitAnd(move _12, move _13);
        assert(!move _14, "attempt to compute the remainder of `{} % {}`, which would overflow", _10, const 100_i32) -> bb7;
    }

    bb7: {
        _9 = Rem(move _10, const 100_i32);
        switchInt(move _9) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _0 = const true;
        goto -> bb12;
    }

    bb9: {
        _17 = _2;
        _18 = Eq(const 400_i32, const 0_i32);
        assert(!move _18, "attempt to calculate the remainder of `{}` with a divisor of zero", _17) -> bb10;
    }

    bb10: {
        _19 = Eq(const 400_i32, const -1_i32);
        _20 = Eq(_17, const i32::MIN);
        _21 = BitAnd(move _19, move _20);
        assert(!move _21, "attempt to compute the remainder of `{} % {}`, which would overflow", _17, const 400_i32) -> bb11;
    }

    bb11: {
        _16 = Rem(move _17, const 400_i32);
        _15 = Ne(move _16, const 0_i32);
        _0 = Not(_15);
        goto -> bb12;
    }

    bb12: {
        return;
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:18:1: 18:15>::days_in_month(_1: &NaiveDate) -> u32 {
    debug self => _1;
    let mut _0: u32;
    let mut _2: u32;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        _2 = NaiveDate::month(_1) -> bb1;
    }

    bb1: {
        switchInt(_2) -> [1: bb3, 2: bb4, 3: bb8, 4: bb9, 5: bb10, 6: bb11, 7: bb12, 8: bb13, 9: bb14, 10: bb15, 11: bb16, 12: bb17, otherwise: bb2];
    }

    bb2: {
        _4 = core::panicking::panic(const "internal error: entered unreachable code");
    }

    bb3: {
        _0 = const 31_u32;
        goto -> bb18;
    }

    bb4: {
        _3 = NaiveDate::is_leap_year(_1) -> bb5;
    }

    bb5: {
        switchInt(move _3) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _0 = const 29_u32;
        goto -> bb18;
    }

    bb7: {
        _0 = const 28_u32;
        goto -> bb18;
    }

    bb8: {
        _0 = const 31_u32;
        goto -> bb18;
    }

    bb9: {
        _0 = const 30_u32;
        goto -> bb18;
    }

    bb10: {
        _0 = const 31_u32;
        goto -> bb18;
    }

    bb11: {
        _0 = const 30_u32;
        goto -> bb18;
    }

    bb12: {
        _0 = const 31_u32;
        goto -> bb18;
    }

    bb13: {
        _0 = const 31_u32;
        goto -> bb18;
    }

    bb14: {
        _0 = const 30_u32;
        goto -> bb18;
    }

    bb15: {
        _0 = const 31_u32;
        goto -> bb18;
    }

    bb16: {
        _0 = const 30_u32;
        goto -> bb18;
    }

    bb17: {
        _0 = const 31_u32;
        goto -> bb18;
    }

    bb18: {
        return;
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:149:1: 149:60>::add(_1: &NaiveDate, _2: &NaiveDate) -> NaiveDate {
    debug self => _1;
    debug other => _2;
    let mut _0: NaiveDate;
    let mut _3: (&NaiveDate, &NaiveDate);
    let mut _4: &NaiveDate;
    let _5: NaiveDate;
    let _6: &NaiveDate;
    let _7: &NaiveDate;
    let mut _8: bool;
    let mut _9: bool;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }

    bb0: {
        _5 = NaiveDate(const 0_i32, const 0_u32, const 1_u32);
        _4 = &_5;
        _3 = (_2, move _4);
        _6 = (_3.0: &NaiveDate);
        _7 = (_3.1: &NaiveDate);
        _9 = <NaiveDate as PartialEq>::eq(_6, _7) -> bb1;
    }

    bb1: {
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<NaiveDate, NaiveDate>(move _10, _6, _7, move _12);
    }

    bb3: {
        _0 = NaiveDate::succ(_1) -> bb4;
    }

    bb4: {
        return;
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:158:1: 158:35>::steps_between(_1: &NaiveDate, _2: &NaiveDate) -> Option<usize> {
    let mut _0: std::option::Option<usize>;
    let mut _3: !;

    bb0: {
        _3 = core::panicking::panic(const "not implemented");
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:158:1: 158:35>::forward_checked(_1: NaiveDate, _2: usize) -> Option<NaiveDate> {
    debug start => _1;
    debug n => _2;
    let mut _0: std::option::Option<NaiveDate>;
    let mut _3: NaiveDate;
    let mut _4: std::ops::Range<usize>;

    bb0: {
        _4 = std::ops::Range::<usize> { start: const 0_usize, end: _2 };
        _3 = <std::ops::Range<usize> as Iterator>::fold::<NaiveDate, [closure@ui/impl-trait/example-calendar.rs:164:33: 164:39]>(move _4, _1, const ZeroSized: [closure@ui/impl-trait/example-calendar.rs:164:33: 164:39]) -> bb1;
    }

    bb1: {
        _0 = Option::<NaiveDate>::Some(move _3);
        return;
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:158:1: 158:35>::forward_checked::{closure#0}(_1: &mut [closure@ui/impl-trait/example-calendar.rs:164:33: 164:39], _2: NaiveDate, _3: usize) -> NaiveDate {
    debug x => _2;
    let mut _0: NaiveDate;
    let mut _4: &NaiveDate;

    bb0: {
        _4 = &_2;
        _0 = NaiveDate::succ(move _4) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:158:1: 158:35>::backward_checked(_1: NaiveDate, _2: usize) -> Option<NaiveDate> {
    let mut _0: std::option::Option<NaiveDate>;
    let mut _3: !;

    bb0: {
        _3 = core::panicking::panic(const "not implemented");
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:172:16: 172:21>::clone(_1: &Weekday) -> Weekday {
    debug self => _1;
    let mut _0: Weekday;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:172:23: 172:28>::fmt(_1: &Weekday, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: &str;
    let mut _4: isize;
    let _5: &str;
    let _6: &str;
    let _7: &str;
    let _8: &str;
    let _9: &str;
    let _10: &str;
    let _11: &str;

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb8, 6: bb1, otherwise: bb2];
    }

    bb1: {
        _11 = const "Sun";
        _3 = _11;
        goto -> bb9;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = const "Mon";
        _3 = _5;
        goto -> bb9;
    }

    bb4: {
        _6 = const "Tue";
        _3 = _6;
        goto -> bb9;
    }

    bb5: {
        _7 = const "Wed";
        _3 = _7;
        goto -> bb9;
    }

    bb6: {
        _8 = const "Thu";
        _3 = _8;
        goto -> bb9;
    }

    bb7: {
        _9 = const "Fri";
        _3 = _9;
        goto -> bb9;
    }

    bb8: {
        _10 = const "Sat";
        _3 = _10;
        goto -> bb9;
    }

    bb9: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> bb10;
    }

    bb10: {
        return;
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:172:30: 172:32>::assert_receiver_is_total_eq(_1: &Weekday) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:172:34: 172:37>::cmp(_1: &Weekday, _2: &Weekday) -> std::cmp::Ordering {
    debug self => _1;
    debug other => _2;
    let mut _0: std::cmp::Ordering;
    let _3: isize;
    let _5: &isize;
    let _6: &isize;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _5 = &_3;
        _6 = &_4;
        _0 = <isize as Ord>::cmp(_5, _6) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:172:39: 172:48>::eq(_1: &Weekday, _2: &Weekday) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _0 = Eq(_3, _4);
        return;
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:172:50: 172:60>::partial_cmp(_1: &Weekday, _2: &Weekday) -> Option<std::cmp::Ordering> {
    debug self => _1;
    debug other => _2;
    let mut _0: std::option::Option<std::cmp::Ordering>;
    let _3: isize;
    let _5: &isize;
    let _6: &isize;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _5 = &_3;
        _6 = &_4;
        _0 = <isize as PartialOrd>::partial_cmp(_5, _6) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:183:1: 183:13>::num_days_from_monday(_1: &Weekday) -> u32 {
    debug self => _1;
    let mut _0: u32;
    let mut _2: isize;

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb8, 6: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const 6_u32;
        goto -> bb9;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _0 = const 0_u32;
        goto -> bb9;
    }

    bb4: {
        _0 = const 1_u32;
        goto -> bb9;
    }

    bb5: {
        _0 = const 2_u32;
        goto -> bb9;
    }

    bb6: {
        _0 = const 3_u32;
        goto -> bb9;
    }

    bb7: {
        _0 = const 4_u32;
        goto -> bb9;
    }

    bb8: {
        _0 = const 5_u32;
        goto -> bb9;
    }

    bb9: {
        return;
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:183:1: 183:13>::num_days_from_sunday(_1: &Weekday) -> u32 {
    debug self => _1;
    let mut _0: u32;
    let mut _2: isize;

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb4, 1: bb5, 2: bb6, 3: bb7, 4: bb8, 5: bb1, 6: bb3, otherwise: bb2];
    }

    bb1: {
        _0 = const 6_u32;
        goto -> bb9;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _0 = const 0_u32;
        goto -> bb9;
    }

    bb4: {
        _0 = const 1_u32;
        goto -> bb9;
    }

    bb5: {
        _0 = const 2_u32;
        goto -> bb9;
    }

    bb6: {
        _0 = const 3_u32;
        goto -> bb9;
    }

    bb7: {
        _0 = const 4_u32;
        goto -> bb9;
    }

    bb8: {
        _0 = const 5_u32;
        goto -> bb9;
    }

    bb9: {
        return;
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:217:1: 217:37>::clone(_1: &GroupBy<It, F>) -> GroupBy<It, F> {
    debug self => _1;
    let mut _0: GroupBy<It, F>;
    let mut _2: std::iter::Peekable<It>;
    let mut _3: &std::iter::Peekable<It>;
    let mut _4: F;
    let mut _5: &F;

    bb0: {
        _3 = &((*_1).0: std::iter::Peekable<It>);
        _2 = <Peekable<It> as Clone>::clone(move _3) -> bb1;
    }

    bb1: {
        _5 = &((*_1).1: F);
        _4 = <F as Clone>::clone(move _5) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        _0 = GroupBy::<It, F> { it: move _2, f: move _4 };
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:231:1: 231:55>::next(_1: &mut GroupBy<It, F>) -> Option<(G, InGroup<Peekable<It>, F, G>)> {
    debug self => _1;
    let mut _0: std::option::Option<(G, InGroup<std::iter::Peekable<It>, F, G>)>;
    let mut _2: std::option::Option<G>;
    let mut _3: std::option::Option<&<It as std::iter::Iterator>::Item>;
    let mut _4: &mut std::iter::Peekable<It>;
    let mut _5: &mut F;
    let mut _6: [closure@ui/impl-trait/example-calendar.rs:240:45: 240:50];
    let mut _7: &mut &mut GroupBy<It, F>;

    bb0: {
        _4 = &mut ((*_1).0: std::iter::Peekable<It>);
        _3 = Peekable::<It>::peek(move _4) -> bb1;
    }

    bb1: {
        _5 = &mut ((*_1).1: F);
        _2 = Option::<&<It as Iterator>::Item>::map::<G, &mut F>(move _3, move _5) -> bb2;
    }

    bb2: {
        _7 = &mut _1;
        _6 = [closure@ui/impl-trait/example-calendar.rs:240:45: 240:50] { self: move _7 };
        _0 = Option::<G>::map::<(G, InGroup<Peekable<It>, F, G>), [closure@ui/impl-trait/example-calendar.rs:240:45: 240:50]>(move _2, move _6) -> bb3;
    }

    bb3: {
        return;
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:231:1: 231:55>::next::{closure#0}(_1: [closure@ui/impl-trait/example-calendar.rs:240:45: 240:50], _2: G) -> (G, InGroup<Peekable<It>, F, G>) {
    debug key => _2;
    debug self => (*(_1.0: &mut &mut GroupBy<It, F>));
    let mut _0: (G, InGroup<std::iter::Peekable<It>, F, G>);
    let _3: std::iter::Peekable<It>;
    let mut _4: &std::iter::Peekable<It>;
    let mut _5: std::option::Option<G>;
    let mut _6: std::option::Option<&<It as std::iter::Iterator>::Item>;
    let mut _7: &mut std::iter::Peekable<It>;
    let mut _8: &mut F;
    let mut _9: isize;
    let mut _11: bool;
    let mut _12: &G;
    let mut _13: &G;
    let _14: std::option::Option<<It as std::iter::Iterator>::Item>;
    let mut _15: &mut std::iter::Peekable<It>;
    let mut _16: G;
    let mut _17: &G;
    let mut _18: InGroup<std::iter::Peekable<It>, F, G>;
    let mut _19: std::iter::Peekable<It>;
    let mut _20: F;
    let mut _21: &F;
    let mut _22: G;
    let mut _23: &mut &mut GroupBy<It, F>;
    let mut _24: &mut GroupBy<It, F>;
    let mut _25: &mut &mut GroupBy<It, F>;
    let mut _26: &mut GroupBy<It, F>;
    let mut _27: &mut &mut GroupBy<It, F>;
    let mut _28: &mut GroupBy<It, F>;
    let mut _29: &mut &mut GroupBy<It, F>;
    let mut _30: &mut GroupBy<It, F>;
    let mut _31: &mut &mut GroupBy<It, F>;
    let mut _32: &mut GroupBy<It, F>;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: isize;
    scope 1 {
        debug start => _3;
        scope 2 {
            debug k => _10;
            let _10: G;
        }
    }

    bb0: {
        _34 = const false;
        _33 = const false;
        _23 = deref_copy (_1.0: &mut &mut GroupBy<It, F>);
        _24 = deref_copy (*_23);
        _4 = &((*_24).0: std::iter::Peekable<It>);
        _3 = <Peekable<It> as Clone>::clone(move _4) -> [return: bb1, unwind: bb17];
    }

    bb1: {
        _34 = const true;
        goto -> bb2;
    }

    bb2: {
        _25 = deref_copy (_1.0: &mut &mut GroupBy<It, F>);
        _26 = deref_copy (*_25);
        _7 = &mut ((*_26).0: std::iter::Peekable<It>);
        _6 = Peekable::<It>::peek(move _7) -> [return: bb3, unwind: bb24];
    }

    bb3: {
        _27 = deref_copy (_1.0: &mut &mut GroupBy<It, F>);
        _28 = deref_copy (*_27);
        _8 = &mut ((*_28).1: F);
        _5 = Option::<&<It as Iterator>::Item>::map::<G, &mut F>(move _6, move _8) -> [return: bb4, unwind: bb24];
    }

    bb4: {
        _33 = const true;
        _9 = discriminant(_5);
        switchInt(move _9) -> [1: bb5, otherwise: bb22];
    }

    bb5: {
        _33 = const false;
        _10 = move ((_5 as Some).0: G);
        _12 = &_2;
        _13 = &_10;
        _11 = <G as PartialEq>::ne(move _12, move _13) -> [return: bb6, unwind: bb16];
    }

    bb6: {
        switchInt(move _11) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        drop(_10) -> [return: bb22, unwind: bb24];
    }

    bb8: {
        _29 = deref_copy (_1.0: &mut &mut GroupBy<It, F>);
        _30 = deref_copy (*_29);
        _15 = &mut ((*_30).0: std::iter::Peekable<It>);
        _14 = <Peekable<It> as Iterator>::next(move _15) -> [return: bb9, unwind: bb16];
    }

    bb9: {
        drop(_14) -> [return: bb10, unwind: bb16];
    }

    bb10: {
        drop(_10) -> [return: bb11, unwind: bb24];
    }

    bb11: {
        _33 = const false;
        goto -> bb2;
    }

    bb12: {
        _34 = const false;
        _19 = move _3;
        _31 = deref_copy (_1.0: &mut &mut GroupBy<It, F>);
        _32 = deref_copy (*_31);
        _21 = &((*_32).1: F);
        _20 = <F as Clone>::clone(move _21) -> [return: bb13, unwind: bb14];
    }

    bb13: {
        _22 = move _2;
        _18 = InGroup::<Peekable<It>, F, G> { it: move _19, f: move _20, g: move _22 };
        _0 = (move _16, move _18);
        _34 = const false;
        return;
    }

    bb14 (cleanup): {
        drop(_19) -> [return: bb15, unwind terminate];
    }

    bb15 (cleanup): {
        drop(_16) -> [return: bb24, unwind terminate];
    }

    bb16 (cleanup): {
        drop(_10) -> [return: bb24, unwind terminate];
    }

    bb17 (cleanup): {
        drop(_2) -> [return: bb18, unwind terminate];
    }

    bb18 (cleanup): {
        resume;
    }

    bb19: {
        _33 = const false;
        _17 = &_2;
        _16 = <G as Clone>::clone(move _17) -> [return: bb12, unwind: bb24];
    }

    bb20: {
        switchInt(_33) -> [0: bb19, otherwise: bb21];
    }

    bb21: {
        drop(((_5 as Some).0: G)) -> [return: bb19, unwind: bb24];
    }

    bb22: {
        _35 = discriminant(_5);
        switchInt(move _35) -> [1: bb20, otherwise: bb19];
    }

    bb23 (cleanup): {
        drop(_3) -> [return: bb17, unwind terminate];
    }

    bb24 (cleanup): {
        switchInt(_34) -> [0: bb17, otherwise: bb23];
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:258:16: 258:21>::clone(_1: &InGroup<It, F, G>) -> InGroup<It, F, G> {
    debug self => _1;
    let mut _0: InGroup<It, F, G>;
    let mut _2: It;
    let _3: &It;
    let mut _4: F;
    let _5: &F;
    let mut _6: G;
    let _7: &G;

    bb0: {
        _3 = &((*_1).0: It);
        _2 = <It as Clone>::clone(_3) -> bb1;
    }

    bb1: {
        _5 = &((*_1).1: F);
        _4 = <F as Clone>::clone(_5) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _7 = &((*_1).2: G);
        _6 = <G as Clone>::clone(_7) -> [return: bb3, unwind: bb4];
    }

    bb3: {
        _0 = InGroup::<It, F, G> { it: move _2, f: move _4, g: move _6 };
        return;
    }

    bb4 (cleanup): {
        drop(_4) -> [return: bb5, unwind terminate];
    }

    bb5 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:265:1: 265:83>::next(_1: &mut InGroup<It, F, G>) -> Option<<It as Iterator>::Item> {
    debug self => _1;
    let mut _0: std::option::Option<<It as std::iter::Iterator>::Item>;
    let mut _2: std::option::Option<<It as std::iter::Iterator>::Item>;
    let mut _3: &mut It;
    let mut _4: [closure@ui/impl-trait/example-calendar.rs:269:33: 269:36];
    let mut _5: &mut &mut InGroup<It, F, G>;

    bb0: {
        _3 = &mut ((*_1).0: It);
        _2 = <It as Iterator>::next(move _3) -> bb1;
    }

    bb1: {
        _5 = &mut _1;
        _4 = [closure@ui/impl-trait/example-calendar.rs:269:33: 269:36] { self: move _5 };
        _0 = Option::<<It as Iterator>::Item>::and_then::<<It as Iterator>::Item, [closure@ui/impl-trait/example-calendar.rs:269:33: 269:36]>(move _2, move _4) -> bb2;
    }

    bb2: {
        return;
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:265:1: 265:83>::next::{closure#0}(_1: [closure@ui/impl-trait/example-calendar.rs:269:33: 269:36], _2: <It as Iterator>::Item) -> Option<<It as Iterator>::Item> {
    debug x => _2;
    debug self => (*(_1.0: &mut &mut InGroup<It, F, G>));
    let mut _0: std::option::Option<<It as std::iter::Iterator>::Item>;
    let mut _3: bool;
    let mut _4: &G;
    let _5: G;
    let mut _6: &mut F;
    let mut _7: (&<It as std::iter::Iterator>::Item,);
    let _8: &<It as std::iter::Iterator>::Item;
    let mut _9: &G;
    let mut _10: <It as std::iter::Iterator>::Item;
    let mut _11: &mut &mut InGroup<It, F, G>;
    let mut _12: &mut InGroup<It, F, G>;
    let mut _13: &mut &mut InGroup<It, F, G>;
    let mut _14: &mut InGroup<It, F, G>;
    let mut _15: bool;

    bb0: {
        _15 = const false;
        _15 = const true;
        _11 = deref_copy (_1.0: &mut &mut InGroup<It, F, G>);
        _12 = deref_copy (*_11);
        _6 = &mut ((*_12).1: F);
        _8 = &_2;
        _7 = (_8,);
        _5 = <F as FnMut<(&<It as Iterator>::Item,)>>::call_mut(move _6, move _7) -> [return: bb1, unwind: bb9];
    }

    bb1: {
        _4 = &_5;
        _13 = deref_copy (_1.0: &mut &mut InGroup<It, F, G>);
        _14 = deref_copy (*_13);
        _9 = &((*_14).2: G);
        _3 = <G as PartialEq>::eq(move _4, move _9) -> [return: bb2, unwind: bb8];
    }

    bb2: {
        drop(_5) -> [return: bb3, unwind: bb9];
    }

    bb3: {
        switchInt(move _3) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _15 = const false;
        _10 = move _2;
        _0 = Option::<<It as Iterator>::Item>::Some(move _10);
        goto -> bb6;
    }

    bb5: {
        _0 = Option::<<It as Iterator>::Item>::None;
        goto -> bb6;
    }

    bb6: {
        switchInt(_15) -> [0: bb7, otherwise: bb11];
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_5) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        drop(_2) -> [return: bb10, unwind terminate];
    }

    bb10 (cleanup): {
        resume;
    }

    bb11: {
        drop(_2) -> bb7;
    }
}

fn IteratorExt::group_by(_1: Self, _2: F) -> GroupBy<Self, F> {
    debug self => _1;
    debug f => _2;
    let mut _0: GroupBy<Self, F>;
    let mut _3: std::iter::Peekable<Self>;
    let mut _4: F;

    bb0: {
        _3 = <Self as Iterator>::peekable(move _1) -> [return: bb1, unwind: bb2];
    }

    bb1: {
        _4 = move _2;
        _0 = GroupBy::<Self, F> { it: move _3, f: move _4 };
        return;
    }

    bb2 (cleanup): {
        drop(_2) -> [return: bb3, unwind terminate];
    }

    bb3 (cleanup): {
        resume;
    }
}

fn IteratorExt::join(_1: Self, _2: &str) -> String {
    debug self => _1;
    debug sep => _2;
    let mut _0: std::string::String;
    let mut _3: std::string::String;
    let mut _4: std::option::Option<<Self as std::iter::Iterator>::Item>;
    let mut _5: &mut Self;
    let mut _6: isize;
    let _8: ();
    let mut _9: std::result::Result<(), std::fmt::Error>;
    let mut _10: &mut std::string::String;
    let mut _11: std::fmt::Arguments<'_>;
    let mut _12: &[&str];
    let _13: &[&str; 1];
    let _14: [&str; 1];
    let mut _15: &[core::fmt::rt::Argument<'_>];
    let _16: &[core::fmt::rt::Argument<'_>; 1];
    let _17: [core::fmt::rt::Argument<'_>; 1];
    let mut _18: core::fmt::rt::Argument<'_>;
    let _19: &<Self as std::iter::Iterator>::Item;
    let mut _20: Self;
    let mut _21: Self;
    let mut _23: std::option::Option<<Self as std::iter::Iterator>::Item>;
    let mut _24: &mut Self;
    let mut _25: isize;
    let _27: ();
    let mut _28: &mut std::string::String;
    let _29: ();
    let mut _30: std::result::Result<(), std::fmt::Error>;
    let mut _31: &mut std::string::String;
    let mut _32: std::fmt::Arguments<'_>;
    let mut _33: &[&str];
    let _34: &[&str; 1];
    let _35: [&str; 1];
    let mut _36: &[core::fmt::rt::Argument<'_>];
    let _37: &[core::fmt::rt::Argument<'_>; 1];
    let _38: [core::fmt::rt::Argument<'_>; 1];
    let mut _39: core::fmt::rt::Argument<'_>;
    let _40: &<Self as std::iter::Iterator>::Item;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: isize;
    scope 1 {
        debug s => _3;
        scope 2 {
            debug e => _7;
            let _7: <Self as std::iter::Iterator>::Item;
            let mut _22: Self;
            scope 3 {
                debug iter => _22;
                let _26: <Self as std::iter::Iterator>::Item;
                scope 4 {
                    debug e => _26;
                }
            }
        }
    }

    bb0: {
        _42 = const false;
        _41 = const false;
        _42 = const true;
        _3 = String::new() -> [return: bb1, unwind: bb32];
    }

    bb1: {
        _5 = &mut _1;
        _4 = <Self as Iterator>::next(move _5) -> [return: bb2, unwind: bb24];
    }

    bb2: {
        _41 = const true;
        _6 = discriminant(_4);
        switchInt(move _6) -> [1: bb3, otherwise: bb29];
    }

    bb3: {
        _41 = const false;
        _7 = move ((_4 as Some).0: <Self as std::iter::Iterator>::Item);
        _10 = &mut _3;
        _14 = [const ""];
        _13 = &_14;
        _12 = _13 as &[&str] (Pointer(Unsize));
        _19 = &_7;
        _18 = core::fmt::rt::Argument::<'_>::new_display::<<Self as Iterator>::Item>(_19) -> [return: bb4, unwind: bb23];
    }

    bb4: {
        _17 = [move _18];
        _16 = &_17;
        _15 = _16 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _11 = Arguments::<'_>::new_v1(move _12, move _15) -> [return: bb5, unwind: bb23];
    }

    bb5: {
        _9 = <String as std::fmt::Write>::write_fmt(move _10, move _11) -> [return: bb6, unwind: bb23];
    }

    bb6: {
        _8 = Result::<(), std::fmt::Error>::unwrap(move _9) -> [return: bb7, unwind: bb23];
    }

    bb7: {
        _42 = const false;
        _21 = move _1;
        _20 = <Self as IntoIterator>::into_iter(move _21) -> [return: bb8, unwind: bb23];
    }

    bb8: {
        _22 = move _20;
        goto -> bb9;
    }

    bb9: {
        _24 = &mut _22;
        _23 = <Self as Iterator>::next(_24) -> [return: bb10, unwind: bb22];
    }

    bb10: {
        _25 = discriminant(_23);
        switchInt(move _25) -> [0: bb13, 1: bb11, otherwise: bb12];
    }

    bb11: {
        _26 = move ((_23 as Some).0: <Self as std::iter::Iterator>::Item);
        _28 = &mut _3;
        _27 = String::push_str(move _28, _2) -> [return: bb14, unwind: bb21];
    }

    bb12: {
        unreachable;
    }

    bb13: {
        drop(_22) -> [return: bb19, unwind: bb23];
    }

    bb14: {
        _31 = &mut _3;
        _35 = [const ""];
        _34 = &_35;
        _33 = _34 as &[&str] (Pointer(Unsize));
        _40 = &_26;
        _39 = core::fmt::rt::Argument::<'_>::new_display::<<Self as Iterator>::Item>(_40) -> [return: bb15, unwind: bb21];
    }

    bb15: {
        _38 = [move _39];
        _37 = &_38;
        _36 = _37 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _32 = Arguments::<'_>::new_v1(move _33, move _36) -> [return: bb16, unwind: bb21];
    }

    bb16: {
        _30 = <String as std::fmt::Write>::write_fmt(move _31, move _32) -> [return: bb17, unwind: bb21];
    }

    bb17: {
        _29 = Result::<(), std::fmt::Error>::unwrap(move _30) -> [return: bb18, unwind: bb21];
    }

    bb18: {
        drop(_26) -> [return: bb9, unwind: bb22];
    }

    bb19: {
        drop(_7) -> [return: bb29, unwind: bb24];
    }

    bb20: {
        return;
    }

    bb21 (cleanup): {
        drop(_26) -> [return: bb22, unwind terminate];
    }

    bb22 (cleanup): {
        drop(_22) -> [return: bb23, unwind terminate];
    }

    bb23 (cleanup): {
        drop(_7) -> [return: bb24, unwind terminate];
    }

    bb24 (cleanup): {
        drop(_3) -> [return: bb32, unwind terminate];
    }

    bb25 (cleanup): {
        resume;
    }

    bb26: {
        _41 = const false;
        _0 = move _3;
        switchInt(_42) -> [0: bb20, otherwise: bb30];
    }

    bb27: {
        switchInt(_41) -> [0: bb26, otherwise: bb28];
    }

    bb28: {
        drop(((_4 as Some).0: <Self as std::iter::Iterator>::Item)) -> [return: bb26, unwind: bb24];
    }

    bb29: {
        _43 = discriminant(_4);
        switchInt(move _43) -> [1: bb27, otherwise: bb26];
    }

    bb30: {
        drop(_1) -> bb20;
    }

    bb31 (cleanup): {
        drop(_1) -> [return: bb25, unwind terminate];
    }

    bb32 (cleanup): {
        switchInt(_42) -> [0: bb25, otherwise: bb31];
    }
}

fn IteratorExt::__(_1: Self, _2: F) -> R {
    debug self => _1;
    debug f => _2;
    let mut _0: R;
    let mut _3: (Self,);

    bb0: {
        _3 = (move _1,);
        _0 = <F as FnOnce<(Self,)>>::call_once(move _2, move _3) -> bb1;
    }

    bb1: {
        return;
    }
}

fn spaces(_1: usize) -> std::iter::Take<std::iter::Repeat<char>> {
    debug n => _1;
    let mut _0: std::iter::Take<std::iter::Repeat<char>>;
    let mut _2: std::iter::Repeat<char>;

    bb0: {
        _2 = std::iter::repeat::<char>(const ' ') -> bb1;
    }

    bb1: {
        _0 = <std::iter::Repeat<char> as Iterator>::take(move _2, _1) -> bb2;
    }

    bb2: {
        return;
    }
}

fn test_spaces() -> () {
    let mut _0: ();
    let mut _1: (&std::string::String, &&str);
    let mut _2: &std::string::String;
    let _3: std::string::String;
    let mut _4: std::iter::Take<std::iter::Repeat<char>>;
    let mut _5: &&str;
    let _6: &str;
    let _7: &std::string::String;
    let _8: &&str;
    let mut _9: bool;
    let mut _10: bool;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: (&std::string::String, &&str);
    let mut _15: &std::string::String;
    let _16: std::string::String;
    let mut _17: std::iter::Take<std::iter::Repeat<char>>;
    let mut _18: &&str;
    let _19: &str;
    let _20: &std::string::String;
    let _21: &&str;
    let mut _22: bool;
    let mut _23: bool;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _7;
        debug right_val => _8;
        let _11: core::panicking::AssertKind;
        scope 2 {
            debug kind => _11;
        }
    }
    scope 3 {
        debug left_val => _20;
        debug right_val => _21;
        let _24: core::panicking::AssertKind;
        scope 4 {
            debug kind => _24;
        }
    }

    bb0: {
        _4 = spaces(const 0_usize) -> bb1;
    }

    bb1: {
        _3 = <std::iter::Take<std::iter::Repeat<char>> as Iterator>::collect::<String>(move _4) -> bb2;
    }

    bb2: {
        _2 = &_3;
        _6 = const "";
        _5 = &_6;
        _1 = (move _2, move _5);
        _7 = (_1.0: &std::string::String);
        _8 = (_1.1: &&str);
        _10 = <String as PartialEq<&str>>::eq(_7, _8) -> [return: bb3, unwind: bb14];
    }

    bb3: {
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<String, &str>(move _11, _7, _8, move _13) -> bb14;
    }

    bb5: {
        drop(_3) -> bb6;
    }

    bb6: {
        _17 = spaces(const 10_usize) -> bb7;
    }

    bb7: {
        _16 = <std::iter::Take<std::iter::Repeat<char>> as Iterator>::collect::<String>(move _17) -> bb8;
    }

    bb8: {
        _15 = &_16;
        _19 = const "          ";
        _18 = &_19;
        _14 = (move _15, move _18);
        _20 = (_14.0: &std::string::String);
        _21 = (_14.1: &&str);
        _23 = <String as PartialEq<&str>>::eq(_20, _21) -> [return: bb9, unwind: bb13];
    }

    bb9: {
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<String, &str>(move _24, _20, _21, move _26) -> bb13;
    }

    bb11: {
        drop(_16) -> bb12;
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        drop(_16) -> [return: bb15, unwind terminate];
    }

    bb14 (cleanup): {
        drop(_3) -> [return: bb15, unwind terminate];
    }

    bb15 (cleanup): {
        resume;
    }
}

fn dates_in_year(_1: i32) -> impl Iterator<Item = NaiveDate> + Clone {
    debug year => _1;
    let mut _0: impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone;
    let mut _2: std::ops::RangeFrom<NaiveDate>;
    let mut _3: NaiveDate;

    bb0: {
        _3 = NaiveDate::from_ymd(_1, const 1_u32, const 1_u32) -> bb1;
    }

    bb1: {
        _2 = RangeFrom::<NaiveDate> { start: move _3 };
        _0 = InGroup::<RangeFrom<NaiveDate>, [closure@ui/impl-trait/example-calendar.rs:320:12: 320:27], i32> { it: move _2, f: const ZeroSized: [closure@ui/impl-trait/example-calendar.rs:320:12: 320:27], g: _1 };
        return;
    }
}

fn dates_in_year::{closure#0}(_1: &[closure@ui/impl-trait/example-calendar.rs:320:12: 320:27], _2: &NaiveDate) -> i32 {
    debug d => _2;
    let mut _0: i32;

    bb0: {
        _0 = NaiveDate::year(_2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn test_dates_in_year() -> () {
    let mut _0: ();
    let mut _1: impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone;
    let mut _2: (&std::option::Option<NaiveDate>, &std::option::Option<NaiveDate>);
    let mut _3: &std::option::Option<NaiveDate>;
    let _4: std::option::Option<NaiveDate>;
    let mut _5: &mut impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone;
    let mut _6: &std::option::Option<NaiveDate>;
    let _7: std::option::Option<NaiveDate>;
    let mut _8: NaiveDate;
    let mut _11: bool;
    let mut _12: bool;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&std::option::Option<NaiveDate>, &std::option::Option<NaiveDate>);
    let mut _17: &std::option::Option<NaiveDate>;
    let _18: std::option::Option<NaiveDate>;
    let mut _19: &mut impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone;
    let mut _20: &std::option::Option<NaiveDate>;
    let _21: std::option::Option<NaiveDate>;
    let mut _22: NaiveDate;
    let mut _25: bool;
    let mut _26: bool;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _30: std::ops::Range<i32>;
    let mut _31: std::ops::Range<i32>;
    let mut _33: std::option::Option<i32>;
    let mut _34: &mut std::ops::Range<i32>;
    let mut _35: isize;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: &std::option::Option<NaiveDate>;
    let _39: std::option::Option<NaiveDate>;
    let mut _40: &mut impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone;
    let mut _41: &std::option::Option<NaiveDate>;
    let _42: std::option::Option<NaiveDate>;
    let mut _43: !;
    let mut _44: (&std::option::Option<NaiveDate>, &std::option::Option<NaiveDate>);
    let mut _45: &std::option::Option<NaiveDate>;
    let _46: std::option::Option<NaiveDate>;
    let mut _47: &mut impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone;
    let mut _48: &std::option::Option<NaiveDate>;
    let _49: std::option::Option<NaiveDate>;
    let mut _50: NaiveDate;
    let mut _53: bool;
    let mut _54: bool;
    let _56: !;
    let mut _57: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _58: (&std::option::Option<NaiveDate>, &std::option::Option<NaiveDate>);
    let mut _59: &std::option::Option<NaiveDate>;
    let _60: std::option::Option<NaiveDate>;
    let mut _61: &mut impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone;
    let mut _62: &std::option::Option<NaiveDate>;
    let _63: std::option::Option<NaiveDate>;
    let mut _64: NaiveDate;
    let mut _67: bool;
    let mut _68: bool;
    let _70: !;
    let mut _71: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _72: impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone;
    let mut _73: std::ops::Range<i32>;
    let mut _74: std::ops::Range<i32>;
    let mut _76: std::option::Option<i32>;
    let mut _77: &mut std::ops::Range<i32>;
    let mut _78: isize;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: &std::option::Option<NaiveDate>;
    let _82: std::option::Option<NaiveDate>;
    let mut _83: &mut impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone;
    let mut _84: &std::option::Option<NaiveDate>;
    let _85: std::option::Option<NaiveDate>;
    let mut _86: !;
    let mut _87: (&std::option::Option<NaiveDate>, &std::option::Option<NaiveDate>);
    let mut _88: &std::option::Option<NaiveDate>;
    let _89: std::option::Option<NaiveDate>;
    let mut _90: &mut impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone;
    let mut _91: &std::option::Option<NaiveDate>;
    let _92: std::option::Option<NaiveDate>;
    let mut _95: bool;
    let mut _96: bool;
    let _98: !;
    let mut _99: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _100: impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone;
    let mut _101: std::ops::Range<i32>;
    let mut _102: std::ops::Range<i32>;
    let mut _104: std::option::Option<i32>;
    let mut _105: &mut std::ops::Range<i32>;
    let mut _106: isize;
    let mut _107: bool;
    let mut _108: bool;
    let mut _109: &std::option::Option<NaiveDate>;
    let _110: std::option::Option<NaiveDate>;
    let mut _111: &mut impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone;
    let mut _112: &std::option::Option<NaiveDate>;
    let _113: std::option::Option<NaiveDate>;
    let mut _114: !;
    let mut _115: (&std::option::Option<NaiveDate>, &std::option::Option<NaiveDate>);
    let mut _116: &std::option::Option<NaiveDate>;
    let _117: std::option::Option<NaiveDate>;
    let mut _118: &mut impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone;
    let mut _119: &std::option::Option<NaiveDate>;
    let _120: std::option::Option<NaiveDate>;
    let mut _123: bool;
    let mut _124: bool;
    let _126: !;
    let mut _127: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug dates => _1;
        let _9: &std::option::Option<NaiveDate>;
        let _10: &std::option::Option<NaiveDate>;
        let _23: &std::option::Option<NaiveDate>;
        let _24: &std::option::Option<NaiveDate>;
        let mut _32: std::ops::Range<i32>;
        let _51: &std::option::Option<NaiveDate>;
        let _52: &std::option::Option<NaiveDate>;
        let _65: &std::option::Option<NaiveDate>;
        let _66: &std::option::Option<NaiveDate>;
        scope 2 {
            debug left_val => _9;
            debug right_val => _10;
            let _13: core::panicking::AssertKind;
            scope 3 {
                debug kind => _13;
            }
        }
        scope 4 {
            debug left_val => _23;
            debug right_val => _24;
            let _27: core::panicking::AssertKind;
            scope 5 {
                debug kind => _27;
            }
        }
        scope 6 {
            debug iter => _32;
        }
        scope 7 {
            debug left_val => _51;
            debug right_val => _52;
            let _55: core::panicking::AssertKind;
            scope 8 {
                debug kind => _55;
            }
        }
        scope 9 {
            debug left_val => _65;
            debug right_val => _66;
            let _69: core::panicking::AssertKind;
            scope 10 {
                debug kind => _69;
            }
        }
    }
    scope 11 {
        debug dates => _72;
        let mut _75: std::ops::Range<i32>;
        let _93: &std::option::Option<NaiveDate>;
        let _94: &std::option::Option<NaiveDate>;
        scope 12 {
            debug iter => _75;
        }
        scope 13 {
            debug left_val => _93;
            debug right_val => _94;
            let _97: core::panicking::AssertKind;
            scope 14 {
                debug kind => _97;
            }
        }
    }
    scope 15 {
        debug dates => _100;
        let mut _103: std::ops::Range<i32>;
        let _121: &std::option::Option<NaiveDate>;
        let _122: &std::option::Option<NaiveDate>;
        scope 16 {
            debug iter => _103;
        }
        scope 17 {
            debug left_val => _121;
            debug right_val => _122;
            let _125: core::panicking::AssertKind;
            scope 18 {
                debug kind => _125;
            }
        }
    }

    bb0: {
        _1 = dates_in_year(const 2013_i32) -> bb1;
    }

    bb1: {
        _5 = &mut _1;
        _4 = <impl Iterator<Item = NaiveDate> + Clone as Iterator>::next(move _5) -> bb2;
    }

    bb2: {
        _3 = &_4;
        _8 = NaiveDate::from_ymd(const 2013_i32, const 1_u32, const 1_u32) -> bb3;
    }

    bb3: {
        _7 = Option::<NaiveDate>::Some(move _8);
        _6 = &_7;
        _2 = (move _3, move _6);
        _9 = (_2.0: &std::option::Option<NaiveDate>);
        _10 = (_2.1: &std::option::Option<NaiveDate>);
        _12 = <Option<NaiveDate> as PartialEq>::eq(_9, _10) -> bb4;
    }

    bb4: {
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<Option<NaiveDate>, Option<NaiveDate>>(move _13, _9, _10, move _15);
    }

    bb6: {
        _19 = &mut _1;
        _18 = <impl Iterator<Item = NaiveDate> + Clone as Iterator>::next(move _19) -> bb7;
    }

    bb7: {
        _17 = &_18;
        _22 = NaiveDate::from_ymd(const 2013_i32, const 1_u32, const 2_u32) -> bb8;
    }

    bb8: {
        _21 = Option::<NaiveDate>::Some(move _22);
        _20 = &_21;
        _16 = (move _17, move _20);
        _23 = (_16.0: &std::option::Option<NaiveDate>);
        _24 = (_16.1: &std::option::Option<NaiveDate>);
        _26 = <Option<NaiveDate> as PartialEq>::eq(_23, _24) -> bb9;
    }

    bb9: {
        _25 = Not(move _26);
        switchInt(move _25) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<Option<NaiveDate>, Option<NaiveDate>>(move _27, _23, _24, move _29);
    }

    bb11: {
        _31 = std::ops::Range::<i32> { start: const 3_i32, end: const 31_i32 };
        _30 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _31) -> bb12;
    }

    bb12: {
        _32 = move _30;
        goto -> bb13;
    }

    bb13: {
        _34 = &mut _32;
        _33 = <std::ops::Range<i32> as Iterator>::next(_34) -> bb14;
    }

    bb14: {
        _35 = discriminant(_33);
        switchInt(move _35) -> [0: bb17, 1: bb15, otherwise: bb16];
    }

    bb15: {
        _40 = &mut _1;
        _39 = <impl Iterator<Item = NaiveDate> + Clone as Iterator>::next(move _40) -> bb18;
    }

    bb16: {
        unreachable;
    }

    bb17: {
        _47 = &mut _1;
        _46 = <impl Iterator<Item = NaiveDate> + Clone as Iterator>::next(move _47) -> bb21;
    }

    bb18: {
        _38 = &_39;
        _42 = Option::<NaiveDate>::None;
        _41 = &_42;
        _37 = <Option<NaiveDate> as PartialEq>::ne(move _38, move _41) -> bb19;
    }

    bb19: {
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb13, otherwise: bb20];
    }

    bb20: {
        _43 = core::panicking::panic(const "assertion failed: dates.next() != None");
    }

    bb21: {
        _45 = &_46;
        _50 = NaiveDate::from_ymd(const 2013_i32, const 1_u32, const 31_u32) -> bb22;
    }

    bb22: {
        _49 = Option::<NaiveDate>::Some(move _50);
        _48 = &_49;
        _44 = (move _45, move _48);
        _51 = (_44.0: &std::option::Option<NaiveDate>);
        _52 = (_44.1: &std::option::Option<NaiveDate>);
        _54 = <Option<NaiveDate> as PartialEq>::eq(_51, _52) -> bb23;
    }

    bb23: {
        _53 = Not(move _54);
        switchInt(move _53) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _55 = core::panicking::AssertKind::Eq;
        _57 = Option::<Arguments<'_>>::None;
        _56 = core::panicking::assert_failed::<Option<NaiveDate>, Option<NaiveDate>>(move _55, _51, _52, move _57);
    }

    bb25: {
        _61 = &mut _1;
        _60 = <impl Iterator<Item = NaiveDate> + Clone as Iterator>::next(move _61) -> bb26;
    }

    bb26: {
        _59 = &_60;
        _64 = NaiveDate::from_ymd(const 2013_i32, const 2_u32, const 1_u32) -> bb27;
    }

    bb27: {
        _63 = Option::<NaiveDate>::Some(move _64);
        _62 = &_63;
        _58 = (move _59, move _62);
        _65 = (_58.0: &std::option::Option<NaiveDate>);
        _66 = (_58.1: &std::option::Option<NaiveDate>);
        _68 = <Option<NaiveDate> as PartialEq>::eq(_65, _66) -> bb28;
    }

    bb28: {
        _67 = Not(move _68);
        switchInt(move _67) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _69 = core::panicking::AssertKind::Eq;
        _71 = Option::<Arguments<'_>>::None;
        _70 = core::panicking::assert_failed::<Option<NaiveDate>, Option<NaiveDate>>(move _69, _65, _66, move _71);
    }

    bb30: {
        _72 = dates_in_year(const 2013_i32) -> bb31;
    }

    bb31: {
        _74 = std::ops::Range::<i32> { start: const 0_i32, end: const 365_i32 };
        _73 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _74) -> bb32;
    }

    bb32: {
        _75 = move _73;
        goto -> bb33;
    }

    bb33: {
        _77 = &mut _75;
        _76 = <std::ops::Range<i32> as Iterator>::next(_77) -> bb34;
    }

    bb34: {
        _78 = discriminant(_76);
        switchInt(move _78) -> [0: bb36, 1: bb35, otherwise: bb16];
    }

    bb35: {
        _83 = &mut _72;
        _82 = <impl Iterator<Item = NaiveDate> + Clone as Iterator>::next(move _83) -> bb37;
    }

    bb36: {
        _90 = &mut _72;
        _89 = <impl Iterator<Item = NaiveDate> + Clone as Iterator>::next(move _90) -> bb40;
    }

    bb37: {
        _81 = &_82;
        _85 = Option::<NaiveDate>::None;
        _84 = &_85;
        _80 = <Option<NaiveDate> as PartialEq>::ne(move _81, move _84) -> bb38;
    }

    bb38: {
        _79 = Not(move _80);
        switchInt(move _79) -> [0: bb33, otherwise: bb39];
    }

    bb39: {
        _86 = core::panicking::panic(const "assertion failed: dates.next() != None");
    }

    bb40: {
        _88 = &_89;
        _92 = Option::<NaiveDate>::None;
        _91 = &_92;
        _87 = (move _88, move _91);
        _93 = (_87.0: &std::option::Option<NaiveDate>);
        _94 = (_87.1: &std::option::Option<NaiveDate>);
        _96 = <Option<NaiveDate> as PartialEq>::eq(_93, _94) -> bb41;
    }

    bb41: {
        _95 = Not(move _96);
        switchInt(move _95) -> [0: bb43, otherwise: bb42];
    }

    bb42: {
        _97 = core::panicking::AssertKind::Eq;
        _99 = Option::<Arguments<'_>>::None;
        _98 = core::panicking::assert_failed::<Option<NaiveDate>, Option<NaiveDate>>(move _97, _93, _94, move _99);
    }

    bb43: {
        _100 = dates_in_year(const 1984_i32) -> bb44;
    }

    bb44: {
        _102 = std::ops::Range::<i32> { start: const 0_i32, end: const 366_i32 };
        _101 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _102) -> bb45;
    }

    bb45: {
        _103 = move _101;
        goto -> bb46;
    }

    bb46: {
        _105 = &mut _103;
        _104 = <std::ops::Range<i32> as Iterator>::next(_105) -> bb47;
    }

    bb47: {
        _106 = discriminant(_104);
        switchInt(move _106) -> [0: bb49, 1: bb48, otherwise: bb16];
    }

    bb48: {
        _111 = &mut _100;
        _110 = <impl Iterator<Item = NaiveDate> + Clone as Iterator>::next(move _111) -> bb50;
    }

    bb49: {
        _118 = &mut _100;
        _117 = <impl Iterator<Item = NaiveDate> + Clone as Iterator>::next(move _118) -> bb53;
    }

    bb50: {
        _109 = &_110;
        _113 = Option::<NaiveDate>::None;
        _112 = &_113;
        _108 = <Option<NaiveDate> as PartialEq>::ne(move _109, move _112) -> bb51;
    }

    bb51: {
        _107 = Not(move _108);
        switchInt(move _107) -> [0: bb46, otherwise: bb52];
    }

    bb52: {
        _114 = core::panicking::panic(const "assertion failed: dates.next() != None");
    }

    bb53: {
        _116 = &_117;
        _120 = Option::<NaiveDate>::None;
        _119 = &_120;
        _115 = (move _116, move _119);
        _121 = (_115.0: &std::option::Option<NaiveDate>);
        _122 = (_115.1: &std::option::Option<NaiveDate>);
        _124 = <Option<NaiveDate> as PartialEq>::eq(_121, _122) -> bb54;
    }

    bb54: {
        _123 = Not(move _124);
        switchInt(move _123) -> [0: bb56, otherwise: bb55];
    }

    bb55: {
        _125 = core::panicking::AssertKind::Eq;
        _127 = Option::<Arguments<'_>>::None;
        _126 = core::panicking::assert_failed::<Option<NaiveDate>, Option<NaiveDate>>(move _125, _121, _122, move _127);
    }

    bb56: {
        return;
    }
}

fn test_group_by() -> () {
    let mut _0: ();
    let _1: [[i32; 2]; 7];
    let mut _2: [i32; 2];
    let mut _3: [i32; 2];
    let mut _4: [i32; 2];
    let mut _5: [i32; 2];
    let mut _6: [i32; 2];
    let mut _7: [i32; 2];
    let mut _8: [i32; 2];
    let mut _10: std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>;
    let mut _11: std::slice::Iter<'_, [i32; 2]>;
    let mut _12: &[[i32; 2]];
    let mut _13: &[[i32; 2]; 7];
    let _15: &[&[[i32; 2]]; 3];
    let _16: [&[[i32; 2]]; 3];
    let mut _17: &[[i32; 2]];
    let _18: &[[i32; 2]; 3];
    let _19: [[i32; 2]; 3];
    let mut _20: [i32; 2];
    let mut _21: [i32; 2];
    let mut _22: [i32; 2];
    let mut _23: &[[i32; 2]];
    let _24: &[[i32; 2]; 3];
    let _25: [[i32; 2]; 3];
    let mut _26: [i32; 2];
    let mut _27: [i32; 2];
    let mut _28: [i32; 2];
    let mut _29: &[[i32; 2]];
    let _30: &[[i32; 2]; 1];
    let _31: [[i32; 2]; 1];
    let mut _32: [i32; 2];
    let mut _33: std::iter::Zip<GroupBy<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50]>, std::iter::Cloned<std::slice::Iter<'_, &[[i32; 2]]>>>;
    let mut _34: std::iter::Zip<GroupBy<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50]>, std::iter::Cloned<std::slice::Iter<'_, &[[i32; 2]]>>>;
    let mut _35: GroupBy<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50]>;
    let mut _36: std::iter::Cloned<std::slice::Iter<'_, &[[i32; 2]]>>;
    let mut _37: std::slice::Iter<'_, &[[i32; 2]]>;
    let mut _39: std::option::Option<((i32, InGroup<std::iter::Peekable<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>>, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50], i32>), &[[i32; 2]])>;
    let mut _40: &mut std::iter::Zip<GroupBy<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50]>, std::iter::Cloned<std::slice::Iter<'_, &[[i32; 2]]>>>;
    let mut _41: isize;
    let mut _44: (&&[[i32; 2]], &&[[i32; 2]]);
    let mut _45: &&[[i32; 2]];
    let _46: &[[i32; 2]];
    let _47: &[[i32; 2]];
    let mut _48: &std::vec::Vec<[i32; 2]>;
    let _49: std::vec::Vec<[i32; 2]>;
    let mut _50: &&[[i32; 2]];
    let mut _53: bool;
    let mut _54: bool;
    let _56: !;
    let mut _57: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _59: std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>;
    let mut _60: std::slice::Iter<'_, [i32; 2]>;
    let mut _61: &[[i32; 2]];
    let mut _62: &[[i32; 2]; 7];
    let _64: &[&[[i32; 2]]; 3];
    let _65: [&[[i32; 2]]; 3];
    let mut _66: &[[i32; 2]];
    let _67: &[[i32; 2]; 2];
    let _68: [[i32; 2]; 2];
    let mut _69: [i32; 2];
    let mut _70: [i32; 2];
    let mut _71: &[[i32; 2]];
    let _72: &[[i32; 2]; 2];
    let _73: [[i32; 2]; 2];
    let mut _74: [i32; 2];
    let mut _75: [i32; 2];
    let mut _76: &[[i32; 2]];
    let _77: &[[i32; 2]; 3];
    let _78: [[i32; 2]; 3];
    let mut _79: [i32; 2];
    let mut _80: [i32; 2];
    let mut _81: [i32; 2];
    let mut _82: std::iter::Zip<GroupBy<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50]>, std::iter::Cloned<std::slice::Iter<'_, &[[i32; 2]]>>>;
    let mut _83: std::iter::Zip<GroupBy<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50]>, std::iter::Cloned<std::slice::Iter<'_, &[[i32; 2]]>>>;
    let mut _84: GroupBy<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50]>;
    let mut _85: std::iter::Cloned<std::slice::Iter<'_, &[[i32; 2]]>>;
    let mut _86: std::slice::Iter<'_, &[[i32; 2]]>;
    let mut _88: std::option::Option<((i32, InGroup<std::iter::Peekable<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>>, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50], i32>), &[[i32; 2]])>;
    let mut _89: &mut std::iter::Zip<GroupBy<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50]>, std::iter::Cloned<std::slice::Iter<'_, &[[i32; 2]]>>>;
    let mut _90: isize;
    let mut _93: (&&[[i32; 2]], &&[[i32; 2]]);
    let mut _94: &&[[i32; 2]];
    let _95: &[[i32; 2]];
    let _96: &[[i32; 2]];
    let mut _97: &std::vec::Vec<[i32; 2]>;
    let _98: std::vec::Vec<[i32; 2]>;
    let mut _99: &&[[i32; 2]];
    let mut _102: bool;
    let mut _103: bool;
    let _105: !;
    let mut _106: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug input => _1;
        let _9: GroupBy<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50]>;
        scope 2 {
            debug by_x => _9;
            let _14: &[&[[i32; 2]]];
            scope 3 {
                debug expected_1 => _14;
                let mut _38: std::iter::Zip<GroupBy<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50]>, std::iter::Cloned<std::slice::Iter<'_, &[[i32; 2]]>>>;
                let _58: GroupBy<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50]>;
                scope 4 {
                    debug iter => _38;
                    let _42: InGroup<std::iter::Peekable<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>>, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50], i32>;
                    let _43: &[[i32; 2]];
                    scope 5 {
                        debug a => _42;
                        debug b => _43;
                        let _51: &&[[i32; 2]];
                        let _52: &&[[i32; 2]];
                        scope 6 {
                            debug left_val => _51;
                            debug right_val => _52;
                            let _55: core::panicking::AssertKind;
                            scope 7 {
                                debug kind => _55;
                            }
                        }
                    }
                }
                scope 8 {
                    debug by_y => _58;
                    let _63: &[&[[i32; 2]]];
                    scope 9 {
                        debug expected_2 => _63;
                        let mut _87: std::iter::Zip<GroupBy<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50]>, std::iter::Cloned<std::slice::Iter<'_, &[[i32; 2]]>>>;
                        scope 10 {
                            debug iter => _87;
                            let _91: InGroup<std::iter::Peekable<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>>, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50], i32>;
                            let _92: &[[i32; 2]];
                            scope 11 {
                                debug a => _91;
                                debug b => _92;
                                let _100: &&[[i32; 2]];
                                let _101: &&[[i32; 2]];
                                scope 12 {
                                    debug left_val => _100;
                                    debug right_val => _101;
                                    let _104: core::panicking::AssertKind;
                                    scope 13 {
                                        debug kind => _104;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = [const 1_i32, const 1_i32];
        _3 = [const 1_i32, const 1_i32];
        _4 = [const 1_i32, const 2_i32];
        _5 = [const 2_i32, const 2_i32];
        _6 = [const 2_i32, const 3_i32];
        _7 = [const 2_i32, const 3_i32];
        _8 = [const 3_i32, const 3_i32];
        _1 = [move _2, move _3, move _4, move _5, move _6, move _7, move _8];
        _13 = &_1;
        _12 = move _13 as &[[i32; 2]] (Pointer(Unsize));
        _11 = core::slice::<impl [[i32; 2]]>::iter(move _12) -> bb1;
    }

    bb1: {
        _10 = <std::slice::Iter<'_, [i32; 2]> as Iterator>::cloned::<'_, [i32; 2]>(move _11) -> bb2;
    }

    bb2: {
        _9 = <Cloned<std::slice::Iter<'_, [i32; 2]>> as IteratorExt>::group_by::<i32, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50]>(move _10, const ZeroSized: [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50]) -> bb3;
    }

    bb3: {
        _20 = [const 1_i32, const 1_i32];
        _21 = [const 1_i32, const 1_i32];
        _22 = [const 1_i32, const 2_i32];
        _19 = [move _20, move _21, move _22];
        _18 = &_19;
        _17 = _18 as &[[i32; 2]] (Pointer(Unsize));
        _26 = [const 2_i32, const 2_i32];
        _27 = [const 2_i32, const 3_i32];
        _28 = [const 2_i32, const 3_i32];
        _25 = [move _26, move _27, move _28];
        _24 = &_25;
        _23 = _24 as &[[i32; 2]] (Pointer(Unsize));
        _32 = [const 3_i32, const 3_i32];
        _31 = [move _32];
        _30 = &_31;
        _29 = _30 as &[[i32; 2]] (Pointer(Unsize));
        _16 = [move _17, move _23, move _29];
        _15 = &_16;
        _14 = _15 as &[&[[i32; 2]]] (Pointer(Unsize));
        _35 = move _9;
        _37 = core::slice::<impl [&[[i32; 2]]]>::iter(_14) -> bb4;
    }

    bb4: {
        _36 = <std::slice::Iter<'_, &[[i32; 2]]> as Iterator>::cloned::<'_, &[[i32; 2]]>(move _37) -> bb5;
    }

    bb5: {
        _34 = <GroupBy<Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50]> as Iterator>::zip::<Cloned<std::slice::Iter<'_, &[[i32; 2]]>>>(move _35, move _36) -> bb6;
    }

    bb6: {
        _33 = <Zip<GroupBy<Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50]>, Cloned<std::slice::Iter<'_, &[[i32; 2]]>>> as IntoIterator>::into_iter(move _34) -> bb7;
    }

    bb7: {
        _38 = move _33;
        goto -> bb8;
    }

    bb8: {
        _40 = &mut _38;
        _39 = <Zip<GroupBy<Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50]>, Cloned<std::slice::Iter<'_, &[[i32; 2]]>>> as Iterator>::next(_40) -> bb9;
    }

    bb9: {
        _41 = discriminant(_39);
        switchInt(move _41) -> [0: bb12, 1: bb10, otherwise: bb11];
    }

    bb10: {
        _42 = move ((((_39 as Some).0: ((i32, InGroup<std::iter::Peekable<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>>, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50], i32>), &[[i32; 2]])).0: (i32, InGroup<std::iter::Peekable<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>>, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50], i32>)).1: InGroup<std::iter::Peekable<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>>, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50], i32>);
        _43 = (((_39 as Some).0: ((i32, InGroup<std::iter::Peekable<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>>, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50], i32>), &[[i32; 2]])).1: &[[i32; 2]]);
        _49 = <InGroup<Peekable<Cloned<std::slice::Iter<'_, [i32; 2]>>>, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50], i32> as Iterator>::collect::<Vec<[i32; 2]>>(move _42) -> bb13;
    }

    bb11: {
        unreachable;
    }

    bb12: {
        _62 = &_1;
        _61 = move _62 as &[[i32; 2]] (Pointer(Unsize));
        _60 = core::slice::<impl [[i32; 2]]>::iter(move _61) -> bb18;
    }

    bb13: {
        _48 = &_49;
        _47 = <Vec<[i32; 2]> as Index<RangeFull>>::index(move _48, const RangeFull) -> [return: bb14, unwind: bb35];
    }

    bb14: {
        _46 = _47;
        _45 = &_46;
        _50 = &_43;
        _44 = (move _45, move _50);
        _51 = (_44.0: &&[[i32; 2]]);
        _52 = (_44.1: &&[[i32; 2]]);
        _54 = <&[[i32; 2]] as PartialEq>::eq(_51, _52) -> [return: bb15, unwind: bb35];
    }

    bb15: {
        _53 = Not(move _54);
        switchInt(move _53) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _55 = core::panicking::AssertKind::Eq;
        _57 = Option::<Arguments<'_>>::None;
        _56 = core::panicking::assert_failed::<&[[i32; 2]], &[[i32; 2]]>(move _55, _51, _52, move _57) -> bb35;
    }

    bb17: {
        drop(_49) -> bb8;
    }

    bb18: {
        _59 = <std::slice::Iter<'_, [i32; 2]> as Iterator>::cloned::<'_, [i32; 2]>(move _60) -> bb19;
    }

    bb19: {
        _58 = <Cloned<std::slice::Iter<'_, [i32; 2]>> as IteratorExt>::group_by::<i32, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50]>(move _59, const ZeroSized: [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50]) -> bb20;
    }

    bb20: {
        _69 = [const 1_i32, const 1_i32];
        _70 = [const 1_i32, const 1_i32];
        _68 = [move _69, move _70];
        _67 = &_68;
        _66 = _67 as &[[i32; 2]] (Pointer(Unsize));
        _74 = [const 1_i32, const 2_i32];
        _75 = [const 2_i32, const 2_i32];
        _73 = [move _74, move _75];
        _72 = &_73;
        _71 = _72 as &[[i32; 2]] (Pointer(Unsize));
        _79 = [const 2_i32, const 3_i32];
        _80 = [const 2_i32, const 3_i32];
        _81 = [const 3_i32, const 3_i32];
        _78 = [move _79, move _80, move _81];
        _77 = &_78;
        _76 = _77 as &[[i32; 2]] (Pointer(Unsize));
        _65 = [move _66, move _71, move _76];
        _64 = &_65;
        _63 = _64 as &[&[[i32; 2]]] (Pointer(Unsize));
        _84 = move _58;
        _86 = core::slice::<impl [&[[i32; 2]]]>::iter(_63) -> bb21;
    }

    bb21: {
        _85 = <std::slice::Iter<'_, &[[i32; 2]]> as Iterator>::cloned::<'_, &[[i32; 2]]>(move _86) -> bb22;
    }

    bb22: {
        _83 = <GroupBy<Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50]> as Iterator>::zip::<Cloned<std::slice::Iter<'_, &[[i32; 2]]>>>(move _84, move _85) -> bb23;
    }

    bb23: {
        _82 = <Zip<GroupBy<Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50]>, Cloned<std::slice::Iter<'_, &[[i32; 2]]>>> as IntoIterator>::into_iter(move _83) -> bb24;
    }

    bb24: {
        _87 = move _82;
        goto -> bb25;
    }

    bb25: {
        _89 = &mut _87;
        _88 = <Zip<GroupBy<Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50]>, Cloned<std::slice::Iter<'_, &[[i32; 2]]>>> as Iterator>::next(_89) -> bb26;
    }

    bb26: {
        _90 = discriminant(_88);
        switchInt(move _90) -> [0: bb28, 1: bb27, otherwise: bb11];
    }

    bb27: {
        _91 = move ((((_88 as Some).0: ((i32, InGroup<std::iter::Peekable<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>>, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50], i32>), &[[i32; 2]])).0: (i32, InGroup<std::iter::Peekable<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>>, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50], i32>)).1: InGroup<std::iter::Peekable<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>>, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50], i32>);
        _92 = (((_88 as Some).0: ((i32, InGroup<std::iter::Peekable<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>>, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50], i32>), &[[i32; 2]])).1: &[[i32; 2]]);
        _98 = <InGroup<Peekable<Cloned<std::slice::Iter<'_, [i32; 2]>>>, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50], i32> as Iterator>::collect::<Vec<[i32; 2]>>(move _91) -> bb29;
    }

    bb28: {
        return;
    }

    bb29: {
        _97 = &_98;
        _96 = <Vec<[i32; 2]> as Index<RangeFull>>::index(move _97, const RangeFull) -> [return: bb30, unwind: bb34];
    }

    bb30: {
        _95 = _96;
        _94 = &_95;
        _99 = &_92;
        _93 = (move _94, move _99);
        _100 = (_93.0: &&[[i32; 2]]);
        _101 = (_93.1: &&[[i32; 2]]);
        _103 = <&[[i32; 2]] as PartialEq>::eq(_100, _101) -> [return: bb31, unwind: bb34];
    }

    bb31: {
        _102 = Not(move _103);
        switchInt(move _102) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _104 = core::panicking::AssertKind::Eq;
        _106 = Option::<Arguments<'_>>::None;
        _105 = core::panicking::assert_failed::<&[[i32; 2]], &[[i32; 2]]>(move _104, _100, _101, move _106) -> bb34;
    }

    bb33: {
        drop(_98) -> bb25;
    }

    bb34 (cleanup): {
        drop(_98) -> [return: bb36, unwind terminate];
    }

    bb35 (cleanup): {
        drop(_49) -> [return: bb36, unwind terminate];
    }

    bb36 (cleanup): {
        resume;
    }
}

fn test_group_by::{closure#0}(_1: &mut [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50], _2: &[i32; 2]) -> i32 {
    debug a => _2;
    let mut _0: i32;
    let _3: usize;
    let mut _4: usize;
    let mut _5: bool;

    bb0: {
        _3 = const 0_usize;
        _4 = const 2_usize;
        _5 = Lt(_3, _4);
        assert(move _5, "index out of bounds: the length is {} but the index is {}", move _4, _3) -> bb1;
    }

    bb1: {
        _0 = (*_2)[_3];
        return;
    }
}

test_group_by::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

fn test_group_by::{closure#1}(_1: &mut [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50], _2: &[i32; 2]) -> i32 {
    debug a => _2;
    let mut _0: i32;
    let _3: usize;
    let mut _4: usize;
    let mut _5: bool;

    bb0: {
        _3 = const 1_usize;
        _4 = const 2_usize;
        _5 = Lt(_3, _4);
        assert(move _5, "index out of bounds: the length is {} but the index is {}", move _4, _3) -> bb1;
    }

    bb1: {
        _0 = (*_2)[_3];
        return;
    }
}

test_group_by::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

fn by_month(_1: impl Iterator<Item = NaiveDate> + Clone) -> impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone {
    debug it => _1;
    let mut _0: impl std::iter::Iterator<Item = (u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)> + std::clone::Clone;

    bb0: {
        _0 = <impl Iterator<Item = NaiveDate> + Clone as IteratorExt>::group_by::<u32, [closure@ui/impl-trait/example-calendar.rs:402:17: 402:20]>(move _1, const ZeroSized: [closure@ui/impl-trait/example-calendar.rs:402:17: 402:20]) -> bb1;
    }

    bb1: {
        return;
    }
}

fn by_month::{closure#0}(_1: &mut [closure@ui/impl-trait/example-calendar.rs:402:17: 402:20], _2: &NaiveDate) -> u32 {
    debug d => _2;
    let mut _0: u32;

    bb0: {
        _0 = NaiveDate::month(_2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn test_by_month() -> () {
    let mut _0: ();
    let mut _1: impl std::iter::Iterator<Item = (u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)> + std::clone::Clone;
    let mut _2: impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone;
    let mut _3: std::iter::Zip<std::ops::Range<u32>, &mut impl std::iter::Iterator<Item = (u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)> + std::clone::Clone>;
    let mut _4: std::iter::Zip<std::ops::Range<u32>, &mut impl std::iter::Iterator<Item = (u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)> + std::clone::Clone>;
    let mut _5: std::ops::Range<u32>;
    let mut _6: &mut impl std::iter::Iterator<Item = (u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)> + std::clone::Clone;
    let mut _8: std::option::Option<(u32, (u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone))>;
    let mut _9: &mut std::iter::Zip<std::ops::Range<u32>, &mut impl std::iter::Iterator<Item = (u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)> + std::clone::Clone>;
    let mut _10: isize;
    let mut _13: (&NaiveDate, &NaiveDate);
    let mut _14: &NaiveDate;
    let _15: NaiveDate;
    let mut _16: std::option::Option<NaiveDate>;
    let mut _17: &mut impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone;
    let mut _18: &NaiveDate;
    let _19: NaiveDate;
    let mut _22: bool;
    let mut _23: bool;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: &std::option::Option<(u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)>;
    let _30: std::option::Option<(u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)>;
    let mut _31: &mut impl std::iter::Iterator<Item = (u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)> + std::clone::Clone;
    let mut _32: !;
    scope 1 {
        debug months => _1;
        let mut _7: std::iter::Zip<std::ops::Range<u32>, &mut impl std::iter::Iterator<Item = (u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)> + std::clone::Clone>;
        scope 2 {
            debug iter => _7;
            let _11: u32;
            let mut _12: impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone;
            scope 3 {
                debug month => _11;
                debug date => _12;
                let _20: &NaiveDate;
                let _21: &NaiveDate;
                scope 4 {
                    debug left_val => _20;
                    debug right_val => _21;
                    let _24: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _24;
                    }
                }
            }
        }
    }

    bb0: {
        _2 = dates_in_year(const 2013_i32) -> bb1;
    }

    bb1: {
        _1 = <impl Iterator<Item = NaiveDate> + Clone as IteratorExt>::__::<fn(impl Iterator<Item = NaiveDate> + Clone) -> impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone {by_month::<impl Iterator<Item = NaiveDate> + Clone>}, impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone>(move _2, by_month::<impl Iterator<Item = NaiveDate> + Clone>) -> bb2;
    }

    bb2: {
        _5 = std::ops::Range::<u32> { start: const 1_u32, end: const 13_u32 };
        _6 = &mut _1;
        _4 = <std::ops::Range<u32> as Iterator>::zip::<&mut impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone>(move _5, move _6) -> bb3;
    }

    bb3: {
        _3 = <Zip<std::ops::Range<u32>, &mut impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone> as IntoIterator>::into_iter(move _4) -> bb4;
    }

    bb4: {
        _7 = move _3;
        goto -> bb5;
    }

    bb5: {
        _9 = &mut _7;
        _8 = <Zip<std::ops::Range<u32>, &mut impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone> as Iterator>::next(_9) -> bb6;
    }

    bb6: {
        _10 = discriminant(_8);
        switchInt(move _10) -> [0: bb9, 1: bb7, otherwise: bb8];
    }

    bb7: {
        _12 = move ((((_8 as Some).0: (u32, (u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone))).1: (u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)).1: impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone);
        _11 = (((_8 as Some).0: (u32, (u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone))).0: u32);
        _17 = &mut _12;
        _16 = <impl Iterator<Item = NaiveDate> + Clone as Iterator>::nth(move _17, const 0_usize) -> bb10;
    }

    bb8: {
        unreachable;
    }

    bb9: {
        _31 = &mut _1;
        _30 = <impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone as Iterator>::next(move _31) -> bb15;
    }

    bb10: {
        _15 = Option::<NaiveDate>::unwrap(move _16) -> bb11;
    }

    bb11: {
        _14 = &_15;
        _19 = NaiveDate::from_ymd(const 2013_i32, _11, const 1_u32) -> bb12;
    }

    bb12: {
        _18 = &_19;
        _13 = (move _14, move _18);
        _20 = (_13.0: &NaiveDate);
        _21 = (_13.1: &NaiveDate);
        _23 = <NaiveDate as PartialEq>::eq(_20, _21) -> bb13;
    }

    bb13: {
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb5, otherwise: bb14];
    }

    bb14: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<NaiveDate, NaiveDate>(move _24, _20, _21, move _26);
    }

    bb15: {
        _29 = &_30;
        _28 = Option::<(u32, impl Iterator<Item = NaiveDate> + Clone)>::is_none(move _29) -> bb16;
    }

    bb16: {
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _32 = core::panicking::panic(const "assertion failed: months.next().is_none()");
    }

    bb18: {
        return;
    }
}

fn by_week(_1: impl DateIterator) -> impl Iterator<Item = (u32, impl DateIterator)> + Clone {
    debug it => _1;
    let mut _0: impl std::iter::Iterator<Item = (u32, impl DateIterator)> + std::clone::Clone;

    bb0: {
        _0 = <impl DateIterator as IteratorExt>::group_by::<u32, [closure@ui/impl-trait/example-calendar.rs:418:17: 418:20]>(move _1, const ZeroSized: [closure@ui/impl-trait/example-calendar.rs:418:17: 418:20]) -> bb1;
    }

    bb1: {
        return;
    }
}

fn by_week::{closure#0}(_1: &mut [closure@ui/impl-trait/example-calendar.rs:418:17: 418:20], _2: &NaiveDate) -> u32 {
    debug d => _2;
    let mut _0: u32;
    let mut _3: (i32, u32, Weekday);
    let mut _4: &NaiveDate;
    let _5: NaiveDate;

    bb0: {
        _5 = NaiveDate::succ(_2) -> bb1;
    }

    bb1: {
        _4 = &_5;
        _3 = NaiveDate::isoweekdate(move _4) -> bb2;
    }

    bb2: {
        _0 = (_3.1: u32);
        return;
    }
}

fn test_isoweekdate() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<((i32, u32), u32)>;
    let mut _2: (&&[((i32, u32), u32)], &&[((i32, u32), u32); 2]);
    let mut _3: &&[((i32, u32), u32)];
    let _4: &[((i32, u32), u32)];
    let _5: &[((i32, u32), u32)];
    let mut _6: &std::vec::Vec<((i32, u32), u32)>;
    let mut _7: std::ops::RangeTo<usize>;
    let mut _8: &&[((i32, u32), u32); 2];
    let _9: &[((i32, u32), u32); 2];
    let _10: [((i32, u32), u32); 2];
    let mut _11: ((i32, u32), u32);
    let mut _12: (i32, u32);
    let mut _13: ((i32, u32), u32);
    let mut _14: (i32, u32);
    let mut _17: bool;
    let mut _18: bool;
    let _20: !;
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _22: (&&[((i32, u32), u32)], &&[((i32, u32), u32); 2]);
    let mut _23: &&[((i32, u32), u32)];
    let _24: &[((i32, u32), u32)];
    let _25: &[((i32, u32), u32)];
    let mut _26: &std::vec::Vec<((i32, u32), u32)>;
    let mut _27: std::ops::RangeFrom<usize>;
    let mut _28: usize;
    let mut _29: usize;
    let mut _30: &std::vec::Vec<((i32, u32), u32)>;
    let mut _31: &&[((i32, u32), u32); 2];
    let _32: &[((i32, u32), u32); 2];
    let _33: [((i32, u32), u32); 2];
    let mut _34: ((i32, u32), u32);
    let mut _35: (i32, u32);
    let mut _36: ((i32, u32), u32);
    let mut _37: (i32, u32);
    let mut _40: bool;
    let mut _41: bool;
    let _43: !;
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _46: (&&[((i32, u32), u32)], &&[((i32, u32), u32); 2]);
    let mut _47: &&[((i32, u32), u32)];
    let _48: &[((i32, u32), u32)];
    let _49: &[((i32, u32), u32)];
    let mut _50: &std::vec::Vec<((i32, u32), u32)>;
    let mut _51: std::ops::RangeTo<usize>;
    let mut _52: &&[((i32, u32), u32); 2];
    let _53: &[((i32, u32), u32); 2];
    let _54: [((i32, u32), u32); 2];
    let mut _55: ((i32, u32), u32);
    let mut _56: (i32, u32);
    let mut _57: ((i32, u32), u32);
    let mut _58: (i32, u32);
    let mut _61: bool;
    let mut _62: bool;
    let _64: !;
    let mut _65: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _66: (&&[((i32, u32), u32)], &&[((i32, u32), u32); 2]);
    let mut _67: &&[((i32, u32), u32)];
    let _68: &[((i32, u32), u32)];
    let _69: &[((i32, u32), u32)];
    let mut _70: &std::vec::Vec<((i32, u32), u32)>;
    let mut _71: std::ops::RangeFrom<usize>;
    let mut _72: usize;
    let mut _73: usize;
    let mut _74: &std::vec::Vec<((i32, u32), u32)>;
    let mut _75: &&[((i32, u32), u32); 2];
    let _76: &[((i32, u32), u32); 2];
    let _77: [((i32, u32), u32); 2];
    let mut _78: ((i32, u32), u32);
    let mut _79: (i32, u32);
    let mut _80: ((i32, u32), u32);
    let mut _81: (i32, u32);
    let mut _84: bool;
    let mut _85: bool;
    let _87: !;
    let mut _88: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _90: (&&[((i32, u32), u32)], &&[((i32, u32), u32); 2]);
    let mut _91: &&[((i32, u32), u32)];
    let _92: &[((i32, u32), u32)];
    let _93: &[((i32, u32), u32)];
    let mut _94: &std::vec::Vec<((i32, u32), u32)>;
    let mut _95: std::ops::RangeTo<usize>;
    let mut _96: &&[((i32, u32), u32); 2];
    let _97: &[((i32, u32), u32); 2];
    let _98: [((i32, u32), u32); 2];
    let mut _99: ((i32, u32), u32);
    let mut _100: (i32, u32);
    let mut _101: ((i32, u32), u32);
    let mut _102: (i32, u32);
    let mut _105: bool;
    let mut _106: bool;
    let _108: !;
    let mut _109: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _110: (&&[((i32, u32), u32)], &&[((i32, u32), u32); 2]);
    let mut _111: &&[((i32, u32), u32)];
    let _112: &[((i32, u32), u32)];
    let _113: &[((i32, u32), u32)];
    let mut _114: &std::vec::Vec<((i32, u32), u32)>;
    let mut _115: std::ops::RangeFrom<usize>;
    let mut _116: usize;
    let mut _117: usize;
    let mut _118: &std::vec::Vec<((i32, u32), u32)>;
    let mut _119: &&[((i32, u32), u32); 2];
    let _120: &[((i32, u32), u32); 2];
    let _121: [((i32, u32), u32); 2];
    let mut _122: ((i32, u32), u32);
    let mut _123: (i32, u32);
    let mut _124: ((i32, u32), u32);
    let mut _125: (i32, u32);
    let mut _128: bool;
    let mut _129: bool;
    let _131: !;
    let mut _132: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug wu_1984 => _1;
        let _15: &&[((i32, u32), u32)];
        let _16: &&[((i32, u32), u32); 2];
        let _38: &&[((i32, u32), u32)];
        let _39: &&[((i32, u32), u32); 2];
        let _45: std::vec::Vec<((i32, u32), u32)>;
        scope 2 {
            debug left_val => _15;
            debug right_val => _16;
            let _19: core::panicking::AssertKind;
            scope 3 {
                debug kind => _19;
            }
        }
        scope 4 {
            debug left_val => _38;
            debug right_val => _39;
            let _42: core::panicking::AssertKind;
            scope 5 {
                debug kind => _42;
            }
        }
        scope 6 {
            debug wu_2013 => _45;
            let _59: &&[((i32, u32), u32)];
            let _60: &&[((i32, u32), u32); 2];
            let _82: &&[((i32, u32), u32)];
            let _83: &&[((i32, u32), u32); 2];
            let _89: std::vec::Vec<((i32, u32), u32)>;
            scope 7 {
                debug left_val => _59;
                debug right_val => _60;
                let _63: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _63;
                }
            }
            scope 9 {
                debug left_val => _82;
                debug right_val => _83;
                let _86: core::panicking::AssertKind;
                scope 10 {
                    debug kind => _86;
                }
            }
            scope 11 {
                debug wu_2015 => _89;
                let _103: &&[((i32, u32), u32)];
                let _104: &&[((i32, u32), u32); 2];
                let _126: &&[((i32, u32), u32)];
                let _127: &&[((i32, u32), u32); 2];
                scope 12 {
                    debug left_val => _103;
                    debug right_val => _104;
                    let _107: core::panicking::AssertKind;
                    scope 13 {
                        debug kind => _107;
                    }
                }
                scope 14 {
                    debug left_val => _126;
                    debug right_val => _127;
                    let _130: core::panicking::AssertKind;
                    scope 15 {
                        debug kind => _130;
                    }
                }
            }
        }
    }

    bb0: {
        _1 = weeks_uniq(const 1984_i32) -> bb1;
    }

    bb1: {
        _6 = &_1;
        _7 = RangeTo::<usize> { end: const 2_usize };
        _5 = <Vec<((i32, u32), u32)> as Index<RangeTo<usize>>>::index(move _6, move _7) -> [return: bb2, unwind: bb36];
    }

    bb2: {
        _4 = _5;
        _3 = &_4;
        _12 = (const 1983_i32, const 52_u32);
        _11 = (move _12, const 1_u32);
        _14 = (const 1984_i32, const 1_u32);
        _13 = (move _14, const 7_u32);
        _10 = [move _11, move _13];
        _9 = &_10;
        _8 = &_9;
        _2 = (move _3, move _8);
        _15 = (_2.0: &&[((i32, u32), u32)]);
        _16 = (_2.1: &&[((i32, u32), u32); 2]);
        _18 = <&[((i32, u32), u32)] as PartialEq<&[((i32, u32), u32); 2]>>::eq(_15, _16) -> [return: bb3, unwind: bb36];
    }

    bb3: {
        _17 = Not(move _18);
        switchInt(move _17) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _19 = core::panicking::AssertKind::Eq;
        _21 = Option::<Arguments<'_>>::None;
        _20 = core::panicking::assert_failed::<&[((i32, u32), u32)], &[((i32, u32), u32); 2]>(move _19, _15, _16, move _21) -> bb36;
    }

    bb5: {
        _26 = &_1;
        _30 = &_1;
        _29 = Vec::<((i32, u32), u32)>::len(move _30) -> [return: bb6, unwind: bb36];
    }

    bb6: {
        _28 = Sub(move _29, const 2_usize);
        _27 = RangeFrom::<usize> { start: move _28 };
        _25 = <Vec<((i32, u32), u32)> as Index<RangeFrom<usize>>>::index(move _26, move _27) -> [return: bb7, unwind: bb36];
    }

    bb7: {
        _24 = _25;
        _23 = &_24;
        _35 = (const 1984_i32, const 52_u32);
        _34 = (move _35, const 7_u32);
        _37 = (const 1985_i32, const 1_u32);
        _36 = (move _37, const 1_u32);
        _33 = [move _34, move _36];
        _32 = &_33;
        _31 = &_32;
        _22 = (move _23, move _31);
        _38 = (_22.0: &&[((i32, u32), u32)]);
        _39 = (_22.1: &&[((i32, u32), u32); 2]);
        _41 = <&[((i32, u32), u32)] as PartialEq<&[((i32, u32), u32); 2]>>::eq(_38, _39) -> [return: bb8, unwind: bb36];
    }

    bb8: {
        _40 = Not(move _41);
        switchInt(move _40) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _42 = core::panicking::AssertKind::Eq;
        _44 = Option::<Arguments<'_>>::None;
        _43 = core::panicking::assert_failed::<&[((i32, u32), u32)], &[((i32, u32), u32); 2]>(move _42, _38, _39, move _44) -> bb36;
    }

    bb10: {
        _45 = weeks_uniq(const 2013_i32) -> [return: bb11, unwind: bb36];
    }

    bb11: {
        _50 = &_45;
        _51 = RangeTo::<usize> { end: const 2_usize };
        _49 = <Vec<((i32, u32), u32)> as Index<RangeTo<usize>>>::index(move _50, move _51) -> [return: bb12, unwind: bb35];
    }

    bb12: {
        _48 = _49;
        _47 = &_48;
        _56 = (const 2013_i32, const 1_u32);
        _55 = (move _56, const 6_u32);
        _58 = (const 2013_i32, const 2_u32);
        _57 = (move _58, const 7_u32);
        _54 = [move _55, move _57];
        _53 = &_54;
        _52 = &_53;
        _46 = (move _47, move _52);
        _59 = (_46.0: &&[((i32, u32), u32)]);
        _60 = (_46.1: &&[((i32, u32), u32); 2]);
        _62 = <&[((i32, u32), u32)] as PartialEq<&[((i32, u32), u32); 2]>>::eq(_59, _60) -> [return: bb13, unwind: bb35];
    }

    bb13: {
        _61 = Not(move _62);
        switchInt(move _61) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _63 = core::panicking::AssertKind::Eq;
        _65 = Option::<Arguments<'_>>::None;
        _64 = core::panicking::assert_failed::<&[((i32, u32), u32)], &[((i32, u32), u32); 2]>(move _63, _59, _60, move _65) -> bb35;
    }

    bb15: {
        _70 = &_45;
        _74 = &_45;
        _73 = Vec::<((i32, u32), u32)>::len(move _74) -> [return: bb16, unwind: bb35];
    }

    bb16: {
        _72 = Sub(move _73, const 2_usize);
        _71 = RangeFrom::<usize> { start: move _72 };
        _69 = <Vec<((i32, u32), u32)> as Index<RangeFrom<usize>>>::index(move _70, move _71) -> [return: bb17, unwind: bb35];
    }

    bb17: {
        _68 = _69;
        _67 = &_68;
        _79 = (const 2013_i32, const 52_u32);
        _78 = (move _79, const 7_u32);
        _81 = (const 2014_i32, const 1_u32);
        _80 = (move _81, const 2_u32);
        _77 = [move _78, move _80];
        _76 = &_77;
        _75 = &_76;
        _66 = (move _67, move _75);
        _82 = (_66.0: &&[((i32, u32), u32)]);
        _83 = (_66.1: &&[((i32, u32), u32); 2]);
        _85 = <&[((i32, u32), u32)] as PartialEq<&[((i32, u32), u32); 2]>>::eq(_82, _83) -> [return: bb18, unwind: bb35];
    }

    bb18: {
        _84 = Not(move _85);
        switchInt(move _84) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _86 = core::panicking::AssertKind::Eq;
        _88 = Option::<Arguments<'_>>::None;
        _87 = core::panicking::assert_failed::<&[((i32, u32), u32)], &[((i32, u32), u32); 2]>(move _86, _82, _83, move _88) -> bb35;
    }

    bb20: {
        _89 = weeks_uniq(const 2015_i32) -> [return: bb21, unwind: bb35];
    }

    bb21: {
        _94 = &_89;
        _95 = RangeTo::<usize> { end: const 2_usize };
        _93 = <Vec<((i32, u32), u32)> as Index<RangeTo<usize>>>::index(move _94, move _95) -> [return: bb22, unwind: bb34];
    }

    bb22: {
        _92 = _93;
        _91 = &_92;
        _100 = (const 2015_i32, const 1_u32);
        _99 = (move _100, const 4_u32);
        _102 = (const 2015_i32, const 2_u32);
        _101 = (move _102, const 7_u32);
        _98 = [move _99, move _101];
        _97 = &_98;
        _96 = &_97;
        _90 = (move _91, move _96);
        _103 = (_90.0: &&[((i32, u32), u32)]);
        _104 = (_90.1: &&[((i32, u32), u32); 2]);
        _106 = <&[((i32, u32), u32)] as PartialEq<&[((i32, u32), u32); 2]>>::eq(_103, _104) -> [return: bb23, unwind: bb34];
    }

    bb23: {
        _105 = Not(move _106);
        switchInt(move _105) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _107 = core::panicking::AssertKind::Eq;
        _109 = Option::<Arguments<'_>>::None;
        _108 = core::panicking::assert_failed::<&[((i32, u32), u32)], &[((i32, u32), u32); 2]>(move _107, _103, _104, move _109) -> bb34;
    }

    bb25: {
        _114 = &_89;
        _118 = &_89;
        _117 = Vec::<((i32, u32), u32)>::len(move _118) -> [return: bb26, unwind: bb34];
    }

    bb26: {
        _116 = Sub(move _117, const 2_usize);
        _115 = RangeFrom::<usize> { start: move _116 };
        _113 = <Vec<((i32, u32), u32)> as Index<RangeFrom<usize>>>::index(move _114, move _115) -> [return: bb27, unwind: bb34];
    }

    bb27: {
        _112 = _113;
        _111 = &_112;
        _123 = (const 2015_i32, const 52_u32);
        _122 = (move _123, const 7_u32);
        _125 = (const 2015_i32, const 53_u32);
        _124 = (move _125, const 4_u32);
        _121 = [move _122, move _124];
        _120 = &_121;
        _119 = &_120;
        _110 = (move _111, move _119);
        _126 = (_110.0: &&[((i32, u32), u32)]);
        _127 = (_110.1: &&[((i32, u32), u32); 2]);
        _129 = <&[((i32, u32), u32)] as PartialEq<&[((i32, u32), u32); 2]>>::eq(_126, _127) -> [return: bb28, unwind: bb34];
    }

    bb28: {
        _128 = Not(move _129);
        switchInt(move _128) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _130 = core::panicking::AssertKind::Eq;
        _132 = Option::<Arguments<'_>>::None;
        _131 = core::panicking::assert_failed::<&[((i32, u32), u32)], &[((i32, u32), u32); 2]>(move _130, _126, _127, move _132) -> bb34;
    }

    bb30: {
        drop(_89) -> [return: bb31, unwind: bb35];
    }

    bb31: {
        drop(_45) -> [return: bb32, unwind: bb36];
    }

    bb32: {
        drop(_1) -> bb33;
    }

    bb33: {
        return;
    }

    bb34 (cleanup): {
        drop(_89) -> [return: bb35, unwind terminate];
    }

    bb35 (cleanup): {
        drop(_45) -> [return: bb36, unwind terminate];
    }

    bb36 (cleanup): {
        drop(_1) -> [return: bb37, unwind terminate];
    }

    bb37 (cleanup): {
        resume;
    }
}

fn weeks_uniq(_1: i32) -> Vec<((i32, u32), u32)> {
    debug year => _1;
    let mut _0: std::vec::Vec<((i32, u32), u32)>;
    let mut _2: std::iter::Map<std::iter::Map<impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone, [closure@ui/impl-trait/example-calendar.rs:423:49: 423:52]>, [closure@ui/impl-trait/example-calendar.rs:424:18: 424:27]>;
    let mut _3: std::iter::Map<impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone, [closure@ui/impl-trait/example-calendar.rs:423:49: 423:52]>;
    let mut _4: impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone;
    let mut _7: (i32, u32);
    let mut _8: std::option::Option<(i32, u32)>;
    let mut _9: &mut std::iter::Map<std::iter::Map<impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone, [closure@ui/impl-trait/example-calendar.rs:423:49: 423:52]>, [closure@ui/impl-trait/example-calendar.rs:424:18: 424:27]>;
    let mut _10: std::iter::Map<std::iter::Map<impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone, [closure@ui/impl-trait/example-calendar.rs:423:49: 423:52]>, [closure@ui/impl-trait/example-calendar.rs:424:18: 424:27]>;
    let mut _11: std::iter::Map<std::iter::Map<impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone, [closure@ui/impl-trait/example-calendar.rs:423:49: 423:52]>, [closure@ui/impl-trait/example-calendar.rs:424:18: 424:27]>;
    let mut _13: std::option::Option<(i32, u32)>;
    let mut _14: &mut std::iter::Map<std::iter::Map<impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone, [closure@ui/impl-trait/example-calendar.rs:423:49: 423:52]>, [closure@ui/impl-trait/example-calendar.rs:424:18: 424:27]>;
    let mut _15: isize;
    let mut _17: bool;
    let mut _18: &(i32, u32);
    let mut _19: &(i32, u32);
    let _20: ();
    let mut _21: &mut std::vec::Vec<((i32, u32), u32)>;
    let mut _22: ((i32, u32), u32);
    let mut _23: (i32, u32);
    let _24: ();
    let mut _25: &mut std::vec::Vec<((i32, u32), u32)>;
    let mut _26: ((i32, u32), u32);
    scope 1 {
        debug weeks => _2;
        let mut _5: std::vec::Vec<((i32, u32), u32)>;
        scope 2 {
            debug result => _5;
            let mut _6: ((i32, u32), u32);
            scope 3 {
                debug accum => _6;
                let mut _12: std::iter::Map<std::iter::Map<impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone, [closure@ui/impl-trait/example-calendar.rs:423:49: 423:52]>, [closure@ui/impl-trait/example-calendar.rs:424:18: 424:27]>;
                scope 4 {
                    debug iter => _12;
                    let _16: (i32, u32);
                    scope 5 {
                        debug yw => _16;
                    }
                }
            }
        }
    }

    bb0: {
        _4 = dates_in_year(_1) -> bb1;
    }

    bb1: {
        _3 = <impl Iterator<Item = NaiveDate> + Clone as Iterator>::map::<(i32, u32, Weekday), [closure@ui/impl-trait/example-calendar.rs:423:49: 423:52]>(move _4, const ZeroSized: [closure@ui/impl-trait/example-calendar.rs:423:49: 423:52]) -> bb2;
    }

    bb2: {
        _2 = <Map<impl Iterator<Item = NaiveDate> + Clone, [closure@ui/impl-trait/example-calendar.rs:423:49: 423:52]> as Iterator>::map::<(i32, u32), [closure@ui/impl-trait/example-calendar.rs:424:18: 424:27]>(move _3, const ZeroSized: [closure@ui/impl-trait/example-calendar.rs:424:18: 424:27]) -> bb3;
    }

    bb3: {
        _5 = Vec::<((i32, u32), u32)>::new() -> bb4;
    }

    bb4: {
        _9 = &mut _2;
        _8 = <Map<Map<impl Iterator<Item = NaiveDate> + Clone, [closure@ui/impl-trait/example-calendar.rs:423:49: 423:52]>, [closure@ui/impl-trait/example-calendar.rs:424:18: 424:27]> as Iterator>::next(move _9) -> [return: bb5, unwind: bb18];
    }

    bb5: {
        _7 = Option::<(i32, u32)>::unwrap(move _8) -> [return: bb6, unwind: bb18];
    }

    bb6: {
        _6 = (move _7, const 1_u32);
        _11 = move _2;
        _10 = <Map<Map<impl Iterator<Item = NaiveDate> + Clone, [closure@ui/impl-trait/example-calendar.rs:423:49: 423:52]>, [closure@ui/impl-trait/example-calendar.rs:424:18: 424:27]> as IntoIterator>::into_iter(move _11) -> [return: bb7, unwind: bb18];
    }

    bb7: {
        _12 = move _10;
        goto -> bb8;
    }

    bb8: {
        _14 = &mut _12;
        _13 = <Map<Map<impl Iterator<Item = NaiveDate> + Clone, [closure@ui/impl-trait/example-calendar.rs:423:49: 423:52]>, [closure@ui/impl-trait/example-calendar.rs:424:18: 424:27]> as Iterator>::next(_14) -> [return: bb9, unwind: bb18];
    }

    bb9: {
        _15 = discriminant(_13);
        switchInt(move _15) -> [0: bb12, 1: bb10, otherwise: bb11];
    }

    bb10: {
        _16 = ((_13 as Some).0: (i32, u32));
        _18 = &(_6.0: (i32, u32));
        _19 = &_16;
        _17 = <(i32, u32) as PartialEq>::eq(move _18, move _19) -> [return: bb13, unwind: bb18];
    }

    bb11: {
        unreachable;
    }

    bb12: {
        _25 = &mut _5;
        _26 = _6;
        _24 = Vec::<((i32, u32), u32)>::push(move _25, move _26) -> [return: bb17, unwind: bb18];
    }

    bb13: {
        switchInt(move _17) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        (_6.1: u32) = Add((_6.1: u32), const 1_u32);
        goto -> bb8;
    }

    bb15: {
        _21 = &mut _5;
        _22 = _6;
        _20 = Vec::<((i32, u32), u32)>::push(move _21, move _22) -> [return: bb16, unwind: bb18];
    }

    bb16: {
        _23 = _16;
        _6 = (move _23, const 1_u32);
        goto -> bb8;
    }

    bb17: {
        _0 = move _5;
        return;
    }

    bb18 (cleanup): {
        drop(_5) -> [return: bb19, unwind terminate];
    }

    bb19 (cleanup): {
        resume;
    }
}

fn weeks_uniq::{closure#0}(_1: &mut [closure@ui/impl-trait/example-calendar.rs:423:49: 423:52], _2: NaiveDate) -> (i32, u32, Weekday) {
    debug d => _2;
    let mut _0: (i32, u32, Weekday);
    let mut _3: &NaiveDate;

    bb0: {
        _3 = &_2;
        _0 = NaiveDate::isoweekdate(move _3) -> bb1;
    }

    bb1: {
        return;
    }
}

fn weeks_uniq::{closure#1}(_1: &mut [closure@ui/impl-trait/example-calendar.rs:424:18: 424:27], _2: (i32, u32, Weekday)) -> (i32, u32) {
    let mut _0: (i32, u32);
    let _3: i32;
    let _4: u32;
    scope 1 {
        debug y => _3;
        debug w => _4;
    }

    bb0: {
        _3 = (_2.0: i32);
        _4 = (_2.1: u32);
        _0 = (_3, _4);
        return;
    }
}

fn test_by_week() -> () {
    let mut _0: ();
    let mut _1: impl std::iter::Iterator<Item = (u32, impl DateIterator)> + std::clone::Clone;
    let mut _2: impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone;
    let mut _3: (&&[NaiveDate], &&[NaiveDate; 5]);
    let mut _4: &&[NaiveDate];
    let _5: &[NaiveDate];
    let _6: &[NaiveDate];
    let mut _7: &std::vec::Vec<NaiveDate>;
    let _8: std::vec::Vec<NaiveDate>;
    let mut _9: impl DateIterator;
    let mut _10: (u32, impl DateIterator);
    let mut _11: std::option::Option<(u32, impl DateIterator)>;
    let mut _12: &mut impl std::iter::Iterator<Item = (u32, impl DateIterator)> + std::clone::Clone;
    let mut _13: &&[NaiveDate; 5];
    let _14: &[NaiveDate; 5];
    let _15: [NaiveDate; 5];
    let mut _16: NaiveDate;
    let mut _17: NaiveDate;
    let mut _18: NaiveDate;
    let mut _19: NaiveDate;
    let mut _20: NaiveDate;
    let mut _23: bool;
    let mut _24: bool;
    let _26: !;
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _28: (&&[NaiveDate], &&[NaiveDate; 7]);
    let mut _29: &&[NaiveDate];
    let _30: &[NaiveDate];
    let _31: &[NaiveDate];
    let mut _32: &std::vec::Vec<NaiveDate>;
    let _33: std::vec::Vec<NaiveDate>;
    let mut _34: impl DateIterator;
    let mut _35: (u32, impl DateIterator);
    let mut _36: std::option::Option<(u32, impl DateIterator)>;
    let mut _37: &mut impl std::iter::Iterator<Item = (u32, impl DateIterator)> + std::clone::Clone;
    let mut _38: &&[NaiveDate; 7];
    let _39: &[NaiveDate; 7];
    let _40: [NaiveDate; 7];
    let mut _41: NaiveDate;
    let mut _42: NaiveDate;
    let mut _43: NaiveDate;
    let mut _44: NaiveDate;
    let mut _45: NaiveDate;
    let mut _46: NaiveDate;
    let mut _47: NaiveDate;
    let mut _50: bool;
    let mut _51: bool;
    let _53: !;
    let mut _54: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _55: (&NaiveDate, &NaiveDate);
    let mut _56: &NaiveDate;
    let _57: NaiveDate;
    let mut _58: std::option::Option<NaiveDate>;
    let mut _59: &mut impl DateIterator;
    let mut _60: (u32, impl DateIterator);
    let mut _61: std::option::Option<(u32, impl DateIterator)>;
    let mut _62: &mut impl std::iter::Iterator<Item = (u32, impl DateIterator)> + std::clone::Clone;
    let mut _63: &NaiveDate;
    let _64: NaiveDate;
    let mut _67: bool;
    let mut _68: bool;
    let _70: !;
    let mut _71: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug weeks => _1;
        let _21: &&[NaiveDate];
        let _22: &&[NaiveDate; 5];
        let _48: &&[NaiveDate];
        let _49: &&[NaiveDate; 7];
        let _65: &NaiveDate;
        let _66: &NaiveDate;
        scope 2 {
            debug left_val => _21;
            debug right_val => _22;
            let _25: core::panicking::AssertKind;
            scope 3 {
                debug kind => _25;
            }
        }
        scope 4 {
            debug left_val => _48;
            debug right_val => _49;
            let _52: core::panicking::AssertKind;
            scope 5 {
                debug kind => _52;
            }
        }
        scope 6 {
            debug left_val => _65;
            debug right_val => _66;
            let _69: core::panicking::AssertKind;
            scope 7 {
                debug kind => _69;
            }
        }
    }

    bb0: {
        _2 = dates_in_year(const 2013_i32) -> bb1;
    }

    bb1: {
        _1 = <impl Iterator<Item = NaiveDate> + Clone as IteratorExt>::__::<fn(impl Iterator<Item = NaiveDate> + Clone) -> impl Iterator<Item = (u32, impl DateIterator)> + Clone {by_week::<impl Iterator<Item = NaiveDate> + Clone>}, impl Iterator<Item = (u32, impl DateIterator)> + Clone>(move _2, by_week::<impl Iterator<Item = NaiveDate> + Clone>) -> bb2;
    }

    bb2: {
        _12 = &mut _1;
        _11 = <impl Iterator<Item = (u32, impl DateIterator)> + Clone as Iterator>::next(move _12) -> bb3;
    }

    bb3: {
        _10 = Option::<(u32, impl DateIterator)>::unwrap(move _11) -> bb4;
    }

    bb4: {
        _9 = move (_10.1: impl DateIterator);
        _8 = <impl DateIterator as Iterator>::collect::<Vec<NaiveDate>>(move _9) -> bb5;
    }

    bb5: {
        _7 = &_8;
        _6 = <Vec<NaiveDate> as Deref>::deref(move _7) -> [return: bb6, unwind: bb40];
    }

    bb6: {
        _5 = _6;
        _4 = &_5;
        _16 = NaiveDate::from_ymd(const 2013_i32, const 1_u32, const 1_u32) -> [return: bb7, unwind: bb40];
    }

    bb7: {
        _17 = NaiveDate::from_ymd(const 2013_i32, const 1_u32, const 2_u32) -> [return: bb8, unwind: bb40];
    }

    bb8: {
        _18 = NaiveDate::from_ymd(const 2013_i32, const 1_u32, const 3_u32) -> [return: bb9, unwind: bb40];
    }

    bb9: {
        _19 = NaiveDate::from_ymd(const 2013_i32, const 1_u32, const 4_u32) -> [return: bb10, unwind: bb40];
    }

    bb10: {
        _20 = NaiveDate::from_ymd(const 2013_i32, const 1_u32, const 5_u32) -> [return: bb11, unwind: bb40];
    }

    bb11: {
        _15 = [move _16, move _17, move _18, move _19, move _20];
        _14 = &_15;
        _13 = &_14;
        _3 = (move _4, move _13);
        _21 = (_3.0: &&[NaiveDate]);
        _22 = (_3.1: &&[NaiveDate; 5]);
        _24 = <&[NaiveDate] as PartialEq<&[NaiveDate; 5]>>::eq(_21, _22) -> [return: bb12, unwind: bb40];
    }

    bb12: {
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _25 = core::panicking::AssertKind::Eq;
        _27 = Option::<Arguments<'_>>::None;
        _26 = core::panicking::assert_failed::<&[NaiveDate], &[NaiveDate; 5]>(move _25, _21, _22, move _27) -> bb40;
    }

    bb14: {
        drop(_8) -> bb15;
    }

    bb15: {
        _37 = &mut _1;
        _36 = <impl Iterator<Item = (u32, impl DateIterator)> + Clone as Iterator>::next(move _37) -> bb16;
    }

    bb16: {
        _35 = Option::<(u32, impl DateIterator)>::unwrap(move _36) -> bb17;
    }

    bb17: {
        _34 = move (_35.1: impl DateIterator);
        _33 = <impl DateIterator as Iterator>::collect::<Vec<NaiveDate>>(move _34) -> bb18;
    }

    bb18: {
        _32 = &_33;
        _31 = <Vec<NaiveDate> as Deref>::deref(move _32) -> [return: bb19, unwind: bb39];
    }

    bb19: {
        _30 = _31;
        _29 = &_30;
        _41 = NaiveDate::from_ymd(const 2013_i32, const 1_u32, const 6_u32) -> [return: bb20, unwind: bb39];
    }

    bb20: {
        _42 = NaiveDate::from_ymd(const 2013_i32, const 1_u32, const 7_u32) -> [return: bb21, unwind: bb39];
    }

    bb21: {
        _43 = NaiveDate::from_ymd(const 2013_i32, const 1_u32, const 8_u32) -> [return: bb22, unwind: bb39];
    }

    bb22: {
        _44 = NaiveDate::from_ymd(const 2013_i32, const 1_u32, const 9_u32) -> [return: bb23, unwind: bb39];
    }

    bb23: {
        _45 = NaiveDate::from_ymd(const 2013_i32, const 1_u32, const 10_u32) -> [return: bb24, unwind: bb39];
    }

    bb24: {
        _46 = NaiveDate::from_ymd(const 2013_i32, const 1_u32, const 11_u32) -> [return: bb25, unwind: bb39];
    }

    bb25: {
        _47 = NaiveDate::from_ymd(const 2013_i32, const 1_u32, const 12_u32) -> [return: bb26, unwind: bb39];
    }

    bb26: {
        _40 = [move _41, move _42, move _43, move _44, move _45, move _46, move _47];
        _39 = &_40;
        _38 = &_39;
        _28 = (move _29, move _38);
        _48 = (_28.0: &&[NaiveDate]);
        _49 = (_28.1: &&[NaiveDate; 7]);
        _51 = <&[NaiveDate] as PartialEq<&[NaiveDate; 7]>>::eq(_48, _49) -> [return: bb27, unwind: bb39];
    }

    bb27: {
        _50 = Not(move _51);
        switchInt(move _50) -> [0: bb29, otherwise: bb28];
    }

    bb28: {
        _52 = core::panicking::AssertKind::Eq;
        _54 = Option::<Arguments<'_>>::None;
        _53 = core::panicking::assert_failed::<&[NaiveDate], &[NaiveDate; 7]>(move _52, _48, _49, move _54) -> bb39;
    }

    bb29: {
        drop(_33) -> bb30;
    }

    bb30: {
        _62 = &mut _1;
        _61 = <impl Iterator<Item = (u32, impl DateIterator)> + Clone as Iterator>::next(move _62) -> bb31;
    }

    bb31: {
        _60 = Option::<(u32, impl DateIterator)>::unwrap(move _61) -> bb32;
    }

    bb32: {
        _59 = &mut (_60.1: impl DateIterator);
        _58 = <impl DateIterator as Iterator>::nth(move _59, const 0_usize) -> bb33;
    }

    bb33: {
        _57 = Option::<NaiveDate>::unwrap(move _58) -> bb34;
    }

    bb34: {
        _56 = &_57;
        _64 = NaiveDate::from_ymd(const 2013_i32, const 1_u32, const 13_u32) -> bb35;
    }

    bb35: {
        _63 = &_64;
        _55 = (move _56, move _63);
        _65 = (_55.0: &NaiveDate);
        _66 = (_55.1: &NaiveDate);
        _68 = <NaiveDate as PartialEq>::eq(_65, _66) -> bb36;
    }

    bb36: {
        _67 = Not(move _68);
        switchInt(move _67) -> [0: bb38, otherwise: bb37];
    }

    bb37: {
        _69 = core::panicking::AssertKind::Eq;
        _71 = Option::<Arguments<'_>>::None;
        _70 = core::panicking::assert_failed::<NaiveDate, NaiveDate>(move _69, _65, _66, move _71);
    }

    bb38: {
        return;
    }

    bb39 (cleanup): {
        drop(_33) -> [return: bb41, unwind terminate];
    }

    bb40 (cleanup): {
        drop(_8) -> [return: bb41, unwind terminate];
    }

    bb41 (cleanup): {
        resume;
    }
}

const COLS_PER_DAY: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const 3_u32;
        return;
    }
}

const COLS_PER_WEEK: u32 = {
    let mut _0: u32;
    let mut _1: (u32, bool);

    bb0: {
        _1 = CheckedMul(const 7_u32, const _);
        assert(!move (_1.1: bool), "attempt to compute `{} * {}`, which would overflow", const 7_u32, const _) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: u32);
        return;
    }
}

fn format_weeks(_1: impl Iterator<Item = impl DateIterator>) -> impl Iterator<Item = String> {
    debug it => _1;
    let mut _0: impl std::iter::Iterator<Item = std::string::String>;

    bb0: {
        _0 = <impl Iterator<Item = impl DateIterator> as Iterator>::map::<String, [closure@ui/impl-trait/example-calendar.rs:487:12: 487:18]>(move _1, const ZeroSized: [closure@ui/impl-trait/example-calendar.rs:487:12: 487:18]) -> bb1;
    }

    bb1: {
        return;
    }
}

fn format_weeks::{closure#0}(_1: &mut [closure@ui/impl-trait/example-calendar.rs:487:12: 487:18], _2: impl DateIterator) -> String {
    debug week => _2;
    let mut _0: std::string::String;
    let mut _3: std::string::String;
    let mut _4: usize;
    let mut _5: u32;
    let mut _6: u32;
    let mut _9: impl DateIterator;
    let mut _10: impl DateIterator;
    let mut _12: std::option::Option<NaiveDate>;
    let mut _13: &mut impl DateIterator;
    let mut _14: isize;
    let mut _16: u32;
    let mut _17: &Weekday;
    let _18: Weekday;
    let mut _19: &NaiveDate;
    let mut _20: bool;
    let _21: ();
    let mut _22: &mut std::string::String;
    let mut _23: std::iter::Take<std::iter::Repeat<char>>;
    let mut _24: usize;
    let mut _25: u32;
    let mut _26: u32;
    let _27: ();
    let mut _28: std::result::Result<(), std::fmt::Error>;
    let mut _29: &mut std::string::String;
    let mut _30: std::fmt::Arguments<'_>;
    let mut _31: &[&str];
    let _32: &[&str; 1];
    let _33: [&str; 1];
    let mut _34: &[core::fmt::rt::Argument<'_>];
    let _35: &[core::fmt::rt::Argument<'_>; 1];
    let _36: [core::fmt::rt::Argument<'_>; 1];
    let mut _37: core::fmt::rt::Argument<'_>;
    let _38: &u32;
    let _39: u32;
    let mut _40: &NaiveDate;
    let mut _41: &[core::fmt::rt::Placeholder];
    let _42: &[core::fmt::rt::Placeholder; 1];
    let _43: [core::fmt::rt::Placeholder; 1];
    let mut _44: core::fmt::rt::Placeholder;
    let mut _45: core::fmt::rt::Alignment;
    let mut _46: core::fmt::rt::Count;
    let mut _47: core::fmt::rt::Count;
    let mut _48: core::fmt::rt::UnsafeArg;
    let _49: ();
    let mut _50: &mut std::string::String;
    let mut _51: std::iter::Take<std::iter::Repeat<char>>;
    let mut _52: usize;
    let mut _53: u32;
    let mut _54: u32;
    let mut _55: u32;
    let mut _56: bool;
    scope 1 {
        debug buf => _3;
        let mut _7: u32;
        scope 2 {
            debug last_day => _7;
            let mut _8: bool;
            scope 3 {
                debug first => _8;
                let mut _11: impl DateIterator;
                scope 4 {
                    debug iter => _11;
                    let _15: NaiveDate;
                    scope 5 {
                        debug d => _15;
                        scope 6 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _56 = const false;
        _56 = const true;
        _6 = Mul(const _, const _);
        _5 = Add(move _6, const 2_u32);
        _4 = move _5 as usize (IntToInt);
        _3 = String::with_capacity(move _4) -> [return: bb1, unwind: bb28];
    }

    bb1: {
        _7 = const 0_u32;
        _8 = const true;
        _56 = const false;
        _10 = move _2;
        _9 = <impl DateIterator as IntoIterator>::into_iter(move _10) -> [return: bb2, unwind: bb25];
    }

    bb2: {
        _11 = move _9;
        goto -> bb3;
    }

    bb3: {
        _13 = &mut _11;
        _12 = <impl DateIterator as Iterator>::next(_13) -> [return: bb4, unwind: bb24];
    }

    bb4: {
        _14 = discriminant(_12);
        switchInt(move _14) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        _15 = ((_12 as Some).0: NaiveDate);
        _19 = &_15;
        _18 = NaiveDate::weekday(move _19) -> [return: bb8, unwind: bb24];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        drop(_11) -> [return: bb21, unwind: bb25];
    }

    bb8: {
        _17 = &_18;
        _16 = Weekday::num_days_from_sunday(move _17) -> [return: bb9, unwind: bb24];
    }

    bb9: {
        _7 = move _16;
        _20 = _8;
        switchInt(move _20) -> [0: bb13, otherwise: bb10];
    }

    bb10: {
        _22 = &mut _3;
        _26 = _7;
        _25 = Mul(const _, move _26);
        _24 = move _25 as usize (IntToInt);
        _23 = spaces(move _24) -> [return: bb11, unwind: bb24];
    }

    bb11: {
        _21 = <String as Extend<char>>::extend::<std::iter::Take<std::iter::Repeat<char>>>(move _22, move _23) -> [return: bb12, unwind: bb24];
    }

    bb12: {
        _8 = const false;
        goto -> bb13;
    }

    bb13: {
        _29 = &mut _3;
        _33 = [const " "];
        _32 = &_33;
        _31 = _32 as &[&str] (Pointer(Unsize));
        _40 = &_15;
        _39 = NaiveDate::day(move _40) -> [return: bb14, unwind: bb24];
    }

    bb14: {
        _38 = &_39;
        _37 = core::fmt::rt::Argument::<'_>::new_display::<u32>(_38) -> [return: bb15, unwind: bb24];
    }

    bb15: {
        _36 = [move _37];
        _35 = &_36;
        _34 = _35 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _45 = core::fmt::rt::Alignment::Right;
        _46 = core::fmt::rt::Count::Implied;
        _47 = core::fmt::rt::Count::Is(const 2_usize) -> [return: bb16, unwind: bb24];
    }

    bb16: {
        _44 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _45, const 0_u32, move _46, move _47) -> [return: bb17, unwind: bb24];
    }

    bb17: {
        _43 = [move _44];
        _42 = &_43;
        _41 = _42 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _48 = core::fmt::rt::UnsafeArg::new() -> [return: bb18, unwind: bb24];
    }

    bb18: {
        _30 = Arguments::<'_>::new_v1_formatted(move _31, move _34, move _41, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb19, unwind: bb24];
    }

    bb19: {
        _28 = <String as std::fmt::Write>::write_fmt(move _29, move _30) -> [return: bb20, unwind: bb24];
    }

    bb20: {
        _27 = Result::<(), std::fmt::Error>::unwrap(move _28) -> [return: bb29, unwind: bb24];
    }

    bb21: {
        _50 = &mut _3;
        _55 = _7;
        _54 = Sub(const 6_u32, move _55);
        _53 = Mul(const _, move _54);
        _52 = move _53 as usize (IntToInt);
        _51 = spaces(move _52) -> [return: bb22, unwind: bb25];
    }

    bb22: {
        _49 = <String as Extend<char>>::extend::<std::iter::Take<std::iter::Repeat<char>>>(move _50, move _51) -> [return: bb23, unwind: bb25];
    }

    bb23: {
        _0 = move _3;
        return;
    }

    bb24 (cleanup): {
        drop(_11) -> [return: bb25, unwind terminate];
    }

    bb25 (cleanup): {
        drop(_3) -> [return: bb28, unwind terminate];
    }

    bb26 (cleanup): {
        resume;
    }

    bb27 (cleanup): {
        drop(_2) -> [return: bb26, unwind terminate];
    }

    bb28 (cleanup): {
        switchInt(_56) -> [0: bb26, otherwise: bb27];
    }

    bb29: {
        goto -> bb3;
    }
}

fn test_format_weeks() -> () {
    let mut _0: ();
    let _1: std::option::Option<std::string::String>;
    let mut _2: std::option::Option<(u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)>;
    let mut _3: &mut impl std::iter::Iterator<Item = (u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)> + std::clone::Clone;
    let mut _4: impl std::iter::Iterator<Item = (u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)> + std::clone::Clone;
    let mut _5: impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone;
    let mut _6: (&std::option::Option<&str>, &std::option::Option<&str>);
    let mut _7: &std::option::Option<&str>;
    let _8: std::option::Option<&str>;
    let mut _9: std::option::Option<&std::string::String>;
    let mut _10: &std::option::Option<std::string::String>;
    let mut _11: &std::option::Option<&str>;
    let _12: std::option::Option<&str>;
    let mut _15: bool;
    let mut _16: bool;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug jan_2013 => _1;
        let _13: &std::option::Option<&str>;
        let _14: &std::option::Option<&str>;
        scope 2 {
            debug left_val => _13;
            debug right_val => _14;
            let _17: core::panicking::AssertKind;
            scope 3 {
                debug kind => _17;
            }
        }
    }

    bb0: {
        _5 = dates_in_year(const 2013_i32) -> bb1;
    }

    bb1: {
        _4 = <impl Iterator<Item = NaiveDate> + Clone as IteratorExt>::__::<fn(impl Iterator<Item = NaiveDate> + Clone) -> impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone {by_month::<impl Iterator<Item = NaiveDate> + Clone>}, impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone>(move _5, by_month::<impl Iterator<Item = NaiveDate> + Clone>) -> bb2;
    }

    bb2: {
        _3 = &mut _4;
        _2 = <impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone as Iterator>::next(move _3) -> bb3;
    }

    bb3: {
        _1 = Option::<(u32, impl Iterator<Item = NaiveDate> + Clone)>::map::<String, [closure@ui/impl-trait/example-calendar.rs:516:14: 516:26]>(move _2, const ZeroSized: [closure@ui/impl-trait/example-calendar.rs:516:14: 516:26]) -> bb4;
    }

    bb4: {
        _10 = &_1;
        _9 = Option::<String>::as_ref(move _10) -> [return: bb5, unwind: bb11];
    }

    bb5: {
        _8 = Option::<&String>::map::<&str, [closure@ui/impl-trait/example-calendar.rs:523:31: 523:34]>(move _9, const ZeroSized: [closure@ui/impl-trait/example-calendar.rs:523:31: 523:34]) -> [return: bb6, unwind: bb11];
    }

    bb6: {
        _7 = &_8;
        _12 = Option::<&str>::Some(const "        1  2  3  4  5\n  6  7  8  9 10 11 12\n 13 14 15 16 17 18 19\n 20 21 22 23 24 25 26\n 27 28 29 30 31      ");
        _11 = &_12;
        _6 = (move _7, move _11);
        _13 = (_6.0: &std::option::Option<&str>);
        _14 = (_6.1: &std::option::Option<&str>);
        _16 = <Option<&str> as PartialEq>::eq(_13, _14) -> [return: bb7, unwind: bb11];
    }

    bb7: {
        _15 = Not(move _16);
        switchInt(move _15) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<Option<&str>, Option<&str>>(move _17, _13, _14, move _19) -> bb11;
    }

    bb9: {
        drop(_1) -> bb10;
    }

    bb10: {
        return;
    }

    bb11 (cleanup): {
        drop(_1) -> [return: bb12, unwind terminate];
    }

    bb12 (cleanup): {
        resume;
    }
}

fn test_format_weeks::{closure#0}(_1: [closure@ui/impl-trait/example-calendar.rs:516:14: 516:26], _2: (u32, impl Iterator<Item = NaiveDate> + Clone)) -> String {
    let mut _0: std::string::String;
    let _3: impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone;
    let mut _4: impl std::iter::Iterator<Item = std::string::String>;
    let mut _5: std::iter::Map<impl std::iter::Iterator<Item = (u32, impl DateIterator)> + std::clone::Clone, [closure@ui/impl-trait/example-calendar.rs:518:23: 518:35]>;
    let mut _6: impl std::iter::Iterator<Item = (u32, impl DateIterator)> + std::clone::Clone;
    let _7: &str;
    scope 1 {
        debug month => _3;
    }

    bb0: {
        _3 = move (_2.1: impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone);
        _6 = <impl Iterator<Item = NaiveDate> + Clone as IteratorExt>::__::<fn(impl Iterator<Item = NaiveDate> + Clone) -> impl Iterator<Item = (u32, impl DateIterator)> + Clone {by_week::<impl Iterator<Item = NaiveDate> + Clone>}, impl Iterator<Item = (u32, impl DateIterator)> + Clone>(move _3, by_week::<impl Iterator<Item = NaiveDate> + Clone>) -> bb1;
    }

    bb1: {
        _5 = <impl Iterator<Item = (u32, impl DateIterator)> + Clone as Iterator>::map::<impl DateIterator, [closure@ui/impl-trait/example-calendar.rs:518:23: 518:35]>(move _6, const ZeroSized: [closure@ui/impl-trait/example-calendar.rs:518:23: 518:35]) -> bb2;
    }

    bb2: {
        _4 = <Map<impl Iterator<Item = (u32, impl DateIterator)> + Clone, [closure@ui/impl-trait/example-calendar.rs:518:23: 518:35]> as IteratorExt>::__::<fn(Map<impl Iterator<Item = (u32, impl DateIterator)> + Clone, [closure@ui/impl-trait/example-calendar.rs:518:23: 518:35]>) -> impl Iterator<Item = String> {format_weeks::<impl DateIterator, Map<impl Iterator<Item = (u32, impl DateIterator)> + Clone, [closure@ui/impl-trait/example-calendar.rs:518:23: 518:35]>>}, impl Iterator<Item = String>>(move _5, format_weeks::<impl DateIterator, Map<impl Iterator<Item = (u32, impl DateIterator)> + Clone, [closure@ui/impl-trait/example-calendar.rs:518:23: 518:35]>>) -> bb3;
    }

    bb3: {
        _7 = const "\n";
        _0 = <impl Iterator<Item = String> as IteratorExt>::join(move _4, _7) -> bb4;
    }

    bb4: {
        return;
    }
}

fn test_format_weeks::{closure#0}::{closure#0}(_1: &mut [closure@ui/impl-trait/example-calendar.rs:518:23: 518:35], _2: (u32, impl DateIterator)) -> impl DateIterator {
    let mut _0: impl DateIterator;
    scope 1 {
        debug weeks => _0;
    }

    bb0: {
        _0 = move (_2.1: impl DateIterator);
        return;
    }
}

fn test_format_weeks::{closure#1}(_1: [closure@ui/impl-trait/example-calendar.rs:523:31: 523:34], _2: &String) -> &str {
    debug s => _2;
    let mut _0: &str;
    let _3: &str;

    bb0: {
        _3 = <String as Deref>::deref(_2) -> bb1;
    }

    bb1: {
        _0 = _3;
        return;
    }
}

fn month_title(_1: u32) -> String {
    debug month => _1;
    let mut _0: std::string::String;
    let mut _2: (&usize, &usize);
    let mut _3: &usize;
    let _4: usize;
    let _5: &[&str];
    let mut _6: &usize;
    let _7: usize;
    let _8: &usize;
    let _9: &usize;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let _17: &str;
    let mut _18: &[&str];
    let _19: usize;
    let mut _20: u32;
    let mut _21: usize;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: usize;
    let mut _26: usize;
    let mut _27: !;
    let mut _29: usize;
    let mut _30: usize;
    let mut _31: usize;
    let mut _32: bool;
    let mut _34: usize;
    let mut _35: usize;
    let mut _36: usize;
    let mut _38: usize;
    let _39: ();
    let mut _40: &mut std::string::String;
    let mut _41: std::iter::Take<std::iter::Repeat<char>>;
    let _42: ();
    let mut _43: &mut std::string::String;
    let _44: ();
    let mut _45: &mut std::string::String;
    let mut _46: std::iter::Take<std::iter::Repeat<char>>;
    scope 1 {
        debug left_val => _8;
        debug right_val => _9;
        let _14: core::panicking::AssertKind;
        scope 2 {
            debug kind => _14;
        }
    }
    scope 3 {
        debug name => _17;
        let _28: usize;
        scope 4 {
            debug before => _28;
            let _33: usize;
            scope 5 {
                debug after => _33;
                let mut _37: std::string::String;
                scope 6 {
                    debug result => _37;
                }
            }
        }
    }

    bb0: {
        _5 = const _;
        _4 = Len((*_5));
        _3 = &_4;
        _7 = const 12_usize;
        _6 = &_7;
        _2 = (move _3, move _6);
        _8 = (_2.0: &usize);
        _9 = (_2.1: &usize);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<usize, usize>(move _14, _8, _9, move _16);
    }

    bb2: {
        _18 = const _;
        _20 = Sub(_1, const 1_u32);
        _19 = move _20 as usize (IntToInt);
        _21 = Len((*_18));
        _22 = Lt(_19, _21);
        assert(move _22, "index out of bounds: the length is {} but the index is {}", move _21, _19) -> bb3;
    }

    bb3: {
        _17 = (*_18)[_19];
        _25 = core::str::<impl str>::len(_17) -> bb4;
    }

    bb4: {
        _26 = const _ as usize (IntToInt);
        _24 = Lt(move _25, move _26);
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _27 = core::panicking::panic(const "assertion failed: name.len() < COLS_PER_WEEK as usize");
    }

    bb6: {
        _30 = const _ as usize (IntToInt);
        _31 = core::str::<impl str>::len(_17) -> bb7;
    }

    bb7: {
        _29 = Sub(move _30, move _31);
        _32 = Eq(const 2_usize, const 0_usize);
        assert(!move _32, "attempt to divide `{}` by zero", _29) -> bb8;
    }

    bb8: {
        _28 = Div(move _29, const 2_usize);
        _35 = const _ as usize (IntToInt);
        _36 = core::str::<impl str>::len(_17) -> bb9;
    }

    bb9: {
        _34 = Sub(move _35, move _36);
        _33 = Sub(move _34, _28);
        _38 = const _ as usize (IntToInt);
        _37 = String::with_capacity(move _38) -> bb10;
    }

    bb10: {
        _40 = &mut _37;
        _41 = spaces(_28) -> [return: bb11, unwind: bb16];
    }

    bb11: {
        _39 = <String as Extend<char>>::extend::<std::iter::Take<std::iter::Repeat<char>>>(move _40, move _41) -> [return: bb12, unwind: bb16];
    }

    bb12: {
        _43 = &mut _37;
        _42 = String::push_str(move _43, _17) -> [return: bb13, unwind: bb16];
    }

    bb13: {
        _45 = &mut _37;
        _46 = spaces(_33) -> [return: bb14, unwind: bb16];
    }

    bb14: {
        _44 = <String as Extend<char>>::extend::<std::iter::Take<std::iter::Repeat<char>>>(move _45, move _46) -> [return: bb15, unwind: bb16];
    }

    bb15: {
        _0 = move _37;
        return;
    }

    bb16 (cleanup): {
        drop(_37) -> [return: bb17, unwind terminate];
    }

    bb17 (cleanup): {
        resume;
    }
}

const MONTH_NAMES: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 12];
    let _2: &[&str; 12];
    let _3: [&str; 12];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = [const "January", const "February", const "March", const "April", const "May", const "June", const "July", const "August", const "September", const "October", const "November", const "December"];
        _2 = &_3;
        _1 = &(*_2);
        _0 = move _1 as &[&str] (Pointer(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

fn test_month_title() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let mut _2: &usize;
    let _3: usize;
    let mut _4: &std::string::String;
    let _5: std::string::String;
    let mut _6: &usize;
    let _7: usize;
    let _8: &usize;
    let _9: &usize;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _8;
        debug right_val => _9;
        let _14: core::panicking::AssertKind;
        scope 2 {
            debug kind => _14;
        }
    }

    bb0: {
        _5 = month_title(const 1_u32) -> bb1;
    }

    bb1: {
        _4 = &_5;
        _3 = String::len(move _4) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _2 = &_3;
        _7 = const _ as usize (IntToInt);
        _6 = &_7;
        _1 = (move _2, move _6);
        _8 = (_1.0: &usize);
        _9 = (_1.1: &usize);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<usize, usize>(move _14, _8, _9, move _16) -> bb6;
    }

    bb4: {
        drop(_5) -> bb5;
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_5) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }
}

fn format_month(_1: impl DateIterator) -> impl Iterator<Item = String> {
    debug it => _1;
    let mut _0: impl std::iter::Iterator<Item = std::string::String>;
    let mut _2: std::iter::Peekable<impl DateIterator>;
    let mut _4: u32;
    let mut _5: &NaiveDate;
    let _6: &NaiveDate;
    let mut _7: std::option::Option<&NaiveDate>;
    let mut _8: &mut std::iter::Peekable<impl DateIterator>;
    let mut _9: std::option::IntoIter<std::string::String>;
    let mut _10: std::option::Option<std::string::String>;
    let mut _11: std::string::String;
    let mut _12: impl std::iter::Iterator<Item = std::string::String>;
    let mut _13: std::iter::Map<impl std::iter::Iterator<Item = (u32, impl DateIterator)> + std::clone::Clone, [closure@ui/impl-trait/example-calendar.rs:566:18: 566:29]>;
    let mut _14: impl std::iter::Iterator<Item = (u32, impl DateIterator)> + std::clone::Clone;
    let mut _15: std::iter::Peekable<impl DateIterator>;
    let mut _16: bool;
    let mut _17: bool;
    scope 1 {
        debug month_days => _2;
        let _3: std::string::String;
        scope 2 {
            debug title => _3;
        }
    }

    bb0: {
        _17 = const false;
        _16 = const false;
        _2 = <impl DateIterator as Iterator>::peekable(move _1) -> bb1;
    }

    bb1: {
        _17 = const true;
        _8 = &mut _2;
        _7 = Peekable::<impl DateIterator>::peek(move _8) -> [return: bb2, unwind: bb15];
    }

    bb2: {
        _6 = Option::<&NaiveDate>::unwrap(move _7) -> [return: bb3, unwind: bb15];
    }

    bb3: {
        _5 = _6;
        _4 = NaiveDate::month(move _5) -> [return: bb4, unwind: bb15];
    }

    bb4: {
        _3 = month_title(move _4) -> [return: bb5, unwind: bb15];
    }

    bb5: {
        _11 = move _3;
        _10 = Option::<String>::Some(move _11);
        _9 = <Option<String> as IntoIterator>::into_iter(move _10) -> [return: bb6, unwind: bb15];
    }

    bb6: {
        _16 = const true;
        _17 = const false;
        _15 = move _2;
        _14 = <Peekable<impl DateIterator> as IteratorExt>::__::<fn(Peekable<impl DateIterator>) -> impl Iterator<Item = (u32, impl DateIterator)> + Clone {by_week::<Peekable<impl DateIterator>>}, impl Iterator<Item = (u32, impl DateIterator)> + Clone>(move _15, by_week::<Peekable<impl DateIterator>>) -> [return: bb7, unwind: bb13];
    }

    bb7: {
        _13 = <impl Iterator<Item = (u32, impl DateIterator)> + Clone as Iterator>::map::<impl DateIterator, [closure@ui/impl-trait/example-calendar.rs:566:18: 566:29]>(move _14, const ZeroSized: [closure@ui/impl-trait/example-calendar.rs:566:18: 566:29]) -> [return: bb8, unwind: bb13];
    }

    bb8: {
        _12 = <Map<impl Iterator<Item = (u32, impl DateIterator)> + Clone, [closure@ui/impl-trait/example-calendar.rs:566:18: 566:29]> as IteratorExt>::__::<fn(Map<impl Iterator<Item = (u32, impl DateIterator)> + Clone, [closure@ui/impl-trait/example-calendar.rs:566:18: 566:29]>) -> impl Iterator<Item = String> {format_weeks::<impl DateIterator, Map<impl Iterator<Item = (u32, impl DateIterator)> + Clone, [closure@ui/impl-trait/example-calendar.rs:566:18: 566:29]>>}, impl Iterator<Item = String>>(move _13, format_weeks::<impl DateIterator, Map<impl Iterator<Item = (u32, impl DateIterator)> + Clone, [closure@ui/impl-trait/example-calendar.rs:566:18: 566:29]>>) -> [return: bb9, unwind: bb13];
    }

    bb9: {
        _16 = const false;
        _0 = <std::option::IntoIter<String> as Iterator>::chain::<impl Iterator<Item = String>>(move _9, move _12) -> [return: bb10, unwind: bb13];
    }

    bb10: {
        _16 = const false;
        _17 = const false;
        return;
    }

    bb11 (cleanup): {
        resume;
    }

    bb12 (cleanup): {
        drop(_9) -> [return: bb15, unwind terminate];
    }

    bb13 (cleanup): {
        switchInt(_16) -> [0: bb15, otherwise: bb12];
    }

    bb14 (cleanup): {
        drop(_2) -> [return: bb11, unwind terminate];
    }

    bb15 (cleanup): {
        switchInt(_17) -> [0: bb11, otherwise: bb14];
    }
}

fn format_month::{closure#0}(_1: &mut [closure@ui/impl-trait/example-calendar.rs:566:18: 566:29], _2: (u32, impl DateIterator)) -> impl DateIterator {
    let mut _0: impl DateIterator;
    scope 1 {
        debug week => _0;
    }

    bb0: {
        _0 = move (_2.1: impl DateIterator);
        return;
    }
}

fn test_format_month() -> () {
    let mut _0: ();
    let _1: std::option::Option<std::string::String>;
    let mut _2: std::option::Option<(u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)>;
    let mut _3: &mut impl std::iter::Iterator<Item = (u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)> + std::clone::Clone;
    let mut _4: impl std::iter::Iterator<Item = (u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)> + std::clone::Clone;
    let mut _5: impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone;
    let mut _6: (&std::option::Option<&str>, &std::option::Option<&str>);
    let mut _7: &std::option::Option<&str>;
    let _8: std::option::Option<&str>;
    let mut _9: std::option::Option<&std::string::String>;
    let mut _10: &std::option::Option<std::string::String>;
    let mut _11: &std::option::Option<&str>;
    let _12: std::option::Option<&str>;
    let mut _15: bool;
    let mut _16: bool;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug month_fmt => _1;
        let _13: &std::option::Option<&str>;
        let _14: &std::option::Option<&str>;
        scope 2 {
            debug left_val => _13;
            debug right_val => _14;
            let _17: core::panicking::AssertKind;
            scope 3 {
                debug kind => _17;
            }
        }
    }

    bb0: {
        _5 = dates_in_year(const 2013_i32) -> bb1;
    }

    bb1: {
        _4 = <impl Iterator<Item = NaiveDate> + Clone as IteratorExt>::__::<fn(impl Iterator<Item = NaiveDate> + Clone) -> impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone {by_month::<impl Iterator<Item = NaiveDate> + Clone>}, impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone>(move _5, by_month::<impl Iterator<Item = NaiveDate> + Clone>) -> bb2;
    }

    bb2: {
        _3 = &mut _4;
        _2 = <impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone as Iterator>::next(move _3) -> bb3;
    }

    bb3: {
        _1 = Option::<(u32, impl Iterator<Item = NaiveDate> + Clone)>::map::<String, [closure@ui/impl-trait/example-calendar.rs:573:14: 573:25]>(move _2, const ZeroSized: [closure@ui/impl-trait/example-calendar.rs:573:14: 573:25]) -> bb4;
    }

    bb4: {
        _10 = &_1;
        _9 = Option::<String>::as_ref(move _10) -> [return: bb5, unwind: bb11];
    }

    bb5: {
        _8 = Option::<&String>::map::<&str, [closure@ui/impl-trait/example-calendar.rs:578:32: 578:35]>(move _9, const ZeroSized: [closure@ui/impl-trait/example-calendar.rs:578:32: 578:35]) -> [return: bb6, unwind: bb11];
    }

    bb6: {
        _7 = &_8;
        _12 = Option::<&str>::Some(const "       January       \n        1  2  3  4  5\n  6  7  8  9 10 11 12\n 13 14 15 16 17 18 19\n 20 21 22 23 24 25 26\n 27 28 29 30 31      ");
        _11 = &_12;
        _6 = (move _7, move _11);
        _13 = (_6.0: &std::option::Option<&str>);
        _14 = (_6.1: &std::option::Option<&str>);
        _16 = <Option<&str> as PartialEq>::eq(_13, _14) -> [return: bb7, unwind: bb11];
    }

    bb7: {
        _15 = Not(move _16);
        switchInt(move _15) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<Option<&str>, Option<&str>>(move _17, _13, _14, move _19) -> bb11;
    }

    bb9: {
        drop(_1) -> bb10;
    }

    bb10: {
        return;
    }

    bb11 (cleanup): {
        drop(_1) -> [return: bb12, unwind terminate];
    }

    bb12 (cleanup): {
        resume;
    }
}

fn test_format_month::{closure#0}(_1: [closure@ui/impl-trait/example-calendar.rs:573:14: 573:25], _2: (u32, impl Iterator<Item = NaiveDate> + Clone)) -> String {
    let mut _0: std::string::String;
    let _3: impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone;
    let mut _4: impl std::iter::Iterator<Item = std::string::String>;
    let mut _5: impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone;
    let _6: &str;
    scope 1 {
        debug days => _3;
    }

    bb0: {
        _3 = move (_2.1: impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone);
        _5 = <impl Iterator<Item = NaiveDate> + Clone as IntoIterator>::into_iter(move _3) -> bb1;
    }

    bb1: {
        _4 = <impl Iterator<Item = NaiveDate> + Clone as IteratorExt>::__::<fn(impl Iterator<Item = NaiveDate> + Clone) -> impl Iterator<Item = String> {format_month::<impl Iterator<Item = NaiveDate> + Clone>}, impl Iterator<Item = String>>(move _5, format_month::<impl Iterator<Item = NaiveDate> + Clone>) -> bb2;
    }

    bb2: {
        _6 = const "\n";
        _0 = <impl Iterator<Item = String> as IteratorExt>::join(move _4, _6) -> bb3;
    }

    bb3: {
        return;
    }
}

fn test_format_month::{closure#1}(_1: [closure@ui/impl-trait/example-calendar.rs:578:32: 578:35], _2: &String) -> &str {
    debug s => _2;
    let mut _0: &str;
    let _3: &str;

    bb0: {
        _3 = <String as Deref>::deref(_2) -> bb1;
    }

    bb1: {
        _0 = _3;
        return;
    }
}

fn format_months(_1: impl Iterator<Item = impl DateIterator>) -> impl Iterator<Item = impl Iterator<Item = String>> {
    debug it => _1;
    let mut _0: impl std::iter::Iterator<Item = impl std::iter::Iterator<Item = std::string::String>>;

    bb0: {
        _0 = <impl Iterator<Item = impl DateIterator> as Iterator>::map::<impl Iterator<Item = String>, fn(impl DateIterator) -> impl Iterator<Item = String> {format_month::<impl DateIterator>}>(move _1, format_month::<impl DateIterator>) -> bb1;
    }

    bb1: {
        return;
    }
}

fn PasteBlocks::paste_blocks(_1: Self, _2: usize) -> PasteBlocksIter<<Self as Iterator>::Item> {
    debug self => _1;
    debug sep_width => _2;
    let mut _0: PasteBlocksIter<<Self as std::iter::Iterator>::Item>;
    let mut _3: std::vec::Vec<<Self as std::iter::Iterator>::Item>;
    let mut _4: std::vec::Vec<std::option::Option<std::string::String>>;
    let mut _5: std::option::Option<std::vec::Vec<usize>>;

    bb0: {
        _3 = <Self as Iterator>::collect::<Vec<<Self as Iterator>::Item>>(move _1) -> bb1;
    }

    bb1: {
        _4 = Vec::<Option<String>>::new() -> [return: bb2, unwind: bb3];
    }

    bb2: {
        _5 = Option::<Vec<usize>>::None;
        _0 = PasteBlocksIter::<<Self as Iterator>::Item> { iters: move _3, cache: move _4, col_widths: move _5, sep_width: _2 };
        return;
    }

    bb3 (cleanup): {
        drop(_3) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:619:1: 619:48>::next(_1: &mut PasteBlocksIter<StrIt>) -> Option<String> {
    debug self => _1;
    let mut _0: std::option::Option<std::string::String>;
    let _2: ();
    let mut _3: &mut std::vec::Vec<std::option::Option<std::string::String>>;
    let _4: ();
    let mut _5: &mut std::vec::Vec<std::option::Option<std::string::String>>;
    let mut _6: std::iter::Map<std::slice::IterMut<'_, StrIt>, [closure@ui/impl-trait/example-calendar.rs:627:53: 627:57]>;
    let mut _7: std::slice::IterMut<'_, StrIt>;
    let mut _8: &mut [StrIt];
    let mut _9: &mut [StrIt];
    let mut _10: &mut std::vec::Vec<StrIt>;
    let mut _11: bool;
    let mut _12: &mut std::slice::Iter<'_, std::option::Option<std::string::String>>;
    let mut _13: std::slice::Iter<'_, std::option::Option<std::string::String>>;
    let mut _14: &[std::option::Option<std::string::String>];
    let _15: &[std::option::Option<std::string::String>];
    let mut _16: &std::vec::Vec<std::option::Option<std::string::String>>;
    let _17: &[usize];
    let mut _18: isize;
    let _19: &std::vec::Vec<usize>;
    let _20: &[usize];
    let _21: &[usize];
    let mut _22: std::option::Option<std::vec::Vec<usize>>;
    let mut _23: std::vec::Vec<usize>;
    let mut _24: std::iter::Map<std::slice::Iter<'_, std::option::Option<std::string::String>>, [closure@ui/impl-trait/example-calendar.rs:637:26: 637:30]>;
    let mut _25: std::slice::Iter<'_, std::option::Option<std::string::String>>;
    let mut _26: &[std::option::Option<std::string::String>];
    let _27: &[std::option::Option<std::string::String>];
    let mut _28: &std::vec::Vec<std::option::Option<std::string::String>>;
    let _29: &[usize];
    let mut _30: &std::vec::Vec<usize>;
    let _31: &std::vec::Vec<usize>;
    let mut _32: std::option::Option<&std::vec::Vec<usize>>;
    let mut _33: &std::option::Option<std::vec::Vec<usize>>;
    let mut _35: std::iter::Zip<std::iter::Cloned<std::slice::Iter<'_, usize>>, std::slice::IterMut<'_, std::option::Option<std::string::String>>>;
    let mut _36: std::iter::Cloned<std::slice::Iter<'_, usize>>;
    let mut _37: std::slice::Iter<'_, usize>;
    let mut _38: &[usize];
    let mut _39: std::slice::IterMut<'_, std::option::Option<std::string::String>>;
    let mut _40: &mut [std::option::Option<std::string::String>];
    let mut _41: &mut [std::option::Option<std::string::String>];
    let mut _42: &mut std::vec::Vec<std::option::Option<std::string::String>>;
    let mut _44: std::option::Option<std::string::String>;
    let mut _45: &mut std::iter::Map<std::iter::Zip<std::iter::Cloned<std::slice::Iter<'_, usize>>, std::slice::IterMut<'_, std::option::Option<std::string::String>>>, [closure@ui/impl-trait/example-calendar.rs:645:18: 645:26]>;
    let mut _46: std::string::String;
    let mut _48: std::string::String;
    let mut _49: std::iter::Map<std::iter::Zip<std::iter::Cloned<std::slice::Iter<'_, usize>>, std::slice::IterMut<'_, std::option::Option<std::string::String>>>, [closure@ui/impl-trait/example-calendar.rs:645:18: 645:26]>;
    let mut _50: std::string::String;
    let mut _51: [closure@ui/impl-trait/example-calendar.rs:650:32: 650:49];
    let mut _52: &usize;
    let mut _53: bool;
    scope 1 {
        debug col_widths => _17;
        let mut _34: std::iter::Map<std::iter::Zip<std::iter::Cloned<std::slice::Iter<'_, usize>>, std::slice::IterMut<'_, std::option::Option<std::string::String>>>, [closure@ui/impl-trait/example-calendar.rs:645:18: 645:26]>;
        scope 3 {
            debug parts => _34;
            let _43: std::string::String;
            scope 4 {
                debug first => _43;
                let _47: usize;
                scope 5 {
                    debug sep_width => _47;
                }
            }
        }
    }
    scope 2 {
        debug v => _19;
    }

    bb0: {
        _53 = const false;
        _3 = &mut ((*_1).1: std::vec::Vec<std::option::Option<std::string::String>>);
        _2 = Vec::<Option<String>>::clear(move _3) -> bb1;
    }

    bb1: {
        _5 = &mut ((*_1).1: std::vec::Vec<std::option::Option<std::string::String>>);
        _10 = &mut ((*_1).0: std::vec::Vec<StrIt>);
        _9 = <Vec<StrIt> as DerefMut>::deref_mut(move _10) -> bb2;
    }

    bb2: {
        _8 = _9;
        _7 = core::slice::<impl [StrIt]>::iter_mut(move _8) -> bb3;
    }

    bb3: {
        _6 = <std::slice::IterMut<'_, StrIt> as Iterator>::map::<Option<String>, [closure@ui/impl-trait/example-calendar.rs:627:53: 627:57]>(move _7, const ZeroSized: [closure@ui/impl-trait/example-calendar.rs:627:53: 627:57]) -> bb4;
    }

    bb4: {
        _4 = <Vec<Option<String>> as Extend<Option<String>>>::extend::<Map<std::slice::IterMut<'_, StrIt>, [closure@ui/impl-trait/example-calendar.rs:627:53: 627:57]>>(move _5, move _6) -> bb5;
    }

    bb5: {
        _16 = &((*_1).1: std::vec::Vec<std::option::Option<std::string::String>>);
        _15 = <Vec<Option<String>> as Deref>::deref(move _16) -> bb6;
    }

    bb6: {
        _14 = _15;
        _13 = core::slice::<impl [Option<String>]>::iter(move _14) -> bb7;
    }

    bb7: {
        _12 = &mut _13;
        _11 = <std::slice::Iter<'_, Option<String>> as Iterator>::all::<[closure@ui/impl-trait/example-calendar.rs:630:34: 630:37]>(move _12, const ZeroSized: [closure@ui/impl-trait/example-calendar.rs:630:34: 630:37]) -> bb8;
    }

    bb8: {
        switchInt(move _11) -> [0: bb11, otherwise: bb9];
    }

    bb9: {
        _0 = Option::<String>::None;
        goto -> bb35;
    }

    bb10: {
        unreachable;
    }

    bb11: {
        _18 = discriminant(((*_1).2: std::option::Option<std::vec::Vec<usize>>));
        switchInt(move _18) -> [0: bb12, 1: bb13, otherwise: bb10];
    }

    bb12: {
        _28 = &((*_1).1: std::vec::Vec<std::option::Option<std::string::String>>);
        _27 = <Vec<Option<String>> as Deref>::deref(move _28) -> bb15;
    }

    bb13: {
        _19 = &((((*_1).2: std::option::Option<std::vec::Vec<usize>>) as Some).0: std::vec::Vec<usize>);
        _20 = <Vec<usize> as Deref>::deref(_19) -> bb14;
    }

    bb14: {
        _17 = _20;
        goto -> bb24;
    }

    bb15: {
        _26 = _27;
        _25 = core::slice::<impl [Option<String>]>::iter(move _26) -> bb16;
    }

    bb16: {
        _24 = <std::slice::Iter<'_, Option<String>> as Iterator>::map::<usize, [closure@ui/impl-trait/example-calendar.rs:637:26: 637:30]>(move _25, const ZeroSized: [closure@ui/impl-trait/example-calendar.rs:637:26: 637:30]) -> bb17;
    }

    bb17: {
        _23 = <Map<std::slice::Iter<'_, Option<String>>, [closure@ui/impl-trait/example-calendar.rs:637:26: 637:30]> as Iterator>::collect::<Vec<usize>>(move _24) -> bb18;
    }

    bb18: {
        _22 = Option::<Vec<usize>>::Some(move _23);
        drop(((*_1).2: std::option::Option<std::vec::Vec<usize>>)) -> [return: bb19, unwind: bb20];
    }

    bb19: {
        ((*_1).2: std::option::Option<std::vec::Vec<usize>>) = move _22;
        _33 = &((*_1).2: std::option::Option<std::vec::Vec<usize>>);
        _32 = Option::<Vec<usize>>::as_ref(move _33) -> bb21;
    }

    bb20 (cleanup): {
        ((*_1).2: std::option::Option<std::vec::Vec<usize>>) = move _22;
        goto -> bb36;
    }

    bb21: {
        _31 = Option::<&Vec<usize>>::unwrap(move _32) -> bb22;
    }

    bb22: {
        _30 = _31;
        _29 = <Vec<usize> as Deref>::deref(move _30) -> bb23;
    }

    bb23: {
        _21 = _29;
        _17 = _21;
        goto -> bb24;
    }

    bb24: {
        _38 = _17;
        _37 = core::slice::<impl [usize]>::iter(move _38) -> bb25;
    }

    bb25: {
        _36 = <std::slice::Iter<'_, usize> as Iterator>::cloned::<'_, usize>(move _37) -> bb26;
    }

    bb26: {
        _42 = &mut ((*_1).1: std::vec::Vec<std::option::Option<std::string::String>>);
        _41 = <Vec<Option<String>> as DerefMut>::deref_mut(move _42) -> bb27;
    }

    bb27: {
        _40 = _41;
        _39 = core::slice::<impl [Option<String>]>::iter_mut(move _40) -> bb28;
    }

    bb28: {
        _35 = <Cloned<std::slice::Iter<'_, usize>> as Iterator>::zip::<std::slice::IterMut<'_, Option<String>>>(move _36, move _39) -> bb29;
    }

    bb29: {
        _34 = <Zip<Cloned<std::slice::Iter<'_, usize>>, std::slice::IterMut<'_, Option<String>>> as Iterator>::map::<String, [closure@ui/impl-trait/example-calendar.rs:645:18: 645:26]>(move _35, const ZeroSized: [closure@ui/impl-trait/example-calendar.rs:645:18: 645:26]) -> bb30;
    }

    bb30: {
        _45 = &mut _34;
        _53 = const true;
        _44 = <Map<Zip<Cloned<std::slice::Iter<'_, usize>>, std::slice::IterMut<'_, Option<String>>>, [closure@ui/impl-trait/example-calendar.rs:645:18: 645:26]> as Iterator>::next(move _45) -> bb31;
    }

    bb31: {
        _46 = String::new() -> [return: bb32, unwind: bb38];
    }

    bb32: {
        _53 = const false;
        _43 = Option::<String>::unwrap_or(move _44, move _46) -> [return: bb33, unwind: bb38];
    }

    bb33: {
        _53 = const false;
        _47 = ((*_1).3: usize);
        _49 = move _34;
        _50 = move _43;
        _52 = &_47;
        _51 = [closure@ui/impl-trait/example-calendar.rs:650:32: 650:49] { sep_width: move _52 };
        _48 = <Map<Zip<Cloned<std::slice::Iter<'_, usize>>, std::slice::IterMut<'_, Option<String>>>, [closure@ui/impl-trait/example-calendar.rs:645:18: 645:26]> as Iterator>::fold::<String, [closure@ui/impl-trait/example-calendar.rs:650:32: 650:49]>(move _49, move _50, move _51) -> bb34;
    }

    bb34: {
        _0 = Option::<String>::Some(move _48);
        goto -> bb35;
    }

    bb35: {
        return;
    }

    bb36 (cleanup): {
        resume;
    }

    bb37 (cleanup): {
        drop(_44) -> [return: bb36, unwind terminate];
    }

    bb38 (cleanup): {
        switchInt(_53) -> [0: bb36, otherwise: bb37];
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:619:1: 619:48>::next::{closure#0}(_1: &mut [closure@ui/impl-trait/example-calendar.rs:627:53: 627:57], _2: &mut StrIt) -> Option<String> {
    debug it => _2;
    let mut _0: std::option::Option<std::string::String>;

    bb0: {
        _0 = <StrIt as Iterator>::next(_2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:619:1: 619:48>::next::{closure#1}(_1: &mut [closure@ui/impl-trait/example-calendar.rs:630:34: 630:37], _2: &Option<String>) -> bool {
    debug e => _2;
    let mut _0: bool;

    bb0: {
        _0 = Option::<String>::is_none(_2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:619:1: 619:48>::next::{closure#2}(_1: &mut [closure@ui/impl-trait/example-calendar.rs:637:26: 637:30], _2: &Option<String>) -> usize {
    debug ms => _2;
    let mut _0: usize;
    let mut _3: std::option::Option<usize>;
    let mut _4: std::option::Option<&std::string::String>;

    bb0: {
        _4 = Option::<String>::as_ref(_2) -> bb1;
    }

    bb1: {
        _3 = Option::<&String>::map::<usize, [closure@ui/impl-trait/example-calendar.rs:637:47: 637:50]>(move _4, const ZeroSized: [closure@ui/impl-trait/example-calendar.rs:637:47: 637:50]) -> bb2;
    }

    bb2: {
        _0 = Option::<usize>::unwrap_or(move _3, const 0_usize) -> bb3;
    }

    bb3: {
        return;
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:619:1: 619:48>::next::{closure#2}::{closure#0}(_1: [closure@ui/impl-trait/example-calendar.rs:637:47: 637:50], _2: &String) -> usize {
    debug s => _2;
    let mut _0: usize;

    bb0: {
        _0 = String::len(_2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:619:1: 619:48>::next::{closure#3}(_1: &mut [closure@ui/impl-trait/example-calendar.rs:645:18: 645:26], _2: (usize, &mut Option<String>)) -> String {
    let mut _0: std::string::String;
    let _3: usize;
    let _4: &mut std::option::Option<std::string::String>;
    let mut _5: std::option::Option<std::string::String>;
    let mut _6: [closure@ui/impl-trait/example-calendar.rs:645:52: 645:54];
    let mut _7: &usize;
    scope 1 {
        debug w => _3;
        debug ms => _4;
    }

    bb0: {
        _3 = (_2.0: usize);
        _4 = move (_2.1: &mut std::option::Option<std::string::String>);
        _5 = Option::<String>::take(_4) -> bb1;
    }

    bb1: {
        _7 = &_3;
        _6 = [closure@ui/impl-trait/example-calendar.rs:645:52: 645:54] { w: move _7 };
        _0 = Option::<String>::unwrap_or_else::<[closure@ui/impl-trait/example-calendar.rs:645:52: 645:54]>(move _5, move _6) -> bb2;
    }

    bb2: {
        return;
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:619:1: 619:48>::next::{closure#3}::{closure#0}(_1: [closure@ui/impl-trait/example-calendar.rs:645:52: 645:54]) -> String {
    debug w => (*(_1.0: &usize));
    let mut _0: std::string::String;
    let mut _2: std::iter::Take<std::iter::Repeat<char>>;
    let mut _3: usize;
    let mut _4: &usize;

    bb0: {
        _4 = deref_copy (_1.0: &usize);
        _3 = (*_4);
        _2 = spaces(move _3) -> bb1;
    }

    bb1: {
        _0 = <std::iter::Take<std::iter::Repeat<char>> as Iterator>::collect::<String>(move _2) -> bb2;
    }

    bb2: {
        return;
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:619:1: 619:48>::next::{closure#4}(_1: &mut [closure@ui/impl-trait/example-calendar.rs:650:32: 650:49], _2: String, _3: String) -> String {
    debug accum => _2;
    debug next => _3;
    debug sep_width => (*((*_1).0: &usize));
    let mut _0: std::string::String;
    let _4: ();
    let mut _5: &mut std::string::String;
    let mut _6: std::iter::Take<std::iter::Repeat<char>>;
    let mut _7: usize;
    let _8: ();
    let mut _9: &mut std::string::String;
    let mut _10: &str;
    let _11: &str;
    let _12: &std::string::String;
    let mut _13: &usize;
    let mut _14: bool;

    bb0: {
        _14 = const false;
        _14 = const true;
        _5 = &mut _2;
        _13 = deref_copy ((*_1).0: &usize);
        _7 = (*_13);
        _6 = spaces(move _7) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _4 = <String as Extend<char>>::extend::<std::iter::Take<std::iter::Repeat<char>>>(move _5, move _6) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _9 = &mut _2;
        _12 = &_3;
        _11 = <String as Deref>::deref(_12) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _10 = _11;
        _8 = String::push_str(move _9, move _10) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        _14 = const false;
        _0 = move _2;
        drop(_3) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_3) -> [return: bb9, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }

    bb8 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate];
    }

    bb9 (cleanup): {
        switchInt(_14) -> [0: bb7, otherwise: bb8];
    }
}

fn test_paste_blocks() -> () {
    let mut _0: ();
    let _1: std::string::String;
    let mut _2: PasteBlocksIter<impl std::iter::Iterator<Item = std::string::String>>;
    let mut _3: impl std::iter::Iterator<Item = impl std::iter::Iterator<Item = std::string::String>>;
    let mut _4: std::iter::Take<std::iter::Map<impl std::iter::Iterator<Item = (u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)> + std::clone::Clone, [closure@ui/impl-trait/example-calendar.rs:660:27: 660:38]>>;
    let mut _5: std::iter::Map<impl std::iter::Iterator<Item = (u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)> + std::clone::Clone, [closure@ui/impl-trait/example-calendar.rs:660:27: 660:38]>;
    let mut _6: impl std::iter::Iterator<Item = (u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)> + std::clone::Clone;
    let mut _7: impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone;
    let _8: &str;
    let mut _9: (&&str, &&str);
    let mut _10: &&str;
    let _11: &str;
    let _12: &str;
    let mut _13: &std::string::String;
    let mut _14: &&str;
    let _15: &str;
    let mut _18: bool;
    let mut _19: bool;
    let _21: !;
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug row => _1;
        let _16: &&str;
        let _17: &&str;
        scope 2 {
            debug left_val => _16;
            debug right_val => _17;
            let _20: core::panicking::AssertKind;
            scope 3 {
                debug kind => _20;
            }
        }
    }

    bb0: {
        _7 = dates_in_year(const 2013_i32) -> bb1;
    }

    bb1: {
        _6 = <impl Iterator<Item = NaiveDate> + Clone as IteratorExt>::__::<fn(impl Iterator<Item = NaiveDate> + Clone) -> impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone {by_month::<impl Iterator<Item = NaiveDate> + Clone>}, impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone>(move _7, by_month::<impl Iterator<Item = NaiveDate> + Clone>) -> bb2;
    }

    bb2: {
        _5 = <impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone as Iterator>::map::<impl Iterator<Item = NaiveDate> + Clone, [closure@ui/impl-trait/example-calendar.rs:660:27: 660:38]>(move _6, const ZeroSized: [closure@ui/impl-trait/example-calendar.rs:660:27: 660:38]) -> bb3;
    }

    bb3: {
        _4 = <Map<impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone, [closure@ui/impl-trait/example-calendar.rs:660:27: 660:38]> as Iterator>::take(move _5, const 3_usize) -> bb4;
    }

    bb4: {
        _3 = <std::iter::Take<Map<impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone, [closure@ui/impl-trait/example-calendar.rs:660:27: 660:38]>> as IteratorExt>::__::<fn(std::iter::Take<Map<impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone, [closure@ui/impl-trait/example-calendar.rs:660:27: 660:38]>>) -> impl Iterator<Item = impl Iterator<Item = String>> {format_months::<impl Iterator<Item = NaiveDate> + Clone, std::iter::Take<Map<impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone, [closure@ui/impl-trait/example-calendar.rs:660:27: 660:38]>>>}, impl Iterator<Item = impl Iterator<Item = String>>>(move _4, format_months::<impl Iterator<Item = NaiveDate> + Clone, std::iter::Take<Map<impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone, [closure@ui/impl-trait/example-calendar.rs:660:27: 660:38]>>>) -> bb5;
    }

    bb5: {
        _2 = <impl Iterator<Item = impl Iterator<Item = String>> as PasteBlocks>::paste_blocks(move _3, const 1_usize) -> bb6;
    }

    bb6: {
        _8 = const "\n";
        _1 = <PasteBlocksIter<impl Iterator<Item = String>> as IteratorExt>::join(move _2, _8) -> bb7;
    }

    bb7: {
        _13 = &_1;
        _12 = <String as Deref>::deref(move _13) -> [return: bb8, unwind: bb13];
    }

    bb8: {
        _11 = _12;
        _10 = &_11;
        _15 = const "       January              February                March        \n        1  2  3  4  5                  1  2                  1  2\n  6  7  8  9 10 11 12   3  4  5  6  7  8  9   3  4  5  6  7  8  9\n 13 14 15 16 17 18 19  10 11 12 13 14 15 16  10 11 12 13 14 15 16\n 20 21 22 23 24 25 26  17 18 19 20 21 22 23  17 18 19 20 21 22 23\n 27 28 29 30 31        24 25 26 27 28        24 25 26 27 28 29 30\n                                             31                  ";
        _14 = &_15;
        _9 = (move _10, move _14);
        _16 = (_9.0: &&str);
        _17 = (_9.1: &&str);
        _19 = <&str as PartialEq>::eq(_16, _17) -> [return: bb9, unwind: bb13];
    }

    bb9: {
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _20 = core::panicking::AssertKind::Eq;
        _22 = Option::<Arguments<'_>>::None;
        _21 = core::panicking::assert_failed::<&str, &str>(move _20, _16, _17, move _22) -> bb13;
    }

    bb11: {
        drop(_1) -> bb12;
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        drop(_1) -> [return: bb14, unwind terminate];
    }

    bb14 (cleanup): {
        resume;
    }
}

fn test_paste_blocks::{closure#0}(_1: &mut [closure@ui/impl-trait/example-calendar.rs:660:27: 660:38], _2: (u32, impl Iterator<Item = NaiveDate> + Clone)) -> impl Iterator<Item = NaiveDate> + Clone {
    let mut _0: impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone;
    scope 1 {
        debug days => _0;
    }

    bb0: {
        _0 = move (_2.1: impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone);
        return;
    }
}

fn Chunks::chunks(_1: Self, _2: usize) -> ChunksIter<Self> {
    debug self => _1;
    debug n => _2;
    let mut _0: ChunksIter<Self>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: !;
    let mut _6: Self;

    bb0: {
        _4 = Gt(_2, const 0_usize);
        _3 = Not(move _4);
        switchInt(move _3) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _5 = core::panicking::panic(const "assertion failed: n > 0") -> bb3;
    }

    bb2: {
        _6 = move _1;
        _0 = ChunksIter::<Self> { it: move _6, n: _2 };
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:702:1: 702:37>::next(_1: &mut ChunksIter<It>) -> Option<Vec<<It as Iterator>::Item>> {
    debug self => _1;
    let mut _0: std::option::Option<std::vec::Vec<<It as std::iter::Iterator>::Item>>;
    let _2: <It as std::iter::Iterator>::Item;
    let mut _3: std::ops::ControlFlow<std::option::Option<std::convert::Infallible>, <It as std::iter::Iterator>::Item>;
    let mut _4: std::option::Option<<It as std::iter::Iterator>::Item>;
    let mut _5: &mut It;
    let mut _6: isize;
    let _7: <It as std::iter::Iterator>::Item;
    let mut _9: usize;
    let _10: ();
    let mut _11: &mut std::vec::Vec<<It as std::iter::Iterator>::Item>;
    let mut _12: <It as std::iter::Iterator>::Item;
    let mut _13: std::vec::Vec<<It as std::iter::Iterator>::Item>;
    let mut _14: std::iter::Take<&mut It>;
    let mut _15: &mut It;
    let mut _16: usize;
    let mut _17: usize;
    let mut _18: std::vec::Vec<<It as std::iter::Iterator>::Item>;
    let mut _19: bool;
    let mut _20: bool;
    scope 1 {
        debug first => _2;
        let mut _8: std::vec::Vec<<It as std::iter::Iterator>::Item>;
        scope 6 {
            debug result => _8;
        }
    }
    scope 2 {
        debug residual => const Option::<Infallible>::None;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _7;
        scope 5 {
        }
    }

    bb0: {
        _20 = const false;
        _19 = const false;
        _5 = &mut ((*_1).0: It);
        _4 = <It as Iterator>::next(move _5) -> bb1;
    }

    bb1: {
        _3 = <Option<<It as Iterator>::Item> as Try>::branch(move _4) -> bb2;
    }

    bb2: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _7 = move ((_3 as Continue).0: <It as std::iter::Iterator>::Item);
        _20 = const true;
        _2 = move _7;
        _9 = ((*_1).1: usize);
        _8 = Vec::<<It as Iterator>::Item>::with_capacity(move _9) -> [return: bb7, unwind: bb16];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _0 = <Option<Vec<<It as Iterator>::Item>> as FromResidual<Option<Infallible>>>::from_residual(const Option::<Infallible>::None) -> bb6;
    }

    bb6: {
        _20 = const false;
        goto -> bb11;
    }

    bb7: {
        _19 = const true;
        _11 = &mut _8;
        _20 = const false;
        _12 = move _2;
        _10 = Vec::<<It as Iterator>::Item>::push(move _11, move _12) -> [return: bb8, unwind: bb14];
    }

    bb8: {
        _15 = &mut ((*_1).0: It);
        _17 = ((*_1).1: usize);
        _16 = Sub(move _17, const 1_usize);
        _14 = <&mut It as Iterator>::take(_15, move _16) -> [return: bb9, unwind: bb14];
    }

    bb9: {
        _19 = const false;
        _18 = move _8;
        _13 = <std::iter::Take<&mut It> as Iterator>::fold::<Vec<<It as Iterator>::Item>, [closure@ui/impl-trait/example-calendar.rs:713:27: 713:42]>(move _14, move _18, const ZeroSized: [closure@ui/impl-trait/example-calendar.rs:713:27: 713:42]) -> [return: bb10, unwind: bb14];
    }

    bb10: {
        _0 = Option::<Vec<<It as Iterator>::Item>>::Some(move _13);
        _19 = const false;
        _20 = const false;
        goto -> bb11;
    }

    bb11: {
        return;
    }

    bb12 (cleanup): {
        resume;
    }

    bb13 (cleanup): {
        drop(_8) -> [return: bb16, unwind terminate];
    }

    bb14 (cleanup): {
        switchInt(_19) -> [0: bb16, otherwise: bb13];
    }

    bb15 (cleanup): {
        drop(_2) -> [return: bb12, unwind terminate];
    }

    bb16 (cleanup): {
        switchInt(_20) -> [0: bb12, otherwise: bb15];
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:702:1: 702:37>::next::{closure#0}(_1: &mut [closure@ui/impl-trait/example-calendar.rs:713:27: 713:42], _2: Vec<<It as Iterator>::Item>, _3: <It as Iterator>::Item) -> Vec<<It as Iterator>::Item> {
    debug acc => _2;
    debug next => _3;
    let mut _0: std::vec::Vec<<It as std::iter::Iterator>::Item>;
    let _4: ();
    let mut _5: &mut std::vec::Vec<<It as std::iter::Iterator>::Item>;

    bb0: {
        _5 = &mut _2;
        _4 = Vec::<<It as Iterator>::Item>::push(move _5, move _3) -> [return: bb1, unwind: bb2];
    }

    bb1: {
        _0 = move _2;
        return;
    }

    bb2 (cleanup): {
        drop(_2) -> [return: bb3, unwind terminate];
    }

    bb3 (cleanup): {
        resume;
    }
}

fn test_chunks() -> () {
    let mut _0: ();
    let _1: &[i32; 7];
    let _2: [i32; 7];
    let mut _4: ChunksIter<std::iter::Cloned<std::slice::Iter<'_, i32>>>;
    let mut _5: std::iter::Cloned<std::slice::Iter<'_, i32>>;
    let mut _6: std::slice::Iter<'_, i32>;
    let mut _7: &[i32];
    let mut _8: (&&[std::vec::Vec<i32>], &&[std::vec::Vec<i32>; 3]);
    let mut _9: &&[std::vec::Vec<i32>];
    let _10: &[std::vec::Vec<i32>];
    let _11: &[std::vec::Vec<i32>];
    let mut _12: &std::vec::Vec<std::vec::Vec<i32>>;
    let mut _13: &&[std::vec::Vec<i32>; 3];
    let _14: &[std::vec::Vec<i32>; 3];
    let _15: [std::vec::Vec<i32>; 3];
    let mut _16: std::vec::Vec<i32>;
    let mut _17: std::boxed::Box<[i32]>;
    let mut _18: usize;
    let mut _19: usize;
    let mut _20: *mut u8;
    let mut _21: std::boxed::Box<[i32; 3]>;
    let mut _22: std::vec::Vec<i32>;
    let mut _23: std::boxed::Box<[i32]>;
    let mut _24: usize;
    let mut _25: usize;
    let mut _26: *mut u8;
    let mut _27: std::boxed::Box<[i32; 3]>;
    let mut _28: std::vec::Vec<i32>;
    let mut _29: std::boxed::Box<[i32]>;
    let mut _30: usize;
    let mut _31: usize;
    let mut _32: *mut u8;
    let mut _33: std::boxed::Box<[i32; 1]>;
    let mut _36: bool;
    let mut _37: bool;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _41: *const [i32; 3];
    let mut _42: *const [i32; 3];
    let mut _43: *const [i32; 1];
    scope 1 {
        debug r => _1;
        let _3: std::vec::Vec<std::vec::Vec<i32>>;
        scope 2 {
            debug c => _3;
            let _34: &&[std::vec::Vec<i32>];
            let _35: &&[std::vec::Vec<i32>; 3];
            let mut _44: *const ();
            let mut _45: usize;
            let mut _46: usize;
            let mut _47: usize;
            let mut _48: usize;
            let mut _49: bool;
            let mut _50: *const ();
            let mut _51: usize;
            let mut _52: usize;
            let mut _53: usize;
            let mut _54: usize;
            let mut _55: bool;
            let mut _56: *const ();
            let mut _57: usize;
            let mut _58: usize;
            let mut _59: usize;
            let mut _60: usize;
            let mut _61: bool;
            scope 3 {
            }
            scope 4 {
            }
            scope 5 {
            }
            scope 6 {
                debug left_val => _34;
                debug right_val => _35;
                let _38: core::panicking::AssertKind;
                scope 7 {
                    debug kind => _38;
                }
            }
        }
    }

    bb0: {
        _2 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32, const 6_i32, const 7_i32];
        _1 = &_2;
        _7 = _1 as &[i32] (Pointer(Unsize));
        _6 = core::slice::<impl [i32]>::iter(move _7) -> bb1;
    }

    bb1: {
        _5 = <std::slice::Iter<'_, i32> as Iterator>::cloned::<'_, i32>(move _6) -> bb2;
    }

    bb2: {
        _4 = <Cloned<std::slice::Iter<'_, i32>> as Chunks>::chunks(move _5, const 3_usize) -> bb3;
    }

    bb3: {
        _3 = <ChunksIter<Cloned<std::slice::Iter<'_, i32>>> as Iterator>::collect::<Vec<Vec<i32>>>(move _4) -> bb4;
    }

    bb4: {
        _12 = &_3;
        _11 = <Vec<Vec<i32>> as Deref>::deref(move _12) -> [return: bb5, unwind: bb20];
    }

    bb5: {
        _10 = _11;
        _9 = &_10;
        _18 = SizeOf([i32; 3]);
        _19 = AlignOf([i32; 3]);
        _20 = alloc::alloc::exchange_malloc(move _18, move _19) -> [return: bb6, unwind: bb20];
    }

    bb6: {
        _21 = ShallowInitBox(move _20, [i32; 3]);
        _41 = (((_21.0: std::ptr::Unique<[i32; 3]>).0: std::ptr::NonNull<[i32; 3]>).0: *const [i32; 3]);
        _56 = _41 as *const () (PtrToPtr);
        _57 = _56 as usize (Transmute);
        _58 = AlignOf(i32);
        _59 = Sub(_58, const 1_usize);
        _60 = BitAnd(_57, _59);
        _61 = Eq(_60, const 0_usize);
        assert(_61, "misaligned pointer dereference: address must be a multiple of {} but is {}", _58, _57) -> [success: bb24, unwind unreachable];
    }

    bb7: {
        _24 = SizeOf([i32; 3]);
        _25 = AlignOf([i32; 3]);
        _26 = alloc::alloc::exchange_malloc(move _24, move _25) -> [return: bb8, unwind: bb19];
    }

    bb8: {
        _27 = ShallowInitBox(move _26, [i32; 3]);
        _42 = (((_27.0: std::ptr::Unique<[i32; 3]>).0: std::ptr::NonNull<[i32; 3]>).0: *const [i32; 3]);
        _50 = _42 as *const () (PtrToPtr);
        _51 = _50 as usize (Transmute);
        _52 = AlignOf(i32);
        _53 = Sub(_52, const 1_usize);
        _54 = BitAnd(_51, _53);
        _55 = Eq(_54, const 0_usize);
        assert(_55, "misaligned pointer dereference: address must be a multiple of {} but is {}", _52, _51) -> [success: bb23, unwind unreachable];
    }

    bb9: {
        _30 = SizeOf([i32; 1]);
        _31 = AlignOf([i32; 1]);
        _32 = alloc::alloc::exchange_malloc(move _30, move _31) -> [return: bb10, unwind: bb18];
    }

    bb10: {
        _33 = ShallowInitBox(move _32, [i32; 1]);
        _43 = (((_33.0: std::ptr::Unique<[i32; 1]>).0: std::ptr::NonNull<[i32; 1]>).0: *const [i32; 1]);
        _44 = _43 as *const () (PtrToPtr);
        _45 = _44 as usize (Transmute);
        _46 = AlignOf(i32);
        _47 = Sub(_46, const 1_usize);
        _48 = BitAnd(_45, _47);
        _49 = Eq(_48, const 0_usize);
        assert(_49, "misaligned pointer dereference: address must be a multiple of {} but is {}", _46, _45) -> [success: bb22, unwind unreachable];
    }

    bb11: {
        _15 = [move _16, move _22, move _28];
        _14 = &_15;
        _13 = &_14;
        _8 = (move _9, move _13);
        _34 = (_8.0: &&[std::vec::Vec<i32>]);
        _35 = (_8.1: &&[std::vec::Vec<i32>; 3]);
        _37 = <&[Vec<i32>] as PartialEq<&[Vec<i32>; 3]>>::eq(_34, _35) -> [return: bb12, unwind: bb17];
    }

    bb12: {
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<&[Vec<i32>], &[Vec<i32>; 3]>(move _38, _34, _35, move _40) -> bb17;
    }

    bb14: {
        drop(_15) -> [return: bb15, unwind: bb20];
    }

    bb15: {
        drop(_3) -> bb16;
    }

    bb16: {
        return;
    }

    bb17 (cleanup): {
        drop(_15) -> [return: bb20, unwind terminate];
    }

    bb18 (cleanup): {
        drop(_22) -> [return: bb19, unwind terminate];
    }

    bb19 (cleanup): {
        drop(_16) -> [return: bb20, unwind terminate];
    }

    bb20 (cleanup): {
        drop(_3) -> [return: bb21, unwind terminate];
    }

    bb21 (cleanup): {
        resume;
    }

    bb22: {
        (*_43) = [const 7_i32];
        _29 = move _33 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _28 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _29) -> [return: bb11, unwind: bb18];
    }

    bb23: {
        (*_42) = [const 4_i32, const 5_i32, const 6_i32];
        _23 = move _27 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _22 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _23) -> [return: bb9, unwind: bb19];
    }

    bb24: {
        (*_41) = [const 1_i32, const 2_i32, const 3_i32];
        _17 = move _21 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _16 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _17) -> [return: bb7, unwind: bb20];
    }
}

fn format_year(_1: i32, _2: usize) -> String {
    debug year => _1;
    debug months_per_row => _2;
    let mut _0: std::string::String;
    let mut _3: std::iter::Map<ChunksIter<std::iter::Map<impl std::iter::Iterator<Item = (u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)> + std::clone::Clone, [closure@ui/impl-trait/example-calendar.rs:731:27: 731:38]>>, [closure@ui/impl-trait/example-calendar.rs:737:14: 737:17]>;
    let mut _4: ChunksIter<std::iter::Map<impl std::iter::Iterator<Item = (u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)> + std::clone::Clone, [closure@ui/impl-trait/example-calendar.rs:731:27: 731:38]>>;
    let mut _5: std::iter::Map<impl std::iter::Iterator<Item = (u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)> + std::clone::Clone, [closure@ui/impl-trait/example-calendar.rs:731:27: 731:38]>;
    let mut _6: impl std::iter::Iterator<Item = (u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)> + std::clone::Clone;
    let mut _7: impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone;
    let _8: &str;

    bb0: {
        _7 = dates_in_year(_1) -> bb1;
    }

    bb1: {
        _6 = <impl Iterator<Item = NaiveDate> + Clone as IteratorExt>::__::<fn(impl Iterator<Item = NaiveDate> + Clone) -> impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone {by_month::<impl Iterator<Item = NaiveDate> + Clone>}, impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone>(move _7, by_month::<impl Iterator<Item = NaiveDate> + Clone>) -> bb2;
    }

    bb2: {
        _5 = <impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone as Iterator>::map::<impl Iterator<Item = NaiveDate> + Clone, [closure@ui/impl-trait/example-calendar.rs:731:27: 731:38]>(move _6, const ZeroSized: [closure@ui/impl-trait/example-calendar.rs:731:27: 731:38]) -> bb3;
    }

    bb3: {
        _4 = <Map<impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone, [closure@ui/impl-trait/example-calendar.rs:731:27: 731:38]> as Chunks>::chunks(move _5, _2) -> bb4;
    }

    bb4: {
        _3 = <ChunksIter<Map<impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone, [closure@ui/impl-trait/example-calendar.rs:731:27: 731:38]>> as Iterator>::map::<String, [closure@ui/impl-trait/example-calendar.rs:737:14: 737:17]>(move _4, const ZeroSized: [closure@ui/impl-trait/example-calendar.rs:737:14: 737:17]) -> bb5;
    }

    bb5: {
        _8 = const "\n\n";
        _0 = <Map<ChunksIter<Map<impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone, [closure@ui/impl-trait/example-calendar.rs:731:27: 731:38]>>, [closure@ui/impl-trait/example-calendar.rs:737:14: 737:17]> as IteratorExt>::join(move _3, _8) -> bb6;
    }

    bb6: {
        return;
    }
}

const COL_SPACING: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

fn format_year::{closure#0}(_1: &mut [closure@ui/impl-trait/example-calendar.rs:731:27: 731:38], _2: (u32, impl Iterator<Item = NaiveDate> + Clone)) -> impl Iterator<Item = NaiveDate> + Clone {
    let mut _0: impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone;
    scope 1 {
        debug days => _0;
    }

    bb0: {
        _0 = move (_2.1: impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone);
        return;
    }
}

fn format_year::{closure#1}(_1: &mut [closure@ui/impl-trait/example-calendar.rs:737:14: 737:17], _2: Vec<impl Iterator<Item = NaiveDate> + Clone>) -> String {
    debug r => _2;
    let mut _0: std::string::String;
    let mut _3: PasteBlocksIter<impl std::iter::Iterator<Item = std::string::String>>;
    let mut _4: impl std::iter::Iterator<Item = impl std::iter::Iterator<Item = std::string::String>>;
    let mut _5: std::vec::IntoIter<impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone>;
    let _6: &str;

    bb0: {
        _5 = <Vec<impl Iterator<Item = NaiveDate> + Clone> as IntoIterator>::into_iter(move _2) -> bb1;
    }

    bb1: {
        _4 = <std::vec::IntoIter<impl Iterator<Item = NaiveDate> + Clone> as IteratorExt>::__::<fn(std::vec::IntoIter<impl Iterator<Item = NaiveDate> + Clone>) -> impl Iterator<Item = impl Iterator<Item = String>> {format_months::<impl Iterator<Item = NaiveDate> + Clone, std::vec::IntoIter<impl Iterator<Item = NaiveDate> + Clone>>}, impl Iterator<Item = impl Iterator<Item = String>>>(move _5, format_months::<impl Iterator<Item = NaiveDate> + Clone, std::vec::IntoIter<impl Iterator<Item = NaiveDate> + Clone>>) -> bb2;
    }

    bb2: {
        _3 = <impl Iterator<Item = impl Iterator<Item = String>> as PasteBlocks>::paste_blocks(move _4, const _) -> bb3;
    }

    bb3: {
        _6 = const "\n";
        _0 = <PasteBlocksIter<impl Iterator<Item = String>> as IteratorExt>::join(move _3, _6) -> bb4;
    }

    bb4: {
        return;
    }
}

fn test_format_year() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: &&std::string::String;
    let _3: &std::string::String;
    let _4: std::string::String;
    let mut _5: &&str;
    let _6: &str;
    let _7: ();
    let mut _8: std::fmt::Arguments<'_>;
    let mut _9: &[&str];
    let _10: &[&str; 2];
    let _11: [&str; 2];
    let mut _12: &[core::fmt::rt::Argument<'_>];
    let _13: &[core::fmt::rt::Argument<'_>; 1];
    let _14: [core::fmt::rt::Argument<'_>; 1];
    let mut _15: core::fmt::rt::Argument<'_>;
    let _16: &std::string::String;
    let _17: std::string::String;
    let mut _18: &str;
    let _19: &str;
    let _20: &std::string::String;
    let _21: std::string::String;
    let _22: &str;
    let _23: ();
    let mut _24: std::fmt::Arguments<'_>;
    let mut _25: &[&str];
    let _26: &[&str; 2];
    let _27: [&str; 2];
    let mut _28: &[core::fmt::rt::Argument<'_>];
    let _29: &[core::fmt::rt::Argument<'_>; 1];
    let _30: [core::fmt::rt::Argument<'_>; 1];
    let mut _31: core::fmt::rt::Argument<'_>;
    let _32: &std::string::String;
    let _33: std::string::String;
    let _34: &str;
    let _35: &str;
    let _36: !;
    let mut _37: bool;
    let mut _38: &&std::string::String;
    let _39: &std::string::String;
    let _40: std::string::String;
    let mut _41: &&str;
    let _42: &str;
    let _43: ();
    let mut _44: std::fmt::Arguments<'_>;
    let mut _45: &[&str];
    let _46: &[&str; 2];
    let _47: [&str; 2];
    let mut _48: &[core::fmt::rt::Argument<'_>];
    let _49: &[core::fmt::rt::Argument<'_>; 1];
    let _50: [core::fmt::rt::Argument<'_>; 1];
    let mut _51: core::fmt::rt::Argument<'_>;
    let _52: &std::string::String;
    let _53: std::string::String;
    let mut _54: &str;
    let _55: &str;
    let _56: &std::string::String;
    let _57: std::string::String;
    let _58: &str;
    let _59: ();
    let mut _60: std::fmt::Arguments<'_>;
    let mut _61: &[&str];
    let _62: &[&str; 2];
    let _63: [&str; 2];
    let mut _64: &[core::fmt::rt::Argument<'_>];
    let _65: &[core::fmt::rt::Argument<'_>; 1];
    let _66: [core::fmt::rt::Argument<'_>; 1];
    let mut _67: core::fmt::rt::Argument<'_>;
    let _68: &std::string::String;
    let _69: std::string::String;
    let _70: &str;
    let _71: &str;
    let _72: !;

    bb0: {
        _4 = format_year(const 1984_i32, const _) -> bb1;
    }

    bb1: {
        _3 = &_4;
        _2 = &_3;
        _6 = const "       January              February                March        \n  1  2  3  4  5  6  7            1  2  3  4               1  2  3\n  8  9 10 11 12 13 14   5  6  7  8  9 10 11   4  5  6  7  8  9 10\n 15 16 17 18 19 20 21  12 13 14 15 16 17 18  11 12 13 14 15 16 17\n 22 23 24 25 26 27 28  19 20 21 22 23 24 25  18 19 20 21 22 23 24\n 29 30 31              26 27 28 29           25 26 27 28 29 30 31\n\n        April                  May                  June         \n  1  2  3  4  5  6  7         1  2  3  4  5                  1  2\n  8  9 10 11 12 13 14   6  7  8  9 10 11 12   3  4  5  6  7  8  9\n 15 16 17 18 19 20 21  13 14 15 16 17 18 19  10 11 12 13 14 15 16\n 22 23 24 25 26 27 28  20 21 22 23 24 25 26  17 18 19 20 21 22 23\n 29 30                 27 28 29 30 31        24 25 26 27 28 29 30\n\n        July                 August               September      \n  1  2  3  4  5  6  7            1  2  3  4                     1\n  8  9 10 11 12 13 14   5  6  7  8  9 10 11   2  3  4  5  6  7  8\n 15 16 17 18 19 20 21  12 13 14 15 16 17 18   9 10 11 12 13 14 15\n 22 23 24 25 26 27 28  19 20 21 22 23 24 25  16 17 18 19 20 21 22\n 29 30 31              26 27 28 29 30 31     23 24 25 26 27 28 29\n                                             30                  \n\n       October              November              December       \n     1  2  3  4  5  6               1  2  3                     1\n  7  8  9 10 11 12 13   4  5  6  7  8  9 10   2  3  4  5  6  7  8\n 14 15 16 17 18 19 20  11 12 13 14 15 16 17   9 10 11 12 13 14 15\n 21 22 23 24 25 26 27  18 19 20 21 22 23 24  16 17 18 19 20 21 22\n 28 29 30 31           25 26 27 28 29 30     23 24 25 26 27 28 29\n                                             30 31               ";
        _5 = &_6;
        _1 = <&String as PartialEq<&str>>::ne(move _2, move _5) -> [return: bb2, unwind: bb44];
    }

    bb2: {
        drop(_4) -> bb3;
    }

    bb3: {
        switchInt(move _1) -> [0: bb18, otherwise: bb4];
    }

    bb4: {
        _11 = [const "got:\n```\n", const "\n```\n\n"];
        _10 = &_11;
        _9 = _10 as &[&str] (Pointer(Unsize));
        _21 = format_year(const 1984_i32, const _) -> bb5;
    }

    bb5: {
        _20 = &_21;
        _19 = <String as Deref>::deref(_20) -> [return: bb6, unwind: bb43];
    }

    bb6: {
        _18 = _19;
        _22 = const ".";
        _17 = str::<impl str>::replace::<'_, &str>(move _18, const " ", _22) -> [return: bb7, unwind: bb43];
    }

    bb7: {
        _16 = &_17;
        _15 = core::fmt::rt::Argument::<'_>::new_display::<String>(_16) -> [return: bb8, unwind: bb42];
    }

    bb8: {
        _14 = [move _15];
        _13 = &_14;
        _12 = _13 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _8 = Arguments::<'_>::new_v1(move _9, move _12) -> [return: bb9, unwind: bb42];
    }

    bb9: {
        _7 = _print(move _8) -> [return: bb10, unwind: bb42];
    }

    bb10: {
        drop(_17) -> [return: bb11, unwind: bb43];
    }

    bb11: {
        drop(_21) -> bb12;
    }

    bb12: {
        _27 = [const "expected:\n```\n", const "\n```\n"];
        _26 = &_27;
        _25 = _26 as &[&str] (Pointer(Unsize));
        _34 = const "       January              February                March        \n  1  2  3  4  5  6  7            1  2  3  4               1  2  3\n  8  9 10 11 12 13 14   5  6  7  8  9 10 11   4  5  6  7  8  9 10\n 15 16 17 18 19 20 21  12 13 14 15 16 17 18  11 12 13 14 15 16 17\n 22 23 24 25 26 27 28  19 20 21 22 23 24 25  18 19 20 21 22 23 24\n 29 30 31              26 27 28 29           25 26 27 28 29 30 31\n\n        April                  May                  June         \n  1  2  3  4  5  6  7         1  2  3  4  5                  1  2\n  8  9 10 11 12 13 14   6  7  8  9 10 11 12   3  4  5  6  7  8  9\n 15 16 17 18 19 20 21  13 14 15 16 17 18 19  10 11 12 13 14 15 16\n 22 23 24 25 26 27 28  20 21 22 23 24 25 26  17 18 19 20 21 22 23\n 29 30                 27 28 29 30 31        24 25 26 27 28 29 30\n\n        July                 August               September      \n  1  2  3  4  5  6  7            1  2  3  4                     1\n  8  9 10 11 12 13 14   5  6  7  8  9 10 11   2  3  4  5  6  7  8\n 15 16 17 18 19 20 21  12 13 14 15 16 17 18   9 10 11 12 13 14 15\n 22 23 24 25 26 27 28  19 20 21 22 23 24 25  16 17 18 19 20 21 22\n 29 30 31              26 27 28 29 30 31     23 24 25 26 27 28 29\n                                             30                  \n\n       October              November              December       \n     1  2  3  4  5  6               1  2  3                     1\n  7  8  9 10 11 12 13   4  5  6  7  8  9 10   2  3  4  5  6  7  8\n 14 15 16 17 18 19 20  11 12 13 14 15 16 17   9 10 11 12 13 14 15\n 21 22 23 24 25 26 27  18 19 20 21 22 23 24  16 17 18 19 20 21 22\n 28 29 30 31           25 26 27 28 29 30     23 24 25 26 27 28 29\n                                             30 31               ";
        _35 = const ".";
        _33 = str::<impl str>::replace::<'_, &str>(_34, const " ", _35) -> bb13;
    }

    bb13: {
        _32 = &_33;
        _31 = core::fmt::rt::Argument::<'_>::new_display::<String>(_32) -> [return: bb14, unwind: bb41];
    }

    bb14: {
        _30 = [move _31];
        _29 = &_30;
        _28 = _29 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _24 = Arguments::<'_>::new_v1(move _25, move _28) -> [return: bb15, unwind: bb41];
    }

    bb15: {
        _23 = _print(move _24) -> [return: bb16, unwind: bb41];
    }

    bb16: {
        drop(_33) -> bb17;
    }

    bb17: {
        _36 = begin_panic::<&str>(const "calendars didn't match!");
    }

    bb18: {
        _40 = format_year(const 2015_i32, const _) -> bb19;
    }

    bb19: {
        _39 = &_40;
        _38 = &_39;
        _42 = const "       January              February                March        \n              1  2  3   1  2  3  4  5  6  7   1  2  3  4  5  6  7\n  4  5  6  7  8  9 10   8  9 10 11 12 13 14   8  9 10 11 12 13 14\n 11 12 13 14 15 16 17  15 16 17 18 19 20 21  15 16 17 18 19 20 21\n 18 19 20 21 22 23 24  22 23 24 25 26 27 28  22 23 24 25 26 27 28\n 25 26 27 28 29 30 31                        29 30 31            \n\n        April                  May                  June         \n           1  2  3  4                  1  2      1  2  3  4  5  6\n  5  6  7  8  9 10 11   3  4  5  6  7  8  9   7  8  9 10 11 12 13\n 12 13 14 15 16 17 18  10 11 12 13 14 15 16  14 15 16 17 18 19 20\n 19 20 21 22 23 24 25  17 18 19 20 21 22 23  21 22 23 24 25 26 27\n 26 27 28 29 30        24 25 26 27 28 29 30  28 29 30            \n                       31                                        \n\n        July                 August               September      \n           1  2  3  4                     1         1  2  3  4  5\n  5  6  7  8  9 10 11   2  3  4  5  6  7  8   6  7  8  9 10 11 12\n 12 13 14 15 16 17 18   9 10 11 12 13 14 15  13 14 15 16 17 18 19\n 19 20 21 22 23 24 25  16 17 18 19 20 21 22  20 21 22 23 24 25 26\n 26 27 28 29 30 31     23 24 25 26 27 28 29  27 28 29 30         \n                       30 31                                     \n\n       October              November              December       \n              1  2  3   1  2  3  4  5  6  7         1  2  3  4  5\n  4  5  6  7  8  9 10   8  9 10 11 12 13 14   6  7  8  9 10 11 12\n 11 12 13 14 15 16 17  15 16 17 18 19 20 21  13 14 15 16 17 18 19\n 18 19 20 21 22 23 24  22 23 24 25 26 27 28  20 21 22 23 24 25 26\n 25 26 27 28 29 30 31  29 30                 27 28 29 30 31      ";
        _41 = &_42;
        _37 = <&String as PartialEq<&str>>::ne(move _38, move _41) -> [return: bb20, unwind: bb40];
    }

    bb20: {
        drop(_40) -> bb21;
    }

    bb21: {
        switchInt(move _37) -> [0: bb36, otherwise: bb22];
    }

    bb22: {
        _47 = [const "got:\n```\n", const "\n```\n\n"];
        _46 = &_47;
        _45 = _46 as &[&str] (Pointer(Unsize));
        _57 = format_year(const 2015_i32, const _) -> bb23;
    }

    bb23: {
        _56 = &_57;
        _55 = <String as Deref>::deref(_56) -> [return: bb24, unwind: bb39];
    }

    bb24: {
        _54 = _55;
        _58 = const ".";
        _53 = str::<impl str>::replace::<'_, &str>(move _54, const " ", _58) -> [return: bb25, unwind: bb39];
    }

    bb25: {
        _52 = &_53;
        _51 = core::fmt::rt::Argument::<'_>::new_display::<String>(_52) -> [return: bb26, unwind: bb38];
    }

    bb26: {
        _50 = [move _51];
        _49 = &_50;
        _48 = _49 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _44 = Arguments::<'_>::new_v1(move _45, move _48) -> [return: bb27, unwind: bb38];
    }

    bb27: {
        _43 = _print(move _44) -> [return: bb28, unwind: bb38];
    }

    bb28: {
        drop(_53) -> [return: bb29, unwind: bb39];
    }

    bb29: {
        drop(_57) -> bb30;
    }

    bb30: {
        _63 = [const "expected:\n```\n", const "\n```\n"];
        _62 = &_63;
        _61 = _62 as &[&str] (Pointer(Unsize));
        _70 = const "       January              February                March        \n              1  2  3   1  2  3  4  5  6  7   1  2  3  4  5  6  7\n  4  5  6  7  8  9 10   8  9 10 11 12 13 14   8  9 10 11 12 13 14\n 11 12 13 14 15 16 17  15 16 17 18 19 20 21  15 16 17 18 19 20 21\n 18 19 20 21 22 23 24  22 23 24 25 26 27 28  22 23 24 25 26 27 28\n 25 26 27 28 29 30 31                        29 30 31            \n\n        April                  May                  June         \n           1  2  3  4                  1  2      1  2  3  4  5  6\n  5  6  7  8  9 10 11   3  4  5  6  7  8  9   7  8  9 10 11 12 13\n 12 13 14 15 16 17 18  10 11 12 13 14 15 16  14 15 16 17 18 19 20\n 19 20 21 22 23 24 25  17 18 19 20 21 22 23  21 22 23 24 25 26 27\n 26 27 28 29 30        24 25 26 27 28 29 30  28 29 30            \n                       31                                        \n\n        July                 August               September      \n           1  2  3  4                     1         1  2  3  4  5\n  5  6  7  8  9 10 11   2  3  4  5  6  7  8   6  7  8  9 10 11 12\n 12 13 14 15 16 17 18   9 10 11 12 13 14 15  13 14 15 16 17 18 19\n 19 20 21 22 23 24 25  16 17 18 19 20 21 22  20 21 22 23 24 25 26\n 26 27 28 29 30 31     23 24 25 26 27 28 29  27 28 29 30         \n                       30 31                                     \n\n       October              November              December       \n              1  2  3   1  2  3  4  5  6  7         1  2  3  4  5\n  4  5  6  7  8  9 10   8  9 10 11 12 13 14   6  7  8  9 10 11 12\n 11 12 13 14 15 16 17  15 16 17 18 19 20 21  13 14 15 16 17 18 19\n 18 19 20 21 22 23 24  22 23 24 25 26 27 28  20 21 22 23 24 25 26\n 25 26 27 28 29 30 31  29 30                 27 28 29 30 31      ";
        _71 = const ".";
        _69 = str::<impl str>::replace::<'_, &str>(_70, const " ", _71) -> bb31;
    }

    bb31: {
        _68 = &_69;
        _67 = core::fmt::rt::Argument::<'_>::new_display::<String>(_68) -> [return: bb32, unwind: bb37];
    }

    bb32: {
        _66 = [move _67];
        _65 = &_66;
        _64 = _65 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _60 = Arguments::<'_>::new_v1(move _61, move _64) -> [return: bb33, unwind: bb37];
    }

    bb33: {
        _59 = _print(move _60) -> [return: bb34, unwind: bb37];
    }

    bb34: {
        drop(_69) -> bb35;
    }

    bb35: {
        _72 = begin_panic::<&str>(const "calendars didn't match!");
    }

    bb36: {
        return;
    }

    bb37 (cleanup): {
        drop(_69) -> [return: bb45, unwind terminate];
    }

    bb38 (cleanup): {
        drop(_53) -> [return: bb39, unwind terminate];
    }

    bb39 (cleanup): {
        drop(_57) -> [return: bb45, unwind terminate];
    }

    bb40 (cleanup): {
        drop(_40) -> [return: bb45, unwind terminate];
    }

    bb41 (cleanup): {
        drop(_33) -> [return: bb45, unwind terminate];
    }

    bb42 (cleanup): {
        drop(_17) -> [return: bb43, unwind terminate];
    }

    bb43 (cleanup): {
        drop(_21) -> [return: bb45, unwind terminate];
    }

    bb44 (cleanup): {
        drop(_4) -> [return: bb45, unwind terminate];
    }

    bb45 (cleanup): {
        resume;
    }
}

const MONTHS_PER_ROW: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let _3: ();
    let _4: ();
    let _5: ();
    let _6: ();
    let _7: ();
    let _8: ();
    let _9: ();
    let _10: ();
    let _11: ();
    let _12: ();

    bb0: {
        _1 = test_spaces() -> bb1;
    }

    bb1: {
        _2 = test_dates_in_year() -> bb2;
    }

    bb2: {
        _3 = test_group_by() -> bb3;
    }

    bb3: {
        _4 = test_by_month() -> bb4;
    }

    bb4: {
        _5 = test_isoweekdate() -> bb5;
    }

    bb5: {
        _6 = test_by_week() -> bb6;
    }

    bb6: {
        _7 = test_format_weeks() -> bb7;
    }

    bb7: {
        _8 = test_month_title() -> bb8;
    }

    bb8: {
        _9 = test_format_month() -> bb9;
    }

    bb9: {
        _10 = test_paste_blocks() -> bb10;
    }

    bb10: {
        _11 = test_chunks() -> bb11;
    }

    bb11: {
        _12 = test_format_year() -> bb12;
    }

    bb12: {
        return;
    }
}

fn NaiveDate(_1: i32, _2: u32, _3: u32) -> NaiveDate {
    let mut _0: NaiveDate;

    bb0: {
        _0 = NaiveDate(move _1, move _2, move _3);
        return;
    }
}

// MIR FOR CTFE
fn NaiveDate(_1: i32, _2: u32, _3: u32) -> NaiveDate {
    let mut _0: NaiveDate;

    bb0: {
        _0 = NaiveDate(move _1, move _2, move _3);
        return;
    }
}
