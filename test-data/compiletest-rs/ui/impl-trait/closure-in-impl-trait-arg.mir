// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn bug(_1: impl Iterator<Item = [(); { |x: u32| { x }; 4 }]>) -> () {
    let mut _0: ();

    bb0: {
        drop(_1) -> bb1;
    }

    bb1: {
        return;
    }
}

bug::{constant#0}: usize = {
    let mut _0: usize;
    let _1: [closure@ui/impl-trait/closure-in-impl-trait-arg.rs:3:39: 3:47];

    bb0: {
        StorageLive(_1);
        _1 = [closure@ui/impl-trait/closure-in-impl-trait-arg.rs:3:39: 3:47];
        StorageDead(_1);
        _0 = const 4_usize;
        return;
    }
}

fn bug::{constant#0}::{closure#0}(_1: &[closure@ui/impl-trait/closure-in-impl-trait-arg.rs:3:39: 3:47], _2: u32) -> u32 {
    debug x => _2;
    let mut _0: u32;

    bb0: {
        _0 = _2;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::iter::Empty<[(); 4]>;

    bb0: {
        _2 = std::iter::empty::<[(); 4]>() -> bb1;
    }

    bb1: {
        _1 = bug::<std::iter::Empty<[(); 4]>>(const std::iter::Empty::<[(); 4]>(PhantomData::<fn() -> [(); 4]>)) -> bb2;
    }

    bb2: {
        return;
    }
}
