// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f3() -> impl Trait1<T, <T as Trait2>::T> {
    let mut _0: impl Trait1<T, <T as Trait2>::T>;

    bb0: {
        return;
    }
}

fn <impl at ui/impl-trait/issues/issue-65581.rs:21:1: 21:44>::f1(_1: Struct1) -> <T as Trait2>::T {
    debug self => const Struct1;
    let mut _0: <T as Trait2>::T;
    let mut _2: !;

    bb0: {
        _2 = core::panicking::panic(const "not implemented");
    }
}

fn f4() -> () {
    let mut _0: ();
    let _1: ();

    bb0: {
        _1 = <T as Trait2>::f2::<[closure@ui/impl-trait/issues/issue-65581.rs:28:11: 28:14]>(const ZeroSized: [closure@ui/impl-trait/issues/issue-65581.rs:28:11: 28:14]) -> bb1;
    }

    bb1: {
        return;
    }
}

fn f4::{closure#0}(_1: [closure@ui/impl-trait/issues/issue-65581.rs:28:11: 28:14], _2: &<T as Trait2>::U) -> () {
    let mut _0: ();
    let _3: <T as Trait2>::T;
    let mut _4: impl Trait1<<T as Trait2>::U, <<T as Trait2>::U as Trait2>::T>;

    bb0: {
        _4 = f3::<<T as Trait2>::U>() -> bb1;
    }

    bb1: {
        _3 = <impl Trait1<<T as Trait2>::U, <<T as Trait2>::U as Trait2>::T> as Trait1<<T as Trait2>::U, <T as Trait2>::T>>::f1(const ZeroSized: impl Trait1<<T as Trait2>::U, <<T as Trait2>::U as Trait2>::T>) -> bb2;
    }

    bb2: {
        drop(_3) -> bb3;
    }

    bb3: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
