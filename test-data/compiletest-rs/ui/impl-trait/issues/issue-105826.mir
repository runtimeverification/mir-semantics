// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/impl-trait/issues/issue-105826.rs:13:1: 13:15>::one(_1: &mut B<'_>) -> &mut impl std::io::Write {
    debug self => _1;
    let mut _0: &mut impl std::io::Write;
    let mut _2: &mut A;

    bb0: {
        _2 = deref_copy ((*_1).0: &mut A);
        _0 = &mut ((*_2).0: std::vec::Vec<u8>);
        return;
    }
}

fn <impl at ui/impl-trait/issues/issue-105826.rs:13:1: 13:15>::two(_1: &mut B<'_>) -> &mut impl std::io::Write {
    debug self => _1;
    let mut _0: &mut impl std::io::Write;

    bb0: {
        _0 = deref_copy ((*_1).1: &mut std::vec::Vec<u8>);
        return;
    }
}

fn <impl at ui/impl-trait/issues/issue-105826.rs:13:1: 13:15>::three(_1: &mut B<'_>) -> &mut impl std::io::Write {
    debug self => _1;
    let mut _0: &mut impl std::io::Write;

    bb0: {
        _0 = &mut ((*_1).2: std::vec::Vec<u8>);
        return;
    }
}

fn <impl at ui/impl-trait/issues/issue-105826.rs:27:1: 27:15>::one(_1: &mut C<'_>) -> &mut impl std::io::Write {
    debug self => _1;
    let mut _0: &mut impl std::io::Write;
    let mut _2: &mut impl std::io::Write;
    let mut _3: &mut B<'_>;

    bb0: {
        _3 = &mut ((*_1).0: B<'_>);
        _2 = B::<'_>::one(move _3) -> bb1;
    }

    bb1: {
        _0 = _2;
        return;
    }
}

fn <impl at ui/impl-trait/issues/issue-105826.rs:27:1: 27:15>::two(_1: &mut C<'_>) -> &mut impl std::io::Write {
    debug self => _1;
    let mut _0: &mut impl std::io::Write;
    let mut _2: &mut impl std::io::Write;
    let mut _3: &mut B<'_>;

    bb0: {
        _3 = &mut ((*_1).0: B<'_>);
        _2 = B::<'_>::two(move _3) -> bb1;
    }

    bb1: {
        _0 = _2;
        return;
    }
}

fn <impl at ui/impl-trait/issues/issue-105826.rs:27:1: 27:15>::three(_1: &mut C<'_>) -> &mut impl std::io::Write {
    debug self => _1;
    let mut _0: &mut impl std::io::Write;
    let mut _2: &mut impl std::io::Write;
    let mut _3: &mut B<'_>;

    bb0: {
        _3 = &mut ((*_1).0: B<'_>);
        _2 = B::<'_>::three(move _3) -> bb1;
    }

    bb1: {
        _0 = _2;
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn A(_1: Vec<u8>) -> A {
    let mut _0: A;

    bb0: {
        _0 = A(move _1);
        return;
    }
}

// MIR FOR CTFE
fn A(_1: Vec<u8>) -> A {
    let mut _0: A;

    bb0: {
        _0 = A(move _1);
        return;
    }
}

fn C(_1: B<'_>) -> C<'_> {
    let mut _0: C<'_>;

    bb0: {
        _0 = C::<'_>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn C(_1: B<'_>) -> C<'_> {
    let mut _0: C<'_>;

    bb0: {
        _0 = C::<'_>(move _1);
        return;
    }
}
