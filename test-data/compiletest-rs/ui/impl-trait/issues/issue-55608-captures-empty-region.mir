// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn server() -> impl FilterBase2 {
    let mut _0: impl FilterBase2;
    let mut _1: Map2<[closure@ui/impl-trait/issues/issue-55608-captures-empty-region.rs:7:14: 7:16]>;

    bb0: {
        _1 = segment2::<[closure@ui/impl-trait/issues/issue-55608-captures-empty-region.rs:7:14: 7:16]>(const ZeroSized: [closure@ui/impl-trait/issues/issue-55608-captures-empty-region.rs:7:14: 7:16]) -> bb1;
    }

    bb1: {
        _0 = <Map2<[closure@ui/impl-trait/issues/issue-55608-captures-empty-region.rs:7:14: 7:16]> as FilterBase2>::map2::<[closure@ui/impl-trait/issues/issue-55608-captures-empty-region.rs:7:36: 7:38]>(const Map2::<[closure@ui/impl-trait/issues/issue-55608-captures-empty-region.rs:7:14: 7:16]> {{ _func: ZeroSized: [closure@ui/impl-trait/issues/issue-55608-captures-empty-region.rs:7:14: 7:16] }}, const ZeroSized: [closure@ui/impl-trait/issues/issue-55608-captures-empty-region.rs:7:36: 7:38]) -> bb2;
    }

    bb2: {
        return;
    }
}

fn server::{closure#0}(_1: &[closure@ui/impl-trait/issues/issue-55608-captures-empty-region.rs:7:14: 7:16]) -> Result<(), ()> {
    let mut _0: std::result::Result<(), ()>;

    bb0: {
        goto -> bb1;
    }

    bb1: {
        goto -> bb1;
    }
}

fn server::{closure#1}(_1: &[closure@ui/impl-trait/issues/issue-55608-captures-empty-region.rs:7:36: 7:38]) -> &str {
    let mut _0: &str;

    bb0: {
        _0 = const "";
        return;
    }
}

fn FilterBase2::map2(_1: Self, _2: F) -> Map2<F> {
    debug self => _1;
    debug _fn => _2;
    let mut _0: Map2<F>;

    bb0: {
        goto -> bb1;
    }

    bb1: {
        goto -> bb1;
    }
}

fn segment2(_1: F) -> Map2<F> {
    debug _fn => _1;
    let mut _0: Map2<F>;

    bb0: {
        goto -> bb1;
    }

    bb1: {
        goto -> bb1;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: impl FilterBase2;

    bb0: {
        _1 = server() -> bb1;
    }

    bb1: {
        return;
    }
}
