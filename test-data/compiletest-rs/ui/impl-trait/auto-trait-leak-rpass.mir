// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn before() -> impl FnMut(i32) {
    let mut _0: impl FnMut(i32);
    let mut _1: std::boxed::Box<i32>;
    scope 1 {
        debug p => _1;
    }

    bb0: {
        _1 = Box::<i32>::new(const 0_i32) -> bb1;
    }

    bb1: {
        _0 = [closure@ui/impl-trait/auto-trait-leak-rpass.rs:6:5: 6:13] { p: move _1 };
        return;
    }
}

fn before::{closure#0}(_1: &mut [closure@ui/impl-trait/auto-trait-leak-rpass.rs:6:5: 6:13], _2: i32) -> () {
    debug x => _2;
    debug p => ((*_1).0: std::boxed::Box<i32>);
    let mut _0: ();
    let mut _3: std::boxed::Box<i32>;
    let mut _4: *const i32;
    let mut _5: *const ();
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: bool;

    bb0: {
        _3 = deref_copy ((*_1).0: std::boxed::Box<i32>);
        _4 = (((_3.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32);
        _5 = _4 as *const () (PtrToPtr);
        _6 = _5 as usize (Transmute);
        _7 = AlignOf(i32);
        _8 = Sub(_7, const 1_usize);
        _9 = BitAnd(_6, _8);
        _10 = Eq(_9, const 0_usize);
        assert(_10, "misaligned pointer dereference: address must be a multiple of {} but is {}", _7, _6) -> [success: bb1, unwind unreachable];
    }

    bb1: {
        (*_4) = _2;
        return;
    }
}

fn send(_1: T) -> () {
    let mut _0: ();

    bb0: {
        drop(_1) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: impl FnMut(i32);
    let _3: ();
    let mut _4: impl FnMut(i32);

    bb0: {
        _2 = before() -> bb1;
    }

    bb1: {
        _1 = send::<impl FnMut(i32)>(move _2) -> bb2;
    }

    bb2: {
        _4 = after() -> bb3;
    }

    bb3: {
        _3 = send::<impl FnMut(i32)>(move _4) -> bb4;
    }

    bb4: {
        return;
    }
}

fn after() -> impl FnMut(i32) {
    let mut _0: impl FnMut(i32);
    let mut _1: std::boxed::Box<i32>;
    scope 1 {
        debug p => _1;
    }

    bb0: {
        _1 = Box::<i32>::new(const 0_i32) -> bb1;
    }

    bb1: {
        _0 = [closure@ui/impl-trait/auto-trait-leak-rpass.rs:20:5: 20:13] { p: move _1 };
        return;
    }
}

fn after::{closure#0}(_1: &mut [closure@ui/impl-trait/auto-trait-leak-rpass.rs:20:5: 20:13], _2: i32) -> () {
    debug x => _2;
    debug p => ((*_1).0: std::boxed::Box<i32>);
    let mut _0: ();
    let mut _3: std::boxed::Box<i32>;
    let mut _4: *const i32;
    let mut _5: *const ();
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: bool;

    bb0: {
        _3 = deref_copy ((*_1).0: std::boxed::Box<i32>);
        _4 = (((_3.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32);
        _5 = _4 as *const () (PtrToPtr);
        _6 = _5 as usize (Transmute);
        _7 = AlignOf(i32);
        _8 = Sub(_7, const 1_usize);
        _9 = BitAnd(_6, _8);
        _10 = Eq(_9, const 0_usize);
        assert(_10, "misaligned pointer dereference: address must be a multiple of {} but is {}", _7, _6) -> [success: bb1, unwind unreachable];
    }

    bb1: {
        (*_4) = _2;
        return;
    }
}
