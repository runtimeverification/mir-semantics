// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: &u32) -> impl Fn() -> &u32 {
    debug x => _1;
    let mut _0: impl Fn() -> &u32;

    bb0: {
        _0 = [closure@ui/impl-trait/region-escape-via-bound-contravariant-closure.rs:15:5: 15:12] { x: _1 };
        return;
    }
}

fn foo::{closure#0}(_1: &[closure@ui/impl-trait/region-escape-via-bound-contravariant-closure.rs:15:5: 15:12]) -> &u32 {
    debug x => ((*_1).0: &u32);
    let mut _0: &u32;

    bb0: {
        _0 = deref_copy ((*_1).0: &u32);
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
