// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn check_display_eq(_1: &Vec<impl Display>) -> () {
    debug iter => _1;
    let mut _0: ();
    let mut _2: std::string::String;
    let mut _3: std::slice::Iter<'_, impl Display>;
    let mut _5: std::option::Option<&impl Display>;
    let mut _6: &mut std::slice::Iter<'_, impl Display>;
    let mut _7: isize;
    let mut _11: std::fmt::Arguments<'_>;
    let mut _12: &[&str];
    let _13: &[&str; 2];
    let _14: [&str; 2];
    let mut _15: &[core::fmt::rt::Argument<'_>];
    let _16: &[core::fmt::rt::Argument<'_>; 1];
    let _17: [core::fmt::rt::Argument<'_>; 1];
    let mut _18: core::fmt::rt::Argument<'_>;
    let _19: &&impl Display;
    let _20: ();
    let mut _21: &mut std::string::String;
    let mut _22: &str;
    let _23: &str;
    let _24: &std::string::String;
    let mut _25: (&&str, &&str);
    let mut _26: &&str;
    let _27: &str;
    let mut _28: &&str;
    let _29: &str;
    let mut _30: &str;
    let _31: &str;
    let mut _32: &std::string::String;
    let mut _35: bool;
    let mut _36: bool;
    let _38: !;
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug collected => _2;
        let mut _4: std::slice::Iter<'_, impl Display>;
        let _33: &&str;
        let _34: &&str;
        scope 2 {
            debug iter => _4;
            let _8: &impl Display;
            scope 3 {
                debug it => _8;
                let _9: std::string::String;
                let _10: std::string::String;
                scope 4 {
                    debug disp => _9;
                }
                scope 5 {
                    debug res => _10;
                }
            }
        }
        scope 6 {
            debug left_val => _33;
            debug right_val => _34;
            let _37: core::panicking::AssertKind;
            scope 7 {
                debug kind => _37;
            }
        }
    }

    bb0: {
        _2 = String::new() -> bb1;
    }

    bb1: {
        _3 = <&Vec<impl Display> as IntoIterator>::into_iter(_1) -> [return: bb2, unwind: bb20];
    }

    bb2: {
        _4 = move _3;
        goto -> bb3;
    }

    bb3: {
        _6 = &mut _4;
        _5 = <std::slice::Iter<'_, impl Display> as Iterator>::next(_6) -> [return: bb4, unwind: bb20];
    }

    bb4: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        _8 = ((_5 as Some).0: &impl Display);
        _14 = [const "", const " "];
        _13 = &_14;
        _12 = _13 as &[&str] (Pointer(Unsize));
        _19 = &_8;
        _18 = core::fmt::rt::Argument::<'_>::new_display::<&impl Display>(_19) -> [return: bb8, unwind: bb20];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _27 = const "0 3 27 823 4891 1 0";
        _26 = &_27;
        _32 = &_2;
        _31 = <String as Deref>::deref(move _32) -> [return: bb13, unwind: bb20];
    }

    bb8: {
        _17 = [move _18];
        _16 = &_17;
        _15 = _16 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _11 = Arguments::<'_>::new_v1(move _12, move _15) -> [return: bb9, unwind: bb20];
    }

    bb9: {
        _10 = format(move _11) -> [return: bb10, unwind: bb20];
    }

    bb10: {
        _9 = move _10;
        _21 = &mut _2;
        _24 = &_9;
        _23 = <String as Deref>::deref(_24) -> [return: bb11, unwind: bb19];
    }

    bb11: {
        _22 = _23;
        _20 = String::push_str(move _21, move _22) -> [return: bb12, unwind: bb19];
    }

    bb12: {
        drop(_9) -> [return: bb3, unwind: bb20];
    }

    bb13: {
        _30 = _31;
        _29 = core::str::<impl str>::trim(move _30) -> [return: bb14, unwind: bb20];
    }

    bb14: {
        _28 = &_29;
        _25 = (move _26, move _28);
        _33 = (_25.0: &&str);
        _34 = (_25.1: &&str);
        _36 = <&str as PartialEq>::eq(_33, _34) -> [return: bb15, unwind: bb20];
    }

    bb15: {
        _35 = Not(move _36);
        switchInt(move _35) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _37 = core::panicking::AssertKind::Eq;
        _39 = Option::<Arguments<'_>>::None;
        _38 = core::panicking::assert_failed::<&str, &str>(move _37, _33, _34, move _39) -> bb20;
    }

    bb17: {
        drop(_2) -> bb18;
    }

    bb18: {
        return;
    }

    bb19 (cleanup): {
        drop(_9) -> [return: bb20, unwind terminate];
    }

    bb20 (cleanup): {
        drop(_2) -> [return: bb21, unwind terminate];
    }

    bb21 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<i32>;
    let mut _2: std::boxed::Box<[i32]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[i32; 7]>;
    let mut _8: std::boxed::Box<[u32]>;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: *mut u8;
    let mut _12: std::boxed::Box<[u32; 7]>;
    let mut _14: std::boxed::Box<[&str]>;
    let mut _15: usize;
    let mut _16: usize;
    let mut _17: *mut u8;
    let mut _18: std::boxed::Box<[&str; 7]>;
    let _19: &str;
    let _20: &str;
    let _21: &str;
    let _22: &str;
    let _23: &str;
    let _24: &str;
    let _25: ();
    let _26: &std::vec::Vec<i32>;
    let _27: ();
    let _28: &std::vec::Vec<u32>;
    let _29: ();
    let _30: &std::vec::Vec<&str>;
    let mut _31: *const [i32; 7];
    let mut _32: *const [u32; 7];
    let mut _33: *const [&str; 7];
    let mut _46: *const ();
    let mut _47: usize;
    let mut _48: usize;
    let mut _49: usize;
    let mut _50: usize;
    let mut _51: bool;
    scope 1 {
        debug i32_list_vec => _1;
        let _7: std::vec::Vec<u32>;
        let mut _40: *const ();
        let mut _41: usize;
        let mut _42: usize;
        let mut _43: usize;
        let mut _44: usize;
        let mut _45: bool;
        scope 3 {
            debug u32_list_vec => _7;
            let _13: std::vec::Vec<&str>;
            let mut _34: *const ();
            let mut _35: usize;
            let mut _36: usize;
            let mut _37: usize;
            let mut _38: usize;
            let mut _39: bool;
            scope 5 {
                debug str_list_vec => _13;
            }
            scope 6 {
            }
        }
        scope 4 {
        }
    }
    scope 2 {
    }

    bb0: {
        _3 = SizeOf([i32; 7]);
        _4 = AlignOf([i32; 7]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> bb1;
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [i32; 7]);
        _31 = (((_6.0: std::ptr::Unique<[i32; 7]>).0: std::ptr::NonNull<[i32; 7]>).0: *const [i32; 7]);
        _46 = _31 as *const () (PtrToPtr);
        _47 = _46 as usize (Transmute);
        _48 = AlignOf(i32);
        _49 = Sub(_48, const 1_usize);
        _50 = BitAnd(_47, _49);
        _51 = Eq(_50, const 0_usize);
        assert(_51, "misaligned pointer dereference: address must be a multiple of {} but is {}", _48, _47) -> [success: bb19, unwind unreachable];
    }

    bb2: {
        _9 = SizeOf([u32; 7]);
        _10 = AlignOf([u32; 7]);
        _11 = alloc::alloc::exchange_malloc(move _9, move _10) -> [return: bb3, unwind: bb15];
    }

    bb3: {
        _12 = ShallowInitBox(move _11, [u32; 7]);
        _32 = (((_12.0: std::ptr::Unique<[u32; 7]>).0: std::ptr::NonNull<[u32; 7]>).0: *const [u32; 7]);
        _40 = _32 as *const () (PtrToPtr);
        _41 = _40 as usize (Transmute);
        _42 = AlignOf(u32);
        _43 = Sub(_42, const 1_usize);
        _44 = BitAnd(_41, _43);
        _45 = Eq(_44, const 0_usize);
        assert(_45, "misaligned pointer dereference: address must be a multiple of {} but is {}", _42, _41) -> [success: bb18, unwind unreachable];
    }

    bb4: {
        _15 = SizeOf([&str; 7]);
        _16 = AlignOf([&str; 7]);
        _17 = alloc::alloc::exchange_malloc(move _15, move _16) -> [return: bb5, unwind: bb14];
    }

    bb5: {
        _18 = ShallowInitBox(move _17, [&str; 7]);
        _19 = const "3";
        _20 = const "27";
        _21 = const "823";
        _22 = const "4891";
        _23 = const "1";
        _24 = const "0";
        _33 = (((_18.0: std::ptr::Unique<[&str; 7]>).0: std::ptr::NonNull<[&str; 7]>).0: *const [&str; 7]);
        _34 = _33 as *const () (PtrToPtr);
        _35 = _34 as usize (Transmute);
        _36 = AlignOf(&str);
        _37 = Sub(_36, const 1_usize);
        _38 = BitAnd(_35, _37);
        _39 = Eq(_38, const 0_usize);
        assert(_39, "misaligned pointer dereference: address must be a multiple of {} but is {}", _36, _35) -> [success: bb17, unwind unreachable];
    }

    bb6: {
        _26 = &_1;
        _25 = check_display_eq::<i32>(_26) -> [return: bb7, unwind: bb13];
    }

    bb7: {
        _28 = &_7;
        _27 = check_display_eq::<u32>(_28) -> [return: bb8, unwind: bb13];
    }

    bb8: {
        _30 = &_13;
        _29 = check_display_eq::<&str>(_30) -> [return: bb9, unwind: bb13];
    }

    bb9: {
        drop(_13) -> [return: bb10, unwind: bb14];
    }

    bb10: {
        drop(_7) -> [return: bb11, unwind: bb15];
    }

    bb11: {
        drop(_1) -> bb12;
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        drop(_13) -> [return: bb14, unwind terminate];
    }

    bb14 (cleanup): {
        drop(_7) -> [return: bb15, unwind terminate];
    }

    bb15 (cleanup): {
        drop(_1) -> [return: bb16, unwind terminate];
    }

    bb16 (cleanup): {
        resume;
    }

    bb17: {
        (*_33) = [const "0", _19, _20, _21, _22, _23, _24];
        _14 = move _18 as std::boxed::Box<[&str]> (Pointer(Unsize));
        _13 = slice::<impl [&str]>::into_vec::<std::alloc::Global>(move _14) -> [return: bb6, unwind: bb14];
    }

    bb18: {
        (*_32) = [const 0_u32, const 3_u32, const 27_u32, const 823_u32, const 4891_u32, const 1_u32, const 0_u32];
        _8 = move _12 as std::boxed::Box<[u32]> (Pointer(Unsize));
        _7 = slice::<impl [u32]>::into_vec::<std::alloc::Global>(move _8) -> [return: bb4, unwind: bb15];
    }

    bb19: {
        (*_31) = [const 0_i32, const 3_i32, const 27_i32, const 823_i32, const 4891_i32, const 1_i32, const 0_i32];
        _2 = move _6 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _1 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _2) -> bb2;
    }
}
