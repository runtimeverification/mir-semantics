// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: T) -> impl Into<[T; { const FOO: usize = 1; FOO }]> {
    debug t => _1;
    let mut _0: impl std::convert::Into<[T; { const FOO: usize = 1; FOO }]>;

    bb0: {
        _0 = [move _1];
        return;
    }
}

foo::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const foo::{constant#0}::FOO: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

fn bar() -> impl Into<[u8; { const FOO: usize = 1; FOO }]> {
    let mut _0: impl std::convert::Into<[u8; { const FOO: usize = 1; FOO }]>;

    bb0: {
        _0 = [const 99_u8];
        return;
    }
}

bar::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const bar::{constant#0}::FOO: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let _4: &[&str; 2];
    let _5: [&str; 2];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &[i32; 1];
    let _11: [i32; 1];
    let mut _12: impl std::convert::Into<[i32; { const FOO: usize = 1; FOO }]>;
    let _13: ();
    let mut _14: std::fmt::Arguments<'_>;
    let mut _15: &[&str];
    let _16: &[&str; 2];
    let _17: [&str; 2];
    let mut _18: &[core::fmt::rt::Argument<'_>];
    let _19: &[core::fmt::rt::Argument<'_>; 1];
    let _20: [core::fmt::rt::Argument<'_>; 1];
    let mut _21: core::fmt::rt::Argument<'_>;
    let _22: &[u8; 1];
    let _23: [u8; 1];
    let mut _24: impl std::convert::Into<[u8; { const FOO: usize = 1; FOO }]>;

    bb0: {
        _5 = [const "", const "\n"];
        _4 = &_5;
        _3 = _4 as &[&str] (Pointer(Unsize));
        _12 = foo::<i32>(const 42_i32) -> bb1;
    }

    bb1: {
        _11 = <impl Into<[i32; { const FOO: usize = 1; FOO }]> as Into<[i32; 1]>>::into(move _12) -> bb2;
    }

    bb2: {
        _10 = &_11;
        _9 = core::fmt::rt::Argument::<'_>::new_debug::<[i32; 1]>(_10) -> bb3;
    }

    bb3: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_v1(move _3, move _6) -> bb4;
    }

    bb4: {
        _1 = _print(move _2) -> bb5;
    }

    bb5: {
        _17 = [const "", const "\n"];
        _16 = &_17;
        _15 = _16 as &[&str] (Pointer(Unsize));
        _24 = bar() -> bb6;
    }

    bb6: {
        _23 = <impl Into<[u8; { const FOO: usize = 1; FOO }]> as Into<[u8; 1]>>::into(move _24) -> bb7;
    }

    bb7: {
        _22 = &_23;
        _21 = core::fmt::rt::Argument::<'_>::new_debug::<[u8; 1]>(_22) -> bb8;
    }

    bb8: {
        _20 = [move _21];
        _19 = &_20;
        _18 = _19 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _14 = Arguments::<'_>::new_v1(move _15, move _18) -> bb9;
    }

    bb9: {
        _13 = _print(move _14) -> bb10;
    }

    bb10: {
        return;
    }
}
