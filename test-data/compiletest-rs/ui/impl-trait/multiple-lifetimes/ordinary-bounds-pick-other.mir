// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn upper_bounds(_1: Ordinary<'_>, _2: Ordinary<'_>) -> impl Trait<'_, '_> {
    debug a => _1;
    debug b => _2;
    let mut _0: impl Trait<'_, '_>;
    let _3: Ordinary<'_>;
    let mut _4: bool;
    scope 1 {
        debug p => _3;
    }

    bb0: {
        _4 = condition() -> bb1;
    }

    bb1: {
        switchInt(move _4) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _3 = move _1;
        goto -> bb4;
    }

    bb3: {
        _3 = move _2;
        goto -> bb4;
    }

    bb4: {
        _0 = move _3;
        return;
    }
}

fn condition() -> bool {
    let mut _0: bool;

    bb0: {
        _0 = const true;
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn Ordinary(_1: &u8) -> Ordinary<'_> {
    let mut _0: Ordinary<'_>;

    bb0: {
        _0 = Ordinary::<'_>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Ordinary(_1: &u8) -> Ordinary<'_> {
    let mut _0: Ordinary<'_>;

    bb0: {
        _0 = Ordinary::<'_>(move _1);
        return;
    }
}
