// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/impl-trait/in-trait/nested-rpitit.rs:15:1: 15:15>::bar(_1: A) -> &str {
    debug self => const A;
    let mut _0: &str;

    bb0: {
        _0 = const "Hello, world";
        return;
    }
}

fn <impl at ui/impl-trait/in-trait/nested-rpitit.rs:23:1: 23:15>::bar(_1: B) -> Box<i32> {
    debug self => const B;
    let mut _0: std::boxed::Box<i32>;

    bb0: {
        _0 = Box::<i32>::new(const 42_i32) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let _4: &[&str; 2];
    let _5: [&str; 2];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &&str;
    let _11: &str;
    let _12: &str;
    let _13: ();
    let mut _14: std::fmt::Arguments<'_>;
    let mut _15: &[&str];
    let _16: &[&str; 2];
    let _17: [&str; 2];
    let mut _18: &[core::fmt::rt::Argument<'_>];
    let _19: &[core::fmt::rt::Argument<'_>; 1];
    let _20: [core::fmt::rt::Argument<'_>; 1];
    let mut _21: core::fmt::rt::Argument<'_>;
    let _22: &&i32;
    let _23: &i32;
    let _24: std::boxed::Box<i32>;
    let mut _25: *const i32;
    let mut _26: *const ();
    let mut _27: usize;
    let mut _28: usize;
    let mut _29: usize;
    let mut _30: usize;
    let mut _31: bool;

    bb0: {
        _5 = [const "Message for you: ", const "\n"];
        _4 = &_5;
        _3 = _4 as &[&str] (Pointer(Unsize));
        _12 = <A as Foo>::bar(const A) -> bb1;
    }

    bb1: {
        _11 = _12;
        _10 = &_11;
        _9 = core::fmt::rt::Argument::<'_>::new_debug::<&str>(_10) -> bb2;
    }

    bb2: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_v1(move _3, move _6) -> bb3;
    }

    bb3: {
        _1 = _print(move _2) -> bb4;
    }

    bb4: {
        _17 = [const "Another for you: ", const "\n"];
        _16 = &_17;
        _15 = _16 as &[&str] (Pointer(Unsize));
        _24 = <B as Foo>::bar(const B) -> bb5;
    }

    bb5: {
        _25 = (((_24.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32);
        _26 = _25 as *const () (PtrToPtr);
        _27 = _26 as usize (Transmute);
        _28 = AlignOf(i32);
        _29 = Sub(_28, const 1_usize);
        _30 = BitAnd(_27, _29);
        _31 = Eq(_30, const 0_usize);
        assert(_31, "misaligned pointer dereference: address must be a multiple of {} but is {}", _28, _27) -> [success: bb12, unwind unreachable];
    }

    bb6: {
        _20 = [move _21];
        _19 = &_20;
        _18 = _19 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _14 = Arguments::<'_>::new_v1(move _15, move _18) -> [return: bb7, unwind: bb10];
    }

    bb7: {
        _13 = _print(move _14) -> [return: bb8, unwind: bb10];
    }

    bb8: {
        drop(_24) -> bb9;
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_24) -> [return: bb11, unwind terminate];
    }

    bb11 (cleanup): {
        resume;
    }

    bb12: {
        _23 = &(*_25);
        _22 = &_23;
        _21 = core::fmt::rt::Argument::<'_>::new_debug::<&i32>(_22) -> [return: bb6, unwind: bb10];
    }
}
