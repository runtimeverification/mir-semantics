// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Greeter::test_func(_1: &Self, _2: &str) -> impl TestTrait<Output = ()> {
    debug self => _1;
    debug func => _2;
    let mut _0: impl TestTrait<Output = ()>;
    let mut _3: bool;
    let mut _4: bool;

    bb0: {
        _3 = <str as PartialEq>::eq(_2, const "SayHello") -> bb1;
    }

    bb1: {
        switchInt(move _3) -> [0: bb2, otherwise: bb5];
    }

    bb2: {
        _4 = <str as PartialEq>::eq(_2, const "SayGoodbye") -> bb3;
    }

    bb3: {
        switchInt(move _4) -> [0: bb4, otherwise: bb6];
    }

    bb4: {
        _0 = GreeterOutput::<TestA, TestB>::SayHello(const TestA {{  }});
        goto -> bb7;
    }

    bb5: {
        _0 = GreeterOutput::<TestA, TestB>::SayHello(const TestA {{  }});
        goto -> bb7;
    }

    bb6: {
        _0 = GreeterOutput::<TestA, TestB>::SayGoodbye(const TestB {{  }});
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let _4: &[&str; 1];
    let _5: [&str; 1];

    bb0: {
        _5 = [const "Hello, world!\n"];
        _4 = &_5;
        _3 = _4 as &[&str] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_const(move _3) -> bb1;
    }

    bb1: {
        _1 = _print(move _2) -> bb2;
    }

    bb2: {
        return;
    }
}

fn GreeterOutput::SayHello(_1: A) -> GreeterOutput<A, B> {
    let mut _0: GreeterOutput<A, B>;

    bb0: {
        _0 = GreeterOutput::<A, B>::SayHello(move _1);
        return;
    }
}

// MIR FOR CTFE
fn GreeterOutput::SayHello(_1: A) -> GreeterOutput<A, B> {
    let mut _0: GreeterOutput<A, B>;

    bb0: {
        _0 = GreeterOutput::<A, B>::SayHello(move _1);
        return;
    }
}

fn GreeterOutput::SayGoodbye(_1: B) -> GreeterOutput<A, B> {
    let mut _0: GreeterOutput<A, B>;

    bb0: {
        _0 = GreeterOutput::<A, B>::SayGoodbye(move _1);
        return;
    }
}

// MIR FOR CTFE
fn GreeterOutput::SayGoodbye(_1: B) -> GreeterOutput<A, B> {
    let mut _0: GreeterOutput<A, B>;

    bb0: {
        _0 = GreeterOutput::<A, B>::SayGoodbye(move _1);
        return;
    }
}
