// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/impl-trait/trait_resolution.rs:9:1: 9:30>::into_stream(_1: EventStream<S>) -> impl Debug {
    debug self => _1;
    let mut _0: impl std::fmt::Debug;
    let mut _2: !;

    bb0: {
        _2 = core::panicking::panic(const "not implemented") -> bb1;
    }

    bb1 (cleanup): {
        drop(_1) -> [return: bb2, unwind terminate];
    }

    bb2 (cleanup): {
        resume;
    }
}

fn <impl at ui/impl-trait/trait_resolution.rs:9:1: 9:30>::into_reader(_1: EventStream<S>) -> impl Debug {
    debug self => _1;
    let mut _0: impl std::fmt::Debug;
    let mut _2: impl std::fmt::Debug;

    bb0: {
        _2 = EventStream::<S>::into_stream(move _1) -> bb1;
    }

    bb1: {
        _0 = <ReaderStream<impl Debug> as From<impl Debug>>::from(const ZeroSized: impl Debug) -> bb2;
    }

    bb2: {
        return;
    }
}

fn <impl at ui/impl-trait/trait_resolution.rs:19:10: 19:15>::fmt(_1: &ReaderStream<S>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &&S;
    let _7: &S;

    bb0: {
        _3 = const "ReaderStream";
        _4 = const "stream";
        _7 = &((*_1).0: S);
        _6 = &_7;
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _3, _4, move _5) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/impl-trait/trait_resolution.rs:24:1: 24:36>::from(_1: S) -> ReaderStream<S> {
    debug stream => _1;
    let mut _0: ReaderStream<S>;

    bb0: {
        _0 = ReaderStream::<S> { stream: move _1 };
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
