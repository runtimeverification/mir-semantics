// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn hide(_1: T) -> impl Foo {
    debug x => _1;
    let mut _0: impl Foo;

    bb0: {
        _0 = move _1;
        return;
    }
}

fn <impl at ui/impl-trait/equality-rpass.rs:16:1: 16:25>::leak(_1: U) -> T {
    debug self => _1;
    let mut _0: T;
    let _2: !;

    bb0: {
        _2 = begin_panic::<&str>(const "type mismatch") -> bb1;
    }

    bb1 (cleanup): {
        drop(_1) -> [return: bb2, unwind terminate];
    }

    bb2 (cleanup): {
        resume;
    }
}

fn <impl at ui/impl-trait/equality-rpass.rs:19:1: 19:22>::leak(_1: T) -> T {
    debug self => _1;
    let mut _0: T;

    bb0: {
        _0 = move _1;
        return;
    }
}

fn CheckIfSend::check(_1: Self) -> <Self as CheckIfSend>::T {
    debug self => _1;
    let mut _0: <Self as CheckIfSend>::T;

    bb0: {
        _0 = <<Self as CheckIfSend>::T as Default>::default() -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_1) -> bb2;
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn lucky_seven() -> impl Fn(usize) -> u8 {
    let mut _0: impl Fn(usize) -> u8;
    let _1: [u8; 7];
    scope 1 {
        debug a => _1;
    }

    bb0: {
        _1 = [const 1_u8, const 2_u8, const 3_u8, const 4_u8, const 5_u8, const 6_u8, const 7_u8];
        _0 = [closure@ui/impl-trait/equality-rpass.rs:36:5: 36:13] { a: _1 };
        return;
    }
}

fn lucky_seven::{closure#0}(_1: &[closure@ui/impl-trait/equality-rpass.rs:36:5: 36:13], _2: usize) -> u8 {
    debug i => _2;
    debug a => ((*_1).0: [u8; 7]);
    let mut _0: u8;
    let mut _3: usize;
    let mut _4: bool;

    bb0: {
        _3 = const 7_usize;
        _4 = Lt(_2, _3);
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> bb1;
    }

    bb1: {
        _0 = ((*_1).0: [u8; 7])[_2];
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&impl Foo, &impl Foo);
    let mut _2: &impl Foo;
    let _3: impl Foo;
    let mut _4: &impl Foo;
    let _5: impl Foo;
    let _6: &impl Foo;
    let _7: &impl Foo;
    let mut _8: bool;
    let mut _9: bool;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: (&usize, &usize);
    let mut _14: &usize;
    let _15: usize;
    let _16: &impl Foo;
    let _17: impl Foo;
    let mut _18: [u8; 5];
    let mut _19: &usize;
    let _20: usize;
    let _21: &usize;
    let _22: &usize;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: usize;
    let mut _26: usize;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _30: (&usize, &usize);
    let mut _31: &usize;
    let _32: usize;
    let _33: &impl Fn(usize) -> u8;
    let _34: impl Fn(usize) -> u8;
    let mut _35: &usize;
    let _36: usize;
    let _37: &usize;
    let _38: &usize;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: usize;
    let mut _42: usize;
    let _44: !;
    let mut _45: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _46: (&i32, &i32);
    let mut _47: &i32;
    let _48: i32;
    let mut _49: impl Foo;
    let mut _50: &i32;
    let _51: i32;
    let _52: &i32;
    let _53: &i32;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: i32;
    let mut _57: i32;
    let _59: !;
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _61: (&bool, &bool);
    let mut _62: &bool;
    let _63: bool;
    let mut _64: impl Foo;
    let mut _65: &bool;
    let _66: bool;
    let _67: &bool;
    let _68: &bool;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let _74: !;
    let mut _75: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }
    scope 3 {
        debug left_val => _21;
        debug right_val => _22;
        let _27: core::panicking::AssertKind;
        scope 4 {
            debug kind => _27;
        }
    }
    scope 5 {
        debug left_val => _37;
        debug right_val => _38;
        let _43: core::panicking::AssertKind;
        scope 6 {
            debug kind => _43;
        }
    }
    scope 7 {
        debug left_val => _52;
        debug right_val => _53;
        let _58: core::panicking::AssertKind;
        scope 8 {
            debug kind => _58;
        }
    }
    scope 9 {
        debug left_val => _67;
        debug right_val => _68;
        let _73: core::panicking::AssertKind;
        scope 10 {
            debug kind => _73;
        }
    }

    bb0: {
        _3 = hide::<i32>(const 42_i32) -> bb1;
    }

    bb1: {
        _2 = &_3;
        _5 = hide::<i32>(const 42_i32) -> bb2;
    }

    bb2: {
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &impl Foo);
        _7 = (_1.1: &impl Foo);
        _9 = <impl Foo as PartialEq>::eq(_6, _7) -> bb3;
    }

    bb3: {
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<impl Foo, impl Foo>(move _10, _6, _7, move _12);
    }

    bb5: {
        _18 = [const 0_u8; 5];
        _17 = hide::<[u8; 5]>(move _18) -> bb6;
    }

    bb6: {
        _16 = &_17;
        _15 = std::mem::size_of_val::<impl Foo>(_16) -> bb7;
    }

    bb7: {
        _14 = &_15;
        _20 = const 5_usize;
        _19 = &_20;
        _13 = (move _14, move _19);
        _21 = (_13.0: &usize);
        _22 = (_13.1: &usize);
        _25 = (*_21);
        _26 = (*_22);
        _24 = Eq(move _25, move _26);
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<usize, usize>(move _27, _21, _22, move _29);
    }

    bb9: {
        _34 = lucky_seven() -> bb10;
    }

    bb10: {
        _33 = &_34;
        _32 = std::mem::size_of_val::<impl Fn(usize) -> u8>(_33) -> bb11;
    }

    bb11: {
        _31 = &_32;
        _36 = const 7_usize;
        _35 = &_36;
        _30 = (move _31, move _35);
        _37 = (_30.0: &usize);
        _38 = (_30.1: &usize);
        _41 = (*_37);
        _42 = (*_38);
        _40 = Eq(move _41, move _42);
        _39 = Not(move _40);
        switchInt(move _39) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _43 = core::panicking::AssertKind::Eq;
        _45 = Option::<Arguments<'_>>::None;
        _44 = core::panicking::assert_failed::<usize, usize>(move _43, _37, _38, move _45);
    }

    bb13: {
        _49 = hide::<i32>(const 5_i32) -> bb14;
    }

    bb14: {
        _48 = <impl Foo as Leak<i32>>::leak(move _49) -> bb15;
    }

    bb15: {
        _47 = &_48;
        _51 = const 5_i32;
        _50 = &_51;
        _46 = (move _47, move _50);
        _52 = (_46.0: &i32);
        _53 = (_46.1: &i32);
        _56 = (*_52);
        _57 = (*_53);
        _55 = Eq(move _56, move _57);
        _54 = Not(move _55);
        switchInt(move _54) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _58 = core::panicking::AssertKind::Eq;
        _60 = Option::<Arguments<'_>>::None;
        _59 = core::panicking::assert_failed::<i32, i32>(move _58, _52, _53, move _60);
    }

    bb17: {
        _64 = hide::<i32>(const 0_i32) -> bb18;
    }

    bb18: {
        _63 = <impl Foo as CheckIfSend>::check(move _64) -> bb19;
    }

    bb19: {
        _62 = &_63;
        _66 = const false;
        _65 = &_66;
        _61 = (move _62, move _65);
        _67 = (_61.0: &bool);
        _68 = (_61.1: &bool);
        _71 = (*_67);
        _72 = (*_68);
        _70 = Eq(move _71, move _72);
        _69 = Not(move _70);
        switchInt(move _69) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _73 = core::panicking::AssertKind::Eq;
        _75 = Option::<Arguments<'_>>::None;
        _74 = core::panicking::assert_failed::<bool, bool>(move _73, _67, _68, move _75);
    }

    bb21: {
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 5_usize;
        return;
    }
}
