// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn bug() -> impl Iterator<Item = [(); { |x: u32| { x }; 4 }]> {
    let mut _0: impl std::iter::Iterator<Item = [(); { |x: u32| { x }; 4 }]>;

    bb0: {
        _0 = std::iter::empty::<[(); 4]>() -> bb1;
    }

    bb1: {
        return;
    }
}

bug::{constant#0}: usize = {
    let mut _0: usize;
    let _1: [closure@ui/impl-trait/closure-in-impl-trait.rs:3:44: 3:52];

    bb0: {
        StorageLive(_1);
        _1 = [closure@ui/impl-trait/closure-in-impl-trait.rs:3:44: 3:52];
        StorageDead(_1);
        _0 = const 4_usize;
        return;
    }
}

fn bug::{constant#0}::{closure#0}(_1: &[closure@ui/impl-trait/closure-in-impl-trait.rs:3:44: 3:52], _2: u32) -> u32 {
    debug x => _2;
    let mut _0: u32;

    bb0: {
        _0 = _2;
        return;
    }
}

fn ok() -> Box<dyn Iterator<Item = [(); 4]>> {
    let mut _0: std::boxed::Box<dyn std::iter::Iterator<Item = [(); 4]>>;
    let mut _1: std::boxed::Box<std::iter::Empty<[(); 4]>>;
    let mut _2: std::iter::Empty<[(); 4]>;

    bb0: {
        _2 = std::iter::empty::<[(); 4]>() -> bb1;
    }

    bb1: {
        _1 = Box::<std::iter::Empty<[(); 4]>>::new(const std::iter::Empty::<[(); 4]>(PhantomData::<fn() -> [(); 4]>)) -> bb2;
    }

    bb2: {
        _0 = move _1 as std::boxed::Box<dyn std::iter::Iterator<Item = [(); 4]>> (Pointer(Unsize));
        return;
    }
}

ok::{constant#0}: usize = {
    let mut _0: usize;
    let _1: [closure@ui/impl-trait/closure-in-impl-trait.rs:7:46: 7:54];

    bb0: {
        StorageLive(_1);
        _1 = [closure@ui/impl-trait/closure-in-impl-trait.rs:7:46: 7:54];
        StorageDead(_1);
        _0 = const 4_usize;
        return;
    }
}

fn ok::{constant#0}::{closure#0}(_1: &[closure@ui/impl-trait/closure-in-impl-trait.rs:7:46: 7:54], _2: u32) -> u32 {
    debug x => _2;
    let mut _0: u32;

    bb0: {
        _0 = _2;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: std::boxed::Box<dyn std::iter::Iterator<Item = [(); 4]>>;
    let mut _2: std::boxed::Box<dyn std::iter::Iterator<Item = [(); 4]>>;
    let mut _3: std::boxed::Box<dyn std::iter::Iterator<Item = [(); 4]>>;
    let mut _4: std::option::Option<[(); 4]>;
    let mut _5: &mut std::boxed::Box<dyn std::iter::Iterator<Item = [(); 4]>>;
    let mut _6: isize;
    let mut _7: impl std::iter::Iterator<Item = [(); { |x: u32| { x }; 4 }]>;
    let mut _8: impl std::iter::Iterator<Item = [(); { |x: u32| { x }; 4 }]>;
    let mut _9: impl std::iter::Iterator<Item = [(); { |x: u32| { x }; 4 }]>;
    let mut _10: std::option::Option<[(); 4]>;
    let mut _11: &mut impl std::iter::Iterator<Item = [(); { |x: u32| { x }; 4 }]>;
    let mut _12: isize;
    scope 1 {
        debug iter => _3;
        scope 2 {
            debug _item => const [(), (), (), ()];
        }
    }
    scope 3 {
        debug iter => const ZeroSized: impl Iterator<Item = [(); { |x: u32| { x }; 4 }]>;
        scope 4 {
            debug _item => const [(), (), (), ()];
        }
    }

    bb0: {
        _2 = ok::<u32>() -> bb1;
    }

    bb1: {
        _1 = <Box<dyn Iterator<Item = [(); 4]>> as IntoIterator>::into_iter(move _2) -> bb2;
    }

    bb2: {
        _3 = move _1;
        goto -> bb3;
    }

    bb3: {
        _5 = &mut _3;
        _4 = <Box<dyn Iterator<Item = [(); 4]>> as Iterator>::next(_5) -> [return: bb4, unwind: bb12];
    }

    bb4: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb6, 1: bb3, otherwise: bb5];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        drop(_3) -> bb7;
    }

    bb7: {
        _8 = bug::<u32>() -> bb8;
    }

    bb8: {
        _7 = <impl Iterator<Item = [(); { |x: u32| { x }; 4 }]> as IntoIterator>::into_iter(const ZeroSized: impl Iterator<Item = [(); { |x: u32| { x }; 4 }]>) -> bb9;
    }

    bb9: {
        _11 = &mut _9;
        _10 = <impl Iterator<Item = [(); { |x: u32| { x }; 4 }]> as Iterator>::next(_11) -> bb10;
    }

    bb10: {
        _12 = discriminant(_10);
        switchInt(move _12) -> [0: bb11, 1: bb9, otherwise: bb5];
    }

    bb11: {
        return;
    }

    bb12 (cleanup): {
        drop(_3) -> [return: bb13, unwind terminate];
    }

    bb13 (cleanup): {
        resume;
    }
}
