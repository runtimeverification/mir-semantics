// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn future_from_generator(_1: T) -> impl FakeFuture<Output = <T as FakeGenerator>::Return> {
    debug x => _1;
    let mut _0: impl FakeFuture<Output = <T as FakeGenerator>::Return>;

    bb0: {
        _0 = GenFuture::<T>(move _1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn GenFuture(_1: T) -> GenFuture<T> {
    let mut _0: GenFuture<T>;

    bb0: {
        _0 = GenFuture::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn GenFuture(_1: T) -> GenFuture<T> {
    let mut _0: GenFuture<T>;

    bb0: {
        _0 = GenFuture::<T>(move _1);
        return;
    }
}
