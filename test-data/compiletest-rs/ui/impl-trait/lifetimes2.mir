// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn keys(_1: &Result<u32, u32>) -> impl Debug + '_ {
    debug x => _1;
    let mut _0: impl std::fmt::Debug + '_;
    let mut _2: isize;
    let _3: &u32;
    let _4: &u32;
    scope 1 {
        debug map => _3;
    }
    scope 2 {
        debug map => _4;
    }

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _4 = &(((*_1) as Err).0: u32);
        _0 = Result::<&u32, &u32>::Err(_4);
        goto -> bb4;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _3 = &(((*_1) as Ok).0: u32);
        _0 = Result::<&u32, &u32>::Ok(_3);
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
