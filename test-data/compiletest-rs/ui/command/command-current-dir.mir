// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::path::PathBuf;
    let mut _2: std::result::Result<std::path::PathBuf, std::io::Error>;
    let mut _3: bool;
    let mut _4: std::option::Option<&str>;
    let mut _5: &std::option::Option<std::string::String>;
    let _6: std::option::Option<std::string::String>;
    let mut _7: &mut std::iter::Skip<std::env::Args>;
    let mut _8: std::iter::Skip<std::env::Args>;
    let mut _9: std::env::Args;
    let mut _10: bool;
    let mut _11: isize;
    let mut _13: std::result::Result<std::path::PathBuf, std::io::Error>;
    let mut _14: (&&std::ffi::OsStr, &&str);
    let mut _15: &&std::ffi::OsStr;
    let _16: &std::ffi::OsStr;
    let mut _17: std::option::Option<&std::ffi::OsStr>;
    let mut _18: &std::path::Path;
    let _19: &std::path::Path;
    let mut _20: &std::path::PathBuf;
    let mut _21: &&str;
    let _22: &str;
    let mut _25: bool;
    let mut _26: bool;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    let _30: !;
    let mut _32: std::option::Option<&std::ffi::OsStr>;
    let mut _33: &std::path::Path;
    let _34: &std::path::Path;
    let mut _35: &std::path::PathBuf;
    let mut _37: std::option::Option<&std::path::Path>;
    let mut _38: &std::path::Path;
    let _39: &std::path::Path;
    let mut _40: &std::path::PathBuf;
    let _41: ();
    let mut _42: std::fmt::Arguments<'_>;
    let mut _43: &[&str];
    let _44: &[&str; 2];
    let _45: [&str; 2];
    let mut _46: &[core::fmt::rt::Argument<'_>];
    let _47: &[core::fmt::rt::Argument<'_>; 1];
    let _48: [core::fmt::rt::Argument<'_>; 1];
    let mut _49: core::fmt::rt::Argument<'_>;
    let _50: &&std::path::Path;
    let _51: ();
    let mut _52: std::result::Result<(), std::io::Error>;
    let mut _53: &&std::path::Path;
    let mut _55: &std::path::Path;
    let mut _57: &std::path::Path;
    let _58: ();
    let mut _59: std::result::Result<(), std::io::Error>;
    let mut _60: &std::path::PathBuf;
    let _61: ();
    let mut _62: std::result::Result<(), std::io::Error>;
    let mut _63: &std::path::PathBuf;
    let _64: u64;
    let mut _65: std::result::Result<u64, std::io::Error>;
    let mut _66: &std::path::PathBuf;
    let mut _67: std::path::PathBuf;
    let mut _68: &std::path::Path;
    let _69: &std::path::Path;
    let mut _70: &std::path::PathBuf;
    let mut _71: &std::ffi::OsStr;
    let mut _73: bool;
    let mut _74: &std::path::Path;
    let _75: &std::path::Path;
    let _76: &str;
    let mut _77: &std::ffi::OsStr;
    let mut _78: &std::path::Path;
    let _79: &std::path::Path;
    let _80: &str;
    let mut _81: &std::ffi::OsStr;
    let mut _83: std::result::Result<std::process::ExitStatus, std::io::Error>;
    let mut _84: &mut std::process::Command;
    let mut _85: &mut std::process::Command;
    let mut _86: &mut std::process::Command;
    let mut _87: &mut std::process::Command;
    let mut _88: &mut std::process::Command;
    let mut _89: std::process::Command;
    let mut _90: std::path::PathBuf;
    let mut _91: bool;
    let mut _92: bool;
    let mut _93: &std::process::ExitStatus;
    let mut _94: !;
    let mut _95: bool;
    scope 1 {
        debug me => _1;
        let _12: std::path::PathBuf;
        let _31: &std::ffi::OsStr;
        scope 2 {
            debug cwd => _12;
            let _23: &&std::ffi::OsStr;
            let _24: &&str;
            scope 3 {
                debug left_val => _23;
                debug right_val => _24;
                let _27: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _27;
                }
            }
        }
        scope 5 {
            debug exe => _31;
            let _36: &std::path::Path;
            scope 6 {
                debug cwd => _36;
                let _54: std::path::PathBuf;
                scope 7 {
                    debug foo => _54;
                    let _56: std::path::PathBuf;
                    scope 8 {
                        debug bar => _56;
                        let _72: std::path::PathBuf;
                        scope 9 {
                            debug relative_exe => _72;
                            let _82: std::process::ExitStatus;
                            scope 10 {
                                debug status => _82;
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = current_exe() -> bb1;
    }

    bb1: {
        _1 = Result::<PathBuf, std::io::Error>::unwrap(move _2) -> bb2;
    }

    bb2: {
        _9 = args() -> [return: bb3, unwind: bb67];
    }

    bb3: {
        _8 = <Args as Iterator>::skip(move _9, const 1_usize) -> [return: bb4, unwind: bb67];
    }

    bb4: {
        _7 = &mut _8;
        _6 = <Skip<Args> as Iterator>::next(move _7) -> [return: bb5, unwind: bb66];
    }

    bb5: {
        _5 = &_6;
        _4 = Option::<String>::as_deref(move _5) -> [return: bb6, unwind: bb65];
    }

    bb6: {
        _11 = discriminant(_4);
        switchInt(move _11) -> [1: bb8, otherwise: bb7];
    }

    bb7: {
        _3 = const false;
        goto -> bb10;
    }

    bb8: {
        _10 = <str as PartialEq>::eq(((_4 as Some).0: &str), const "current-dir") -> [return: bb9, unwind: bb65];
    }

    bb9: {
        StorageLive(_95);
        _95 = move _10;
        _3 = _95;
        StorageDead(_95);
        goto -> bb10;
    }

    bb10: {
        drop(_6) -> [return: bb11, unwind: bb66];
    }

    bb11: {
        drop(_8) -> [return: bb12, unwind: bb67];
    }

    bb12: {
        switchInt(move _3) -> [0: bb22, otherwise: bb13];
    }

    bb13: {
        _13 = current_dir() -> [return: bb14, unwind: bb67];
    }

    bb14: {
        _12 = Result::<PathBuf, std::io::Error>::unwrap(move _13) -> [return: bb15, unwind: bb67];
    }

    bb15: {
        _20 = &_12;
        _19 = <PathBuf as Deref>::deref(move _20) -> [return: bb16, unwind: bb64];
    }

    bb16: {
        _18 = _19;
        _17 = Path::file_name(move _18) -> [return: bb17, unwind: bb64];
    }

    bb17: {
        _16 = Option::<&OsStr>::unwrap(move _17) -> [return: bb18, unwind: bb64];
    }

    bb18: {
        _15 = &_16;
        _22 = const "bar";
        _21 = &_22;
        _14 = (move _15, move _21);
        _23 = (_14.0: &&std::ffi::OsStr);
        _24 = (_14.1: &&str);
        _26 = <&OsStr as PartialEq<&str>>::eq(_23, _24) -> [return: bb19, unwind: bb64];
    }

    bb19: {
        _25 = Not(move _26);
        switchInt(move _25) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<&OsStr, &str>(move _27, _23, _24, move _29) -> bb64;
    }

    bb21: {
        _30 = exit(const 0_i32) -> bb64;
    }

    bb22: {
        _35 = &_1;
        _34 = <PathBuf as Deref>::deref(move _35) -> [return: bb23, unwind: bb67];
    }

    bb23: {
        _33 = _34;
        _32 = Path::file_name(move _33) -> [return: bb24, unwind: bb67];
    }

    bb24: {
        _31 = Option::<&OsStr>::unwrap(move _32) -> [return: bb25, unwind: bb67];
    }

    bb25: {
        _40 = &_1;
        _39 = <PathBuf as Deref>::deref(move _40) -> [return: bb26, unwind: bb67];
    }

    bb26: {
        _38 = _39;
        _37 = Path::parent(move _38) -> [return: bb27, unwind: bb67];
    }

    bb27: {
        _36 = Option::<&Path>::unwrap(move _37) -> [return: bb28, unwind: bb67];
    }

    bb28: {
        _45 = [const "cwd=", const "\n"];
        _44 = &_45;
        _43 = _44 as &[&str] (Pointer(Unsize));
        _50 = &_36;
        _49 = core::fmt::rt::Argument::<'_>::new_debug::<&Path>(_50) -> [return: bb29, unwind: bb67];
    }

    bb29: {
        _48 = [move _49];
        _47 = &_48;
        _46 = _47 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _42 = Arguments::<'_>::new_v1(move _43, move _46) -> [return: bb30, unwind: bb67];
    }

    bb30: {
        _41 = _eprint(move _42) -> [return: bb31, unwind: bb67];
    }

    bb31: {
        _53 = &_36;
        _52 = set_current_dir::<&&Path>(move _53) -> [return: bb32, unwind: bb67];
    }

    bb32: {
        _51 = Result::<(), std::io::Error>::unwrap(move _52) -> [return: bb33, unwind: bb67];
    }

    bb33: {
        _55 = _36;
        _54 = Path::join::<&str>(move _55, const "foo") -> [return: bb34, unwind: bb67];
    }

    bb34: {
        _57 = _36;
        _56 = Path::join::<&str>(move _57, const "bar") -> [return: bb35, unwind: bb63];
    }

    bb35: {
        _60 = &_54;
        _59 = create_dir_all::<&PathBuf>(move _60) -> [return: bb36, unwind: bb62];
    }

    bb36: {
        _58 = Result::<(), std::io::Error>::unwrap(move _59) -> [return: bb37, unwind: bb62];
    }

    bb37: {
        _63 = &_56;
        _62 = create_dir_all::<&PathBuf>(move _63) -> [return: bb38, unwind: bb62];
    }

    bb38: {
        _61 = Result::<(), std::io::Error>::unwrap(move _62) -> [return: bb39, unwind: bb62];
    }

    bb39: {
        _66 = &_1;
        _70 = &_54;
        _69 = <PathBuf as Deref>::deref(move _70) -> [return: bb40, unwind: bb62];
    }

    bb40: {
        _68 = _69;
        _71 = _31;
        _67 = Path::join::<&OsStr>(move _68, move _71) -> [return: bb41, unwind: bb62];
    }

    bb41: {
        _65 = std::fs::copy::<&PathBuf, PathBuf>(move _66, move _67) -> [return: bb42, unwind: bb62];
    }

    bb42: {
        _64 = Result::<u64, std::io::Error>::unwrap(move _65) -> [return: bb43, unwind: bb62];
    }

    bb43: {
        _73 = const false;
        switchInt(move _73) -> [0: bb46, otherwise: bb44];
    }

    bb44: {
        _76 = const "foo";
        _75 = Path::new::<str>(_76) -> [return: bb45, unwind: bb62];
    }

    bb45: {
        _74 = _75;
        _77 = _31;
        _72 = Path::join::<&OsStr>(move _74, move _77) -> [return: bb69, unwind: bb62];
    }

    bb46: {
        _80 = const "../foo";
        _79 = Path::new::<str>(_80) -> [return: bb47, unwind: bb62];
    }

    bb47: {
        _78 = _79;
        _81 = _31;
        _72 = Path::join::<&OsStr>(move _78, move _81) -> [return: bb70, unwind: bb62];
    }

    bb48: {
        _90 = move _72;
        _89 = Command::new::<PathBuf>(move _90) -> [return: bb49, unwind: bb62];
    }

    bb49: {
        _88 = &mut _89;
        _87 = Command::arg::<&str>(move _88, const "current-dir") -> [return: bb50, unwind: bb61];
    }

    bb50: {
        _86 = _87;
        _85 = Command::current_dir::<&str>(move _86, const "bar") -> [return: bb51, unwind: bb61];
    }

    bb51: {
        _84 = _85;
        _83 = Command::status(move _84) -> [return: bb52, unwind: bb61];
    }

    bb52: {
        _82 = Result::<ExitStatus, std::io::Error>::unwrap(move _83) -> [return: bb53, unwind: bb61];
    }

    bb53: {
        drop(_89) -> [return: bb54, unwind: bb62];
    }

    bb54: {
        _93 = &_82;
        _92 = ExitStatus::success(move _93) -> [return: bb55, unwind: bb62];
    }

    bb55: {
        _91 = Not(move _92);
        switchInt(move _91) -> [0: bb57, otherwise: bb56];
    }

    bb56: {
        _94 = core::panicking::panic(const "assertion failed: status.success()") -> bb62;
    }

    bb57: {
        drop(_56) -> [return: bb58, unwind: bb63];
    }

    bb58: {
        drop(_54) -> [return: bb59, unwind: bb67];
    }

    bb59: {
        drop(_1) -> bb60;
    }

    bb60: {
        return;
    }

    bb61 (cleanup): {
        drop(_89) -> [return: bb62, unwind terminate];
    }

    bb62 (cleanup): {
        drop(_56) -> [return: bb63, unwind terminate];
    }

    bb63 (cleanup): {
        drop(_54) -> [return: bb67, unwind terminate];
    }

    bb64 (cleanup): {
        drop(_12) -> [return: bb67, unwind terminate];
    }

    bb65 (cleanup): {
        drop(_6) -> [return: bb66, unwind terminate];
    }

    bb66 (cleanup): {
        drop(_8) -> [return: bb67, unwind terminate];
    }

    bb67 (cleanup): {
        drop(_1) -> [return: bb68, unwind terminate];
    }

    bb68 (cleanup): {
        resume;
    }

    bb69: {
        goto -> bb48;
    }

    bb70: {
        goto -> bb48;
    }
}
