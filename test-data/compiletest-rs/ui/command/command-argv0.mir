// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<std::string::String>;
    let mut _2: std::env::Args;
    let mut _3: bool;
    let mut _4: usize;
    let mut _5: &std::vec::Vec<std::string::String>;
    let mut _6: (&std::string::String, &&str);
    let mut _7: &std::string::String;
    let _8: &std::string::String;
    let mut _9: &std::vec::Vec<std::string::String>;
    let mut _10: &&str;
    let _11: &str;
    let mut _14: bool;
    let mut _15: bool;
    let _17: !;
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _19: (&std::string::String, &&str);
    let mut _20: &std::string::String;
    let _21: &std::string::String;
    let mut _22: &std::vec::Vec<std::string::String>;
    let mut _23: &&str;
    let _24: &str;
    let mut _27: bool;
    let mut _28: bool;
    let _30: !;
    let mut _31: std::option::Option<std::fmt::Arguments<'_>>;
    let _32: ();
    let mut _33: std::fmt::Arguments<'_>;
    let mut _34: &[&str];
    let _35: &[&str; 1];
    let _36: [&str; 1];
    let mut _38: std::result::Result<std::process::Output, std::io::Error>;
    let mut _39: &mut std::process::Command;
    let mut _40: &mut std::process::Command;
    let mut _41: &mut std::process::Command;
    let mut _42: &mut std::process::Command;
    let mut _43: &mut std::process::Command;
    let mut _44: std::process::Command;
    let mut _45: &std::string::String;
    let _46: &std::string::String;
    let mut _47: &std::vec::Vec<std::string::String>;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: &std::vec::Vec<u8>;
    let _51: !;
    let mut _52: std::fmt::Arguments<'_>;
    let mut _53: &[&str];
    let _54: &[&str; 1];
    let _55: [&str; 1];
    let mut _56: &[core::fmt::rt::Argument<'_>];
    let _57: &[core::fmt::rt::Argument<'_>; 1];
    let _58: [core::fmt::rt::Argument<'_>; 1];
    let mut _59: core::fmt::rt::Argument<'_>;
    let _60: &std::borrow::Cow<'_, str>;
    let _61: std::borrow::Cow<'_, str>;
    let mut _62: &[u8];
    let _63: &[u8];
    let _64: &std::vec::Vec<u8>;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: &std::process::ExitStatus;
    let mut _68: !;
    let mut _69: (&std::vec::Vec<u8>, &&[u8; 7]);
    let mut _70: &std::vec::Vec<u8>;
    let mut _71: &&[u8; 7];
    let _72: &[u8; 7];
    let mut _75: bool;
    let mut _76: bool;
    let _78: !;
    let mut _79: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug args => _1;
        let _12: &std::string::String;
        let _13: &&str;
        let _25: &std::string::String;
        let _26: &&str;
        let _37: std::process::Output;
        scope 2 {
            debug left_val => _12;
            debug right_val => _13;
            let _16: core::panicking::AssertKind;
            scope 3 {
                debug kind => _16;
            }
        }
        scope 4 {
            debug left_val => _25;
            debug right_val => _26;
            let _29: core::panicking::AssertKind;
            scope 5 {
                debug kind => _29;
            }
        }
        scope 6 {
            debug output => _37;
            let _73: &std::vec::Vec<u8>;
            let _74: &&[u8; 7];
            scope 7 {
                debug left_val => _73;
                debug right_val => _74;
                let _77: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _77;
                }
            }
        }
    }

    bb0: {
        _2 = args() -> bb1;
    }

    bb1: {
        _1 = <Args as Iterator>::collect::<Vec<String>>(move _2) -> bb2;
    }

    bb2: {
        _5 = &_1;
        _4 = Vec::<String>::len(move _5) -> [return: bb3, unwind: bb41];
    }

    bb3: {
        _3 = Gt(move _4, const 1_usize);
        switchInt(move _3) -> [0: bb15, otherwise: bb4];
    }

    bb4: {
        _9 = &_1;
        _8 = <Vec<String> as Index<usize>>::index(move _9, const 1_usize) -> [return: bb5, unwind: bb41];
    }

    bb5: {
        _7 = _8;
        _11 = const "doing-test";
        _10 = &_11;
        _6 = (move _7, move _10);
        _12 = (_6.0: &std::string::String);
        _13 = (_6.1: &&str);
        _15 = <String as PartialEq<&str>>::eq(_12, _13) -> [return: bb6, unwind: bb41];
    }

    bb6: {
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _16 = core::panicking::AssertKind::Eq;
        _18 = Option::<Arguments<'_>>::None;
        _17 = core::panicking::assert_failed::<String, &str>(move _16, _12, _13, move _18) -> bb41;
    }

    bb8: {
        _22 = &_1;
        _21 = <Vec<String> as Index<usize>>::index(move _22, const 0_usize) -> [return: bb9, unwind: bb41];
    }

    bb9: {
        _20 = _21;
        _24 = const "i have a silly name";
        _23 = &_24;
        _19 = (move _20, move _23);
        _25 = (_19.0: &std::string::String);
        _26 = (_19.1: &&str);
        _28 = <String as PartialEq<&str>>::eq(_25, _26) -> [return: bb10, unwind: bb41];
    }

    bb10: {
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _29 = core::panicking::AssertKind::Eq;
        _31 = Option::<Arguments<'_>>::None;
        _30 = core::panicking::assert_failed::<String, &str>(move _29, _25, _26, move _31) -> bb41;
    }

    bb12: {
        _36 = [const "passed\n"];
        _35 = &_36;
        _34 = _35 as &[&str] (Pointer(Unsize));
        _33 = Arguments::<'_>::new_const(move _34) -> [return: bb13, unwind: bb41];
    }

    bb13: {
        _32 = _print(move _33) -> [return: bb14, unwind: bb41];
    }

    bb14: {
        drop(_1) -> bb37;
    }

    bb15: {
        _47 = &_1;
        _46 = <Vec<String> as Index<usize>>::index(move _47, const 0_usize) -> [return: bb16, unwind: bb41];
    }

    bb16: {
        _45 = _46;
        _44 = Command::new::<&String>(move _45) -> [return: bb17, unwind: bb41];
    }

    bb17: {
        _43 = &mut _44;
        _42 = Command::arg::<&str>(move _43, const "doing-test") -> [return: bb18, unwind: bb40];
    }

    bb18: {
        _41 = _42;
        _40 = <Command as std::os::unix::process::CommandExt>::arg0::<&str>(move _41, const "i have a silly name") -> [return: bb19, unwind: bb40];
    }

    bb19: {
        _39 = _40;
        _38 = Command::output(move _39) -> [return: bb20, unwind: bb40];
    }

    bb20: {
        _37 = Result::<Output, std::io::Error>::unwrap(move _38) -> [return: bb21, unwind: bb40];
    }

    bb21: {
        drop(_44) -> [return: bb22, unwind: bb39];
    }

    bb22: {
        _50 = &(_37.2: std::vec::Vec<u8>);
        _49 = Vec::<u8>::is_empty(move _50) -> [return: bb23, unwind: bb39];
    }

    bb23: {
        _48 = Not(move _49);
        switchInt(move _48) -> [0: bb29, otherwise: bb24];
    }

    bb24: {
        _55 = [const "Non-empty stderr: "];
        _54 = &_55;
        _53 = _54 as &[&str] (Pointer(Unsize));
        _64 = &(_37.2: std::vec::Vec<u8>);
        _63 = <Vec<u8> as Deref>::deref(_64) -> [return: bb25, unwind: bb39];
    }

    bb25: {
        _62 = _63;
        _61 = String::from_utf8_lossy(move _62) -> [return: bb26, unwind: bb39];
    }

    bb26: {
        _60 = &_61;
        _59 = core::fmt::rt::Argument::<'_>::new_display::<Cow<'_, str>>(_60) -> [return: bb27, unwind: bb38];
    }

    bb27: {
        _58 = [move _59];
        _57 = &_58;
        _56 = _57 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _52 = Arguments::<'_>::new_v1(move _53, move _56) -> [return: bb28, unwind: bb38];
    }

    bb28: {
        _51 = panic_fmt(move _52) -> bb38;
    }

    bb29: {
        _67 = &(_37.0: std::process::ExitStatus);
        _66 = ExitStatus::success(move _67) -> [return: bb30, unwind: bb39];
    }

    bb30: {
        _65 = Not(move _66);
        switchInt(move _65) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _68 = core::panicking::panic(const "assertion failed: output.status.success()") -> bb39;
    }

    bb32: {
        _70 = &(_37.1: std::vec::Vec<u8>);
        _72 = const b"passed\n";
        _71 = &_72;
        _69 = (move _70, move _71);
        _73 = (_69.0: &std::vec::Vec<u8>);
        _74 = (_69.1: &&[u8; 7]);
        _76 = <Vec<u8> as PartialEq<&[u8; 7]>>::eq(_73, _74) -> [return: bb33, unwind: bb39];
    }

    bb33: {
        _75 = Not(move _76);
        switchInt(move _75) -> [0: bb35, otherwise: bb34];
    }

    bb34: {
        _77 = core::panicking::AssertKind::Eq;
        _79 = Option::<Arguments<'_>>::None;
        _78 = core::panicking::assert_failed::<Vec<u8>, &[u8; 7]>(move _77, _73, _74, move _79) -> bb39;
    }

    bb35: {
        drop(_37) -> [return: bb36, unwind: bb41];
    }

    bb36: {
        drop(_1) -> bb37;
    }

    bb37: {
        return;
    }

    bb38 (cleanup): {
        drop(_61) -> [return: bb39, unwind terminate];
    }

    bb39 (cleanup): {
        drop(_37) -> [return: bb41, unwind terminate];
    }

    bb40 (cleanup): {
        drop(_44) -> [return: bb41, unwind terminate];
    }

    bb41 (cleanup): {
        drop(_1) -> [return: bb42, unwind terminate];
    }

    bb42 (cleanup): {
        resume;
    }
}

alloc1 (size: 7, align: 1) {
    70 61 73 73 65 64 0a                            â”‚ passed.
}
