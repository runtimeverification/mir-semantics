// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: std::env::Args;
    let mut _3: std::option::Option<std::string::String>;
    let mut _4: &mut std::env::Args;
    let mut _5: std::option::Option<std::string::String>;
    let mut _6: &mut std::env::Args;
    let mut _7: isize;
    let mut _9: &str;
    let _10: &str;
    let mut _11: &std::string::String;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: bool;
    let _20: ();
    let mut _21: std::fmt::Arguments<'_>;
    let mut _22: &[&str];
    let _23: &[&str; 1];
    let _24: [&str; 1];
    let mut _26: &mut std::process::Command;
    let mut _27: &mut std::process::Command;
    let mut _28: &mut std::process::Command;
    let mut _29: std::process::Command;
    let mut _30: &std::string::String;
    let _31: !;
    let mut _32: std::fmt::Arguments<'_>;
    let mut _33: &[&str];
    let _34: &[&str; 1];
    let _35: [&str; 1];
    let mut _36: &[core::fmt::rt::Argument<'_>];
    let _37: &[core::fmt::rt::Argument<'_>; 1];
    let _38: [core::fmt::rt::Argument<'_>; 1];
    let mut _39: core::fmt::rt::Argument<'_>;
    let _40: &std::io::Error;
    let _41: std::io::Error;
    let mut _42: &mut std::process::Command;
    let mut _43: std::process::Command;
    let _44: ();
    let mut _45: std::fmt::Arguments<'_>;
    let mut _46: &[&str];
    let _47: &[&str; 1];
    let _48: [&str; 1];
    let _49: std::io::Error;
    let mut _50: &mut std::process::Command;
    let mut _51: &mut std::process::Command;
    let mut _52: &mut std::process::Command;
    let mut _53: std::process::Command;
    let mut _54: &std::string::String;
    let _55: ();
    let mut _56: std::fmt::Arguments<'_>;
    let mut _57: &[&str];
    let _58: &[&str; 1];
    let _59: [&str; 1];
    let _60: std::io::Error;
    let mut _61: &mut std::process::Command;
    let mut _62: &mut std::process::Command;
    let mut _63: &mut std::process::Command;
    let mut _64: std::process::Command;
    let mut _65: &std::string::String;
    let _66: ();
    let mut _67: std::fmt::Arguments<'_>;
    let mut _68: &[&str];
    let _69: &[&str; 1];
    let _70: [&str; 1];
    let _71: ();
    let _72: std::io::Error;
    let mut _73: &mut std::process::Command;
    let mut _74: &mut std::process::Command;
    let mut _75: &mut std::process::Command;
    let mut _76: std::process::Command;
    let mut _77: (&std::string::String, &&str);
    let mut _78: &std::string::String;
    let _79: std::string::String;
    let mut _80: std::result::Result<std::string::String, std::env::VarError>;
    let mut _81: &&str;
    let _82: &str;
    let mut _85: bool;
    let mut _86: bool;
    let _88: !;
    let mut _89: std::option::Option<std::fmt::Arguments<'_>>;
    let _90: ();
    let mut _91: std::fmt::Arguments<'_>;
    let mut _92: &[&str];
    let _93: &[&str; 1];
    let _94: [&str; 1];
    let mut _96: &mut std::process::Command;
    let mut _97: &mut std::process::Command;
    let mut _98: &mut std::process::Command;
    let mut _99: &mut std::process::Command;
    let mut _100: &mut std::process::Command;
    let mut _101: std::process::Command;
    let _102: !;
    let mut _103: std::fmt::Arguments<'_>;
    let mut _104: &[&str];
    let _105: &[&str; 1];
    let _106: [&str; 1];
    let mut _107: &[core::fmt::rt::Argument<'_>];
    let _108: &[core::fmt::rt::Argument<'_>; 1];
    let _109: [core::fmt::rt::Argument<'_>; 1];
    let mut _110: core::fmt::rt::Argument<'_>;
    let _111: &std::io::Error;
    let mut _113: &mut std::process::Command;
    let mut _114: &mut std::process::Command;
    let mut _115: &mut std::process::Command;
    let mut _116: &mut std::process::Command;
    let mut _117: &mut std::process::Command;
    let mut _118: std::process::Command;
    let _119: !;
    let mut _120: std::fmt::Arguments<'_>;
    let mut _121: &[&str];
    let _122: &[&str; 1];
    let _123: [&str; 1];
    let mut _124: &[core::fmt::rt::Argument<'_>];
    let _125: &[core::fmt::rt::Argument<'_>; 1];
    let _126: [core::fmt::rt::Argument<'_>; 1];
    let mut _127: core::fmt::rt::Argument<'_>;
    let _128: &std::io::Error;
    let _129: !;
    let mut _130: std::fmt::Arguments<'_>;
    let mut _131: &[&str];
    let _132: &[&str; 1];
    let _133: [&str; 1];
    let mut _134: &[core::fmt::rt::Argument<'_>];
    let _135: &[core::fmt::rt::Argument<'_>; 1];
    let _136: [core::fmt::rt::Argument<'_>; 1];
    let mut _137: core::fmt::rt::Argument<'_>;
    let _138: &std::string::String;
    let mut _140: std::result::Result<std::process::Output, std::io::Error>;
    let mut _141: &mut std::process::Command;
    let mut _142: &mut std::process::Command;
    let mut _143: &mut std::process::Command;
    let mut _144: std::process::Command;
    let mut _145: &std::string::String;
    let mut _146: bool;
    let mut _147: bool;
    let mut _148: &std::process::ExitStatus;
    let mut _149: !;
    let mut _150: bool;
    let mut _151: bool;
    let mut _152: &std::vec::Vec<u8>;
    let mut _153: !;
    let mut _154: (&std::vec::Vec<u8>, &&[u8; 7]);
    let mut _155: &std::vec::Vec<u8>;
    let mut _156: &&[u8; 7];
    let _157: &[u8; 7];
    let mut _160: bool;
    let mut _161: bool;
    let _163: !;
    let mut _164: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _166: std::result::Result<std::process::Output, std::io::Error>;
    let mut _167: &mut std::process::Command;
    let mut _168: &mut std::process::Command;
    let mut _169: &mut std::process::Command;
    let mut _170: std::process::Command;
    let mut _171: &std::string::String;
    let mut _172: bool;
    let mut _173: bool;
    let mut _174: &std::process::ExitStatus;
    let mut _175: !;
    let mut _176: bool;
    let mut _177: bool;
    let mut _178: &std::vec::Vec<u8>;
    let mut _179: !;
    let mut _180: (&std::vec::Vec<u8>, &&[u8; 7]);
    let mut _181: &std::vec::Vec<u8>;
    let mut _182: &&[u8; 7];
    let _183: &[u8; 7];
    let mut _186: bool;
    let mut _187: bool;
    let _189: !;
    let mut _190: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _192: std::result::Result<std::process::Output, std::io::Error>;
    let mut _193: &mut std::process::Command;
    let mut _194: &mut std::process::Command;
    let mut _195: &mut std::process::Command;
    let mut _196: std::process::Command;
    let mut _197: &std::string::String;
    let mut _198: bool;
    let mut _199: bool;
    let mut _200: &std::process::ExitStatus;
    let mut _201: !;
    let mut _202: bool;
    let mut _203: bool;
    let mut _204: &std::vec::Vec<u8>;
    let mut _205: !;
    let mut _206: (&std::vec::Vec<u8>, &&[u8; 7]);
    let mut _207: &std::vec::Vec<u8>;
    let mut _208: &&[u8; 7];
    let _209: &[u8; 7];
    let mut _212: bool;
    let mut _213: bool;
    let _215: !;
    let mut _216: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _218: std::result::Result<std::process::Output, std::io::Error>;
    let mut _219: &mut std::process::Command;
    let mut _220: &mut std::process::Command;
    let mut _221: &mut std::process::Command;
    let mut _222: std::process::Command;
    let mut _223: &std::string::String;
    let mut _224: bool;
    let mut _225: bool;
    let mut _226: &std::process::ExitStatus;
    let mut _227: !;
    let mut _228: bool;
    let mut _229: bool;
    let mut _230: &std::vec::Vec<u8>;
    let mut _231: !;
    let mut _232: (&std::vec::Vec<u8>, &&[u8; 7]);
    let mut _233: &std::vec::Vec<u8>;
    let mut _234: &&[u8; 7];
    let _235: &[u8; 7];
    let mut _238: bool;
    let mut _239: bool;
    let _241: !;
    let mut _242: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _244: std::result::Result<std::process::Output, std::io::Error>;
    let mut _245: &mut std::process::Command;
    let mut _246: &mut std::process::Command;
    let mut _247: &mut std::process::Command;
    let mut _248: std::process::Command;
    let mut _249: &std::string::String;
    let mut _250: bool;
    let mut _251: bool;
    let mut _252: &std::process::ExitStatus;
    let mut _253: !;
    let mut _254: bool;
    let mut _255: bool;
    let mut _256: &std::vec::Vec<u8>;
    let mut _257: !;
    let mut _258: (&std::vec::Vec<u8>, &&[u8; 7]);
    let mut _259: &std::vec::Vec<u8>;
    let mut _260: &&[u8; 7];
    let _261: &[u8; 7];
    let mut _264: bool;
    let mut _265: bool;
    let _267: !;
    let mut _268: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _269: bool;
    let mut _271: std::result::Result<std::process::Output, std::io::Error>;
    let mut _272: &mut std::process::Command;
    let mut _273: &mut std::process::Command;
    let mut _274: &mut std::process::Command;
    let mut _275: std::process::Command;
    let mut _276: &std::string::String;
    let _277: ();
    let mut _278: std::fmt::Arguments<'_>;
    let mut _279: &[&str];
    let _280: &[&str; 2];
    let _281: [&str; 2];
    let mut _282: &[core::fmt::rt::Argument<'_>];
    let _283: &[core::fmt::rt::Argument<'_>; 1];
    let _284: [core::fmt::rt::Argument<'_>; 1];
    let mut _285: core::fmt::rt::Argument<'_>;
    let _286: &std::process::Output;
    let mut _287: bool;
    let mut _288: bool;
    let mut _289: &std::process::ExitStatus;
    let mut _290: !;
    let mut _291: bool;
    let mut _292: bool;
    let mut _293: &std::vec::Vec<u8>;
    let mut _294: !;
    let mut _295: (&std::vec::Vec<u8>, &&[u8; 7]);
    let mut _296: &std::vec::Vec<u8>;
    let mut _297: &&[u8; 7];
    let _298: &[u8; 7];
    let mut _301: bool;
    let mut _302: bool;
    let _304: !;
    let mut _305: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _307: std::result::Result<std::process::Output, std::io::Error>;
    let mut _308: &mut std::process::Command;
    let mut _309: &mut std::process::Command;
    let mut _310: &mut std::process::Command;
    let mut _311: std::process::Command;
    let mut _312: &std::string::String;
    let _313: ();
    let mut _314: std::fmt::Arguments<'_>;
    let mut _315: &[&str];
    let _316: &[&str; 2];
    let _317: [&str; 2];
    let mut _318: &[core::fmt::rt::Argument<'_>];
    let _319: &[core::fmt::rt::Argument<'_>; 1];
    let _320: [core::fmt::rt::Argument<'_>; 1];
    let mut _321: core::fmt::rt::Argument<'_>;
    let _322: &std::process::Output;
    let mut _323: bool;
    let mut _324: bool;
    let mut _325: &std::process::ExitStatus;
    let mut _326: !;
    let mut _327: bool;
    let mut _328: bool;
    let mut _329: &std::vec::Vec<u8>;
    let mut _330: !;
    let mut _331: (&std::vec::Vec<u8>, &&[u8; 7]);
    let mut _332: &std::vec::Vec<u8>;
    let mut _333: &&[u8; 7];
    let _334: &[u8; 7];
    let mut _337: bool;
    let mut _338: bool;
    let _340: !;
    let mut _341: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug args => _1;
        let _2: std::string::String;
        scope 2 {
            debug me => _2;
            let _139: std::process::Output;
            scope 3 {
                debug arg => _8;
                let _8: std::string::String;
                let _25: std::io::Error;
                let _83: &std::string::String;
                let _84: &&str;
                let _95: std::io::Error;
                let _112: std::io::Error;
                scope 4 {
                    debug err => _25;
                }
                scope 5 {
                    debug left_val => _83;
                    debug right_val => _84;
                    let _87: core::panicking::AssertKind;
                    scope 6 {
                        debug kind => _87;
                    }
                }
                scope 7 {
                    debug err => _95;
                }
                scope 8 {
                    debug err => _112;
                }
            }
            scope 9 {
                debug output => _139;
                let _158: &std::vec::Vec<u8>;
                let _159: &&[u8; 7];
                let _165: std::process::Output;
                scope 10 {
                    debug left_val => _158;
                    debug right_val => _159;
                    let _162: core::panicking::AssertKind;
                    scope 11 {
                        debug kind => _162;
                    }
                }
                scope 12 {
                    debug output => _165;
                    let _184: &std::vec::Vec<u8>;
                    let _185: &&[u8; 7];
                    let _191: std::process::Output;
                    scope 13 {
                        debug left_val => _184;
                        debug right_val => _185;
                        let _188: core::panicking::AssertKind;
                        scope 14 {
                            debug kind => _188;
                        }
                    }
                    scope 15 {
                        debug output => _191;
                        let _210: &std::vec::Vec<u8>;
                        let _211: &&[u8; 7];
                        let _217: std::process::Output;
                        scope 16 {
                            debug left_val => _210;
                            debug right_val => _211;
                            let _214: core::panicking::AssertKind;
                            scope 17 {
                                debug kind => _214;
                            }
                        }
                        scope 18 {
                            debug output => _217;
                            let _236: &std::vec::Vec<u8>;
                            let _237: &&[u8; 7];
                            let _243: std::process::Output;
                            scope 19 {
                                debug left_val => _236;
                                debug right_val => _237;
                                let _240: core::panicking::AssertKind;
                                scope 20 {
                                    debug kind => _240;
                                }
                            }
                            scope 21 {
                                debug output => _243;
                                let _262: &std::vec::Vec<u8>;
                                let _263: &&[u8; 7];
                                let _270: std::process::Output;
                                scope 22 {
                                    debug left_val => _262;
                                    debug right_val => _263;
                                    let _266: core::panicking::AssertKind;
                                    scope 23 {
                                        debug kind => _266;
                                    }
                                }
                                scope 24 {
                                    debug output => _270;
                                    let _299: &std::vec::Vec<u8>;
                                    let _300: &&[u8; 7];
                                    let _306: std::process::Output;
                                    scope 25 {
                                        debug left_val => _299;
                                        debug right_val => _300;
                                        let _303: core::panicking::AssertKind;
                                        scope 26 {
                                            debug kind => _303;
                                        }
                                    }
                                    scope 27 {
                                        debug output => _306;
                                        let _335: &std::vec::Vec<u8>;
                                        let _336: &&[u8; 7];
                                        scope 28 {
                                            debug left_val => _335;
                                            debug right_val => _336;
                                            let _339: core::panicking::AssertKind;
                                            scope 29 {
                                                debug kind => _339;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = args() -> bb1;
    }

    bb1: {
        _4 = &mut _1;
        _3 = <Args as Iterator>::next(move _4) -> [return: bb2, unwind: bb230];
    }

    bb2: {
        _2 = Option::<String>::unwrap(move _3) -> [return: bb3, unwind: bb230];
    }

    bb3: {
        _6 = &mut _1;
        _5 = <Args as Iterator>::next(move _6) -> [return: bb4, unwind: bb229];
    }

    bb4: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [1: bb5, otherwise: bb85];
    }

    bb5: {
        _8 = move ((_5 as Some).0: std::string::String);
        _11 = &_8;
        _10 = <String as Index<RangeFull>>::index(move _11, const RangeFull) -> [return: bb6, unwind: bb228];
    }

    bb6: {
        _9 = _10;
        _12 = <str as PartialEq>::eq(_9, const "test1") -> [return: bb7, unwind: bb228];
    }

    bb7: {
        switchInt(move _12) -> [0: bb8, otherwise: bb23];
    }

    bb8: {
        _13 = <str as PartialEq>::eq(_9, const "exec-test1") -> [return: bb9, unwind: bb228];
    }

    bb9: {
        switchInt(move _13) -> [0: bb10, otherwise: bb25];
    }

    bb10: {
        _14 = <str as PartialEq>::eq(_9, const "exec-test2") -> [return: bb11, unwind: bb228];
    }

    bb11: {
        switchInt(move _14) -> [0: bb12, otherwise: bb32];
    }

    bb12: {
        _15 = <str as PartialEq>::eq(_9, const "exec-test3") -> [return: bb13, unwind: bb228];
    }

    bb13: {
        switchInt(move _15) -> [0: bb14, otherwise: bb38];
    }

    bb14: {
        _16 = <str as PartialEq>::eq(_9, const "exec-test4") -> [return: bb15, unwind: bb228];
    }

    bb15: {
        switchInt(move _16) -> [0: bb16, otherwise: bb45];
    }

    bb16: {
        _17 = <str as PartialEq>::eq(_9, const "exec-test5") -> [return: bb17, unwind: bb228];
    }

    bb17: {
        switchInt(move _17) -> [0: bb18, otherwise: bb52];
    }

    bb18: {
        _18 = <str as PartialEq>::eq(_9, const "exec-test6") -> [return: bb19, unwind: bb228];
    }

    bb19: {
        switchInt(move _18) -> [0: bb20, otherwise: bb66];
    }

    bb20: {
        _19 = <str as PartialEq>::eq(_9, const "exec-test7") -> [return: bb21, unwind: bb228];
    }

    bb21: {
        switchInt(move _19) -> [0: bb22, otherwise: bb74];
    }

    bb22: {
        _133 = [const "unknown argument: "];
        _132 = &_133;
        _131 = _132 as &[&str] (Pointer(Unsize));
        _138 = &_8;
        _137 = core::fmt::rt::Argument::<'_>::new_display::<String>(_138) -> [return: bb82, unwind: bb228];
    }

    bb23: {
        _24 = [const "passed\n"];
        _23 = &_24;
        _22 = _23 as &[&str] (Pointer(Unsize));
        _21 = Arguments::<'_>::new_const(move _22) -> [return: bb24, unwind: bb228];
    }

    bb24: {
        _20 = _print(move _21) -> [return: bb232, unwind: bb228];
    }

    bb25: {
        _30 = &_2;
        _29 = Command::new::<&String>(move _30) -> [return: bb26, unwind: bb228];
    }

    bb26: {
        _28 = &mut _29;
        _27 = Command::arg::<&str>(move _28, const "test1") -> [return: bb27, unwind: bb227];
    }

    bb27: {
        _26 = _27;
        _25 = <Command as std::os::unix::process::CommandExt>::exec(move _26) -> [return: bb28, unwind: bb227];
    }

    bb28: {
        drop(_29) -> [return: bb29, unwind: bb226];
    }

    bb29: {
        _35 = [const "failed to spawn: "];
        _34 = &_35;
        _33 = _34 as &[&str] (Pointer(Unsize));
        _40 = &_25;
        _39 = core::fmt::rt::Argument::<'_>::new_display::<std::io::Error>(_40) -> [return: bb30, unwind: bb226];
    }

    bb30: {
        _38 = [move _39];
        _37 = &_38;
        _36 = _37 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _32 = Arguments::<'_>::new_v1(move _33, move _36) -> [return: bb31, unwind: bb226];
    }

    bb31: {
        _31 = panic_fmt(move _32) -> bb226;
    }

    bb32: {
        _43 = Command::new::<&str>(const "/path/to/nowhere") -> [return: bb33, unwind: bb228];
    }

    bb33: {
        _42 = &mut _43;
        _41 = <Command as std::os::unix::process::CommandExt>::exec(move _42) -> [return: bb34, unwind: bb225];
    }

    bb34: {
        drop(_41) -> [return: bb35, unwind: bb225];
    }

    bb35: {
        drop(_43) -> [return: bb36, unwind: bb228];
    }

    bb36: {
        _48 = [const "passed\n"];
        _47 = &_48;
        _46 = _47 as &[&str] (Pointer(Unsize));
        _45 = Arguments::<'_>::new_const(move _46) -> [return: bb37, unwind: bb228];
    }

    bb37: {
        _44 = _print(move _45) -> [return: bb233, unwind: bb228];
    }

    bb38: {
        _54 = &_2;
        _53 = Command::new::<&String>(move _54) -> [return: bb39, unwind: bb228];
    }

    bb39: {
        _52 = &mut _53;
        _51 = Command::arg::<&str>(move _52, const "bad\0") -> [return: bb40, unwind: bb224];
    }

    bb40: {
        _50 = _51;
        _49 = <Command as std::os::unix::process::CommandExt>::exec(move _50) -> [return: bb41, unwind: bb224];
    }

    bb41: {
        drop(_49) -> [return: bb42, unwind: bb224];
    }

    bb42: {
        drop(_53) -> [return: bb43, unwind: bb228];
    }

    bb43: {
        _59 = [const "passed\n"];
        _58 = &_59;
        _57 = _58 as &[&str] (Pointer(Unsize));
        _56 = Arguments::<'_>::new_const(move _57) -> [return: bb44, unwind: bb228];
    }

    bb44: {
        _55 = _print(move _56) -> [return: bb234, unwind: bb228];
    }

    bb45: {
        _65 = &_2;
        _64 = Command::new::<&String>(move _65) -> [return: bb46, unwind: bb228];
    }

    bb46: {
        _63 = &mut _64;
        _62 = Command::current_dir::<&str>(move _63, const "/path/to/nowhere") -> [return: bb47, unwind: bb223];
    }

    bb47: {
        _61 = _62;
        _60 = <Command as std::os::unix::process::CommandExt>::exec(move _61) -> [return: bb48, unwind: bb223];
    }

    bb48: {
        drop(_60) -> [return: bb49, unwind: bb223];
    }

    bb49: {
        drop(_64) -> [return: bb50, unwind: bb228];
    }

    bb50: {
        _70 = [const "passed\n"];
        _69 = &_70;
        _68 = _69 as &[&str] (Pointer(Unsize));
        _67 = Arguments::<'_>::new_const(move _68) -> [return: bb51, unwind: bb228];
    }

    bb51: {
        _66 = _print(move _67) -> [return: bb235, unwind: bb228];
    }

    bb52: {
        _71 = set_var::<&str, &str>(const "VARIABLE", const "ABC") -> [return: bb53, unwind: bb228];
    }

    bb53: {
        _76 = Command::new::<&str>(const "definitely-not-a-real-binary") -> [return: bb54, unwind: bb228];
    }

    bb54: {
        _75 = &mut _76;
        _74 = Command::env::<&str, &str>(move _75, const "VARIABLE", const "XYZ") -> [return: bb55, unwind: bb222];
    }

    bb55: {
        _73 = _74;
        _72 = <Command as std::os::unix::process::CommandExt>::exec(move _73) -> [return: bb56, unwind: bb222];
    }

    bb56: {
        drop(_72) -> [return: bb57, unwind: bb222];
    }

    bb57: {
        drop(_76) -> [return: bb58, unwind: bb228];
    }

    bb58: {
        _80 = var::<&str>(const "VARIABLE") -> [return: bb59, unwind: bb228];
    }

    bb59: {
        _79 = Result::<String, VarError>::unwrap(move _80) -> [return: bb60, unwind: bb228];
    }

    bb60: {
        _78 = &_79;
        _82 = const "ABC";
        _81 = &_82;
        _77 = (move _78, move _81);
        _83 = (_77.0: &std::string::String);
        _84 = (_77.1: &&str);
        _86 = <String as PartialEq<&str>>::eq(_83, _84) -> [return: bb61, unwind: bb221];
    }

    bb61: {
        _85 = Not(move _86);
        switchInt(move _85) -> [0: bb63, otherwise: bb62];
    }

    bb62: {
        _87 = core::panicking::AssertKind::Eq;
        _89 = Option::<Arguments<'_>>::None;
        _88 = core::panicking::assert_failed::<String, &str>(move _87, _83, _84, move _89) -> bb221;
    }

    bb63: {
        drop(_79) -> [return: bb64, unwind: bb228];
    }

    bb64: {
        _94 = [const "passed\n"];
        _93 = &_94;
        _92 = _93 as &[&str] (Pointer(Unsize));
        _91 = Arguments::<'_>::new_const(move _92) -> [return: bb65, unwind: bb228];
    }

    bb65: {
        _90 = _print(move _91) -> [return: bb236, unwind: bb228];
    }

    bb66: {
        _101 = Command::new::<&str>(const "echo") -> [return: bb67, unwind: bb228];
    }

    bb67: {
        _100 = &mut _101;
        _99 = Command::arg::<&str>(move _100, const "passed") -> [return: bb68, unwind: bb220];
    }

    bb68: {
        _98 = _99;
        _97 = Command::env_clear(move _98) -> [return: bb69, unwind: bb220];
    }

    bb69: {
        _96 = _97;
        _95 = <Command as std::os::unix::process::CommandExt>::exec(move _96) -> [return: bb70, unwind: bb220];
    }

    bb70: {
        drop(_101) -> [return: bb71, unwind: bb219];
    }

    bb71: {
        _106 = [const "failed to spawn: "];
        _105 = &_106;
        _104 = _105 as &[&str] (Pointer(Unsize));
        _111 = &_95;
        _110 = core::fmt::rt::Argument::<'_>::new_display::<std::io::Error>(_111) -> [return: bb72, unwind: bb219];
    }

    bb72: {
        _109 = [move _110];
        _108 = &_109;
        _107 = _108 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _103 = Arguments::<'_>::new_v1(move _104, move _107) -> [return: bb73, unwind: bb219];
    }

    bb73: {
        _102 = panic_fmt(move _103) -> bb219;
    }

    bb74: {
        _118 = Command::new::<&str>(const "echo") -> [return: bb75, unwind: bb228];
    }

    bb75: {
        _117 = &mut _118;
        _116 = Command::arg::<&str>(move _117, const "passed") -> [return: bb76, unwind: bb218];
    }

    bb76: {
        _115 = _116;
        _114 = Command::env_remove::<&str>(move _115, const "PATH") -> [return: bb77, unwind: bb218];
    }

    bb77: {
        _113 = _114;
        _112 = <Command as std::os::unix::process::CommandExt>::exec(move _113) -> [return: bb78, unwind: bb218];
    }

    bb78: {
        drop(_118) -> [return: bb79, unwind: bb217];
    }

    bb79: {
        _123 = [const "failed to spawn: "];
        _122 = &_123;
        _121 = _122 as &[&str] (Pointer(Unsize));
        _128 = &_112;
        _127 = core::fmt::rt::Argument::<'_>::new_display::<std::io::Error>(_128) -> [return: bb80, unwind: bb217];
    }

    bb80: {
        _126 = [move _127];
        _125 = &_126;
        _124 = _125 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _120 = Arguments::<'_>::new_v1(move _121, move _124) -> [return: bb81, unwind: bb217];
    }

    bb81: {
        _119 = panic_fmt(move _120) -> bb217;
    }

    bb82: {
        _136 = [move _137];
        _135 = &_136;
        _134 = _135 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _130 = Arguments::<'_>::new_v1(move _131, move _134) -> [return: bb83, unwind: bb228];
    }

    bb83: {
        _129 = panic_fmt(move _130) -> bb228;
    }

    bb84: {
        drop(_8) -> [return: bb200, unwind: bb229];
    }

    bb85: {
        drop(_5) -> [return: bb86, unwind: bb229];
    }

    bb86: {
        _145 = &_2;
        _144 = Command::new::<&String>(move _145) -> [return: bb87, unwind: bb229];
    }

    bb87: {
        _143 = &mut _144;
        _142 = Command::arg::<&str>(move _143, const "exec-test1") -> [return: bb88, unwind: bb216];
    }

    bb88: {
        _141 = _142;
        _140 = Command::output(move _141) -> [return: bb89, unwind: bb216];
    }

    bb89: {
        _139 = Result::<Output, std::io::Error>::unwrap(move _140) -> [return: bb90, unwind: bb216];
    }

    bb90: {
        drop(_144) -> [return: bb91, unwind: bb215];
    }

    bb91: {
        _148 = &(_139.0: std::process::ExitStatus);
        _147 = ExitStatus::success(move _148) -> [return: bb92, unwind: bb215];
    }

    bb92: {
        _146 = Not(move _147);
        switchInt(move _146) -> [0: bb94, otherwise: bb93];
    }

    bb93: {
        _149 = core::panicking::panic(const "assertion failed: output.status.success()") -> bb215;
    }

    bb94: {
        _152 = &(_139.2: std::vec::Vec<u8>);
        _151 = Vec::<u8>::is_empty(move _152) -> [return: bb95, unwind: bb215];
    }

    bb95: {
        _150 = Not(move _151);
        switchInt(move _150) -> [0: bb97, otherwise: bb96];
    }

    bb96: {
        _153 = core::panicking::panic(const "assertion failed: output.stderr.is_empty()") -> bb215;
    }

    bb97: {
        _155 = &(_139.1: std::vec::Vec<u8>);
        _157 = const b"passed\n";
        _156 = &_157;
        _154 = (move _155, move _156);
        _158 = (_154.0: &std::vec::Vec<u8>);
        _159 = (_154.1: &&[u8; 7]);
        _161 = <Vec<u8> as PartialEq<&[u8; 7]>>::eq(_158, _159) -> [return: bb98, unwind: bb215];
    }

    bb98: {
        _160 = Not(move _161);
        switchInt(move _160) -> [0: bb100, otherwise: bb99];
    }

    bb99: {
        _162 = core::panicking::AssertKind::Eq;
        _164 = Option::<Arguments<'_>>::None;
        _163 = core::panicking::assert_failed::<Vec<u8>, &[u8; 7]>(move _162, _158, _159, move _164) -> bb215;
    }

    bb100: {
        _171 = &_2;
        _170 = Command::new::<&String>(move _171) -> [return: bb101, unwind: bb215];
    }

    bb101: {
        _169 = &mut _170;
        _168 = Command::arg::<&str>(move _169, const "exec-test2") -> [return: bb102, unwind: bb214];
    }

    bb102: {
        _167 = _168;
        _166 = Command::output(move _167) -> [return: bb103, unwind: bb214];
    }

    bb103: {
        _165 = Result::<Output, std::io::Error>::unwrap(move _166) -> [return: bb104, unwind: bb214];
    }

    bb104: {
        drop(_170) -> [return: bb105, unwind: bb213];
    }

    bb105: {
        _174 = &(_165.0: std::process::ExitStatus);
        _173 = ExitStatus::success(move _174) -> [return: bb106, unwind: bb213];
    }

    bb106: {
        _172 = Not(move _173);
        switchInt(move _172) -> [0: bb108, otherwise: bb107];
    }

    bb107: {
        _175 = core::panicking::panic(const "assertion failed: output.status.success()") -> bb213;
    }

    bb108: {
        _178 = &(_165.2: std::vec::Vec<u8>);
        _177 = Vec::<u8>::is_empty(move _178) -> [return: bb109, unwind: bb213];
    }

    bb109: {
        _176 = Not(move _177);
        switchInt(move _176) -> [0: bb111, otherwise: bb110];
    }

    bb110: {
        _179 = core::panicking::panic(const "assertion failed: output.stderr.is_empty()") -> bb213;
    }

    bb111: {
        _181 = &(_165.1: std::vec::Vec<u8>);
        _183 = const b"passed\n";
        _182 = &_183;
        _180 = (move _181, move _182);
        _184 = (_180.0: &std::vec::Vec<u8>);
        _185 = (_180.1: &&[u8; 7]);
        _187 = <Vec<u8> as PartialEq<&[u8; 7]>>::eq(_184, _185) -> [return: bb112, unwind: bb213];
    }

    bb112: {
        _186 = Not(move _187);
        switchInt(move _186) -> [0: bb114, otherwise: bb113];
    }

    bb113: {
        _188 = core::panicking::AssertKind::Eq;
        _190 = Option::<Arguments<'_>>::None;
        _189 = core::panicking::assert_failed::<Vec<u8>, &[u8; 7]>(move _188, _184, _185, move _190) -> bb213;
    }

    bb114: {
        _197 = &_2;
        _196 = Command::new::<&String>(move _197) -> [return: bb115, unwind: bb213];
    }

    bb115: {
        _195 = &mut _196;
        _194 = Command::arg::<&str>(move _195, const "exec-test3") -> [return: bb116, unwind: bb212];
    }

    bb116: {
        _193 = _194;
        _192 = Command::output(move _193) -> [return: bb117, unwind: bb212];
    }

    bb117: {
        _191 = Result::<Output, std::io::Error>::unwrap(move _192) -> [return: bb118, unwind: bb212];
    }

    bb118: {
        drop(_196) -> [return: bb119, unwind: bb211];
    }

    bb119: {
        _200 = &(_191.0: std::process::ExitStatus);
        _199 = ExitStatus::success(move _200) -> [return: bb120, unwind: bb211];
    }

    bb120: {
        _198 = Not(move _199);
        switchInt(move _198) -> [0: bb122, otherwise: bb121];
    }

    bb121: {
        _201 = core::panicking::panic(const "assertion failed: output.status.success()") -> bb211;
    }

    bb122: {
        _204 = &(_191.2: std::vec::Vec<u8>);
        _203 = Vec::<u8>::is_empty(move _204) -> [return: bb123, unwind: bb211];
    }

    bb123: {
        _202 = Not(move _203);
        switchInt(move _202) -> [0: bb125, otherwise: bb124];
    }

    bb124: {
        _205 = core::panicking::panic(const "assertion failed: output.stderr.is_empty()") -> bb211;
    }

    bb125: {
        _207 = &(_191.1: std::vec::Vec<u8>);
        _209 = const b"passed\n";
        _208 = &_209;
        _206 = (move _207, move _208);
        _210 = (_206.0: &std::vec::Vec<u8>);
        _211 = (_206.1: &&[u8; 7]);
        _213 = <Vec<u8> as PartialEq<&[u8; 7]>>::eq(_210, _211) -> [return: bb126, unwind: bb211];
    }

    bb126: {
        _212 = Not(move _213);
        switchInt(move _212) -> [0: bb128, otherwise: bb127];
    }

    bb127: {
        _214 = core::panicking::AssertKind::Eq;
        _216 = Option::<Arguments<'_>>::None;
        _215 = core::panicking::assert_failed::<Vec<u8>, &[u8; 7]>(move _214, _210, _211, move _216) -> bb211;
    }

    bb128: {
        _223 = &_2;
        _222 = Command::new::<&String>(move _223) -> [return: bb129, unwind: bb211];
    }

    bb129: {
        _221 = &mut _222;
        _220 = Command::arg::<&str>(move _221, const "exec-test4") -> [return: bb130, unwind: bb210];
    }

    bb130: {
        _219 = _220;
        _218 = Command::output(move _219) -> [return: bb131, unwind: bb210];
    }

    bb131: {
        _217 = Result::<Output, std::io::Error>::unwrap(move _218) -> [return: bb132, unwind: bb210];
    }

    bb132: {
        drop(_222) -> [return: bb133, unwind: bb209];
    }

    bb133: {
        _226 = &(_217.0: std::process::ExitStatus);
        _225 = ExitStatus::success(move _226) -> [return: bb134, unwind: bb209];
    }

    bb134: {
        _224 = Not(move _225);
        switchInt(move _224) -> [0: bb136, otherwise: bb135];
    }

    bb135: {
        _227 = core::panicking::panic(const "assertion failed: output.status.success()") -> bb209;
    }

    bb136: {
        _230 = &(_217.2: std::vec::Vec<u8>);
        _229 = Vec::<u8>::is_empty(move _230) -> [return: bb137, unwind: bb209];
    }

    bb137: {
        _228 = Not(move _229);
        switchInt(move _228) -> [0: bb139, otherwise: bb138];
    }

    bb138: {
        _231 = core::panicking::panic(const "assertion failed: output.stderr.is_empty()") -> bb209;
    }

    bb139: {
        _233 = &(_217.1: std::vec::Vec<u8>);
        _235 = const b"passed\n";
        _234 = &_235;
        _232 = (move _233, move _234);
        _236 = (_232.0: &std::vec::Vec<u8>);
        _237 = (_232.1: &&[u8; 7]);
        _239 = <Vec<u8> as PartialEq<&[u8; 7]>>::eq(_236, _237) -> [return: bb140, unwind: bb209];
    }

    bb140: {
        _238 = Not(move _239);
        switchInt(move _238) -> [0: bb142, otherwise: bb141];
    }

    bb141: {
        _240 = core::panicking::AssertKind::Eq;
        _242 = Option::<Arguments<'_>>::None;
        _241 = core::panicking::assert_failed::<Vec<u8>, &[u8; 7]>(move _240, _236, _237, move _242) -> bb209;
    }

    bb142: {
        _249 = &_2;
        _248 = Command::new::<&String>(move _249) -> [return: bb143, unwind: bb209];
    }

    bb143: {
        _247 = &mut _248;
        _246 = Command::arg::<&str>(move _247, const "exec-test5") -> [return: bb144, unwind: bb208];
    }

    bb144: {
        _245 = _246;
        _244 = Command::output(move _245) -> [return: bb145, unwind: bb208];
    }

    bb145: {
        _243 = Result::<Output, std::io::Error>::unwrap(move _244) -> [return: bb146, unwind: bb208];
    }

    bb146: {
        drop(_248) -> [return: bb147, unwind: bb207];
    }

    bb147: {
        _252 = &(_243.0: std::process::ExitStatus);
        _251 = ExitStatus::success(move _252) -> [return: bb148, unwind: bb207];
    }

    bb148: {
        _250 = Not(move _251);
        switchInt(move _250) -> [0: bb150, otherwise: bb149];
    }

    bb149: {
        _253 = core::panicking::panic(const "assertion failed: output.status.success()") -> bb207;
    }

    bb150: {
        _256 = &(_243.2: std::vec::Vec<u8>);
        _255 = Vec::<u8>::is_empty(move _256) -> [return: bb151, unwind: bb207];
    }

    bb151: {
        _254 = Not(move _255);
        switchInt(move _254) -> [0: bb153, otherwise: bb152];
    }

    bb152: {
        _257 = core::panicking::panic(const "assertion failed: output.stderr.is_empty()") -> bb207;
    }

    bb153: {
        _259 = &(_243.1: std::vec::Vec<u8>);
        _261 = const b"passed\n";
        _260 = &_261;
        _258 = (move _259, move _260);
        _262 = (_258.0: &std::vec::Vec<u8>);
        _263 = (_258.1: &&[u8; 7]);
        _265 = <Vec<u8> as PartialEq<&[u8; 7]>>::eq(_262, _263) -> [return: bb154, unwind: bb207];
    }

    bb154: {
        _264 = Not(move _265);
        switchInt(move _264) -> [0: bb156, otherwise: bb155];
    }

    bb155: {
        _266 = core::panicking::AssertKind::Eq;
        _268 = Option::<Arguments<'_>>::None;
        _267 = core::panicking::assert_failed::<Vec<u8>, &[u8; 7]>(move _266, _262, _263, move _268) -> bb207;
    }

    bb156: {
        _269 = const true;
        switchInt(move _269) -> [0: bb193, otherwise: bb157];
    }

    bb157: {
        _276 = &_2;
        _275 = Command::new::<&String>(move _276) -> [return: bb158, unwind: bb207];
    }

    bb158: {
        _274 = &mut _275;
        _273 = Command::arg::<&str>(move _274, const "exec-test6") -> [return: bb159, unwind: bb206];
    }

    bb159: {
        _272 = _273;
        _271 = Command::output(move _272) -> [return: bb160, unwind: bb206];
    }

    bb160: {
        _270 = Result::<Output, std::io::Error>::unwrap(move _271) -> [return: bb161, unwind: bb206];
    }

    bb161: {
        drop(_275) -> [return: bb162, unwind: bb205];
    }

    bb162: {
        _281 = [const "", const "\n"];
        _280 = &_281;
        _279 = _280 as &[&str] (Pointer(Unsize));
        _286 = &_270;
        _285 = core::fmt::rt::Argument::<'_>::new_debug::<Output>(_286) -> [return: bb163, unwind: bb205];
    }

    bb163: {
        _284 = [move _285];
        _283 = &_284;
        _282 = _283 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _278 = Arguments::<'_>::new_v1(move _279, move _282) -> [return: bb164, unwind: bb205];
    }

    bb164: {
        _277 = _print(move _278) -> [return: bb165, unwind: bb205];
    }

    bb165: {
        _289 = &(_270.0: std::process::ExitStatus);
        _288 = ExitStatus::success(move _289) -> [return: bb166, unwind: bb205];
    }

    bb166: {
        _287 = Not(move _288);
        switchInt(move _287) -> [0: bb168, otherwise: bb167];
    }

    bb167: {
        _290 = core::panicking::panic(const "assertion failed: output.status.success()") -> bb205;
    }

    bb168: {
        _293 = &(_270.2: std::vec::Vec<u8>);
        _292 = Vec::<u8>::is_empty(move _293) -> [return: bb169, unwind: bb205];
    }

    bb169: {
        _291 = Not(move _292);
        switchInt(move _291) -> [0: bb171, otherwise: bb170];
    }

    bb170: {
        _294 = core::panicking::panic(const "assertion failed: output.stderr.is_empty()") -> bb205;
    }

    bb171: {
        _296 = &(_270.1: std::vec::Vec<u8>);
        _298 = const b"passed\n";
        _297 = &_298;
        _295 = (move _296, move _297);
        _299 = (_295.0: &std::vec::Vec<u8>);
        _300 = (_295.1: &&[u8; 7]);
        _302 = <Vec<u8> as PartialEq<&[u8; 7]>>::eq(_299, _300) -> [return: bb172, unwind: bb205];
    }

    bb172: {
        _301 = Not(move _302);
        switchInt(move _301) -> [0: bb174, otherwise: bb173];
    }

    bb173: {
        _303 = core::panicking::AssertKind::Eq;
        _305 = Option::<Arguments<'_>>::None;
        _304 = core::panicking::assert_failed::<Vec<u8>, &[u8; 7]>(move _303, _299, _300, move _305) -> bb205;
    }

    bb174: {
        _312 = &_2;
        _311 = Command::new::<&String>(move _312) -> [return: bb175, unwind: bb205];
    }

    bb175: {
        _310 = &mut _311;
        _309 = Command::arg::<&str>(move _310, const "exec-test7") -> [return: bb176, unwind: bb204];
    }

    bb176: {
        _308 = _309;
        _307 = Command::output(move _308) -> [return: bb177, unwind: bb204];
    }

    bb177: {
        _306 = Result::<Output, std::io::Error>::unwrap(move _307) -> [return: bb178, unwind: bb204];
    }

    bb178: {
        drop(_311) -> [return: bb179, unwind: bb203];
    }

    bb179: {
        _317 = [const "", const "\n"];
        _316 = &_317;
        _315 = _316 as &[&str] (Pointer(Unsize));
        _322 = &_306;
        _321 = core::fmt::rt::Argument::<'_>::new_debug::<Output>(_322) -> [return: bb180, unwind: bb203];
    }

    bb180: {
        _320 = [move _321];
        _319 = &_320;
        _318 = _319 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _314 = Arguments::<'_>::new_v1(move _315, move _318) -> [return: bb181, unwind: bb203];
    }

    bb181: {
        _313 = _print(move _314) -> [return: bb182, unwind: bb203];
    }

    bb182: {
        _325 = &(_306.0: std::process::ExitStatus);
        _324 = ExitStatus::success(move _325) -> [return: bb183, unwind: bb203];
    }

    bb183: {
        _323 = Not(move _324);
        switchInt(move _323) -> [0: bb185, otherwise: bb184];
    }

    bb184: {
        _326 = core::panicking::panic(const "assertion failed: output.status.success()") -> bb203;
    }

    bb185: {
        _329 = &(_306.2: std::vec::Vec<u8>);
        _328 = Vec::<u8>::is_empty(move _329) -> [return: bb186, unwind: bb203];
    }

    bb186: {
        _327 = Not(move _328);
        switchInt(move _327) -> [0: bb188, otherwise: bb187];
    }

    bb187: {
        _330 = core::panicking::panic(const "assertion failed: output.stderr.is_empty()") -> bb203;
    }

    bb188: {
        _332 = &(_306.1: std::vec::Vec<u8>);
        _334 = const b"passed\n";
        _333 = &_334;
        _331 = (move _332, move _333);
        _335 = (_331.0: &std::vec::Vec<u8>);
        _336 = (_331.1: &&[u8; 7]);
        _338 = <Vec<u8> as PartialEq<&[u8; 7]>>::eq(_335, _336) -> [return: bb189, unwind: bb203];
    }

    bb189: {
        _337 = Not(move _338);
        switchInt(move _337) -> [0: bb191, otherwise: bb190];
    }

    bb190: {
        _339 = core::panicking::AssertKind::Eq;
        _341 = Option::<Arguments<'_>>::None;
        _340 = core::panicking::assert_failed::<Vec<u8>, &[u8; 7]>(move _339, _335, _336, move _341) -> bb203;
    }

    bb191: {
        drop(_306) -> [return: bb192, unwind: bb205];
    }

    bb192: {
        drop(_270) -> [return: bb193, unwind: bb207];
    }

    bb193: {
        drop(_243) -> [return: bb194, unwind: bb209];
    }

    bb194: {
        drop(_217) -> [return: bb195, unwind: bb211];
    }

    bb195: {
        drop(_191) -> [return: bb196, unwind: bb213];
    }

    bb196: {
        drop(_165) -> [return: bb197, unwind: bb215];
    }

    bb197: {
        drop(_139) -> [return: bb198, unwind: bb229];
    }

    bb198: {
        drop(_2) -> [return: bb199, unwind: bb230];
    }

    bb199: {
        drop(_1) -> bb202;
    }

    bb200: {
        drop(_2) -> [return: bb201, unwind: bb230];
    }

    bb201: {
        drop(_1) -> bb202;
    }

    bb202: {
        return;
    }

    bb203 (cleanup): {
        drop(_306) -> [return: bb205, unwind terminate];
    }

    bb204 (cleanup): {
        drop(_311) -> [return: bb205, unwind terminate];
    }

    bb205 (cleanup): {
        drop(_270) -> [return: bb207, unwind terminate];
    }

    bb206 (cleanup): {
        drop(_275) -> [return: bb207, unwind terminate];
    }

    bb207 (cleanup): {
        drop(_243) -> [return: bb209, unwind terminate];
    }

    bb208 (cleanup): {
        drop(_248) -> [return: bb209, unwind terminate];
    }

    bb209 (cleanup): {
        drop(_217) -> [return: bb211, unwind terminate];
    }

    bb210 (cleanup): {
        drop(_222) -> [return: bb211, unwind terminate];
    }

    bb211 (cleanup): {
        drop(_191) -> [return: bb213, unwind terminate];
    }

    bb212 (cleanup): {
        drop(_196) -> [return: bb213, unwind terminate];
    }

    bb213 (cleanup): {
        drop(_165) -> [return: bb215, unwind terminate];
    }

    bb214 (cleanup): {
        drop(_170) -> [return: bb215, unwind terminate];
    }

    bb215 (cleanup): {
        drop(_139) -> [return: bb229, unwind terminate];
    }

    bb216 (cleanup): {
        drop(_144) -> [return: bb229, unwind terminate];
    }

    bb217 (cleanup): {
        drop(_112) -> [return: bb228, unwind terminate];
    }

    bb218 (cleanup): {
        drop(_118) -> [return: bb228, unwind terminate];
    }

    bb219 (cleanup): {
        drop(_95) -> [return: bb228, unwind terminate];
    }

    bb220 (cleanup): {
        drop(_101) -> [return: bb228, unwind terminate];
    }

    bb221 (cleanup): {
        drop(_79) -> [return: bb228, unwind terminate];
    }

    bb222 (cleanup): {
        drop(_76) -> [return: bb228, unwind terminate];
    }

    bb223 (cleanup): {
        drop(_64) -> [return: bb228, unwind terminate];
    }

    bb224 (cleanup): {
        drop(_53) -> [return: bb228, unwind terminate];
    }

    bb225 (cleanup): {
        drop(_43) -> [return: bb228, unwind terminate];
    }

    bb226 (cleanup): {
        drop(_25) -> [return: bb228, unwind terminate];
    }

    bb227 (cleanup): {
        drop(_29) -> [return: bb228, unwind terminate];
    }

    bb228 (cleanup): {
        drop(_8) -> [return: bb229, unwind terminate];
    }

    bb229 (cleanup): {
        drop(_2) -> [return: bb230, unwind terminate];
    }

    bb230 (cleanup): {
        drop(_1) -> [return: bb231, unwind terminate];
    }

    bb231 (cleanup): {
        resume;
    }

    bb232: {
        goto -> bb84;
    }

    bb233: {
        goto -> bb84;
    }

    bb234: {
        goto -> bb84;
    }

    bb235: {
        goto -> bb84;
    }

    bb236: {
        goto -> bb84;
    }
}

alloc7 (size: 7, align: 1) {
    70 61 73 73 65 64 0a                            │ passed.
}

alloc6 (size: 7, align: 1) {
    70 61 73 73 65 64 0a                            │ passed.
}

alloc5 (size: 7, align: 1) {
    70 61 73 73 65 64 0a                            │ passed.
}

alloc4 (size: 7, align: 1) {
    70 61 73 73 65 64 0a                            │ passed.
}

alloc3 (size: 7, align: 1) {
    70 61 73 73 65 64 0a                            │ passed.
}

alloc2 (size: 7, align: 1) {
    70 61 73 73 65 64 0a                            │ passed.
}

alloc1 (size: 7, align: 1) {
    70 61 73 73 65 64 0a                            │ passed.
}
