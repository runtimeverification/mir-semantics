// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/statics/issue-17718-static-unsafe-interior.rs:18:1: 18:20>::forbidden(_1: &MyUnsafe<T>) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

static STATIC1: UnsafeEnum<isize> = {
    let mut _0: UnsafeEnum<isize>;

    bb0: {
        _0 = UnsafeEnum::<isize>::VariantSafe;
        return;
    }
}

static STATIC2: MyUnsafePack<isize> = {
    let mut _0: MyUnsafePack<isize>;
    let mut _1: std::cell::UnsafeCell<isize>;

    bb0: {
        StorageLive(_1);
        ConstEvalCounter;
        _1 = UnsafeCell::<isize>::new(const 1_isize) -> bb1;
    }

    bb1: {
        _0 = MyUnsafePack::<isize>(move _1);
        StorageDead(_1);
        return;
    }
}

const CONST: MyUnsafePack<isize> = {
    let mut _0: MyUnsafePack<isize>;
    let mut _1: std::cell::UnsafeCell<isize>;

    bb0: {
        StorageLive(_1);
        ConstEvalCounter;
        _1 = UnsafeCell::<isize>::new(const 1_isize) -> bb1;
    }

    bb1: {
        _0 = MyUnsafePack::<isize>(move _1);
        StorageDead(_1);
        return;
    }
}

static STATIC3: MyUnsafe<isize> = {
    let mut _0: MyUnsafe<isize>;

    bb0: {
        _0 = MyUnsafe::<isize> { value: const _ };
        return;
    }
}

static STATIC4: &MyUnsafePack<isize> = {
    let mut _0: &MyUnsafePack<isize>;
    let _1: &MyUnsafePack<isize>;
    let _2: &MyUnsafePack<isize>;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const {alloc1: &MyUnsafePack<isize>};
        _1 = &(*_2);
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

alloc1 (static: STATIC2, size: 8, align: 8) {
    01 00 00 00 00 00 00 00                         │ ........
}

static UNSAFE: MyUnsafePack<isize> = {
    let mut _0: MyUnsafePack<isize>;
    let mut _1: std::cell::UnsafeCell<isize>;

    bb0: {
        StorageLive(_1);
        ConstEvalCounter;
        _1 = UnsafeCell::<isize>::new(const 2_isize) -> bb1;
    }

    bb1: {
        _0 = MyUnsafePack::<isize>(move _1);
        StorageDead(_1);
        return;
    }
}

static WRAPPED_UNSAFE: Wrap<&MyUnsafePack<isize>> = {
    let mut _0: Wrap<&MyUnsafePack<isize>>;
    let mut _1: &MyUnsafePack<isize>;
    let _2: &MyUnsafePack<isize>;
    let _3: &MyUnsafePack<isize>;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = const {alloc2: &MyUnsafePack<isize>};
        _2 = &(*_3);
        _1 = &(*_2);
        _0 = Wrap::<&MyUnsafePack<isize>> { value: move _1 };
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

alloc2 (static: UNSAFE, size: 8, align: 8) {
    02 00 00 00 00 00 00 00                         │ ........
}

fn main() -> () {
    let mut _0: ();
    let _1: &UnsafeEnum<isize>;
    let _2: &MyUnsafe<isize>;
    scope 1 {
        debug a => _1;
    }

    bb0: {
        _1 = const {alloc3: &UnsafeEnum<isize>};
        _2 = const {alloc4: &MyUnsafe<isize>};
        _0 = MyUnsafe::<isize>::forbidden(_2) -> bb1;
    }

    bb1: {
        return;
    }
}

alloc4 (static: STATIC3, size: 8, align: 8) {
    01 00 00 00 00 00 00 00                         │ ........
}

alloc3 (static: STATIC1, size: 16, align: 8) {
    00 00 00 00 00 00 00 00 __ __ __ __ __ __ __ __ │ ........░░░░░░░░
}

fn MyUnsafePack(_1: UnsafeCell<T>) -> MyUnsafePack<T> {
    let mut _0: MyUnsafePack<T>;

    bb0: {
        _0 = MyUnsafePack::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn MyUnsafePack(_1: UnsafeCell<T>) -> MyUnsafePack<T> {
    let mut _0: MyUnsafePack<T>;

    bb0: {
        _0 = MyUnsafePack::<T>(move _1);
        return;
    }
}

fn UnsafeEnum::VariantUnsafe(_1: UnsafeCell<T>) -> UnsafeEnum<T> {
    let mut _0: UnsafeEnum<T>;

    bb0: {
        _0 = UnsafeEnum::<T>::VariantUnsafe(move _1);
        return;
    }
}

// MIR FOR CTFE
fn UnsafeEnum::VariantUnsafe(_1: UnsafeCell<T>) -> UnsafeEnum<T> {
    let mut _0: UnsafeEnum<T>;

    bb0: {
        _0 = UnsafeEnum::<T>::VariantUnsafe(move _1);
        return;
    }
}
