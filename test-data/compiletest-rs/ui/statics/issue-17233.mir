// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const X1: &[u8] = {
    let mut _0: &[u8];
    let mut _1: &[u8; 1];
    let _2: &[u8; 1];
    let _3: [u8; 1];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = [const 49_u8];
        _2 = &_3;
        _1 = &(*_2);
        _0 = move _1 as &[u8] (Pointer(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

const X2: &[u8] = {
    let mut _0: &[u8];
    let mut _1: &[u8; 1];
    let _2: &[u8; 1];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const b"1";
        _1 = &(*_2);
        _0 = move _1 as &[u8] (Pointer(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

alloc1 (size: 1, align: 1) {
    31                                              │ 1
}

const X3: &[u8; 1] = {
    let mut _0: &[u8; 1];
    let _1: &[u8; 1];
    let _2: [u8; 1];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = [const 49_u8];
        _1 = &_2;
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

X3::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

const X4: &[u8; 1] = {
    let mut _0: &[u8; 1];

    bb0: {
        _0 = const b"1";
        return;
    }
}

alloc2 (size: 1, align: 1) {
    31                                              │ 1
}

X4::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

static Y1: u8 = {
    let mut _0: u8;
    let mut _1: &[u8];
    let _2: usize;
    let mut _3: usize;
    let mut _4: bool;

    bb0: {
        StorageLive(_1);
        _1 = const _;
        StorageLive(_2);
        _2 = const 0_usize;
        _3 = Len((*_1));
        _4 = Lt(_2, _3);
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> bb1;
    }

    bb1: {
        _0 = (*_1)[_2];
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

static Y2: u8 = {
    let mut _0: u8;
    let mut _1: &[u8];
    let _2: usize;
    let mut _3: usize;
    let mut _4: bool;

    bb0: {
        StorageLive(_1);
        _1 = const _;
        StorageLive(_2);
        _2 = const 0_usize;
        _3 = Len((*_1));
        _4 = Lt(_2, _3);
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> bb1;
    }

    bb1: {
        _0 = (*_1)[_2];
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

static Y3: u8 = {
    let mut _0: u8;
    let mut _1: &[u8; 1];
    let _2: usize;
    let mut _3: usize;
    let mut _4: bool;

    bb0: {
        StorageLive(_1);
        _1 = const _;
        StorageLive(_2);
        _2 = const 0_usize;
        _3 = Len((*_1));
        _4 = Lt(_2, _3);
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> bb1;
    }

    bb1: {
        _0 = (*_1)[_2];
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

static Y4: u8 = {
    let mut _0: u8;
    let mut _1: &[u8; 1];
    let _2: usize;
    let mut _3: usize;
    let mut _4: bool;

    bb0: {
        StorageLive(_1);
        _1 = const _;
        StorageLive(_2);
        _2 = const 0_usize;
        _3 = Len((*_1));
        _4 = Lt(_2, _3);
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> bb1;
    }

    bb1: {
        _0 = (*_1)[_2];
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&u8, &u8);
    let _2: &u8;
    let _3: &u8;
    let _4: &u8;
    let _5: &u8;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: u8;
    let mut _9: u8;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: (&u8, &u8);
    let _14: &u8;
    let _15: &u8;
    let _16: &u8;
    let _17: &u8;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: u8;
    let mut _21: u8;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: (&u8, &u8);
    let _26: &u8;
    let _27: &u8;
    let _28: &u8;
    let _29: &u8;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: u8;
    let mut _33: u8;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _4;
        debug right_val => _5;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }
    scope 3 {
        debug left_val => _16;
        debug right_val => _17;
        let _22: core::panicking::AssertKind;
        scope 4 {
            debug kind => _22;
        }
    }
    scope 5 {
        debug left_val => _28;
        debug right_val => _29;
        let _34: core::panicking::AssertKind;
        scope 6 {
            debug kind => _34;
        }
    }

    bb0: {
        _2 = const {alloc3: &u8};
        _3 = const {alloc4: &u8};
        _1 = (_2, _3);
        _4 = (_1.0: &u8);
        _5 = (_1.1: &u8);
        _8 = (*_4);
        _9 = (*_5);
        _7 = Eq(move _8, move _9);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<u8, u8>(move _10, _4, _5, move _12);
    }

    bb2: {
        _14 = const {alloc3: &u8};
        _15 = const {alloc5: &u8};
        _13 = (_14, _15);
        _16 = (_13.0: &u8);
        _17 = (_13.1: &u8);
        _20 = (*_16);
        _21 = (*_17);
        _19 = Eq(move _20, move _21);
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<u8, u8>(move _22, _16, _17, move _24);
    }

    bb4: {
        _26 = const {alloc3: &u8};
        _27 = const {alloc6: &u8};
        _25 = (_26, _27);
        _28 = (_25.0: &u8);
        _29 = (_25.1: &u8);
        _32 = (*_28);
        _33 = (*_29);
        _31 = Eq(move _32, move _33);
        _30 = Not(move _31);
        switchInt(move _30) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = core::panicking::assert_failed::<u8, u8>(move _34, _28, _29, move _36);
    }

    bb6: {
        return;
    }
}

alloc6 (static: Y4, size: 1, align: 1) {
    31                                              │ 1
}

alloc5 (static: Y3, size: 1, align: 1) {
    31                                              │ 1
}

alloc4 (static: Y2, size: 1, align: 1) {
    31                                              │ 1
}

alloc3 (static: Y1, size: 1, align: 1) {
    31                                              │ 1
}
