// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f(_1: isize) -> isize {
    debug x => _1;
    let mut _0: isize;

    bb0: {
        _0 = _1;
        return;
    }
}

fn g(_1: isize) -> isize {
    debug x => _1;
    let mut _0: isize;

    bb0: {
        _0 = Mul(const 2_isize, _1);
        return;
    }
}

static F: fn(isize) -> isize = {
    let mut _0: fn(isize) -> isize;

    bb0: {
        _0 = f as fn(isize) -> isize (Pointer(ReifyFnPointer));
        return;
    }
}

static mut G: fn(isize) -> isize = {
    let mut _0: fn(isize) -> isize;

    bb0: {
        _0 = f as fn(isize) -> isize (Pointer(ReifyFnPointer));
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&isize, &isize);
    let mut _2: &isize;
    let _3: isize;
    let mut _4: fn(isize) -> isize;
    let mut _5: &fn(isize) -> isize;
    let mut _6: &isize;
    let _7: isize;
    let _8: &isize;
    let _9: &isize;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: isize;
    let mut _13: isize;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&isize, &isize);
    let mut _18: &isize;
    let _19: isize;
    let mut _20: fn(isize) -> isize;
    let mut _21: *mut fn(isize) -> isize;
    let mut _22: &isize;
    let _23: isize;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: isize;
    let mut _29: isize;
    let _31: !;
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _33: *mut fn(isize) -> isize;
    let mut _34: (&isize, &isize);
    let mut _35: &isize;
    let _36: isize;
    let mut _37: fn(isize) -> isize;
    let mut _38: *mut fn(isize) -> isize;
    let mut _39: &isize;
    let _40: isize;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: isize;
    let mut _46: isize;
    let _48: !;
    let mut _49: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _8;
        debug right_val => _9;
        let _14: core::panicking::AssertKind;
        scope 2 {
            debug kind => _14;
        }
    }
    scope 3 {
        let _24: &isize;
        let _25: &isize;
        let _41: &isize;
        let _42: &isize;
        let mut _50: *const ();
        let mut _51: usize;
        let mut _52: usize;
        let mut _53: usize;
        let mut _54: usize;
        let mut _55: bool;
        let mut _56: *const ();
        let mut _57: usize;
        let mut _58: usize;
        let mut _59: usize;
        let mut _60: usize;
        let mut _61: bool;
        let mut _62: *const ();
        let mut _63: usize;
        let mut _64: usize;
        let mut _65: usize;
        let mut _66: usize;
        let mut _67: bool;
        scope 4 {
            debug left_val => _24;
            debug right_val => _25;
            let _30: core::panicking::AssertKind;
            scope 5 {
                debug kind => _30;
            }
        }
        scope 6 {
            debug left_val => _41;
            debug right_val => _42;
            let _47: core::panicking::AssertKind;
            scope 7 {
                debug kind => _47;
            }
        }
    }

    bb0: {
        _5 = const {alloc1: &fn(isize) -> isize};
        _4 = (*_5);
        _3 = move _4(const 42_isize) -> bb1;
    }

    bb1: {
        _2 = &_3;
        _7 = const 42_isize;
        _6 = &_7;
        _1 = (move _2, move _6);
        _8 = (_1.0: &isize);
        _9 = (_1.1: &isize);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<isize, isize>(move _14, _8, _9, move _16);
    }

    bb3: {
        _21 = const {alloc2: *mut fn(isize) -> isize};
        _62 = _21 as *const () (PtrToPtr);
        _63 = _62 as usize (Transmute);
        _64 = AlignOf(fn(isize) -> isize);
        _65 = Sub(_64, const 1_usize);
        _66 = BitAnd(_63, _65);
        _67 = Eq(_66, const 0_usize);
        assert(_67, "misaligned pointer dereference: address must be a multiple of {} but is {}", _64, _63) -> [success: bb12, unwind unreachable];
    }

    bb4: {
        _18 = &_19;
        _23 = const 42_isize;
        _22 = &_23;
        _17 = (move _18, move _22);
        _24 = (_17.0: &isize);
        _25 = (_17.1: &isize);
        _28 = (*_24);
        _29 = (*_25);
        _27 = Eq(move _28, move _29);
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _30 = core::panicking::AssertKind::Eq;
        _32 = Option::<Arguments<'_>>::None;
        _31 = core::panicking::assert_failed::<isize, isize>(move _30, _24, _25, move _32);
    }

    bb6: {
        _33 = const {alloc2: *mut fn(isize) -> isize};
        _56 = _33 as *const () (PtrToPtr);
        _57 = _56 as usize (Transmute);
        _58 = AlignOf(fn(isize) -> isize);
        _59 = Sub(_58, const 1_usize);
        _60 = BitAnd(_57, _59);
        _61 = Eq(_60, const 0_usize);
        assert(_61, "misaligned pointer dereference: address must be a multiple of {} but is {}", _58, _57) -> [success: bb11, unwind unreachable];
    }

    bb7: {
        _35 = &_36;
        _40 = const 84_isize;
        _39 = &_40;
        _34 = (move _35, move _39);
        _41 = (_34.0: &isize);
        _42 = (_34.1: &isize);
        _45 = (*_41);
        _46 = (*_42);
        _44 = Eq(move _45, move _46);
        _43 = Not(move _44);
        switchInt(move _43) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _47 = core::panicking::AssertKind::Eq;
        _49 = Option::<Arguments<'_>>::None;
        _48 = core::panicking::assert_failed::<isize, isize>(move _47, _41, _42, move _49);
    }

    bb9: {
        return;
    }

    bb10: {
        _37 = (*_38);
        _36 = move _37(const 42_isize) -> bb7;
    }

    bb11: {
        (*_33) = g as fn(isize) -> isize (Pointer(ReifyFnPointer));
        _38 = const {alloc2: *mut fn(isize) -> isize};
        _50 = _38 as *const () (PtrToPtr);
        _51 = _50 as usize (Transmute);
        _52 = AlignOf(fn(isize) -> isize);
        _53 = Sub(_52, const 1_usize);
        _54 = BitAnd(_51, _53);
        _55 = Eq(_54, const 0_usize);
        assert(_55, "misaligned pointer dereference: address must be a multiple of {} but is {}", _52, _51) -> [success: bb10, unwind unreachable];
    }

    bb12: {
        _20 = (*_21);
        _19 = move _20(const 42_isize) -> bb4;
    }
}

alloc2 (static: G, size: 8, align: 8) {
    ╾───────alloc7────────╼                         │ ╾──────╼
}

alloc7 (fn: f)

alloc1 (static: F, size: 8, align: 8) {
    ╾───────alloc7────────╼                         │ ╾──────╼
}
