// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::rc::Rc<[i32; 4]>;
    let mut _2: [i32; 4];
    let mut _3: (&[i32; 4], &[i32; 4]);
    let mut _4: &[i32; 4];
    let _5: &[i32; 4];
    let mut _6: &std::rc::Rc<[i32; 4]>;
    let mut _7: &[i32; 4];
    let _8: [i32; 4];
    let mut _11: bool;
    let mut _12: bool;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _9: &[i32; 4];
        let _10: &[i32; 4];
        scope 2 {
            debug left_val => _9;
            debug right_val => _10;
            let _13: core::panicking::AssertKind;
            scope 3 {
                debug kind => _13;
            }
        }
    }

    bb0: {
        _2 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32];
        _1 = Rc::<[i32; 4]>::new(move _2) -> bb1;
    }

    bb1: {
        _6 = &_1;
        _5 = <Rc<[i32; 4]> as Deref>::deref(move _6) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _4 = _5;
        _8 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32];
        _7 = &_8;
        _3 = (move _4, move _7);
        _9 = (_3.0: &[i32; 4]);
        _10 = (_3.1: &[i32; 4]);
        _12 = <[i32; 4] as PartialEq>::eq(_9, _10) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<[i32; 4], [i32; 4]>(move _13, _9, _10, move _15) -> bb7;
    }

    bb5: {
        drop(_1) -> bb6;
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_1) -> [return: bb8, unwind terminate];
    }

    bb8 (cleanup): {
        resume;
    }
}
