// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/drop/nondrop-cycle.rs:10:1: 10:15>::new() -> C<'_> {
    let mut _0: C<'_>;
    let mut _1: std::cell::Cell<std::option::Option<&C<'_>>>;
    let mut _2: std::option::Option<&C<'_>>;

    bb0: {
        _2 = Option::<&C<'_>>::None;
        _1 = Cell::<Option<&C<'_>>>::new(move _2) -> bb1;
    }

    bb1: {
        _0 = C::<'_> { p: move _1 };
        return;
    }
}

fn f1() -> () {
    let mut _0: ();
    let _1: C<'_>;
    let _2: C<'_>;
    let mut _3: (C<'_>, C<'_>);
    let mut _4: C<'_>;
    let mut _5: C<'_>;
    let _6: ();
    let mut _7: &std::cell::Cell<std::option::Option<&C<'_>>>;
    let mut _8: std::option::Option<&C<'_>>;
    let _9: &C<'_>;
    let _10: ();
    let mut _11: &std::cell::Cell<std::option::Option<&C<'_>>>;
    let mut _12: std::option::Option<&C<'_>>;
    let _13: &C<'_>;
    scope 1 {
        debug c1 => _1;
        debug c2 => _2;
    }

    bb0: {
        _4 = C::<'_>::new() -> bb1;
    }

    bb1: {
        _5 = C::<'_>::new() -> bb2;
    }

    bb2: {
        _3 = (move _4, move _5);
        _1 = move (_3.0: C<'_>);
        _2 = move (_3.1: C<'_>);
        _7 = &(_1.0: std::cell::Cell<std::option::Option<&C<'_>>>);
        _9 = &_2;
        _8 = Option::<&C<'_>>::Some(_9);
        _6 = Cell::<Option<&C<'_>>>::set(move _7, move _8) -> bb3;
    }

    bb3: {
        _11 = &(_2.0: std::cell::Cell<std::option::Option<&C<'_>>>);
        _13 = &_1;
        _12 = Option::<&C<'_>>::Some(_13);
        _10 = Cell::<Option<&C<'_>>>::set(move _11, move _12) -> bb4;
    }

    bb4: {
        return;
    }
}

fn f2() -> () {
    let mut _0: ();
    let _1: C<'_>;
    let _2: C<'_>;
    let mut _3: C<'_>;
    let mut _4: C<'_>;
    let _5: ();
    let mut _6: &std::cell::Cell<std::option::Option<&C<'_>>>;
    let mut _7: std::option::Option<&C<'_>>;
    let _8: &C<'_>;
    let _9: ();
    let mut _10: &std::cell::Cell<std::option::Option<&C<'_>>>;
    let mut _11: std::option::Option<&C<'_>>;
    let _12: &C<'_>;
    scope 1 {
        debug c1 => _1;
        debug c2 => _2;
    }

    bb0: {
        _3 = C::<'_>::new() -> bb1;
    }

    bb1: {
        _1 = move _3;
        _4 = C::<'_>::new() -> bb2;
    }

    bb2: {
        _2 = move _4;
        _6 = &(_1.0: std::cell::Cell<std::option::Option<&C<'_>>>);
        _8 = &_2;
        _7 = Option::<&C<'_>>::Some(_8);
        _5 = Cell::<Option<&C<'_>>>::set(move _6, move _7) -> bb3;
    }

    bb3: {
        _10 = &(_2.0: std::cell::Cell<std::option::Option<&C<'_>>>);
        _12 = &_1;
        _11 = Option::<&C<'_>>::Some(_12);
        _9 = Cell::<Option<&C<'_>>>::set(move _10, move _11) -> bb4;
    }

    bb4: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();

    bb0: {
        _1 = f1() -> bb1;
    }

    bb1: {
        _2 = f2() -> bb2;
    }

    bb2: {
        return;
    }
}
