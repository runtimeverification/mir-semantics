// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static mut value: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

fn <impl at ui/drop/drop-struct-as-object.rs:18:1: 18:19>::get(_1: &Cat) -> usize {
    debug self => _1;
    let mut _0: usize;

    bb0: {
        _0 = ((*_1).0: usize);
        return;
    }
}

fn <impl at ui/drop/drop-struct-as-object.rs:22:1: 22:18>::drop(_1: &mut Cat) -> () {
    debug self => _1;
    let mut _0: ();
    let mut _2: usize;
    let mut _3: *mut usize;
    scope 1 {
        let mut _4: *const ();
        let mut _5: usize;
        let mut _6: usize;
        let mut _7: usize;
        let mut _8: usize;
        let mut _9: bool;
    }

    bb0: {
        _2 = ((*_1).0: usize);
        _3 = const {alloc1: *mut usize};
        _4 = _3 as *const () (PtrToPtr);
        _5 = _4 as usize (Transmute);
        _6 = AlignOf(usize);
        _7 = Sub(_6, const 1_usize);
        _8 = BitAnd(_5, _7);
        _9 = Eq(_8, const 0_usize);
        assert(_9, "misaligned pointer dereference: address must be a multiple of {} but is {}", _6, _5) -> [success: bb1, unwind unreachable];
    }

    bb1: {
        (*_3) = move _2;
        return;
    }
}

alloc1 (static: value, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn main() -> () {
    let mut _0: ();
    let _1: std::boxed::Box<Cat>;
    let mut _2: Cat;
    let mut _4: std::boxed::Box<dyn Dummy>;
    let mut _5: std::boxed::Box<Cat>;
    let mut _6: (&usize, &usize);
    let mut _7: &usize;
    let _8: *mut usize;
    let mut _9: &usize;
    let _10: usize;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: usize;
    let mut _16: usize;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _3: std::boxed::Box<dyn Dummy>;
        scope 2 {
            debug nyan => _3;
        }
    }
    scope 3 {
        let _11: &usize;
        let _12: &usize;
        let mut _20: *const ();
        let mut _21: usize;
        let mut _22: usize;
        let mut _23: usize;
        let mut _24: usize;
        let mut _25: bool;
        scope 4 {
            debug left_val => _11;
            debug right_val => _12;
            let _17: core::panicking::AssertKind;
            scope 5 {
                debug kind => _17;
            }
        }
    }

    bb0: {
        _2 = Cat { name: const 22_usize };
        _1 = Box::<Cat>::new(move _2) -> bb1;
    }

    bb1: {
        _5 = move _1;
        _4 = move _5 as std::boxed::Box<dyn Dummy> (Pointer(Unsize));
        _3 = move _4;
        drop(_3) -> bb2;
    }

    bb2: {
        _8 = const {alloc1: *mut usize};
        _20 = _8 as *const () (PtrToPtr);
        _21 = _20 as usize (Transmute);
        _22 = AlignOf(usize);
        _23 = Sub(_22, const 1_usize);
        _24 = BitAnd(_21, _23);
        _25 = Eq(_24, const 0_usize);
        assert(_25, "misaligned pointer dereference: address must be a multiple of {} but is {}", _22, _21) -> [success: bb5, unwind unreachable];
    }

    bb3: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<usize, usize>(move _17, _11, _12, move _19);
    }

    bb4: {
        return;
    }

    bb5: {
        _7 = &(*_8);
        _10 = const 22_usize;
        _9 = &_10;
        _6 = (move _7, move _9);
        _11 = (_6.0: &usize);
        _12 = (_6.1: &usize);
        _15 = (*_11);
        _16 = (*_12);
        _14 = Eq(move _15, move _16);
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb4, otherwise: bb3];
    }
}

alloc1 (static: value, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}
