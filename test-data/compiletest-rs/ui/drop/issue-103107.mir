// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/drop/issue-103107.rs:6:1: 6:26>::drop(_1: &mut Foo<'_>) -> () {
    debug self => _1;
    let mut _0: ();
    let mut _2: &mut u32;

    bb0: {
        _2 = deref_copy ((*_1).0: &mut u32);
        (*_2) = const 0_u32;
        return;
    }
}

fn and() -> () {
    let mut _0: ();
    let mut _1: u32;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: u32;
    let mut _5: Foo<'_>;
    let mut _6: &mut u32;
    let mut _7: bool;
    let mut _8: u32;
    let mut _9: Foo<'_>;
    let mut _10: &mut u32;
    let _11: ();
    let mut _12: std::fmt::Arguments<'_>;
    let mut _13: &[&str];
    let _14: &[&str; 2];
    let _15: [&str; 2];
    let mut _16: &[core::fmt::rt::Argument<'_>];
    let _17: &[core::fmt::rt::Argument<'_>; 1];
    let _18: [core::fmt::rt::Argument<'_>; 1];
    let mut _19: core::fmt::rt::Argument<'_>;
    let _20: &u32;
    let mut _21: &mut u32;
    let mut _22: &mut u32;
    scope 1 {
        debug foo => _1;
    }

    bb0: {
        _1 = const 0_u32;
        _6 = &mut _1;
        _5 = Foo::<'_>(_6);
        _21 = deref_copy (_5.0: &mut u32);
        _4 = (*_21);
        _3 = Eq(move _4, const 0_u32);
        drop(_5) -> bb3;
    }

    bb1: {
        _1 = const 0_u32;
        goto -> bb2;
    }

    bb2: {
        _10 = &mut _1;
        _9 = Foo::<'_>(_10);
        _22 = deref_copy (_9.0: &mut u32);
        _8 = (*_22);
        _7 = Eq(move _8, const 0_u32);
        drop(_9) -> bb6;
    }

    bb3: {
        _2 = move _3;
        switchInt(move _2) -> [0: bb2, otherwise: bb1];
    }

    bb4: {
        _1 = const 0_u32;
        goto -> bb5;
    }

    bb5: {
        _15 = [const "", const "\n"];
        _14 = &_15;
        _13 = _14 as &[&str] (Pointer(Unsize));
        _20 = &_1;
        _19 = core::fmt::rt::Argument::<'_>::new_display::<u32>(_20) -> bb7;
    }

    bb6: {
        switchInt(move _7) -> [0: bb5, otherwise: bb4];
    }

    bb7: {
        _18 = [move _19];
        _17 = &_18;
        _16 = _17 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _12 = Arguments::<'_>::new_v1(move _13, move _16) -> bb8;
    }

    bb8: {
        _11 = _print(move _12) -> bb9;
    }

    bb9: {
        return;
    }
}

fn or() -> () {
    let mut _0: ();
    let mut _1: u32;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: u32;
    let mut _5: Foo<'_>;
    let mut _6: &mut u32;
    let mut _7: bool;
    let mut _8: u32;
    let mut _9: Foo<'_>;
    let mut _10: &mut u32;
    let _11: ();
    let mut _12: std::fmt::Arguments<'_>;
    let mut _13: &[&str];
    let _14: &[&str; 2];
    let _15: [&str; 2];
    let mut _16: &[core::fmt::rt::Argument<'_>];
    let _17: &[core::fmt::rt::Argument<'_>; 1];
    let _18: [core::fmt::rt::Argument<'_>; 1];
    let mut _19: core::fmt::rt::Argument<'_>;
    let _20: &u32;
    let mut _21: &mut u32;
    let mut _22: &mut u32;
    scope 1 {
        debug foo => _1;
    }

    bb0: {
        _1 = const 0_u32;
        _6 = &mut _1;
        _5 = Foo::<'_>(_6);
        _21 = deref_copy (_5.0: &mut u32);
        _4 = (*_21);
        _3 = Eq(move _4, const 1_u32);
        drop(_5) -> bb3;
    }

    bb1: {
        _1 = const 0_u32;
        goto -> bb2;
    }

    bb2: {
        _10 = &mut _1;
        _9 = Foo::<'_>(_10);
        _22 = deref_copy (_9.0: &mut u32);
        _8 = (*_22);
        _7 = Eq(move _8, const 1_u32);
        drop(_9) -> bb6;
    }

    bb3: {
        _2 = move _3;
        switchInt(move _2) -> [0: bb1, otherwise: bb2];
    }

    bb4: {
        _1 = const 0_u32;
        goto -> bb5;
    }

    bb5: {
        _15 = [const "", const "\n"];
        _14 = &_15;
        _13 = _14 as &[&str] (Pointer(Unsize));
        _20 = &_1;
        _19 = core::fmt::rt::Argument::<'_>::new_display::<u32>(_20) -> bb7;
    }

    bb6: {
        switchInt(move _7) -> [0: bb4, otherwise: bb5];
    }

    bb7: {
        _18 = [move _19];
        _17 = &_18;
        _16 = _17 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _12 = Arguments::<'_>::new_v1(move _13, move _16) -> bb8;
    }

    bb8: {
        _11 = _print(move _12) -> bb9;
    }

    bb9: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();

    bb0: {
        _1 = and() -> bb1;
    }

    bb1: {
        _2 = or() -> bb2;
    }

    bb2: {
        return;
    }
}

fn Foo(_1: &mut u32) -> Foo<'_> {
    let mut _0: Foo<'_>;

    bb0: {
        _0 = Foo::<'_>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: &mut u32) -> Foo<'_> {
    let mut _0: Foo<'_>;

    bb0: {
        _0 = Foo::<'_>(move _1);
        return;
    }
}
