// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/drop/drop-trait-enum.rs:11:10: 11:19>::eq(_1: &Message, _2: &Message) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _0 = Eq(_3, _4);
        return;
    }
}

fn <impl at ui/drop/drop-trait-enum.rs:11:21: 11:26>::fmt(_1: &Message, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: &str;
    let mut _4: isize;
    let _5: &str;
    let _6: &str;

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _6 = const "DestructorRan";
        _3 = _6;
        goto -> bb4;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = const "Dropped";
        _3 = _5;
        goto -> bb4;
    }

    bb4: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> bb5;
    }

    bb5: {
        return;
    }
}

fn <impl at ui/drop/drop-trait-enum.rs:21:1: 21:25>::drop(_1: &mut SendOnDrop) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: std::result::Result<(), std::sync::mpsc::SendError<Message>>;
    let mut _4: &std::sync::mpsc::Sender<Message>;
    let mut _5: Message;

    bb0: {
        _4 = &((*_1).0: std::sync::mpsc::Sender<Message>);
        _5 = Message::Dropped;
        _3 = Sender::<Message>::send(move _4, move _5) -> bb1;
    }

    bb1: {
        _2 = Result::<(), SendError<Message>>::unwrap(move _3) -> bb2;
    }

    bb2: {
        return;
    }
}

fn <impl at ui/drop/drop-trait-enum.rs:33:1: 33:18>::drop(_1: &mut Foo) -> () {
    debug self => _1;
    let mut _0: ();
    let mut _2: isize;
    let _3: &mut std::sync::mpsc::Sender<Message>;
    let _4: ();
    let mut _5: std::result::Result<(), std::sync::mpsc::SendError<Message>>;
    let mut _6: &std::sync::mpsc::Sender<Message>;
    let mut _7: Message;
    let _8: &mut std::sync::mpsc::Sender<Message>;
    let _9: ();
    let mut _10: std::result::Result<(), std::sync::mpsc::SendError<Message>>;
    let mut _11: &std::sync::mpsc::Sender<Message>;
    let mut _12: Message;
    let _13: !;
    scope 1 {
        debug sender => _3;
    }
    scope 2 {
        debug sender => _8;
    }

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb5, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _13 = begin_panic::<&str>(const "Failed");
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _3 = &mut (((*_1) as SimpleVariant).0: std::sync::mpsc::Sender<Message>);
        _6 = &(*_3);
        _7 = Message::DestructorRan;
        _5 = Sender::<Message>::send(move _6, move _7) -> bb4;
    }

    bb4: {
        _4 = Result::<(), SendError<Message>>::unwrap(move _5) -> bb7;
    }

    bb5: {
        _8 = &mut (((*_1) as NestedVariant).2: std::sync::mpsc::Sender<Message>);
        _11 = &(*_8);
        _12 = Message::DestructorRan;
        _10 = Sender::<Message>::send(move _11, move _12) -> bb6;
    }

    bb6: {
        _9 = Result::<(), SendError<Message>>::unwrap(move _10) -> bb7;
    }

    bb7: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::sync::mpsc::Sender<Message>;
    let _2: std::sync::mpsc::Receiver<Message>;
    let mut _3: (std::sync::mpsc::Sender<Message>, std::sync::mpsc::Receiver<Message>);
    let mut _5: std::sync::mpsc::Sender<Message>;
    let mut _6: (&Message, &Message);
    let mut _7: &Message;
    let _8: Message;
    let mut _9: std::result::Result<Message, std::sync::mpsc::RecvError>;
    let mut _10: &std::sync::mpsc::Receiver<Message>;
    let mut _11: &Message;
    let _12: Message;
    let mut _15: bool;
    let mut _16: bool;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _20: (&std::option::Option<Message>, &std::option::Option<Message>);
    let mut _21: &std::option::Option<Message>;
    let _22: std::option::Option<Message>;
    let mut _23: std::result::Result<Message, std::sync::mpsc::RecvError>;
    let mut _24: &std::sync::mpsc::Receiver<Message>;
    let mut _25: &std::option::Option<Message>;
    let _26: std::option::Option<Message>;
    let mut _29: bool;
    let mut _30: bool;
    let _32: !;
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _36: (std::sync::mpsc::Sender<Message>, std::sync::mpsc::Receiver<Message>);
    let mut _38: std::boxed::Box<usize>;
    let mut _39: SendOnDrop;
    let mut _40: std::sync::mpsc::Sender<Message>;
    let mut _41: &std::sync::mpsc::Sender<Message>;
    let mut _42: std::sync::mpsc::Sender<Message>;
    let mut _43: (&Message, &Message);
    let mut _44: &Message;
    let _45: Message;
    let mut _46: std::result::Result<Message, std::sync::mpsc::RecvError>;
    let mut _47: &std::sync::mpsc::Receiver<Message>;
    let mut _48: &Message;
    let _49: Message;
    let mut _52: bool;
    let mut _53: bool;
    let _55: !;
    let mut _56: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _57: (&Message, &Message);
    let mut _58: &Message;
    let _59: Message;
    let mut _60: std::result::Result<Message, std::sync::mpsc::RecvError>;
    let mut _61: &std::sync::mpsc::Receiver<Message>;
    let mut _62: &Message;
    let _63: Message;
    let mut _66: bool;
    let mut _67: bool;
    let _69: !;
    let mut _70: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _71: (&std::option::Option<Message>, &std::option::Option<Message>);
    let mut _72: &std::option::Option<Message>;
    let _73: std::option::Option<Message>;
    let mut _74: std::result::Result<Message, std::sync::mpsc::RecvError>;
    let mut _75: &std::sync::mpsc::Receiver<Message>;
    let mut _76: &std::option::Option<Message>;
    let _77: std::option::Option<Message>;
    let mut _80: bool;
    let mut _81: bool;
    let _83: !;
    let mut _84: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _87: (std::sync::mpsc::Sender<Message>, std::sync::mpsc::Receiver<Message>);
    let mut _89: [closure@ui/drop/drop-trait-enum.rs:66:27: 66:33];
    let mut _90: (&Message, &Message);
    let mut _91: &Message;
    let _92: Message;
    let mut _93: std::result::Result<Message, std::sync::mpsc::RecvError>;
    let mut _94: &std::sync::mpsc::Receiver<Message>;
    let mut _95: &Message;
    let _96: Message;
    let mut _99: bool;
    let mut _100: bool;
    let _102: !;
    let mut _103: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _104: (&std::option::Option<Message>, &std::option::Option<Message>);
    let mut _105: &std::option::Option<Message>;
    let _106: std::option::Option<Message>;
    let mut _107: std::result::Result<Message, std::sync::mpsc::RecvError>;
    let mut _108: &std::sync::mpsc::Receiver<Message>;
    let mut _109: &std::option::Option<Message>;
    let _110: std::option::Option<Message>;
    let mut _113: bool;
    let mut _114: bool;
    let _116: !;
    let mut _117: std::option::Option<std::fmt::Arguments<'_>>;
    let _118: ();
    let mut _119: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _120: std::thread::JoinHandle<()>;
    let mut _123: (std::sync::mpsc::Sender<Message>, std::sync::mpsc::Receiver<Message>);
    let mut _125: [closure@ui/drop/drop-trait-enum.rs:75:23: 75:29];
    let mut _126: (&Message, &Message);
    let mut _127: &Message;
    let _128: Message;
    let mut _129: std::result::Result<Message, std::sync::mpsc::RecvError>;
    let mut _130: &std::sync::mpsc::Receiver<Message>;
    let mut _131: &Message;
    let _132: Message;
    let mut _135: bool;
    let mut _136: bool;
    let _138: !;
    let mut _139: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _140: (&Message, &Message);
    let mut _141: &Message;
    let _142: Message;
    let mut _143: std::result::Result<Message, std::sync::mpsc::RecvError>;
    let mut _144: &std::sync::mpsc::Receiver<Message>;
    let mut _145: &Message;
    let _146: Message;
    let mut _149: bool;
    let mut _150: bool;
    let _152: !;
    let mut _153: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _154: (&Message, &Message);
    let mut _155: &Message;
    let _156: Message;
    let mut _157: std::result::Result<Message, std::sync::mpsc::RecvError>;
    let mut _158: &std::sync::mpsc::Receiver<Message>;
    let mut _159: &Message;
    let _160: Message;
    let mut _163: bool;
    let mut _164: bool;
    let _166: !;
    let mut _167: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _168: (&Message, &Message);
    let mut _169: &Message;
    let _170: Message;
    let mut _171: std::result::Result<Message, std::sync::mpsc::RecvError>;
    let mut _172: &std::sync::mpsc::Receiver<Message>;
    let mut _173: &Message;
    let _174: Message;
    let mut _177: bool;
    let mut _178: bool;
    let _180: !;
    let mut _181: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _182: (&Message, &Message);
    let mut _183: &Message;
    let _184: Message;
    let mut _185: std::result::Result<Message, std::sync::mpsc::RecvError>;
    let mut _186: &std::sync::mpsc::Receiver<Message>;
    let mut _187: &Message;
    let _188: Message;
    let mut _191: bool;
    let mut _192: bool;
    let _194: !;
    let mut _195: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _196: (&Message, &Message);
    let mut _197: &Message;
    let _198: Message;
    let mut _199: std::result::Result<Message, std::sync::mpsc::RecvError>;
    let mut _200: &std::sync::mpsc::Receiver<Message>;
    let mut _201: &Message;
    let _202: Message;
    let mut _205: bool;
    let mut _206: bool;
    let _208: !;
    let mut _209: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _210: (&std::option::Option<Message>, &std::option::Option<Message>);
    let mut _211: &std::option::Option<Message>;
    let _212: std::option::Option<Message>;
    let mut _213: std::result::Result<Message, std::sync::mpsc::RecvError>;
    let mut _214: &std::sync::mpsc::Receiver<Message>;
    let mut _215: &std::option::Option<Message>;
    let _216: std::option::Option<Message>;
    let mut _219: bool;
    let mut _220: bool;
    let _222: !;
    let mut _223: std::option::Option<std::fmt::Arguments<'_>>;
    let _224: ();
    let mut _225: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _226: std::thread::JoinHandle<()>;
    let mut _227: bool;
    let mut _228: bool;
    let mut _229: bool;
    let mut _230: bool;
    let mut _231: bool;
    let mut _232: bool;
    scope 1 {
        debug sender => _1;
        debug receiver => _2;
        let _4: Foo;
        let _13: &Message;
        let _14: &Message;
        let _27: &std::option::Option<Message>;
        let _28: &std::option::Option<Message>;
        let _34: std::sync::mpsc::Sender<Message>;
        let _35: std::sync::mpsc::Receiver<Message>;
        scope 2 {
            debug v => _4;
        }
        scope 3 {
            debug left_val => _13;
            debug right_val => _14;
            let _17: core::panicking::AssertKind;
            scope 4 {
                debug kind => _17;
            }
        }
        scope 5 {
            debug left_val => _27;
            debug right_val => _28;
            let _31: core::panicking::AssertKind;
            scope 6 {
                debug kind => _31;
            }
        }
        scope 7 {
            debug sender => _34;
            debug receiver => _35;
            let _37: Foo;
            let _50: &Message;
            let _51: &Message;
            let _64: &Message;
            let _65: &Message;
            let _78: &std::option::Option<Message>;
            let _79: &std::option::Option<Message>;
            let _85: std::sync::mpsc::Sender<Message>;
            let _86: std::sync::mpsc::Receiver<Message>;
            scope 8 {
                debug v => _37;
            }
            scope 9 {
                debug left_val => _50;
                debug right_val => _51;
                let _54: core::panicking::AssertKind;
                scope 10 {
                    debug kind => _54;
                }
            }
            scope 11 {
                debug left_val => _64;
                debug right_val => _65;
                let _68: core::panicking::AssertKind;
                scope 12 {
                    debug kind => _68;
                }
            }
            scope 13 {
                debug left_val => _78;
                debug right_val => _79;
                let _82: core::panicking::AssertKind;
                scope 14 {
                    debug kind => _82;
                }
            }
            scope 15 {
                debug sender => _85;
                debug receiver => _86;
                let _88: std::thread::JoinHandle<()>;
                scope 16 {
                    debug t => _88;
                    let _97: &Message;
                    let _98: &Message;
                    let _111: &std::option::Option<Message>;
                    let _112: &std::option::Option<Message>;
                    let _121: std::sync::mpsc::Sender<Message>;
                    let _122: std::sync::mpsc::Receiver<Message>;
                    scope 17 {
                        debug left_val => _97;
                        debug right_val => _98;
                        let _101: core::panicking::AssertKind;
                        scope 18 {
                            debug kind => _101;
                        }
                    }
                    scope 19 {
                        debug left_val => _111;
                        debug right_val => _112;
                        let _115: core::panicking::AssertKind;
                        scope 20 {
                            debug kind => _115;
                        }
                    }
                    scope 21 {
                        debug sender => _121;
                        debug receiver => _122;
                        let _124: std::thread::JoinHandle<()>;
                        scope 22 {
                            debug t => _124;
                            let _133: &Message;
                            let _134: &Message;
                            let _147: &Message;
                            let _148: &Message;
                            let _161: &Message;
                            let _162: &Message;
                            let _175: &Message;
                            let _176: &Message;
                            let _189: &Message;
                            let _190: &Message;
                            let _203: &Message;
                            let _204: &Message;
                            let _217: &std::option::Option<Message>;
                            let _218: &std::option::Option<Message>;
                            scope 23 {
                                debug left_val => _133;
                                debug right_val => _134;
                                let _137: core::panicking::AssertKind;
                                scope 24 {
                                    debug kind => _137;
                                }
                            }
                            scope 25 {
                                debug left_val => _147;
                                debug right_val => _148;
                                let _151: core::panicking::AssertKind;
                                scope 26 {
                                    debug kind => _151;
                                }
                            }
                            scope 27 {
                                debug left_val => _161;
                                debug right_val => _162;
                                let _165: core::panicking::AssertKind;
                                scope 28 {
                                    debug kind => _165;
                                }
                            }
                            scope 29 {
                                debug left_val => _175;
                                debug right_val => _176;
                                let _179: core::panicking::AssertKind;
                                scope 30 {
                                    debug kind => _179;
                                }
                            }
                            scope 31 {
                                debug left_val => _189;
                                debug right_val => _190;
                                let _193: core::panicking::AssertKind;
                                scope 32 {
                                    debug kind => _193;
                                }
                            }
                            scope 33 {
                                debug left_val => _203;
                                debug right_val => _204;
                                let _207: core::panicking::AssertKind;
                                scope 34 {
                                    debug kind => _207;
                                }
                            }
                            scope 35 {
                                debug left_val => _217;
                                debug right_val => _218;
                                let _221: core::panicking::AssertKind;
                                scope 36 {
                                    debug kind => _221;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _232 = const false;
        _231 = const false;
        _230 = const false;
        _229 = const false;
        _228 = const false;
        _227 = const false;
        _3 = channel::<Message>() -> bb1;
    }

    bb1: {
        _232 = const true;
        _1 = move (_3.0: std::sync::mpsc::Sender<Message>);
        _2 = move (_3.1: std::sync::mpsc::Receiver<Message>);
        _232 = const false;
        _5 = move _1;
        _4 = Foo::SimpleVariant(move _5);
        drop(_4) -> [return: bb2, unwind: bb93];
    }

    bb2: {
        _10 = &_2;
        _9 = std::sync::mpsc::Receiver::<Message>::recv(move _10) -> [return: bb3, unwind: bb93];
    }

    bb3: {
        _8 = Result::<Message, RecvError>::unwrap(move _9) -> [return: bb4, unwind: bb93];
    }

    bb4: {
        _7 = &_8;
        _12 = Message::DestructorRan;
        _11 = &_12;
        _6 = (move _7, move _11);
        _13 = (_6.0: &Message);
        _14 = (_6.1: &Message);
        _16 = <Message as PartialEq>::eq(_13, _14) -> [return: bb5, unwind: bb93];
    }

    bb5: {
        _15 = Not(move _16);
        switchInt(move _15) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<Message, Message>(move _17, _13, _14, move _19) -> bb93;
    }

    bb7: {
        _24 = &_2;
        _23 = std::sync::mpsc::Receiver::<Message>::recv(move _24) -> [return: bb8, unwind: bb93];
    }

    bb8: {
        _22 = Result::<Message, RecvError>::ok(move _23) -> [return: bb9, unwind: bb93];
    }

    bb9: {
        _21 = &_22;
        _26 = Option::<Message>::None;
        _25 = &_26;
        _20 = (move _21, move _25);
        _27 = (_20.0: &std::option::Option<Message>);
        _28 = (_20.1: &std::option::Option<Message>);
        _30 = <Option<Message> as PartialEq>::eq(_27, _28) -> [return: bb10, unwind: bb93];
    }

    bb10: {
        _29 = Not(move _30);
        switchInt(move _29) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _31 = core::panicking::AssertKind::Eq;
        _33 = Option::<Arguments<'_>>::None;
        _32 = core::panicking::assert_failed::<Option<Message>, Option<Message>>(move _31, _27, _28, move _33) -> bb93;
    }

    bb12: {
        _36 = channel::<Message>() -> [return: bb13, unwind: bb93];
    }

    bb13: {
        _231 = const true;
        _34 = move (_36.0: std::sync::mpsc::Sender<Message>);
        _35 = move (_36.1: std::sync::mpsc::Receiver<Message>);
        _38 = Box::<usize>::new(const 42_usize) -> [return: bb14, unwind: bb92];
    }

    bb14: {
        _41 = &_34;
        _40 = <Sender<Message> as Clone>::clone(move _41) -> [return: bb15, unwind: bb91];
    }

    bb15: {
        _39 = SendOnDrop { sender: move _40 };
        _231 = const false;
        _42 = move _34;
        _37 = Foo::NestedVariant(move _38, move _39, move _42);
        drop(_37) -> [return: bb16, unwind: bb92];
    }

    bb16: {
        _47 = &_35;
        _46 = std::sync::mpsc::Receiver::<Message>::recv(move _47) -> [return: bb17, unwind: bb92];
    }

    bb17: {
        _45 = Result::<Message, RecvError>::unwrap(move _46) -> [return: bb18, unwind: bb92];
    }

    bb18: {
        _44 = &_45;
        _49 = Message::DestructorRan;
        _48 = &_49;
        _43 = (move _44, move _48);
        _50 = (_43.0: &Message);
        _51 = (_43.1: &Message);
        _53 = <Message as PartialEq>::eq(_50, _51) -> [return: bb19, unwind: bb92];
    }

    bb19: {
        _52 = Not(move _53);
        switchInt(move _52) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _54 = core::panicking::AssertKind::Eq;
        _56 = Option::<Arguments<'_>>::None;
        _55 = core::panicking::assert_failed::<Message, Message>(move _54, _50, _51, move _56) -> bb92;
    }

    bb21: {
        _61 = &_35;
        _60 = std::sync::mpsc::Receiver::<Message>::recv(move _61) -> [return: bb22, unwind: bb92];
    }

    bb22: {
        _59 = Result::<Message, RecvError>::unwrap(move _60) -> [return: bb23, unwind: bb92];
    }

    bb23: {
        _58 = &_59;
        _63 = Message::Dropped;
        _62 = &_63;
        _57 = (move _58, move _62);
        _64 = (_57.0: &Message);
        _65 = (_57.1: &Message);
        _67 = <Message as PartialEq>::eq(_64, _65) -> [return: bb24, unwind: bb92];
    }

    bb24: {
        _66 = Not(move _67);
        switchInt(move _66) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _68 = core::panicking::AssertKind::Eq;
        _70 = Option::<Arguments<'_>>::None;
        _69 = core::panicking::assert_failed::<Message, Message>(move _68, _64, _65, move _70) -> bb92;
    }

    bb26: {
        _75 = &_35;
        _74 = std::sync::mpsc::Receiver::<Message>::recv(move _75) -> [return: bb27, unwind: bb92];
    }

    bb27: {
        _73 = Result::<Message, RecvError>::ok(move _74) -> [return: bb28, unwind: bb92];
    }

    bb28: {
        _72 = &_73;
        _77 = Option::<Message>::None;
        _76 = &_77;
        _71 = (move _72, move _76);
        _78 = (_71.0: &std::option::Option<Message>);
        _79 = (_71.1: &std::option::Option<Message>);
        _81 = <Option<Message> as PartialEq>::eq(_78, _79) -> [return: bb29, unwind: bb92];
    }

    bb29: {
        _80 = Not(move _81);
        switchInt(move _80) -> [0: bb31, otherwise: bb30];
    }

    bb30: {
        _82 = core::panicking::AssertKind::Eq;
        _84 = Option::<Arguments<'_>>::None;
        _83 = core::panicking::assert_failed::<Option<Message>, Option<Message>>(move _82, _78, _79, move _84) -> bb92;
    }

    bb31: {
        _87 = channel::<Message>() -> [return: bb32, unwind: bb92];
    }

    bb32: {
        _230 = const true;
        _85 = move (_87.0: std::sync::mpsc::Sender<Message>);
        _86 = move (_87.1: std::sync::mpsc::Receiver<Message>);
        _230 = const false;
        _89 = [closure@ui/drop/drop-trait-enum.rs:66:27: 66:33] { sender: move _85 };
        _88 = spawn::<[closure@ui/drop/drop-trait-enum.rs:66:27: 66:33], ()>(move _89) -> [return: bb33, unwind: bb90];
    }

    bb33: {
        _229 = const true;
        _94 = &_86;
        _93 = std::sync::mpsc::Receiver::<Message>::recv(move _94) -> [return: bb34, unwind: bb100];
    }

    bb34: {
        _92 = Result::<Message, RecvError>::unwrap(move _93) -> [return: bb35, unwind: bb100];
    }

    bb35: {
        _91 = &_92;
        _96 = Message::Dropped;
        _95 = &_96;
        _90 = (move _91, move _95);
        _97 = (_90.0: &Message);
        _98 = (_90.1: &Message);
        _100 = <Message as PartialEq>::eq(_97, _98) -> [return: bb36, unwind: bb100];
    }

    bb36: {
        _99 = Not(move _100);
        switchInt(move _99) -> [0: bb38, otherwise: bb37];
    }

    bb37: {
        _101 = core::panicking::AssertKind::Eq;
        _103 = Option::<Arguments<'_>>::None;
        _102 = core::panicking::assert_failed::<Message, Message>(move _101, _97, _98, move _103) -> bb100;
    }

    bb38: {
        _108 = &_86;
        _107 = std::sync::mpsc::Receiver::<Message>::recv(move _108) -> [return: bb39, unwind: bb100];
    }

    bb39: {
        _106 = Result::<Message, RecvError>::ok(move _107) -> [return: bb40, unwind: bb100];
    }

    bb40: {
        _105 = &_106;
        _110 = Option::<Message>::None;
        _109 = &_110;
        _104 = (move _105, move _109);
        _111 = (_104.0: &std::option::Option<Message>);
        _112 = (_104.1: &std::option::Option<Message>);
        _114 = <Option<Message> as PartialEq>::eq(_111, _112) -> [return: bb41, unwind: bb100];
    }

    bb41: {
        _113 = Not(move _114);
        switchInt(move _113) -> [0: bb43, otherwise: bb42];
    }

    bb42: {
        _115 = core::panicking::AssertKind::Eq;
        _117 = Option::<Arguments<'_>>::None;
        _116 = core::panicking::assert_failed::<Option<Message>, Option<Message>>(move _115, _111, _112, move _117) -> bb100;
    }

    bb43: {
        _229 = const false;
        _120 = move _88;
        _119 = JoinHandle::<()>::join(move _120) -> [return: bb44, unwind: bb100];
    }

    bb44: {
        _118 = std::mem::drop::<Result<(), Box<dyn Any + Send>>>(move _119) -> [return: bb45, unwind: bb100];
    }

    bb45: {
        _123 = channel::<Message>() -> [return: bb46, unwind: bb100];
    }

    bb46: {
        _228 = const true;
        _121 = move (_123.0: std::sync::mpsc::Sender<Message>);
        _122 = move (_123.1: std::sync::mpsc::Receiver<Message>);
        _228 = const false;
        _125 = [closure@ui/drop/drop-trait-enum.rs:75:23: 75:29] { sender: move _121 };
        _124 = spawn::<[closure@ui/drop/drop-trait-enum.rs:75:23: 75:29], ()>(move _125) -> [return: bb47, unwind: bb89];
    }

    bb47: {
        _227 = const true;
        _130 = &_122;
        _129 = std::sync::mpsc::Receiver::<Message>::recv(move _130) -> [return: bb48, unwind: bb96];
    }

    bb48: {
        _128 = Result::<Message, RecvError>::unwrap(move _129) -> [return: bb49, unwind: bb96];
    }

    bb49: {
        _127 = &_128;
        _132 = Message::DestructorRan;
        _131 = &_132;
        _126 = (move _127, move _131);
        _133 = (_126.0: &Message);
        _134 = (_126.1: &Message);
        _136 = <Message as PartialEq>::eq(_133, _134) -> [return: bb50, unwind: bb96];
    }

    bb50: {
        _135 = Not(move _136);
        switchInt(move _135) -> [0: bb52, otherwise: bb51];
    }

    bb51: {
        _137 = core::panicking::AssertKind::Eq;
        _139 = Option::<Arguments<'_>>::None;
        _138 = core::panicking::assert_failed::<Message, Message>(move _137, _133, _134, move _139) -> bb96;
    }

    bb52: {
        _144 = &_122;
        _143 = std::sync::mpsc::Receiver::<Message>::recv(move _144) -> [return: bb53, unwind: bb96];
    }

    bb53: {
        _142 = Result::<Message, RecvError>::unwrap(move _143) -> [return: bb54, unwind: bb96];
    }

    bb54: {
        _141 = &_142;
        _146 = Message::Dropped;
        _145 = &_146;
        _140 = (move _141, move _145);
        _147 = (_140.0: &Message);
        _148 = (_140.1: &Message);
        _150 = <Message as PartialEq>::eq(_147, _148) -> [return: bb55, unwind: bb96];
    }

    bb55: {
        _149 = Not(move _150);
        switchInt(move _149) -> [0: bb57, otherwise: bb56];
    }

    bb56: {
        _151 = core::panicking::AssertKind::Eq;
        _153 = Option::<Arguments<'_>>::None;
        _152 = core::panicking::assert_failed::<Message, Message>(move _151, _147, _148, move _153) -> bb96;
    }

    bb57: {
        _158 = &_122;
        _157 = std::sync::mpsc::Receiver::<Message>::recv(move _158) -> [return: bb58, unwind: bb96];
    }

    bb58: {
        _156 = Result::<Message, RecvError>::unwrap(move _157) -> [return: bb59, unwind: bb96];
    }

    bb59: {
        _155 = &_156;
        _160 = Message::DestructorRan;
        _159 = &_160;
        _154 = (move _155, move _159);
        _161 = (_154.0: &Message);
        _162 = (_154.1: &Message);
        _164 = <Message as PartialEq>::eq(_161, _162) -> [return: bb60, unwind: bb96];
    }

    bb60: {
        _163 = Not(move _164);
        switchInt(move _163) -> [0: bb62, otherwise: bb61];
    }

    bb61: {
        _165 = core::panicking::AssertKind::Eq;
        _167 = Option::<Arguments<'_>>::None;
        _166 = core::panicking::assert_failed::<Message, Message>(move _165, _161, _162, move _167) -> bb96;
    }

    bb62: {
        _172 = &_122;
        _171 = std::sync::mpsc::Receiver::<Message>::recv(move _172) -> [return: bb63, unwind: bb96];
    }

    bb63: {
        _170 = Result::<Message, RecvError>::unwrap(move _171) -> [return: bb64, unwind: bb96];
    }

    bb64: {
        _169 = &_170;
        _174 = Message::Dropped;
        _173 = &_174;
        _168 = (move _169, move _173);
        _175 = (_168.0: &Message);
        _176 = (_168.1: &Message);
        _178 = <Message as PartialEq>::eq(_175, _176) -> [return: bb65, unwind: bb96];
    }

    bb65: {
        _177 = Not(move _178);
        switchInt(move _177) -> [0: bb67, otherwise: bb66];
    }

    bb66: {
        _179 = core::panicking::AssertKind::Eq;
        _181 = Option::<Arguments<'_>>::None;
        _180 = core::panicking::assert_failed::<Message, Message>(move _179, _175, _176, move _181) -> bb96;
    }

    bb67: {
        _186 = &_122;
        _185 = std::sync::mpsc::Receiver::<Message>::recv(move _186) -> [return: bb68, unwind: bb96];
    }

    bb68: {
        _184 = Result::<Message, RecvError>::unwrap(move _185) -> [return: bb69, unwind: bb96];
    }

    bb69: {
        _183 = &_184;
        _188 = Message::DestructorRan;
        _187 = &_188;
        _182 = (move _183, move _187);
        _189 = (_182.0: &Message);
        _190 = (_182.1: &Message);
        _192 = <Message as PartialEq>::eq(_189, _190) -> [return: bb70, unwind: bb96];
    }

    bb70: {
        _191 = Not(move _192);
        switchInt(move _191) -> [0: bb72, otherwise: bb71];
    }

    bb71: {
        _193 = core::panicking::AssertKind::Eq;
        _195 = Option::<Arguments<'_>>::None;
        _194 = core::panicking::assert_failed::<Message, Message>(move _193, _189, _190, move _195) -> bb96;
    }

    bb72: {
        _200 = &_122;
        _199 = std::sync::mpsc::Receiver::<Message>::recv(move _200) -> [return: bb73, unwind: bb96];
    }

    bb73: {
        _198 = Result::<Message, RecvError>::unwrap(move _199) -> [return: bb74, unwind: bb96];
    }

    bb74: {
        _197 = &_198;
        _202 = Message::Dropped;
        _201 = &_202;
        _196 = (move _197, move _201);
        _203 = (_196.0: &Message);
        _204 = (_196.1: &Message);
        _206 = <Message as PartialEq>::eq(_203, _204) -> [return: bb75, unwind: bb96];
    }

    bb75: {
        _205 = Not(move _206);
        switchInt(move _205) -> [0: bb77, otherwise: bb76];
    }

    bb76: {
        _207 = core::panicking::AssertKind::Eq;
        _209 = Option::<Arguments<'_>>::None;
        _208 = core::panicking::assert_failed::<Message, Message>(move _207, _203, _204, move _209) -> bb96;
    }

    bb77: {
        _214 = &_122;
        _213 = std::sync::mpsc::Receiver::<Message>::recv(move _214) -> [return: bb78, unwind: bb96];
    }

    bb78: {
        _212 = Result::<Message, RecvError>::ok(move _213) -> [return: bb79, unwind: bb96];
    }

    bb79: {
        _211 = &_212;
        _216 = Option::<Message>::None;
        _215 = &_216;
        _210 = (move _211, move _215);
        _217 = (_210.0: &std::option::Option<Message>);
        _218 = (_210.1: &std::option::Option<Message>);
        _220 = <Option<Message> as PartialEq>::eq(_217, _218) -> [return: bb80, unwind: bb96];
    }

    bb80: {
        _219 = Not(move _220);
        switchInt(move _219) -> [0: bb82, otherwise: bb81];
    }

    bb81: {
        _221 = core::panicking::AssertKind::Eq;
        _223 = Option::<Arguments<'_>>::None;
        _222 = core::panicking::assert_failed::<Option<Message>, Option<Message>>(move _221, _217, _218, move _223) -> bb96;
    }

    bb82: {
        _227 = const false;
        _226 = move _124;
        _225 = JoinHandle::<()>::join(move _226) -> [return: bb83, unwind: bb96];
    }

    bb83: {
        _224 = std::mem::drop::<Result<(), Box<dyn Any + Send>>>(move _225) -> [return: bb84, unwind: bb96];
    }

    bb84: {
        _227 = const false;
        drop(_122) -> [return: bb85, unwind: bb98];
    }

    bb85: {
        _228 = const false;
        _229 = const false;
        drop(_86) -> [return: bb86, unwind: bb102];
    }

    bb86: {
        _230 = const false;
        drop(_35) -> [return: bb87, unwind: bb104];
    }

    bb87: {
        _231 = const false;
        drop(_2) -> [return: bb88, unwind: bb106];
    }

    bb88: {
        _232 = const false;
        return;
    }

    bb89 (cleanup): {
        drop(_122) -> [return: bb98, unwind terminate];
    }

    bb90 (cleanup): {
        drop(_86) -> [return: bb102, unwind terminate];
    }

    bb91 (cleanup): {
        drop(_38) -> [return: bb92, unwind terminate];
    }

    bb92 (cleanup): {
        drop(_35) -> [return: bb104, unwind terminate];
    }

    bb93 (cleanup): {
        drop(_2) -> [return: bb106, unwind terminate];
    }

    bb94 (cleanup): {
        resume;
    }

    bb95 (cleanup): {
        drop(_124) -> [return: bb89, unwind terminate];
    }

    bb96 (cleanup): {
        switchInt(_227) -> [0: bb89, otherwise: bb95];
    }

    bb97 (cleanup): {
        drop(_121) -> [return: bb100, unwind terminate];
    }

    bb98 (cleanup): {
        switchInt(_228) -> [0: bb100, otherwise: bb97];
    }

    bb99 (cleanup): {
        drop(_88) -> [return: bb90, unwind terminate];
    }

    bb100 (cleanup): {
        switchInt(_229) -> [0: bb90, otherwise: bb99];
    }

    bb101 (cleanup): {
        drop(_85) -> [return: bb92, unwind terminate];
    }

    bb102 (cleanup): {
        switchInt(_230) -> [0: bb92, otherwise: bb101];
    }

    bb103 (cleanup): {
        drop(_34) -> [return: bb93, unwind terminate];
    }

    bb104 (cleanup): {
        switchInt(_231) -> [0: bb93, otherwise: bb103];
    }

    bb105 (cleanup): {
        drop(_1) -> [return: bb94, unwind terminate];
    }

    bb106 (cleanup): {
        switchInt(_232) -> [0: bb94, otherwise: bb105];
    }
}

fn main::{closure#0}(_1: [closure@ui/drop/drop-trait-enum.rs:66:27: 66:33]) -> () {
    debug sender => (_1.0: std::sync::mpsc::Sender<Message>);
    let mut _0: ();
    let _2: Foo;
    let mut _3: SendOnDrop;
    let mut _4: std::sync::mpsc::Sender<Message>;
    scope 1 {
        debug v => _2;
    }

    bb0: {
        _4 = move (_1.0: std::sync::mpsc::Sender<Message>);
        _3 = SendOnDrop { sender: move _4 };
        _2 = Foo::FailingVariant { on_drop: move _3 };
        drop(_2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main::{closure#1}(_1: [closure@ui/drop/drop-trait-enum.rs:75:23: 75:29]) -> () {
    debug sender => (_1.0: std::sync::mpsc::Sender<Message>);
    let mut _0: ();
    let mut _2: Foo;
    let mut _3: std::boxed::Box<usize>;
    let mut _4: SendOnDrop;
    let mut _5: std::sync::mpsc::Sender<Message>;
    let mut _6: &std::sync::mpsc::Sender<Message>;
    let mut _7: std::sync::mpsc::Sender<Message>;
    let mut _8: &std::sync::mpsc::Sender<Message>;
    let mut _9: Foo;
    let mut _10: std::boxed::Box<usize>;
    let mut _11: SendOnDrop;
    let mut _12: std::sync::mpsc::Sender<Message>;
    let mut _13: &std::sync::mpsc::Sender<Message>;
    let mut _14: std::sync::mpsc::Sender<Message>;
    let mut _15: &std::sync::mpsc::Sender<Message>;
    let mut _16: Foo;
    let mut _17: std::sync::mpsc::Sender<Message>;
    let mut _18: &std::sync::mpsc::Sender<Message>;
    let mut _19: Foo;
    let mut _20: SendOnDrop;
    let mut _21: std::sync::mpsc::Sender<Message>;
    let mut _22: bool;
    scope 1 {
        debug v => _2;
    }

    bb0: {
        _22 = const false;
        _22 = const true;
        _3 = Box::<usize>::new(const 42_usize) -> [return: bb1, unwind: bb22];
    }

    bb1: {
        _6 = &(_1.0: std::sync::mpsc::Sender<Message>);
        _5 = <Sender<Message> as Clone>::clone(move _6) -> [return: bb2, unwind: bb19];
    }

    bb2: {
        _4 = SendOnDrop { sender: move _5 };
        _8 = &(_1.0: std::sync::mpsc::Sender<Message>);
        _7 = <Sender<Message> as Clone>::clone(move _8) -> [return: bb3, unwind: bb18];
    }

    bb3: {
        _2 = Foo::NestedVariant(move _3, move _4, move _7);
        _10 = Box::<usize>::new(const 42_usize) -> [return: bb4, unwind: bb17];
    }

    bb4: {
        _13 = &(_1.0: std::sync::mpsc::Sender<Message>);
        _12 = <Sender<Message> as Clone>::clone(move _13) -> [return: bb5, unwind: bb16];
    }

    bb5: {
        _11 = SendOnDrop { sender: move _12 };
        _15 = &(_1.0: std::sync::mpsc::Sender<Message>);
        _14 = <Sender<Message> as Clone>::clone(move _15) -> [return: bb6, unwind: bb15];
    }

    bb6: {
        _9 = Foo::NestedVariant(move _10, move _11, move _14);
        drop(_2) -> [return: bb7, unwind: bb8];
    }

    bb7: {
        _2 = move _9;
        _18 = &(_1.0: std::sync::mpsc::Sender<Message>);
        _17 = <Sender<Message> as Clone>::clone(move _18) -> [return: bb9, unwind: bb17];
    }

    bb8 (cleanup): {
        _2 = move _9;
        goto -> bb17;
    }

    bb9: {
        _16 = Foo::SimpleVariant(move _17);
        drop(_2) -> [return: bb10, unwind: bb11];
    }

    bb10: {
        _2 = move _16;
        _22 = const false;
        _21 = move (_1.0: std::sync::mpsc::Sender<Message>);
        _20 = SendOnDrop { sender: move _21 };
        _19 = Foo::FailingVariant { on_drop: move _20 };
        drop(_2) -> [return: bb12, unwind: bb13];
    }

    bb11 (cleanup): {
        _2 = move _16;
        goto -> bb17;
    }

    bb12: {
        _2 = move _19;
        drop(_2) -> [return: bb14, unwind: bb22];
    }

    bb13 (cleanup): {
        _2 = move _19;
        goto -> bb17;
    }

    bb14: {
        return;
    }

    bb15 (cleanup): {
        drop(_11) -> [return: bb16, unwind terminate];
    }

    bb16 (cleanup): {
        drop(_10) -> [return: bb17, unwind terminate];
    }

    bb17 (cleanup): {
        drop(_2) -> [return: bb22, unwind terminate];
    }

    bb18 (cleanup): {
        drop(_4) -> [return: bb19, unwind terminate];
    }

    bb19 (cleanup): {
        drop(_3) -> [return: bb22, unwind terminate];
    }

    bb20 (cleanup): {
        resume;
    }

    bb21 (cleanup): {
        drop((_1.0: std::sync::mpsc::Sender<Message>)) -> [return: bb20, unwind terminate];
    }

    bb22 (cleanup): {
        switchInt(_22) -> [0: bb20, otherwise: bb21];
    }
}

fn Foo::SimpleVariant(_1: Sender<Message>) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::SimpleVariant(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo::SimpleVariant(_1: Sender<Message>) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::SimpleVariant(move _1);
        return;
    }
}

fn Foo::NestedVariant(_1: Box<usize>, _2: SendOnDrop, _3: Sender<Message>) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::NestedVariant(move _1, move _2, move _3);
        return;
    }
}

// MIR FOR CTFE
fn Foo::NestedVariant(_1: Box<usize>, _2: SendOnDrop, _3: Sender<Message>) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::NestedVariant(move _1, move _2, move _3);
        return;
    }
}
