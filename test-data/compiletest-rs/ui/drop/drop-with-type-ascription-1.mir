// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::string::String;
    let _2: &str;
    let mut _4: std::str::SplitWhitespace<'_>;
    let mut _5: &str;
    let _6: &str;
    let mut _7: &std::string::String;
    let _9: &&str;
    let mut _10: &std::vec::Vec<&str>;
    let mut _11: (&&str, &&str);
    let mut _12: &&str;
    let _13: &str;
    let mut _16: bool;
    let mut _17: bool;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug foo => _1;
        let _3: std::vec::Vec<&str>;
        scope 2 {
            debug foo => _3;
            let _8: &&str;
            scope 3 {
                debug invalid_string => _8;
                let _14: &&str;
                let _15: &&str;
                scope 4 {
                    debug left_val => _14;
                    debug right_val => _15;
                    let _18: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _18;
                    }
                }
            }
        }
    }

    bb0: {
        _2 = const "hello";
        _1 = <str as ToString>::to_string(_2) -> bb1;
    }

    bb1: {
        _7 = &_1;
        _6 = <String as Deref>::deref(move _7) -> [return: bb2, unwind: bb12];
    }

    bb2: {
        _5 = _6;
        _4 = core::str::<impl str>::split_whitespace(move _5) -> [return: bb3, unwind: bb12];
    }

    bb3: {
        _3 = <SplitWhitespace<'_> as Iterator>::collect::<Vec<&str>>(move _4) -> [return: bb4, unwind: bb12];
    }

    bb4: {
        _10 = &_3;
        _9 = <Vec<&str> as Index<usize>>::index(move _10, const 0_usize) -> [return: bb5, unwind: bb11];
    }

    bb5: {
        _8 = _9;
        _13 = const "hello";
        _12 = &_13;
        _11 = (_8, move _12);
        _14 = (_11.0: &&str);
        _15 = (_11.1: &&str);
        _17 = <&str as PartialEq>::eq(_14, _15) -> [return: bb6, unwind: bb11];
    }

    bb6: {
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<&str, &str>(move _18, _14, _15, move _20) -> bb11;
    }

    bb8: {
        drop(_3) -> [return: bb9, unwind: bb12];
    }

    bb9: {
        drop(_1) -> bb10;
    }

    bb10: {
        return;
    }

    bb11 (cleanup): {
        drop(_3) -> [return: bb12, unwind terminate];
    }

    bb12 (cleanup): {
        drop(_1) -> [return: bb13, unwind terminate];
    }

    bb13 (cleanup): {
        resume;
    }
}
