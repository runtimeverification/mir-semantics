// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn hax::dummy(_1: &Self) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn perform_hax(_1: Box<T>) -> Box<dyn hax> {
    debug x => _1;
    let mut _0: std::boxed::Box<dyn hax>;
    let mut _2: std::boxed::Box<std::boxed::Box<T>>;

    bb0: {
        _2 = Box::<Box<T>>::new(move _1) -> bb1;
    }

    bb1: {
        _0 = move _2 as std::boxed::Box<dyn hax> (Pointer(Unsize));
        return;
    }
}

fn deadcode() -> () {
    let mut _0: ();
    let _1: std::boxed::Box<dyn hax>;
    let mut _2: std::boxed::Box<std::string::String>;
    let mut _3: std::string::String;
    let _4: &str;

    bb0: {
        _4 = const "deadcode";
        _3 = <str as ToString>::to_string(_4) -> bb1;
    }

    bb1: {
        _2 = Box::<String>::new(move _3) -> bb2;
    }

    bb2: {
        _1 = perform_hax::<String>(move _2) -> bb3;
    }

    bb3: {
        drop(_1) -> bb4;
    }

    bb4: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: std::boxed::Box<dyn hax>;
    let mut _2: std::boxed::Box<i32>;
    scope 1 {
    }

    bb0: {
        _2 = Box::<i32>::new(const 42_i32) -> bb1;
    }

    bb1: {
        _1 = perform_hax::<i32>(move _2) -> bb2;
    }

    bb2: {
        drop(_1) -> bb3;
    }

    bb3: {
        return;
    }
}
