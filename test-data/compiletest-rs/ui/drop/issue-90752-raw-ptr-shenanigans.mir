// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/drop/issue-90752-raw-ptr-shenanigans.rs:7:1: 7:24>::drop(_1: &mut S<'_>) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: &mut std::vec::Vec<i32>;
    let mut _4: &mut std::vec::Vec<i32>;
    let mut _5: &mut std::cell::RefMut<'_, std::vec::Vec<i32>>;
    let mut _6: std::cell::RefMut<'_, std::vec::Vec<i32>>;
    let mut _7: i32;
    let mut _8: &std::cell::RefCell<std::vec::Vec<i32>>;

    bb0: {
        _8 = deref_copy ((*_1).1: &std::cell::RefCell<std::vec::Vec<i32>>);
        _6 = RefCell::<Vec<i32>>::borrow_mut(_8) -> bb1;
    }

    bb1: {
        _5 = &mut _6;
        _4 = <RefMut<'_, Vec<i32>> as DerefMut>::deref_mut(move _5) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _3 = _4;
        _7 = ((*_1).0: i32);
        _2 = Vec::<i32>::push(move _3, move _7) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        drop(_6) -> bb4;
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_6) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn test(_1: &RefCell<Vec<i32>>) -> () {
    debug drops => _1;
    let mut _0: ();
    let mut _2: std::option::Option<(S<'_>, S<'_>)>;
    let mut _4: &mut std::option::Option<(S<'_>, S<'_>)>;
    let mut _5: isize;
    let mut _6: std::option::Option<(S<'_>, S<'_>)>;
    let mut _7: (S<'_>, S<'_>);
    let mut _8: S<'_>;
    let mut _9: S<'_>;
    let mut _10: isize;
    scope 1 {
        debug foo => _2;
        let _3: *mut std::option::Option<(S<'_>, S<'_>)>;
        scope 2 {
            debug pfoo => _3;
            let _11: S<'_>;
            scope 3 {
                let mut _12: *const ();
                let mut _13: usize;
                let mut _14: usize;
                let mut _15: usize;
                let mut _16: usize;
                let mut _17: bool;
                let mut _18: *const ();
                let mut _19: usize;
                let mut _20: usize;
                let mut _21: usize;
                let mut _22: usize;
                let mut _23: bool;
            }
            scope 4 {
                debug _x => _11;
            }
        }
    }

    bb0: {
        _2 = Option::<(S<'_>, S<'_>)>::None;
        _4 = &mut _2;
        _3 = &raw mut (*_4);
        _5 = discriminant(_2);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        drop(_2) -> bb6;
    }

    bb2: {
        _8 = S::<'_>(const 0_i32, _1);
        _9 = S::<'_>(const 1_i32, _1);
        _7 = (move _8, move _9);
        _6 = Option::<(S<'_>, S<'_>)>::Some(move _7);
        drop((*_3)) -> [return: bb3, unwind: bb4];
    }

    bb3: {
        _18 = _3 as *const () (PtrToPtr);
        _19 = _18 as usize (Transmute);
        _20 = AlignOf(std::option::Option<(S<'_>, S<'_>)>);
        _21 = Sub(_20, const 1_usize);
        _22 = BitAnd(_19, _21);
        _23 = Eq(_22, const 0_usize);
        assert(_23, "misaligned pointer dereference: address must be a multiple of {} but is {}", _20, _19) -> [success: bb8, unwind unreachable];
    }

    bb4 (cleanup): {
        _12 = _3 as *const () (PtrToPtr);
        _13 = _12 as usize (Transmute);
        _14 = AlignOf(std::option::Option<(S<'_>, S<'_>)>);
        _15 = Sub(_14, const 1_usize);
        _16 = BitAnd(_13, _15);
        _17 = Eq(_16, const 0_usize);
        assert(_17, "misaligned pointer dereference: address must be a multiple of {} but is {}", _14, _13) -> [success: bb7, unwind unreachable];
    }

    bb5: {
        _11 = move (((_2 as Some).0: (S<'_>, S<'_>)).0: S<'_>);
        drop(_11) -> bb6;
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        (*_3) = move _6;
        resume;
    }

    bb8: {
        (*_3) = move _6;
        _10 = discriminant(_2);
        switchInt(move _10) -> [1: bb5, otherwise: bb6];
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::cell::RefCell<std::vec::Vec<i32>>;
    let mut _2: std::vec::Vec<i32>;
    let _3: ();
    let _4: &std::cell::RefCell<std::vec::Vec<i32>>;
    let mut _5: (&std::vec::Vec<i32>, &&[i32; 1]);
    let mut _6: &std::vec::Vec<i32>;
    let _7: &std::vec::Vec<i32>;
    let mut _8: &std::cell::Ref<'_, std::vec::Vec<i32>>;
    let _9: std::cell::Ref<'_, std::vec::Vec<i32>>;
    let mut _10: &std::cell::RefCell<std::vec::Vec<i32>>;
    let mut _11: &&[i32; 1];
    let _12: &[i32; 1];
    let _13: [i32; 1];
    let mut _16: bool;
    let mut _17: bool;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug drops => _1;
        let _14: &std::vec::Vec<i32>;
        let _15: &&[i32; 1];
        scope 2 {
            debug left_val => _14;
            debug right_val => _15;
            let _18: core::panicking::AssertKind;
            scope 3 {
                debug kind => _18;
            }
        }
    }

    bb0: {
        _2 = Vec::<i32>::new() -> bb1;
    }

    bb1: {
        _1 = RefCell::<Vec<i32>>::new(move _2) -> bb2;
    }

    bb2: {
        _4 = &_1;
        _3 = test(_4) -> [return: bb3, unwind: bb12];
    }

    bb3: {
        _10 = &_1;
        _9 = RefCell::<Vec<i32>>::borrow(move _10) -> [return: bb4, unwind: bb12];
    }

    bb4: {
        _8 = &_9;
        _7 = <Ref<'_, Vec<i32>> as Deref>::deref(move _8) -> [return: bb5, unwind: bb11];
    }

    bb5: {
        _6 = _7;
        _13 = [const 0_i32];
        _12 = &_13;
        _11 = &_12;
        _5 = (move _6, move _11);
        _14 = (_5.0: &std::vec::Vec<i32>);
        _15 = (_5.1: &&[i32; 1]);
        _17 = <Vec<i32> as PartialEq<&[i32; 1]>>::eq(_14, _15) -> [return: bb6, unwind: bb11];
    }

    bb6: {
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<Vec<i32>, &[i32; 1]>(move _18, _14, _15, move _20) -> bb11;
    }

    bb8: {
        drop(_9) -> [return: bb9, unwind: bb12];
    }

    bb9: {
        drop(_1) -> bb10;
    }

    bb10: {
        return;
    }

    bb11 (cleanup): {
        drop(_9) -> [return: bb12, unwind terminate];
    }

    bb12 (cleanup): {
        drop(_1) -> [return: bb13, unwind terminate];
    }

    bb13 (cleanup): {
        resume;
    }
}

fn S(_1: i32, _2: &RefCell<Vec<i32>>) -> S<'_> {
    let mut _0: S<'_>;

    bb0: {
        _0 = S::<'_>(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn S(_1: i32, _2: &RefCell<Vec<i32>>) -> S<'_> {
    let mut _0: S<'_>;

    bb0: {
        _0 = S::<'_>(move _1, move _2);
        return;
    }
}
