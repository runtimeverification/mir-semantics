// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/drop/issue-21486.rs:9:10: 9:15>::fmt(_1: &Noisy, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&u8;
    let _6: &u8;

    bb0: {
        _3 = const "Noisy";
        _6 = &((*_1).0: u8);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/drop/issue-21486.rs:11:1: 11:20>::drop(_1: &mut Noisy) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: u8;

    bb0: {
        _3 = ((*_1).0: u8);
        _2 = event(move _3) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/drop/issue-21486.rs:19:10: 19:15>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &Noisy;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&Noisy;
    let _10: &Noisy;

    bb0: {
        _3 = const "Foo";
        _4 = const "n0";
        _6 = &((*_1).0: Noisy);
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize));
        _7 = const "n1";
        _10 = &((*_1).1: Noisy);
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/drop/issue-21486.rs:21:1: 21:9>::vals(_1: &Foo) -> (u8, u8) {
    debug self => _1;
    let mut _0: (u8, u8);
    let mut _2: u8;
    let mut _3: u8;

    bb0: {
        _2 = (((*_1).0: Noisy).0: u8);
        _3 = (((*_1).1: Noisy).0: u8);
        _0 = (move _2, move _3);
        return;
    }
}

fn leak_1_ret() -> Foo {
    let mut _0: Foo;
    let _1: Foo;
    let mut _2: Noisy;
    let mut _3: Noisy;
    let mut _4: Noisy;
    let mut _5: Noisy;
    scope 1 {
        debug _old_foo => _1;
    }

    bb0: {
        _2 = Noisy(const 1_u8);
        _3 = Noisy(const 2_u8);
        _1 = Foo { n0: move _2, n1: move _3 };
        _4 = Noisy(const 3_u8);
        _5 = Noisy(const 4_u8);
        _0 = Foo { n0: move _4, n1: move _5 };
        drop(_1) -> bb1;
    }

    bb1: {
        return;
    }
}

fn leak_2_ret() -> Foo {
    let mut _0: Foo;
    let _1: Foo;
    let mut _2: Noisy;
    let mut _3: Noisy;
    let mut _4: Noisy;
    let mut _5: Noisy;
    scope 1 {
        debug _old_foo => _1;
    }

    bb0: {
        _2 = Noisy(const 1_u8);
        _3 = Noisy(const 2_u8);
        _1 = Foo { n0: move _2, n1: move _3 };
        _4 = Noisy(const 3_u8);
        _5 = Noisy(const 4_u8);
        _0 = Foo { n0: move _4, n1: move _5 };
        drop(_1) -> bb1;
    }

    bb1: {
        return;
    }
}

fn leak_3_ret() -> Foo {
    let mut _0: Foo;
    let mut _1: Noisy;
    let mut _2: Noisy;
    scope 1 {
        debug _old_foo => const ZeroSized: [closure@ui/drop/issue-21486.rs:43:20: 43:22];
    }

    bb0: {
        _1 = Noisy(const 3_u8);
        _2 = Noisy(const 4_u8);
        _0 = Foo { n0: move _1, n1: move _2 };
        return;
    }
}

fn leak_3_ret::{closure#0}(_1: &[closure@ui/drop/issue-21486.rs:43:20: 43:22]) -> Foo {
    let mut _0: Foo;
    let mut _2: Noisy;
    let mut _3: Noisy;

    bb0: {
        _2 = Noisy(const 1_u8);
        _3 = Noisy(const 2_u8);
        _0 = Foo { n0: move _2, n1: move _3 };
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: (&(u8, u8), &(u8, u8));
    let mut _3: &(u8, u8);
    let _4: (u8, u8);
    let mut _5: &Foo;
    let _6: Foo;
    let mut _7: &(u8, u8);
    let _8: (u8, u8);
    let _9: &(u8, u8);
    let _10: &(u8, u8);
    let mut _11: bool;
    let mut _12: bool;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&usize, &usize);
    let mut _17: &usize;
    let _18: usize;
    let mut _19: &usize;
    let _20: usize;
    let _21: &usize;
    let _22: &usize;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: usize;
    let mut _26: usize;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    let _30: ();
    let mut _31: (&(u8, u8), &(u8, u8));
    let mut _32: &(u8, u8);
    let _33: (u8, u8);
    let mut _34: &Foo;
    let _35: Foo;
    let mut _36: &(u8, u8);
    let _37: (u8, u8);
    let _38: &(u8, u8);
    let _39: &(u8, u8);
    let mut _40: bool;
    let mut _41: bool;
    let _43: !;
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _45: (&usize, &usize);
    let mut _46: &usize;
    let _47: usize;
    let mut _48: &usize;
    let _49: usize;
    let _50: &usize;
    let _51: &usize;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: usize;
    let mut _55: usize;
    let _57: !;
    let mut _58: std::option::Option<std::fmt::Arguments<'_>>;
    let _59: ();
    let mut _60: (&(u8, u8), &(u8, u8));
    let mut _61: &(u8, u8);
    let _62: (u8, u8);
    let mut _63: &Foo;
    let _64: Foo;
    let mut _65: &(u8, u8);
    let _66: (u8, u8);
    let _67: &(u8, u8);
    let _68: &(u8, u8);
    let mut _69: bool;
    let mut _70: bool;
    let _72: !;
    let mut _73: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _74: (&usize, &usize);
    let mut _75: &usize;
    let _76: usize;
    let mut _77: &usize;
    let _78: usize;
    let _79: &usize;
    let _80: &usize;
    let mut _81: bool;
    let mut _82: bool;
    let mut _83: usize;
    let mut _84: usize;
    let _86: !;
    let mut _87: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _9;
        debug right_val => _10;
        let _13: core::panicking::AssertKind;
        scope 2 {
            debug kind => _13;
        }
    }
    scope 3 {
        debug left_val => _21;
        debug right_val => _22;
        let _27: core::panicking::AssertKind;
        scope 4 {
            debug kind => _27;
        }
    }
    scope 5 {
        debug left_val => _38;
        debug right_val => _39;
        let _42: core::panicking::AssertKind;
        scope 6 {
            debug kind => _42;
        }
    }
    scope 7 {
        debug left_val => _50;
        debug right_val => _51;
        let _56: core::panicking::AssertKind;
        scope 8 {
            debug kind => _56;
        }
    }
    scope 9 {
        debug left_val => _67;
        debug right_val => _68;
        let _71: core::panicking::AssertKind;
        scope 10 {
            debug kind => _71;
        }
    }
    scope 11 {
        debug left_val => _79;
        debug right_val => _80;
        let _85: core::panicking::AssertKind;
        scope 12 {
            debug kind => _85;
        }
    }

    bb0: {
        _1 = reset_log() -> bb1;
    }

    bb1: {
        _6 = leak_1_ret() -> bb2;
    }

    bb2: {
        _5 = &_6;
        _4 = Foo::vals(move _5) -> [return: bb3, unwind: bb33];
    }

    bb3: {
        _3 = &_4;
        _8 = (const 3_u8, const 4_u8);
        _7 = &_8;
        _2 = (move _3, move _7);
        _9 = (_2.0: &(u8, u8));
        _10 = (_2.1: &(u8, u8));
        _12 = <(u8, u8) as PartialEq>::eq(_9, _10) -> [return: bb4, unwind: bb33];
    }

    bb4: {
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<(u8, u8), (u8, u8)>(move _13, _9, _10, move _15) -> bb33;
    }

    bb6: {
        drop(_6) -> bb7;
    }

    bb7: {
        _18 = const 16909060_usize;
        _17 = &_18;
        _20 = event_log() -> bb8;
    }

    bb8: {
        _19 = &_20;
        _16 = (move _17, move _19);
        _21 = (_16.0: &usize);
        _22 = (_16.1: &usize);
        _25 = (*_21);
        _26 = (*_22);
        _24 = Eq(move _25, move _26);
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<usize, usize>(move _27, _21, _22, move _29);
    }

    bb10: {
        _30 = reset_log() -> bb11;
    }

    bb11: {
        _35 = leak_2_ret() -> bb12;
    }

    bb12: {
        _34 = &_35;
        _33 = Foo::vals(move _34) -> [return: bb13, unwind: bb32];
    }

    bb13: {
        _32 = &_33;
        _37 = (const 3_u8, const 4_u8);
        _36 = &_37;
        _31 = (move _32, move _36);
        _38 = (_31.0: &(u8, u8));
        _39 = (_31.1: &(u8, u8));
        _41 = <(u8, u8) as PartialEq>::eq(_38, _39) -> [return: bb14, unwind: bb32];
    }

    bb14: {
        _40 = Not(move _41);
        switchInt(move _40) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _42 = core::panicking::AssertKind::Eq;
        _44 = Option::<Arguments<'_>>::None;
        _43 = core::panicking::assert_failed::<(u8, u8), (u8, u8)>(move _42, _38, _39, move _44) -> bb32;
    }

    bb16: {
        drop(_35) -> bb17;
    }

    bb17: {
        _47 = const 16909060_usize;
        _46 = &_47;
        _49 = event_log() -> bb18;
    }

    bb18: {
        _48 = &_49;
        _45 = (move _46, move _48);
        _50 = (_45.0: &usize);
        _51 = (_45.1: &usize);
        _54 = (*_50);
        _55 = (*_51);
        _53 = Eq(move _54, move _55);
        _52 = Not(move _53);
        switchInt(move _52) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _56 = core::panicking::AssertKind::Eq;
        _58 = Option::<Arguments<'_>>::None;
        _57 = core::panicking::assert_failed::<usize, usize>(move _56, _50, _51, move _58);
    }

    bb20: {
        _59 = reset_log() -> bb21;
    }

    bb21: {
        _64 = leak_3_ret() -> bb22;
    }

    bb22: {
        _63 = &_64;
        _62 = Foo::vals(move _63) -> [return: bb23, unwind: bb31];
    }

    bb23: {
        _61 = &_62;
        _66 = (const 3_u8, const 4_u8);
        _65 = &_66;
        _60 = (move _61, move _65);
        _67 = (_60.0: &(u8, u8));
        _68 = (_60.1: &(u8, u8));
        _70 = <(u8, u8) as PartialEq>::eq(_67, _68) -> [return: bb24, unwind: bb31];
    }

    bb24: {
        _69 = Not(move _70);
        switchInt(move _69) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _71 = core::panicking::AssertKind::Eq;
        _73 = Option::<Arguments<'_>>::None;
        _72 = core::panicking::assert_failed::<(u8, u8), (u8, u8)>(move _71, _67, _68, move _73) -> bb31;
    }

    bb26: {
        drop(_64) -> bb27;
    }

    bb27: {
        _76 = const 772_usize;
        _75 = &_76;
        _78 = event_log() -> bb28;
    }

    bb28: {
        _77 = &_78;
        _74 = (move _75, move _77);
        _79 = (_74.0: &usize);
        _80 = (_74.1: &usize);
        _83 = (*_79);
        _84 = (*_80);
        _82 = Eq(move _83, move _84);
        _81 = Not(move _82);
        switchInt(move _81) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _85 = core::panicking::AssertKind::Eq;
        _87 = Option::<Arguments<'_>>::None;
        _86 = core::panicking::assert_failed::<usize, usize>(move _85, _79, _80, move _87);
    }

    bb30: {
        return;
    }

    bb31 (cleanup): {
        drop(_64) -> [return: bb34, unwind terminate];
    }

    bb32 (cleanup): {
        drop(_35) -> [return: bb34, unwind terminate];
    }

    bb33 (cleanup): {
        drop(_6) -> [return: bb34, unwind terminate];
    }

    bb34 (cleanup): {
        resume;
    }
}

static LOG: AtomicUsize = {
    let mut _0: std::sync::atomic::AtomicUsize;

    bb0: {
        ConstEvalCounter;
        _0 = AtomicUsize::new(const 0_usize) -> bb1;
    }

    bb1: {
        return;
    }
}

fn reset_log() -> () {
    let mut _0: ();
    let _1: ();
    let _2: &std::sync::atomic::AtomicUsize;
    let mut _3: std::sync::atomic::Ordering;

    bb0: {
        _2 = const {alloc1: &AtomicUsize};
        _3 = SeqCst;
        _1 = AtomicUsize::store(_2, const 0_usize, move _3) -> bb1;
    }

    bb1: {
        return;
    }
}

alloc1 (static: LOG, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn event_log() -> usize {
    let mut _0: usize;
    let _1: &std::sync::atomic::AtomicUsize;
    let mut _2: std::sync::atomic::Ordering;

    bb0: {
        _1 = const {alloc1: &AtomicUsize};
        _2 = SeqCst;
        _0 = AtomicUsize::load(_1, move _2) -> bb1;
    }

    bb1: {
        return;
    }
}

alloc1 (static: LOG, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn event(_1: u8) -> () {
    debug tag => _1;
    let mut _0: ();
    let _2: usize;
    let _3: &std::sync::atomic::AtomicUsize;
    let mut _4: std::sync::atomic::Ordering;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: usize;
    let _9: ();
    let _10: &std::sync::atomic::AtomicUsize;
    let mut _11: std::sync::atomic::Ordering;
    scope 1 {
        debug old_log => _2;
        let _5: usize;
        scope 2 {
            debug new_log => _5;
        }
    }

    bb0: {
        _3 = const {alloc1: &AtomicUsize};
        _4 = SeqCst;
        _2 = AtomicUsize::load(_3, move _4) -> bb1;
    }

    bb1: {
        _7 = _2;
        _6 = Shl(move _7, const 8_i32);
        _8 = _1 as usize (IntToInt);
        _5 = Add(move _6, move _8);
        _10 = const {alloc1: &AtomicUsize};
        _11 = SeqCst;
        _9 = AtomicUsize::store(_10, _5, move _11) -> bb2;
    }

    bb2: {
        return;
    }
}

alloc1 (static: LOG, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn Noisy(_1: u8) -> Noisy {
    let mut _0: Noisy;

    bb0: {
        _0 = Noisy(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Noisy(_1: u8) -> Noisy {
    let mut _0: Noisy;

    bb0: {
        _0 = Noisy(move _1);
        return;
    }
}
