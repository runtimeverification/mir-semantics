// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static mut ORDER: [usize; 3] = {
    let mut _0: [usize; 3];

    bb0: {
        _0 = [const 0_usize, const 0_usize, const 0_usize];
        return;
    }
}

ORDER::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

static mut INDEX: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

fn <impl at ui/drop/issue-48962.rs:9:1: 9:21>::drop(_1: &mut Dropee) -> () {
    debug self => _1;
    let mut _0: ();
    let mut _2: usize;
    let mut _3: *mut [usize; 3];
    let _4: usize;
    let mut _5: *mut usize;
    let mut _6: usize;
    let mut _7: bool;
    let mut _8: usize;
    let mut _9: *mut usize;
    let mut _10: *mut usize;
    scope 1 {
        let mut _11: *const ();
        let mut _12: usize;
        let mut _13: usize;
        let mut _14: usize;
        let mut _15: usize;
        let mut _16: bool;
        let mut _17: *const ();
        let mut _18: usize;
        let mut _19: usize;
        let mut _20: usize;
        let mut _21: usize;
        let mut _22: bool;
        let mut _23: *const ();
        let mut _24: usize;
        let mut _25: usize;
        let mut _26: usize;
        let mut _27: usize;
        let mut _28: bool;
        let mut _29: *const ();
        let mut _30: usize;
        let mut _31: usize;
        let mut _32: usize;
        let mut _33: usize;
        let mut _34: bool;
        let mut _35: *const ();
        let mut _36: usize;
        let mut _37: usize;
        let mut _38: usize;
        let mut _39: usize;
        let mut _40: bool;
    }

    bb0: {
        _2 = ((*_1).0: usize);
        _3 = const {alloc1: *mut [usize; 3]};
        _5 = const {alloc2: *mut usize};
        _35 = _5 as *const () (PtrToPtr);
        _36 = _35 as usize (Transmute);
        _37 = AlignOf(usize);
        _38 = Sub(_37, const 1_usize);
        _39 = BitAnd(_36, _38);
        _40 = Eq(_39, const 0_usize);
        assert(_40, "misaligned pointer dereference: address must be a multiple of {} but is {}", _37, _36) -> [success: bb6, unwind unreachable];
    }

    bb1: {
        _23 = _3 as *const () (PtrToPtr);
        _24 = _23 as usize (Transmute);
        _25 = AlignOf(usize);
        _26 = Sub(_25, const 1_usize);
        _27 = BitAnd(_24, _26);
        _28 = Eq(_27, const 0_usize);
        assert(_28, "misaligned pointer dereference: address must be a multiple of {} but is {}", _25, _24) -> [success: bb4, unwind unreachable];
    }

    bb2: {
        (*_10) = Add(move _8, const 1_usize);
        return;
    }

    bb3: {
        _8 = (*_9);
        _10 = const {alloc2: *mut usize};
        _11 = _10 as *const () (PtrToPtr);
        _12 = _11 as usize (Transmute);
        _13 = AlignOf(usize);
        _14 = Sub(_13, const 1_usize);
        _15 = BitAnd(_12, _14);
        _16 = Eq(_15, const 0_usize);
        assert(_16, "misaligned pointer dereference: address must be a multiple of {} but is {}", _13, _12) -> [success: bb2, unwind unreachable];
    }

    bb4: {
        (*_3)[_4] = move _2;
        _9 = const {alloc2: *mut usize};
        _17 = _9 as *const () (PtrToPtr);
        _18 = _17 as usize (Transmute);
        _19 = AlignOf(usize);
        _20 = Sub(_19, const 1_usize);
        _21 = BitAnd(_18, _20);
        _22 = Eq(_21, const 0_usize);
        assert(_22, "misaligned pointer dereference: address must be a multiple of {} but is {}", _19, _18) -> [success: bb3, unwind unreachable];
    }

    bb5: {
        _6 = const 3_usize;
        _7 = Lt(_4, _6);
        assert(move _7, "index out of bounds: the length is {} but the index is {}", move _6, _4) -> bb1;
    }

    bb6: {
        _4 = (*_5);
        _29 = _3 as *const () (PtrToPtr);
        _30 = _29 as usize (Transmute);
        _31 = AlignOf(usize);
        _32 = Sub(_31, const 1_usize);
        _33 = BitAnd(_30, _32);
        _34 = Eq(_33, const 0_usize);
        assert(_34, "misaligned pointer dereference: address must be a multiple of {} but is {}", _31, _30) -> [success: bb5, unwind unreachable];
    }
}

alloc2 (static: INDEX, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

alloc1 (static: ORDER, size: 24, align: 8) {
    0x00 │ 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 │ ................
    0x10 │ 00 00 00 00 00 00 00 00                         │ ........
}

fn add_sentintel() -> () {
    let mut _0: ();
    let mut _1: *mut [usize; 3];
    let _2: usize;
    let mut _3: *mut usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: *mut usize;
    let mut _8: *mut usize;
    scope 1 {
        let mut _9: *const ();
        let mut _10: usize;
        let mut _11: usize;
        let mut _12: usize;
        let mut _13: usize;
        let mut _14: bool;
        let mut _15: *const ();
        let mut _16: usize;
        let mut _17: usize;
        let mut _18: usize;
        let mut _19: usize;
        let mut _20: bool;
        let mut _21: *const ();
        let mut _22: usize;
        let mut _23: usize;
        let mut _24: usize;
        let mut _25: usize;
        let mut _26: bool;
        let mut _27: *const ();
        let mut _28: usize;
        let mut _29: usize;
        let mut _30: usize;
        let mut _31: usize;
        let mut _32: bool;
        let mut _33: *const ();
        let mut _34: usize;
        let mut _35: usize;
        let mut _36: usize;
        let mut _37: usize;
        let mut _38: bool;
    }

    bb0: {
        _1 = const {alloc1: *mut [usize; 3]};
        _3 = const {alloc2: *mut usize};
        _33 = _3 as *const () (PtrToPtr);
        _34 = _33 as usize (Transmute);
        _35 = AlignOf(usize);
        _36 = Sub(_35, const 1_usize);
        _37 = BitAnd(_34, _36);
        _38 = Eq(_37, const 0_usize);
        assert(_38, "misaligned pointer dereference: address must be a multiple of {} but is {}", _35, _34) -> [success: bb6, unwind unreachable];
    }

    bb1: {
        _21 = _1 as *const () (PtrToPtr);
        _22 = _21 as usize (Transmute);
        _23 = AlignOf(usize);
        _24 = Sub(_23, const 1_usize);
        _25 = BitAnd(_22, _24);
        _26 = Eq(_25, const 0_usize);
        assert(_26, "misaligned pointer dereference: address must be a multiple of {} but is {}", _23, _22) -> [success: bb4, unwind unreachable];
    }

    bb2: {
        (*_8) = Add(move _6, const 1_usize);
        return;
    }

    bb3: {
        _6 = (*_7);
        _8 = const {alloc2: *mut usize};
        _9 = _8 as *const () (PtrToPtr);
        _10 = _9 as usize (Transmute);
        _11 = AlignOf(usize);
        _12 = Sub(_11, const 1_usize);
        _13 = BitAnd(_10, _12);
        _14 = Eq(_13, const 0_usize);
        assert(_14, "misaligned pointer dereference: address must be a multiple of {} but is {}", _11, _10) -> [success: bb2, unwind unreachable];
    }

    bb4: {
        (*_1)[_2] = const 2_usize;
        _7 = const {alloc2: *mut usize};
        _15 = _7 as *const () (PtrToPtr);
        _16 = _15 as usize (Transmute);
        _17 = AlignOf(usize);
        _18 = Sub(_17, const 1_usize);
        _19 = BitAnd(_16, _18);
        _20 = Eq(_19, const 0_usize);
        assert(_20, "misaligned pointer dereference: address must be a multiple of {} but is {}", _17, _16) -> [success: bb3, unwind unreachable];
    }

    bb5: {
        _4 = const 3_usize;
        _5 = Lt(_2, _4);
        assert(move _5, "index out of bounds: the length is {} but the index is {}", move _4, _2) -> bb1;
    }

    bb6: {
        _2 = (*_3);
        _27 = _1 as *const () (PtrToPtr);
        _28 = _27 as usize (Transmute);
        _29 = AlignOf(usize);
        _30 = Sub(_29, const 1_usize);
        _31 = BitAnd(_28, _30);
        _32 = Eq(_31, const 0_usize);
        assert(_32, "misaligned pointer dereference: address must be a multiple of {} but is {}", _29, _28) -> [success: bb5, unwind unreachable];
    }
}

alloc2 (static: INDEX, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

alloc1 (static: ORDER, size: 24, align: 8) {
    0x00 │ 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 │ ................
    0x10 │ 00 00 00 00 00 00 00 00                         │ ........
}

fn main() -> () {
    let mut _0: ();
    let mut _1: std::boxed::Box<Dropee>;
    let mut _2: Dropee;
    let _3: Dropee;
    let _4: ();
    let mut _5: Dropee;
    let _6: std::boxed::Box<Dropee>;
    let mut _7: (&[usize; 3], &[usize; 3]);
    let mut _8: &[usize; 3];
    let _9: *mut [usize; 3];
    let mut _10: &[usize; 3];
    let _11: [usize; 3];
    let mut _14: bool;
    let mut _15: bool;
    let _17: !;
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _19: bool;
    let mut _20: &mut std::boxed::Box<Dropee>;
    let mut _21: ();
    let mut _22: *const Dropee;
    let mut _23: *const Dropee;
    scope 1 {
        debug x => _1;
        let mut _30: *const ();
        let mut _31: usize;
        let mut _32: usize;
        let mut _33: usize;
        let mut _34: usize;
        let mut _35: bool;
        let mut _36: *const ();
        let mut _37: usize;
        let mut _38: usize;
        let mut _39: usize;
        let mut _40: usize;
        let mut _41: bool;
        scope 2 {
            let _12: &[usize; 3];
            let _13: &[usize; 3];
            let mut _24: *const ();
            let mut _25: usize;
            let mut _26: usize;
            let mut _27: usize;
            let mut _28: usize;
            let mut _29: bool;
            scope 3 {
                debug left_val => _12;
                debug right_val => _13;
                let _16: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _16;
                }
            }
        }
    }

    bb0: {
        _19 = const false;
        _2 = Dropee(const 1_usize);
        _1 = Box::<Dropee>::new(move _2) -> bb1;
    }

    bb1: {
        _19 = const true;
        _22 = (((_1.0: std::ptr::Unique<Dropee>).0: std::ptr::NonNull<Dropee>).0: *const Dropee);
        _36 = _22 as *const () (PtrToPtr);
        _37 = _36 as usize (Transmute);
        _38 = AlignOf(Dropee);
        _39 = Sub(_38, const 1_usize);
        _40 = BitAnd(_37, _39);
        _41 = Eq(_40, const 0_usize);
        assert(_41, "misaligned pointer dereference: address must be a multiple of {} but is {}", _38, _37) -> [success: bb13, unwind unreachable];
    }

    bb2: {
        _4 = add_sentintel() -> [return: bb3, unwind: bb10];
    }

    bb3: {
        _5 = Dropee(const 3_usize);
        _23 = (((_1.0: std::ptr::Unique<Dropee>).0: std::ptr::NonNull<Dropee>).0: *const Dropee);
        _30 = _23 as *const () (PtrToPtr);
        _31 = _30 as usize (Transmute);
        _32 = AlignOf(Dropee);
        _33 = Sub(_32, const 1_usize);
        _34 = BitAnd(_31, _33);
        _35 = Eq(_34, const 0_usize);
        assert(_35, "misaligned pointer dereference: address must be a multiple of {} but is {}", _32, _31) -> [success: bb12, unwind unreachable];
    }

    bb4: {
        _9 = const {alloc1: *mut [usize; 3]};
        _24 = _9 as *const () (PtrToPtr);
        _25 = _24 as usize (Transmute);
        _26 = AlignOf(usize);
        _27 = Sub(_26, const 1_usize);
        _28 = BitAnd(_25, _27);
        _29 = Eq(_28, const 0_usize);
        assert(_29, "misaligned pointer dereference: address must be a multiple of {} but is {}", _26, _25) -> [success: bb11, unwind unreachable];
    }

    bb5: {
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _16 = core::panicking::AssertKind::Eq;
        _18 = Option::<Arguments<'_>>::None;
        _17 = core::panicking::assert_failed::<[usize; 3], [usize; 3]>(move _16, _12, _13, move _18) -> bb10;
    }

    bb7: {
        _19 = const false;
        return;
    }

    bb8 (cleanup): {
        resume;
    }

    bb9 (cleanup): {
        _19 = const false;
        _20 = &mut _1;
        _21 = <Box<Dropee> as Drop>::drop(move _20) -> [return: bb14, unwind terminate];
    }

    bb10 (cleanup): {
        switchInt(_19) -> [0: bb8, otherwise: bb9];
    }

    bb11: {
        _8 = &(*_9);
        _11 = [const 1_usize, const 2_usize, const 3_usize];
        _10 = &_11;
        _7 = (move _8, move _10);
        _12 = (_7.0: &[usize; 3]);
        _13 = (_7.1: &[usize; 3]);
        _15 = <[usize; 3] as PartialEq>::eq(_12, _13) -> [return: bb5, unwind: bb10];
    }

    bb12: {
        (*_23) = move _5;
        _19 = const false;
        _6 = move _1;
        drop(_6) -> [return: bb4, unwind: bb10];
    }

    bb13: {
        _3 = move (*_22);
        drop(_3) -> [return: bb2, unwind: bb10];
    }

    bb14 (cleanup): {
        goto -> bb8;
    }
}

alloc1 (static: ORDER, size: 24, align: 8) {
    0x00 │ 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 │ ................
    0x10 │ 00 00 00 00 00 00 00 00                         │ ........
}

fn Dropee(_1: usize) -> Dropee {
    let mut _0: Dropee;

    bb0: {
        _0 = Dropee(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Dropee(_1: usize) -> Dropee {
    let mut _0: Dropee;

    bb0: {
        _0 = Dropee(move _1);
        return;
    }
}
