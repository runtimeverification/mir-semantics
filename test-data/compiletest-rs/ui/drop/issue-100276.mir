// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn let_chains(_1: Result<DirEntry, std::io::Error>) -> () {
    debug entry => _1;
    debug entry => _3;
    debug s => _11;
    let mut _0: ();
    let mut _2: isize;
    let _3: std::fs::DirEntry;
    let mut _4: std::option::Option<&str>;
    let mut _5: &std::ffi::OsStr;
    let _6: &std::ffi::OsStr;
    let mut _7: &std::ffi::OsString;
    let _8: std::ffi::OsString;
    let mut _9: &std::fs::DirEntry;
    let mut _10: isize;
    let _11: &str;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: isize;
    let mut _16: isize;

    bb0: {
        _13 = const false;
        _14 = const false;
        _14 = const true;
        _2 = discriminant(_1);
        switchInt(move _2) -> [0: bb1, otherwise: bb9];
    }

    bb1: {
        _14 = const false;
        _3 = move ((_1 as Ok).0: std::fs::DirEntry);
        _9 = &_3;
        _8 = DirEntry::file_name(move _9) -> [return: bb2, unwind: bb13];
    }

    bb2: {
        _13 = const true;
        _7 = &_8;
        _6 = <OsString as Deref>::deref(move _7) -> [return: bb3, unwind: bb11];
    }

    bb3: {
        _5 = _6;
        _4 = OsStr::to_str(move _5) -> [return: bb4, unwind: bb11];
    }

    bb4: {
        _10 = discriminant(_4);
        switchInt(move _10) -> [1: bb5, otherwise: bb8];
    }

    bb5: {
        _11 = ((_4 as Some).0: &str);
        _12 = core::str::<impl str>::contains::<'_, &str>(_11, const "") -> [return: bb6, unwind: bb11];
    }

    bb6: {
        switchInt(move _12) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        drop(_3) -> [return: bb9, unwind: bb12];
    }

    bb8: {
        drop(_3) -> [return: bb9, unwind: bb12];
    }

    bb9: {
        switchInt(_13) -> [0: bb10, otherwise: bb15];
    }

    bb10: {
        _13 = const false;
        _15 = discriminant(_1);
        switchInt(move _15) -> [0: bb17, otherwise: bb19];
    }

    bb11 (cleanup): {
        drop(_3) -> [return: bb12, unwind terminate];
    }

    bb12 (cleanup): {
        drop(_8) -> [return: bb23, unwind terminate];
    }

    bb13 (cleanup): {
        drop(_3) -> [return: bb23, unwind terminate];
    }

    bb14 (cleanup): {
        resume;
    }

    bb15: {
        drop(_8) -> [return: bb10, unwind: bb23];
    }

    bb16: {
        return;
    }

    bb17: {
        switchInt(_14) -> [0: bb16, otherwise: bb18];
    }

    bb18: {
        drop(((_1 as Ok).0: std::fs::DirEntry)) -> bb16;
    }

    bb19: {
        drop(_1) -> bb16;
    }

    bb20 (cleanup): {
        switchInt(_14) -> [0: bb14, otherwise: bb21];
    }

    bb21 (cleanup): {
        drop(((_1 as Ok).0: std::fs::DirEntry)) -> [return: bb14, unwind terminate];
    }

    bb22 (cleanup): {
        drop(_1) -> [return: bb14, unwind terminate];
    }

    bb23 (cleanup): {
        _16 = discriminant(_1);
        switchInt(move _16) -> [0: bb20, otherwise: bb22];
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
