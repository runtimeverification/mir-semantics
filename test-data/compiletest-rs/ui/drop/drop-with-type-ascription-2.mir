// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<&str>;
    let mut _2: std::boxed::Box<[&str]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[&str; 2]>;
    let _7: &str;
    let mut _9: std::str::Split<'_, &str>;
    let _10: &&str;
    let mut _11: &std::vec::Vec<&str>;
    let mut _12: (&&str, &&str);
    let mut _13: &&str;
    let _14: &&str;
    let mut _15: &std::vec::Vec<&str>;
    let mut _16: &&str;
    let _17: &str;
    let mut _20: bool;
    let mut _21: bool;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: (&&str, &&str);
    let mut _26: &&str;
    let _27: &&str;
    let mut _28: &std::vec::Vec<&str>;
    let mut _29: &&str;
    let _30: &str;
    let mut _33: bool;
    let mut _34: bool;
    let _36: !;
    let mut _37: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _38: &str;
    let mut _39: *const [&str; 2];
    let mut _40: *const ();
    let mut _41: usize;
    let mut _42: usize;
    let mut _43: usize;
    let mut _44: usize;
    let mut _45: bool;
    scope 1 {
        debug args => _1;
        let _8: std::vec::Vec<&str>;
        scope 3 {
            debug arr => _8;
            let _18: &&str;
            let _19: &&str;
            let _31: &&str;
            let _32: &&str;
            scope 4 {
                debug left_val => _18;
                debug right_val => _19;
                let _22: core::panicking::AssertKind;
                scope 5 {
                    debug kind => _22;
                }
            }
            scope 6 {
                debug left_val => _31;
                debug right_val => _32;
                let _35: core::panicking::AssertKind;
                scope 7 {
                    debug kind => _35;
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _3 = SizeOf([&str; 2]);
        _4 = AlignOf([&str; 2]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> bb1;
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [&str; 2]);
        _7 = const "asdf::asdf";
        _39 = (((_6.0: std::ptr::Unique<[&str; 2]>).0: std::ptr::NonNull<[&str; 2]>).0: *const [&str; 2]);
        _40 = _39 as *const () (PtrToPtr);
        _41 = _40 as usize (Transmute);
        _42 = AlignOf(&str);
        _43 = Sub(_42, const 1_usize);
        _44 = BitAnd(_41, _43);
        _45 = Eq(_44, const 0_usize);
        assert(_45, "misaligned pointer dereference: address must be a multiple of {} but is {}", _42, _41) -> [success: bb19, unwind unreachable];
    }

    bb2: {
        _11 = &_1;
        _10 = <Vec<&str> as Index<usize>>::index(move _11, const 1_usize) -> [return: bb3, unwind: bb17];
    }

    bb3: {
        _38 = deref_copy (*_10);
        _9 = core::str::<impl str>::split::<'_, &str>(_38, const "::") -> [return: bb4, unwind: bb17];
    }

    bb4: {
        _8 = <std::str::Split<'_, &str> as Iterator>::collect::<Vec<&str>>(move _9) -> [return: bb5, unwind: bb17];
    }

    bb5: {
        _15 = &_8;
        _14 = <Vec<&str> as Index<usize>>::index(move _15, const 0_usize) -> [return: bb6, unwind: bb16];
    }

    bb6: {
        _13 = _14;
        _17 = const "asdf";
        _16 = &_17;
        _12 = (move _13, move _16);
        _18 = (_12.0: &&str);
        _19 = (_12.1: &&str);
        _21 = <&str as PartialEq>::eq(_18, _19) -> [return: bb7, unwind: bb16];
    }

    bb7: {
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<&str, &str>(move _22, _18, _19, move _24) -> bb16;
    }

    bb9: {
        _28 = &_8;
        _27 = <Vec<&str> as Index<usize>>::index(move _28, const 0_usize) -> [return: bb10, unwind: bb16];
    }

    bb10: {
        _26 = _27;
        _30 = const "asdf";
        _29 = &_30;
        _25 = (move _26, move _29);
        _31 = (_25.0: &&str);
        _32 = (_25.1: &&str);
        _34 = <&str as PartialEq>::eq(_31, _32) -> [return: bb11, unwind: bb16];
    }

    bb11: {
        _33 = Not(move _34);
        switchInt(move _33) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _35 = core::panicking::AssertKind::Eq;
        _37 = Option::<Arguments<'_>>::None;
        _36 = core::panicking::assert_failed::<&str, &str>(move _35, _31, _32, move _37) -> bb16;
    }

    bb13: {
        drop(_8) -> [return: bb14, unwind: bb17];
    }

    bb14: {
        drop(_1) -> bb15;
    }

    bb15: {
        return;
    }

    bb16 (cleanup): {
        drop(_8) -> [return: bb17, unwind terminate];
    }

    bb17 (cleanup): {
        drop(_1) -> [return: bb18, unwind terminate];
    }

    bb18 (cleanup): {
        resume;
    }

    bb19: {
        (*_39) = [const "foobie", _7];
        _2 = move _6 as std::boxed::Box<[&str]> (Pointer(Unsize));
        _1 = slice::<impl [&str]>::into_vec::<std::alloc::Global>(move _2) -> bb2;
    }
}
