// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::cell::RefCell<std::vec::Vec<u32>>;
    let mut _2: std::vec::Vec<u32>;
    let _3: ();
    let _4: &str;
    let _5: ();
    let _6: &std::cell::RefCell<std::vec::Vec<u32>>;
    let mut _7: (&&[u32], &[u32; 8]);
    let mut _8: &&[u32];
    let _9: &[u32];
    let _10: &[u32];
    let mut _11: &std::vec::Vec<u32>;
    let _12: &std::vec::Vec<u32>;
    let mut _13: &std::cell::Ref<'_, std::vec::Vec<u32>>;
    let _14: std::cell::Ref<'_, std::vec::Vec<u32>>;
    let mut _15: &std::cell::RefCell<std::vec::Vec<u32>>;
    let mut _16: &[u32; 8];
    let _17: [u32; 8];
    let mut _20: bool;
    let mut _21: bool;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug log => _1;
        let _18: &&[u32];
        let _19: &[u32; 8];
        scope 2 {
            debug left_val => _18;
            debug right_val => _19;
            let _22: core::panicking::AssertKind;
            scope 3 {
                debug kind => _22;
            }
        }
    }

    bb0: {
        _2 = Vec::<u32>::new() -> bb1;
    }

    bb1: {
        _1 = RefCell::<Vec<u32>>::new(move _2) -> bb2;
    }

    bb2: {
        _4 = const "created empty log";
        _3 = println(_4) -> [return: bb3, unwind: bb14];
    }

    bb3: {
        _6 = &_1;
        _5 = test(_6) -> [return: bb4, unwind: bb14];
    }

    bb4: {
        _15 = &_1;
        _14 = RefCell::<Vec<u32>>::borrow(move _15) -> [return: bb5, unwind: bb14];
    }

    bb5: {
        _13 = &_14;
        _12 = <Ref<'_, Vec<u32>> as Deref>::deref(move _13) -> [return: bb6, unwind: bb13];
    }

    bb6: {
        _11 = _12;
        _10 = <Vec<u32> as Index<RangeFull>>::index(move _11, const RangeFull) -> [return: bb7, unwind: bb13];
    }

    bb7: {
        _9 = _10;
        _8 = &_9;
        _17 = [const 3_u32, const 4_u32, const 5_u32, const 2_u32, const 6_u32, const 1_u32, const 0_u32, const 7_u32];
        _16 = &_17;
        _7 = (move _8, move _16);
        _18 = (_7.0: &&[u32]);
        _19 = (_7.1: &[u32; 8]);
        _21 = <&[u32] as PartialEq<[u32; 8]>>::eq(_18, _19) -> [return: bb8, unwind: bb13];
    }

    bb8: {
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<&[u32], [u32; 8]>(move _22, _18, _19, move _24) -> bb13;
    }

    bb10: {
        drop(_14) -> [return: bb11, unwind: bb14];
    }

    bb11: {
        drop(_1) -> bb12;
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        drop(_14) -> [return: bb14, unwind terminate];
    }

    bb14 (cleanup): {
        drop(_1) -> [return: bb15, unwind terminate];
    }

    bb15 (cleanup): {
        resume;
    }
}

fn test(_1: &RefCell<Vec<u32>>) -> () {
    debug log => _1;
    let mut _0: ();
    let _2: d::D<'_>;
    let _4: ();
    let _5: &str;
    let mut _7: d::D<'_>;
    let mut _8: d::D<'_>;
    let _9: ();
    let mut _10: &str;
    let _11: &str;
    let _12: &std::string::String;
    let _13: std::string::String;
    let mut _15: std::fmt::Arguments<'_>;
    let mut _16: &[&str];
    let _17: &[&str; 1];
    let _18: [&str; 1];
    let mut _19: &[core::fmt::rt::Argument<'_>];
    let _20: &[core::fmt::rt::Argument<'_>; 1];
    let _21: [core::fmt::rt::Argument<'_>; 1];
    let mut _22: core::fmt::rt::Argument<'_>;
    let _23: &d::D<'_>;
    let mut _24: bool;
    let mut _25: bool;
    scope 1 {
        debug da => _2;
        let _3: d::D<'_>;
        scope 2 {
            debug de => _3;
            let _6: d::D<'_>;
            scope 3 {
                debug result => _6;
                let _14: std::string::String;
                scope 4 {
                    debug res => _14;
                }
            }
        }
    }

    bb0: {
        _25 = const false;
        _24 = const false;
        _25 = const true;
        _2 = D::<'_>::new(const "da", const 0_u32, _1) -> bb1;
    }

    bb1: {
        _3 = D::<'_>::new(const "de", const 1_u32, _1) -> [return: bb2, unwind: bb18];
    }

    bb2: {
        _24 = const true;
        _5 = const "calling foo";
        _4 = println(_5) -> [return: bb3, unwind: bb16];
    }

    bb3: {
        _25 = const false;
        _7 = move _2;
        _24 = const false;
        _8 = move _3;
        _6 = foo(move _7, move _8) -> [return: bb4, unwind: bb16];
    }

    bb4: {
        _18 = [const "result "];
        _17 = &_18;
        _16 = _17 as &[&str] (Pointer(Unsize));
        _23 = &_6;
        _22 = core::fmt::rt::Argument::<'_>::new_display::<D<'_>>(_23) -> [return: bb5, unwind: bb13];
    }

    bb5: {
        _21 = [move _22];
        _20 = &_21;
        _19 = _20 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _15 = Arguments::<'_>::new_v1(move _16, move _19) -> [return: bb6, unwind: bb13];
    }

    bb6: {
        _14 = format(move _15) -> [return: bb7, unwind: bb13];
    }

    bb7: {
        _13 = move _14;
        _12 = &_13;
        _11 = <String as Deref>::deref(_12) -> [return: bb8, unwind: bb12];
    }

    bb8: {
        _10 = _11;
        _9 = println(move _10) -> [return: bb9, unwind: bb12];
    }

    bb9: {
        drop(_13) -> [return: bb10, unwind: bb13];
    }

    bb10: {
        drop(_6) -> [return: bb11, unwind: bb16];
    }

    bb11: {
        _24 = const false;
        _25 = const false;
        return;
    }

    bb12 (cleanup): {
        drop(_13) -> [return: bb13, unwind terminate];
    }

    bb13 (cleanup): {
        drop(_6) -> [return: bb16, unwind terminate];
    }

    bb14 (cleanup): {
        resume;
    }

    bb15 (cleanup): {
        drop(_3) -> [return: bb18, unwind terminate];
    }

    bb16 (cleanup): {
        switchInt(_24) -> [0: bb18, otherwise: bb15];
    }

    bb17 (cleanup): {
        drop(_2) -> [return: bb14, unwind terminate];
    }

    bb18 (cleanup): {
        switchInt(_25) -> [0: bb14, otherwise: bb17];
    }
}

fn foo(_1: D<'_>, _2: D<'_>) -> D<'_> {
    debug da0 => _1;
    debug de1 => _2;
    let mut _0: d::D<'_>;
    let _3: ();
    let _4: &str;
    let _5: d::D<'_>;
    let mut _6: &d::D<'_>;
    let mut _9: &d::D<'_>;
    let mut _10: &d::D<'_>;
    let _11: d::D<'_>;
    let mut _12: &d::D<'_>;
    let _13: ();
    let _14: &str;
    let mut _15: &d::D<'_>;
    let _16: d::D<'_>;
    let mut _17: &d::D<'_>;
    scope 1 {
        debug de2 => _5;
        let _7: d::D<'_>;
        let _8: d::D<'_>;
        scope 2 {
            debug de4 => _7;
        }
        scope 3 {
            debug _da1 => _8;
        }
    }

    bb0: {
        _4 = const "entered foo";
        _3 = println(_4) -> [return: bb1, unwind: bb24];
    }

    bb1: {
        _6 = &_2;
        _5 = D::<'_>::incr(move _6) -> [return: bb2, unwind: bb24];
    }

    bb2: {
        _9 = &_1;
        _8 = D::<'_>::incr(move _9) -> [return: bb3, unwind: bb23];
    }

    bb3: {
        _12 = &_5;
        _11 = D::<'_>::incr(move _12) -> [return: bb4, unwind: bb22];
    }

    bb4: {
        _10 = &_11;
        _7 = D::<'_>::incr(move _10) -> [return: bb5, unwind: bb20];
    }

    bb5: {
        drop(_8) -> [return: bb6, unwind: bb21];
    }

    bb6: {
        drop(_11) -> [return: bb7, unwind: bb19];
    }

    bb7: {
        _14 = const "eval tail of foo";
        _13 = println(_14) -> [return: bb8, unwind: bb19];
    }

    bb8: {
        _17 = &_7;
        _16 = D::<'_>::incr(move _17) -> [return: bb9, unwind: bb19];
    }

    bb9: {
        _15 = &_16;
        _0 = D::<'_>::incr(move _15) -> [return: bb10, unwind: bb16];
    }

    bb10: {
        drop(_7) -> [return: bb11, unwind: bb17];
    }

    bb11: {
        drop(_5) -> [return: bb12, unwind: bb18];
    }

    bb12: {
        drop(_16) -> [return: bb13, unwind: bb24];
    }

    bb13: {
        drop(_2) -> [return: bb14, unwind: bb25];
    }

    bb14: {
        drop(_1) -> bb15;
    }

    bb15: {
        return;
    }

    bb16 (cleanup): {
        drop(_7) -> [return: bb17, unwind terminate];
    }

    bb17 (cleanup): {
        drop(_5) -> [return: bb18, unwind terminate];
    }

    bb18 (cleanup): {
        drop(_16) -> [return: bb24, unwind terminate];
    }

    bb19 (cleanup): {
        drop(_7) -> [return: bb23, unwind terminate];
    }

    bb20 (cleanup): {
        drop(_8) -> [return: bb21, unwind terminate];
    }

    bb21 (cleanup): {
        drop(_11) -> [return: bb23, unwind terminate];
    }

    bb22 (cleanup): {
        drop(_8) -> [return: bb23, unwind terminate];
    }

    bb23 (cleanup): {
        drop(_5) -> [return: bb24, unwind terminate];
    }

    bb24 (cleanup): {
        drop(_2) -> [return: bb25, unwind terminate];
    }

    bb25 (cleanup): {
        drop(_1) -> [return: bb26, unwind terminate];
    }

    bb26 (cleanup): {
        resume;
    }
}

const PREF_INDENT: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const 16_u32;
        return;
    }
}

static mut counter: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const 0_u32;
        return;
    }
}

static mut trails: u64 = {
    let mut _0: u64;

    bb0: {
        _0 = const 0_u64;
        return;
    }
}

fn current_width() -> u32 {
    let mut _0: u32;
    let mut _1: u32;
    let mut _2: u32;
    let mut _3: u64;
    let mut _4: *mut u64;
    scope 1 {
        let mut _5: *const ();
        let mut _6: usize;
        let mut _7: usize;
        let mut _8: usize;
        let mut _9: usize;
        let mut _10: bool;
    }

    bb0: {
        _1 = max_width() -> bb1;
    }

    bb1: {
        _4 = const {alloc1: *mut u64};
        _5 = _4 as *const () (PtrToPtr);
        _6 = _5 as usize (Transmute);
        _7 = AlignOf(u64);
        _8 = Sub(_7, const 1_usize);
        _9 = BitAnd(_6, _8);
        _10 = Eq(_9, const 0_usize);
        assert(_10, "misaligned pointer dereference: address must be a multiple of {} but is {}", _7, _6) -> [success: bb3, unwind unreachable];
    }

    bb2: {
        _0 = Sub(move _1, move _2);
        return;
    }

    bb3: {
        _3 = (*_4);
        _2 = core::num::<impl u64>::leading_zeros(move _3) -> bb2;
    }
}

alloc1 (static: trails, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn max_width() -> u32 {
    let mut _0: u32;
    let mut _1: usize;
    let mut _2: usize;
    let _3: &u64;
    let _4: *mut u64;
    scope 1 {
        let mut _5: *const ();
        let mut _6: usize;
        let mut _7: usize;
        let mut _8: usize;
        let mut _9: usize;
        let mut _10: bool;
    }

    bb0: {
        _4 = const {alloc1: *mut u64};
        _5 = _4 as *const () (PtrToPtr);
        _6 = _5 as usize (Transmute);
        _7 = AlignOf(u64);
        _8 = Sub(_7, const 1_usize);
        _9 = BitAnd(_6, _8);
        _10 = Eq(_9, const 0_usize);
        assert(_10, "misaligned pointer dereference: address must be a multiple of {} but is {}", _7, _6) -> [success: bb2, unwind unreachable];
    }

    bb1: {
        _1 = Mul(move _2, const 8_usize);
        _0 = move _1 as u32 (IntToInt);
        return;
    }

    bb2: {
        _3 = &(*_4);
        _2 = std::mem::size_of_val::<u64>(_3) -> bb1;
    }
}

alloc1 (static: trails, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn indent_println(_1: u32, _2: &str) -> () {
    debug my_trails => _1;
    debug s => _2;
    let mut _0: ();
    let mut _3: std::string::String;
    let mut _4: std::ops::Range<u32>;
    let mut _5: std::ops::Range<u32>;
    let mut _7: std::option::Option<u32>;
    let mut _8: &mut std::ops::Range<u32>;
    let mut _9: isize;
    let mut _11: u64;
    let mut _12: u64;
    let mut _13: *mut u64;
    let mut _14: u64;
    let mut _15: std::string::String;
    let mut _16: std::string::String;
    let _17: &str;
    let mut _18: std::string::String;
    let mut _19: std::string::String;
    let _20: &str;
    let _21: ();
    let mut _22: std::fmt::Arguments<'_>;
    let mut _23: &[&str];
    let _24: &[&str; 3];
    let _25: [&str; 3];
    let mut _26: &[core::fmt::rt::Argument<'_>];
    let _27: &[core::fmt::rt::Argument<'_>; 2];
    let _28: [core::fmt::rt::Argument<'_>; 2];
    let mut _29: core::fmt::rt::Argument<'_>;
    let _30: &std::string::String;
    let mut _31: core::fmt::rt::Argument<'_>;
    let _32: &&str;
    let mut _33: bool;
    scope 1 {
        debug indent => _3;
        let mut _6: std::ops::Range<u32>;
        scope 2 {
            debug iter => _6;
            let _10: u32;
            scope 3 {
                debug i => _10;
                scope 4 {
                    let mut _34: *const ();
                    let mut _35: usize;
                    let mut _36: usize;
                    let mut _37: usize;
                    let mut _38: usize;
                    let mut _39: bool;
                }
            }
        }
    }

    bb0: {
        _33 = const false;
        _33 = const true;
        _3 = String::new() -> bb1;
    }

    bb1: {
        _5 = std::ops::Range::<u32> { start: const 0_u32, end: _1 };
        _4 = <std::ops::Range<u32> as IntoIterator>::into_iter(move _5) -> [return: bb2, unwind: bb19];
    }

    bb2: {
        _6 = move _4;
        goto -> bb3;
    }

    bb3: {
        _8 = &mut _6;
        _7 = <std::ops::Range<u32> as Iterator>::next(_8) -> [return: bb4, unwind: bb19];
    }

    bb4: {
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        _10 = ((_7 as Some).0: u32);
        _13 = const {alloc1: *mut u64};
        _34 = _13 as *const () (PtrToPtr);
        _35 = _34 as usize (Transmute);
        _36 = AlignOf(u64);
        _37 = Sub(_36, const 1_usize);
        _38 = BitAnd(_35, _37);
        _39 = Eq(_38, const 0_usize);
        assert(_39, "misaligned pointer dereference: address must be a multiple of {} but is {}", _36, _35) -> [success: bb20, unwind unreachable];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _25 = [const "", const "", const "\n"];
        _24 = &_25;
        _23 = _24 as &[&str] (Pointer(Unsize));
        _30 = &_3;
        _29 = core::fmt::rt::Argument::<'_>::new_display::<String>(_30) -> [return: bb12, unwind: bb19];
    }

    bb8: {
        _33 = const false;
        _16 = move _3;
        _17 = const "| ";
        _15 = <String as Add<&str>>::add(move _16, _17) -> [return: bb9, unwind: bb19];
    }

    bb9: {
        _33 = const true;
        _3 = move _15;
        goto -> bb3;
    }

    bb10: {
        _33 = const false;
        _19 = move _3;
        _20 = const "  ";
        _18 = <String as Add<&str>>::add(move _19, _20) -> [return: bb11, unwind: bb19];
    }

    bb11: {
        _33 = const true;
        _3 = move _18;
        goto -> bb3;
    }

    bb12: {
        _32 = &_2;
        _31 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_32) -> [return: bb13, unwind: bb19];
    }

    bb13: {
        _28 = [move _29, move _31];
        _27 = &_28;
        _26 = _27 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _22 = Arguments::<'_>::new_v1(move _23, move _26) -> [return: bb14, unwind: bb19];
    }

    bb14: {
        _21 = _print(move _22) -> [return: bb15, unwind: bb19];
    }

    bb15: {
        drop(_3) -> bb16;
    }

    bb16: {
        _33 = const false;
        return;
    }

    bb17 (cleanup): {
        resume;
    }

    bb18 (cleanup): {
        drop(_3) -> [return: bb17, unwind terminate];
    }

    bb19 (cleanup): {
        switchInt(_33) -> [0: bb17, otherwise: bb18];
    }

    bb20: {
        _12 = (*_13);
        _14 = Shl(const 1_u64, _10);
        _11 = BitAnd(move _12, move _14);
        switchInt(move _11) -> [0: bb10, otherwise: bb8];
    }
}

alloc1 (static: trails, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn println(_1: &str) -> () {
    debug s => _1;
    let mut _0: ();
    let _2: ();

    bb0: {
        _2 = indent_println(const _, _1) -> bb1;
    }

    bb1: {
        return;
    }
}

fn first_avail() -> u32 {
    let mut _0: u32;
    let mut _1: std::ops::Range<u32>;
    let mut _2: std::ops::Range<u32>;
    let mut _4: std::option::Option<u32>;
    let mut _5: &mut std::ops::Range<u32>;
    let mut _6: isize;
    let mut _7: u64;
    let mut _8: u64;
    let mut _9: *mut u64;
    let mut _10: u64;
    let _11: !;
    scope 1 {
        let mut _3: std::ops::Range<u32>;
        scope 2 {
            debug iter => _3;
            scope 3 {
                debug i => _0;
                let mut _12: *const ();
                let mut _13: usize;
                let mut _14: usize;
                let mut _15: usize;
                let mut _16: usize;
                let mut _17: bool;
            }
        }
    }

    bb0: {
        _2 = std::ops::Range::<u32> { start: const 0_u32, end: const 64_u32 };
        _1 = <std::ops::Range<u32> as IntoIterator>::into_iter(move _2) -> bb1;
    }

    bb1: {
        _3 = move _1;
        goto -> bb2;
    }

    bb2: {
        _5 = &mut _3;
        _4 = <std::ops::Range<u32> as Iterator>::next(_5) -> bb3;
    }

    bb3: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        _0 = ((_4 as Some).0: u32);
        _9 = const {alloc1: *mut u64};
        _12 = _9 as *const () (PtrToPtr);
        _13 = _12 as usize (Transmute);
        _14 = AlignOf(u64);
        _15 = Sub(_14, const 1_usize);
        _16 = BitAnd(_13, _15);
        _17 = Eq(_16, const 0_usize);
        assert(_17, "misaligned pointer dereference: address must be a multiple of {} but is {}", _14, _13) -> [success: bb8, unwind unreachable];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _11 = begin_panic::<&str>(const "exhausted trails");
    }

    bb7: {
        return;
    }

    bb8: {
        _8 = (*_9);
        _10 = Shl(const 1_u64, _0);
        _7 = BitAnd(move _8, move _10);
        switchInt(move _7) -> [0: bb7, otherwise: bb2];
    }
}

alloc1 (static: trails, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn d::<impl at ui/drop/issue-23338-ensure-param-drop-order.rs:129:5: 129:36>::fmt(_1: &D<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug w => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 4];
    let _6: [&str; 4];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 3];
    let _9: [core::fmt::rt::Argument<'_>; 3];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &&str;
    let mut _12: core::fmt::rt::Argument<'_>;
    let _13: &u32;
    let mut _14: core::fmt::rt::Argument<'_>;
    let _15: &u32;

    bb0: {
        _6 = [const "D(", const "_", const ", ", const ")"];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _11 = &((*_1).0: &str);
        _10 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_11) -> bb1;
    }

    bb1: {
        _13 = &((*_1).1: u32);
        _12 = core::fmt::rt::Argument::<'_>::new_display::<u32>(_13) -> bb2;
    }

    bb2: {
        _15 = &((*_1).2: u32);
        _14 = core::fmt::rt::Argument::<'_>::new_display::<u32>(_15) -> bb3;
    }

    bb3: {
        _9 = [move _10, move _12, move _14];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb4;
    }

    bb4: {
        _0 = Formatter::<'_>::write_fmt(_2, move _3) -> bb5;
    }

    bb5: {
        return;
    }
}

fn d::<impl at ui/drop/issue-23338-ensure-param-drop-order.rs:135:5: 135:19>::new(_1: &str, _2: u32, _3: &RefCell<Vec<u32>>) -> D<'_> {
    debug name => _1;
    debug i => _2;
    debug log => _3;
    let mut _0: d::D<'_>;
    let mut _6: *mut u32;
    let mut _7: *mut u32;
    let mut _8: u64;
    let mut _9: u32;
    let mut _10: *mut u64;
    let mut _12: u32;
    let _13: ();
    let mut _14: u32;
    let mut _15: &str;
    let _16: &str;
    let _17: &std::string::String;
    let _18: std::string::String;
    let mut _20: std::fmt::Arguments<'_>;
    let mut _21: &[&str];
    let _22: &[&str; 1];
    let _23: [&str; 1];
    let mut _24: &[core::fmt::rt::Argument<'_>];
    let _25: &[core::fmt::rt::Argument<'_>; 1];
    let _26: [core::fmt::rt::Argument<'_>; 1];
    let mut _27: core::fmt::rt::Argument<'_>;
    let _28: &d::D<'_>;
    scope 1 {
        let _4: u32;
        scope 2 {
            debug trail => _4;
            let _5: u32;
            let mut _53: *const ();
            let mut _54: usize;
            let mut _55: usize;
            let mut _56: usize;
            let mut _57: usize;
            let mut _58: bool;
            scope 3 {
                debug ctr => _5;
                let _11: d::D<'_>;
                let mut _29: *const ();
                let mut _30: usize;
                let mut _31: usize;
                let mut _32: usize;
                let mut _33: usize;
                let mut _34: bool;
                let mut _35: *const ();
                let mut _36: usize;
                let mut _37: usize;
                let mut _38: usize;
                let mut _39: usize;
                let mut _40: bool;
                let mut _41: *const ();
                let mut _42: usize;
                let mut _43: usize;
                let mut _44: usize;
                let mut _45: usize;
                let mut _46: bool;
                let mut _47: *const ();
                let mut _48: usize;
                let mut _49: usize;
                let mut _50: usize;
                let mut _51: usize;
                let mut _52: bool;
                scope 4 {
                    debug ret => _11;
                    let _19: std::string::String;
                    scope 5 {
                        debug res => _19;
                    }
                }
            }
        }
    }

    bb0: {
        _4 = first_avail() -> bb1;
    }

    bb1: {
        _6 = const {alloc2: *mut u32};
        _53 = _6 as *const () (PtrToPtr);
        _54 = _53 as usize (Transmute);
        _55 = AlignOf(u32);
        _56 = Sub(_55, const 1_usize);
        _57 = BitAnd(_54, _56);
        _58 = Eq(_57, const 0_usize);
        assert(_58, "misaligned pointer dereference: address must be a multiple of {} but is {}", _55, _54) -> [success: bb15, unwind unreachable];
    }

    bb2: {
        _26 = [move _27];
        _25 = &_26;
        _24 = _25 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _20 = Arguments::<'_>::new_v1(move _21, move _24) -> [return: bb3, unwind: bb9];
    }

    bb3: {
        _19 = format(move _20) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        _18 = move _19;
        _17 = &_18;
        _16 = <String as Deref>::deref(_17) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        _15 = _16;
        _13 = indent_println(move _14, move _15) -> [return: bb6, unwind: bb8];
    }

    bb6: {
        drop(_18) -> [return: bb7, unwind: bb9];
    }

    bb7: {
        _0 = move _11;
        return;
    }

    bb8 (cleanup): {
        drop(_18) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        drop(_11) -> [return: bb10, unwind terminate];
    }

    bb10 (cleanup): {
        resume;
    }

    bb11: {
        (*_10) = BitOr((*_10), move _8);
        _12 = _4;
        _11 = D::<'_> { name: _1, i: _2, uid: _5, trail: move _12, log: _3 };
        _14 = _4;
        _23 = [const "+-- Make "];
        _22 = &_23;
        _21 = _22 as &[&str] (Pointer(Unsize));
        _28 = &_11;
        _27 = core::fmt::rt::Argument::<'_>::new_display::<D<'_>>(_28) -> [return: bb2, unwind: bb9];
    }

    bb12: {
        _29 = _10 as *const () (PtrToPtr);
        _30 = _29 as usize (Transmute);
        _31 = AlignOf(u64);
        _32 = Sub(_31, const 1_usize);
        _33 = BitAnd(_30, _32);
        _34 = Eq(_33, const 0_usize);
        assert(_34, "misaligned pointer dereference: address must be a multiple of {} but is {}", _31, _30) -> [success: bb11, unwind unreachable];
    }

    bb13: {
        (*_7) = Add((*_7), const 1_u32);
        _9 = _4;
        _8 = Shl(const 1_u64, move _9);
        _10 = const {alloc1: *mut u64};
        _35 = _10 as *const () (PtrToPtr);
        _36 = _35 as usize (Transmute);
        _37 = AlignOf(u64);
        _38 = Sub(_37, const 1_usize);
        _39 = BitAnd(_36, _38);
        _40 = Eq(_39, const 0_usize);
        assert(_40, "misaligned pointer dereference: address must be a multiple of {} but is {}", _37, _36) -> [success: bb12, unwind unreachable];
    }

    bb14: {
        _41 = _7 as *const () (PtrToPtr);
        _42 = _41 as usize (Transmute);
        _43 = AlignOf(u32);
        _44 = Sub(_43, const 1_usize);
        _45 = BitAnd(_42, _44);
        _46 = Eq(_45, const 0_usize);
        assert(_46, "misaligned pointer dereference: address must be a multiple of {} but is {}", _43, _42) -> [success: bb13, unwind unreachable];
    }

    bb15: {
        _5 = (*_6);
        _7 = const {alloc2: *mut u32};
        _47 = _7 as *const () (PtrToPtr);
        _48 = _47 as usize (Transmute);
        _49 = AlignOf(u32);
        _50 = Sub(_49, const 1_usize);
        _51 = BitAnd(_48, _50);
        _52 = Eq(_51, const 0_usize);
        assert(_52, "misaligned pointer dereference: address must be a multiple of {} but is {}", _49, _48) -> [success: bb14, unwind unreachable];
    }
}

alloc2 (static: counter, size: 4, align: 4) {
    00 00 00 00                                     │ ....
}

alloc1 (static: trails, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn d::<impl at ui/drop/issue-23338-ensure-param-drop-order.rs:135:5: 135:19>::incr(_1: &D<'_>) -> D<'_> {
    debug self => _1;
    let mut _0: d::D<'_>;
    let mut _2: &str;
    let mut _3: u32;
    let mut _4: u32;
    let mut _5: &std::cell::RefCell<std::vec::Vec<u32>>;

    bb0: {
        _2 = ((*_1).0: &str);
        _4 = ((*_1).1: u32);
        _3 = Add(move _4, const 1_u32);
        _5 = deref_copy ((*_1).4: &std::cell::RefCell<std::vec::Vec<u32>>);
        _0 = D::<'_>::new(move _2, move _3, _5) -> bb1;
    }

    bb1: {
        return;
    }
}

fn d::<impl at ui/drop/issue-23338-ensure-param-drop-order.rs:154:5: 154:28>::drop(_1: &mut D<'_>) -> () {
    debug self => _1;
    let mut _0: ();
    let mut _2: u64;
    let mut _3: u64;
    let mut _4: u32;
    let mut _5: *mut u64;
    let _6: ();
    let mut _7: &mut std::vec::Vec<u32>;
    let mut _8: &mut std::vec::Vec<u32>;
    let mut _9: &mut std::cell::RefMut<'_, std::vec::Vec<u32>>;
    let mut _10: std::cell::RefMut<'_, std::vec::Vec<u32>>;
    let mut _11: u32;
    let _12: ();
    let mut _13: u32;
    let mut _14: &str;
    let _15: &str;
    let _16: &std::string::String;
    let _17: std::string::String;
    let _18: std::string::String;
    let mut _19: std::fmt::Arguments<'_>;
    let mut _20: &[&str];
    let _21: &[&str; 1];
    let _22: [&str; 1];
    let mut _23: &[core::fmt::rt::Argument<'_>];
    let _24: &[core::fmt::rt::Argument<'_>; 1];
    let _25: [core::fmt::rt::Argument<'_>; 1];
    let mut _26: core::fmt::rt::Argument<'_>;
    let _27: &&mut d::D<'_>;
    let _28: ();
    let _29: &str;
    let mut _30: &std::cell::RefCell<std::vec::Vec<u32>>;
    scope 1 {
        let mut _31: *const ();
        let mut _32: usize;
        let mut _33: usize;
        let mut _34: usize;
        let mut _35: usize;
        let mut _36: bool;
        let mut _37: *const ();
        let mut _38: usize;
        let mut _39: usize;
        let mut _40: usize;
        let mut _41: usize;
        let mut _42: bool;
    }
    scope 2 {
        debug res => _18;
    }

    bb0: {
        _4 = ((*_1).3: u32);
        _3 = Shl(const 1_u64, move _4);
        _2 = Not(move _3);
        _5 = const {alloc1: *mut u64};
        _37 = _5 as *const () (PtrToPtr);
        _38 = _37 as usize (Transmute);
        _39 = AlignOf(u64);
        _40 = Sub(_39, const 1_usize);
        _41 = BitAnd(_38, _40);
        _42 = Eq(_41, const 0_usize);
        assert(_42, "misaligned pointer dereference: address must be a multiple of {} but is {}", _39, _38) -> [success: bb16, unwind unreachable];
    }

    bb1: {
        _9 = &mut _10;
        _8 = <RefMut<'_, Vec<u32>> as DerefMut>::deref_mut(move _9) -> [return: bb2, unwind: bb13];
    }

    bb2: {
        _7 = _8;
        _11 = ((*_1).2: u32);
        _6 = Vec::<u32>::push(move _7, move _11) -> [return: bb3, unwind: bb13];
    }

    bb3: {
        drop(_10) -> bb4;
    }

    bb4: {
        _13 = ((*_1).3: u32);
        _22 = [const "+-- Drop "];
        _21 = &_22;
        _20 = _21 as &[&str] (Pointer(Unsize));
        _27 = &_1;
        _26 = core::fmt::rt::Argument::<'_>::new_display::<&mut D<'_>>(_27) -> bb5;
    }

    bb5: {
        _25 = [move _26];
        _24 = &_25;
        _23 = _24 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _19 = Arguments::<'_>::new_v1(move _20, move _23) -> bb6;
    }

    bb6: {
        _18 = format(move _19) -> bb7;
    }

    bb7: {
        _17 = move _18;
        _16 = &_17;
        _15 = <String as Deref>::deref(_16) -> [return: bb8, unwind: bb12];
    }

    bb8: {
        _14 = _15;
        _12 = indent_println(move _13, move _14) -> [return: bb9, unwind: bb12];
    }

    bb9: {
        drop(_17) -> bb10;
    }

    bb10: {
        _29 = const "";
        _28 = indent_println(const _, _29) -> bb11;
    }

    bb11: {
        return;
    }

    bb12 (cleanup): {
        drop(_17) -> [return: bb14, unwind terminate];
    }

    bb13 (cleanup): {
        drop(_10) -> [return: bb14, unwind terminate];
    }

    bb14 (cleanup): {
        resume;
    }

    bb15: {
        (*_5) = BitAnd((*_5), move _2);
        _30 = deref_copy ((*_1).4: &std::cell::RefCell<std::vec::Vec<u32>>);
        _10 = RefCell::<Vec<u32>>::borrow_mut(_30) -> bb1;
    }

    bb16: {
        _31 = _5 as *const () (PtrToPtr);
        _32 = _31 as usize (Transmute);
        _33 = AlignOf(u64);
        _34 = Sub(_33, const 1_usize);
        _35 = BitAnd(_32, _34);
        _36 = Eq(_35, const 0_usize);
        assert(_36, "misaligned pointer dereference: address must be a multiple of {} but is {}", _33, _32) -> [success: bb15, unwind unreachable];
    }
}

alloc1 (static: trails, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}
