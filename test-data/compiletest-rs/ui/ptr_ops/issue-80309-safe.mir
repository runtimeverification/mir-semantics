// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn zero(_1: usize) -> usize {
    debug x => _1;
    let mut _0: usize;
    let mut _2: usize;
    let mut _3: *const i8;
    let mut _4: *const i8;

    bb0: {
        _4 = null::<i8>() -> bb1;
    }

    bb1: {
        _3 = ptr::const_ptr::<impl *const i8>::wrapping_add(move _4, _1) -> bb2;
    }

    bb2: {
        _2 = move _3 as usize (PointerExposeAddress);
        _0 = Sub(move _2, _1);
        return;
    }
}

fn qux(_1: &[i8]) -> i8 {
    debug x => _1;
    let mut _0: i8;
    let _2: usize;
    let mut _3: usize;
    let mut _4: *const i8;
    let mut _5: usize;
    let mut _6: bool;

    bb0: {
        _4 = core::slice::<impl [i8]>::as_ptr(_1) -> bb1;
    }

    bb1: {
        _3 = move _4 as usize (PointerExposeAddress);
        _2 = zero(move _3) -> bb2;
    }

    bb2: {
        _5 = Len((*_1));
        _6 = Lt(_2, _5);
        assert(move _6, "index out of bounds: the length is {} but the index is {}", move _5, _2) -> bb3;
    }

    bb3: {
        _0 = (*_1)[_2];
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<i8>;
    let mut _2: std::boxed::Box<[i8]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[i8; 2]>;
    let _7: ();
    let mut _8: std::fmt::Arguments<'_>;
    let mut _9: &[&str];
    let _10: &[&str; 2];
    let _11: [&str; 2];
    let mut _12: &[core::fmt::rt::Argument<'_>];
    let _13: &[core::fmt::rt::Argument<'_>; 1];
    let _14: [core::fmt::rt::Argument<'_>; 1];
    let mut _15: core::fmt::rt::Argument<'_>;
    let _16: &i8;
    let _17: i8;
    let mut _18: &[i8];
    let _19: &[i8];
    let _20: &std::vec::Vec<i8>;
    let mut _21: *const [i8; 2];
    scope 1 {
        debug z => _1;
    }
    scope 2 {
    }

    bb0: {
        _3 = SizeOf([i8; 2]);
        _4 = AlignOf([i8; 2]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> bb1;
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [i8; 2]);
        _21 = (((_6.0: std::ptr::Unique<[i8; 2]>).0: std::ptr::NonNull<[i8; 2]>).0: *const [i8; 2]);
        (*_21) = [const 42_i8, const 43_i8];
        _2 = move _6 as std::boxed::Box<[i8]> (Pointer(Unsize));
        _1 = slice::<impl [i8]>::into_vec::<std::alloc::Global>(move _2) -> bb2;
    }

    bb2: {
        _11 = [const "", const "\n"];
        _10 = &_11;
        _9 = _10 as &[&str] (Pointer(Unsize));
        _20 = &_1;
        _19 = <Vec<i8> as Deref>::deref(_20) -> [return: bb3, unwind: bb9];
    }

    bb3: {
        _18 = _19;
        _17 = qux(move _18) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        _16 = &_17;
        _15 = core::fmt::rt::Argument::<'_>::new_display::<i8>(_16) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        _14 = [move _15];
        _13 = &_14;
        _12 = _13 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _8 = Arguments::<'_>::new_v1(move _9, move _12) -> [return: bb6, unwind: bb9];
    }

    bb6: {
        _7 = _print(move _8) -> [return: bb7, unwind: bb9];
    }

    bb7: {
        drop(_1) -> bb8;
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_1) -> [return: bb10, unwind terminate];
    }

    bb10 (cleanup): {
        resume;
    }
}
