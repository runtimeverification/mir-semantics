// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::boxed::Box<isize>;
    let mut _3: std::boxed::Box<isize>;
    let mut _4: &std::boxed::Box<isize>;
    let mut _5: [closure@ui/last-use-is-capture.rs:12:12: 12:14];
    let mut _6: &std::boxed::Box<isize>;
    scope 1 {
        debug k => _1;
        let _2: A;
        scope 2 {
            debug _u => _2;
        }
    }

    bb0: {
        _1 = <isize as Into<Box<isize>>>::into(const 22_isize) -> bb1;
    }

    bb1: {
        _4 = &_1;
        _3 = <Box<isize> as Clone>::clone(move _4) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _2 = A { a: move _3 };
        _6 = &_1;
        _5 = [closure@ui/last-use-is-capture.rs:12:12: 12:14] { k: move _6 };
        _0 = invoke::<[closure@ui/last-use-is-capture.rs:12:12: 12:14]>(move _5) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        drop(_2) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        drop(_1) -> bb5;
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        drop(_1) -> [return: bb8, unwind terminate];
    }

    bb8 (cleanup): {
        resume;
    }
}

fn invoke(_1: F) -> () {
    debug f => _1;
    let mut _0: ();
    let _2: ();

    bb0: {
        _2 = <F as FnOnce<()>>::call_once(move _1, const ()) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main::{closure#0}(_1: [closure@ui/last-use-is-capture.rs:12:12: 12:14]) -> () {
    debug k => (*(_1.0: &std::boxed::Box<isize>));
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 2];
    let _6: [&str; 2];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &std::boxed::Box<isize>;
    let _12: std::boxed::Box<isize>;
    let mut _13: &std::boxed::Box<isize>;

    bb0: {
        _6 = [const "", const "\n"];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _13 = deref_copy (_1.0: &std::boxed::Box<isize>);
        _12 = <Box<isize> as Clone>::clone(_13) -> bb1;
    }

    bb1: {
        _11 = &_12;
        _10 = core::fmt::rt::Argument::<'_>::new_display::<Box<isize>>(_11) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _2 = _print(move _3) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_12) -> bb5;
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_12) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }
}
