// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (&[i32], &[i32]);
    let mut _2: &[i32];
    let _3: &[i32];
    let mut _4: &[i32; 3];
    let _5: [i32; 3];
    let mut _6: &[i32];
    let _7: &[i32];
    let mut _8: &std::vec::Vec<i32>;
    let _9: std::vec::Vec<i32>;
    let mut _10: std::boxed::Box<[i32]>;
    let mut _11: usize;
    let mut _12: usize;
    let mut _13: *mut u8;
    let mut _14: std::boxed::Box<[i32; 3]>;
    let _15: &[i32];
    let _16: &[i32];
    let mut _17: bool;
    let mut _18: bool;
    let _20: !;
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _22: *const [i32; 3];
    let mut _23: *const ();
    let mut _24: usize;
    let mut _25: usize;
    let mut _26: usize;
    let mut _27: usize;
    let mut _28: bool;
    scope 1 {
    }
    scope 2 {
        debug left_val => _15;
        debug right_val => _16;
        let _19: core::panicking::AssertKind;
        scope 3 {
            debug kind => _19;
        }
    }

    bb0: {
        _5 = [const 1_i32, const 2_i32, const 3_i32];
        _4 = &_5;
        _3 = <[i32; 3] as Index<RangeFull>>::index(move _4, const RangeFull) -> bb1;
    }

    bb1: {
        _2 = _3;
        _11 = SizeOf([i32; 3]);
        _12 = AlignOf([i32; 3]);
        _13 = alloc::alloc::exchange_malloc(move _11, move _12) -> bb2;
    }

    bb2: {
        _14 = ShallowInitBox(move _13, [i32; 3]);
        _22 = (((_14.0: std::ptr::Unique<[i32; 3]>).0: std::ptr::NonNull<[i32; 3]>).0: *const [i32; 3]);
        _23 = _22 as *const () (PtrToPtr);
        _24 = _23 as usize (Transmute);
        _25 = AlignOf(i32);
        _26 = Sub(_25, const 1_usize);
        _27 = BitAnd(_24, _26);
        _28 = Eq(_27, const 0_usize);
        assert(_28, "misaligned pointer dereference: address must be a multiple of {} but is {}", _25, _24) -> [success: bb11, unwind unreachable];
    }

    bb3: {
        _8 = &_9;
        _7 = <Vec<i32> as Index<RangeFull>>::index(move _8, const RangeFull) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        _6 = _7;
        _1 = (move _2, move _6);
        _15 = (_1.0: &[i32]);
        _16 = (_1.1: &[i32]);
        _18 = <[i32] as PartialEq>::eq(_15, _16) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        _17 = Not(move _18);
        switchInt(move _17) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _19 = core::panicking::AssertKind::Eq;
        _21 = Option::<Arguments<'_>>::None;
        _20 = core::panicking::assert_failed::<[i32], [i32]>(move _19, _15, _16, move _21) -> bb9;
    }

    bb7: {
        drop(_9) -> bb8;
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_9) -> [return: bb10, unwind terminate];
    }

    bb10 (cleanup): {
        resume;
    }

    bb11: {
        (*_22) = [const 1_i32, const 2_i32, const 3_i32];
        _10 = move _14 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _9 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _10) -> bb3;
    }
}
