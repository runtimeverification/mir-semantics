// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: [closure@ui/macros/issue-26322.rs:18:19: 18:21];
    let mut _3: std::option::Option<i32>;
    let mut _4: isize;
    let mut _6: (&(u32, u32), &(u32, u32));
    let mut _7: &(u32, u32);
    let _8: (u32, u32);
    let mut _9: &[closure@ui/macros/issue-26322.rs:18:19: 18:21];
    let mut _10: &(u32, u32);
    let _11: (u32, u32);
    let mut _14: bool;
    let mut _15: bool;
    let _17: !;
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _19: (&(u32, u32), &(u32, u32));
    let mut _20: &(u32, u32);
    let mut _21: &(u32, u32);
    let _22: (u32, u32);
    let mut _25: bool;
    let mut _26: bool;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _30: (&(u32, u32), &(u32, u32));
    let mut _31: &(u32, u32);
    let mut _32: &(u32, u32);
    let _33: (u32, u32);
    let mut _36: bool;
    let mut _37: bool;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _42: &[closure@ui/macros/issue-26322.rs:13:10: 13:12];
    let _43: [closure@ui/macros/issue-26322.rs:13:10: 13:12];
    let mut _44: (&(u32, u32), &(u32, u32));
    let mut _45: &(u32, u32);
    let mut _46: &(u32, u32);
    let _47: (u32, u32);
    let mut _50: bool;
    let mut _51: bool;
    let _53: !;
    let mut _54: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug closure => const ZeroSized: [closure@ui/macros/issue-26322.rs:18:19: 18:21];
        let _2: (u32, u32);
        scope 2 {
            debug iflet => _2;
            let _5: (u32, u32);
            scope 4 {
                debug cl => _5;
                let _12: &(u32, u32);
                let _13: &(u32, u32);
                let _23: &(u32, u32);
                let _24: &(u32, u32);
                let _34: &(u32, u32);
                let _35: &(u32, u32);
                let _41: (u32, u32);
                scope 5 {
                    debug left_val => _12;
                    debug right_val => _13;
                    let _16: core::panicking::AssertKind;
                    scope 6 {
                        debug kind => _16;
                    }
                }
                scope 7 {
                    debug left_val => _23;
                    debug right_val => _24;
                    let _27: core::panicking::AssertKind;
                    scope 8 {
                        debug kind => _27;
                    }
                }
                scope 9 {
                    debug left_val => _34;
                    debug right_val => _35;
                    let _38: core::panicking::AssertKind;
                    scope 10 {
                        debug kind => _38;
                    }
                }
                scope 11 {
                    debug indirect => _41;
                    let _48: &(u32, u32);
                    let _49: &(u32, u32);
                    scope 12 {
                        debug left_val => _48;
                        debug right_val => _49;
                        let _52: core::panicking::AssertKind;
                        scope 13 {
                            debug kind => _52;
                        }
                    }
                }
            }
        }
        scope 3 {
        }
    }

    bb0: {
        _3 = Option::<i32>::Some(const 0_i32);
        _4 = discriminant(_3);
        switchInt(move _4) -> [1: bb1, otherwise: bb2];
    }

    bb1: {
        _2 = (const 9_u32, const 22_u32);
        goto -> bb3;
    }

    bb2: {
        _2 = (const 0_u32, const 0_u32);
        goto -> bb3;
    }

    bb3: {
        _5 = (const 14_u32, const 24_u32);
        _9 = &_1;
        _8 = <[closure@ui/macros/issue-26322.rs:18:19: 18:21] as Fn<()>>::call(move _9, const ()) -> bb4;
    }

    bb4: {
        _7 = &_8;
        _11 = (const 9_u32, const 19_u32);
        _10 = &_11;
        _6 = (move _7, move _10);
        _12 = (_6.0: &(u32, u32));
        _13 = (_6.1: &(u32, u32));
        _15 = <(u32, u32) as PartialEq>::eq(_12, _13) -> bb5;
    }

    bb5: {
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _16 = core::panicking::AssertKind::Eq;
        _18 = Option::<Arguments<'_>>::None;
        _17 = core::panicking::assert_failed::<(u32, u32), (u32, u32)>(move _16, _12, _13, move _18);
    }

    bb7: {
        _20 = &_2;
        _22 = (const 9_u32, const 22_u32);
        _21 = &_22;
        _19 = (move _20, move _21);
        _23 = (_19.0: &(u32, u32));
        _24 = (_19.1: &(u32, u32));
        _26 = <(u32, u32) as PartialEq>::eq(_23, _24) -> bb8;
    }

    bb8: {
        _25 = Not(move _26);
        switchInt(move _25) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<(u32, u32), (u32, u32)>(move _27, _23, _24, move _29);
    }

    bb10: {
        _31 = &_5;
        _33 = (const 14_u32, const 24_u32);
        _32 = &_33;
        _30 = (move _31, move _32);
        _34 = (_30.0: &(u32, u32));
        _35 = (_30.1: &(u32, u32));
        _37 = <(u32, u32) as PartialEq>::eq(_34, _35) -> bb11;
    }

    bb11: {
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<(u32, u32), (u32, u32)>(move _38, _34, _35, move _40);
    }

    bb13: {
        _42 = &_43;
        _41 = <[closure@ui/macros/issue-26322.rs:13:10: 13:12] as Fn<()>>::call(move _42, const ()) -> bb14;
    }

    bb14: {
        _45 = &_41;
        _47 = (const 20_u32, const 28_u32);
        _46 = &_47;
        _44 = (move _45, move _46);
        _48 = (_44.0: &(u32, u32));
        _49 = (_44.1: &(u32, u32));
        _51 = <(u32, u32) as PartialEq>::eq(_48, _49) -> bb15;
    }

    bb15: {
        _50 = Not(move _51);
        switchInt(move _50) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _52 = core::panicking::AssertKind::Eq;
        _54 = Option::<Arguments<'_>>::None;
        _53 = core::panicking::assert_failed::<(u32, u32), (u32, u32)>(move _52, _48, _49, move _54);
    }

    bb17: {
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/macros/issue-26322.rs:18:19: 18:21]) -> (u32, u32) {
    let mut _0: (u32, u32);

    bb0: {
        _0 = (const 9_u32, const 19_u32);
        return;
    }
}

fn main::{closure#1}(_1: &[closure@ui/macros/issue-26322.rs:13:10: 13:12]) -> (u32, u32) {
    let mut _0: (u32, u32);

    bb0: {
        _0 = (const 20_u32, const 28_u32);
        return;
    }
}
