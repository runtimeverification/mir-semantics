// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Change::Down::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const -1_isize;
        return;
    }
}

Change::None::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 0_isize;
        return;
    }
}

Change::Up::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 1_isize;
        return;
    }
}

fn foo(_1: i32) -> Option<Change> {
    debug value => _1;
    let mut _0: std::option::Option<Change>;
    let mut _2: Change;
    let mut _3: Change;
    let mut _4: Change;

    bb0: {
        switchInt(_1) -> [4294967295: bb2, 0: bb3, 1: bb4, otherwise: bb1];
    }

    bb1: {
        _0 = Option::<Change>::None;
        goto -> bb5;
    }

    bb2: {
        _2 = Change::Down;
        _0 = Option::<Change>::Some(move _2);
        goto -> bb5;
    }

    bb3: {
        _3 = Change::None;
        _0 = Option::<Change>::Some(move _3);
        goto -> bb5;
    }

    bb4: {
        _4 = Change::Up;
        _0 = Option::<Change>::Some(move _4);
        goto -> bb5;
    }

    bb5: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: std::option::Option<Change>;
    let mut _2: isize;
    let mut _3: isize;
    let mut _4: !;
    scope 1 {
    }

    bb0: {
        _1 = foo(const -1_i32) -> bb1;
    }

    bb1: {
        _3 = discriminant(_1);
        switchInt(move _3) -> [1: bb2, otherwise: bb4];
    }

    bb2: {
        _2 = discriminant(((_1 as Some).0: Change));
        switchInt(move _2) -> [18446744073709551615: bb3, otherwise: bb4];
    }

    bb3: {
        return;
    }

    bb4: {
        _4 = begin_panic::<&str>(const "explicit panic");
    }
}
