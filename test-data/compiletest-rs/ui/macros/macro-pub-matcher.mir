// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const with_pub::A: i32 = {
    let mut _0: i32;

    bb0: {
        _0 = const 0_i32;
        return;
    }
}

fn with_pub::c() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

static with_pub::E: i32 = {
    let mut _0: i32;

    bb0: {
        _0 = const 0_i32;
        return;
    }
}

const without_pub::A: i32 = {
    let mut _0: i32;

    bb0: {
        _0 = const 0_i32;
        return;
    }
}

fn without_pub::c() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

static without_pub::E: i32 = {
    let mut _0: i32;

    bb0: {
        _0 = const 0_i32;
        return;
    }
}

const with_pub_restricted::A: i32 = {
    let mut _0: i32;

    bb0: {
        _0 = const 0_i32;
        return;
    }
}

fn with_pub_restricted::c() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

static with_pub_restricted::E: i32 = {
    let mut _0: i32;

    bb0: {
        _0 = const 0_i32;
        return;
    }
}

const with_crate::A: i32 = {
    let mut _0: i32;

    bb0: {
        _0 = const 0_i32;
        return;
    }
}

fn with_crate::c() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

static with_crate::E: i32 = {
    let mut _0: i32;

    bb0: {
        _0 = const 0_i32;
        return;
    }
}

const with_pub_restricted_path::A: i32 = {
    let mut _0: i32;

    bb0: {
        _0 = const 0_i32;
        return;
    }
}

fn with_pub_restricted_path::c() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

static with_pub_restricted_path::E: i32 = {
    let mut _0: i32;

    bb0: {
        _0 = const 0_i32;
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn D(_1: i32, _2: i32, _3: i32) -> D {
    let mut _0: test_struct::D;

    bb0: {
        _0 = D(move _1, move _2, move _3);
        return;
    }
}

// MIR FOR CTFE
fn D(_1: i32, _2: i32, _3: i32) -> D {
    let mut _0: test_struct::D;

    bb0: {
        _0 = D(move _1, move _2, move _3);
        return;
    }
}

fn E(_1: i32, _2: i32, _3: i32) -> E {
    let mut _0: test_struct::E;

    bb0: {
        _0 = E(move _1, move _2, move _3);
        return;
    }
}

// MIR FOR CTFE
fn E(_1: i32, _2: i32, _3: i32) -> E {
    let mut _0: test_struct::E;

    bb0: {
        _0 = E(move _1, move _2, move _3);
        return;
    }
}

fn test_struct::F(_1: i32, _2: i32, _3: i32) -> test_struct::F {
    let mut _0: test_struct::F;

    bb0: {
        _0 = test_struct::F(move _1, move _2, move _3);
        return;
    }
}

// MIR FOR CTFE
fn test_struct::F(_1: i32, _2: i32, _3: i32) -> test_struct::F {
    let mut _0: test_struct::F;

    bb0: {
        _0 = test_struct::F(move _1, move _2, move _3);
        return;
    }
}
