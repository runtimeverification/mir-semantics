// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let _4: &[&str; 2];
    let _5: [&str; 2];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &f32;
    let _11: f32;
    let mut _12: &[core::fmt::rt::Placeholder];
    let _13: &[core::fmt::rt::Placeholder; 1];
    let _14: [core::fmt::rt::Placeholder; 1];
    let mut _15: core::fmt::rt::Placeholder;
    let mut _16: core::fmt::rt::Alignment;
    let mut _17: core::fmt::rt::Count;
    let mut _18: core::fmt::rt::Count;
    let mut _19: core::fmt::rt::UnsafeArg;
    let _20: ();
    let mut _21: std::fmt::Arguments<'_>;
    let mut _22: &[&str];
    let _23: &[&str; 2];
    let _24: [&str; 2];
    let mut _25: &[core::fmt::rt::Argument<'_>];
    let _26: &[core::fmt::rt::Argument<'_>; 1];
    let _27: [core::fmt::rt::Argument<'_>; 1];
    let mut _28: core::fmt::rt::Argument<'_>;
    let _29: &f32;
    let _30: f32;
    let mut _31: &[core::fmt::rt::Placeholder];
    let _32: &[core::fmt::rt::Placeholder; 1];
    let _33: [core::fmt::rt::Placeholder; 1];
    let mut _34: core::fmt::rt::Placeholder;
    let mut _35: core::fmt::rt::Alignment;
    let mut _36: core::fmt::rt::Count;
    let mut _37: core::fmt::rt::Count;
    let mut _38: core::fmt::rt::UnsafeArg;
    let _39: ();
    let mut _40: std::fmt::Arguments<'_>;
    let mut _41: &[&str];
    let _42: &[&str; 2];
    let _43: [&str; 2];
    let mut _44: &[core::fmt::rt::Argument<'_>];
    let _45: &[core::fmt::rt::Argument<'_>; 1];
    let _46: [core::fmt::rt::Argument<'_>; 1];
    let mut _47: core::fmt::rt::Argument<'_>;
    let _48: &f32;
    let _49: f32;
    let _50: ();
    let mut _51: std::fmt::Arguments<'_>;
    let mut _52: &[&str];
    let _53: &[&str; 2];
    let _54: [&str; 2];
    let mut _55: &[core::fmt::rt::Argument<'_>];
    let _56: &[core::fmt::rt::Argument<'_>; 1];
    let _57: [core::fmt::rt::Argument<'_>; 1];
    let mut _58: core::fmt::rt::Argument<'_>;
    let _59: &f32;
    let _60: f32;
    let _61: ();
    let mut _62: std::fmt::Arguments<'_>;
    let mut _63: &[&str];
    let _64: &[&str; 2];
    let _65: [&str; 2];
    let mut _66: &[core::fmt::rt::Argument<'_>];
    let _67: &[core::fmt::rt::Argument<'_>; 1];
    let _68: [core::fmt::rt::Argument<'_>; 1];
    let mut _69: core::fmt::rt::Argument<'_>;
    let _70: &f32;
    let _71: f32;
    scope 1 {
    }
    scope 2 {
    }

    bb0: {
        _5 = [const "Hello ", const "!\n"];
        _4 = &_5;
        _3 = _4 as &[&str] (Pointer(Unsize));
        _11 = const 0.0199999996f32;
        _10 = &_11;
        _9 = core::fmt::rt::Argument::<'_>::new_display::<f32>(_10) -> bb1;
    }

    bb1: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _16 = core::fmt::rt::Alignment::Unknown;
        _17 = core::fmt::rt::Count::Is(const 1_usize) -> bb2;
    }

    bb2: {
        _18 = core::fmt::rt::Count::Implied;
        _15 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _16, const 0_u32, move _17, move _18) -> bb3;
    }

    bb3: {
        _14 = [move _15];
        _13 = &_14;
        _12 = _13 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _19 = core::fmt::rt::UnsafeArg::new() -> bb4;
    }

    bb4: {
        _2 = Arguments::<'_>::new_v1_formatted(move _3, move _6, move _12, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> bb5;
    }

    bb5: {
        _1 = _print(move _2) -> bb6;
    }

    bb6: {
        _24 = [const "Hello ", const "!\n"];
        _23 = &_24;
        _22 = _23 as &[&str] (Pointer(Unsize));
        _30 = const 0.0199999996f32;
        _29 = &_30;
        _28 = core::fmt::rt::Argument::<'_>::new_display::<f32>(_29) -> bb7;
    }

    bb7: {
        _27 = [move _28];
        _26 = &_27;
        _25 = _26 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _35 = core::fmt::rt::Alignment::Unknown;
        _36 = core::fmt::rt::Count::Is(const 1_usize) -> bb8;
    }

    bb8: {
        _37 = core::fmt::rt::Count::Is(const 1_usize) -> bb9;
    }

    bb9: {
        _34 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _35, const 0_u32, move _36, move _37) -> bb10;
    }

    bb10: {
        _33 = [move _34];
        _32 = &_33;
        _31 = _32 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _38 = core::fmt::rt::UnsafeArg::new() -> bb11;
    }

    bb11: {
        _21 = Arguments::<'_>::new_v1_formatted(move _22, move _25, move _31, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> bb12;
    }

    bb12: {
        _20 = _print(move _21) -> bb13;
    }

    bb13: {
        _43 = [const "Hello ", const "!\n"];
        _42 = &_43;
        _41 = _42 as &[&str] (Pointer(Unsize));
        _49 = const 0.0199999996f32;
        _48 = &_49;
        _47 = core::fmt::rt::Argument::<'_>::new_display::<f32>(_48) -> bb14;
    }

    bb14: {
        _46 = [move _47];
        _45 = &_46;
        _44 = _45 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _40 = Arguments::<'_>::new_v1(move _41, move _44) -> bb15;
    }

    bb15: {
        _39 = _print(move _40) -> bb16;
    }

    bb16: {
        _54 = [const "Hello ", const "!\n"];
        _53 = &_54;
        _52 = _53 as &[&str] (Pointer(Unsize));
        _60 = const 0.0199999996f32;
        _59 = &_60;
        _58 = core::fmt::rt::Argument::<'_>::new_display::<f32>(_59) -> bb17;
    }

    bb17: {
        _57 = [move _58];
        _56 = &_57;
        _55 = _56 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _51 = Arguments::<'_>::new_v1(move _52, move _55) -> bb18;
    }

    bb18: {
        _50 = _print(move _51) -> bb19;
    }

    bb19: {
        _65 = [const "Hello ", const "!\n"];
        _64 = &_65;
        _63 = _64 as &[&str] (Pointer(Unsize));
        _71 = const 0.0199999996f32;
        _70 = &_71;
        _69 = core::fmt::rt::Argument::<'_>::new_display::<f32>(_70) -> bb20;
    }

    bb20: {
        _68 = [move _69];
        _67 = &_68;
        _66 = _67 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _62 = Arguments::<'_>::new_v1(move _63, move _66) -> bb21;
    }

    bb21: {
        _61 = _print(move _62) -> bb22;
    }

    bb22: {
        return;
    }
}
