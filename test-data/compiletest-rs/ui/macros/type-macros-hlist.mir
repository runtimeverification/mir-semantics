// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/macros/type-macros-hlist.rs:6:16: 6:21>::clone(_1: &Nil) -> Nil {
    debug self => _1;
    let mut _0: Nil;

    bb0: {
        return;
    }
}

fn <impl at ui/macros/type-macros-hlist.rs:6:23: 6:28>::fmt(_1: &Nil, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "Nil";
        _0 = Formatter::<'_>::write_str(_2, _3) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/macros/type-macros-hlist.rs:6:30: 6:32>::assert_receiver_is_total_eq(_1: &Nil) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/macros/type-macros-hlist.rs:6:34: 6:37>::cmp(_1: &Nil, _2: &Nil) -> std::cmp::Ordering {
    debug self => _1;
    debug other => _2;
    let mut _0: std::cmp::Ordering;

    bb0: {
        _0 = Equal;
        return;
    }
}

fn <impl at ui/macros/type-macros-hlist.rs:6:39: 6:48>::eq(_1: &Nil, _2: &Nil) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;

    bb0: {
        _0 = const true;
        return;
    }
}

fn <impl at ui/macros/type-macros-hlist.rs:6:50: 6:60>::partial_cmp(_1: &Nil, _2: &Nil) -> Option<std::cmp::Ordering> {
    debug self => _1;
    debug other => _2;
    let mut _0: std::option::Option<std::cmp::Ordering>;
    let mut _3: std::cmp::Ordering;

    bb0: {
        _3 = Equal;
        _0 = Option::<std::cmp::Ordering>::Some(move _3);
        return;
    }
}

fn <impl at ui/macros/type-macros-hlist.rs:9:16: 9:21>::clone(_1: &Cons<H, T>) -> Cons<H, T> {
    debug self => _1;
    let mut _0: Cons<H, T>;
    let mut _2: H;
    let _3: &H;
    let mut _4: T;
    let _5: &T;

    bb0: {
        _3 = &((*_1).0: H);
        _2 = <H as Clone>::clone(_3) -> bb1;
    }

    bb1: {
        _5 = &((*_1).1: T);
        _4 = <T as Clone>::clone(_5) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        _0 = Cons::<H, T>(move _2, move _4);
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn <impl at ui/macros/type-macros-hlist.rs:9:23: 9:28>::fmt(_1: &Cons<H, T>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &H;
    let mut _6: &dyn std::fmt::Debug;
    let _7: &&T;
    let _8: &T;

    bb0: {
        _3 = const "Cons";
        _5 = &((*_1).0: H);
        _4 = _5 as &dyn std::fmt::Debug (Pointer(Unsize));
        _8 = &((*_1).1: T);
        _7 = &_8;
        _6 = _7 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field2_finish(_2, _3, move _4, move _6) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/macros/type-macros-hlist.rs:9:30: 9:32>::assert_receiver_is_total_eq(_1: &Cons<H, T>) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        return;
    }
}

fn <impl at ui/macros/type-macros-hlist.rs:9:34: 9:37>::cmp(_1: &Cons<H, T>, _2: &Cons<H, T>) -> std::cmp::Ordering {
    debug self => _1;
    debug other => _2;
    let mut _0: std::cmp::Ordering;
    let mut _3: std::cmp::Ordering;
    let _4: &H;
    let _5: &H;
    let mut _6: i8;
    let _7: &T;
    let _8: &T;
    let _9: std::cmp::Ordering;
    scope 1 {
        debug cmp => _9;
    }

    bb0: {
        _4 = &((*_1).0: H);
        _5 = &((*_2).0: H);
        _3 = <H as Ord>::cmp(_4, _5) -> bb1;
    }

    bb1: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _9 = _3;
        _0 = _9;
        goto -> bb4;
    }

    bb3: {
        _7 = &((*_1).1: T);
        _8 = &((*_2).1: T);
        _0 = <T as Ord>::cmp(_7, _8) -> bb4;
    }

    bb4: {
        return;
    }
}

fn <impl at ui/macros/type-macros-hlist.rs:9:39: 9:48>::eq(_1: &Cons<H, T>, _2: &Cons<H, T>) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: &H;
    let mut _5: &H;
    let mut _6: bool;
    let mut _7: &T;
    let mut _8: &T;

    bb0: {
        _4 = &((*_1).0: H);
        _5 = &((*_2).0: H);
        _3 = <H as PartialEq>::eq(move _4, move _5) -> bb4;
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _7 = &((*_1).1: T);
        _8 = &((*_2).1: T);
        _6 = <T as PartialEq>::eq(move _7, move _8) -> bb5;
    }

    bb3: {
        return;
    }

    bb4: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2];
    }

    bb5: {
        _0 = move _6;
        goto -> bb3;
    }
}

fn <impl at ui/macros/type-macros-hlist.rs:9:50: 9:60>::partial_cmp(_1: &Cons<H, T>, _2: &Cons<H, T>) -> Option<std::cmp::Ordering> {
    debug self => _1;
    debug other => _2;
    let mut _0: std::option::Option<std::cmp::Ordering>;
    let mut _3: std::option::Option<std::cmp::Ordering>;
    let _4: &H;
    let _5: &H;
    let mut _6: i8;
    let mut _7: isize;
    let _8: &T;
    let _9: &T;
    let _10: std::option::Option<std::cmp::Ordering>;
    scope 1 {
        debug cmp => _10;
    }

    bb0: {
        _4 = &((*_1).0: H);
        _5 = &((*_2).0: H);
        _3 = <H as PartialOrd>::partial_cmp(_4, _5) -> bb1;
    }

    bb1: {
        _7 = discriminant(_3);
        switchInt(move _7) -> [1: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = _3;
        _0 = _10;
        goto -> bb5;
    }

    bb3: {
        _6 = discriminant(((_3 as Some).0: std::cmp::Ordering));
        switchInt(move _6) -> [0: bb4, otherwise: bb2];
    }

    bb4: {
        _8 = &((*_1).1: T);
        _9 = &((*_2).1: T);
        _0 = <T as PartialOrd>::partial_cmp(_8, _9) -> bb5;
    }

    bb5: {
        return;
    }
}

fn <impl at ui/macros/type-macros-hlist.rs:31:1: 31:33>::add(_1: Nil, _2: Ys) -> Ys {
    debug self => const Nil;
    debug rhs => _2;
    let mut _0: Ys;

    bb0: {
        _0 = move _2;
        return;
    }
}

fn <impl at ui/macros/type-macros-hlist.rs:41:1: 41:75>::add(_1: Cons<X, Xs>, _2: Ys) -> Cons<X, Rec> {
    debug self => _1;
    debug rhs => _2;
    let mut _0: Cons<X, Rec>;
    let mut _3: X;
    let mut _4: Rec;
    let mut _5: Xs;

    bb0: {
        _3 = move (_1.0: X);
        _5 = move (_1.1: Xs);
        _4 = <Xs as std::ops::Add<Ys>>::add(move _5, move _2) -> [return: bb1, unwind: bb2];
    }

    bb1: {
        _0 = Cons::<X, Rec>(move _3, move _4);
        return;
    }

    bb2 (cleanup): {
        drop(_3) -> [return: bb3, unwind terminate];
    }

    bb3 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Cons<&str, Cons<bool, Cons<std::vec::Vec<u64>, Nil>>>;
    let _2: &str;
    let mut _3: Cons<bool, Cons<std::vec::Vec<u64>, Nil>>;
    let mut _4: Cons<std::vec::Vec<u64>, Nil>;
    let mut _5: std::vec::Vec<u64>;
    let mut _7: Cons<[u8; 3], Cons<(), Nil>>;
    let mut _8: [u8; 3];
    let mut _10: (&Cons<&str, Cons<bool, Cons<std::vec::Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>>>, &Cons<&str, Cons<bool, Cons<std::vec::Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>>>);
    let mut _11: &Cons<&str, Cons<bool, Cons<std::vec::Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>>>;
    let mut _12: &Cons<&str, Cons<bool, Cons<std::vec::Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>>>;
    let _13: Cons<&str, Cons<bool, Cons<std::vec::Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>>>;
    let mut _14: Cons<bool, Cons<std::vec::Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>>;
    let mut _15: Cons<std::vec::Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>;
    let mut _16: std::vec::Vec<u64>;
    let mut _17: Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>;
    let mut _18: Cons<[u8; 3], Cons<(), Nil>>;
    let mut _19: [u8; 3];
    let mut _22: bool;
    let mut _23: bool;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug xs => _1;
        let _6: Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>;
        scope 2 {
            debug ys => _6;
            let _9: Cons<&str, Cons<bool, Cons<std::vec::Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>>>;
            scope 3 {
                debug zs => _9;
                let _20: &Cons<&str, Cons<bool, Cons<std::vec::Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>>>;
                let _21: &Cons<&str, Cons<bool, Cons<std::vec::Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>>>;
                scope 4 {
                    debug left_val => _20;
                    debug right_val => _21;
                    let _24: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _24;
                    }
                }
            }
        }
    }

    bb0: {
        _2 = const "foo";
        _5 = Vec::<u64>::new() -> bb1;
    }

    bb1: {
        _4 = Cons::<Vec<u64>, Nil>(move _5, const Nil);
        _3 = Cons::<bool, Cons<Vec<u64>, Nil>>(const false, move _4);
        _1 = Cons::<&str, Cons<bool, Cons<Vec<u64>, Nil>>>(_2, move _3);
        _8 = [const 0_u8, const 1_u8, const 2_u8];
        _7 = Cons::<[u8; 3], Cons<(), Nil>>(move _8, const Cons::<(), Nil>((), Nil));
        _6 = Cons::<u64, Cons<[u8; 3], Cons<(), Nil>>>(const 0_u64, move _7);
        _9 = aux::<Cons<&str, Cons<bool, Cons<Vec<u64>, Nil>>>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>(move _1, _6) -> bb2;
    }

    bb2: {
        _11 = &_9;
        _16 = Vec::<u64>::new() -> [return: bb3, unwind: bb11];
    }

    bb3: {
        _19 = [const 0_u8, const 1_u8, const 2_u8];
        _18 = Cons::<[u8; 3], Cons<(), Nil>>(move _19, const Cons::<(), Nil>((), Nil));
        _17 = Cons::<u64, Cons<[u8; 3], Cons<(), Nil>>>(const 0_u64, move _18);
        _15 = Cons::<Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>(move _16, move _17);
        _14 = Cons::<bool, Cons<Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>>(const false, move _15);
        _13 = Cons::<&str, Cons<bool, Cons<Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>>>(const "foo", move _14);
        _12 = &_13;
        _10 = (move _11, move _12);
        _20 = (_10.0: &Cons<&str, Cons<bool, Cons<std::vec::Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>>>);
        _21 = (_10.1: &Cons<&str, Cons<bool, Cons<std::vec::Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>>>);
        _23 = <Cons<&str, Cons<bool, Cons<Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>>> as PartialEq>::eq(_20, _21) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<Cons<&str, Cons<bool, Cons<Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>>>, Cons<&str, Cons<bool, Cons<Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>>>>(move _24, _20, _21, move _26) -> bb9;
    }

    bb6: {
        drop(_9) -> [return: bb7, unwind: bb10];
    }

    bb7: {
        drop(_13) -> bb8;
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_9) -> [return: bb10, unwind terminate];
    }

    bb10 (cleanup): {
        drop(_13) -> [return: bb12, unwind terminate];
    }

    bb11 (cleanup): {
        drop(_9) -> [return: bb12, unwind terminate];
    }

    bb12 (cleanup): {
        resume;
    }
}

fn aux(_1: Xs, _2: Ys) -> <Xs as std::ops::Add<Ys>>::Output {
    debug xs => _1;
    debug ys => _2;
    let mut _0: <Xs as std::ops::Add<Ys>>::Output;

    bb0: {
        _0 = <Xs as std::ops::Add<Ys>>::add(move _1, move _2) -> bb1;
    }

    bb1: {
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

fn Cons(_1: H, _2: T) -> Cons<H, T> {
    let mut _0: Cons<H, T>;

    bb0: {
        _0 = Cons::<H, T>(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn Cons(_1: H, _2: T) -> Cons<H, T> {
    let mut _0: Cons<H, T>;

    bb0: {
        _0 = Cons::<H, T>(move _1, move _2);
        return;
    }
}
