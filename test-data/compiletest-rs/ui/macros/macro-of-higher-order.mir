// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: (usize, &str);
    let mut _2: usize;
    let mut _3: (&(usize, &str), &(usize, &str));
    let mut _4: &(usize, &str);
    let mut _5: &(usize, &str);
    let _6: (usize, &str);
    let mut _9: bool;
    let mut _10: bool;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: (&i32, &i32);
    let mut _15: &i32;
    let _16: i32;
    let mut _17: &i32;
    let _18: i32;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: i32;
    let mut _24: i32;
    let _26: !;
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug val => _1;
        let _7: &(usize, &str);
        let _8: &(usize, &str);
        let _19: &i32;
        let _20: &i32;
        scope 2 {
            debug left_val => _7;
            debug right_val => _8;
            let _11: core::panicking::AssertKind;
            scope 3 {
                debug kind => _11;
            }
        }
        scope 4 {
            debug left_val => _19;
            debug right_val => _20;
            let _25: core::panicking::AssertKind;
            scope 5 {
                debug kind => _25;
            }
        }
    }

    bb0: {
        _2 = Add(const 1_usize, const 2_usize);
        _1 = (move _2, const "foo");
        _4 = &_1;
        _6 = (const 3_usize, const "foo");
        _5 = &_6;
        _3 = (move _4, move _5);
        _7 = (_3.0: &(usize, &str));
        _8 = (_3.1: &(usize, &str));
        _10 = <(usize, &str) as PartialEq>::eq(_7, _8) -> bb1;
    }

    bb1: {
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<(usize, &str), (usize, &str)>(move _11, _7, _8, move _13);
    }

    bb3: {
        _16 = Add(const 2_i32, const 3_i32);
        _15 = &_16;
        _18 = const 5_i32;
        _17 = &_18;
        _14 = (move _15, move _17);
        _19 = (_14.0: &i32);
        _20 = (_14.1: &i32);
        _23 = (*_19);
        _24 = (*_20);
        _22 = Eq(move _23, move _24);
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _25 = core::panicking::AssertKind::Eq;
        _27 = Option::<Arguments<'_>>::None;
        _26 = core::panicking::assert_failed::<i32, i32>(move _25, _19, _20, move _27);
    }

    bb5: {
        return;
    }
}
