// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: &str;
    let mut _2: (&&str, &&str);
    let mut _3: &&str;
    let _4: &str;
    let mut _5: &&str;
    let mut _8: bool;
    let mut _9: bool;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _6: &&str;
        let _7: &&str;
        scope 2 {
            debug left_val => _6;
            debug right_val => _7;
            let _10: core::panicking::AssertKind;
            scope 3 {
                debug kind => _10;
            }
        }
    }

    bb0: {
        _1 = f(const "hi") -> bb1;
    }

    bb1: {
        _4 = const "hi";
        _3 = &_4;
        _5 = &_1;
        _2 = (move _3, move _5);
        _6 = (_2.0: &&str);
        _7 = (_2.1: &&str);
        _9 = <&str as PartialEq>::eq(_6, _7) -> bb2;
    }

    bb2: {
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<&str, &str>(move _10, _6, _7, move _12);
    }

    bb4: {
        return;
    }
}

fn f(_1: &str) -> &str {
    debug arg => _1;
    let mut _0: &str;

    bb0: {
        _0 = _1;
        return;
    }
}
