// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn fun(_1: i32) -> Option<Box<i32>> {
    debug x => _1;
    let mut _0: std::option::Option<std::boxed::Box<i32>>;
    let mut _2: std::boxed::Box<i32>;

    bb0: {
        _2 = Box::<i32>::new(_1) -> bb1;
    }

    bb1: {
        _0 = Option::<Box<i32>>::Some(move _2);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let _4: &[&str; 2];
    let _5: [&str; 2];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &std::boxed::Box<i32>;
    let _11: std::boxed::Box<i32>;
    let mut _12: std::option::Option<std::boxed::Box<i32>>;

    bb0: {
        _5 = [const "", const "\n"];
        _4 = &_5;
        _3 = _4 as &[&str] (Pointer(Unsize));
        _12 = fun(const 0_i32) -> bb1;
    }

    bb1: {
        _11 = Option::<Box<i32>>::unwrap(move _12) -> bb2;
    }

    bb2: {
        _10 = &_11;
        _9 = core::fmt::rt::Argument::<'_>::new_display::<Box<i32>>(_10) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_v1(move _3, move _6) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        _1 = _print(move _2) -> [return: bb5, unwind: bb7];
    }

    bb5: {
        drop(_11) -> bb6;
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_11) -> [return: bb8, unwind terminate];
    }

    bb8 (cleanup): {
        resume;
    }
}
