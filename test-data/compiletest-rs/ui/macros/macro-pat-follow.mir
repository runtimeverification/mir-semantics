// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: std::ops::Range<i32>;
    let mut _2: std::ops::Range<i32>;
    let mut _3: std::option::Option<i32>;
    let mut _4: &mut std::ops::Range<i32>;
    let mut _5: isize;
    let mut _6: std::option::Option<u8>;
    let mut _7: isize;
    let _8: u8;
    let _9: &u8;
    let mut _10: bool;
    let mut _11: u8;
    scope 1 {
        debug iter => _1;
        scope 2 {
        }
    }
    scope 3 {
        debug x => _8;
        debug x => _9;
    }

    bb0: {
        _2 = std::ops::Range::<i32> { start: const 0_i32, end: const 10_i32 };
        _1 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _2) -> bb1;
    }

    bb1: {
        _4 = &mut _1;
        _3 = <std::ops::Range<i32> as Iterator>::next(move _4) -> bb2;
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [1: bb1, otherwise: bb3];
    }

    bb3: {
        _6 = Option::<u8>::Some(const 1_u8);
        _7 = discriminant(_6);
        switchInt(move _7) -> [1: bb4, otherwise: bb6];
    }

    bb4: {
        _9 = &((_6 as Some).0: u8);
        _11 = (*_9);
        _10 = Gt(move _11, const 0_u8);
        switchInt(move _10) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _8 = ((_6 as Some).0: u8);
        goto -> bb6;
    }

    bb6: {
        return;
    }
}
