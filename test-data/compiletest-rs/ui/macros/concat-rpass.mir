// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (&std::string::String, &std::string::String);
    let mut _2: &std::string::String;
    let _3: std::string::String;
    let _4: std::string::String;
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let _7: &[&str; 1];
    let _8: [&str; 1];
    let mut _9: &[core::fmt::rt::Argument<'_>];
    let _10: &[core::fmt::rt::Argument<'_>; 0];
    let _11: [core::fmt::rt::Argument<'_>; 0];
    let mut _12: &std::string::String;
    let _13: std::string::String;
    let _14: &str;
    let _15: &std::string::String;
    let _16: &std::string::String;
    let mut _17: bool;
    let mut _18: bool;
    let _20: !;
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _22: (&std::string::String, &std::string::String);
    let mut _23: &std::string::String;
    let _24: std::string::String;
    let _25: std::string::String;
    let mut _26: std::fmt::Arguments<'_>;
    let mut _27: &[&str];
    let _28: &[&str; 0];
    let _29: [&str; 0];
    let mut _30: &std::string::String;
    let _31: std::string::String;
    let _32: &str;
    let _33: &std::string::String;
    let _34: &std::string::String;
    let mut _35: bool;
    let mut _36: bool;
    let _38: !;
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _40: (&std::string::String, &std::string::String);
    let mut _41: &std::string::String;
    let _42: std::string::String;
    let _43: &str;
    let mut _44: &std::string::String;
    let _45: std::string::String;
    let _46: &str;
    let _47: &std::string::String;
    let _48: &std::string::String;
    let mut _49: bool;
    let mut _50: bool;
    let _52: !;
    let mut _53: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _54: (&&str, &&str);
    let mut _55: &&str;
    let _56: &str;
    let mut _57: &&str;
    let _58: &str;
    let _59: &&str;
    let _60: &&str;
    let mut _61: bool;
    let mut _62: bool;
    let _64: !;
    let mut _65: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _66: bool;
    let mut _67: &str;
    let mut _68: bool;
    let mut _69: !;
    let mut _70: bool;
    scope 1 {
        debug res => _4;
    }
    scope 2 {
        debug left_val => _15;
        debug right_val => _16;
        let _19: core::panicking::AssertKind;
        scope 3 {
            debug kind => _19;
        }
    }
    scope 4 {
        debug res => _25;
    }
    scope 5 {
        debug left_val => _33;
        debug right_val => _34;
        let _37: core::panicking::AssertKind;
        scope 6 {
            debug kind => _37;
        }
    }
    scope 7 {
        debug left_val => _47;
        debug right_val => _48;
        let _51: core::panicking::AssertKind;
        scope 8 {
            debug kind => _51;
        }
    }
    scope 9 {
        debug left_val => _59;
        debug right_val => _60;
        let _63: core::panicking::AssertKind;
        scope 10 {
            debug kind => _63;
        }
    }

    bb0: {
        _8 = [const "foobarbaz"];
        _7 = &_8;
        _6 = _7 as &[&str] (Pointer(Unsize));
        _11 = core::fmt::rt::Argument::<'_>::none() -> bb1;
    }

    bb1: {
        _10 = &_11;
        _9 = _10 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _5 = Arguments::<'_>::new_v1(move _6, move _9) -> bb2;
    }

    bb2: {
        _4 = format(move _5) -> bb3;
    }

    bb3: {
        _3 = move _4;
        _2 = &_3;
        _14 = const "foobarbaz";
        _13 = <str as ToString>::to_string(_14) -> [return: bb4, unwind: bb36];
    }

    bb4: {
        _12 = &_13;
        _1 = (move _2, move _12);
        _15 = (_1.0: &std::string::String);
        _16 = (_1.1: &std::string::String);
        _18 = <String as PartialEq>::eq(_15, _16) -> [return: bb5, unwind: bb35];
    }

    bb5: {
        _17 = Not(move _18);
        switchInt(move _17) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _19 = core::panicking::AssertKind::Eq;
        _21 = Option::<Arguments<'_>>::None;
        _20 = core::panicking::assert_failed::<String, String>(move _19, _15, _16, move _21) -> bb35;
    }

    bb7: {
        drop(_13) -> [return: bb8, unwind: bb36];
    }

    bb8: {
        drop(_3) -> bb9;
    }

    bb9: {
        _28 = &_29;
        _27 = _28 as &[&str] (Pointer(Unsize));
        _26 = Arguments::<'_>::new_const(move _27) -> bb10;
    }

    bb10: {
        _25 = format(move _26) -> bb11;
    }

    bb11: {
        _24 = move _25;
        _23 = &_24;
        _32 = const "";
        _31 = <str as ToString>::to_string(_32) -> [return: bb12, unwind: bb34];
    }

    bb12: {
        _30 = &_31;
        _22 = (move _23, move _30);
        _33 = (_22.0: &std::string::String);
        _34 = (_22.1: &std::string::String);
        _36 = <String as PartialEq>::eq(_33, _34) -> [return: bb13, unwind: bb33];
    }

    bb13: {
        _35 = Not(move _36);
        switchInt(move _35) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _37 = core::panicking::AssertKind::Eq;
        _39 = Option::<Arguments<'_>>::None;
        _38 = core::panicking::assert_failed::<String, String>(move _37, _33, _34, move _39) -> bb33;
    }

    bb15: {
        drop(_31) -> [return: bb16, unwind: bb34];
    }

    bb16: {
        drop(_24) -> bb17;
    }

    bb17: {
        _43 = const "quxquux";
        _42 = <str as ToString>::to_string(_43) -> bb18;
    }

    bb18: {
        _41 = &_42;
        _46 = const "quxquux";
        _45 = <str as ToString>::to_string(_46) -> [return: bb19, unwind: bb32];
    }

    bb19: {
        _44 = &_45;
        _40 = (move _41, move _44);
        _47 = (_40.0: &std::string::String);
        _48 = (_40.1: &std::string::String);
        _50 = <String as PartialEq>::eq(_47, _48) -> [return: bb20, unwind: bb31];
    }

    bb20: {
        _49 = Not(move _50);
        switchInt(move _49) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _51 = core::panicking::AssertKind::Eq;
        _53 = Option::<Arguments<'_>>::None;
        _52 = core::panicking::assert_failed::<String, String>(move _51, _47, _48, move _53) -> bb31;
    }

    bb22: {
        drop(_45) -> [return: bb23, unwind: bb32];
    }

    bb23: {
        drop(_42) -> bb24;
    }

    bb24: {
        _56 = const "12344.0atrue";
        _55 = &_56;
        _58 = const "12344.0atrue";
        _57 = &_58;
        _54 = (move _55, move _57);
        _59 = (_54.0: &&str);
        _60 = (_54.1: &&str);
        _62 = <&str as PartialEq>::eq(_59, _60) -> bb25;
    }

    bb25: {
        _61 = Not(move _62);
        switchInt(move _61) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _63 = core::panicking::AssertKind::Eq;
        _65 = Option::<Arguments<'_>>::None;
        _64 = core::panicking::assert_failed::<&str, &str>(move _63, _59, _60, move _65);
    }

    bb27: {
        _67 = const "12344.0atrue";
        _68 = <str as PartialEq>::eq(_67, const "12344.0atrue") -> bb28;
    }

    bb28: {
        _70 = move _68;
        _66 = Not(_70);
        switchInt(move _66) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _69 = core::panicking::panic(const "assertion failed: match \\\"12344.0atrue\\\" {\\n    concat!(1, 2, 3, 4f32, 4.0, \\'a\\', true) => true,\\n    _ => false,\\n}");
    }

    bb30: {
        return;
    }

    bb31 (cleanup): {
        drop(_45) -> [return: bb32, unwind terminate];
    }

    bb32 (cleanup): {
        drop(_42) -> [return: bb37, unwind terminate];
    }

    bb33 (cleanup): {
        drop(_31) -> [return: bb34, unwind terminate];
    }

    bb34 (cleanup): {
        drop(_24) -> [return: bb37, unwind terminate];
    }

    bb35 (cleanup): {
        drop(_13) -> [return: bb36, unwind terminate];
    }

    bb36 (cleanup): {
        drop(_3) -> [return: bb37, unwind terminate];
    }

    bb37 (cleanup): {
        resume;
    }
}
