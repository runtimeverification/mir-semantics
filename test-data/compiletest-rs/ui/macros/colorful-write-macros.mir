// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/macros/colorful-write-macros.rs:13:1: 13:24>::write_str(_1: &mut Bar, _2: &str) -> Result<(), std::fmt::Error> {
    debug self => _1;
    let mut _0: std::result::Result<(), std::fmt::Error>;

    bb0: {
        _0 = Result::<(), std::fmt::Error>::Ok(const ());
        return;
    }
}

fn borrowing_writer_from_struct_and_formatting_struct_field(_1: Foo<'_>) -> () {
    debug foo => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: std::result::Result<(), std::io::Error>;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let _6: &[&str; 1];
    let _7: [&str; 1];
    let mut _8: &[core::fmt::rt::Argument<'_>];
    let _9: &[core::fmt::rt::Argument<'_>; 1];
    let _10: [core::fmt::rt::Argument<'_>; 1];
    let mut _11: core::fmt::rt::Argument<'_>;
    let _12: &&str;
    let mut _13: &mut dyn std::io::Write;

    bb0: {
        _13 = deref_copy (_1.0: &mut dyn std::io::Write);
        _7 = [const ""];
        _6 = &_7;
        _5 = _6 as &[&str] (Pointer(Unsize));
        _12 = &(_1.1: &str);
        _11 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_12) -> bb1;
    }

    bb1: {
        _10 = [move _11];
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> bb2;
    }

    bb2: {
        _3 = <dyn std::io::Write as std::io::Write>::write_fmt(_13, move _4) -> bb3;
    }

    bb3: {
        _2 = Result::<(), std::io::Error>::unwrap(move _3) -> bb4;
    }

    bb4: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: std::vec::Vec<u8>;
    let _2: ();
    let mut _3: std::result::Result<(), std::io::Error>;
    let mut _4: &mut dyn std::io::Write;
    let mut _5: &mut std::vec::Vec<u8>;
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str];
    let _8: &[&str; 0];
    let _9: [&str; 0];
    let _10: ();
    let mut _11: std::result::Result<(), std::io::Error>;
    let mut _12: &mut std::vec::Vec<u8>;
    let mut _13: std::fmt::Arguments<'_>;
    let mut _14: &[&str];
    let _15: &[&str; 0];
    let _16: [&str; 0];
    let _17: ();
    let mut _18: std::fmt::Arguments<'_>;
    let mut _19: &[&str];
    let _20: &[&str; 1];
    let _21: [&str; 1];
    let _23: ();
    let mut _24: std::result::Result<(), std::fmt::Error>;
    let mut _25: &mut Bar;
    let mut _26: std::fmt::Arguments<'_>;
    let mut _27: &[&str];
    let _28: &[&str; 1];
    let _29: [&str; 1];
    scope 1 {
        debug w => _1;
        let mut _22: Bar;
        scope 2 {
            debug s => const Bar;
        }
    }

    bb0: {
        _1 = Vec::<u8>::new() -> bb1;
    }

    bb1: {
        _5 = &mut _1;
        _4 = _5 as &mut dyn std::io::Write (Pointer(Unsize));
        _8 = &_9;
        _7 = _8 as &[&str] (Pointer(Unsize));
        _6 = Arguments::<'_>::new_const(move _7) -> [return: bb2, unwind: bb14];
    }

    bb2: {
        _3 = <dyn std::io::Write as std::io::Write>::write_fmt(_4, move _6) -> [return: bb3, unwind: bb14];
    }

    bb3: {
        _2 = Result::<(), std::io::Error>::unwrap(move _3) -> [return: bb4, unwind: bb14];
    }

    bb4: {
        _12 = &mut _1;
        _15 = &_16;
        _14 = _15 as &[&str] (Pointer(Unsize));
        _13 = Arguments::<'_>::new_const(move _14) -> [return: bb5, unwind: bb14];
    }

    bb5: {
        _11 = <Vec<u8> as std::io::Write>::write_fmt(_12, move _13) -> [return: bb6, unwind: bb14];
    }

    bb6: {
        _10 = Result::<(), std::io::Error>::unwrap(move _11) -> [return: bb7, unwind: bb14];
    }

    bb7: {
        _21 = [const "ok\n"];
        _20 = &_21;
        _19 = _20 as &[&str] (Pointer(Unsize));
        _18 = Arguments::<'_>::new_const(move _19) -> [return: bb8, unwind: bb14];
    }

    bb8: {
        _17 = _print(move _18) -> [return: bb9, unwind: bb14];
    }

    bb9: {
        _25 = &mut _22;
        _29 = [const "test"];
        _28 = &_29;
        _27 = _28 as &[&str] (Pointer(Unsize));
        _26 = Arguments::<'_>::new_const(move _27) -> [return: bb10, unwind: bb14];
    }

    bb10: {
        _24 = <Bar as std::fmt::Write>::write_fmt(_25, move _26) -> [return: bb11, unwind: bb14];
    }

    bb11: {
        _23 = Result::<(), std::fmt::Error>::unwrap(move _24) -> [return: bb12, unwind: bb14];
    }

    bb12: {
        drop(_1) -> bb13;
    }

    bb13: {
        return;
    }

    bb14 (cleanup): {
        drop(_1) -> [return: bb15, unwind terminate];
    }

    bb15 (cleanup): {
        resume;
    }
}
