// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: HTMLFragment;
    let mut _2: std::string::String;
    let _3: &str;
    let mut _4: std::vec::Vec<HTMLFragment>;
    let mut _5: std::boxed::Box<[HTMLFragment]>;
    let mut _6: std::boxed::Box<[HTMLFragment; 2]>;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: *mut u8;
    let mut _10: std::boxed::Box<[HTMLFragment; 2]>;
    let mut _11: HTMLFragment;
    let mut _12: std::string::String;
    let _13: &str;
    let mut _14: std::vec::Vec<HTMLFragment>;
    let mut _15: std::boxed::Box<[HTMLFragment]>;
    let mut _16: std::boxed::Box<[HTMLFragment; 1]>;
    let mut _17: usize;
    let mut _18: usize;
    let mut _19: *mut u8;
    let mut _20: std::boxed::Box<[HTMLFragment; 1]>;
    let mut _21: HTMLFragment;
    let mut _22: std::string::String;
    let _23: &str;
    let mut _24: std::vec::Vec<HTMLFragment>;
    let mut _25: std::boxed::Box<[HTMLFragment]>;
    let mut _26: std::boxed::Box<[HTMLFragment; 5]>;
    let mut _27: usize;
    let mut _28: usize;
    let mut _29: *mut u8;
    let mut _30: std::boxed::Box<[HTMLFragment; 5]>;
    let mut _31: HTMLFragment;
    let mut _32: std::string::String;
    let _33: &str;
    let mut _34: HTMLFragment;
    let mut _35: std::string::String;
    let _36: &str;
    let mut _37: HTMLFragment;
    let mut _38: std::string::String;
    let _39: &str;
    let mut _40: HTMLFragment;
    let mut _41: std::string::String;
    let _42: &str;
    let mut _43: HTMLFragment;
    let mut _44: std::string::String;
    let _45: &str;
    let mut _46: HTMLFragment;
    let mut _47: std::string::String;
    let _48: &str;
    let mut _49: std::vec::Vec<HTMLFragment>;
    let mut _50: std::boxed::Box<[HTMLFragment]>;
    let mut _51: std::boxed::Box<[HTMLFragment; 1]>;
    let mut _52: usize;
    let mut _53: usize;
    let mut _54: *mut u8;
    let mut _55: std::boxed::Box<[HTMLFragment; 1]>;
    let mut _56: HTMLFragment;
    let mut _57: std::string::String;
    let _58: &str;
    let mut _59: std::vec::Vec<HTMLFragment>;
    let mut _60: std::boxed::Box<[HTMLFragment]>;
    let mut _61: std::boxed::Box<[HTMLFragment; 4]>;
    let mut _62: usize;
    let mut _63: usize;
    let mut _64: *mut u8;
    let mut _65: std::boxed::Box<[HTMLFragment; 4]>;
    let mut _66: HTMLFragment;
    let mut _67: std::string::String;
    let _68: &str;
    let mut _69: HTMLFragment;
    let mut _70: std::string::String;
    let _71: &str;
    let mut _72: HTMLFragment;
    let mut _73: std::string::String;
    let _74: &str;
    let mut _75: HTMLFragment;
    let mut _76: std::string::String;
    let _77: &str;
    let mut _78: &mut std::boxed::Box<[HTMLFragment; 4]>;
    let mut _79: ();
    let mut _80: &mut std::boxed::Box<[HTMLFragment; 1]>;
    let mut _81: ();
    let mut _82: &mut std::boxed::Box<[HTMLFragment; 5]>;
    let mut _83: ();
    let mut _84: &mut std::boxed::Box<[HTMLFragment; 1]>;
    let mut _85: ();
    let mut _86: &mut std::boxed::Box<[HTMLFragment; 2]>;
    let mut _87: ();
    let mut _88: *const [HTMLFragment; 5];
    let mut _89: *const [HTMLFragment; 1];
    let mut _90: *const [HTMLFragment; 4];
    let mut _91: *const [HTMLFragment; 1];
    let mut _92: *const [HTMLFragment; 2];
    let mut _93: *const ();
    let mut _94: usize;
    let mut _95: usize;
    let mut _96: usize;
    let mut _97: usize;
    let mut _98: bool;
    let mut _99: *const ();
    let mut _100: usize;
    let mut _101: usize;
    let mut _102: usize;
    let mut _103: usize;
    let mut _104: bool;
    let mut _105: *const ();
    let mut _106: usize;
    let mut _107: usize;
    let mut _108: usize;
    let mut _109: usize;
    let mut _110: bool;
    let mut _111: *const ();
    let mut _112: usize;
    let mut _113: usize;
    let mut _114: usize;
    let mut _115: usize;
    let mut _116: bool;
    let mut _117: *const ();
    let mut _118: usize;
    let mut _119: usize;
    let mut _120: usize;
    let mut _121: usize;
    let mut _122: bool;
    scope 1 {
        debug _page => _1;
    }
    scope 2 {
    }
    scope 3 {
    }
    scope 4 {
    }
    scope 5 {
    }
    scope 6 {
    }

    bb0: {
        _3 = const "html";
        _2 = <str as ToString>::to_string(_3) -> bb1;
    }

    bb1: {
        _7 = SizeOf([HTMLFragment; 2]);
        _8 = AlignOf([HTMLFragment; 2]);
        _9 = alloc::alloc::exchange_malloc(move _7, move _8) -> [return: bb2, unwind: bb38];
    }

    bb2: {
        _10 = ShallowInitBox(move _9, [HTMLFragment; 2]);
        _13 = const "head";
        _12 = <str as ToString>::to_string(_13) -> [return: bb3, unwind: bb44];
    }

    bb3: {
        _17 = SizeOf([HTMLFragment; 1]);
        _18 = AlignOf([HTMLFragment; 1]);
        _19 = alloc::alloc::exchange_malloc(move _17, move _18) -> [return: bb4, unwind: bb37];
    }

    bb4: {
        _20 = ShallowInitBox(move _19, [HTMLFragment; 1]);
        _23 = const "title";
        _22 = <str as ToString>::to_string(_23) -> [return: bb5, unwind: bb43];
    }

    bb5: {
        _27 = SizeOf([HTMLFragment; 5]);
        _28 = AlignOf([HTMLFragment; 5]);
        _29 = alloc::alloc::exchange_malloc(move _27, move _28) -> [return: bb6, unwind: bb36];
    }

    bb6: {
        _30 = ShallowInitBox(move _29, [HTMLFragment; 5]);
        _33 = const "This";
        _32 = <str as ToString>::to_string(_33) -> [return: bb7, unwind: bb42];
    }

    bb7: {
        _31 = HTMLFragment::text(move _32);
        _36 = const "is";
        _35 = <str as ToString>::to_string(_36) -> [return: bb8, unwind: bb35];
    }

    bb8: {
        _34 = HTMLFragment::text(move _35);
        _39 = const "the";
        _38 = <str as ToString>::to_string(_39) -> [return: bb9, unwind: bb34];
    }

    bb9: {
        _37 = HTMLFragment::text(move _38);
        _42 = const "title";
        _41 = <str as ToString>::to_string(_42) -> [return: bb10, unwind: bb33];
    }

    bb10: {
        _40 = HTMLFragment::text(move _41);
        _45 = const ".";
        _44 = <str as ToString>::to_string(_45) -> [return: bb11, unwind: bb32];
    }

    bb11: {
        _43 = HTMLFragment::text(move _44);
        _88 = (((_30.0: std::ptr::Unique<[HTMLFragment; 5]>).0: std::ptr::NonNull<[HTMLFragment; 5]>).0: *const [HTMLFragment; 5]);
        _117 = _88 as *const () (PtrToPtr);
        _118 = _117 as usize (Transmute);
        _119 = AlignOf(HTMLFragment);
        _120 = Sub(_119, const 1_usize);
        _121 = BitAnd(_118, _120);
        _122 = Eq(_121, const 0_usize);
        assert(_122, "misaligned pointer dereference: address must be a multiple of {} but is {}", _119, _118) -> [success: bb49, unwind unreachable];
    }

    bb12: {
        _21 = HTMLFragment::tag(move _22, move _24);
        _89 = (((_20.0: std::ptr::Unique<[HTMLFragment; 1]>).0: std::ptr::NonNull<[HTMLFragment; 1]>).0: *const [HTMLFragment; 1]);
        _111 = _89 as *const () (PtrToPtr);
        _112 = _111 as usize (Transmute);
        _113 = AlignOf(HTMLFragment);
        _114 = Sub(_113, const 1_usize);
        _115 = BitAnd(_112, _114);
        _116 = Eq(_115, const 0_usize);
        assert(_116, "misaligned pointer dereference: address must be a multiple of {} but is {}", _113, _112) -> [success: bb48, unwind unreachable];
    }

    bb13: {
        _11 = HTMLFragment::tag(move _12, move _14);
        _48 = const "body";
        _47 = <str as ToString>::to_string(_48) -> [return: bb14, unwind: bb31];
    }

    bb14: {
        _52 = SizeOf([HTMLFragment; 1]);
        _53 = AlignOf([HTMLFragment; 1]);
        _54 = alloc::alloc::exchange_malloc(move _52, move _53) -> [return: bb15, unwind: bb30];
    }

    bb15: {
        _55 = ShallowInitBox(move _54, [HTMLFragment; 1]);
        _58 = const "p";
        _57 = <str as ToString>::to_string(_58) -> [return: bb16, unwind: bb41];
    }

    bb16: {
        _62 = SizeOf([HTMLFragment; 4]);
        _63 = AlignOf([HTMLFragment; 4]);
        _64 = alloc::alloc::exchange_malloc(move _62, move _63) -> [return: bb17, unwind: bb29];
    }

    bb17: {
        _65 = ShallowInitBox(move _64, [HTMLFragment; 4]);
        _68 = const "This";
        _67 = <str as ToString>::to_string(_68) -> [return: bb18, unwind: bb40];
    }

    bb18: {
        _66 = HTMLFragment::text(move _67);
        _71 = const "is";
        _70 = <str as ToString>::to_string(_71) -> [return: bb19, unwind: bb28];
    }

    bb19: {
        _69 = HTMLFragment::text(move _70);
        _74 = const "some";
        _73 = <str as ToString>::to_string(_74) -> [return: bb20, unwind: bb27];
    }

    bb20: {
        _72 = HTMLFragment::text(move _73);
        _77 = const "text";
        _76 = <str as ToString>::to_string(_77) -> [return: bb21, unwind: bb26];
    }

    bb21: {
        _75 = HTMLFragment::text(move _76);
        _90 = (((_65.0: std::ptr::Unique<[HTMLFragment; 4]>).0: std::ptr::NonNull<[HTMLFragment; 4]>).0: *const [HTMLFragment; 4]);
        _105 = _90 as *const () (PtrToPtr);
        _106 = _105 as usize (Transmute);
        _107 = AlignOf(HTMLFragment);
        _108 = Sub(_107, const 1_usize);
        _109 = BitAnd(_106, _108);
        _110 = Eq(_109, const 0_usize);
        assert(_110, "misaligned pointer dereference: address must be a multiple of {} but is {}", _107, _106) -> [success: bb47, unwind unreachable];
    }

    bb22: {
        _56 = HTMLFragment::tag(move _57, move _59);
        _91 = (((_55.0: std::ptr::Unique<[HTMLFragment; 1]>).0: std::ptr::NonNull<[HTMLFragment; 1]>).0: *const [HTMLFragment; 1]);
        _99 = _91 as *const () (PtrToPtr);
        _100 = _99 as usize (Transmute);
        _101 = AlignOf(HTMLFragment);
        _102 = Sub(_101, const 1_usize);
        _103 = BitAnd(_100, _102);
        _104 = Eq(_103, const 0_usize);
        assert(_104, "misaligned pointer dereference: address must be a multiple of {} but is {}", _101, _100) -> [success: bb46, unwind unreachable];
    }

    bb23: {
        _46 = HTMLFragment::tag(move _47, move _49);
        _92 = (((_10.0: std::ptr::Unique<[HTMLFragment; 2]>).0: std::ptr::NonNull<[HTMLFragment; 2]>).0: *const [HTMLFragment; 2]);
        _93 = _92 as *const () (PtrToPtr);
        _94 = _93 as usize (Transmute);
        _95 = AlignOf(HTMLFragment);
        _96 = Sub(_95, const 1_usize);
        _97 = BitAnd(_94, _96);
        _98 = Eq(_97, const 0_usize);
        assert(_98, "misaligned pointer dereference: address must be a multiple of {} but is {}", _95, _94) -> [success: bb45, unwind unreachable];
    }

    bb24: {
        _1 = HTMLFragment::tag(move _2, move _4);
        drop(_1) -> bb25;
    }

    bb25: {
        return;
    }

    bb26 (cleanup): {
        drop(_72) -> [return: bb27, unwind terminate];
    }

    bb27 (cleanup): {
        drop(_69) -> [return: bb28, unwind terminate];
    }

    bb28 (cleanup): {
        drop(_66) -> [return: bb40, unwind terminate];
    }

    bb29 (cleanup): {
        drop(_57) -> [return: bb41, unwind terminate];
    }

    bb30 (cleanup): {
        drop(_47) -> [return: bb31, unwind terminate];
    }

    bb31 (cleanup): {
        drop(_11) -> [return: bb44, unwind terminate];
    }

    bb32 (cleanup): {
        drop(_40) -> [return: bb33, unwind terminate];
    }

    bb33 (cleanup): {
        drop(_37) -> [return: bb34, unwind terminate];
    }

    bb34 (cleanup): {
        drop(_34) -> [return: bb35, unwind terminate];
    }

    bb35 (cleanup): {
        drop(_31) -> [return: bb42, unwind terminate];
    }

    bb36 (cleanup): {
        drop(_22) -> [return: bb43, unwind terminate];
    }

    bb37 (cleanup): {
        drop(_12) -> [return: bb44, unwind terminate];
    }

    bb38 (cleanup): {
        drop(_2) -> [return: bb39, unwind terminate];
    }

    bb39 (cleanup): {
        resume;
    }

    bb40 (cleanup): {
        _78 = &mut _65;
        _79 = <Box<[HTMLFragment; 4]> as Drop>::drop(move _78) -> [return: bb50, unwind terminate];
    }

    bb41 (cleanup): {
        _80 = &mut _55;
        _81 = <Box<[HTMLFragment; 1]> as Drop>::drop(move _80) -> [return: bb51, unwind terminate];
    }

    bb42 (cleanup): {
        _82 = &mut _30;
        _83 = <Box<[HTMLFragment; 5]> as Drop>::drop(move _82) -> [return: bb52, unwind terminate];
    }

    bb43 (cleanup): {
        _84 = &mut _20;
        _85 = <Box<[HTMLFragment; 1]> as Drop>::drop(move _84) -> [return: bb53, unwind terminate];
    }

    bb44 (cleanup): {
        _86 = &mut _10;
        _87 = <Box<[HTMLFragment; 2]> as Drop>::drop(move _86) -> [return: bb54, unwind terminate];
    }

    bb45: {
        (*_92) = [move _11, move _46];
        _6 = move _10;
        _5 = move _6 as std::boxed::Box<[HTMLFragment]> (Pointer(Unsize));
        _4 = slice::<impl [HTMLFragment]>::into_vec::<std::alloc::Global>(move _5) -> [return: bb24, unwind: bb38];
    }

    bb46: {
        (*_91) = [move _56];
        _51 = move _55;
        _50 = move _51 as std::boxed::Box<[HTMLFragment]> (Pointer(Unsize));
        _49 = slice::<impl [HTMLFragment]>::into_vec::<std::alloc::Global>(move _50) -> [return: bb23, unwind: bb30];
    }

    bb47: {
        (*_90) = [move _66, move _69, move _72, move _75];
        _61 = move _65;
        _60 = move _61 as std::boxed::Box<[HTMLFragment]> (Pointer(Unsize));
        _59 = slice::<impl [HTMLFragment]>::into_vec::<std::alloc::Global>(move _60) -> [return: bb22, unwind: bb29];
    }

    bb48: {
        (*_89) = [move _21];
        _16 = move _20;
        _15 = move _16 as std::boxed::Box<[HTMLFragment]> (Pointer(Unsize));
        _14 = slice::<impl [HTMLFragment]>::into_vec::<std::alloc::Global>(move _15) -> [return: bb13, unwind: bb37];
    }

    bb49: {
        (*_88) = [move _31, move _34, move _37, move _40, move _43];
        _26 = move _30;
        _25 = move _26 as std::boxed::Box<[HTMLFragment]> (Pointer(Unsize));
        _24 = slice::<impl [HTMLFragment]>::into_vec::<std::alloc::Global>(move _25) -> [return: bb12, unwind: bb36];
    }

    bb50 (cleanup): {
        goto -> bb29;
    }

    bb51 (cleanup): {
        goto -> bb30;
    }

    bb52 (cleanup): {
        goto -> bb36;
    }

    bb53 (cleanup): {
        goto -> bb37;
    }

    bb54 (cleanup): {
        goto -> bb38;
    }
}

fn HTMLFragment::tag(_1: String, _2: Vec<HTMLFragment>) -> HTMLFragment {
    let mut _0: HTMLFragment;

    bb0: {
        _0 = HTMLFragment::tag(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn HTMLFragment::tag(_1: String, _2: Vec<HTMLFragment>) -> HTMLFragment {
    let mut _0: HTMLFragment;

    bb0: {
        _0 = HTMLFragment::tag(move _1, move _2);
        return;
    }
}

fn HTMLFragment::text(_1: String) -> HTMLFragment {
    let mut _0: HTMLFragment;

    bb0: {
        _0 = HTMLFragment::text(move _1);
        return;
    }
}

// MIR FOR CTFE
fn HTMLFragment::text(_1: String) -> HTMLFragment {
    let mut _0: HTMLFragment;

    bb0: {
        _0 = HTMLFragment::text(move _1);
        return;
    }
}
