// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: f64;
    let mut _5: usize;
    let mut _6: usize;
    let _7: ();
    let mut _8: std::fmt::Arguments<'_>;
    let mut _9: &[&str];
    let _10: &[&str; 2];
    let _11: [&str; 2];
    let mut _12: &[core::fmt::rt::Argument<'_>];
    let _13: &[core::fmt::rt::Argument<'_>; 3];
    let _14: [core::fmt::rt::Argument<'_>; 3];
    let mut _15: (&f64, &usize, &usize);
    let mut _16: &f64;
    let mut _17: &usize;
    let mut _18: &usize;
    let mut _19: core::fmt::rt::Argument<'_>;
    let mut _20: core::fmt::rt::Argument<'_>;
    let mut _21: core::fmt::rt::Argument<'_>;
    let mut _22: &[core::fmt::rt::Placeholder];
    let _23: &[core::fmt::rt::Placeholder; 1];
    let _24: [core::fmt::rt::Placeholder; 1];
    let mut _25: core::fmt::rt::Placeholder;
    let mut _26: core::fmt::rt::Alignment;
    let mut _27: core::fmt::rt::Count;
    let mut _28: core::fmt::rt::Count;
    let mut _29: core::fmt::rt::UnsafeArg;
    let mut _30: &f64;
    let mut _31: &usize;
    let mut _32: &usize;
    scope 1 {
        debug value => _1;
        let _2: usize;
        scope 2 {
            debug digits_before_decimal => _2;
            let _3: usize;
            scope 3 {
                debug digits_after_decimal => _3;
                let _4: usize;
                scope 4 {
                    debug width => _4;
                    scope 5 {
                        debug args => _15;
                    }
                    scope 6 {
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const 314.15926000000002f64;
        _2 = const 1_usize;
        _3 = const 2_usize;
        _5 = Add(_2, const 1_usize);
        _6 = _3;
        _4 = Add(move _5, move _6);
        _11 = [const "", const "\n"];
        _10 = &_11;
        _9 = _10 as &[&str] (Pointer(Unsize));
        _16 = &_1;
        _17 = &_4;
        _18 = &_3;
        _15 = (move _16, move _17, move _18);
        _30 = deref_copy (_15.0: &f64);
        _19 = core::fmt::rt::Argument::<'_>::new_display::<f64>(_30) -> bb1;
    }

    bb1: {
        _31 = deref_copy (_15.2: &usize);
        _20 = core::fmt::rt::Argument::<'_>::from_usize(_31) -> bb2;
    }

    bb2: {
        _32 = deref_copy (_15.1: &usize);
        _21 = core::fmt::rt::Argument::<'_>::from_usize(_32) -> bb3;
    }

    bb3: {
        _14 = [move _19, move _20, move _21];
        _13 = &_14;
        _12 = _13 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _26 = core::fmt::rt::Alignment::Right;
        _27 = core::fmt::rt::Count::Param(const 1_usize) -> bb4;
    }

    bb4: {
        _28 = core::fmt::rt::Count::Param(const 2_usize) -> bb5;
    }

    bb5: {
        _25 = core::fmt::rt::Placeholder::new(const 0_usize, const '0', move _26, const 0_u32, move _27, move _28) -> bb6;
    }

    bb6: {
        _24 = [move _25];
        _23 = &_24;
        _22 = _23 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _29 = core::fmt::rt::UnsafeArg::new() -> bb7;
    }

    bb7: {
        _8 = Arguments::<'_>::new_v1_formatted(move _9, move _12, move _22, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> bb8;
    }

    bb8: {
        _7 = _print(move _8) -> bb9;
    }

    bb9: {
        return;
    }
}
