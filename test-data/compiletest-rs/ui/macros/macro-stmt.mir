// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn add(_1: isize, _2: isize) -> isize {
    debug a => _1;
    debug b => _2;
    let mut _0: isize;

    bb0: {
        _0 = Add(_1, _2);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _2: (&i32, &i32);
    let mut _3: &i32;
    let mut _4: &i32;
    let _5: i32;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: i32;
    let mut _11: i32;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&isize, &isize);
    let mut _16: &isize;
    let _17: isize;
    let mut _18: isize;
    let mut _19: &isize;
    let _20: isize;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: isize;
    let mut _26: isize;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _30: (&i32, &i32);
    let mut _31: &i32;
    let _32: i32;
    let mut _33: &i32;
    let _34: i32;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: i32;
    let mut _40: i32;
    let _42: !;
    let mut _43: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug y => _1;
        let _6: &i32;
        let _7: &i32;
        let _21: &isize;
        let _22: &isize;
        let _35: &i32;
        let _36: &i32;
        scope 2 {
            debug left_val => _6;
            debug right_val => _7;
            let _12: core::panicking::AssertKind;
            scope 3 {
                debug kind => _12;
            }
        }
        scope 4 {
            debug left_val => _21;
            debug right_val => _22;
            let _27: core::panicking::AssertKind;
            scope 5 {
                debug kind => _27;
            }
        }
        scope 6 {
            debug left_val => _35;
            debug right_val => _36;
            let _41: core::panicking::AssertKind;
            scope 7 {
                debug kind => _41;
            }
        }
    }

    bb0: {
        _1 = Mul(const 8_i32, const 2_i32);
        _3 = &_1;
        _5 = const 16_i32;
        _4 = &_5;
        _2 = (move _3, move _4);
        _6 = (_2.0: &i32);
        _7 = (_2.1: &i32);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<i32, i32>(move _12, _6, _7, move _14);
    }

    bb2: {
        _18 = add(const 4_isize, const 4_isize) -> bb3;
    }

    bb3: {
        _17 = mult(const 2_isize, move _18) -> bb4;
    }

    bb4: {
        _16 = &_17;
        _20 = const 16_isize;
        _19 = &_20;
        _15 = (move _16, move _19);
        _21 = (_15.0: &isize);
        _22 = (_15.1: &isize);
        _25 = (*_21);
        _26 = (*_22);
        _24 = Eq(move _25, move _26);
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<isize, isize>(move _27, _21, _22, move _29);
    }

    bb6: {
        _32 = const 16_i32;
        _31 = &_32;
        _34 = const 16_i32;
        _33 = &_34;
        _30 = (move _31, move _33);
        _35 = (_30.0: &i32);
        _36 = (_30.1: &i32);
        _39 = (*_35);
        _40 = (*_36);
        _38 = Eq(move _39, move _40);
        _37 = Not(move _38);
        switchInt(move _37) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _41 = core::panicking::AssertKind::Eq;
        _43 = Option::<Arguments<'_>>::None;
        _42 = core::panicking::assert_failed::<i32, i32>(move _41, _35, _36, move _43);
    }

    bb8: {
        return;
    }
}

fn mult(_1: isize, _2: isize) -> isize {
    debug a => _1;
    debug b => _2;
    let mut _0: isize;

    bb0: {
        _0 = Mul(_1, _2);
        return;
    }
}
