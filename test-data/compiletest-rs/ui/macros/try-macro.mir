// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>);
    let mut _2: &std::result::Result<i32, std::num::ParseIntError>;
    let _3: std::result::Result<i32, std::num::ParseIntError>;
    let mut _4: &std::result::Result<i32, std::num::ParseIntError>;
    let _5: std::result::Result<i32, std::num::ParseIntError>;
    let _6: &std::result::Result<i32, std::num::ParseIntError>;
    let _7: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _8: bool;
    let mut _9: bool;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>);
    let mut _14: &std::result::Result<i32, std::num::ParseIntError>;
    let _15: std::result::Result<i32, std::num::ParseIntError>;
    let mut _16: &std::result::Result<i32, std::num::ParseIntError>;
    let _17: std::result::Result<i32, std::num::ParseIntError>;
    let _18: &std::result::Result<i32, std::num::ParseIntError>;
    let _19: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _20: bool;
    let mut _21: bool;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: (&std::result::Result<f32, Error>, &std::result::Result<f32, Error>);
    let mut _26: &std::result::Result<f32, Error>;
    let _27: std::result::Result<f32, Error>;
    let mut _28: &std::result::Result<f32, Error>;
    let _29: std::result::Result<f32, Error>;
    let _30: &std::result::Result<f32, Error>;
    let _31: &std::result::Result<f32, Error>;
    let mut _32: bool;
    let mut _33: bool;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _37: (&std::result::Result<f32, Error>, &std::result::Result<f32, Error>);
    let mut _38: &std::result::Result<f32, Error>;
    let _39: std::result::Result<f32, Error>;
    let mut _40: &std::result::Result<f32, Error>;
    let _41: std::result::Result<f32, Error>;
    let mut _42: Error;
    let _43: &std::result::Result<f32, Error>;
    let _44: &std::result::Result<f32, Error>;
    let mut _45: bool;
    let mut _46: bool;
    let _48: !;
    let mut _49: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _50: (&std::result::Result<f32, Error>, &std::result::Result<f32, Error>);
    let mut _51: &std::result::Result<f32, Error>;
    let _52: std::result::Result<f32, Error>;
    let mut _53: &std::result::Result<f32, Error>;
    let _54: std::result::Result<f32, Error>;
    let mut _55: Error;
    let _56: &std::result::Result<f32, Error>;
    let _57: &std::result::Result<f32, Error>;
    let mut _58: bool;
    let mut _59: bool;
    let _61: !;
    let mut _62: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }
    scope 3 {
        debug left_val => _18;
        debug right_val => _19;
        let _22: core::panicking::AssertKind;
        scope 4 {
            debug kind => _22;
        }
    }
    scope 5 {
        debug left_val => _30;
        debug right_val => _31;
        let _34: core::panicking::AssertKind;
        scope 6 {
            debug kind => _34;
        }
    }
    scope 7 {
        debug left_val => _43;
        debug right_val => _44;
        let _47: core::panicking::AssertKind;
        scope 8 {
            debug kind => _47;
        }
    }
    scope 9 {
        debug left_val => _56;
        debug right_val => _57;
        let _60: core::panicking::AssertKind;
        scope 10 {
            debug kind => _60;
        }
    }

    bb0: {
        _3 = simple() -> bb1;
    }

    bb1: {
        _2 = &_3;
        _5 = Result::<i32, ParseIntError>::Ok(const 1_i32);
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &std::result::Result<i32, std::num::ParseIntError>);
        _7 = (_1.1: &std::result::Result<i32, std::num::ParseIntError>);
        _9 = <Result<i32, ParseIntError> as PartialEq>::eq(_6, _7) -> bb2;
    }

    bb2: {
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _10, _6, _7, move _12);
    }

    bb4: {
        _15 = nested() -> bb5;
    }

    bb5: {
        _14 = &_15;
        _17 = Result::<i32, ParseIntError>::Ok(const 2_i32);
        _16 = &_17;
        _13 = (move _14, move _16);
        _18 = (_13.0: &std::result::Result<i32, std::num::ParseIntError>);
        _19 = (_13.1: &std::result::Result<i32, std::num::ParseIntError>);
        _21 = <Result<i32, ParseIntError> as PartialEq>::eq(_18, _19) -> bb6;
    }

    bb6: {
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _22, _18, _19, move _24);
    }

    bb8: {
        _27 = merge_ok() -> bb9;
    }

    bb9: {
        _26 = &_27;
        _29 = Result::<f32, Error>::Ok(const 3f32);
        _28 = &_29;
        _25 = (move _26, move _28);
        _30 = (_25.0: &std::result::Result<f32, Error>);
        _31 = (_25.1: &std::result::Result<f32, Error>);
        _33 = <Result<f32, Error> as PartialEq>::eq(_30, _31) -> bb10;
    }

    bb10: {
        _32 = Not(move _33);
        switchInt(move _32) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = core::panicking::assert_failed::<Result<f32, Error>, Result<f32, Error>>(move _34, _30, _31, move _36);
    }

    bb12: {
        _39 = merge_int_err() -> bb13;
    }

    bb13: {
        _38 = &_39;
        _42 = Error::Int;
        _41 = Result::<f32, Error>::Err(move _42);
        _40 = &_41;
        _37 = (move _38, move _40);
        _43 = (_37.0: &std::result::Result<f32, Error>);
        _44 = (_37.1: &std::result::Result<f32, Error>);
        _46 = <Result<f32, Error> as PartialEq>::eq(_43, _44) -> bb14;
    }

    bb14: {
        _45 = Not(move _46);
        switchInt(move _45) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _47 = core::panicking::AssertKind::Eq;
        _49 = Option::<Arguments<'_>>::None;
        _48 = core::panicking::assert_failed::<Result<f32, Error>, Result<f32, Error>>(move _47, _43, _44, move _49);
    }

    bb16: {
        _52 = merge_float_err() -> bb17;
    }

    bb17: {
        _51 = &_52;
        _55 = Error::Float;
        _54 = Result::<f32, Error>::Err(move _55);
        _53 = &_54;
        _50 = (move _51, move _53);
        _56 = (_50.0: &std::result::Result<f32, Error>);
        _57 = (_50.1: &std::result::Result<f32, Error>);
        _59 = <Result<f32, Error> as PartialEq>::eq(_56, _57) -> bb18;
    }

    bb18: {
        _58 = Not(move _59);
        switchInt(move _58) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _60 = core::panicking::AssertKind::Eq;
        _62 = Option::<Arguments<'_>>::None;
        _61 = core::panicking::assert_failed::<Result<f32, Error>, Result<f32, Error>>(move _60, _56, _57, move _62);
    }

    bb20: {
        return;
    }
}

fn simple() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>;
    let mut _1: std::result::Result<i32, std::num::ParseIntError>;
    let _2: &str;
    let mut _3: isize;
    let _4: i32;
    let _5: std::num::ParseIntError;
    let mut _6: std::num::ParseIntError;
    scope 1 {
        debug val => _4;
    }
    scope 2 {
        debug err => _5;
    }

    bb0: {
        _2 = const "1";
        _1 = core::str::<impl str>::parse::<i32>(_2) -> bb1;
    }

    bb1: {
        _3 = discriminant(_1);
        switchInt(move _3) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _5 = move ((_1 as Err).0: std::num::ParseIntError);
        _6 = <ParseIntError as From<ParseIntError>>::from(move _5) -> bb5;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _4 = ((_1 as Ok).0: i32);
        _0 = Result::<i32, ParseIntError>::Ok(_4);
        goto -> bb6;
    }

    bb5: {
        _0 = Result::<i32, ParseIntError>::Err(move _6);
        goto -> bb6;
    }

    bb6: {
        return;
    }
}

fn nested() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>;
    let mut _1: std::result::Result<i32, std::num::ParseIntError>;
    let mut _2: &str;
    let _3: &str;
    let mut _4: &std::string::String;
    let _5: std::string::String;
    let mut _6: &i32;
    let _7: i32;
    let mut _8: std::result::Result<i32, std::num::ParseIntError>;
    let _9: &str;
    let mut _10: isize;
    let _11: i32;
    let _12: std::num::ParseIntError;
    let mut _13: std::num::ParseIntError;
    let mut _14: isize;
    let _15: i32;
    let _16: std::num::ParseIntError;
    let mut _17: std::num::ParseIntError;
    scope 1 {
        debug val => _11;
    }
    scope 2 {
        debug err => _12;
    }
    scope 3 {
        debug val => _15;
    }
    scope 4 {
        debug err => _16;
    }

    bb0: {
        _9 = const "2";
        _8 = core::str::<impl str>::parse::<i32>(_9) -> bb1;
    }

    bb1: {
        _10 = discriminant(_8);
        switchInt(move _10) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _12 = move ((_8 as Err).0: std::num::ParseIntError);
        _13 = <ParseIntError as From<ParseIntError>>::from(move _12) -> bb5;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _11 = ((_8 as Ok).0: i32);
        _7 = _11;
        _6 = &_7;
        _5 = <i32 as ToString>::to_string(move _6) -> bb6;
    }

    bb5: {
        _0 = Result::<i32, ParseIntError>::Err(move _13);
        goto -> bb12;
    }

    bb6: {
        _4 = &_5;
        _3 = <String as Deref>::deref(move _4) -> [return: bb7, unwind: bb13];
    }

    bb7: {
        _2 = _3;
        _1 = core::str::<impl str>::parse::<i32>(move _2) -> [return: bb8, unwind: bb13];
    }

    bb8: {
        _14 = discriminant(_1);
        switchInt(move _14) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _16 = move ((_1 as Err).0: std::num::ParseIntError);
        _17 = <ParseIntError as From<ParseIntError>>::from(move _16) -> [return: bb11, unwind: bb13];
    }

    bb10: {
        _15 = ((_1 as Ok).0: i32);
        _0 = Result::<i32, ParseIntError>::Ok(_15);
        drop(_5) -> bb12;
    }

    bb11: {
        _0 = Result::<i32, ParseIntError>::Err(move _17);
        drop(_5) -> bb12;
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        drop(_5) -> [return: bb14, unwind terminate];
    }

    bb14 (cleanup): {
        resume;
    }
}

fn merge_ok() -> Result<f32, Error> {
    let mut _0: std::result::Result<f32, Error>;
    let mut _1: f32;
    let mut _2: f32;
    let mut _3: std::result::Result<i32, std::num::ParseIntError>;
    let _4: &str;
    let mut _5: isize;
    let _6: i32;
    let _7: std::num::ParseIntError;
    let mut _8: Error;
    let mut _9: std::result::Result<f32, std::num::ParseFloatError>;
    let _10: &str;
    let mut _11: isize;
    let _12: f32;
    let _13: std::num::ParseFloatError;
    let mut _14: Error;
    scope 1 {
        debug val => _6;
    }
    scope 2 {
        debug err => _7;
    }
    scope 3 {
        debug val => _12;
    }
    scope 4 {
        debug err => _13;
    }

    bb0: {
        _4 = const "1";
        _3 = core::str::<impl str>::parse::<i32>(_4) -> bb1;
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _7 = move ((_3 as Err).0: std::num::ParseIntError);
        _8 = <Error as From<ParseIntError>>::from(move _7) -> bb5;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = ((_3 as Ok).0: i32);
        _2 = _6 as f32 (IntToFloat);
        _10 = const "2.0";
        _9 = core::str::<impl str>::parse::<f32>(_10) -> bb6;
    }

    bb5: {
        _0 = Result::<f32, Error>::Err(move _8);
        goto -> bb10;
    }

    bb6: {
        _11 = discriminant(_9);
        switchInt(move _11) -> [0: bb8, 1: bb7, otherwise: bb3];
    }

    bb7: {
        _13 = move ((_9 as Err).0: std::num::ParseFloatError);
        _14 = <Error as From<ParseFloatError>>::from(move _13) -> bb9;
    }

    bb8: {
        _12 = ((_9 as Ok).0: f32);
        _1 = Add(move _2, _12);
        _0 = Result::<f32, Error>::Ok(move _1);
        goto -> bb10;
    }

    bb9: {
        _0 = Result::<f32, Error>::Err(move _14);
        goto -> bb10;
    }

    bb10: {
        return;
    }
}

fn merge_int_err() -> Result<f32, Error> {
    let mut _0: std::result::Result<f32, Error>;
    let mut _1: f32;
    let mut _2: f32;
    let mut _3: std::result::Result<i32, std::num::ParseIntError>;
    let _4: &str;
    let mut _5: isize;
    let _6: i32;
    let _7: std::num::ParseIntError;
    let mut _8: Error;
    let mut _9: std::result::Result<f32, std::num::ParseFloatError>;
    let _10: &str;
    let mut _11: isize;
    let _12: f32;
    let _13: std::num::ParseFloatError;
    let mut _14: Error;
    scope 1 {
        debug val => _6;
    }
    scope 2 {
        debug err => _7;
    }
    scope 3 {
        debug val => _12;
    }
    scope 4 {
        debug err => _13;
    }

    bb0: {
        _4 = const "a";
        _3 = core::str::<impl str>::parse::<i32>(_4) -> bb1;
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _7 = move ((_3 as Err).0: std::num::ParseIntError);
        _8 = <Error as From<ParseIntError>>::from(move _7) -> bb5;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = ((_3 as Ok).0: i32);
        _2 = _6 as f32 (IntToFloat);
        _10 = const "2.0";
        _9 = core::str::<impl str>::parse::<f32>(_10) -> bb6;
    }

    bb5: {
        _0 = Result::<f32, Error>::Err(move _8);
        goto -> bb10;
    }

    bb6: {
        _11 = discriminant(_9);
        switchInt(move _11) -> [0: bb8, 1: bb7, otherwise: bb3];
    }

    bb7: {
        _13 = move ((_9 as Err).0: std::num::ParseFloatError);
        _14 = <Error as From<ParseFloatError>>::from(move _13) -> bb9;
    }

    bb8: {
        _12 = ((_9 as Ok).0: f32);
        _1 = Add(move _2, _12);
        _0 = Result::<f32, Error>::Ok(move _1);
        goto -> bb10;
    }

    bb9: {
        _0 = Result::<f32, Error>::Err(move _14);
        goto -> bb10;
    }

    bb10: {
        return;
    }
}

fn merge_float_err() -> Result<f32, Error> {
    let mut _0: std::result::Result<f32, Error>;
    let mut _1: f32;
    let mut _2: f32;
    let mut _3: std::result::Result<i32, std::num::ParseIntError>;
    let _4: &str;
    let mut _5: isize;
    let _6: i32;
    let _7: std::num::ParseIntError;
    let mut _8: Error;
    let mut _9: std::result::Result<f32, std::num::ParseFloatError>;
    let _10: &str;
    let mut _11: isize;
    let _12: f32;
    let _13: std::num::ParseFloatError;
    let mut _14: Error;
    scope 1 {
        debug val => _6;
    }
    scope 2 {
        debug err => _7;
    }
    scope 3 {
        debug val => _12;
    }
    scope 4 {
        debug err => _13;
    }

    bb0: {
        _4 = const "1";
        _3 = core::str::<impl str>::parse::<i32>(_4) -> bb1;
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _7 = move ((_3 as Err).0: std::num::ParseIntError);
        _8 = <Error as From<ParseIntError>>::from(move _7) -> bb5;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = ((_3 as Ok).0: i32);
        _2 = _6 as f32 (IntToFloat);
        _10 = const "b";
        _9 = core::str::<impl str>::parse::<f32>(_10) -> bb6;
    }

    bb5: {
        _0 = Result::<f32, Error>::Err(move _8);
        goto -> bb10;
    }

    bb6: {
        _11 = discriminant(_9);
        switchInt(move _11) -> [0: bb8, 1: bb7, otherwise: bb3];
    }

    bb7: {
        _13 = move ((_9 as Err).0: std::num::ParseFloatError);
        _14 = <Error as From<ParseFloatError>>::from(move _13) -> bb9;
    }

    bb8: {
        _12 = ((_9 as Ok).0: f32);
        _1 = Add(move _2, _12);
        _0 = Result::<f32, Error>::Ok(move _1);
        goto -> bb10;
    }

    bb9: {
        _0 = Result::<f32, Error>::Err(move _14);
        goto -> bb10;
    }

    bb10: {
        return;
    }
}

fn <impl at ui/macros/try-macro.rs:33:10: 33:15>::fmt(_1: &Error, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: &str;
    let mut _4: isize;
    let _5: &str;
    let _6: &str;

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _6 = const "Float";
        _3 = _6;
        goto -> bb4;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = const "Int";
        _3 = _5;
        goto -> bb4;
    }

    bb4: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> bb5;
    }

    bb5: {
        return;
    }
}

fn <impl at ui/macros/try-macro.rs:33:17: 33:26>::eq(_1: &Error, _2: &Error) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _0 = Eq(_3, _4);
        return;
    }
}

fn <impl at ui/macros/try-macro.rs:39:1: 39:35>::from(_1: ParseIntError) -> Error {
    let mut _0: Error;

    bb0: {
        _0 = Error::Int;
        return;
    }
}

fn <impl at ui/macros/try-macro.rs:45:1: 45:37>::from(_1: ParseFloatError) -> Error {
    let mut _0: Error;

    bb0: {
        _0 = Error::Float;
        return;
    }
}
