// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: usize;
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 1];
    let _6: [&str; 1];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 0];
    let _9: [core::fmt::rt::Argument<'_>; 0];
    let _10: ();
    let mut _11: std::fmt::Arguments<'_>;
    let mut _12: &[&str];
    let _13: &[&str; 2];
    let _14: [&str; 2];
    let mut _15: &[core::fmt::rt::Argument<'_>];
    let _16: &[core::fmt::rt::Argument<'_>; 1];
    let _17: [core::fmt::rt::Argument<'_>; 1];
    let mut _18: core::fmt::rt::Argument<'_>;
    let _19: &usize;
    let _20: ();
    let mut _21: std::fmt::Arguments<'_>;
    let mut _22: &[&str];
    let _23: &[&str; 2];
    let _24: [&str; 2];
    let mut _25: &[core::fmt::rt::Argument<'_>];
    let _26: &[core::fmt::rt::Argument<'_>; 1];
    let _27: [core::fmt::rt::Argument<'_>; 1];
    let mut _28: core::fmt::rt::Argument<'_>;
    let _29: &usize;
    let mut _33: std::fmt::Arguments<'_>;
    let mut _34: &[&str];
    let _35: &[&str; 1];
    let _36: [&str; 1];
    let mut _37: &[core::fmt::rt::Argument<'_>];
    let _38: &[core::fmt::rt::Argument<'_>; 0];
    let _39: [core::fmt::rt::Argument<'_>; 0];
    let mut _42: std::fmt::Arguments<'_>;
    let mut _43: &[&str];
    let _44: &[&str; 1];
    let _45: [&str; 1];
    let mut _46: &[core::fmt::rt::Argument<'_>];
    let _47: &[core::fmt::rt::Argument<'_>; 1];
    let _48: [core::fmt::rt::Argument<'_>; 1];
    let mut _49: core::fmt::rt::Argument<'_>;
    let _50: &usize;
    let mut _53: std::fmt::Arguments<'_>;
    let mut _54: &[&str];
    let _55: &[&str; 1];
    let _56: [&str; 1];
    let mut _57: &[core::fmt::rt::Argument<'_>];
    let _58: &[core::fmt::rt::Argument<'_>; 1];
    let _59: [core::fmt::rt::Argument<'_>; 1];
    let mut _60: core::fmt::rt::Argument<'_>;
    let _61: &usize;
    scope 1 {
        debug _x => _1;
        let mut _30: usize;
        scope 2 {
            debug _x => _30;
            let _31: std::string::String;
            let _32: std::string::String;
            scope 3 {
                debug _f => _31;
                let _40: std::string::String;
                let _41: std::string::String;
                scope 5 {
                    debug _f => _40;
                    let _51: std::string::String;
                    let _52: std::string::String;
                    scope 7 {
                        debug _f => _51;
                    }
                    scope 8 {
                        debug res => _52;
                    }
                }
                scope 6 {
                    debug res => _41;
                }
            }
            scope 4 {
                debug res => _32;
            }
        }
    }

    bb0: {
        _1 = const 1_usize;
        _6 = [const "_x is 5\n"];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _9 = core::fmt::rt::Argument::<'_>::none() -> bb1;
    }

    bb1: {
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb2;
    }

    bb2: {
        _2 = _print(move _3) -> bb3;
    }

    bb3: {
        _14 = [const "_x is ", const "\n"];
        _13 = &_14;
        _12 = _13 as &[&str] (Pointer(Unsize));
        _19 = &_1;
        _18 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_19) -> bb4;
    }

    bb4: {
        _17 = [move _18];
        _16 = &_17;
        _15 = _16 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _11 = Arguments::<'_>::new_v1(move _12, move _15) -> bb5;
    }

    bb5: {
        _10 = _print(move _11) -> bb6;
    }

    bb6: {
        _24 = [const "first positional arg 1, second positional arg 2, _x is ", const "\n"];
        _23 = &_24;
        _22 = _23 as &[&str] (Pointer(Unsize));
        _29 = &_1;
        _28 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_29) -> bb7;
    }

    bb7: {
        _27 = [move _28];
        _26 = &_27;
        _25 = _26 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _21 = Arguments::<'_>::new_v1(move _22, move _25) -> bb8;
    }

    bb8: {
        _20 = _print(move _21) -> bb9;
    }

    bb9: {
        _30 = const 1_usize;
        _36 = [const "_x is 5"];
        _35 = &_36;
        _34 = _35 as &[&str] (Pointer(Unsize));
        _39 = core::fmt::rt::Argument::<'_>::none() -> bb10;
    }

    bb10: {
        _38 = &_39;
        _37 = _38 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _33 = Arguments::<'_>::new_v1(move _34, move _37) -> bb11;
    }

    bb11: {
        _32 = format(move _33) -> bb12;
    }

    bb12: {
        _31 = move _32;
        _45 = [const "_x is "];
        _44 = &_45;
        _43 = _44 as &[&str] (Pointer(Unsize));
        _50 = &_30;
        _49 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_50) -> [return: bb13, unwind: bb23];
    }

    bb13: {
        _48 = [move _49];
        _47 = &_48;
        _46 = _47 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _42 = Arguments::<'_>::new_v1(move _43, move _46) -> [return: bb14, unwind: bb23];
    }

    bb14: {
        _41 = format(move _42) -> [return: bb15, unwind: bb23];
    }

    bb15: {
        _40 = move _41;
        _56 = [const "first positional arg 1, second positional arg 2, _x is "];
        _55 = &_56;
        _54 = _55 as &[&str] (Pointer(Unsize));
        _61 = &_30;
        _60 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_61) -> [return: bb16, unwind: bb22];
    }

    bb16: {
        _59 = [move _60];
        _58 = &_59;
        _57 = _58 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _53 = Arguments::<'_>::new_v1(move _54, move _57) -> [return: bb17, unwind: bb22];
    }

    bb17: {
        _52 = format(move _53) -> [return: bb18, unwind: bb22];
    }

    bb18: {
        _51 = move _52;
        drop(_51) -> [return: bb19, unwind: bb22];
    }

    bb19: {
        drop(_40) -> [return: bb20, unwind: bb23];
    }

    bb20: {
        drop(_31) -> bb21;
    }

    bb21: {
        return;
    }

    bb22 (cleanup): {
        drop(_40) -> [return: bb23, unwind terminate];
    }

    bb23 (cleanup): {
        drop(_31) -> [return: bb24, unwind terminate];
    }

    bb24 (cleanup): {
        resume;
    }
}
