// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (&&std::string::String, &&str);
    let mut _2: &&std::string::String;
    let _3: &std::string::String;
    let _4: std::string::String;
    let _5: std::string::String;
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str];
    let _8: &[&str; 1];
    let _9: [&str; 1];
    let mut _10: &[core::fmt::rt::Argument<'_>];
    let _11: &[core::fmt::rt::Argument<'_>; 0];
    let _12: [core::fmt::rt::Argument<'_>; 0];
    let mut _13: &&str;
    let _14: &str;
    let _15: &&std::string::String;
    let _16: &&str;
    let mut _17: bool;
    let mut _18: bool;
    let _20: !;
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _22: (&&std::string::String, &&str);
    let mut _23: &&std::string::String;
    let _24: &std::string::String;
    let _25: std::string::String;
    let _26: std::string::String;
    let mut _27: std::fmt::Arguments<'_>;
    let mut _28: &[&str];
    let _29: &[&str; 1];
    let _30: [&str; 1];
    let mut _31: &[core::fmt::rt::Argument<'_>];
    let _32: &[core::fmt::rt::Argument<'_>; 0];
    let _33: [core::fmt::rt::Argument<'_>; 0];
    let mut _34: &&str;
    let _35: &str;
    let _36: &&std::string::String;
    let _37: &&str;
    let mut _38: bool;
    let mut _39: bool;
    let _41: !;
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _43: (&&std::string::String, &&str);
    let mut _44: &&std::string::String;
    let _45: &std::string::String;
    let _46: std::string::String;
    let _47: std::string::String;
    let mut _48: std::fmt::Arguments<'_>;
    let mut _49: &[&str];
    let _50: &[&str; 1];
    let _51: [&str; 1];
    let mut _52: &[core::fmt::rt::Argument<'_>];
    let _53: &[core::fmt::rt::Argument<'_>; 1];
    let _54: [core::fmt::rt::Argument<'_>; 1];
    let mut _55: core::fmt::rt::Argument<'_>;
    let _56: &f64;
    let _57: f64;
    let mut _58: &&str;
    let _59: &str;
    let _60: &&std::string::String;
    let _61: &&str;
    let mut _62: bool;
    let mut _63: bool;
    let _65: !;
    let mut _66: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _67: (&&std::string::String, &&str);
    let mut _68: &&std::string::String;
    let _69: &std::string::String;
    let _70: std::string::String;
    let _71: std::string::String;
    let mut _72: std::fmt::Arguments<'_>;
    let mut _73: &[&str];
    let _74: &[&str; 1];
    let _75: [&str; 1];
    let mut _76: &[core::fmt::rt::Argument<'_>];
    let _77: &[core::fmt::rt::Argument<'_>; 0];
    let _78: [core::fmt::rt::Argument<'_>; 0];
    let mut _79: &&str;
    let _80: &str;
    let _81: &&std::string::String;
    let _82: &&str;
    let mut _83: bool;
    let mut _84: bool;
    let _86: !;
    let mut _87: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _88: (&&std::string::String, &&str);
    let mut _89: &&std::string::String;
    let _90: &std::string::String;
    let _91: std::string::String;
    let _92: std::string::String;
    let mut _93: std::fmt::Arguments<'_>;
    let mut _94: &[&str];
    let _95: &[&str; 1];
    let _96: [&str; 1];
    let mut _97: &[core::fmt::rt::Argument<'_>];
    let _98: &[core::fmt::rt::Argument<'_>; 0];
    let _99: [core::fmt::rt::Argument<'_>; 0];
    let mut _100: &&str;
    let _101: &str;
    let _102: &&std::string::String;
    let _103: &&str;
    let mut _104: bool;
    let mut _105: bool;
    let _107: !;
    let mut _108: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _109: (&&std::string::String, &&str);
    let mut _110: &&std::string::String;
    let _111: &std::string::String;
    let _112: std::string::String;
    let _113: std::string::String;
    let mut _114: std::fmt::Arguments<'_>;
    let mut _115: &[&str];
    let _116: &[&str; 1];
    let _117: [&str; 1];
    let mut _118: &[core::fmt::rt::Argument<'_>];
    let _119: &[core::fmt::rt::Argument<'_>; 1];
    let _120: [core::fmt::rt::Argument<'_>; 1];
    let mut _121: core::fmt::rt::Argument<'_>;
    let _122: &char;
    let _123: char;
    let mut _124: &&str;
    let _125: &str;
    let _126: &&std::string::String;
    let _127: &&str;
    let mut _128: bool;
    let mut _129: bool;
    let _131: !;
    let mut _132: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _133: (&&std::string::String, &&str);
    let mut _134: &&std::string::String;
    let _135: &std::string::String;
    let _136: std::string::String;
    let _137: std::string::String;
    let mut _138: std::fmt::Arguments<'_>;
    let mut _139: &[&str];
    let _140: &[&str; 1];
    let _141: [&str; 1];
    let mut _142: &[core::fmt::rt::Argument<'_>];
    let _143: &[core::fmt::rt::Argument<'_>; 1];
    let _144: [core::fmt::rt::Argument<'_>; 1];
    let mut _145: core::fmt::rt::Argument<'_>;
    let _146: &f64;
    let _147: f64;
    let mut _148: &&str;
    let _149: &str;
    let _150: &&std::string::String;
    let _151: &&str;
    let mut _152: bool;
    let mut _153: bool;
    let _155: !;
    let mut _156: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _157: (&&std::string::String, &&str);
    let mut _158: &&std::string::String;
    let _159: &std::string::String;
    let _160: std::string::String;
    let _161: std::string::String;
    let mut _162: std::fmt::Arguments<'_>;
    let mut _163: &[&str];
    let _164: &[&str; 2];
    let _165: [&str; 2];
    let mut _166: &[core::fmt::rt::Argument<'_>];
    let _167: &[core::fmt::rt::Argument<'_>; 2];
    let _168: [core::fmt::rt::Argument<'_>; 2];
    let mut _169: core::fmt::rt::Argument<'_>;
    let _170: &i32;
    let _171: i32;
    let mut _172: core::fmt::rt::Argument<'_>;
    let _173: &i32;
    let _174: i32;
    let mut _175: &&str;
    let _176: &str;
    let _177: &&std::string::String;
    let _178: &&str;
    let mut _179: bool;
    let mut _180: bool;
    let _182: !;
    let mut _183: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _184: (&&std::string::String, &&str);
    let mut _185: &&std::string::String;
    let _186: &std::string::String;
    let _187: std::string::String;
    let _188: std::string::String;
    let mut _189: std::fmt::Arguments<'_>;
    let mut _190: &[&str];
    let _191: &[&str; 1];
    let _192: [&str; 1];
    let mut _193: &[core::fmt::rt::Argument<'_>];
    let _194: &[core::fmt::rt::Argument<'_>; 0];
    let _195: [core::fmt::rt::Argument<'_>; 0];
    let mut _196: &&str;
    let _197: &str;
    let _198: &&std::string::String;
    let _199: &&str;
    let mut _200: bool;
    let mut _201: bool;
    let _203: !;
    let mut _204: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _205: (&&str, &&str);
    let mut _206: &&str;
    let _207: &str;
    let mut _208: &&str;
    let _209: &str;
    let _210: &&str;
    let _211: &&str;
    let mut _212: bool;
    let mut _213: bool;
    let _215: !;
    let mut _216: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _217: (&&str, &&str);
    let mut _218: &&str;
    let _219: &str;
    let mut _220: std::vec::Vec<i32>;
    let mut _221: std::ops::Range<i32>;
    let mut _222: std::ops::Range<i32>;
    let mut _224: std::option::Option<i32>;
    let mut _225: &mut std::ops::Range<i32>;
    let mut _226: isize;
    let _228: ();
    let mut _229: &mut std::vec::Vec<i32>;
    let mut _230: &&str;
    let _231: &str;
    let _232: &&str;
    let _233: &&str;
    let mut _234: bool;
    let mut _235: bool;
    let _237: !;
    let mut _238: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _239: (&&std::string::String, &&str);
    let mut _240: &&std::string::String;
    let _241: &std::string::String;
    let _242: std::string::String;
    let _243: std::string::String;
    let mut _244: std::fmt::Arguments<'_>;
    let mut _245: &[&str];
    let _246: &[&str; 1];
    let _247: [&str; 1];
    let mut _248: &[core::fmt::rt::Argument<'_>];
    let _249: &[core::fmt::rt::Argument<'_>; 1];
    let _250: [core::fmt::rt::Argument<'_>; 1];
    let mut _251: core::fmt::rt::Argument<'_>;
    let _252: &bool;
    let _253: bool;
    let mut _254: &&str;
    let _255: &str;
    let _256: &&std::string::String;
    let _257: &&str;
    let mut _258: bool;
    let mut _259: bool;
    let _261: !;
    let mut _262: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _263: (&&std::string::String, &&str);
    let mut _264: &&std::string::String;
    let _265: &std::string::String;
    let _266: std::string::String;
    let _267: std::string::String;
    let mut _268: std::fmt::Arguments<'_>;
    let mut _269: &[&str];
    let _270: &[&str; 1];
    let _271: [&str; 1];
    let mut _272: &[core::fmt::rt::Argument<'_>];
    let _273: &[core::fmt::rt::Argument<'_>; 1];
    let _274: [core::fmt::rt::Argument<'_>; 1];
    let mut _275: core::fmt::rt::Argument<'_>;
    let _276: &bool;
    let _277: bool;
    let mut _278: &&str;
    let _279: &str;
    let _280: &&std::string::String;
    let _281: &&str;
    let mut _282: bool;
    let mut _283: bool;
    let _285: !;
    let mut _286: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _287: (&&str, &&str);
    let mut _288: &&str;
    let _289: &str;
    let mut _290: i32;
    let mut _291: bool;
    let mut _292: bool;
    let _293: &str;
    let mut _294: &&str;
    let _295: &str;
    let mut _298: bool;
    let mut _299: bool;
    let _301: !;
    let mut _302: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _303: (&&str, &&str);
    let mut _304: &&str;
    let _305: &str;
    let mut _306: i32;
    let mut _307: bool;
    let mut _308: bool;
    let _309: &str;
    let mut _310: &&str;
    let _311: &str;
    let mut _314: bool;
    let mut _315: bool;
    let _317: !;
    let mut _318: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _319: (&&std::string::String, &&str);
    let mut _320: &&std::string::String;
    let _321: &std::string::String;
    let _322: std::string::String;
    let mut _324: std::fmt::Arguments<'_>;
    let mut _325: &[&str];
    let _326: &[&str; 1];
    let _327: [&str; 1];
    let mut _328: &[core::fmt::rt::Argument<'_>];
    let _329: &[core::fmt::rt::Argument<'_>; 1];
    let _330: [core::fmt::rt::Argument<'_>; 1];
    let mut _331: core::fmt::rt::Argument<'_>;
    let _332: &f64;
    let _333: f64;
    let mut _334: &&str;
    let _335: &str;
    let mut _338: bool;
    let mut _339: bool;
    let _341: !;
    let mut _342: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _343: (&&std::string::String, &&str);
    let mut _344: &&std::string::String;
    let _345: &std::string::String;
    let _346: std::string::String;
    let mut _348: std::fmt::Arguments<'_>;
    let mut _349: &[&str];
    let _350: &[&str; 1];
    let _351: [&str; 1];
    let mut _352: &[core::fmt::rt::Argument<'_>];
    let _353: &[core::fmt::rt::Argument<'_>; 1];
    let _354: [core::fmt::rt::Argument<'_>; 1];
    let mut _355: core::fmt::rt::Argument<'_>;
    let _356: &f64;
    let _357: f64;
    let mut _358: &&str;
    let _359: &str;
    let mut _362: bool;
    let mut _363: bool;
    let _365: !;
    let mut _366: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _367: (&&std::string::String, &&str);
    let mut _368: &&std::string::String;
    let _369: &std::string::String;
    let _370: std::string::String;
    let mut _372: std::fmt::Arguments<'_>;
    let mut _373: &[&str];
    let _374: &[&str; 1];
    let _375: [&str; 1];
    let mut _376: &[core::fmt::rt::Argument<'_>];
    let _377: &[core::fmt::rt::Argument<'_>; 1];
    let _378: [core::fmt::rt::Argument<'_>; 1];
    let mut _379: core::fmt::rt::Argument<'_>;
    let _380: &i32;
    let _381: i32;
    let mut _382: &&str;
    let _383: &str;
    let mut _386: bool;
    let mut _387: bool;
    let _389: !;
    let mut _390: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _391: (&&std::string::String, &&str);
    let mut _392: &&std::string::String;
    let _393: &std::string::String;
    let _394: std::string::String;
    let mut _396: std::fmt::Arguments<'_>;
    let mut _397: &[&str];
    let _398: &[&str; 1];
    let _399: [&str; 1];
    let mut _400: &[core::fmt::rt::Argument<'_>];
    let _401: &[core::fmt::rt::Argument<'_>; 1];
    let _402: [core::fmt::rt::Argument<'_>; 1];
    let mut _403: core::fmt::rt::Argument<'_>;
    let _404: &();
    let _405: ();
    let mut _406: &&str;
    let _407: &str;
    let mut _410: bool;
    let mut _411: bool;
    let _413: !;
    let mut _414: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _415: (&&std::string::String, &&str);
    let mut _416: &&std::string::String;
    let _417: &std::string::String;
    let _418: std::string::String;
    let mut _420: std::fmt::Arguments<'_>;
    let mut _421: &[&str];
    let _422: &[&str; 2];
    let _423: [&str; 2];
    let mut _424: &[core::fmt::rt::Argument<'_>];
    let _425: &[core::fmt::rt::Argument<'_>; 2];
    let _426: [core::fmt::rt::Argument<'_>; 2];
    let mut _427: core::fmt::rt::Argument<'_>;
    let _428: &i32;
    let _429: i32;
    let mut _430: core::fmt::rt::Argument<'_>;
    let _431: &i32;
    let _432: i32;
    let mut _433: &&str;
    let _434: &str;
    let mut _437: bool;
    let mut _438: bool;
    let _440: !;
    let mut _441: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _442: (&&str, &&str);
    let mut _443: &&str;
    let _444: &str;
    let mut _445: &&str;
    let _446: &str;
    let mut _449: bool;
    let mut _450: bool;
    let _452: !;
    let mut _453: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _454: (&&str, &&str);
    let mut _455: &&str;
    let _456: &str;
    let mut _458: std::ops::Range<i32>;
    let mut _459: std::ops::Range<i32>;
    let mut _460: i32;
    let mut _462: std::option::Option<i32>;
    let mut _463: &mut std::ops::Range<i32>;
    let mut _464: isize;
    let _466: ();
    let mut _467: &mut std::vec::Vec<i32>;
    let mut _468: &&str;
    let _469: &str;
    let mut _472: bool;
    let mut _473: bool;
    let _475: !;
    let mut _476: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _477: (&&str, &&str);
    let mut _478: &&str;
    let _479: &str;
    let mut _480: i32;
    let _481: &str;
    let mut _482: &&str;
    let _483: &str;
    let mut _486: bool;
    let mut _487: bool;
    let _489: !;
    let mut _490: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _491: (&&str, &&str);
    let mut _492: &&str;
    let _493: &str;
    let mut _494: i32;
    let _495: &str;
    let mut _496: &&str;
    let _497: &str;
    let mut _500: bool;
    let mut _501: bool;
    let _503: !;
    let mut _504: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug res => _5;
    }
    scope 2 {
        debug left_val => _15;
        debug right_val => _16;
        let _19: core::panicking::AssertKind;
        scope 3 {
            debug kind => _19;
        }
    }
    scope 4 {
        debug res => _26;
    }
    scope 5 {
        debug left_val => _36;
        debug right_val => _37;
        let _40: core::panicking::AssertKind;
        scope 6 {
            debug kind => _40;
        }
    }
    scope 7 {
        debug res => _47;
    }
    scope 8 {
        debug left_val => _60;
        debug right_val => _61;
        let _64: core::panicking::AssertKind;
        scope 9 {
            debug kind => _64;
        }
    }
    scope 10 {
        debug res => _71;
    }
    scope 11 {
        debug left_val => _81;
        debug right_val => _82;
        let _85: core::panicking::AssertKind;
        scope 12 {
            debug kind => _85;
        }
    }
    scope 13 {
        debug res => _92;
    }
    scope 14 {
        debug left_val => _102;
        debug right_val => _103;
        let _106: core::panicking::AssertKind;
        scope 15 {
            debug kind => _106;
        }
    }
    scope 16 {
        debug res => _113;
    }
    scope 17 {
        debug left_val => _126;
        debug right_val => _127;
        let _130: core::panicking::AssertKind;
        scope 18 {
            debug kind => _130;
        }
    }
    scope 19 {
        debug res => _137;
    }
    scope 20 {
        debug left_val => _150;
        debug right_val => _151;
        let _154: core::panicking::AssertKind;
        scope 21 {
            debug kind => _154;
        }
    }
    scope 22 {
        debug res => _161;
    }
    scope 23 {
        debug left_val => _177;
        debug right_val => _178;
        let _181: core::panicking::AssertKind;
        scope 24 {
            debug kind => _181;
        }
    }
    scope 25 {
        debug res => _188;
    }
    scope 26 {
        debug left_val => _198;
        debug right_val => _199;
        let _202: core::panicking::AssertKind;
        scope 27 {
            debug kind => _202;
        }
    }
    scope 28 {
        debug left_val => _210;
        debug right_val => _211;
        let _214: core::panicking::AssertKind;
        scope 29 {
            debug kind => _214;
        }
    }
    scope 30 {
        debug v => _220;
        let mut _223: std::ops::Range<i32>;
        scope 31 {
            debug iter => _223;
            let _227: i32;
            scope 32 {
                debug i => _227;
            }
        }
    }
    scope 33 {
        debug left_val => _232;
        debug right_val => _233;
        let _236: core::panicking::AssertKind;
        scope 34 {
            debug kind => _236;
        }
    }
    scope 35 {
        debug res => _243;
    }
    scope 36 {
        debug left_val => _256;
        debug right_val => _257;
        let _260: core::panicking::AssertKind;
        scope 37 {
            debug kind => _260;
        }
    }
    scope 38 {
        debug res => _267;
    }
    scope 39 {
        debug left_val => _280;
        debug right_val => _281;
        let _284: core::panicking::AssertKind;
        scope 40 {
            debug kind => _284;
        }
    }
    scope 41 {
        debug _a => const LiteralProduced;
        let _296: &&str;
        let _297: &&str;
        let _312: &&str;
        let _313: &&str;
        let _323: std::string::String;
        let _336: &&std::string::String;
        let _337: &&str;
        let _347: std::string::String;
        let _360: &&std::string::String;
        let _361: &&str;
        let _371: std::string::String;
        let _384: &&std::string::String;
        let _385: &&str;
        let _395: std::string::String;
        let _408: &&std::string::String;
        let _409: &&str;
        let _419: std::string::String;
        let _435: &&std::string::String;
        let _436: &&str;
        let _447: &&str;
        let _448: &&str;
        let mut _457: std::vec::Vec<i32>;
        let _470: &&str;
        let _471: &&str;
        scope 42 {
            debug left_val => _296;
            debug right_val => _297;
            let _300: core::panicking::AssertKind;
            scope 43 {
                debug kind => _300;
            }
        }
        scope 44 {
            debug left_val => _312;
            debug right_val => _313;
            let _316: core::panicking::AssertKind;
            scope 45 {
                debug kind => _316;
            }
        }
        scope 46 {
            debug res => _323;
        }
        scope 47 {
            debug left_val => _336;
            debug right_val => _337;
            let _340: core::panicking::AssertKind;
            scope 48 {
                debug kind => _340;
            }
        }
        scope 49 {
            debug res => _347;
        }
        scope 50 {
            debug left_val => _360;
            debug right_val => _361;
            let _364: core::panicking::AssertKind;
            scope 51 {
                debug kind => _364;
            }
        }
        scope 52 {
            debug res => _371;
        }
        scope 53 {
            debug left_val => _384;
            debug right_val => _385;
            let _388: core::panicking::AssertKind;
            scope 54 {
                debug kind => _388;
            }
        }
        scope 55 {
            debug res => _395;
        }
        scope 56 {
            debug left_val => _408;
            debug right_val => _409;
            let _412: core::panicking::AssertKind;
            scope 57 {
                debug kind => _412;
            }
        }
        scope 58 {
            debug res => _419;
        }
        scope 59 {
            debug left_val => _435;
            debug right_val => _436;
            let _439: core::panicking::AssertKind;
            scope 60 {
                debug kind => _439;
            }
        }
        scope 61 {
            debug left_val => _447;
            debug right_val => _448;
            let _451: core::panicking::AssertKind;
            scope 62 {
                debug kind => _451;
            }
        }
        scope 63 {
            debug v => _457;
            let mut _461: std::ops::Range<i32>;
            scope 64 {
                debug iter => _461;
                let _465: i32;
                scope 65 {
                    debug i => _465;
                }
            }
        }
        scope 66 {
            debug left_val => _470;
            debug right_val => _471;
            let _474: core::panicking::AssertKind;
            scope 67 {
                debug kind => _474;
            }
        }
        scope 68 {
            debug _b => const ExprProduced;
            let _484: &&str;
            let _485: &&str;
            let _498: &&str;
            let _499: &&str;
            scope 69 {
                debug left_val => _484;
                debug right_val => _485;
                let _488: core::panicking::AssertKind;
                scope 70 {
                    debug kind => _488;
                }
            }
            scope 71 {
                debug left_val => _498;
                debug right_val => _499;
                let _502: core::panicking::AssertKind;
                scope 72 {
                    debug kind => _502;
                }
            }
        }
    }

    bb0: {
        _9 = [const "macro caught literal: str"];
        _8 = &_9;
        _7 = _8 as &[&str] (Pointer(Unsize));
        _12 = core::fmt::rt::Argument::<'_>::none() -> bb1;
    }

    bb1: {
        _11 = &_12;
        _10 = _11 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _6 = Arguments::<'_>::new_v1(move _7, move _10) -> bb2;
    }

    bb2: {
        _5 = format(move _6) -> bb3;
    }

    bb3: {
        _4 = move _5;
        _3 = &_4;
        _2 = &_3;
        _14 = const "macro caught literal: str";
        _13 = &_14;
        _1 = (move _2, move _13);
        _15 = (_1.0: &&std::string::String);
        _16 = (_1.1: &&str);
        _18 = <&String as PartialEq<&str>>::eq(_15, _16) -> [return: bb4, unwind: bb185];
    }

    bb4: {
        _17 = Not(move _18);
        switchInt(move _17) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _19 = core::panicking::AssertKind::Eq;
        _21 = Option::<Arguments<'_>>::None;
        _20 = core::panicking::assert_failed::<&String, &str>(move _19, _15, _16, move _21) -> bb185;
    }

    bb6: {
        drop(_4) -> bb7;
    }

    bb7: {
        _30 = [const "macro caught literal: 2"];
        _29 = &_30;
        _28 = _29 as &[&str] (Pointer(Unsize));
        _33 = core::fmt::rt::Argument::<'_>::none() -> bb8;
    }

    bb8: {
        _32 = &_33;
        _31 = _32 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _27 = Arguments::<'_>::new_v1(move _28, move _31) -> bb9;
    }

    bb9: {
        _26 = format(move _27) -> bb10;
    }

    bb10: {
        _25 = move _26;
        _24 = &_25;
        _23 = &_24;
        _35 = const "macro caught literal: 2";
        _34 = &_35;
        _22 = (move _23, move _34);
        _36 = (_22.0: &&std::string::String);
        _37 = (_22.1: &&str);
        _39 = <&String as PartialEq<&str>>::eq(_36, _37) -> [return: bb11, unwind: bb184];
    }

    bb11: {
        _38 = Not(move _39);
        switchInt(move _38) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _40 = core::panicking::AssertKind::Eq;
        _42 = Option::<Arguments<'_>>::None;
        _41 = core::panicking::assert_failed::<&String, &str>(move _40, _36, _37, move _42) -> bb184;
    }

    bb13: {
        drop(_25) -> bb14;
    }

    bb14: {
        _51 = [const "macro caught literal: "];
        _50 = &_51;
        _49 = _50 as &[&str] (Pointer(Unsize));
        _57 = const 2.2000000000000002f64;
        _56 = &_57;
        _55 = core::fmt::rt::Argument::<'_>::new_display::<f64>(_56) -> bb15;
    }

    bb15: {
        _54 = [move _55];
        _53 = &_54;
        _52 = _53 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _48 = Arguments::<'_>::new_v1(move _49, move _52) -> bb16;
    }

    bb16: {
        _47 = format(move _48) -> bb17;
    }

    bb17: {
        _46 = move _47;
        _45 = &_46;
        _44 = &_45;
        _59 = const "macro caught literal: 2.2";
        _58 = &_59;
        _43 = (move _44, move _58);
        _60 = (_43.0: &&std::string::String);
        _61 = (_43.1: &&str);
        _63 = <&String as PartialEq<&str>>::eq(_60, _61) -> [return: bb18, unwind: bb183];
    }

    bb18: {
        _62 = Not(move _63);
        switchInt(move _62) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _64 = core::panicking::AssertKind::Eq;
        _66 = Option::<Arguments<'_>>::None;
        _65 = core::panicking::assert_failed::<&String, &str>(move _64, _60, _61, move _66) -> bb183;
    }

    bb20: {
        drop(_46) -> bb21;
    }

    bb21: {
        _75 = [const "macro caught literal: 1"];
        _74 = &_75;
        _73 = _74 as &[&str] (Pointer(Unsize));
        _78 = core::fmt::rt::Argument::<'_>::none() -> bb22;
    }

    bb22: {
        _77 = &_78;
        _76 = _77 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _72 = Arguments::<'_>::new_v1(move _73, move _76) -> bb23;
    }

    bb23: {
        _71 = format(move _72) -> bb24;
    }

    bb24: {
        _70 = move _71;
        _69 = &_70;
        _68 = &_69;
        _80 = const "macro caught literal: 1";
        _79 = &_80;
        _67 = (move _68, move _79);
        _81 = (_67.0: &&std::string::String);
        _82 = (_67.1: &&str);
        _84 = <&String as PartialEq<&str>>::eq(_81, _82) -> [return: bb25, unwind: bb182];
    }

    bb25: {
        _83 = Not(move _84);
        switchInt(move _83) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _85 = core::panicking::AssertKind::Eq;
        _87 = Option::<Arguments<'_>>::None;
        _86 = core::panicking::assert_failed::<&String, &str>(move _85, _81, _82, move _87) -> bb182;
    }

    bb27: {
        drop(_70) -> bb28;
    }

    bb28: {
        _96 = [const "macro caught literal: 50"];
        _95 = &_96;
        _94 = _95 as &[&str] (Pointer(Unsize));
        _99 = core::fmt::rt::Argument::<'_>::none() -> bb29;
    }

    bb29: {
        _98 = &_99;
        _97 = _98 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _93 = Arguments::<'_>::new_v1(move _94, move _97) -> bb30;
    }

    bb30: {
        _92 = format(move _93) -> bb31;
    }

    bb31: {
        _91 = move _92;
        _90 = &_91;
        _89 = &_90;
        _101 = const "macro caught literal: 50";
        _100 = &_101;
        _88 = (move _89, move _100);
        _102 = (_88.0: &&std::string::String);
        _103 = (_88.1: &&str);
        _105 = <&String as PartialEq<&str>>::eq(_102, _103) -> [return: bb32, unwind: bb181];
    }

    bb32: {
        _104 = Not(move _105);
        switchInt(move _104) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        _106 = core::panicking::AssertKind::Eq;
        _108 = Option::<Arguments<'_>>::None;
        _107 = core::panicking::assert_failed::<&String, &str>(move _106, _102, _103, move _108) -> bb181;
    }

    bb34: {
        drop(_91) -> bb35;
    }

    bb35: {
        _117 = [const "macro caught literal: "];
        _116 = &_117;
        _115 = _116 as &[&str] (Pointer(Unsize));
        _123 = const 'c';
        _122 = &_123;
        _121 = core::fmt::rt::Argument::<'_>::new_display::<char>(_122) -> bb36;
    }

    bb36: {
        _120 = [move _121];
        _119 = &_120;
        _118 = _119 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _114 = Arguments::<'_>::new_v1(move _115, move _118) -> bb37;
    }

    bb37: {
        _113 = format(move _114) -> bb38;
    }

    bb38: {
        _112 = move _113;
        _111 = &_112;
        _110 = &_111;
        _125 = const "macro caught literal: c";
        _124 = &_125;
        _109 = (move _110, move _124);
        _126 = (_109.0: &&std::string::String);
        _127 = (_109.1: &&str);
        _129 = <&String as PartialEq<&str>>::eq(_126, _127) -> [return: bb39, unwind: bb180];
    }

    bb39: {
        _128 = Not(move _129);
        switchInt(move _128) -> [0: bb41, otherwise: bb40];
    }

    bb40: {
        _130 = core::panicking::AssertKind::Eq;
        _132 = Option::<Arguments<'_>>::None;
        _131 = core::panicking::assert_failed::<&String, &str>(move _130, _126, _127, move _132) -> bb180;
    }

    bb41: {
        drop(_112) -> bb42;
    }

    bb42: {
        _141 = [const "macro caught literal: "];
        _140 = &_141;
        _139 = _140 as &[&str] (Pointer(Unsize));
        _147 = const -1.2f64;
        _146 = &_147;
        _145 = core::fmt::rt::Argument::<'_>::new_display::<f64>(_146) -> bb43;
    }

    bb43: {
        _144 = [move _145];
        _143 = &_144;
        _142 = _143 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _138 = Arguments::<'_>::new_v1(move _139, move _142) -> bb44;
    }

    bb44: {
        _137 = format(move _138) -> bb45;
    }

    bb45: {
        _136 = move _137;
        _135 = &_136;
        _134 = &_135;
        _149 = const "macro caught literal: -1.2";
        _148 = &_149;
        _133 = (move _134, move _148);
        _150 = (_133.0: &&std::string::String);
        _151 = (_133.1: &&str);
        _153 = <&String as PartialEq<&str>>::eq(_150, _151) -> [return: bb46, unwind: bb179];
    }

    bb46: {
        _152 = Not(move _153);
        switchInt(move _152) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _154 = core::panicking::AssertKind::Eq;
        _156 = Option::<Arguments<'_>>::None;
        _155 = core::panicking::assert_failed::<&String, &str>(move _154, _150, _151, move _156) -> bb179;
    }

    bb48: {
        drop(_136) -> bb49;
    }

    bb49: {
        _165 = [const "macro caught literals: ", const ", "];
        _164 = &_165;
        _163 = _164 as &[&str] (Pointer(Unsize));
        _171 = const -2_i32;
        _170 = &_171;
        _169 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_170) -> bb50;
    }

    bb50: {
        _174 = const -3_i32;
        _173 = &_174;
        _172 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_173) -> bb51;
    }

    bb51: {
        _168 = [move _169, move _172];
        _167 = &_168;
        _166 = _167 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _162 = Arguments::<'_>::new_v1(move _163, move _166) -> bb52;
    }

    bb52: {
        _161 = format(move _162) -> bb53;
    }

    bb53: {
        _160 = move _161;
        _159 = &_160;
        _158 = &_159;
        _176 = const "macro caught literals: -2, -3";
        _175 = &_176;
        _157 = (move _158, move _175);
        _177 = (_157.0: &&std::string::String);
        _178 = (_157.1: &&str);
        _180 = <&String as PartialEq<&str>>::eq(_177, _178) -> [return: bb54, unwind: bb178];
    }

    bb54: {
        _179 = Not(move _180);
        switchInt(move _179) -> [0: bb56, otherwise: bb55];
    }

    bb55: {
        _181 = core::panicking::AssertKind::Eq;
        _183 = Option::<Arguments<'_>>::None;
        _182 = core::panicking::assert_failed::<&String, &str>(move _181, _177, _178, move _183) -> bb178;
    }

    bb56: {
        drop(_160) -> bb57;
    }

    bb57: {
        _192 = [const "macro caught literal: 2 ..= 3"];
        _191 = &_192;
        _190 = _191 as &[&str] (Pointer(Unsize));
        _195 = core::fmt::rt::Argument::<'_>::none() -> bb58;
    }

    bb58: {
        _194 = &_195;
        _193 = _194 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _189 = Arguments::<'_>::new_v1(move _190, move _193) -> bb59;
    }

    bb59: {
        _188 = format(move _189) -> bb60;
    }

    bb60: {
        _187 = move _188;
        _186 = &_187;
        _185 = &_186;
        _197 = const "macro caught literal: 2 ..= 3";
        _196 = &_197;
        _184 = (move _185, move _196);
        _198 = (_184.0: &&std::string::String);
        _199 = (_184.1: &&str);
        _201 = <&String as PartialEq<&str>>::eq(_198, _199) -> [return: bb61, unwind: bb177];
    }

    bb61: {
        _200 = Not(move _201);
        switchInt(move _200) -> [0: bb63, otherwise: bb62];
    }

    bb62: {
        _202 = core::panicking::AssertKind::Eq;
        _204 = Option::<Arguments<'_>>::None;
        _203 = core::panicking::assert_failed::<&String, &str>(move _202, _198, _199, move _204) -> bb177;
    }

    bb63: {
        drop(_187) -> bb64;
    }

    bb64: {
        _207 = const "attr matched literal";
        _206 = &_207;
        _209 = const "attr matched literal";
        _208 = &_209;
        _205 = (move _206, move _208);
        _210 = (_205.0: &&str);
        _211 = (_205.1: &&str);
        _213 = <&str as PartialEq>::eq(_210, _211) -> bb65;
    }

    bb65: {
        _212 = Not(move _213);
        switchInt(move _212) -> [0: bb67, otherwise: bb66];
    }

    bb66: {
        _214 = core::panicking::AssertKind::Eq;
        _216 = Option::<Arguments<'_>>::None;
        _215 = core::panicking::assert_failed::<&str, &str>(move _214, _210, _211, move _216);
    }

    bb67: {
        _220 = Vec::<i32>::new() -> bb68;
    }

    bb68: {
        _222 = std::ops::Range::<i32> { start: const 10_i32, end: const 20_i32 };
        _221 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _222) -> [return: bb69, unwind: bb176];
    }

    bb69: {
        _223 = move _221;
        goto -> bb70;
    }

    bb70: {
        _225 = &mut _223;
        _224 = <std::ops::Range<i32> as Iterator>::next(_225) -> [return: bb71, unwind: bb176];
    }

    bb71: {
        _226 = discriminant(_224);
        switchInt(move _226) -> [0: bb74, 1: bb72, otherwise: bb73];
    }

    bb72: {
        _227 = ((_224 as Some).0: i32);
        _229 = &mut _220;
        _228 = Vec::<i32>::push(move _229, _227) -> [return: bb187, unwind: bb176];
    }

    bb73: {
        unreachable;
    }

    bb74: {
        _219 = const "literal";
        drop(_220) -> bb75;
    }

    bb75: {
        _218 = &_219;
        _231 = const "literal";
        _230 = &_231;
        _217 = (move _218, move _230);
        _232 = (_217.0: &&str);
        _233 = (_217.1: &&str);
        _235 = <&str as PartialEq>::eq(_232, _233) -> bb76;
    }

    bb76: {
        _234 = Not(move _235);
        switchInt(move _234) -> [0: bb78, otherwise: bb77];
    }

    bb77: {
        _236 = core::panicking::AssertKind::Eq;
        _238 = Option::<Arguments<'_>>::None;
        _237 = core::panicking::assert_failed::<&str, &str>(move _236, _232, _233, move _238);
    }

    bb78: {
        _247 = [const "macro caught literal: "];
        _246 = &_247;
        _245 = _246 as &[&str] (Pointer(Unsize));
        _253 = const false;
        _252 = &_253;
        _251 = core::fmt::rt::Argument::<'_>::new_display::<bool>(_252) -> bb79;
    }

    bb79: {
        _250 = [move _251];
        _249 = &_250;
        _248 = _249 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _244 = Arguments::<'_>::new_v1(move _245, move _248) -> bb80;
    }

    bb80: {
        _243 = format(move _244) -> bb81;
    }

    bb81: {
        _242 = move _243;
        _241 = &_242;
        _240 = &_241;
        _255 = const "macro caught literal: false";
        _254 = &_255;
        _239 = (move _240, move _254);
        _256 = (_239.0: &&std::string::String);
        _257 = (_239.1: &&str);
        _259 = <&String as PartialEq<&str>>::eq(_256, _257) -> [return: bb82, unwind: bb175];
    }

    bb82: {
        _258 = Not(move _259);
        switchInt(move _258) -> [0: bb84, otherwise: bb83];
    }

    bb83: {
        _260 = core::panicking::AssertKind::Eq;
        _262 = Option::<Arguments<'_>>::None;
        _261 = core::panicking::assert_failed::<&String, &str>(move _260, _256, _257, move _262) -> bb175;
    }

    bb84: {
        drop(_242) -> bb85;
    }

    bb85: {
        _271 = [const "macro caught literal: "];
        _270 = &_271;
        _269 = _270 as &[&str] (Pointer(Unsize));
        _277 = const true;
        _276 = &_277;
        _275 = core::fmt::rt::Argument::<'_>::new_display::<bool>(_276) -> bb86;
    }

    bb86: {
        _274 = [move _275];
        _273 = &_274;
        _272 = _273 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _268 = Arguments::<'_>::new_v1(move _269, move _272) -> bb87;
    }

    bb87: {
        _267 = format(move _268) -> bb88;
    }

    bb88: {
        _266 = move _267;
        _265 = &_266;
        _264 = &_265;
        _279 = const "macro caught literal: true";
        _278 = &_279;
        _263 = (move _264, move _278);
        _280 = (_263.0: &&std::string::String);
        _281 = (_263.1: &&str);
        _283 = <&String as PartialEq<&str>>::eq(_280, _281) -> [return: bb89, unwind: bb174];
    }

    bb89: {
        _282 = Not(move _283);
        switchInt(move _282) -> [0: bb91, otherwise: bb90];
    }

    bb90: {
        _284 = core::panicking::AssertKind::Eq;
        _286 = Option::<Arguments<'_>>::None;
        _285 = core::panicking::assert_failed::<&String, &str>(move _284, _280, _281, move _286) -> bb174;
    }

    bb91: {
        drop(_266) -> bb92;
    }

    bb92: {
        _290 = const 3_i32;
        _291 = Le(const 1_i32, _290);
        switchInt(move _291) -> [0: bb94, otherwise: bb93];
    }

    bb93: {
        _292 = Le(_290, const 3_i32);
        switchInt(move _292) -> [0: bb94, otherwise: bb95];
    }

    bb94: {
        _293 = const "literal, other";
        _289 = _293;
        goto -> bb96;
    }

    bb95: {
        _289 = const "literal, in range";
        goto -> bb96;
    }

    bb96: {
        _288 = &_289;
        _295 = const "literal, in range";
        _294 = &_295;
        _287 = (move _288, move _294);
        _296 = (_287.0: &&str);
        _297 = (_287.1: &&str);
        _299 = <&str as PartialEq>::eq(_296, _297) -> bb97;
    }

    bb97: {
        _298 = Not(move _299);
        switchInt(move _298) -> [0: bb99, otherwise: bb98];
    }

    bb98: {
        _300 = core::panicking::AssertKind::Eq;
        _302 = Option::<Arguments<'_>>::None;
        _301 = core::panicking::assert_failed::<&str, &str>(move _300, _296, _297, move _302);
    }

    bb99: {
        _306 = const 3_i32;
        _307 = Le(const 4_i32, _306);
        switchInt(move _307) -> [0: bb101, otherwise: bb100];
    }

    bb100: {
        _308 = Le(_306, const 6_i32);
        switchInt(move _308) -> [0: bb101, otherwise: bb102];
    }

    bb101: {
        _309 = const "literal, other";
        _305 = _309;
        goto -> bb103;
    }

    bb102: {
        _305 = const "literal, in range";
        goto -> bb103;
    }

    bb103: {
        _304 = &_305;
        _311 = const "literal, other";
        _310 = &_311;
        _303 = (move _304, move _310);
        _312 = (_303.0: &&str);
        _313 = (_303.1: &&str);
        _315 = <&str as PartialEq>::eq(_312, _313) -> bb104;
    }

    bb104: {
        _314 = Not(move _315);
        switchInt(move _314) -> [0: bb106, otherwise: bb105];
    }

    bb105: {
        _316 = core::panicking::AssertKind::Eq;
        _318 = Option::<Arguments<'_>>::None;
        _317 = core::panicking::assert_failed::<&str, &str>(move _316, _312, _313, move _318);
    }

    bb106: {
        _327 = [const "macro caught expr: "];
        _326 = &_327;
        _325 = _326 as &[&str] (Pointer(Unsize));
        _333 = const -1.2f64;
        _332 = &_333;
        _331 = core::fmt::rt::Argument::<'_>::new_display::<f64>(_332) -> bb107;
    }

    bb107: {
        _330 = [move _331];
        _329 = &_330;
        _328 = _329 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _324 = Arguments::<'_>::new_v1(move _325, move _328) -> bb108;
    }

    bb108: {
        _323 = format(move _324) -> bb109;
    }

    bb109: {
        _322 = move _323;
        _321 = &_322;
        _320 = &_321;
        _335 = const "macro caught expr: -1.2";
        _334 = &_335;
        _319 = (move _320, move _334);
        _336 = (_319.0: &&std::string::String);
        _337 = (_319.1: &&str);
        _339 = <&String as PartialEq<&str>>::eq(_336, _337) -> [return: bb110, unwind: bb173];
    }

    bb110: {
        _338 = Not(move _339);
        switchInt(move _338) -> [0: bb112, otherwise: bb111];
    }

    bb111: {
        _340 = core::panicking::AssertKind::Eq;
        _342 = Option::<Arguments<'_>>::None;
        _341 = core::panicking::assert_failed::<&String, &str>(move _340, _336, _337, move _342) -> bb173;
    }

    bb112: {
        drop(_322) -> bb113;
    }

    bb113: {
        _351 = [const "macro caught expr: "];
        _350 = &_351;
        _349 = _350 as &[&str] (Pointer(Unsize));
        _357 = const -1.2f64;
        _356 = &_357;
        _355 = core::fmt::rt::Argument::<'_>::new_display::<f64>(_356) -> bb114;
    }

    bb114: {
        _354 = [move _355];
        _353 = &_354;
        _352 = _353 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _348 = Arguments::<'_>::new_v1(move _349, move _352) -> bb115;
    }

    bb115: {
        _347 = format(move _348) -> bb116;
    }

    bb116: {
        _346 = move _347;
        _345 = &_346;
        _344 = &_345;
        _359 = const "macro caught expr: -1.2";
        _358 = &_359;
        _343 = (move _344, move _358);
        _360 = (_343.0: &&std::string::String);
        _361 = (_343.1: &&str);
        _363 = <&String as PartialEq<&str>>::eq(_360, _361) -> [return: bb117, unwind: bb172];
    }

    bb117: {
        _362 = Not(move _363);
        switchInt(move _362) -> [0: bb119, otherwise: bb118];
    }

    bb118: {
        _364 = core::panicking::AssertKind::Eq;
        _366 = Option::<Arguments<'_>>::None;
        _365 = core::panicking::assert_failed::<&String, &str>(move _364, _360, _361, move _366) -> bb172;
    }

    bb119: {
        drop(_346) -> bb120;
    }

    bb120: {
        _375 = [const "macro caught expr: "];
        _374 = &_375;
        _373 = _374 as &[&str] (Pointer(Unsize));
        _381 = Add(const 1_i32, const 3_i32);
        _380 = &_381;
        _379 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_380) -> bb121;
    }

    bb121: {
        _378 = [move _379];
        _377 = &_378;
        _376 = _377 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _372 = Arguments::<'_>::new_v1(move _373, move _376) -> bb122;
    }

    bb122: {
        _371 = format(move _372) -> bb123;
    }

    bb123: {
        _370 = move _371;
        _369 = &_370;
        _368 = &_369;
        _383 = const "macro caught expr: 4";
        _382 = &_383;
        _367 = (move _368, move _382);
        _384 = (_367.0: &&std::string::String);
        _385 = (_367.1: &&str);
        _387 = <&String as PartialEq<&str>>::eq(_384, _385) -> [return: bb124, unwind: bb171];
    }

    bb124: {
        _386 = Not(move _387);
        switchInt(move _386) -> [0: bb126, otherwise: bb125];
    }

    bb125: {
        _388 = core::panicking::AssertKind::Eq;
        _390 = Option::<Arguments<'_>>::None;
        _389 = core::panicking::assert_failed::<&String, &str>(move _388, _384, _385, move _390) -> bb171;
    }

    bb126: {
        drop(_370) -> bb127;
    }

    bb127: {
        _399 = [const "macro caught expr: "];
        _398 = &_399;
        _397 = _398 as &[&str] (Pointer(Unsize));
        _404 = &_405;
        _403 = core::fmt::rt::Argument::<'_>::new_debug::<()>(_404) -> bb128;
    }

    bb128: {
        _402 = [move _403];
        _401 = &_402;
        _400 = _401 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _396 = Arguments::<'_>::new_v1(move _397, move _400) -> bb129;
    }

    bb129: {
        _395 = format(move _396) -> bb130;
    }

    bb130: {
        _394 = move _395;
        _393 = &_394;
        _392 = &_393;
        _407 = const "macro caught expr: ()";
        _406 = &_407;
        _391 = (move _392, move _406);
        _408 = (_391.0: &&std::string::String);
        _409 = (_391.1: &&str);
        _411 = <&String as PartialEq<&str>>::eq(_408, _409) -> [return: bb131, unwind: bb170];
    }

    bb131: {
        _410 = Not(move _411);
        switchInt(move _410) -> [0: bb133, otherwise: bb132];
    }

    bb132: {
        _412 = core::panicking::AssertKind::Eq;
        _414 = Option::<Arguments<'_>>::None;
        _413 = core::panicking::assert_failed::<&String, &str>(move _412, _408, _409, move _414) -> bb170;
    }

    bb133: {
        drop(_394) -> bb134;
    }

    bb134: {
        _423 = [const "macro caught expr: ", const " ..= "];
        _422 = &_423;
        _421 = _422 as &[&str] (Pointer(Unsize));
        _429 = Add(const 1_i32, const 1_i32);
        _428 = &_429;
        _427 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_428) -> bb135;
    }

    bb135: {
        _432 = Add(const 2_i32, const 2_i32);
        _431 = &_432;
        _430 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_431) -> bb136;
    }

    bb136: {
        _426 = [move _427, move _430];
        _425 = &_426;
        _424 = _425 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _420 = Arguments::<'_>::new_v1(move _421, move _424) -> bb137;
    }

    bb137: {
        _419 = format(move _420) -> bb138;
    }

    bb138: {
        _418 = move _419;
        _417 = &_418;
        _416 = &_417;
        _434 = const "macro caught expr: 2 ..= 4";
        _433 = &_434;
        _415 = (move _416, move _433);
        _435 = (_415.0: &&std::string::String);
        _436 = (_415.1: &&str);
        _438 = <&String as PartialEq<&str>>::eq(_435, _436) -> [return: bb139, unwind: bb169];
    }

    bb139: {
        _437 = Not(move _438);
        switchInt(move _437) -> [0: bb141, otherwise: bb140];
    }

    bb140: {
        _439 = core::panicking::AssertKind::Eq;
        _441 = Option::<Arguments<'_>>::None;
        _440 = core::panicking::assert_failed::<&String, &str>(move _439, _435, _436, move _441) -> bb169;
    }

    bb141: {
        drop(_418) -> bb142;
    }

    bb142: {
        _444 = const "attr matched expr";
        _443 = &_444;
        _446 = const "attr matched expr";
        _445 = &_446;
        _442 = (move _443, move _445);
        _447 = (_442.0: &&str);
        _448 = (_442.1: &&str);
        _450 = <&str as PartialEq>::eq(_447, _448) -> bb143;
    }

    bb143: {
        _449 = Not(move _450);
        switchInt(move _449) -> [0: bb145, otherwise: bb144];
    }

    bb144: {
        _451 = core::panicking::AssertKind::Eq;
        _453 = Option::<Arguments<'_>>::None;
        _452 = core::panicking::assert_failed::<&str, &str>(move _451, _447, _448, move _453);
    }

    bb145: {
        _457 = Vec::<i32>::new() -> bb146;
    }

    bb146: {
        _460 = Add(const 20_i32, const 2_i32);
        _459 = std::ops::Range::<i32> { start: const 10_i32, end: move _460 };
        _458 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _459) -> [return: bb147, unwind: bb168];
    }

    bb147: {
        _461 = move _458;
        goto -> bb148;
    }

    bb148: {
        _463 = &mut _461;
        _462 = <std::ops::Range<i32> as Iterator>::next(_463) -> [return: bb149, unwind: bb168];
    }

    bb149: {
        _464 = discriminant(_462);
        switchInt(move _464) -> [0: bb151, 1: bb150, otherwise: bb73];
    }

    bb150: {
        _465 = ((_462 as Some).0: i32);
        _467 = &mut _457;
        _466 = Vec::<i32>::push(move _467, _465) -> [return: bb188, unwind: bb168];
    }

    bb151: {
        _456 = const "expr";
        drop(_457) -> bb152;
    }

    bb152: {
        _455 = &_456;
        _469 = const "expr";
        _468 = &_469;
        _454 = (move _455, move _468);
        _470 = (_454.0: &&str);
        _471 = (_454.1: &&str);
        _473 = <&str as PartialEq>::eq(_470, _471) -> bb153;
    }

    bb153: {
        _472 = Not(move _473);
        switchInt(move _472) -> [0: bb155, otherwise: bb154];
    }

    bb154: {
        _474 = core::panicking::AssertKind::Eq;
        _476 = Option::<Arguments<'_>>::None;
        _475 = core::panicking::assert_failed::<&str, &str>(move _474, _470, _471, move _476);
    }

    bb155: {
        _480 = const 3_i32;
        switchInt(_480) -> [3: bb157, otherwise: bb156];
    }

    bb156: {
        _481 = const "pat, other";
        _479 = _481;
        goto -> bb158;
    }

    bb157: {
        _479 = const "pat, single";
        goto -> bb158;
    }

    bb158: {
        _478 = &_479;
        _483 = const "pat, single";
        _482 = &_483;
        _477 = (move _478, move _482);
        _484 = (_477.0: &&str);
        _485 = (_477.1: &&str);
        _487 = <&str as PartialEq>::eq(_484, _485) -> bb159;
    }

    bb159: {
        _486 = Not(move _487);
        switchInt(move _486) -> [0: bb161, otherwise: bb160];
    }

    bb160: {
        _488 = core::panicking::AssertKind::Eq;
        _490 = Option::<Arguments<'_>>::None;
        _489 = core::panicking::assert_failed::<&str, &str>(move _488, _484, _485, move _490);
    }

    bb161: {
        _494 = const 3_i32;
        switchInt(_494) -> [6: bb163, otherwise: bb162];
    }

    bb162: {
        _495 = const "pat, other";
        _493 = _495;
        goto -> bb164;
    }

    bb163: {
        _493 = const "pat, single";
        goto -> bb164;
    }

    bb164: {
        _492 = &_493;
        _497 = const "pat, other";
        _496 = &_497;
        _491 = (move _492, move _496);
        _498 = (_491.0: &&str);
        _499 = (_491.1: &&str);
        _501 = <&str as PartialEq>::eq(_498, _499) -> bb165;
    }

    bb165: {
        _500 = Not(move _501);
        switchInt(move _500) -> [0: bb167, otherwise: bb166];
    }

    bb166: {
        _502 = core::panicking::AssertKind::Eq;
        _504 = Option::<Arguments<'_>>::None;
        _503 = core::panicking::assert_failed::<&str, &str>(move _502, _498, _499, move _504);
    }

    bb167: {
        return;
    }

    bb168 (cleanup): {
        drop(_457) -> [return: bb186, unwind terminate];
    }

    bb169 (cleanup): {
        drop(_418) -> [return: bb186, unwind terminate];
    }

    bb170 (cleanup): {
        drop(_394) -> [return: bb186, unwind terminate];
    }

    bb171 (cleanup): {
        drop(_370) -> [return: bb186, unwind terminate];
    }

    bb172 (cleanup): {
        drop(_346) -> [return: bb186, unwind terminate];
    }

    bb173 (cleanup): {
        drop(_322) -> [return: bb186, unwind terminate];
    }

    bb174 (cleanup): {
        drop(_266) -> [return: bb186, unwind terminate];
    }

    bb175 (cleanup): {
        drop(_242) -> [return: bb186, unwind terminate];
    }

    bb176 (cleanup): {
        drop(_220) -> [return: bb186, unwind terminate];
    }

    bb177 (cleanup): {
        drop(_187) -> [return: bb186, unwind terminate];
    }

    bb178 (cleanup): {
        drop(_160) -> [return: bb186, unwind terminate];
    }

    bb179 (cleanup): {
        drop(_136) -> [return: bb186, unwind terminate];
    }

    bb180 (cleanup): {
        drop(_112) -> [return: bb186, unwind terminate];
    }

    bb181 (cleanup): {
        drop(_91) -> [return: bb186, unwind terminate];
    }

    bb182 (cleanup): {
        drop(_70) -> [return: bb186, unwind terminate];
    }

    bb183 (cleanup): {
        drop(_46) -> [return: bb186, unwind terminate];
    }

    bb184 (cleanup): {
        drop(_25) -> [return: bb186, unwind terminate];
    }

    bb185 (cleanup): {
        drop(_4) -> [return: bb186, unwind terminate];
    }

    bb186 (cleanup): {
        resume;
    }

    bb187: {
        goto -> bb70;
    }

    bb188: {
        goto -> bb148;
    }
}
