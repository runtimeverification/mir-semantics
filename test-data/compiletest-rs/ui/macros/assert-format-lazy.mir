// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: bool;
    let _2: !;
    let mut _3: bool;
    let mut _4: bool;
    let _5: !;
    let mut _6: (&i32, &i32);
    let mut _7: &i32;
    let _8: i32;
    let mut _9: &i32;
    let _10: i32;
    let _11: &i32;
    let _12: &i32;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: i32;
    let mut _16: i32;
    let _18: !;
    let mut _19: bool;
    let mut _20: (&i32, &i32);
    let mut _21: &i32;
    let _22: i32;
    let mut _23: &i32;
    let _24: i32;
    let _25: &i32;
    let _26: &i32;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: i32;
    let mut _30: i32;
    let _32: !;
    let mut _33: (&i32, &i32);
    let mut _34: &i32;
    let _35: i32;
    let mut _36: &i32;
    let _37: i32;
    let _38: &i32;
    let _39: &i32;
    let mut _40: bool;
    let mut _41: i32;
    let mut _42: i32;
    let _44: !;
    let mut _45: bool;
    let mut _46: (&i32, &i32);
    let mut _47: &i32;
    let _48: i32;
    let mut _49: &i32;
    let _50: i32;
    let _51: &i32;
    let _52: &i32;
    let mut _53: bool;
    let mut _54: i32;
    let mut _55: i32;
    let _57: !;
    scope 1 {
        debug left_val => _11;
        debug right_val => _12;
        let _17: core::panicking::AssertKind;
        scope 2 {
            debug kind => _17;
        }
    }
    scope 3 {
        debug left_val => _25;
        debug right_val => _26;
        let _31: core::panicking::AssertKind;
        scope 4 {
            debug kind => _31;
        }
    }
    scope 5 {
        debug left_val => _38;
        debug right_val => _39;
        let _43: core::panicking::AssertKind;
        scope 6 {
            debug kind => _43;
        }
    }
    scope 7 {
        debug left_val => _51;
        debug right_val => _52;
        let _56: core::panicking::AssertKind;
        scope 8 {
            debug kind => _56;
        }
    }

    bb0: {
        _1 = Not(const true);
        switchInt(move _1) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _2 = begin_panic::<&str>(const "assert! evaluated format expressions");
    }

    bb2: {
        _3 = const true;
        switchInt(move _3) -> [0: bb5, otherwise: bb3];
    }

    bb3: {
        _4 = Not(const true);
        switchInt(move _4) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _5 = begin_panic::<&str>(const "debug_assert! evaluated format expressions");
    }

    bb5: {
        _8 = const 1_i32;
        _7 = &_8;
        _10 = const 1_i32;
        _9 = &_10;
        _6 = (move _7, move _9);
        _11 = (_6.0: &i32);
        _12 = (_6.1: &i32);
        _15 = (*_11);
        _16 = (*_12);
        _14 = Eq(move _15, move _16);
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _17 = core::panicking::AssertKind::Eq;
        _18 = begin_panic::<&str>(const "assert_eq! evaluated format expressions");
    }

    bb7: {
        _19 = const true;
        switchInt(move _19) -> [0: bb10, otherwise: bb8];
    }

    bb8: {
        _22 = const 1_i32;
        _21 = &_22;
        _24 = const 1_i32;
        _23 = &_24;
        _20 = (move _21, move _23);
        _25 = (_20.0: &i32);
        _26 = (_20.1: &i32);
        _29 = (*_25);
        _30 = (*_26);
        _28 = Eq(move _29, move _30);
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _31 = core::panicking::AssertKind::Eq;
        _32 = begin_panic::<&str>(const "debug_assert_eq! evaluated format expressions");
    }

    bb10: {
        _35 = const 1_i32;
        _34 = &_35;
        _37 = const 2_i32;
        _36 = &_37;
        _33 = (move _34, move _36);
        _38 = (_33.0: &i32);
        _39 = (_33.1: &i32);
        _41 = (*_38);
        _42 = (*_39);
        _40 = Eq(move _41, move _42);
        switchInt(move _40) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _43 = core::panicking::AssertKind::Ne;
        _44 = begin_panic::<&str>(const "assert_ne! evaluated format expressions");
    }

    bb12: {
        _45 = const true;
        switchInt(move _45) -> [0: bb15, otherwise: bb13];
    }

    bb13: {
        _48 = const 1_i32;
        _47 = &_48;
        _50 = const 2_i32;
        _49 = &_50;
        _46 = (move _47, move _49);
        _51 = (_46.0: &i32);
        _52 = (_46.1: &i32);
        _54 = (*_51);
        _55 = (*_52);
        _53 = Eq(move _54, move _55);
        switchInt(move _53) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _56 = core::panicking::AssertKind::Ne;
        _57 = begin_panic::<&str>(const "debug_assert_ne! evaluated format expressions");
    }

    bb15: {
        return;
    }
}
