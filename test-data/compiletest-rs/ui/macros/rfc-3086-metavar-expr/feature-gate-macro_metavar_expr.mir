// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (&i32, &i32);
    let mut _2: &i32;
    let _3: i32;
    let mut _4: &i32;
    let _5: i32;
    let _6: &i32;
    let _7: &i32;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: i32;
    let mut _11: i32;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&i32, &i32);
    let mut _16: &i32;
    let _17: i32;
    let mut _18: &i32;
    let _19: i32;
    let _20: &i32;
    let _21: &i32;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: i32;
    let mut _25: i32;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: (&((i32, i32, i32, i32, i32), (i32, i32, i32, i32)), &((i32, i32, i32, i32, i32), (i32, i32, i32, i32)));
    let mut _30: &((i32, i32, i32, i32, i32), (i32, i32, i32, i32));
    let _31: ((i32, i32, i32, i32, i32), (i32, i32, i32, i32));
    let mut _32: (i32, i32, i32, i32, i32);
    let mut _33: (i32, i32, i32, i32);
    let mut _34: &((i32, i32, i32, i32, i32), (i32, i32, i32, i32));
    let _35: ((i32, i32, i32, i32, i32), (i32, i32, i32, i32));
    let mut _36: (i32, i32, i32, i32, i32);
    let mut _37: (i32, i32, i32, i32);
    let _38: &((i32, i32, i32, i32, i32), (i32, i32, i32, i32));
    let _39: &((i32, i32, i32, i32, i32), (i32, i32, i32, i32));
    let mut _40: bool;
    let mut _41: bool;
    let _43: !;
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _45: (&[(i32, i32); 2], &[(i32, i32); 2]);
    let mut _46: &[(i32, i32); 2];
    let _47: [(i32, i32); 2];
    let mut _48: (i32, i32);
    let mut _49: (i32, i32);
    let mut _50: &[(i32, i32); 2];
    let _51: [(i32, i32); 2];
    let mut _52: (i32, i32);
    let mut _53: (i32, i32);
    let _54: &[(i32, i32); 2];
    let _55: &[(i32, i32); 2];
    let mut _56: bool;
    let mut _57: bool;
    let _59: !;
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _61: (&[(i32, i32, i32, i32, &str); 7], &[(i32, i32, i32, i32, &str); 7]);
    let mut _62: &[(i32, i32, i32, i32, &str); 7];
    let _63: [(i32, i32, i32, i32, &str); 7];
    let mut _64: (i32, i32, i32, i32, &str);
    let mut _65: (i32, i32, i32, i32, &str);
    let _66: &str;
    let mut _67: (i32, i32, i32, i32, &str);
    let _68: &str;
    let mut _69: (i32, i32, i32, i32, &str);
    let _70: &str;
    let mut _71: (i32, i32, i32, i32, &str);
    let _72: &str;
    let mut _73: (i32, i32, i32, i32, &str);
    let _74: &str;
    let mut _75: (i32, i32, i32, i32, &str);
    let _76: &str;
    let mut _77: &[(i32, i32, i32, i32, &str); 7];
    let _78: [(i32, i32, i32, i32, &str); 7];
    let mut _79: (i32, i32, i32, i32, &str);
    let mut _80: (i32, i32, i32, i32, &str);
    let _81: &str;
    let mut _82: (i32, i32, i32, i32, &str);
    let _83: &str;
    let mut _84: (i32, i32, i32, i32, &str);
    let _85: &str;
    let mut _86: (i32, i32, i32, i32, &str);
    let _87: &str;
    let mut _88: (i32, i32, i32, i32, &str);
    let _89: &str;
    let mut _90: (i32, i32, i32, i32, &str);
    let _91: &str;
    let _92: &[(i32, i32, i32, i32, &str); 7];
    let _93: &[(i32, i32, i32, i32, &str); 7];
    let mut _94: bool;
    let mut _95: bool;
    let _97: !;
    let mut _98: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _99: (&i32, &i32);
    let mut _100: &i32;
    let _101: i32;
    let mut _102: &i32;
    let _103: i32;
    let _104: &i32;
    let _105: &i32;
    let mut _106: bool;
    let mut _107: bool;
    let mut _108: i32;
    let mut _109: i32;
    let _111: !;
    let mut _112: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _113: (&i32, &i32);
    let mut _114: &i32;
    let _115: i32;
    let mut _116: &i32;
    let _117: i32;
    let _118: &i32;
    let _119: &i32;
    let mut _120: bool;
    let mut _121: bool;
    let mut _122: i32;
    let mut _123: i32;
    let _125: !;
    let mut _126: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _127: (&i32, &i32);
    let mut _128: &i32;
    let _129: i32;
    let mut _130: &i32;
    let _131: i32;
    let _132: &i32;
    let _133: &i32;
    let mut _134: bool;
    let mut _135: bool;
    let mut _136: i32;
    let mut _137: i32;
    let _139: !;
    let mut _140: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _141: (&i32, &i32);
    let mut _142: &i32;
    let _143: i32;
    let mut _144: &i32;
    let _145: i32;
    let _146: &i32;
    let _147: &i32;
    let mut _148: bool;
    let mut _149: bool;
    let mut _150: i32;
    let mut _151: i32;
    let _153: !;
    let mut _154: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }
    scope 3 {
        debug left_val => _20;
        debug right_val => _21;
        let _26: core::panicking::AssertKind;
        scope 4 {
            debug kind => _26;
        }
    }
    scope 5 {
        debug left_val => _38;
        debug right_val => _39;
        let _42: core::panicking::AssertKind;
        scope 6 {
            debug kind => _42;
        }
    }
    scope 7 {
        debug left_val => _54;
        debug right_val => _55;
        let _58: core::panicking::AssertKind;
        scope 8 {
            debug kind => _58;
        }
    }
    scope 9 {
        debug left_val => _92;
        debug right_val => _93;
        let _96: core::panicking::AssertKind;
        scope 10 {
            debug kind => _96;
        }
    }
    scope 11 {
        debug left_val => _104;
        debug right_val => _105;
        let _110: core::panicking::AssertKind;
        scope 12 {
            debug kind => _110;
        }
    }
    scope 13 {
        debug left_val => _118;
        debug right_val => _119;
        let _124: core::panicking::AssertKind;
        scope 14 {
            debug kind => _124;
        }
    }
    scope 15 {
        debug left_val => _132;
        debug right_val => _133;
        let _138: core::panicking::AssertKind;
        scope 16 {
            debug kind => _138;
        }
    }
    scope 17 {
        debug left_val => _146;
        debug right_val => _147;
        let _152: core::panicking::AssertKind;
        scope 18 {
            debug kind => _152;
        }
    }

    bb0: {
        _3 = const 3_i32;
        _2 = &_3;
        _5 = const 3_i32;
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &i32);
        _7 = (_1.1: &i32);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<i32, i32>(move _12, _6, _7, move _14);
    }

    bb2: {
        _17 = const 6_i32;
        _16 = &_17;
        _19 = const 6_i32;
        _18 = &_19;
        _15 = (move _16, move _18);
        _20 = (_15.0: &i32);
        _21 = (_15.1: &i32);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<i32, i32>(move _26, _20, _21, move _28);
    }

    bb4: {
        _32 = (const 26_i32, const 2_i32, const 5_i32, const 9_i32, const 26_i32);
        _33 = (const 9_i32, const 2_i32, const 5_i32, const 9_i32);
        _31 = (move _32, move _33);
        _30 = &_31;
        _36 = (const 26_i32, const 2_i32, const 5_i32, const 9_i32, const 26_i32);
        _37 = (const 9_i32, const 2_i32, const 5_i32, const 9_i32);
        _35 = (move _36, move _37);
        _34 = &_35;
        _29 = (move _30, move _34);
        _38 = (_29.0: &((i32, i32, i32, i32, i32), (i32, i32, i32, i32)));
        _39 = (_29.1: &((i32, i32, i32, i32, i32), (i32, i32, i32, i32)));
        _41 = <((i32, i32, i32, i32, i32), (i32, i32, i32, i32)) as PartialEq>::eq(_38, _39) -> bb5;
    }

    bb5: {
        _40 = Not(move _41);
        switchInt(move _40) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _42 = core::panicking::AssertKind::Eq;
        _44 = Option::<Arguments<'_>>::None;
        _43 = core::panicking::assert_failed::<((i32, i32, i32, i32, i32), (i32, i32, i32, i32)), ((i32, i32, i32, i32, i32), (i32, i32, i32, i32))>(move _42, _38, _39, move _44);
    }

    bb7: {
        _48 = (const 0_i32, const 2_i32);
        _49 = (const 1_i32, const 2_i32);
        _47 = [move _48, move _49];
        _46 = &_47;
        _52 = (const 0_i32, const 2_i32);
        _53 = (const 1_i32, const 2_i32);
        _51 = [move _52, move _53];
        _50 = &_51;
        _45 = (move _46, move _50);
        _54 = (_45.0: &[(i32, i32); 2]);
        _55 = (_45.1: &[(i32, i32); 2]);
        _57 = <[(i32, i32); 2] as PartialEq>::eq(_54, _55) -> bb8;
    }

    bb8: {
        _56 = Not(move _57);
        switchInt(move _56) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _58 = core::panicking::AssertKind::Eq;
        _60 = Option::<Arguments<'_>>::None;
        _59 = core::panicking::assert_failed::<[(i32, i32); 2], [(i32, i32); 2]>(move _58, _54, _55, move _60);
    }

    bb10: {
        _64 = (const 0_i32, const 2_i32, const 0_i32, const 3_i32, const "foo");
        _66 = const "bar";
        _65 = (const 0_i32, const 2_i32, const 1_i32, const 3_i32, _66);
        _68 = const "baz";
        _67 = (const 0_i32, const 2_i32, const 2_i32, const 3_i32, _68);
        _70 = const "qux";
        _69 = (const 1_i32, const 2_i32, const 0_i32, const 4_i32, _70);
        _72 = const "quux";
        _71 = (const 1_i32, const 2_i32, const 1_i32, const 4_i32, _72);
        _74 = const "quuz";
        _73 = (const 1_i32, const 2_i32, const 2_i32, const 4_i32, _74);
        _76 = const "xyzzy";
        _75 = (const 1_i32, const 2_i32, const 3_i32, const 4_i32, _76);
        _63 = [move _64, move _65, move _67, move _69, move _71, move _73, move _75];
        _62 = &_63;
        _79 = (const 0_i32, const 2_i32, const 0_i32, const 3_i32, const "foo");
        _81 = const "bar";
        _80 = (const 0_i32, const 2_i32, const 1_i32, const 3_i32, _81);
        _83 = const "baz";
        _82 = (const 0_i32, const 2_i32, const 2_i32, const 3_i32, _83);
        _85 = const "qux";
        _84 = (const 1_i32, const 2_i32, const 0_i32, const 4_i32, _85);
        _87 = const "quux";
        _86 = (const 1_i32, const 2_i32, const 1_i32, const 4_i32, _87);
        _89 = const "quuz";
        _88 = (const 1_i32, const 2_i32, const 2_i32, const 4_i32, _89);
        _91 = const "xyzzy";
        _90 = (const 1_i32, const 2_i32, const 3_i32, const 4_i32, _91);
        _78 = [move _79, move _80, move _82, move _84, move _86, move _88, move _90];
        _77 = &_78;
        _61 = (move _62, move _77);
        _92 = (_61.0: &[(i32, i32, i32, i32, &str); 7]);
        _93 = (_61.1: &[(i32, i32, i32, i32, &str); 7]);
        _95 = <[(i32, i32, i32, i32, &str); 7] as PartialEq>::eq(_92, _93) -> bb11;
    }

    bb11: {
        _94 = Not(move _95);
        switchInt(move _94) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _96 = core::panicking::AssertKind::Eq;
        _98 = Option::<Arguments<'_>>::None;
        _97 = core::panicking::assert_failed::<[(i32, i32, i32, i32, &str); 7], [(i32, i32, i32, i32, &str); 7]>(move _96, _92, _93, move _98);
    }

    bb13: {
        _101 = Add(const 1_i32, const 3_i32);
        _100 = &_101;
        _103 = const 4_i32;
        _102 = &_103;
        _99 = (move _100, move _102);
        _104 = (_99.0: &i32);
        _105 = (_99.1: &i32);
        _108 = (*_104);
        _109 = (*_105);
        _107 = Eq(move _108, move _109);
        _106 = Not(move _107);
        switchInt(move _106) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _110 = core::panicking::AssertKind::Eq;
        _112 = Option::<Arguments<'_>>::None;
        _111 = core::panicking::assert_failed::<i32, i32>(move _110, _104, _105, move _112);
    }

    bb15: {
        _115 = Add(const 5_i32, const 2_i32);
        _114 = &_115;
        _117 = const 7_i32;
        _116 = &_117;
        _113 = (move _114, move _116);
        _118 = (_113.0: &i32);
        _119 = (_113.1: &i32);
        _122 = (*_118);
        _123 = (*_119);
        _121 = Eq(move _122, move _123);
        _120 = Not(move _121);
        switchInt(move _120) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _124 = core::panicking::AssertKind::Eq;
        _126 = Option::<Arguments<'_>>::None;
        _125 = core::panicking::assert_failed::<i32, i32>(move _124, _118, _119, move _126);
    }

    bb17: {
        _129 = const 1_i32;
        _128 = &_129;
        _131 = const 1_i32;
        _130 = &_131;
        _127 = (move _128, move _130);
        _132 = (_127.0: &i32);
        _133 = (_127.1: &i32);
        _136 = (*_132);
        _137 = (*_133);
        _135 = Eq(move _136, move _137);
        _134 = Not(move _135);
        switchInt(move _134) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _138 = core::panicking::AssertKind::Eq;
        _140 = Option::<Arguments<'_>>::None;
        _139 = core::panicking::assert_failed::<i32, i32>(move _138, _132, _133, move _140);
    }

    bb19: {
        _143 = const 2_i32;
        _142 = &_143;
        _145 = const 2_i32;
        _144 = &_145;
        _141 = (move _142, move _144);
        _146 = (_141.0: &i32);
        _147 = (_141.1: &i32);
        _150 = (*_146);
        _151 = (*_147);
        _149 = Eq(move _150, move _151);
        _148 = Not(move _149);
        switchInt(move _148) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _152 = core::panicking::AssertKind::Eq;
        _154 = Option::<Arguments<'_>>::None;
        _153 = core::panicking::assert_failed::<i32, i32>(move _152, _146, _147, move _154);
    }

    bb21: {
        return;
    }
}
