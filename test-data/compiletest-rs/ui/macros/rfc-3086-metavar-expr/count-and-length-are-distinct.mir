// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (&[i32; 13], &[i32; 13]);
    let mut _2: &[i32; 13];
    let _3: [i32; 13];
    let mut _4: &[i32; 13];
    let _5: [i32; 13];
    let _6: &[i32; 13];
    let _7: &[i32; 13];
    let mut _8: bool;
    let mut _9: bool;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: (&&[&[i32]], &&[&[i32]]);
    let mut _14: &&[&[i32]];
    let _15: &[&[i32]];
    let _16: &[&[i32]];
    let mut _17: &[&[i32]; 17];
    let _18: [&[i32]; 17];
    let mut _19: &[i32];
    let _20: &[i32];
    let mut _21: &[i32; 1];
    let _22: [i32; 1];
    let _23: &[i32];
    let _24: &[i32];
    let mut _25: &[i32; 1];
    let _26: [i32; 1];
    let _27: &[i32];
    let _28: &[i32];
    let mut _29: &[i32; 1];
    let _30: [i32; 1];
    let _31: &[i32];
    let _32: &[i32];
    let mut _33: &[i32; 1];
    let _34: [i32; 1];
    let _35: &[i32];
    let _36: &[i32];
    let mut _37: &[i32; 1];
    let _38: [i32; 1];
    let _39: &[i32];
    let _40: &[i32];
    let mut _41: &[i32; 1];
    let _42: [i32; 1];
    let _43: &[i32];
    let _44: &[i32];
    let mut _45: &[i32; 1];
    let _46: [i32; 1];
    let _47: &[i32];
    let _48: &[i32];
    let mut _49: &[i32; 1];
    let _50: [i32; 1];
    let _51: &[i32];
    let _52: &[i32];
    let mut _53: &[i32; 1];
    let _54: [i32; 1];
    let _55: &[i32];
    let _56: &[i32];
    let mut _57: &[i32; 2];
    let _58: [i32; 2];
    let _59: &[i32];
    let _60: &[i32];
    let mut _61: &[i32; 2];
    let _62: [i32; 2];
    let _63: &[i32];
    let _64: &[i32];
    let mut _65: &[i32; 2];
    let _66: [i32; 2];
    let _67: &[i32];
    let _68: &[i32];
    let mut _69: &[i32; 2];
    let _70: [i32; 2];
    let _71: &[i32];
    let _72: &[i32];
    let mut _73: &[i32; 2];
    let _74: [i32; 2];
    let _75: &[i32];
    let _76: &[i32];
    let mut _77: &[i32; 3];
    let _78: [i32; 3];
    let _79: &[i32];
    let _80: &[i32];
    let mut _81: &[i32; 3];
    let _82: [i32; 3];
    let _83: &[i32];
    let _84: &[i32];
    let mut _85: &[i32; 4];
    let _86: [i32; 4];
    let mut _87: &&[&[i32]];
    let _88: &[&[i32]];
    let _89: &[&[i32]];
    let mut _90: &[&[i32]; 17];
    let _91: [&[i32]; 17];
    let mut _92: &[i32];
    let _93: &[i32];
    let mut _94: &[i32; 1];
    let _95: [i32; 1];
    let _96: &[i32];
    let _97: &[i32];
    let mut _98: &[i32; 1];
    let _99: [i32; 1];
    let _100: &[i32];
    let _101: &[i32];
    let mut _102: &[i32; 1];
    let _103: [i32; 1];
    let _104: &[i32];
    let _105: &[i32];
    let mut _106: &[i32; 1];
    let _107: [i32; 1];
    let _108: &[i32];
    let _109: &[i32];
    let mut _110: &[i32; 1];
    let _111: [i32; 1];
    let _112: &[i32];
    let _113: &[i32];
    let mut _114: &[i32; 1];
    let _115: [i32; 1];
    let _116: &[i32];
    let _117: &[i32];
    let mut _118: &[i32; 1];
    let _119: [i32; 1];
    let _120: &[i32];
    let _121: &[i32];
    let mut _122: &[i32; 1];
    let _123: [i32; 1];
    let _124: &[i32];
    let _125: &[i32];
    let mut _126: &[i32; 1];
    let _127: [i32; 1];
    let _128: &[i32];
    let _129: &[i32];
    let mut _130: &[i32; 2];
    let _131: [i32; 2];
    let _132: &[i32];
    let _133: &[i32];
    let mut _134: &[i32; 2];
    let _135: [i32; 2];
    let _136: &[i32];
    let _137: &[i32];
    let mut _138: &[i32; 2];
    let _139: [i32; 2];
    let _140: &[i32];
    let _141: &[i32];
    let mut _142: &[i32; 2];
    let _143: [i32; 2];
    let _144: &[i32];
    let _145: &[i32];
    let mut _146: &[i32; 2];
    let _147: [i32; 2];
    let _148: &[i32];
    let _149: &[i32];
    let mut _150: &[i32; 3];
    let _151: [i32; 3];
    let _152: &[i32];
    let _153: &[i32];
    let mut _154: &[i32; 3];
    let _155: [i32; 3];
    let _156: &[i32];
    let _157: &[i32];
    let mut _158: &[i32; 4];
    let _159: [i32; 4];
    let _160: &&[&[i32]];
    let _161: &&[&[i32]];
    let mut _162: bool;
    let mut _163: bool;
    let _165: !;
    let mut _166: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _167: (&&[&[i32]], &&[&[i32]]);
    let mut _168: &&[&[i32]];
    let _169: &[&[i32]];
    let _170: &[&[i32]];
    let mut _171: &[&[i32]; 42];
    let _172: [&[i32]; 42];
    let mut _173: &[i32];
    let _174: &[i32];
    let mut _175: &[i32; 4];
    let _176: [i32; 4];
    let _177: &[i32];
    let _178: &[i32];
    let mut _179: &[i32; 4];
    let _180: [i32; 4];
    let _181: &[i32];
    let _182: &[i32];
    let mut _183: &[i32; 4];
    let _184: [i32; 4];
    let _185: &[i32];
    let _186: &[i32];
    let mut _187: &[i32; 4];
    let _188: [i32; 4];
    let _189: &[i32];
    let _190: &[i32];
    let mut _191: &[i32; 4];
    let _192: [i32; 4];
    let _193: &[i32];
    let _194: &[i32];
    let mut _195: &[i32; 4];
    let _196: [i32; 4];
    let _197: &[i32];
    let _198: &[i32];
    let mut _199: &[i32; 4];
    let _200: [i32; 4];
    let _201: &[i32];
    let _202: &[i32];
    let mut _203: &[i32; 4];
    let _204: [i32; 4];
    let _205: &[i32];
    let _206: &[i32];
    let mut _207: &[i32; 4];
    let _208: [i32; 4];
    let _209: &[i32];
    let _210: &[i32];
    let mut _211: &[i32; 4];
    let _212: [i32; 4];
    let _213: &[i32];
    let _214: &[i32];
    let mut _215: &[i32; 4];
    let _216: [i32; 4];
    let _217: &[i32];
    let _218: &[i32];
    let mut _219: &[i32; 4];
    let _220: [i32; 4];
    let _221: &[i32];
    let _222: &[i32];
    let mut _223: &[i32; 4];
    let _224: [i32; 4];
    let _225: &[i32];
    let _226: &[i32];
    let mut _227: &[i32; 4];
    let _228: [i32; 4];
    let _229: &[i32];
    let _230: &[i32];
    let mut _231: &[i32; 4];
    let _232: [i32; 4];
    let _233: &[i32];
    let _234: &[i32];
    let mut _235: &[i32; 4];
    let _236: [i32; 4];
    let _237: &[i32];
    let _238: &[i32];
    let mut _239: &[i32; 4];
    let _240: [i32; 4];
    let _241: &[i32];
    let _242: &[i32];
    let mut _243: &[i32; 4];
    let _244: [i32; 4];
    let _245: &[i32];
    let _246: &[i32];
    let mut _247: &[i32; 4];
    let _248: [i32; 4];
    let _249: &[i32];
    let _250: &[i32];
    let mut _251: &[i32; 4];
    let _252: [i32; 4];
    let _253: &[i32];
    let _254: &[i32];
    let mut _255: &[i32; 4];
    let _256: [i32; 4];
    let _257: &[i32];
    let _258: &[i32];
    let mut _259: &[i32; 4];
    let _260: [i32; 4];
    let _261: &[i32];
    let _262: &[i32];
    let mut _263: &[i32; 4];
    let _264: [i32; 4];
    let _265: &[i32];
    let _266: &[i32];
    let mut _267: &[i32; 4];
    let _268: [i32; 4];
    let _269: &[i32];
    let _270: &[i32];
    let mut _271: &[i32; 4];
    let _272: [i32; 4];
    let _273: &[i32];
    let _274: &[i32];
    let mut _275: &[i32; 4];
    let _276: [i32; 4];
    let _277: &[i32];
    let _278: &[i32];
    let mut _279: &[i32; 3];
    let _280: [i32; 3];
    let _281: &[i32];
    let _282: &[i32];
    let mut _283: &[i32; 3];
    let _284: [i32; 3];
    let _285: &[i32];
    let _286: &[i32];
    let mut _287: &[i32; 3];
    let _288: [i32; 3];
    let _289: &[i32];
    let _290: &[i32];
    let mut _291: &[i32; 3];
    let _292: [i32; 3];
    let _293: &[i32];
    let _294: &[i32];
    let mut _295: &[i32; 3];
    let _296: [i32; 3];
    let _297: &[i32];
    let _298: &[i32];
    let mut _299: &[i32; 3];
    let _300: [i32; 3];
    let _301: &[i32];
    let _302: &[i32];
    let mut _303: &[i32; 3];
    let _304: [i32; 3];
    let _305: &[i32];
    let _306: &[i32];
    let mut _307: &[i32; 3];
    let _308: [i32; 3];
    let _309: &[i32];
    let _310: &[i32];
    let mut _311: &[i32; 3];
    let _312: [i32; 3];
    let _313: &[i32];
    let _314: &[i32];
    let mut _315: &[i32; 2];
    let _316: [i32; 2];
    let _317: &[i32];
    let _318: &[i32];
    let mut _319: &[i32; 2];
    let _320: [i32; 2];
    let _321: &[i32];
    let _322: &[i32];
    let mut _323: &[i32; 2];
    let _324: [i32; 2];
    let _325: &[i32];
    let _326: &[i32];
    let mut _327: &[i32; 2];
    let _328: [i32; 2];
    let _329: &[i32];
    let _330: &[i32];
    let mut _331: &[i32; 2];
    let _332: [i32; 2];
    let _333: &[i32];
    let _334: &[i32];
    let mut _335: &[i32; 1];
    let _336: [i32; 1];
    let _337: &[i32];
    let _338: &[i32];
    let mut _339: &[i32; 1];
    let _340: [i32; 1];
    let mut _341: &&[&[i32]];
    let _342: &[&[i32]];
    let _343: &[&[i32]];
    let mut _344: &[&[i32]; 42];
    let _345: [&[i32]; 42];
    let mut _346: &[i32];
    let _347: &[i32];
    let mut _348: &[i32; 4];
    let _349: [i32; 4];
    let _350: &[i32];
    let _351: &[i32];
    let mut _352: &[i32; 4];
    let _353: [i32; 4];
    let _354: &[i32];
    let _355: &[i32];
    let mut _356: &[i32; 4];
    let _357: [i32; 4];
    let _358: &[i32];
    let _359: &[i32];
    let mut _360: &[i32; 4];
    let _361: [i32; 4];
    let _362: &[i32];
    let _363: &[i32];
    let mut _364: &[i32; 4];
    let _365: [i32; 4];
    let _366: &[i32];
    let _367: &[i32];
    let mut _368: &[i32; 4];
    let _369: [i32; 4];
    let _370: &[i32];
    let _371: &[i32];
    let mut _372: &[i32; 4];
    let _373: [i32; 4];
    let _374: &[i32];
    let _375: &[i32];
    let mut _376: &[i32; 4];
    let _377: [i32; 4];
    let _378: &[i32];
    let _379: &[i32];
    let mut _380: &[i32; 4];
    let _381: [i32; 4];
    let _382: &[i32];
    let _383: &[i32];
    let mut _384: &[i32; 4];
    let _385: [i32; 4];
    let _386: &[i32];
    let _387: &[i32];
    let mut _388: &[i32; 4];
    let _389: [i32; 4];
    let _390: &[i32];
    let _391: &[i32];
    let mut _392: &[i32; 4];
    let _393: [i32; 4];
    let _394: &[i32];
    let _395: &[i32];
    let mut _396: &[i32; 4];
    let _397: [i32; 4];
    let _398: &[i32];
    let _399: &[i32];
    let mut _400: &[i32; 4];
    let _401: [i32; 4];
    let _402: &[i32];
    let _403: &[i32];
    let mut _404: &[i32; 4];
    let _405: [i32; 4];
    let _406: &[i32];
    let _407: &[i32];
    let mut _408: &[i32; 4];
    let _409: [i32; 4];
    let _410: &[i32];
    let _411: &[i32];
    let mut _412: &[i32; 4];
    let _413: [i32; 4];
    let _414: &[i32];
    let _415: &[i32];
    let mut _416: &[i32; 4];
    let _417: [i32; 4];
    let _418: &[i32];
    let _419: &[i32];
    let mut _420: &[i32; 4];
    let _421: [i32; 4];
    let _422: &[i32];
    let _423: &[i32];
    let mut _424: &[i32; 4];
    let _425: [i32; 4];
    let _426: &[i32];
    let _427: &[i32];
    let mut _428: &[i32; 4];
    let _429: [i32; 4];
    let _430: &[i32];
    let _431: &[i32];
    let mut _432: &[i32; 4];
    let _433: [i32; 4];
    let _434: &[i32];
    let _435: &[i32];
    let mut _436: &[i32; 4];
    let _437: [i32; 4];
    let _438: &[i32];
    let _439: &[i32];
    let mut _440: &[i32; 4];
    let _441: [i32; 4];
    let _442: &[i32];
    let _443: &[i32];
    let mut _444: &[i32; 4];
    let _445: [i32; 4];
    let _446: &[i32];
    let _447: &[i32];
    let mut _448: &[i32; 4];
    let _449: [i32; 4];
    let _450: &[i32];
    let _451: &[i32];
    let mut _452: &[i32; 3];
    let _453: [i32; 3];
    let _454: &[i32];
    let _455: &[i32];
    let mut _456: &[i32; 3];
    let _457: [i32; 3];
    let _458: &[i32];
    let _459: &[i32];
    let mut _460: &[i32; 3];
    let _461: [i32; 3];
    let _462: &[i32];
    let _463: &[i32];
    let mut _464: &[i32; 3];
    let _465: [i32; 3];
    let _466: &[i32];
    let _467: &[i32];
    let mut _468: &[i32; 3];
    let _469: [i32; 3];
    let _470: &[i32];
    let _471: &[i32];
    let mut _472: &[i32; 3];
    let _473: [i32; 3];
    let _474: &[i32];
    let _475: &[i32];
    let mut _476: &[i32; 3];
    let _477: [i32; 3];
    let _478: &[i32];
    let _479: &[i32];
    let mut _480: &[i32; 3];
    let _481: [i32; 3];
    let _482: &[i32];
    let _483: &[i32];
    let mut _484: &[i32; 3];
    let _485: [i32; 3];
    let _486: &[i32];
    let _487: &[i32];
    let mut _488: &[i32; 2];
    let _489: [i32; 2];
    let _490: &[i32];
    let _491: &[i32];
    let mut _492: &[i32; 2];
    let _493: [i32; 2];
    let _494: &[i32];
    let _495: &[i32];
    let mut _496: &[i32; 2];
    let _497: [i32; 2];
    let _498: &[i32];
    let _499: &[i32];
    let mut _500: &[i32; 2];
    let _501: [i32; 2];
    let _502: &[i32];
    let _503: &[i32];
    let mut _504: &[i32; 2];
    let _505: [i32; 2];
    let _506: &[i32];
    let _507: &[i32];
    let mut _508: &[i32; 1];
    let _509: [i32; 1];
    let _510: &[i32];
    let _511: &[i32];
    let mut _512: &[i32; 1];
    let _513: [i32; 1];
    let _514: &&[&[i32]];
    let _515: &&[&[i32]];
    let mut _516: bool;
    let mut _517: bool;
    let _519: !;
    let mut _520: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }
    scope 3 {
        debug left_val => _160;
        debug right_val => _161;
        let _164: core::panicking::AssertKind;
        scope 4 {
            debug kind => _164;
        }
    }
    scope 5 {
        debug left_val => _514;
        debug right_val => _515;
        let _518: core::panicking::AssertKind;
        scope 6 {
            debug kind => _518;
        }
    }

    bb0: {
        _3 = [const 0_i32, const 1_i32, const 1_i32, const 0_i32, const 2_i32, const 0_i32, const 2_i32, const 1_i32, const 2_i32, const 2_i32, const 1_i32, const 2_i32, const 3_i32];
        _2 = &_3;
        _5 = [const 0_i32, const 1_i32, const 1_i32, const 0_i32, const 2_i32, const 0_i32, const 2_i32, const 1_i32, const 2_i32, const 2_i32, const 1_i32, const 2_i32, const 3_i32];
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &[i32; 13]);
        _7 = (_1.1: &[i32; 13]);
        _9 = <[i32; 13] as PartialEq>::eq(_6, _7) -> bb1;
    }

    bb1: {
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<[i32; 13], [i32; 13]>(move _10, _6, _7, move _12);
    }

    bb3: {
        _22 = [const 3_i32];
        _21 = &_22;
        _20 = <[i32; 1] as Index<RangeFull>>::index(move _21, const RangeFull) -> bb4;
    }

    bb4: {
        _19 = _20;
        _26 = [const 3_i32];
        _25 = &_26;
        _24 = <[i32; 1] as Index<RangeFull>>::index(move _25, const RangeFull) -> bb5;
    }

    bb5: {
        _23 = _24;
        _30 = [const 2_i32];
        _29 = &_30;
        _28 = <[i32; 1] as Index<RangeFull>>::index(move _29, const RangeFull) -> bb6;
    }

    bb6: {
        _27 = _28;
        _34 = [const 5_i32];
        _33 = &_34;
        _32 = <[i32; 1] as Index<RangeFull>>::index(move _33, const RangeFull) -> bb7;
    }

    bb7: {
        _31 = _32;
        _38 = [const 1_i32];
        _37 = &_38;
        _36 = <[i32; 1] as Index<RangeFull>>::index(move _37, const RangeFull) -> bb8;
    }

    bb8: {
        _35 = _36;
        _42 = [const 1_i32];
        _41 = &_42;
        _40 = <[i32; 1] as Index<RangeFull>>::index(move _41, const RangeFull) -> bb9;
    }

    bb9: {
        _39 = _40;
        _46 = [const 2_i32];
        _45 = &_46;
        _44 = <[i32; 1] as Index<RangeFull>>::index(move _45, const RangeFull) -> bb10;
    }

    bb10: {
        _43 = _44;
        _50 = [const 2_i32];
        _49 = &_50;
        _48 = <[i32; 1] as Index<RangeFull>>::index(move _49, const RangeFull) -> bb11;
    }

    bb11: {
        _47 = _48;
        _54 = [const 7_i32];
        _53 = &_54;
        _52 = <[i32; 1] as Index<RangeFull>>::index(move _53, const RangeFull) -> bb12;
    }

    bb12: {
        _51 = _52;
        _58 = [const 2_i32, const 6_i32];
        _57 = &_58;
        _56 = <[i32; 2] as Index<RangeFull>>::index(move _57, const RangeFull) -> bb13;
    }

    bb13: {
        _55 = _56;
        _62 = [const 2_i32, const 7_i32];
        _61 = &_62;
        _60 = <[i32; 2] as Index<RangeFull>>::index(move _61, const RangeFull) -> bb14;
    }

    bb14: {
        _59 = _60;
        _66 = [const 1_i32, const 1_i32];
        _65 = &_66;
        _64 = <[i32; 2] as Index<RangeFull>>::index(move _65, const RangeFull) -> bb15;
    }

    bb15: {
        _63 = _64;
        _70 = [const 3_i32, const 5_i32];
        _69 = &_70;
        _68 = <[i32; 2] as Index<RangeFull>>::index(move _69, const RangeFull) -> bb16;
    }

    bb16: {
        _67 = _68;
        _74 = [const 1_i32, const 7_i32];
        _73 = &_74;
        _72 = <[i32; 2] as Index<RangeFull>>::index(move _73, const RangeFull) -> bb17;
    }

    bb17: {
        _71 = _72;
        _78 = [const 3_i32, const 5_i32, const 14_i32];
        _77 = &_78;
        _76 = <[i32; 3] as Index<RangeFull>>::index(move _77, const RangeFull) -> bb18;
    }

    bb18: {
        _75 = _76;
        _82 = [const 2_i32, const 4_i32, const 12_i32];
        _81 = &_82;
        _80 = <[i32; 3] as Index<RangeFull>>::index(move _81, const RangeFull) -> bb19;
    }

    bb19: {
        _79 = _80;
        _86 = [const 2_i32, const 5_i32, const 9_i32, const 26_i32];
        _85 = &_86;
        _84 = <[i32; 4] as Index<RangeFull>>::index(move _85, const RangeFull) -> bb20;
    }

    bb20: {
        _83 = _84;
        _18 = [move _19, _23, _27, _31, _35, _39, _43, _47, _51, _55, _59, _63, _67, _71, _75, _79, _83];
        _17 = &_18;
        _16 = <[&[i32]; 17] as Index<RangeFull>>::index(move _17, const RangeFull) -> bb21;
    }

    bb21: {
        _15 = _16;
        _14 = &_15;
        _95 = [const 3_i32];
        _94 = &_95;
        _93 = <[i32; 1] as Index<RangeFull>>::index(move _94, const RangeFull) -> bb22;
    }

    bb22: {
        _92 = _93;
        _99 = [const 3_i32];
        _98 = &_99;
        _97 = <[i32; 1] as Index<RangeFull>>::index(move _98, const RangeFull) -> bb23;
    }

    bb23: {
        _96 = _97;
        _103 = [const 2_i32];
        _102 = &_103;
        _101 = <[i32; 1] as Index<RangeFull>>::index(move _102, const RangeFull) -> bb24;
    }

    bb24: {
        _100 = _101;
        _107 = [const 5_i32];
        _106 = &_107;
        _105 = <[i32; 1] as Index<RangeFull>>::index(move _106, const RangeFull) -> bb25;
    }

    bb25: {
        _104 = _105;
        _111 = [const 1_i32];
        _110 = &_111;
        _109 = <[i32; 1] as Index<RangeFull>>::index(move _110, const RangeFull) -> bb26;
    }

    bb26: {
        _108 = _109;
        _115 = [const 1_i32];
        _114 = &_115;
        _113 = <[i32; 1] as Index<RangeFull>>::index(move _114, const RangeFull) -> bb27;
    }

    bb27: {
        _112 = _113;
        _119 = [const 2_i32];
        _118 = &_119;
        _117 = <[i32; 1] as Index<RangeFull>>::index(move _118, const RangeFull) -> bb28;
    }

    bb28: {
        _116 = _117;
        _123 = [const 2_i32];
        _122 = &_123;
        _121 = <[i32; 1] as Index<RangeFull>>::index(move _122, const RangeFull) -> bb29;
    }

    bb29: {
        _120 = _121;
        _127 = [const 7_i32];
        _126 = &_127;
        _125 = <[i32; 1] as Index<RangeFull>>::index(move _126, const RangeFull) -> bb30;
    }

    bb30: {
        _124 = _125;
        _131 = [const 2_i32, const 6_i32];
        _130 = &_131;
        _129 = <[i32; 2] as Index<RangeFull>>::index(move _130, const RangeFull) -> bb31;
    }

    bb31: {
        _128 = _129;
        _135 = [const 2_i32, const 7_i32];
        _134 = &_135;
        _133 = <[i32; 2] as Index<RangeFull>>::index(move _134, const RangeFull) -> bb32;
    }

    bb32: {
        _132 = _133;
        _139 = [const 1_i32, const 1_i32];
        _138 = &_139;
        _137 = <[i32; 2] as Index<RangeFull>>::index(move _138, const RangeFull) -> bb33;
    }

    bb33: {
        _136 = _137;
        _143 = [const 3_i32, const 5_i32];
        _142 = &_143;
        _141 = <[i32; 2] as Index<RangeFull>>::index(move _142, const RangeFull) -> bb34;
    }

    bb34: {
        _140 = _141;
        _147 = [const 1_i32, const 7_i32];
        _146 = &_147;
        _145 = <[i32; 2] as Index<RangeFull>>::index(move _146, const RangeFull) -> bb35;
    }

    bb35: {
        _144 = _145;
        _151 = [const 3_i32, const 5_i32, const 14_i32];
        _150 = &_151;
        _149 = <[i32; 3] as Index<RangeFull>>::index(move _150, const RangeFull) -> bb36;
    }

    bb36: {
        _148 = _149;
        _155 = [const 2_i32, const 4_i32, const 12_i32];
        _154 = &_155;
        _153 = <[i32; 3] as Index<RangeFull>>::index(move _154, const RangeFull) -> bb37;
    }

    bb37: {
        _152 = _153;
        _159 = [const 2_i32, const 5_i32, const 9_i32, const 26_i32];
        _158 = &_159;
        _157 = <[i32; 4] as Index<RangeFull>>::index(move _158, const RangeFull) -> bb38;
    }

    bb38: {
        _156 = _157;
        _91 = [move _92, _96, _100, _104, _108, _112, _116, _120, _124, _128, _132, _136, _140, _144, _148, _152, _156];
        _90 = &_91;
        _89 = <[&[i32]; 17] as Index<RangeFull>>::index(move _90, const RangeFull) -> bb39;
    }

    bb39: {
        _88 = _89;
        _87 = &_88;
        _13 = (move _14, move _87);
        _160 = (_13.0: &&[&[i32]]);
        _161 = (_13.1: &&[&[i32]]);
        _163 = <&[&[i32]] as PartialEq>::eq(_160, _161) -> bb40;
    }

    bb40: {
        _162 = Not(move _163);
        switchInt(move _162) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _164 = core::panicking::AssertKind::Eq;
        _166 = Option::<Arguments<'_>>::None;
        _165 = core::panicking::assert_failed::<&[&[i32]], &[&[i32]]>(move _164, _160, _161, move _166);
    }

    bb42: {
        _176 = [const 2_i32, const 3_i32, const 2_i32, const 3_i32];
        _175 = &_176;
        _174 = <[i32; 4] as Index<RangeFull>>::index(move _175, const RangeFull) -> bb43;
    }

    bb43: {
        _173 = _174;
        _180 = [const 2_i32, const 3_i32, const 2_i32, const 3_i32];
        _179 = &_180;
        _178 = <[i32; 4] as Index<RangeFull>>::index(move _179, const RangeFull) -> bb44;
    }

    bb44: {
        _177 = _178;
        _184 = [const 2_i32, const 3_i32, const 2_i32, const 3_i32];
        _183 = &_184;
        _182 = <[i32; 4] as Index<RangeFull>>::index(move _183, const RangeFull) -> bb45;
    }

    bb45: {
        _181 = _182;
        _188 = [const 2_i32, const 3_i32, const 2_i32, const 3_i32];
        _187 = &_188;
        _186 = <[i32; 4] as Index<RangeFull>>::index(move _187, const RangeFull) -> bb46;
    }

    bb46: {
        _185 = _186;
        _192 = [const 2_i32, const 3_i32, const 2_i32, const 3_i32];
        _191 = &_192;
        _190 = <[i32; 4] as Index<RangeFull>>::index(move _191, const RangeFull) -> bb47;
    }

    bb47: {
        _189 = _190;
        _196 = [const 2_i32, const 3_i32, const 2_i32, const 3_i32];
        _195 = &_196;
        _194 = <[i32; 4] as Index<RangeFull>>::index(move _195, const RangeFull) -> bb48;
    }

    bb48: {
        _193 = _194;
        _200 = [const 2_i32, const 3_i32, const 2_i32, const 2_i32];
        _199 = &_200;
        _198 = <[i32; 4] as Index<RangeFull>>::index(move _199, const RangeFull) -> bb49;
    }

    bb49: {
        _197 = _198;
        _204 = [const 2_i32, const 3_i32, const 2_i32, const 2_i32];
        _203 = &_204;
        _202 = <[i32; 4] as Index<RangeFull>>::index(move _203, const RangeFull) -> bb50;
    }

    bb50: {
        _201 = _202;
        _208 = [const 2_i32, const 3_i32, const 2_i32, const 5_i32];
        _207 = &_208;
        _206 = <[i32; 4] as Index<RangeFull>>::index(move _207, const RangeFull) -> bb51;
    }

    bb51: {
        _205 = _206;
        _212 = [const 2_i32, const 3_i32, const 2_i32, const 5_i32];
        _211 = &_212;
        _210 = <[i32; 4] as Index<RangeFull>>::index(move _211, const RangeFull) -> bb52;
    }

    bb52: {
        _209 = _210;
        _216 = [const 2_i32, const 3_i32, const 2_i32, const 5_i32];
        _215 = &_216;
        _214 = <[i32; 4] as Index<RangeFull>>::index(move _215, const RangeFull) -> bb53;
    }

    bb53: {
        _213 = _214;
        _220 = [const 2_i32, const 3_i32, const 2_i32, const 5_i32];
        _219 = &_220;
        _218 = <[i32; 4] as Index<RangeFull>>::index(move _219, const RangeFull) -> bb54;
    }

    bb54: {
        _217 = _218;
        _224 = [const 2_i32, const 3_i32, const 2_i32, const 5_i32];
        _223 = &_224;
        _222 = <[i32; 4] as Index<RangeFull>>::index(move _223, const RangeFull) -> bb55;
    }

    bb55: {
        _221 = _222;
        _228 = [const 2_i32, const 3_i32, const 1_i32, const 1_i32];
        _227 = &_228;
        _226 = <[i32; 4] as Index<RangeFull>>::index(move _227, const RangeFull) -> bb56;
    }

    bb56: {
        _225 = _226;
        _232 = [const 2_i32, const 2_i32, const 3_i32, const 1_i32];
        _231 = &_232;
        _230 = <[i32; 4] as Index<RangeFull>>::index(move _231, const RangeFull) -> bb57;
    }

    bb57: {
        _229 = _230;
        _236 = [const 2_i32, const 2_i32, const 3_i32, const 2_i32];
        _235 = &_236;
        _234 = <[i32; 4] as Index<RangeFull>>::index(move _235, const RangeFull) -> bb58;
    }

    bb58: {
        _233 = _234;
        _240 = [const 2_i32, const 2_i32, const 3_i32, const 2_i32];
        _239 = &_240;
        _238 = <[i32; 4] as Index<RangeFull>>::index(move _239, const RangeFull) -> bb59;
    }

    bb59: {
        _237 = _238;
        _244 = [const 2_i32, const 2_i32, const 3_i32, const 2_i32];
        _243 = &_244;
        _242 = <[i32; 4] as Index<RangeFull>>::index(move _243, const RangeFull) -> bb60;
    }

    bb60: {
        _241 = _242;
        _248 = [const 2_i32, const 2_i32, const 3_i32, const 2_i32];
        _247 = &_248;
        _246 = <[i32; 4] as Index<RangeFull>>::index(move _247, const RangeFull) -> bb61;
    }

    bb61: {
        _245 = _246;
        _252 = [const 2_i32, const 2_i32, const 1_i32, const 7_i32];
        _251 = &_252;
        _250 = <[i32; 4] as Index<RangeFull>>::index(move _251, const RangeFull) -> bb62;
    }

    bb62: {
        _249 = _250;
        _256 = [const 2_i32, const 2_i32, const 1_i32, const 7_i32];
        _255 = &_256;
        _254 = <[i32; 4] as Index<RangeFull>>::index(move _255, const RangeFull) -> bb63;
    }

    bb63: {
        _253 = _254;
        _260 = [const 2_i32, const 2_i32, const 1_i32, const 7_i32];
        _259 = &_260;
        _258 = <[i32; 4] as Index<RangeFull>>::index(move _259, const RangeFull) -> bb64;
    }

    bb64: {
        _257 = _258;
        _264 = [const 2_i32, const 2_i32, const 1_i32, const 7_i32];
        _263 = &_264;
        _262 = <[i32; 4] as Index<RangeFull>>::index(move _263, const RangeFull) -> bb65;
    }

    bb65: {
        _261 = _262;
        _268 = [const 2_i32, const 2_i32, const 1_i32, const 7_i32];
        _267 = &_268;
        _266 = <[i32; 4] as Index<RangeFull>>::index(move _267, const RangeFull) -> bb66;
    }

    bb66: {
        _265 = _266;
        _272 = [const 2_i32, const 2_i32, const 1_i32, const 7_i32];
        _271 = &_272;
        _270 = <[i32; 4] as Index<RangeFull>>::index(move _271, const RangeFull) -> bb67;
    }

    bb67: {
        _269 = _270;
        _276 = [const 2_i32, const 2_i32, const 1_i32, const 7_i32];
        _275 = &_276;
        _274 = <[i32; 4] as Index<RangeFull>>::index(move _275, const RangeFull) -> bb68;
    }

    bb68: {
        _273 = _274;
        _280 = [const 2_i32, const 3_i32, const 2_i32];
        _279 = &_280;
        _278 = <[i32; 3] as Index<RangeFull>>::index(move _279, const RangeFull) -> bb69;
    }

    bb69: {
        _277 = _278;
        _284 = [const 2_i32, const 3_i32, const 2_i32];
        _283 = &_284;
        _282 = <[i32; 3] as Index<RangeFull>>::index(move _283, const RangeFull) -> bb70;
    }

    bb70: {
        _281 = _282;
        _288 = [const 2_i32, const 3_i32, const 2_i32];
        _287 = &_288;
        _286 = <[i32; 3] as Index<RangeFull>>::index(move _287, const RangeFull) -> bb71;
    }

    bb71: {
        _285 = _286;
        _292 = [const 2_i32, const 3_i32, const 2_i32];
        _291 = &_292;
        _290 = <[i32; 3] as Index<RangeFull>>::index(move _291, const RangeFull) -> bb72;
    }

    bb72: {
        _289 = _290;
        _296 = [const 2_i32, const 3_i32, const 1_i32];
        _295 = &_296;
        _294 = <[i32; 3] as Index<RangeFull>>::index(move _295, const RangeFull) -> bb73;
    }

    bb73: {
        _293 = _294;
        _300 = [const 2_i32, const 2_i32, const 3_i32];
        _299 = &_300;
        _298 = <[i32; 3] as Index<RangeFull>>::index(move _299, const RangeFull) -> bb74;
    }

    bb74: {
        _297 = _298;
        _304 = [const 2_i32, const 2_i32, const 3_i32];
        _303 = &_304;
        _302 = <[i32; 3] as Index<RangeFull>>::index(move _303, const RangeFull) -> bb75;
    }

    bb75: {
        _301 = _302;
        _308 = [const 2_i32, const 2_i32, const 3_i32];
        _307 = &_308;
        _306 = <[i32; 3] as Index<RangeFull>>::index(move _307, const RangeFull) -> bb76;
    }

    bb76: {
        _305 = _306;
        _312 = [const 2_i32, const 2_i32, const 1_i32];
        _311 = &_312;
        _310 = <[i32; 3] as Index<RangeFull>>::index(move _311, const RangeFull) -> bb77;
    }

    bb77: {
        _309 = _310;
        _316 = [const 2_i32, const 3_i32];
        _315 = &_316;
        _314 = <[i32; 2] as Index<RangeFull>>::index(move _315, const RangeFull) -> bb78;
    }

    bb78: {
        _313 = _314;
        _320 = [const 2_i32, const 3_i32];
        _319 = &_320;
        _318 = <[i32; 2] as Index<RangeFull>>::index(move _319, const RangeFull) -> bb79;
    }

    bb79: {
        _317 = _318;
        _324 = [const 2_i32, const 3_i32];
        _323 = &_324;
        _322 = <[i32; 2] as Index<RangeFull>>::index(move _323, const RangeFull) -> bb80;
    }

    bb80: {
        _321 = _322;
        _328 = [const 2_i32, const 2_i32];
        _327 = &_328;
        _326 = <[i32; 2] as Index<RangeFull>>::index(move _327, const RangeFull) -> bb81;
    }

    bb81: {
        _325 = _326;
        _332 = [const 2_i32, const 2_i32];
        _331 = &_332;
        _330 = <[i32; 2] as Index<RangeFull>>::index(move _331, const RangeFull) -> bb82;
    }

    bb82: {
        _329 = _330;
        _336 = [const 2_i32];
        _335 = &_336;
        _334 = <[i32; 1] as Index<RangeFull>>::index(move _335, const RangeFull) -> bb83;
    }

    bb83: {
        _333 = _334;
        _340 = [const 2_i32];
        _339 = &_340;
        _338 = <[i32; 1] as Index<RangeFull>>::index(move _339, const RangeFull) -> bb84;
    }

    bb84: {
        _337 = _338;
        _172 = [move _173, _177, _181, _185, _189, _193, _197, _201, _205, _209, _213, _217, _221, _225, _229, _233, _237, _241, _245, _249, _253, _257, _261, _265, _269, _273, _277, _281, _285, _289, _293, _297, _301, _305, _309, _313, _317, _321, _325, _329, _333, _337];
        _171 = &_172;
        _170 = <[&[i32]; 42] as Index<RangeFull>>::index(move _171, const RangeFull) -> bb85;
    }

    bb85: {
        _169 = _170;
        _168 = &_169;
        _349 = [const 2_i32, const 3_i32, const 2_i32, const 3_i32];
        _348 = &_349;
        _347 = <[i32; 4] as Index<RangeFull>>::index(move _348, const RangeFull) -> bb86;
    }

    bb86: {
        _346 = _347;
        _353 = [const 2_i32, const 3_i32, const 2_i32, const 3_i32];
        _352 = &_353;
        _351 = <[i32; 4] as Index<RangeFull>>::index(move _352, const RangeFull) -> bb87;
    }

    bb87: {
        _350 = _351;
        _357 = [const 2_i32, const 3_i32, const 2_i32, const 3_i32];
        _356 = &_357;
        _355 = <[i32; 4] as Index<RangeFull>>::index(move _356, const RangeFull) -> bb88;
    }

    bb88: {
        _354 = _355;
        _361 = [const 2_i32, const 3_i32, const 2_i32, const 3_i32];
        _360 = &_361;
        _359 = <[i32; 4] as Index<RangeFull>>::index(move _360, const RangeFull) -> bb89;
    }

    bb89: {
        _358 = _359;
        _365 = [const 2_i32, const 3_i32, const 2_i32, const 3_i32];
        _364 = &_365;
        _363 = <[i32; 4] as Index<RangeFull>>::index(move _364, const RangeFull) -> bb90;
    }

    bb90: {
        _362 = _363;
        _369 = [const 2_i32, const 3_i32, const 2_i32, const 3_i32];
        _368 = &_369;
        _367 = <[i32; 4] as Index<RangeFull>>::index(move _368, const RangeFull) -> bb91;
    }

    bb91: {
        _366 = _367;
        _373 = [const 2_i32, const 3_i32, const 2_i32, const 2_i32];
        _372 = &_373;
        _371 = <[i32; 4] as Index<RangeFull>>::index(move _372, const RangeFull) -> bb92;
    }

    bb92: {
        _370 = _371;
        _377 = [const 2_i32, const 3_i32, const 2_i32, const 2_i32];
        _376 = &_377;
        _375 = <[i32; 4] as Index<RangeFull>>::index(move _376, const RangeFull) -> bb93;
    }

    bb93: {
        _374 = _375;
        _381 = [const 2_i32, const 3_i32, const 2_i32, const 5_i32];
        _380 = &_381;
        _379 = <[i32; 4] as Index<RangeFull>>::index(move _380, const RangeFull) -> bb94;
    }

    bb94: {
        _378 = _379;
        _385 = [const 2_i32, const 3_i32, const 2_i32, const 5_i32];
        _384 = &_385;
        _383 = <[i32; 4] as Index<RangeFull>>::index(move _384, const RangeFull) -> bb95;
    }

    bb95: {
        _382 = _383;
        _389 = [const 2_i32, const 3_i32, const 2_i32, const 5_i32];
        _388 = &_389;
        _387 = <[i32; 4] as Index<RangeFull>>::index(move _388, const RangeFull) -> bb96;
    }

    bb96: {
        _386 = _387;
        _393 = [const 2_i32, const 3_i32, const 2_i32, const 5_i32];
        _392 = &_393;
        _391 = <[i32; 4] as Index<RangeFull>>::index(move _392, const RangeFull) -> bb97;
    }

    bb97: {
        _390 = _391;
        _397 = [const 2_i32, const 3_i32, const 2_i32, const 5_i32];
        _396 = &_397;
        _395 = <[i32; 4] as Index<RangeFull>>::index(move _396, const RangeFull) -> bb98;
    }

    bb98: {
        _394 = _395;
        _401 = [const 2_i32, const 3_i32, const 1_i32, const 1_i32];
        _400 = &_401;
        _399 = <[i32; 4] as Index<RangeFull>>::index(move _400, const RangeFull) -> bb99;
    }

    bb99: {
        _398 = _399;
        _405 = [const 2_i32, const 2_i32, const 3_i32, const 1_i32];
        _404 = &_405;
        _403 = <[i32; 4] as Index<RangeFull>>::index(move _404, const RangeFull) -> bb100;
    }

    bb100: {
        _402 = _403;
        _409 = [const 2_i32, const 2_i32, const 3_i32, const 2_i32];
        _408 = &_409;
        _407 = <[i32; 4] as Index<RangeFull>>::index(move _408, const RangeFull) -> bb101;
    }

    bb101: {
        _406 = _407;
        _413 = [const 2_i32, const 2_i32, const 3_i32, const 2_i32];
        _412 = &_413;
        _411 = <[i32; 4] as Index<RangeFull>>::index(move _412, const RangeFull) -> bb102;
    }

    bb102: {
        _410 = _411;
        _417 = [const 2_i32, const 2_i32, const 3_i32, const 2_i32];
        _416 = &_417;
        _415 = <[i32; 4] as Index<RangeFull>>::index(move _416, const RangeFull) -> bb103;
    }

    bb103: {
        _414 = _415;
        _421 = [const 2_i32, const 2_i32, const 3_i32, const 2_i32];
        _420 = &_421;
        _419 = <[i32; 4] as Index<RangeFull>>::index(move _420, const RangeFull) -> bb104;
    }

    bb104: {
        _418 = _419;
        _425 = [const 2_i32, const 2_i32, const 1_i32, const 7_i32];
        _424 = &_425;
        _423 = <[i32; 4] as Index<RangeFull>>::index(move _424, const RangeFull) -> bb105;
    }

    bb105: {
        _422 = _423;
        _429 = [const 2_i32, const 2_i32, const 1_i32, const 7_i32];
        _428 = &_429;
        _427 = <[i32; 4] as Index<RangeFull>>::index(move _428, const RangeFull) -> bb106;
    }

    bb106: {
        _426 = _427;
        _433 = [const 2_i32, const 2_i32, const 1_i32, const 7_i32];
        _432 = &_433;
        _431 = <[i32; 4] as Index<RangeFull>>::index(move _432, const RangeFull) -> bb107;
    }

    bb107: {
        _430 = _431;
        _437 = [const 2_i32, const 2_i32, const 1_i32, const 7_i32];
        _436 = &_437;
        _435 = <[i32; 4] as Index<RangeFull>>::index(move _436, const RangeFull) -> bb108;
    }

    bb108: {
        _434 = _435;
        _441 = [const 2_i32, const 2_i32, const 1_i32, const 7_i32];
        _440 = &_441;
        _439 = <[i32; 4] as Index<RangeFull>>::index(move _440, const RangeFull) -> bb109;
    }

    bb109: {
        _438 = _439;
        _445 = [const 2_i32, const 2_i32, const 1_i32, const 7_i32];
        _444 = &_445;
        _443 = <[i32; 4] as Index<RangeFull>>::index(move _444, const RangeFull) -> bb110;
    }

    bb110: {
        _442 = _443;
        _449 = [const 2_i32, const 2_i32, const 1_i32, const 7_i32];
        _448 = &_449;
        _447 = <[i32; 4] as Index<RangeFull>>::index(move _448, const RangeFull) -> bb111;
    }

    bb111: {
        _446 = _447;
        _453 = [const 2_i32, const 3_i32, const 2_i32];
        _452 = &_453;
        _451 = <[i32; 3] as Index<RangeFull>>::index(move _452, const RangeFull) -> bb112;
    }

    bb112: {
        _450 = _451;
        _457 = [const 2_i32, const 3_i32, const 2_i32];
        _456 = &_457;
        _455 = <[i32; 3] as Index<RangeFull>>::index(move _456, const RangeFull) -> bb113;
    }

    bb113: {
        _454 = _455;
        _461 = [const 2_i32, const 3_i32, const 2_i32];
        _460 = &_461;
        _459 = <[i32; 3] as Index<RangeFull>>::index(move _460, const RangeFull) -> bb114;
    }

    bb114: {
        _458 = _459;
        _465 = [const 2_i32, const 3_i32, const 2_i32];
        _464 = &_465;
        _463 = <[i32; 3] as Index<RangeFull>>::index(move _464, const RangeFull) -> bb115;
    }

    bb115: {
        _462 = _463;
        _469 = [const 2_i32, const 3_i32, const 1_i32];
        _468 = &_469;
        _467 = <[i32; 3] as Index<RangeFull>>::index(move _468, const RangeFull) -> bb116;
    }

    bb116: {
        _466 = _467;
        _473 = [const 2_i32, const 2_i32, const 3_i32];
        _472 = &_473;
        _471 = <[i32; 3] as Index<RangeFull>>::index(move _472, const RangeFull) -> bb117;
    }

    bb117: {
        _470 = _471;
        _477 = [const 2_i32, const 2_i32, const 3_i32];
        _476 = &_477;
        _475 = <[i32; 3] as Index<RangeFull>>::index(move _476, const RangeFull) -> bb118;
    }

    bb118: {
        _474 = _475;
        _481 = [const 2_i32, const 2_i32, const 3_i32];
        _480 = &_481;
        _479 = <[i32; 3] as Index<RangeFull>>::index(move _480, const RangeFull) -> bb119;
    }

    bb119: {
        _478 = _479;
        _485 = [const 2_i32, const 2_i32, const 1_i32];
        _484 = &_485;
        _483 = <[i32; 3] as Index<RangeFull>>::index(move _484, const RangeFull) -> bb120;
    }

    bb120: {
        _482 = _483;
        _489 = [const 2_i32, const 3_i32];
        _488 = &_489;
        _487 = <[i32; 2] as Index<RangeFull>>::index(move _488, const RangeFull) -> bb121;
    }

    bb121: {
        _486 = _487;
        _493 = [const 2_i32, const 3_i32];
        _492 = &_493;
        _491 = <[i32; 2] as Index<RangeFull>>::index(move _492, const RangeFull) -> bb122;
    }

    bb122: {
        _490 = _491;
        _497 = [const 2_i32, const 3_i32];
        _496 = &_497;
        _495 = <[i32; 2] as Index<RangeFull>>::index(move _496, const RangeFull) -> bb123;
    }

    bb123: {
        _494 = _495;
        _501 = [const 2_i32, const 2_i32];
        _500 = &_501;
        _499 = <[i32; 2] as Index<RangeFull>>::index(move _500, const RangeFull) -> bb124;
    }

    bb124: {
        _498 = _499;
        _505 = [const 2_i32, const 2_i32];
        _504 = &_505;
        _503 = <[i32; 2] as Index<RangeFull>>::index(move _504, const RangeFull) -> bb125;
    }

    bb125: {
        _502 = _503;
        _509 = [const 2_i32];
        _508 = &_509;
        _507 = <[i32; 1] as Index<RangeFull>>::index(move _508, const RangeFull) -> bb126;
    }

    bb126: {
        _506 = _507;
        _513 = [const 2_i32];
        _512 = &_513;
        _511 = <[i32; 1] as Index<RangeFull>>::index(move _512, const RangeFull) -> bb127;
    }

    bb127: {
        _510 = _511;
        _345 = [move _346, _350, _354, _358, _362, _366, _370, _374, _378, _382, _386, _390, _394, _398, _402, _406, _410, _414, _418, _422, _426, _430, _434, _438, _442, _446, _450, _454, _458, _462, _466, _470, _474, _478, _482, _486, _490, _494, _498, _502, _506, _510];
        _344 = &_345;
        _343 = <[&[i32]; 42] as Index<RangeFull>>::index(move _344, const RangeFull) -> bb128;
    }

    bb128: {
        _342 = _343;
        _341 = &_342;
        _167 = (move _168, move _341);
        _514 = (_167.0: &&[&[i32]]);
        _515 = (_167.1: &&[&[i32]]);
        _517 = <&[&[i32]] as PartialEq>::eq(_514, _515) -> bb129;
    }

    bb129: {
        _516 = Not(move _517);
        switchInt(move _516) -> [0: bb131, otherwise: bb130];
    }

    bb130: {
        _518 = core::panicking::AssertKind::Eq;
        _520 = Option::<Arguments<'_>>::None;
        _519 = core::panicking::assert_failed::<&[&[i32]], &[&[i32]]>(move _518, _514, _515, move _520);
    }

    bb131: {
        return;
    }
}
