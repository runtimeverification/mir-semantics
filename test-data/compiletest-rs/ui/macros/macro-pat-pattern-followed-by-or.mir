// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::result::Result<i64, i32>;
    let mut _3: isize;
    let mut _6: (&i64, &i64);
    let mut _7: &i64;
    let mut _8: &i64;
    let _9: i64;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: i64;
    let mut _15: i64;
    let _17: !;
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug result => _1;
        let _2: i64;
        let _4: i64;
        let _5: i32;
        scope 2 {
            debug int => _2;
            let _10: &i64;
            let _11: &i64;
            scope 5 {
                debug left_val => _10;
                debug right_val => _11;
                let _16: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _16;
                }
            }
        }
        scope 3 {
            debug i => _4;
        }
        scope 4 {
            debug i => _5;
        }
    }

    bb0: {
        _1 = Result::<i64, i32>::Err(const 42_i32);
        _3 = discriminant(_1);
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _5 = ((_1 as Err).0: i32);
        _2 = <i32 as Into<i64>>::into(_5) -> bb4;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = ((_1 as Ok).0: i64);
        _2 = <i64 as Into<i64>>::into(_4) -> bb4;
    }

    bb4: {
        _7 = &_2;
        _9 = const 42_i64;
        _8 = &_9;
        _6 = (move _7, move _8);
        _10 = (_6.0: &i64);
        _11 = (_6.1: &i64);
        _14 = (*_10);
        _15 = (*_11);
        _13 = Eq(move _14, move _15);
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _16 = core::panicking::AssertKind::Eq;
        _18 = Option::<Arguments<'_>>::None;
        _17 = core::panicking::assert_failed::<i64, i64>(move _16, _10, _11, move _18);
    }

    bb6: {
        return;
    }
}
