// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/macros/assert-ne-macro-success.rs:2:10: 2:19>::eq(_1: &Point, _2: &Point) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: isize;
    let mut _4: isize;

    bb0: {
        _3 = ((*_1).0: isize);
        _4 = ((*_2).0: isize);
        _0 = Eq(move _3, move _4);
        return;
    }
}

fn <impl at ui/macros/assert-ne-macro-success.rs:2:21: 2:26>::fmt(_1: &Point, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &&isize;
    let _7: &isize;

    bb0: {
        _3 = const "Point";
        _4 = const "x";
        _7 = &((*_1).0: isize);
        _6 = &_7;
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _3, _4, move _5) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&i32, &i32);
    let mut _2: &i32;
    let _3: i32;
    let mut _4: &i32;
    let _5: i32;
    let _6: &i32;
    let _7: &i32;
    let mut _8: bool;
    let mut _9: i32;
    let mut _10: i32;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: (&std::string::String, &std::string::String);
    let mut _15: &std::string::String;
    let _16: std::string::String;
    let _17: &str;
    let mut _18: &std::string::String;
    let _19: std::string::String;
    let _20: &str;
    let _21: &std::string::String;
    let _22: &std::string::String;
    let mut _23: bool;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _27: (&std::boxed::Box<Point>, &std::boxed::Box<Point>);
    let mut _28: &std::boxed::Box<Point>;
    let _29: std::boxed::Box<Point>;
    let mut _30: Point;
    let mut _31: &std::boxed::Box<Point>;
    let _32: std::boxed::Box<Point>;
    let mut _33: Point;
    let _34: &std::boxed::Box<Point>;
    let _35: &std::boxed::Box<Point>;
    let mut _36: bool;
    let _38: !;
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _40: (&&Point, &&Point);
    let mut _41: &&Point;
    let _42: &Point;
    let _43: Point;
    let mut _44: &&Point;
    let _45: &Point;
    let _46: Point;
    let _47: &&Point;
    let _48: &&Point;
    let mut _49: bool;
    let _51: !;
    let mut _52: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _53: (&i32, &i32);
    let mut _54: &i32;
    let _55: i32;
    let mut _56: &i32;
    let _57: i32;
    let _58: &i32;
    let _59: &i32;
    let mut _60: bool;
    let mut _61: i32;
    let mut _62: i32;
    let _64: !;
    let mut _65: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _66: std::fmt::Arguments<'_>;
    let mut _67: &[&str];
    let _68: &[&str; 1];
    let _69: [&str; 1];
    let mut _70: (&i32, &i32);
    let mut _71: &i32;
    let _72: i32;
    let mut _73: &i32;
    let _74: i32;
    let _75: &i32;
    let _76: &i32;
    let mut _77: bool;
    let mut _78: i32;
    let mut _79: i32;
    let _81: !;
    let mut _82: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _83: std::fmt::Arguments<'_>;
    let mut _84: &[&str];
    let _85: &[&str; 1];
    let _86: [&str; 1];
    let mut _87: &[core::fmt::rt::Argument<'_>];
    let _88: &[core::fmt::rt::Argument<'_>; 0];
    let _89: [core::fmt::rt::Argument<'_>; 0];
    let mut _90: (&i32, &i32);
    let mut _91: &i32;
    let _92: i32;
    let mut _93: &i32;
    let _94: i32;
    let _95: &i32;
    let _96: &i32;
    let mut _97: bool;
    let mut _98: i32;
    let mut _99: i32;
    let _101: !;
    let mut _102: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _103: std::fmt::Arguments<'_>;
    let mut _104: &[&str];
    let _105: &[&str; 1];
    let _106: [&str; 1];
    let mut _107: &[core::fmt::rt::Argument<'_>];
    let _108: &[core::fmt::rt::Argument<'_>; 0];
    let _109: [core::fmt::rt::Argument<'_>; 0];
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _11: core::panicking::AssertKind;
        scope 2 {
            debug kind => _11;
        }
    }
    scope 3 {
        debug left_val => _21;
        debug right_val => _22;
        let _24: core::panicking::AssertKind;
        scope 4 {
            debug kind => _24;
        }
    }
    scope 5 {
        debug left_val => _34;
        debug right_val => _35;
        let _37: core::panicking::AssertKind;
        scope 6 {
            debug kind => _37;
        }
    }
    scope 7 {
        debug left_val => _47;
        debug right_val => _48;
        let _50: core::panicking::AssertKind;
        scope 8 {
            debug kind => _50;
        }
    }
    scope 9 {
        debug left_val => _58;
        debug right_val => _59;
        let _63: core::panicking::AssertKind;
        scope 10 {
            debug kind => _63;
        }
    }
    scope 11 {
        debug left_val => _75;
        debug right_val => _76;
        let _80: core::panicking::AssertKind;
        scope 12 {
            debug kind => _80;
        }
    }
    scope 13 {
        debug left_val => _95;
        debug right_val => _96;
        let _100: core::panicking::AssertKind;
        scope 14 {
            debug kind => _100;
        }
    }

    bb0: {
        _3 = const 666_i32;
        _2 = &_3;
        _5 = const 14_i32;
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &i32);
        _7 = (_1.1: &i32);
        _9 = (*_6);
        _10 = (*_7);
        _8 = Eq(move _9, move _10);
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _11 = core::panicking::AssertKind::Ne;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<i32, i32>(move _11, _6, _7, move _13);
    }

    bb2: {
        _17 = const "666";
        _16 = <str as ToString>::to_string(_17) -> bb3;
    }

    bb3: {
        _15 = &_16;
        _20 = const "abc";
        _19 = <str as ToString>::to_string(_20) -> [return: bb4, unwind: bb34];
    }

    bb4: {
        _18 = &_19;
        _14 = (move _15, move _18);
        _21 = (_14.0: &std::string::String);
        _22 = (_14.1: &std::string::String);
        _23 = <String as PartialEq>::eq(_21, _22) -> [return: bb5, unwind: bb33];
    }

    bb5: {
        switchInt(move _23) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _24 = core::panicking::AssertKind::Ne;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<String, String>(move _24, _21, _22, move _26) -> bb33;
    }

    bb7: {
        drop(_19) -> [return: bb8, unwind: bb34];
    }

    bb8: {
        drop(_16) -> bb9;
    }

    bb9: {
        _30 = Point { x: const 666_isize };
        _29 = Box::<Point>::new(move _30) -> bb10;
    }

    bb10: {
        _28 = &_29;
        _33 = Point { x: const 34_isize };
        _32 = Box::<Point>::new(move _33) -> [return: bb11, unwind: bb32];
    }

    bb11: {
        _31 = &_32;
        _27 = (move _28, move _31);
        _34 = (_27.0: &std::boxed::Box<Point>);
        _35 = (_27.1: &std::boxed::Box<Point>);
        _36 = <Box<Point> as PartialEq>::eq(_34, _35) -> [return: bb12, unwind: bb31];
    }

    bb12: {
        switchInt(move _36) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _37 = core::panicking::AssertKind::Ne;
        _39 = Option::<Arguments<'_>>::None;
        _38 = core::panicking::assert_failed::<Box<Point>, Box<Point>>(move _37, _34, _35, move _39) -> bb31;
    }

    bb14: {
        drop(_32) -> [return: bb15, unwind: bb32];
    }

    bb15: {
        drop(_29) -> bb16;
    }

    bb16: {
        _43 = Point { x: const 666_isize };
        _42 = &_43;
        _41 = &_42;
        _46 = Point { x: const 34_isize };
        _45 = &_46;
        _44 = &_45;
        _40 = (move _41, move _44);
        _47 = (_40.0: &&Point);
        _48 = (_40.1: &&Point);
        _49 = <&Point as PartialEq>::eq(_47, _48) -> bb17;
    }

    bb17: {
        switchInt(move _49) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _50 = core::panicking::AssertKind::Ne;
        _52 = Option::<Arguments<'_>>::None;
        _51 = core::panicking::assert_failed::<&Point, &Point>(move _50, _47, _48, move _52);
    }

    bb19: {
        _55 = const 666_i32;
        _54 = &_55;
        _57 = const 42_i32;
        _56 = &_57;
        _53 = (move _54, move _56);
        _58 = (_53.0: &i32);
        _59 = (_53.1: &i32);
        _61 = (*_58);
        _62 = (*_59);
        _60 = Eq(move _61, move _62);
        switchInt(move _60) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _63 = core::panicking::AssertKind::Ne;
        _69 = [const "no gods no masters"];
        _68 = &_69;
        _67 = _68 as &[&str] (Pointer(Unsize));
        _66 = Arguments::<'_>::new_const(move _67) -> bb22;
    }

    bb21: {
        _72 = const 666_i32;
        _71 = &_72;
        _74 = const 42_i32;
        _73 = &_74;
        _70 = (move _71, move _73);
        _75 = (_70.0: &i32);
        _76 = (_70.1: &i32);
        _78 = (*_75);
        _79 = (*_76);
        _77 = Eq(move _78, move _79);
        switchInt(move _77) -> [0: bb24, otherwise: bb23];
    }

    bb22: {
        _65 = Option::<Arguments<'_>>::Some(move _66);
        _64 = core::panicking::assert_failed::<i32, i32>(move _63, _58, _59, move _65);
    }

    bb23: {
        _80 = core::panicking::AssertKind::Ne;
        _86 = [const "6 6 6"];
        _85 = &_86;
        _84 = _85 as &[&str] (Pointer(Unsize));
        _89 = core::fmt::rt::Argument::<'_>::none() -> bb25;
    }

    bb24: {
        _92 = const 666_i32;
        _91 = &_92;
        _94 = const 42_i32;
        _93 = &_94;
        _90 = (move _91, move _93);
        _95 = (_90.0: &i32);
        _96 = (_90.1: &i32);
        _98 = (*_95);
        _99 = (*_96);
        _97 = Eq(move _98, move _99);
        switchInt(move _97) -> [0: bb28, otherwise: bb27];
    }

    bb25: {
        _88 = &_89;
        _87 = _88 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _83 = Arguments::<'_>::new_v1(move _84, move _87) -> bb26;
    }

    bb26: {
        _82 = Option::<Arguments<'_>>::Some(move _83);
        _81 = core::panicking::assert_failed::<i32, i32>(move _80, _75, _76, move _82);
    }

    bb27: {
        _100 = core::panicking::AssertKind::Ne;
        _106 = [const "6, 6, 6"];
        _105 = &_106;
        _104 = _105 as &[&str] (Pointer(Unsize));
        _109 = core::fmt::rt::Argument::<'_>::none() -> bb29;
    }

    bb28: {
        return;
    }

    bb29: {
        _108 = &_109;
        _107 = _108 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _103 = Arguments::<'_>::new_v1(move _104, move _107) -> bb30;
    }

    bb30: {
        _102 = Option::<Arguments<'_>>::Some(move _103);
        _101 = core::panicking::assert_failed::<i32, i32>(move _100, _95, _96, move _102);
    }

    bb31 (cleanup): {
        drop(_32) -> [return: bb32, unwind terminate];
    }

    bb32 (cleanup): {
        drop(_29) -> [return: bb35, unwind terminate];
    }

    bb33 (cleanup): {
        drop(_19) -> [return: bb34, unwind terminate];
    }

    bb34 (cleanup): {
        drop(_16) -> [return: bb35, unwind terminate];
    }

    bb35 (cleanup): {
        resume;
    }
}
