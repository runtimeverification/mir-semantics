// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let _4: &[&str; 2];
    let _5: [&str; 2];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &();
    let _11: ();
    let mut _12: bool;
    let mut _13: !;

    bb0: {
        _5 = [const "", const "\n"];
        _4 = &_5;
        _3 = _4 as &[&str] (Pointer(Unsize));
        _12 = const true;
        switchInt(move _12) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        return;
    }

    bb2: {
        _10 = &_11;
        _9 = core::fmt::rt::Argument::<'_>::new_debug::<()>(_10) -> bb3;
    }

    bb3: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_v1(move _3, move _6) -> bb4;
    }

    bb4: {
        _1 = _print(move _2) -> bb5;
    }

    bb5: {
        _13 = begin_panic::<&str>(const "explicit panic");
    }
}
