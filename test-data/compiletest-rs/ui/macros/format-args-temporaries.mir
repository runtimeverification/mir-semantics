// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/macros/format-args-temporaries.rs:7:1: 7:11>::lock(_1: &Mutex) -> MutexGuard<'_> {
    debug self => _1;
    let mut _0: MutexGuard<'_>;

    bb0: {
        _0 = MutexGuard::<'_>(_1);
        return;
    }
}

fn <impl at ui/macros/format-args-temporaries.rs:15:1: 15:33>::drop(_1: &mut MutexGuard<'_>) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/macros/format-args-temporaries.rs:23:1: 23:36>::fmt(_1: &MutexGuard<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug _formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;

    bb0: {
        _0 = Result::<(), std::fmt::Error>::Ok(const ());
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Mutex;
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 1];
    let _6: [&str; 1];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &MutexGuard<'_>;
    let _12: MutexGuard<'_>;
    let mut _13: &Mutex;
    let _15: ();
    let mut _16: std::fmt::Arguments<'_>;
    let mut _17: &[&str];
    let _18: &[&str; 2];
    let _19: [&str; 2];
    let mut _20: &[core::fmt::rt::Argument<'_>];
    let _21: &[core::fmt::rt::Argument<'_>; 1];
    let _22: [core::fmt::rt::Argument<'_>; 1];
    let mut _23: core::fmt::rt::Argument<'_>;
    let _24: &MutexGuard<'_>;
    let _25: MutexGuard<'_>;
    let mut _26: &Mutex;
    let _28: ();
    let mut _29: std::fmt::Arguments<'_>;
    let mut _30: &[&str];
    let _31: &[&str; 1];
    let _32: [&str; 1];
    let mut _33: &[core::fmt::rt::Argument<'_>];
    let _34: &[core::fmt::rt::Argument<'_>; 1];
    let _35: [core::fmt::rt::Argument<'_>; 1];
    let mut _36: core::fmt::rt::Argument<'_>;
    let _37: &MutexGuard<'_>;
    let _38: MutexGuard<'_>;
    let mut _39: &Mutex;
    let _41: ();
    let mut _42: std::fmt::Arguments<'_>;
    let mut _43: &[&str];
    let _44: &[&str; 2];
    let _45: [&str; 2];
    let mut _46: &[core::fmt::rt::Argument<'_>];
    let _47: &[core::fmt::rt::Argument<'_>; 1];
    let _48: [core::fmt::rt::Argument<'_>; 1];
    let mut _49: core::fmt::rt::Argument<'_>;
    let _50: &MutexGuard<'_>;
    let _51: MutexGuard<'_>;
    let mut _52: &Mutex;
    let _54: !;
    let _55: &MutexGuard<'_>;
    let _56: MutexGuard<'_>;
    let mut _57: &Mutex;
    scope 1 {
        debug _print => const ();
        let _14: Mutex;
        scope 3 {
            debug _println => const ();
            let _27: Mutex;
            scope 5 {
                debug _eprint => const ();
                let _40: Mutex;
                scope 7 {
                    debug _eprintln => const ();
                    let _53: Mutex;
                    scope 9 {
                        debug _panic => const ();
                    }
                    scope 10 {
                        debug mutex => const Mutex;
                    }
                }
                scope 8 {
                    debug mutex => const Mutex;
                }
            }
            scope 6 {
                debug mutex => const Mutex;
            }
        }
        scope 4 {
            debug mutex => const Mutex;
        }
    }
    scope 2 {
        debug mutex => const Mutex;
    }

    bb0: {
        _6 = [const ""];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _13 = &_1;
        _12 = Mutex::lock(move _13) -> bb1;
    }

    bb1: {
        _11 = &_12;
        _10 = core::fmt::rt::Argument::<'_>::new_display::<MutexGuard<'_>>(_11) -> [return: bb2, unwind: bb26];
    }

    bb2: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> [return: bb3, unwind: bb26];
    }

    bb3: {
        _2 = _print(move _3) -> [return: bb4, unwind: bb26];
    }

    bb4: {
        drop(_12) -> bb5;
    }

    bb5: {
        _19 = [const "", const "\n"];
        _18 = &_19;
        _17 = _18 as &[&str] (Pointer(Unsize));
        _26 = &_14;
        _25 = Mutex::lock(move _26) -> bb6;
    }

    bb6: {
        _24 = &_25;
        _23 = core::fmt::rt::Argument::<'_>::new_display::<MutexGuard<'_>>(_24) -> [return: bb7, unwind: bb25];
    }

    bb7: {
        _22 = [move _23];
        _21 = &_22;
        _20 = _21 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _16 = Arguments::<'_>::new_v1(move _17, move _20) -> [return: bb8, unwind: bb25];
    }

    bb8: {
        _15 = _print(move _16) -> [return: bb9, unwind: bb25];
    }

    bb9: {
        drop(_25) -> bb10;
    }

    bb10: {
        _32 = [const ""];
        _31 = &_32;
        _30 = _31 as &[&str] (Pointer(Unsize));
        _39 = &_27;
        _38 = Mutex::lock(move _39) -> bb11;
    }

    bb11: {
        _37 = &_38;
        _36 = core::fmt::rt::Argument::<'_>::new_display::<MutexGuard<'_>>(_37) -> [return: bb12, unwind: bb24];
    }

    bb12: {
        _35 = [move _36];
        _34 = &_35;
        _33 = _34 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _29 = Arguments::<'_>::new_v1(move _30, move _33) -> [return: bb13, unwind: bb24];
    }

    bb13: {
        _28 = _eprint(move _29) -> [return: bb14, unwind: bb24];
    }

    bb14: {
        drop(_38) -> bb15;
    }

    bb15: {
        _45 = [const "", const "\n"];
        _44 = &_45;
        _43 = _44 as &[&str] (Pointer(Unsize));
        _52 = &_40;
        _51 = Mutex::lock(move _52) -> bb16;
    }

    bb16: {
        _50 = &_51;
        _49 = core::fmt::rt::Argument::<'_>::new_display::<MutexGuard<'_>>(_50) -> [return: bb17, unwind: bb23];
    }

    bb17: {
        _48 = [move _49];
        _47 = &_48;
        _46 = _47 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _42 = Arguments::<'_>::new_v1(move _43, move _46) -> [return: bb18, unwind: bb23];
    }

    bb18: {
        _41 = _eprint(move _42) -> [return: bb19, unwind: bb23];
    }

    bb19: {
        drop(_51) -> bb20;
    }

    bb20: {
        _57 = &_53;
        _56 = Mutex::lock(move _57) -> bb21;
    }

    bb21: {
        _55 = &_56;
        _54 = panic_display::<MutexGuard<'_>>(_55) -> bb22;
    }

    bb22 (cleanup): {
        drop(_56) -> [return: bb27, unwind terminate];
    }

    bb23 (cleanup): {
        drop(_51) -> [return: bb27, unwind terminate];
    }

    bb24 (cleanup): {
        drop(_38) -> [return: bb27, unwind terminate];
    }

    bb25 (cleanup): {
        drop(_25) -> [return: bb27, unwind terminate];
    }

    bb26 (cleanup): {
        drop(_12) -> [return: bb27, unwind terminate];
    }

    bb27 (cleanup): {
        resume;
    }
}

fn MutexGuard(_1: &Mutex) -> MutexGuard<'_> {
    let mut _0: MutexGuard<'_>;

    bb0: {
        _0 = MutexGuard::<'_>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn MutexGuard(_1: &Mutex) -> MutexGuard<'_> {
    let mut _0: MutexGuard<'_>;

    bb0: {
        _0 = MutexGuard::<'_>(move _1);
        return;
    }
}
