// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: &str;
    let _2: &str;
    let _3: &str;
    let _4: &str;
    let mut _5: (&&str, &&str);
    let mut _6: &&str;
    let _7: &str;
    let mut _8: &&str;
    let mut _11: bool;
    let mut _12: bool;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _9: &&str;
        let _10: &&str;
        scope 2 {
            debug left_val => _9;
            debug right_val => _10;
            let _13: core::panicking::AssertKind;
            scope 3 {
                debug kind => _13;
            }
        }
    }

    bb0: {
        _3 = const "hi";
        _4 = const "there";
        _2 = f::<'_, '_>(_3, _4) -> bb1;
    }

    bb1: {
        _1 = _2;
        _7 = const "hi";
        _6 = &_7;
        _8 = &_1;
        _5 = (move _6, move _8);
        _9 = (_5.0: &&str);
        _10 = (_5.1: &&str);
        _12 = <&str as PartialEq>::eq(_9, _10) -> bb2;
    }

    bb2: {
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<&str, &str>(move _13, _9, _10, move _15);
    }

    bb4: {
        return;
    }
}

fn f(_1: &str, _2: &str) -> &str {
    debug arg => _1;
    debug arg2 => _2;
    let mut _0: &str;

    bb0: {
        _0 = _1;
        return;
    }
}
