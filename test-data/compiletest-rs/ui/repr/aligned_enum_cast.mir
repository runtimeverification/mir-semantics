// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Aligned::Zero::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 0_isize;
        return;
    }
}

Aligned::One::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 1_isize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Aligned;
    let mut _3: isize;
    let _4: ();
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let _7: &[&str; 2];
    let _8: [&str; 2];
    let mut _9: &[core::fmt::rt::Argument<'_>];
    let _10: &[core::fmt::rt::Argument<'_>; 1];
    let _11: [core::fmt::rt::Argument<'_>; 1];
    let mut _12: core::fmt::rt::Argument<'_>;
    let _13: &u8;
    let mut _14: (&u8, &u8);
    let mut _15: &u8;
    let mut _16: &u8;
    let _17: u8;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: u8;
    let mut _23: u8;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let _27: ();
    let mut _28: std::fmt::Arguments<'_>;
    let mut _29: &[&str];
    let _30: &[&str; 2];
    let _31: [&str; 2];
    let mut _32: &[core::fmt::rt::Argument<'_>];
    let _33: &[core::fmt::rt::Argument<'_>; 1];
    let _34: [core::fmt::rt::Argument<'_>; 1];
    let mut _35: core::fmt::rt::Argument<'_>;
    let _36: &u8;
    let _37: u8;
    let mut _38: Aligned;
    let mut _39: (&u8, &u8);
    let mut _40: &u8;
    let _41: u8;
    let mut _42: Aligned;
    let mut _43: &u8;
    let _44: u8;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: u8;
    let mut _50: u8;
    let _52: !;
    let mut _53: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug aligned => _1;
        let _2: u8;
        scope 2 {
            debug fo => _2;
            let _18: &u8;
            let _19: &u8;
            let _45: &u8;
            let _46: &u8;
            scope 3 {
                debug left_val => _18;
                debug right_val => _19;
                let _24: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _24;
                }
            }
            scope 5 {
                debug left_val => _45;
                debug right_val => _46;
                let _51: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _51;
                }
            }
        }
    }

    bb0: {
        _1 = Aligned::Zero;
        _3 = discriminant(_1);
        _2 = move _3 as u8 (IntToInt);
        _8 = [const "foo ", const "\n"];
        _7 = &_8;
        _6 = _7 as &[&str] (Pointer(Unsize));
        _13 = &_2;
        _12 = core::fmt::rt::Argument::<'_>::new_display::<u8>(_13) -> bb1;
    }

    bb1: {
        _11 = [move _12];
        _10 = &_11;
        _9 = _10 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _5 = Arguments::<'_>::new_v1(move _6, move _9) -> bb2;
    }

    bb2: {
        _4 = _print(move _5) -> bb3;
    }

    bb3: {
        _15 = &_2;
        _17 = const 0_u8;
        _16 = &_17;
        _14 = (move _15, move _16);
        _18 = (_14.0: &u8);
        _19 = (_14.1: &u8);
        _22 = (*_18);
        _23 = (*_19);
        _21 = Eq(move _22, move _23);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<u8, u8>(move _24, _18, _19, move _26);
    }

    bb5: {
        _31 = [const "", const "\n"];
        _30 = &_31;
        _29 = _30 as &[&str] (Pointer(Unsize));
        _38 = Aligned::Zero;
        _37 = tou8(move _38) -> bb6;
    }

    bb6: {
        _36 = &_37;
        _35 = core::fmt::rt::Argument::<'_>::new_display::<u8>(_36) -> bb7;
    }

    bb7: {
        _34 = [move _35];
        _33 = &_34;
        _32 = _33 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _28 = Arguments::<'_>::new_v1(move _29, move _32) -> bb8;
    }

    bb8: {
        _27 = _print(move _28) -> bb9;
    }

    bb9: {
        _42 = Aligned::Zero;
        _41 = tou8(move _42) -> bb10;
    }

    bb10: {
        _40 = &_41;
        _44 = const 0_u8;
        _43 = &_44;
        _39 = (move _40, move _43);
        _45 = (_39.0: &u8);
        _46 = (_39.1: &u8);
        _49 = (*_45);
        _50 = (*_46);
        _48 = Eq(move _49, move _50);
        _47 = Not(move _48);
        switchInt(move _47) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _51 = core::panicking::AssertKind::Eq;
        _53 = Option::<Arguments<'_>>::None;
        _52 = core::panicking::assert_failed::<u8, u8>(move _51, _45, _46, move _53);
    }

    bb12: {
        return;
    }
}

fn tou8(_1: Aligned) -> u8 {
    debug al => _1;
    let mut _0: u8;
    let mut _2: isize;

    bb0: {
        _2 = discriminant(_1);
        _0 = move _2 as u8 (IntToInt);
        return;
    }
}
