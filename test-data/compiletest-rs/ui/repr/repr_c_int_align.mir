// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: ReprC;
    let mut _4: &ReprC;
    let mut _6: &ReprC;
    let mut _7: (&ReprCu8, &ReprCu8);
    let mut _8: u8;
    let mut _9: u8;
    let mut _10: bool;
    let mut _11: !;
    let mut _13: &ReprC;
    let mut _15: &ReprC;
    let mut _16: (&Repru8, &Repru8);
    let mut _17: u8;
    let mut _18: u8;
    let mut _19: bool;
    let mut _20: !;
    let mut _21: &ReprCu8;
    let mut _22: &ReprCu8;
    let mut _23: &Repru8;
    let mut _24: &Repru8;
    scope 1 {
        debug r1 => _1;
        let _2: ReprC;
        scope 2 {
            debug r2 => _2;
            let _3: &ReprCu8;
            scope 3 {
                debug t1 => _3;
                let _5: &ReprCu8;
                scope 5 {
                    debug t2 => _5;
                    let _12: &Repru8;
                    scope 7 {
                        debug t1 => _12;
                        let _14: &Repru8;
                        scope 9 {
                            debug t2 => _14;
                        }
                        scope 10 {
                        }
                    }
                    scope 8 {
                    }
                }
                scope 6 {
                }
            }
            scope 4 {
            }
        }
    }

    bb0: {
        _1 = ReprC { tag: const 0_u8, padding: const 0_u8, payload: const 0_u16 };
        _2 = ReprC { tag: const 0_u8, padding: const 1_u8, payload: const 1_u16 };
        _4 = &_1;
        _3 = move _4 as &ReprCu8 (Transmute);
        _6 = &_2;
        _5 = move _6 as &ReprCu8 (Transmute);
        _7 = (_3, _5);
        _21 = deref_copy (_7.0: &ReprCu8);
        _9 = discriminant((*_21));
        switchInt(move _9) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _22 = deref_copy (_7.1: &ReprCu8);
        _8 = discriminant((*_22));
        switchInt(move _8) -> [0: bb4, otherwise: bb2];
    }

    bb2: {
        _10 = Not(const false);
        switchInt(move _10) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _11 = core::panicking::panic(const "assertion failed: false");
    }

    bb4: {
        _13 = &_1;
        _12 = move _13 as &Repru8 (Transmute);
        _15 = &_2;
        _14 = move _15 as &Repru8 (Transmute);
        _16 = (_12, _14);
        _23 = deref_copy (_16.0: &Repru8);
        _18 = discriminant((*_23));
        switchInt(move _18) -> [0: bb5, otherwise: bb6];
    }

    bb5: {
        _24 = deref_copy (_16.1: &Repru8);
        _17 = discriminant((*_24));
        switchInt(move _17) -> [0: bb8, otherwise: bb6];
    }

    bb6: {
        _19 = Not(const false);
        switchInt(move _19) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _20 = core::panicking::panic(const "assertion failed: false");
    }

    bb8: {
        return;
    }
}

fn ReprCu8::A(_1: u16) -> ReprCu8 {
    let mut _0: ReprCu8;

    bb0: {
        _0 = ReprCu8::A(move _1);
        return;
    }
}

// MIR FOR CTFE
fn ReprCu8::A(_1: u16) -> ReprCu8 {
    let mut _0: ReprCu8;

    bb0: {
        _0 = ReprCu8::A(move _1);
        return;
    }
}

fn Repru8::A(_1: u16) -> Repru8 {
    let mut _0: Repru8;

    bb0: {
        _0 = Repru8::A(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Repru8::A(_1: u16) -> Repru8 {
    let mut _0: Repru8;

    bb0: {
        _0 = Repru8::A(move _1);
        return;
    }
}
