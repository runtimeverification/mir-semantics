// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: &str;
    let mut _2: (&&str, &&str);
    let mut _3: &&str;
    let mut _4: &&str;
    let _5: &str;
    let mut _8: bool;
    let mut _9: bool;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: (&&str, &&str);
    let mut _15: &&str;
    let mut _16: &&str;
    let _17: &str;
    let mut _20: bool;
    let mut _21: bool;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let _27: ();
    let mut _28: &mut std::string::String;
    let _29: &str;
    let mut _30: (&&str, &std::string::String);
    let mut _31: &&str;
    let mut _32: &std::string::String;
    let mut _35: bool;
    let mut _36: bool;
    let _38: !;
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug s => _1;
        let _6: &&str;
        let _7: &&str;
        let _13: &str;
        scope 2 {
            debug left_val => _6;
            debug right_val => _7;
            let _10: core::panicking::AssertKind;
            scope 3 {
                debug kind => _10;
            }
        }
        scope 4 {
            debug s => _13;
            let _18: &&str;
            let _19: &&str;
            let _25: &str;
            scope 5 {
                debug left_val => _18;
                debug right_val => _19;
                let _22: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _22;
                }
            }
            scope 7 {
                debug s => _25;
                let mut _26: std::string::String;
                scope 8 {
                    debug correct_s => _26;
                    let _33: &&str;
                    let _34: &std::string::String;
                    scope 9 {
                        debug left_val => _33;
                        debug right_val => _34;
                        let _37: core::panicking::AssertKind;
                        scope 10 {
                            debug kind => _37;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const "☃";
        _3 = &_1;
        _5 = const "☃";
        _4 = &_5;
        _2 = (move _3, move _4);
        _6 = (_2.0: &&str);
        _7 = (_2.1: &&str);
        _9 = <&str as PartialEq>::eq(_6, _7) -> bb1;
    }

    bb1: {
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<&str, &str>(move _10, _6, _7, move _12);
    }

    bb3: {
        _13 = const "⨐⨁⪠";
        _15 = &_13;
        _17 = const "⨐⨁⪠";
        _16 = &_17;
        _14 = (move _15, move _16);
        _18 = (_14.0: &&str);
        _19 = (_14.1: &&str);
        _21 = <&str as PartialEq>::eq(_18, _19) -> bb4;
    }

    bb4: {
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<&str, &str>(move _22, _18, _19, move _24);
    }

    bb6: {
        _25 = const "\\{20}";
        _26 = <String as From<&str>>::from(const "\\") -> bb7;
    }

    bb7: {
        _28 = &mut _26;
        _29 = const "{20}";
        _27 = String::push_str(move _28, _29) -> [return: bb8, unwind: bb13];
    }

    bb8: {
        _31 = &_25;
        _32 = &_26;
        _30 = (move _31, move _32);
        _33 = (_30.0: &&str);
        _34 = (_30.1: &std::string::String);
        _36 = <&str as PartialEq<String>>::eq(_33, _34) -> [return: bb9, unwind: bb13];
    }

    bb9: {
        _35 = Not(move _36);
        switchInt(move _35) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _37 = core::panicking::AssertKind::Eq;
        _39 = Option::<Arguments<'_>>::None;
        _38 = core::panicking::assert_failed::<&str, String>(move _37, _33, _34, move _39) -> bb13;
    }

    bb11: {
        drop(_26) -> bb12;
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        drop(_26) -> [return: bb14, unwind terminate];
    }

    bb14 (cleanup): {
        resume;
    }
}
