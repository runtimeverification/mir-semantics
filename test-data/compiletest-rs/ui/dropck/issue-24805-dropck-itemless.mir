// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/dropck/issue-24805-dropck-itemless.rs:23:9: 23:62>::drop(_1: &mut D_Send<T>) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/dropck/issue-24805-dropck-itemless.rs:23:9: 23:62>::drop(_1: &mut D_Sized<T>) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/dropck/issue-24805-dropck-itemless.rs:23:9: 23:62>::drop(_1: &mut D_Sync<T>) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/dropck/issue-24805-dropck-itemless.rs:23:9: 23:62>::drop(_1: &mut D_UserDefined<T>) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn f_send() -> () {
    let mut _0: ();
    let _1: D_Send<&D_Send<i32>>;
    let _2: D_Send<i32>;
    let mut _3: D_Send<i32>;
    let mut _4: D_Send<&D_Send<i32>>;
    let mut _5: &D_Send<i32>;
    scope 1 {
        debug _d => _1;
        debug d1 => _2;
    }

    bb0: {
        _3 = D_Send::<i32>(const 1_i32);
        _2 = move _3;
        _5 = &_2;
        _4 = D_Send::<&D_Send<i32>>(move _5);
        _1 = move _4;
        drop(_2) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_1) -> bb2;
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn f_sized() -> () {
    let mut _0: ();
    let _1: D_Sized<&D_Sized<i32>>;
    let _2: D_Sized<i32>;
    let mut _3: D_Sized<i32>;
    let mut _4: D_Sized<&D_Sized<i32>>;
    let mut _5: &D_Sized<i32>;
    scope 1 {
        debug _d => _1;
        debug d1 => _2;
    }

    bb0: {
        _3 = D_Sized::<i32>(const 1_i32);
        _2 = move _3;
        _5 = &_2;
        _4 = D_Sized::<&D_Sized<i32>>(move _5);
        _1 = move _4;
        drop(_2) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_1) -> bb2;
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn f_sync() -> () {
    let mut _0: ();
    let _1: D_Sync<&D_Sync<i32>>;
    let _2: D_Sync<i32>;
    let mut _3: D_Sync<i32>;
    let mut _4: D_Sync<&D_Sync<i32>>;
    let mut _5: &D_Sync<i32>;
    scope 1 {
        debug _d => _1;
        debug d1 => _2;
    }

    bb0: {
        _3 = D_Sync::<i32>(const 1_i32);
        _2 = move _3;
        _5 = &_2;
        _4 = D_Sync::<&D_Sync<i32>>(move _5);
        _1 = move _4;
        drop(_2) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_1) -> bb2;
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn f_userdefined() -> () {
    let mut _0: ();
    let _1: D_UserDefined<&D_UserDefined<i32>>;
    let _2: D_UserDefined<i32>;
    let mut _3: D_UserDefined<i32>;
    let mut _4: D_UserDefined<&D_UserDefined<i32>>;
    let mut _5: &D_UserDefined<i32>;
    scope 1 {
        debug _d => _1;
        debug d1 => _2;
    }

    bb0: {
        _3 = D_UserDefined::<i32>(const 1_i32);
        _2 = move _3;
        _5 = &_2;
        _4 = D_UserDefined::<&D_UserDefined<i32>>(move _5);
        _1 = move _4;
        drop(_2) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_1) -> bb2;
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let _3: ();
    let _4: ();

    bb0: {
        _1 = f_send() -> bb1;
    }

    bb1: {
        _2 = f_sized() -> bb2;
    }

    bb2: {
        _3 = f_sync() -> bb3;
    }

    bb3: {
        _4 = f_userdefined() -> bb4;
    }

    bb4: {
        return;
    }
}

fn D_Send(_1: T) -> D_Send<T> {
    let mut _0: D_Send<T>;

    bb0: {
        _0 = D_Send::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn D_Send(_1: T) -> D_Send<T> {
    let mut _0: D_Send<T>;

    bb0: {
        _0 = D_Send::<T>(move _1);
        return;
    }
}

fn D_Sized(_1: T) -> D_Sized<T> {
    let mut _0: D_Sized<T>;

    bb0: {
        _0 = D_Sized::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn D_Sized(_1: T) -> D_Sized<T> {
    let mut _0: D_Sized<T>;

    bb0: {
        _0 = D_Sized::<T>(move _1);
        return;
    }
}

fn D_Sync(_1: T) -> D_Sync<T> {
    let mut _0: D_Sync<T>;

    bb0: {
        _0 = D_Sync::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn D_Sync(_1: T) -> D_Sync<T> {
    let mut _0: D_Sync<T>;

    bb0: {
        _0 = D_Sync::<T>(move _1);
        return;
    }
}

fn D_UserDefined(_1: T) -> D_UserDefined<T> {
    let mut _0: D_UserDefined<T>;

    bb0: {
        _0 = D_UserDefined::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn D_UserDefined(_1: T) -> D_UserDefined<T> {
    let mut _0: D_UserDefined<T>;

    bb0: {
        _0 = D_UserDefined::<T>(move _1);
        return;
    }
}
