// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/dropck/cleanup-arm-conditional.rs:16:1: 16:10>::get_x(_1: &Test) -> Option<Box<isize>> {
    debug self => _1;
    let mut _0: std::option::Option<std::boxed::Box<isize>>;
    let mut _2: std::boxed::Box<isize>;
    let mut _3: isize;

    bb0: {
        _3 = ((*_1).0: isize);
        _2 = Box::<isize>::new(move _3) -> bb1;
    }

    bb1: {
        _0 = Option::<Box<isize>>::Some(move _2);
        return;
    }
}

fn do_something(_1: &Test) -> isize {
    debug t => _1;
    let mut _0: isize;
    let mut _2: bool;
    let mut _3: &std::option::Option<std::boxed::Box<isize>>;
    let _4: std::option::Option<std::boxed::Box<isize>>;
    let mut _5: isize;

    bb0: {
        switchInt(((*_1).0: isize)) -> [2: bb2, otherwise: bb1];
    }

    bb1: {
        _0 = const 22_isize;
        goto -> bb8;
    }

    bb2: {
        _4 = Test::get_x(_1) -> bb3;
    }

    bb3: {
        _3 = &_4;
        _2 = Option::<Box<isize>>::is_some(move _3) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        switchInt(move _2) -> [0: bb7, otherwise: bb5];
    }

    bb5: {
        drop(_4) -> bb6;
    }

    bb6: {
        _5 = ((*_1).0: isize);
        _0 = Mul(move _5, const 2_isize);
        goto -> bb8;
    }

    bb7: {
        drop(_4) -> bb1;
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_4) -> [return: bb10, unwind terminate];
    }

    bb10 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Test;
    let _2: isize;
    let _3: &Test;
    scope 1 {
        debug t => _1;
    }

    bb0: {
        _1 = Test { x: const 1_isize };
        _3 = &_1;
        _2 = do_something(_3) -> bb1;
    }

    bb1: {
        return;
    }
}
