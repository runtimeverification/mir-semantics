// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static DROP_COUNTER: AtomicUsize = {
    let mut _0: std::sync::atomic::AtomicUsize;

    bb0: {
        ConstEvalCounter;
        _0 = AtomicUsize::new(const 0_usize) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/dropck/issue-34053.rs:8:1: 8:16>::drop(_1: &mut A) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: usize;
    let _3: &std::sync::atomic::AtomicUsize;
    let mut _4: std::sync::atomic::Ordering;

    bb0: {
        _3 = const {alloc1: &AtomicUsize};
        _4 = SeqCst;
        _2 = AtomicUsize::fetch_add(_3, const 1_usize, move _4) -> bb1;
    }

    bb1: {
        return;
    }
}

alloc1 (static: DROP_COUNTER, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         â”‚ ........
}

static FOO: A = {
    let mut _0: A;

    bb0: {
        _0 = A(const 123_i32);
        return;
    }
}

const BAR: A = {
    let mut _0: A;

    bb0: {
        _0 = A(const 456_i32);
        return;
    }
}

const <impl at ui/dropck/issue-34053.rs:18:1: 18:7>::BAZ: A = {
    let mut _0: A;

    bb0: {
        _0 = A(const 789_i32);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let mut _2: &usize;
    let _3: usize;
    let _4: &std::sync::atomic::AtomicUsize;
    let mut _5: std::sync::atomic::Ordering;
    let mut _6: &usize;
    let _7: usize;
    let _8: &usize;
    let _9: &usize;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&&i32, &&i32);
    let mut _18: &&i32;
    let _19: &i32;
    let _20: &A;
    let mut _21: &&i32;
    let _22: &i32;
    let _23: i32;
    let _24: &&i32;
    let _25: &&i32;
    let mut _26: bool;
    let mut _27: bool;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&usize, &usize);
    let mut _32: &usize;
    let _33: usize;
    let _34: &std::sync::atomic::AtomicUsize;
    let mut _35: std::sync::atomic::Ordering;
    let mut _36: &usize;
    let _37: usize;
    let _38: &usize;
    let _39: &usize;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: usize;
    let mut _43: usize;
    let _45: !;
    let mut _46: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _47: (&i32, &i32);
    let mut _48: &i32;
    let _49: A;
    let mut _50: &i32;
    let _51: i32;
    let _52: &i32;
    let _53: &i32;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: i32;
    let mut _57: i32;
    let _59: !;
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _61: (&usize, &usize);
    let mut _62: &usize;
    let _63: usize;
    let _64: &std::sync::atomic::AtomicUsize;
    let mut _65: std::sync::atomic::Ordering;
    let mut _66: &usize;
    let _67: usize;
    let _68: &usize;
    let _69: &usize;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: usize;
    let mut _73: usize;
    let _75: !;
    let mut _76: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _77: (&i32, &i32);
    let mut _78: &i32;
    let _79: A;
    let mut _80: &i32;
    let _81: i32;
    let _82: &i32;
    let _83: &i32;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: i32;
    let mut _87: i32;
    let _89: !;
    let mut _90: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _91: (&usize, &usize);
    let mut _92: &usize;
    let _93: usize;
    let _94: &std::sync::atomic::AtomicUsize;
    let mut _95: std::sync::atomic::Ordering;
    let mut _96: &usize;
    let _97: usize;
    let _98: &usize;
    let _99: &usize;
    let mut _100: bool;
    let mut _101: bool;
    let mut _102: usize;
    let mut _103: usize;
    let _105: !;
    let mut _106: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _8;
        debug right_val => _9;
        let _14: core::panicking::AssertKind;
        scope 2 {
            debug kind => _14;
        }
    }
    scope 3 {
        debug left_val => _24;
        debug right_val => _25;
        let _28: core::panicking::AssertKind;
        scope 4 {
            debug kind => _28;
        }
    }
    scope 5 {
        debug left_val => _38;
        debug right_val => _39;
        let _44: core::panicking::AssertKind;
        scope 6 {
            debug kind => _44;
        }
    }
    scope 7 {
        debug left_val => _52;
        debug right_val => _53;
        let _58: core::panicking::AssertKind;
        scope 8 {
            debug kind => _58;
        }
    }
    scope 9 {
        debug left_val => _68;
        debug right_val => _69;
        let _74: core::panicking::AssertKind;
        scope 10 {
            debug kind => _74;
        }
    }
    scope 11 {
        debug left_val => _82;
        debug right_val => _83;
        let _88: core::panicking::AssertKind;
        scope 12 {
            debug kind => _88;
        }
    }
    scope 13 {
        debug left_val => _98;
        debug right_val => _99;
        let _104: core::panicking::AssertKind;
        scope 14 {
            debug kind => _104;
        }
    }

    bb0: {
        _4 = const {alloc1: &AtomicUsize};
        _5 = SeqCst;
        _3 = AtomicUsize::load(_4, move _5) -> bb1;
    }

    bb1: {
        _2 = &_3;
        _7 = const 0_usize;
        _6 = &_7;
        _1 = (move _2, move _6);
        _8 = (_1.0: &usize);
        _9 = (_1.1: &usize);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<usize, usize>(move _14, _8, _9, move _16);
    }

    bb3: {
        _20 = const {alloc2: &A};
        _19 = &((*_20).0: i32);
        _18 = &_19;
        _23 = const 123_i32;
        _22 = &_23;
        _21 = &_22;
        _17 = (move _18, move _21);
        _24 = (_17.0: &&i32);
        _25 = (_17.1: &&i32);
        _27 = <&i32 as PartialEq>::eq(_24, _25) -> bb4;
    }

    bb4: {
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<&i32, &i32>(move _28, _24, _25, move _30);
    }

    bb6: {
        _34 = const {alloc1: &AtomicUsize};
        _35 = SeqCst;
        _33 = AtomicUsize::load(_34, move _35) -> bb7;
    }

    bb7: {
        _32 = &_33;
        _37 = const 0_usize;
        _36 = &_37;
        _31 = (move _32, move _36);
        _38 = (_31.0: &usize);
        _39 = (_31.1: &usize);
        _42 = (*_38);
        _43 = (*_39);
        _41 = Eq(move _42, move _43);
        _40 = Not(move _41);
        switchInt(move _40) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _44 = core::panicking::AssertKind::Eq;
        _46 = Option::<Arguments<'_>>::None;
        _45 = core::panicking::assert_failed::<usize, usize>(move _44, _38, _39, move _46);
    }

    bb9: {
        _49 = const _;
        _48 = &(_49.0: i32);
        _51 = const 456_i32;
        _50 = &_51;
        _47 = (move _48, move _50);
        _52 = (_47.0: &i32);
        _53 = (_47.1: &i32);
        _56 = (*_52);
        _57 = (*_53);
        _55 = Eq(move _56, move _57);
        _54 = Not(move _55);
        switchInt(move _54) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _58 = core::panicking::AssertKind::Eq;
        _60 = Option::<Arguments<'_>>::None;
        _59 = core::panicking::assert_failed::<i32, i32>(move _58, _52, _53, move _60) -> bb23;
    }

    bb11: {
        drop(_49) -> bb12;
    }

    bb12: {
        _64 = const {alloc1: &AtomicUsize};
        _65 = SeqCst;
        _63 = AtomicUsize::load(_64, move _65) -> bb13;
    }

    bb13: {
        _62 = &_63;
        _67 = const 1_usize;
        _66 = &_67;
        _61 = (move _62, move _66);
        _68 = (_61.0: &usize);
        _69 = (_61.1: &usize);
        _72 = (*_68);
        _73 = (*_69);
        _71 = Eq(move _72, move _73);
        _70 = Not(move _71);
        switchInt(move _70) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _74 = core::panicking::AssertKind::Eq;
        _76 = Option::<Arguments<'_>>::None;
        _75 = core::panicking::assert_failed::<usize, usize>(move _74, _68, _69, move _76);
    }

    bb15: {
        _79 = const _;
        _78 = &(_79.0: i32);
        _81 = const 789_i32;
        _80 = &_81;
        _77 = (move _78, move _80);
        _82 = (_77.0: &i32);
        _83 = (_77.1: &i32);
        _86 = (*_82);
        _87 = (*_83);
        _85 = Eq(move _86, move _87);
        _84 = Not(move _85);
        switchInt(move _84) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _88 = core::panicking::AssertKind::Eq;
        _90 = Option::<Arguments<'_>>::None;
        _89 = core::panicking::assert_failed::<i32, i32>(move _88, _82, _83, move _90) -> bb22;
    }

    bb17: {
        drop(_79) -> bb18;
    }

    bb18: {
        _94 = const {alloc1: &AtomicUsize};
        _95 = SeqCst;
        _93 = AtomicUsize::load(_94, move _95) -> bb19;
    }

    bb19: {
        _92 = &_93;
        _97 = const 2_usize;
        _96 = &_97;
        _91 = (move _92, move _96);
        _98 = (_91.0: &usize);
        _99 = (_91.1: &usize);
        _102 = (*_98);
        _103 = (*_99);
        _101 = Eq(move _102, move _103);
        _100 = Not(move _101);
        switchInt(move _100) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _104 = core::panicking::AssertKind::Eq;
        _106 = Option::<Arguments<'_>>::None;
        _105 = core::panicking::assert_failed::<usize, usize>(move _104, _98, _99, move _106);
    }

    bb21: {
        return;
    }

    bb22 (cleanup): {
        drop(_79) -> [return: bb24, unwind terminate];
    }

    bb23 (cleanup): {
        drop(_49) -> [return: bb24, unwind terminate];
    }

    bb24 (cleanup): {
        resume;
    }
}

alloc2 (static: FOO, size: 4, align: 4) {
    7b 00 00 00                                     â”‚ {...
}

alloc1 (static: DROP_COUNTER, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         â”‚ ........
}

fn A(_1: i32) -> A {
    let mut _0: A;

    bb0: {
        _0 = A(move _1);
        return;
    }
}

// MIR FOR CTFE
fn A(_1: i32) -> A {
    let mut _0: A;

    bb0: {
        _0 = A(move _1);
        return;
    }
}
