// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/auto-instantiate.rs:4:10: 4:15>::fmt(_1: &Pair<T, U>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &T;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&U;
    let _10: &U;

    bb0: {
        _3 = const "Pair";
        _4 = const "a";
        _6 = &((*_1).0: T);
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize));
        _7 = const "b";
        _10 = &((*_1).1: U);
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> bb1;
    }

    bb1: {
        return;
    }
}

fn f(_1: T, _2: U) -> Pair<T, U> {
    debug x => _1;
    debug y => _2;
    let mut _0: Pair<T, U>;

    bb0: {
        _0 = Pair::<T, U> { a: move _1, b: move _2 };
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let _4: &[&str; 2];
    let _5: [&str; 2];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &isize;
    let _11: Pair<Triple, i32>;
    let mut _12: Triple;
    let _13: ();
    let mut _14: std::fmt::Arguments<'_>;
    let mut _15: &[&str];
    let _16: &[&str; 2];
    let _17: [&str; 2];
    let mut _18: &[core::fmt::rt::Argument<'_>];
    let _19: &[core::fmt::rt::Argument<'_>; 1];
    let _20: [core::fmt::rt::Argument<'_>; 1];
    let mut _21: core::fmt::rt::Argument<'_>;
    let _22: &i32;
    let _23: Pair<i32, i32>;

    bb0: {
        _5 = [const "", const "\n"];
        _4 = &_5;
        _3 = _4 as &[&str] (Pointer(Unsize));
        _12 = Triple { x: const 3_isize, y: const 4_isize, z: const 5_isize };
        _11 = f::<Triple, i32>(move _12, const 4_i32) -> bb1;
    }

    bb1: {
        _10 = &((_11.0: Triple).0: isize);
        _9 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_10) -> bb2;
    }

    bb2: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_v1(move _3, move _6) -> bb3;
    }

    bb3: {
        _1 = _print(move _2) -> bb4;
    }

    bb4: {
        _17 = [const "", const "\n"];
        _16 = &_17;
        _15 = _16 as &[&str] (Pointer(Unsize));
        _23 = f::<i32, i32>(const 5_i32, const 6_i32) -> bb5;
    }

    bb5: {
        _22 = &(_23.0: i32);
        _21 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_22) -> bb6;
    }

    bb6: {
        _20 = [move _21];
        _19 = &_20;
        _18 = _19 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _14 = Arguments::<'_>::new_v1(move _15, move _18) -> bb7;
    }

    bb7: {
        _13 = _print(move _14) -> bb8;
    }

    bb8: {
        return;
    }
}
