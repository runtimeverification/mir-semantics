// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/inference/issue-70703.rs:15:1: 15:34>::consume(_1: (), _2: P) -> () {
    debug self => const ();
    let mut _0: ();

    bb0: {
        drop(_2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn make_product_consumer(_1: F) -> impl ProductConsumer<<F as Factory>::Product> {
    let mut _0: impl ProductConsumer<<F as Factory>::Product>;

    bb0: {
        drop(_1) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: impl ProductConsumer<<() as Factory>::Product>;
    let _2: ();
    scope 1 {
        debug consumer => const ZeroSized: impl ProductConsumer<<() as Factory>::Product>;
    }

    bb0: {
        _1 = make_product_consumer::<()>(const ()) -> bb1;
    }

    bb1: {
        _2 = <impl ProductConsumer<<() as Factory>::Product> as ProductConsumer<()>>::consume(const ZeroSized: impl ProductConsumer<<() as Factory>::Product>, const ()) -> bb2;
    }

    bb2: {
        return;
    }
}
