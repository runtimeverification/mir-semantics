// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f(_1: Vec<RefCell<u8>>) -> () {
    debug v => _1;
    let mut _0: ();
    let _2: &mut u8;
    let mut _3: &mut u8;
    let mut _4: &mut std::cell::RefMut<'_, u8>;
    let mut _5: std::cell::RefMut<'_, u8>;
    let mut _6: &std::cell::RefCell<u8>;
    let _7: &std::cell::RefCell<u8>;
    let mut _8: &std::vec::Vec<std::cell::RefCell<u8>>;
    scope 1 {
        debug _t => _2;
    }

    bb0: {
        _8 = &_1;
        _7 = <Vec<RefCell<u8>> as Index<usize>>::index(move _8, const 0_usize) -> [return: bb1, unwind: bb7];
    }

    bb1: {
        _6 = _7;
        _5 = RefCell::<u8>::borrow_mut(move _6) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _4 = &mut _5;
        _3 = <RefMut<'_, u8> as DerefMut>::deref_mut(move _4) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _2 = _3;
        drop(_5) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        drop(_1) -> bb5;
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_5) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        drop(_1) -> [return: bb8, unwind terminate];
    }

    bb8 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
