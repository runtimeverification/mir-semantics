// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/inference/type-infer-generalize-ty-var.rs:28:1: 28:43>::get(_1: &Wrap<T>) -> &dyn MyShow {
    debug self => _1;
    let mut _0: &dyn MyShow;
    let _2: &usize;

    bb0: {
        _2 = const {alloc1: &usize};
        _0 = _2 as &dyn MyShow (Pointer(Unsize));
        return;
    }
}

alloc1 (static: <Wrap<T> as Get<(dyn MyShow + 'static)>>::get::x, size: 8, align: 8) {
    2a 00 00 00 00 00 00 00                         │ *.......
}

static <impl at ui/inference/type-infer-generalize-ty-var.rs:28:1: 28:43>::get::x: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 42_usize;
        return;
    }
}

fn <impl at ui/inference/type-infer-generalize-ty-var.rs:35:1: 35:28>::get(_1: &Wrap<U>) -> &usize {
    debug self => _1;
    let mut _0: &usize;

    bb0: {
        _0 = const {alloc2: &usize};
        return;
    }
}

alloc2 (static: <Wrap<U> as Get<usize>>::get::x, size: 8, align: 8) {
    37 00 00 00 00 00 00 00                         │ 7.......
}

static <impl at ui/inference/type-infer-generalize-ty-var.rs:35:1: 35:28>::get::x: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 55_usize;
        return;
    }
}

fn MyShow::dummy(_1: &Self) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn constrain(_1: RefCell<&dyn MyShow>) -> () {
    debug rc => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: Wrap<T>;
    let _3: &Wrap<T>;
    let mut _5: &dyn MyShow;
    let _6: ();
    let mut _7: std::cell::RefCell<&dyn MyShow>;
    let mut _8: Wrap<T>;
    scope 1 {
        debug collection => _1;
        let _2: &dyn MyShow;
        scope 2 {
            debug __arg0 => _2;
            let _4: std::cell::RefCell<&dyn MyShow>;
            scope 3 {
                debug __args_cell => _4;
            }
        }
    }

    bb0: {
        _1 = Wrap::<T>::WrapNone;
        _3 = &_1;
        _2 = <Wrap<T> as Get<dyn MyShow>>::get(_3) -> bb1;
    }

    bb1: {
        _5 = _2;
        _4 = RefCell::<&dyn MyShow>::new(move _5) -> bb2;
    }

    bb2: {
        _7 = move _4;
        _6 = constrain(move _7) -> bb3;
    }

    bb3: {
        _8 = Wrap::<T>::WrapSome(const T);
        _1 = move _8;
        return;
    }
}

fn Wrap::WrapSome(_1: A) -> Wrap<A> {
    let mut _0: Wrap<A>;

    bb0: {
        _0 = Wrap::<A>::WrapSome(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Wrap::WrapSome(_1: A) -> Wrap<A> {
    let mut _0: Wrap<A>;

    bb0: {
        _0 = Wrap::<A>::WrapSome(move _1);
        return;
    }
}
