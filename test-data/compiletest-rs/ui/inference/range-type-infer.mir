// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<bool>;
    let mut _2: std::iter::Map<std::ops::Range<u64>, [closure@ui/inference/range-type-infer.rs:10:25: 10:28]>;
    let mut _3: std::ops::Range<u64>;
    let mut _4: (&bool, &bool);
    let mut _5: &bool;
    let _6: &bool;
    let mut _7: &std::vec::Vec<bool>;
    let mut _8: &bool;
    let _9: bool;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: bool;
    let _17: !;
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _20: std::iter::Map<std::ops::Range<u64>, [closure@ui/inference/range-type-infer.rs:12:25: 12:28]>;
    let mut _21: std::ops::Range<u64>;
    let mut _22: (&bool, &bool);
    let mut _23: &bool;
    let _24: &bool;
    let mut _25: &std::vec::Vec<bool>;
    let mut _26: &bool;
    let _27: bool;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: bool;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _38: std::ops::Range<u8>;
    let mut _39: (&usize, &usize);
    let mut _40: &usize;
    let _41: usize;
    let mut _42: &std::vec::Vec<u8>;
    let mut _43: &usize;
    let _44: usize;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: usize;
    let mut _50: usize;
    let _52: !;
    let mut _53: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _54: std::ops::Range<i32>;
    let mut _55: std::ops::Range<i32>;
    let mut _57: std::option::Option<i32>;
    let mut _58: &mut std::ops::Range<i32>;
    let mut _59: isize;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: std::ops::Range<i32>;
    let mut _66: std::ops::Range<i32>;
    let mut _68: std::option::Option<i32>;
    let mut _69: &mut std::ops::Range<i32>;
    let mut _70: isize;
    let mut _73: std::ops::Range<usize>;
    let mut _74: std::ops::Range<usize>;
    let mut _76: std::option::Option<usize>;
    let mut _77: &mut std::ops::Range<usize>;
    let mut _78: isize;
    let mut _80: usize;
    let mut _81: bool;
    scope 1 {
        debug xs => _1;
        let _10: &bool;
        let _11: &bool;
        let _19: std::vec::Vec<bool>;
        scope 2 {
            debug left_val => _10;
            debug right_val => _11;
            let _16: core::panicking::AssertKind;
            scope 3 {
                debug kind => _16;
            }
        }
        scope 4 {
            debug xs => _19;
            let _28: &bool;
            let _29: &bool;
            let _37: std::vec::Vec<u8>;
            scope 5 {
                debug left_val => _28;
                debug right_val => _29;
                let _34: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _34;
                }
            }
            scope 7 {
                debug xs => _37;
                let _45: &usize;
                let _46: &usize;
                let mut _56: std::ops::Range<i32>;
                let mut _67: std::ops::Range<i32>;
                let _72: [bool; 2];
                scope 8 {
                    debug left_val => _45;
                    debug right_val => _46;
                    let _51: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _51;
                    }
                }
                scope 10 {
                    debug iter => _56;
                    let _60: i32;
                    scope 11 {
                        debug x => _60;
                    }
                }
                scope 12 {
                    debug iter => _67;
                    let _71: i32;
                    scope 13 {
                        debug x => _71;
                    }
                }
                scope 14 {
                    debug array => _72;
                    let mut _75: std::ops::Range<usize>;
                    scope 15 {
                        debug iter => _75;
                        let _79: usize;
                        scope 16 {
                            debug i => _79;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _3 = std::ops::Range::<u64> { start: const 0_u64, end: const 8_u64 };
        _2 = <std::ops::Range<u64> as Iterator>::map::<bool, [closure@ui/inference/range-type-infer.rs:10:25: 10:28]>(move _3, const ZeroSized: [closure@ui/inference/range-type-infer.rs:10:25: 10:28]) -> bb1;
    }

    bb1: {
        _1 = <Map<std::ops::Range<u64>, [closure@ui/inference/range-type-infer.rs:10:25: 10:28]> as Iterator>::collect::<Vec<bool>>(move _2) -> bb2;
    }

    bb2: {
        _7 = &_1;
        _6 = <Vec<bool> as Index<usize>>::index(move _7, const 1_usize) -> [return: bb3, unwind: bb37];
    }

    bb3: {
        _5 = _6;
        _9 = const true;
        _8 = &_9;
        _4 = (move _5, move _8);
        _10 = (_4.0: &bool);
        _11 = (_4.1: &bool);
        _14 = (*_10);
        _15 = (*_11);
        _13 = Eq(move _14, move _15);
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _16 = core::panicking::AssertKind::Eq;
        _18 = Option::<Arguments<'_>>::None;
        _17 = core::panicking::assert_failed::<bool, bool>(move _16, _10, _11, move _18) -> bb37;
    }

    bb5: {
        _21 = std::ops::Range::<u64> { start: const 0_u64, end: const 8_u64 };
        _20 = <std::ops::Range<u64> as Iterator>::map::<bool, [closure@ui/inference/range-type-infer.rs:12:25: 12:28]>(move _21, const ZeroSized: [closure@ui/inference/range-type-infer.rs:12:25: 12:28]) -> [return: bb6, unwind: bb37];
    }

    bb6: {
        _19 = <Map<std::ops::Range<u64>, [closure@ui/inference/range-type-infer.rs:12:25: 12:28]> as Iterator>::collect::<Vec<bool>>(move _20) -> [return: bb7, unwind: bb37];
    }

    bb7: {
        _25 = &_19;
        _24 = <Vec<bool> as Index<usize>>::index(move _25, const 1_usize) -> [return: bb8, unwind: bb36];
    }

    bb8: {
        _23 = _24;
        _27 = const true;
        _26 = &_27;
        _22 = (move _23, move _26);
        _28 = (_22.0: &bool);
        _29 = (_22.1: &bool);
        _32 = (*_28);
        _33 = (*_29);
        _31 = Eq(move _32, move _33);
        _30 = Not(move _31);
        switchInt(move _30) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = core::panicking::assert_failed::<bool, bool>(move _34, _28, _29, move _36) -> bb36;
    }

    bb10: {
        _38 = std::ops::Range::<u8> { start: const 0_u8, end: const 10_u8 };
        _37 = <std::ops::Range<u8> as Iterator>::collect::<Vec<u8>>(move _38) -> [return: bb11, unwind: bb36];
    }

    bb11: {
        _42 = &_37;
        _41 = Vec::<u8>::len(move _42) -> [return: bb12, unwind: bb35];
    }

    bb12: {
        _40 = &_41;
        _44 = const 10_usize;
        _43 = &_44;
        _39 = (move _40, move _43);
        _45 = (_39.0: &usize);
        _46 = (_39.1: &usize);
        _49 = (*_45);
        _50 = (*_46);
        _48 = Eq(move _49, move _50);
        _47 = Not(move _48);
        switchInt(move _47) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _51 = core::panicking::AssertKind::Eq;
        _53 = Option::<Arguments<'_>>::None;
        _52 = core::panicking::assert_failed::<usize, usize>(move _51, _45, _46, move _53) -> bb35;
    }

    bb14: {
        _55 = std::ops::Range::<i32> { start: const 0_i32, end: const 10_i32 };
        _54 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _55) -> [return: bb15, unwind: bb35];
    }

    bb15: {
        _56 = move _54;
        goto -> bb16;
    }

    bb16: {
        _58 = &mut _56;
        _57 = <std::ops::Range<i32> as Iterator>::next(_58) -> [return: bb17, unwind: bb35];
    }

    bb17: {
        _59 = discriminant(_57);
        switchInt(move _59) -> [0: bb20, 1: bb18, otherwise: bb19];
    }

    bb18: {
        _60 = ((_57 as Some).0: i32);
        _61 = Eq(const 2_i32, const 0_i32);
        assert(!move _61, "attempt to calculate the remainder of `{}` with a divisor of zero", _60) -> [success: bb21, unwind: bb35];
    }

    bb19: {
        unreachable;
    }

    bb20: {
        _66 = std::ops::Range::<i32> { start: const 0_i32, end: const 100_i32 };
        _65 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _66) -> [return: bb22, unwind: bb35];
    }

    bb21: {
        _62 = Eq(const 2_i32, const -1_i32);
        _63 = Eq(_60, const i32::MIN);
        _64 = BitAnd(move _62, move _63);
        assert(!move _64, "attempt to compute the remainder of `{} % {}`, which would overflow", _60, const 2_i32) -> [success: bb16, unwind: bb35];
    }

    bb22: {
        _67 = move _65;
        goto -> bb23;
    }

    bb23: {
        _69 = &mut _67;
        _68 = <std::ops::Range<i32> as Iterator>::next(_69) -> [return: bb24, unwind: bb35];
    }

    bb24: {
        _70 = discriminant(_68);
        switchInt(move _70) -> [0: bb26, 1: bb25, otherwise: bb19];
    }

    bb25: {
        _71 = ((_68 as Some).0: i32);
        goto -> bb23;
    }

    bb26: {
        _72 = [const true, const false];
        _74 = std::ops::Range::<usize> { start: const 0_usize, end: const 1_usize };
        _73 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _74) -> [return: bb27, unwind: bb35];
    }

    bb27: {
        _75 = move _73;
        goto -> bb28;
    }

    bb28: {
        _77 = &mut _75;
        _76 = <std::ops::Range<usize> as Iterator>::next(_77) -> [return: bb29, unwind: bb35];
    }

    bb29: {
        _78 = discriminant(_76);
        switchInt(move _78) -> [0: bb31, 1: bb30, otherwise: bb19];
    }

    bb30: {
        _79 = ((_76 as Some).0: usize);
        _80 = const 2_usize;
        _81 = Lt(_79, _80);
        assert(move _81, "index out of bounds: the length is {} but the index is {}", move _80, _79) -> [success: bb28, unwind: bb35];
    }

    bb31: {
        drop(_37) -> [return: bb32, unwind: bb36];
    }

    bb32: {
        drop(_19) -> [return: bb33, unwind: bb37];
    }

    bb33: {
        drop(_1) -> bb34;
    }

    bb34: {
        return;
    }

    bb35 (cleanup): {
        drop(_37) -> [return: bb36, unwind terminate];
    }

    bb36 (cleanup): {
        drop(_19) -> [return: bb37, unwind terminate];
    }

    bb37 (cleanup): {
        drop(_1) -> [return: bb38, unwind terminate];
    }

    bb38 (cleanup): {
        resume;
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/inference/range-type-infer.rs:10:25: 10:28], _2: u64) -> bool {
    debug i => _2;
    let mut _0: bool;

    bb0: {
        _0 = Eq(_2, const 1_u64);
        return;
    }
}

fn main::{closure#1}(_1: &mut [closure@ui/inference/range-type-infer.rs:12:25: 12:28], _2: u64) -> bool {
    debug i => _2;
    let mut _0: bool;

    bb0: {
        _0 = Eq(const 1_u64, _2);
        return;
    }
}
