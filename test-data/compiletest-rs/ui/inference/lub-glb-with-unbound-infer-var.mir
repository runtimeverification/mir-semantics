// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: fn(i32);
    let mut _4: i32;
    let _5: ();
    let mut _6: fn(i32);
    scope 1 {
        debug a_f => _1;
        let _2: fn(i32);
        scope 2 {
            debug b_f => _2;
            let _3: fn(i32);
            scope 3 {
                debug c_f => _3;
            }
        }
    }

    bb0: {
        _1 = const ZeroSized: [closure@ui/inference/lub-glb-with-unbound-infer-var.rs:8:22: 8:25] as fn(i32) (Pointer(ClosureFnPointer(Normal)));
        _2 = const ZeroSized: [closure@ui/inference/lub-glb-with-unbound-infer-var.rs:9:22: 9:25] as fn(i32) (Pointer(ClosureFnPointer(Normal)));
        _4 = const 22_i32;
        switchInt(_4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _3 = _2;
        goto -> bb3;
    }

    bb2: {
        _3 = _1;
        goto -> bb3;
    }

    bb3: {
        _6 = _3;
        _5 = move _6(const 4_i32) -> bb4;
    }

    bb4: {
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/inference/lub-glb-with-unbound-infer-var.rs:8:22: 8:25], _2: i32) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main::{closure#1}(_1: &[closure@ui/inference/lub-glb-with-unbound-infer-var.rs:9:22: 9:25], _2: i32) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
