// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn unique() -> Box<dyn FnMut()> {
    let mut _0: std::boxed::Box<dyn std::ops::FnMut()>;
    let mut _1: std::boxed::Box<[closure@ui/inference/newlambdas-ret-infer2.rs:9:52: 9:54]>;

    bb0: {
        _1 = Box::<[closure@ui/inference/newlambdas-ret-infer2.rs:9:52: 9:54]>::new(const ZeroSized: [closure@ui/inference/newlambdas-ret-infer2.rs:9:52: 9:54]) -> bb1;
    }

    bb1: {
        _0 = move _1 as std::boxed::Box<dyn std::ops::FnMut()> (Pointer(Unsize));
        return;
    }
}

fn unique::{closure#0}(_1: &mut [closure@ui/inference/newlambdas-ret-infer2.rs:9:52: 9:54]) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
