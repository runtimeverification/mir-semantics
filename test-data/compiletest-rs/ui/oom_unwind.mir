// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _5: !;
    scope 1 {
        debug panic => _1;
    }

    bb0: {
        _1 = catch_unwind::<[closure@ui/oom_unwind.rs:12:30: 12:32], ()>(const ZeroSized: [closure@ui/oom_unwind.rs:12:30: 12:32]) -> bb1;
    }

    bb1: {
        _4 = &_1;
        _3 = Result::<(), Box<dyn Any + Send>>::is_err(move _4) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _2 = Not(move _3);
        switchInt(move _2) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _5 = core::panicking::panic(const "assertion failed: panic.is_err()") -> bb6;
    }

    bb4: {
        drop(_1) -> bb5;
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_1) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }
}

fn main::{closure#0}(_1: [closure@ui/oom_unwind.rs:12:30: 12:32]) -> () {
    let mut _0: ();
    let mut _2: std::ops::Range<i32>;
    let mut _3: std::ops::Range<i32>;
    let mut _4: std::ops::Range<i32>;
    let mut _5: std::option::Option<i32>;
    let mut _6: &mut std::ops::Range<i32>;
    let mut _7: isize;
    let _9: ();
    let mut _10: std::vec::Vec<u8>;
    let mut _11: std::vec::Vec<u8>;
    scope 1 {
        debug iter => _4;
        let _8: usize;
        scope 2 {
            debug alloc_size => _8;
        }
    }

    bb0: {
        _3 = std::ops::Range::<i32> { start: const 0_i32, end: const 16_i32 };
        _2 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _3) -> bb1;
    }

    bb1: {
        _4 = move _2;
        goto -> bb2;
    }

    bb2: {
        _6 = &mut _4;
        _5 = <std::ops::Range<i32> as Iterator>::next(_6) -> bb3;
    }

    bb3: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        _8 = const 1152921504875282432_u64 as usize (IntToInt);
        _11 = from_elem::<u8>(const 0_u8, _8) -> bb7;
    }

    bb5: {
        unreachable;
    }

    bb6: {
        return;
    }

    bb7: {
        _10 = std::hint::black_box::<Vec<u8>>(move _11) -> bb8;
    }

    bb8: {
        _9 = std::mem::forget::<Vec<u8>>(move _10) -> bb2;
    }
}
