// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:5:16: 5:21>::clone(_1: &MyCx<'_, '_>) -> MyCx<'_, '_> {
    debug self => _1;
    let mut _0: MyCx<'_, '_>;
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn <impl at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:11:1: 11:40>::short(_1: MyCx<'_, '_>) -> &u32 {
    debug self => _1;
    let mut _0: &u32;

    bb0: {
        _0 = (_1.0: &u32);
        return;
    }
}

fn <impl at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:11:1: 11:40>::long(_1: MyCx<'_, '_>) -> &u32 {
    debug self => _1;
    let mut _0: &u32;

    bb0: {
        _0 = (_1.1: &u32);
        return;
    }
}

fn <impl at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:11:1: 11:40>::set_short(_1: &mut MyCx<'_, '_>, _2: &u32) -> () {
    debug self => _1;
    debug v => _2;
    let mut _0: ();

    bb0: {
        ((*_1).0: &u32) = _2;
        return;
    }
}

fn with(_1: F) -> R {
    debug op => _1;
    let mut _0: R;
    let mut _2: (MyCx<'_, '_>,);
    let mut _3: MyCx<'_, '_>;
    let _4: &u32;
    let _5: u32;
    let _6: &u32;
    let _7: u32;

    bb0: {
        _5 = const 22_u32;
        _4 = &_5;
        _7 = const 22_u32;
        _6 = &_7;
        _3 = MyCx::<'_, '_> { short: _4, long: _6 };
        _2 = (move _3,);
        _0 = <F as FnOnce<(MyCx<'_, '_>,)>>::call_once(move _1, move _2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();

    bb0: {
        _1 = with::<[closure@ui/functions-closures/implied-bounds-closure-arg-outlives.rs:28:10: 28:18], ()>(const ZeroSized: [closure@ui/functions-closures/implied-bounds-closure-arg-outlives.rs:28:10: 28:18]) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main::{closure#0}(_1: [closure@ui/functions-closures/implied-bounds-closure-arg-outlives.rs:28:10: 28:18], _2: MyCx<'_, '_>) -> () {
    debug cx => _2;
    let mut _0: ();
    let _3: &u32;
    let mut _4: bool;
    let mut _5: MyCx<'_, '_>;
    let _6: &u32;
    let mut _7: MyCx<'_, '_>;
    let _8: ();
    let mut _9: &mut MyCx<'_, '_>;
    let mut _10: &u32;
    scope 1 {
        debug l => _3;
    }

    bb0: {
        _4 = const true;
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _5 = _2;
        _3 = MyCx::<'_, '_>::long(move _5) -> bb4;
    }

    bb2: {
        _7 = _2;
        _6 = MyCx::<'_, '_>::short(move _7) -> bb3;
    }

    bb3: {
        _3 = _6;
        goto -> bb4;
    }

    bb4: {
        _9 = &mut _2;
        _10 = _3;
        _8 = MyCx::<'_, '_>::set_short(move _9, move _10) -> bb5;
    }

    bb5: {
        return;
    }
}
