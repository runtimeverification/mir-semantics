// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: isize) -> isize {
    debug x => _1;
    let mut _0: isize;

    bb0: {
        _0 = Mul(_1, const 2_isize);
        return;
    }
}

fn bar(_1: isize) -> isize {
    debug x => _1;
    let mut _0: isize;

    bb0: {
        _0 = Mul(_1, const 4_isize);
        return;
    }
}

fn eq(_1: T, _2: T) -> () {
    debug x => _1;
    debug y => _2;
    let mut _0: ();

    bb0: {
        drop(_2) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_1) -> bb2;
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: fn(isize) -> isize;
    let _2: ();
    let mut _3: fn(isize) -> isize;
    let mut _4: fn(isize) -> isize;
    scope 1 {
        debug f => _1;
    }

    bb0: {
        _1 = foo as fn(isize) -> isize (Pointer(ReifyFnPointer));
        _3 = foo as fn(isize) -> isize (Pointer(ReifyFnPointer));
        _4 = bar as fn(isize) -> isize (Pointer(ReifyFnPointer));
        _2 = eq::<fn(isize) -> isize>(move _3, move _4) -> bb1;
    }

    bb1: {
        return;
    }
}
