// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: [closure@ui/functions-closures/closure-returning-closure.rs:3:13: 3:16];
    let mut _2: (&i32, &i32);
    let mut _3: &i32;
    let _4: i32;
    let mut _5: &[closure@ui/functions-closures/closure-returning-closure.rs:3:16: 3:22];
    let _6: [closure@ui/functions-closures/closure-returning-closure.rs:3:16: 3:22];
    let mut _7: &[closure@ui/functions-closures/closure-returning-closure.rs:3:13: 3:16];
    let mut _8: (i32, i32);
    let mut _9: &i32;
    let _10: i32;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: i32;
    let mut _16: i32;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug f => const ZeroSized: [closure@ui/functions-closures/closure-returning-closure.rs:3:13: 3:16];
        let _11: &i32;
        let _12: &i32;
        scope 2 {
            debug left_val => _11;
            debug right_val => _12;
            let _17: core::panicking::AssertKind;
            scope 3 {
                debug kind => _17;
            }
        }
    }

    bb0: {
        _7 = &_1;
        _6 = <[closure@ui/functions-closures/closure-returning-closure.rs:3:13: 3:16] as Fn<((),)>>::call(move _7, const ((),)) -> bb1;
    }

    bb1: {
        _5 = &_6;
        _8 = (const 1_i32, const 2_i32);
        _4 = <[closure@ui/functions-closures/closure-returning-closure.rs:3:16: 3:22] as Fn<(i32, i32)>>::call(move _5, move _8) -> bb2;
    }

    bb2: {
        _3 = &_4;
        _10 = const 3_i32;
        _9 = &_10;
        _2 = (move _3, move _9);
        _11 = (_2.0: &i32);
        _12 = (_2.1: &i32);
        _15 = (*_11);
        _16 = (*_12);
        _14 = Eq(move _15, move _16);
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<i32, i32>(move _17, _11, _12, move _19);
    }

    bb4: {
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/functions-closures/closure-returning-closure.rs:3:13: 3:16], _2: ()) -> [closure@ui/functions-closures/closure-returning-closure.rs:3:16: 3:22] {
    let mut _0: [closure@ui/functions-closures/closure-returning-closure.rs:3:16: 3:22];

    bb0: {
        return;
    }
}

fn main::{closure#0}::{closure#0}(_1: &[closure@ui/functions-closures/closure-returning-closure.rs:3:16: 3:22], _2: i32, _3: i32) -> i32 {
    debug x => _2;
    debug y => _3;
    let mut _0: i32;

    bb0: {
        _0 = Add(_2, _3);
        return;
    }
}
