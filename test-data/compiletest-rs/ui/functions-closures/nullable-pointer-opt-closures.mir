// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _3: [closure@ui/functions-closures/nullable-pointer-opt-closures.rs:8:18: 8:20];
    let mut _4: &i32;
    let mut _5: (&usize, &usize);
    let mut _6: &usize;
    let _7: usize;
    let _8: &std::option::Option<[closure@ui/functions-closures/nullable-pointer-opt-closures.rs:8:18: 8:20]>;
    let mut _9: &usize;
    let _10: usize;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: usize;
    let mut _16: usize;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _22: [closure@ui/functions-closures/nullable-pointer-opt-closures.rs:16:18: 16:25];
    let mut _23: (&usize, &usize);
    let mut _24: &usize;
    let _25: usize;
    let _26: &std::option::Option<[closure@ui/functions-closures/nullable-pointer-opt-closures.rs:16:18: 16:25]>;
    let mut _27: &usize;
    let _28: usize;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: usize;
    let mut _34: usize;
    let _36: !;
    let mut _37: std::option::Option<std::fmt::Arguments<'_>>;
    let _39: &str;
    let mut _41: [closure@ui/functions-closures/nullable-pointer-opt-closures.rs:23:18: 23:25];
    let mut _42: (&usize, &usize);
    let mut _43: &usize;
    let _44: usize;
    let _45: &std::option::Option<[closure@ui/functions-closures/nullable-pointer-opt-closures.rs:23:18: 23:25]>;
    let mut _46: &usize;
    let _47: usize;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: usize;
    let mut _53: usize;
    let _55: !;
    let mut _56: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _59: [closure@ui/functions-closures/nullable-pointer-opt-closures.rs:30:18: 30:25];
    let mut _60: (&usize, &usize);
    let mut _61: &usize;
    let _62: usize;
    let _63: &std::option::Option<[closure@ui/functions-closures/nullable-pointer-opt-closures.rs:30:18: 30:25]>;
    let mut _64: &usize;
    let _65: usize;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: usize;
    let mut _71: usize;
    let _73: !;
    let mut _74: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug a => _1;
        let _2: std::option::Option<[closure@ui/functions-closures/nullable-pointer-opt-closures.rs:8:18: 8:20]>;
        scope 2 {
            debug b => _2;
            let _11: &usize;
            let _12: &usize;
            let _20: std::boxed::Box<i32>;
            scope 3 {
                debug left_val => _11;
                debug right_val => _12;
                let _17: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _17;
                }
            }
            scope 5 {
                debug a => _20;
                let _21: std::option::Option<[closure@ui/functions-closures/nullable-pointer-opt-closures.rs:16:18: 16:25]>;
                scope 6 {
                    debug b => _21;
                    let _29: &usize;
                    let _30: &usize;
                    let _38: std::string::String;
                    scope 7 {
                        debug left_val => _29;
                        debug right_val => _30;
                        let _35: core::panicking::AssertKind;
                        scope 8 {
                            debug kind => _35;
                        }
                    }
                    scope 9 {
                        debug a => _38;
                        let _40: std::option::Option<[closure@ui/functions-closures/nullable-pointer-opt-closures.rs:23:18: 23:25]>;
                        scope 10 {
                            debug b => _40;
                            let _48: &usize;
                            let _49: &usize;
                            let _57: i32;
                            scope 11 {
                                debug left_val => _48;
                                debug right_val => _49;
                                let _54: core::panicking::AssertKind;
                                scope 12 {
                                    debug kind => _54;
                                }
                            }
                            scope 13 {
                                debug a => _57;
                                let _58: std::option::Option<[closure@ui/functions-closures/nullable-pointer-opt-closures.rs:30:18: 30:25]>;
                                scope 14 {
                                    debug b => _58;
                                    let _66: &usize;
                                    let _67: &usize;
                                    scope 15 {
                                        debug left_val => _66;
                                        debug right_val => _67;
                                        let _72: core::panicking::AssertKind;
                                        scope 16 {
                                            debug kind => _72;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const 10_i32;
        _4 = &_1;
        _3 = [closure@ui/functions-closures/nullable-pointer-opt-closures.rs:8:18: 8:20] { a: move _4 };
        _2 = Option::<[closure@ui/functions-closures/nullable-pointer-opt-closures.rs:8:18: 8:20]>::Some(move _3);
        _8 = &_2;
        _7 = std::mem::size_of_val::<Option<[closure@ui/functions-closures/nullable-pointer-opt-closures.rs:8:18: 8:20]>>(_8) -> bb1;
    }

    bb1: {
        _6 = &_7;
        _10 = std::mem::size_of::<usize>() -> bb2;
    }

    bb2: {
        _9 = &_10;
        _5 = (move _6, move _9);
        _11 = (_5.0: &usize);
        _12 = (_5.1: &usize);
        _15 = (*_11);
        _16 = (*_12);
        _14 = Eq(move _15, move _16);
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<usize, usize>(move _17, _11, _12, move _19);
    }

    bb4: {
        _20 = Box::<i32>::new(const 12_i32) -> bb5;
    }

    bb5: {
        _22 = [closure@ui/functions-closures/nullable-pointer-opt-closures.rs:16:18: 16:25] { a: move _20 };
        _21 = Option::<[closure@ui/functions-closures/nullable-pointer-opt-closures.rs:16:18: 16:25]>::Some(move _22);
        _26 = &_21;
        _25 = std::mem::size_of_val::<Option<[closure@ui/functions-closures/nullable-pointer-opt-closures.rs:16:18: 16:25]>>(_26) -> [return: bb6, unwind: bb22];
    }

    bb6: {
        _24 = &_25;
        _28 = std::mem::size_of::<Box<i32>>() -> [return: bb7, unwind: bb22];
    }

    bb7: {
        _27 = &_28;
        _23 = (move _24, move _27);
        _29 = (_23.0: &usize);
        _30 = (_23.1: &usize);
        _33 = (*_29);
        _34 = (*_30);
        _32 = Eq(move _33, move _34);
        _31 = Not(move _32);
        switchInt(move _31) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _35 = core::panicking::AssertKind::Eq;
        _37 = Option::<Arguments<'_>>::None;
        _36 = core::panicking::assert_failed::<usize, usize>(move _35, _29, _30, move _37) -> bb22;
    }

    bb9: {
        _39 = const "Hello";
        _38 = <str as ToString>::to_string(_39) -> [return: bb10, unwind: bb22];
    }

    bb10: {
        _41 = [closure@ui/functions-closures/nullable-pointer-opt-closures.rs:23:18: 23:25] { a: move _38 };
        _40 = Option::<[closure@ui/functions-closures/nullable-pointer-opt-closures.rs:23:18: 23:25]>::Some(move _41);
        _45 = &_40;
        _44 = std::mem::size_of_val::<Option<[closure@ui/functions-closures/nullable-pointer-opt-closures.rs:23:18: 23:25]>>(_45) -> [return: bb11, unwind: bb21];
    }

    bb11: {
        _43 = &_44;
        _47 = std::mem::size_of::<String>() -> [return: bb12, unwind: bb21];
    }

    bb12: {
        _46 = &_47;
        _42 = (move _43, move _46);
        _48 = (_42.0: &usize);
        _49 = (_42.1: &usize);
        _52 = (*_48);
        _53 = (*_49);
        _51 = Eq(move _52, move _53);
        _50 = Not(move _51);
        switchInt(move _50) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _54 = core::panicking::AssertKind::Eq;
        _56 = Option::<Arguments<'_>>::None;
        _55 = core::panicking::assert_failed::<usize, usize>(move _54, _48, _49, move _56) -> bb21;
    }

    bb14: {
        _57 = const 14_i32;
        _59 = [closure@ui/functions-closures/nullable-pointer-opt-closures.rs:30:18: 30:25] { a: _57 };
        _58 = Option::<[closure@ui/functions-closures/nullable-pointer-opt-closures.rs:30:18: 30:25]>::Some(move _59);
        _63 = &_58;
        _62 = std::mem::size_of_val::<Option<[closure@ui/functions-closures/nullable-pointer-opt-closures.rs:30:18: 30:25]>>(_63) -> [return: bb15, unwind: bb21];
    }

    bb15: {
        _61 = &_62;
        _65 = std::mem::size_of::<(i32, i32)>() -> [return: bb16, unwind: bb21];
    }

    bb16: {
        _64 = &_65;
        _60 = (move _61, move _64);
        _66 = (_60.0: &usize);
        _67 = (_60.1: &usize);
        _70 = (*_66);
        _71 = (*_67);
        _69 = Eq(move _70, move _71);
        _68 = Not(move _69);
        switchInt(move _68) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _72 = core::panicking::AssertKind::Eq;
        _74 = Option::<Arguments<'_>>::None;
        _73 = core::panicking::assert_failed::<usize, usize>(move _72, _66, _67, move _74) -> bb21;
    }

    bb18: {
        drop(_40) -> [return: bb19, unwind: bb22];
    }

    bb19: {
        drop(_21) -> bb20;
    }

    bb20: {
        return;
    }

    bb21 (cleanup): {
        drop(_40) -> [return: bb22, unwind terminate];
    }

    bb22 (cleanup): {
        drop(_21) -> [return: bb23, unwind terminate];
    }

    bb23 (cleanup): {
        resume;
    }
}

fn main::{closure#0}(_1: &[closure@ui/functions-closures/nullable-pointer-opt-closures.rs:8:18: 8:20]) -> () {
    debug a => (*((*_1).0: &i32));
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 2];
    let _6: [&str; 2];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let mut _11: &i32;

    bb0: {
        _6 = [const "", const "\n"];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _11 = deref_copy ((*_1).0: &i32);
        _10 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_11) -> bb1;
    }

    bb1: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb2;
    }

    bb2: {
        _2 = _print(move _3) -> bb3;
    }

    bb3: {
        return;
    }
}

fn main::{closure#1}(_1: &[closure@ui/functions-closures/nullable-pointer-opt-closures.rs:16:18: 16:25]) -> () {
    debug a => ((*_1).0: std::boxed::Box<i32>);
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 2];
    let _6: [&str; 2];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &std::boxed::Box<i32>;

    bb0: {
        _6 = [const "", const "\n"];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _11 = &((*_1).0: std::boxed::Box<i32>);
        _10 = core::fmt::rt::Argument::<'_>::new_display::<Box<i32>>(_11) -> bb1;
    }

    bb1: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb2;
    }

    bb2: {
        _2 = _print(move _3) -> bb3;
    }

    bb3: {
        return;
    }
}

fn main::{closure#2}(_1: &[closure@ui/functions-closures/nullable-pointer-opt-closures.rs:23:18: 23:25]) -> () {
    debug a => ((*_1).0: std::string::String);
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 2];
    let _6: [&str; 2];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &std::string::String;

    bb0: {
        _6 = [const "", const "\n"];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _11 = &((*_1).0: std::string::String);
        _10 = core::fmt::rt::Argument::<'_>::new_display::<String>(_11) -> bb1;
    }

    bb1: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb2;
    }

    bb2: {
        _2 = _print(move _3) -> bb3;
    }

    bb3: {
        return;
    }
}

fn main::{closure#3}(_1: &[closure@ui/functions-closures/nullable-pointer-opt-closures.rs:30:18: 30:25]) -> () {
    debug a => ((*_1).0: i32);
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 2];
    let _6: [&str; 2];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &i32;

    bb0: {
        _6 = [const "", const "\n"];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _11 = &((*_1).0: i32);
        _10 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_11) -> bb1;
    }

    bb1: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb2;
    }

    bb2: {
        _2 = _print(move _3) -> bb3;
    }

    bb3: {
        return;
    }
}
