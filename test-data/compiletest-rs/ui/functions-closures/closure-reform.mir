// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn call_it(_1: F) -> () {
    debug f => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 2];
    let _6: [&str; 2];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &std::string::String;
    let _12: std::string::String;
    let mut _13: F;
    let mut _14: (std::string::String,);
    let mut _15: std::string::String;
    let _16: &str;
    let mut _17: bool;

    bb0: {
        _17 = const false;
        _6 = [const "", const "\n"];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _17 = const true;
        _13 = move _1;
        _16 = const "Fred";
        _15 = <str as ToString>::to_string(_16) -> [return: bb1, unwind: bb10];
    }

    bb1: {
        _14 = (move _15,);
        _17 = const false;
        _12 = <F as FnOnce<(String,)>>::call_once(move _13, move _14) -> [return: bb2, unwind: bb10];
    }

    bb2: {
        _17 = const false;
        _11 = &_12;
        _10 = core::fmt::rt::Argument::<'_>::new_display::<String>(_11) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        _2 = _print(move _3) -> [return: bb5, unwind: bb7];
    }

    bb5: {
        drop(_12) -> bb6;
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_12) -> [return: bb8, unwind terminate];
    }

    bb8 (cleanup): {
        resume;
    }

    bb9 (cleanup): {
        drop(_13) -> [return: bb8, unwind terminate];
    }

    bb10 (cleanup): {
        switchInt(_17) -> [0: bb8, otherwise: bb9];
    }
}

fn call_a_thunk(_1: F) -> () {
    debug f => _1;
    let mut _0: ();
    let _2: ();

    bb0: {
        _2 = <F as FnOnce<()>>::call_once(move _1, const ()) -> bb1;
    }

    bb1: {
        return;
    }
}

fn call_this(_1: F) -> () {
    debug f => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: (&str,);
    let _4: &str;

    bb0: {
        _4 = const "Hello!";
        _3 = (_4,);
        _2 = <F as FnOnce<(&str,)>>::call_once(move _1, move _3) -> bb1;
    }

    bb1: {
        return;
    }
}

fn call_bare(_1: for<'a> fn(&'a str)) -> () {
    debug f => _1;
    let mut _0: ();
    let _2: &str;

    bb0: {
        _2 = const "Hello world!";
        _0 = _1(_2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn call_bare_again(_1: for<'a> fn(&'a str)) -> () {
    debug f => _1;
    let mut _0: ();
    let _2: &str;

    bb0: {
        _2 = const "Goodbye world!";
        _0 = _1(_2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::string::String;
    let _2: &str;
    let _3: ();
    let mut _4: [closure@ui/functions-closures/closure-reform.rs:32:13: 32:16];
    let mut _5: &std::string::String;
    let _7: &str;
    let _8: ();
    let mut _9: [closure@ui/functions-closures/closure-reform.rs:37:13: 37:16];
    let mut _10: &std::string::String;
    let _12: &str;
    let _13: ();
    let mut _14: [closure@ui/functions-closures/closure-reform.rs:40:13: 40:34];
    let mut _15: &std::string::String;
    let _16: ();
    let _17: ();
    let _18: ();
    let mut _19: for<'a> fn(&'a str);
    let _20: ();
    let mut _21: for<'a> fn(&'a str);
    scope 1 {
        debug greeting => _1;
        let _6: std::string::String;
        scope 2 {
            debug greeting => _6;
            let _11: std::string::String;
            scope 3 {
                debug greeting => _11;
            }
        }
    }

    bb0: {
        _2 = const "Hello ";
        _1 = <str as ToString>::to_string(_2) -> bb1;
    }

    bb1: {
        _5 = &_1;
        _4 = [closure@ui/functions-closures/closure-reform.rs:32:13: 32:16] { greeting: move _5 };
        _3 = call_it::<[closure@ui/functions-closures/closure-reform.rs:32:13: 32:16]>(move _4) -> [return: bb2, unwind: bb16];
    }

    bb2: {
        _7 = const "Goodbye ";
        _6 = <str as ToString>::to_string(_7) -> [return: bb3, unwind: bb16];
    }

    bb3: {
        _10 = &_6;
        _9 = [closure@ui/functions-closures/closure-reform.rs:37:13: 37:16] { greeting: move _10 };
        _8 = call_it::<[closure@ui/functions-closures/closure-reform.rs:37:13: 37:16]>(move _9) -> [return: bb4, unwind: bb15];
    }

    bb4: {
        _12 = const "How's life, ";
        _11 = <str as ToString>::to_string(_12) -> [return: bb5, unwind: bb15];
    }

    bb5: {
        _15 = &_11;
        _14 = [closure@ui/functions-closures/closure-reform.rs:40:13: 40:34] { greeting: move _15 };
        _13 = call_it::<[closure@ui/functions-closures/closure-reform.rs:40:13: 40:34]>(move _14) -> [return: bb6, unwind: bb14];
    }

    bb6: {
        _16 = call_a_thunk::<[closure@ui/functions-closures/closure-reform.rs:46:18: 46:20]>(const ZeroSized: [closure@ui/functions-closures/closure-reform.rs:46:18: 46:20]) -> [return: bb7, unwind: bb14];
    }

    bb7: {
        _17 = call_this::<[closure@ui/functions-closures/closure-reform.rs:48:15: 48:18]>(const ZeroSized: [closure@ui/functions-closures/closure-reform.rs:48:15: 48:18]) -> [return: bb8, unwind: bb14];
    }

    bb8: {
        _19 = foo as for<'a> fn(&'a str) (Pointer(ReifyFnPointer));
        _18 = call_bare(move _19) -> [return: bb9, unwind: bb14];
    }

    bb9: {
        _21 = foo as for<'a> fn(&'a str) (Pointer(ReifyFnPointer));
        _20 = call_bare_again(move _21) -> [return: bb10, unwind: bb14];
    }

    bb10: {
        drop(_11) -> [return: bb11, unwind: bb15];
    }

    bb11: {
        drop(_6) -> [return: bb12, unwind: bb16];
    }

    bb12: {
        drop(_1) -> bb13;
    }

    bb13: {
        return;
    }

    bb14 (cleanup): {
        drop(_11) -> [return: bb15, unwind terminate];
    }

    bb15 (cleanup): {
        drop(_6) -> [return: bb16, unwind terminate];
    }

    bb16 (cleanup): {
        drop(_1) -> [return: bb17, unwind terminate];
    }

    bb17 (cleanup): {
        resume;
    }
}

fn main::{closure#0}(_1: [closure@ui/functions-closures/closure-reform.rs:32:13: 32:16], _2: String) -> String {
    debug s => _2;
    debug greeting => (*(_1.0: &std::string::String));
    let mut _0: std::string::String;
    let _3: std::string::String;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let _6: &[&str; 2];
    let _7: [&str; 2];
    let mut _8: &[core::fmt::rt::Argument<'_>];
    let _9: &[core::fmt::rt::Argument<'_>; 2];
    let _10: [core::fmt::rt::Argument<'_>; 2];
    let mut _11: core::fmt::rt::Argument<'_>;
    let mut _12: core::fmt::rt::Argument<'_>;
    let _13: &std::string::String;
    let mut _14: &std::string::String;
    scope 1 {
        debug res => _3;
    }

    bb0: {
        _7 = [const "", const ""];
        _6 = &_7;
        _5 = _6 as &[&str] (Pointer(Unsize));
        _14 = deref_copy (_1.0: &std::string::String);
        _11 = core::fmt::rt::Argument::<'_>::new_display::<String>(_14) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _13 = &_2;
        _12 = core::fmt::rt::Argument::<'_>::new_display::<String>(_13) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _10 = [move _11, move _12];
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _3 = format(move _4) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        _0 = move _3;
        drop(_2) -> bb5;
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }
}

fn main::{closure#1}(_1: [closure@ui/functions-closures/closure-reform.rs:37:13: 37:16], _2: String) -> String {
    debug s => _2;
    debug greeting => (*(_1.0: &std::string::String));
    let mut _0: std::string::String;
    let _3: std::string::String;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let _6: &[&str; 2];
    let _7: [&str; 2];
    let mut _8: &[core::fmt::rt::Argument<'_>];
    let _9: &[core::fmt::rt::Argument<'_>; 2];
    let _10: [core::fmt::rt::Argument<'_>; 2];
    let mut _11: core::fmt::rt::Argument<'_>;
    let mut _12: core::fmt::rt::Argument<'_>;
    let _13: &std::string::String;
    let mut _14: &std::string::String;
    scope 1 {
        debug res => _3;
    }

    bb0: {
        _7 = [const "", const ""];
        _6 = &_7;
        _5 = _6 as &[&str] (Pointer(Unsize));
        _14 = deref_copy (_1.0: &std::string::String);
        _11 = core::fmt::rt::Argument::<'_>::new_display::<String>(_14) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _13 = &_2;
        _12 = core::fmt::rt::Argument::<'_>::new_display::<String>(_13) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _10 = [move _11, move _12];
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _3 = format(move _4) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        _0 = move _3;
        drop(_2) -> bb5;
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }
}

fn main::{closure#2}(_1: [closure@ui/functions-closures/closure-reform.rs:40:13: 40:34], _2: String) -> String {
    debug s => _2;
    debug greeting => (*(_1.0: &std::string::String));
    let mut _0: std::string::String;
    let _3: std::string::String;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let _6: &[&str; 2];
    let _7: [&str; 2];
    let mut _8: &[core::fmt::rt::Argument<'_>];
    let _9: &[core::fmt::rt::Argument<'_>; 2];
    let _10: [core::fmt::rt::Argument<'_>; 2];
    let mut _11: core::fmt::rt::Argument<'_>;
    let mut _12: core::fmt::rt::Argument<'_>;
    let _13: &std::string::String;
    let mut _14: &std::string::String;
    scope 1 {
        debug res => _3;
    }

    bb0: {
        _7 = [const "", const ""];
        _6 = &_7;
        _5 = _6 as &[&str] (Pointer(Unsize));
        _14 = deref_copy (_1.0: &std::string::String);
        _11 = core::fmt::rt::Argument::<'_>::new_display::<String>(_14) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _13 = &_2;
        _12 = core::fmt::rt::Argument::<'_>::new_display::<String>(_13) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _10 = [move _11, move _12];
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _3 = format(move _4) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        _0 = move _3;
        drop(_2) -> bb5;
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }
}

fn main::{closure#3}(_1: [closure@ui/functions-closures/closure-reform.rs:46:18: 46:20]) -> () {
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 1];
    let _6: [&str; 1];

    bb0: {
        _6 = [const "Hello world!\n"];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_const(move _4) -> bb1;
    }

    bb1: {
        _2 = _print(move _3) -> bb2;
    }

    bb2: {
        return;
    }
}

fn main::{closure#4}(_1: [closure@ui/functions-closures/closure-reform.rs:48:15: 48:18], _2: &str) -> () {
    debug s => _2;
    let mut _0: ();
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let _6: &[&str; 2];
    let _7: [&str; 2];
    let mut _8: &[core::fmt::rt::Argument<'_>];
    let _9: &[core::fmt::rt::Argument<'_>; 1];
    let _10: [core::fmt::rt::Argument<'_>; 1];
    let mut _11: core::fmt::rt::Argument<'_>;
    let _12: &&str;

    bb0: {
        _7 = [const "", const "\n"];
        _6 = &_7;
        _5 = _6 as &[&str] (Pointer(Unsize));
        _12 = &_2;
        _11 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_12) -> bb1;
    }

    bb1: {
        _10 = [move _11];
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> bb2;
    }

    bb2: {
        _3 = _print(move _4) -> bb3;
    }

    bb3: {
        return;
    }
}

fn foo(_1: &str) -> () {
    debug s => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}
