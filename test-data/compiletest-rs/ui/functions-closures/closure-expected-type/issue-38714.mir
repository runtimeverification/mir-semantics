// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn ref_to(_1: &Vec<usize>) -> UsizeRef<'_> {
    debug vec => _1;
    let mut _0: UsizeRef<'_>;
    let _2: &usize;
    let _3: &usize;

    bb0: {
        _3 = <Vec<usize> as Index<usize>>::index(_1, const 0_usize) -> bb1;
    }

    bb1: {
        _2 = _3;
        _0 = UsizeRef::<'_> { a: _2 };
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::boxed::Box<dyn for<'r> std::ops::Fn(&'r std::vec::Vec<usize>) -> UsizeRef<'r>>;
    let mut _2: std::boxed::Box<[closure@ui/functions-closures/closure-expected-type/issue-38714.rs:16:29: 16:47]>;
    scope 1 {
        debug a => _1;
    }

    bb0: {
        _2 = Box::<[closure@ui/functions-closures/closure-expected-type/issue-38714.rs:16:29: 16:47]>::new(const ZeroSized: [closure@ui/functions-closures/closure-expected-type/issue-38714.rs:16:29: 16:47]) -> bb1;
    }

    bb1: {
        _1 = move _2 as std::boxed::Box<dyn for<'r> std::ops::Fn(&'r std::vec::Vec<usize>) -> UsizeRef<'r>> (Pointer(Unsize));
        drop(_1) -> bb2;
    }

    bb2: {
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/functions-closures/closure-expected-type/issue-38714.rs:16:29: 16:47], _2: &Vec<usize>) -> UsizeRef<'_> {
    debug vec => _2;
    let mut _0: UsizeRef<'_>;
    let _3: &usize;
    let _4: &usize;

    bb0: {
        _4 = <Vec<usize> as Index<usize>>::index(_2, const 0_usize) -> bb1;
    }

    bb1: {
        _3 = _4;
        _0 = UsizeRef::<'_> { a: _3 };
        return;
    }
}
