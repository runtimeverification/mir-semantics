// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn with_closure(_1: F) -> u32 {
    debug f => _1;
    let mut _0: u32;
    let mut _2: (&u32, &u32);
    let _3: &u32;
    let _4: u32;
    let _5: &u32;
    let _6: u32;

    bb0: {
        _4 = const 22_u32;
        _3 = &_4;
        _6 = const 44_u32;
        _5 = &_6;
        _2 = (_3, _5);
        _0 = <F as FnOnce<(&u32, &u32)>>::call_once(move _1, move _2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: u32;
    let mut _2: u32;
    let mut _3: (&u32, &u32);
    let mut _4: &u32;
    let mut _5: &u32;
    let _6: u32;
    let mut _7: u32;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: u32;
    let mut _13: u32;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug z => _1;
        let _8: &u32;
        let _9: &u32;
        scope 2 {
            debug left_val => _8;
            debug right_val => _9;
            let _14: core::panicking::AssertKind;
            scope 3 {
                debug kind => _14;
            }
        }
    }

    bb0: {
        _2 = with_closure::<[closure@ui/functions-closures/closure-expected-type/supply-nothing.rs:9:26: 9:32]>(const ZeroSized: [closure@ui/functions-closures/closure-expected-type/supply-nothing.rs:9:26: 9:32]) -> bb1;
    }

    bb1: {
        _1 = core::num::<impl u32>::wrapping_add(move _2, const 1_u32) -> bb2;
    }

    bb2: {
        _4 = &_1;
        _7 = Add(const 22_u32, const 44_u32);
        _6 = Add(move _7, const 1_u32);
        _5 = &_6;
        _3 = (move _4, move _5);
        _8 = (_3.0: &u32);
        _9 = (_3.1: &u32);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<u32, u32>(move _14, _8, _9, move _16);
    }

    bb4: {
        return;
    }
}

fn main::{closure#0}(_1: [closure@ui/functions-closures/closure-expected-type/supply-nothing.rs:9:26: 9:32], _2: &u32, _3: &u32) -> u32 {
    debug x => _2;
    debug y => _3;
    let mut _0: u32;

    bb0: {
        _0 = <&u32 as Add>::add(_2, _3) -> bb1;
    }

    bb1: {
        return;
    }
}
