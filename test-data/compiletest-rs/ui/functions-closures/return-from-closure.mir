// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static mut calls: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

fn surrounding() -> () {
    let mut _0: ();
    let _1: [closure@ui/functions-closures/return-from-closure.rs:9:24: 9:34];
    let _2: ();
    let mut _3: &[closure@ui/functions-closures/return-from-closure.rs:9:24: 9:34];
    let mut _4: (isize,);
    let _5: ();
    let mut _6: &[closure@ui/functions-closures/return-from-closure.rs:9:24: 9:34];
    let mut _7: (isize,);
    let _9: ();
    let mut _10: &[closure@ui/functions-closures/return-from-closure.rs:19:29: 19:39];
    let mut _11: (isize,);
    scope 1 {
        debug return_works => const ZeroSized: [closure@ui/functions-closures/return-from-closure.rs:9:24: 9:34];
        let _8: [closure@ui/functions-closures/return-from-closure.rs:19:29: 19:39];
        scope 2 {
            debug return_works_proc => const ZeroSized: [closure@ui/functions-closures/return-from-closure.rs:19:29: 19:39];
        }
    }

    bb0: {
        _3 = &_1;
        _4 = (const 10_isize,);
        _2 = <[closure@ui/functions-closures/return-from-closure.rs:9:24: 9:34] as Fn<(isize,)>>::call(move _3, move _4) -> bb1;
    }

    bb1: {
        _6 = &_1;
        _7 = (const 20_isize,);
        _5 = <[closure@ui/functions-closures/return-from-closure.rs:9:24: 9:34] as Fn<(isize,)>>::call(move _6, move _7) -> bb2;
    }

    bb2: {
        _10 = &_8;
        _11 = (const 10_isize,);
        _9 = <[closure@ui/functions-closures/return-from-closure.rs:19:29: 19:39] as Fn<(isize,)>>::call(move _10, move _11) -> bb3;
    }

    bb3: {
        return;
    }
}

fn surrounding::{closure#0}(_1: &[closure@ui/functions-closures/return-from-closure.rs:9:24: 9:34], _2: isize) -> () {
    debug n => _2;
    let mut _0: ();
    let mut _3: *mut usize;
    let mut _4: bool;
    let mut _5: !;
    scope 1 {
        let mut _6: *const ();
        let mut _7: usize;
        let mut _8: usize;
        let mut _9: usize;
        let mut _10: usize;
        let mut _11: bool;
        let mut _12: *const ();
        let mut _13: usize;
        let mut _14: usize;
        let mut _15: usize;
        let mut _16: usize;
        let mut _17: bool;
    }

    bb0: {
        _3 = const {alloc1: *mut usize};
        _12 = _3 as *const () (PtrToPtr);
        _13 = _12 as usize (Transmute);
        _14 = AlignOf(usize);
        _15 = Sub(_14, const 1_usize);
        _16 = BitAnd(_13, _15);
        _17 = Eq(_16, const 0_usize);
        assert(_17, "misaligned pointer dereference: address must be a multiple of {} but is {}", _14, _13) -> [success: bb4, unwind unreachable];
    }

    bb1: {
        return;
    }

    bb2: {
        _5 = begin_panic::<&str>(const "explicit panic");
    }

    bb3: {
        (*_3) = Add((*_3), const 1_usize);
        _4 = Ge(_2, const 0_isize);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb4: {
        _6 = _3 as *const () (PtrToPtr);
        _7 = _6 as usize (Transmute);
        _8 = AlignOf(usize);
        _9 = Sub(_8, const 1_usize);
        _10 = BitAnd(_7, _9);
        _11 = Eq(_10, const 0_usize);
        assert(_11, "misaligned pointer dereference: address must be a multiple of {} but is {}", _8, _7) -> [success: bb3, unwind unreachable];
    }
}

alloc1 (static: calls, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn surrounding::{closure#1}(_1: &[closure@ui/functions-closures/return-from-closure.rs:19:29: 19:39], _2: isize) -> () {
    debug n => _2;
    let mut _0: ();
    let mut _3: *mut usize;
    let mut _4: bool;
    let mut _5: !;
    scope 1 {
        let mut _6: *const ();
        let mut _7: usize;
        let mut _8: usize;
        let mut _9: usize;
        let mut _10: usize;
        let mut _11: bool;
        let mut _12: *const ();
        let mut _13: usize;
        let mut _14: usize;
        let mut _15: usize;
        let mut _16: usize;
        let mut _17: bool;
    }

    bb0: {
        _3 = const {alloc1: *mut usize};
        _12 = _3 as *const () (PtrToPtr);
        _13 = _12 as usize (Transmute);
        _14 = AlignOf(usize);
        _15 = Sub(_14, const 1_usize);
        _16 = BitAnd(_13, _15);
        _17 = Eq(_16, const 0_usize);
        assert(_17, "misaligned pointer dereference: address must be a multiple of {} but is {}", _14, _13) -> [success: bb4, unwind unreachable];
    }

    bb1: {
        return;
    }

    bb2: {
        _5 = begin_panic::<&str>(const "explicit panic");
    }

    bb3: {
        (*_3) = Add((*_3), const 1_usize);
        _4 = Ge(_2, const 0_isize);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb4: {
        _6 = _3 as *const () (PtrToPtr);
        _7 = _6 as usize (Transmute);
        _8 = AlignOf(usize);
        _9 = Sub(_8, const 1_usize);
        _10 = BitAnd(_7, _9);
        _11 = Eq(_10, const 0_usize);
        assert(_11, "misaligned pointer dereference: address must be a multiple of {} but is {}", _8, _7) -> [success: bb3, unwind unreachable];
    }
}

alloc1 (static: calls, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: (&usize, &usize);
    let mut _3: &usize;
    let _4: usize;
    let mut _5: *mut usize;
    let mut _6: &usize;
    let _7: usize;
    let _8: &usize;
    let _9: &usize;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        let mut _17: *const ();
        let mut _18: usize;
        let mut _19: usize;
        let mut _20: usize;
        let mut _21: usize;
        let mut _22: bool;
    }
    scope 2 {
        debug left_val => _8;
        debug right_val => _9;
        let _14: core::panicking::AssertKind;
        scope 3 {
            debug kind => _14;
        }
    }

    bb0: {
        _1 = surrounding() -> bb1;
    }

    bb1: {
        _5 = const {alloc1: *mut usize};
        _17 = _5 as *const () (PtrToPtr);
        _18 = _17 as usize (Transmute);
        _19 = AlignOf(usize);
        _20 = Sub(_19, const 1_usize);
        _21 = BitAnd(_18, _20);
        _22 = Eq(_21, const 0_usize);
        assert(_22, "misaligned pointer dereference: address must be a multiple of {} but is {}", _19, _18) -> [success: bb4, unwind unreachable];
    }

    bb2: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<usize, usize>(move _14, _8, _9, move _16);
    }

    bb3: {
        return;
    }

    bb4: {
        _4 = (*_5);
        _3 = &_4;
        _7 = const 3_usize;
        _6 = &_7;
        _2 = (move _3, move _6);
        _8 = (_2.0: &usize);
        _9 = (_2.1: &usize);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb3, otherwise: bb2];
    }
}

alloc1 (static: calls, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}
