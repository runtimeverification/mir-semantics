// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> () {
    let mut _0: ();
    let _1: [&str; 3];
    let _2: &str;
    let _3: &str;
    let mut _5: std::iter::Map<std::slice::Iter<'_, &str>, [closure@ui/functions-closures/parallel-codegen-closures.rs:16:39: 16:42]>;
    let mut _6: std::slice::Iter<'_, &str>;
    let mut _7: &[&str];
    let mut _8: &[&str; 3];
    scope 1 {
        debug x => _1;
        let _4: usize;
        scope 2 {
            debug len => _4;
        }
    }

    bb0: {
        _2 = const "bob";
        _3 = const "c";
        _1 = [const "a", _2, _3];
        _8 = &_1;
        _7 = move _8 as &[&str] (Pointer(Unsize));
        _6 = core::slice::<impl [&str]>::iter(move _7) -> bb1;
    }

    bb1: {
        _5 = <std::slice::Iter<'_, &str> as Iterator>::map::<usize, [closure@ui/functions-closures/parallel-codegen-closures.rs:16:39: 16:42]>(move _6, const ZeroSized: [closure@ui/functions-closures/parallel-codegen-closures.rs:16:39: 16:42]) -> bb2;
    }

    bb2: {
        _4 = <Map<std::slice::Iter<'_, &str>, [closure@ui/functions-closures/parallel-codegen-closures.rs:16:39: 16:42]> as Iterator>::sum::<usize>(move _5) -> bb3;
    }

    bb3: {
        return;
    }
}

fn foo::{closure#0}(_1: &mut [closure@ui/functions-closures/parallel-codegen-closures.rs:16:39: 16:42], _2: &&str) -> usize {
    debug s => _2;
    let mut _0: usize;
    let mut _3: &str;

    bb0: {
        _3 = deref_copy (*_2);
        _0 = core::str::<impl str>::len(_3) -> bb1;
    }

    bb1: {
        return;
    }
}

fn bar() -> () {
    let mut _0: ();
    let _1: [&str; 3];
    let _2: &str;
    let _3: &str;
    let mut _5: std::iter::Map<std::slice::Iter<'_, &str>, [closure@ui/functions-closures/parallel-codegen-closures.rs:23:39: 23:42]>;
    let mut _6: std::slice::Iter<'_, &str>;
    let mut _7: &[&str];
    let mut _8: &[&str; 3];
    scope 1 {
        debug x => _1;
        let _4: usize;
        scope 2 {
            debug len => _4;
        }
    }

    bb0: {
        _2 = const "bob";
        _3 = const "c";
        _1 = [const "a", _2, _3];
        _8 = &_1;
        _7 = move _8 as &[&str] (Pointer(Unsize));
        _6 = core::slice::<impl [&str]>::iter(move _7) -> bb1;
    }

    bb1: {
        _5 = <std::slice::Iter<'_, &str> as Iterator>::map::<usize, [closure@ui/functions-closures/parallel-codegen-closures.rs:23:39: 23:42]>(move _6, const ZeroSized: [closure@ui/functions-closures/parallel-codegen-closures.rs:23:39: 23:42]) -> bb2;
    }

    bb2: {
        _4 = <Map<std::slice::Iter<'_, &str>, [closure@ui/functions-closures/parallel-codegen-closures.rs:23:39: 23:42]> as Iterator>::sum::<usize>(move _5) -> bb3;
    }

    bb3: {
        return;
    }
}

fn bar::{closure#0}(_1: &mut [closure@ui/functions-closures/parallel-codegen-closures.rs:23:39: 23:42], _2: &&str) -> usize {
    debug s => _2;
    let mut _0: usize;
    let mut _3: &str;

    bb0: {
        _3 = deref_copy (*_2);
        _0 = core::str::<impl str>::len(_3) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
