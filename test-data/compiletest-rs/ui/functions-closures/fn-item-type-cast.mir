// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: isize) -> isize {
    debug x => _1;
    let mut _0: isize;

    bb0: {
        _0 = Mul(_1, const 2_isize);
        return;
    }
}

fn bar(_1: isize) -> isize {
    debug x => _1;
    let mut _0: isize;

    bb0: {
        _0 = Mul(_1, const 4_isize);
        return;
    }
}

fn eq(_1: T, _2: T) -> () {
    debug x => _1;
    debug y => _2;
    let mut _0: ();

    bb0: {
        drop(_2) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_1) -> bb2;
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

static TEST: Option<fn(isize) -> isize> = {
    let mut _0: std::option::Option<fn(isize) -> isize>;
    let mut _1: fn(isize) -> isize;

    bb0: {
        StorageLive(_1);
        _1 = foo as fn(isize) -> isize (Pointer(ReifyFnPointer));
        _0 = Option::<fn(isize) -> isize>::Some(move _1);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: fn(isize) -> isize;
    let mut _3: bool;
    let mut _4: (&isize, &isize);
    let mut _5: &isize;
    let _6: isize;
    let mut _7: fn(isize) -> isize;
    let mut _8: &isize;
    let _9: isize;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: isize;
    let mut _15: isize;
    let _17: !;
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>;
    let _19: ();
    let mut _20: fn(isize) -> isize;
    let mut _21: fn(isize) -> isize;
    scope 1 {
        debug f => _1;
        let _2: fn(isize) -> isize;
        scope 2 {
            debug f => _2;
            let _10: &isize;
            let _11: &isize;
            scope 3 {
                debug left_val => _10;
                debug right_val => _11;
                let _16: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _16;
                }
            }
        }
    }

    bb0: {
        _1 = foo as fn(isize) -> isize (Pointer(ReifyFnPointer));
        _3 = const true;
        switchInt(move _3) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _2 = foo as fn(isize) -> isize (Pointer(ReifyFnPointer));
        goto -> bb3;
    }

    bb2: {
        _2 = bar as fn(isize) -> isize (Pointer(ReifyFnPointer));
        goto -> bb3;
    }

    bb3: {
        _7 = _2;
        _6 = move _7(const 4_isize) -> bb4;
    }

    bb4: {
        _5 = &_6;
        _9 = const 8_isize;
        _8 = &_9;
        _4 = (move _5, move _8);
        _10 = (_4.0: &isize);
        _11 = (_4.1: &isize);
        _14 = (*_10);
        _15 = (*_11);
        _13 = Eq(move _14, move _15);
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _16 = core::panicking::AssertKind::Eq;
        _18 = Option::<Arguments<'_>>::None;
        _17 = core::panicking::assert_failed::<isize, isize>(move _16, _10, _11, move _18);
    }

    bb6: {
        _20 = foo as fn(isize) -> isize (Pointer(ReifyFnPointer));
        _21 = bar as fn(isize) -> isize (Pointer(ReifyFnPointer));
        _19 = eq::<fn(isize) -> isize>(move _20, move _21) -> bb7;
    }

    bb7: {
        return;
    }
}
