// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/functions-closures/clone-closure.rs:4:10: 4:15>::clone(_1: &S) -> S {
    debug self => _1;
    let mut _0: S;
    let mut _2: i32;
    let _3: &i32;

    bb0: {
        _3 = &((*_1).0: i32);
        _2 = (*_3);
        _0 = S(move _2);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: S;
    let mut _4: &[closure@ui/functions-closures/clone-closure.rs:9:21: 9:28];
    let mut _5: (&i32, &i32);
    let mut _6: &i32;
    let _7: i32;
    let mut _8: &i32;
    let _9: i32;
    let mut _10: &mut [closure@ui/functions-closures/clone-closure.rs:9:21: 9:28];
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: i32;
    let mut _16: i32;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _20: (&i32, &i32);
    let mut _21: &i32;
    let _22: i32;
    let mut _23: &i32;
    let _24: i32;
    let mut _25: &mut [closure@ui/functions-closures/clone-closure.rs:9:21: 9:28];
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: i32;
    let mut _31: i32;
    let _33: !;
    let mut _34: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug a => _1;
        let mut _2: [closure@ui/functions-closures/clone-closure.rs:9:21: 9:28];
        scope 2 {
            debug hello => _2;
            let mut _3: [closure@ui/functions-closures/clone-closure.rs:9:21: 9:28];
            scope 3 {
                debug hello2 => _3;
                let _11: &i32;
                let _12: &i32;
                let _26: &i32;
                let _27: &i32;
                scope 4 {
                    debug left_val => _11;
                    debug right_val => _12;
                    let _17: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _17;
                    }
                }
                scope 6 {
                    debug left_val => _26;
                    debug right_val => _27;
                    let _32: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _32;
                    }
                }
            }
        }
    }

    bb0: {
        _1 = S(const 5_i32);
        _2 = [closure@ui/functions-closures/clone-closure.rs:9:21: 9:28] { a: move _1 };
        _4 = &_2;
        _3 = <[closure@ui/functions-closures/clone-closure.rs:9:21: 9:28] as Clone>::clone(move _4) -> bb1;
    }

    bb1: {
        _7 = const 6_i32;
        _6 = &_7;
        _10 = &mut _3;
        _9 = <[closure@ui/functions-closures/clone-closure.rs:9:21: 9:28] as FnMut<()>>::call_mut(move _10, const ()) -> bb2;
    }

    bb2: {
        _8 = &_9;
        _5 = (move _6, move _8);
        _11 = (_5.0: &i32);
        _12 = (_5.1: &i32);
        _15 = (*_11);
        _16 = (*_12);
        _14 = Eq(move _15, move _16);
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<i32, i32>(move _17, _11, _12, move _19);
    }

    bb4: {
        _22 = const 6_i32;
        _21 = &_22;
        _25 = &mut _2;
        _24 = <[closure@ui/functions-closures/clone-closure.rs:9:21: 9:28] as FnMut<()>>::call_mut(move _25, const ()) -> bb5;
    }

    bb5: {
        _23 = &_24;
        _20 = (move _21, move _23);
        _26 = (_20.0: &i32);
        _27 = (_20.1: &i32);
        _30 = (*_26);
        _31 = (*_27);
        _29 = Eq(move _30, move _31);
        _28 = Not(move _29);
        switchInt(move _28) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _32 = core::panicking::AssertKind::Eq;
        _34 = Option::<Arguments<'_>>::None;
        _33 = core::panicking::assert_failed::<i32, i32>(move _32, _26, _27, move _34);
    }

    bb7: {
        return;
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/functions-closures/clone-closure.rs:9:21: 9:28]) -> i32 {
    debug a => ((*_1).0: S);
    let mut _0: i32;
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 2];
    let _6: [&str; 2];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &i32;

    bb0: {
        (((*_1).0: S).0: i32) = Add((((*_1).0: S).0: i32), const 1_i32);
        _6 = [const "Hello ", const "\n"];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _11 = &(((*_1).0: S).0: i32);
        _10 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_11) -> bb1;
    }

    bb1: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb2;
    }

    bb2: {
        _2 = _print(move _3) -> bb3;
    }

    bb3: {
        _0 = (((*_1).0: S).0: i32);
        return;
    }
}

fn S(_1: i32) -> S {
    let mut _0: S;

    bb0: {
        _0 = S(move _1);
        return;
    }
}

// MIR FOR CTFE
fn S(_1: i32) -> S {
    let mut _0: S;

    bb0: {
        _0 = S(move _1);
        return;
    }
}
