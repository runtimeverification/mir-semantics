// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: [closure@ui/functions-closures/closure-inference2.rs:6:14: 6:17];
    let mut _2: (&i32, &i32);
    let mut _3: &i32;
    let _4: i32;
    let mut _5: &[closure@ui/functions-closures/closure-inference2.rs:6:14: 6:17];
    let mut _6: (i32,);
    let mut _7: &i32;
    let _8: i32;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: i32;
    let mut _14: i32;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: (&i32, &i32);
    let mut _19: &i32;
    let _20: i32;
    let mut _21: &[closure@ui/functions-closures/closure-inference2.rs:6:14: 6:17];
    let mut _22: (i32,);
    let mut _23: &i32;
    let _24: i32;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: i32;
    let mut _30: i32;
    let _32: !;
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug f => const ZeroSized: [closure@ui/functions-closures/closure-inference2.rs:6:14: 6:17];
        let _9: &i32;
        let _10: &i32;
        let _25: &i32;
        let _26: &i32;
        scope 2 {
            debug left_val => _9;
            debug right_val => _10;
            let _15: core::panicking::AssertKind;
            scope 3 {
                debug kind => _15;
            }
        }
        scope 4 {
            debug left_val => _25;
            debug right_val => _26;
            let _31: core::panicking::AssertKind;
            scope 5 {
                debug kind => _31;
            }
        }
    }

    bb0: {
        _5 = &_1;
        _6 = (const 2_i32,);
        _4 = <[closure@ui/functions-closures/closure-inference2.rs:6:14: 6:17] as Fn<(i32,)>>::call(move _5, move _6) -> bb1;
    }

    bb1: {
        _3 = &_4;
        _8 = const 2_i32;
        _7 = &_8;
        _2 = (move _3, move _7);
        _9 = (_2.0: &i32);
        _10 = (_2.1: &i32);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<i32, i32>(move _15, _9, _10, move _17);
    }

    bb3: {
        _21 = &_1;
        _22 = (const 5_i32,);
        _20 = <[closure@ui/functions-closures/closure-inference2.rs:6:14: 6:17] as Fn<(i32,)>>::call(move _21, move _22) -> bb4;
    }

    bb4: {
        _19 = &_20;
        _24 = const 5_i32;
        _23 = &_24;
        _18 = (move _19, move _23);
        _25 = (_18.0: &i32);
        _26 = (_18.1: &i32);
        _29 = (*_25);
        _30 = (*_26);
        _28 = Eq(move _29, move _30);
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _31 = core::panicking::AssertKind::Eq;
        _33 = Option::<Arguments<'_>>::None;
        _32 = core::panicking::assert_failed::<i32, i32>(move _31, _25, _26, move _33);
    }

    bb6: {
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/functions-closures/closure-inference2.rs:6:14: 6:17], _2: i32) -> i32 {
    debug i => _2;
    let mut _0: i32;

    bb0: {
        _0 = _2;
        return;
    }
}
