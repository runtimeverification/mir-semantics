// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: [closure@ui/functions-closures/closure-immediate.rs:7:13: 7:35];
    let _2: ();
    let mut _3: &[closure@ui/functions-closures/closure-immediate.rs:7:13: 7:35];
    let mut _4: (u8, u16, u8);
    scope 1 {
        debug c => const ZeroSized: [closure@ui/functions-closures/closure-immediate.rs:7:13: 7:35];
    }

    bb0: {
        _3 = &_1;
        _4 = (const 1_u8, const 2_u16, const 3_u8);
        _2 = <[closure@ui/functions-closures/closure-immediate.rs:7:13: 7:35] as Fn<(u8, u16, u8)>>::call(move _3, move _4) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/functions-closures/closure-immediate.rs:7:13: 7:35], _2: u8, _3: u16, _4: u8) -> () {
    debug a => _2;
    debug b => _3;
    debug c => _4;
    let mut _0: ();
    let mut _5: (&u8, &u8);
    let mut _6: &u8;
    let mut _7: &u8;
    let _8: u8;
    let _9: &u8;
    let _10: &u8;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: u8;
    let mut _14: u8;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: (&u16, &u16);
    let mut _19: &u16;
    let mut _20: &u16;
    let _21: u16;
    let _22: &u16;
    let _23: &u16;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: u16;
    let mut _27: u16;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&u8, &u8);
    let mut _32: &u8;
    let mut _33: &u8;
    let _34: u8;
    let _35: &u8;
    let _36: &u8;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: u8;
    let mut _40: u8;
    let _42: !;
    let mut _43: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _9;
        debug right_val => _10;
        let _15: core::panicking::AssertKind;
        scope 2 {
            debug kind => _15;
        }
    }
    scope 3 {
        debug left_val => _22;
        debug right_val => _23;
        let _28: core::panicking::AssertKind;
        scope 4 {
            debug kind => _28;
        }
    }
    scope 5 {
        debug left_val => _35;
        debug right_val => _36;
        let _41: core::panicking::AssertKind;
        scope 6 {
            debug kind => _41;
        }
    }

    bb0: {
        _6 = &_2;
        _8 = const 1_u8;
        _7 = &_8;
        _5 = (move _6, move _7);
        _9 = (_5.0: &u8);
        _10 = (_5.1: &u8);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<u8, u8>(move _15, _9, _10, move _17);
    }

    bb2: {
        _19 = &_3;
        _21 = const 2_u16;
        _20 = &_21;
        _18 = (move _19, move _20);
        _22 = (_18.0: &u16);
        _23 = (_18.1: &u16);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<u16, u16>(move _28, _22, _23, move _30);
    }

    bb4: {
        _32 = &_4;
        _34 = const 3_u8;
        _33 = &_34;
        _31 = (move _32, move _33);
        _35 = (_31.0: &u8);
        _36 = (_31.1: &u8);
        _39 = (*_35);
        _40 = (*_36);
        _38 = Eq(move _39, move _40);
        _37 = Not(move _38);
        switchInt(move _37) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _41 = core::panicking::AssertKind::Eq;
        _43 = Option::<Arguments<'_>>::None;
        _42 = core::panicking::assert_failed::<u8, u8>(move _41, _35, _36, move _43);
    }

    bb6: {
        return;
    }
}
