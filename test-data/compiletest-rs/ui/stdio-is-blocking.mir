// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const THREADS: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 20_usize;
        return;
    }
}

const WRITES: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 100_usize;
        return;
    }
}

const WRITE_SIZE: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedMul(const 1024_usize, const 32_usize);
        assert(!move (_1.1: bool), "attempt to compute `{} * {}`, which would overflow", const 1024_usize, const 32_usize) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<std::string::String>;
    let mut _2: std::env::Args;
    let mut _3: usize;
    let mut _4: &std::vec::Vec<std::string::String>;
    let _5: ();
    let _6: ();
    scope 1 {
        debug args => _1;
    }

    bb0: {
        _2 = args() -> bb1;
    }

    bb1: {
        _1 = <Args as Iterator>::collect::<Vec<String>>(move _2) -> bb2;
    }

    bb2: {
        _4 = &_1;
        _3 = Vec::<String>::len(move _4) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        switchInt(move _3) -> [1: bb4, otherwise: bb5];
    }

    bb4: {
        _5 = parent() -> [return: bb10, unwind: bb8];
    }

    bb5: {
        _6 = child() -> [return: bb11, unwind: bb8];
    }

    bb6: {
        drop(_1) -> bb7;
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_1) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        resume;
    }

    bb10: {
        goto -> bb6;
    }

    bb11: {
        goto -> bb6;
    }
}

fn parent() -> () {
    let mut _0: ();
    let _1: std::path::PathBuf;
    let mut _2: std::result::Result<std::path::PathBuf, std::io::Error>;
    let mut _4: std::path::PathBuf;
    let _5: &mut std::process::Command;
    let mut _6: &mut std::process::Command;
    let mut _8: std::result::Result<std::process::Output, std::io::Error>;
    let mut _9: &mut std::process::Command;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: &std::process::ExitStatus;
    let mut _13: !;
    let mut _14: (&usize, &usize);
    let mut _15: &usize;
    let _16: usize;
    let mut _17: &std::vec::Vec<u8>;
    let mut _18: &usize;
    let _19: usize;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: usize;
    let mut _25: usize;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: (&usize, &usize);
    let mut _30: &usize;
    let _31: usize;
    let mut _32: &std::vec::Vec<u8>;
    let mut _33: &usize;
    let _34: usize;
    let mut _35: usize;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: usize;
    let mut _41: usize;
    let _43: !;
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _45: std::slice::Iter<'_, u8>;
    let mut _46: std::slice::Iter<'_, u8>;
    let mut _47: &[u8];
    let _48: &[u8];
    let mut _49: &std::vec::Vec<u8>;
    let mut _51: std::option::Option<&u8>;
    let mut _52: &mut std::slice::Iter<'_, u8>;
    let mut _53: isize;
    let mut _55: (&u8, &u8);
    let mut _56: &u8;
    let _57: u8;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: u8;
    let mut _63: u8;
    let _65: !;
    let mut _66: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug me => _1;
        let mut _3: std::process::Command;
        scope 2 {
            debug cmd => _3;
            let _7: std::process::Output;
            scope 3 {
                debug output => _7;
                let _20: &usize;
                let _21: &usize;
                let _36: &usize;
                let _37: &usize;
                let mut _50: std::slice::Iter<'_, u8>;
                scope 4 {
                    debug left_val => _20;
                    debug right_val => _21;
                    let _26: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _26;
                    }
                }
                scope 6 {
                    debug left_val => _36;
                    debug right_val => _37;
                    let _42: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _42;
                    }
                }
                scope 8 {
                    debug iter => _50;
                    let _54: &u8;
                    scope 9 {
                        debug byte => _54;
                        let _58: &u8;
                        let _59: &u8;
                        scope 10 {
                            debug left_val => _58;
                            debug right_val => _59;
                            let _64: core::panicking::AssertKind;
                            scope 11 {
                                debug kind => _64;
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = current_exe() -> bb1;
    }

    bb1: {
        _1 = Result::<PathBuf, std::io::Error>::unwrap(move _2) -> bb2;
    }

    bb2: {
        _4 = move _1;
        _3 = Command::new::<PathBuf>(move _4) -> bb3;
    }

    bb3: {
        _6 = &mut _3;
        _5 = Command::arg::<&str>(move _6, const "run-the-test") -> [return: bb4, unwind: bb28];
    }

    bb4: {
        _9 = &mut _3;
        _8 = Command::output(move _9) -> [return: bb5, unwind: bb28];
    }

    bb5: {
        _7 = Result::<Output, std::io::Error>::unwrap(move _8) -> [return: bb6, unwind: bb28];
    }

    bb6: {
        _12 = &(_7.0: std::process::ExitStatus);
        _11 = ExitStatus::success(move _12) -> [return: bb7, unwind: bb27];
    }

    bb7: {
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _13 = core::panicking::panic(const "assertion failed: output.status.success()") -> bb27;
    }

    bb9: {
        _17 = &(_7.2: std::vec::Vec<u8>);
        _16 = Vec::<u8>::len(move _17) -> [return: bb10, unwind: bb27];
    }

    bb10: {
        _15 = &_16;
        _19 = const 0_usize;
        _18 = &_19;
        _14 = (move _15, move _18);
        _20 = (_14.0: &usize);
        _21 = (_14.1: &usize);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<usize, usize>(move _26, _20, _21, move _28) -> bb27;
    }

    bb12: {
        _32 = &(_7.1: std::vec::Vec<u8>);
        _31 = Vec::<u8>::len(move _32) -> [return: bb13, unwind: bb27];
    }

    bb13: {
        _30 = &_31;
        _35 = Mul(const _, const _);
        _34 = Mul(move _35, const _);
        _33 = &_34;
        _29 = (move _30, move _33);
        _36 = (_29.0: &usize);
        _37 = (_29.1: &usize);
        _40 = (*_36);
        _41 = (*_37);
        _39 = Eq(move _40, move _41);
        _38 = Not(move _39);
        switchInt(move _38) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _42 = core::panicking::AssertKind::Eq;
        _44 = Option::<Arguments<'_>>::None;
        _43 = core::panicking::assert_failed::<usize, usize>(move _42, _36, _37, move _44) -> bb27;
    }

    bb15: {
        _49 = &(_7.1: std::vec::Vec<u8>);
        _48 = <Vec<u8> as Deref>::deref(move _49) -> [return: bb16, unwind: bb27];
    }

    bb16: {
        _47 = _48;
        _46 = core::slice::<impl [u8]>::iter(move _47) -> [return: bb17, unwind: bb27];
    }

    bb17: {
        _45 = <std::slice::Iter<'_, u8> as IntoIterator>::into_iter(move _46) -> [return: bb18, unwind: bb27];
    }

    bb18: {
        _50 = move _45;
        goto -> bb19;
    }

    bb19: {
        _52 = &mut _50;
        _51 = <std::slice::Iter<'_, u8> as Iterator>::next(_52) -> [return: bb20, unwind: bb27];
    }

    bb20: {
        _53 = discriminant(_51);
        switchInt(move _53) -> [0: bb23, 1: bb21, otherwise: bb22];
    }

    bb21: {
        _54 = ((_51 as Some).0: &u8);
        _57 = const 97_u8;
        _56 = &_57;
        _55 = (_54, move _56);
        _58 = (_55.0: &u8);
        _59 = (_55.1: &u8);
        _62 = (*_58);
        _63 = (*_59);
        _61 = Eq(move _62, move _63);
        _60 = Not(move _61);
        switchInt(move _60) -> [0: bb19, otherwise: bb24];
    }

    bb22: {
        unreachable;
    }

    bb23: {
        drop(_7) -> [return: bb25, unwind: bb28];
    }

    bb24: {
        _64 = core::panicking::AssertKind::Eq;
        _66 = Option::<Arguments<'_>>::None;
        _65 = core::panicking::assert_failed::<u8, u8>(move _64, _58, _59, move _66) -> bb27;
    }

    bb25: {
        drop(_3) -> bb26;
    }

    bb26: {
        return;
    }

    bb27 (cleanup): {
        drop(_7) -> [return: bb28, unwind terminate];
    }

    bb28 (cleanup): {
        drop(_3) -> [return: bb29, unwind terminate];
    }

    bb29 (cleanup): {
        resume;
    }
}

fn child() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<std::thread::JoinHandle<()>>;
    let mut _2: std::iter::Map<std::ops::Range<usize>, [closure@ui/stdio-is-blocking.rs:37:36: 37:39]>;
    let mut _3: std::ops::Range<usize>;
    let mut _4: std::vec::IntoIter<std::thread::JoinHandle<()>>;
    let mut _5: std::vec::Vec<std::thread::JoinHandle<()>>;
    let mut _7: std::option::Option<std::thread::JoinHandle<()>>;
    let mut _8: &mut std::vec::IntoIter<std::thread::JoinHandle<()>>;
    let mut _9: isize;
    let _11: ();
    let mut _12: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    scope 1 {
        debug threads => _1;
        let mut _6: std::vec::IntoIter<std::thread::JoinHandle<()>>;
        scope 2 {
            debug iter => _6;
            let _10: std::thread::JoinHandle<()>;
            scope 3 {
                debug thread => _10;
            }
        }
    }

    bb0: {
        _3 = std::ops::Range::<usize> { start: const 0_usize, end: const _ };
        _2 = <std::ops::Range<usize> as Iterator>::map::<JoinHandle<()>, [closure@ui/stdio-is-blocking.rs:37:36: 37:39]>(move _3, const ZeroSized: [closure@ui/stdio-is-blocking.rs:37:36: 37:39]) -> bb1;
    }

    bb1: {
        _1 = <Map<std::ops::Range<usize>, [closure@ui/stdio-is-blocking.rs:37:36: 37:39]> as Iterator>::collect::<Vec<JoinHandle<()>>>(move _2) -> bb2;
    }

    bb2: {
        _5 = move _1;
        _4 = <Vec<JoinHandle<()>> as IntoIterator>::into_iter(move _5) -> bb3;
    }

    bb3: {
        _6 = move _4;
        goto -> bb4;
    }

    bb4: {
        _8 = &mut _6;
        _7 = <std::vec::IntoIter<JoinHandle<()>> as Iterator>::next(_8) -> [return: bb5, unwind: bb11];
    }

    bb5: {
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb8, 1: bb6, otherwise: bb7];
    }

    bb6: {
        _10 = move ((_7 as Some).0: std::thread::JoinHandle<()>);
        _12 = JoinHandle::<()>::join(move _10) -> [return: bb9, unwind: bb11];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        drop(_6) -> bb10;
    }

    bb9: {
        _11 = Result::<(), Box<dyn Any + Send>>::unwrap(move _12) -> [return: bb13, unwind: bb11];
    }

    bb10: {
        return;
    }

    bb11 (cleanup): {
        drop(_6) -> [return: bb12, unwind terminate];
    }

    bb12 (cleanup): {
        resume;
    }

    bb13: {
        goto -> bb4;
    }
}

fn child::{closure#0}(_1: &mut [closure@ui/stdio-is-blocking.rs:37:36: 37:39], _2: usize) -> JoinHandle<()> {
    let mut _0: std::thread::JoinHandle<()>;

    bb0: {
        _0 = spawn::<[closure@ui/stdio-is-blocking.rs:38:23: 38:25], ()>(const ZeroSized: [closure@ui/stdio-is-blocking.rs:38:23: 38:25]) -> bb1;
    }

    bb1: {
        return;
    }
}

fn child::{closure#0}::{closure#0}(_1: [closure@ui/stdio-is-blocking.rs:38:23: 38:25]) -> () {
    let mut _0: ();
    let _2: [u8; 32768];
    let mut _3: std::ops::Range<usize>;
    let mut _4: std::ops::Range<usize>;
    let mut _6: std::option::Option<usize>;
    let mut _7: &mut std::ops::Range<usize>;
    let mut _8: isize;
    let _9: ();
    let mut _10: &[u8];
    let _11: &[u8; 32768];
    scope 1 {
        debug buf => _2;
        let mut _5: std::ops::Range<usize>;
        scope 2 {
            debug iter => _5;
        }
    }

    bb0: {
        _2 = [const 97_u8; 32768];
        _4 = std::ops::Range::<usize> { start: const 0_usize, end: const _ };
        _3 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _4) -> bb1;
    }

    bb1: {
        _5 = move _3;
        goto -> bb2;
    }

    bb2: {
        _7 = &mut _5;
        _6 = <std::ops::Range<usize> as Iterator>::next(_7) -> bb3;
    }

    bb3: {
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        _11 = &_2;
        _10 = _11 as &[u8] (Pointer(Unsize));
        _9 = write_all(move _10) -> bb2;
    }

    bb5: {
        unreachable;
    }

    bb6: {
        return;
    }
}

child::{closure#0}::{closure#0}::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

fn write_all(_1: &[u8]) -> () {
    debug buf => _1;
    let mut _0: ();
    let mut _2: std::fs::File;
    let mut _4: &mut std::fs::File;
    let _5: ();
    let mut _6: std::fs::File;
    let _7: ();
    let mut _8: std::result::Result<(), std::io::Error>;
    let mut _9: bool;
    let mut _10: bool;
    scope 1 {
        debug file => _2;
        let _3: std::result::Result<(), std::io::Error>;
        scope 3 {
            debug res => _3;
        }
    }
    scope 2 {
    }

    bb0: {
        _10 = const false;
        _9 = const false;
        _10 = const true;
        _2 = <File as std::os::fd::FromRawFd>::from_raw_fd(const 1_i32) -> bb1;
    }

    bb1: {
        _4 = &mut _2;
        _3 = <File as std::io::Write>::write_all(move _4, _1) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        _9 = const true;
        _10 = const false;
        _6 = move _2;
        _5 = std::mem::forget::<File>(move _6) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _9 = const false;
        _8 = move _3;
        _7 = Result::<(), std::io::Error>::unwrap(move _8) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        _9 = const false;
        _10 = const false;
        return;
    }

    bb5 (cleanup): {
        resume;
    }

    bb6 (cleanup): {
        drop(_3) -> [return: bb9, unwind terminate];
    }

    bb7 (cleanup): {
        switchInt(_9) -> [0: bb9, otherwise: bb6];
    }

    bb8 (cleanup): {
        drop(_2) -> [return: bb5, unwind terminate];
    }

    bb9 (cleanup): {
        switchInt(_10) -> [0: bb5, otherwise: bb8];
    }
}
