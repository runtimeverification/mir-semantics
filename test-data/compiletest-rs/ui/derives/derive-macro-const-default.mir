// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Example::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

Example::0::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

<impl at ui/derives/derive-macro-const-default.rs:2:10: 2:15>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn <impl at ui/derives/derive-macro-const-default.rs:2:10: 2:15>::clone(_1: &Example<T, N>) -> Example<T, N> {
    debug self => _1;
    let mut _0: Example<T, N>;
    let mut _2: [T; N];
    let _3: &[T; N];

    bb0: {
        _3 = &((*_1).0: [T; N]);
        _2 = <[T; N] as Clone>::clone(_3) -> bb1;
    }

    bb1: {
        _0 = Example::<T, N>(move _2);
        return;
    }
}

<impl at ui/derives/derive-macro-const-default.rs:2:10: 2:15>::clone::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

<impl at ui/derives/derive-macro-const-default.rs:2:17: 2:26>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

<impl at ui/derives/derive-macro-const-default.rs:2:17: 2:26>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn <impl at ui/derives/derive-macro-const-default.rs:2:17: 2:26>::eq(_1: &Example<T, N>, _2: &Example<T, N>) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: &[T; N];
    let mut _4: &[T; N];

    bb0: {
        _3 = &((*_1).0: [T; N]);
        _4 = &((*_2).0: [T; N]);
        _0 = <[T; N] as PartialEq>::eq(move _3, move _4) -> bb1;
    }

    bb1: {
        return;
    }
}

<impl at ui/derives/derive-macro-const-default.rs:2:17: 2:26>::eq::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

<impl at ui/derives/derive-macro-const-default.rs:2:28: 2:33>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn <impl at ui/derives/derive-macro-const-default.rs:2:28: 2:33>::fmt(_1: &Example<T, N>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&[T; N];
    let _6: &[T; N];

    bb0: {
        _3 = const "Example";
        _6 = &((*_1).0: [T; N]);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Example<(), 16>;
    let mut _3: &Example<(), 16>;
    let mut _4: bool;
    let mut _5: &Example<(), 16>;
    let mut _6: &Example<(), 16>;
    let mut _9: std::fmt::Arguments<'_>;
    let mut _10: &[&str];
    let _11: &[&str; 1];
    let _12: [&str; 1];
    let mut _13: &[core::fmt::rt::Argument<'_>];
    let _14: &[core::fmt::rt::Argument<'_>; 1];
    let _15: [core::fmt::rt::Argument<'_>; 1];
    let mut _16: core::fmt::rt::Argument<'_>;
    let _17: &Example<(), 16>;
    scope 1 {
        debug a => const Example::<(), 16>([(), (), (), (), (), (), (), (), (), (), (), (), (), (), (), ()]);
        let _2: Example<(), 16>;
        scope 2 {
            debug b => const Example::<(), 16>([(), (), (), (), (), (), (), (), (), (), (), (), (), (), (), ()]);
            let _7: std::string::String;
            let _8: std::string::String;
            scope 3 {
                debug _c => _7;
            }
            scope 4 {
                debug res => _8;
            }
        }
    }

    bb0: {
        _3 = &_1;
        _2 = <Example<(), 16> as Clone>::clone(move _3) -> bb1;
    }

    bb1: {
        _5 = &_1;
        _6 = &_2;
        _4 = <Example<(), 16> as PartialEq>::ne(move _5, move _6) -> bb2;
    }

    bb2: {
        switchInt(move _4) -> [0: bb7, otherwise: bb3];
    }

    bb3: {
        _12 = [const ""];
        _11 = &_12;
        _10 = _11 as &[&str] (Pointer(Unsize));
        _17 = &_1;
        _16 = core::fmt::rt::Argument::<'_>::new_debug::<Example<(), 16>>(_17) -> bb4;
    }

    bb4: {
        _15 = [move _16];
        _14 = &_15;
        _13 = _14 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _9 = Arguments::<'_>::new_v1(move _10, move _13) -> bb5;
    }

    bb5: {
        _8 = format(move _9) -> bb6;
    }

    bb6: {
        _7 = move _8;
        drop(_7) -> bb7;
    }

    bb7: {
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 16_usize;
        return;
    }
}

fn Example(_1: [T; N]) -> Example<T, N> {
    let mut _0: Example<T, N>;

    bb0: {
        _0 = Example::<T, N>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Example(_1: [T; N]) -> Example<T, N> {
    let mut _0: Example<T, N>;

    bb0: {
        _0 = Example::<T, N>(move _1);
        return;
    }
}
