// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: isize;
    let mut _2: (&*const isize, &*const isize);
    let mut _3: &*const isize;
    let _4: *const isize;
    let _5: &isize;
    let mut _6: &*const isize;
    let _7: *const isize;
    let _8: &isize;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: *const isize;
    let mut _14: *const isize;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug foo => _1;
        let _9: &*const isize;
        let _10: &*const isize;
        scope 2 {
            debug left_val => _9;
            debug right_val => _10;
            let _15: core::panicking::AssertKind;
            scope 3 {
                debug kind => _15;
            }
        }
    }

    bb0: {
        _1 = const 1_isize;
        _5 = &_1;
        _4 = &raw const (*_5);
        _3 = &_4;
        _8 = &_1;
        _7 = &raw const (*_8);
        _6 = &_7;
        _2 = (move _3, move _6);
        _9 = (_2.0: &*const isize);
        _10 = (_2.1: &*const isize);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<*const isize, *const isize>(move _15, _9, _10, move _17);
    }

    bb2: {
        return;
    }
}
