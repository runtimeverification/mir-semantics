// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn mk_raw_ty(_1: sty, _2: Option<String>) -> RawT {
    debug st => const sty::ty_nil;
    debug cname => _2;
    let mut _0: RawT;

    bb0: {
        _0 = RawT { struct_: const sty::ty_nil, cname: move _2, hash: const 0_usize };
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: RawT;
    let mut _2: std::option::Option<std::string::String>;

    bb0: {
        _2 = Option::<String>::None;
        _1 = mk_raw_ty(const sty::ty_nil, move _2) -> bb1;
    }

    bb1: {
        drop(_1) -> bb2;
    }

    bb2: {
        return;
    }
}
