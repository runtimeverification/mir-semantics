// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Foo::b(_1: &Self) -> isize {
    debug self => _1;
    let mut _0: isize;
    let mut _2: isize;

    bb0: {
        _2 = <Self as Foo>::a(_1) -> bb1;
    }

    bb1: {
        _0 = Add(move _2, const 2_isize);
        return;
    }
}

fn <impl at ui/traits/issue-3683.rs:10:1: 10:19>::a(_1: &isize) -> isize {
    debug self => _1;
    let mut _0: isize;

    bb0: {
        _0 = const 3_isize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&isize, &isize);
    let mut _2: &isize;
    let _3: isize;
    let mut _4: &isize;
    let _5: isize;
    let mut _6: &isize;
    let _7: isize;
    let _8: &isize;
    let _9: &isize;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: isize;
    let mut _13: isize;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _8;
        debug right_val => _9;
        let _14: core::panicking::AssertKind;
        scope 2 {
            debug kind => _14;
        }
    }

    bb0: {
        _5 = const 3_isize;
        _4 = &_5;
        _3 = <isize as Foo>::b(move _4) -> bb1;
    }

    bb1: {
        _2 = &_3;
        _7 = const 5_isize;
        _6 = &_7;
        _1 = (move _2, move _6);
        _8 = (_1.0: &isize);
        _9 = (_1.1: &isize);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<isize, isize>(move _14, _8, _9, move _16);
    }

    bb3: {
        return;
    }
}
