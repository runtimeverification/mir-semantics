// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/elaborate-type-region.rs:11:1: 11:35>::foo() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/traits/elaborate-type-region.rs:16:1: 16:41>::foo() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/traits/elaborate-type-region.rs:21:1: 21:43>::foo() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/traits/elaborate-type-region.rs:27:1: 27:40>::foo() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/traits/elaborate-type-region.rs:33:1: 33:46>::foo() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/traits/elaborate-type-region.rs:38:1: 38:37>::foo() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/traits/elaborate-type-region.rs:43:1: 43:41>::foo() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let _4: &[&str; 1];
    let _5: [&str; 1];

    bb0: {
        _5 = [const "Hello, world!\n"];
        _4 = &_5;
        _3 = _4 as &[&str] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_const(move _3) -> bb1;
    }

    bb1: {
        _1 = _print(move _2) -> bb2;
    }

    bb2: {
        return;
    }
}
