// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: T) -> T {
    debug t => _1;
    let mut _0: T;

    bb0: {
        _0 = move _1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&i32, &i32);
    let mut _2: &i32;
    let _3: i32;
    let mut _4: &i32;
    let _5: i32;
    let _6: &i32;
    let _7: &i32;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: i32;
    let mut _11: i32;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&f64, &f64);
    let mut _16: &f64;
    let _17: f64;
    let mut _18: &f64;
    let _19: f64;
    let _20: &f64;
    let _21: &f64;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: f64;
    let mut _25: f64;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: (&std::vec::Vec<i32>, &std::vec::Vec<i32>);
    let mut _30: &std::vec::Vec<i32>;
    let _31: std::vec::Vec<i32>;
    let mut _32: std::boxed::Box<[i32]>;
    let mut _33: usize;
    let mut _34: usize;
    let mut _35: *mut u8;
    let mut _36: std::boxed::Box<[i32; 1]>;
    let mut _37: &std::vec::Vec<i32>;
    let _38: std::vec::Vec<i32>;
    let mut _39: std::vec::Vec<i32>;
    let mut _40: std::boxed::Box<[i32]>;
    let mut _41: usize;
    let mut _42: usize;
    let mut _43: *mut u8;
    let mut _44: std::boxed::Box<[i32; 1]>;
    let _45: &std::vec::Vec<i32>;
    let _46: &std::vec::Vec<i32>;
    let mut _47: bool;
    let mut _48: bool;
    let _50: !;
    let mut _51: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _52: *const [i32; 1];
    let mut _53: *const [i32; 1];
    let mut _54: *const ();
    let mut _55: usize;
    let mut _56: usize;
    let mut _57: usize;
    let mut _58: usize;
    let mut _59: bool;
    let mut _60: *const ();
    let mut _61: usize;
    let mut _62: usize;
    let mut _63: usize;
    let mut _64: usize;
    let mut _65: bool;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }
    scope 3 {
        debug left_val => _20;
        debug right_val => _21;
        let _26: core::panicking::AssertKind;
        scope 4 {
            debug kind => _26;
        }
    }
    scope 5 {
    }
    scope 6 {
    }
    scope 7 {
        debug left_val => _45;
        debug right_val => _46;
        let _49: core::panicking::AssertKind;
        scope 8 {
            debug kind => _49;
        }
    }

    bb0: {
        _3 = const 1_i32;
        _2 = &_3;
        _5 = foo::<i32>(const 1_i32) -> bb1;
    }

    bb1: {
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &i32);
        _7 = (_1.1: &i32);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<i32, i32>(move _12, _6, _7, move _14);
    }

    bb3: {
        _17 = const 2f64;
        _16 = &_17;
        _19 = foo::<f64>(const 2f64) -> bb4;
    }

    bb4: {
        _18 = &_19;
        _15 = (move _16, move _18);
        _20 = (_15.0: &f64);
        _21 = (_15.1: &f64);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<f64, f64>(move _26, _20, _21, move _28);
    }

    bb6: {
        _33 = SizeOf([i32; 1]);
        _34 = AlignOf([i32; 1]);
        _35 = alloc::alloc::exchange_malloc(move _33, move _34) -> bb7;
    }

    bb7: {
        _36 = ShallowInitBox(move _35, [i32; 1]);
        _52 = (((_36.0: std::ptr::Unique<[i32; 1]>).0: std::ptr::NonNull<[i32; 1]>).0: *const [i32; 1]);
        _60 = _52 as *const () (PtrToPtr);
        _61 = _60 as usize (Transmute);
        _62 = AlignOf(i32);
        _63 = Sub(_62, const 1_usize);
        _64 = BitAnd(_61, _63);
        _65 = Eq(_64, const 0_usize);
        assert(_65, "misaligned pointer dereference: address must be a multiple of {} but is {}", _62, _61) -> [success: bb21, unwind unreachable];
    }

    bb8: {
        _30 = &_31;
        _41 = SizeOf([i32; 1]);
        _42 = AlignOf([i32; 1]);
        _43 = alloc::alloc::exchange_malloc(move _41, move _42) -> [return: bb9, unwind: bb18];
    }

    bb9: {
        _44 = ShallowInitBox(move _43, [i32; 1]);
        _53 = (((_44.0: std::ptr::Unique<[i32; 1]>).0: std::ptr::NonNull<[i32; 1]>).0: *const [i32; 1]);
        _54 = _53 as *const () (PtrToPtr);
        _55 = _54 as usize (Transmute);
        _56 = AlignOf(i32);
        _57 = Sub(_56, const 1_usize);
        _58 = BitAnd(_55, _57);
        _59 = Eq(_58, const 0_usize);
        assert(_59, "misaligned pointer dereference: address must be a multiple of {} but is {}", _56, _55) -> [success: bb20, unwind unreachable];
    }

    bb10: {
        _38 = foo::<Vec<i32>>(move _39) -> [return: bb11, unwind: bb18];
    }

    bb11: {
        _37 = &_38;
        _29 = (move _30, move _37);
        _45 = (_29.0: &std::vec::Vec<i32>);
        _46 = (_29.1: &std::vec::Vec<i32>);
        _48 = <Vec<i32> as PartialEq>::eq(_45, _46) -> [return: bb12, unwind: bb17];
    }

    bb12: {
        _47 = Not(move _48);
        switchInt(move _47) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _49 = core::panicking::AssertKind::Eq;
        _51 = Option::<Arguments<'_>>::None;
        _50 = core::panicking::assert_failed::<Vec<i32>, Vec<i32>>(move _49, _45, _46, move _51) -> bb17;
    }

    bb14: {
        drop(_38) -> [return: bb15, unwind: bb18];
    }

    bb15: {
        drop(_31) -> bb16;
    }

    bb16: {
        return;
    }

    bb17 (cleanup): {
        drop(_38) -> [return: bb18, unwind terminate];
    }

    bb18 (cleanup): {
        drop(_31) -> [return: bb19, unwind terminate];
    }

    bb19 (cleanup): {
        resume;
    }

    bb20: {
        (*_53) = [const 1_i32];
        _40 = move _44 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _39 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _40) -> [return: bb10, unwind: bb18];
    }

    bb21: {
        (*_52) = [const 1_i32];
        _32 = move _36 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _31 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _32) -> bb8;
    }
}
