// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/kindck-owned-contains-1.rs:7:1: 7:45>::get(_1: &Box<A>) -> A {
    debug self => _1;
    let mut _0: A;
    let mut _2: &A;
    let mut _3: std::boxed::Box<A>;
    let mut _4: *const A;
    let mut _5: *const ();
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: bool;

    bb0: {
        _3 = deref_copy (*_1);
        _4 = (((_3.0: std::ptr::Unique<A>).0: std::ptr::NonNull<A>).0: *const A);
        _5 = _4 as *const () (PtrToPtr);
        _6 = _5 as usize (Transmute);
        _7 = AlignOf(A);
        _8 = Sub(_7, const 1_usize);
        _9 = BitAnd(_6, _8);
        _10 = Eq(_9, const 0_usize);
        assert(_10, "misaligned pointer dereference: address must be a multiple of {} but is {}", _7, _6) -> [success: bb2, unwind unreachable];
    }

    bb1: {
        return;
    }

    bb2: {
        _2 = &(*_4);
        _0 = <A as Clone>::clone(move _2) -> bb1;
    }
}

fn repeater(_1: Box<A>) -> Box<dyn repeat<A>> {
    debug v => _1;
    let mut _0: std::boxed::Box<dyn repeat<A>>;
    let mut _2: std::boxed::Box<std::boxed::Box<A>>;

    bb0: {
        _2 = Box::<Box<A>>::new(move _1) -> bb1;
    }

    bb1: {
        _0 = move _2 as std::boxed::Box<dyn repeat<A>> (Pointer(Unsize));
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _3: std::boxed::Box<i32>;
    let mut _4: i32;
    let mut _5: (&i32, &i32);
    let mut _6: &i32;
    let mut _7: &i32;
    let _8: i32;
    let mut _9: &dyn repeat<i32>;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: i32;
    let mut _15: i32;
    let _17: !;
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _19: *const dyn repeat<i32>;
    scope 1 {
        debug x => _1;
        let _2: std::boxed::Box<dyn repeat<i32>>;
        scope 2 {
            debug y => _2;
            let _10: &i32;
            let _11: &i32;
            scope 3 {
                debug left_val => _10;
                debug right_val => _11;
                let _16: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _16;
                }
            }
        }
    }

    bb0: {
        _1 = const 3_i32;
        _4 = _1;
        _3 = Box::<i32>::new(move _4) -> bb1;
    }

    bb1: {
        _2 = repeater::<i32>(move _3) -> bb2;
    }

    bb2: {
        _6 = &_1;
        _19 = (((_2.0: std::ptr::Unique<dyn repeat<i32>>).0: std::ptr::NonNull<dyn repeat<i32>>).0: *const dyn repeat<i32>);
        _9 = &(*_19);
        _8 = <dyn repeat<i32> as repeat<i32>>::get(move _9) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _7 = &_8;
        _5 = (move _6, move _7);
        _10 = (_5.0: &i32);
        _11 = (_5.1: &i32);
        _14 = (*_10);
        _15 = (*_11);
        _13 = Eq(move _14, move _15);
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _16 = core::panicking::AssertKind::Eq;
        _18 = Option::<Arguments<'_>>::None;
        _17 = core::panicking::assert_failed::<i32, i32>(move _16, _10, _11, move _18) -> bb7;
    }

    bb5: {
        drop(_2) -> bb6;
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_2) -> [return: bb8, unwind terminate];
    }

    bb8 (cleanup): {
        resume;
    }
}
