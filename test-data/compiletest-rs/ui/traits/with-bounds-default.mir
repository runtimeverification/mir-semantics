// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Getter::do_get2(_1: &Self) -> (T, T) {
    debug self => _1;
    let mut _0: (T, T);
    let _2: T;
    let mut _3: T;
    let mut _4: &T;
    let mut _5: T;
    let mut _6: &T;
    scope 1 {
        debug x => _2;
    }

    bb0: {
        _2 = <Self as Getter<T>>::do_get(_1) -> bb1;
    }

    bb1: {
        _4 = &_2;
        _3 = <T as Clone>::clone(move _4) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _6 = &_2;
        _5 = <T as Clone>::clone(move _6) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        _0 = (move _3, move _5);
        drop(_2) -> bb4;
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_3) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }
}

fn <impl at ui/traits/with-bounds-default.rs:20:1: 20:29>::do_get(_1: &isize) -> isize {
    debug self => _1;
    let mut _0: isize;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn <impl at ui/traits/with-bounds-default.rs:24:1: 24:39>::do_get(_1: &Option<T>) -> T {
    debug self => _1;
    let mut _0: T;
    let mut _2: &T;
    let _3: &T;
    let mut _4: std::option::Option<&T>;

    bb0: {
        _4 = Option::<T>::as_ref(_1) -> bb1;
    }

    bb1: {
        _3 = Option::<&T>::unwrap(move _4) -> bb2;
    }

    bb2: {
        _2 = _3;
        _0 = <T as Clone>::clone(move _2) -> bb3;
    }

    bb3: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&(isize, isize), &(isize, isize));
    let mut _2: &(isize, isize);
    let _3: (isize, isize);
    let mut _4: &isize;
    let _5: isize;
    let mut _6: &(isize, isize);
    let _7: (isize, isize);
    let _8: &(isize, isize);
    let _9: &(isize, isize);
    let mut _10: bool;
    let mut _11: bool;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&(std::string::String, std::string::String), &(std::string::String, std::string::String));
    let mut _16: &(std::string::String, std::string::String);
    let _17: (std::string::String, std::string::String);
    let mut _18: &std::option::Option<std::string::String>;
    let _19: std::option::Option<std::string::String>;
    let mut _20: std::string::String;
    let _21: &str;
    let mut _22: &(std::string::String, std::string::String);
    let _23: (std::string::String, std::string::String);
    let mut _24: std::string::String;
    let _25: &str;
    let mut _26: std::string::String;
    let _27: &str;
    let _28: &(std::string::String, std::string::String);
    let _29: &(std::string::String, std::string::String);
    let mut _30: bool;
    let mut _31: bool;
    let _33: !;
    let mut _34: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _8;
        debug right_val => _9;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }
    scope 3 {
        debug left_val => _28;
        debug right_val => _29;
        let _32: core::panicking::AssertKind;
        scope 4 {
            debug kind => _32;
        }
    }

    bb0: {
        _5 = const 3_isize;
        _4 = &_5;
        _3 = <isize as Getter<isize>>::do_get2(move _4) -> bb1;
    }

    bb1: {
        _2 = &_3;
        _7 = (const 3_isize, const 3_isize);
        _6 = &_7;
        _1 = (move _2, move _6);
        _8 = (_1.0: &(isize, isize));
        _9 = (_1.1: &(isize, isize));
        _11 = <(isize, isize) as PartialEq>::eq(_8, _9) -> bb2;
    }

    bb2: {
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<(isize, isize), (isize, isize)>(move _12, _8, _9, move _14);
    }

    bb4: {
        _21 = const "hi";
        _20 = <str as ToString>::to_string(_21) -> bb5;
    }

    bb5: {
        _19 = Option::<String>::Some(move _20);
        _18 = &_19;
        _17 = <Option<String> as Getter<String>>::do_get2(move _18) -> [return: bb6, unwind: bb18];
    }

    bb6: {
        _16 = &_17;
        _25 = const "hi";
        _24 = <str as ToString>::to_string(_25) -> [return: bb7, unwind: bb17];
    }

    bb7: {
        _27 = const "hi";
        _26 = <str as ToString>::to_string(_27) -> [return: bb8, unwind: bb16];
    }

    bb8: {
        _23 = (move _24, move _26);
        _22 = &_23;
        _15 = (move _16, move _22);
        _28 = (_15.0: &(std::string::String, std::string::String));
        _29 = (_15.1: &(std::string::String, std::string::String));
        _31 = <(String, String) as PartialEq>::eq(_28, _29) -> [return: bb9, unwind: bb15];
    }

    bb9: {
        _30 = Not(move _31);
        switchInt(move _30) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _32 = core::panicking::AssertKind::Eq;
        _34 = Option::<Arguments<'_>>::None;
        _33 = core::panicking::assert_failed::<(String, String), (String, String)>(move _32, _28, _29, move _34) -> bb15;
    }

    bb11: {
        drop(_23) -> [return: bb12, unwind: bb17];
    }

    bb12: {
        drop(_17) -> [return: bb13, unwind: bb18];
    }

    bb13: {
        drop(_19) -> bb14;
    }

    bb14: {
        return;
    }

    bb15 (cleanup): {
        drop(_23) -> [return: bb17, unwind terminate];
    }

    bb16 (cleanup): {
        drop(_24) -> [return: bb17, unwind terminate];
    }

    bb17 (cleanup): {
        drop(_17) -> [return: bb18, unwind terminate];
    }

    bb18 (cleanup): {
        drop(_19) -> [return: bb19, unwind terminate];
    }

    bb19 (cleanup): {
        resume;
    }
}
