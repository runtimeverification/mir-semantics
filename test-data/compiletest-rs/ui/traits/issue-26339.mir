// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/issue-26339.rs:13:1: 13:30>::eq(_1: &Aimpl, _2: &Foo) -> bool {
    debug self => _1;
    debug _rhs => _2;
    let mut _0: bool;

    bb0: {
        _0 = const true;
        return;
    }
}

fn <impl at ui/traits/issue-26339.rs:19:1: 19:30>::eq(_1: &Aimpl, _2: &Bar) -> bool {
    debug self => _1;
    debug _rhs => _2;
    let mut _0: bool;

    bb0: {
        _0 = const false;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: &dyn A;
    let _2: &Aimpl;
    let _3: Aimpl;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: &Foo;
    let _7: Foo;
    let mut _8: !;
    scope 1 {
        debug a => _1;
    }

    bb0: {
        _2 = &_3;
        _1 = _2 as &dyn A (Pointer(Unsize));
        _6 = &_7;
        _5 = <dyn A as PartialEq<Foo>>::eq(_1, move _6) -> bb1;
    }

    bb1: {
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _8 = core::panicking::panic(const "assertion failed: *a == Foo");
    }

    bb3: {
        return;
    }
}
