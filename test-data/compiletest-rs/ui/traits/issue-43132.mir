// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn foo() -> () {
    let mut _0: ();
    let _1: Forward<(std::boxed::Box<dyn Future<Error = u32>>,)>;
    let _2: (MaybeDone<(Forward<(std::boxed::Box<dyn Future<Error = u32>>,)>, [closure@ui/traits/issue-43132.rs:11:15: 11:18])>, ());
    let mut _3: (Forward<(std::boxed::Box<dyn Future<Error = u32>>,)>, [closure@ui/traits/issue-43132.rs:11:15: 11:18]);
    let mut _4: Forward<(std::boxed::Box<dyn Future<Error = u32>>,)>;
    scope 1 {
        debug b => _1;
    }

    bb0: {
        _1 = mk::<Forward<(Box<dyn Future<Error = u32>>,)>>() -> bb1;
    }

    bb1: {
        _4 = move _1;
        _3 = <Forward<(Box<dyn Future<Error = u32>>,)> as Future>::map_err::<[closure@ui/traits/issue-43132.rs:11:15: 11:18], ()>(move _4, const ZeroSized: [closure@ui/traits/issue-43132.rs:11:15: 11:18]) -> bb2;
    }

    bb2: {
        _2 = <(Forward<(Box<dyn Future<Error = u32>>,)>, [closure@ui/traits/issue-43132.rs:11:15: 11:18]) as Future>::join(move _3) -> bb3;
    }

    bb3: {
        return;
    }
}

fn foo::{closure#0}(_1: [closure@ui/traits/issue-43132.rs:11:15: 11:18], _2: u32) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn mk() -> T {
    let mut _0: T;

    bb0: {
        goto -> bb1;
    }

    bb1: {
        goto -> bb1;
    }
}

fn Future::map_err(_1: Self, _2: F) -> (Self, F) {
    debug self => _1;
    let mut _0: (Self, F);

    bb0: {
        goto -> bb1;
    }

    bb1: {
        goto -> bb1;
    }
}

fn Future::join(_1: Self) -> (MaybeDone<Self>, ()) {
    debug self => _1;
    let mut _0: (MaybeDone<Self>, ());

    bb0: {
        goto -> bb1;
    }

    bb1: {
        goto -> bb1;
    }
}

fn MaybeDone::_Done(_1: <A as Future>::Error) -> MaybeDone<A> {
    let mut _0: MaybeDone<A>;

    bb0: {
        _0 = MaybeDone::<A>::_Done(move _1);
        return;
    }
}

// MIR FOR CTFE
fn MaybeDone::_Done(_1: <A as Future>::Error) -> MaybeDone<A> {
    let mut _0: MaybeDone<A>;

    bb0: {
        _0 = MaybeDone::<A>::_Done(move _1);
        return;
    }
}
