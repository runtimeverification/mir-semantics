// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn SomeTrait::map(_1: &Self) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::option::Option<i32>;
    let _2: std::option::Option<i32>;
    let mut _3: std::option::Option<i32>;
    let _4: ();
    let _5: &std::option::Option<i32>;
    scope 1 {
        debug x => _1;
    }

    bb0: {
        _1 = Option::<i32>::Some(const 123_i32);
        _3 = _1;
        _2 = Option::<i32>::map::<i32, [closure@ui/traits/alias/issue-60021-assoc-method-resolve.rs:16:20: 16:23]>(move _3, const ZeroSized: [closure@ui/traits/alias/issue-60021-assoc-method-resolve.rs:16:20: 16:23]) -> bb1;
    }

    bb1: {
        _5 = &_1;
        _4 = <Option<i32> as SomeTrait>::map(_5) -> bb2;
    }

    bb2: {
        return;
    }
}

fn main::{closure#0}(_1: [closure@ui/traits/alias/issue-60021-assoc-method-resolve.rs:16:20: 16:23], _2: i32) -> i32 {
    debug z => _2;
    let mut _0: i32;

    bb0: {
        _0 = _2;
        return;
    }
}
