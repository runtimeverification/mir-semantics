// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn a() -> (T, T) {
    let mut _0: (T, T);
    let _1: T;
    let mut _3: &T;
    let mut _4: T;
    let mut _5: T;
    scope 1 {
        debug one => _1;
        let _2: T;
        scope 2 {
            debug two => _2;
        }
    }

    bb0: {
        _1 = <T as Default>::default() -> bb1;
    }

    bb1: {
        _3 = &_1;
        _2 = <T as Clone>::clone(move _3) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        _4 = move _1;
        _5 = move _2;
        _0 = (move _4, move _5);
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn b(_1: &impl SendEqAlias<i32>) -> bool {
    debug x => _1;
    let mut _0: bool;
    let mut _2: &i32;
    let _3: i32;

    bb0: {
        _3 = const 22_i32;
        _2 = &_3;
        _0 = <i32 as PartialEq<impl SendEqAlias<i32>>>::eq(move _2, _1) -> bb1;
    }

    bb1: {
        return;
    }
}

fn c(_1: &mut T) -> Option<i32> {
    debug x => _1;
    let mut _0: std::option::Option<i32>;

    bb0: {
        _0 = <T as Iterator>::next(_1) -> bb1;
    }

    bb1: {
        return;
    }
}

fn d() -> () {
    let mut _0: ();
    let _1: ();

    bb0: {
        _1 = is_send_and_sync::<T>() -> bb1;
    }

    bb1: {
        return;
    }
}

fn is_send_and_sync() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: (i32, i32);
    let mut _2: (&i32, &i32);
    let mut _3: &i32;
    let mut _4: &i32;
    let _5: i32;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: i32;
    let mut _11: i32;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&i32, &i32);
    let mut _16: &i32;
    let mut _17: &i32;
    let _18: i32;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: i32;
    let mut _24: i32;
    let _26: !;
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: (&i32, &i32);
    let mut _30: &i32;
    let mut _31: &i32;
    let _32: i32;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: i32;
    let mut _38: i32;
    let _40: !;
    let mut _41: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _42: (&i32, &i32);
    let mut _43: &i32;
    let mut _44: &i32;
    let _45: i32;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: i32;
    let mut _51: i32;
    let _53: !;
    let mut _54: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _55: bool;
    let mut _56: bool;
    let _57: &i32;
    let _58: i32;
    let mut _59: !;
    let mut _60: (&std::option::Option<i32>, &std::option::Option<i32>);
    let mut _61: &std::option::Option<i32>;
    let _62: std::option::Option<i32>;
    let mut _63: &mut std::vec::IntoIter<i32>;
    let mut _64: std::vec::IntoIter<i32>;
    let mut _65: std::vec::Vec<i32>;
    let mut _66: std::boxed::Box<[i32]>;
    let mut _67: usize;
    let mut _68: usize;
    let mut _69: *mut u8;
    let mut _70: std::boxed::Box<[i32; 1]>;
    let mut _71: &std::option::Option<i32>;
    let _72: std::option::Option<i32>;
    let mut _75: bool;
    let mut _76: bool;
    let _78: !;
    let mut _79: std::option::Option<std::fmt::Arguments<'_>>;
    let _80: ();
    let mut _81: *const [i32; 1];
    scope 1 {
        debug both => _1;
        let _6: &i32;
        let _7: &i32;
        let _19: &i32;
        let _20: &i32;
        let _28: (i32, i32);
        scope 2 {
            debug left_val => _6;
            debug right_val => _7;
            let _12: core::panicking::AssertKind;
            scope 3 {
                debug kind => _12;
            }
        }
        scope 4 {
            debug left_val => _19;
            debug right_val => _20;
            let _25: core::panicking::AssertKind;
            scope 5 {
                debug kind => _25;
            }
        }
        scope 6 {
            debug both => _28;
            let _33: &i32;
            let _34: &i32;
            let _46: &i32;
            let _47: &i32;
            let _73: &std::option::Option<i32>;
            let _74: &std::option::Option<i32>;
            let mut _82: *const ();
            let mut _83: usize;
            let mut _84: usize;
            let mut _85: usize;
            let mut _86: usize;
            let mut _87: bool;
            scope 7 {
                debug left_val => _33;
                debug right_val => _34;
                let _39: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _39;
                }
            }
            scope 9 {
                debug left_val => _46;
                debug right_val => _47;
                let _52: core::panicking::AssertKind;
                scope 10 {
                    debug kind => _52;
                }
            }
            scope 11 {
            }
            scope 12 {
                debug left_val => _73;
                debug right_val => _74;
                let _77: core::panicking::AssertKind;
                scope 13 {
                    debug kind => _77;
                }
            }
        }
    }

    bb0: {
        _1 = a::<i32>() -> bb1;
    }

    bb1: {
        _3 = &(_1.0: i32);
        _5 = const 0_i32;
        _4 = &_5;
        _2 = (move _3, move _4);
        _6 = (_2.0: &i32);
        _7 = (_2.1: &i32);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<i32, i32>(move _12, _6, _7, move _14);
    }

    bb3: {
        _16 = &(_1.1: i32);
        _18 = const 0_i32;
        _17 = &_18;
        _15 = (move _16, move _17);
        _19 = (_15.0: &i32);
        _20 = (_15.1: &i32);
        _23 = (*_19);
        _24 = (*_20);
        _22 = Eq(move _23, move _24);
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _25 = core::panicking::AssertKind::Eq;
        _27 = Option::<Arguments<'_>>::None;
        _26 = core::panicking::assert_failed::<i32, i32>(move _25, _19, _20, move _27);
    }

    bb5: {
        _28 = a::<i32>() -> bb6;
    }

    bb6: {
        _30 = &(_28.0: i32);
        _32 = const 0_i32;
        _31 = &_32;
        _29 = (move _30, move _31);
        _33 = (_29.0: &i32);
        _34 = (_29.1: &i32);
        _37 = (*_33);
        _38 = (*_34);
        _36 = Eq(move _37, move _38);
        _35 = Not(move _36);
        switchInt(move _35) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _39 = core::panicking::AssertKind::Eq;
        _41 = Option::<Arguments<'_>>::None;
        _40 = core::panicking::assert_failed::<i32, i32>(move _39, _33, _34, move _41);
    }

    bb8: {
        _43 = &(_28.1: i32);
        _45 = const 0_i32;
        _44 = &_45;
        _42 = (move _43, move _44);
        _46 = (_42.0: &i32);
        _47 = (_42.1: &i32);
        _50 = (*_46);
        _51 = (*_47);
        _49 = Eq(move _50, move _51);
        _48 = Not(move _49);
        switchInt(move _48) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _52 = core::panicking::AssertKind::Eq;
        _54 = Option::<Arguments<'_>>::None;
        _53 = core::panicking::assert_failed::<i32, i32>(move _52, _46, _47, move _54);
    }

    bb10: {
        _58 = const 22_i32;
        _57 = &_58;
        _56 = b::<i32>(_57) -> bb11;
    }

    bb11: {
        _55 = Not(move _56);
        switchInt(move _55) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _59 = core::panicking::panic(const "assertion failed: b(&22)");
    }

    bb13: {
        _67 = SizeOf([i32; 1]);
        _68 = AlignOf([i32; 1]);
        _69 = alloc::alloc::exchange_malloc(move _67, move _68) -> bb14;
    }

    bb14: {
        _70 = ShallowInitBox(move _69, [i32; 1]);
        _81 = (((_70.0: std::ptr::Unique<[i32; 1]>).0: std::ptr::NonNull<[i32; 1]>).0: *const [i32; 1]);
        _82 = _81 as *const () (PtrToPtr);
        _83 = _82 as usize (Transmute);
        _84 = AlignOf(i32);
        _85 = Sub(_84, const 1_usize);
        _86 = BitAnd(_83, _85);
        _87 = Eq(_86, const 0_usize);
        assert(_87, "misaligned pointer dereference: address must be a multiple of {} but is {}", _84, _83) -> [success: bb25, unwind unreachable];
    }

    bb15: {
        _64 = <Vec<i32> as IntoIterator>::into_iter(move _65) -> bb16;
    }

    bb16: {
        _63 = &mut _64;
        _62 = c::<std::vec::IntoIter<i32>>(_63) -> [return: bb17, unwind: bb23];
    }

    bb17: {
        _61 = &_62;
        _72 = Option::<i32>::Some(const 22_i32);
        _71 = &_72;
        _60 = (move _61, move _71);
        _73 = (_60.0: &std::option::Option<i32>);
        _74 = (_60.1: &std::option::Option<i32>);
        _76 = <Option<i32> as PartialEq>::eq(_73, _74) -> [return: bb18, unwind: bb23];
    }

    bb18: {
        _75 = Not(move _76);
        switchInt(move _75) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _77 = core::panicking::AssertKind::Eq;
        _79 = Option::<Arguments<'_>>::None;
        _78 = core::panicking::assert_failed::<Option<i32>, Option<i32>>(move _77, _73, _74, move _79) -> bb23;
    }

    bb20: {
        drop(_64) -> bb21;
    }

    bb21: {
        _80 = d::<i32>() -> bb22;
    }

    bb22: {
        return;
    }

    bb23 (cleanup): {
        drop(_64) -> [return: bb24, unwind terminate];
    }

    bb24 (cleanup): {
        resume;
    }

    bb25: {
        (*_81) = [const 22_i32];
        _66 = move _70 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _65 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _66) -> bb15;
    }
}

fn Foo(_1: PhantomData<T>) -> Foo<T> {
    let mut _0: Foo<T>;

    bb0: {
        _0 = Foo::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: PhantomData<T>) -> Foo<T> {
    let mut _0: Foo<T>;

    bb0: {
        _0 = Foo::<T>(move _1);
        return;
    }
}

fn Bar(_1: PhantomData<T>) -> Bar<T> {
    let mut _0: Bar<T>;

    bb0: {
        _0 = Bar::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Bar(_1: PhantomData<T>) -> Bar<T> {
    let mut _0: Bar<T>;

    bb0: {
        _0 = Bar::<T>(move _1);
        return;
    }
}
