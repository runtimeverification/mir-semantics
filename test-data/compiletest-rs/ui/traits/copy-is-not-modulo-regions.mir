// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/copy-is-not-modulo-regions.rs:4:10: 4:15>::clone(_1: &Foo<'_>) -> Foo<'_> {
    debug self => _1;
    let mut _0: Foo<'_>;
    let mut _2: &();
    let _3: &();
    let _4: &&();

    bb0: {
        _4 = &((*_1).0: &());
        _3 = <&() as Clone>::clone(_4) -> bb1;
    }

    bb1: {
        _2 = _3;
        _0 = Foo::<'_>(move _2);
        return;
    }
}

fn <impl at ui/traits/copy-is-not-modulo-regions.rs:9:10: 9:15>::clone(_1: &Bar<'_>) -> Bar<'_> {
    debug self => _1;
    let mut _0: Bar<'_>;
    let mut _2: Foo<'_>;
    let _3: &Foo<'_>;

    bb0: {
        _3 = &((*_1).0: Foo<'_>);
        _2 = <Foo<'_> as Clone>::clone(_3) -> bb1;
    }

    bb1: {
        _0 = Bar::<'_>(move _2);
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn Foo(_1: &()) -> Foo<'_> {
    let mut _0: Foo<'_>;

    bb0: {
        _0 = Foo::<'_>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: &()) -> Foo<'_> {
    let mut _0: Foo<'_>;

    bb0: {
        _0 = Foo::<'_>(move _1);
        return;
    }
}

fn Bar(_1: Foo<'_>) -> Bar<'_> {
    let mut _0: Bar<'_>;

    bb0: {
        _0 = Bar::<'_>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Bar(_1: Foo<'_>) -> Bar<'_> {
    let mut _0: Bar<'_>;

    bb0: {
        _0 = Bar::<'_>(move _1);
        return;
    }
}
