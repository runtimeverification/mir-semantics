// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: *const u8;
    let mut _5: std::string::String;
    let mut _7: std::fmt::Arguments<'_>;
    let mut _8: &[&str];
    let _9: &[&str; 3];
    let _10: [&str; 3];
    let mut _11: &[core::fmt::rt::Argument<'_>];
    let _12: &[core::fmt::rt::Argument<'_>; 3];
    let _13: [core::fmt::rt::Argument<'_>; 3];
    let mut _14: core::fmt::rt::Argument<'_>;
    let _15: &std::rc::Rc<usize>;
    let mut _16: core::fmt::rt::Argument<'_>;
    let _17: &std::sync::Arc<usize>;
    let mut _18: core::fmt::rt::Argument<'_>;
    let _19: &std::boxed::Box<&str>;
    let mut _20: bool;
    let mut _21: (&std::string::String, &&str);
    let mut _22: &std::string::String;
    let _23: std::string::String;
    let mut _25: std::fmt::Arguments<'_>;
    let mut _26: &[&str];
    let _27: &[&str; 1];
    let _28: [&str; 1];
    let mut _29: &[core::fmt::rt::Argument<'_>];
    let _30: &[core::fmt::rt::Argument<'_>; 1];
    let _31: [core::fmt::rt::Argument<'_>; 1];
    let mut _32: core::fmt::rt::Argument<'_>;
    let _33: &*const u8;
    let mut _34: &[core::fmt::rt::Placeholder];
    let _35: &[core::fmt::rt::Placeholder; 1];
    let _36: [core::fmt::rt::Placeholder; 1];
    let mut _37: core::fmt::rt::Placeholder;
    let mut _38: core::fmt::rt::Alignment;
    let mut _39: core::fmt::rt::Count;
    let mut _40: core::fmt::rt::Count;
    let mut _41: core::fmt::rt::UnsafeArg;
    let mut _42: &&str;
    let _43: &str;
    let mut _46: bool;
    let mut _47: bool;
    let _49: !;
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _51: (&std::string::String, &&str);
    let mut _52: &std::string::String;
    let _53: std::string::String;
    let mut _55: std::fmt::Arguments<'_>;
    let mut _56: &[&str];
    let _57: &[&str; 1];
    let _58: [&str; 1];
    let mut _59: &[core::fmt::rt::Argument<'_>];
    let _60: &[core::fmt::rt::Argument<'_>; 1];
    let _61: [core::fmt::rt::Argument<'_>; 1];
    let mut _62: core::fmt::rt::Argument<'_>;
    let _63: &*const u8;
    let mut _64: &[core::fmt::rt::Placeholder];
    let _65: &[core::fmt::rt::Placeholder; 1];
    let _66: [core::fmt::rt::Placeholder; 1];
    let mut _67: core::fmt::rt::Placeholder;
    let mut _68: core::fmt::rt::Alignment;
    let mut _69: core::fmt::rt::Count;
    let mut _70: core::fmt::rt::Count;
    let mut _71: core::fmt::rt::UnsafeArg;
    let mut _72: &&str;
    let _73: &str;
    let mut _76: bool;
    let mut _77: bool;
    let _79: !;
    let mut _80: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _81: (&std::string::String, &&str);
    let mut _82: &std::string::String;
    let _83: std::string::String;
    let mut _85: std::fmt::Arguments<'_>;
    let mut _86: &[&str];
    let _87: &[&str; 1];
    let _88: [&str; 1];
    let mut _89: &[core::fmt::rt::Argument<'_>];
    let _90: &[core::fmt::rt::Argument<'_>; 1];
    let _91: [core::fmt::rt::Argument<'_>; 1];
    let mut _92: core::fmt::rt::Argument<'_>;
    let _93: &*const u8;
    let mut _94: &&str;
    let _95: &str;
    let mut _98: bool;
    let mut _99: bool;
    let _101: !;
    let mut _102: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug p => _1;
        let _2: std::rc::Rc<usize>;
        scope 2 {
            debug rc => _2;
            let _3: std::sync::Arc<usize>;
            scope 3 {
                debug arc => _3;
                let _4: std::boxed::Box<&str>;
                scope 4 {
                    debug b => _4;
                    let _6: std::string::String;
                    scope 5 {
                        let _24: std::string::String;
                        let _44: &std::string::String;
                        let _45: &&str;
                        let _54: std::string::String;
                        let _74: &std::string::String;
                        let _75: &&str;
                        let _84: std::string::String;
                        let _96: &std::string::String;
                        let _97: &&str;
                        scope 7 {
                            debug res => _24;
                        }
                        scope 8 {
                        }
                        scope 9 {
                            debug left_val => _44;
                            debug right_val => _45;
                            let _48: core::panicking::AssertKind;
                            scope 10 {
                                debug kind => _48;
                            }
                        }
                        scope 11 {
                            debug res => _54;
                        }
                        scope 12 {
                        }
                        scope 13 {
                            debug left_val => _74;
                            debug right_val => _75;
                            let _78: core::panicking::AssertKind;
                            scope 14 {
                                debug kind => _78;
                            }
                        }
                        scope 15 {
                            debug res => _84;
                        }
                        scope 16 {
                            debug left_val => _96;
                            debug right_val => _97;
                            let _100: core::panicking::AssertKind;
                            scope 17 {
                                debug kind => _100;
                            }
                        }
                    }
                    scope 6 {
                        debug res => _6;
                    }
                }
            }
        }
    }

    bb0: {
        _1 = null::<u8>() -> bb1;
    }

    bb1: {
        _2 = Rc::<usize>::new(const 1_usize) -> bb2;
    }

    bb2: {
        _3 = Arc::<usize>::new(const 1_usize) -> [return: bb3, unwind: bb45];
    }

    bb3: {
        _4 = Box::<&str>::new(const "hi") -> [return: bb4, unwind: bb44];
    }

    bb4: {
        _10 = [const "", const "", const ""];
        _9 = &_10;
        _8 = _9 as &[&str] (Pointer(Unsize));
        _15 = &_2;
        _14 = core::fmt::rt::Argument::<'_>::new_pointer::<Rc<usize>>(_15) -> [return: bb5, unwind: bb43];
    }

    bb5: {
        _17 = &_3;
        _16 = core::fmt::rt::Argument::<'_>::new_pointer::<Arc<usize>>(_17) -> [return: bb6, unwind: bb43];
    }

    bb6: {
        _19 = &_4;
        _18 = core::fmt::rt::Argument::<'_>::new_pointer::<Box<&str>>(_19) -> [return: bb7, unwind: bb43];
    }

    bb7: {
        _13 = [move _14, move _16, move _18];
        _12 = &_13;
        _11 = _12 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _7 = Arguments::<'_>::new_v1(move _8, move _11) -> [return: bb8, unwind: bb43];
    }

    bb8: {
        _6 = format(move _7) -> [return: bb9, unwind: bb43];
    }

    bb9: {
        _5 = move _6;
        drop(_5) -> [return: bb10, unwind: bb43];
    }

    bb10: {
        _20 = const false;
        switchInt(move _20) -> [0: bb20, otherwise: bb11];
    }

    bb11: {
        _28 = [const ""];
        _27 = &_28;
        _26 = _27 as &[&str] (Pointer(Unsize));
        _33 = &_1;
        _32 = core::fmt::rt::Argument::<'_>::new_pointer::<*const u8>(_33) -> [return: bb12, unwind: bb43];
    }

    bb12: {
        _31 = [move _32];
        _30 = &_31;
        _29 = _30 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _38 = core::fmt::rt::Alignment::Unknown;
        _39 = core::fmt::rt::Count::Implied;
        _40 = core::fmt::rt::Count::Implied;
        _37 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _38, const 4_u32, move _39, move _40) -> [return: bb13, unwind: bb43];
    }

    bb13: {
        _36 = [move _37];
        _35 = &_36;
        _34 = _35 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _41 = core::fmt::rt::UnsafeArg::new() -> [return: bb14, unwind: bb43];
    }

    bb14: {
        _25 = Arguments::<'_>::new_v1_formatted(move _26, move _29, move _34, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb15, unwind: bb43];
    }

    bb15: {
        _24 = format(move _25) -> [return: bb16, unwind: bb43];
    }

    bb16: {
        _23 = move _24;
        _22 = &_23;
        _43 = const "0x00000000";
        _42 = &_43;
        _21 = (move _22, move _42);
        _44 = (_21.0: &std::string::String);
        _45 = (_21.1: &&str);
        _47 = <String as PartialEq<&str>>::eq(_44, _45) -> [return: bb17, unwind: bb42];
    }

    bb17: {
        _46 = Not(move _47);
        switchInt(move _46) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _48 = core::panicking::AssertKind::Eq;
        _50 = Option::<Arguments<'_>>::None;
        _49 = core::panicking::assert_failed::<String, &str>(move _48, _44, _45, move _50) -> bb42;
    }

    bb19: {
        drop(_23) -> [return: bb29, unwind: bb43];
    }

    bb20: {
        _58 = [const ""];
        _57 = &_58;
        _56 = _57 as &[&str] (Pointer(Unsize));
        _63 = &_1;
        _62 = core::fmt::rt::Argument::<'_>::new_pointer::<*const u8>(_63) -> [return: bb21, unwind: bb43];
    }

    bb21: {
        _61 = [move _62];
        _60 = &_61;
        _59 = _60 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _68 = core::fmt::rt::Alignment::Unknown;
        _69 = core::fmt::rt::Count::Implied;
        _70 = core::fmt::rt::Count::Implied;
        _67 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _68, const 4_u32, move _69, move _70) -> [return: bb22, unwind: bb43];
    }

    bb22: {
        _66 = [move _67];
        _65 = &_66;
        _64 = _65 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _71 = core::fmt::rt::UnsafeArg::new() -> [return: bb23, unwind: bb43];
    }

    bb23: {
        _55 = Arguments::<'_>::new_v1_formatted(move _56, move _59, move _64, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb24, unwind: bb43];
    }

    bb24: {
        _54 = format(move _55) -> [return: bb25, unwind: bb43];
    }

    bb25: {
        _53 = move _54;
        _52 = &_53;
        _73 = const "0x0000000000000000";
        _72 = &_73;
        _51 = (move _52, move _72);
        _74 = (_51.0: &std::string::String);
        _75 = (_51.1: &&str);
        _77 = <String as PartialEq<&str>>::eq(_74, _75) -> [return: bb26, unwind: bb41];
    }

    bb26: {
        _76 = Not(move _77);
        switchInt(move _76) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _78 = core::panicking::AssertKind::Eq;
        _80 = Option::<Arguments<'_>>::None;
        _79 = core::panicking::assert_failed::<String, &str>(move _78, _74, _75, move _80) -> bb41;
    }

    bb28: {
        drop(_53) -> [return: bb29, unwind: bb43];
    }

    bb29: {
        _88 = [const ""];
        _87 = &_88;
        _86 = _87 as &[&str] (Pointer(Unsize));
        _93 = &_1;
        _92 = core::fmt::rt::Argument::<'_>::new_pointer::<*const u8>(_93) -> [return: bb30, unwind: bb43];
    }

    bb30: {
        _91 = [move _92];
        _90 = &_91;
        _89 = _90 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _85 = Arguments::<'_>::new_v1(move _86, move _89) -> [return: bb31, unwind: bb43];
    }

    bb31: {
        _84 = format(move _85) -> [return: bb32, unwind: bb43];
    }

    bb32: {
        _83 = move _84;
        _82 = &_83;
        _95 = const "0x0";
        _94 = &_95;
        _81 = (move _82, move _94);
        _96 = (_81.0: &std::string::String);
        _97 = (_81.1: &&str);
        _99 = <String as PartialEq<&str>>::eq(_96, _97) -> [return: bb33, unwind: bb40];
    }

    bb33: {
        _98 = Not(move _99);
        switchInt(move _98) -> [0: bb35, otherwise: bb34];
    }

    bb34: {
        _100 = core::panicking::AssertKind::Eq;
        _102 = Option::<Arguments<'_>>::None;
        _101 = core::panicking::assert_failed::<String, &str>(move _100, _96, _97, move _102) -> bb40;
    }

    bb35: {
        drop(_83) -> [return: bb36, unwind: bb43];
    }

    bb36: {
        drop(_4) -> [return: bb37, unwind: bb44];
    }

    bb37: {
        drop(_3) -> [return: bb38, unwind: bb45];
    }

    bb38: {
        drop(_2) -> bb39;
    }

    bb39: {
        return;
    }

    bb40 (cleanup): {
        drop(_83) -> [return: bb43, unwind terminate];
    }

    bb41 (cleanup): {
        drop(_53) -> [return: bb43, unwind terminate];
    }

    bb42 (cleanup): {
        drop(_23) -> [return: bb43, unwind terminate];
    }

    bb43 (cleanup): {
        drop(_4) -> [return: bb44, unwind terminate];
    }

    bb44 (cleanup): {
        drop(_3) -> [return: bb45, unwind terminate];
    }

    bb45 (cleanup): {
        drop(_2) -> [return: bb46, unwind terminate];
    }

    bb46 (cleanup): {
        resume;
    }
}
