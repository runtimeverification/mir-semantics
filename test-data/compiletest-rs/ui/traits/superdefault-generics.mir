// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Movable::translate(_1: &mut Self, _2: S) -> () {
    debug self => _1;
    debug dx => _2;
    let mut _0: ();
    let _3: S;
    let mut _4: S;
    let mut _5: &Self;
    let mut _6: S;
    let _7: ();
    let mut _8: S;
    let mut _9: bool;
    scope 1 {
        debug x => _3;
    }

    bb0: {
        _9 = const false;
        _9 = const true;
        _5 = &(*_1);
        _4 = <Self as Positioned<S>>::X(move _5) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _9 = const false;
        _6 = move _2;
        _3 = <S as Add>::add(move _4, move _6) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _8 = move _3;
        _7 = <Self as Positioned<S>>::SetX(_1, move _8) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        resume;
    }

    bb5 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate];
    }

    bb6 (cleanup): {
        switchInt(_9) -> [0: bb4, otherwise: bb5];
    }
}

fn <impl at ui/traits/superdefault-generics.rs:24:1: 24:42>::SetX(_1: &mut Point<S>, _2: S) -> () {
    debug self => _1;
    debug x => _2;
    let mut _0: ();

    bb0: {
        drop(((*_1).0: S)) -> [return: bb1, unwind: bb2];
    }

    bb1: {
        ((*_1).0: S) = move _2;
        return;
    }

    bb2 (cleanup): {
        ((*_1).0: S) = move _2;
        resume;
    }
}

fn <impl at ui/traits/superdefault-generics.rs:24:1: 24:42>::X(_1: &Point<S>) -> S {
    debug self => _1;
    let mut _0: S;
    let mut _2: &S;

    bb0: {
        _2 = &((*_1).0: S);
        _0 = <S as Clone>::clone(move _2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: Point<i32>;
    let _2: ();
    let mut _3: &mut Point<i32>;
    let mut _4: (&i32, &i32);
    let mut _5: &i32;
    let _6: i32;
    let mut _7: &Point<i32>;
    let mut _8: &i32;
    let _9: i32;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: i32;
    let mut _15: i32;
    let _17: !;
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug p => _1;
        let _10: &i32;
        let _11: &i32;
        scope 2 {
            debug left_val => _10;
            debug right_val => _11;
            let _16: core::panicking::AssertKind;
            scope 3 {
                debug kind => _16;
            }
        }
    }

    bb0: {
        _1 = Point::<i32> { x: const 1_i32, y: const 2_i32 };
        _3 = &mut _1;
        _2 = <Point<i32> as Movable<i32>>::translate(move _3, const 3_i32) -> bb1;
    }

    bb1: {
        _7 = &_1;
        _6 = <Point<i32> as Positioned<i32>>::X(move _7) -> bb2;
    }

    bb2: {
        _5 = &_6;
        _9 = const 4_i32;
        _8 = &_9;
        _4 = (move _5, move _8);
        _10 = (_4.0: &i32);
        _11 = (_4.1: &i32);
        _14 = (*_10);
        _15 = (*_11);
        _13 = Eq(move _14, move _15);
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _16 = core::panicking::AssertKind::Eq;
        _18 = Option::<Arguments<'_>>::None;
        _17 = core::panicking::assert_failed::<i32, i32>(move _16, _10, _11, move _18);
    }

    bb4: {
        return;
    }
}
