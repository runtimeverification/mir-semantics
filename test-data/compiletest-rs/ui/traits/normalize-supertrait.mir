// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f(_1: &dyn Derived<P>) -> () {
    debug obj => _1;
    let mut _0: ();
    let _2: ();
    let _3: ();
    let _4: ();

    bb0: {
        _2 = <dyn Derived<P> as Derived<P>>::is_derived(_1) -> bb1;
    }

    bb1: {
        _3 = <dyn Derived<P> as Base<<P as Proj>::S>>::is_base(_1) -> bb2;
    }

    bb2: {
        _4 = <dyn Derived<P> as Base<()>>::is_base(_1) -> bb3;
    }

    bb3: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: fn(&dyn Derived<()>);
    scope 1 {
        debug x => _1;
        let _2: fn(&dyn Derived<i32>);
        scope 2 {
            debug x => _2;
        }
    }

    bb0: {
        _1 = f::<()> as for<'a> fn(&'a (dyn Derived<()> + 'a)) (Pointer(ReifyFnPointer));
        _2 = f::<i32> as for<'a> fn(&'a (dyn Derived<i32> + 'a)) (Pointer(ReifyFnPointer));
        return;
    }
}
