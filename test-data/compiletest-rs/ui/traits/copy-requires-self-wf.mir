// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/copy-requires-self-wf.rs:3:10: 3:15>::clone(_1: &A<'_, T>) -> A<'_, T> {
    debug self => _1;
    let mut _0: A<'_, T>;
    let mut _2: &T;
    let _3: &T;
    let _4: &&T;

    bb0: {
        _4 = &((*_1).0: &T);
        _3 = <&T as Clone>::clone(_4) -> bb1;
    }

    bb1: {
        _2 = _3;
        _0 = A::<'_, T>(move _2);
        return;
    }
}

fn <impl at ui/traits/copy-requires-self-wf.rs:8:10: 8:15>::clone(_1: &B<'_, T>) -> B<'_, T> {
    debug self => _1;
    let mut _0: B<'_, T>;
    let mut _2: A<'_, T>;
    let _3: &A<'_, T>;

    bb0: {
        _3 = &((*_1).0: A<'_, T>);
        _2 = <A<'_, T> as Clone>::clone(_3) -> bb1;
    }

    bb1: {
        _0 = B::<'_, T>(move _2);
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn A(_1: &T) -> A<'_, T> {
    let mut _0: A<'_, T>;

    bb0: {
        _0 = A::<'_, T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn A(_1: &T) -> A<'_, T> {
    let mut _0: A<'_, T>;

    bb0: {
        _0 = A::<'_, T>(move _1);
        return;
    }
}

fn B(_1: A<'_, T>) -> B<'_, T> {
    let mut _0: B<'_, T>;

    bb0: {
        _0 = B::<'_, T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn B(_1: A<'_, T>) -> B<'_, T> {
    let mut _0: B<'_, T>;

    bb0: {
        _0 = B::<'_, T>(move _1);
        return;
    }
}
