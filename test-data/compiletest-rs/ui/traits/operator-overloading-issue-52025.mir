// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/operator-overloading-issue-52025.rs:15:16: 15:21>::fmt(_1: &F32x4, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&std::arch::x86_64::__m128;
    let _6: &std::arch::x86_64::__m128;

    bb0: {
        _3 = const "F32x4";
        _6 = &((*_1).0: std::arch::x86_64::__m128);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/traits/operator-overloading-issue-52025.rs:15:23: 15:28>::clone(_1: &F32x4) -> F32x4 {
    debug self => _1;
    let mut _0: F32x4;
    scope 1 {
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn <impl at ui/traits/operator-overloading-issue-52025.rs:18:1: 18:26>::add(_1: F32x4, _2: F32x4) -> F32x4 {
    debug self => _1;
    debug rhs => _2;
    let mut _0: F32x4;
    let mut _3: std::arch::x86_64::__m128;
    let mut _4: std::arch::x86_64::__m128;
    let mut _5: std::arch::x86_64::__m128;
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: std::arch::x86_64::__m128);
        _5 = (_2.0: std::arch::x86_64::__m128);
        _3 = std::arch::x86_64::_mm_add_ps(move _4, move _5) -> bb1;
    }

    bb1: {
        _0 = F32x4(move _3);
        return;
    }
}

fn <impl at ui/traits/operator-overloading-issue-52025.rs:26:1: 26:24>::add(_1: F32x4, _2: f32) -> F32x4 {
    debug self => _1;
    debug rhs => _2;
    let mut _0: F32x4;
    let mut _3: std::arch::x86_64::__m128;
    let mut _4: std::arch::x86_64::__m128;
    let mut _5: std::arch::x86_64::__m128;
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: std::arch::x86_64::__m128);
        _5 = std::arch::x86_64::_mm_set1_ps(_2) -> bb1;
    }

    bb1: {
        _3 = std::arch::x86_64::_mm_add_ps(move _4, move _5) -> bb2;
    }

    bb2: {
        _0 = F32x4(move _3);
        return;
    }
}

fn <impl at ui/traits/operator-overloading-issue-52025.rs:34:1: 34:19>::set1_ps(_1: f32) -> F32x4 {
    debug a => _1;
    let mut _0: F32x4;
    let mut _2: std::arch::x86_64::__m128;

    bb0: {
        _2 = std::arch::x86_64::_mm_set1_ps(_1) -> bb1;
    }

    bb1: {
        _0 = F32x4(move _2);
        return;
    }
}

fn <impl at ui/traits/operator-overloading-issue-52025.rs:34:1: 34:19>::add_ps(_1: F32x4, _2: F32x4) -> F32x4 {
    debug a => _1;
    debug b => _2;
    let mut _0: F32x4;
    let mut _3: std::arch::x86_64::__m128;
    let mut _4: std::arch::x86_64::__m128;
    let mut _5: std::arch::x86_64::__m128;

    bb0: {
        _4 = (_1.0: std::arch::x86_64::__m128);
        _5 = (_2.0: std::arch::x86_64::__m128);
        _3 = std::arch::x86_64::_mm_add_ps(move _4, move _5) -> bb1;
    }

    bb1: {
        _0 = F32x4(move _3);
        return;
    }
}

fn test() -> <S as Simd>::Vf32 {
    let mut _0: <S as Simd>::Vf32;
    let _1: <S as Simd>::Vf32;
    let mut _4: <S as Simd>::Vf32;
    let mut _5: <S as Simd>::Vf32;
    scope 1 {
        debug a => _1;
        let _2: <S as Simd>::Vf32;
        scope 2 {
            debug b => _2;
            let _3: <S as Simd>::Vf32;
            scope 3 {
                debug result => _3;
            }
        }
    }

    bb0: {
        _1 = <S as Simd>::set1_ps(const 3f32) -> bb1;
    }

    bb1: {
        _2 = <S as Simd>::set1_ps(const 2f32) -> bb2;
    }

    bb2: {
        _4 = _1;
        _5 = _2;
        _3 = <<S as Simd>::Vf32 as std::ops::Add>::add(move _4, move _5) -> bb3;
    }

    bb3: {
        _0 = _3;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let _4: &[&str; 2];
    let _5: [&str; 2];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &F32x4;
    let _11: F32x4;
    scope 1 {
    }

    bb0: {
        _5 = [const "", const "\n"];
        _4 = &_5;
        _3 = _4 as &[&str] (Pointer(Unsize));
        _11 = test::<Sse2>() -> bb1;
    }

    bb1: {
        _10 = &_11;
        _9 = core::fmt::rt::Argument::<'_>::new_debug::<F32x4>(_10) -> bb2;
    }

    bb2: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_v1(move _3, move _6) -> bb3;
    }

    bb3: {
        _1 = _print(move _2) -> bb4;
    }

    bb4: {
        return;
    }
}

fn F32x4(_1: std::arch::x86_64::__m128) -> F32x4 {
    let mut _0: F32x4;

    bb0: {
        _0 = F32x4(move _1);
        return;
    }
}

// MIR FOR CTFE
fn F32x4(_1: std::arch::x86_64::__m128) -> F32x4 {
    let mut _0: F32x4;

    bb0: {
        _0 = F32x4(move _1);
        return;
    }
}
