// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/safety-ok.rs:9:1: 9:26>::foo(_1: &isize) -> isize {
    debug self => _1;
    let mut _0: isize;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn take_foo(_1: &F) -> isize {
    debug f => _1;
    let mut _0: isize;

    bb0: {
        _0 = <F as Foo>::foo(_1) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: isize;
    let mut _2: (&isize, &isize);
    let mut _3: &isize;
    let _4: isize;
    let mut _5: &isize;
    let _6: isize;
    let _7: &isize;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: isize;
    let mut _13: isize;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _8: &isize;
        let _9: &isize;
        scope 2 {
            debug left_val => _8;
            debug right_val => _9;
            let _14: core::panicking::AssertKind;
            scope 3 {
                debug kind => _14;
            }
        }
    }

    bb0: {
        _1 = const 22_isize;
        _4 = const 22_isize;
        _3 = &_4;
        _7 = &_1;
        _6 = take_foo::<isize>(_7) -> bb1;
    }

    bb1: {
        _5 = &_6;
        _2 = (move _3, move _5);
        _8 = (_2.0: &isize);
        _9 = (_2.1: &isize);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<isize, isize>(move _14, _8, _9, move _16);
    }

    bb3: {
        return;
    }
}
