// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/coercion.rs:12:16: 12:21>::clone(_1: &Struct) -> Struct {
    debug self => _1;
    let mut _0: Struct;
    scope 1 {
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn <impl at ui/traits/coercion.rs:18:1: 18:22>::f(_1: &Struct) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 1];
    let _6: [&str; 1];

    bb0: {
        _6 = [const "Hi!\n"];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_const(move _4) -> bb1;
    }

    bb1: {
        _2 = _print(move _3) -> bb2;
    }

    bb2: {
        return;
    }
}

fn foo(_1: Box<dyn std::io::Write>) -> () {
    debug a => _1;
    let mut _0: ();

    bb0: {
        drop(_1) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Struct;
    let mut _3: std::boxed::Box<Struct>;
    let mut _4: Struct;
    let _5: ();
    let mut _6: &dyn Trait;
    let _8: &Struct;
    let _9: ();
    let _11: ();
    let mut _12: std::boxed::Box<dyn std::io::Write>;
    let mut _13: std::boxed::Box<std::io::Stdout>;
    let mut _14: std::io::Stdout;
    let mut _15: *const dyn Trait;
    scope 1 {
        debug a => _1;
        let _2: std::boxed::Box<dyn Trait>;
        scope 2 {
            debug b => _2;
            let _7: &dyn Trait;
            scope 3 {
                debug c => _7;
                let _10: std::io::Stdout;
                scope 4 {
                    debug out => _10;
                }
            }
        }
    }

    bb0: {
        _1 = Struct { x: const 1_isize, y: const 2_isize };
        _4 = _1;
        _3 = Box::<Struct>::new(move _4) -> bb1;
    }

    bb1: {
        _2 = move _3 as std::boxed::Box<dyn Trait> (Pointer(Unsize));
        _15 = (((_2.0: std::ptr::Unique<dyn Trait>).0: std::ptr::NonNull<dyn Trait>).0: *const dyn Trait);
        _6 = &(*_15);
        _5 = <dyn Trait as Trait>::f(move _6) -> [return: bb2, unwind: bb8];
    }

    bb2: {
        _8 = &_1;
        _7 = _8 as &dyn Trait (Pointer(Unsize));
        _9 = <dyn Trait as Trait>::f(_7) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        _10 = stdout() -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _14 = move _10;
        _13 = Box::<Stdout>::new(move _14) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        _12 = move _13 as std::boxed::Box<dyn std::io::Write> (Pointer(Unsize));
        _11 = foo(move _12) -> [return: bb6, unwind: bb8];
    }

    bb6: {
        drop(_2) -> bb7;
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_2) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        resume;
    }
}
