// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/multidispatch1.rs:9:16: 9:21>::clone(_1: &MyType) -> MyType {
    debug self => _1;
    let mut _0: MyType;
    scope 1 {
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn <impl at ui/traits/multidispatch1.rs:14:1: 14:31>::get(_1: &MyType) -> usize {
    debug self => _1;
    let mut _0: usize;

    bb0: {
        _0 = ((*_1).0: usize);
        return;
    }
}

fn <impl at ui/traits/multidispatch1.rs:18:1: 18:28>::get(_1: &MyType) -> u8 {
    debug self => _1;
    let mut _0: u8;
    let mut _2: usize;

    bb0: {
        _2 = ((*_1).0: usize);
        _0 = move _2 as u8 (IntToInt);
        return;
    }
}

fn test_eq(_1: M, _2: T) -> () {
    debug m => _1;
    debug v => _2;
    let mut _0: ();
    let mut _3: (&T, &T);
    let mut _4: &T;
    let _5: T;
    let mut _6: &M;
    let mut _7: &T;
    let _8: &T;
    let _9: &T;
    let mut _10: bool;
    let mut _11: bool;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _8;
        debug right_val => _9;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }

    bb0: {
        _6 = &_1;
        _5 = <M as MyTrait<T>>::get(move _6) -> [return: bb1, unwind: bb9];
    }

    bb1: {
        _4 = &_5;
        _7 = &_2;
        _3 = (move _4, move _7);
        _8 = (_3.0: &T);
        _9 = (_3.1: &T);
        _11 = <T as PartialEq>::eq(_8, _9) -> [return: bb2, unwind: bb8];
    }

    bb2: {
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<T, T>(move _12, _8, _9, move _14) -> bb8;
    }

    bb4: {
        drop(_5) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        drop(_2) -> [return: bb6, unwind: bb10];
    }

    bb6: {
        drop(_1) -> bb7;
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_5) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        drop(_2) -> [return: bb10, unwind terminate];
    }

    bb10 (cleanup): {
        drop(_1) -> [return: bb11, unwind terminate];
    }

    bb11 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: MyType;
    let mut _2: usize;
    let _3: ();
    let mut _4: usize;
    let _5: ();
    let mut _6: u8;
    let mut _7: usize;
    scope 1 {
        debug value => _1;
    }

    bb0: {
        _2 = Add(const 256_usize, const 22_usize);
        _1 = MyType { dummy: move _2 };
        _4 = (_1.0: usize);
        _3 = test_eq::<usize, MyType>(_1, move _4) -> bb1;
    }

    bb1: {
        _7 = (_1.0: usize);
        _6 = move _7 as u8 (IntToInt);
        _5 = test_eq::<u8, MyType>(_1, move _6) -> bb2;
    }

    bb2: {
        return;
    }
}
