// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Foo::foo(_1: &Self) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/traits/multidispatch-conditional-impl-not-considered.rs:17:1: 17:9>::foo(_1: &Bar) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::cell::RefCell<Bar>;
    let _2: ();
    let mut _3: &Bar;
    let _4: &Bar;
    let mut _5: &std::cell::Ref<'_, Bar>;
    let _6: std::cell::Ref<'_, Bar>;
    let mut _7: &std::cell::RefCell<Bar>;
    scope 1 {
        debug b => _1;
    }

    bb0: {
        _1 = RefCell::<Bar>::new(const Bar) -> bb1;
    }

    bb1: {
        _7 = &_1;
        _6 = RefCell::<Bar>::borrow(move _7) -> bb2;
    }

    bb2: {
        _5 = &_6;
        _4 = <Ref<'_, Bar> as Deref>::deref(move _5) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _3 = _4;
        _2 = Bar::foo(move _3) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_6) -> bb5;
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_6) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }
}
