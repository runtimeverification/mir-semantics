// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn blah(_1: T, _2: F) -> B<<T as Foo>::Item, impl Fn(<T as Foo>::Item)> {
    debug x => _1;
    debug f => _2;
    let mut _0: B<<T as Foo>::Item, impl Fn(<T as Foo>::Item)>;
    let mut _3: <T as Foo>::Item;
    let mut _4: &T;
    let mut _5: F;

    bb0: {
        _4 = &_1;
        _3 = <T as Foo>::get(move _4) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        _5 = move _2;
        _0 = B::<<T as Foo>::Item, F> { x: move _3, f: move _5 };
        drop(_1) -> bb2;
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        drop(_1) -> [return: bb5, unwind terminate];
    }

    bb5 (cleanup): {
        resume;
    }
}

fn <impl at ui/traits/associated_type_bound/issue-51446.rs:25:1: 25:17>::get(_1: &i32) -> i32 {
    debug self => _1;
    let mut _0: i32;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: B<i32, impl Fn(<i32 as Foo>::Item)>;
    scope 1 {
    }

    bb0: {
        _1 = blah::<i32, [closure@ui/traits/associated_type_bound/issue-51446.rs:33:21: 33:24]>(const 0_i32, const ZeroSized: [closure@ui/traits/associated_type_bound/issue-51446.rs:33:21: 33:24]) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/traits/associated_type_bound/issue-51446.rs:33:21: 33:24], _2: i32) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
