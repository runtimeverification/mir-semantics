// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/monomorphized-callees-with-ty-params-3314.rs:11:1: 11:28>::serialize(_1: &isize, _2: S) -> () {
    debug self => _1;
    debug _s => _2;
    let mut _0: ();

    bb0: {
        drop(_2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/traits/monomorphized-callees-with-ty-params-3314.rs:17:1: 17:43>::serialize(_1: &F<A>, _2: S) -> () {
    debug self => _1;
    debug s => _2;
    let mut _0: ();
    let _3: ();
    let mut _4: &A;

    bb0: {
        _4 = &((*_1).0: A);
        _3 = <A as Serializable>::serialize::<S>(move _4, move _2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: F<isize>;
    let _2: ();
    let mut _3: &F<isize>;
    let mut _5: F<isize>;
    let _6: ();
    let mut _7: &F<F<isize>>;
    scope 1 {
        debug foo => _1;
        let _4: F<F<isize>>;
        scope 2 {
            debug bar => _4;
        }
    }

    bb0: {
        _1 = F::<isize> { a: const 1_isize };
        _3 = &_1;
        _2 = <F<isize> as Serializable>::serialize::<isize>(move _3, const 1_isize) -> bb1;
    }

    bb1: {
        _5 = F::<isize> { a: const 1_isize };
        _4 = F::<F<isize>> { a: move _5 };
        _7 = &_4;
        _6 = <F<F<isize>> as Serializable>::serialize::<isize>(move _7, const 2_isize) -> bb2;
    }

    bb2: {
        return;
    }
}
