// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static BYTE: u8 = {
    let mut _0: u8;

    bb0: {
        _0 = const 33_u8;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: &dyn std::fmt::Display;
    let _2: &u8;
    let mut _4: std::boxed::Box<u8>;
    let mut _5: u8;
    let mut _6: &u8;
    let mut _9: std::fmt::Arguments<'_>;
    let mut _10: &[&str];
    let _11: &[&str; 1];
    let _12: [&str; 1];
    let mut _13: &[core::fmt::rt::Argument<'_>];
    let _14: &[core::fmt::rt::Argument<'_>; 1];
    let _15: [core::fmt::rt::Argument<'_>; 1];
    let mut _16: core::fmt::rt::Argument<'_>;
    let _17: &&dyn std::fmt::Display;
    let mut _20: std::fmt::Arguments<'_>;
    let mut _21: &[&str];
    let _22: &[&str; 1];
    let _23: [&str; 1];
    let mut _24: &[core::fmt::rt::Argument<'_>];
    let _25: &[core::fmt::rt::Argument<'_>; 1];
    let _26: [core::fmt::rt::Argument<'_>; 1];
    let mut _27: core::fmt::rt::Argument<'_>;
    let _28: &std::boxed::Box<dyn std::fmt::Display>;
    let mut _29: (&std::string::String, &&str);
    let mut _30: &std::string::String;
    let mut _31: &&str;
    let _32: &str;
    let mut _35: bool;
    let mut _36: bool;
    let _38: !;
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _40: (&std::string::String, &&str);
    let mut _41: &std::string::String;
    let mut _42: &&str;
    let _43: &str;
    let mut _46: bool;
    let mut _47: bool;
    let _49: !;
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _3: std::boxed::Box<dyn std::fmt::Display>;
        scope 2 {
            debug y => _3;
            scope 3 {
                scope 4 {
                    let _7: std::string::String;
                    let _8: std::string::String;
                    scope 5 {
                        debug xstr => _7;
                        let _18: std::string::String;
                        let _19: std::string::String;
                        scope 7 {
                            debug ystr => _18;
                            let _33: &std::string::String;
                            let _34: &&str;
                            let _44: &std::string::String;
                            let _45: &&str;
                            scope 9 {
                                debug left_val => _33;
                                debug right_val => _34;
                                let _37: core::panicking::AssertKind;
                                scope 10 {
                                    debug kind => _37;
                                }
                            }
                            scope 11 {
                                debug left_val => _44;
                                debug right_val => _45;
                                let _48: core::panicking::AssertKind;
                                scope 12 {
                                    debug kind => _48;
                                }
                            }
                        }
                        scope 8 {
                            debug res => _19;
                        }
                    }
                    scope 6 {
                        debug res => _8;
                    }
                }
            }
        }
    }

    bb0: {
        _2 = const {alloc1: &u8};
        _1 = _2 as &dyn std::fmt::Display (Pointer(Unsize));
        _6 = const {alloc1: &u8};
        _5 = (*_6);
        _4 = Box::<u8>::new(move _5) -> bb1;
    }

    bb1: {
        _3 = move _4 as std::boxed::Box<dyn std::fmt::Display> (Pointer(Unsize));
        _12 = [const ""];
        _11 = &_12;
        _10 = _11 as &[&str] (Pointer(Unsize));
        _17 = &_1;
        _16 = core::fmt::rt::Argument::<'_>::new_display::<&dyn std::fmt::Display>(_17) -> [return: bb2, unwind: bb19];
    }

    bb2: {
        _15 = [move _16];
        _14 = &_15;
        _13 = _14 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _9 = Arguments::<'_>::new_v1(move _10, move _13) -> [return: bb3, unwind: bb19];
    }

    bb3: {
        _8 = format(move _9) -> [return: bb4, unwind: bb19];
    }

    bb4: {
        _7 = move _8;
        _23 = [const ""];
        _22 = &_23;
        _21 = _22 as &[&str] (Pointer(Unsize));
        _28 = &_3;
        _27 = core::fmt::rt::Argument::<'_>::new_display::<Box<dyn std::fmt::Display>>(_28) -> [return: bb5, unwind: bb18];
    }

    bb5: {
        _26 = [move _27];
        _25 = &_26;
        _24 = _25 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _20 = Arguments::<'_>::new_v1(move _21, move _24) -> [return: bb6, unwind: bb18];
    }

    bb6: {
        _19 = format(move _20) -> [return: bb7, unwind: bb18];
    }

    bb7: {
        _18 = move _19;
        _30 = &_7;
        _32 = const "33";
        _31 = &_32;
        _29 = (move _30, move _31);
        _33 = (_29.0: &std::string::String);
        _34 = (_29.1: &&str);
        _36 = <String as PartialEq<&str>>::eq(_33, _34) -> [return: bb8, unwind: bb17];
    }

    bb8: {
        _35 = Not(move _36);
        switchInt(move _35) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _37 = core::panicking::AssertKind::Eq;
        _39 = Option::<Arguments<'_>>::None;
        _38 = core::panicking::assert_failed::<String, &str>(move _37, _33, _34, move _39) -> bb17;
    }

    bb10: {
        _41 = &_18;
        _43 = const "33";
        _42 = &_43;
        _40 = (move _41, move _42);
        _44 = (_40.0: &std::string::String);
        _45 = (_40.1: &&str);
        _47 = <String as PartialEq<&str>>::eq(_44, _45) -> [return: bb11, unwind: bb17];
    }

    bb11: {
        _46 = Not(move _47);
        switchInt(move _46) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _48 = core::panicking::AssertKind::Eq;
        _50 = Option::<Arguments<'_>>::None;
        _49 = core::panicking::assert_failed::<String, &str>(move _48, _44, _45, move _50) -> bb17;
    }

    bb13: {
        drop(_18) -> [return: bb14, unwind: bb18];
    }

    bb14: {
        drop(_7) -> [return: bb15, unwind: bb19];
    }

    bb15: {
        drop(_3) -> bb16;
    }

    bb16: {
        return;
    }

    bb17 (cleanup): {
        drop(_18) -> [return: bb18, unwind terminate];
    }

    bb18 (cleanup): {
        drop(_7) -> [return: bb19, unwind terminate];
    }

    bb19 (cleanup): {
        drop(_3) -> [return: bb20, unwind terminate];
    }

    bb20 (cleanup): {
        resume;
    }
}

alloc1 (static: BYTE, size: 1, align: 1) {
    21                                              â”‚ !
}
