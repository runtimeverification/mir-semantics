// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/objects-owned-object-borrowed-method-headerless.rs:14:1: 14:28>::foo(_1: &BarStruct) -> usize {
    debug self => _1;
    let mut _0: usize;

    bb0: {
        _0 = ((*_1).0: usize);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<std::boxed::Box<dyn FooTrait>>;
    let mut _2: std::boxed::Box<[std::boxed::Box<dyn FooTrait>]>;
    let mut _3: std::boxed::Box<[std::boxed::Box<dyn FooTrait>; 3]>;
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: *mut u8;
    let mut _7: std::boxed::Box<[std::boxed::Box<dyn FooTrait>; 3]>;
    let mut _8: std::boxed::Box<dyn FooTrait>;
    let mut _9: std::boxed::Box<dyn FooTrait>;
    let mut _10: std::boxed::Box<BarStruct>;
    let mut _11: BarStruct;
    let mut _12: std::boxed::Box<dyn FooTrait>;
    let mut _13: std::boxed::Box<dyn FooTrait>;
    let mut _14: std::boxed::Box<BarStruct>;
    let mut _15: BarStruct;
    let mut _16: std::boxed::Box<dyn FooTrait>;
    let mut _17: std::boxed::Box<BarStruct>;
    let mut _18: BarStruct;
    let mut _19: std::ops::Range<usize>;
    let mut _20: std::ops::Range<usize>;
    let mut _21: usize;
    let mut _22: &std::vec::Vec<std::boxed::Box<dyn FooTrait>>;
    let mut _24: std::option::Option<usize>;
    let mut _25: &mut std::ops::Range<usize>;
    let mut _26: isize;
    let mut _28: (&usize, &usize);
    let mut _29: &usize;
    let mut _30: &usize;
    let _31: usize;
    let mut _32: &dyn FooTrait;
    let _33: &std::boxed::Box<dyn FooTrait>;
    let mut _34: &std::vec::Vec<std::boxed::Box<dyn FooTrait>>;
    let mut _35: usize;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: usize;
    let mut _41: usize;
    let _43: !;
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _45: std::boxed::Box<dyn FooTrait>;
    let mut _46: &mut std::boxed::Box<[std::boxed::Box<dyn FooTrait>; 3]>;
    let mut _47: ();
    let mut _48: &mut std::boxed::Box<[std::boxed::Box<dyn FooTrait>; 3]>;
    let mut _49: ();
    let mut _50: &mut std::boxed::Box<[std::boxed::Box<dyn FooTrait>; 3]>;
    let mut _51: ();
    let mut _52: *const [std::boxed::Box<dyn FooTrait>; 3];
    let mut _53: *const dyn FooTrait;
    let mut _54: *const ();
    let mut _55: usize;
    let mut _56: usize;
    let mut _57: usize;
    let mut _58: usize;
    let mut _59: bool;
    scope 1 {
        debug foos => _1;
        let mut _23: std::ops::Range<usize>;
        scope 3 {
            debug iter => _23;
            let _27: usize;
            scope 4 {
                debug i => _27;
                let _36: &usize;
                let _37: &usize;
                scope 5 {
                    debug left_val => _36;
                    debug right_val => _37;
                    let _42: core::panicking::AssertKind;
                    scope 6 {
                        debug kind => _42;
                    }
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _4 = SizeOf([std::boxed::Box<dyn FooTrait>; 3]);
        _5 = AlignOf([std::boxed::Box<dyn FooTrait>; 3]);
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> bb1;
    }

    bb1: {
        _7 = ShallowInitBox(move _6, [std::boxed::Box<dyn FooTrait>; 3]);
        _11 = BarStruct { x: const 0_usize };
        _10 = Box::<BarStruct>::new(move _11) -> [return: bb2, unwind: bb24];
    }

    bb2: {
        _9 = move _10 as std::boxed::Box<dyn FooTrait> (Pointer(Unsize));
        _8 = move _9;
        _15 = BarStruct { x: const 1_usize };
        _14 = Box::<BarStruct>::new(move _15) -> [return: bb3, unwind: bb20];
    }

    bb3: {
        _13 = move _14 as std::boxed::Box<dyn FooTrait> (Pointer(Unsize));
        _12 = move _13;
        _18 = BarStruct { x: const 2_usize };
        _17 = Box::<BarStruct>::new(move _18) -> [return: bb4, unwind: bb18];
    }

    bb4: {
        _16 = move _17 as std::boxed::Box<dyn FooTrait> (Pointer(Unsize));
        _52 = (((_7.0: std::ptr::Unique<[std::boxed::Box<dyn FooTrait>; 3]>).0: std::ptr::NonNull<[std::boxed::Box<dyn FooTrait>; 3]>).0: *const [std::boxed::Box<dyn FooTrait>; 3]);
        _54 = _52 as *const () (PtrToPtr);
        _55 = _54 as usize (Transmute);
        _56 = AlignOf(std::boxed::Box<dyn FooTrait>);
        _57 = Sub(_56, const 1_usize);
        _58 = BitAnd(_55, _57);
        _59 = Eq(_58, const 0_usize);
        assert(_59, "misaligned pointer dereference: address must be a multiple of {} but is {}", _56, _55) -> [success: bb25, unwind unreachable];
    }

    bb5: {
        _22 = &_1;
        _21 = Vec::<Box<dyn FooTrait>>::len(move _22) -> [return: bb6, unwind: bb17];
    }

    bb6: {
        _20 = std::ops::Range::<usize> { start: const 0_usize, end: move _21 };
        _19 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _20) -> [return: bb7, unwind: bb17];
    }

    bb7: {
        _23 = move _19;
        goto -> bb8;
    }

    bb8: {
        _25 = &mut _23;
        _24 = <std::ops::Range<usize> as Iterator>::next(_25) -> [return: bb9, unwind: bb17];
    }

    bb9: {
        _26 = discriminant(_24);
        switchInt(move _26) -> [0: bb12, 1: bb10, otherwise: bb11];
    }

    bb10: {
        _27 = ((_24 as Some).0: usize);
        _29 = &_27;
        _34 = &_1;
        _35 = _27;
        _33 = <Vec<Box<dyn FooTrait>> as Index<usize>>::index(move _34, move _35) -> [return: bb13, unwind: bb17];
    }

    bb11: {
        unreachable;
    }

    bb12: {
        drop(_1) -> bb16;
    }

    bb13: {
        _45 = deref_copy (*_33);
        _53 = (((_45.0: std::ptr::Unique<dyn FooTrait>).0: std::ptr::NonNull<dyn FooTrait>).0: *const dyn FooTrait);
        _32 = &(*_53);
        _31 = <dyn FooTrait as FooTrait>::foo(move _32) -> [return: bb14, unwind: bb17];
    }

    bb14: {
        _30 = &_31;
        _28 = (move _29, move _30);
        _36 = (_28.0: &usize);
        _37 = (_28.1: &usize);
        _40 = (*_36);
        _41 = (*_37);
        _39 = Eq(move _40, move _41);
        _38 = Not(move _39);
        switchInt(move _38) -> [0: bb8, otherwise: bb15];
    }

    bb15: {
        _42 = core::panicking::AssertKind::Eq;
        _44 = Option::<Arguments<'_>>::None;
        _43 = core::panicking::assert_failed::<usize, usize>(move _42, _36, _37, move _44) -> bb17;
    }

    bb16: {
        return;
    }

    bb17 (cleanup): {
        drop(_1) -> [return: bb21, unwind terminate];
    }

    bb18 (cleanup): {
        drop(_12) -> [return: bb19, unwind terminate];
    }

    bb19 (cleanup): {
        drop(_8) -> [return: bb22, unwind terminate];
    }

    bb20 (cleanup): {
        drop(_8) -> [return: bb23, unwind terminate];
    }

    bb21 (cleanup): {
        resume;
    }

    bb22 (cleanup): {
        _46 = &mut _7;
        _47 = <Box<[Box<dyn FooTrait>; 3]> as Drop>::drop(move _46) -> [return: bb26, unwind terminate];
    }

    bb23 (cleanup): {
        _48 = &mut _7;
        _49 = <Box<[Box<dyn FooTrait>; 3]> as Drop>::drop(move _48) -> [return: bb27, unwind terminate];
    }

    bb24 (cleanup): {
        _50 = &mut _7;
        _51 = <Box<[Box<dyn FooTrait>; 3]> as Drop>::drop(move _50) -> [return: bb28, unwind terminate];
    }

    bb25: {
        (*_52) = [move _8, move _12, move _16];
        _3 = move _7;
        _2 = move _3 as std::boxed::Box<[std::boxed::Box<dyn FooTrait>]> (Pointer(Unsize));
        _1 = slice::<impl [Box<dyn FooTrait>]>::into_vec::<std::alloc::Global>(move _2) -> bb5;
    }

    bb26 (cleanup): {
        goto -> bb21;
    }

    bb27 (cleanup): {
        goto -> bb21;
    }

    bb28 (cleanup): {
        goto -> bb21;
    }
}
