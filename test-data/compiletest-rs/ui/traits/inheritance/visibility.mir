// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn traits::<impl at ui/traits/inheritance/visibility.rs:6:5: 6:23>::f(_1: &isize) -> isize {
    debug self => _1;
    let mut _0: isize;

    bb0: {
        _0 = const 10_isize;
        return;
    }
}

fn f(_1: &T) -> () {
    debug x => _1;
    let mut _0: ();
    let mut _2: (&isize, &isize);
    let mut _3: &isize;
    let _4: isize;
    let mut _5: &isize;
    let _6: isize;
    let _7: &isize;
    let _8: &isize;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: isize;
    let mut _12: isize;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _7;
        debug right_val => _8;
        let _13: core::panicking::AssertKind;
        scope 2 {
            debug kind => _13;
        }
    }

    bb0: {
        _4 = <T as Foo>::f(_1) -> bb1;
    }

    bb1: {
        _3 = &_4;
        _6 = const 10_isize;
        _5 = &_6;
        _2 = (move _3, move _5);
        _7 = (_2.0: &isize);
        _8 = (_2.1: &isize);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<isize, isize>(move _13, _7, _8, move _15);
    }

    bb3: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: &isize;
    let _2: isize;

    bb0: {
        _2 = const 0_isize;
        _1 = &_2;
        _0 = f::<isize>(_1) -> bb1;
    }

    bb1: {
        return;
    }
}
