// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/inheritance/call-bound-inherited.rs:9:1: 9:15>::f(_1: &A) -> isize {
    debug self => _1;
    let mut _0: isize;

    bb0: {
        _0 = const 10_isize;
        return;
    }
}

fn <impl at ui/traits/inheritance/call-bound-inherited.rs:10:1: 10:15>::g(_1: &A) -> isize {
    debug self => _1;
    let mut _0: isize;

    bb0: {
        _0 = const 20_isize;
        return;
    }
}

fn gg(_1: &T) -> isize {
    debug a => _1;
    let mut _0: isize;

    bb0: {
        _0 = <T as Foo>::f(_1) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: &A;
    let _2: A;
    let mut _3: (&isize, &isize);
    let mut _4: &isize;
    let _5: isize;
    let mut _6: &isize;
    let _7: isize;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: isize;
    let mut _13: isize;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug a => _1;
        let _8: &isize;
        let _9: &isize;
        scope 2 {
            debug left_val => _8;
            debug right_val => _9;
            let _14: core::panicking::AssertKind;
            scope 3 {
                debug kind => _14;
            }
        }
    }

    bb0: {
        _2 = A { x: const 3_isize };
        _1 = &_2;
        _5 = gg::<A>(_1) -> bb1;
    }

    bb1: {
        _4 = &_5;
        _7 = const 10_isize;
        _6 = &_7;
        _3 = (move _4, move _6);
        _8 = (_3.0: &isize);
        _9 = (_3.1: &isize);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<isize, isize>(move _14, _8, _9, move _16);
    }

    bb3: {
        return;
    }
}
