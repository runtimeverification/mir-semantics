// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/inheritance/overloading.rs:7:10: 7:15>::clone(_1: &MyInt) -> MyInt {
    debug self => _1;
    let mut _0: MyInt;
    let mut _2: isize;
    let _3: &isize;

    bb0: {
        _3 = &((*_1).0: isize);
        _2 = (*_3);
        _0 = MyInt { val: move _2 };
        return;
    }
}

fn <impl at ui/traits/inheritance/overloading.rs:7:17: 7:22>::fmt(_1: &MyInt, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &&isize;
    let _7: &isize;

    bb0: {
        _3 = const "MyInt";
        _4 = const "val";
        _7 = &((*_1).0: isize);
        _6 = &_7;
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _3, _4, move _5) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/traits/inheritance/overloading.rs:10:1: 10:19>::add(_1: MyInt, _2: MyInt) -> MyInt {
    debug self => _1;
    debug other => _2;
    let mut _0: MyInt;
    let mut _3: isize;
    let mut _4: isize;
    let mut _5: isize;

    bb0: {
        _4 = (_1.0: isize);
        _5 = (_2.0: isize);
        _3 = Add(move _4, move _5);
        _0 = mi(move _3) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/traits/inheritance/overloading.rs:16:1: 16:19>::sub(_1: MyInt, _2: MyInt) -> MyInt {
    debug self => _1;
    debug other => _2;
    let mut _0: MyInt;
    let mut _3: isize;
    let mut _4: isize;
    let mut _5: isize;

    bb0: {
        _4 = (_1.0: isize);
        _5 = (_2.0: isize);
        _3 = Sub(move _4, move _5);
        _0 = mi(move _3) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/traits/inheritance/overloading.rs:22:1: 22:19>::mul(_1: MyInt, _2: MyInt) -> MyInt {
    debug self => _1;
    debug other => _2;
    let mut _0: MyInt;
    let mut _3: isize;
    let mut _4: isize;
    let mut _5: isize;

    bb0: {
        _4 = (_1.0: isize);
        _5 = (_2.0: isize);
        _3 = Mul(move _4, move _5);
        _0 = mi(move _3) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/traits/inheritance/overloading.rs:28:1: 28:25>::eq(_1: &MyInt, _2: &MyInt) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: isize;
    let mut _4: isize;

    bb0: {
        _3 = ((*_1).0: isize);
        _4 = ((*_2).0: isize);
        _0 = Eq(move _3, move _4);
        return;
    }
}

fn <impl at ui/traits/inheritance/overloading.rs:28:1: 28:25>::ne(_1: &MyInt, _2: &MyInt) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;

    bb0: {
        _3 = <MyInt as PartialEq>::eq(_1, _2) -> bb1;
    }

    bb1: {
        _0 = Not(move _3);
        return;
    }
}

fn f(_1: T, _2: T) -> (T, T, T) {
    debug x => _1;
    debug y => _2;
    let mut _0: (T, T, T);
    let mut _3: T;
    let mut _4: T;
    let mut _5: &T;
    let mut _6: T;
    let mut _7: &T;
    let mut _8: T;
    let mut _9: T;
    let mut _10: &T;
    let mut _11: T;
    let mut _12: &T;
    let mut _13: T;
    let mut _14: T;
    let mut _15: T;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: bool;

    bb0: {
        _19 = const false;
        _18 = const false;
        _17 = const false;
        _16 = const false;
        _19 = const true;
        _18 = const true;
        _5 = &_1;
        _4 = <T as Clone>::clone(move _5) -> [return: bb1, unwind: bb17];
    }

    bb1: {
        _17 = const true;
        _7 = &_2;
        _6 = <T as Clone>::clone(move _7) -> [return: bb2, unwind: bb15];
    }

    bb2: {
        _17 = const false;
        _3 = <T as Add>::add(move _4, move _6) -> [return: bb3, unwind: bb15];
    }

    bb3: {
        _17 = const false;
        _10 = &_1;
        _9 = <T as Clone>::clone(move _10) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        _16 = const true;
        _12 = &_2;
        _11 = <T as Clone>::clone(move _12) -> [return: bb5, unwind: bb13];
    }

    bb5: {
        _16 = const false;
        _8 = <T as Sub>::sub(move _9, move _11) -> [return: bb6, unwind: bb13];
    }

    bb6: {
        _16 = const false;
        _19 = const false;
        _14 = move _1;
        _18 = const false;
        _15 = move _2;
        _13 = <T as Mul>::mul(move _14, move _15) -> [return: bb7, unwind: bb8];
    }

    bb7: {
        _0 = (move _3, move _8, move _13);
        return;
    }

    bb8 (cleanup): {
        drop(_8) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        drop(_3) -> [return: bb17, unwind terminate];
    }

    bb10 (cleanup): {
        switchInt(_19) -> [0: bb11, otherwise: bb18];
    }

    bb11 (cleanup): {
        resume;
    }

    bb12 (cleanup): {
        drop(_9) -> [return: bb9, unwind terminate];
    }

    bb13 (cleanup): {
        switchInt(_16) -> [0: bb9, otherwise: bb12];
    }

    bb14 (cleanup): {
        drop(_4) -> [return: bb17, unwind terminate];
    }

    bb15 (cleanup): {
        switchInt(_17) -> [0: bb17, otherwise: bb14];
    }

    bb16 (cleanup): {
        drop(_2) -> [return: bb10, unwind terminate];
    }

    bb17 (cleanup): {
        switchInt(_18) -> [0: bb10, otherwise: bb16];
    }

    bb18 (cleanup): {
        drop(_1) -> [return: bb11, unwind terminate];
    }
}

fn mi(_1: isize) -> MyInt {
    debug v => _1;
    let mut _0: MyInt;

    bb0: {
        _0 = MyInt { val: _1 };
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: MyInt;
    let _2: MyInt;
    let mut _3: (MyInt, MyInt);
    let mut _4: MyInt;
    let mut _5: MyInt;
    let mut _9: (MyInt, MyInt, MyInt);
    let mut _10: (&MyInt, &MyInt);
    let mut _11: &MyInt;
    let mut _12: &MyInt;
    let _13: MyInt;
    let mut _16: bool;
    let mut _17: bool;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: (&MyInt, &MyInt);
    let mut _22: &MyInt;
    let mut _23: &MyInt;
    let _24: MyInt;
    let mut _27: bool;
    let mut _28: bool;
    let _30: !;
    let mut _31: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _32: (&MyInt, &MyInt);
    let mut _33: &MyInt;
    let mut _34: &MyInt;
    let _35: MyInt;
    let mut _38: bool;
    let mut _39: bool;
    let _41: !;
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        debug y => _2;
        let _6: MyInt;
        let _7: MyInt;
        let _8: MyInt;
        scope 2 {
            debug a => _6;
            debug b => _7;
            debug c => _8;
            let _14: &MyInt;
            let _15: &MyInt;
            let _25: &MyInt;
            let _26: &MyInt;
            let _36: &MyInt;
            let _37: &MyInt;
            scope 3 {
                debug left_val => _14;
                debug right_val => _15;
                let _18: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _18;
                }
            }
            scope 5 {
                debug left_val => _25;
                debug right_val => _26;
                let _29: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _29;
                }
            }
            scope 7 {
                debug left_val => _36;
                debug right_val => _37;
                let _40: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _40;
                }
            }
        }
    }

    bb0: {
        _4 = mi(const 3_isize) -> bb1;
    }

    bb1: {
        _5 = mi(const 5_isize) -> bb2;
    }

    bb2: {
        _3 = (move _4, move _5);
        _1 = move (_3.0: MyInt);
        _2 = move (_3.1: MyInt);
        _9 = f::<MyInt>(move _1, move _2) -> bb3;
    }

    bb3: {
        _6 = move (_9.0: MyInt);
        _7 = move (_9.1: MyInt);
        _8 = move (_9.2: MyInt);
        _11 = &_6;
        _13 = mi(const 8_isize) -> bb4;
    }

    bb4: {
        _12 = &_13;
        _10 = (move _11, move _12);
        _14 = (_10.0: &MyInt);
        _15 = (_10.1: &MyInt);
        _17 = <MyInt as PartialEq>::eq(_14, _15) -> bb5;
    }

    bb5: {
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<MyInt, MyInt>(move _18, _14, _15, move _20);
    }

    bb7: {
        _22 = &_7;
        _24 = mi(const -2_isize) -> bb8;
    }

    bb8: {
        _23 = &_24;
        _21 = (move _22, move _23);
        _25 = (_21.0: &MyInt);
        _26 = (_21.1: &MyInt);
        _28 = <MyInt as PartialEq>::eq(_25, _26) -> bb9;
    }

    bb9: {
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _29 = core::panicking::AssertKind::Eq;
        _31 = Option::<Arguments<'_>>::None;
        _30 = core::panicking::assert_failed::<MyInt, MyInt>(move _29, _25, _26, move _31);
    }

    bb11: {
        _33 = &_8;
        _35 = mi(const 15_isize) -> bb12;
    }

    bb12: {
        _34 = &_35;
        _32 = (move _33, move _34);
        _36 = (_32.0: &MyInt);
        _37 = (_32.1: &MyInt);
        _39 = <MyInt as PartialEq>::eq(_36, _37) -> bb13;
    }

    bb13: {
        _38 = Not(move _39);
        switchInt(move _38) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _40 = core::panicking::AssertKind::Eq;
        _42 = Option::<Arguments<'_>>::None;
        _41 = core::panicking::assert_failed::<MyInt, MyInt>(move _40, _36, _37, move _42);
    }

    bb15: {
        return;
    }
}
