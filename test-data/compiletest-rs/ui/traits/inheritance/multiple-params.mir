// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/inheritance/multiple-params.rs:10:1: 10:13>::a(_1: &S) -> isize {
    debug self => _1;
    let mut _0: isize;

    bb0: {
        _0 = const 10_isize;
        return;
    }
}

fn <impl at ui/traits/inheritance/multiple-params.rs:11:1: 11:13>::b(_1: &S) -> isize {
    debug self => _1;
    let mut _0: isize;

    bb0: {
        _0 = const 20_isize;
        return;
    }
}

fn <impl at ui/traits/inheritance/multiple-params.rs:12:1: 12:13>::c(_1: &S) -> isize {
    debug self => _1;
    let mut _0: isize;

    bb0: {
        _0 = const 30_isize;
        return;
    }
}

fn f(_1: &X, _2: &Y, _3: &Z) -> () {
    debug x => _1;
    debug y => _2;
    debug z => _3;
    let mut _0: ();
    let mut _4: (&isize, &isize);
    let mut _5: &isize;
    let _6: isize;
    let mut _7: &isize;
    let _8: isize;
    let _9: &isize;
    let _10: &isize;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: isize;
    let mut _14: isize;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: (&isize, &isize);
    let mut _19: &isize;
    let _20: isize;
    let mut _21: &isize;
    let _22: isize;
    let _23: &isize;
    let _24: &isize;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: isize;
    let mut _28: isize;
    let _30: !;
    let mut _31: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _32: (&isize, &isize);
    let mut _33: &isize;
    let _34: isize;
    let mut _35: &isize;
    let _36: isize;
    let _37: &isize;
    let _38: &isize;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: isize;
    let mut _42: isize;
    let _44: !;
    let mut _45: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _46: (&isize, &isize);
    let mut _47: &isize;
    let _48: isize;
    let mut _49: &isize;
    let _50: isize;
    let _51: &isize;
    let _52: &isize;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: isize;
    let mut _56: isize;
    let _58: !;
    let mut _59: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _60: (&isize, &isize);
    let mut _61: &isize;
    let _62: isize;
    let mut _63: &isize;
    let _64: isize;
    let _65: &isize;
    let _66: &isize;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: isize;
    let mut _70: isize;
    let _72: !;
    let mut _73: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _9;
        debug right_val => _10;
        let _15: core::panicking::AssertKind;
        scope 2 {
            debug kind => _15;
        }
    }
    scope 3 {
        debug left_val => _23;
        debug right_val => _24;
        let _29: core::panicking::AssertKind;
        scope 4 {
            debug kind => _29;
        }
    }
    scope 5 {
        debug left_val => _37;
        debug right_val => _38;
        let _43: core::panicking::AssertKind;
        scope 6 {
            debug kind => _43;
        }
    }
    scope 7 {
        debug left_val => _51;
        debug right_val => _52;
        let _57: core::panicking::AssertKind;
        scope 8 {
            debug kind => _57;
        }
    }
    scope 9 {
        debug left_val => _65;
        debug right_val => _66;
        let _71: core::panicking::AssertKind;
        scope 10 {
            debug kind => _71;
        }
    }

    bb0: {
        _6 = <X as A>::a(_1) -> bb1;
    }

    bb1: {
        _5 = &_6;
        _8 = const 10_isize;
        _7 = &_8;
        _4 = (move _5, move _7);
        _9 = (_4.0: &isize);
        _10 = (_4.1: &isize);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<isize, isize>(move _15, _9, _10, move _17);
    }

    bb3: {
        _20 = <Y as A>::a(_2) -> bb4;
    }

    bb4: {
        _19 = &_20;
        _22 = const 10_isize;
        _21 = &_22;
        _18 = (move _19, move _21);
        _23 = (_18.0: &isize);
        _24 = (_18.1: &isize);
        _27 = (*_23);
        _28 = (*_24);
        _26 = Eq(move _27, move _28);
        _25 = Not(move _26);
        switchInt(move _25) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _29 = core::panicking::AssertKind::Eq;
        _31 = Option::<Arguments<'_>>::None;
        _30 = core::panicking::assert_failed::<isize, isize>(move _29, _23, _24, move _31);
    }

    bb6: {
        _34 = <Y as B>::b(_2) -> bb7;
    }

    bb7: {
        _33 = &_34;
        _36 = const 20_isize;
        _35 = &_36;
        _32 = (move _33, move _35);
        _37 = (_32.0: &isize);
        _38 = (_32.1: &isize);
        _41 = (*_37);
        _42 = (*_38);
        _40 = Eq(move _41, move _42);
        _39 = Not(move _40);
        switchInt(move _39) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _43 = core::panicking::AssertKind::Eq;
        _45 = Option::<Arguments<'_>>::None;
        _44 = core::panicking::assert_failed::<isize, isize>(move _43, _37, _38, move _45);
    }

    bb9: {
        _48 = <Z as A>::a(_3) -> bb10;
    }

    bb10: {
        _47 = &_48;
        _50 = const 10_isize;
        _49 = &_50;
        _46 = (move _47, move _49);
        _51 = (_46.0: &isize);
        _52 = (_46.1: &isize);
        _55 = (*_51);
        _56 = (*_52);
        _54 = Eq(move _55, move _56);
        _53 = Not(move _54);
        switchInt(move _53) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _57 = core::panicking::AssertKind::Eq;
        _59 = Option::<Arguments<'_>>::None;
        _58 = core::panicking::assert_failed::<isize, isize>(move _57, _51, _52, move _59);
    }

    bb12: {
        _62 = <Z as C>::c(_3) -> bb13;
    }

    bb13: {
        _61 = &_62;
        _64 = const 30_isize;
        _63 = &_64;
        _60 = (move _61, move _63);
        _65 = (_60.0: &isize);
        _66 = (_60.1: &isize);
        _69 = (*_65);
        _70 = (*_66);
        _68 = Eq(move _69, move _70);
        _67 = Not(move _68);
        switchInt(move _67) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _71 = core::panicking::AssertKind::Eq;
        _73 = Option::<Arguments<'_>>::None;
        _72 = core::panicking::assert_failed::<isize, isize>(move _71, _65, _66, move _73);
    }

    bb15: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: &S;
    let _2: S;
    let _3: ();
    scope 1 {
        debug s => _1;
    }

    bb0: {
        _1 = &_2;
        _3 = f::<S, S, S>(_1, _1, _1) -> bb1;
    }

    bb1: {
        return;
    }
}
