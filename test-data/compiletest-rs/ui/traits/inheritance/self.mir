// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/inheritance/self.rs:14:1: 14:18>::f(_1: &S, _2: &S) -> () {
    debug self => _1;
    debug x => _2;
    let mut _0: ();
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let _6: &[&str; 2];
    let _7: [&str; 2];
    let mut _8: &[core::fmt::rt::Argument<'_>];
    let _9: &[core::fmt::rt::Argument<'_>; 1];
    let _10: [core::fmt::rt::Argument<'_>; 1];
    let mut _11: core::fmt::rt::Argument<'_>;
    let _12: &isize;

    bb0: {
        _7 = [const "", const "\n"];
        _6 = &_7;
        _5 = _6 as &[&str] (Pointer(Unsize));
        _12 = &((*_2).0: isize);
        _11 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_12) -> bb1;
    }

    bb1: {
        _10 = [move _11];
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> bb2;
    }

    bb2: {
        _3 = _print(move _4) -> bb3;
    }

    bb3: {
        return;
    }
}

fn <impl at ui/traits/inheritance/self.rs:20:1: 20:15>::g(_1: &S) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();

    bb0: {
        _2 = <S as Foo<S>>::f(_1, _1) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: S;
    let _2: ();
    let mut _3: &S;
    scope 1 {
        debug s => _1;
    }

    bb0: {
        _1 = S { x: const 1_isize };
        _3 = &_1;
        _2 = <S as Bar>::g(move _3) -> bb1;
    }

    bb1: {
        return;
    }
}
