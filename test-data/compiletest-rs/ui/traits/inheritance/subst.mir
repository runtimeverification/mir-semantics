// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/inheritance/subst.rs:11:1: 11:33>::add(_1: &MyInt, _2: &MyInt) -> MyInt {
    debug self => _1;
    debug other => _2;
    let mut _0: MyInt;
    let mut _3: isize;
    let mut _4: isize;
    let mut _5: isize;

    bb0: {
        _4 = ((*_1).0: isize);
        _5 = ((*_2).0: isize);
        _3 = Add(move _4, move _5);
        _0 = mi(move _3) -> bb1;
    }

    bb1: {
        return;
    }
}

fn f(_1: T, _2: T) -> T {
    debug x => _1;
    debug y => _2;
    let mut _0: T;
    let mut _3: &T;
    let _4: &T;

    bb0: {
        _3 = &_1;
        _4 = &_2;
        _0 = <T as Add<T, T>>::add(move _3, _4) -> [return: bb1, unwind: bb4];
    }

    bb1: {
        drop(_2) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        drop(_1) -> bb3;
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_2) -> [return: bb5, unwind terminate];
    }

    bb5 (cleanup): {
        drop(_1) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn mi(_1: isize) -> MyInt {
    debug v => _1;
    let mut _0: MyInt;

    bb0: {
        _0 = MyInt { val: _1 };
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: MyInt;
    let _2: MyInt;
    let mut _3: (MyInt, MyInt);
    let mut _4: MyInt;
    let mut _5: MyInt;
    let mut _7: (&isize, &isize);
    let mut _8: &isize;
    let mut _9: &isize;
    let _10: isize;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: isize;
    let mut _16: isize;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        debug y => _2;
        let _6: MyInt;
        scope 2 {
            debug z => _6;
            let _11: &isize;
            let _12: &isize;
            scope 3 {
                debug left_val => _11;
                debug right_val => _12;
                let _17: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _17;
                }
            }
        }
    }

    bb0: {
        _4 = mi(const 3_isize) -> bb1;
    }

    bb1: {
        _5 = mi(const 5_isize) -> bb2;
    }

    bb2: {
        _3 = (move _4, move _5);
        _1 = move (_3.0: MyInt);
        _2 = move (_3.1: MyInt);
        _6 = f::<MyInt>(move _1, move _2) -> bb3;
    }

    bb3: {
        _8 = &(_6.0: isize);
        _10 = const 8_isize;
        _9 = &_10;
        _7 = (move _8, move _9);
        _11 = (_7.0: &isize);
        _12 = (_7.1: &isize);
        _15 = (*_11);
        _16 = (*_12);
        _14 = Eq(move _15, move _16);
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<isize, isize>(move _17, _11, _12, move _19);
    }

    bb5: {
        return;
    }
}
