// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/inheritance/auto.rs:16:1: 16:15>::f(_1: &A) -> isize {
    debug self => _1;
    let mut _0: isize;

    bb0: {
        _0 = const 10_isize;
        return;
    }
}

fn <impl at ui/traits/inheritance/auto.rs:17:1: 17:15>::g(_1: &A) -> isize {
    debug self => _1;
    let mut _0: isize;

    bb0: {
        _0 = const 20_isize;
        return;
    }
}

fn <impl at ui/traits/inheritance/auto.rs:18:1: 18:15>::h(_1: &A) -> isize {
    debug self => _1;
    let mut _0: isize;

    bb0: {
        _0 = const 30_isize;
        return;
    }
}

fn f(_1: &T) -> () {
    debug a => _1;
    let mut _0: ();
    let mut _2: (&isize, &isize);
    let mut _3: &isize;
    let _4: isize;
    let mut _5: &isize;
    let _6: isize;
    let _7: &isize;
    let _8: &isize;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: isize;
    let mut _12: isize;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&isize, &isize);
    let mut _17: &isize;
    let _18: isize;
    let mut _19: &isize;
    let _20: isize;
    let _21: &isize;
    let _22: &isize;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: isize;
    let mut _26: isize;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _30: (&isize, &isize);
    let mut _31: &isize;
    let _32: isize;
    let mut _33: &isize;
    let _34: isize;
    let _35: &isize;
    let _36: &isize;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: isize;
    let mut _40: isize;
    let _42: !;
    let mut _43: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _7;
        debug right_val => _8;
        let _13: core::panicking::AssertKind;
        scope 2 {
            debug kind => _13;
        }
    }
    scope 3 {
        debug left_val => _21;
        debug right_val => _22;
        let _27: core::panicking::AssertKind;
        scope 4 {
            debug kind => _27;
        }
    }
    scope 5 {
        debug left_val => _35;
        debug right_val => _36;
        let _41: core::panicking::AssertKind;
        scope 6 {
            debug kind => _41;
        }
    }

    bb0: {
        _4 = <T as Foo>::f(_1) -> bb1;
    }

    bb1: {
        _3 = &_4;
        _6 = const 10_isize;
        _5 = &_6;
        _2 = (move _3, move _5);
        _7 = (_2.0: &isize);
        _8 = (_2.1: &isize);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<isize, isize>(move _13, _7, _8, move _15);
    }

    bb3: {
        _18 = <T as Bar>::g(_1) -> bb4;
    }

    bb4: {
        _17 = &_18;
        _20 = const 20_isize;
        _19 = &_20;
        _16 = (move _17, move _19);
        _21 = (_16.0: &isize);
        _22 = (_16.1: &isize);
        _25 = (*_21);
        _26 = (*_22);
        _24 = Eq(move _25, move _26);
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<isize, isize>(move _27, _21, _22, move _29);
    }

    bb6: {
        _32 = <T as Baz>::h(_1) -> bb7;
    }

    bb7: {
        _31 = &_32;
        _34 = const 30_isize;
        _33 = &_34;
        _30 = (move _31, move _33);
        _35 = (_30.0: &isize);
        _36 = (_30.1: &isize);
        _39 = (*_35);
        _40 = (*_36);
        _38 = Eq(move _39, move _40);
        _37 = Not(move _38);
        switchInt(move _37) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _41 = core::panicking::AssertKind::Eq;
        _43 = Option::<Arguments<'_>>::None;
        _42 = core::panicking::assert_failed::<isize, isize>(move _41, _35, _36, move _43);
    }

    bb9: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: &A;
    let _2: A;
    let _3: ();
    scope 1 {
        debug a => _1;
    }

    bb0: {
        _2 = A { x: const 3_isize };
        _1 = &_2;
        _3 = f::<A>(_1) -> bb1;
    }

    bb1: {
        return;
    }
}
