// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/region-pointer-simple.rs:10:1: 10:15>::f(_1: &A) -> isize {
    debug self => _1;
    let mut _0: isize;
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 2];
    let _6: [&str; 2];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &isize;

    bb0: {
        _6 = [const "Today's number is ", const "\n"];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _11 = &((*_1).0: isize);
        _10 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_11) -> bb1;
    }

    bb1: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb2;
    }

    bb2: {
        _2 = _print(move _3) -> bb3;
    }

    bb3: {
        _0 = ((*_1).0: isize);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: A;
    let mut _2: &dyn Foo;
    let _3: &A;
    let mut _4: (&isize, &isize);
    let mut _5: &isize;
    let _6: isize;
    let mut _7: &isize;
    let _8: isize;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: isize;
    let mut _14: isize;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug a => _1;
        scope 2 {
            debug b => _2;
            let _9: &isize;
            let _10: &isize;
            scope 3 {
                debug left_val => _9;
                debug right_val => _10;
                let _15: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _15;
                }
            }
        }
    }

    bb0: {
        _1 = A { x: const 3_isize };
        _3 = &_1;
        _2 = _3 as &dyn Foo (Pointer(Unsize));
        _6 = <dyn Foo as Foo>::f(_2) -> bb1;
    }

    bb1: {
        _5 = &_6;
        _8 = const 3_isize;
        _7 = &_8;
        _4 = (move _5, move _7);
        _9 = (_4.0: &isize);
        _10 = (_4.1: &isize);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<isize, isize>(move _15, _9, _10, move _17);
    }

    bb3: {
        return;
    }
}
