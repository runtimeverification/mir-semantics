// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/alignment-gep-tup-like-1.rs:19:1: 19:42>::f(_1: &Invoker<A>) -> (A, u16) {
    debug self => _1;
    let mut _0: (A, u16);
    let mut _2: A;
    let mut _3: &A;
    let mut _4: u16;

    bb0: {
        _3 = &((*_1).0: A);
        _2 = <A as Clone>::clone(move _3) -> bb1;
    }

    bb1: {
        _4 = ((*_1).1: u16);
        _0 = (move _2, move _4);
        return;
    }
}

fn f(_1: A, _2: u16) -> Box<dyn Invokable<A>> {
    debug a => _1;
    debug b => _2;
    let mut _0: std::boxed::Box<dyn Invokable<A>>;
    let mut _3: std::boxed::Box<Invoker<A>>;
    let mut _4: Invoker<A>;

    bb0: {
        _4 = Invoker::<A> { a: move _1, b: _2 };
        _3 = Box::<Invoker<A>>::new(move _4) -> bb1;
    }

    bb1: {
        _0 = move _3 as std::boxed::Box<dyn Invokable<A>> (Pointer(Unsize));
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: u64;
    let _2: u16;
    let mut _3: (u64, u16);
    let mut _4: &dyn Invokable<u64>;
    let _5: std::boxed::Box<dyn Invokable<u64>>;
    let _6: ();
    let mut _7: std::fmt::Arguments<'_>;
    let mut _8: &[&str];
    let _9: &[&str; 3];
    let _10: [&str; 3];
    let mut _11: &[core::fmt::rt::Argument<'_>];
    let _12: &[core::fmt::rt::Argument<'_>; 2];
    let _13: [core::fmt::rt::Argument<'_>; 2];
    let mut _14: core::fmt::rt::Argument<'_>;
    let _15: &u64;
    let mut _16: core::fmt::rt::Argument<'_>;
    let _17: &u16;
    let mut _18: (&u64, &u64);
    let mut _19: &u64;
    let mut _20: &u64;
    let _21: u64;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: u64;
    let mut _27: u64;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&u16, &u16);
    let mut _32: &u16;
    let mut _33: &u16;
    let _34: u16;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: u16;
    let mut _40: u16;
    let _42: !;
    let mut _43: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _44: *const dyn Invokable<u64>;
    scope 1 {
        debug a => _1;
        debug b => _2;
        let _22: &u64;
        let _23: &u64;
        let _35: &u16;
        let _36: &u16;
        scope 2 {
            debug left_val => _22;
            debug right_val => _23;
            let _28: core::panicking::AssertKind;
            scope 3 {
                debug kind => _28;
            }
        }
        scope 4 {
            debug left_val => _35;
            debug right_val => _36;
            let _41: core::panicking::AssertKind;
            scope 5 {
                debug kind => _41;
            }
        }
    }

    bb0: {
        _5 = f::<u64>(const 22_u64, const 44_u16) -> bb1;
    }

    bb1: {
        _44 = (((_5.0: std::ptr::Unique<dyn Invokable<u64>>).0: std::ptr::NonNull<dyn Invokable<u64>>).0: *const dyn Invokable<u64>);
        _4 = &(*_44);
        _3 = <dyn Invokable<u64> as Invokable<u64>>::f(move _4) -> [return: bb2, unwind: bb12];
    }

    bb2: {
        _1 = (_3.0: u64);
        _2 = (_3.1: u16);
        drop(_5) -> bb3;
    }

    bb3: {
        _10 = [const "a=", const " b=", const "\n"];
        _9 = &_10;
        _8 = _9 as &[&str] (Pointer(Unsize));
        _15 = &_1;
        _14 = core::fmt::rt::Argument::<'_>::new_display::<u64>(_15) -> bb4;
    }

    bb4: {
        _17 = &_2;
        _16 = core::fmt::rt::Argument::<'_>::new_display::<u16>(_17) -> bb5;
    }

    bb5: {
        _13 = [move _14, move _16];
        _12 = &_13;
        _11 = _12 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _7 = Arguments::<'_>::new_v1(move _8, move _11) -> bb6;
    }

    bb6: {
        _6 = _print(move _7) -> bb7;
    }

    bb7: {
        _19 = &_1;
        _21 = const 22_u64;
        _20 = &_21;
        _18 = (move _19, move _20);
        _22 = (_18.0: &u64);
        _23 = (_18.1: &u64);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<u64, u64>(move _28, _22, _23, move _30);
    }

    bb9: {
        _32 = &_2;
        _34 = const 44_u16;
        _33 = &_34;
        _31 = (move _32, move _33);
        _35 = (_31.0: &u16);
        _36 = (_31.1: &u16);
        _39 = (*_35);
        _40 = (*_36);
        _38 = Eq(move _39, move _40);
        _37 = Not(move _38);
        switchInt(move _37) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _41 = core::panicking::AssertKind::Eq;
        _43 = Option::<Arguments<'_>>::None;
        _42 = core::panicking::assert_failed::<u16, u16>(move _41, _35, _36, move _43);
    }

    bb11: {
        return;
    }

    bb12 (cleanup): {
        drop(_5) -> [return: bb13, unwind terminate];
    }

    bb13 (cleanup): {
        resume;
    }
}
