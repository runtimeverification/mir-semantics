// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const C1: u8 = {
    let mut _0: u8;
    let mut _1: u8;

    bb0: {
        StorageLive(_1);
        _1 = const 10_u8;
        _0 = _1;
        StorageDead(_1);
        return;
    }
}

const C2: [u8; 1] = {
    let mut _0: [u8; 1];

    bb0: {
        _0 = [const 1_u8];
        return;
    }
}

C2::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: usize;

    bb0: {
        StorageLive(_1);
        _1 = const 1_usize;
        _0 = _1;
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&i32, &i32);
    let mut _2: &i32;
    let _3: i32;
    let mut _4: &i32;
    let _5: i32;
    let _6: &i32;
    let _7: &i32;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: i32;
    let mut _11: i32;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&u8, &u8);
    let mut _16: &u8;
    let _17: [u8; 1];
    let _18: usize;
    let mut _19: usize;
    let mut _20: bool;
    let mut _21: &u8;
    let _22: u8;
    let _23: &u8;
    let _24: &u8;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: u8;
    let mut _28: u8;
    let _30: !;
    let mut _31: std::option::Option<std::fmt::Arguments<'_>>;
    let _32: S;
    let mut _33: u8;
    let _35: [u8; 3];
    let mut _37: std::vec::Vec<u8>;
    let mut _38: std::iter::Cloned<std::slice::Iter<'_, u8>>;
    let mut _39: std::slice::Iter<'_, u8>;
    let mut _40: &[u8];
    let _41: ();
    let mut _42: &mut std::vec::Vec<u8>;
    let mut _43: (&std::vec::Vec<u8>, &[u8; 4]);
    let mut _44: &std::vec::Vec<u8>;
    let mut _45: &[u8; 4];
    let _46: [u8; 4];
    let mut _49: bool;
    let mut _50: bool;
    let _52: !;
    let mut _53: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _55: u8;
    let mut _57: u16;
    let mut _58: u8;
    let mut _59: (&u8, &u8);
    let mut _60: &u8;
    let _61: &u8;
    let mut _62: &std::vec::Vec<u8>;
    let mut _63: usize;
    let mut _64: usize;
    let mut _65: u8;
    let mut _66: &u8;
    let _67: u8;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: u8;
    let mut _73: u8;
    let _75: !;
    let mut _76: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _77: (&usize, &usize);
    let mut _78: &usize;
    let _79: usize;
    let _80: &u8;
    let mut _81: &usize;
    let _82: usize;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: usize;
    let mut _88: usize;
    let _90: !;
    let mut _91: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _92: (&usize, &usize);
    let mut _93: &usize;
    let _94: usize;
    let _95: &u16;
    let mut _96: &usize;
    let _97: usize;
    let mut _100: bool;
    let mut _101: bool;
    let mut _102: usize;
    let mut _103: usize;
    let _105: !;
    let mut _106: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _107: (&u16, &u16);
    let mut _108: &u16;
    let mut _109: &u16;
    let _110: u16;
    let mut _113: bool;
    let mut _114: bool;
    let mut _115: u16;
    let mut _116: u16;
    let _118: !;
    let mut _119: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _121: std::vec::Vec<u8>;
    let mut _122: std::boxed::Box<[u8]>;
    let mut _123: usize;
    let mut _124: usize;
    let mut _125: *mut u8;
    let mut _126: std::boxed::Box<[u8; 3]>;
    let mut _127: (&std::vec::Vec<u8>, &[u8; 3]);
    let mut _128: &std::vec::Vec<u8>;
    let mut _129: &[u8; 3];
    let _130: [u8; 3];
    let mut _133: bool;
    let mut _134: bool;
    let _136: !;
    let mut _137: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _138: *const [u8; 3];
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }
    scope 3 {
        debug left_val => _23;
        debug right_val => _24;
        let _29: core::panicking::AssertKind;
        scope 4 {
            debug kind => _29;
        }
    }
    scope 5 {
        debug s => _32;
        let _34: &[u8; 3];
        scope 6 {
            debug arr => _34;
            let mut _36: std::vec::Vec<u8>;
            scope 7 {
                debug v => _36;
                let _47: &std::vec::Vec<u8>;
                let _48: &[u8; 4];
                let _54: u8;
                scope 8 {
                    debug left_val => _47;
                    debug right_val => _48;
                    let _51: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _51;
                    }
                }
                scope 10 {
                    debug a => _54;
                    let _56: u16;
                    scope 11 {
                        debug b => _56;
                        let _68: &u8;
                        let _69: &u8;
                        let _83: &usize;
                        let _84: &usize;
                        let _98: &usize;
                        let _99: &usize;
                        let _111: &u16;
                        let _112: &u16;
                        let mut _120: std::vec::Vec<u8>;
                        scope 12 {
                            debug left_val => _68;
                            debug right_val => _69;
                            let _74: core::panicking::AssertKind;
                            scope 13 {
                                debug kind => _74;
                            }
                        }
                        scope 14 {
                            debug left_val => _83;
                            debug right_val => _84;
                            let _89: core::panicking::AssertKind;
                            scope 15 {
                                debug kind => _89;
                            }
                        }
                        scope 16 {
                            debug left_val => _98;
                            debug right_val => _99;
                            let _104: core::panicking::AssertKind;
                            scope 17 {
                                debug kind => _104;
                            }
                        }
                        scope 18 {
                            debug left_val => _111;
                            debug right_val => _112;
                            let _117: core::panicking::AssertKind;
                            scope 19 {
                                debug kind => _117;
                            }
                        }
                        scope 20 {
                            debug v => _120;
                            let _131: &std::vec::Vec<u8>;
                            let _132: &[u8; 3];
                            scope 21 {
                            }
                            scope 22 {
                                debug left_val => _131;
                                debug right_val => _132;
                                let _135: core::panicking::AssertKind;
                                scope 23 {
                                    debug kind => _135;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _3 = <u8 as Into<i32>>::into(const _) -> bb1;
    }

    bb1: {
        _2 = &_3;
        _5 = const 10_i32;
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &i32);
        _7 = (_1.1: &i32);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<i32, i32>(move _12, _6, _7, move _14);
    }

    bb3: {
        _17 = const _;
        _18 = const 0_usize;
        _19 = const 1_usize;
        _20 = Lt(_18, _19);
        assert(move _20, "index out of bounds: the length is {} but the index is {}", move _19, _18) -> bb4;
    }

    bb4: {
        _16 = &_17[_18];
        _22 = const 1_u8;
        _21 = &_22;
        _15 = (move _16, move _21);
        _23 = (_15.0: &u8);
        _24 = (_15.1: &u8);
        _27 = (*_23);
        _28 = (*_24);
        _26 = Eq(move _27, move _28);
        _25 = Not(move _26);
        switchInt(move _25) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _29 = core::panicking::AssertKind::Eq;
        _31 = Option::<Arguments<'_>>::None;
        _30 = core::panicking::assert_failed::<u8, u8>(move _29, _23, _24, move _31);
    }

    bb6: {
        _33 = const 10_u8;
        _32 = S { a: _33 };
        _35 = [const 1_u8, const 2_u8, const 3_u8];
        _34 = &_35;
        _40 = _34 as &[u8] (Pointer(Unsize));
        _39 = core::slice::<impl [u8]>::iter(move _40) -> bb7;
    }

    bb7: {
        _38 = <std::slice::Iter<'_, u8> as Iterator>::cloned::<'_, u8>(move _39) -> bb8;
    }

    bb8: {
        _37 = <Cloned<std::slice::Iter<'_, u8>> as Iterator>::collect::<Vec<u8>>(move _38) -> bb9;
    }

    bb9: {
        _36 = move _37;
        _42 = &mut _36;
        _41 = Vec::<u8>::push(move _42, const 4_u8) -> [return: bb10, unwind: bb38];
    }

    bb10: {
        _44 = &_36;
        _46 = [const 1_u8, const 2_u8, const 3_u8, const 4_u8];
        _45 = &_46;
        _43 = (move _44, move _45);
        _47 = (_43.0: &std::vec::Vec<u8>);
        _48 = (_43.1: &[u8; 4]);
        _50 = <Vec<u8> as PartialEq<[u8; 4]>>::eq(_47, _48) -> [return: bb11, unwind: bb38];
    }

    bb11: {
        _49 = Not(move _50);
        switchInt(move _49) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _51 = core::panicking::AssertKind::Eq;
        _53 = Option::<Arguments<'_>>::None;
        _52 = core::panicking::assert_failed::<Vec<u8>, [u8; 4]>(move _51, _47, _48, move _53) -> bb38;
    }

    bb13: {
        _55 = const 1_u8;
        _54 = _55;
        _58 = _54;
        _57 = <u8 as Into<u16>>::into(move _58) -> [return: bb14, unwind: bb38];
    }

    bb14: {
        _56 = _57;
        _62 = &_36;
        _65 = _54;
        _64 = <u8 as Into<usize>>::into(move _65) -> [return: bb15, unwind: bb38];
    }

    bb15: {
        _63 = _64;
        _61 = <Vec<u8> as Index<usize>>::index(move _62, move _63) -> [return: bb16, unwind: bb38];
    }

    bb16: {
        _60 = _61;
        _67 = const 2_u8;
        _66 = &_67;
        _59 = (move _60, move _66);
        _68 = (_59.0: &u8);
        _69 = (_59.1: &u8);
        _72 = (*_68);
        _73 = (*_69);
        _71 = Eq(move _72, move _73);
        _70 = Not(move _71);
        switchInt(move _70) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _74 = core::panicking::AssertKind::Eq;
        _76 = Option::<Arguments<'_>>::None;
        _75 = core::panicking::assert_failed::<u8, u8>(move _74, _68, _69, move _76) -> bb38;
    }

    bb18: {
        _80 = &_54;
        _79 = std::mem::size_of_val::<u8>(_80) -> [return: bb19, unwind: bb38];
    }

    bb19: {
        _78 = &_79;
        _82 = const 1_usize;
        _81 = &_82;
        _77 = (move _78, move _81);
        _83 = (_77.0: &usize);
        _84 = (_77.1: &usize);
        _87 = (*_83);
        _88 = (*_84);
        _86 = Eq(move _87, move _88);
        _85 = Not(move _86);
        switchInt(move _85) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _89 = core::panicking::AssertKind::Eq;
        _91 = Option::<Arguments<'_>>::None;
        _90 = core::panicking::assert_failed::<usize, usize>(move _89, _83, _84, move _91) -> bb38;
    }

    bb21: {
        _95 = &_56;
        _94 = std::mem::size_of_val::<u16>(_95) -> [return: bb22, unwind: bb38];
    }

    bb22: {
        _93 = &_94;
        _97 = const 2_usize;
        _96 = &_97;
        _92 = (move _93, move _96);
        _98 = (_92.0: &usize);
        _99 = (_92.1: &usize);
        _102 = (*_98);
        _103 = (*_99);
        _101 = Eq(move _102, move _103);
        _100 = Not(move _101);
        switchInt(move _100) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _104 = core::panicking::AssertKind::Eq;
        _106 = Option::<Arguments<'_>>::None;
        _105 = core::panicking::assert_failed::<usize, usize>(move _104, _98, _99, move _106) -> bb38;
    }

    bb24: {
        _108 = &_56;
        _110 = const 1_u16;
        _109 = &_110;
        _107 = (move _108, move _109);
        _111 = (_107.0: &u16);
        _112 = (_107.1: &u16);
        _115 = (*_111);
        _116 = (*_112);
        _114 = Eq(move _115, move _116);
        _113 = Not(move _114);
        switchInt(move _113) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _117 = core::panicking::AssertKind::Eq;
        _119 = Option::<Arguments<'_>>::None;
        _118 = core::panicking::assert_failed::<u16, u16>(move _117, _111, _112, move _119) -> bb38;
    }

    bb26: {
        _120 = Vec::<u8>::new() -> [return: bb27, unwind: bb38];
    }

    bb27: {
        _123 = SizeOf([u8; 3]);
        _124 = AlignOf([u8; 3]);
        _125 = alloc::alloc::exchange_malloc(move _123, move _124) -> [return: bb28, unwind: bb37];
    }

    bb28: {
        _126 = ShallowInitBox(move _125, [u8; 3]);
        _138 = (((_126.0: std::ptr::Unique<[u8; 3]>).0: std::ptr::NonNull<[u8; 3]>).0: *const [u8; 3]);
        (*_138) = [const 1_u8, const 2_u8, const 3_u8];
        _122 = move _126 as std::boxed::Box<[u8]> (Pointer(Unsize));
        _121 = slice::<impl [u8]>::into_vec::<std::alloc::Global>(move _122) -> [return: bb29, unwind: bb37];
    }

    bb29: {
        drop(_120) -> [return: bb30, unwind: bb31];
    }

    bb30: {
        _120 = move _121;
        _128 = &_120;
        _130 = [const 1_u8, const 2_u8, const 3_u8];
        _129 = &_130;
        _127 = (move _128, move _129);
        _131 = (_127.0: &std::vec::Vec<u8>);
        _132 = (_127.1: &[u8; 3]);
        _134 = <Vec<u8> as PartialEq<[u8; 3]>>::eq(_131, _132) -> [return: bb32, unwind: bb37];
    }

    bb31 (cleanup): {
        _120 = move _121;
        goto -> bb37;
    }

    bb32: {
        _133 = Not(move _134);
        switchInt(move _133) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        _135 = core::panicking::AssertKind::Eq;
        _137 = Option::<Arguments<'_>>::None;
        _136 = core::panicking::assert_failed::<Vec<u8>, [u8; 3]>(move _135, _131, _132, move _137) -> bb37;
    }

    bb34: {
        drop(_120) -> [return: bb35, unwind: bb38];
    }

    bb35: {
        drop(_36) -> bb36;
    }

    bb36: {
        return;
    }

    bb37 (cleanup): {
        drop(_120) -> [return: bb38, unwind terminate];
    }

    bb38 (cleanup): {
        drop(_36) -> [return: bb39, unwind terminate];
    }

    bb39 (cleanup): {
        resume;
    }
}
