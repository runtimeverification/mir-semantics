// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static STATIC: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const 0_u32;
        return;
    }
}

fn foo(_1: &i32) -> () {
    debug y => _1;
    let mut _0: ();
    let mut _2: std::vec::Vec<std::rc::Rc<i32>>;
    let _3: ();
    let mut _4: &mut std::vec::Vec<std::rc::Rc<i32>>;
    let mut _5: std::rc::Rc<i32>;
    let _7: ();
    let mut _8: &mut std::vec::Vec<std::rc::Rc<i32>>;
    let mut _9: std::rc::Rc<i32>;
    let _11: &u32;
    let mut _12: std::vec::Vec<&i32>;
    let _13: ();
    let mut _14: &mut std::vec::Vec<&i32>;
    let _16: &u32;
    let mut _17: std::vec::Vec<&i32>;
    let _18: ();
    let mut _19: &mut std::vec::Vec<&i32>;
    let _21: &u32;
    let mut _22: std::vec::Vec<&i32>;
    let _23: ();
    let mut _24: &mut std::vec::Vec<&i32>;
    scope 1 {
        debug x => _2;
        let mut _6: std::vec::Vec<std::rc::Rc<i32>>;
        scope 2 {
            debug x => _6;
            let mut _10: (&u32, std::vec::Vec<&i32>);
            scope 3 {
                debug x => _10;
                let mut _15: (&u32, std::vec::Vec<&i32>);
                scope 4 {
                    debug x => _15;
                    let mut _20: (&u32, std::vec::Vec<&i32>);
                    scope 5 {
                        debug x => _20;
                    }
                }
            }
        }
    }

    bb0: {
        _2 = Vec::<Rc<i32>>::new() -> bb1;
    }

    bb1: {
        _4 = &mut _2;
        _5 = Rc::<i32>::new(const 42_i32) -> [return: bb2, unwind: bb22];
    }

    bb2: {
        _3 = Vec::<Rc<i32>>::push(move _4, move _5) -> [return: bb3, unwind: bb22];
    }

    bb3: {
        _6 = Vec::<Rc<i32>>::new() -> [return: bb4, unwind: bb22];
    }

    bb4: {
        _8 = &mut _6;
        _9 = Rc::<i32>::new(const 42_i32) -> [return: bb5, unwind: bb21];
    }

    bb5: {
        _7 = Vec::<Rc<i32>>::push(move _8, move _9) -> [return: bb6, unwind: bb21];
    }

    bb6: {
        _11 = const {alloc1: &u32};
        _12 = Vec::<&i32>::new() -> [return: bb7, unwind: bb21];
    }

    bb7: {
        _10 = (_11, move _12);
        _14 = &mut (_10.1: std::vec::Vec<&i32>);
        _13 = Vec::<&i32>::push(move _14, _1) -> [return: bb8, unwind: bb20];
    }

    bb8: {
        _16 = const {alloc1: &u32};
        _17 = Vec::<&i32>::new() -> [return: bb9, unwind: bb20];
    }

    bb9: {
        _15 = (_16, move _17);
        _19 = &mut (_15.1: std::vec::Vec<&i32>);
        _18 = Vec::<&i32>::push(move _19, _1) -> [return: bb10, unwind: bb19];
    }

    bb10: {
        _21 = const {alloc1: &u32};
        _22 = Vec::<&i32>::new() -> [return: bb11, unwind: bb19];
    }

    bb11: {
        _20 = (_21, move _22);
        _24 = &mut (_20.1: std::vec::Vec<&i32>);
        _23 = Vec::<&i32>::push(move _24, _1) -> [return: bb12, unwind: bb18];
    }

    bb12: {
        drop(_20) -> [return: bb13, unwind: bb19];
    }

    bb13: {
        drop(_15) -> [return: bb14, unwind: bb20];
    }

    bb14: {
        drop(_10) -> [return: bb15, unwind: bb21];
    }

    bb15: {
        drop(_6) -> [return: bb16, unwind: bb22];
    }

    bb16: {
        drop(_2) -> bb17;
    }

    bb17: {
        return;
    }

    bb18 (cleanup): {
        drop(_20) -> [return: bb19, unwind terminate];
    }

    bb19 (cleanup): {
        drop(_15) -> [return: bb20, unwind terminate];
    }

    bb20 (cleanup): {
        drop(_10) -> [return: bb21, unwind terminate];
    }

    bb21 (cleanup): {
        drop(_6) -> [return: bb22, unwind terminate];
    }

    bb22 (cleanup): {
        drop(_2) -> [return: bb23, unwind terminate];
    }

    bb23 (cleanup): {
        resume;
    }
}

alloc1 (static: STATIC, size: 4, align: 4) {
    00 00 00 00                                     â”‚ ....
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn Sendable(_1: T) -> Sendable<T> {
    let mut _0: Sendable<T>;

    bb0: {
        _0 = Sendable::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Sendable(_1: T) -> Sendable<T> {
    let mut _0: Sendable<T>;

    bb0: {
        _0 = Sendable::<T>(move _1);
        return;
    }
}
