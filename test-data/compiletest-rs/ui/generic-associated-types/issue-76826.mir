// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Iter::for_each(_1: Self, _2: F) -> () {
    debug self => _1;
    debug f => _2;
    let mut _0: ();
    let mut _3: std::option::Option<<Self as Iter>::Item<'_>>;
    let mut _4: &mut Self;
    let mut _5: isize;
    let _7: ();
    let mut _8: &mut F;
    let mut _9: (<Self as Iter>::Item<'_>,);
    scope 1 {
        debug item => _6;
        let _6: <Self as Iter>::Item<'_>;
    }

    bb0: {
        goto -> bb1;
    }

    bb1: {
        _4 = &mut _1;
        _3 = <Self as Iter>::next(move _4) -> [return: bb2, unwind: bb8];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [1: bb3, otherwise: bb4];
    }

    bb3: {
        _6 = move ((_3 as Some).0: <Self as Iter>::Item<'_>);
        _8 = &mut _2;
        _9 = (move _6,);
        _7 = <F as FnMut<(<Self as Iter>::Item<'_>,)>>::call_mut(move _8, move _9) -> [return: bb11, unwind: bb8];
    }

    bb4: {
        drop(_3) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        drop(_2) -> [return: bb6, unwind: bb9];
    }

    bb6: {
        drop(_1) -> bb7;
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_2) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        drop(_1) -> [return: bb10, unwind terminate];
    }

    bb10 (cleanup): {
        resume;
    }

    bb11: {
        goto -> bb1;
    }
}

fn <impl at ui/generic-associated-types/issue-76826.rs:23:1: 23:19>::new(_1: Vec<T>, _2: usize) -> Windows<T> {
    debug items => _1;
    debug len => _2;
    let mut _0: Windows<T>;

    bb0: {
        _0 = Windows::<T> { items: move _1, start: const 0_usize, len: _2 };
        return;
    }
}

fn <impl at ui/generic-associated-types/issue-76826.rs:29:1: 29:28>::next(_1: &mut Windows<T>) -> Option<&mut [T]> {
    debug self => _1;
    let mut _0: std::option::Option<&mut [T]>;
    let mut _2: std::ops::ControlFlow<std::option::Option<std::convert::Infallible>, &mut [T]>;
    let mut _3: std::option::Option<&mut [T]>;
    let mut _4: &mut [T];
    let mut _5: &mut [T];
    let mut _6: &mut std::vec::Vec<T>;
    let mut _7: std::ops::Range<usize>;
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: usize;
    let mut _12: isize;
    let _13: &mut [T];
    scope 1 {
        debug slice => _13;
    }
    scope 2 {
        debug residual => const Option::<Infallible>::None;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _13;
        scope 5 {
        }
    }

    bb0: {
        _6 = &mut ((*_1).0: std::vec::Vec<T>);
        _5 = <Vec<T> as DerefMut>::deref_mut(move _6) -> bb1;
    }

    bb1: {
        _4 = _5;
        _8 = ((*_1).1: usize);
        _10 = ((*_1).1: usize);
        _11 = ((*_1).2: usize);
        _9 = Add(move _10, move _11);
        _7 = std::ops::Range::<usize> { start: move _8, end: move _9 };
        _3 = core::slice::<impl [T]>::get_mut::<std::ops::Range<usize>>(move _4, move _7) -> bb2;
    }

    bb2: {
        _2 = <Option<&mut [T]> as Try>::branch(move _3) -> bb3;
    }

    bb3: {
        _12 = discriminant(_2);
        switchInt(move _12) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        _13 = move ((_2 as Continue).0: &mut [T]);
        ((*_1).1: usize) = Add(((*_1).1: usize), const 1_usize);
        _0 = Option::<&mut [T]>::Some(_13);
        goto -> bb7;
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _0 = <Option<&mut [T]> as FromResidual<Option<Infallible>>>::from_residual(const Option::<Infallible>::None) -> bb7;
    }

    bb7: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: Windows<i32>;
    let mut _3: std::vec::Vec<i32>;
    let mut _4: std::boxed::Box<[i32]>;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: *mut u8;
    let mut _8: std::boxed::Box<[i32; 5]>;
    let mut _9: *const [i32; 5];
    let mut _10: *const ();
    let mut _11: usize;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: usize;
    let mut _15: bool;
    scope 1 {
    }

    bb0: {
        _5 = SizeOf([i32; 5]);
        _6 = AlignOf([i32; 5]);
        _7 = alloc::alloc::exchange_malloc(move _5, move _6) -> bb1;
    }

    bb1: {
        _8 = ShallowInitBox(move _7, [i32; 5]);
        _9 = (((_8.0: std::ptr::Unique<[i32; 5]>).0: std::ptr::NonNull<[i32; 5]>).0: *const [i32; 5]);
        _10 = _9 as *const () (PtrToPtr);
        _11 = _10 as usize (Transmute);
        _12 = AlignOf(i32);
        _13 = Sub(_12, const 1_usize);
        _14 = BitAnd(_11, _13);
        _15 = Eq(_14, const 0_usize);
        assert(_15, "misaligned pointer dereference: address must be a multiple of {} but is {}", _12, _11) -> [success: bb5, unwind unreachable];
    }

    bb2: {
        _2 = Windows::<i32>::new(move _3, const 3_usize) -> bb3;
    }

    bb3: {
        _1 = <Windows<i32> as Iter>::for_each::<[closure@ui/generic-associated-types/issue-76826.rs:41:19: 41:26]>(move _2, const ZeroSized: [closure@ui/generic-associated-types/issue-76826.rs:41:19: 41:26]) -> bb4;
    }

    bb4: {
        return;
    }

    bb5: {
        (*_9) = [const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32];
        _4 = move _8 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _3 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _4) -> bb2;
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/generic-associated-types/issue-76826.rs:41:19: 41:26], _2: &mut [i32]) -> () {
    debug slice => _2;
    let mut _0: ();
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let _6: &[&str; 2];
    let _7: [&str; 2];
    let mut _8: &[core::fmt::rt::Argument<'_>];
    let _9: &[core::fmt::rt::Argument<'_>; 1];
    let _10: [core::fmt::rt::Argument<'_>; 1];
    let mut _11: core::fmt::rt::Argument<'_>;
    let _12: &&mut [i32];

    bb0: {
        _7 = [const "", const "\n"];
        _6 = &_7;
        _5 = _6 as &[&str] (Pointer(Unsize));
        _12 = &_2;
        _11 = core::fmt::rt::Argument::<'_>::new_debug::<&mut [i32]>(_12) -> bb1;
    }

    bb1: {
        _10 = [move _11];
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> bb2;
    }

    bb2: {
        _3 = _print(move _4) -> bb3;
    }

    bb3: {
        return;
    }
}
