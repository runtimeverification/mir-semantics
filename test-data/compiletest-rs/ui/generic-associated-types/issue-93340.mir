// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn cmp_eq(_1: <A as Scalar>::RefType<'_>, _2: <B as Scalar>::RefType<'_>) -> O {
    debug a => _1;
    debug b => _2;
    let mut _0: O;
    let mut _3: !;

    bb0: {
        _3 = core::panicking::panic(const "not yet implemented") -> bb1;
    }

    bb1 (cleanup): {
        drop(_2) -> [return: bb2, unwind terminate];
    }

    bb2 (cleanup): {
        drop(_1) -> [return: bb3, unwind terminate];
    }

    bb3 (cleanup): {
        resume;
    }
}

fn build_expression() -> impl for<'a, 'b> Fn(<A as Scalar>::RefType<'a>, <B as Scalar>::RefType<'b>) -> O {
    let mut _0: impl for<'a, 'b> Fn(<A as Scalar>::RefType<'a>, <B as Scalar>::RefType<'b>) -> O;

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
