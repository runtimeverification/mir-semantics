// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/generic-associated-types/collections.rs:33:1: 33:33>::empty() -> Vec<T> {
    let mut _0: std::vec::Vec<T>;

    bb0: {
        _0 = Vec::<T>::new() -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/generic-associated-types/collections.rs:33:1: 33:33>::add(_1: &mut Vec<T>, _2: T) -> () {
    debug self => _1;
    debug value => _2;
    let mut _0: ();

    bb0: {
        _0 = Vec::<T>::push(_1, move _2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/generic-associated-types/collections.rs:33:1: 33:33>::iterate(_1: &Vec<T>) -> std::slice::Iter<'_, T> {
    debug self => _1;
    let mut _0: std::slice::Iter<'_, T>;
    let mut _2: &[T];
    let _3: &[T];

    bb0: {
        _3 = <Vec<T> as Deref>::deref(_1) -> bb1;
    }

    bb1: {
        _2 = _3;
        _0 = core::slice::<impl [T]>::iter(move _2) -> bb2;
    }

    bb2: {
        return;
    }
}

fn floatify(_1: &C) -> <<C as Collection<i32>>::Family as CollectionFamily>::Member<f32> {
    debug ints => _1;
    let mut _0: <<C as Collection<i32>>::Family as CollectionFamily>::Member<f32>;
    let mut _2: <<C as Collection<i32>>::Family as CollectionFamily>::Member<f32>;
    let mut _3: <C as Collection<i32>>::Iter<'_>;
    let mut _4: <C as Collection<i32>>::Iter<'_>;
    let mut _6: std::option::Option<&i32>;
    let mut _7: &mut <C as Collection<i32>>::Iter<'_>;
    let mut _8: isize;
    let _10: ();
    let mut _11: &mut <<C as Collection<i32>>::Family as CollectionFamily>::Member<f32>;
    let mut _12: f32;
    let mut _13: &i32;
    scope 1 {
        debug res => _2;
        let mut _5: <C as Collection<i32>>::Iter<'_>;
        scope 2 {
            debug iter => _5;
            let _9: i32;
            scope 3 {
                debug v => _9;
            }
        }
    }

    bb0: {
        _2 = <<<C as Collection<i32>>::Family as CollectionFamily>::Member<f32> as Collection<f32>>::empty() -> bb1;
    }

    bb1: {
        _4 = <C as Collection<i32>>::iterate(_1) -> [return: bb2, unwind: bb11];
    }

    bb2: {
        _3 = <<C as Collection<i32>>::Iter<'_> as IntoIterator>::into_iter(move _4) -> [return: bb3, unwind: bb11];
    }

    bb3: {
        _5 = move _3;
        goto -> bb4;
    }

    bb4: {
        _7 = &mut _5;
        _6 = <<C as Collection<i32>>::Iter<'_> as Iterator>::next(_7) -> [return: bb5, unwind: bb10];
    }

    bb5: {
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb8, 1: bb6, otherwise: bb7];
    }

    bb6: {
        _13 = deref_copy ((_6 as Some).0: &i32);
        _9 = (*_13);
        _11 = &mut _2;
        _12 = _9 as f32 (IntToFloat);
        _10 = <<<C as Collection<i32>>::Family as CollectionFamily>::Member<f32> as Collection<f32>>::add(move _11, move _12) -> [return: bb13, unwind: bb10];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        drop(_5) -> [return: bb9, unwind: bb11];
    }

    bb9: {
        _0 = move _2;
        return;
    }

    bb10 (cleanup): {
        drop(_5) -> [return: bb11, unwind terminate];
    }

    bb11 (cleanup): {
        drop(_2) -> [return: bb12, unwind terminate];
    }

    bb12 (cleanup): {
        resume;
    }

    bb13: {
        goto -> bb4;
    }
}

fn use_floatify() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<i32>;
    let mut _2: std::boxed::Box<[i32]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[i32; 3]>;
    let _8: &std::vec::Vec<i32>;
    let mut _9: (&std::option::Option<&f32>, &std::option::Option<&f32>);
    let mut _10: &std::option::Option<&f32>;
    let _11: std::option::Option<&f32>;
    let mut _12: &f32;
    let _13: f32;
    let mut _14: &std::option::Option<&f32>;
    let _15: std::option::Option<&f32>;
    let mut _16: &mut std::slice::Iter<'_, f32>;
    let mut _17: std::slice::Iter<'_, f32>;
    let mut _18: &std::vec::Vec<f32>;
    let mut _21: bool;
    let mut _22: bool;
    let _24: !;
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _26: *const [i32; 3];
    let mut _27: *const ();
    let mut _28: usize;
    let mut _29: usize;
    let mut _30: usize;
    let mut _31: usize;
    let mut _32: bool;
    scope 1 {
        debug a => _1;
        let _7: std::vec::Vec<f32>;
        scope 3 {
            debug b => _7;
            let _19: &std::option::Option<&f32>;
            let _20: &std::option::Option<&f32>;
            scope 4 {
                debug left_val => _19;
                debug right_val => _20;
                let _23: core::panicking::AssertKind;
                scope 5 {
                    debug kind => _23;
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _3 = SizeOf([i32; 3]);
        _4 = AlignOf([i32; 3]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> bb1;
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [i32; 3]);
        _26 = (((_6.0: std::ptr::Unique<[i32; 3]>).0: std::ptr::NonNull<[i32; 3]>).0: *const [i32; 3]);
        _27 = _26 as *const () (PtrToPtr);
        _28 = _27 as usize (Transmute);
        _29 = AlignOf(i32);
        _30 = Sub(_29, const 1_usize);
        _31 = BitAnd(_28, _30);
        _32 = Eq(_31, const 0_usize);
        assert(_32, "misaligned pointer dereference: address must be a multiple of {} but is {}", _29, _28) -> [success: bb14, unwind unreachable];
    }

    bb2: {
        _8 = &_1;
        _7 = floatify::<Vec<i32>>(_8) -> [return: bb3, unwind: bb12];
    }

    bb3: {
        _13 = const 1f32;
        _12 = &_13;
        _11 = Option::<&f32>::Some(move _12);
        _10 = &_11;
        _18 = &_7;
        _17 = <Vec<f32> as Collection<f32>>::iterate(move _18) -> [return: bb4, unwind: bb11];
    }

    bb4: {
        _16 = &mut _17;
        _15 = <std::slice::Iter<'_, f32> as Iterator>::next(move _16) -> [return: bb5, unwind: bb11];
    }

    bb5: {
        _14 = &_15;
        _9 = (move _10, move _14);
        _19 = (_9.0: &std::option::Option<&f32>);
        _20 = (_9.1: &std::option::Option<&f32>);
        _22 = <Option<&f32> as PartialEq>::eq(_19, _20) -> [return: bb6, unwind: bb11];
    }

    bb6: {
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _23 = core::panicking::AssertKind::Eq;
        _25 = Option::<Arguments<'_>>::None;
        _24 = core::panicking::assert_failed::<Option<&f32>, Option<&f32>>(move _23, _19, _20, move _25) -> bb11;
    }

    bb8: {
        drop(_7) -> [return: bb9, unwind: bb12];
    }

    bb9: {
        drop(_1) -> bb10;
    }

    bb10: {
        return;
    }

    bb11 (cleanup): {
        drop(_7) -> [return: bb12, unwind terminate];
    }

    bb12 (cleanup): {
        drop(_1) -> [return: bb13, unwind terminate];
    }

    bb13 (cleanup): {
        resume;
    }

    bb14: {
        (*_26) = [const 1_i32, const 2_i32, const 3_i32];
        _2 = move _6 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _1 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _2) -> bb2;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();

    bb0: {
        _1 = use_floatify() -> bb1;
    }

    bb1: {
        return;
    }
}
