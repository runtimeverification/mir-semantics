// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/generic-associated-types/issue-70303.rs:11:1: 11:31>::cursor(_1: &DocumentImpl) -> DocCursorImpl<'_> {
    debug self => _1;
    let mut _0: DocCursorImpl<'_>;
    let _2: &&DocumentImpl;
    let mut _3: &DocumentImpl;

    bb0: {
        _2 = &_1;
        _3 = deref_copy (*_2);
        _0 = DocCursorImpl::<'_> { document: _3 };
        return;
    }
}

fn <impl at ui/generic-associated-types/issue-70303.rs:39:1: 39:35>::from(_1: &Doc) -> Lexer<'_, Cursor> {
    debug document => _1;
    let mut _0: Lexer<'_, Cursor>;
    let mut _2: Cursor;

    bb0: {
        _2 = <Doc as Document>::cursor(_1) -> bb1;
    }

    bb1: {
        _0 = Lexer::<'_, Cursor> { cursor: move _2, _phantom: const PhantomData::<&()> };
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: DocumentImpl;
    let _3: &DocumentImpl;
    scope 1 {
        debug doc => const DocumentImpl {{  }};
        let _2: Lexer<'_, DocCursorImpl<'_>>;
        scope 2 {
            debug lexer => _2;
        }
    }

    bb0: {
        _3 = &_1;
        _2 = Lexer::<'_, DocCursorImpl<'_>>::from::<DocumentImpl>(_3) -> bb1;
    }

    bb1: {
        return;
    }
}
