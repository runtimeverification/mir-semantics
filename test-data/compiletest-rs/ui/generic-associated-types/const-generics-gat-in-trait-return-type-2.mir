// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Foo::foo::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

<impl at ui/generic-associated-types/const-generics-gat-in-trait-return-type-2.rs:11:1: 11:16>::Assoc::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn <impl at ui/generic-associated-types/const-generics-gat-in-trait-return-type-2.rs:11:1: 11:16>::foo(_1: &()) -> [(); N] {
    debug self => _1;
    let mut _0: [(); N];

    bb0: {
        _0 = [const (); N];
        return;
    }
}

<impl at ui/generic-associated-types/const-generics-gat-in-trait-return-type-2.rs:11:1: 11:16>::foo::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

<impl at ui/generic-associated-types/const-generics-gat-in-trait-return-type-2.rs:11:1: 11:16>::foo::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&[(); 10], &[(); 10]);
    let mut _2: &[(); 10];
    let _3: [(); 10];
    let mut _4: &();
    let _5: ();
    let mut _6: &[(); 10];
    let _7: [(); 10];
    let _8: &[(); 10];
    let _9: &[(); 10];
    let mut _10: bool;
    let mut _11: bool;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _8;
        debug right_val => _9;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }

    bb0: {
        _4 = &_5;
        _3 = <() as Foo>::foo::<10>(move _4) -> bb1;
    }

    bb1: {
        _2 = &_3;
        _6 = &_7;
        _1 = (move _2, move _6);
        _8 = (_1.0: &[(); 10]);
        _9 = (_1.1: &[(); 10]);
        _11 = <[(); 10] as PartialEq>::eq(_8, _9) -> bb2;
    }

    bb2: {
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<[(); 10], [(); 10]>(move _12, _8, _9, move _14);
    }

    bb4: {
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 10_usize;
        return;
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 10_usize;
        return;
    }
}
