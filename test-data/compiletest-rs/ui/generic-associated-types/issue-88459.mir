// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f(_1: T, _2: impl Fn(T::Assoc<'_>)) -> () {
    let mut _0: ();

    bb0: {
        drop(_2) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_1) -> bb2;
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();

    bb0: {
        _1 = f::<Type, [closure@ui/generic-associated-types/issue-88459.rs:16:13: 16:16]>(const Type, const ZeroSized: [closure@ui/generic-associated-types/issue-88459.rs:16:13: 16:16]) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/generic-associated-types/issue-88459.rs:16:13: 16:16], _2: ()) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
