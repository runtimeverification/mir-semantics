// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn new_id() -> Id<'_> {
    let mut _0: Id<'_>;

    bb0: {
        return;
    }
}

fn <impl at ui/generic-associated-types/issue-93341.rs:17:1: 17:44>::new(_1: F) -> ExistentialLifetime<S> {
    debug f => _1;
    let mut _0: ExistentialLifetime<S>;
    let mut _2: <S as HasLifetime>::AtLifetime<'_>;
    let mut _3: F;
    let mut _4: Id<'_>;
    let mut _5: bool;

    bb0: {
        _5 = const false;
        _5 = const true;
        _3 = move _1;
        _4 = new_id() -> [return: bb1, unwind: bb5];
    }

    bb1: {
        _5 = const false;
        _2 = <F as FnOnce<(Id<'_>,)>>::call_once(move _3, const (Id::<'_>(PhantomData::<fn(&()) -> &()>),)) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _5 = const false;
        _0 = ExistentialLifetime::<S>(move _2);
        return;
    }

    bb3 (cleanup): {
        resume;
    }

    bb4 (cleanup): {
        drop(_3) -> [return: bb3, unwind terminate];
    }

    bb5 (cleanup): {
        switchInt(_5) -> [0: bb3, otherwise: bb4];
    }
}

fn broken0() -> ExistentialLifetime<ExampleMarker> {
    let mut _0: ExistentialLifetime<ExampleMarker>;

    bb0: {
        _0 = ExistentialLifetime::<ExampleMarker>::new::<for<'id> fn(Id<'id>) -> ExampleS<'id> {broken0::new_helper}>(broken0::new_helper) -> bb1;
    }

    bb1: {
        return;
    }
}

fn broken0::new_helper(_1: Id<'_>) -> ExampleS<'_> {
    debug id => const Id::<'_>(PhantomData::<fn(&()) -> &()>);
    let mut _0: ExampleS<'_>;

    bb0: {
        return;
    }
}

fn broken1() -> ExistentialLifetime<ExampleMarker> {
    let mut _0: ExistentialLifetime<ExampleMarker>;

    bb0: {
        _0 = ExistentialLifetime::<ExampleMarker>::new::<for<'id> fn(Id<'id>) -> <ExampleMarker as HasLifetime>::AtLifetime<'id> {broken1::new_helper}>(broken1::new_helper) -> bb1;
    }

    bb1: {
        return;
    }
}

fn broken1::new_helper(_1: Id<'_>) -> ExampleS<'_> {
    debug id => const Id::<'_>(PhantomData::<fn(&()) -> &()>);
    let mut _0: ExampleS<'_>;

    bb0: {
        return;
    }
}

fn broken2() -> ExistentialLifetime<ExampleMarker> {
    let mut _0: ExistentialLifetime<ExampleMarker>;

    bb0: {
        _0 = ExistentialLifetime::<ExampleMarker>::new::<[closure@ui/generic-associated-types/issue-93341.rs:51:47: 51:51]>(const ZeroSized: [closure@ui/generic-associated-types/issue-93341.rs:51:47: 51:51]) -> bb1;
    }

    bb1: {
        return;
    }
}

fn broken2::{closure#0}(_1: [closure@ui/generic-associated-types/issue-93341.rs:51:47: 51:51], _2: Id<'_>) -> ExampleS<'_> {
    debug id => const Id::<'_>(PhantomData::<fn(&()) -> &()>);
    let mut _0: ExampleS<'_>;

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn Id(_1: PhantomData<fn(&()) -> &()>) -> Id<'_> {
    let mut _0: Id<'_>;

    bb0: {
        _0 = Id::<'_>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Id(_1: PhantomData<fn(&()) -> &()>) -> Id<'_> {
    let mut _0: Id<'_>;

    bb0: {
        _0 = Id::<'_>(move _1);
        return;
    }
}

fn ExistentialLifetime(_1: <S as HasLifetime>::AtLifetime<'_>) -> ExistentialLifetime<S> {
    let mut _0: ExistentialLifetime<S>;

    bb0: {
        _0 = ExistentialLifetime::<S>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn ExistentialLifetime(_1: <S as HasLifetime>::AtLifetime<'_>) -> ExistentialLifetime<S> {
    let mut _0: ExistentialLifetime<S>;

    bb0: {
        _0 = ExistentialLifetime::<S>(move _1);
        return;
    }
}

fn ExampleS(_1: Id<'_>) -> ExampleS<'_> {
    let mut _0: ExampleS<'_>;

    bb0: {
        _0 = ExampleS::<'_>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn ExampleS(_1: Id<'_>) -> ExampleS<'_> {
    let mut _0: ExampleS<'_>;

    bb0: {
        _0 = ExampleS::<'_>(move _1);
        return;
    }
}
