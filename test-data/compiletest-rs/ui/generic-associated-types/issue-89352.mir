// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/generic-associated-types/issue-89352.rs:16:1: 16:69>::iter(_1: &Wrapper<'_, T, A>) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: <A as GenAssoc<T>>::Iter<'_>;
    let mut _3: <A as GenAssoc<T>>::Iter<'_>;
    let mut _4: &<A as GenAssoc<T>>::Iter<'_>;
    scope 1 {
        debug a => _2;
    }

    bb0: {
        _4 = &((*_1).0: <A as GenAssoc<T>>::Iter<'_>);
        _3 = <<A as GenAssoc<T>>::Iter<'_> as Clone>::clone(move _4) -> bb1;
    }

    bb1: {
        _2 = <A as GenAssoc<T>>::reborrow::<'_, '_>(move _3) -> bb2;
    }

    bb2: {
        drop(_2) -> bb3;
    }

    bb3: {
        return;
    }
}

fn <impl at ui/generic-associated-types/issue-89352.rs:16:1: 16:69>::reborrow(_1: ()) -> () {
    debug iter => const ();
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
