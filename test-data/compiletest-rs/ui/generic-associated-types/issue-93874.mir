// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/generic-associated-types/issue-93874.rs:9:1: 9:29>::build(_1: IdentityBuild, _2: O) -> O {
    debug self => const IdentityBuild;
    debug input => _2;
    let mut _0: O;

    bb0: {
        _0 = move _2;
        return;
    }
}

fn a() -> () {
    let mut _0: ();
    let _1: u8;
    scope 1 {
        debug _x => _1;
    }

    bb0: {
        _1 = <IdentityBuild as Build>::build::<u8>(const IdentityBuild, const 10_u8) -> bb1;
    }

    bb1: {
        return;
    }
}

fn b() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<u8>;
    let mut _2: std::vec::Vec<u8>;
    scope 1 {
        debug _x => _1;
    }

    bb0: {
        _2 = Vec::<u8>::new() -> bb1;
    }

    bb1: {
        _1 = <IdentityBuild as Build>::build::<Vec<u8>>(const IdentityBuild, move _2) -> bb2;
    }

    bb2: {
        drop(_1) -> bb3;
    }

    bb3: {
        return;
    }
}

fn c() -> () {
    let mut _0: ();
    let mut _1: [closure@ui/generic-associated-types/issue-93874.rs:25:37: 25:39];
    let _2: ();
    let mut _3: &[closure@ui/generic-associated-types/issue-93874.rs:25:37: 25:39];
    scope 1 {
        debug f => const ZeroSized: [closure@ui/generic-associated-types/issue-93874.rs:25:37: 25:39];
    }

    bb0: {
        _1 = <IdentityBuild as Build>::build::<[closure@ui/generic-associated-types/issue-93874.rs:25:37: 25:39]>(const IdentityBuild, const ZeroSized: [closure@ui/generic-associated-types/issue-93874.rs:25:37: 25:39]) -> bb1;
    }

    bb1: {
        _3 = &_1;
        _2 = <[closure@ui/generic-associated-types/issue-93874.rs:25:37: 25:39] as Fn<()>>::call(move _3, const ()) -> bb2;
    }

    bb2: {
        return;
    }
}

fn c::{closure#0}(_1: &[closure@ui/generic-associated-types/issue-93874.rs:25:37: 25:39]) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let _3: ();

    bb0: {
        _1 = a() -> bb1;
    }

    bb1: {
        _2 = b() -> bb2;
    }

    bb2: {
        _3 = c() -> bb3;
    }

    bb3: {
        return;
    }
}
