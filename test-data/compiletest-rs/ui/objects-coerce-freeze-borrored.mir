// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/objects-coerce-freeze-borrored.rs:10:1: 10:19>::foo(_1: &usize) -> usize {
    debug self => _1;
    let mut _0: usize;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn <impl at ui/objects-coerce-freeze-borrored.rs:10:1: 10:19>::bar(_1: &mut usize) -> usize {
    debug self => _1;
    let mut _0: usize;

    bb0: {
        (*_1) = Add((*_1), const 1_usize);
        _0 = (*_1);
        return;
    }
}

fn do_it_mut(_1: &mut dyn Foo) -> () {
    debug obj => _1;
    let mut _0: ();
    let _2: usize;
    let mut _4: &dyn Foo;
    let mut _5: (&usize, &usize);
    let mut _6: &usize;
    let mut _7: &usize;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let _17: ();
    let mut _18: &dyn Foo;
    let mut _19: usize;
    scope 1 {
        debug x => _2;
        let _3: usize;
        scope 2 {
            debug y => _3;
            let _8: &usize;
            let _9: &usize;
            scope 3 {
                debug left_val => _8;
                debug right_val => _9;
                let _14: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _14;
                }
            }
        }
    }

    bb0: {
        _2 = <dyn Foo as Foo>::bar(_1) -> bb1;
    }

    bb1: {
        _4 = &(*_1);
        _3 = <dyn Foo as Foo>::foo(move _4) -> bb2;
    }

    bb2: {
        _6 = &_2;
        _7 = &_3;
        _5 = (move _6, move _7);
        _8 = (_5.0: &usize);
        _9 = (_5.1: &usize);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<usize, usize>(move _14, _8, _9, move _16);
    }

    bb4: {
        _18 = &(*_1);
        _19 = _3;
        _17 = do_it_imm(move _18, move _19) -> bb5;
    }

    bb5: {
        return;
    }
}

fn do_it_imm(_1: &dyn Foo, _2: usize) -> () {
    debug obj => _1;
    debug v => _2;
    let mut _0: ();
    let _3: usize;
    let mut _4: (&usize, &usize);
    let mut _5: &usize;
    let mut _6: &usize;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: usize;
    let mut _12: usize;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug y => _3;
        let _7: &usize;
        let _8: &usize;
        scope 2 {
            debug left_val => _7;
            debug right_val => _8;
            let _13: core::panicking::AssertKind;
            scope 3 {
                debug kind => _13;
            }
        }
    }

    bb0: {
        _3 = <dyn Foo as Foo>::foo(_1) -> bb1;
    }

    bb1: {
        _5 = &_2;
        _6 = &_3;
        _4 = (move _5, move _6);
        _7 = (_4.0: &usize);
        _8 = (_4.1: &usize);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<usize, usize>(move _13, _7, _8, move _15);
    }

    bb3: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: usize;
    let mut _2: &mut dyn Foo;
    let mut _3: &mut usize;
    let _4: ();
    let _5: ();
    let mut _6: &dyn Foo;
    let _7: ();
    scope 1 {
        debug x => _1;
        scope 2 {
            debug obj => _2;
        }
    }

    bb0: {
        _1 = const 22_usize;
        _3 = &mut _1;
        _2 = _3 as &mut dyn Foo (Pointer(Unsize));
        _4 = do_it_mut(_2) -> bb1;
    }

    bb1: {
        _6 = &(*_2);
        _5 = do_it_imm(move _6, const 23_usize) -> bb2;
    }

    bb2: {
        _7 = do_it_mut(_2) -> bb3;
    }

    bb3: {
        return;
    }
}
