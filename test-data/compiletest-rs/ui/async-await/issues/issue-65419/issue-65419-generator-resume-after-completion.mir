// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: [generator@ui/async-await/issues/issue-65419/issue-65419-generator-resume-after-completion.rs:19:17: 19:19];
    let _2: std::ops::GeneratorState<(), ()>;
    let mut _3: std::pin::Pin<&mut [generator@ui/async-await/issues/issue-65419/issue-65419-generator-resume-after-completion.rs:19:17: 19:19]>;
    let mut _4: &mut [generator@ui/async-await/issues/issue-65419/issue-65419-generator-resume-after-completion.rs:19:17: 19:19];
    let _5: std::ops::GeneratorState<(), ()>;
    let mut _6: std::pin::Pin<&mut [generator@ui/async-await/issues/issue-65419/issue-65419-generator-resume-after-completion.rs:19:17: 19:19]>;
    let mut _7: &mut [generator@ui/async-await/issues/issue-65419/issue-65419-generator-resume-after-completion.rs:19:17: 19:19];
    let _8: std::ops::GeneratorState<(), ()>;
    let mut _9: std::pin::Pin<&mut [generator@ui/async-await/issues/issue-65419/issue-65419-generator-resume-after-completion.rs:19:17: 19:19]>;
    let mut _10: &mut [generator@ui/async-await/issues/issue-65419/issue-65419-generator-resume-after-completion.rs:19:17: 19:19];
    scope 1 {
        debug g => _1;
    }

    bb0: {
        _1 = [generator@ui/async-await/issues/issue-65419/issue-65419-generator-resume-after-completion.rs:19:17: 19:19 (#0)];
        _4 = &mut _1;
        _3 = Pin::<&mut [generator@ui/async-await/issues/issue-65419/issue-65419-generator-resume-after-completion.rs:19:17: 19:19]>::new(move _4) -> bb1;
    }

    bb1: {
        _2 = <[generator@ui/async-await/issues/issue-65419/issue-65419-generator-resume-after-completion.rs:19:17: 19:19] as Generator>::resume(move _3, const ()) -> bb2;
    }

    bb2: {
        _7 = &mut _1;
        _6 = Pin::<&mut [generator@ui/async-await/issues/issue-65419/issue-65419-generator-resume-after-completion.rs:19:17: 19:19]>::new(move _7) -> bb3;
    }

    bb3: {
        _5 = <[generator@ui/async-await/issues/issue-65419/issue-65419-generator-resume-after-completion.rs:19:17: 19:19] as Generator>::resume(move _6, const ()) -> bb4;
    }

    bb4: {
        _10 = &mut _1;
        _9 = Pin::<&mut [generator@ui/async-await/issues/issue-65419/issue-65419-generator-resume-after-completion.rs:19:17: 19:19]>::new(move _10) -> bb5;
    }

    bb5: {
        _8 = <[generator@ui/async-await/issues/issue-65419/issue-65419-generator-resume-after-completion.rs:19:17: 19:19] as Generator>::resume(move _9, const ()) -> bb6;
    }

    bb6: {
        return;
    }
}

fn main::{closure#0}(_1: Pin<&mut [generator@ui/async-await/issues/issue-65419/issue-65419-generator-resume-after-completion.rs:19:17: 19:19]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>;
    let mut _3: ();
    let mut _4: ();
    let mut _5: u32;
    let mut _6: &mut [generator@ui/async-await/issues/issue-65419/issue-65419-generator-resume-after-completion.rs:19:17: 19:19];
    let mut _7: &mut [generator@ui/async-await/issues/issue-65419/issue-65419-generator-resume-after-completion.rs:19:17: 19:19];
    let mut _8: &mut [generator@ui/async-await/issues/issue-65419/issue-65419-generator-resume-after-completion.rs:19:17: 19:19];

    bb0: {
        _6 = deref_copy (_1.0: &mut [generator@ui/async-await/issues/issue-65419/issue-65419-generator-resume-after-completion.rs:19:17: 19:19]);
        _5 = discriminant((*_6));
        switchInt(move _5) -> [0: bb1, 1: bb3, 3: bb2, otherwise: bb4];
    }

    bb1: {
        _3 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _3);
        _7 = deref_copy (_1.0: &mut [generator@ui/async-await/issues/issue-65419/issue-65419-generator-resume-after-completion.rs:19:17: 19:19]);
        discriminant((*_7)) = 3;
        return;
    }

    bb2: {
        _4 = const ();
        _0 = GeneratorState::<(), ()>::Complete(move _4);
        _8 = deref_copy (_1.0: &mut [generator@ui/async-await/issues/issue-65419/issue-65419-generator-resume-after-completion.rs:19:17: 19:19]);
        discriminant((*_8)) = 1;
        return;
    }

    bb3: {
        assert(const false, "generator resumed after completion") -> bb3;
    }

    bb4: {
        unreachable;
    }
}
