// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: ();

    bb0: {
        _1 = foo() -> bb1;
    }

    bb1: {
        return;
    }
}

fn foo() -> () {
    let mut _0: ();
    let _1: [generator@ui/async-await/non-trivial-drop.rs:14:5: 14:7];

    bb0: {
        _1 = [generator@ui/async-await/non-trivial-drop.rs:14:5: 14:7 (#0)];
        drop(_1) -> bb1;
    }

    bb1: {
        return;
    }
}

fn foo::{closure#0}(_1: Pin<&mut [generator@ui/async-await/non-trivial-drop.rs:14:5: 14:7]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>;
    let mut _3: ();
    let mut _4: NonCopy;
    let mut _5: NonCopy;
    let mut _6: NonCopy2;
    let mut _7: ();
    let mut _8: u32;
    let mut _9: &mut [generator@ui/async-await/non-trivial-drop.rs:14:5: 14:7];
    let mut _10: &mut [generator@ui/async-await/non-trivial-drop.rs:14:5: 14:7];
    let mut _11: &mut [generator@ui/async-await/non-trivial-drop.rs:14:5: 14:7];
    let mut _12: &mut [generator@ui/async-await/non-trivial-drop.rs:14:5: 14:7];
    let mut _13: &mut [generator@ui/async-await/non-trivial-drop.rs:14:5: 14:7];
    let mut _14: &mut [generator@ui/async-await/non-trivial-drop.rs:14:5: 14:7];
    let mut _15: &mut [generator@ui/async-await/non-trivial-drop.rs:14:5: 14:7];
    let mut _16: &mut [generator@ui/async-await/non-trivial-drop.rs:14:5: 14:7];

    bb0: {
        _9 = deref_copy (_1.0: &mut [generator@ui/async-await/non-trivial-drop.rs:14:5: 14:7]);
        _8 = discriminant((*_9));
        switchInt(move _8) -> [0: bb1, 1: bb8, 2: bb7, 3: bb6, otherwise: bb9];
    }

    bb1: {
        _5 = NonCopy;
        _6 = NonCopy2;
        _10 = deref_copy (_1.0: &mut [generator@ui/async-await/non-trivial-drop.rs:14:5: 14:7]);
        (((*_10) as variant#3).0: Config) = Config { nickname: move _5, b: move _6 };
        _11 = deref_copy (_1.0: &mut [generator@ui/async-await/non-trivial-drop.rs:14:5: 14:7]);
        _4 = move ((((*_11) as variant#3).0: Config).0: NonCopy);
        _3 = std::mem::drop::<NonCopy>(move _4) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        _0 = GeneratorState::<(), ()>::Yielded(move _3);
        _12 = deref_copy (_1.0: &mut [generator@ui/async-await/non-trivial-drop.rs:14:5: 14:7]);
        discriminant((*_12)) = 3;
        return;
    }

    bb3 (cleanup): {
        _15 = deref_copy (_1.0: &mut [generator@ui/async-await/non-trivial-drop.rs:14:5: 14:7]);
        drop(((((*_15) as variant#3).0: Config).1: NonCopy2)) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        _16 = deref_copy (_1.0: &mut [generator@ui/async-await/non-trivial-drop.rs:14:5: 14:7]);
        discriminant((*_16)) = 2;
        resume;
    }

    bb5: {
        _7 = const ();
        _0 = GeneratorState::<(), ()>::Complete(move _7);
        _13 = deref_copy (_1.0: &mut [generator@ui/async-await/non-trivial-drop.rs:14:5: 14:7]);
        discriminant((*_13)) = 1;
        return;
    }

    bb6: {
        _14 = deref_copy (_1.0: &mut [generator@ui/async-await/non-trivial-drop.rs:14:5: 14:7]);
        drop(((((*_14) as variant#3).0: Config).1: NonCopy2)) -> [return: bb5, unwind: bb4];
    }

    bb7: {
        assert(const false, "generator resumed after panicking") -> bb7;
    }

    bb8: {
        assert(const false, "generator resumed after completion") -> bb8;
    }

    bb9: {
        unreachable;
    }
}

fn <impl at ui/async-await/non-trivial-drop.rs:22:10: 22:17>::default() -> NonCopy {
    let mut _0: NonCopy;

    bb0: {
        return;
    }
}

fn <impl at ui/async-await/non-trivial-drop.rs:24:1: 24:22>::drop(_1: &mut NonCopy) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/async-await/non-trivial-drop.rs:28:10: 28:17>::default() -> NonCopy2 {
    let mut _0: NonCopy2;

    bb0: {
        return;
    }
}

fn <impl at ui/async-await/non-trivial-drop.rs:30:1: 30:23>::drop(_1: &mut NonCopy2) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/async-await/non-trivial-drop.rs:34:10: 34:17>::default() -> Config {
    let mut _0: Config;
    let mut _1: NonCopy;
    let mut _2: NonCopy2;

    bb0: {
        _1 = <NonCopy as Default>::default() -> bb1;
    }

    bb1: {
        _2 = <NonCopy2 as Default>::default() -> [return: bb2, unwind: bb3];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}
