// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn impls_my_trait() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn impls_my_trait_val(_1: T) -> () {
    let mut _0: ();
    let _2: ();

    bb0: {
        _2 = impls_my_trait::<T>() -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_1) -> bb2;
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn random_where_clause() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: i32;
    let _3: ();
    let _4: ();
    let _5: ();
    scope 1 {
        debug x => _1;
        let _2: &i32;
        scope 2 {
            debug f => _2;
        }
    }

    bb0: {
        _1 = const 22_i32;
        _2 = &_1;
        _3 = impls_my_trait_val::<&i32>(_2) -> bb1;
    }

    bb1: {
        _4 = impls_my_trait::<&i32>() -> bb2;
    }

    bb2: {
        _5 = random_where_clause() -> bb3;
    }

    bb3: {
        return;
    }
}
