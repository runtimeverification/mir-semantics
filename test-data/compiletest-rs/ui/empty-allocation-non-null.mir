// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: &std::option::Option<std::boxed::Box<()>>;
    let _4: std::option::Option<std::boxed::Box<()>>;
    let mut _5: std::boxed::Box<()>;
    let mut _6: !;
    let _7: std::boxed::Box<[()]>;
    let mut _8: std::boxed::Box<[(); 0]>;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: &std::option::Option<std::boxed::Box<[()]>>;
    let _12: std::option::Option<std::boxed::Box<[()]>>;
    let mut _13: !;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: &std::option::Option<std::boxed::Box<main::Foo>>;
    let _17: std::option::Option<std::boxed::Box<main::Foo>>;
    let mut _18: std::boxed::Box<main::Foo>;
    let mut _19: !;
    let mut _21: std::boxed::Box<[main::Foo; 0]>;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: &std::option::Option<std::boxed::Box<[main::Foo]>>;
    let _25: std::option::Option<std::boxed::Box<[main::Foo]>>;
    let mut _26: !;
    scope 1 {
        debug xs => _7;
        let _20: std::boxed::Box<[main::Foo]>;
        scope 2 {
            debug ys => _20;
        }
    }

    bb0: {
        _5 = Box::<()>::new(const ()) -> bb1;
    }

    bb1: {
        _4 = Option::<Box<()>>::Some(move _5);
        _3 = &_4;
        _2 = Option::<Box<()>>::is_some(move _3) -> [return: bb2, unwind: bb24];
    }

    bb2: {
        _1 = Not(move _2);
        drop(_4) -> bb3;
    }

    bb3: {
        switchInt(move _1) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _6 = core::panicking::panic(const "assertion failed: Some(Box::new(())).is_some()");
    }

    bb5: {
        _8 = Box::<[(); 0]>::new(const []) -> bb6;
    }

    bb6: {
        _7 = move _8 as std::boxed::Box<[()]> (Pointer(Unsize));
        _12 = Option::<Box<[()]>>::Some(move _7);
        _11 = &_12;
        _10 = Option::<Box<[()]>>::is_some(move _11) -> [return: bb7, unwind: bb23];
    }

    bb7: {
        _9 = Not(move _10);
        drop(_12) -> bb8;
    }

    bb8: {
        switchInt(move _9) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _13 = core::panicking::panic(const "assertion failed: Some(xs).is_some()");
    }

    bb10: {
        _18 = Box::<Foo>::new(const Foo) -> bb11;
    }

    bb11: {
        _17 = Option::<Box<Foo>>::Some(move _18);
        _16 = &_17;
        _15 = Option::<Box<Foo>>::is_some(move _16) -> [return: bb12, unwind: bb22];
    }

    bb12: {
        _14 = Not(move _15);
        drop(_17) -> bb13;
    }

    bb13: {
        switchInt(move _14) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _19 = core::panicking::panic(const "assertion failed: Some(Box::new(Foo)).is_some()");
    }

    bb15: {
        _21 = Box::<[Foo; 0]>::new(const []) -> bb16;
    }

    bb16: {
        _20 = move _21 as std::boxed::Box<[main::Foo]> (Pointer(Unsize));
        _25 = Option::<Box<[Foo]>>::Some(move _20);
        _24 = &_25;
        _23 = Option::<Box<[Foo]>>::is_some(move _24) -> [return: bb17, unwind: bb21];
    }

    bb17: {
        _22 = Not(move _23);
        drop(_25) -> bb18;
    }

    bb18: {
        switchInt(move _22) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _26 = core::panicking::panic(const "assertion failed: Some(ys).is_some()");
    }

    bb20: {
        return;
    }

    bb21 (cleanup): {
        drop(_25) -> [return: bb25, unwind terminate];
    }

    bb22 (cleanup): {
        drop(_17) -> [return: bb25, unwind terminate];
    }

    bb23 (cleanup): {
        drop(_12) -> [return: bb25, unwind terminate];
    }

    bb24 (cleanup): {
        drop(_4) -> [return: bb25, unwind terminate];
    }

    bb25 (cleanup): {
        resume;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}
