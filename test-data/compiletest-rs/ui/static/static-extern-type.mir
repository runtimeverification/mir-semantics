// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn TransparentType(_1: a::StartFn) -> TransparentType {
    let mut _0: b::TransparentType;

    bb0: {
        _0 = TransparentType(move _1);
        return;
    }
}

// MIR FOR CTFE
fn TransparentType(_1: a::StartFn) -> TransparentType {
    let mut _0: b::TransparentType;

    bb0: {
        _0 = TransparentType(move _1);
        return;
    }
}

fn CType(_1: u32, _2: TransparentType) -> CType {
    let mut _0: c::CType;

    bb0: {
        _0 = CType(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn CType(_1: u32, _2: TransparentType) -> CType {
    let mut _0: c::CType;

    bb0: {
        _0 = CType(move _1, move _2);
        return;
    }
}
