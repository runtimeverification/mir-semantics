// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static A: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 42_usize;
        return;
    }
}

static B: usize = {
    let mut _0: usize;
    let mut _1: &usize;

    bb0: {
        StorageLive(_1);
        _1 = const {alloc1: &usize};
        _0 = (*_1);
        StorageDead(_1);
        return;
    }
}

alloc1 (static: A, size: 8, align: 8) {
    2a 00 00 00 00 00 00 00                         │ *.......
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let _2: &usize;
    let mut _3: &usize;
    let _4: usize;
    let _5: &usize;
    let _6: &usize;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: usize;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _5;
        debug right_val => _6;
        let _11: core::panicking::AssertKind;
        scope 2 {
            debug kind => _11;
        }
    }

    bb0: {
        _2 = const {alloc2: &usize};
        _4 = const 42_usize;
        _3 = &_4;
        _1 = (_2, move _3);
        _5 = (_1.0: &usize);
        _6 = (_1.1: &usize);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<usize, usize>(move _11, _5, _6, move _13);
    }

    bb2: {
        return;
    }
}

alloc2 (static: B, size: 8, align: 8) {
    2a 00 00 00 00 00 00 00                         │ *.......
}
