// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: std::result::Result<std::string::String, std::env::VarError>;
    let mut _2: isize;
    let _3: std::string::String;
    let mut _4: bool;
    let mut _5: &str;
    let _6: &str;
    let mut _7: &std::string::String;
    let mut _8: bool;
    let mut _9: bool;
    let _10: !;
    let mut _11: bool;
    let _12: !;
    let mut _13: isize;
    let mut _14: isize;
    let mut _15: isize;
    scope 1 {
        debug s => _3;
    }

    bb0: {
        _1 = var::<&str>(const "TARGET") -> bb1;
    }

    bb1: {
        _2 = discriminant(_1);
        switchInt(move _2) -> [0: bb3, 1: bb19, otherwise: bb2];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _3 = move ((_1 as Ok).0: std::string::String);
        _7 = &_3;
        _6 = <String as Deref>::deref(move _7) -> [return: bb4, unwind: bb14];
    }

    bb4: {
        _5 = _6;
        _4 = core::str::<impl str>::contains::<'_, &str>(move _5, const "i586") -> [return: bb5, unwind: bb14];
    }

    bb5: {
        switchInt(move _4) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        drop(_3) -> [return: bb19, unwind: bb21];
    }

    bb7: {
        drop(_3) -> [return: bb8, unwind: bb21];
    }

    bb8: {
        _13 = discriminant(_1);
        switchInt(move _13) -> [0: bb16, otherwise: bb17];
    }

    bb9: {
        _9 = Not(const true);
        switchInt(move _9) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _10 = begin_panic::<&str>(const "SSE2 was not detected as available on an x86 platform");
    }

    bb11: {
        _11 = Not(const true);
        switchInt(move _11) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _12 = begin_panic::<&str>(const "AVX2 shouldn't be detected as available by default on any platform");
    }

    bb13: {
        return;
    }

    bb14 (cleanup): {
        drop(_3) -> [return: bb21, unwind terminate];
    }

    bb15 (cleanup): {
        resume;
    }

    bb16: {
        _8 = const true;
        switchInt(move _8) -> [0: bb11, otherwise: bb9];
    }

    bb17: {
        drop(_1) -> bb16;
    }

    bb18: {
        drop(_1) -> bb13;
    }

    bb19: {
        _14 = discriminant(_1);
        switchInt(move _14) -> [0: bb13, otherwise: bb18];
    }

    bb20 (cleanup): {
        drop(_1) -> [return: bb15, unwind terminate];
    }

    bb21 (cleanup): {
        _15 = discriminant(_1);
        switchInt(move _15) -> [0: bb15, otherwise: bb20];
    }
}
