// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: i32) -> i32 {
    debug _i => _1;
    let mut _0: i32;

    bb0: {
        _0 = const 1_i32;
        return;
    }
}

fn bar(_1: i32) -> i32 {
    debug _i => _1;
    let mut _0: i32;

    bb0: {
        _0 = const 1_i32;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: fn(i32) -> i32;
    let mut _4: bool;
    let mut _5: fn(i32) -> i32;
    let mut _6: fn(i32) -> i32;
    let mut _7: std::string::String;
    let _8: &str;
    let mut _9: std::string::String;
    let mut _11: std::fmt::Arguments<'_>;
    let mut _12: &[&str];
    let _13: &[&str; 2];
    let _14: [&str; 2];
    let mut _15: &[core::fmt::rt::Argument<'_>];
    let _16: &[core::fmt::rt::Argument<'_>; 2];
    let _17: [core::fmt::rt::Argument<'_>; 2];
    let mut _18: core::fmt::rt::Argument<'_>;
    let _19: &fn(i32) -> i32;
    let mut _20: core::fmt::rt::Argument<'_>;
    let _21: &fn(i32) -> i32;
    let mut _23: bool;
    let mut _24: fn(i32) -> i32;
    let mut _25: fn(i32) -> i32;
    let mut _26: std::string::String;
    let _27: &str;
    let mut _28: std::string::String;
    let mut _30: std::fmt::Arguments<'_>;
    let mut _31: &[&str];
    let _32: &[&str; 2];
    let _33: [&str; 2];
    let mut _34: &[core::fmt::rt::Argument<'_>];
    let _35: &[core::fmt::rt::Argument<'_>; 2];
    let _36: [core::fmt::rt::Argument<'_>; 2];
    let mut _37: core::fmt::rt::Argument<'_>;
    let _38: &fn(i32) -> i32;
    let mut _39: core::fmt::rt::Argument<'_>;
    let _40: &fn(i32) -> i32;
    let mut _41: (&std::string::String, &std::string::String);
    let mut _42: &std::string::String;
    let mut _43: &std::string::String;
    let mut _46: bool;
    let mut _47: bool;
    let _49: !;
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _51: bool;
    let mut _52: bool;
    scope 1 {
        debug x => _1;
        let _2: fn(i32) -> i32;
        scope 2 {
            debug y => _2;
            let _3: std::string::String;
            scope 3 {
                debug s1 => _3;
                let _10: std::string::String;
                let _22: std::string::String;
                scope 4 {
                    debug res => _10;
                }
                scope 5 {
                    debug s2 => _22;
                    let _29: std::string::String;
                    let _44: &std::string::String;
                    let _45: &std::string::String;
                    scope 6 {
                        debug res => _29;
                    }
                    scope 7 {
                        debug left_val => _44;
                        debug right_val => _45;
                        let _48: core::panicking::AssertKind;
                        scope 8 {
                            debug kind => _48;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _52 = const false;
        _51 = const false;
        _1 = foo as fn(i32) -> i32 (Pointer(ReifyFnPointer));
        _2 = bar as fn(i32) -> i32 (Pointer(ReifyFnPointer));
        _5 = _1;
        _6 = _2;
        _4 = Eq(move _5, move _6);
        switchInt(move _4) -> [0: bb3, otherwise: bb1];
    }

    bb1: {
        _8 = const "same";
        _7 = <str as ToString>::to_string(_8) -> [return: bb2, unwind: bb26];
    }

    bb2: {
        _52 = const true;
        _3 = move _7;
        goto -> bb8;
    }

    bb3: {
        _14 = [const "", const ", "];
        _13 = &_14;
        _12 = _13 as &[&str] (Pointer(Unsize));
        _19 = &_1;
        _18 = core::fmt::rt::Argument::<'_>::new_debug::<fn(i32) -> i32>(_19) -> [return: bb4, unwind: bb26];
    }

    bb4: {
        _21 = &_2;
        _20 = core::fmt::rt::Argument::<'_>::new_debug::<fn(i32) -> i32>(_21) -> [return: bb5, unwind: bb26];
    }

    bb5: {
        _17 = [move _18, move _20];
        _16 = &_17;
        _15 = _16 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _11 = Arguments::<'_>::new_v1(move _12, move _15) -> [return: bb6, unwind: bb26];
    }

    bb6: {
        _10 = format(move _11) -> [return: bb7, unwind: bb26];
    }

    bb7: {
        _9 = move _10;
        _52 = const true;
        _3 = move _9;
        goto -> bb8;
    }

    bb8: {
        _24 = _1;
        _25 = _2;
        _23 = Eq(move _24, move _25);
        switchInt(move _23) -> [0: bb11, otherwise: bb9];
    }

    bb9: {
        _27 = const "same";
        _26 = <str as ToString>::to_string(_27) -> [return: bb10, unwind: bb24];
    }

    bb10: {
        _51 = const true;
        _22 = move _26;
        goto -> bb16;
    }

    bb11: {
        _33 = [const "", const ", "];
        _32 = &_33;
        _31 = _32 as &[&str] (Pointer(Unsize));
        _38 = &_1;
        _37 = core::fmt::rt::Argument::<'_>::new_debug::<fn(i32) -> i32>(_38) -> [return: bb12, unwind: bb24];
    }

    bb12: {
        _40 = &_2;
        _39 = core::fmt::rt::Argument::<'_>::new_debug::<fn(i32) -> i32>(_40) -> [return: bb13, unwind: bb24];
    }

    bb13: {
        _36 = [move _37, move _39];
        _35 = &_36;
        _34 = _35 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _30 = Arguments::<'_>::new_v1(move _31, move _34) -> [return: bb14, unwind: bb24];
    }

    bb14: {
        _29 = format(move _30) -> [return: bb15, unwind: bb24];
    }

    bb15: {
        _28 = move _29;
        _51 = const true;
        _22 = move _28;
        goto -> bb16;
    }

    bb16: {
        _42 = &_3;
        _43 = &_22;
        _41 = (move _42, move _43);
        _44 = (_41.0: &std::string::String);
        _45 = (_41.1: &std::string::String);
        _47 = <String as PartialEq>::eq(_44, _45) -> [return: bb17, unwind: bb24];
    }

    bb17: {
        _46 = Not(move _47);
        switchInt(move _46) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _48 = core::panicking::AssertKind::Eq;
        _50 = Option::<Arguments<'_>>::None;
        _49 = core::panicking::assert_failed::<String, String>(move _48, _44, _45, move _50) -> bb24;
    }

    bb19: {
        drop(_22) -> [return: bb20, unwind: bb26];
    }

    bb20: {
        _51 = const false;
        drop(_3) -> bb21;
    }

    bb21: {
        _52 = const false;
        return;
    }

    bb22 (cleanup): {
        resume;
    }

    bb23 (cleanup): {
        drop(_22) -> [return: bb26, unwind terminate];
    }

    bb24 (cleanup): {
        switchInt(_51) -> [0: bb26, otherwise: bb23];
    }

    bb25 (cleanup): {
        drop(_3) -> [return: bb22, unwind terminate];
    }

    bb26 (cleanup): {
        switchInt(_52) -> [0: bb22, otherwise: bb25];
    }
}
