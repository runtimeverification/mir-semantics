// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn is_fn() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn is_fn2() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let _3: ();
    let _4: ();

    bb0: {
        _1 = is_fn::<for<'a> fn(&'a ()) -> &'a ()>() -> bb1;
    }

    bb1: {
        _2 = is_fn::<for<'a> fn(&'a ()) -> &'a (dyn Debug + 'a)>() -> bb2;
    }

    bb2: {
        _3 = is_fn2::<for<'a, 'b> fn(&'a &'b ()) -> Outlives<'a, 'b>>() -> bb3;
    }

    bb3: {
        _4 = is_fn2::<for<'a, 'b> fn(&'a &'b ()) -> (&'a (), &'a ())>() -> bb4;
    }

    bb4: {
        return;
    }
}

fn Outlives(_1: PhantomData<&&()>) -> Outlives<'_, '_> {
    let mut _0: Outlives<'_, '_>;

    bb0: {
        _0 = Outlives::<'_, '_>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Outlives(_1: PhantomData<&&()>) -> Outlives<'_, '_> {
    let mut _0: Outlives<'_, '_>;

    bb0: {
        _0 = Outlives::<'_, '_>(move _1);
        return;
    }
}
