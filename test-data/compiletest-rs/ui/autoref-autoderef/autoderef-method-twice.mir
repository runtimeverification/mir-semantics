// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/autoref-autoderef/autoderef-method-twice.rs:8:1: 8:22>::double(_1: Box<usize>) -> usize {
    debug self => _1;
    let mut _0: usize;
    let mut _2: usize;
    let mut _3: *const usize;
    let mut _4: *const ();
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: bool;

    bb0: {
        _3 = (((_1.0: std::ptr::Unique<usize>).0: std::ptr::NonNull<usize>).0: *const usize);
        _4 = _3 as *const () (PtrToPtr);
        _5 = _4 as usize (Transmute);
        _6 = AlignOf(usize);
        _7 = Sub(_6, const 1_usize);
        _8 = BitAnd(_5, _7);
        _9 = Eq(_8, const 0_usize);
        assert(_9, "misaligned pointer dereference: address must be a multiple of {} but is {}", _6, _5) -> [success: bb2, unwind unreachable];
    }

    bb1: {
        return;
    }

    bb2: {
        _2 = (*_3);
        _0 = Mul(move _2, const 2_usize);
        drop(_1) -> bb1;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::boxed::Box<std::boxed::Box<usize>>;
    let mut _2: std::boxed::Box<usize>;
    let mut _3: (&usize, &usize);
    let mut _4: &usize;
    let _5: usize;
    let mut _6: std::boxed::Box<usize>;
    let mut _7: &usize;
    let _8: usize;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: usize;
    let mut _14: usize;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: &mut std::boxed::Box<std::boxed::Box<usize>>;
    let mut _19: ();
    let mut _20: &mut std::boxed::Box<std::boxed::Box<usize>>;
    let mut _21: ();
    let mut _22: *const std::boxed::Box<usize>;
    scope 1 {
        debug x => _1;
        let _9: &usize;
        let _10: &usize;
        let mut _23: *const ();
        let mut _24: usize;
        let mut _25: usize;
        let mut _26: usize;
        let mut _27: usize;
        let mut _28: bool;
        scope 2 {
            debug left_val => _9;
            debug right_val => _10;
            let _15: core::panicking::AssertKind;
            scope 3 {
                debug kind => _15;
            }
        }
    }

    bb0: {
        _2 = Box::<usize>::new(const 3_usize) -> bb1;
    }

    bb1: {
        _1 = Box::<Box<usize>>::new(move _2) -> bb2;
    }

    bb2: {
        _22 = (((_1.0: std::ptr::Unique<std::boxed::Box<usize>>).0: std::ptr::NonNull<std::boxed::Box<usize>>).0: *const std::boxed::Box<usize>);
        _23 = _22 as *const () (PtrToPtr);
        _24 = _23 as usize (Transmute);
        _25 = AlignOf(std::boxed::Box<usize>);
        _26 = Sub(_25, const 1_usize);
        _27 = BitAnd(_24, _26);
        _28 = Eq(_27, const 0_usize);
        assert(_28, "misaligned pointer dereference: address must be a multiple of {} but is {}", _25, _24) -> [success: bb9, unwind unreachable];
    }

    bb3: {
        _4 = &_5;
        _8 = const 6_usize;
        _7 = &_8;
        _3 = (move _4, move _7);
        _9 = (_3.0: &usize);
        _10 = (_3.1: &usize);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<usize, usize>(move _15, _9, _10, move _17) -> bb8;
    }

    bb5: {
        _18 = &mut _1;
        _19 = <Box<Box<usize>> as Drop>::drop(move _18) -> bb7;
    }

    bb6 (cleanup): {
        resume;
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        _20 = &mut _1;
        _21 = <Box<Box<usize>> as Drop>::drop(move _20) -> [return: bb6, unwind terminate];
    }

    bb9: {
        _6 = move (*_22);
        _5 = <usize as double>::double(move _6) -> [return: bb3, unwind: bb8];
    }
}
