// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/no-warn-on-field-replace-issue-34101.rs:25:1: 25:18>::drop(_1: &mut Foo) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn inline() -> () {
    let mut _0: ();
    let mut _2: std::string::String;
    let mut _3: std::string::String;
    scope 1 {
        debug _s => const ();
        let mut _1: Foo;
        scope 2 {
            debug f => _1;
        }
    }

    bb0: {
        _2 = <String as From<&str>>::from(const "foo") -> bb1;
    }

    bb1: {
        _1 = Foo(move _2);
        _3 = <String as From<&str>>::from(const "bar") -> [return: bb2, unwind: bb6];
    }

    bb2: {
        drop((_1.0: std::string::String)) -> [return: bb3, unwind: bb4];
    }

    bb3: {
        (_1.0: std::string::String) = move _3;
        drop(_1) -> bb5;
    }

    bb4 (cleanup): {
        (_1.0: std::string::String) = move _3;
        goto -> bb6;
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_1) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }
}

fn outline() -> () {
    let mut _0: ();
    let _1: std::string::String;
    let mut _3: std::string::String;
    let mut _4: std::string::String;
    scope 1 {
        debug _s => _1;
        let mut _2: Foo;
        scope 2 {
            debug f => _2;
        }
    }

    bb0: {
        _1 = <String as From<&str>>::from(const "foo") -> bb1;
    }

    bb1: {
        _3 = move _1;
        _2 = Foo(move _3);
        _4 = <String as From<&str>>::from(const "bar") -> [return: bb2, unwind: bb6];
    }

    bb2: {
        drop((_2.0: std::string::String)) -> [return: bb3, unwind: bb4];
    }

    bb3: {
        (_2.0: std::string::String) = move _4;
        drop(_2) -> bb5;
    }

    bb4 (cleanup): {
        (_2.0: std::string::String) = move _4;
        goto -> bb6;
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();

    bb0: {
        _1 = inline() -> bb1;
    }

    bb1: {
        _2 = outline() -> bb2;
    }

    bb2: {
        return;
    }
}

fn Foo(_1: String) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: String) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo(move _1);
        return;
    }
}
