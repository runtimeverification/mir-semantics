// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: usize;
    let mut _2: std::env::ArgsOs;
    let mut _3: std::env::VarsOs;
    let mut _4: std::env::VarsOs;
    let mut _5: std::env::VarsOs;
    let mut _6: std::option::Option<(std::ffi::OsString, std::ffi::OsString)>;
    let mut _7: &mut std::env::VarsOs;
    let mut _8: isize;
    let _11: !;
    let mut _12: std::fmt::Arguments<'_>;
    let mut _13: &[&str];
    let _14: &[&str; 2];
    let _15: [&str; 2];
    let mut _16: &[core::fmt::rt::Argument<'_>];
    let _17: &[core::fmt::rt::Argument<'_>; 2];
    let _18: [core::fmt::rt::Argument<'_>; 2];
    let mut _19: core::fmt::rt::Argument<'_>;
    let _20: &std::ffi::OsString;
    let mut _21: core::fmt::rt::Argument<'_>;
    let _22: &std::ffi::OsString;
    let _23: std::ffi::CString;
    let mut _24: std::result::Result<std::ffi::CString, std::ffi::NulError>;
    let mut _25: &[u8];
    let mut _26: &std::ffi::OsStr;
    let _27: &std::ffi::OsStr;
    let mut _28: &std::path::Path;
    let _29: &std::path::Path;
    let mut _30: &std::path::PathBuf;
    let _31: std::path::PathBuf;
    let mut _32: std::result::Result<std::path::PathBuf, std::io::Error>;
    let mut _34: std::result::Result<std::ffi::CString, std::ffi::NulError>;
    let mut _36: &std::ffi::CStr;
    let _37: &std::ffi::CStr;
    let mut _38: &std::ffi::CString;
    let _40: &[*const i8; 3];
    let _41: [*const i8; 3];
    let mut _42: *const i8;
    let mut _43: *const i8;
    let mut _44: *const i8;
    let _46: &[*const i8; 2];
    let _47: [*const i8; 2];
    let mut _48: *const i8;
    let mut _49: &std::ffi::CStr;
    let _50: &std::ffi::CStr;
    let mut _51: &std::ffi::CString;
    let mut _52: *const i8;
    let _53: i32;
    let mut _54: *const i8;
    let mut _55: *const *const i8;
    let _56: &*const i8;
    let _57: usize;
    let mut _58: usize;
    let mut _59: bool;
    let mut _60: *const *const i8;
    let _61: &*const i8;
    let _62: usize;
    let mut _63: usize;
    let mut _64: bool;
    let _65: !;
    scope 1 {
        debug iter => _5;
        let _9: std::ffi::OsString;
        let _10: std::ffi::OsString;
        scope 2 {
            debug key => _9;
            debug value => _10;
        }
    }
    scope 3 {
        debug current_exe => _23;
        let _33: std::ffi::CString;
        scope 4 {
            debug new_env_var => _33;
            let _35: *const i8;
            scope 5 {
                debug filename => _35;
                let _39: &[*const i8];
                scope 6 {
                    debug argv => _39;
                    let _45: &[*const i8];
                    scope 7 {
                        debug envp => _45;
                        scope 8 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = args_os() -> bb1;
    }

    bb1: {
        _1 = <ArgsOs as Iterator>::count(move _2) -> bb2;
    }

    bb2: {
        switchInt(move _1) -> [2: bb3, otherwise: bb14];
    }

    bb3: {
        _4 = vars_os() -> bb4;
    }

    bb4: {
        _3 = <VarsOs as IntoIterator>::into_iter(move _4) -> bb5;
    }

    bb5: {
        _5 = move _3;
        _7 = &mut _5;
        _6 = <VarsOs as Iterator>::next(_7) -> [return: bb6, unwind: bb39];
    }

    bb6: {
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb9, 1: bb7, otherwise: bb8];
    }

    bb7: {
        _9 = move (((_6 as Some).0: (std::ffi::OsString, std::ffi::OsString)).0: std::ffi::OsString);
        _10 = move (((_6 as Some).0: (std::ffi::OsString, std::ffi::OsString)).1: std::ffi::OsString);
        _15 = [const "found env value ", const " "];
        _14 = &_15;
        _13 = _14 as &[&str] (Pointer(Unsize));
        _20 = &_9;
        _19 = core::fmt::rt::Argument::<'_>::new_debug::<OsString>(_20) -> [return: bb10, unwind: bb37];
    }

    bb8: {
        unreachable;
    }

    bb9: {
        drop(_5) -> bb13;
    }

    bb10: {
        _22 = &_10;
        _21 = core::fmt::rt::Argument::<'_>::new_debug::<OsString>(_22) -> [return: bb11, unwind: bb37];
    }

    bb11: {
        _18 = [move _19, move _21];
        _17 = &_18;
        _16 = _17 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _12 = Arguments::<'_>::new_v1(move _13, move _16) -> [return: bb12, unwind: bb37];
    }

    bb12: {
        _11 = panic_fmt(move _12) -> bb37;
    }

    bb13: {
        return;
    }

    bb14: {
        _32 = current_exe() -> bb15;
    }

    bb15: {
        _31 = Result::<PathBuf, std::io::Error>::unwrap(move _32) -> bb16;
    }

    bb16: {
        _30 = &_31;
        _29 = <PathBuf as Deref>::deref(move _30) -> [return: bb17, unwind: bb36];
    }

    bb17: {
        _28 = _29;
        _27 = Path::as_os_str(move _28) -> [return: bb18, unwind: bb36];
    }

    bb18: {
        _26 = _27;
        _25 = <OsStr as std::os::unix::ffi::OsStrExt>::as_bytes(move _26) -> [return: bb19, unwind: bb36];
    }

    bb19: {
        _24 = CString::new::<&[u8]>(move _25) -> [return: bb20, unwind: bb36];
    }

    bb20: {
        _23 = Result::<CString, NulError>::unwrap(move _24) -> [return: bb21, unwind: bb36];
    }

    bb21: {
        drop(_31) -> [return: bb22, unwind: bb35];
    }

    bb22: {
        _34 = CString::new::<&str>(const "FOOBAR") -> [return: bb23, unwind: bb35];
    }

    bb23: {
        _33 = Result::<CString, NulError>::unwrap(move _34) -> [return: bb24, unwind: bb35];
    }

    bb24: {
        _38 = &_23;
        _37 = <CString as Deref>::deref(move _38) -> [return: bb25, unwind: bb34];
    }

    bb25: {
        _36 = _37;
        _35 = CStr::as_ptr(move _36) -> [return: bb26, unwind: bb34];
    }

    bb26: {
        _42 = _35;
        _43 = _35;
        _44 = null::<i8>() -> [return: bb27, unwind: bb34];
    }

    bb27: {
        _41 = [move _42, move _43, move _44];
        _40 = &_41;
        _39 = _40 as &[*const i8] (Pointer(Unsize));
        _51 = &_33;
        _50 = <CString as Deref>::deref(move _51) -> [return: bb28, unwind: bb34];
    }

    bb28: {
        _49 = _50;
        _48 = CStr::as_ptr(move _49) -> [return: bb29, unwind: bb34];
    }

    bb29: {
        _52 = null::<i8>() -> [return: bb30, unwind: bb34];
    }

    bb30: {
        _47 = [move _48, move _52];
        _46 = &_47;
        _45 = _46 as &[*const i8] (Pointer(Unsize));
        _54 = _35;
        _57 = const 0_usize;
        _58 = Len((*_39));
        _59 = Lt(_57, _58);
        assert(move _59, "index out of bounds: the length is {} but the index is {}", move _58, _57) -> [success: bb31, unwind: bb34];
    }

    bb31: {
        _56 = &(*_39)[_57];
        _55 = &raw const (*_56);
        _62 = const 0_usize;
        _63 = Len((*_45));
        _64 = Lt(_62, _63);
        assert(move _64, "index out of bounds: the length is {} but the index is {}", move _63, _62) -> [success: bb32, unwind: bb34];
    }

    bb32: {
        _61 = &(*_45)[_62];
        _60 = &raw const (*_61);
        _53 = execve(move _54, move _55, move _60) -> [return: bb33, unwind: bb34];
    }

    bb33: {
        _65 = begin_panic::<&str>(const "execve failed") -> bb34;
    }

    bb34 (cleanup): {
        drop(_33) -> [return: bb35, unwind terminate];
    }

    bb35 (cleanup): {
        drop(_23) -> [return: bb40, unwind terminate];
    }

    bb36 (cleanup): {
        drop(_31) -> [return: bb40, unwind terminate];
    }

    bb37 (cleanup): {
        drop(_10) -> [return: bb38, unwind terminate];
    }

    bb38 (cleanup): {
        drop(_9) -> [return: bb39, unwind terminate];
    }

    bb39 (cleanup): {
        drop(_5) -> [return: bb40, unwind terminate];
    }

    bb40 (cleanup): {
        resume;
    }
}
