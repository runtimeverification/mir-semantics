// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: i8;
    let _2: ();
    let mut _3: &mut i8;
    let mut _4: &i8;
    let _5: i8;
    let mut _6: (&i8, &i8);
    let mut _7: &i8;
    let mut _8: &i8;
    let _9: i8;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: i8;
    let mut _15: i8;
    let _17: !;
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _19: i16;
    let _20: ();
    let mut _21: &mut i16;
    let mut _22: &i16;
    let _23: i16;
    let mut _24: (&i16, &i16);
    let mut _25: &i16;
    let mut _26: &i16;
    let _27: i16;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: i16;
    let mut _33: i16;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _37: f32;
    let _38: ();
    let mut _39: &mut f32;
    let mut _40: &f32;
    let _41: f32;
    let mut _42: (&f32, &f32);
    let mut _43: &f32;
    let mut _44: &f32;
    let _45: f32;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: f32;
    let mut _51: f32;
    let _53: !;
    let mut _54: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _55: f64;
    let _56: ();
    let mut _57: &mut f64;
    let mut _58: &f64;
    let _59: f64;
    let mut _60: (&f64, &f64);
    let mut _61: &f64;
    let mut _62: &f64;
    let _63: f64;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: f64;
    let mut _69: f64;
    let _71: !;
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _73: i64;
    let _74: ();
    let mut _75: &mut i64;
    let mut _76: &i64;
    let _77: i64;
    let mut _78: (&i64, &i64);
    let mut _79: &i64;
    let mut _80: &i64;
    let _81: i64;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: i64;
    let mut _87: i64;
    let _89: !;
    let mut _90: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _91: u8;
    let _92: ();
    let mut _93: &mut u8;
    let mut _94: &u8;
    let _95: u8;
    let mut _96: (&u8, &u8);
    let mut _97: &u8;
    let mut _98: &u8;
    let _99: u8;
    let mut _102: bool;
    let mut _103: bool;
    let mut _104: u8;
    let mut _105: u8;
    let _107: !;
    let mut _108: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _109: u16;
    let _110: ();
    let mut _111: &mut u16;
    let mut _112: &u16;
    let _113: u16;
    let mut _114: (&u16, &u16);
    let mut _115: &u16;
    let mut _116: &u16;
    let _117: u16;
    let mut _120: bool;
    let mut _121: bool;
    let mut _122: u16;
    let mut _123: u16;
    let _125: !;
    let mut _126: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _127: u32;
    let _128: ();
    let mut _129: &mut u32;
    let mut _130: &u32;
    let _131: u32;
    let mut _132: (&u32, &u32);
    let mut _133: &u32;
    let mut _134: &u32;
    let _135: u32;
    let mut _138: bool;
    let mut _139: bool;
    let mut _140: u32;
    let mut _141: u32;
    let _143: !;
    let mut _144: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _145: u64;
    let _146: ();
    let mut _147: &mut u64;
    let mut _148: &u32;
    let _149: u32;
    let mut _150: (&u64, &u64);
    let mut _151: &u64;
    let mut _152: &u64;
    let _153: u64;
    let mut _156: bool;
    let mut _157: bool;
    let mut _158: u64;
    let mut _159: u64;
    let _161: !;
    let mut _162: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _163: u64;
    let _164: ();
    let mut _165: &mut u64;
    let mut _166: &i16;
    let _167: i16;
    let mut _168: (&u64, &u64);
    let mut _169: &u64;
    let mut _170: &u64;
    let _171: u64;
    let mut _174: bool;
    let mut _175: bool;
    let mut _176: u64;
    let mut _177: u64;
    let _179: !;
    let mut _180: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _10: &i8;
        let _11: &i8;
        scope 2 {
            debug left_val => _10;
            debug right_val => _11;
            let _16: core::panicking::AssertKind;
            scope 3 {
                debug kind => _16;
            }
        }
    }
    scope 4 {
        debug x => _19;
        let _28: &i16;
        let _29: &i16;
        scope 5 {
            debug left_val => _28;
            debug right_val => _29;
            let _34: core::panicking::AssertKind;
            scope 6 {
                debug kind => _34;
            }
        }
    }
    scope 7 {
        debug x => _37;
        let _46: &f32;
        let _47: &f32;
        scope 8 {
            debug left_val => _46;
            debug right_val => _47;
            let _52: core::panicking::AssertKind;
            scope 9 {
                debug kind => _52;
            }
        }
    }
    scope 10 {
        debug x => _55;
        let _64: &f64;
        let _65: &f64;
        scope 11 {
            debug left_val => _64;
            debug right_val => _65;
            let _70: core::panicking::AssertKind;
            scope 12 {
                debug kind => _70;
            }
        }
    }
    scope 13 {
        debug x => _73;
        let _82: &i64;
        let _83: &i64;
        scope 14 {
            debug left_val => _82;
            debug right_val => _83;
            let _88: core::panicking::AssertKind;
            scope 15 {
                debug kind => _88;
            }
        }
    }
    scope 16 {
        debug x => _91;
        let _100: &u8;
        let _101: &u8;
        scope 17 {
            debug left_val => _100;
            debug right_val => _101;
            let _106: core::panicking::AssertKind;
            scope 18 {
                debug kind => _106;
            }
        }
    }
    scope 19 {
        debug x => _109;
        let _118: &u16;
        let _119: &u16;
        scope 20 {
            debug left_val => _118;
            debug right_val => _119;
            let _124: core::panicking::AssertKind;
            scope 21 {
                debug kind => _124;
            }
        }
    }
    scope 22 {
        debug x => _127;
        let _136: &u32;
        let _137: &u32;
        scope 23 {
            debug left_val => _136;
            debug right_val => _137;
            let _142: core::panicking::AssertKind;
            scope 24 {
                debug kind => _142;
            }
        }
    }
    scope 25 {
        debug x => _145;
        let _154: &u64;
        let _155: &u64;
        scope 26 {
            debug left_val => _154;
            debug right_val => _155;
            let _160: core::panicking::AssertKind;
            scope 27 {
                debug kind => _160;
            }
        }
    }
    scope 28 {
        debug x => _163;
        let _172: &u64;
        let _173: &u64;
        scope 29 {
            debug left_val => _172;
            debug right_val => _173;
            let _178: core::panicking::AssertKind;
            scope 30 {
                debug kind => _178;
            }
        }
    }

    bb0: {
        _1 = const 3_i8;
        _3 = &mut _1;
        _5 = const 2_i8;
        _4 = &_5;
        _2 = <i8 as AddAssign<&i8>>::add_assign(move _3, move _4) -> bb1;
    }

    bb1: {
        _7 = &_1;
        _9 = const 5_i8;
        _8 = &_9;
        _6 = (move _7, move _8);
        _10 = (_6.0: &i8);
        _11 = (_6.1: &i8);
        _14 = (*_10);
        _15 = (*_11);
        _13 = Eq(move _14, move _15);
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _16 = core::panicking::AssertKind::Eq;
        _18 = Option::<Arguments<'_>>::None;
        _17 = core::panicking::assert_failed::<i8, i8>(move _16, _10, _11, move _18);
    }

    bb3: {
        _19 = const 7_i16;
        _21 = &mut _19;
        _23 = const 4_i16;
        _22 = &_23;
        _20 = <i16 as SubAssign<&i16>>::sub_assign(move _21, move _22) -> bb4;
    }

    bb4: {
        _25 = &_19;
        _27 = const 3_i16;
        _26 = &_27;
        _24 = (move _25, move _26);
        _28 = (_24.0: &i16);
        _29 = (_24.1: &i16);
        _32 = (*_28);
        _33 = (*_29);
        _31 = Eq(move _32, move _33);
        _30 = Not(move _31);
        switchInt(move _30) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = core::panicking::assert_failed::<i16, i16>(move _34, _28, _29, move _36);
    }

    bb6: {
        _37 = const 3f32;
        _39 = &mut _37;
        _41 = const 3f32;
        _40 = &_41;
        _38 = <f32 as MulAssign<&f32>>::mul_assign(move _39, move _40) -> bb7;
    }

    bb7: {
        _43 = &_37;
        _45 = const 9f32;
        _44 = &_45;
        _42 = (move _43, move _44);
        _46 = (_42.0: &f32);
        _47 = (_42.1: &f32);
        _50 = (*_46);
        _51 = (*_47);
        _49 = Eq(move _50, move _51);
        _48 = Not(move _49);
        switchInt(move _48) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _52 = core::panicking::AssertKind::Eq;
        _54 = Option::<Arguments<'_>>::None;
        _53 = core::panicking::assert_failed::<f32, f32>(move _52, _46, _47, move _54);
    }

    bb9: {
        _55 = const 6f64;
        _57 = &mut _55;
        _59 = const 2f64;
        _58 = &_59;
        _56 = <f64 as DivAssign<&f64>>::div_assign(move _57, move _58) -> bb10;
    }

    bb10: {
        _61 = &_55;
        _63 = const 3f64;
        _62 = &_63;
        _60 = (move _61, move _62);
        _64 = (_60.0: &f64);
        _65 = (_60.1: &f64);
        _68 = (*_64);
        _69 = (*_65);
        _67 = Eq(move _68, move _69);
        _66 = Not(move _67);
        switchInt(move _66) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _70 = core::panicking::AssertKind::Eq;
        _72 = Option::<Arguments<'_>>::None;
        _71 = core::panicking::assert_failed::<f64, f64>(move _70, _64, _65, move _72);
    }

    bb12: {
        _73 = const 7_i64;
        _75 = &mut _73;
        _77 = const 4_i64;
        _76 = &_77;
        _74 = <i64 as RemAssign<&i64>>::rem_assign(move _75, move _76) -> bb13;
    }

    bb13: {
        _79 = &_73;
        _81 = const 3_i64;
        _80 = &_81;
        _78 = (move _79, move _80);
        _82 = (_78.0: &i64);
        _83 = (_78.1: &i64);
        _86 = (*_82);
        _87 = (*_83);
        _85 = Eq(move _86, move _87);
        _84 = Not(move _85);
        switchInt(move _84) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _88 = core::panicking::AssertKind::Eq;
        _90 = Option::<Arguments<'_>>::None;
        _89 = core::panicking::assert_failed::<i64, i64>(move _88, _82, _83, move _90);
    }

    bb15: {
        _91 = const 10_u8;
        _93 = &mut _91;
        _95 = const 12_u8;
        _94 = &_95;
        _92 = <u8 as BitOrAssign<&u8>>::bitor_assign(move _93, move _94) -> bb16;
    }

    bb16: {
        _97 = &_91;
        _99 = const 14_u8;
        _98 = &_99;
        _96 = (move _97, move _98);
        _100 = (_96.0: &u8);
        _101 = (_96.1: &u8);
        _104 = (*_100);
        _105 = (*_101);
        _103 = Eq(move _104, move _105);
        _102 = Not(move _103);
        switchInt(move _102) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _106 = core::panicking::AssertKind::Eq;
        _108 = Option::<Arguments<'_>>::None;
        _107 = core::panicking::assert_failed::<u8, u8>(move _106, _100, _101, move _108);
    }

    bb18: {
        _109 = const 10_u16;
        _111 = &mut _109;
        _113 = const 12_u16;
        _112 = &_113;
        _110 = <u16 as BitAndAssign<&u16>>::bitand_assign(move _111, move _112) -> bb19;
    }

    bb19: {
        _115 = &_109;
        _117 = const 8_u16;
        _116 = &_117;
        _114 = (move _115, move _116);
        _118 = (_114.0: &u16);
        _119 = (_114.1: &u16);
        _122 = (*_118);
        _123 = (*_119);
        _121 = Eq(move _122, move _123);
        _120 = Not(move _121);
        switchInt(move _120) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _124 = core::panicking::AssertKind::Eq;
        _126 = Option::<Arguments<'_>>::None;
        _125 = core::panicking::assert_failed::<u16, u16>(move _124, _118, _119, move _126);
    }

    bb21: {
        _127 = const 10_u32;
        _129 = &mut _127;
        _131 = const 12_u32;
        _130 = &_131;
        _128 = <u32 as BitXorAssign<&u32>>::bitxor_assign(move _129, move _130) -> bb22;
    }

    bb22: {
        _133 = &_127;
        _135 = const 6_u32;
        _134 = &_135;
        _132 = (move _133, move _134);
        _136 = (_132.0: &u32);
        _137 = (_132.1: &u32);
        _140 = (*_136);
        _141 = (*_137);
        _139 = Eq(move _140, move _141);
        _138 = Not(move _139);
        switchInt(move _138) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _142 = core::panicking::AssertKind::Eq;
        _144 = Option::<Arguments<'_>>::None;
        _143 = core::panicking::assert_failed::<u32, u32>(move _142, _136, _137, move _144);
    }

    bb24: {
        _145 = const 10_u64;
        _147 = &mut _145;
        _149 = const 2_u32;
        _148 = &_149;
        _146 = <u64 as ShlAssign<&u32>>::shl_assign(move _147, move _148) -> bb25;
    }

    bb25: {
        _151 = &_145;
        _153 = const 40_u64;
        _152 = &_153;
        _150 = (move _151, move _152);
        _154 = (_150.0: &u64);
        _155 = (_150.1: &u64);
        _158 = (*_154);
        _159 = (*_155);
        _157 = Eq(move _158, move _159);
        _156 = Not(move _157);
        switchInt(move _156) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _160 = core::panicking::AssertKind::Eq;
        _162 = Option::<Arguments<'_>>::None;
        _161 = core::panicking::assert_failed::<u64, u64>(move _160, _154, _155, move _162);
    }

    bb27: {
        _163 = const 10_u64;
        _165 = &mut _163;
        _167 = const 2_i16;
        _166 = &_167;
        _164 = <u64 as ShrAssign<&i16>>::shr_assign(move _165, move _166) -> bb28;
    }

    bb28: {
        _169 = &_163;
        _171 = const 2_u64;
        _170 = &_171;
        _168 = (move _169, move _170);
        _172 = (_168.0: &u64);
        _173 = (_168.1: &u64);
        _176 = (*_172);
        _177 = (*_173);
        _175 = Eq(move _176, move _177);
        _174 = Not(move _175);
        switchInt(move _174) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _178 = core::panicking::AssertKind::Eq;
        _180 = Option::<Arguments<'_>>::None;
        _179 = core::panicking::assert_failed::<u64, u64>(move _178, _172, _173, move _180);
    }

    bb30: {
        return;
    }
}
