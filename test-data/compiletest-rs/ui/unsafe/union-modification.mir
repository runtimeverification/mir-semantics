// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn do_nothing(_1: &mut Foo) -> () {
    debug _x => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: Foo;
    let _2: ();
    let mut _3: &mut Foo;
    let mut _4: (&i8, &i8);
    let mut _5: &i8;
    let _6: i8;
    let mut _7: &i8;
    let _8: i8;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: i8;
    let mut _14: i8;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _19: (&i8, &i8);
    let mut _20: &i8;
    let mut _21: &i8;
    let _22: i8;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: i8;
    let mut _28: i8;
    let _30: !;
    let mut _31: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _35: (Foo, i32);
    let mut _37: Foo;
    let mut _38: (&i8, &i8);
    let mut _39: &i8;
    let _40: i8;
    let mut _41: &i8;
    let _42: i8;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: i8;
    let mut _48: i8;
    let _50: !;
    let mut _51: std::option::Option<std::fmt::Arguments<'_>>;
    let _52: ();
    let mut _53: FooHolder;
    scope 1 {
        debug foo => _1;
        let _9: &i8;
        let _10: &i8;
        let _32: Foo;
        scope 2 {
        }
        scope 3 {
        }
        scope 4 {
            debug left_val => _9;
            debug right_val => _10;
            let _15: core::panicking::AssertKind;
            scope 5 {
                debug kind => _15;
            }
        }
        scope 6 {
            let _18: i8;
            scope 7 {
                debug inner => _18;
                let _23: &i8;
                let _24: &i8;
                scope 8 {
                    debug left_val => _23;
                    debug right_val => _24;
                    let _29: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _29;
                    }
                }
            }
        }
        scope 10 {
            debug foo => _32;
            scope 11 {
                debug foo => _32;
                let _33: Foo;
                let _34: i32;
                scope 14 {
                    debug _foo2 => _33;
                    debug _random => _34;
                    let mut _36: FooHolder;
                    scope 15 {
                        debug foo_holder => _36;
                        let _43: &i8;
                        let _44: &i8;
                        scope 16 {
                        }
                        scope 17 {
                            debug left_val => _43;
                            debug right_val => _44;
                            let _49: core::panicking::AssertKind;
                            scope 18 {
                                debug kind => _49;
                            }
                        }
                    }
                }
            }
            scope 12 {
                scope 13 {
                }
            }
        }
    }

    bb0: {
        _1 = Foo { bar: const 5_i8 };
        _3 = &mut _1;
        _2 = do_nothing(_3) -> bb1;
    }

    bb1: {
        (_1.0: i8) = const 6_i8;
        (_1.0: i8) = Add((_1.0: i8), const 1_i8);
        _6 = (_1.0: i8);
        _5 = &_6;
        _8 = const 7_i8;
        _7 = &_8;
        _4 = (move _5, move _7);
        _9 = (_4.0: &i8);
        _10 = (_4.1: &i8);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<i8, i8>(move _15, _9, _10, move _17);
    }

    bb3: {
        _18 = (_1.0: i8);
        _20 = &_18;
        _22 = const 7_i8;
        _21 = &_22;
        _19 = (move _20, move _21);
        _23 = (_19.0: &i8);
        _24 = (_19.1: &i8);
        _27 = (*_23);
        _28 = (*_24);
        _26 = Eq(move _27, move _28);
        _25 = Not(move _26);
        switchInt(move _25) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _29 = core::panicking::AssertKind::Eq;
        _31 = Option::<Arguments<'_>>::None;
        _30 = core::panicking::assert_failed::<i8, i8>(move _29, _23, _24, move _31);
    }

    bb5: {
        _32 = Foo { bar: const 5_i8 };
        _35 = (move _32, const 42_i32);
        _33 = move (_35.0: Foo);
        _34 = (_35.1: i32);
        _37 = Foo { bar: const 5_i8 };
        _36 = FooHolder { inner_foo: move _37 };
        ((_36.0: Foo).0: i8) = const 4_i8;
        _40 = ((_36.0: Foo).0: i8);
        _39 = &_40;
        _42 = const 4_i8;
        _41 = &_42;
        _38 = (move _39, move _41);
        _43 = (_38.0: &i8);
        _44 = (_38.1: &i8);
        _47 = (*_43);
        _48 = (*_44);
        _46 = Eq(move _47, move _48);
        _45 = Not(move _46);
        switchInt(move _45) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _49 = core::panicking::AssertKind::Eq;
        _51 = Option::<Arguments<'_>>::None;
        _50 = core::panicking::assert_failed::<i8, i8>(move _49, _43, _44, move _51);
    }

    bb7: {
        _53 = move _36;
        _52 = std::mem::drop::<FooHolder>(move _53) -> bb8;
    }

    bb8: {
        return;
    }
}
