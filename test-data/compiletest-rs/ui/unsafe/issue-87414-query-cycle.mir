// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn bad() -> Box<dyn Iterator<Item = [(); 4]>> {
    let mut _0: std::boxed::Box<dyn std::iter::Iterator<Item = [(); 4]>>;
    let mut _1: !;

    bb0: {
        _1 = core::panicking::panic(const "not yet implemented");
    }
}

bad::{constant#0}: usize = {
    let mut _0: usize;
    let _1: [closure@ui/unsafe/issue-87414-query-cycle.rs:6:47: 6:55];

    bb0: {
        StorageLive(_1);
        _1 = [closure@ui/unsafe/issue-87414-query-cycle.rs:6:47: 6:55];
        StorageDead(_1);
        _0 = const 4_usize;
        return;
    }
}

fn bad::{constant#0}::{closure#0}(_1: &[closure@ui/unsafe/issue-87414-query-cycle.rs:6:47: 6:55], _2: u32) -> u32 {
    debug x => _2;
    let mut _0: u32;

    bb0: {
        _0 = _2;
        return;
    }
}

fn foo() -> [(); 4] {
    let mut _0: [(); 4];
    let mut _1: !;

    bb0: {
        _1 = core::panicking::panic(const "not yet implemented");
    }
}

foo::{constant#0}: usize = {
    let mut _0: usize;
    let _1: [closure@ui/unsafe/issue-87414-query-cycle.rs:8:20: 8:28];

    bb0: {
        StorageLive(_1);
        _1 = [closure@ui/unsafe/issue-87414-query-cycle.rs:8:20: 8:28];
        StorageDead(_1);
        _0 = const 4_usize;
        return;
    }
}

fn foo::{constant#0}::{closure#0}(_1: &[closure@ui/unsafe/issue-87414-query-cycle.rs:8:20: 8:28], _2: u32) -> u32 {
    debug x => _2;
    let mut _0: u32;

    bb0: {
        _0 = _2;
        return;
    }
}

fn bar() -> () {
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

bar::{constant#0}: usize = {
    let mut _0: usize;
    let _1: [closure@ui/unsafe/issue-87414-query-cycle.rs:9:26: 9:34];

    bb0: {
        StorageLive(_1);
        _1 = [closure@ui/unsafe/issue-87414-query-cycle.rs:9:26: 9:34];
        StorageDead(_1);
        _0 = const 4_usize;
        return;
    }
}

fn bar::{constant#0}::{closure#0}(_1: &[closure@ui/unsafe/issue-87414-query-cycle.rs:9:26: 9:34], _2: u32) -> u32 {
    debug x => _2;
    let mut _0: u32;

    bb0: {
        _0 = _2;
        return;
    }
}

fn unsf() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn bad2() -> Box<dyn Iterator<Item = [(); 4]>> {
    let mut _0: std::boxed::Box<dyn std::iter::Iterator<Item = [(); 4]>>;
    let mut _1: !;

    bb0: {
        _1 = core::panicking::panic(const "not yet implemented");
    }
}

bad2::{constant#0}: usize = {
    let mut _0: usize;
    let _1: [closure@ui/unsafe/issue-87414-query-cycle.rs:13:57: 13:59];
    scope 1 {
    }

    bb0: {
        StorageLive(_1);
        _1 = [closure@ui/unsafe/issue-87414-query-cycle.rs:13:57: 13:59];
        StorageDead(_1);
        _0 = const 4_usize;
        return;
    }
}

fn bad2::{constant#0}::{closure#0}(_1: &[closure@ui/unsafe/issue-87414-query-cycle.rs:13:57: 13:59]) -> () {
    let mut _0: ();

    bb0: {
        _0 = unsf() -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
