// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f(_1: &mut A) -> () {
    debug arg => _1;
    let mut _0: ();

    bb0: {
        ((*_1).0: isize) = const 100_isize;
        return;
    }
}

fn <impl at ui/expr-copy.rs:7:16: 7:21>::clone(_1: &A) -> A {
    debug self => _1;
    let mut _0: A;
    scope 1 {
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: A;
    let _2: ();
    let mut _3: &mut A;
    let mut _4: (&isize, &isize);
    let mut _5: &isize;
    let mut _6: &isize;
    let _7: isize;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: isize;
    let mut _13: isize;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let _18: ();
    let mut _19: &mut A;
    let mut _20: (&isize, &isize);
    let mut _21: &isize;
    let mut _22: &isize;
    let _23: isize;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: isize;
    let mut _29: isize;
    let _31: !;
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _8: &isize;
        let _9: &isize;
        let mut _17: A;
        scope 2 {
            debug left_val => _8;
            debug right_val => _9;
            let _14: core::panicking::AssertKind;
            scope 3 {
                debug kind => _14;
            }
        }
        scope 4 {
            debug y => _17;
            let _24: &isize;
            let _25: &isize;
            scope 5 {
                debug left_val => _24;
                debug right_val => _25;
                let _30: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _30;
                }
            }
        }
    }

    bb0: {
        _1 = A { a: const 10_isize };
        _3 = &mut _1;
        _2 = f(_3) -> bb1;
    }

    bb1: {
        _5 = &(_1.0: isize);
        _7 = const 100_isize;
        _6 = &_7;
        _4 = (move _5, move _6);
        _8 = (_4.0: &isize);
        _9 = (_4.1: &isize);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<isize, isize>(move _14, _8, _9, move _16);
    }

    bb3: {
        (_1.0: isize) = const 20_isize;
        _17 = _1;
        _19 = &mut _17;
        _18 = f(_19) -> bb4;
    }

    bb4: {
        _21 = &(_1.0: isize);
        _23 = const 20_isize;
        _22 = &_23;
        _20 = (move _21, move _22);
        _24 = (_20.0: &isize);
        _25 = (_20.1: &isize);
        _28 = (*_24);
        _29 = (*_25);
        _27 = Eq(move _28, move _29);
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _30 = core::panicking::AssertKind::Eq;
        _32 = Option::<Arguments<'_>>::None;
        _31 = core::panicking::assert_failed::<isize, isize>(move _30, _24, _25, move _32);
    }

    bb6: {
        return;
    }
}
