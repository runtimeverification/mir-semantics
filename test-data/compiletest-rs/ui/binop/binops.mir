// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test_nil() -> () {
    let mut _0: ();
    let mut _1: (&(), &());
    let mut _2: &();
    let _3: ();
    let mut _4: &();
    let _5: ();
    let _6: &();
    let _7: &();
    let mut _8: bool;
    let mut _9: bool;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: &();
    let _17: ();
    let mut _18: &();
    let _19: ();
    let mut _20: !;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: &();
    let _25: ();
    let mut _26: &();
    let _27: ();
    let mut _28: !;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: &();
    let _32: ();
    let mut _33: &();
    let _34: ();
    let mut _35: !;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: &();
    let _40: ();
    let mut _41: &();
    let _42: ();
    let mut _43: !;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: &();
    let _47: ();
    let mut _48: &();
    let _49: ();
    let mut _50: !;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }

    bb0: {
        _2 = &_3;
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &());
        _7 = (_1.1: &());
        _9 = <() as PartialEq>::eq(_6, _7) -> bb1;
    }

    bb1: {
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<(), ()>(move _10, _6, _7, move _12);
    }

    bb3: {
        _16 = &_17;
        _18 = &_19;
        _15 = <() as PartialEq>::ne(move _16, move _18) -> bb4;
    }

    bb4: {
        _14 = Not(move _15);
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _20 = core::panicking::panic(const "assertion failed: (!(() != ()))");
    }

    bb6: {
        _24 = &_25;
        _26 = &_27;
        _23 = <() as PartialOrd>::lt(move _24, move _26) -> bb7;
    }

    bb7: {
        _22 = Not(move _23);
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _28 = core::panicking::panic(const "assertion failed: (!(() < ()))");
    }

    bb9: {
        _31 = &_32;
        _33 = &_34;
        _30 = <() as PartialOrd>::le(move _31, move _33) -> bb10;
    }

    bb10: {
        _29 = Not(move _30);
        switchInt(move _29) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _35 = core::panicking::panic(const "assertion failed: (() <= ())");
    }

    bb12: {
        _39 = &_40;
        _41 = &_42;
        _38 = <() as PartialOrd>::gt(move _39, move _41) -> bb13;
    }

    bb13: {
        _37 = Not(move _38);
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _43 = core::panicking::panic(const "assertion failed: (!(() > ()))");
    }

    bb15: {
        _46 = &_47;
        _48 = &_49;
        _45 = <() as PartialOrd>::ge(move _46, move _48) -> bb16;
    }

    bb16: {
        _44 = Not(move _45);
        switchInt(move _44) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _50 = core::panicking::panic(const "assertion failed: (() >= ())");
    }

    bb18: {
        return;
    }
}

fn test_bool() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: !;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: !;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: !;
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: !;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: !;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: !;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: !;
    let mut _29: (&bool, &bool);
    let mut _30: &bool;
    let _31: bool;
    let mut _32: &bool;
    let _33: bool;
    let _34: &bool;
    let _35: &bool;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: bool;
    let _41: !;
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _43: (&bool, &bool);
    let mut _44: &bool;
    let _45: bool;
    let mut _46: &bool;
    let _47: bool;
    let _48: &bool;
    let _49: &bool;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: bool;
    let _55: !;
    let mut _56: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _57: (&bool, &bool);
    let mut _58: &bool;
    let _59: bool;
    let mut _60: &bool;
    let _61: bool;
    let _62: &bool;
    let _63: &bool;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let _69: !;
    let mut _70: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _71: (&bool, &bool);
    let mut _72: &bool;
    let _73: bool;
    let mut _74: &bool;
    let _75: bool;
    let _76: &bool;
    let _77: &bool;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: bool;
    let _83: !;
    let mut _84: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _85: (&bool, &bool);
    let mut _86: &bool;
    let _87: bool;
    let mut _88: &bool;
    let _89: bool;
    let _90: &bool;
    let _91: &bool;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: bool;
    let mut _95: bool;
    let _97: !;
    let mut _98: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _99: (&bool, &bool);
    let mut _100: &bool;
    let _101: bool;
    let mut _102: &bool;
    let _103: bool;
    let _104: &bool;
    let _105: &bool;
    let mut _106: bool;
    let mut _107: bool;
    let mut _108: bool;
    let mut _109: bool;
    let _111: !;
    let mut _112: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _113: (&bool, &bool);
    let mut _114: &bool;
    let _115: bool;
    let mut _116: &bool;
    let _117: bool;
    let _118: &bool;
    let _119: &bool;
    let mut _120: bool;
    let mut _121: bool;
    let mut _122: bool;
    let mut _123: bool;
    let _125: !;
    let mut _126: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _127: (&bool, &bool);
    let mut _128: &bool;
    let _129: bool;
    let mut _130: &bool;
    let _131: bool;
    let _132: &bool;
    let _133: &bool;
    let mut _134: bool;
    let mut _135: bool;
    let mut _136: bool;
    let mut _137: bool;
    let _139: !;
    let mut _140: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _141: (&bool, &bool);
    let mut _142: &bool;
    let _143: bool;
    let mut _144: &bool;
    let _145: bool;
    let _146: &bool;
    let _147: &bool;
    let mut _148: bool;
    let mut _149: bool;
    let mut _150: bool;
    let mut _151: bool;
    let _153: !;
    let mut _154: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _34;
        debug right_val => _35;
        let _40: core::panicking::AssertKind;
        scope 2 {
            debug kind => _40;
        }
    }
    scope 3 {
        debug left_val => _48;
        debug right_val => _49;
        let _54: core::panicking::AssertKind;
        scope 4 {
            debug kind => _54;
        }
    }
    scope 5 {
        debug left_val => _62;
        debug right_val => _63;
        let _68: core::panicking::AssertKind;
        scope 6 {
            debug kind => _68;
        }
    }
    scope 7 {
        debug left_val => _76;
        debug right_val => _77;
        let _82: core::panicking::AssertKind;
        scope 8 {
            debug kind => _82;
        }
    }
    scope 9 {
        debug left_val => _90;
        debug right_val => _91;
        let _96: core::panicking::AssertKind;
        scope 10 {
            debug kind => _96;
        }
    }
    scope 11 {
        debug left_val => _104;
        debug right_val => _105;
        let _110: core::panicking::AssertKind;
        scope 12 {
            debug kind => _110;
        }
    }
    scope 13 {
        debug left_val => _118;
        debug right_val => _119;
        let _124: core::panicking::AssertKind;
        scope 14 {
            debug kind => _124;
        }
    }
    scope 15 {
        debug left_val => _132;
        debug right_val => _133;
        let _138: core::panicking::AssertKind;
        scope 16 {
            debug kind => _138;
        }
    }
    scope 17 {
        debug left_val => _146;
        debug right_val => _147;
        let _152: core::panicking::AssertKind;
        scope 18 {
            debug kind => _152;
        }
    }

    bb0: {
        _3 = Lt(const true, const false);
        _2 = Not(move _3);
        _1 = Not(move _2);
        switchInt(move _1) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _4 = core::panicking::panic(const "assertion failed: (!(true < false))");
    }

    bb2: {
        _7 = Le(const true, const false);
        _6 = Not(move _7);
        _5 = Not(move _6);
        switchInt(move _5) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _8 = core::panicking::panic(const "assertion failed: (!(true <= false))");
    }

    bb4: {
        _10 = Gt(const true, const false);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _11 = core::panicking::panic(const "assertion failed: (true > false)");
    }

    bb6: {
        _13 = Ge(const true, const false);
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _14 = core::panicking::panic(const "assertion failed: (true >= false)");
    }

    bb8: {
        _16 = Lt(const false, const true);
        _15 = Not(move _16);
        switchInt(move _15) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _17 = core::panicking::panic(const "assertion failed: (false < true)");
    }

    bb10: {
        _19 = Le(const false, const true);
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _20 = core::panicking::panic(const "assertion failed: (false <= true)");
    }

    bb12: {
        _23 = Gt(const false, const true);
        _22 = Not(move _23);
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _24 = core::panicking::panic(const "assertion failed: (!(false > true))");
    }

    bb14: {
        _27 = Ge(const false, const true);
        _26 = Not(move _27);
        _25 = Not(move _26);
        switchInt(move _25) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _28 = core::panicking::panic(const "assertion failed: (!(false >= true))");
    }

    bb16: {
        _31 = BitAnd(const false, const false);
        _30 = &_31;
        _33 = const false;
        _32 = &_33;
        _29 = (move _30, move _32);
        _34 = (_29.0: &bool);
        _35 = (_29.1: &bool);
        _38 = (*_34);
        _39 = (*_35);
        _37 = Eq(move _38, move _39);
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _40 = core::panicking::AssertKind::Eq;
        _42 = Option::<Arguments<'_>>::None;
        _41 = core::panicking::assert_failed::<bool, bool>(move _40, _34, _35, move _42);
    }

    bb18: {
        _45 = BitAnd(const true, const false);
        _44 = &_45;
        _47 = const false;
        _46 = &_47;
        _43 = (move _44, move _46);
        _48 = (_43.0: &bool);
        _49 = (_43.1: &bool);
        _52 = (*_48);
        _53 = (*_49);
        _51 = Eq(move _52, move _53);
        _50 = Not(move _51);
        switchInt(move _50) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _54 = core::panicking::AssertKind::Eq;
        _56 = Option::<Arguments<'_>>::None;
        _55 = core::panicking::assert_failed::<bool, bool>(move _54, _48, _49, move _56);
    }

    bb20: {
        _59 = BitAnd(const true, const true);
        _58 = &_59;
        _61 = const true;
        _60 = &_61;
        _57 = (move _58, move _60);
        _62 = (_57.0: &bool);
        _63 = (_57.1: &bool);
        _66 = (*_62);
        _67 = (*_63);
        _65 = Eq(move _66, move _67);
        _64 = Not(move _65);
        switchInt(move _64) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _68 = core::panicking::AssertKind::Eq;
        _70 = Option::<Arguments<'_>>::None;
        _69 = core::panicking::assert_failed::<bool, bool>(move _68, _62, _63, move _70);
    }

    bb22: {
        _73 = BitOr(const false, const false);
        _72 = &_73;
        _75 = const false;
        _74 = &_75;
        _71 = (move _72, move _74);
        _76 = (_71.0: &bool);
        _77 = (_71.1: &bool);
        _80 = (*_76);
        _81 = (*_77);
        _79 = Eq(move _80, move _81);
        _78 = Not(move _79);
        switchInt(move _78) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _82 = core::panicking::AssertKind::Eq;
        _84 = Option::<Arguments<'_>>::None;
        _83 = core::panicking::assert_failed::<bool, bool>(move _82, _76, _77, move _84);
    }

    bb24: {
        _87 = BitOr(const true, const false);
        _86 = &_87;
        _89 = const true;
        _88 = &_89;
        _85 = (move _86, move _88);
        _90 = (_85.0: &bool);
        _91 = (_85.1: &bool);
        _94 = (*_90);
        _95 = (*_91);
        _93 = Eq(move _94, move _95);
        _92 = Not(move _93);
        switchInt(move _92) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _96 = core::panicking::AssertKind::Eq;
        _98 = Option::<Arguments<'_>>::None;
        _97 = core::panicking::assert_failed::<bool, bool>(move _96, _90, _91, move _98);
    }

    bb26: {
        _101 = BitOr(const true, const true);
        _100 = &_101;
        _103 = const true;
        _102 = &_103;
        _99 = (move _100, move _102);
        _104 = (_99.0: &bool);
        _105 = (_99.1: &bool);
        _108 = (*_104);
        _109 = (*_105);
        _107 = Eq(move _108, move _109);
        _106 = Not(move _107);
        switchInt(move _106) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _110 = core::panicking::AssertKind::Eq;
        _112 = Option::<Arguments<'_>>::None;
        _111 = core::panicking::assert_failed::<bool, bool>(move _110, _104, _105, move _112);
    }

    bb28: {
        _115 = BitXor(const false, const false);
        _114 = &_115;
        _117 = const false;
        _116 = &_117;
        _113 = (move _114, move _116);
        _118 = (_113.0: &bool);
        _119 = (_113.1: &bool);
        _122 = (*_118);
        _123 = (*_119);
        _121 = Eq(move _122, move _123);
        _120 = Not(move _121);
        switchInt(move _120) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _124 = core::panicking::AssertKind::Eq;
        _126 = Option::<Arguments<'_>>::None;
        _125 = core::panicking::assert_failed::<bool, bool>(move _124, _118, _119, move _126);
    }

    bb30: {
        _129 = BitXor(const true, const false);
        _128 = &_129;
        _131 = const true;
        _130 = &_131;
        _127 = (move _128, move _130);
        _132 = (_127.0: &bool);
        _133 = (_127.1: &bool);
        _136 = (*_132);
        _137 = (*_133);
        _135 = Eq(move _136, move _137);
        _134 = Not(move _135);
        switchInt(move _134) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _138 = core::panicking::AssertKind::Eq;
        _140 = Option::<Arguments<'_>>::None;
        _139 = core::panicking::assert_failed::<bool, bool>(move _138, _132, _133, move _140);
    }

    bb32: {
        _143 = BitXor(const true, const true);
        _142 = &_143;
        _145 = const false;
        _144 = &_145;
        _141 = (move _142, move _144);
        _146 = (_141.0: &bool);
        _147 = (_141.1: &bool);
        _150 = (*_146);
        _151 = (*_147);
        _149 = Eq(move _150, move _151);
        _148 = Not(move _149);
        switchInt(move _148) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        _152 = core::panicking::AssertKind::Eq;
        _154 = Option::<Arguments<'_>>::None;
        _153 = core::panicking::assert_failed::<bool, bool>(move _152, _146, _147, move _154);
    }

    bb34: {
        return;
    }
}

fn test_ptr() -> () {
    let mut _0: ();
    let mut _4: (&*const u8, &*const u8);
    let mut _5: &*const u8;
    let mut _6: &*const u8;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: *const u8;
    let mut _12: *const u8;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: *const u8;
    let mut _19: !;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: *const u8;
    let mut _23: !;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: *const u8;
    let mut _27: !;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: *const u8;
    let mut _31: !;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: !;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: *const u8;
    let mut _38: *const u8;
    let mut _39: !;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: *const u8;
    let mut _43: *const u8;
    let mut _44: !;
    scope 1 {
        let _1: *const u8;
        scope 2 {
            debug p1 => _1;
            let _2: *const u8;
            scope 3 {
                debug p2 => _2;
                let _3: *const u8;
                scope 4 {
                    debug p3 => _3;
                    let _7: &*const u8;
                    let _8: &*const u8;
                    scope 5 {
                        debug left_val => _7;
                        debug right_val => _8;
                        let _13: core::panicking::AssertKind;
                        scope 6 {
                            debug kind => _13;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const 0_usize as *const u8 (Transmute);
        _2 = const 0_usize as *const u8 (Transmute);
        _3 = const 1_usize as *const u8 (Transmute);
        _5 = &_1;
        _6 = &_2;
        _4 = (move _5, move _6);
        _7 = (_4.0: &*const u8);
        _8 = (_4.1: &*const u8);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<*const u8, *const u8>(move _13, _7, _8, move _15);
    }

    bb2: {
        _18 = _1;
        _17 = Ne(move _18, _3);
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _19 = core::panicking::panic(const "assertion failed: p1 != p3");
    }

    bb4: {
        _22 = _1;
        _21 = Lt(move _22, _3);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _23 = core::panicking::panic(const "assertion failed: p1 < p3");
    }

    bb6: {
        _26 = _1;
        _25 = Le(move _26, _3);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _27 = core::panicking::panic(const "assertion failed: p1 <= p3");
    }

    bb8: {
        _30 = _1;
        _29 = Gt(_3, move _30);
        _28 = Not(move _29);
        switchInt(move _28) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _31 = core::panicking::panic(const "assertion failed: p3 > p1");
    }

    bb10: {
        _33 = Ge(_3, _3);
        _32 = Not(move _33);
        switchInt(move _32) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _34 = core::panicking::panic(const "assertion failed: p3 >= p3");
    }

    bb12: {
        _37 = _1;
        _38 = _2;
        _36 = Le(move _37, move _38);
        _35 = Not(move _36);
        switchInt(move _35) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _39 = core::panicking::panic(const "assertion failed: p1 <= p2");
    }

    bb14: {
        _42 = _1;
        _43 = _2;
        _41 = Ge(move _42, move _43);
        _40 = Not(move _41);
        switchInt(move _40) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _44 = core::panicking::panic(const "assertion failed: p1 >= p2");
    }

    bb16: {
        return;
    }
}

fn <impl at ui/binop/binops.rs:55:10: 55:19>::eq(_1: &p, _2: &p) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: isize;
    let mut _5: isize;
    let mut _6: bool;
    let mut _7: isize;
    let mut _8: isize;

    bb0: {
        _4 = ((*_1).0: isize);
        _5 = ((*_2).0: isize);
        _3 = Eq(move _4, move _5);
        switchInt(move _3) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _7 = ((*_1).1: isize);
        _8 = ((*_2).1: isize);
        _6 = Eq(move _7, move _8);
        _0 = move _6;
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn <impl at ui/binop/binops.rs:55:21: 55:26>::fmt(_1: &p, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &isize;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&isize;
    let _10: &isize;

    bb0: {
        _3 = const "p";
        _4 = const "x";
        _6 = &((*_1).0: isize);
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize));
        _7 = const "y";
        _10 = &((*_1).1: isize);
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> bb1;
    }

    bb1: {
        return;
    }
}

fn p(_1: isize, _2: isize) -> p {
    debug x => _1;
    debug y => _2;
    let mut _0: p;

    bb0: {
        _0 = p { x: _1, y: _2 };
        return;
    }
}

fn test_class() -> () {
    let mut _0: ();
    let _1: p;
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let _6: &[&str; 3];
    let _7: [&str; 3];
    let mut _8: &[core::fmt::rt::Argument<'_>];
    let _9: &[core::fmt::rt::Argument<'_>; 2];
    let _10: [core::fmt::rt::Argument<'_>; 2];
    let mut _11: core::fmt::rt::Argument<'_>;
    let _12: &usize;
    let _13: usize;
    let mut _14: *const p;
    let _15: &p;
    let mut _16: core::fmt::rt::Argument<'_>;
    let _17: &usize;
    let _18: usize;
    let mut _19: *const p;
    let _20: &p;
    let mut _21: (&p, &p);
    let mut _22: &p;
    let mut _23: &p;
    let mut _26: bool;
    let mut _27: bool;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: isize;
    let mut _34: isize;
    let mut _35: !;
    let mut _36: (&isize, &isize);
    let mut _37: &isize;
    let mut _38: &isize;
    let _39: isize;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: isize;
    let mut _45: isize;
    let _47: !;
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: &p;
    let mut _52: &p;
    let mut _53: !;
    scope 1 {
        debug q => _1;
        let mut _2: p;
        scope 2 {
            debug r => _2;
            let _24: &p;
            let _25: &p;
            let _40: &isize;
            let _41: &isize;
            scope 3 {
            }
            scope 4 {
                debug left_val => _24;
                debug right_val => _25;
                let _28: core::panicking::AssertKind;
                scope 5 {
                    debug kind => _28;
                }
            }
            scope 6 {
                debug left_val => _40;
                debug right_val => _41;
                let _46: core::panicking::AssertKind;
                scope 7 {
                    debug kind => _46;
                }
            }
        }
    }

    bb0: {
        _1 = p(const 1_isize, const 2_isize) -> bb1;
    }

    bb1: {
        _2 = p(const 1_isize, const 2_isize) -> bb2;
    }

    bb2: {
        _7 = [const "q = ", const ", r = ", const "\n"];
        _6 = &_7;
        _5 = _6 as &[&str] (Pointer(Unsize));
        _15 = &_1;
        _14 = &raw const (*_15);
        _13 = move _14 as usize (Transmute);
        _12 = &_13;
        _11 = core::fmt::rt::Argument::<'_>::new_lower_hex::<usize>(_12) -> bb3;
    }

    bb3: {
        _20 = &_2;
        _19 = &raw const (*_20);
        _18 = move _19 as usize (Transmute);
        _17 = &_18;
        _16 = core::fmt::rt::Argument::<'_>::new_lower_hex::<usize>(_17) -> bb4;
    }

    bb4: {
        _10 = [move _11, move _16];
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> bb5;
    }

    bb5: {
        _3 = _print(move _4) -> bb6;
    }

    bb6: {
        _22 = &_1;
        _23 = &_2;
        _21 = (move _22, move _23);
        _24 = (_21.0: &p);
        _25 = (_21.1: &p);
        _27 = <p as PartialEq>::eq(_24, _25) -> bb7;
    }

    bb7: {
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<p, p>(move _28, _24, _25, move _30);
    }

    bb9: {
        (_2.1: isize) = const 17_isize;
        _33 = (_2.1: isize);
        _34 = (_1.1: isize);
        _32 = Ne(move _33, move _34);
        _31 = Not(move _32);
        switchInt(move _31) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _35 = core::panicking::panic(const "assertion failed: (r.y != q.y)");
    }

    bb11: {
        _37 = &(_2.1: isize);
        _39 = const 17_isize;
        _38 = &_39;
        _36 = (move _37, move _38);
        _40 = (_36.0: &isize);
        _41 = (_36.1: &isize);
        _44 = (*_40);
        _45 = (*_41);
        _43 = Eq(move _44, move _45);
        _42 = Not(move _43);
        switchInt(move _42) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _46 = core::panicking::AssertKind::Eq;
        _48 = Option::<Arguments<'_>>::None;
        _47 = core::panicking::assert_failed::<isize, isize>(move _46, _40, _41, move _48);
    }

    bb13: {
        _51 = &_1;
        _52 = &_2;
        _50 = <p as PartialEq>::ne(move _51, move _52) -> bb14;
    }

    bb14: {
        _49 = Not(move _50);
        switchInt(move _49) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _53 = core::panicking::panic(const "assertion failed: (q != r)");
    }

    bb16: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let _3: ();
    let _4: ();

    bb0: {
        _1 = test_nil() -> bb1;
    }

    bb1: {
        _2 = test_bool() -> bb2;
    }

    bb2: {
        _3 = test_ptr() -> bb3;
    }

    bb3: {
        _4 = test_class() -> bb4;
    }

    bb4: {
        return;
    }
}
