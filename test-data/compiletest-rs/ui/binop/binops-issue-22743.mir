// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/binop/binops-issue-22743.rs:5:16: 5:21>::clone(_1: &Foo) -> Foo {
    debug self => _1;
    let mut _0: Foo;
    scope 1 {
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn <impl at ui/binop/binops-issue-22743.rs:10:1: 10:22>::mul(_1: f64, _2: Foo) -> Foo {
    debug self => _1;
    debug rhs => _2;
    let mut _0: Foo;
    let mut _3: f64;
    let mut _4: f64;

    bb0: {
        _4 = (_2.0: f64);
        _3 = Add(_1, move _4);
        _0 = Foo { x: move _3 };
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Foo;
    let mut _4: (&f64, &f64);
    let mut _5: &f64;
    let mut _6: &f64;
    let _7: f64;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: f64;
    let mut _13: f64;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug f => _1;
        let _2: f64;
        scope 2 {
            debug val => _2;
            let _3: Foo;
            scope 3 {
                debug f2 => _3;
                let _8: &f64;
                let _9: &f64;
                scope 4 {
                    debug left_val => _8;
                    debug right_val => _9;
                    let _14: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _14;
                    }
                }
            }
        }
    }

    bb0: {
        _1 = Foo { x: const 5f64 };
        _2 = const 3f64;
        _3 = <f64 as Mul<Foo>>::mul(_2, _1) -> bb1;
    }

    bb1: {
        _5 = &(_3.0: f64);
        _7 = const 8f64;
        _6 = &_7;
        _4 = (move _5, move _6);
        _8 = (_4.0: &f64);
        _9 = (_4.1: &f64);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<f64, f64>(move _14, _8, _9, move _16);
    }

    bb3: {
        return;
    }
}
