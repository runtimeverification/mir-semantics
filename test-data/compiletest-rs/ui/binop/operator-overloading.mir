// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/binop/operator-overloading.rs:7:16: 7:21>::clone(_1: &Point) -> Point {
    debug self => _1;
    let mut _0: Point;
    scope 1 {
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn <impl at ui/binop/operator-overloading.rs:7:23: 7:28>::fmt(_1: &Point, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &isize;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&isize;
    let _10: &isize;

    bb0: {
        _3 = const "Point";
        _4 = const "x";
        _6 = &((*_1).0: isize);
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize));
        _7 = const "y";
        _10 = &((*_1).1: isize);
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/binop/operator-overloading.rs:13:1: 13:24>::add(_1: Point, _2: Point) -> Point {
    debug self => _1;
    debug other => _2;
    let mut _0: Point;
    let mut _3: isize;
    let mut _4: isize;
    let mut _5: isize;
    let mut _6: isize;
    let mut _7: isize;
    let mut _8: isize;

    bb0: {
        _4 = (_1.0: isize);
        _5 = (_2.0: isize);
        _3 = Add(move _4, move _5);
        _7 = (_1.1: isize);
        _8 = (_2.1: isize);
        _6 = Add(move _7, move _8);
        _0 = Point { x: move _3, y: move _6 };
        return;
    }
}

fn <impl at ui/binop/operator-overloading.rs:21:1: 21:24>::sub(_1: Point, _2: Point) -> Point {
    debug self => _1;
    debug other => _2;
    let mut _0: Point;
    let mut _3: isize;
    let mut _4: isize;
    let mut _5: isize;
    let mut _6: isize;
    let mut _7: isize;
    let mut _8: isize;

    bb0: {
        _4 = (_1.0: isize);
        _5 = (_2.0: isize);
        _3 = Sub(move _4, move _5);
        _7 = (_1.1: isize);
        _8 = (_2.1: isize);
        _6 = Sub(move _7, move _8);
        _0 = Point { x: move _3, y: move _6 };
        return;
    }
}

fn <impl at ui/binop/operator-overloading.rs:29:1: 29:24>::neg(_1: Point) -> Point {
    debug self => _1;
    let mut _0: Point;
    let mut _2: isize;
    let mut _3: isize;
    let mut _4: isize;
    let mut _5: isize;

    bb0: {
        _3 = (_1.0: isize);
        _2 = Neg(move _3);
        _5 = (_1.1: isize);
        _4 = Neg(move _5);
        _0 = Point { x: move _2, y: move _4 };
        return;
    }
}

fn <impl at ui/binop/operator-overloading.rs:37:1: 37:24>::not(_1: Point) -> Point {
    debug self => _1;
    let mut _0: Point;
    let mut _2: isize;
    let mut _3: isize;
    let mut _4: isize;
    let mut _5: isize;

    bb0: {
        _3 = (_1.0: isize);
        _2 = Not(move _3);
        _5 = (_1.1: isize);
        _4 = Not(move _5);
        _0 = Point { x: move _2, y: move _4 };
        return;
    }
}

fn <impl at ui/binop/operator-overloading.rs:45:1: 45:32>::index(_1: &Point, _2: bool) -> &isize {
    debug self => _1;
    debug x => _2;
    let mut _0: &isize;
    let _3: &isize;
    let _4: &isize;

    bb0: {
        switchInt(_2) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _3 = &((*_1).0: isize);
        _0 = _3;
        goto -> bb3;
    }

    bb2: {
        _4 = &((*_1).1: isize);
        _0 = _4;
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn <impl at ui/binop/operator-overloading.rs:57:1: 57:30>::eq(_1: &Point, _2: &Point) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: isize;
    let mut _5: isize;
    let mut _6: bool;
    let mut _7: isize;
    let mut _8: isize;

    bb0: {
        _4 = ((*_1).0: isize);
        _5 = ((*_2).0: isize);
        _3 = Eq(move _4, move _5);
        switchInt(move _3) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _7 = ((*_1).1: isize);
        _8 = ((*_2).1: isize);
        _6 = Eq(move _7, move _8);
        _0 = move _6;
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn <impl at ui/binop/operator-overloading.rs:57:1: 57:30>::ne(_1: &Point, _2: &Point) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;

    bb0: {
        _3 = <Point as PartialEq>::eq(_1, _2) -> bb1;
    }

    bb1: {
        _0 = Not(move _3);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: Point;
    let mut _2: Point;
    let mut _3: Point;
    let mut _4: Point;
    let mut _5: Point;
    let mut _6: Point;
    let mut _7: Point;
    let mut _8: (&Point, &Point);
    let mut _9: &Point;
    let _10: Point;
    let mut _11: Point;
    let mut _12: Point;
    let mut _13: &Point;
    let _14: Point;
    let mut _17: bool;
    let mut _18: bool;
    let _20: !;
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _22: (&Point, &Point);
    let mut _23: &Point;
    let _24: Point;
    let mut _25: Point;
    let mut _26: &Point;
    let _27: Point;
    let mut _30: bool;
    let mut _31: bool;
    let _33: !;
    let mut _34: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _35: (&isize, &isize);
    let mut _36: &isize;
    let _37: &isize;
    let mut _38: &Point;
    let mut _39: &isize;
    let _40: isize;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: isize;
    let mut _46: isize;
    let _48: !;
    let mut _49: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _50: (&isize, &isize);
    let mut _51: &isize;
    let _52: &isize;
    let mut _53: &Point;
    let mut _54: &isize;
    let _55: isize;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: isize;
    let mut _61: isize;
    let _63: !;
    let mut _64: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _66: Point;
    let mut _67: (&isize, &isize);
    let mut _68: &isize;
    let mut _69: &isize;
    let _70: isize;
    let mut _71: isize;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: isize;
    let mut _77: isize;
    let _79: !;
    let mut _80: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _81: (&isize, &isize);
    let mut _82: &isize;
    let mut _83: &isize;
    let _84: isize;
    let mut _85: isize;
    let mut _88: bool;
    let mut _89: bool;
    let mut _90: isize;
    let mut _91: isize;
    let _93: !;
    let mut _94: std::option::Option<std::fmt::Arguments<'_>>;
    let _95: ();
    let mut _96: isize;
    let mut _97: &isize;
    let mut _98: &Point;
    scope 1 {
        debug p => _1;
        let _15: &Point;
        let _16: &Point;
        let _28: &Point;
        let _29: &Point;
        let _41: &isize;
        let _42: &isize;
        let _56: &isize;
        let _57: &isize;
        let _65: Point;
        scope 2 {
            debug left_val => _15;
            debug right_val => _16;
            let _19: core::panicking::AssertKind;
            scope 3 {
                debug kind => _19;
            }
        }
        scope 4 {
            debug left_val => _28;
            debug right_val => _29;
            let _32: core::panicking::AssertKind;
            scope 5 {
                debug kind => _32;
            }
        }
        scope 6 {
            debug left_val => _41;
            debug right_val => _42;
            let _47: core::panicking::AssertKind;
            scope 7 {
                debug kind => _47;
            }
        }
        scope 8 {
            debug left_val => _56;
            debug right_val => _57;
            let _62: core::panicking::AssertKind;
            scope 9 {
                debug kind => _62;
            }
        }
        scope 10 {
            debug q => _65;
            let _72: &isize;
            let _73: &isize;
            let _86: &isize;
            let _87: &isize;
            scope 11 {
                debug left_val => _72;
                debug right_val => _73;
                let _78: core::panicking::AssertKind;
                scope 12 {
                    debug kind => _78;
                }
            }
            scope 13 {
                debug left_val => _86;
                debug right_val => _87;
                let _92: core::panicking::AssertKind;
                scope 14 {
                    debug kind => _92;
                }
            }
        }
    }

    bb0: {
        _1 = Point { x: const 10_isize, y: const 20_isize };
        _3 = _1;
        _4 = Point { x: const 101_isize, y: const 102_isize };
        _2 = <Point as Add>::add(move _3, move _4) -> bb1;
    }

    bb1: {
        _1 = move _2;
        _6 = _1;
        _7 = Point { x: const 100_isize, y: const 100_isize };
        _5 = <Point as Sub>::sub(move _6, move _7) -> bb2;
    }

    bb2: {
        _1 = move _5;
        _11 = _1;
        _12 = Point { x: const 5_isize, y: const 5_isize };
        _10 = <Point as Add>::add(move _11, move _12) -> bb3;
    }

    bb3: {
        _9 = &_10;
        _14 = Point { x: const 16_isize, y: const 27_isize };
        _13 = &_14;
        _8 = (move _9, move _13);
        _15 = (_8.0: &Point);
        _16 = (_8.1: &Point);
        _18 = <Point as PartialEq>::eq(_15, _16) -> bb4;
    }

    bb4: {
        _17 = Not(move _18);
        switchInt(move _17) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _19 = core::panicking::AssertKind::Eq;
        _21 = Option::<Arguments<'_>>::None;
        _20 = core::panicking::assert_failed::<Point, Point>(move _19, _15, _16, move _21);
    }

    bb6: {
        _25 = _1;
        _24 = <Point as Neg>::neg(move _25) -> bb7;
    }

    bb7: {
        _23 = &_24;
        _27 = Point { x: const -11_isize, y: const -22_isize };
        _26 = &_27;
        _22 = (move _23, move _26);
        _28 = (_22.0: &Point);
        _29 = (_22.1: &Point);
        _31 = <Point as PartialEq>::eq(_28, _29) -> bb8;
    }

    bb8: {
        _30 = Not(move _31);
        switchInt(move _30) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _32 = core::panicking::AssertKind::Eq;
        _34 = Option::<Arguments<'_>>::None;
        _33 = core::panicking::assert_failed::<Point, Point>(move _32, _28, _29, move _34);
    }

    bb10: {
        _38 = &_1;
        _37 = <Point as Index<bool>>::index(move _38, const true) -> bb11;
    }

    bb11: {
        _36 = _37;
        _40 = const 11_isize;
        _39 = &_40;
        _35 = (move _36, move _39);
        _41 = (_35.0: &isize);
        _42 = (_35.1: &isize);
        _45 = (*_41);
        _46 = (*_42);
        _44 = Eq(move _45, move _46);
        _43 = Not(move _44);
        switchInt(move _43) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _47 = core::panicking::AssertKind::Eq;
        _49 = Option::<Arguments<'_>>::None;
        _48 = core::panicking::assert_failed::<isize, isize>(move _47, _41, _42, move _49);
    }

    bb13: {
        _53 = &_1;
        _52 = <Point as Index<bool>>::index(move _53, const false) -> bb14;
    }

    bb14: {
        _51 = _52;
        _55 = const 22_isize;
        _54 = &_55;
        _50 = (move _51, move _54);
        _56 = (_50.0: &isize);
        _57 = (_50.1: &isize);
        _60 = (*_56);
        _61 = (*_57);
        _59 = Eq(move _60, move _61);
        _58 = Not(move _59);
        switchInt(move _58) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _62 = core::panicking::AssertKind::Eq;
        _64 = Option::<Arguments<'_>>::None;
        _63 = core::panicking::assert_failed::<isize, isize>(move _62, _56, _57, move _64);
    }

    bb16: {
        _66 = _1;
        _65 = <Point as Not>::not(move _66) -> bb17;
    }

    bb17: {
        _68 = &(_65.0: isize);
        _71 = (_1.0: isize);
        _70 = Not(move _71);
        _69 = &_70;
        _67 = (move _68, move _69);
        _72 = (_67.0: &isize);
        _73 = (_67.1: &isize);
        _76 = (*_72);
        _77 = (*_73);
        _75 = Eq(move _76, move _77);
        _74 = Not(move _75);
        switchInt(move _74) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _78 = core::panicking::AssertKind::Eq;
        _80 = Option::<Arguments<'_>>::None;
        _79 = core::panicking::assert_failed::<isize, isize>(move _78, _72, _73, move _80);
    }

    bb19: {
        _82 = &(_65.1: isize);
        _85 = (_1.1: isize);
        _84 = Not(move _85);
        _83 = &_84;
        _81 = (move _82, move _83);
        _86 = (_81.0: &isize);
        _87 = (_81.1: &isize);
        _90 = (*_86);
        _91 = (*_87);
        _89 = Eq(move _90, move _91);
        _88 = Not(move _89);
        switchInt(move _88) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _92 = core::panicking::AssertKind::Eq;
        _94 = Option::<Arguments<'_>>::None;
        _93 = core::panicking::assert_failed::<isize, isize>(move _92, _86, _87, move _94);
    }

    bb21: {
        _98 = &_1;
        _97 = <Point as Index<bool>>::index(move _98, const true) -> bb22;
    }

    bb22: {
        _96 = (*_97);
        _95 = result(move _96) -> bb23;
    }

    bb23: {
        return;
    }
}

fn result(_1: isize) -> () {
    debug i => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}
