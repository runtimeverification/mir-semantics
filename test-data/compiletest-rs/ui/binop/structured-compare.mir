// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/binop/structured-compare.rs:6:16: 6:21>::clone(_1: &foo) -> foo {
    debug self => _1;
    let mut _0: foo;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn <impl at ui/binop/structured-compare.rs:6:23: 6:28>::fmt(_1: &foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: &str;
    let mut _4: isize;
    let _5: &str;
    let _6: &str;

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _6 = const "small";
        _3 = _6;
        goto -> bb4;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = const "large";
        _3 = _5;
        goto -> bb4;
    }

    bb4: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> bb5;
    }

    bb5: {
        return;
    }
}

fn <impl at ui/binop/structured-compare.rs:9:1: 9:23>::eq(_1: &foo, _2: &foo) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: usize;
    let _4: foo;
    let mut _5: isize;
    let mut _6: u8;
    let mut _7: bool;
    let mut _8: usize;
    let _9: foo;
    let mut _10: isize;
    let mut _11: u8;
    let mut _12: bool;

    bb0: {
        _4 = (*_1);
        _5 = discriminant(_4);
        _6 = _5 as u8 (IntToInt);
        _7 = Le(_6, const 1_u8);
        assume(move _7);
        _3 = move _5 as usize (IntToInt);
        _9 = (*_2);
        _10 = discriminant(_9);
        _11 = _10 as u8 (IntToInt);
        _12 = Le(_11, const 1_u8);
        assume(move _12);
        _8 = move _10 as usize (IntToInt);
        _0 = Eq(move _3, move _8);
        return;
    }
}

fn <impl at ui/binop/structured-compare.rs:9:1: 9:23>::ne(_1: &foo, _2: &foo) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;

    bb0: {
        _3 = <foo as PartialEq>::eq(_1, _2) -> bb1;
    }

    bb1: {
        _0 = Not(move _3);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: (i32, i32, i32);
    let mut _3: (&(i32, i32, i32), &(i32, i32, i32));
    let mut _4: &(i32, i32, i32);
    let mut _5: &(i32, i32, i32);
    let mut _8: bool;
    let mut _9: bool;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: &(i32, i32, i32);
    let mut _16: &(i32, i32, i32);
    let _17: (i32, i32, i32);
    let mut _18: !;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: &(i32, i32, i32);
    let mut _22: &(i32, i32, i32);
    let _23: (i32, i32, i32);
    let mut _24: !;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: &(i32, i32, i32);
    let mut _28: &(i32, i32, i32);
    let _29: (i32, i32, i32);
    let mut _30: !;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: &(i32, i32, i32);
    let _34: (i32, i32, i32);
    let mut _35: &(i32, i32, i32);
    let mut _36: !;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: &(i32, i32, i32);
    let _40: (i32, i32, i32);
    let mut _41: &(i32, i32, i32);
    let mut _42: !;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: &foo;
    let mut _48: &foo;
    let mut _49: !;
    let mut _50: (&foo, &foo);
    let mut _51: &foo;
    let mut _52: &foo;
    let _53: foo;
    let mut _56: bool;
    let mut _57: bool;
    let _59: !;
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: &foo;
    let mut _64: &foo;
    let _65: foo;
    let mut _66: !;
    scope 1 {
        debug a => _1;
        let _2: (i32, i32, i32);
        scope 2 {
            debug b => _2;
            let _6: &(i32, i32, i32);
            let _7: &(i32, i32, i32);
            let _43: foo;
            scope 3 {
                debug left_val => _6;
                debug right_val => _7;
                let _10: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _10;
                }
            }
            scope 5 {
                debug x => _43;
                let _44: foo;
                scope 6 {
                    debug y => _44;
                    let _54: &foo;
                    let _55: &foo;
                    scope 7 {
                        debug left_val => _54;
                        debug right_val => _55;
                        let _58: core::panicking::AssertKind;
                        scope 8 {
                            debug kind => _58;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = (const 1_i32, const 2_i32, const 3_i32);
        _2 = (const 1_i32, const 2_i32, const 3_i32);
        _4 = &_1;
        _5 = &_2;
        _3 = (move _4, move _5);
        _6 = (_3.0: &(i32, i32, i32));
        _7 = (_3.1: &(i32, i32, i32));
        _9 = <(i32, i32, i32) as PartialEq>::eq(_6, _7) -> bb1;
    }

    bb1: {
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<(i32, i32, i32), (i32, i32, i32)>(move _10, _6, _7, move _12);
    }

    bb3: {
        _15 = &_1;
        _17 = (const 1_i32, const 2_i32, const 4_i32);
        _16 = &_17;
        _14 = <(i32, i32, i32) as PartialEq>::ne(move _15, move _16) -> bb4;
    }

    bb4: {
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _18 = core::panicking::panic(const "assertion failed: (a != (1, 2, 4))");
    }

    bb6: {
        _21 = &_1;
        _23 = (const 1_i32, const 2_i32, const 4_i32);
        _22 = &_23;
        _20 = <(i32, i32, i32) as PartialOrd>::lt(move _21, move _22) -> bb7;
    }

    bb7: {
        _19 = Not(move _20);
        switchInt(move _19) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _24 = core::panicking::panic(const "assertion failed: (a < (1, 2, 4))");
    }

    bb9: {
        _27 = &_1;
        _29 = (const 1_i32, const 2_i32, const 4_i32);
        _28 = &_29;
        _26 = <(i32, i32, i32) as PartialOrd>::le(move _27, move _28) -> bb10;
    }

    bb10: {
        _25 = Not(move _26);
        switchInt(move _25) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _30 = core::panicking::panic(const "assertion failed: (a <= (1, 2, 4))");
    }

    bb12: {
        _34 = (const 1_i32, const 2_i32, const 4_i32);
        _33 = &_34;
        _35 = &_1;
        _32 = <(i32, i32, i32) as PartialOrd>::gt(move _33, move _35) -> bb13;
    }

    bb13: {
        _31 = Not(move _32);
        switchInt(move _31) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _36 = core::panicking::panic(const "assertion failed: ((1, 2, 4) > a)");
    }

    bb15: {
        _40 = (const 1_i32, const 2_i32, const 4_i32);
        _39 = &_40;
        _41 = &_1;
        _38 = <(i32, i32, i32) as PartialOrd>::ge(move _39, move _41) -> bb16;
    }

    bb16: {
        _37 = Not(move _38);
        switchInt(move _37) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _42 = core::panicking::panic(const "assertion failed: ((1, 2, 4) >= a)");
    }

    bb18: {
        _43 = foo::large;
        _44 = foo::small;
        _47 = &_43;
        _48 = &_44;
        _46 = <foo as PartialEq>::ne(move _47, move _48) -> bb19;
    }

    bb19: {
        _45 = Not(move _46);
        switchInt(move _45) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _49 = core::panicking::panic(const "assertion failed: (x != y)");
    }

    bb21: {
        _51 = &_43;
        _53 = foo::large;
        _52 = &_53;
        _50 = (move _51, move _52);
        _54 = (_50.0: &foo);
        _55 = (_50.1: &foo);
        _57 = <foo as PartialEq>::eq(_54, _55) -> bb22;
    }

    bb22: {
        _56 = Not(move _57);
        switchInt(move _56) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _58 = core::panicking::AssertKind::Eq;
        _60 = Option::<Arguments<'_>>::None;
        _59 = core::panicking::assert_failed::<foo, foo>(move _58, _54, _55, move _60);
    }

    bb24: {
        _63 = &_43;
        _65 = foo::small;
        _64 = &_65;
        _62 = <foo as PartialEq>::ne(move _63, move _64) -> bb25;
    }

    bb25: {
        _61 = Not(move _62);
        switchInt(move _61) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _66 = core::panicking::panic(const "assertion failed: (x != foo::small)");
    }

    bb27: {
        return;
    }
}
