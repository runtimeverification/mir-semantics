// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static LOG: AtomicUsize = {
    let mut _0: std::sync::atomic::AtomicUsize;

    bb0: {
        ConstEvalCounter;
        _0 = AtomicUsize::new(const 0_usize) -> bb1;
    }

    bb1: {
        return;
    }
}

fn <impl at ui/array-slice-vec/nested-vec-3.rs:18:1: 18:16>::drop(_1: &mut D) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 2];
    let _6: [&str; 2];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &u8;
    let _12: usize;
    let _13: &std::sync::atomic::AtomicUsize;
    let mut _14: std::sync::atomic::Ordering;
    let mut _15: std::result::Result<usize, usize>;
    let _16: &std::sync::atomic::AtomicUsize;
    let mut _17: usize;
    let mut _18: usize;
    let mut _19: usize;
    let mut _20: usize;
    let mut _21: usize;
    let mut _22: u8;
    let mut _23: std::sync::atomic::Ordering;
    let mut _24: std::sync::atomic::Ordering;
    scope 1 {
        debug old => _12;
        scope 2 {
        }
    }

    bb0: {
        _6 = [const "Dropping ", const "\n"];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _11 = &((*_1).0: u8);
        _10 = core::fmt::rt::Argument::<'_>::new_display::<u8>(_11) -> bb1;
    }

    bb1: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb2;
    }

    bb2: {
        _2 = _print(move _3) -> bb3;
    }

    bb3: {
        _13 = const {alloc1: &AtomicUsize};
        _14 = SeqCst;
        _12 = AtomicUsize::load(_13, move _14) -> bb4;
    }

    bb4: {
        _16 = const {alloc1: &AtomicUsize};
        _17 = _12;
        _20 = _12;
        _19 = Shl(move _20, const 4_i32);
        _22 = ((*_1).0: u8);
        _21 = move _22 as usize (IntToInt);
        _18 = BitOr(move _19, move _21);
        _23 = SeqCst;
        _24 = SeqCst;
        _15 = AtomicUsize::compare_exchange(_16, move _17, move _18, move _23, move _24) -> bb5;
    }

    bb5: {
        return;
    }
}

alloc1 (static: LOG, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn main() -> () {
    let mut _0: ();
    let _1: std::thread::JoinHandle<()>;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let _5: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _6: std::thread::JoinHandle<()>;
    let mut _7: !;
    let _10: &std::sync::atomic::AtomicUsize;
    let mut _11: std::sync::atomic::Ordering;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: usize;
    let mut _15: usize;
    let _16: !;
    let mut _17: std::fmt::Arguments<'_>;
    let mut _18: &[&str];
    let _19: &[&str; 2];
    let _20: [&str; 2];
    let mut _21: &[core::fmt::rt::Argument<'_>];
    let _22: &[core::fmt::rt::Argument<'_>; 2];
    let _23: [core::fmt::rt::Argument<'_>; 2];
    let mut _24: core::fmt::rt::Argument<'_>;
    let _25: &usize;
    let mut _26: core::fmt::rt::Argument<'_>;
    let _27: &usize;
    scope 1 {
        debug g => _1;
        let _8: usize;
        scope 2 {
            debug expect => _8;
            let _9: usize;
            scope 3 {
                debug actual => _9;
            }
        }
    }

    bb0: {
        _1 = spawn::<[closure@ui/array-slice-vec/nested-vec-3.rs:33:27: 33:29], ()>(const ZeroSized: [closure@ui/array-slice-vec/nested-vec-3.rs:33:27: 33:29]) -> bb1;
    }

    bb1: {
        _6 = move _1;
        _5 = JoinHandle::<()>::join(move _6) -> bb2;
    }

    bb2: {
        _4 = &_5;
        _3 = Result::<(), Box<dyn Any + Send>>::is_err(move _4) -> [return: bb3, unwind: bb13];
    }

    bb3: {
        _2 = Not(move _3);
        drop(_5) -> bb4;
    }

    bb4: {
        switchInt(move _2) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _7 = core::panicking::panic(const "assertion failed: g.join().is_err()");
    }

    bb6: {
        _8 = const 727300182580_usize;
        _10 = const {alloc1: &AtomicUsize};
        _11 = SeqCst;
        _9 = AtomicUsize::load(_10, move _11) -> bb7;
    }

    bb7: {
        _14 = _9;
        _15 = _8;
        _13 = Eq(move _14, move _15);
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb12, otherwise: bb8];
    }

    bb8: {
        _20 = [const "expect: 0x", const " actual: 0x"];
        _19 = &_20;
        _18 = _19 as &[&str] (Pointer(Unsize));
        _25 = &_8;
        _24 = core::fmt::rt::Argument::<'_>::new_lower_hex::<usize>(_25) -> bb9;
    }

    bb9: {
        _27 = &_9;
        _26 = core::fmt::rt::Argument::<'_>::new_lower_hex::<usize>(_27) -> bb10;
    }

    bb10: {
        _23 = [move _24, move _26];
        _22 = &_23;
        _21 = _22 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _17 = Arguments::<'_>::new_v1(move _18, move _21) -> bb11;
    }

    bb11: {
        _16 = panic_fmt(move _17);
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        drop(_5) -> [return: bb14, unwind terminate];
    }

    bb14 (cleanup): {
        resume;
    }
}

alloc1 (static: LOG, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn die() -> D {
    let mut _0: D;
    let _1: !;

    bb0: {
        _1 = begin_panic::<&str>(const "Oh no");
    }
}

fn main::{closure#0}(_1: [closure@ui/array-slice-vec/nested-vec-3.rs:33:27: 33:29]) -> () {
    let mut _0: ();
    let _2: std::vec::Vec<std::vec::Vec<D>>;
    let mut _3: std::boxed::Box<[std::vec::Vec<D>]>;
    let mut _4: std::boxed::Box<[std::vec::Vec<D>; 4]>;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: *mut u8;
    let mut _8: std::boxed::Box<[std::vec::Vec<D>; 4]>;
    let mut _9: std::vec::Vec<D>;
    let mut _10: std::boxed::Box<[D]>;
    let mut _11: usize;
    let mut _12: usize;
    let mut _13: *mut u8;
    let mut _14: std::boxed::Box<[D; 4]>;
    let mut _15: D;
    let mut _16: D;
    let mut _17: D;
    let mut _18: D;
    let mut _19: std::vec::Vec<D>;
    let mut _20: std::boxed::Box<[D]>;
    let mut _21: usize;
    let mut _22: usize;
    let mut _23: *mut u8;
    let mut _24: std::boxed::Box<[D; 4]>;
    let mut _25: D;
    let mut _26: D;
    let mut _27: D;
    let mut _28: D;
    let mut _29: std::vec::Vec<D>;
    let mut _30: std::boxed::Box<[D]>;
    let mut _31: std::boxed::Box<[D; 4]>;
    let mut _32: usize;
    let mut _33: usize;
    let mut _34: *mut u8;
    let mut _35: std::boxed::Box<[D; 4]>;
    let mut _36: D;
    let mut _37: D;
    let mut _38: D;
    let mut _39: D;
    let mut _40: std::vec::Vec<D>;
    let mut _41: std::boxed::Box<[D]>;
    let mut _42: usize;
    let mut _43: usize;
    let mut _44: *mut u8;
    let mut _45: std::boxed::Box<[D; 4]>;
    let mut _46: D;
    let mut _47: D;
    let mut _48: D;
    let mut _49: D;
    let mut _50: &mut std::boxed::Box<[D; 4]>;
    let mut _51: ();
    let mut _52: &mut std::boxed::Box<[std::vec::Vec<D>; 4]>;
    let mut _53: ();
    let mut _54: *const [D; 4];
    let mut _55: *const [D; 4];
    let mut _56: *const [D; 4];
    let mut _57: *const [D; 4];
    let mut _58: *const [std::vec::Vec<D>; 4];
    let mut _59: *const ();
    let mut _60: usize;
    let mut _61: usize;
    let mut _62: usize;
    let mut _63: usize;
    let mut _64: bool;
    let mut _65: *const ();
    let mut _66: usize;
    let mut _67: usize;
    let mut _68: usize;
    let mut _69: usize;
    let mut _70: bool;
    let mut _71: *const ();
    let mut _72: usize;
    let mut _73: usize;
    let mut _74: usize;
    let mut _75: usize;
    let mut _76: bool;
    let mut _77: *const ();
    let mut _78: usize;
    let mut _79: usize;
    let mut _80: usize;
    let mut _81: usize;
    let mut _82: bool;
    let mut _83: *const ();
    let mut _84: usize;
    let mut _85: usize;
    let mut _86: usize;
    let mut _87: usize;
    let mut _88: bool;
    scope 1 {
        debug _nested => _2;
    }
    scope 2 {
    }
    scope 3 {
    }
    scope 4 {
    }
    scope 5 {
    }
    scope 6 {
    }

    bb0: {
        _5 = SizeOf([std::vec::Vec<D>; 4]);
        _6 = AlignOf([std::vec::Vec<D>; 4]);
        _7 = alloc::alloc::exchange_malloc(move _5, move _6) -> bb1;
    }

    bb1: {
        _8 = ShallowInitBox(move _7, [std::vec::Vec<D>; 4]);
        _11 = SizeOf([D; 4]);
        _12 = AlignOf([D; 4]);
        _13 = alloc::alloc::exchange_malloc(move _11, move _12) -> [return: bb2, unwind: bb20];
    }

    bb2: {
        _14 = ShallowInitBox(move _13, [D; 4]);
        _15 = D(const 1_u8);
        _16 = D(const 2_u8);
        _17 = D(const 3_u8);
        _18 = D(const 4_u8);
        _54 = (((_14.0: std::ptr::Unique<[D; 4]>).0: std::ptr::NonNull<[D; 4]>).0: *const [D; 4]);
        _83 = _54 as *const () (PtrToPtr);
        _84 = _83 as usize (Transmute);
        _85 = AlignOf(D);
        _86 = Sub(_85, const 1_usize);
        _87 = BitAnd(_84, _86);
        _88 = Eq(_87, const 0_usize);
        assert(_88, "misaligned pointer dereference: address must be a multiple of {} but is {}", _85, _84) -> [success: bb25, unwind unreachable];
    }

    bb3: {
        _21 = SizeOf([D; 4]);
        _22 = AlignOf([D; 4]);
        _23 = alloc::alloc::exchange_malloc(move _21, move _22) -> [return: bb4, unwind: bb17];
    }

    bb4: {
        _24 = ShallowInitBox(move _23, [D; 4]);
        _25 = D(const 5_u8);
        _26 = D(const 6_u8);
        _27 = D(const 7_u8);
        _28 = D(const 8_u8);
        _55 = (((_24.0: std::ptr::Unique<[D; 4]>).0: std::ptr::NonNull<[D; 4]>).0: *const [D; 4]);
        _77 = _55 as *const () (PtrToPtr);
        _78 = _77 as usize (Transmute);
        _79 = AlignOf(D);
        _80 = Sub(_79, const 1_usize);
        _81 = BitAnd(_78, _80);
        _82 = Eq(_81, const 0_usize);
        assert(_82, "misaligned pointer dereference: address must be a multiple of {} but is {}", _79, _78) -> [success: bb24, unwind unreachable];
    }

    bb5: {
        _32 = SizeOf([D; 4]);
        _33 = AlignOf([D; 4]);
        _34 = alloc::alloc::exchange_malloc(move _32, move _33) -> [return: bb6, unwind: bb16];
    }

    bb6: {
        _35 = ShallowInitBox(move _34, [D; 4]);
        _36 = D(const 9_u8);
        _37 = D(const 10_u8);
        _38 = die() -> [return: bb7, unwind: bb14];
    }

    bb7: {
        _39 = D(const 12_u8);
        _56 = (((_35.0: std::ptr::Unique<[D; 4]>).0: std::ptr::NonNull<[D; 4]>).0: *const [D; 4]);
        _71 = _56 as *const () (PtrToPtr);
        _72 = _71 as usize (Transmute);
        _73 = AlignOf(D);
        _74 = Sub(_73, const 1_usize);
        _75 = BitAnd(_72, _74);
        _76 = Eq(_75, const 0_usize);
        assert(_76, "misaligned pointer dereference: address must be a multiple of {} but is {}", _73, _72) -> [success: bb23, unwind unreachable];
    }

    bb8: {
        _42 = SizeOf([D; 4]);
        _43 = AlignOf([D; 4]);
        _44 = alloc::alloc::exchange_malloc(move _42, move _43) -> [return: bb9, unwind: bb13];
    }

    bb9: {
        _45 = ShallowInitBox(move _44, [D; 4]);
        _46 = D(const 13_u8);
        _47 = D(const 14_u8);
        _48 = D(const 15_u8);
        _49 = D(const 16_u8);
        _57 = (((_45.0: std::ptr::Unique<[D; 4]>).0: std::ptr::NonNull<[D; 4]>).0: *const [D; 4]);
        _65 = _57 as *const () (PtrToPtr);
        _66 = _65 as usize (Transmute);
        _67 = AlignOf(D);
        _68 = Sub(_67, const 1_usize);
        _69 = BitAnd(_66, _68);
        _70 = Eq(_69, const 0_usize);
        assert(_70, "misaligned pointer dereference: address must be a multiple of {} but is {}", _67, _66) -> [success: bb22, unwind unreachable];
    }

    bb10: {
        _58 = (((_8.0: std::ptr::Unique<[std::vec::Vec<D>; 4]>).0: std::ptr::NonNull<[std::vec::Vec<D>; 4]>).0: *const [std::vec::Vec<D>; 4]);
        _59 = _58 as *const () (PtrToPtr);
        _60 = _59 as usize (Transmute);
        _61 = AlignOf(std::vec::Vec<D>);
        _62 = Sub(_61, const 1_usize);
        _63 = BitAnd(_60, _62);
        _64 = Eq(_63, const 0_usize);
        assert(_64, "misaligned pointer dereference: address must be a multiple of {} but is {}", _61, _60) -> [success: bb21, unwind unreachable];
    }

    bb11: {
        drop(_2) -> bb12;
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        drop(_29) -> [return: bb16, unwind terminate];
    }

    bb14 (cleanup): {
        drop(_37) -> [return: bb15, unwind terminate];
    }

    bb15 (cleanup): {
        drop(_36) -> [return: bb19, unwind terminate];
    }

    bb16 (cleanup): {
        drop(_19) -> [return: bb17, unwind terminate];
    }

    bb17 (cleanup): {
        drop(_9) -> [return: bb20, unwind terminate];
    }

    bb18 (cleanup): {
        resume;
    }

    bb19 (cleanup): {
        _50 = &mut _35;
        _51 = <Box<[D; 4]> as Drop>::drop(move _50) -> [return: bb26, unwind terminate];
    }

    bb20 (cleanup): {
        _52 = &mut _8;
        _53 = <Box<[Vec<D>; 4]> as Drop>::drop(move _52) -> [return: bb18, unwind terminate];
    }

    bb21: {
        (*_58) = [move _9, move _19, move _29, move _40];
        _4 = move _8;
        _3 = move _4 as std::boxed::Box<[std::vec::Vec<D>]> (Pointer(Unsize));
        _2 = slice::<impl [Vec<D>]>::into_vec::<std::alloc::Global>(move _3) -> bb11;
    }

    bb22: {
        (*_57) = [move _46, move _47, move _48, move _49];
        _41 = move _45 as std::boxed::Box<[D]> (Pointer(Unsize));
        _40 = slice::<impl [D]>::into_vec::<std::alloc::Global>(move _41) -> [return: bb10, unwind: bb13];
    }

    bb23: {
        (*_56) = [move _36, move _37, move _38, move _39];
        _31 = move _35;
        _30 = move _31 as std::boxed::Box<[D]> (Pointer(Unsize));
        _29 = slice::<impl [D]>::into_vec::<std::alloc::Global>(move _30) -> [return: bb8, unwind: bb16];
    }

    bb24: {
        (*_55) = [move _25, move _26, move _27, move _28];
        _20 = move _24 as std::boxed::Box<[D]> (Pointer(Unsize));
        _19 = slice::<impl [D]>::into_vec::<std::alloc::Global>(move _20) -> [return: bb5, unwind: bb17];
    }

    bb25: {
        (*_54) = [move _15, move _16, move _17, move _18];
        _10 = move _14 as std::boxed::Box<[D]> (Pointer(Unsize));
        _9 = slice::<impl [D]>::into_vec::<std::alloc::Global>(move _10) -> [return: bb3, unwind: bb20];
    }

    bb26 (cleanup): {
        goto -> bb16;
    }
}

fn D(_1: u8) -> D {
    let mut _0: D;

    bb0: {
        _0 = D(move _1);
        return;
    }
}

// MIR FOR CTFE
fn D(_1: u8) -> D {
    let mut _0: D;

    bb0: {
        _0 = D(move _1);
        return;
    }
}
