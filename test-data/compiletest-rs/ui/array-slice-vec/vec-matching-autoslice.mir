// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: [i32; 3];
    let mut _2: !;
    let mut _5: (&[i32; 2], &[i32; 2]);
    let mut _6: &[i32; 2];
    let _7: [i32; 2];
    let mut _8: &[i32; 2];
    let _9: [i32; 2];
    let mut _12: bool;
    let mut _13: bool;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: !;
    let mut _19: [(i32, bool); 2];
    let mut _20: (i32, bool);
    let mut _21: (i32, bool);
    let mut _22: bool;
    let mut _25: (&bool, &bool);
    let mut _26: &bool;
    let mut _27: &bool;
    let _28: bool;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: bool;
    let _36: !;
    let mut _37: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _38: (&i32, &i32);
    let mut _39: &i32;
    let mut _40: &i32;
    let _41: i32;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: i32;
    let mut _47: i32;
    let _49: !;
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _51: !;
    let mut _52: !;
    scope 1 {
        debug x => _1;
        let _3: i32;
        let _4: i32;
        let _18: ([(i32, bool); 2], f64);
        scope 2 {
            debug a => _3;
            debug b => _4;
            let _10: &[i32; 2];
            let _11: &[i32; 2];
            scope 3 {
                debug left_val => _10;
                debug right_val => _11;
                let _14: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _14;
                }
            }
        }
        scope 5 {
            debug y => _18;
            let _23: bool;
            let _24: i32;
            scope 6 {
                debug a => _23;
                debug b => _24;
                let _29: &bool;
                let _30: &bool;
                let _42: &i32;
                let _43: &i32;
                scope 7 {
                    debug left_val => _29;
                    debug right_val => _30;
                    let _35: core::panicking::AssertKind;
                    scope 8 {
                        debug kind => _35;
                    }
                }
                scope 9 {
                    debug left_val => _42;
                    debug right_val => _43;
                    let _48: core::panicking::AssertKind;
                    scope 10 {
                        debug kind => _48;
                    }
                }
            }
        }
    }

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32];
        switchInt(_1[0 of 3]) -> [2: bb2, 1: bb3, otherwise: bb1];
    }

    bb1: {
        _17 = begin_panic::<&str>(const "explicit panic");
    }

    bb2: {
        _2 = begin_panic::<&str>(const "explicit panic");
    }

    bb3: {
        _3 = _1[1 of 3];
        _4 = _1[2 of 3];
        _7 = [_3, _4];
        _6 = &_7;
        _9 = [const 2_i32, const 3_i32];
        _8 = &_9;
        _5 = (move _6, move _8);
        _10 = (_5.0: &[i32; 2]);
        _11 = (_5.1: &[i32; 2]);
        _13 = <[i32; 2] as PartialEq>::eq(_10, _11) -> bb4;
    }

    bb4: {
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<[i32; 2], [i32; 2]>(move _14, _10, _11, move _16);
    }

    bb6: {
        _20 = (const 1_i32, const true);
        _21 = (const 2_i32, const false);
        _19 = [move _20, move _21];
        _18 = (move _19, const 0.5f64);
        switchInt(((_18.0: [(i32, bool); 2])[0 of 2].0: i32)) -> [1: bb7, otherwise: bb8];
    }

    bb7: {
        switchInt(((_18.0: [(i32, bool); 2])[1 of 2].1: bool)) -> [0: bb10, otherwise: bb8];
    }

    bb8: {
        _22 = Eq(const 0.5f64, (_18.1: f64));
        switchInt(move _22) -> [0: bb9, otherwise: bb15];
    }

    bb9: {
        _52 = begin_panic::<&str>(const "explicit panic");
    }

    bb10: {
        _23 = ((_18.0: [(i32, bool); 2])[0 of 2].1: bool);
        _24 = ((_18.0: [(i32, bool); 2])[1 of 2].0: i32);
        _26 = &_23;
        _28 = const true;
        _27 = &_28;
        _25 = (move _26, move _27);
        _29 = (_25.0: &bool);
        _30 = (_25.1: &bool);
        _33 = (*_29);
        _34 = (*_30);
        _32 = Eq(move _33, move _34);
        _31 = Not(move _32);
        switchInt(move _31) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _35 = core::panicking::AssertKind::Eq;
        _37 = Option::<Arguments<'_>>::None;
        _36 = core::panicking::assert_failed::<bool, bool>(move _35, _29, _30, move _37);
    }

    bb12: {
        _39 = &_24;
        _41 = const 2_i32;
        _40 = &_41;
        _38 = (move _39, move _40);
        _42 = (_38.0: &i32);
        _43 = (_38.1: &i32);
        _46 = (*_42);
        _47 = (*_43);
        _45 = Eq(move _46, move _47);
        _44 = Not(move _45);
        switchInt(move _44) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _48 = core::panicking::AssertKind::Eq;
        _50 = Option::<Arguments<'_>>::None;
        _49 = core::panicking::assert_failed::<i32, i32>(move _48, _42, _43, move _50);
    }

    bb14: {
        return;
    }

    bb15: {
        _51 = begin_panic::<&str>(const "explicit panic");
    }
}
