// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: &[isize];
    let _2: &[isize; 5];
    let _3: [isize; 5];
    let _5: &[isize; 5];
    let _6: [isize; 5];
    let mut _7: (&isize, &isize);
    let mut _8: &isize;
    let _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _12: &isize;
    let _13: isize;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: isize;
    let mut _19: isize;
    let _21: !;
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _23: (&isize, &isize);
    let mut _24: &isize;
    let _25: usize;
    let mut _26: usize;
    let mut _27: bool;
    let mut _28: &isize;
    let _29: isize;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: isize;
    let mut _35: isize;
    let _37: !;
    let mut _38: std::option::Option<std::fmt::Arguments<'_>>;
    let _40: &[isize; 5];
    let _41: [isize; 5];
    let _43: &[isize; 5];
    let _44: [isize; 5];
    let _46: &[isize; 5];
    let _47: [isize; 5];
    let _49: &[isize; 6];
    let _50: [isize; 6];
    let _51: ();
    let mut _52: std::fmt::Arguments<'_>;
    let mut _53: &[&str];
    let _54: &[&str; 2];
    let _55: [&str; 2];
    let mut _56: &[core::fmt::rt::Argument<'_>];
    let _57: &[core::fmt::rt::Argument<'_>; 1];
    let _58: [core::fmt::rt::Argument<'_>; 1];
    let mut _59: core::fmt::rt::Argument<'_>;
    let _60: &&[isize];
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: &&[isize];
    let mut _64: &&[isize];
    let _65: &[isize];
    let mut _66: !;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: &&[isize];
    let mut _70: &&[isize];
    let _71: &[isize];
    let mut _72: !;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: &&[isize];
    let mut _76: &&[isize];
    let mut _77: !;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: &&[isize];
    let mut _81: &&[isize];
    let _82: &[isize];
    let mut _83: !;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: &&[isize];
    let mut _87: &&[isize];
    let _88: &[isize];
    let mut _89: !;
    let _90: ();
    let mut _91: std::fmt::Arguments<'_>;
    let mut _92: &[&str];
    let _93: &[&str; 2];
    let _94: [&str; 2];
    let mut _95: &[core::fmt::rt::Argument<'_>];
    let _96: &[core::fmt::rt::Argument<'_>; 1];
    let _97: [core::fmt::rt::Argument<'_>; 1];
    let mut _98: core::fmt::rt::Argument<'_>;
    let _99: &&[isize];
    let mut _100: bool;
    let mut _101: bool;
    let mut _102: &&[isize];
    let mut _103: &&[isize];
    let _104: &[isize];
    let mut _105: !;
    let mut _106: bool;
    let mut _107: bool;
    let mut _108: &&[isize];
    let mut _109: &&[isize];
    let _110: &[isize];
    let mut _111: !;
    let mut _112: bool;
    let mut _113: bool;
    let mut _114: &&[isize];
    let mut _115: &&[isize];
    let mut _116: !;
    let mut _117: bool;
    let mut _118: bool;
    let mut _119: &&[isize];
    let mut _120: &&[isize];
    let _121: &[isize];
    let mut _122: !;
    let mut _123: bool;
    let mut _124: bool;
    let mut _125: &&[isize];
    let mut _126: &&[isize];
    let _127: &[isize];
    let mut _128: !;
    let mut _129: bool;
    let mut _130: bool;
    let mut _131: &&[isize];
    let mut _132: &&[isize];
    let _133: &[isize];
    let mut _134: !;
    let mut _135: bool;
    let mut _136: bool;
    let mut _137: &&[isize];
    let mut _138: &&[isize];
    let _139: &[isize];
    let mut _140: !;
    let mut _141: bool;
    let mut _142: bool;
    let mut _143: &&[isize];
    let mut _144: &&[isize];
    let mut _145: !;
    let mut _146: bool;
    let mut _147: bool;
    let mut _148: &&[isize];
    let mut _149: &&[isize];
    let _150: &[isize];
    let mut _151: !;
    let mut _152: bool;
    let mut _153: bool;
    let mut _154: &&[isize];
    let mut _155: &&[isize];
    let _156: &[isize];
    let mut _157: !;
    let _158: ();
    let mut _159: std::fmt::Arguments<'_>;
    let mut _160: &[&str];
    let _161: &[&str; 2];
    let _162: [&str; 2];
    let mut _163: &[core::fmt::rt::Argument<'_>];
    let _164: &[core::fmt::rt::Argument<'_>; 1];
    let _165: [core::fmt::rt::Argument<'_>; 1];
    let mut _166: core::fmt::rt::Argument<'_>;
    let _167: &&[isize];
    let mut _168: bool;
    let mut _169: bool;
    let mut _170: &&[isize];
    let mut _171: &&[isize];
    let _172: &[isize];
    let mut _173: !;
    let mut _174: bool;
    let mut _175: bool;
    let mut _176: &&[isize];
    let mut _177: &&[isize];
    let _178: &[isize];
    let mut _179: !;
    let mut _180: bool;
    let mut _181: bool;
    let mut _182: &&[isize];
    let mut _183: &&[isize];
    let mut _184: !;
    let mut _185: bool;
    let mut _186: bool;
    let mut _187: &&[isize];
    let mut _188: &&[isize];
    let _189: &[isize];
    let mut _190: !;
    let mut _191: bool;
    let mut _192: bool;
    let mut _193: &&[isize];
    let mut _194: &&[isize];
    let _195: &[isize];
    let mut _196: !;
    let _197: ();
    let mut _198: std::fmt::Arguments<'_>;
    let mut _199: &[&str];
    let _200: &[&str; 2];
    let _201: [&str; 2];
    let mut _202: &[core::fmt::rt::Argument<'_>];
    let _203: &[core::fmt::rt::Argument<'_>; 1];
    let _204: [core::fmt::rt::Argument<'_>; 1];
    let mut _205: core::fmt::rt::Argument<'_>;
    let _206: &&[isize];
    scope 1 {
        debug x => _1;
        let mut _4: &[isize];
        scope 2 {
            debug z => _4;
            let _14: &isize;
            let _15: &isize;
            let _30: &isize;
            let _31: &isize;
            let _39: &[isize];
            scope 3 {
                debug left_val => _14;
                debug right_val => _15;
                let _20: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _20;
                }
            }
            scope 5 {
                debug left_val => _30;
                debug right_val => _31;
                let _36: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _36;
                }
            }
            scope 7 {
                debug a => _39;
                let _42: &[isize];
                scope 8 {
                    debug b => _42;
                    let _45: &[isize];
                    scope 9 {
                        debug c => _45;
                        let _48: &[isize];
                        scope 10 {
                            debug cc => _48;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _3 = [const 1_isize, const 2_isize, const 3_isize, const 4_isize, const 5_isize];
        _2 = &_3;
        _1 = _2 as &[isize] (Pointer(Unsize));
        _6 = [const 1_isize, const 2_isize, const 3_isize, const 4_isize, const 5_isize];
        _5 = &_6;
        _4 = _5 as &[isize] (Pointer(Unsize));
        _4 = _1;
        _9 = const 0_usize;
        _10 = Len((*_4));
        _11 = Lt(_9, _10);
        assert(move _11, "index out of bounds: the length is {} but the index is {}", move _10, _9) -> bb1;
    }

    bb1: {
        _8 = &(*_4)[_9];
        _13 = const 1_isize;
        _12 = &_13;
        _7 = (move _8, move _12);
        _14 = (_7.0: &isize);
        _15 = (_7.1: &isize);
        _18 = (*_14);
        _19 = (*_15);
        _17 = Eq(move _18, move _19);
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _20 = core::panicking::AssertKind::Eq;
        _22 = Option::<Arguments<'_>>::None;
        _21 = core::panicking::assert_failed::<isize, isize>(move _20, _14, _15, move _22);
    }

    bb3: {
        _25 = const 4_usize;
        _26 = Len((*_4));
        _27 = Lt(_25, _26);
        assert(move _27, "index out of bounds: the length is {} but the index is {}", move _26, _25) -> bb4;
    }

    bb4: {
        _24 = &(*_4)[_25];
        _29 = const 5_isize;
        _28 = &_29;
        _23 = (move _24, move _28);
        _30 = (_23.0: &isize);
        _31 = (_23.1: &isize);
        _34 = (*_30);
        _35 = (*_31);
        _33 = Eq(move _34, move _35);
        _32 = Not(move _33);
        switchInt(move _32) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _36 = core::panicking::AssertKind::Eq;
        _38 = Option::<Arguments<'_>>::None;
        _37 = core::panicking::assert_failed::<isize, isize>(move _36, _30, _31, move _38);
    }

    bb6: {
        _41 = [const 1_isize, const 1_isize, const 1_isize, const 1_isize, const 1_isize];
        _40 = &_41;
        _39 = _40 as &[isize] (Pointer(Unsize));
        _44 = [const 2_isize, const 2_isize, const 2_isize, const 2_isize, const 2_isize];
        _43 = &_44;
        _42 = _43 as &[isize] (Pointer(Unsize));
        _47 = [const 2_isize, const 2_isize, const 2_isize, const 2_isize, const 3_isize];
        _46 = &_47;
        _45 = _46 as &[isize] (Pointer(Unsize));
        _50 = [const 2_isize, const 2_isize, const 2_isize, const 2_isize, const 2_isize, const 2_isize];
        _49 = &_50;
        _48 = _49 as &[isize] (Pointer(Unsize));
        _55 = [const "", const "\n"];
        _54 = &_55;
        _53 = _54 as &[&str] (Pointer(Unsize));
        _60 = &_39;
        _59 = core::fmt::rt::Argument::<'_>::new_debug::<&[isize]>(_60) -> bb7;
    }

    bb7: {
        _58 = [move _59];
        _57 = &_58;
        _56 = _57 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _52 = Arguments::<'_>::new_v1(move _53, move _56) -> bb8;
    }

    bb8: {
        _51 = _print(move _52) -> bb9;
    }

    bb9: {
        _63 = &_39;
        _65 = _42;
        _64 = &_65;
        _62 = <&[isize] as PartialOrd>::lt(move _63, move _64) -> bb10;
    }

    bb10: {
        _61 = Not(move _62);
        switchInt(move _61) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _66 = core::panicking::panic(const "assertion failed: a < b");
    }

    bb12: {
        _69 = &_39;
        _71 = _42;
        _70 = &_71;
        _68 = <&[isize] as PartialOrd>::le(move _69, move _70) -> bb13;
    }

    bb13: {
        _67 = Not(move _68);
        switchInt(move _67) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _72 = core::panicking::panic(const "assertion failed: a <= b");
    }

    bb15: {
        _75 = &_39;
        _76 = &_42;
        _74 = <&[isize] as PartialEq>::ne(move _75, move _76) -> bb16;
    }

    bb16: {
        _73 = Not(move _74);
        switchInt(move _73) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _77 = core::panicking::panic(const "assertion failed: a != b");
    }

    bb18: {
        _80 = &_42;
        _82 = _39;
        _81 = &_82;
        _79 = <&[isize] as PartialOrd>::ge(move _80, move _81) -> bb19;
    }

    bb19: {
        _78 = Not(move _79);
        switchInt(move _78) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _83 = core::panicking::panic(const "assertion failed: b >= a");
    }

    bb21: {
        _86 = &_42;
        _88 = _39;
        _87 = &_88;
        _85 = <&[isize] as PartialOrd>::gt(move _86, move _87) -> bb22;
    }

    bb22: {
        _84 = Not(move _85);
        switchInt(move _84) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _89 = core::panicking::panic(const "assertion failed: b > a");
    }

    bb24: {
        _94 = [const "", const "\n"];
        _93 = &_94;
        _92 = _93 as &[&str] (Pointer(Unsize));
        _99 = &_42;
        _98 = core::fmt::rt::Argument::<'_>::new_debug::<&[isize]>(_99) -> bb25;
    }

    bb25: {
        _97 = [move _98];
        _96 = &_97;
        _95 = _96 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _91 = Arguments::<'_>::new_v1(move _92, move _95) -> bb26;
    }

    bb26: {
        _90 = _print(move _91) -> bb27;
    }

    bb27: {
        _102 = &_42;
        _104 = _45;
        _103 = &_104;
        _101 = <&[isize] as PartialOrd>::lt(move _102, move _103) -> bb28;
    }

    bb28: {
        _100 = Not(move _101);
        switchInt(move _100) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _105 = core::panicking::panic(const "assertion failed: b < c");
    }

    bb30: {
        _108 = &_42;
        _110 = _45;
        _109 = &_110;
        _107 = <&[isize] as PartialOrd>::le(move _108, move _109) -> bb31;
    }

    bb31: {
        _106 = Not(move _107);
        switchInt(move _106) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _111 = core::panicking::panic(const "assertion failed: b <= c");
    }

    bb33: {
        _114 = &_42;
        _115 = &_45;
        _113 = <&[isize] as PartialEq>::ne(move _114, move _115) -> bb34;
    }

    bb34: {
        _112 = Not(move _113);
        switchInt(move _112) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _116 = core::panicking::panic(const "assertion failed: b != c");
    }

    bb36: {
        _119 = &_45;
        _121 = _42;
        _120 = &_121;
        _118 = <&[isize] as PartialOrd>::ge(move _119, move _120) -> bb37;
    }

    bb37: {
        _117 = Not(move _118);
        switchInt(move _117) -> [0: bb39, otherwise: bb38];
    }

    bb38: {
        _122 = core::panicking::panic(const "assertion failed: c >= b");
    }

    bb39: {
        _125 = &_45;
        _127 = _42;
        _126 = &_127;
        _124 = <&[isize] as PartialOrd>::gt(move _125, move _126) -> bb40;
    }

    bb40: {
        _123 = Not(move _124);
        switchInt(move _123) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _128 = core::panicking::panic(const "assertion failed: c > b");
    }

    bb42: {
        _131 = &_39;
        _133 = _45;
        _132 = &_133;
        _130 = <&[isize] as PartialOrd>::lt(move _131, move _132) -> bb43;
    }

    bb43: {
        _129 = Not(move _130);
        switchInt(move _129) -> [0: bb45, otherwise: bb44];
    }

    bb44: {
        _134 = core::panicking::panic(const "assertion failed: a < c");
    }

    bb45: {
        _137 = &_39;
        _139 = _45;
        _138 = &_139;
        _136 = <&[isize] as PartialOrd>::le(move _137, move _138) -> bb46;
    }

    bb46: {
        _135 = Not(move _136);
        switchInt(move _135) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _140 = core::panicking::panic(const "assertion failed: a <= c");
    }

    bb48: {
        _143 = &_39;
        _144 = &_45;
        _142 = <&[isize] as PartialEq>::ne(move _143, move _144) -> bb49;
    }

    bb49: {
        _141 = Not(move _142);
        switchInt(move _141) -> [0: bb51, otherwise: bb50];
    }

    bb50: {
        _145 = core::panicking::panic(const "assertion failed: a != c");
    }

    bb51: {
        _148 = &_45;
        _150 = _39;
        _149 = &_150;
        _147 = <&[isize] as PartialOrd>::ge(move _148, move _149) -> bb52;
    }

    bb52: {
        _146 = Not(move _147);
        switchInt(move _146) -> [0: bb54, otherwise: bb53];
    }

    bb53: {
        _151 = core::panicking::panic(const "assertion failed: c >= a");
    }

    bb54: {
        _154 = &_45;
        _156 = _39;
        _155 = &_156;
        _153 = <&[isize] as PartialOrd>::gt(move _154, move _155) -> bb55;
    }

    bb55: {
        _152 = Not(move _153);
        switchInt(move _152) -> [0: bb57, otherwise: bb56];
    }

    bb56: {
        _157 = core::panicking::panic(const "assertion failed: c > a");
    }

    bb57: {
        _162 = [const "", const "\n"];
        _161 = &_162;
        _160 = _161 as &[&str] (Pointer(Unsize));
        _167 = &_45;
        _166 = core::fmt::rt::Argument::<'_>::new_debug::<&[isize]>(_167) -> bb58;
    }

    bb58: {
        _165 = [move _166];
        _164 = &_165;
        _163 = _164 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _159 = Arguments::<'_>::new_v1(move _160, move _163) -> bb59;
    }

    bb59: {
        _158 = _print(move _159) -> bb60;
    }

    bb60: {
        _170 = &_39;
        _172 = _48;
        _171 = &_172;
        _169 = <&[isize] as PartialOrd>::lt(move _170, move _171) -> bb61;
    }

    bb61: {
        _168 = Not(move _169);
        switchInt(move _168) -> [0: bb63, otherwise: bb62];
    }

    bb62: {
        _173 = core::panicking::panic(const "assertion failed: a < cc");
    }

    bb63: {
        _176 = &_39;
        _178 = _48;
        _177 = &_178;
        _175 = <&[isize] as PartialOrd>::le(move _176, move _177) -> bb64;
    }

    bb64: {
        _174 = Not(move _175);
        switchInt(move _174) -> [0: bb66, otherwise: bb65];
    }

    bb65: {
        _179 = core::panicking::panic(const "assertion failed: a <= cc");
    }

    bb66: {
        _182 = &_39;
        _183 = &_48;
        _181 = <&[isize] as PartialEq>::ne(move _182, move _183) -> bb67;
    }

    bb67: {
        _180 = Not(move _181);
        switchInt(move _180) -> [0: bb69, otherwise: bb68];
    }

    bb68: {
        _184 = core::panicking::panic(const "assertion failed: a != cc");
    }

    bb69: {
        _187 = &_48;
        _189 = _39;
        _188 = &_189;
        _186 = <&[isize] as PartialOrd>::ge(move _187, move _188) -> bb70;
    }

    bb70: {
        _185 = Not(move _186);
        switchInt(move _185) -> [0: bb72, otherwise: bb71];
    }

    bb71: {
        _190 = core::panicking::panic(const "assertion failed: cc >= a");
    }

    bb72: {
        _193 = &_48;
        _195 = _39;
        _194 = &_195;
        _192 = <&[isize] as PartialOrd>::gt(move _193, move _194) -> bb73;
    }

    bb73: {
        _191 = Not(move _192);
        switchInt(move _191) -> [0: bb75, otherwise: bb74];
    }

    bb74: {
        _196 = core::panicking::panic(const "assertion failed: cc > a");
    }

    bb75: {
        _201 = [const "", const "\n"];
        _200 = &_201;
        _199 = _200 as &[&str] (Pointer(Unsize));
        _206 = &_48;
        _205 = core::fmt::rt::Argument::<'_>::new_debug::<&[isize]>(_206) -> bb76;
    }

    bb76: {
        _204 = [move _205];
        _203 = &_204;
        _202 = _203 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _198 = Arguments::<'_>::new_v1(move _199, move _202) -> bb77;
    }

    bb77: {
        _197 = _print(move _198) -> bb78;
    }

    bb78: {
        return;
    }
}
