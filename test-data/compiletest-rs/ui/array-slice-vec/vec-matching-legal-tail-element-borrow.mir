// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: &[i32; 5];
    let _2: [i32; 5];
    let _4: &[isize; 5];
    let _5: [isize; 5];
    let mut _6: bool;
    let mut _7: bool;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let _13: usize;
    let mut _14: usize;
    let mut _15: bool;
    let mut _16: !;
    let _17: ();
    let mut _18: std::fmt::Arguments<'_>;
    let mut _19: &[&str];
    let _20: &[&str; 2];
    let _21: [&str; 2];
    let mut _22: &[core::fmt::rt::Argument<'_>];
    let _23: &[core::fmt::rt::Argument<'_>; 1];
    let _24: [core::fmt::rt::Argument<'_>; 1];
    let mut _25: core::fmt::rt::Argument<'_>;
    scope 1 {
        debug x => _1;
        let _3: &[isize];
        scope 2 {
            debug x => _3;
            let _8: &isize;
            let _12: &[isize];
            scope 3 {
                debug el => _8;
            }
            scope 4 {
                debug tail => _12;
            }
        }
    }

    bb0: {
        _2 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32];
        _1 = &_2;
        _5 = [const 1_isize, const 2_isize, const 3_isize, const 4_isize, const 5_isize];
        _4 = &_5;
        _3 = _4 as &[isize] (Pointer(Unsize));
        _7 = core::slice::<impl [isize]>::is_empty(_3) -> bb1;
    }

    bb1: {
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb9, otherwise: bb2];
    }

    bb2: {
        _9 = Len((*_3));
        _10 = const 1_usize;
        _11 = Ge(move _9, move _10);
        switchInt(move _11) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        switchInt((*_3)[0 of 1]) -> [1: bb5, otherwise: bb4];
    }

    bb4: {
        _16 = core::panicking::panic(const "internal error: entered unreachable code");
    }

    bb5: {
        _12 = &(*_3)[1:];
        _13 = const 0_usize;
        _14 = Len((*_12));
        _15 = Lt(_13, _14);
        assert(move _15, "index out of bounds: the length is {} but the index is {}", move _14, _13) -> bb6;
    }

    bb6: {
        _8 = &(*_12)[_13];
        _21 = [const "", const "\n"];
        _20 = &_21;
        _19 = _20 as &[&str] (Pointer(Unsize));
        _25 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_8) -> bb7;
    }

    bb7: {
        _24 = [move _25];
        _23 = &_24;
        _22 = _23 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _18 = Arguments::<'_>::new_v1(move _19, move _22) -> bb8;
    }

    bb8: {
        _17 = _print(move _18) -> bb9;
    }

    bb9: {
        return;
    }
}
