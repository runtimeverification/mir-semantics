// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static mut DTOR_COUNT: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 0_isize;
        return;
    }
}

fn <impl at ui/array-slice-vec/slice-panic-1.rs:15:1: 15:18>::drop(_1: &mut Foo) -> () {
    debug self => _1;
    let mut _0: ();
    let mut _2: *mut isize;
    scope 1 {
        let mut _3: *const ();
        let mut _4: usize;
        let mut _5: usize;
        let mut _6: usize;
        let mut _7: usize;
        let mut _8: bool;
        let mut _9: *const ();
        let mut _10: usize;
        let mut _11: usize;
        let mut _12: usize;
        let mut _13: usize;
        let mut _14: bool;
    }

    bb0: {
        _2 = const {alloc1: *mut isize};
        _9 = _2 as *const () (PtrToPtr);
        _10 = _9 as usize (Transmute);
        _11 = AlignOf(isize);
        _12 = Sub(_11, const 1_usize);
        _13 = BitAnd(_10, _12);
        _14 = Eq(_13, const 0_usize);
        assert(_14, "misaligned pointer dereference: address must be a multiple of {} but is {}", _11, _10) -> [success: bb2, unwind unreachable];
    }

    bb1: {
        (*_2) = Add((*_2), const 1_isize);
        return;
    }

    bb2: {
        _3 = _2 as *const () (PtrToPtr);
        _4 = _3 as usize (Transmute);
        _5 = AlignOf(isize);
        _6 = Sub(_5, const 1_usize);
        _7 = BitAnd(_4, _6);
        _8 = Eq(_7, const 0_usize);
        assert(_8, "misaligned pointer dereference: address must be a multiple of {} but is {}", _5, _4) -> [success: bb1, unwind unreachable];
    }
}

alloc1 (static: DTOR_COUNT, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn foo() -> () {
    let mut _0: ();
    let _1: &[Foo];
    let _2: &[Foo; 2];
    let _3: [Foo; 2];
    let _4: &[Foo];
    let mut _5: std::ops::Range<usize>;
    scope 1 {
        debug x => _1;
        scope 2 {
        }
    }

    bb0: {
        _2 = &_3;
        _1 = _2 as &[Foo] (Pointer(Unsize));
        _5 = std::ops::Range::<usize> { start: const 3_usize, end: const 4_usize };
        _4 = <[Foo] as Index<std::ops::Range<usize>>>::index(_1, move _5) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_3) -> bb2;
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_3) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _2: std::thread::JoinHandle<()>;
    let mut _3: (&isize, &isize);
    let mut _4: &isize;
    let _5: *mut isize;
    let mut _6: &isize;
    let _7: isize;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: isize;
    let mut _13: isize;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        scope 2 {
            let _8: &isize;
            let _9: &isize;
            let mut _17: *const ();
            let mut _18: usize;
            let mut _19: usize;
            let mut _20: usize;
            let mut _21: usize;
            let mut _22: bool;
            scope 3 {
                debug left_val => _8;
                debug right_val => _9;
                let _14: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _14;
                }
            }
        }
    }

    bb0: {
        _2 = spawn::<[closure@ui/array-slice-vec/slice-panic-1.rs:25:27: 25:33], ()>(const ZeroSized: [closure@ui/array-slice-vec/slice-panic-1.rs:25:27: 25:33]) -> bb1;
    }

    bb1: {
        _1 = JoinHandle::<()>::join(move _2) -> bb2;
    }

    bb2: {
        drop(_1) -> bb3;
    }

    bb3: {
        _5 = const {alloc1: *mut isize};
        _17 = _5 as *const () (PtrToPtr);
        _18 = _17 as usize (Transmute);
        _19 = AlignOf(isize);
        _20 = Sub(_19, const 1_usize);
        _21 = BitAnd(_18, _20);
        _22 = Eq(_21, const 0_usize);
        assert(_22, "misaligned pointer dereference: address must be a multiple of {} but is {}", _19, _18) -> [success: bb6, unwind unreachable];
    }

    bb4: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<isize, isize>(move _14, _8, _9, move _16);
    }

    bb5: {
        return;
    }

    bb6: {
        _4 = &(*_5);
        _7 = const 2_isize;
        _6 = &_7;
        _3 = (move _4, move _6);
        _8 = (_3.0: &isize);
        _9 = (_3.1: &isize);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb5, otherwise: bb4];
    }
}

alloc1 (static: DTOR_COUNT, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn main::{closure#0}(_1: [closure@ui/array-slice-vec/slice-panic-1.rs:25:27: 25:33]) -> () {
    let mut _0: ();

    bb0: {
        _0 = foo() -> bb1;
    }

    bb1: {
        return;
    }
}
