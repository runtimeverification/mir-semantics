// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: &[A; 2];
    let _2: [A; 2];
    let mut _3: A;
    let mut _4: std::string::String;
    let _5: &str;
    let mut _6: A;
    let mut _7: std::string::String;
    let _8: &str;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: &[A];
    let mut _12: !;
    scope 1 {
        debug a => _1;
    }

    bb0: {
        _5 = const "1";
        _4 = <str as ToString>::to_string(_5) -> bb1;
    }

    bb1: {
        _3 = A { name: move _4 };
        _8 = const "2";
        _7 = <str as ToString>::to_string(_8) -> [return: bb2, unwind: bb8];
    }

    bb2: {
        _6 = A { name: move _7 };
        _2 = [move _3, move _6];
        _1 = &_2;
        _11 = _1 as &[A] (Pointer(Unsize));
        _10 = core::slice::<impl [A]>::is_sorted_by_key::<'_, [closure@ui/array-slice-vec/slice_is_sorted_by_borrow.rs:19:32: 19:35], &str>(move _11, const ZeroSized: [closure@ui/array-slice-vec/slice_is_sorted_by_borrow.rs:19:32: 19:35]) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _12 = core::panicking::panic(const "assertion failed: a.is_sorted_by_key(|a| a.name.as_str())") -> bb7;
    }

    bb5: {
        drop(_2) -> bb6;
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_2) -> [return: bb9, unwind terminate];
    }

    bb8 (cleanup): {
        drop(_3) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        resume;
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/array-slice-vec/slice_is_sorted_by_borrow.rs:19:32: 19:35], _2: &A) -> &str {
    debug a => _2;
    let mut _0: &str;
    let mut _3: &std::string::String;

    bb0: {
        _3 = &((*_2).0: std::string::String);
        _0 = String::as_str(move _3) -> bb1;
    }

    bb1: {
        return;
    }
}
