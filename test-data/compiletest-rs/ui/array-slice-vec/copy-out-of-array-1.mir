// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/array-slice-vec/copy-out-of-array-1.rs:7:16: 7:21>::clone(_1: &C) -> C {
    debug self => _1;
    let mut _0: C;
    scope 1 {
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: C;
    let mut _2: [C; 4];
    let mut _3: C;
    let mut _4: C;
    let mut _5: C;
    let mut _6: C;
    let mut _8: [C; 4];
    let mut _9: C;
    let mut _10: C;
    let mut _11: C;
    let mut _12: C;
    scope 1 {
        debug _d1 => _1;
        let _7: C;
        scope 2 {
            debug _d3 => _7;
        }
    }

    bb0: {
        _3 = d() -> bb1;
    }

    bb1: {
        _4 = d() -> bb2;
    }

    bb2: {
        _5 = d() -> bb3;
    }

    bb3: {
        _6 = d() -> bb4;
    }

    bb4: {
        _2 = [move _3, move _4, move _5, move _6];
        _1 = foo(move _2, const 1_usize) -> bb5;
    }

    bb5: {
        _9 = d() -> bb6;
    }

    bb6: {
        _10 = d() -> bb7;
    }

    bb7: {
        _11 = d() -> bb8;
    }

    bb8: {
        _12 = d() -> bb9;
    }

    bb9: {
        _8 = [move _9, move _10, move _11, move _12];
        _7 = foo(move _8, const 3_usize) -> bb10;
    }

    bb10: {
        return;
    }
}

fn d() -> C {
    let mut _0: C;

    bb0: {
        _0 = C { _x: const 0_u8 };
        return;
    }
}

fn foo(_1: [C; 4], _2: usize) -> C {
    debug a => _1;
    debug i => _2;
    let mut _0: C;
    let mut _3: usize;
    let mut _4: bool;

    bb0: {
        _3 = const 4_usize;
        _4 = Lt(_2, _3);
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> bb1;
    }

    bb1: {
        _0 = _1[_2];
        return;
    }
}

foo::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}
