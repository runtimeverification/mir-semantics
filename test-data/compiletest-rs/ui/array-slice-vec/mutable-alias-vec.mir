// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn grow(_1: &mut Vec<isize>) -> () {
    debug v => _1;
    let mut _0: ();
    let _2: ();

    bb0: {
        _2 = Vec::<isize>::push(_1, const 1_isize) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: std::vec::Vec<isize>;
    let _2: ();
    let mut _3: &mut std::vec::Vec<isize>;
    let _4: ();
    let mut _5: &mut std::vec::Vec<isize>;
    let _6: ();
    let mut _7: &mut std::vec::Vec<isize>;
    let mut _9: &std::vec::Vec<isize>;
    let _10: ();
    let mut _11: std::fmt::Arguments<'_>;
    let mut _12: &[&str];
    let _13: &[&str; 2];
    let _14: [&str; 2];
    let mut _15: &[core::fmt::rt::Argument<'_>];
    let _16: &[core::fmt::rt::Argument<'_>; 1];
    let _17: [core::fmt::rt::Argument<'_>; 1];
    let mut _18: core::fmt::rt::Argument<'_>;
    let _19: &usize;
    let mut _20: (&usize, &usize);
    let mut _21: &usize;
    let mut _22: &usize;
    let _23: usize;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: usize;
    let mut _29: usize;
    let _31: !;
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug v => _1;
        let _8: usize;
        scope 2 {
            debug len => _8;
            let _24: &usize;
            let _25: &usize;
            scope 3 {
                debug left_val => _24;
                debug right_val => _25;
                let _30: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _30;
                }
            }
        }
    }

    bb0: {
        _1 = Vec::<isize>::new() -> bb1;
    }

    bb1: {
        _3 = &mut _1;
        _2 = grow(_3) -> [return: bb2, unwind: bb12];
    }

    bb2: {
        _5 = &mut _1;
        _4 = grow(_5) -> [return: bb3, unwind: bb12];
    }

    bb3: {
        _7 = &mut _1;
        _6 = grow(_7) -> [return: bb4, unwind: bb12];
    }

    bb4: {
        _9 = &_1;
        _8 = Vec::<isize>::len(move _9) -> [return: bb5, unwind: bb12];
    }

    bb5: {
        _14 = [const "", const "\n"];
        _13 = &_14;
        _12 = _13 as &[&str] (Pointer(Unsize));
        _19 = &_8;
        _18 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_19) -> [return: bb6, unwind: bb12];
    }

    bb6: {
        _17 = [move _18];
        _16 = &_17;
        _15 = _16 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _11 = Arguments::<'_>::new_v1(move _12, move _15) -> [return: bb7, unwind: bb12];
    }

    bb7: {
        _10 = _print(move _11) -> [return: bb8, unwind: bb12];
    }

    bb8: {
        _21 = &_8;
        _23 = const 3_usize;
        _22 = &_23;
        _20 = (move _21, move _22);
        _24 = (_20.0: &usize);
        _25 = (_20.1: &usize);
        _28 = (*_24);
        _29 = (*_25);
        _27 = Eq(move _28, move _29);
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _30 = core::panicking::AssertKind::Eq;
        _32 = Option::<Arguments<'_>>::None;
        _31 = core::panicking::assert_failed::<usize, usize>(move _30, _24, _25, move _32) -> bb12;
    }

    bb10: {
        drop(_1) -> bb11;
    }

    bb11: {
        return;
    }

    bb12 (cleanup): {
        drop(_1) -> [return: bb13, unwind terminate];
    }

    bb13 (cleanup): {
        resume;
    }
}
