// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let mut _2: &usize;
    let _3: usize;
    let mut _4: &usize;
    let _5: usize;
    let mut _6: usize;
    let _7: &usize;
    let _8: &usize;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: usize;
    let mut _12: usize;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _7;
        debug right_val => _8;
        let _13: core::panicking::AssertKind;
        scope 2 {
            debug kind => _13;
        }
    }

    bb0: {
        _3 = std::mem::size_of::<[u8; 140737488355327]>() -> bb1;
    }

    bb1: {
        _2 = &_3;
        _6 = Shl(const 1_usize, const 47_i32);
        _5 = Sub(move _6, const 1_usize);
        _4 = &_5;
        _1 = (move _2, move _4);
        _7 = (_1.0: &usize);
        _8 = (_1.1: &usize);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<usize, usize>(move _13, _7, _8, move _15);
    }

    bb3: {
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: usize;
    let mut _2: u32;
    let mut _3: bool;
    let mut _4: (usize, bool);

    bb0: {
        StorageLive(_1);
        _2 = const 47_i32 as u32 (IntToInt);
        _3 = Lt(move _2, const 64_u32);
        assert(move _3, "attempt to shift left by `{}`, which would overflow", const 47_i32) -> bb1;
    }

    bb1: {
        _1 = Shl(const 1_usize, const 47_i32);
        _4 = CheckedSub(_1, const 1_usize);
        assert(!move (_4.1: bool), "attempt to compute `{} - {}`, which would overflow", move _1, const 1_usize) -> bb2;
    }

    bb2: {
        _0 = move (_4.0: usize);
        StorageDead(_1);
        return;
    }
}
