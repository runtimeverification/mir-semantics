// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<i32>;
    let mut _2: std::vec::Vec<i32>;
    let _3: ();
    let mut _4: &mut std::vec::Vec<i32>;
    let _5: ();
    let mut _6: &mut std::vec::Vec<i32>;
    let _7: ();
    let mut _8: &mut std::vec::Vec<i32>;
    let _9: ();
    let mut _10: &mut std::vec::Vec<i32>;
    let _11: ();
    let mut _12: &mut std::vec::Vec<i32>;
    scope 1 {
        debug my_vec => _1;
    }
    scope 2 {
        debug _temp => _2;
    }

    bb0: {
        _2 = Vec::<i32>::new() -> bb1;
    }

    bb1: {
        _4 = &mut _2;
        _3 = Vec::<i32>::push(move _4, const 1_i32) -> [return: bb2, unwind: bb8];
    }

    bb2: {
        _6 = &mut _2;
        _5 = Vec::<i32>::push(move _6, const 2_i32) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        _8 = &mut _2;
        _7 = Vec::<i32>::push(move _8, const 3_i32) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _10 = &mut _2;
        _9 = Vec::<i32>::push(move _10, const 4_i32) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        _12 = &mut _2;
        _11 = Vec::<i32>::push(move _12, const 5_i32) -> [return: bb6, unwind: bb8];
    }

    bb6: {
        _1 = move _2;
        drop(_1) -> bb7;
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_2) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        resume;
    }
}
