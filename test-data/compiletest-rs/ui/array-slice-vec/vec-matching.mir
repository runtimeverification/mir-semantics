// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn a() -> () {
    let mut _0: ();
    let _1: [i32; 1];
    let mut _3: (&i32, &i32);
    let mut _4: &i32;
    let mut _5: &i32;
    let _6: i32;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: i32;
    let mut _12: i32;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _2: i32;
        scope 2 {
            debug a => _2;
            let _7: &i32;
            let _8: &i32;
            scope 3 {
                debug left_val => _7;
                debug right_val => _8;
                let _13: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _13;
                }
            }
        }
    }

    bb0: {
        _1 = [const 1_i32];
        _2 = _1[0 of 1];
        _4 = &_2;
        _6 = const 1_i32;
        _5 = &_6;
        _3 = (move _4, move _5);
        _7 = (_3.0: &i32);
        _8 = (_3.1: &i32);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<i32, i32>(move _13, _7, _8, move _15);
    }

    bb2: {
        return;
    }
}

fn b() -> () {
    let mut _0: ();
    let _1: [i32; 3];
    let mut _5: (&i32, &i32);
    let mut _6: &i32;
    let mut _7: &i32;
    let _8: i32;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: i32;
    let mut _14: i32;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: (&i32, &i32);
    let mut _19: &i32;
    let mut _20: &i32;
    let _21: i32;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: i32;
    let mut _27: i32;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let _32: &[i32; 1];
    let _33: [i32; 1];
    let mut _34: (&[i32; 1], &&[i32]);
    let mut _35: &[i32; 1];
    let mut _36: &&[i32];
    let mut _39: bool;
    let mut _40: bool;
    let _42: !;
    let mut _43: std::option::Option<std::fmt::Arguments<'_>>;
    let _48: &[i32; 1];
    let _49: [i32; 1];
    let mut _50: (&[i32; 1], &&[i32]);
    let mut _51: &[i32; 1];
    let mut _52: &&[i32];
    let mut _55: bool;
    let mut _56: bool;
    let _58: !;
    let mut _59: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _60: (&i32, &i32);
    let mut _61: &i32;
    let mut _62: &i32;
    let _63: i32;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: i32;
    let mut _69: i32;
    let _71: !;
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _73: (&i32, &i32);
    let mut _74: &i32;
    let mut _75: &i32;
    let _76: i32;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: i32;
    let mut _82: i32;
    let _84: !;
    let mut _85: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _89: (&i32, &i32);
    let mut _90: &i32;
    let mut _91: &i32;
    let _92: i32;
    let mut _95: bool;
    let mut _96: bool;
    let mut _97: i32;
    let mut _98: i32;
    let _100: !;
    let mut _101: std::option::Option<std::fmt::Arguments<'_>>;
    let _103: &[i32; 1];
    let _104: [i32; 1];
    let mut _105: (&[i32; 1], &&[i32]);
    let mut _106: &[i32; 1];
    let mut _107: &&[i32];
    let mut _110: bool;
    let mut _111: bool;
    let _113: !;
    let mut _114: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _115: (&i32, &i32);
    let mut _116: &i32;
    let mut _117: &i32;
    let _118: i32;
    let mut _121: bool;
    let mut _122: bool;
    let mut _123: i32;
    let mut _124: i32;
    let _126: !;
    let mut _127: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _131: (&i32, &i32);
    let mut _132: &i32;
    let mut _133: &i32;
    let _134: i32;
    let mut _137: bool;
    let mut _138: bool;
    let mut _139: i32;
    let mut _140: i32;
    let _142: !;
    let mut _143: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _144: (&i32, &i32);
    let mut _145: &i32;
    let mut _146: &i32;
    let _147: i32;
    let mut _150: bool;
    let mut _151: bool;
    let mut _152: i32;
    let mut _153: i32;
    let _155: !;
    let mut _156: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _157: (&i32, &i32);
    let mut _158: &i32;
    let mut _159: &i32;
    let _160: i32;
    let mut _163: bool;
    let mut _164: bool;
    let mut _165: i32;
    let mut _166: i32;
    let _168: !;
    let mut _169: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _2: i32;
        let _3: i32;
        let _4: [i32; 1];
        let _44: [i32; 1];
        let _45: i32;
        let _46: i32;
        let _86: i32;
        let _87: [i32; 1];
        let _88: i32;
        let _128: i32;
        let _129: i32;
        let _130: i32;
        scope 2 {
            debug a => _2;
            debug b => _3;
            debug c => _4;
            let _9: &i32;
            let _10: &i32;
            let _22: &i32;
            let _23: &i32;
            let _31: &[i32];
            scope 3 {
                debug left_val => _9;
                debug right_val => _10;
                let _15: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _15;
                }
            }
            scope 5 {
                debug left_val => _22;
                debug right_val => _23;
                let _28: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _28;
                }
            }
            scope 7 {
                debug expected => _31;
                let _37: &[i32; 1];
                let _38: &&[i32];
                scope 8 {
                    debug left_val => _37;
                    debug right_val => _38;
                    let _41: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _41;
                    }
                }
            }
        }
        scope 10 {
            debug a => _44;
            debug b => _45;
            debug c => _46;
            let _47: &[i32];
            scope 11 {
                debug expected => _47;
                let _53: &[i32; 1];
                let _54: &&[i32];
                let _64: &i32;
                let _65: &i32;
                let _77: &i32;
                let _78: &i32;
                scope 12 {
                    debug left_val => _53;
                    debug right_val => _54;
                    let _57: core::panicking::AssertKind;
                    scope 13 {
                        debug kind => _57;
                    }
                }
                scope 14 {
                    debug left_val => _64;
                    debug right_val => _65;
                    let _70: core::panicking::AssertKind;
                    scope 15 {
                        debug kind => _70;
                    }
                }
                scope 16 {
                    debug left_val => _77;
                    debug right_val => _78;
                    let _83: core::panicking::AssertKind;
                    scope 17 {
                        debug kind => _83;
                    }
                }
            }
        }
        scope 18 {
            debug a => _86;
            debug b => _87;
            debug c => _88;
            let _93: &i32;
            let _94: &i32;
            let _102: &[i32];
            scope 19 {
                debug left_val => _93;
                debug right_val => _94;
                let _99: core::panicking::AssertKind;
                scope 20 {
                    debug kind => _99;
                }
            }
            scope 21 {
                debug expected => _102;
                let _108: &[i32; 1];
                let _109: &&[i32];
                let _119: &i32;
                let _120: &i32;
                scope 22 {
                    debug left_val => _108;
                    debug right_val => _109;
                    let _112: core::panicking::AssertKind;
                    scope 23 {
                        debug kind => _112;
                    }
                }
                scope 24 {
                    debug left_val => _119;
                    debug right_val => _120;
                    let _125: core::panicking::AssertKind;
                    scope 25 {
                        debug kind => _125;
                    }
                }
            }
        }
        scope 26 {
            debug a => _128;
            debug b => _129;
            debug c => _130;
            let _135: &i32;
            let _136: &i32;
            let _148: &i32;
            let _149: &i32;
            let _161: &i32;
            let _162: &i32;
            scope 27 {
                debug left_val => _135;
                debug right_val => _136;
                let _141: core::panicking::AssertKind;
                scope 28 {
                    debug kind => _141;
                }
            }
            scope 29 {
                debug left_val => _148;
                debug right_val => _149;
                let _154: core::panicking::AssertKind;
                scope 30 {
                    debug kind => _154;
                }
            }
            scope 31 {
                debug left_val => _161;
                debug right_val => _162;
                let _167: core::panicking::AssertKind;
                scope 32 {
                    debug kind => _167;
                }
            }
        }
    }

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32];
        _2 = _1[0 of 3];
        _3 = _1[1 of 3];
        _4 = _1[2..3];
        _6 = &_2;
        _8 = const 1_i32;
        _7 = &_8;
        _5 = (move _6, move _7);
        _9 = (_5.0: &i32);
        _10 = (_5.1: &i32);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<i32, i32>(move _15, _9, _10, move _17);
    }

    bb2: {
        _19 = &_3;
        _21 = const 2_i32;
        _20 = &_21;
        _18 = (move _19, move _20);
        _22 = (_18.0: &i32);
        _23 = (_18.1: &i32);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<i32, i32>(move _28, _22, _23, move _30);
    }

    bb4: {
        _33 = [const 3_i32];
        _32 = &_33;
        _31 = _32 as &[i32] (Pointer(Unsize));
        _35 = &_4;
        _36 = &_31;
        _34 = (move _35, move _36);
        _37 = (_34.0: &[i32; 1]);
        _38 = (_34.1: &&[i32]);
        _40 = <[i32; 1] as PartialEq<&[i32]>>::eq(_37, _38) -> bb5;
    }

    bb5: {
        _39 = Not(move _40);
        switchInt(move _39) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _41 = core::panicking::AssertKind::Eq;
        _43 = Option::<Arguments<'_>>::None;
        _42 = core::panicking::assert_failed::<[i32; 1], &[i32]>(move _41, _37, _38, move _43);
    }

    bb7: {
        _44 = _1[0..1];
        _46 = _1[2 of 3];
        _45 = _1[1 of 3];
        _49 = [const 1_i32];
        _48 = &_49;
        _47 = _48 as &[i32] (Pointer(Unsize));
        _51 = &_44;
        _52 = &_47;
        _50 = (move _51, move _52);
        _53 = (_50.0: &[i32; 1]);
        _54 = (_50.1: &&[i32]);
        _56 = <[i32; 1] as PartialEq<&[i32]>>::eq(_53, _54) -> bb8;
    }

    bb8: {
        _55 = Not(move _56);
        switchInt(move _55) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _57 = core::panicking::AssertKind::Eq;
        _59 = Option::<Arguments<'_>>::None;
        _58 = core::panicking::assert_failed::<[i32; 1], &[i32]>(move _57, _53, _54, move _59);
    }

    bb10: {
        _61 = &_45;
        _63 = const 2_i32;
        _62 = &_63;
        _60 = (move _61, move _62);
        _64 = (_60.0: &i32);
        _65 = (_60.1: &i32);
        _68 = (*_64);
        _69 = (*_65);
        _67 = Eq(move _68, move _69);
        _66 = Not(move _67);
        switchInt(move _66) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _70 = core::panicking::AssertKind::Eq;
        _72 = Option::<Arguments<'_>>::None;
        _71 = core::panicking::assert_failed::<i32, i32>(move _70, _64, _65, move _72);
    }

    bb12: {
        _74 = &_46;
        _76 = const 3_i32;
        _75 = &_76;
        _73 = (move _74, move _75);
        _77 = (_73.0: &i32);
        _78 = (_73.1: &i32);
        _81 = (*_77);
        _82 = (*_78);
        _80 = Eq(move _81, move _82);
        _79 = Not(move _80);
        switchInt(move _79) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _83 = core::panicking::AssertKind::Eq;
        _85 = Option::<Arguments<'_>>::None;
        _84 = core::panicking::assert_failed::<i32, i32>(move _83, _77, _78, move _85);
    }

    bb14: {
        _86 = _1[0 of 3];
        _87 = _1[1..2];
        _88 = _1[2 of 3];
        _90 = &_86;
        _92 = const 1_i32;
        _91 = &_92;
        _89 = (move _90, move _91);
        _93 = (_89.0: &i32);
        _94 = (_89.1: &i32);
        _97 = (*_93);
        _98 = (*_94);
        _96 = Eq(move _97, move _98);
        _95 = Not(move _96);
        switchInt(move _95) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _99 = core::panicking::AssertKind::Eq;
        _101 = Option::<Arguments<'_>>::None;
        _100 = core::panicking::assert_failed::<i32, i32>(move _99, _93, _94, move _101);
    }

    bb16: {
        _104 = [const 2_i32];
        _103 = &_104;
        _102 = _103 as &[i32] (Pointer(Unsize));
        _106 = &_87;
        _107 = &_102;
        _105 = (move _106, move _107);
        _108 = (_105.0: &[i32; 1]);
        _109 = (_105.1: &&[i32]);
        _111 = <[i32; 1] as PartialEq<&[i32]>>::eq(_108, _109) -> bb17;
    }

    bb17: {
        _110 = Not(move _111);
        switchInt(move _110) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _112 = core::panicking::AssertKind::Eq;
        _114 = Option::<Arguments<'_>>::None;
        _113 = core::panicking::assert_failed::<[i32; 1], &[i32]>(move _112, _108, _109, move _114);
    }

    bb19: {
        _116 = &_88;
        _118 = const 3_i32;
        _117 = &_118;
        _115 = (move _116, move _117);
        _119 = (_115.0: &i32);
        _120 = (_115.1: &i32);
        _123 = (*_119);
        _124 = (*_120);
        _122 = Eq(move _123, move _124);
        _121 = Not(move _122);
        switchInt(move _121) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _125 = core::panicking::AssertKind::Eq;
        _127 = Option::<Arguments<'_>>::None;
        _126 = core::panicking::assert_failed::<i32, i32>(move _125, _119, _120, move _127);
    }

    bb21: {
        _128 = _1[0 of 3];
        _129 = _1[1 of 3];
        _130 = _1[2 of 3];
        _132 = &_128;
        _134 = const 1_i32;
        _133 = &_134;
        _131 = (move _132, move _133);
        _135 = (_131.0: &i32);
        _136 = (_131.1: &i32);
        _139 = (*_135);
        _140 = (*_136);
        _138 = Eq(move _139, move _140);
        _137 = Not(move _138);
        switchInt(move _137) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        _141 = core::panicking::AssertKind::Eq;
        _143 = Option::<Arguments<'_>>::None;
        _142 = core::panicking::assert_failed::<i32, i32>(move _141, _135, _136, move _143);
    }

    bb23: {
        _145 = &_129;
        _147 = const 2_i32;
        _146 = &_147;
        _144 = (move _145, move _146);
        _148 = (_144.0: &i32);
        _149 = (_144.1: &i32);
        _152 = (*_148);
        _153 = (*_149);
        _151 = Eq(move _152, move _153);
        _150 = Not(move _151);
        switchInt(move _150) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _154 = core::panicking::AssertKind::Eq;
        _156 = Option::<Arguments<'_>>::None;
        _155 = core::panicking::assert_failed::<i32, i32>(move _154, _148, _149, move _156);
    }

    bb25: {
        _158 = &_130;
        _160 = const 3_i32;
        _159 = &_160;
        _157 = (move _158, move _159);
        _161 = (_157.0: &i32);
        _162 = (_157.1: &i32);
        _165 = (*_161);
        _166 = (*_162);
        _164 = Eq(move _165, move _166);
        _163 = Not(move _164);
        switchInt(move _163) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _167 = core::panicking::AssertKind::Eq;
        _169 = Option::<Arguments<'_>>::None;
        _168 = core::panicking::assert_failed::<i32, i32>(move _167, _161, _162, move _169);
    }

    bb27: {
        return;
    }
}

fn b_slice() -> () {
    let mut _0: ();
    let _1: &[i32];
    let _2: &[i32; 3];
    let _3: [i32; 3];
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: bool;
    let mut _10: (&i32, &i32);
    let mut _11: &i32;
    let mut _12: &i32;
    let _13: i32;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: i32;
    let mut _19: i32;
    let _21: !;
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _23: (&i32, &i32);
    let mut _24: &i32;
    let mut _25: &i32;
    let _26: i32;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: i32;
    let mut _32: i32;
    let _34: !;
    let mut _35: std::option::Option<std::fmt::Arguments<'_>>;
    let _37: &[i32; 1];
    let _38: [i32; 1];
    let mut _39: (&&[i32], &&[i32]);
    let mut _40: &&[i32];
    let mut _41: &&[i32];
    let mut _44: bool;
    let mut _45: bool;
    let _47: !;
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _49: !;
    let mut _50: usize;
    let mut _51: usize;
    let mut _52: bool;
    let _57: &[i32; 1];
    let _58: [i32; 1];
    let mut _59: (&&[i32], &&[i32]);
    let mut _60: &&[i32];
    let mut _61: &&[i32];
    let mut _64: bool;
    let mut _65: bool;
    let _67: !;
    let mut _68: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _69: (&i32, &i32);
    let mut _70: &i32;
    let mut _71: &i32;
    let _72: i32;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: i32;
    let mut _78: i32;
    let _80: !;
    let mut _81: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _82: (&i32, &i32);
    let mut _83: &i32;
    let mut _84: &i32;
    let _85: i32;
    let mut _88: bool;
    let mut _89: bool;
    let mut _90: i32;
    let mut _91: i32;
    let _93: !;
    let mut _94: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _95: !;
    let mut _96: usize;
    let mut _97: usize;
    let mut _98: bool;
    let mut _102: (&i32, &i32);
    let mut _103: &i32;
    let mut _104: &i32;
    let _105: i32;
    let mut _108: bool;
    let mut _109: bool;
    let mut _110: i32;
    let mut _111: i32;
    let _113: !;
    let mut _114: std::option::Option<std::fmt::Arguments<'_>>;
    let _116: &[i32; 1];
    let _117: [i32; 1];
    let mut _118: (&&[i32], &&[i32]);
    let mut _119: &&[i32];
    let mut _120: &&[i32];
    let mut _123: bool;
    let mut _124: bool;
    let _126: !;
    let mut _127: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _128: (&i32, &i32);
    let mut _129: &i32;
    let mut _130: &i32;
    let _131: i32;
    let mut _134: bool;
    let mut _135: bool;
    let mut _136: i32;
    let mut _137: i32;
    let _139: !;
    let mut _140: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _141: !;
    let mut _142: usize;
    let mut _143: usize;
    let mut _144: bool;
    let mut _148: (&i32, &i32);
    let mut _149: &i32;
    let mut _150: &i32;
    let _151: i32;
    let mut _154: bool;
    let mut _155: bool;
    let mut _156: i32;
    let mut _157: i32;
    let _159: !;
    let mut _160: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _161: (&i32, &i32);
    let mut _162: &i32;
    let mut _163: &i32;
    let _164: i32;
    let mut _167: bool;
    let mut _168: bool;
    let mut _169: i32;
    let mut _170: i32;
    let _172: !;
    let mut _173: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _174: (&i32, &i32);
    let mut _175: &i32;
    let mut _176: &i32;
    let _177: i32;
    let mut _180: bool;
    let mut _181: bool;
    let mut _182: i32;
    let mut _183: i32;
    let _185: !;
    let mut _186: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _187: !;
    scope 1 {
        debug x => _1;
        let _7: i32;
        let _8: i32;
        let _9: &[i32];
        let _53: &[i32];
        let _54: i32;
        let _55: i32;
        let _99: i32;
        let _100: &[i32];
        let _101: i32;
        let _145: i32;
        let _146: i32;
        let _147: i32;
        scope 2 {
            debug a => _7;
            debug b => _8;
            debug c => _9;
            let _14: &i32;
            let _15: &i32;
            let _27: &i32;
            let _28: &i32;
            let _36: &[i32];
            scope 3 {
                debug left_val => _14;
                debug right_val => _15;
                let _20: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _20;
                }
            }
            scope 5 {
                debug left_val => _27;
                debug right_val => _28;
                let _33: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _33;
                }
            }
            scope 7 {
                debug expected => _36;
                let _42: &&[i32];
                let _43: &&[i32];
                scope 8 {
                    debug left_val => _42;
                    debug right_val => _43;
                    let _46: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _46;
                    }
                }
            }
        }
        scope 10 {
            debug a => _53;
            debug b => _54;
            debug c => _55;
            let _56: &[i32];
            scope 11 {
                debug expected => _56;
                let _62: &&[i32];
                let _63: &&[i32];
                let _73: &i32;
                let _74: &i32;
                let _86: &i32;
                let _87: &i32;
                scope 12 {
                    debug left_val => _62;
                    debug right_val => _63;
                    let _66: core::panicking::AssertKind;
                    scope 13 {
                        debug kind => _66;
                    }
                }
                scope 14 {
                    debug left_val => _73;
                    debug right_val => _74;
                    let _79: core::panicking::AssertKind;
                    scope 15 {
                        debug kind => _79;
                    }
                }
                scope 16 {
                    debug left_val => _86;
                    debug right_val => _87;
                    let _92: core::panicking::AssertKind;
                    scope 17 {
                        debug kind => _92;
                    }
                }
            }
        }
        scope 18 {
            debug a => _99;
            debug b => _100;
            debug c => _101;
            let _106: &i32;
            let _107: &i32;
            let _115: &[i32];
            scope 19 {
                debug left_val => _106;
                debug right_val => _107;
                let _112: core::panicking::AssertKind;
                scope 20 {
                    debug kind => _112;
                }
            }
            scope 21 {
                debug expected => _115;
                let _121: &&[i32];
                let _122: &&[i32];
                let _132: &i32;
                let _133: &i32;
                scope 22 {
                    debug left_val => _121;
                    debug right_val => _122;
                    let _125: core::panicking::AssertKind;
                    scope 23 {
                        debug kind => _125;
                    }
                }
                scope 24 {
                    debug left_val => _132;
                    debug right_val => _133;
                    let _138: core::panicking::AssertKind;
                    scope 25 {
                        debug kind => _138;
                    }
                }
            }
        }
        scope 26 {
            debug a => _145;
            debug b => _146;
            debug c => _147;
            let _152: &i32;
            let _153: &i32;
            let _165: &i32;
            let _166: &i32;
            let _178: &i32;
            let _179: &i32;
            scope 27 {
                debug left_val => _152;
                debug right_val => _153;
                let _158: core::panicking::AssertKind;
                scope 28 {
                    debug kind => _158;
                }
            }
            scope 29 {
                debug left_val => _165;
                debug right_val => _166;
                let _171: core::panicking::AssertKind;
                scope 30 {
                    debug kind => _171;
                }
            }
            scope 31 {
                debug left_val => _178;
                debug right_val => _179;
                let _184: core::panicking::AssertKind;
                scope 32 {
                    debug kind => _184;
                }
            }
        }
    }

    bb0: {
        _3 = [const 1_i32, const 2_i32, const 3_i32];
        _2 = &_3;
        _1 = _2 as &[i32] (Pointer(Unsize));
        _4 = Len((*_1));
        _5 = const 2_usize;
        _6 = Ge(move _4, move _5);
        switchInt(move _6) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _49 = core::panicking::panic(const "internal error: entered unreachable code");
    }

    bb2: {
        _7 = (*_1)[0 of 2];
        _8 = (*_1)[1 of 2];
        _9 = &(*_1)[2:];
        _11 = &_7;
        _13 = const 1_i32;
        _12 = &_13;
        _10 = (move _11, move _12);
        _14 = (_10.0: &i32);
        _15 = (_10.1: &i32);
        _18 = (*_14);
        _19 = (*_15);
        _17 = Eq(move _18, move _19);
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _20 = core::panicking::AssertKind::Eq;
        _22 = Option::<Arguments<'_>>::None;
        _21 = core::panicking::assert_failed::<i32, i32>(move _20, _14, _15, move _22);
    }

    bb4: {
        _24 = &_8;
        _26 = const 2_i32;
        _25 = &_26;
        _23 = (move _24, move _25);
        _27 = (_23.0: &i32);
        _28 = (_23.1: &i32);
        _31 = (*_27);
        _32 = (*_28);
        _30 = Eq(move _31, move _32);
        _29 = Not(move _30);
        switchInt(move _29) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _33 = core::panicking::AssertKind::Eq;
        _35 = Option::<Arguments<'_>>::None;
        _34 = core::panicking::assert_failed::<i32, i32>(move _33, _27, _28, move _35);
    }

    bb6: {
        _38 = [const 3_i32];
        _37 = &_38;
        _36 = _37 as &[i32] (Pointer(Unsize));
        _40 = &_9;
        _41 = &_36;
        _39 = (move _40, move _41);
        _42 = (_39.0: &&[i32]);
        _43 = (_39.1: &&[i32]);
        _45 = <&[i32] as PartialEq>::eq(_42, _43) -> bb7;
    }

    bb7: {
        _44 = Not(move _45);
        switchInt(move _44) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _46 = core::panicking::AssertKind::Eq;
        _48 = Option::<Arguments<'_>>::None;
        _47 = core::panicking::assert_failed::<&[i32], &[i32]>(move _46, _42, _43, move _48);
    }

    bb9: {
        _50 = Len((*_1));
        _51 = const 2_usize;
        _52 = Ge(move _50, move _51);
        switchInt(move _52) -> [0: bb10, otherwise: bb11];
    }

    bb10: {
        _95 = core::panicking::panic(const "internal error: entered unreachable code");
    }

    bb11: {
        _53 = &(*_1)[:-2];
        _55 = (*_1)[-1 of 2];
        _54 = (*_1)[-2 of 2];
        _58 = [const 1_i32];
        _57 = &_58;
        _56 = _57 as &[i32] (Pointer(Unsize));
        _60 = &_53;
        _61 = &_56;
        _59 = (move _60, move _61);
        _62 = (_59.0: &&[i32]);
        _63 = (_59.1: &&[i32]);
        _65 = <&[i32] as PartialEq>::eq(_62, _63) -> bb12;
    }

    bb12: {
        _64 = Not(move _65);
        switchInt(move _64) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _66 = core::panicking::AssertKind::Eq;
        _68 = Option::<Arguments<'_>>::None;
        _67 = core::panicking::assert_failed::<&[i32], &[i32]>(move _66, _62, _63, move _68);
    }

    bb14: {
        _70 = &_54;
        _72 = const 2_i32;
        _71 = &_72;
        _69 = (move _70, move _71);
        _73 = (_69.0: &i32);
        _74 = (_69.1: &i32);
        _77 = (*_73);
        _78 = (*_74);
        _76 = Eq(move _77, move _78);
        _75 = Not(move _76);
        switchInt(move _75) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _79 = core::panicking::AssertKind::Eq;
        _81 = Option::<Arguments<'_>>::None;
        _80 = core::panicking::assert_failed::<i32, i32>(move _79, _73, _74, move _81);
    }

    bb16: {
        _83 = &_55;
        _85 = const 3_i32;
        _84 = &_85;
        _82 = (move _83, move _84);
        _86 = (_82.0: &i32);
        _87 = (_82.1: &i32);
        _90 = (*_86);
        _91 = (*_87);
        _89 = Eq(move _90, move _91);
        _88 = Not(move _89);
        switchInt(move _88) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _92 = core::panicking::AssertKind::Eq;
        _94 = Option::<Arguments<'_>>::None;
        _93 = core::panicking::assert_failed::<i32, i32>(move _92, _86, _87, move _94);
    }

    bb18: {
        _96 = Len((*_1));
        _97 = const 2_usize;
        _98 = Ge(move _96, move _97);
        switchInt(move _98) -> [0: bb19, otherwise: bb20];
    }

    bb19: {
        _141 = core::panicking::panic(const "internal error: entered unreachable code");
    }

    bb20: {
        _99 = (*_1)[0 of 2];
        _100 = &(*_1)[1:-1];
        _101 = (*_1)[-1 of 2];
        _103 = &_99;
        _105 = const 1_i32;
        _104 = &_105;
        _102 = (move _103, move _104);
        _106 = (_102.0: &i32);
        _107 = (_102.1: &i32);
        _110 = (*_106);
        _111 = (*_107);
        _109 = Eq(move _110, move _111);
        _108 = Not(move _109);
        switchInt(move _108) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _112 = core::panicking::AssertKind::Eq;
        _114 = Option::<Arguments<'_>>::None;
        _113 = core::panicking::assert_failed::<i32, i32>(move _112, _106, _107, move _114);
    }

    bb22: {
        _117 = [const 2_i32];
        _116 = &_117;
        _115 = _116 as &[i32] (Pointer(Unsize));
        _119 = &_100;
        _120 = &_115;
        _118 = (move _119, move _120);
        _121 = (_118.0: &&[i32]);
        _122 = (_118.1: &&[i32]);
        _124 = <&[i32] as PartialEq>::eq(_121, _122) -> bb23;
    }

    bb23: {
        _123 = Not(move _124);
        switchInt(move _123) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _125 = core::panicking::AssertKind::Eq;
        _127 = Option::<Arguments<'_>>::None;
        _126 = core::panicking::assert_failed::<&[i32], &[i32]>(move _125, _121, _122, move _127);
    }

    bb25: {
        _129 = &_101;
        _131 = const 3_i32;
        _130 = &_131;
        _128 = (move _129, move _130);
        _132 = (_128.0: &i32);
        _133 = (_128.1: &i32);
        _136 = (*_132);
        _137 = (*_133);
        _135 = Eq(move _136, move _137);
        _134 = Not(move _135);
        switchInt(move _134) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _138 = core::panicking::AssertKind::Eq;
        _140 = Option::<Arguments<'_>>::None;
        _139 = core::panicking::assert_failed::<i32, i32>(move _138, _132, _133, move _140);
    }

    bb27: {
        _142 = Len((*_1));
        _143 = const 3_usize;
        _144 = Eq(move _142, move _143);
        switchInt(move _144) -> [0: bb28, otherwise: bb29];
    }

    bb28: {
        _187 = core::panicking::panic(const "internal error: entered unreachable code");
    }

    bb29: {
        _145 = (*_1)[0 of 3];
        _146 = (*_1)[1 of 3];
        _147 = (*_1)[2 of 3];
        _149 = &_145;
        _151 = const 1_i32;
        _150 = &_151;
        _148 = (move _149, move _150);
        _152 = (_148.0: &i32);
        _153 = (_148.1: &i32);
        _156 = (*_152);
        _157 = (*_153);
        _155 = Eq(move _156, move _157);
        _154 = Not(move _155);
        switchInt(move _154) -> [0: bb31, otherwise: bb30];
    }

    bb30: {
        _158 = core::panicking::AssertKind::Eq;
        _160 = Option::<Arguments<'_>>::None;
        _159 = core::panicking::assert_failed::<i32, i32>(move _158, _152, _153, move _160);
    }

    bb31: {
        _162 = &_146;
        _164 = const 2_i32;
        _163 = &_164;
        _161 = (move _162, move _163);
        _165 = (_161.0: &i32);
        _166 = (_161.1: &i32);
        _169 = (*_165);
        _170 = (*_166);
        _168 = Eq(move _169, move _170);
        _167 = Not(move _168);
        switchInt(move _167) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _171 = core::panicking::AssertKind::Eq;
        _173 = Option::<Arguments<'_>>::None;
        _172 = core::panicking::assert_failed::<i32, i32>(move _171, _165, _166, move _173);
    }

    bb33: {
        _175 = &_147;
        _177 = const 3_i32;
        _176 = &_177;
        _174 = (move _175, move _176);
        _178 = (_174.0: &i32);
        _179 = (_174.1: &i32);
        _182 = (*_178);
        _183 = (*_179);
        _181 = Eq(move _182, move _183);
        _180 = Not(move _181);
        switchInt(move _180) -> [0: bb35, otherwise: bb34];
    }

    bb34: {
        _184 = core::panicking::AssertKind::Eq;
        _186 = Option::<Arguments<'_>>::None;
        _185 = core::panicking::assert_failed::<i32, i32>(move _184, _178, _179, move _186);
    }

    bb35: {
        return;
    }
}

fn c() -> () {
    let mut _0: ();
    let _1: [i32; 1];
    let mut _2: !;
    scope 1 {
        debug x => _1;
    }

    bb0: {
        _1 = [const 1_i32];
        switchInt(_1[0 of 1]) -> [2: bb2, otherwise: bb1];
    }

    bb1: {
        return;
    }

    bb2: {
        _2 = begin_panic::<&str>(const "explicit panic");
    }
}

fn d() -> () {
    let mut _0: ();
    let _1: [i32; 3];
    let mut _3: (&i32, &i32);
    let mut _4: &i32;
    let mut _5: &i32;
    let _6: i32;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: i32;
    let mut _12: i32;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _2: i32;
        scope 2 {
            debug branch => _2;
            let _7: &i32;
            let _8: &i32;
            scope 3 {
                debug left_val => _7;
                debug right_val => _8;
                let _13: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _13;
                }
            }
        }
    }

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32];
        switchInt(_1[0 of 3]) -> [1: bb1, otherwise: bb3];
    }

    bb1: {
        switchInt(_1[1 of 3]) -> [1: bb4, 2: bb2, otherwise: bb3];
    }

    bb2: {
        switchInt(_1[2 of 3]) -> [3: bb5, otherwise: bb6];
    }

    bb3: {
        _2 = const 3_i32;
        goto -> bb7;
    }

    bb4: {
        _2 = const 0_i32;
        goto -> bb7;
    }

    bb5: {
        _2 = const 1_i32;
        goto -> bb7;
    }

    bb6: {
        _2 = const 2_i32;
        goto -> bb7;
    }

    bb7: {
        _4 = &_2;
        _6 = const 1_i32;
        _5 = &_6;
        _3 = (move _4, move _5);
        _7 = (_3.0: &i32);
        _8 = (_3.1: &i32);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<i32, i32>(move _13, _7, _8, move _15);
    }

    bb9: {
        return;
    }
}

fn e() -> () {
    let mut _0: ();
    let _1: &[isize];
    let _2: &[isize; 3];
    let _3: [isize; 3];
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: bool;
    let mut _8: (&i32, &i32);
    let mut _9: &i32;
    let mut _10: &i32;
    let _11: i32;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: i32;
    let mut _17: i32;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _22: usize;
    let mut _23: usize;
    let mut _24: bool;
    let mut _25: usize;
    let mut _26: usize;
    let mut _27: bool;
    let mut _28: usize;
    let mut _29: usize;
    let mut _30: bool;
    let mut _31: (&i32, &i32);
    let mut _32: &i32;
    let mut _33: &i32;
    let _34: i32;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: i32;
    let mut _40: i32;
    let _42: !;
    let mut _43: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _45: usize;
    let mut _46: usize;
    let mut _47: bool;
    let mut _48: usize;
    let mut _49: usize;
    let mut _50: bool;
    let mut _51: usize;
    let mut _52: usize;
    let mut _53: bool;
    let mut _54: (&i32, &i32);
    let mut _55: &i32;
    let mut _56: &i32;
    let _57: i32;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: i32;
    let mut _63: i32;
    let _65: !;
    let mut _66: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _4: i32;
        scope 2 {
            debug a => _4;
            let _12: &i32;
            let _13: &i32;
            let _21: i32;
            scope 3 {
                debug left_val => _12;
                debug right_val => _13;
                let _18: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _18;
                }
            }
            scope 5 {
                debug b => _21;
                let _35: &i32;
                let _36: &i32;
                let _44: i32;
                scope 6 {
                    debug left_val => _35;
                    debug right_val => _36;
                    let _41: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _41;
                    }
                }
                scope 8 {
                    debug c => _44;
                    let _58: &i32;
                    let _59: &i32;
                    scope 9 {
                        debug left_val => _58;
                        debug right_val => _59;
                        let _64: core::panicking::AssertKind;
                        scope 10 {
                            debug kind => _64;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _3 = [const 1_isize, const 2_isize, const 3_isize];
        _2 = &_3;
        _1 = _2 as &[isize] (Pointer(Unsize));
        _5 = Len((*_1));
        _6 = const 2_usize;
        _7 = Eq(move _5, move _6);
        switchInt(move _7) -> [0: bb3, otherwise: bb1];
    }

    bb1: {
        switchInt((*_1)[0 of 2]) -> [1: bb2, otherwise: bb3];
    }

    bb2: {
        switchInt((*_1)[1 of 2]) -> [2: bb4, otherwise: bb3];
    }

    bb3: {
        _4 = const 1_i32;
        goto -> bb5;
    }

    bb4: {
        _4 = const 0_i32;
        goto -> bb5;
    }

    bb5: {
        _9 = &_4;
        _11 = const 1_i32;
        _10 = &_11;
        _8 = (move _9, move _10);
        _12 = (_8.0: &i32);
        _13 = (_8.1: &i32);
        _16 = (*_12);
        _17 = (*_13);
        _15 = Eq(move _16, move _17);
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<i32, i32>(move _18, _12, _13, move _20);
    }

    bb7: {
        _28 = Len((*_1));
        _29 = const 1_usize;
        _30 = Ge(move _28, move _29);
        switchInt(move _30) -> [0: bb12, otherwise: bb8];
    }

    bb8: {
        switchInt((*_1)[0 of 1]) -> [2: bb14, otherwise: bb9];
    }

    bb9: {
        _25 = Len((*_1));
        _26 = const 2_usize;
        _27 = Ge(move _25, move _26);
        switchInt(move _27) -> [0: bb13, otherwise: bb10];
    }

    bb10: {
        switchInt((*_1)[0 of 2]) -> [1: bb11, otherwise: bb12];
    }

    bb11: {
        switchInt((*_1)[1 of 2]) -> [2: bb15, otherwise: bb12];
    }

    bb12: {
        _21 = const 3_i32;
        goto -> bb17;
    }

    bb13: {
        _22 = Len((*_1));
        _23 = const 1_usize;
        _24 = Eq(move _22, move _23);
        switchInt(move _24) -> [0: bb12, otherwise: bb16];
    }

    bb14: {
        _21 = const 0_i32;
        goto -> bb17;
    }

    bb15: {
        _21 = const 1_i32;
        goto -> bb17;
    }

    bb16: {
        _21 = const 2_i32;
        goto -> bb17;
    }

    bb17: {
        _32 = &_21;
        _34 = const 1_i32;
        _33 = &_34;
        _31 = (move _32, move _33);
        _35 = (_31.0: &i32);
        _36 = (_31.1: &i32);
        _39 = (*_35);
        _40 = (*_36);
        _38 = Eq(move _39, move _40);
        _37 = Not(move _38);
        switchInt(move _37) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _41 = core::panicking::AssertKind::Eq;
        _43 = Option::<Arguments<'_>>::None;
        _42 = core::panicking::assert_failed::<i32, i32>(move _41, _35, _36, move _43);
    }

    bb19: {
        _51 = Len((*_1));
        _52 = const 4_usize;
        _53 = Ge(move _51, move _52);
        switchInt(move _53) -> [0: bb20, otherwise: bb25];
    }

    bb20: {
        _48 = Len((*_1));
        _49 = const 2_usize;
        _50 = Ge(move _48, move _49);
        switchInt(move _50) -> [0: bb24, otherwise: bb21];
    }

    bb21: {
        switchInt((*_1)[0 of 2]) -> [1: bb22, otherwise: bb23];
    }

    bb22: {
        switchInt((*_1)[1 of 2]) -> [2: bb26, otherwise: bb23];
    }

    bb23: {
        _44 = const 3_i32;
        goto -> bb28;
    }

    bb24: {
        _45 = Len((*_1));
        _46 = const 1_usize;
        _47 = Eq(move _45, move _46);
        switchInt(move _47) -> [0: bb23, otherwise: bb27];
    }

    bb25: {
        _44 = const 0_i32;
        goto -> bb28;
    }

    bb26: {
        _44 = const 1_i32;
        goto -> bb28;
    }

    bb27: {
        _44 = const 2_i32;
        goto -> bb28;
    }

    bb28: {
        _55 = &_44;
        _57 = const 1_i32;
        _56 = &_57;
        _54 = (move _55, move _56);
        _58 = (_54.0: &i32);
        _59 = (_54.1: &i32);
        _62 = (*_58);
        _63 = (*_59);
        _61 = Eq(move _62, move _63);
        _60 = Not(move _61);
        switchInt(move _60) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _64 = core::panicking::AssertKind::Eq;
        _66 = Option::<Arguments<'_>>::None;
        _65 = core::panicking::assert_failed::<i32, i32>(move _64, _58, _59, move _66);
    }

    bb30: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let _3: ();
    let _4: ();
    let _5: ();
    let _6: ();

    bb0: {
        _1 = a() -> bb1;
    }

    bb1: {
        _2 = b() -> bb2;
    }

    bb2: {
        _3 = b_slice() -> bb3;
    }

    bb3: {
        _4 = c() -> bb4;
    }

    bb4: {
        _5 = d() -> bb5;
    }

    bb5: {
        _6 = e() -> bb6;
    }

    bb6: {
        return;
    }
}
