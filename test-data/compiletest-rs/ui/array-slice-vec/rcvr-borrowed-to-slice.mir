// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/array-slice-vec/rcvr-borrowed-to-slice.rs:10:1: 10:29>::sum_(_1: &[isize]) -> isize {
    debug self => _1;
    let mut _0: isize;
    let mut _2: std::slice::Iter<'_, isize>;

    bb0: {
        _2 = core::slice::<impl [isize]>::iter(_1) -> bb1;
    }

    bb1: {
        _0 = <std::slice::Iter<'_, isize> as Iterator>::fold::<isize, [closure@ui/array-slice-vec/rcvr-borrowed-to-slice.rs:12:29: 12:36]>(move _2, const 0_isize, const ZeroSized: [closure@ui/array-slice-vec/rcvr-borrowed-to-slice.rs:12:29: 12:36]) -> bb2;
    }

    bb2: {
        return;
    }
}

fn <impl at ui/array-slice-vec/rcvr-borrowed-to-slice.rs:10:1: 10:29>::sum_::{closure#0}(_1: &mut [closure@ui/array-slice-vec/rcvr-borrowed-to-slice.rs:12:29: 12:36], _2: isize, _3: &isize) -> isize {
    debug a => _2;
    let mut _0: isize;
    let _4: isize;
    scope 1 {
        debug b => _4;
    }

    bb0: {
        _4 = (*_3);
        _0 = Add(_2, _4);
        return;
    }
}

fn call_sum(_1: &[isize]) -> isize {
    debug x => _1;
    let mut _0: isize;

    bb0: {
        _0 = <&[isize] as sum>::sum_(_1) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<isize>;
    let mut _2: std::boxed::Box<[isize]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[isize; 3]>;
    let mut _8: &[isize];
    let _9: &[isize];
    let _10: &std::vec::Vec<isize>;
    let _11: ();
    let mut _12: std::fmt::Arguments<'_>;
    let mut _13: &[&str];
    let _14: &[&str; 2];
    let _15: [&str; 2];
    let mut _16: &[core::fmt::rt::Argument<'_>];
    let _17: &[core::fmt::rt::Argument<'_>; 1];
    let _18: [core::fmt::rt::Argument<'_>; 1];
    let mut _19: core::fmt::rt::Argument<'_>;
    let _20: &isize;
    let mut _21: (&isize, &isize);
    let mut _22: &isize;
    let mut _23: &isize;
    let _24: isize;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: isize;
    let mut _30: isize;
    let _32: !;
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _35: std::boxed::Box<[isize]>;
    let mut _36: usize;
    let mut _37: usize;
    let mut _38: *mut u8;
    let mut _39: std::boxed::Box<[isize; 3]>;
    let mut _41: &[isize];
    let _42: &[isize];
    let mut _43: &std::vec::Vec<isize>;
    let _44: ();
    let mut _45: std::fmt::Arguments<'_>;
    let mut _46: &[&str];
    let _47: &[&str; 2];
    let _48: [&str; 2];
    let mut _49: &[core::fmt::rt::Argument<'_>];
    let _50: &[core::fmt::rt::Argument<'_>; 1];
    let _51: [core::fmt::rt::Argument<'_>; 1];
    let mut _52: core::fmt::rt::Argument<'_>;
    let _53: &isize;
    let mut _54: (&isize, &isize);
    let mut _55: &isize;
    let mut _56: &isize;
    let _57: isize;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: isize;
    let mut _63: isize;
    let _65: !;
    let mut _66: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _68: std::boxed::Box<[isize]>;
    let mut _69: usize;
    let mut _70: usize;
    let mut _71: *mut u8;
    let mut _72: std::boxed::Box<[isize; 3]>;
    let mut _74: &[isize];
    let _75: &[isize];
    let mut _76: &std::vec::Vec<isize>;
    let _77: ();
    let mut _78: std::fmt::Arguments<'_>;
    let mut _79: &[&str];
    let _80: &[&str; 2];
    let _81: [&str; 2];
    let mut _82: &[core::fmt::rt::Argument<'_>];
    let _83: &[core::fmt::rt::Argument<'_>; 1];
    let _84: [core::fmt::rt::Argument<'_>; 1];
    let mut _85: core::fmt::rt::Argument<'_>;
    let _86: &isize;
    let mut _87: (&isize, &isize);
    let mut _88: &isize;
    let mut _89: &isize;
    let _90: isize;
    let mut _93: bool;
    let mut _94: bool;
    let mut _95: isize;
    let mut _96: isize;
    let _98: !;
    let mut _99: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _100: *const [isize; 3];
    let mut _101: *const [isize; 3];
    let mut _102: *const [isize; 3];
    let mut _115: *const ();
    let mut _116: usize;
    let mut _117: usize;
    let mut _118: usize;
    let mut _119: usize;
    let mut _120: bool;
    scope 1 {
        debug x => _1;
        let _7: isize;
        scope 3 {
            debug y => _7;
            let _25: &isize;
            let _26: &isize;
            let _34: std::vec::Vec<isize>;
            let mut _109: *const ();
            let mut _110: usize;
            let mut _111: usize;
            let mut _112: usize;
            let mut _113: usize;
            let mut _114: bool;
            scope 4 {
                debug left_val => _25;
                debug right_val => _26;
                let _31: core::panicking::AssertKind;
                scope 5 {
                    debug kind => _31;
                }
            }
            scope 6 {
                debug x => _34;
                let _40: isize;
                scope 8 {
                    debug y => _40;
                    let _58: &isize;
                    let _59: &isize;
                    let _67: std::vec::Vec<isize>;
                    let mut _103: *const ();
                    let mut _104: usize;
                    let mut _105: usize;
                    let mut _106: usize;
                    let mut _107: usize;
                    let mut _108: bool;
                    scope 9 {
                        debug left_val => _58;
                        debug right_val => _59;
                        let _64: core::panicking::AssertKind;
                        scope 10 {
                            debug kind => _64;
                        }
                    }
                    scope 11 {
                        debug x => _67;
                        let _73: isize;
                        scope 13 {
                            debug y => _73;
                            let _91: &isize;
                            let _92: &isize;
                            scope 14 {
                                debug left_val => _91;
                                debug right_val => _92;
                                let _97: core::panicking::AssertKind;
                                scope 15 {
                                    debug kind => _97;
                                }
                            }
                        }
                    }
                    scope 12 {
                    }
                }
            }
            scope 7 {
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _3 = SizeOf([isize; 3]);
        _4 = AlignOf([isize; 3]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> bb1;
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [isize; 3]);
        _100 = (((_6.0: std::ptr::Unique<[isize; 3]>).0: std::ptr::NonNull<[isize; 3]>).0: *const [isize; 3]);
        _115 = _100 as *const () (PtrToPtr);
        _116 = _115 as usize (Transmute);
        _117 = AlignOf(isize);
        _118 = Sub(_117, const 1_usize);
        _119 = BitAnd(_116, _118);
        _120 = Eq(_119, const 0_usize);
        assert(_120, "misaligned pointer dereference: address must be a multiple of {} but is {}", _117, _116) -> [success: bb37, unwind unreachable];
    }

    bb2: {
        _10 = &_1;
        _9 = <Vec<isize> as Deref>::deref(_10) -> [return: bb3, unwind: bb33];
    }

    bb3: {
        _8 = _9;
        _7 = call_sum(move _8) -> [return: bb4, unwind: bb33];
    }

    bb4: {
        _15 = [const "y==", const "\n"];
        _14 = &_15;
        _13 = _14 as &[&str] (Pointer(Unsize));
        _20 = &_7;
        _19 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_20) -> [return: bb5, unwind: bb33];
    }

    bb5: {
        _18 = [move _19];
        _17 = &_18;
        _16 = _17 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _12 = Arguments::<'_>::new_v1(move _13, move _16) -> [return: bb6, unwind: bb33];
    }

    bb6: {
        _11 = _print(move _12) -> [return: bb7, unwind: bb33];
    }

    bb7: {
        _22 = &_7;
        _24 = const 6_isize;
        _23 = &_24;
        _21 = (move _22, move _23);
        _25 = (_21.0: &isize);
        _26 = (_21.1: &isize);
        _29 = (*_25);
        _30 = (*_26);
        _28 = Eq(move _29, move _30);
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _31 = core::panicking::AssertKind::Eq;
        _33 = Option::<Arguments<'_>>::None;
        _32 = core::panicking::assert_failed::<isize, isize>(move _31, _25, _26, move _33) -> bb33;
    }

    bb9: {
        _36 = SizeOf([isize; 3]);
        _37 = AlignOf([isize; 3]);
        _38 = alloc::alloc::exchange_malloc(move _36, move _37) -> [return: bb10, unwind: bb33];
    }

    bb10: {
        _39 = ShallowInitBox(move _38, [isize; 3]);
        _101 = (((_39.0: std::ptr::Unique<[isize; 3]>).0: std::ptr::NonNull<[isize; 3]>).0: *const [isize; 3]);
        _109 = _101 as *const () (PtrToPtr);
        _110 = _109 as usize (Transmute);
        _111 = AlignOf(isize);
        _112 = Sub(_111, const 1_usize);
        _113 = BitAnd(_110, _112);
        _114 = Eq(_113, const 0_usize);
        assert(_114, "misaligned pointer dereference: address must be a multiple of {} but is {}", _111, _110) -> [success: bb36, unwind unreachable];
    }

    bb11: {
        _43 = &_34;
        _42 = <Vec<isize> as Deref>::deref(move _43) -> [return: bb12, unwind: bb32];
    }

    bb12: {
        _41 = _42;
        _40 = <&[isize] as sum>::sum_(move _41) -> [return: bb13, unwind: bb32];
    }

    bb13: {
        _48 = [const "y==", const "\n"];
        _47 = &_48;
        _46 = _47 as &[&str] (Pointer(Unsize));
        _53 = &_40;
        _52 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_53) -> [return: bb14, unwind: bb32];
    }

    bb14: {
        _51 = [move _52];
        _50 = &_51;
        _49 = _50 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _45 = Arguments::<'_>::new_v1(move _46, move _49) -> [return: bb15, unwind: bb32];
    }

    bb15: {
        _44 = _print(move _45) -> [return: bb16, unwind: bb32];
    }

    bb16: {
        _55 = &_40;
        _57 = const 6_isize;
        _56 = &_57;
        _54 = (move _55, move _56);
        _58 = (_54.0: &isize);
        _59 = (_54.1: &isize);
        _62 = (*_58);
        _63 = (*_59);
        _61 = Eq(move _62, move _63);
        _60 = Not(move _61);
        switchInt(move _60) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _64 = core::panicking::AssertKind::Eq;
        _66 = Option::<Arguments<'_>>::None;
        _65 = core::panicking::assert_failed::<isize, isize>(move _64, _58, _59, move _66) -> bb32;
    }

    bb18: {
        _69 = SizeOf([isize; 3]);
        _70 = AlignOf([isize; 3]);
        _71 = alloc::alloc::exchange_malloc(move _69, move _70) -> [return: bb19, unwind: bb32];
    }

    bb19: {
        _72 = ShallowInitBox(move _71, [isize; 3]);
        _102 = (((_72.0: std::ptr::Unique<[isize; 3]>).0: std::ptr::NonNull<[isize; 3]>).0: *const [isize; 3]);
        _103 = _102 as *const () (PtrToPtr);
        _104 = _103 as usize (Transmute);
        _105 = AlignOf(isize);
        _106 = Sub(_105, const 1_usize);
        _107 = BitAnd(_104, _106);
        _108 = Eq(_107, const 0_usize);
        assert(_108, "misaligned pointer dereference: address must be a multiple of {} but is {}", _105, _104) -> [success: bb35, unwind unreachable];
    }

    bb20: {
        _76 = &_67;
        _75 = <Vec<isize> as Deref>::deref(move _76) -> [return: bb21, unwind: bb31];
    }

    bb21: {
        _74 = _75;
        _73 = <&[isize] as sum>::sum_(move _74) -> [return: bb22, unwind: bb31];
    }

    bb22: {
        _81 = [const "y==", const "\n"];
        _80 = &_81;
        _79 = _80 as &[&str] (Pointer(Unsize));
        _86 = &_73;
        _85 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_86) -> [return: bb23, unwind: bb31];
    }

    bb23: {
        _84 = [move _85];
        _83 = &_84;
        _82 = _83 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _78 = Arguments::<'_>::new_v1(move _79, move _82) -> [return: bb24, unwind: bb31];
    }

    bb24: {
        _77 = _print(move _78) -> [return: bb25, unwind: bb31];
    }

    bb25: {
        _88 = &_73;
        _90 = const 6_isize;
        _89 = &_90;
        _87 = (move _88, move _89);
        _91 = (_87.0: &isize);
        _92 = (_87.1: &isize);
        _95 = (*_91);
        _96 = (*_92);
        _94 = Eq(move _95, move _96);
        _93 = Not(move _94);
        switchInt(move _93) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _97 = core::panicking::AssertKind::Eq;
        _99 = Option::<Arguments<'_>>::None;
        _98 = core::panicking::assert_failed::<isize, isize>(move _97, _91, _92, move _99) -> bb31;
    }

    bb27: {
        drop(_67) -> [return: bb28, unwind: bb32];
    }

    bb28: {
        drop(_34) -> [return: bb29, unwind: bb33];
    }

    bb29: {
        drop(_1) -> bb30;
    }

    bb30: {
        return;
    }

    bb31 (cleanup): {
        drop(_67) -> [return: bb32, unwind terminate];
    }

    bb32 (cleanup): {
        drop(_34) -> [return: bb33, unwind terminate];
    }

    bb33 (cleanup): {
        drop(_1) -> [return: bb34, unwind terminate];
    }

    bb34 (cleanup): {
        resume;
    }

    bb35: {
        (*_102) = [const 1_isize, const 2_isize, const 3_isize];
        _68 = move _72 as std::boxed::Box<[isize]> (Pointer(Unsize));
        _67 = slice::<impl [isize]>::into_vec::<std::alloc::Global>(move _68) -> [return: bb20, unwind: bb32];
    }

    bb36: {
        (*_101) = [const 1_isize, const 2_isize, const 3_isize];
        _35 = move _39 as std::boxed::Box<[isize]> (Pointer(Unsize));
        _34 = slice::<impl [isize]>::into_vec::<std::alloc::Global>(move _35) -> [return: bb11, unwind: bb33];
    }

    bb37: {
        (*_100) = [const 1_isize, const 2_isize, const 3_isize];
        _2 = move _6 as std::boxed::Box<[isize]> (Pointer(Unsize));
        _1 = slice::<impl [isize]>::into_vec::<std::alloc::Global>(move _2) -> bb2;
    }
}
