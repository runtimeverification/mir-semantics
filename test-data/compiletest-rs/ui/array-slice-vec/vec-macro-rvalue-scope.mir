// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn one() -> i32 {
    let mut _0: i32;

    bb0: {
        _0 = const 1_i32;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&std::vec::Vec<&i32>, &std::vec::Vec<&i32>);
    let mut _2: &std::vec::Vec<&i32>;
    let _3: std::vec::Vec<&i32>;
    let mut _4: std::boxed::Box<[&i32]>;
    let mut _5: std::boxed::Box<[&i32; 3]>;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: *mut u8;
    let mut _9: std::boxed::Box<[&i32; 3]>;
    let mut _10: &i32;
    let _11: i32;
    let _12: &i32;
    let _13: i32;
    let _14: &i32;
    let _15: i32;
    let mut _16: &std::vec::Vec<&i32>;
    let _17: std::vec::Vec<&i32>;
    let mut _18: std::boxed::Box<[&i32]>;
    let mut _19: std::boxed::Box<[&i32; 3]>;
    let mut _20: usize;
    let mut _21: usize;
    let mut _22: *mut u8;
    let mut _23: std::boxed::Box<[&i32; 3]>;
    let mut _24: &i32;
    let _25: i32;
    let _26: &i32;
    let _27: i32;
    let _28: &i32;
    let _29: i32;
    let mut _30: i32;
    let mut _31: i32;
    let _32: &std::vec::Vec<&i32>;
    let _33: &std::vec::Vec<&i32>;
    let mut _34: bool;
    let mut _35: bool;
    let _37: !;
    let mut _38: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _39: (&std::vec::Vec<&i32>, &std::vec::Vec<&i32>);
    let mut _40: &std::vec::Vec<&i32>;
    let _41: std::vec::Vec<&i32>;
    let mut _42: &i32;
    let _43: i32;
    let mut _44: &std::vec::Vec<&i32>;
    let _45: std::vec::Vec<&i32>;
    let mut _46: std::boxed::Box<[&i32]>;
    let mut _47: std::boxed::Box<[&i32; 2]>;
    let mut _48: usize;
    let mut _49: usize;
    let mut _50: *mut u8;
    let mut _51: std::boxed::Box<[&i32; 2]>;
    let mut _52: &i32;
    let _53: i32;
    let _54: &i32;
    let _55: i32;
    let _56: &std::vec::Vec<&i32>;
    let _57: &std::vec::Vec<&i32>;
    let mut _58: bool;
    let mut _59: bool;
    let _61: !;
    let mut _62: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _63: &mut std::boxed::Box<[&i32; 2]>;
    let mut _64: ();
    let mut _65: &mut std::boxed::Box<[&i32; 3]>;
    let mut _66: ();
    let mut _67: &mut std::boxed::Box<[&i32; 3]>;
    let mut _68: ();
    let mut _69: *const [&i32; 3];
    let mut _70: *const [&i32; 3];
    let mut _71: *const [&i32; 2];
    let mut _72: *const ();
    let mut _73: usize;
    let mut _74: usize;
    let mut _75: usize;
    let mut _76: usize;
    let mut _77: bool;
    let mut _78: *const ();
    let mut _79: usize;
    let mut _80: usize;
    let mut _81: usize;
    let mut _82: usize;
    let mut _83: bool;
    let mut _84: *const ();
    let mut _85: usize;
    let mut _86: usize;
    let mut _87: usize;
    let mut _88: usize;
    let mut _89: bool;
    scope 1 {
    }
    scope 2 {
    }
    scope 3 {
        debug left_val => _32;
        debug right_val => _33;
        let _36: core::panicking::AssertKind;
        scope 4 {
            debug kind => _36;
        }
    }
    scope 5 {
    }
    scope 6 {
        debug left_val => _56;
        debug right_val => _57;
        let _60: core::panicking::AssertKind;
        scope 7 {
            debug kind => _60;
        }
    }

    bb0: {
        _6 = SizeOf([&i32; 3]);
        _7 = AlignOf([&i32; 3]);
        _8 = alloc::alloc::exchange_malloc(move _6, move _7) -> bb1;
    }

    bb1: {
        _9 = ShallowInitBox(move _8, [&i32; 3]);
        _11 = one() -> [return: bb2, unwind: bb31];
    }

    bb2: {
        _10 = &_11;
        _13 = one() -> [return: bb3, unwind: bb31];
    }

    bb3: {
        _12 = &_13;
        _15 = const 2_i32;
        _14 = &_15;
        _69 = (((_9.0: std::ptr::Unique<[&i32; 3]>).0: std::ptr::NonNull<[&i32; 3]>).0: *const [&i32; 3]);
        _84 = _69 as *const () (PtrToPtr);
        _85 = _84 as usize (Transmute);
        _86 = AlignOf(&i32);
        _87 = Sub(_86, const 1_usize);
        _88 = BitAnd(_85, _87);
        _89 = Eq(_88, const 0_usize);
        assert(_89, "misaligned pointer dereference: address must be a multiple of {} but is {}", _86, _85) -> [success: bb34, unwind unreachable];
    }

    bb4: {
        _2 = &_3;
        _20 = SizeOf([&i32; 3]);
        _21 = AlignOf([&i32; 3]);
        _22 = alloc::alloc::exchange_malloc(move _20, move _21) -> [return: bb5, unwind: bb27];
    }

    bb5: {
        _23 = ShallowInitBox(move _22, [&i32; 3]);
        _25 = const 1_i32;
        _24 = &_25;
        _27 = const 1_i32;
        _26 = &_27;
        _30 = one() -> [return: bb6, unwind: bb30];
    }

    bb6: {
        _31 = one() -> [return: bb7, unwind: bb30];
    }

    bb7: {
        _29 = Add(move _30, move _31);
        _28 = &_29;
        _70 = (((_23.0: std::ptr::Unique<[&i32; 3]>).0: std::ptr::NonNull<[&i32; 3]>).0: *const [&i32; 3]);
        _78 = _70 as *const () (PtrToPtr);
        _79 = _78 as usize (Transmute);
        _80 = AlignOf(&i32);
        _81 = Sub(_80, const 1_usize);
        _82 = BitAnd(_79, _81);
        _83 = Eq(_82, const 0_usize);
        assert(_83, "misaligned pointer dereference: address must be a multiple of {} but is {}", _80, _79) -> [success: bb33, unwind unreachable];
    }

    bb8: {
        _16 = &_17;
        _1 = (move _2, move _16);
        _32 = (_1.0: &std::vec::Vec<&i32>);
        _33 = (_1.1: &std::vec::Vec<&i32>);
        _35 = <Vec<&i32> as PartialEq>::eq(_32, _33) -> [return: bb9, unwind: bb26];
    }

    bb9: {
        _34 = Not(move _35);
        switchInt(move _34) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _36 = core::panicking::AssertKind::Eq;
        _38 = Option::<Arguments<'_>>::None;
        _37 = core::panicking::assert_failed::<Vec<&i32>, Vec<&i32>>(move _36, _32, _33, move _38) -> bb26;
    }

    bb11: {
        drop(_17) -> [return: bb12, unwind: bb27];
    }

    bb12: {
        drop(_3) -> bb13;
    }

    bb13: {
        _43 = one() -> bb14;
    }

    bb14: {
        _42 = &_43;
        _41 = from_elem::<&i32>(move _42, const 2_usize) -> bb15;
    }

    bb15: {
        _40 = &_41;
        _48 = SizeOf([&i32; 2]);
        _49 = AlignOf([&i32; 2]);
        _50 = alloc::alloc::exchange_malloc(move _48, move _49) -> [return: bb16, unwind: bb25];
    }

    bb16: {
        _51 = ShallowInitBox(move _50, [&i32; 2]);
        _53 = const 1_i32;
        _52 = &_53;
        _55 = one() -> [return: bb17, unwind: bb29];
    }

    bb17: {
        _54 = &_55;
        _71 = (((_51.0: std::ptr::Unique<[&i32; 2]>).0: std::ptr::NonNull<[&i32; 2]>).0: *const [&i32; 2]);
        _72 = _71 as *const () (PtrToPtr);
        _73 = _72 as usize (Transmute);
        _74 = AlignOf(&i32);
        _75 = Sub(_74, const 1_usize);
        _76 = BitAnd(_73, _75);
        _77 = Eq(_76, const 0_usize);
        assert(_77, "misaligned pointer dereference: address must be a multiple of {} but is {}", _74, _73) -> [success: bb32, unwind unreachable];
    }

    bb18: {
        _44 = &_45;
        _39 = (move _40, move _44);
        _56 = (_39.0: &std::vec::Vec<&i32>);
        _57 = (_39.1: &std::vec::Vec<&i32>);
        _59 = <Vec<&i32> as PartialEq>::eq(_56, _57) -> [return: bb19, unwind: bb24];
    }

    bb19: {
        _58 = Not(move _59);
        switchInt(move _58) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _60 = core::panicking::AssertKind::Eq;
        _62 = Option::<Arguments<'_>>::None;
        _61 = core::panicking::assert_failed::<Vec<&i32>, Vec<&i32>>(move _60, _56, _57, move _62) -> bb24;
    }

    bb21: {
        drop(_45) -> [return: bb22, unwind: bb25];
    }

    bb22: {
        drop(_41) -> bb23;
    }

    bb23: {
        return;
    }

    bb24 (cleanup): {
        drop(_45) -> [return: bb25, unwind terminate];
    }

    bb25 (cleanup): {
        drop(_41) -> [return: bb28, unwind terminate];
    }

    bb26 (cleanup): {
        drop(_17) -> [return: bb27, unwind terminate];
    }

    bb27 (cleanup): {
        drop(_3) -> [return: bb28, unwind terminate];
    }

    bb28 (cleanup): {
        resume;
    }

    bb29 (cleanup): {
        _63 = &mut _51;
        _64 = <Box<[&i32; 2]> as Drop>::drop(move _63) -> [return: bb35, unwind terminate];
    }

    bb30 (cleanup): {
        _65 = &mut _23;
        _66 = <Box<[&i32; 3]> as Drop>::drop(move _65) -> [return: bb36, unwind terminate];
    }

    bb31 (cleanup): {
        _67 = &mut _9;
        _68 = <Box<[&i32; 3]> as Drop>::drop(move _67) -> [return: bb37, unwind terminate];
    }

    bb32: {
        (*_71) = [move _52, _54];
        _47 = move _51;
        _46 = move _47 as std::boxed::Box<[&i32]> (Pointer(Unsize));
        _45 = slice::<impl [&i32]>::into_vec::<std::alloc::Global>(move _46) -> [return: bb18, unwind: bb25];
    }

    bb33: {
        (*_70) = [move _24, _26, _28];
        _19 = move _23;
        _18 = move _19 as std::boxed::Box<[&i32]> (Pointer(Unsize));
        _17 = slice::<impl [&i32]>::into_vec::<std::alloc::Global>(move _18) -> [return: bb8, unwind: bb27];
    }

    bb34: {
        (*_69) = [move _10, _12, _14];
        _5 = move _9;
        _4 = move _5 as std::boxed::Box<[&i32]> (Pointer(Unsize));
        _3 = slice::<impl [&i32]>::into_vec::<std::alloc::Global>(move _4) -> bb4;
    }

    bb35 (cleanup): {
        goto -> bb25;
    }

    bb36 (cleanup): {
        goto -> bb27;
    }

    bb37 (cleanup): {
        goto -> bb28;
    }
}
