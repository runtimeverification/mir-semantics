// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/array-slice-vec/nested-vec-2.rs:8:1: 8:16>::drop(_1: &mut D) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 2];
    let _6: [&str; 2];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &u32;

    bb0: {
        _6 = [const "Dropping ", const "\n"];
        _5 = &_6;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _11 = &((*_1).0: u32);
        _10 = core::fmt::rt::Argument::<'_>::new_display::<u32>(_11) -> bb1;
    }

    bb1: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb2;
    }

    bb2: {
        _2 = _print(move _3) -> bb3;
    }

    bb3: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<std::vec::Vec<D>>;
    let mut _2: std::boxed::Box<[std::vec::Vec<D>]>;
    let mut _3: std::boxed::Box<[std::vec::Vec<D>; 1]>;
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: *mut u8;
    let mut _7: std::boxed::Box<[std::vec::Vec<D>; 1]>;
    let mut _8: std::vec::Vec<D>;
    let mut _9: std::boxed::Box<[D]>;
    let mut _10: usize;
    let mut _11: usize;
    let mut _12: *mut u8;
    let mut _13: std::boxed::Box<[D; 3]>;
    let mut _14: D;
    let mut _15: D;
    let mut _16: D;
    let mut _17: (&u32, &u32);
    let mut _18: &u32;
    let _19: &D;
    let mut _20: &std::vec::Vec<D>;
    let _21: &std::vec::Vec<D>;
    let mut _22: &std::vec::Vec<std::vec::Vec<D>>;
    let mut _23: &u32;
    let _24: u32;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: u32;
    let mut _30: u32;
    let _32: !;
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _34: &mut std::boxed::Box<[std::vec::Vec<D>; 1]>;
    let mut _35: ();
    let mut _36: *const [D; 3];
    let mut _37: *const [std::vec::Vec<D>; 1];
    let mut _38: *const ();
    let mut _39: usize;
    let mut _40: usize;
    let mut _41: usize;
    let mut _42: usize;
    let mut _43: bool;
    let mut _44: *const ();
    let mut _45: usize;
    let mut _46: usize;
    let mut _47: usize;
    let mut _48: usize;
    let mut _49: bool;
    scope 1 {
        debug nested => _1;
        let _25: &u32;
        let _26: &u32;
        scope 4 {
            debug left_val => _25;
            debug right_val => _26;
            let _31: core::panicking::AssertKind;
            scope 5 {
                debug kind => _31;
            }
        }
    }
    scope 2 {
    }
    scope 3 {
    }

    bb0: {
        _4 = SizeOf([std::vec::Vec<D>; 1]);
        _5 = AlignOf([std::vec::Vec<D>; 1]);
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> bb1;
    }

    bb1: {
        _7 = ShallowInitBox(move _6, [std::vec::Vec<D>; 1]);
        _10 = SizeOf([D; 3]);
        _11 = AlignOf([D; 3]);
        _12 = alloc::alloc::exchange_malloc(move _10, move _11) -> [return: bb2, unwind: bb12];
    }

    bb2: {
        _13 = ShallowInitBox(move _12, [D; 3]);
        _14 = D(const 1_u32);
        _15 = D(const 2_u32);
        _16 = D(const 3_u32);
        _36 = (((_13.0: std::ptr::Unique<[D; 3]>).0: std::ptr::NonNull<[D; 3]>).0: *const [D; 3]);
        _44 = _36 as *const () (PtrToPtr);
        _45 = _44 as usize (Transmute);
        _46 = AlignOf(D);
        _47 = Sub(_46, const 1_usize);
        _48 = BitAnd(_45, _47);
        _49 = Eq(_48, const 0_usize);
        assert(_49, "misaligned pointer dereference: address must be a multiple of {} but is {}", _46, _45) -> [success: bb14, unwind unreachable];
    }

    bb3: {
        _37 = (((_7.0: std::ptr::Unique<[std::vec::Vec<D>; 1]>).0: std::ptr::NonNull<[std::vec::Vec<D>; 1]>).0: *const [std::vec::Vec<D>; 1]);
        _38 = _37 as *const () (PtrToPtr);
        _39 = _38 as usize (Transmute);
        _40 = AlignOf(std::vec::Vec<D>);
        _41 = Sub(_40, const 1_usize);
        _42 = BitAnd(_39, _41);
        _43 = Eq(_42, const 0_usize);
        assert(_43, "misaligned pointer dereference: address must be a multiple of {} but is {}", _40, _39) -> [success: bb13, unwind unreachable];
    }

    bb4: {
        _22 = &_1;
        _21 = <Vec<Vec<D>> as Index<usize>>::index(move _22, const 0_usize) -> [return: bb5, unwind: bb10];
    }

    bb5: {
        _20 = _21;
        _19 = <Vec<D> as Index<usize>>::index(move _20, const 1_usize) -> [return: bb6, unwind: bb10];
    }

    bb6: {
        _18 = &((*_19).0: u32);
        _24 = const 2_u32;
        _23 = &_24;
        _17 = (move _18, move _23);
        _25 = (_17.0: &u32);
        _26 = (_17.1: &u32);
        _29 = (*_25);
        _30 = (*_26);
        _28 = Eq(move _29, move _30);
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _31 = core::panicking::AssertKind::Eq;
        _33 = Option::<Arguments<'_>>::None;
        _32 = core::panicking::assert_failed::<u32, u32>(move _31, _25, _26, move _33) -> bb10;
    }

    bb8: {
        drop(_1) -> bb9;
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_1) -> [return: bb11, unwind terminate];
    }

    bb11 (cleanup): {
        resume;
    }

    bb12 (cleanup): {
        _34 = &mut _7;
        _35 = <Box<[Vec<D>; 1]> as Drop>::drop(move _34) -> [return: bb15, unwind terminate];
    }

    bb13: {
        (*_37) = [move _8];
        _3 = move _7;
        _2 = move _3 as std::boxed::Box<[std::vec::Vec<D>]> (Pointer(Unsize));
        _1 = slice::<impl [Vec<D>]>::into_vec::<std::alloc::Global>(move _2) -> bb4;
    }

    bb14: {
        (*_36) = [move _14, move _15, move _16];
        _9 = move _13 as std::boxed::Box<[D]> (Pointer(Unsize));
        _8 = slice::<impl [D]>::into_vec::<std::alloc::Global>(move _9) -> [return: bb3, unwind: bb12];
    }

    bb15 (cleanup): {
        goto -> bb11;
    }
}

fn D(_1: u32) -> D {
    let mut _0: D;

    bb0: {
        _0 = D(move _1);
        return;
    }
}

// MIR FOR CTFE
fn D(_1: u32) -> D {
    let mut _0: D;

    bb0: {
        _0 = D(move _1);
        return;
    }
}
