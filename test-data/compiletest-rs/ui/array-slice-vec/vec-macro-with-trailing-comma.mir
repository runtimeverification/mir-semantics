// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (&std::vec::Vec<i32>, &std::vec::Vec<i32>);
    let mut _2: &std::vec::Vec<i32>;
    let _3: std::vec::Vec<i32>;
    let mut _4: std::boxed::Box<[i32]>;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: *mut u8;
    let mut _8: std::boxed::Box<[i32; 1]>;
    let mut _9: &std::vec::Vec<i32>;
    let _10: std::vec::Vec<i32>;
    let mut _11: std::boxed::Box<[i32]>;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: *mut u8;
    let mut _15: std::boxed::Box<[i32; 1]>;
    let _16: &std::vec::Vec<i32>;
    let _17: &std::vec::Vec<i32>;
    let mut _18: bool;
    let mut _19: bool;
    let _21: !;
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _23: (&std::vec::Vec<i32>, &std::vec::Vec<i32>);
    let mut _24: &std::vec::Vec<i32>;
    let _25: std::vec::Vec<i32>;
    let mut _26: std::boxed::Box<[i32]>;
    let mut _27: usize;
    let mut _28: usize;
    let mut _29: *mut u8;
    let mut _30: std::boxed::Box<[i32; 3]>;
    let mut _31: &std::vec::Vec<i32>;
    let _32: std::vec::Vec<i32>;
    let mut _33: std::boxed::Box<[i32]>;
    let mut _34: usize;
    let mut _35: usize;
    let mut _36: *mut u8;
    let mut _37: std::boxed::Box<[i32; 3]>;
    let _38: &std::vec::Vec<i32>;
    let _39: &std::vec::Vec<i32>;
    let mut _40: bool;
    let mut _41: bool;
    let _43: !;
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _45: *const [i32; 1];
    let mut _46: *const [i32; 1];
    let mut _47: *const [i32; 3];
    let mut _48: *const [i32; 3];
    let mut _49: *const ();
    let mut _50: usize;
    let mut _51: usize;
    let mut _52: usize;
    let mut _53: usize;
    let mut _54: bool;
    let mut _55: *const ();
    let mut _56: usize;
    let mut _57: usize;
    let mut _58: usize;
    let mut _59: usize;
    let mut _60: bool;
    let mut _61: *const ();
    let mut _62: usize;
    let mut _63: usize;
    let mut _64: usize;
    let mut _65: usize;
    let mut _66: bool;
    let mut _67: *const ();
    let mut _68: usize;
    let mut _69: usize;
    let mut _70: usize;
    let mut _71: usize;
    let mut _72: bool;
    scope 1 {
    }
    scope 2 {
    }
    scope 3 {
        debug left_val => _16;
        debug right_val => _17;
        let _20: core::panicking::AssertKind;
        scope 4 {
            debug kind => _20;
        }
    }
    scope 5 {
    }
    scope 6 {
    }
    scope 7 {
        debug left_val => _38;
        debug right_val => _39;
        let _42: core::panicking::AssertKind;
        scope 8 {
            debug kind => _42;
        }
    }

    bb0: {
        _5 = SizeOf([i32; 1]);
        _6 = AlignOf([i32; 1]);
        _7 = alloc::alloc::exchange_malloc(move _5, move _6) -> bb1;
    }

    bb1: {
        _8 = ShallowInitBox(move _7, [i32; 1]);
        _45 = (((_8.0: std::ptr::Unique<[i32; 1]>).0: std::ptr::NonNull<[i32; 1]>).0: *const [i32; 1]);
        _67 = _45 as *const () (PtrToPtr);
        _68 = _67 as usize (Transmute);
        _69 = AlignOf(i32);
        _70 = Sub(_69, const 1_usize);
        _71 = BitAnd(_68, _70);
        _72 = Eq(_71, const 0_usize);
        assert(_72, "misaligned pointer dereference: address must be a multiple of {} but is {}", _69, _68) -> [success: bb27, unwind unreachable];
    }

    bb2: {
        _2 = &_3;
        _12 = SizeOf([i32; 1]);
        _13 = AlignOf([i32; 1]);
        _14 = alloc::alloc::exchange_malloc(move _12, move _13) -> [return: bb3, unwind: bb22];
    }

    bb3: {
        _15 = ShallowInitBox(move _14, [i32; 1]);
        _46 = (((_15.0: std::ptr::Unique<[i32; 1]>).0: std::ptr::NonNull<[i32; 1]>).0: *const [i32; 1]);
        _61 = _46 as *const () (PtrToPtr);
        _62 = _61 as usize (Transmute);
        _63 = AlignOf(i32);
        _64 = Sub(_63, const 1_usize);
        _65 = BitAnd(_62, _64);
        _66 = Eq(_65, const 0_usize);
        assert(_66, "misaligned pointer dereference: address must be a multiple of {} but is {}", _63, _62) -> [success: bb26, unwind unreachable];
    }

    bb4: {
        _9 = &_10;
        _1 = (move _2, move _9);
        _16 = (_1.0: &std::vec::Vec<i32>);
        _17 = (_1.1: &std::vec::Vec<i32>);
        _19 = <Vec<i32> as PartialEq>::eq(_16, _17) -> [return: bb5, unwind: bb21];
    }

    bb5: {
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _20 = core::panicking::AssertKind::Eq;
        _22 = Option::<Arguments<'_>>::None;
        _21 = core::panicking::assert_failed::<Vec<i32>, Vec<i32>>(move _20, _16, _17, move _22) -> bb21;
    }

    bb7: {
        drop(_10) -> [return: bb8, unwind: bb22];
    }

    bb8: {
        drop(_3) -> bb9;
    }

    bb9: {
        _27 = SizeOf([i32; 3]);
        _28 = AlignOf([i32; 3]);
        _29 = alloc::alloc::exchange_malloc(move _27, move _28) -> bb10;
    }

    bb10: {
        _30 = ShallowInitBox(move _29, [i32; 3]);
        _47 = (((_30.0: std::ptr::Unique<[i32; 3]>).0: std::ptr::NonNull<[i32; 3]>).0: *const [i32; 3]);
        _55 = _47 as *const () (PtrToPtr);
        _56 = _55 as usize (Transmute);
        _57 = AlignOf(i32);
        _58 = Sub(_57, const 1_usize);
        _59 = BitAnd(_56, _58);
        _60 = Eq(_59, const 0_usize);
        assert(_60, "misaligned pointer dereference: address must be a multiple of {} but is {}", _57, _56) -> [success: bb25, unwind unreachable];
    }

    bb11: {
        _24 = &_25;
        _34 = SizeOf([i32; 3]);
        _35 = AlignOf([i32; 3]);
        _36 = alloc::alloc::exchange_malloc(move _34, move _35) -> [return: bb12, unwind: bb20];
    }

    bb12: {
        _37 = ShallowInitBox(move _36, [i32; 3]);
        _48 = (((_37.0: std::ptr::Unique<[i32; 3]>).0: std::ptr::NonNull<[i32; 3]>).0: *const [i32; 3]);
        _49 = _48 as *const () (PtrToPtr);
        _50 = _49 as usize (Transmute);
        _51 = AlignOf(i32);
        _52 = Sub(_51, const 1_usize);
        _53 = BitAnd(_50, _52);
        _54 = Eq(_53, const 0_usize);
        assert(_54, "misaligned pointer dereference: address must be a multiple of {} but is {}", _51, _50) -> [success: bb24, unwind unreachable];
    }

    bb13: {
        _31 = &_32;
        _23 = (move _24, move _31);
        _38 = (_23.0: &std::vec::Vec<i32>);
        _39 = (_23.1: &std::vec::Vec<i32>);
        _41 = <Vec<i32> as PartialEq>::eq(_38, _39) -> [return: bb14, unwind: bb19];
    }

    bb14: {
        _40 = Not(move _41);
        switchInt(move _40) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _42 = core::panicking::AssertKind::Eq;
        _44 = Option::<Arguments<'_>>::None;
        _43 = core::panicking::assert_failed::<Vec<i32>, Vec<i32>>(move _42, _38, _39, move _44) -> bb19;
    }

    bb16: {
        drop(_32) -> [return: bb17, unwind: bb20];
    }

    bb17: {
        drop(_25) -> bb18;
    }

    bb18: {
        return;
    }

    bb19 (cleanup): {
        drop(_32) -> [return: bb20, unwind terminate];
    }

    bb20 (cleanup): {
        drop(_25) -> [return: bb23, unwind terminate];
    }

    bb21 (cleanup): {
        drop(_10) -> [return: bb22, unwind terminate];
    }

    bb22 (cleanup): {
        drop(_3) -> [return: bb23, unwind terminate];
    }

    bb23 (cleanup): {
        resume;
    }

    bb24: {
        (*_48) = [const 1_i32, const 2_i32, const 3_i32];
        _33 = move _37 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _32 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _33) -> [return: bb13, unwind: bb20];
    }

    bb25: {
        (*_47) = [const 1_i32, const 2_i32, const 3_i32];
        _26 = move _30 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _25 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _26) -> bb11;
    }

    bb26: {
        (*_46) = [const 1_i32];
        _11 = move _15 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _10 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _11) -> [return: bb4, unwind: bb22];
    }

    bb27: {
        (*_45) = [const 1_i32];
        _4 = move _8 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _3 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _4) -> bb2;
    }
}
