// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: Vec<&i32>, _2: Vec<&i32>) -> i32 {
    debug v1 => _1;
    debug v2 => _2;
    let mut _0: i32;
    let mut _3: std::option::Option<i32>;
    let mut _4: std::option::Option<&i32>;

    bb0: {
        _4 = bar(move _1, move _2) -> bb1;
    }

    bb1: {
        _3 = Option::<&i32>::cloned(move _4) -> bb2;
    }

    bb2: {
        _0 = Option::<i32>::unwrap_or(move _3, const 0_i32) -> bb3;
    }

    bb3: {
        return;
    }
}

fn bar(_1: Vec<&i32>, _2: Vec<&i32>) -> Option<&i32> {
    debug v1 => _1;
    debug v2 => _2;
    let mut _0: std::option::Option<&i32>;
    let mut _3: std::option::Option<&i32>;
    let mut _4: std::option::Option<&&i32>;
    let mut _5: &[&i32];
    let _6: &[&i32];
    let mut _7: &std::vec::Vec<&i32>;
    let mut _8: [closure@ui/array-slice-vec/variance-vec-covariant.rs:12:32: 12:34];
    let mut _9: &std::vec::Vec<&i32>;

    bb0: {
        _7 = &_1;
        _6 = <Vec<&i32> as Deref>::deref(move _7) -> [return: bb1, unwind: bb7];
    }

    bb1: {
        _5 = _6;
        _4 = core::slice::<impl [&i32]>::get::<usize>(move _5, const 0_usize) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _3 = Option::<&&i32>::cloned(move _4) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _9 = &_2;
        _8 = [closure@ui/array-slice-vec/variance-vec-covariant.rs:12:32: 12:34] { v2: move _9 };
        _0 = Option::<&i32>::or_else::<[closure@ui/array-slice-vec/variance-vec-covariant.rs:12:32: 12:34]>(move _3, move _8) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        drop(_2) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        drop(_1) -> bb6;
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_2) -> [return: bb8, unwind terminate];
    }

    bb8 (cleanup): {
        drop(_1) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        resume;
    }
}

fn bar::{closure#0}(_1: [closure@ui/array-slice-vec/variance-vec-covariant.rs:12:32: 12:34]) -> Option<&i32> {
    debug v2 => (*(_1.0: &std::vec::Vec<&i32>));
    let mut _0: std::option::Option<&i32>;
    let mut _2: std::option::Option<&&i32>;
    let mut _3: &[&i32];
    let _4: &[&i32];
    let mut _5: &std::vec::Vec<&i32>;

    bb0: {
        _5 = deref_copy (_1.0: &std::vec::Vec<&i32>);
        _4 = <Vec<&i32> as Deref>::deref(_5) -> bb1;
    }

    bb1: {
        _3 = _4;
        _2 = core::slice::<impl [&i32]>::get::<usize>(move _3, const 0_usize) -> bb2;
    }

    bb2: {
        _0 = Option::<&&i32>::cloned(move _2) -> bb3;
    }

    bb3: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _3: (&i32, &i32);
    let mut _4: &i32;
    let _5: i32;
    let mut _6: std::vec::Vec<&i32>;
    let mut _7: std::boxed::Box<[&i32]>;
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: *mut u8;
    let mut _11: std::boxed::Box<[&i32; 1]>;
    let _12: &i32;
    let mut _13: std::vec::Vec<&i32>;
    let mut _14: std::boxed::Box<[&i32]>;
    let mut _15: usize;
    let mut _16: usize;
    let mut _17: *mut u8;
    let mut _18: std::boxed::Box<[&i32; 1]>;
    let _19: &i32;
    let mut _20: &i32;
    let _21: i32;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: i32;
    let mut _27: i32;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&i32, &i32);
    let mut _32: &i32;
    let _33: i32;
    let mut _34: std::vec::Vec<&i32>;
    let mut _35: std::boxed::Box<[&i32]>;
    let mut _36: usize;
    let mut _37: usize;
    let mut _38: *mut u8;
    let mut _39: std::boxed::Box<[&i32; 1]>;
    let _40: &i32;
    let mut _41: std::vec::Vec<&i32>;
    let mut _42: std::boxed::Box<[&i32]>;
    let mut _43: usize;
    let mut _44: usize;
    let mut _45: *mut u8;
    let mut _46: std::boxed::Box<[&i32; 1]>;
    let _47: &i32;
    let mut _48: &i32;
    let _49: i32;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: i32;
    let mut _55: i32;
    let _57: !;
    let mut _58: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: *const [&i32; 1];
    let mut _62: *const [&i32; 1];
    let mut _63: *const [&i32; 1];
    let mut _64: *const [&i32; 1];
    scope 1 {
        debug x => _1;
        let _2: i32;
        scope 2 {
            debug y => _2;
            let _22: &i32;
            let _23: &i32;
            let _50: &i32;
            let _51: &i32;
            let mut _65: *const ();
            let mut _66: usize;
            let mut _67: usize;
            let mut _68: usize;
            let mut _69: usize;
            let mut _70: bool;
            let mut _71: *const ();
            let mut _72: usize;
            let mut _73: usize;
            let mut _74: usize;
            let mut _75: usize;
            let mut _76: bool;
            let mut _77: *const ();
            let mut _78: usize;
            let mut _79: usize;
            let mut _80: usize;
            let mut _81: usize;
            let mut _82: bool;
            let mut _83: *const ();
            let mut _84: usize;
            let mut _85: usize;
            let mut _86: usize;
            let mut _87: usize;
            let mut _88: bool;
            scope 3 {
            }
            scope 4 {
            }
            scope 5 {
                debug left_val => _22;
                debug right_val => _23;
                let _28: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _28;
                }
            }
            scope 7 {
            }
            scope 8 {
            }
            scope 9 {
                debug left_val => _50;
                debug right_val => _51;
                let _56: core::panicking::AssertKind;
                scope 10 {
                    debug kind => _56;
                }
            }
        }
    }

    bb0: {
        _60 = const false;
        _59 = const false;
        _1 = const 22_i32;
        _2 = const 44_i32;
        _8 = SizeOf([&i32; 1]);
        _9 = AlignOf([&i32; 1]);
        _10 = alloc::alloc::exchange_malloc(move _8, move _9) -> bb1;
    }

    bb1: {
        _11 = ShallowInitBox(move _10, [&i32; 1]);
        _12 = &_1;
        _61 = (((_11.0: std::ptr::Unique<[&i32; 1]>).0: std::ptr::NonNull<[&i32; 1]>).0: *const [&i32; 1]);
        _83 = _61 as *const () (PtrToPtr);
        _84 = _83 as usize (Transmute);
        _85 = AlignOf(&i32);
        _86 = Sub(_85, const 1_usize);
        _87 = BitAnd(_84, _86);
        _88 = Eq(_87, const 0_usize);
        assert(_88, "misaligned pointer dereference: address must be a multiple of {} but is {}", _85, _84) -> [success: bb23, unwind unreachable];
    }

    bb2: {
        _60 = const true;
        _15 = SizeOf([&i32; 1]);
        _16 = AlignOf([&i32; 1]);
        _17 = alloc::alloc::exchange_malloc(move _15, move _16) -> [return: bb3, unwind: bb19];
    }

    bb3: {
        _18 = ShallowInitBox(move _17, [&i32; 1]);
        _19 = &_2;
        _62 = (((_18.0: std::ptr::Unique<[&i32; 1]>).0: std::ptr::NonNull<[&i32; 1]>).0: *const [&i32; 1]);
        _77 = _62 as *const () (PtrToPtr);
        _78 = _77 as usize (Transmute);
        _79 = AlignOf(&i32);
        _80 = Sub(_79, const 1_usize);
        _81 = BitAnd(_78, _80);
        _82 = Eq(_81, const 0_usize);
        assert(_82, "misaligned pointer dereference: address must be a multiple of {} but is {}", _79, _78) -> [success: bb22, unwind unreachable];
    }

    bb4: {
        _60 = const false;
        _5 = foo(move _6, move _13) -> [return: bb5, unwind: bb19];
    }

    bb5: {
        _60 = const false;
        _4 = &_5;
        _21 = const 22_i32;
        _20 = &_21;
        _3 = (move _4, move _20);
        _22 = (_3.0: &i32);
        _23 = (_3.1: &i32);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<i32, i32>(move _28, _22, _23, move _30);
    }

    bb7: {
        _36 = SizeOf([&i32; 1]);
        _37 = AlignOf([&i32; 1]);
        _38 = alloc::alloc::exchange_malloc(move _36, move _37) -> bb8;
    }

    bb8: {
        _39 = ShallowInitBox(move _38, [&i32; 1]);
        _40 = &_2;
        _63 = (((_39.0: std::ptr::Unique<[&i32; 1]>).0: std::ptr::NonNull<[&i32; 1]>).0: *const [&i32; 1]);
        _71 = _63 as *const () (PtrToPtr);
        _72 = _71 as usize (Transmute);
        _73 = AlignOf(&i32);
        _74 = Sub(_73, const 1_usize);
        _75 = BitAnd(_72, _74);
        _76 = Eq(_75, const 0_usize);
        assert(_76, "misaligned pointer dereference: address must be a multiple of {} but is {}", _73, _72) -> [success: bb21, unwind unreachable];
    }

    bb9: {
        _59 = const true;
        _43 = SizeOf([&i32; 1]);
        _44 = AlignOf([&i32; 1]);
        _45 = alloc::alloc::exchange_malloc(move _43, move _44) -> [return: bb10, unwind: bb17];
    }

    bb10: {
        _46 = ShallowInitBox(move _45, [&i32; 1]);
        _47 = &_1;
        _64 = (((_46.0: std::ptr::Unique<[&i32; 1]>).0: std::ptr::NonNull<[&i32; 1]>).0: *const [&i32; 1]);
        _65 = _64 as *const () (PtrToPtr);
        _66 = _65 as usize (Transmute);
        _67 = AlignOf(&i32);
        _68 = Sub(_67, const 1_usize);
        _69 = BitAnd(_66, _68);
        _70 = Eq(_69, const 0_usize);
        assert(_70, "misaligned pointer dereference: address must be a multiple of {} but is {}", _67, _66) -> [success: bb20, unwind unreachable];
    }

    bb11: {
        _59 = const false;
        _33 = foo(move _34, move _41) -> [return: bb12, unwind: bb17];
    }

    bb12: {
        _59 = const false;
        _32 = &_33;
        _49 = const 44_i32;
        _48 = &_49;
        _31 = (move _32, move _48);
        _50 = (_31.0: &i32);
        _51 = (_31.1: &i32);
        _54 = (*_50);
        _55 = (*_51);
        _53 = Eq(move _54, move _55);
        _52 = Not(move _53);
        switchInt(move _52) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _56 = core::panicking::AssertKind::Eq;
        _58 = Option::<Arguments<'_>>::None;
        _57 = core::panicking::assert_failed::<i32, i32>(move _56, _50, _51, move _58);
    }

    bb14: {
        return;
    }

    bb15 (cleanup): {
        resume;
    }

    bb16 (cleanup): {
        drop(_34) -> [return: bb15, unwind terminate];
    }

    bb17 (cleanup): {
        switchInt(_59) -> [0: bb15, otherwise: bb16];
    }

    bb18 (cleanup): {
        drop(_6) -> [return: bb15, unwind terminate];
    }

    bb19 (cleanup): {
        switchInt(_60) -> [0: bb15, otherwise: bb18];
    }

    bb20: {
        (*_64) = [_47];
        _42 = move _46 as std::boxed::Box<[&i32]> (Pointer(Unsize));
        _41 = slice::<impl [&i32]>::into_vec::<std::alloc::Global>(move _42) -> [return: bb11, unwind: bb17];
    }

    bb21: {
        (*_63) = [_40];
        _35 = move _39 as std::boxed::Box<[&i32]> (Pointer(Unsize));
        _34 = slice::<impl [&i32]>::into_vec::<std::alloc::Global>(move _35) -> bb9;
    }

    bb22: {
        (*_62) = [_19];
        _14 = move _18 as std::boxed::Box<[&i32]> (Pointer(Unsize));
        _13 = slice::<impl [&i32]>::into_vec::<std::alloc::Global>(move _14) -> [return: bb4, unwind: bb19];
    }

    bb23: {
        (*_61) = [_12];
        _7 = move _11 as std::boxed::Box<[&i32]> (Pointer(Unsize));
        _6 = slice::<impl [&i32]>::into_vec::<std::alloc::Global>(move _7) -> bb2;
    }
}
