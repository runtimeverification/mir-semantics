// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: *const [i32];
    let mut _2: *const [i32; 3];
    let _3: &[i32; 3];
    let _4: [i32; 3];
    let _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    scope 1 {
        debug a => _1;
        scope 2 {
            let _5: i32;
            let mut _9: *const ();
            let mut _10: usize;
            let mut _11: usize;
            let mut _12: usize;
            let mut _13: usize;
            let mut _14: bool;
            let mut _15: *const ();
            let mut _16: usize;
            let mut _17: usize;
            let mut _18: usize;
            let mut _19: usize;
            let mut _20: bool;
            scope 3 {
                debug _b => _5;
            }
        }
    }

    bb0: {
        _4 = [const 1_i32, const 2_i32, const 3_i32];
        _3 = &_4;
        _2 = &raw const (*_3);
        _1 = move _2 as *const [i32] (Pointer(Unsize));
        _6 = const 3_usize;
        _15 = _1 as *const () (PtrToPtr);
        _16 = _15 as usize (Transmute);
        _17 = AlignOf(i32);
        _18 = Sub(_17, const 1_usize);
        _19 = BitAnd(_16, _18);
        _20 = Eq(_19, const 0_usize);
        assert(_20, "misaligned pointer dereference: address must be a multiple of {} but is {}", _17, _16) -> [success: bb3, unwind unreachable];
    }

    bb1: {
        _9 = _1 as *const () (PtrToPtr);
        _10 = _9 as usize (Transmute);
        _11 = AlignOf(i32);
        _12 = Sub(_11, const 1_usize);
        _13 = BitAnd(_10, _12);
        _14 = Eq(_13, const 0_usize);
        assert(_14, "misaligned pointer dereference: address must be a multiple of {} but is {}", _11, _10) -> [success: bb2, unwind unreachable];
    }

    bb2: {
        _5 = (*_1)[_6];
        return;
    }

    bb3: {
        _7 = Len((*_1));
        _8 = Lt(_6, _7);
        assert(move _8, "index out of bounds: the length is {} but the index is {}", move _7, _6) -> bb1;
    }
}
