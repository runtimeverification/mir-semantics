// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: [i32; 3];
    let mut _3: (&i32, &i32);
    let mut _4: &i32;
    let _5: usize;
    let mut _6: usize;
    let mut _7: bool;
    let mut _8: &i32;
    let _9: i32;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: i32;
    let mut _15: i32;
    let _17: !;
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _19: (&i32, &i32);
    let mut _20: &i32;
    let _21: usize;
    let mut _22: usize;
    let mut _23: bool;
    let mut _24: &i32;
    let _25: i32;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: i32;
    let mut _31: i32;
    let _33: !;
    let mut _34: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug arr => _1;
        let _2: [i32; 3];
        scope 2 {
            debug arr2 => _2;
            let _10: &i32;
            let _11: &i32;
            let _26: &i32;
            let _27: &i32;
            scope 3 {
                debug left_val => _10;
                debug right_val => _11;
                let _16: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _16;
                }
            }
            scope 5 {
                debug left_val => _26;
                debug right_val => _27;
                let _32: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _32;
                }
            }
        }
    }

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32];
        _2 = _1;
        _5 = const 1_usize;
        _6 = const 3_usize;
        _7 = Lt(_5, _6);
        assert(move _7, "index out of bounds: the length is {} but the index is {}", move _6, _5) -> bb1;
    }

    bb1: {
        _4 = &_1[_5];
        _9 = const 2_i32;
        _8 = &_9;
        _3 = (move _4, move _8);
        _10 = (_3.0: &i32);
        _11 = (_3.1: &i32);
        _14 = (*_10);
        _15 = (*_11);
        _13 = Eq(move _14, move _15);
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _16 = core::panicking::AssertKind::Eq;
        _18 = Option::<Arguments<'_>>::None;
        _17 = core::panicking::assert_failed::<i32, i32>(move _16, _10, _11, move _18);
    }

    bb3: {
        _21 = const 2_usize;
        _22 = const 3_usize;
        _23 = Lt(_21, _22);
        assert(move _23, "index out of bounds: the length is {} but the index is {}", move _22, _21) -> bb4;
    }

    bb4: {
        _20 = &_2[_21];
        _25 = const 3_i32;
        _24 = &_25;
        _19 = (move _20, move _24);
        _26 = (_19.0: &i32);
        _27 = (_19.1: &i32);
        _30 = (*_26);
        _31 = (*_27);
        _29 = Eq(move _30, move _31);
        _28 = Not(move _29);
        switchInt(move _28) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _32 = core::panicking::AssertKind::Eq;
        _34 = Option::<Arguments<'_>>::None;
        _33 = core::panicking::assert_failed::<i32, i32>(move _32, _26, _27, move _34);
    }

    bb6: {
        return;
    }
}
