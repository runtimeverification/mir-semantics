// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

const ARR: [i32; 6] = {
    let mut _0: [i32; 6];

    bb0: {
        _0 = [const 42_i32, const 43_i32, const 44_i32, const 45_i32, const 46_i32, const 47_i32];
        return;
    }
}

ARR::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 6_usize;
        return;
    }
}

const IDX: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

const VAL: i32 = {
    let mut _0: i32;
    let mut _1: [i32; 6];
    let _2: usize;
    let mut _3: usize;
    let mut _4: bool;

    bb0: {
        StorageLive(_1);
        _1 = const _;
        StorageLive(_2);
        _2 = const _;
        _3 = Len(_1);
        _4 = Lt(_2, _3);
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> bb1;
    }

    bb1: {
        _0 = _1[_2];
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

const BLUB: [i32; 1] = {
    let mut _0: [i32; 1];

    bb0: {
        _0 = [const 5_i32];
        return;
    }
}

BLUB::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: i32;
    let mut _2: i32;
    let mut _3: [i32; 6];
    let _4: usize;
    let mut _5: usize;
    let mut _6: bool;
    let mut _7: (i32, bool);

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = const _;
        StorageLive(_4);
        _4 = const 0_usize;
        _5 = Len(_3);
        _6 = Lt(_4, _5);
        assert(move _6, "index out of bounds: the length is {} but the index is {}", move _5, _4) -> bb1;
    }

    bb1: {
        _2 = _3[_4];
        _7 = CheckedSub(_2, const 41_i32);
        assert(!move (_7.1: bool), "attempt to compute `{} - {}`, which would overflow", move _2, const 41_i32) -> bb2;
    }

    bb2: {
        _1 = move (_7.0: i32);
        StorageDead(_2);
        _0 = move _1 as usize (IntToInt);
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_1);
        return;
    }
}
