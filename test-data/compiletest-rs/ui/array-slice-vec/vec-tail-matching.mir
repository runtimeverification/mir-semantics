// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: [Foo; 3];
    let mut _2: Foo;
    let mut _3: Foo;
    let mut _4: Foo;
    let mut _7: (&&str, &&str);
    let mut _8: &&str;
    let mut _9: &&str;
    let _10: &str;
    let mut _13: bool;
    let mut _14: bool;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: (&usize, &usize);
    let mut _19: &usize;
    let _20: usize;
    let mut _21: &[Foo];
    let mut _22: &usize;
    let _23: usize;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: usize;
    let mut _29: usize;
    let _31: !;
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _33: (&&str, &&str);
    let mut _34: &&str;
    let _35: usize;
    let mut _36: usize;
    let mut _37: bool;
    let mut _38: &&str;
    let _39: &str;
    let mut _42: bool;
    let mut _43: bool;
    let _45: !;
    let mut _46: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _47: (&&str, &&str);
    let mut _48: &&str;
    let _49: usize;
    let mut _50: usize;
    let mut _51: bool;
    let mut _52: &&str;
    let _53: &str;
    let mut _56: bool;
    let mut _57: bool;
    let _59: !;
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _61: &[Foo];
    let mut _62: usize;
    let mut _63: usize;
    let mut _64: bool;
    let mut _65: usize;
    let mut _66: usize;
    let mut _67: bool;
    let _69: !;
    let mut _72: (&&str, &&str);
    let mut _73: &&str;
    let _74: &str;
    let mut _75: &&str;
    let _76: &str;
    let _77: &str;
    let mut _78: std::ops::Range<usize>;
    let mut _79: usize;
    let mut _82: bool;
    let mut _83: bool;
    let _85: !;
    let mut _86: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _87: (&&str, &&str);
    let mut _88: &&str;
    let _89: &str;
    let mut _90: &&str;
    let _91: &str;
    let _92: &str;
    let mut _93: std::ops::Range<usize>;
    let mut _94: usize;
    let mut _97: bool;
    let mut _98: bool;
    let _100: !;
    let mut _101: std::option::Option<std::fmt::Arguments<'_>>;
    let _102: !;
    let mut _103: &str;
    let mut _104: &str;
    let mut _105: &str;
    let mut _106: &str;
    scope 1 {
        debug x => _1;
        let _5: &Foo;
        let _6: &[Foo; 2];
        scope 2 {
            debug first => _5;
            debug tail => _6;
            let _11: &&str;
            let _12: &&str;
            let _24: &usize;
            let _25: &usize;
            let _40: &&str;
            let _41: &&str;
            let _54: &&str;
            let _55: &&str;
            let _68: &[Foo];
            let _70: &&str;
            let _71: &&str;
            scope 3 {
                debug left_val => _11;
                debug right_val => _12;
                let _15: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _15;
                }
            }
            scope 5 {
                debug left_val => _24;
                debug right_val => _25;
                let _30: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _30;
                }
            }
            scope 7 {
                debug left_val => _40;
                debug right_val => _41;
                let _44: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _44;
                }
            }
            scope 9 {
                debug left_val => _54;
                debug right_val => _55;
                let _58: core::panicking::AssertKind;
                scope 10 {
                    debug kind => _58;
                }
            }
            scope 11 {
                debug _tail => _68;
            }
            scope 12 {
                debug a => _70;
                debug b => _71;
                let _80: &&str;
                let _81: &&str;
                let _95: &&str;
                let _96: &&str;
                scope 13 {
                    debug left_val => _80;
                    debug right_val => _81;
                    let _84: core::panicking::AssertKind;
                    scope 14 {
                        debug kind => _84;
                    }
                }
                scope 15 {
                    debug left_val => _95;
                    debug right_val => _96;
                    let _99: core::panicking::AssertKind;
                    scope 16 {
                        debug kind => _99;
                    }
                }
            }
        }
    }

    bb0: {
        _2 = Foo { string: const "foo" };
        _3 = Foo { string: const "bar" };
        _4 = Foo { string: const "baz" };
        _1 = [move _2, move _3, move _4];
        _5 = &_1[0 of 3];
        _6 = &_1[1..3];
        _8 = &((*_5).0: &str);
        _10 = const "foo";
        _9 = &_10;
        _7 = (move _8, move _9);
        _11 = (_7.0: &&str);
        _12 = (_7.1: &&str);
        _14 = <&str as PartialEq>::eq(_11, _12) -> bb1;
    }

    bb1: {
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<&str, &str>(move _15, _11, _12, move _17);
    }

    bb3: {
        _21 = _6 as &[Foo] (Pointer(Unsize));
        _20 = Len((*_21));
        _19 = &_20;
        _23 = const 2_usize;
        _22 = &_23;
        _18 = (move _19, move _22);
        _24 = (_18.0: &usize);
        _25 = (_18.1: &usize);
        _28 = (*_24);
        _29 = (*_25);
        _27 = Eq(move _28, move _29);
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _30 = core::panicking::AssertKind::Eq;
        _32 = Option::<Arguments<'_>>::None;
        _31 = core::panicking::assert_failed::<usize, usize>(move _30, _24, _25, move _32);
    }

    bb5: {
        _35 = const 0_usize;
        _36 = const 2_usize;
        _37 = Lt(_35, _36);
        assert(move _37, "index out of bounds: the length is {} but the index is {}", move _36, _35) -> bb6;
    }

    bb6: {
        _34 = &((*_6)[_35].0: &str);
        _39 = const "bar";
        _38 = &_39;
        _33 = (move _34, move _38);
        _40 = (_33.0: &&str);
        _41 = (_33.1: &&str);
        _43 = <&str as PartialEq>::eq(_40, _41) -> bb7;
    }

    bb7: {
        _42 = Not(move _43);
        switchInt(move _42) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _44 = core::panicking::AssertKind::Eq;
        _46 = Option::<Arguments<'_>>::None;
        _45 = core::panicking::assert_failed::<&str, &str>(move _44, _40, _41, move _46);
    }

    bb9: {
        _49 = const 1_usize;
        _50 = const 2_usize;
        _51 = Lt(_49, _50);
        assert(move _51, "index out of bounds: the length is {} but the index is {}", move _50, _49) -> bb10;
    }

    bb10: {
        _48 = &((*_6)[_49].0: &str);
        _53 = const "baz";
        _52 = &_53;
        _47 = (move _48, move _52);
        _54 = (_47.0: &&str);
        _55 = (_47.1: &&str);
        _57 = <&str as PartialEq>::eq(_54, _55) -> bb11;
    }

    bb11: {
        _56 = Not(move _57);
        switchInt(move _56) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _58 = core::panicking::AssertKind::Eq;
        _60 = Option::<Arguments<'_>>::None;
        _59 = core::panicking::assert_failed::<&str, &str>(move _58, _54, _55, move _60);
    }

    bb13: {
        _61 = _6 as &[Foo] (Pointer(Unsize));
        _65 = Len((*_61));
        _66 = const 3_usize;
        _67 = Ge(move _65, move _66);
        switchInt(move _67) -> [0: bb14, otherwise: bb16];
    }

    bb14: {
        _62 = Len((*_61));
        _63 = const 2_usize;
        _64 = Eq(move _62, move _63);
        switchInt(move _64) -> [0: bb15, otherwise: bb17];
    }

    bb15: {
        _102 = core::panicking::panic(const "internal error: entered unreachable code");
    }

    bb16: {
        _68 = &(*_61)[3:];
        _69 = core::panicking::panic(const "internal error: entered unreachable code");
    }

    bb17: {
        _70 = &((*_61)[0 of 2].0: &str);
        _71 = &((*_61)[1 of 2].0: &str);
        _74 = const "bar";
        _73 = &_74;
        _103 = deref_copy (*_70);
        _104 = deref_copy (*_70);
        _79 = core::str::<impl str>::len(_104) -> bb18;
    }

    bb18: {
        _78 = std::ops::Range::<usize> { start: const 0_usize, end: move _79 };
        _77 = <str as Index<std::ops::Range<usize>>>::index(_103, move _78) -> bb19;
    }

    bb19: {
        _76 = _77;
        _75 = &_76;
        _72 = (move _73, move _75);
        _80 = (_72.0: &&str);
        _81 = (_72.1: &&str);
        _83 = <&str as PartialEq>::eq(_80, _81) -> bb20;
    }

    bb20: {
        _82 = Not(move _83);
        switchInt(move _82) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _84 = core::panicking::AssertKind::Eq;
        _86 = Option::<Arguments<'_>>::None;
        _85 = core::panicking::assert_failed::<&str, &str>(move _84, _80, _81, move _86);
    }

    bb22: {
        _89 = const "baz";
        _88 = &_89;
        _105 = deref_copy (*_71);
        _106 = deref_copy (*_71);
        _94 = core::str::<impl str>::len(_106) -> bb23;
    }

    bb23: {
        _93 = std::ops::Range::<usize> { start: const 0_usize, end: move _94 };
        _92 = <str as Index<std::ops::Range<usize>>>::index(_105, move _93) -> bb24;
    }

    bb24: {
        _91 = _92;
        _90 = &_91;
        _87 = (move _88, move _90);
        _95 = (_87.0: &&str);
        _96 = (_87.1: &&str);
        _98 = <&str as PartialEq>::eq(_95, _96) -> bb25;
    }

    bb25: {
        _97 = Not(move _98);
        switchInt(move _97) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _99 = core::panicking::AssertKind::Eq;
        _101 = Option::<Arguments<'_>>::None;
        _100 = core::panicking::assert_failed::<&str, &str>(move _99, _95, _96, move _101);
    }

    bb27: {
        return;
    }
}
