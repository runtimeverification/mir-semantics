// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::boxed::Box<i32>;
    let mut _2: (&i32, &i32);
    let mut _3: &i32;
    let _4: i32;
    let mut _5: &i32;
    let _6: i32;
    let mut _7: i32;
    let mut _8: i32;
    let _9: ();
    let mut _10: std::boxed::Box<i32>;
    let mut _11: std::boxed::Box<fn() {main}>;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: i32;
    let mut _17: i32;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: *const i32;
    scope 1 {
        debug x => _1;
        let _12: &i32;
        let _13: &i32;
        let mut _22: *const ();
        let mut _23: usize;
        let mut _24: usize;
        let mut _25: usize;
        let mut _26: usize;
        let mut _27: bool;
        scope 2 {
        }
        scope 3 {
            debug left_val => _12;
            debug right_val => _13;
            let _18: core::panicking::AssertKind;
            scope 4 {
                debug kind => _18;
            }
        }
    }

    bb0: {
        _1 = Box::<i32>::new(const 0_i32) -> bb1;
    }

    bb1: {
        _4 = const 0_i32;
        _3 = &_4;
        _21 = (((_1.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32);
        _22 = _21 as *const () (PtrToPtr);
        _23 = _22 as usize (Transmute);
        _24 = AlignOf(i32);
        _25 = Sub(_24, const 1_usize);
        _26 = BitAnd(_23, _25);
        _27 = Eq(_26, const 0_usize);
        assert(_27, "misaligned pointer dereference: address must be a multiple of {} but is {}", _24, _23) -> [success: bb7, unwind unreachable];
    }

    bb2: {
        _11 = Box::<fn() {main}>::new(main) -> bb3;
    }

    bb3: {
        drop(_11) -> bb4;
    }

    bb4: {
        _8 = const 0_i32;
        _6 = Add(move _7, move _8);
        _5 = &_6;
        _2 = (move _3, move _5);
        _12 = (_2.0: &i32);
        _13 = (_2.1: &i32);
        _16 = (*_12);
        _17 = (*_13);
        _15 = Eq(move _16, move _17);
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<i32, i32>(move _18, _12, _13, move _20);
    }

    bb6: {
        return;
    }

    bb7: {
        _7 = (*_21);
        _10 = move _1;
        _9 = std::mem::drop::<Box<i32>>(move _10) -> bb2;
    }
}
