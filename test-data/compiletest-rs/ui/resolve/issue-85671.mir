// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/resolve/issue-85671.rs:13:1: 13:47>::as_slice(_1: &A<&[Element]>) -> &[Element] {
    debug self => _1;
    let mut _0: &[Element];

    bb0: {
        _0 = deref_copy ((*_1).0: &[Element]);
        return;
    }
}

fn <impl at ui/resolve/issue-85671.rs:20:1: 20:19>::failing(_1: &A<Cont>) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: A<&[Coef]>;
    let mut _3: &A<&[Coef]>;
    let _4: A<&[Coef]>;

    bb0: {
        _4 = A::<Cont>::as_ref_a::<Coef>(_1) -> bb1;
    }

    bb1: {
        _3 = &_4;
        _2 = A::<&[Coef]>::as_ref_a::<Coef>(move _3) -> bb2;
    }

    bb2: {
        return;
    }
}

fn <impl at ui/resolve/issue-85671.rs:20:1: 20:19>::as_ref_a(_1: &A<Cont>) -> A<&[Coef]> {
    debug self => _1;
    let mut _0: A<&[Coef]>;
    let mut _2: &[Coef];
    let _3: &[Coef];

    bb0: {
        _3 = <A<Cont> as AsSlice>::as_slice(_1) -> bb1;
    }

    bb1: {
        _2 = _3;
        _0 = A::<&[Coef]>(move _2);
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn A(_1: Cont) -> A<Cont> {
    let mut _0: A<Cont>;

    bb0: {
        _0 = A::<Cont>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn A(_1: Cont) -> A<Cont> {
    let mut _0: A<Cont>;

    bb0: {
        _0 = A::<Cont>(move _1);
        return;
    }
}
