// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: i32;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: !;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: i32;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: !;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: char;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: !;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: char;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: !;

    bb0: {
        _3 = const 42_i32;
        _4 = Le(const 0_i32, _3);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _5 = Le(_3, const 100_i32);
        _2 = _5;
        goto -> bb3;
    }

    bb2: {
        _2 = const false;
        goto -> bb3;
    }

    bb3: {
        _1 = Not(move _2);
        switchInt(move _1) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _6 = core::panicking::panic(const "assertion failed: match 42 { 0...100 => true, _ => false, }");
    }

    bb5: {
        _9 = const 42_i32;
        _10 = Le(const 0_i32, _9);
        switchInt(move _10) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _11 = Le(_9, const 100_i32);
        _8 = _11;
        goto -> bb8;
    }

    bb7: {
        _8 = const false;
        goto -> bb8;
    }

    bb8: {
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _12 = core::panicking::panic(const "assertion failed: match 42 { 0..=100 => true, _ => false, }");
    }

    bb10: {
        _15 = const 'x';
        _16 = Le(const 'a', _15);
        switchInt(move _16) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _17 = Le(_15, const 'z');
        _14 = _17;
        goto -> bb13;
    }

    bb12: {
        _14 = const false;
        goto -> bb13;
    }

    bb13: {
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _18 = core::panicking::panic(const "assertion failed: match \\'x\\' { \\'a\\'...\\'z\\' => true, _ => false, }");
    }

    bb15: {
        _21 = const 'x';
        _22 = Le(const 'a', _21);
        switchInt(move _22) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _23 = Le(_21, const 'z');
        _20 = _23;
        goto -> bb18;
    }

    bb17: {
        _20 = const false;
        goto -> bb18;
    }

    bb18: {
        _19 = Not(move _20);
        switchInt(move _19) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _24 = core::panicking::panic(const "assertion failed: match \\'x\\' { \\'a\\'..=\\'z\\' => true, _ => false, }");
    }

    bb20: {
        return;
    }
}
