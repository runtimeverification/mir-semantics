// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn to_refs(_1: Box<&mut List<T>>) -> Vec<&mut T> {
    debug list => _1;
    let mut _0: std::vec::Vec<&mut T>;
    let mut _2: std::vec::Vec<&mut T>;
    let _3: ();
    let mut _4: &mut std::vec::Vec<&mut T>;
    let mut _5: &mut T;
    let mut _6: std::option::Option<&mut std::boxed::Box<List<T>>>;
    let mut _7: &mut std::option::Option<std::boxed::Box<List<T>>>;
    let mut _8: isize;
    let mut _10: &mut List<T>;
    let mut _11: &mut List<T>;
    let mut _12: &mut List<T>;
    let mut _13: std::boxed::Box<List<T>>;
    let mut _14: *const &mut List<T>;
    let mut _15: *const &mut List<T>;
    let mut _16: *const List<T>;
    let mut _17: *const &mut List<T>;
    scope 1 {
        debug result => _2;
        let mut _36: *const ();
        let mut _37: usize;
        let mut _38: usize;
        let mut _39: usize;
        let mut _40: usize;
        let mut _41: bool;
        scope 2 {
            debug n => _9;
            let _9: &mut std::boxed::Box<List<T>>;
            let mut _18: *const ();
            let mut _19: usize;
            let mut _20: usize;
            let mut _21: usize;
            let mut _22: usize;
            let mut _23: bool;
            let mut _24: *const ();
            let mut _25: usize;
            let mut _26: usize;
            let mut _27: usize;
            let mut _28: usize;
            let mut _29: bool;
            let mut _30: *const ();
            let mut _31: usize;
            let mut _32: usize;
            let mut _33: usize;
            let mut _34: usize;
            let mut _35: bool;
        }
    }

    bb0: {
        _2 = Vec::<&mut T>::new() -> [return: bb14, unwind: bb8];
    }

    bb1: {
        _4 = &mut _2;
        _14 = (((_1.0: std::ptr::Unique<&mut List<T>>).0: std::ptr::NonNull<&mut List<T>>).0: *const &mut List<T>);
        _36 = _14 as *const () (PtrToPtr);
        _37 = _36 as usize (Transmute);
        _38 = AlignOf(&mut List<T>);
        _39 = Sub(_38, const 1_usize);
        _40 = BitAnd(_37, _39);
        _41 = Eq(_40, const 0_usize);
        assert(_41, "misaligned pointer dereference: address must be a multiple of {} but is {}", _38, _37) -> [success: bb13, unwind unreachable];
    }

    bb2: {
        _15 = (((_1.0: std::ptr::Unique<&mut List<T>>).0: std::ptr::NonNull<&mut List<T>>).0: *const &mut List<T>);
        _30 = _15 as *const () (PtrToPtr);
        _31 = _30 as usize (Transmute);
        _32 = AlignOf(&mut List<T>);
        _33 = Sub(_32, const 1_usize);
        _34 = BitAnd(_31, _33);
        _35 = Eq(_34, const 0_usize);
        assert(_35, "misaligned pointer dereference: address must be a multiple of {} but is {}", _32, _31) -> [success: bb12, unwind unreachable];
    }

    bb3: {
        _8 = discriminant(_6);
        switchInt(move _8) -> [1: bb4, otherwise: bb5];
    }

    bb4: {
        _9 = move ((_6 as Some).0: &mut std::boxed::Box<List<T>>);
        _13 = deref_copy (*_9);
        _16 = (((_13.0: std::ptr::Unique<List<T>>).0: std::ptr::NonNull<List<T>>).0: *const List<T>);
        _24 = _16 as *const () (PtrToPtr);
        _25 = _24 as usize (Transmute);
        _26 = AlignOf(List<T>);
        _27 = Sub(_26, const 1_usize);
        _28 = BitAnd(_25, _27);
        _29 = Eq(_28, const 0_usize);
        assert(_29, "misaligned pointer dereference: address must be a multiple of {} but is {}", _26, _25) -> [success: bb11, unwind unreachable];
    }

    bb5: {
        _0 = move _2;
        drop(_1) -> bb6;
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_2) -> [return: bb8, unwind terminate];
    }

    bb8 (cleanup): {
        drop(_1) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        resume;
    }

    bb10: {
        (*_17) = move _10;
        goto -> bb1;
    }

    bb11: {
        _10 = &mut (*_16);
        _17 = (((_1.0: std::ptr::Unique<&mut List<T>>).0: std::ptr::NonNull<&mut List<T>>).0: *const &mut List<T>);
        _18 = _17 as *const () (PtrToPtr);
        _19 = _18 as usize (Transmute);
        _20 = AlignOf(&mut List<T>);
        _21 = Sub(_20, const 1_usize);
        _22 = BitAnd(_19, _21);
        _23 = Eq(_22, const 0_usize);
        assert(_23, "misaligned pointer dereference: address must be a multiple of {} but is {}", _20, _19) -> [success: bb10, unwind unreachable];
    }

    bb12: {
        _12 = deref_copy (*_15);
        _7 = &mut ((*_12).1: std::option::Option<std::boxed::Box<List<T>>>);
        _6 = Option::<Box<List<T>>>::as_mut(move _7) -> [return: bb3, unwind: bb7];
    }

    bb13: {
        _11 = deref_copy (*_14);
        _5 = &mut ((*_11).0: T);
        _3 = Vec::<&mut T>::push(move _4, move _5) -> [return: bb2, unwind: bb7];
    }

    bb14: {
        goto -> bb1;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
