// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn array() -> [(String, String); 3] {
    let mut _0: [(std::string::String, std::string::String); 3];

    bb0: {
        _0 = <[(String, String); 3] as Default>::default() -> bb1;
    }

    bb1: {
        return;
    }
}

array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

fn move_out_from_begin_and_one_from_end() -> () {
    let mut _0: ();
    let _1: [(std::string::String, std::string::String); 3];
    scope 1 {
        debug a => _1;
        let _2: (std::string::String, std::string::String);
        scope 2 {
            debug _x => _2;
            let _3: (std::string::String, std::string::String);
            scope 3 {
                debug _y => _3;
            }
        }
    }

    bb0: {
        _1 = array() -> bb1;
    }

    bb1: {
        _2 = move _1[2 of 3];
        _3 = move _1[1 of 3];
        drop(_3) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_2) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        drop(_1[0..1]) -> bb6;
    }

    bb4 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate];
    }

    bb5 (cleanup): {
        resume;
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_1[0..1]) -> [return: bb5, unwind terminate];
    }
}

fn move_out_from_begin_field_and_end_field() -> () {
    let mut _0: ();
    let _1: [(std::string::String, std::string::String); 3];
    scope 1 {
        debug a => _1;
        let _2: std::string::String;
        scope 2 {
            debug _x => _2;
            let _3: std::string::String;
            scope 3 {
                debug _y => _3;
            }
        }
    }

    bb0: {
        _1 = array() -> bb1;
    }

    bb1: {
        _2 = move (_1[2 of 3].0: std::string::String);
        _3 = move (_1[2 of 3].1: std::string::String);
        drop(_3) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_2) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        drop(_1[0..2]) -> bb6;
    }

    bb4 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate];
    }

    bb5 (cleanup): {
        resume;
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_1[0..2]) -> [return: bb5, unwind terminate];
    }
}

fn move_out_by_const_index_and_subslice() -> () {
    let mut _0: ();
    let _1: [(std::string::String, std::string::String); 3];
    scope 1 {
        debug a => _1;
        let _2: (std::string::String, std::string::String);
        scope 2 {
            debug _x => _2;
            let _3: [(std::string::String, std::string::String); 2];
            scope 3 {
                debug _y => _3;
            }
        }
    }

    bb0: {
        _1 = array() -> bb1;
    }

    bb1: {
        _2 = move _1[0 of 3];
        _3 = move _1[1..3];
        drop(_3) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_2) -> bb3;
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_2) -> [return: bb5, unwind terminate];
    }

    bb5 (cleanup): {
        resume;
    }
}

fn move_out_by_const_index_end_and_subslice() -> () {
    let mut _0: ();
    let _1: [(std::string::String, std::string::String); 3];
    scope 1 {
        debug a => _1;
        let _2: (std::string::String, std::string::String);
        scope 2 {
            debug _x => _2;
            let _3: [(std::string::String, std::string::String); 2];
            scope 3 {
                debug _y => _3;
            }
        }
    }

    bb0: {
        _1 = array() -> bb1;
    }

    bb1: {
        _2 = move _1[2 of 3];
        _3 = move _1[0..2];
        drop(_3) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_2) -> bb3;
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_2) -> [return: bb5, unwind terminate];
    }

    bb5 (cleanup): {
        resume;
    }
}

fn move_out_by_const_index_field_and_subslice() -> () {
    let mut _0: ();
    let _1: [(std::string::String, std::string::String); 3];
    scope 1 {
        debug a => _1;
        let _2: std::string::String;
        scope 2 {
            debug _x => _2;
            let _3: [(std::string::String, std::string::String); 2];
            scope 3 {
                debug _y => _3;
            }
        }
    }

    bb0: {
        _1 = array() -> bb1;
    }

    bb1: {
        _2 = move (_1[0 of 3].0: std::string::String);
        _3 = move _1[1..3];
        drop(_3) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_2) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        drop((_1[0 of 3].1: std::string::String)) -> bb6;
    }

    bb4 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate];
    }

    bb5 (cleanup): {
        resume;
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop((_1[0 of 3].1: std::string::String)) -> [return: bb5, unwind terminate];
    }
}

fn move_out_by_const_index_end_field_and_subslice() -> () {
    let mut _0: ();
    let _1: [(std::string::String, std::string::String); 3];
    scope 1 {
        debug a => _1;
        let _2: std::string::String;
        scope 2 {
            debug _x => _2;
            let _3: [(std::string::String, std::string::String); 2];
            scope 3 {
                debug _y => _3;
            }
        }
    }

    bb0: {
        _1 = array() -> bb1;
    }

    bb1: {
        _2 = move (_1[2 of 3].0: std::string::String);
        _3 = move _1[0..2];
        drop(_3) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_2) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        drop((_1[2 of 3].1: std::string::String)) -> bb6;
    }

    bb4 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate];
    }

    bb5 (cleanup): {
        resume;
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop((_1[2 of 3].1: std::string::String)) -> [return: bb5, unwind terminate];
    }
}

fn move_out_by_const_subslice_and_index_field() -> () {
    let mut _0: ();
    let _1: [(std::string::String, std::string::String); 3];
    scope 1 {
        debug a => _1;
        let _2: [(std::string::String, std::string::String); 2];
        scope 2 {
            debug _y => _2;
            let _3: std::string::String;
            scope 3 {
                debug _x => _3;
            }
        }
    }

    bb0: {
        _1 = array() -> bb1;
    }

    bb1: {
        _2 = move _1[1..3];
        _3 = move (_1[0 of 3].0: std::string::String);
        drop(_3) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_2) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        drop((_1[0 of 3].1: std::string::String)) -> bb6;
    }

    bb4 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate];
    }

    bb5 (cleanup): {
        resume;
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop((_1[0 of 3].1: std::string::String)) -> [return: bb5, unwind terminate];
    }
}

fn move_out_by_const_subslice_and_end_index_field() -> () {
    let mut _0: ();
    let _1: [(std::string::String, std::string::String); 3];
    scope 1 {
        debug a => _1;
        let _2: [(std::string::String, std::string::String); 2];
        scope 2 {
            debug _y => _2;
            let _3: std::string::String;
            scope 3 {
                debug _x => _3;
            }
        }
    }

    bb0: {
        _1 = array() -> bb1;
    }

    bb1: {
        _2 = move _1[0..2];
        _3 = move (_1[2 of 3].0: std::string::String);
        drop(_3) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_2) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        drop((_1[2 of 3].1: std::string::String)) -> bb6;
    }

    bb4 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate];
    }

    bb5 (cleanup): {
        resume;
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop((_1[2 of 3].1: std::string::String)) -> [return: bb5, unwind terminate];
    }
}

fn move_out_by_subslice_and_subslice() -> () {
    let mut _0: ();
    let _1: [(std::string::String, std::string::String); 3];
    scope 1 {
        debug a => _1;
        let _2: [(std::string::String, std::string::String); 1];
        scope 2 {
            debug x => _2;
            let _3: [(std::string::String, std::string::String); 2];
            scope 3 {
                debug _y => _3;
            }
        }
    }

    bb0: {
        _1 = array() -> bb1;
    }

    bb1: {
        _2 = move _1[0..1];
        _3 = move _1[1..3];
        drop(_3) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_2) -> bb3;
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_2) -> [return: bb5, unwind terminate];
    }

    bb5 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
