// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/borrowck/two-phase-multiple-activations.rs:11:1: 11:22>::read_to_end(_1: &mut Foo, _2: &mut Vec<u8>) -> Result<usize, std::io::Error> {
    debug self => _1;
    debug _buf => _2;
    let mut _0: std::result::Result<usize, std::io::Error>;

    bb0: {
        _0 = Result::<usize, std::io::Error>::Ok(const 4_usize);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: Foo;
    let _3: usize;
    let mut _4: std::result::Result<usize, std::io::Error>;
    let mut _5: &mut Foo;
    let mut _6: &mut std::vec::Vec<u8>;
    scope 1 {
        debug a => const Foo {{  }};
        let mut _2: std::vec::Vec<u8>;
        scope 2 {
            debug v => _2;
        }
    }

    bb0: {
        _2 = Vec::<u8>::new() -> bb1;
    }

    bb1: {
        _5 = &mut _1;
        _6 = &mut _2;
        _4 = <Foo as FakeRead>::read_to_end(move _5, _6) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _3 = Result::<usize, std::io::Error>::unwrap(move _4) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        drop(_2) -> bb4;
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        resume;
    }
}
