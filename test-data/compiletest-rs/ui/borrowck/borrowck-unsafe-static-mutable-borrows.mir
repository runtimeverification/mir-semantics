// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Foo::x::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

static mut SFOO: Foo = {
    let mut _0: Foo;
    let mut _1: [usize; 2];

    bb0: {
        StorageLive(_1);
        _1 = [const 23_usize, const 32_usize];
        _0 = Foo { x: move _1 };
        StorageDead(_1);
        return;
    }
}

fn <impl at ui/borrowck/borrowck-unsafe-static-mutable-borrows.rs:9:1: 9:9>::x(_1: &mut Foo) -> &mut usize {
    debug self => _1;
    let mut _0: &mut usize;
    let _2: usize;
    let mut _3: usize;
    let mut _4: bool;

    bb0: {
        _2 = const 0_usize;
        _3 = const 2_usize;
        _4 = Lt(_2, _3);
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> bb1;
    }

    bb1: {
        _0 = &mut ((*_1).0: [usize; 2])[_2];
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _2: &mut Foo;
    let mut _3: *mut Foo;
    let mut _5: &mut Foo;
    let _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    scope 1 {
        let _1: *mut Foo;
        let mut _33: *const ();
        let mut _34: usize;
        let mut _35: usize;
        let mut _36: usize;
        let mut _37: usize;
        let mut _38: bool;
        scope 2 {
            debug sfoo => _1;
            let _4: &mut usize;
            let mut _27: *const ();
            let mut _28: usize;
            let mut _29: usize;
            let mut _30: usize;
            let mut _31: usize;
            let mut _32: bool;
            scope 3 {
                debug x => _4;
                let mut _9: *const ();
                let mut _10: usize;
                let mut _11: usize;
                let mut _12: usize;
                let mut _13: usize;
                let mut _14: bool;
                let mut _15: *const ();
                let mut _16: usize;
                let mut _17: usize;
                let mut _18: usize;
                let mut _19: usize;
                let mut _20: bool;
                let mut _21: *const ();
                let mut _22: usize;
                let mut _23: usize;
                let mut _24: usize;
                let mut _25: usize;
                let mut _26: bool;
            }
        }
    }

    bb0: {
        _3 = const {alloc1: *mut Foo};
        _33 = _3 as *const () (PtrToPtr);
        _34 = _33 as usize (Transmute);
        _35 = AlignOf(Foo);
        _36 = Sub(_35, const 1_usize);
        _37 = BitAnd(_34, _36);
        _38 = Eq(_37, const 0_usize);
        assert(_38, "misaligned pointer dereference: address must be a multiple of {} but is {}", _35, _34) -> [success: bb7, unwind unreachable];
    }

    bb1: {
        _6 = const 1_usize;
        _21 = _1 as *const () (PtrToPtr);
        _22 = _21 as usize (Transmute);
        _23 = AlignOf(Foo);
        _24 = Sub(_23, const 1_usize);
        _25 = BitAnd(_22, _24);
        _26 = Eq(_25, const 0_usize);
        assert(_26, "misaligned pointer dereference: address must be a multiple of {} but is {}", _23, _22) -> [success: bb5, unwind unreachable];
    }

    bb2: {
        _15 = _1 as *const () (PtrToPtr);
        _16 = _15 as usize (Transmute);
        _17 = AlignOf(Foo);
        _18 = Sub(_17, const 1_usize);
        _19 = BitAnd(_16, _18);
        _20 = Eq(_19, const 0_usize);
        assert(_20, "misaligned pointer dereference: address must be a multiple of {} but is {}", _17, _16) -> [success: bb4, unwind unreachable];
    }

    bb3: {
        ((*_1).0: [usize; 2])[_6] = Add(((*_1).0: [usize; 2])[_6], const 1_usize);
        (*_4) = Add((*_4), const 1_usize);
        return;
    }

    bb4: {
        _9 = _1 as *const () (PtrToPtr);
        _10 = _9 as usize (Transmute);
        _11 = AlignOf(Foo);
        _12 = Sub(_11, const 1_usize);
        _13 = BitAnd(_10, _12);
        _14 = Eq(_13, const 0_usize);
        assert(_14, "misaligned pointer dereference: address must be a multiple of {} but is {}", _11, _10) -> [success: bb3, unwind unreachable];
    }

    bb5: {
        _7 = const 2_usize;
        _8 = Lt(_6, _7);
        assert(move _8, "index out of bounds: the length is {} but the index is {}", move _7, _6) -> bb2;
    }

    bb6: {
        _5 = &mut (*_1);
        _4 = Foo::x(move _5) -> bb1;
    }

    bb7: {
        _2 = &mut (*_3);
        _1 = &raw mut (*_2);
        _27 = _1 as *const () (PtrToPtr);
        _28 = _27 as usize (Transmute);
        _29 = AlignOf(Foo);
        _30 = Sub(_29, const 1_usize);
        _31 = BitAnd(_28, _30);
        _32 = Eq(_31, const 0_usize);
        assert(_32, "misaligned pointer dereference: address must be a multiple of {} but is {}", _29, _28) -> [success: bb6, unwind unreachable];
    }
}

alloc1 (static: SFOO, size: 16, align: 8) {
    17 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 â”‚ ........ .......
}
