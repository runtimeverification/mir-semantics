// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:6:10: 6:15>::clone(_1: &Foo) -> Foo {
    debug self => _1;
    let mut _0: Foo;
    let mut _2: std::option::Option<std::boxed::Box<Foo>>;
    let _3: &std::option::Option<std::boxed::Box<Foo>>;
    let mut _4: std::option::Option<std::boxed::Box<Foo>>;
    let _5: &std::option::Option<std::boxed::Box<Foo>>;

    bb0: {
        _3 = &((*_1).0: std::option::Option<std::boxed::Box<Foo>>);
        _2 = <Option<Box<Foo>> as Clone>::clone(_3) -> bb1;
    }

    bb1: {
        _5 = &((*_1).1: std::option::Option<std::boxed::Box<Foo>>);
        _4 = <Option<Box<Foo>> as Clone>::clone(_5) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        _0 = Foo(move _2, move _4);
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn test(_1: &mut Foo) -> () {
    debug f => _1;
    let mut _0: ();
    let mut _2: isize;
    let mut _3: isize;
    let _4: &mut std::boxed::Box<Foo>;
    let _5: &mut std::boxed::Box<Foo>;
    let mut _6: isize;
    let mut _7: isize;
    let mut _10: !;
    let mut _11: !;
    let mut _12: !;
    let mut _13: std::boxed::Box<Foo>;
    let mut _14: std::boxed::Box<Foo>;
    let mut _15: std::boxed::Box<Foo>;
    let mut _16: std::boxed::Box<Foo>;
    let mut _17: *const Foo;
    let mut _18: *const Foo;
    let mut _19: *const Foo;
    let mut _20: *const Foo;
    scope 1 {
        debug left => _4;
        debug right => _5;
        let _8: &mut std::boxed::Box<Foo>;
        let _9: &mut std::boxed::Box<Foo>;
        let mut _21: *const ();
        let mut _22: usize;
        let mut _23: usize;
        let mut _24: usize;
        let mut _25: usize;
        let mut _26: bool;
        let mut _27: *const ();
        let mut _28: usize;
        let mut _29: usize;
        let mut _30: usize;
        let mut _31: usize;
        let mut _32: bool;
        let mut _33: *const ();
        let mut _34: usize;
        let mut _35: usize;
        let mut _36: usize;
        let mut _37: usize;
        let mut _38: bool;
        let mut _39: *const ();
        let mut _40: usize;
        let mut _41: usize;
        let mut _42: usize;
        let mut _43: usize;
        let mut _44: bool;
        scope 2 {
            debug left => _8;
            debug right => _9;
        }
    }

    bb0: {
        _3 = discriminant(((*_1).0: std::option::Option<std::boxed::Box<Foo>>));
        switchInt(move _3) -> [1: bb2, otherwise: bb1];
    }

    bb1: {
        _12 = begin_panic::<&str>(const "explicit panic");
    }

    bb2: {
        _2 = discriminant(((*_1).1: std::option::Option<std::boxed::Box<Foo>>));
        switchInt(move _2) -> [1: bb3, otherwise: bb1];
    }

    bb3: {
        _4 = &mut ((((*_1).0: std::option::Option<std::boxed::Box<Foo>>) as Some).0: std::boxed::Box<Foo>);
        _5 = &mut ((((*_1).1: std::option::Option<std::boxed::Box<Foo>>) as Some).0: std::boxed::Box<Foo>);
        _13 = deref_copy (*_4);
        _17 = (((_13.0: std::ptr::Unique<Foo>).0: std::ptr::NonNull<Foo>).0: *const Foo);
        _39 = _17 as *const () (PtrToPtr);
        _40 = _39 as usize (Transmute);
        _41 = AlignOf(Foo);
        _42 = Sub(_41, const 1_usize);
        _43 = BitAnd(_40, _42);
        _44 = Eq(_43, const 0_usize);
        assert(_44, "misaligned pointer dereference: address must be a multiple of {} but is {}", _41, _40) -> [success: bb10, unwind unreachable];
    }

    bb4: {
        _11 = begin_panic::<&str>(const "explicit panic");
    }

    bb5: {
        _14 = deref_copy (*_4);
        _18 = (((_14.0: std::ptr::Unique<Foo>).0: std::ptr::NonNull<Foo>).0: *const Foo);
        _33 = _18 as *const () (PtrToPtr);
        _34 = _33 as usize (Transmute);
        _35 = AlignOf(Foo);
        _36 = Sub(_35, const 1_usize);
        _37 = BitAnd(_34, _36);
        _38 = Eq(_37, const 0_usize);
        assert(_38, "misaligned pointer dereference: address must be a multiple of {} but is {}", _35, _34) -> [success: bb9, unwind unreachable];
    }

    bb6: {
        _15 = deref_copy (*_4);
        _19 = (((_15.0: std::ptr::Unique<Foo>).0: std::ptr::NonNull<Foo>).0: *const Foo);
        _27 = _19 as *const () (PtrToPtr);
        _28 = _27 as usize (Transmute);
        _29 = AlignOf(Foo);
        _30 = Sub(_29, const 1_usize);
        _31 = BitAnd(_28, _30);
        _32 = Eq(_31, const 0_usize);
        assert(_32, "misaligned pointer dereference: address must be a multiple of {} but is {}", _29, _28) -> [success: bb8, unwind unreachable];
    }

    bb7: {
        _9 = &mut ((((*_20).1: std::option::Option<std::boxed::Box<Foo>>) as Some).0: std::boxed::Box<Foo>);
        _10 = begin_panic::<&str>(const "explicit panic");
    }

    bb8: {
        _8 = &mut ((((*_19).0: std::option::Option<std::boxed::Box<Foo>>) as Some).0: std::boxed::Box<Foo>);
        _16 = deref_copy (*_4);
        _20 = (((_16.0: std::ptr::Unique<Foo>).0: std::ptr::NonNull<Foo>).0: *const Foo);
        _21 = _20 as *const () (PtrToPtr);
        _22 = _21 as usize (Transmute);
        _23 = AlignOf(Foo);
        _24 = Sub(_23, const 1_usize);
        _25 = BitAnd(_22, _24);
        _26 = Eq(_25, const 0_usize);
        assert(_26, "misaligned pointer dereference: address must be a multiple of {} but is {}", _23, _22) -> [success: bb7, unwind unreachable];
    }

    bb9: {
        _6 = discriminant(((*_18).1: std::option::Option<std::boxed::Box<Foo>>));
        switchInt(move _6) -> [1: bb6, otherwise: bb4];
    }

    bb10: {
        _7 = discriminant(((*_17).0: std::option::Option<std::boxed::Box<Foo>>));
        switchInt(move _7) -> [1: bb5, otherwise: bb4];
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn Foo(_1: Option<Box<Foo>>, _2: Option<Box<Foo>>) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: Option<Box<Foo>>, _2: Option<Box<Foo>>) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo(move _1, move _2);
        return;
    }
}
