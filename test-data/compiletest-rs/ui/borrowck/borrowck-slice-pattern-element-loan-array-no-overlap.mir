// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn nop(_1: &[&i32]) -> () {
    debug _s => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn nop_subslice(_1: &[i32]) -> () {
    debug _s => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn const_index_ok(_1: &mut [i32; 4]) -> () {
    debug s => _1;
    let mut _0: ();
    let _2: &i32;
    let _3: &i32;
    let _4: &i32;
    let _6: ();
    let mut _7: &[&i32];
    let _8: &[&i32; 4];
    let _9: [&i32; 4];
    let mut _10: &i32;
    scope 1 {
        debug first => _2;
        debug second => _3;
        debug fourth => _4;
        let _5: &mut i32;
        scope 2 {
            debug third => _5;
        }
    }

    bb0: {
        _2 = &(*_1)[0 of 4];
        _3 = &(*_1)[1 of 4];
        _4 = &(*_1)[3 of 4];
        _5 = &mut (*_1)[2 of 4];
        _10 = &(*_5);
        _9 = [_2, _3, move _10, _4];
        _8 = &_9;
        _7 = _8 as &[&i32] (Pointer(Unsize));
        _6 = nop(move _7) -> bb1;
    }

    bb1: {
        return;
    }
}

const_index_ok::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}

fn const_index_from_end_ok(_1: &mut [i32; 4]) -> () {
    debug s => _1;
    let mut _0: ();
    let _2: &i32;
    let _3: &i32;
    let _4: &i32;
    let _6: ();
    let mut _7: &[&i32];
    let _8: &[&i32; 4];
    let _9: [&i32; 4];
    let mut _10: &i32;
    scope 1 {
        debug fourth => _2;
        debug third => _3;
        debug first => _4;
        let _5: &mut i32;
        scope 2 {
            debug second => _5;
        }
    }

    bb0: {
        _4 = &(*_1)[3 of 4];
        _3 = &(*_1)[1 of 4];
        _2 = &(*_1)[0 of 4];
        _5 = &mut (*_1)[2 of 4];
        _10 = &(*_5);
        _9 = [_4, move _10, _3, _2];
        _8 = &_9;
        _7 = _8 as &[&i32] (Pointer(Unsize));
        _6 = nop(move _7) -> bb1;
    }

    bb1: {
        return;
    }
}

const_index_from_end_ok::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}

fn const_index_mixed(_1: &mut [i32; 6]) -> () {
    debug s => _1;
    let mut _0: ();
    let _2: &i32;
    let _3: &i32;
    let _4: &i32;
    let _6: ();
    let mut _7: &[&i32];
    let _8: &[&i32; 4];
    let _9: [&i32; 4];
    let mut _10: &i32;
    let _12: ();
    let mut _13: &[&i32];
    let _14: &[&i32; 4];
    let _15: [&i32; 4];
    let mut _16: &i32;
    let _21: ();
    let mut _22: &[&i32];
    let _23: &[&i32; 4];
    let _24: [&i32; 4];
    let mut _25: &i32;
    let _27: ();
    let mut _28: &[&i32];
    let _29: &[&i32; 4];
    let _30: [&i32; 4];
    let mut _31: &i32;
    let _33: ();
    let mut _34: &[&i32];
    let _35: &[&i32; 4];
    let _36: [&i32; 4];
    let mut _37: &i32;
    scope 1 {
        debug from_end4 => _2;
        debug from_end3 => _3;
        debug from_end1 => _4;
        let _5: &mut i32;
        scope 2 {
            debug from_begin0 => _5;
            let _11: &mut i32;
            scope 3 {
                debug from_begin1 => _11;
                let _17: &i32;
                let _18: &i32;
                let _19: &i32;
                scope 4 {
                    debug from_begin0 => _17;
                    debug from_begin1 => _18;
                    debug from_begin3 => _19;
                    let _20: &mut i32;
                    scope 5 {
                        debug from_end1 => _20;
                        let _26: &mut i32;
                        scope 6 {
                            debug from_end2 => _26;
                            let _32: &mut i32;
                            scope 7 {
                                debug from_end4 => _32;
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _4 = &(*_1)[5 of 6];
        _3 = &(*_1)[3 of 6];
        _2 = &(*_1)[2 of 6];
        _5 = &mut (*_1)[0 of 6];
        _10 = &(*_5);
        _9 = [move _10, _4, _3, _2];
        _8 = &_9;
        _7 = _8 as &[&i32] (Pointer(Unsize));
        _6 = nop(move _7) -> bb1;
    }

    bb1: {
        _11 = &mut (*_1)[1 of 6];
        _16 = &(*_11);
        _15 = [move _16, _4, _3, _2];
        _14 = &_15;
        _13 = _14 as &[&i32] (Pointer(Unsize));
        _12 = nop(move _13) -> bb2;
    }

    bb2: {
        _17 = &(*_1)[0 of 6];
        _18 = &(*_1)[1 of 6];
        _19 = &(*_1)[3 of 6];
        _20 = &mut (*_1)[5 of 6];
        _25 = &(*_20);
        _24 = [_17, _18, _19, move _25];
        _23 = &_24;
        _22 = _23 as &[&i32] (Pointer(Unsize));
        _21 = nop(move _22) -> bb3;
    }

    bb3: {
        _26 = &mut (*_1)[4 of 6];
        _31 = &(*_26);
        _30 = [_17, _18, _19, move _31];
        _29 = &_30;
        _28 = _29 as &[&i32] (Pointer(Unsize));
        _27 = nop(move _28) -> bb4;
    }

    bb4: {
        _32 = &mut (*_1)[2 of 6];
        _37 = &(*_32);
        _36 = [_17, _18, _19, move _37];
        _35 = &_36;
        _34 = _35 as &[&i32] (Pointer(Unsize));
        _33 = nop(move _34) -> bb5;
    }

    bb5: {
        return;
    }
}

const_index_mixed::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 6_usize;
        return;
    }
}

fn const_index_and_subslice_ok(_1: &mut [i32; 4]) -> () {
    debug s => _1;
    let mut _0: ();
    let _2: &i32;
    let _3: &i32;
    let _5: ();
    let mut _6: &[&i32];
    let _7: &[&i32; 2];
    let _8: [&i32; 2];
    let _9: ();
    let mut _10: &[i32];
    let mut _11: &[i32; 2];
    scope 1 {
        debug first => _2;
        debug second => _3;
        let _4: &mut [i32; 2];
        scope 2 {
            debug tail => _4;
        }
    }

    bb0: {
        _2 = &(*_1)[0 of 4];
        _3 = &(*_1)[1 of 4];
        _4 = &mut (*_1)[2..4];
        _8 = [_2, _3];
        _7 = &_8;
        _6 = _7 as &[&i32] (Pointer(Unsize));
        _5 = nop(move _6) -> bb1;
    }

    bb1: {
        _11 = &(*_4);
        _10 = move _11 as &[i32] (Pointer(Unsize));
        _9 = nop_subslice(move _10) -> bb2;
    }

    bb2: {
        return;
    }
}

const_index_and_subslice_ok::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}

fn const_index_and_subslice_from_end_ok(_1: &mut [i32; 4]) -> () {
    debug s => _1;
    let mut _0: ();
    let _2: &i32;
    let _3: &i32;
    let _5: ();
    let mut _6: &[&i32];
    let _7: &[&i32; 2];
    let _8: [&i32; 2];
    let _9: ();
    let mut _10: &[i32];
    let mut _11: &[i32; 2];
    scope 1 {
        debug second => _2;
        debug first => _3;
        let _4: &mut [i32; 2];
        scope 2 {
            debug tail => _4;
        }
    }

    bb0: {
        _3 = &(*_1)[3 of 4];
        _2 = &(*_1)[2 of 4];
        _4 = &mut (*_1)[0..2];
        _8 = [_3, _2];
        _7 = &_8;
        _6 = _7 as &[&i32] (Pointer(Unsize));
        _5 = nop(move _6) -> bb1;
    }

    bb1: {
        _11 = &(*_4);
        _10 = move _11 as &[i32] (Pointer(Unsize));
        _9 = nop_subslice(move _10) -> bb2;
    }

    bb2: {
        return;
    }
}

const_index_and_subslice_from_end_ok::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}

fn subslices(_1: &mut [i32; 4]) -> () {
    debug s => _1;
    let mut _0: ();
    let _2: &[i32; 2];
    let _4: ();
    let mut _5: &[i32];
    let _6: ();
    let mut _7: &[i32];
    let mut _8: &[i32; 2];
    scope 1 {
        debug s1 => _2;
        let _3: &mut [i32; 2];
        scope 2 {
            debug s2 => _3;
        }
    }

    bb0: {
        _2 = &(*_1)[2..4];
        _3 = &mut (*_1)[0..2];
        _5 = _2 as &[i32] (Pointer(Unsize));
        _4 = nop_subslice(move _5) -> bb1;
    }

    bb1: {
        _8 = &(*_3);
        _7 = move _8 as &[i32] (Pointer(Unsize));
        _6 = nop_subslice(move _7) -> bb2;
    }

    bb2: {
        return;
    }
}

subslices::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: [i32; 4];
    let _2: ();
    let mut _3: &mut [i32; 4];
    let _4: ();
    let mut _5: &mut [i32; 4];
    let _6: ();
    let mut _7: &mut [i32; 4];
    let _8: ();
    let mut _9: &mut [i32; 4];
    let _10: ();
    let mut _11: &mut [i32; 4];
    scope 1 {
        debug v => _1;
    }

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32];
        _3 = &mut _1;
        _2 = const_index_ok(_3) -> bb1;
    }

    bb1: {
        _5 = &mut _1;
        _4 = const_index_from_end_ok(_5) -> bb2;
    }

    bb2: {
        _7 = &mut _1;
        _6 = const_index_and_subslice_ok(_7) -> bb3;
    }

    bb3: {
        _9 = &mut _1;
        _8 = const_index_and_subslice_from_end_ok(_9) -> bb4;
    }

    bb4: {
        _11 = &mut _1;
        _10 = subslices(_11) -> bb5;
    }

    bb5: {
        return;
    }
}
