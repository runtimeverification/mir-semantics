// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test(_1: &mut Nat) -> () {
    debug x => _1;
    let mut _0: ();
    let mut _2: &mut Nat;
    let mut _3: isize;
    let mut _5: &mut Nat;
    let mut _6: std::boxed::Box<Nat>;
    let mut _7: *const Nat;
    scope 1 {
        debug p => _2;
        let _4: &mut std::boxed::Box<Nat>;
        scope 2 {
            debug n => _4;
            let mut _8: *const ();
            let mut _9: usize;
            let mut _10: usize;
            let mut _11: usize;
            let mut _12: usize;
            let mut _13: bool;
        }
    }

    bb0: {
        _2 = _1;
        goto -> bb1;
    }

    bb1: {
        _3 = discriminant((*_2));
        switchInt(move _3) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _4 = &mut (((*_2) as S).0: std::boxed::Box<Nat>);
        _6 = deref_copy (*_4);
        _7 = (((_6.0: std::ptr::Unique<Nat>).0: std::ptr::NonNull<Nat>).0: *const Nat);
        _8 = _7 as *const () (PtrToPtr);
        _9 = _8 as usize (Transmute);
        _10 = AlignOf(Nat);
        _11 = Sub(_10, const 1_usize);
        _12 = BitAnd(_9, _11);
        _13 = Eq(_12, const 0_usize);
        assert(_13, "misaligned pointer dereference: address must be a multiple of {} but is {}", _10, _9) -> [success: bb5, unwind unreachable];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        return;
    }

    bb5: {
        _5 = &mut (*_7);
        _2 = move _5;
        goto -> bb1;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn Nat::S(_1: Box<Nat>) -> Nat {
    let mut _0: Nat;

    bb0: {
        _0 = Nat::S(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Nat::S(_1: Box<Nat>) -> Nat {
    let mut _0: Nat;

    bb0: {
        _0 = Nat::S(move _1);
        return;
    }
}
