// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn borrow(_1: &isize, _2: F) -> () {
    debug x => _1;
    debug f => _2;
    let mut _0: ();
    let mut _3: (&isize,);

    bb0: {
        _3 = (_1,);
        _0 = <F as FnOnce<(&isize,)>>::call_once(move _2, move _3) -> bb1;
    }

    bb1: {
        return;
    }
}

fn test1(_1: &Box<isize>) -> () {
    debug x => _1;
    let mut _0: ();
    let _2: &isize;
    let _3: std::boxed::Box<isize>;
    let mut _4: &std::boxed::Box<isize>;
    let mut _5: [closure@ui/borrowck/borrowck-borrow-from-expr-block.rs:8:28: 8:31];
    let mut _6: &&std::boxed::Box<isize>;
    let mut _7: *const isize;
    let mut _8: *const ();
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: usize;
    let mut _12: usize;
    let mut _13: bool;

    bb0: {
        _4 = _1;
        _3 = <Box<isize> as Clone>::clone(move _4) -> bb1;
    }

    bb1: {
        _7 = (((_3.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize);
        _8 = _7 as *const () (PtrToPtr);
        _9 = _8 as usize (Transmute);
        _10 = AlignOf(isize);
        _11 = Sub(_10, const 1_usize);
        _12 = BitAnd(_9, _11);
        _13 = Eq(_12, const 0_usize);
        assert(_13, "misaligned pointer dereference: address must be a multiple of {} but is {}", _10, _9) -> [success: bb6, unwind unreachable];
    }

    bb2: {
        drop(_3) -> bb3;
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_3) -> [return: bb5, unwind terminate];
    }

    bb5 (cleanup): {
        resume;
    }

    bb6: {
        _2 = &(*_7);
        _6 = &_1;
        _5 = [closure@ui/borrowck/borrowck-borrow-from-expr-block.rs:8:28: 8:31] { x: move _6 };
        _0 = borrow::<[closure@ui/borrowck/borrowck-borrow-from-expr-block.rs:8:28: 8:31]>(_2, move _5) -> [return: bb2, unwind: bb4];
    }
}

fn test1::{closure#0}(_1: [closure@ui/borrowck/borrowck-borrow-from-expr-block.rs:8:28: 8:31], _2: &isize) -> () {
    debug p => _2;
    debug x => (*(_1.0: &&std::boxed::Box<isize>));
    let mut _0: ();
    let _3: *const isize;
    let _4: &isize;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: *const isize;
    let mut _10: !;
    let mut _11: (&isize, &isize);
    let mut _12: &isize;
    let _13: isize;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: isize;
    let mut _19: isize;
    let _21: !;
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _23: &&std::boxed::Box<isize>;
    let mut _24: &std::boxed::Box<isize>;
    let mut _25: std::boxed::Box<isize>;
    let mut _26: *const isize;
    let mut _33: *const ();
    let mut _34: usize;
    let mut _35: usize;
    let mut _36: usize;
    let mut _37: usize;
    let mut _38: bool;
    scope 1 {
        debug x_a => _3;
        let _14: &isize;
        let _15: &isize;
        scope 2 {
            let mut _27: *const ();
            let mut _28: usize;
            let mut _29: usize;
            let mut _30: usize;
            let mut _31: usize;
            let mut _32: bool;
        }
        scope 3 {
            debug left_val => _14;
            debug right_val => _15;
            let _20: core::panicking::AssertKind;
            scope 4 {
                debug kind => _20;
            }
        }
    }

    bb0: {
        _23 = deref_copy (_1.0: &&std::boxed::Box<isize>);
        _24 = deref_copy (*_23);
        _25 = deref_copy (*_24);
        _26 = (((_25.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize);
        _33 = _26 as *const () (PtrToPtr);
        _34 = _33 as usize (Transmute);
        _35 = AlignOf(isize);
        _36 = Sub(_35, const 1_usize);
        _37 = BitAnd(_34, _36);
        _38 = Eq(_37, const 0_usize);
        assert(_38, "misaligned pointer dereference: address must be a multiple of {} but is {}", _35, _34) -> [success: bb6, unwind unreachable];
    }

    bb1: {
        _10 = core::panicking::panic(const "assertion failed: (x_a as usize) != (p as *const isize as usize)");
    }

    bb2: {
        _27 = _3 as *const () (PtrToPtr);
        _28 = _27 as usize (Transmute);
        _29 = AlignOf(isize);
        _30 = Sub(_29, const 1_usize);
        _31 = BitAnd(_28, _30);
        _32 = Eq(_31, const 0_usize);
        assert(_32, "misaligned pointer dereference: address must be a multiple of {} but is {}", _29, _28) -> [success: bb5, unwind unreachable];
    }

    bb3: {
        _20 = core::panicking::AssertKind::Eq;
        _22 = Option::<Arguments<'_>>::None;
        _21 = core::panicking::assert_failed::<isize, isize>(move _20, _14, _15, move _22);
    }

    bb4: {
        return;
    }

    bb5: {
        _13 = (*_3);
        _12 = &_13;
        _11 = (move _12, _2);
        _14 = (_11.0: &isize);
        _15 = (_11.1: &isize);
        _18 = (*_14);
        _19 = (*_15);
        _17 = Eq(move _18, move _19);
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb4, otherwise: bb3];
    }

    bb6: {
        _4 = &(*_26);
        _3 = &raw const (*_4);
        _7 = _3 as usize (PointerExposeAddress);
        _9 = &raw const (*_2);
        _8 = move _9 as usize (PointerExposeAddress);
        _6 = Ne(move _7, move _8);
        _5 = Not(move _6);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: &std::boxed::Box<isize>;
    let _3: std::boxed::Box<isize>;

    bb0: {
        _3 = Box::<isize>::new(const 22_isize) -> bb1;
    }

    bb1: {
        _2 = &_3;
        _1 = test1(_2) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_3) -> bb3;
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_3) -> [return: bb5, unwind terminate];
    }

    bb5 (cleanup): {
        resume;
    }
}
