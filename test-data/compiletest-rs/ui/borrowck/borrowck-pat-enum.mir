// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn match_ref(_1: Option<isize>) -> isize {
    debug v => _1;
    let mut _0: isize;
    let mut _2: isize;
    let _3: &isize;
    scope 1 {
        debug i => _3;
    }

    bb0: {
        _2 = discriminant(_1);
        switchInt(move _2) -> [0: bb1, 1: bb3, otherwise: bb2];
    }

    bb1: {
        _0 = const 0_isize;
        goto -> bb4;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _3 = &((_1 as Some).0: isize);
        _0 = (*_3);
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

fn match_ref_unused(_1: Option<isize>) -> () {
    debug v => _1;
    let mut _0: ();
    let mut _2: isize;

    bb0: {
        _2 = discriminant(_1);
        switchInt(move _2) -> [0: bb2, 1: bb2, otherwise: bb1];
    }

    bb1: {
        unreachable;
    }

    bb2: {
        return;
    }
}

fn impure(_1: isize) -> () {
    debug _i => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn match_imm_reg(_1: &Option<isize>) -> () {
    debug v => _1;
    let mut _0: ();
    let mut _2: isize;
    let _3: &isize;
    let mut _4: isize;
    scope 1 {
        debug i => _3;
    }

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb2, otherwise: bb1];
    }

    bb1: {
        unreachable;
    }

    bb2: {
        _3 = &(((*_1) as Some).0: isize);
        _4 = (*_3);
        _0 = impure(move _4) -> bb3;
    }

    bb3: {
        return;
    }
}

fn match_mut_reg(_1: &mut Option<isize>) -> () {
    debug v => _1;
    let mut _0: ();
    let mut _2: isize;
    let _3: &isize;
    let mut _4: isize;
    scope 1 {
        debug i => _3;
    }

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb2, otherwise: bb1];
    }

    bb1: {
        unreachable;
    }

    bb2: {
        _3 = &(((*_1) as Some).0: isize);
        _4 = (*_3);
        _0 = impure(move _4) -> bb3;
    }

    bb3: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
