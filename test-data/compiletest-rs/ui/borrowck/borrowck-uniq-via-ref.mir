// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn borrow(_1: &isize) -> () {
    debug _v => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn box_mut(_1: &mut Box<isize>) -> () {
    debug v => _1;
    let mut _0: ();
    let _2: ();
    let _3: &isize;
    let mut _4: std::boxed::Box<isize>;
    let mut _5: *const isize;
    let mut _6: *const ();
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;

    bb0: {
        _4 = deref_copy (*_1);
        _5 = (((_4.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize);
        _6 = _5 as *const () (PtrToPtr);
        _7 = _6 as usize (Transmute);
        _8 = AlignOf(isize);
        _9 = Sub(_8, const 1_usize);
        _10 = BitAnd(_7, _9);
        _11 = Eq(_10, const 0_usize);
        assert(_11, "misaligned pointer dereference: address must be a multiple of {} but is {}", _8, _7) -> [success: bb2, unwind unreachable];
    }

    bb1: {
        return;
    }

    bb2: {
        _3 = &(*_5);
        _2 = borrow(_3) -> bb1;
    }
}

fn box_mut_rec(_1: &mut Rec) -> () {
    debug v => _1;
    let mut _0: ();
    let _2: ();
    let _3: &isize;
    let mut _4: std::boxed::Box<isize>;
    let mut _5: *const isize;
    let mut _6: *const ();
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;

    bb0: {
        _4 = deref_copy ((*_1).0: std::boxed::Box<isize>);
        _5 = (((_4.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize);
        _6 = _5 as *const () (PtrToPtr);
        _7 = _6 as usize (Transmute);
        _8 = AlignOf(isize);
        _9 = Sub(_8, const 1_usize);
        _10 = BitAnd(_7, _9);
        _11 = Eq(_10, const 0_usize);
        assert(_11, "misaligned pointer dereference: address must be a multiple of {} but is {}", _8, _7) -> [success: bb2, unwind unreachable];
    }

    bb1: {
        return;
    }

    bb2: {
        _3 = &(*_5);
        _2 = borrow(_3) -> bb1;
    }
}

fn box_mut_recs(_1: &mut Outer) -> () {
    debug v => _1;
    let mut _0: ();
    let _2: ();
    let _3: &isize;
    let mut _4: std::boxed::Box<isize>;
    let mut _5: *const isize;
    let mut _6: *const ();
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;

    bb0: {
        _4 = deref_copy ((((*_1).0: Inner).0: Innermost).0: std::boxed::Box<isize>);
        _5 = (((_4.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize);
        _6 = _5 as *const () (PtrToPtr);
        _7 = _6 as usize (Transmute);
        _8 = AlignOf(isize);
        _9 = Sub(_8, const 1_usize);
        _10 = BitAnd(_7, _9);
        _11 = Eq(_10, const 0_usize);
        assert(_11, "misaligned pointer dereference: address must be a multiple of {} but is {}", _8, _7) -> [success: bb2, unwind unreachable];
    }

    bb1: {
        return;
    }

    bb2: {
        _3 = &(*_5);
        _2 = borrow(_3) -> bb1;
    }
}

fn box_imm(_1: &Box<isize>) -> () {
    debug v => _1;
    let mut _0: ();
    let _2: ();
    let _3: &isize;
    let mut _4: std::boxed::Box<isize>;
    let mut _5: *const isize;
    let mut _6: *const ();
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;

    bb0: {
        _4 = deref_copy (*_1);
        _5 = (((_4.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize);
        _6 = _5 as *const () (PtrToPtr);
        _7 = _6 as usize (Transmute);
        _8 = AlignOf(isize);
        _9 = Sub(_8, const 1_usize);
        _10 = BitAnd(_7, _9);
        _11 = Eq(_10, const 0_usize);
        assert(_11, "misaligned pointer dereference: address must be a multiple of {} but is {}", _8, _7) -> [success: bb2, unwind unreachable];
    }

    bb1: {
        return;
    }

    bb2: {
        _3 = &(*_5);
        _2 = borrow(_3) -> bb1;
    }
}

fn box_imm_rec(_1: &Rec) -> () {
    debug v => _1;
    let mut _0: ();
    let _2: ();
    let _3: &isize;
    let mut _4: std::boxed::Box<isize>;
    let mut _5: *const isize;
    let mut _6: *const ();
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;

    bb0: {
        _4 = deref_copy ((*_1).0: std::boxed::Box<isize>);
        _5 = (((_4.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize);
        _6 = _5 as *const () (PtrToPtr);
        _7 = _6 as usize (Transmute);
        _8 = AlignOf(isize);
        _9 = Sub(_8, const 1_usize);
        _10 = BitAnd(_7, _9);
        _11 = Eq(_10, const 0_usize);
        assert(_11, "misaligned pointer dereference: address must be a multiple of {} but is {}", _8, _7) -> [success: bb2, unwind unreachable];
    }

    bb1: {
        return;
    }

    bb2: {
        _3 = &(*_5);
        _2 = borrow(_3) -> bb1;
    }
}

fn box_imm_recs(_1: &Outer) -> () {
    debug v => _1;
    let mut _0: ();
    let _2: ();
    let _3: &isize;
    let mut _4: std::boxed::Box<isize>;
    let mut _5: *const isize;
    let mut _6: *const ();
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;

    bb0: {
        _4 = deref_copy ((((*_1).0: Inner).0: Innermost).0: std::boxed::Box<isize>);
        _5 = (((_4.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize);
        _6 = _5 as *const () (PtrToPtr);
        _7 = _6 as usize (Transmute);
        _8 = AlignOf(isize);
        _9 = Sub(_8, const 1_usize);
        _10 = BitAnd(_7, _9);
        _11 = Eq(_10, const 0_usize);
        assert(_11, "misaligned pointer dereference: address must be a multiple of {} but is {}", _8, _7) -> [success: bb2, unwind unreachable];
    }

    bb1: {
        return;
    }

    bb2: {
        _3 = &(*_5);
        _2 = borrow(_3) -> bb1;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
