// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn to_refs(_1: (&mut List<T>,)) -> Vec<&mut T> {
    debug list => _1;
    let mut _0: std::vec::Vec<&mut T>;
    let mut _2: std::vec::Vec<&mut T>;
    let _3: ();
    let mut _4: &mut std::vec::Vec<&mut T>;
    let mut _5: &mut T;
    let mut _6: std::option::Option<&mut std::boxed::Box<List<T>>>;
    let mut _7: &mut std::option::Option<std::boxed::Box<List<T>>>;
    let mut _8: isize;
    let mut _10: &mut List<T>;
    let mut _11: &mut List<T>;
    let mut _12: &mut List<T>;
    let mut _13: std::boxed::Box<List<T>>;
    let mut _14: *const List<T>;
    scope 1 {
        debug result => _2;
        scope 2 {
            debug n => _9;
            let _9: &mut std::boxed::Box<List<T>>;
            let mut _15: *const ();
            let mut _16: usize;
            let mut _17: usize;
            let mut _18: usize;
            let mut _19: usize;
            let mut _20: bool;
        }
    }

    bb0: {
        _2 = Vec::<&mut T>::new() -> bb1;
    }

    bb1: {
        _4 = &mut _2;
        _11 = deref_copy (_1.0: &mut List<T>);
        _5 = &mut ((*_11).0: T);
        _3 = Vec::<&mut T>::push(move _4, move _5) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _12 = deref_copy (_1.0: &mut List<T>);
        _7 = &mut ((*_12).1: std::option::Option<std::boxed::Box<List<T>>>);
        _6 = Option::<Box<List<T>>>::as_mut(move _7) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _8 = discriminant(_6);
        switchInt(move _8) -> [1: bb4, otherwise: bb5];
    }

    bb4: {
        _9 = move ((_6 as Some).0: &mut std::boxed::Box<List<T>>);
        _13 = deref_copy (*_9);
        _14 = (((_13.0: std::ptr::Unique<List<T>>).0: std::ptr::NonNull<List<T>>).0: *const List<T>);
        _15 = _14 as *const () (PtrToPtr);
        _16 = _15 as usize (Transmute);
        _17 = AlignOf(List<T>);
        _18 = Sub(_17, const 1_usize);
        _19 = BitAnd(_16, _18);
        _20 = Eq(_19, const 0_usize);
        assert(_20, "misaligned pointer dereference: address must be a multiple of {} but is {}", _17, _16) -> [success: bb8, unwind unreachable];
    }

    bb5: {
        _0 = move _2;
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }

    bb8: {
        _10 = &mut (*_14);
        (_1.0: &mut List<T>) = move _10;
        goto -> bb1;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
