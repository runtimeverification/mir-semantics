// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/borrowck/issue-46095.rs:4:1: 4:7>::take_mutably(_1: &mut A) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn identity(_1: T) -> T {
    debug t => _1;
    let mut _0: T;

    bb0: {
        _0 = move _1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: A;
    let mut _4: &mut A;
    let mut _5: &mut A;
    let _6: ();
    let _7: usize;
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: bool;
    let _11: ();
    let _12: usize;
    let mut _13: usize;
    let mut _14: bool;
    let mut _15: &mut A;
    let mut _16: &mut A;
    scope 1 {
        debug a1 => const A;
        let mut _2: A;
        scope 2 {
            debug a2 => const A;
            let _3: [&mut A; 2];
            scope 3 {
                debug wrapped => _3;
            }
        }
    }

    bb0: {
        _4 = &mut _1;
        _5 = &mut _2;
        _3 = [move _4, _5];
        _8 = Add(const 0_usize, const 1_usize);
        _7 = Sub(move _8, const 1_usize);
        _9 = const 2_usize;
        _10 = Lt(_7, _9);
        assert(move _10, "index out of bounds: the length is {} but the index is {}", move _9, _7) -> bb1;
    }

    bb1: {
        _15 = deref_copy _3[_7];
        _6 = A::take_mutably(_15) -> bb2;
    }

    bb2: {
        _12 = identity::<usize>(const 0_usize) -> bb3;
    }

    bb3: {
        _13 = const 2_usize;
        _14 = Lt(_12, _13);
        assert(move _14, "index out of bounds: the length is {} but the index is {}", move _13, _12) -> bb4;
    }

    bb4: {
        _16 = deref_copy _3[_12];
        _11 = A::take_mutably(_16) -> bb5;
    }

    bb5: {
        return;
    }
}
