// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/borrowck/borrowck-rvalues-mutable.rs:7:1: 7:13>::new(_1: usize) -> Counter {
    debug v => _1;
    let mut _0: Counter;

    bb0: {
        _0 = Counter { value: _1 };
        return;
    }
}

fn <impl at ui/borrowck/borrowck-rvalues-mutable.rs:7:1: 7:13>::inc(_1: &mut Counter) -> &mut Counter {
    debug self => _1;
    let mut _0: &mut Counter;

    bb0: {
        ((*_1).0: usize) = Add(((*_1).0: usize), const 1_usize);
        _0 = _1;
        return;
    }
}

fn <impl at ui/borrowck/borrowck-rvalues-mutable.rs:7:1: 7:13>::get(_1: &Counter) -> usize {
    debug self => _1;
    let mut _0: usize;

    bb0: {
        _0 = ((*_1).0: usize);
        return;
    }
}

fn <impl at ui/borrowck/borrowck-rvalues-mutable.rs:7:1: 7:13>::get_and_inc(_1: &mut Counter) -> usize {
    debug self => _1;
    let mut _0: usize;
    scope 1 {
        debug v => _0;
    }

    bb0: {
        _0 = ((*_1).0: usize);
        ((*_1).0: usize) = Add(((*_1).0: usize), const 1_usize);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: usize;
    let mut _2: &mut Counter;
    let mut _3: Counter;
    let mut _4: (&usize, &usize);
    let mut _5: &usize;
    let mut _6: &usize;
    let _7: usize;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: &Counter;
    let _19: &mut Counter;
    let mut _20: &mut Counter;
    let mut _21: &mut Counter;
    let mut _22: &mut Counter;
    let mut _23: Counter;
    let mut _24: (&usize, &usize);
    let mut _25: &usize;
    let mut _26: &usize;
    let _27: usize;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: usize;
    let mut _33: usize;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug v => _1;
        let _8: &usize;
        let _9: &usize;
        let _17: usize;
        scope 2 {
            debug left_val => _8;
            debug right_val => _9;
            let _14: core::panicking::AssertKind;
            scope 3 {
                debug kind => _14;
            }
        }
        scope 4 {
            debug v => _17;
            let _28: &usize;
            let _29: &usize;
            scope 5 {
                debug left_val => _28;
                debug right_val => _29;
                let _34: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _34;
                }
            }
        }
    }

    bb0: {
        _3 = Counter::new(const 22_usize) -> bb1;
    }

    bb1: {
        _2 = &mut _3;
        _1 = Counter::get_and_inc(move _2) -> bb2;
    }

    bb2: {
        _5 = &_1;
        _7 = const 22_usize;
        _6 = &_7;
        _4 = (move _5, move _6);
        _8 = (_4.0: &usize);
        _9 = (_4.1: &usize);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<usize, usize>(move _14, _8, _9, move _16);
    }

    bb4: {
        _23 = Counter::new(const 22_usize) -> bb5;
    }

    bb5: {
        _22 = &mut _23;
        _21 = Counter::inc(move _22) -> bb6;
    }

    bb6: {
        _20 = _21;
        _19 = Counter::inc(move _20) -> bb7;
    }

    bb7: {
        _18 = &(*_19);
        _17 = Counter::get(move _18) -> bb8;
    }

    bb8: {
        _25 = &_17;
        _27 = const 24_usize;
        _26 = &_27;
        _24 = (move _25, move _26);
        _28 = (_24.0: &usize);
        _29 = (_24.1: &usize);
        _32 = (*_28);
        _33 = (*_29);
        _31 = Eq(move _32, move _33);
        _30 = Not(move _31);
        switchInt(move _30) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = core::panicking::assert_failed::<usize, usize>(move _34, _28, _29, move _36);
    }

    bb10: {
        return;
    }
}
