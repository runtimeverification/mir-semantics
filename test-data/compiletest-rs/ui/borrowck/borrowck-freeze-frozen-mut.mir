// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn get(_1: &MutSlice<'_, T>, _2: usize) -> &T {
    debug ms => _1;
    debug index => _2;
    let mut _0: &T;
    let mut _3: usize;
    let mut _4: bool;
    let mut _5: &mut [T];
    let mut _6: &mut [T];

    bb0: {
        _5 = deref_copy ((*_1).0: &mut [T]);
        _3 = Len((*_5));
        _4 = Lt(_2, _3);
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> bb1;
    }

    bb1: {
        _6 = deref_copy ((*_1).0: &mut [T]);
        _0 = &(*_6)[_2];
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: [i32; 3];
    let mut _3: &mut [i32];
    let mut _4: &mut [i32; 3];
    let _5: usize;
    let mut _6: usize;
    let mut _7: bool;
    let _9: &MutSlice<'_, i32>;
    let _11: &MutSlice<'_, i32>;
    let _13: &MutSlice<'_, i32>;
    let mut _14: (&i32, &i32);
    let mut _15: &i32;
    let mut _16: &i32;
    let _17: i32;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: i32;
    let mut _23: i32;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _27: (&i32, &i32);
    let mut _28: &i32;
    let mut _29: &i32;
    let _30: i32;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: i32;
    let mut _36: i32;
    let _38: !;
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _40: (&i32, &i32);
    let mut _41: &i32;
    let mut _42: &i32;
    let _43: i32;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: i32;
    let mut _49: i32;
    let _51: !;
    let mut _52: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _53: (&i32, &i32);
    let mut _54: &i32;
    let _55: usize;
    let mut _56: usize;
    let mut _57: bool;
    let mut _58: &i32;
    let _59: i32;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: i32;
    let mut _65: i32;
    let _67: !;
    let mut _68: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _69: (&i32, &i32);
    let mut _70: &i32;
    let _71: usize;
    let mut _72: usize;
    let mut _73: bool;
    let mut _74: &i32;
    let _75: i32;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: i32;
    let mut _81: i32;
    let _83: !;
    let mut _84: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _85: (&i32, &i32);
    let mut _86: &i32;
    let _87: usize;
    let mut _88: usize;
    let mut _89: bool;
    let mut _90: &i32;
    let _91: i32;
    let mut _94: bool;
    let mut _95: bool;
    let mut _96: i32;
    let mut _97: i32;
    let _99: !;
    let mut _100: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _101: &mut [i32];
    let mut _102: &mut [i32];
    let mut _103: &mut [i32];
    scope 1 {
        debug data => _1;
        let _2: MutSlice<'_, i32>;
        let _60: &i32;
        let _61: &i32;
        let _76: &i32;
        let _77: &i32;
        let _92: &i32;
        let _93: &i32;
        scope 2 {
            debug slice => _2;
            let _8: &i32;
            scope 3 {
                debug index0 => _8;
                let _10: &i32;
                scope 4 {
                    debug index1 => _10;
                    let _12: &i32;
                    scope 5 {
                        debug index2 => _12;
                        let _18: &i32;
                        let _19: &i32;
                        let _31: &i32;
                        let _32: &i32;
                        let _44: &i32;
                        let _45: &i32;
                        scope 6 {
                            debug left_val => _18;
                            debug right_val => _19;
                            let _24: core::panicking::AssertKind;
                            scope 7 {
                                debug kind => _24;
                            }
                        }
                        scope 8 {
                            debug left_val => _31;
                            debug right_val => _32;
                            let _37: core::panicking::AssertKind;
                            scope 9 {
                                debug kind => _37;
                            }
                        }
                        scope 10 {
                            debug left_val => _44;
                            debug right_val => _45;
                            let _50: core::panicking::AssertKind;
                            scope 11 {
                                debug kind => _50;
                            }
                        }
                    }
                }
            }
        }
        scope 12 {
            debug left_val => _60;
            debug right_val => _61;
            let _66: core::panicking::AssertKind;
            scope 13 {
                debug kind => _66;
            }
        }
        scope 14 {
            debug left_val => _76;
            debug right_val => _77;
            let _82: core::panicking::AssertKind;
            scope 15 {
                debug kind => _82;
            }
        }
        scope 16 {
            debug left_val => _92;
            debug right_val => _93;
            let _98: core::panicking::AssertKind;
            scope 17 {
                debug kind => _98;
            }
        }
    }

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32];
        _4 = &mut _1;
        _3 = _4 as &mut [i32] (Pointer(Unsize));
        _2 = MutSlice::<'_, i32> { data: move _3 };
        _5 = const 0_usize;
        _101 = deref_copy (_2.0: &mut [i32]);
        _6 = Len((*_101));
        _7 = Lt(_5, _6);
        assert(move _7, "index out of bounds: the length is {} but the index is {}", move _6, _5) -> bb1;
    }

    bb1: {
        _102 = deref_copy (_2.0: &mut [i32]);
        _103 = deref_copy (_2.0: &mut [i32]);
        (*_102)[_5] = Add((*_103)[_5], const 4_i32);
        _9 = &_2;
        _8 = get::<i32>(_9, const 0_usize) -> bb2;
    }

    bb2: {
        _11 = &_2;
        _10 = get::<i32>(_11, const 1_usize) -> bb3;
    }

    bb3: {
        _13 = &_2;
        _12 = get::<i32>(_13, const 2_usize) -> bb4;
    }

    bb4: {
        _15 = _8;
        _17 = const 5_i32;
        _16 = &_17;
        _14 = (move _15, move _16);
        _18 = (_14.0: &i32);
        _19 = (_14.1: &i32);
        _22 = (*_18);
        _23 = (*_19);
        _21 = Eq(move _22, move _23);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<i32, i32>(move _24, _18, _19, move _26);
    }

    bb6: {
        _28 = _10;
        _30 = const 2_i32;
        _29 = &_30;
        _27 = (move _28, move _29);
        _31 = (_27.0: &i32);
        _32 = (_27.1: &i32);
        _35 = (*_31);
        _36 = (*_32);
        _34 = Eq(move _35, move _36);
        _33 = Not(move _34);
        switchInt(move _33) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _37 = core::panicking::AssertKind::Eq;
        _39 = Option::<Arguments<'_>>::None;
        _38 = core::panicking::assert_failed::<i32, i32>(move _37, _31, _32, move _39);
    }

    bb8: {
        _41 = _12;
        _43 = const 3_i32;
        _42 = &_43;
        _40 = (move _41, move _42);
        _44 = (_40.0: &i32);
        _45 = (_40.1: &i32);
        _48 = (*_44);
        _49 = (*_45);
        _47 = Eq(move _48, move _49);
        _46 = Not(move _47);
        switchInt(move _46) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _50 = core::panicking::AssertKind::Eq;
        _52 = Option::<Arguments<'_>>::None;
        _51 = core::panicking::assert_failed::<i32, i32>(move _50, _44, _45, move _52);
    }

    bb10: {
        _55 = const 0_usize;
        _56 = const 3_usize;
        _57 = Lt(_55, _56);
        assert(move _57, "index out of bounds: the length is {} but the index is {}", move _56, _55) -> bb11;
    }

    bb11: {
        _54 = &_1[_55];
        _59 = const 5_i32;
        _58 = &_59;
        _53 = (move _54, move _58);
        _60 = (_53.0: &i32);
        _61 = (_53.1: &i32);
        _64 = (*_60);
        _65 = (*_61);
        _63 = Eq(move _64, move _65);
        _62 = Not(move _63);
        switchInt(move _62) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _66 = core::panicking::AssertKind::Eq;
        _68 = Option::<Arguments<'_>>::None;
        _67 = core::panicking::assert_failed::<i32, i32>(move _66, _60, _61, move _68);
    }

    bb13: {
        _71 = const 1_usize;
        _72 = const 3_usize;
        _73 = Lt(_71, _72);
        assert(move _73, "index out of bounds: the length is {} but the index is {}", move _72, _71) -> bb14;
    }

    bb14: {
        _70 = &_1[_71];
        _75 = const 2_i32;
        _74 = &_75;
        _69 = (move _70, move _74);
        _76 = (_69.0: &i32);
        _77 = (_69.1: &i32);
        _80 = (*_76);
        _81 = (*_77);
        _79 = Eq(move _80, move _81);
        _78 = Not(move _79);
        switchInt(move _78) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _82 = core::panicking::AssertKind::Eq;
        _84 = Option::<Arguments<'_>>::None;
        _83 = core::panicking::assert_failed::<i32, i32>(move _82, _76, _77, move _84);
    }

    bb16: {
        _87 = const 2_usize;
        _88 = const 3_usize;
        _89 = Lt(_87, _88);
        assert(move _89, "index out of bounds: the length is {} but the index is {}", move _88, _87) -> bb17;
    }

    bb17: {
        _86 = &_1[_87];
        _91 = const 3_i32;
        _90 = &_91;
        _85 = (move _86, move _90);
        _92 = (_85.0: &i32);
        _93 = (_85.1: &i32);
        _96 = (*_92);
        _97 = (*_93);
        _95 = Eq(move _96, move _97);
        _94 = Not(move _95);
        switchInt(move _94) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _98 = core::panicking::AssertKind::Eq;
        _100 = Option::<Arguments<'_>>::None;
        _99 = core::panicking::assert_failed::<i32, i32>(move _98, _92, _93, move _100);
    }

    bb19: {
        return;
    }
}
