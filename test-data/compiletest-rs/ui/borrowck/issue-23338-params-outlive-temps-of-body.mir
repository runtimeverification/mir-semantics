// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: RefCell<String>) -> String {
    debug x => _1;
    let mut _0: std::string::String;
    let mut _2: &std::string::String;
    let _3: &std::string::String;
    let mut _4: &std::cell::Ref<'_, std::string::String>;
    let _5: std::cell::Ref<'_, std::string::String>;
    let mut _6: &std::cell::RefCell<std::string::String>;

    bb0: {
        _6 = &_1;
        _5 = RefCell::<String>::borrow(move _6) -> [return: bb1, unwind: bb7];
    }

    bb1: {
        _4 = &_5;
        _3 = <Ref<'_, String> as Deref>::deref(move _4) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _2 = _3;
        _0 = <String as Clone>::clone(move _2) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        drop(_5) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        drop(_1) -> bb5;
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_5) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        drop(_1) -> [return: bb8, unwind terminate];
    }

    bb8 (cleanup): {
        resume;
    }
}

fn foo2(_1: RefCell<String>) -> String {
    debug x => _1;
    let mut _0: std::string::String;
    let _2: std::cell::RefCell<std::string::String>;
    let mut _4: &std::string::String;
    let _5: &std::string::String;
    let mut _6: &std::cell::Ref<'_, std::string::String>;
    let _7: std::cell::Ref<'_, std::string::String>;
    let mut _8: &std::cell::RefCell<std::string::String>;
    scope 1 {
        debug y => _2;
        let _3: std::string::String;
        scope 2 {
            debug ret => _3;
        }
    }

    bb0: {
        _2 = move _1;
        _8 = &_2;
        _7 = RefCell::<String>::borrow(move _8) -> [return: bb1, unwind: bb8];
    }

    bb1: {
        _6 = &_7;
        _5 = <Ref<'_, String> as Deref>::deref(move _6) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _4 = _5;
        _3 = <String as Clone>::clone(move _4) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        drop(_7) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        _0 = move _3;
        drop(_2) -> bb5;
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_3) -> [return: bb8, unwind terminate];
    }

    bb7 (cleanup): {
        drop(_7) -> [return: bb8, unwind terminate];
    }

    bb8 (cleanup): {
        drop(_2) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::cell::RefCell<std::string::String>;
    let mut _2: std::string::String;
    let _3: std::string::String;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let _6: &[&str; 1];
    let _7: [&str; 1];
    let mut _8: (&std::string::String, &&str);
    let mut _9: &std::string::String;
    let _10: std::string::String;
    let mut _11: std::cell::RefCell<std::string::String>;
    let mut _12: &&str;
    let _13: &str;
    let mut _16: bool;
    let mut _17: bool;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _22: std::string::String;
    let mut _24: std::fmt::Arguments<'_>;
    let mut _25: &[&str];
    let _26: &[&str; 1];
    let _27: [&str; 1];
    let mut _28: (&std::string::String, &&str);
    let mut _29: &std::string::String;
    let _30: std::string::String;
    let mut _31: std::cell::RefCell<std::string::String>;
    let mut _32: &&str;
    let _33: &str;
    let mut _36: bool;
    let mut _37: bool;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug r => _1;
        let _14: &std::string::String;
        let _15: &&str;
        let _21: std::cell::RefCell<std::string::String>;
        let _23: std::string::String;
        scope 3 {
            debug left_val => _14;
            debug right_val => _15;
            let _18: core::panicking::AssertKind;
            scope 4 {
                debug kind => _18;
            }
        }
        scope 5 {
            debug r => _21;
            let _34: &std::string::String;
            let _35: &&str;
            scope 7 {
                debug left_val => _34;
                debug right_val => _35;
                let _38: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _38;
                }
            }
        }
        scope 6 {
            debug res => _23;
        }
    }
    scope 2 {
        debug res => _3;
    }

    bb0: {
        _7 = [const "data"];
        _6 = &_7;
        _5 = _6 as &[&str] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_const(move _5) -> bb1;
    }

    bb1: {
        _3 = format(move _4) -> bb2;
    }

    bb2: {
        _2 = move _3;
        _1 = RefCell::<String>::new(move _2) -> bb3;
    }

    bb3: {
        _11 = move _1;
        _10 = foo(move _11) -> bb4;
    }

    bb4: {
        _9 = &_10;
        _13 = const "data";
        _12 = &_13;
        _8 = (move _9, move _12);
        _14 = (_8.0: &std::string::String);
        _15 = (_8.1: &&str);
        _17 = <String as PartialEq<&str>>::eq(_14, _15) -> [return: bb5, unwind: bb18];
    }

    bb5: {
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<String, &str>(move _18, _14, _15, move _20) -> bb18;
    }

    bb7: {
        drop(_10) -> bb8;
    }

    bb8: {
        _27 = [const "data"];
        _26 = &_27;
        _25 = _26 as &[&str] (Pointer(Unsize));
        _24 = Arguments::<'_>::new_const(move _25) -> bb9;
    }

    bb9: {
        _23 = format(move _24) -> bb10;
    }

    bb10: {
        _22 = move _23;
        _21 = RefCell::<String>::new(move _22) -> bb11;
    }

    bb11: {
        _31 = move _21;
        _30 = foo2(move _31) -> bb12;
    }

    bb12: {
        _29 = &_30;
        _33 = const "data";
        _32 = &_33;
        _28 = (move _29, move _32);
        _34 = (_28.0: &std::string::String);
        _35 = (_28.1: &&str);
        _37 = <String as PartialEq<&str>>::eq(_34, _35) -> [return: bb13, unwind: bb17];
    }

    bb13: {
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<String, &str>(move _38, _34, _35, move _40) -> bb17;
    }

    bb15: {
        drop(_30) -> bb16;
    }

    bb16: {
        return;
    }

    bb17 (cleanup): {
        drop(_30) -> [return: bb19, unwind terminate];
    }

    bb18 (cleanup): {
        drop(_10) -> [return: bb19, unwind terminate];
    }

    bb19 (cleanup): {
        resume;
    }
}
