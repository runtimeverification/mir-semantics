// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/borrowck/issue-103095.rs:16:1: 16:46>::new(_1: T, _2: D) -> Data<T, D> {
    debug value => _1;
    debug f => _2;
    let mut _0: Data<T, D>;
    let _3: <D as FnOnceForGenericRef<T>>::FnOutput;
    let mut _4: (&T,);
    let _5: &T;
    let mut _6: std::option::Option<T>;
    let mut _7: T;
    let mut _8: std::option::Option<<D as FnOnceForGenericRef<T>>::FnOutput>;
    let mut _9: <D as FnOnceForGenericRef<T>>::FnOutput;
    scope 1 {
        debug output => _3;
    }

    bb0: {
        _5 = &_1;
        _4 = (_5,);
        _3 = <D as FnOnce<(&T,)>>::call_once(move _2, move _4) -> [return: bb1, unwind: bb2];
    }

    bb1: {
        _7 = move _1;
        _6 = Option::<T>::Some(move _7);
        _9 = move _3;
        _8 = Option::<<D as FnOnceForGenericRef<T>>::FnOutput>::Some(move _9);
        _0 = Data::<T, D> { value: move _6, output: move _8 };
        return;
    }

    bb2 (cleanup): {
        drop(_1) -> [return: bb3, unwind terminate];
    }

    bb3 (cleanup): {
        resume;
    }
}

fn test() -> () {
    let mut _0: ();
    let _1: Data<std::string::String, [closure@ui/borrowck/issue-103095.rs:27:30: 27:33]>;
    let mut _2: std::string::String;

    bb0: {
        _2 = String::new() -> bb1;
    }

    bb1: {
        _1 = Data::<String, [closure@ui/borrowck/issue-103095.rs:27:30: 27:33]>::new(move _2, const ZeroSized: [closure@ui/borrowck/issue-103095.rs:27:30: 27:33]) -> bb2;
    }

    bb2: {
        drop(_1) -> bb3;
    }

    bb3: {
        return;
    }
}

fn test::{closure#0}(_1: [closure@ui/borrowck/issue-103095.rs:27:30: 27:33], _2: &String) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
