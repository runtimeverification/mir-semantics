// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let _3: ();

    bb0: {
        _1 = original_report() -> bb1;
    }

    bb1: {
        _2 = revision_1() -> bb2;
    }

    bb2: {
        _3 = revision_2() -> bb3;
    }

    bb3: {
        return;
    }
}

fn original_report() -> () {
    let mut _0: ();
    let mut _1: std::vec::IntoIter<&()>;
    let mut _2: std::vec::Vec<&()>;
    let mut _3: std::boxed::Box<[&()]>;
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: *mut u8;
    let mut _7: std::boxed::Box<[&(); 1]>;
    let mut _8: &();
    let _9: ();
    let mut _10: *const [&(); 1];
    let mut _11: *const ();
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: usize;
    let mut _15: usize;
    let mut _16: bool;
    scope 1 {
    }

    bb0: {
        _4 = SizeOf([&(); 1]);
        _5 = AlignOf([&(); 1]);
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> bb1;
    }

    bb1: {
        _7 = ShallowInitBox(move _6, [&(); 1]);
        _8 = &_9;
        _10 = (((_7.0: std::ptr::Unique<[&(); 1]>).0: std::ptr::NonNull<[&(); 1]>).0: *const [&(); 1]);
        _11 = _10 as *const () (PtrToPtr);
        _12 = _11 as usize (Transmute);
        _13 = AlignOf(&());
        _14 = Sub(_13, const 1_usize);
        _15 = BitAnd(_12, _14);
        _16 = Eq(_15, const 0_usize);
        assert(_16, "misaligned pointer dereference: address must be a multiple of {} but is {}", _13, _12) -> [success: bb5, unwind unreachable];
    }

    bb2: {
        _1 = <Vec<&()> as IntoIterator>::into_iter(move _2) -> bb3;
    }

    bb3: {
        _0 = std::mem::drop::<std::vec::IntoIter<&()>>(move _1) -> bb4;
    }

    bb4: {
        return;
    }

    bb5: {
        (*_10) = [move _8];
        _3 = move _7 as std::boxed::Box<[&()]> (Pointer(Unsize));
        _2 = slice::<impl [&()]>::into_vec::<std::alloc::Global>(move _3) -> bb2;
    }
}

fn revision_1() -> () {
    let mut _0: ();
    let mut _1: std::vec::IntoIter<&()>;
    let mut _2: std::vec::Vec<&()>;
    let mut _3: std::boxed::Box<[&()]>;
    let mut _4: std::boxed::Box<[&(); 1]>;
    let mut _5: [&(); 1];
    let mut _6: &();
    let _7: ();

    bb0: {
        _6 = &_7;
        _5 = [move _6];
        _4 = Box::<[&(); 1]>::new(move _5) -> bb1;
    }

    bb1: {
        _3 = move _4 as std::boxed::Box<[&()]> (Pointer(Unsize));
        _2 = slice::<impl [&()]>::into_vec::<std::alloc::Global>(move _3) -> bb2;
    }

    bb2: {
        _1 = <Vec<&()> as IntoIterator>::into_iter(move _2) -> bb3;
    }

    bb3: {
        _0 = std::mem::drop::<std::vec::IntoIter<&()>>(move _1) -> bb4;
    }

    bb4: {
        return;
    }
}

fn revision_2() -> () {
    let mut _0: ();
    let mut _1: std::vec::IntoIter<&()>;
    let mut _2: std::vec::Vec<&()>;
    let mut _3: (std::vec::Vec<&()>, &());
    let mut _4: std::vec::Vec<&()>;
    let mut _5: &();
    let _6: ();
    let mut _7: std::vec::Vec<&()>;
    let _8: &();
    let _9: ();
    let mut _10: &mut std::vec::Vec<&()>;
    scope 1 {
        debug v => _7;
        debug b => _8;
    }

    bb0: {
        _4 = Vec::<&()>::new() -> bb1;
    }

    bb1: {
        _5 = &_6;
        _3 = (move _4, move _5);
        _7 = move (_3.0: std::vec::Vec<&()>);
        _8 = (_3.1: &());
        _10 = &mut _7;
        _9 = Vec::<&()>::push(move _10, _8) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _2 = move _7;
        _1 = <Vec<&()> as IntoIterator>::into_iter(move _2) -> bb3;
    }

    bb3: {
        _0 = std::mem::drop::<std::vec::IntoIter<&()>>(move _1) -> bb4;
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_7) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        resume;
    }
}
