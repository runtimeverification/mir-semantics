// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn mut_head_tail(_1: &mut [A]) -> Option<(&mut A, &mut [A])> {
    debug v => _1;
    let mut _0: std::option::Option<(&mut A, &mut [A])>;
    let mut _2: usize;
    let mut _3: usize;
    let mut _4: bool;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: bool;
    let _8: &mut A;
    let _9: &mut [A];
    let mut _10: (&mut A, &mut [A]);
    scope 1 {
        debug head => _8;
        debug tail => _9;
    }

    bb0: {
        _5 = Len((*_1));
        _6 = const 1_usize;
        _7 = Ge(move _5, move _6);
        switchInt(move _7) -> [0: bb1, otherwise: bb4];
    }

    bb1: {
        _2 = Len((*_1));
        _3 = const 0_usize;
        _4 = Eq(move _2, move _3);
        switchInt(move _4) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _0 = Option::<(&mut A, &mut [A])>::None;
        goto -> bb5;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _8 = &mut (*_1)[0 of 1];
        _9 = &mut (*_1)[1:];
        _10 = (_8, _9);
        _0 = Option::<(&mut A, &mut [A])>::Some(move _10);
        goto -> bb5;
    }

    bb5: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: [i32; 4];
    let mut _2: std::option::Option<(&mut i32, &mut [i32])>;
    let mut _3: &mut [i32];
    let mut _4: &mut [i32; 4];
    let mut _5: isize;
    let _8: ();
    scope 1 {
        debug v => _1;
        let _6: &mut i32;
        let _7: &mut [i32];
        scope 2 {
            debug h => _6;
            debug t => _7;
        }
    }

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32];
        _4 = &mut _1;
        _3 = _4 as &mut [i32] (Pointer(Unsize));
        _2 = mut_head_tail::<i32>(move _3) -> bb1;
    }

    bb1: {
        _5 = discriminant(_2);
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _6 = move (((_2 as Some).0: (&mut i32, &mut [i32])).0: &mut i32);
        _7 = move (((_2 as Some).0: (&mut i32, &mut [i32])).1: &mut [i32]);
        (*_6) = const 1000_i32;
        _8 = core::slice::<impl [i32]>::reverse(_7) -> bb4;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        return;
    }
}
