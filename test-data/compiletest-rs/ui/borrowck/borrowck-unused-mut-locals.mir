// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/borrowck/borrowck-unused-mut-locals.rs:5:10: 5:15>::fmt(_1: &A, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "A";
        _0 = Formatter::<'_>::write_str(_2, _3) -> bb1;
    }

    bb1: {
        return;
    }
}

fn init_a() -> A {
    let mut _0: A;

    bb0: {
        return;
    }
}

fn <impl at ui/borrowck/borrowck-unused-mut-locals.rs:12:10: 12:15>::fmt(_1: &B<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &&&mut A;
    let _7: &&mut A;

    bb0: {
        _3 = const "B";
        _4 = const "ed";
        _7 = &((*_1).0: &mut A);
        _6 = &_7;
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _3, _4, move _5) -> bb1;
    }

    bb1: {
        return;
    }
}

fn init_b(_1: &mut A) -> B<'_> {
    debug ed => _1;
    let mut _0: B<'_>;

    bb0: {
        _0 = B::<'_> { ed: _1 };
        return;
    }
}

fn <impl at ui/borrowck/borrowck-unused-mut-locals.rs:21:10: 21:15>::fmt(_1: &C<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &&&mut B<'_>;
    let _7: &&mut B<'_>;

    bb0: {
        _3 = const "C";
        _4 = const "pd";
        _7 = &((*_1).0: &mut B<'_>);
        _6 = &_7;
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _3, _4, move _5) -> bb1;
    }

    bb1: {
        return;
    }
}

fn init_c(_1: &mut B<'_>) -> C<'_> {
    debug pd => _1;
    let mut _0: C<'_>;

    bb0: {
        _0 = C::<'_> { pd: _1 };
        return;
    }
}

fn <impl at ui/borrowck/borrowck-unused-mut-locals.rs:30:10: 30:15>::fmt(_1: &D<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &&&mut C<'_>;
    let _7: &&mut C<'_>;

    bb0: {
        _3 = const "D";
        _4 = const "sd";
        _7 = &((*_1).0: &mut C<'_>);
        _6 = &_7;
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _3, _4, move _5) -> bb1;
    }

    bb1: {
        return;
    }
}

fn init_d(_1: &mut C<'_>) -> D<'_> {
    debug sd => _1;
    let mut _0: D<'_>;

    bb0: {
        _0 = D::<'_> { sd: _1 };
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: A;
    let mut _3: &mut A;
    let mut _5: &mut B<'_>;
    let mut _7: &mut C<'_>;
    let _8: ();
    let mut _9: std::fmt::Arguments<'_>;
    let mut _10: &[&str];
    let _11: &[&str; 2];
    let _12: [&str; 2];
    let mut _13: &[core::fmt::rt::Argument<'_>];
    let _14: &[core::fmt::rt::Argument<'_>; 1];
    let _15: [core::fmt::rt::Argument<'_>; 1];
    let mut _16: core::fmt::rt::Argument<'_>;
    let _17: &D<'_>;
    scope 1 {
        debug a => const A {{  }};
        let mut _2: B<'_>;
        scope 2 {
            debug b => _2;
            let mut _4: C<'_>;
            scope 3 {
                debug c => _4;
                let _6: D<'_>;
                scope 4 {
                    debug d => _6;
                }
            }
        }
    }

    bb0: {
        _1 = init_a() -> bb1;
    }

    bb1: {
        _3 = &mut _1;
        _2 = init_b(_3) -> bb2;
    }

    bb2: {
        _5 = &mut _2;
        _4 = init_c(_5) -> bb3;
    }

    bb3: {
        _7 = &mut _4;
        _6 = init_d(_7) -> bb4;
    }

    bb4: {
        _12 = [const "", const "\n"];
        _11 = &_12;
        _10 = _11 as &[&str] (Pointer(Unsize));
        _17 = &_6;
        _16 = core::fmt::rt::Argument::<'_>::new_debug::<D<'_>>(_17) -> bb5;
    }

    bb5: {
        _15 = [move _16];
        _14 = &_15;
        _13 = _14 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _9 = Arguments::<'_>::new_v1(move _10, move _13) -> bb6;
    }

    bb6: {
        _8 = _print(move _9) -> bb7;
    }

    bb7: {
        return;
    }
}
