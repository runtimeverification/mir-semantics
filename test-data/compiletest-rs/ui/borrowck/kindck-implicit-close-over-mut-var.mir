// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn user(_1: isize) -> () {
    debug _i => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn foo() -> () {
    let mut _0: ();
    let mut _1: isize;
    let mut _3: [closure@ui/borrowck/kindck-implicit-close-over-mut-var.rs:13:27: 13:33];
    let _4: ();
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let _7: &[&str; 2];
    let _8: [&str; 2];
    let mut _9: &[core::fmt::rt::Argument<'_>];
    let _10: &[core::fmt::rt::Argument<'_>; 1];
    let _11: [core::fmt::rt::Argument<'_>; 1];
    let mut _12: core::fmt::rt::Argument<'_>;
    let _13: &isize;
    let _14: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _15: std::thread::JoinHandle<()>;
    let mut _16: bool;
    scope 1 {
        debug i => _1;
        let _2: std::thread::JoinHandle<()>;
        scope 2 {
            debug t => _2;
        }
    }

    bb0: {
        _16 = const false;
        _1 = const 0_isize;
        _3 = [closure@ui/borrowck/kindck-implicit-close-over-mut-var.rs:13:27: 13:33] { i: _1 };
        _16 = const true;
        _2 = spawn::<[closure@ui/borrowck/kindck-implicit-close-over-mut-var.rs:13:27: 13:33], ()>(move _3) -> bb1;
    }

    bb1: {
        _1 = Add(_1, const 1_isize);
        _8 = [const "original ", const "\n"];
        _7 = &_8;
        _6 = _7 as &[&str] (Pointer(Unsize));
        _13 = &_1;
        _12 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_13) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        _11 = [move _12];
        _10 = &_11;
        _9 = _10 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _5 = Arguments::<'_>::new_v1(move _6, move _9) -> [return: bb3, unwind: bb9];
    }

    bb3: {
        _4 = _print(move _5) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        _16 = const false;
        _15 = move _2;
        _14 = JoinHandle::<()>::join(move _15) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        drop(_14) -> [return: bb6, unwind: bb9];
    }

    bb6: {
        _16 = const false;
        return;
    }

    bb7 (cleanup): {
        resume;
    }

    bb8 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate];
    }

    bb9 (cleanup): {
        switchInt(_16) -> [0: bb7, otherwise: bb8];
    }
}

fn foo::{closure#0}(_1: [closure@ui/borrowck/kindck-implicit-close-over-mut-var.rs:13:27: 13:33]) -> () {
    debug i => (_1.0: isize);
    let mut _0: ();
    let _2: ();
    let mut _3: isize;
    let _4: ();
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let _7: &[&str; 2];
    let _8: [&str; 2];
    let mut _9: &[core::fmt::rt::Argument<'_>];
    let _10: &[core::fmt::rt::Argument<'_>; 1];
    let _11: [core::fmt::rt::Argument<'_>; 1];
    let mut _12: core::fmt::rt::Argument<'_>;
    let _13: &isize;

    bb0: {
        _3 = (_1.0: isize);
        _2 = user(move _3) -> bb1;
    }

    bb1: {
        _8 = [const "spawned ", const "\n"];
        _7 = &_8;
        _6 = _7 as &[&str] (Pointer(Unsize));
        _13 = &(_1.0: isize);
        _12 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_13) -> bb2;
    }

    bb2: {
        _11 = [move _12];
        _10 = &_11;
        _9 = _10 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _5 = Arguments::<'_>::new_v1(move _6, move _9) -> bb3;
    }

    bb3: {
        _4 = _print(move _5) -> bb4;
    }

    bb4: {
        return;
    }
}

fn bar() -> () {
    let mut _0: ();
    let mut _1: isize;
    let mut _2: bool;
    let mut _3: isize;
    let mut _5: [closure@ui/borrowck/kindck-implicit-close-over-mut-var.rs:27:31: 27:37];
    let _6: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _7: std::thread::JoinHandle<()>;
    scope 1 {
        debug i => _1;
        let _4: std::thread::JoinHandle<()>;
        scope 2 {
            debug t => _4;
        }
    }

    bb0: {
        _1 = const 0_isize;
        goto -> bb1;
    }

    bb1: {
        _3 = _1;
        _2 = Lt(move _3, const 10_isize);
        switchInt(move _2) -> [0: bb5, otherwise: bb2];
    }

    bb2: {
        _5 = [closure@ui/borrowck/kindck-implicit-close-over-mut-var.rs:27:31: 27:37] { i: _1 };
        _4 = spawn::<[closure@ui/borrowck/kindck-implicit-close-over-mut-var.rs:27:31: 27:37], ()>(move _5) -> bb3;
    }

    bb3: {
        _1 = Add(_1, const 1_isize);
        _7 = move _4;
        _6 = JoinHandle::<()>::join(move _7) -> bb4;
    }

    bb4: {
        drop(_6) -> bb1;
    }

    bb5: {
        return;
    }
}

fn bar::{closure#0}(_1: [closure@ui/borrowck/kindck-implicit-close-over-mut-var.rs:27:31: 27:37]) -> () {
    debug i => (_1.0: isize);
    let mut _0: ();
    let _2: ();
    let mut _3: isize;

    bb0: {
        _3 = (_1.0: isize);
        _2 = user(move _3) -> bb1;
    }

    bb1: {
        return;
    }
}

fn car() -> () {
    let mut _0: ();
    let mut _1: isize;
    let mut _2: bool;
    let mut _3: isize;
    let mut _5: [closure@ui/borrowck/kindck-implicit-close-over-mut-var.rs:39:31: 39:37];
    let _6: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _7: std::thread::JoinHandle<()>;
    scope 1 {
        debug i => _1;
        let _4: std::thread::JoinHandle<()>;
        scope 2 {
            debug t => _4;
        }
    }

    bb0: {
        _1 = const 0_isize;
        goto -> bb1;
    }

    bb1: {
        _3 = _1;
        _2 = Lt(move _3, const 10_isize);
        switchInt(move _2) -> [0: bb5, otherwise: bb2];
    }

    bb2: {
        _5 = [closure@ui/borrowck/kindck-implicit-close-over-mut-var.rs:39:31: 39:37] { i: _1 };
        _4 = spawn::<[closure@ui/borrowck/kindck-implicit-close-over-mut-var.rs:39:31: 39:37], ()>(move _5) -> bb3;
    }

    bb3: {
        _1 = Add(_1, const 1_isize);
        _7 = move _4;
        _6 = JoinHandle::<()>::join(move _7) -> bb4;
    }

    bb4: {
        drop(_6) -> bb1;
    }

    bb5: {
        return;
    }
}

fn car::{closure#0}(_1: [closure@ui/borrowck/kindck-implicit-close-over-mut-var.rs:39:31: 39:37]) -> () {
    debug i => (_1.0: isize);
    let mut _0: ();
    let mut _2: isize;
    let _3: ();
    let mut _4: isize;
    scope 1 {
        debug i => _2;
    }

    bb0: {
        _2 = (_1.0: isize);
        _2 = Add(_2, const 1_isize);
        _4 = _2;
        _3 = user(move _4) -> bb1;
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
