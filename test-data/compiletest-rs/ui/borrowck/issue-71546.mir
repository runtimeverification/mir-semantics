// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn serialize_as_csv(_1: &V) -> Result<String, &str> {
    debug value => _1;
    let mut _0: std::result::Result<std::string::String, &str>;
    let _2: std::string::String;
    let mut _3: std::iter::Map<<&V as std::iter::IntoIterator>::IntoIter, [closure@ui/borrowck/issue-71546.rs:13:49: 13:55]>;
    let mut _4: <&V as std::iter::IntoIterator>::IntoIter;
    let mut _5: std::string::String;
    scope 1 {
        debug csv_str => _2;
    }

    bb0: {
        _4 = <&V as IntoIterator>::into_iter(_1) -> bb1;
    }

    bb1: {
        _3 = <<&V as IntoIterator>::IntoIter as Iterator>::map::<String, [closure@ui/borrowck/issue-71546.rs:13:49: 13:55]>(move _4, const ZeroSized: [closure@ui/borrowck/issue-71546.rs:13:49: 13:55]) -> bb2;
    }

    bb2: {
        _2 = <Map<<&V as IntoIterator>::IntoIter, [closure@ui/borrowck/issue-71546.rs:13:49: 13:55]> as Iterator>::collect::<String>(move _3) -> bb3;
    }

    bb3: {
        _5 = move _2;
        _0 = Result::<String, &str>::Ok(move _5);
        return;
    }
}

fn serialize_as_csv::{closure#0}(_1: &mut [closure@ui/borrowck/issue-71546.rs:13:49: 13:55], _2: <&V as IntoIterator>::Item) -> String {
    debug elem => _2;
    let mut _0: std::string::String;
    let mut _3: &<&V as std::iter::IntoIterator>::Item;

    bb0: {
        _3 = &_2;
        _0 = <<&V as IntoIterator>::Item as ToString>::to_string(move _3) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_2) -> bb2;
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
