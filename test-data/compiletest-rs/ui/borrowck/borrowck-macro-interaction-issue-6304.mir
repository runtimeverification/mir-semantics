// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/borrowck/borrowck-macro-interaction-issue-6304.rs:19:1: 19:9>::elaborate_stm(_1: &mut Foo, _2: Box<Bar>) -> Box<Bar> {
    debug self => _1;
    debug s => _2;
    let mut _0: std::boxed::Box<Bar>;
    let mut _3: isize;
    let _4: isize;
    let _5: std::boxed::Box<Bar>;
    let _6: ();
    let mut _7: Bar;
    let mut _8: std::boxed::Box<Bar>;
    let mut _9: std::boxed::Box<Bar>;
    let mut _10: !;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: &mut std::boxed::Box<Bar>;
    let mut _14: ();
    let mut _15: &mut std::boxed::Box<Bar>;
    let mut _16: ();
    let mut _17: isize;
    let mut _18: *const Bar;
    let mut _19: *const Bar;
    let mut _20: *const Bar;
    let mut _21: *const Bar;
    let mut _22: *const Bar;
    let mut _23: *const Bar;
    let mut _24: *const ();
    let mut _25: usize;
    let mut _26: usize;
    let mut _27: usize;
    let mut _28: usize;
    let mut _29: bool;
    let mut _30: *const ();
    let mut _31: usize;
    let mut _32: usize;
    let mut _33: usize;
    let mut _34: usize;
    let mut _35: bool;
    let mut _36: *const ();
    let mut _37: usize;
    let mut _38: usize;
    let mut _39: usize;
    let mut _40: usize;
    let mut _41: bool;
    let mut _42: *const ();
    let mut _43: usize;
    let mut _44: usize;
    let mut _45: usize;
    let mut _46: usize;
    let mut _47: bool;
    let mut _48: *const ();
    let mut _49: usize;
    let mut _50: usize;
    let mut _51: usize;
    let mut _52: usize;
    let mut _53: bool;
    scope 1 {
        debug id => _4;
        debug rest => _5;
    }

    bb0: {
        _11 = const false;
        _12 = const false;
        _12 = const true;
        _21 = (((_2.0: std::ptr::Unique<Bar>).0: std::ptr::NonNull<Bar>).0: *const Bar);
        _48 = _21 as *const () (PtrToPtr);
        _49 = _48 as usize (Transmute);
        _50 = AlignOf(Bar);
        _51 = Sub(_50, const 1_usize);
        _52 = BitAnd(_49, _51);
        _53 = Eq(_52, const 0_usize);
        assert(_53, "misaligned pointer dereference: address must be a multiple of {} but is {}", _50, _49) -> [success: bb18, unwind unreachable];
    }

    bb1: {
        _10 = begin_panic::<&str>(const "explicit panic") -> bb13;
    }

    bb2: {
        _22 = (((_2.0: std::ptr::Unique<Bar>).0: std::ptr::NonNull<Bar>).0: *const Bar);
        _42 = _22 as *const () (PtrToPtr);
        _43 = _42 as usize (Transmute);
        _44 = AlignOf(Bar);
        _45 = Sub(_44, const 1_usize);
        _46 = BitAnd(_43, _45);
        _47 = Eq(_46, const 0_usize);
        assert(_47, "misaligned pointer dereference: address must be a multiple of {} but is {}", _44, _43) -> [success: bb17, unwind unreachable];
    }

    bb3: {
        _11 = const false;
        _9 = move _5;
        _8 = Foo::elaborate_stm(_1, move _9) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        _7 = Bar::Bar2(_4, move _8);
        _0 = Box::<Bar>::new(move _7) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        _11 = const false;
        _18 = deref_copy (((_2.0: std::ptr::Unique<Bar>).0: std::ptr::NonNull<Bar>).0: *const Bar);
        _30 = _18 as *const () (PtrToPtr);
        _31 = _30 as usize (Transmute);
        _32 = AlignOf(Bar);
        _33 = Sub(_32, const 1_usize);
        _34 = BitAnd(_31, _33);
        _35 = Eq(_34, const 0_usize);
        assert(_35, "misaligned pointer dereference: address must be a multiple of {} but is {}", _32, _31) -> [success: bb15, unwind unreachable];
    }

    bb6 (cleanup): {
        resume;
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_5) -> [return: bb13, unwind terminate];
    }

    bb9 (cleanup): {
        switchInt(_11) -> [0: bb13, otherwise: bb8];
    }

    bb10 (cleanup): {
        _15 = &mut _2;
        _16 = <Box<Bar> as Drop>::drop(move _15) -> [return: bb6, unwind terminate];
    }

    bb11 (cleanup): {
        switchInt(_12) -> [0: bb10, otherwise: bb12];
    }

    bb12 (cleanup): {
        _19 = deref_copy (((_2.0: std::ptr::Unique<Bar>).0: std::ptr::NonNull<Bar>).0: *const Bar);
        drop((((*_19) as Bar2).1: std::boxed::Box<Bar>)) -> [return: bb10, unwind terminate];
    }

    bb13 (cleanup): {
        _20 = deref_copy (((_2.0: std::ptr::Unique<Bar>).0: std::ptr::NonNull<Bar>).0: *const Bar);
        _24 = _20 as *const () (PtrToPtr);
        _25 = _24 as usize (Transmute);
        _26 = AlignOf(Bar);
        _27 = Sub(_26, const 1_usize);
        _28 = BitAnd(_25, _27);
        _29 = Eq(_28, const 0_usize);
        assert(_29, "misaligned pointer dereference: address must be a multiple of {} but is {}", _26, _25) -> [success: bb14, unwind unreachable];
    }

    bb14 (cleanup): {
        _17 = discriminant((*_20));
        switchInt(move _17) -> [1: bb11, otherwise: bb10];
    }

    bb15: {
        _13 = &mut _2;
        _14 = <Box<Bar> as Drop>::drop(move _13) -> bb7;
    }

    bb16: {
        _5 = move (((*_23) as Bar2).1: std::boxed::Box<Bar>);
        _6 = Foo::check_id(_1, _4) -> [return: bb3, unwind: bb9];
    }

    bb17: {
        _4 = (((*_22) as Bar2).0: isize);
        _12 = const false;
        _11 = const true;
        _23 = (((_2.0: std::ptr::Unique<Bar>).0: std::ptr::NonNull<Bar>).0: *const Bar);
        _36 = _23 as *const () (PtrToPtr);
        _37 = _36 as usize (Transmute);
        _38 = AlignOf(Bar);
        _39 = Sub(_38, const 1_usize);
        _40 = BitAnd(_37, _39);
        _41 = Eq(_40, const 0_usize);
        assert(_41, "misaligned pointer dereference: address must be a multiple of {} but is {}", _38, _37) -> [success: bb16, unwind unreachable];
    }

    bb18: {
        _3 = discriminant((*_21));
        switchInt(move _3) -> [1: bb2, otherwise: bb1];
    }
}

fn <impl at ui/borrowck/borrowck-macro-interaction-issue-6304.rs:19:1: 19:9>::check_id(_1: &mut Foo, _2: isize) -> () {
    debug self => _1;
    debug s => _2;
    let mut _0: ();
    let mut _3: !;

    bb0: {
        _3 = begin_panic::<&str>(const "explicit panic");
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn Bar::Bar2(_1: isize, _2: Box<Bar>) -> Bar {
    let mut _0: Bar;

    bb0: {
        _0 = Bar::Bar2(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn Bar::Bar2(_1: isize, _2: Box<Bar>) -> Bar {
    let mut _0: Bar;

    bb0: {
        _0 = Bar::Bar2(move _1, move _2);
        return;
    }
}
