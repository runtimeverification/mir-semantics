// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn mutable_address_of() -> () {
    let mut _0: ();
    let mut _1: i32;
    scope 1 {
        debug x => _1;
        let _2: *mut i32;
        scope 2 {
            debug y => _2;
        }
    }

    bb0: {
        _1 = const 0_i32;
        _2 = &raw mut _1;
        return;
    }
}

fn mutable_address_of_closure() -> () {
    let mut _0: ();
    let mut _1: i32;
    let mut _3: &mut i32;
    let _4: ();
    let mut _5: &mut [closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:12:17: 12:19];
    scope 1 {
        debug x => _1;
        let mut _2: [closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:12:17: 12:19];
        scope 2 {
            debug f => _2;
        }
    }

    bb0: {
        _1 = const 0_i32;
        _3 = &mut _1;
        _2 = [closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:12:17: 12:19] { x: move _3 };
        _5 = &mut _2;
        _4 = <[closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:12:17: 12:19] as FnMut<()>>::call_mut(move _5, const ()) -> bb1;
    }

    bb1: {
        return;
    }
}

fn mutable_address_of_closure::{closure#0}(_1: &mut [closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:12:17: 12:19]) -> () {
    debug x => (*((*_1).0: &mut i32));
    let mut _0: ();
    let _2: *mut i32;
    let mut _3: &mut i32;
    scope 1 {
        debug y => _2;
    }

    bb0: {
        _3 = deref_copy ((*_1).0: &mut i32);
        _2 = &raw mut (*_3);
        return;
    }
}

fn const_address_of_closure() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _3: &i32;
    let _4: ();
    let mut _5: &[closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:20:13: 20:15];
    scope 1 {
        debug x => _1;
        let _2: [closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:20:13: 20:15];
        scope 2 {
            debug f => _2;
        }
    }

    bb0: {
        _1 = const 0_i32;
        _3 = &_1;
        _2 = [closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:20:13: 20:15] { x: move _3 };
        _5 = &_2;
        _4 = <[closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:20:13: 20:15] as Fn<()>>::call(move _5, const ()) -> bb1;
    }

    bb1: {
        return;
    }
}

fn const_address_of_closure::{closure#0}(_1: &[closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:20:13: 20:15]) -> () {
    debug x => (*((*_1).0: &i32));
    let mut _0: ();
    let _2: *const i32;
    let mut _3: &i32;
    scope 1 {
        debug y => _2;
    }

    bb0: {
        _3 = deref_copy ((*_1).0: &i32);
        _2 = &raw const (*_3);
        return;
    }
}

fn make_fn(_1: F) -> F {
    debug f => _1;
    let mut _0: F;

    bb0: {
        _0 = move _1;
        return;
    }
}

fn const_address_of_fn_closure() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _3: [closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:30:21: 30:23];
    let mut _4: &i32;
    let _5: ();
    let mut _6: &[closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:30:21: 30:23];
    scope 1 {
        debug x => _1;
        let _2: [closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:30:21: 30:23];
        scope 2 {
            debug f => _2;
        }
    }

    bb0: {
        _1 = const 0_i32;
        _4 = &_1;
        _3 = [closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:30:21: 30:23] { x: move _4 };
        _2 = make_fn::<[closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:30:21: 30:23]>(move _3) -> bb1;
    }

    bb1: {
        _6 = &_2;
        _5 = <[closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:30:21: 30:23] as Fn<()>>::call(move _6, const ()) -> bb2;
    }

    bb2: {
        return;
    }
}

fn const_address_of_fn_closure::{closure#0}(_1: &[closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:30:21: 30:23]) -> () {
    debug x => (*((*_1).0: &i32));
    let mut _0: ();
    let _2: *const i32;
    let mut _3: &i32;
    scope 1 {
        debug y => _2;
    }

    bb0: {
        _3 = deref_copy ((*_1).0: &i32);
        _2 = &raw const (*_3);
        return;
    }
}

fn const_address_of_fn_closure_move() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _3: [closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:38:21: 38:28];
    let _4: ();
    let mut _5: &[closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:38:21: 38:28];
    scope 1 {
        debug x => _1;
        let _2: [closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:38:21: 38:28];
        scope 2 {
            debug f => _2;
        }
    }

    bb0: {
        _1 = const 0_i32;
        _3 = [closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:38:21: 38:28] { x: _1 };
        _2 = make_fn::<[closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:38:21: 38:28]>(move _3) -> bb1;
    }

    bb1: {
        _5 = &_2;
        _4 = <[closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:38:21: 38:28] as Fn<()>>::call(move _5, const ()) -> bb2;
    }

    bb2: {
        return;
    }
}

fn const_address_of_fn_closure_move::{closure#0}(_1: &[closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:38:21: 38:28]) -> () {
    debug x => ((*_1).0: i32);
    let mut _0: ();
    let _2: *const i32;
    scope 1 {
        debug y => _2;
    }

    bb0: {
        _2 = &raw const ((*_1).0: i32);
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
