// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: std::boxed::Box<Foo>;
    let mut _2: Foo;
    let mut _5: (&mut isize, &mut isize);
    let mut _6: &mut isize;
    let mut _7: &mut isize;
    let mut _9: Foo;
    let mut _12: (&mut isize, &isize);
    let mut _13: &mut isize;
    let mut _14: &isize;
    let _15: ();
    let _16: ();
    let _17: ();
    let _18: ();
    let mut _19: *const Foo;
    let mut _20: *const Foo;
    let mut _21: *const Foo;
    let mut _22: *const Foo;
    scope 1 {
        debug x => _1;
        let _3: &mut isize;
        let _4: &mut isize;
        let mut _35: *const ();
        let mut _36: usize;
        let mut _37: usize;
        let mut _38: usize;
        let mut _39: usize;
        let mut _40: bool;
        let mut _41: *const ();
        let mut _42: usize;
        let mut _43: usize;
        let mut _44: usize;
        let mut _45: usize;
        let mut _46: bool;
        scope 2 {
            debug a => _3;
            debug b => _4;
            let mut _8: std::boxed::Box<Foo>;
            scope 3 {
                debug foo => _8;
                let _10: &mut isize;
                let _11: &isize;
                let mut _23: *const ();
                let mut _24: usize;
                let mut _25: usize;
                let mut _26: usize;
                let mut _27: usize;
                let mut _28: bool;
                let mut _29: *const ();
                let mut _30: usize;
                let mut _31: usize;
                let mut _32: usize;
                let mut _33: usize;
                let mut _34: bool;
                scope 4 {
                    debug c => _10;
                    debug d => _11;
                }
            }
        }
    }

    bb0: {
        _2 = Foo { a: const 1_isize, b: const 2_isize };
        _1 = Box::<Foo>::new(move _2) -> bb1;
    }

    bb1: {
        _19 = (((_1.0: std::ptr::Unique<Foo>).0: std::ptr::NonNull<Foo>).0: *const Foo);
        _41 = _19 as *const () (PtrToPtr);
        _42 = _41 as usize (Transmute);
        _43 = AlignOf(Foo);
        _44 = Sub(_43, const 1_usize);
        _45 = BitAnd(_42, _44);
        _46 = Eq(_45, const 0_usize);
        assert(_46, "misaligned pointer dereference: address must be a multiple of {} but is {}", _43, _42) -> [success: bb15, unwind unreachable];
    }

    bb2: {
        _21 = (((_8.0: std::ptr::Unique<Foo>).0: std::ptr::NonNull<Foo>).0: *const Foo);
        _29 = _21 as *const () (PtrToPtr);
        _30 = _29 as usize (Transmute);
        _31 = AlignOf(Foo);
        _32 = Sub(_31, const 1_usize);
        _33 = BitAnd(_30, _32);
        _34 = Eq(_33, const 0_usize);
        assert(_34, "misaligned pointer dereference: address must be a multiple of {} but is {}", _31, _30) -> [success: bb13, unwind unreachable];
    }

    bb3: {
        _16 = use_mut::<isize>(_10) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        _17 = use_mut::<isize>(_4) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        _18 = use_mut::<isize>(_3) -> [return: bb6, unwind: bb9];
    }

    bb6: {
        drop(_8) -> [return: bb7, unwind: bb10];
    }

    bb7: {
        drop(_1) -> bb8;
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_8) -> [return: bb10, unwind terminate];
    }

    bb10 (cleanup): {
        drop(_1) -> [return: bb11, unwind terminate];
    }

    bb11 (cleanup): {
        resume;
    }

    bb12: {
        _14 = &((*_22).1: isize);
        _12 = (move _13, move _14);
        _10 = move (_12.0: &mut isize);
        _11 = (_12.1: &isize);
        _15 = use_imm::<isize>(_11) -> [return: bb3, unwind: bb9];
    }

    bb13: {
        _13 = &mut ((*_21).0: isize);
        _22 = (((_8.0: std::ptr::Unique<Foo>).0: std::ptr::NonNull<Foo>).0: *const Foo);
        _23 = _22 as *const () (PtrToPtr);
        _24 = _23 as usize (Transmute);
        _25 = AlignOf(Foo);
        _26 = Sub(_25, const 1_usize);
        _27 = BitAnd(_24, _26);
        _28 = Eq(_27, const 0_usize);
        assert(_28, "misaligned pointer dereference: address must be a multiple of {} but is {}", _25, _24) -> [success: bb12, unwind unreachable];
    }

    bb14: {
        _7 = &mut ((*_20).1: isize);
        _5 = (move _6, move _7);
        _3 = move (_5.0: &mut isize);
        _4 = move (_5.1: &mut isize);
        _9 = Foo { a: const 1_isize, b: const 2_isize };
        _8 = Box::<Foo>::new(move _9) -> [return: bb2, unwind: bb10];
    }

    bb15: {
        _6 = &mut ((*_19).0: isize);
        _20 = (((_1.0: std::ptr::Unique<Foo>).0: std::ptr::NonNull<Foo>).0: *const Foo);
        _35 = _20 as *const () (PtrToPtr);
        _36 = _35 as usize (Transmute);
        _37 = AlignOf(Foo);
        _38 = Sub(_37, const 1_usize);
        _39 = BitAnd(_36, _38);
        _40 = Eq(_39, const 0_usize);
        assert(_40, "misaligned pointer dereference: address must be a multiple of {} but is {}", _37, _36) -> [success: bb14, unwind unreachable];
    }
}

fn use_mut(_1: &mut T) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn use_imm(_1: &T) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
