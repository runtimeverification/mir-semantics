// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn borrow(_1: &isize) -> () {
    debug _v => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn borrow_from_arg_imm_ref(_1: Box<isize>) -> () {
    debug v => _1;
    let mut _0: ();
    let _2: ();
    let _3: &isize;
    let mut _4: *const isize;
    let mut _5: *const ();
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: bool;

    bb0: {
        _4 = (((_1.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize);
        _5 = _4 as *const () (PtrToPtr);
        _6 = _5 as usize (Transmute);
        _7 = AlignOf(isize);
        _8 = Sub(_7, const 1_usize);
        _9 = BitAnd(_6, _8);
        _10 = Eq(_9, const 0_usize);
        assert(_10, "misaligned pointer dereference: address must be a multiple of {} but is {}", _7, _6) -> [success: bb5, unwind unreachable];
    }

    bb1: {
        drop(_1) -> bb2;
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }

    bb5: {
        _3 = &(*_4);
        _2 = borrow(_3) -> [return: bb1, unwind: bb3];
    }
}

fn borrow_from_arg_mut_ref(_1: &mut Box<isize>) -> () {
    debug v => _1;
    let mut _0: ();
    let _2: ();
    let _3: &isize;
    let mut _4: std::boxed::Box<isize>;
    let mut _5: *const isize;
    let mut _6: *const ();
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;

    bb0: {
        _4 = deref_copy (*_1);
        _5 = (((_4.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize);
        _6 = _5 as *const () (PtrToPtr);
        _7 = _6 as usize (Transmute);
        _8 = AlignOf(isize);
        _9 = Sub(_8, const 1_usize);
        _10 = BitAnd(_7, _9);
        _11 = Eq(_10, const 0_usize);
        assert(_11, "misaligned pointer dereference: address must be a multiple of {} but is {}", _8, _7) -> [success: bb2, unwind unreachable];
    }

    bb1: {
        return;
    }

    bb2: {
        _3 = &(*_5);
        _2 = borrow(_3) -> bb1;
    }
}

fn borrow_from_arg_copy(_1: Box<isize>) -> () {
    debug v => _1;
    let mut _0: ();
    let _2: ();
    let _3: &isize;
    let mut _4: *const isize;
    let mut _5: *const ();
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: bool;

    bb0: {
        _4 = (((_1.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize);
        _5 = _4 as *const () (PtrToPtr);
        _6 = _5 as usize (Transmute);
        _7 = AlignOf(isize);
        _8 = Sub(_7, const 1_usize);
        _9 = BitAnd(_6, _8);
        _10 = Eq(_9, const 0_usize);
        assert(_10, "misaligned pointer dereference: address must be a multiple of {} but is {}", _7, _6) -> [success: bb5, unwind unreachable];
    }

    bb1: {
        drop(_1) -> bb2;
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }

    bb5: {
        _3 = &(*_4);
        _2 = borrow(_3) -> [return: bb1, unwind: bb3];
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
