// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/borrowck/issue-28934.rs:10:1: 10:28>::parse_nested_block(_1: &mut Parser<'_, '_>, _2: F) -> Result<T, ()> {
    debug self => _1;
    debug parse => _2;
    let mut _0: std::result::Result<T, ()>;
    let mut _3: !;

    bb0: {
        _3 = begin_panic::<&str>(const "explicit panic") -> bb1;
    }

    bb1 (cleanup): {
        drop(_2) -> [return: bb2, unwind terminate];
    }

    bb2 (cleanup): {
        resume;
    }
}

fn <impl at ui/borrowck/issue-28934.rs:10:1: 10:28>::expect_exhausted(_1: &mut Parser<'_, '_>) -> Result<(), ()> {
    debug self => _1;
    let mut _0: std::result::Result<(), ()>;

    bb0: {
        _0 = Result::<(), ()>::Ok(const ());
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: u8;
    let _2: std::result::Result<(), ()>;
    let mut _3: std::result::Result<std::result::Result<(), ()>, ()>;
    let mut _4: &mut Parser<'_, '_>;
    let mut _5: Parser<'_, '_>;
    let _6: &u8;
    let _7: &u8;
    scope 1 {
        debug x => _1;
    }

    bb0: {
        _1 = const 0_u8;
        _6 = &_1;
        _7 = &_1;
        _5 = Parser::<'_, '_>(_6, _7);
        _4 = &mut _5;
        _3 = Parser::<'_, '_>::parse_nested_block::<[closure@ui/borrowck/issue-28934.rs:24:39: 24:46], Result<(), ()>>(move _4, const ZeroSized: [closure@ui/borrowck/issue-28934.rs:24:39: 24:46]) -> bb1;
    }

    bb1: {
        _2 = Result::<Result<(), ()>, ()>::unwrap(move _3) -> bb2;
    }

    bb2: {
        return;
    }
}

fn main::{closure#0}(_1: [closure@ui/borrowck/issue-28934.rs:24:39: 24:46], _2: &mut Parser<'_, '_>) -> Result<(), ()> {
    debug input => _2;
    let mut _0: std::result::Result<(), ()>;

    bb0: {
        _0 = Parser::<'_, '_>::expect_exhausted(_2) -> bb1;
    }

    bb1: {
        return;
    }
}

fn Parser(_1: &u8, _2: &u8) -> Parser<'_, '_> {
    let mut _0: Parser<'_, '_>;

    bb0: {
        _0 = Parser::<'_, '_>(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn Parser(_1: &u8, _2: &u8) -> Parser<'_, '_> {
    let mut _0: Parser<'_, '_>;

    bb0: {
        _0 = Parser::<'_, '_>(move _1, move _2);
        return;
    }
}
