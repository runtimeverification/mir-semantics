// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static mut Y: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const 0_u32;
        return;
    }
}

fn should_ok() -> () {
    let mut _0: ();
    let mut _1: *mut u32;
    let mut _2: *const ();
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: bool;

    bb0: {
        _1 = const {alloc1: *mut u32};
        _2 = _1 as *const () (PtrToPtr);
        _3 = _2 as usize (Transmute);
        _4 = AlignOf(u32);
        _5 = Sub(_4, const 1_usize);
        _6 = BitAnd(_3, _5);
        _7 = Eq(_6, const 0_usize);
        assert(_7, "misaligned pointer dereference: address must be a multiple of {} but is {}", _4, _3) -> [success: bb1, unwind unreachable];
    }

    bb1: {
        (*_1) = const 1_u32;
        return;
    }
}

alloc1 (static: Y, size: 4, align: 4) {
    00 00 00 00                                     â”‚ ....
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
