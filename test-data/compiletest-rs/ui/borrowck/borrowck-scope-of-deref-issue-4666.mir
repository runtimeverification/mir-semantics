// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/borrowck/borrowck-scope-of-deref-issue-4666.rs:11:1: 11:9>::get(_1: &Box) -> &usize {
    debug self => _1;
    let mut _0: &usize;

    bb0: {
        _0 = &((*_1).0: usize);
        return;
    }
}

fn <impl at ui/borrowck/borrowck-scope-of-deref-issue-4666.rs:11:1: 11:9>::set(_1: &mut Box, _2: usize) -> () {
    debug self => _1;
    debug x => _2;
    let mut _0: ();

    bb0: {
        ((*_1).0: usize) = _2;
        return;
    }
}

fn fun1() -> () {
    let mut _0: ();
    let _2: ();
    let mut _3: &mut Box;
    let mut _4: usize;
    let mut _5: &usize;
    let mut _6: &Box;
    let _7: ();
    let mut _8: &mut Box;
    let mut _9: usize;
    let mut _10: (&usize, &usize);
    let mut _11: &usize;
    let _12: usize;
    let mut _13: &usize;
    let _14: &usize;
    let mut _15: &Box;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: usize;
    let mut _21: usize;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug v => _4;
        let mut _1: Box;
        scope 2 {
            debug a_box => _1;
            let _16: &usize;
            let _17: &usize;
            scope 3 {
                debug left_val => _16;
                debug right_val => _17;
                let _22: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _22;
                }
            }
        }
    }

    bb0: {
        _1 = Box { x: const 0_usize };
        _3 = &mut _1;
        _2 = Box::set(move _3, const 22_usize) -> bb1;
    }

    bb1: {
        _6 = &_1;
        _5 = Box::get(move _6) -> bb2;
    }

    bb2: {
        _4 = (*_5);
        _8 = &mut _1;
        _9 = Add(_4, const 1_usize);
        _7 = Box::set(move _8, move _9) -> bb3;
    }

    bb3: {
        _12 = const 23_usize;
        _11 = &_12;
        _15 = &_1;
        _14 = Box::get(move _15) -> bb4;
    }

    bb4: {
        _13 = _14;
        _10 = (move _11, move _13);
        _16 = (_10.0: &usize);
        _17 = (_10.1: &usize);
        _20 = (*_16);
        _21 = (*_17);
        _19 = Eq(move _20, move _21);
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<usize, usize>(move _22, _16, _17, move _24);
    }

    bb6: {
        return;
    }
}

fn fun2() -> () {
    let mut _0: ();
    let mut _1: Box;
    let _2: ();
    let mut _3: &mut Box;
    let mut _5: &usize;
    let mut _6: &Box;
    let _7: ();
    let mut _8: &mut Box;
    let mut _9: usize;
    let mut _10: (&usize, &usize);
    let mut _11: &usize;
    let _12: usize;
    let mut _13: &usize;
    let _14: &usize;
    let mut _15: &Box;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: usize;
    let mut _21: usize;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug a_box => _1;
        let _4: usize;
        scope 2 {
            debug v => _4;
            let _16: &usize;
            let _17: &usize;
            scope 3 {
                debug left_val => _16;
                debug right_val => _17;
                let _22: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _22;
                }
            }
        }
    }

    bb0: {
        _1 = Box { x: const 0_usize };
        _3 = &mut _1;
        _2 = Box::set(move _3, const 22_usize) -> bb1;
    }

    bb1: {
        _6 = &_1;
        _5 = Box::get(move _6) -> bb2;
    }

    bb2: {
        _4 = (*_5);
        _8 = &mut _1;
        _9 = Add(_4, const 1_usize);
        _7 = Box::set(move _8, move _9) -> bb3;
    }

    bb3: {
        _12 = const 23_usize;
        _11 = &_12;
        _15 = &_1;
        _14 = Box::get(move _15) -> bb4;
    }

    bb4: {
        _13 = _14;
        _10 = (move _11, move _13);
        _16 = (_10.0: &usize);
        _17 = (_10.1: &usize);
        _20 = (*_16);
        _21 = (*_17);
        _19 = Eq(move _20, move _21);
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<usize, usize>(move _22, _16, _17, move _24);
    }

    bb6: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();

    bb0: {
        _1 = fun1() -> bb1;
    }

    bb1: {
        _2 = fun2() -> bb2;
    }

    bb2: {
        return;
    }
}
