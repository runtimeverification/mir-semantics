// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: char;
    let mut _3: (&char, &char);
    let mut _4: &char;
    let mut _5: &char;
    let _6: char;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: char;
    let mut _12: char;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&char, &char);
    let mut _17: &char;
    let _18: char;
    let mut _19: &char;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: char;
    let mut _25: char;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: (&char, &char);
    let mut _30: &char;
    let mut _31: &char;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: char;
    let mut _37: char;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _41: (&char, &char);
    let mut _42: &char;
    let mut _43: &char;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: char;
    let mut _49: char;
    let _51: !;
    let mut _52: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _53: (&char, &char);
    let mut _54: &char;
    let mut _55: &char;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: char;
    let mut _61: char;
    let _63: !;
    let mut _64: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _65: (&char, &char);
    let mut _66: &char;
    let mut _67: &char;
    let _68: char;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: char;
    let mut _74: char;
    let _76: !;
    let mut _77: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _78: (&char, &char);
    let mut _79: &char;
    let _80: char;
    let mut _81: &char;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: char;
    let mut _87: char;
    let _89: !;
    let mut _90: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug c => _1;
        let _2: char;
        scope 2 {
            debug d => _2;
            let _7: &char;
            let _8: &char;
            let _20: &char;
            let _21: &char;
            let _32: &char;
            let _33: &char;
            let _44: &char;
            let _45: &char;
            let _56: &char;
            let _57: &char;
            let _69: &char;
            let _70: &char;
            let _82: &char;
            let _83: &char;
            scope 3 {
                debug left_val => _7;
                debug right_val => _8;
                let _13: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _13;
                }
            }
            scope 5 {
                debug left_val => _20;
                debug right_val => _21;
                let _26: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _26;
                }
            }
            scope 7 {
                debug left_val => _32;
                debug right_val => _33;
                let _38: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _38;
                }
            }
            scope 9 {
                debug left_val => _44;
                debug right_val => _45;
                let _50: core::panicking::AssertKind;
                scope 10 {
                    debug kind => _50;
                }
            }
            scope 11 {
                debug left_val => _56;
                debug right_val => _57;
                let _62: core::panicking::AssertKind;
                scope 12 {
                    debug kind => _62;
                }
            }
            scope 13 {
                debug left_val => _69;
                debug right_val => _70;
                let _75: core::panicking::AssertKind;
                scope 14 {
                    debug kind => _75;
                }
            }
            scope 15 {
                debug left_val => _82;
                debug right_val => _83;
                let _88: core::panicking::AssertKind;
                scope 16 {
                    debug kind => _88;
                }
            }
        }
    }

    bb0: {
        _1 = const 'x';
        _2 = const 'x';
        _4 = &_1;
        _6 = const 'x';
        _5 = &_6;
        _3 = (move _4, move _5);
        _7 = (_3.0: &char);
        _8 = (_3.1: &char);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<char, char>(move _13, _7, _8, move _15);
    }

    bb2: {
        _18 = const 'x';
        _17 = &_18;
        _19 = &_1;
        _16 = (move _17, move _19);
        _20 = (_16.0: &char);
        _21 = (_16.1: &char);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<char, char>(move _26, _20, _21, move _28);
    }

    bb4: {
        _30 = &_1;
        _31 = &_1;
        _29 = (move _30, move _31);
        _32 = (_29.0: &char);
        _33 = (_29.1: &char);
        _36 = (*_32);
        _37 = (*_33);
        _35 = Eq(move _36, move _37);
        _34 = Not(move _35);
        switchInt(move _34) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<char, char>(move _38, _32, _33, move _40);
    }

    bb6: {
        _42 = &_1;
        _43 = &_2;
        _41 = (move _42, move _43);
        _44 = (_41.0: &char);
        _45 = (_41.1: &char);
        _48 = (*_44);
        _49 = (*_45);
        _47 = Eq(move _48, move _49);
        _46 = Not(move _47);
        switchInt(move _46) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _50 = core::panicking::AssertKind::Eq;
        _52 = Option::<Arguments<'_>>::None;
        _51 = core::panicking::assert_failed::<char, char>(move _50, _44, _45, move _52);
    }

    bb8: {
        _54 = &_2;
        _55 = &_1;
        _53 = (move _54, move _55);
        _56 = (_53.0: &char);
        _57 = (_53.1: &char);
        _60 = (*_56);
        _61 = (*_57);
        _59 = Eq(move _60, move _61);
        _58 = Not(move _59);
        switchInt(move _58) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _62 = core::panicking::AssertKind::Eq;
        _64 = Option::<Arguments<'_>>::None;
        _63 = core::panicking::assert_failed::<char, char>(move _62, _56, _57, move _64);
    }

    bb10: {
        _66 = &_2;
        _68 = const 'x';
        _67 = &_68;
        _65 = (move _66, move _67);
        _69 = (_65.0: &char);
        _70 = (_65.1: &char);
        _73 = (*_69);
        _74 = (*_70);
        _72 = Eq(move _73, move _74);
        _71 = Not(move _72);
        switchInt(move _71) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _75 = core::panicking::AssertKind::Eq;
        _77 = Option::<Arguments<'_>>::None;
        _76 = core::panicking::assert_failed::<char, char>(move _75, _69, _70, move _77);
    }

    bb12: {
        _80 = const 'x';
        _79 = &_80;
        _81 = &_2;
        _78 = (move _79, move _81);
        _82 = (_78.0: &char);
        _83 = (_78.1: &char);
        _86 = (*_82);
        _87 = (*_83);
        _85 = Eq(move _86, move _87);
        _84 = Not(move _85);
        switchInt(move _84) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _88 = core::panicking::AssertKind::Eq;
        _90 = Option::<Arguments<'_>>::None;
        _89 = core::panicking::assert_failed::<char, char>(move _88, _82, _83, move _90);
    }

    bb14: {
        return;
    }
}
