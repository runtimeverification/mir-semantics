// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn range_to_inclusive() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let _3: bool;
    let mut _4: u8;
    let mut _6: &std::ops::RangeToInclusive<u8>;
    let _7: std::ops::RangeToInclusive<u8>;
    let _8: &u8;
    let _9: u8;
    let mut _10: (&bool, &bool);
    let mut _11: &bool;
    let mut _12: &bool;
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: bool;
    let _20: !;
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _22: !;
    let mut _23: bool;
    let mut _24: bool;
    let _25: bool;
    let mut _26: u8;
    let mut _27: bool;
    let mut _28: bool;
    let mut _30: &std::ops::RangeToInclusive<u8>;
    let _31: std::ops::RangeToInclusive<u8>;
    let _32: &u8;
    let _33: u8;
    let mut _34: (&bool, &bool);
    let mut _35: &bool;
    let mut _36: &bool;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: bool;
    let _44: !;
    let mut _45: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _46: !;
    let mut _47: bool;
    let mut _48: bool;
    let _49: bool;
    let mut _50: u8;
    let mut _51: bool;
    let mut _52: bool;
    let mut _54: &std::ops::RangeToInclusive<u8>;
    let _55: std::ops::RangeToInclusive<u8>;
    let _56: &u8;
    let _57: u8;
    let mut _58: (&bool, &bool);
    let mut _59: &bool;
    let mut _60: &bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let _68: !;
    let mut _69: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _70: !;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;
    let _74: bool;
    let mut _75: u8;
    let mut _76: bool;
    let mut _77: bool;
    let mut _79: &std::ops::RangeToInclusive<u8>;
    let _80: std::ops::RangeToInclusive<u8>;
    let _81: &u8;
    let _82: u8;
    let mut _83: (&bool, &bool);
    let mut _84: &bool;
    let mut _85: &bool;
    let mut _88: bool;
    let mut _89: bool;
    let mut _90: bool;
    let mut _91: bool;
    let _93: !;
    let mut _94: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _95: !;
    let mut _96: bool;
    let mut _97: bool;
    let _98: bool;
    let mut _99: i16;
    let mut _101: &std::ops::RangeToInclusive<i16>;
    let _102: std::ops::RangeToInclusive<i16>;
    let _103: &i16;
    let _104: i16;
    let mut _105: (&bool, &bool);
    let mut _106: &bool;
    let mut _107: &bool;
    let mut _110: bool;
    let mut _111: bool;
    let mut _112: bool;
    let mut _113: bool;
    let _115: !;
    let mut _116: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _117: !;
    let mut _118: bool;
    let mut _119: bool;
    let _120: bool;
    let mut _121: i16;
    let mut _122: bool;
    let mut _123: bool;
    let mut _125: &std::ops::RangeToInclusive<i16>;
    let _126: std::ops::RangeToInclusive<i16>;
    let _127: &i16;
    let _128: i16;
    let mut _129: (&bool, &bool);
    let mut _130: &bool;
    let mut _131: &bool;
    let mut _134: bool;
    let mut _135: bool;
    let mut _136: bool;
    let mut _137: bool;
    let _139: !;
    let mut _140: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _141: !;
    let mut _142: bool;
    let mut _143: bool;
    let _144: bool;
    let mut _145: i16;
    let mut _146: bool;
    let mut _147: bool;
    let mut _149: &std::ops::RangeToInclusive<i16>;
    let _150: std::ops::RangeToInclusive<i16>;
    let _151: &i16;
    let _152: i16;
    let mut _153: (&bool, &bool);
    let mut _154: &bool;
    let mut _155: &bool;
    let mut _158: bool;
    let mut _159: bool;
    let mut _160: bool;
    let mut _161: bool;
    let _163: !;
    let mut _164: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _165: !;
    let mut _166: bool;
    let mut _167: bool;
    let _168: bool;
    let mut _169: i32;
    let mut _170: bool;
    let mut _171: bool;
    let mut _173: &std::ops::RangeToInclusive<i32>;
    let _174: std::ops::RangeToInclusive<i32>;
    let _175: &i32;
    let _176: i32;
    let mut _177: (&bool, &bool);
    let mut _178: &bool;
    let mut _179: &bool;
    let mut _182: bool;
    let mut _183: bool;
    let mut _184: bool;
    let mut _185: bool;
    let _187: !;
    let mut _188: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _189: !;
    let mut _190: bool;
    let mut _191: bool;
    let mut _192: bool;
    let _193: bool;
    let mut _194: i32;
    let mut _195: bool;
    let mut _196: bool;
    let mut _198: &std::ops::RangeToInclusive<i32>;
    let _199: std::ops::RangeToInclusive<i32>;
    let _200: &i32;
    let _201: i32;
    let mut _202: (&bool, &bool);
    let mut _203: &bool;
    let mut _204: &bool;
    let mut _207: bool;
    let mut _208: bool;
    let mut _209: bool;
    let mut _210: bool;
    let _212: !;
    let mut _213: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _214: !;
    let mut _215: bool;
    let mut _216: bool;
    let _217: bool;
    let mut _218: char;
    let mut _220: &std::ops::RangeToInclusive<char>;
    let _221: std::ops::RangeToInclusive<char>;
    let _222: &char;
    let _223: char;
    let mut _224: (&bool, &bool);
    let mut _225: &bool;
    let mut _226: &bool;
    let mut _229: bool;
    let mut _230: bool;
    let mut _231: bool;
    let mut _232: bool;
    let _234: !;
    let mut _235: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _236: !;
    let mut _237: bool;
    let mut _238: bool;
    let _239: bool;
    let mut _240: char;
    let mut _241: bool;
    let mut _242: bool;
    let mut _244: &std::ops::RangeToInclusive<char>;
    let _245: std::ops::RangeToInclusive<char>;
    let _246: &char;
    let _247: char;
    let mut _248: (&bool, &bool);
    let mut _249: &bool;
    let mut _250: &bool;
    let mut _253: bool;
    let mut _254: bool;
    let mut _255: bool;
    let mut _256: bool;
    let _258: !;
    let mut _259: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _260: !;
    let mut _261: bool;
    let mut _262: bool;
    let _263: bool;
    let mut _264: char;
    let mut _265: bool;
    let mut _266: bool;
    let mut _268: &std::ops::RangeToInclusive<char>;
    let _269: std::ops::RangeToInclusive<char>;
    let _270: &char;
    let _271: char;
    let mut _272: (&bool, &bool);
    let mut _273: &bool;
    let mut _274: &bool;
    let mut _277: bool;
    let mut _278: bool;
    let mut _279: bool;
    let mut _280: bool;
    let _282: !;
    let mut _283: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _284: !;
    let mut _285: bool;
    let mut _286: bool;
    let mut _287: bool;
    let _288: bool;
    let mut _289: char;
    let mut _290: bool;
    let mut _291: bool;
    let mut _293: &std::ops::RangeToInclusive<char>;
    let _294: std::ops::RangeToInclusive<char>;
    let _295: &char;
    let _296: char;
    let mut _297: (&bool, &bool);
    let mut _298: &bool;
    let mut _299: &bool;
    let mut _302: bool;
    let mut _303: bool;
    let mut _304: bool;
    let mut _305: bool;
    let _307: !;
    let mut _308: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _309: !;
    let mut _310: bool;
    let mut _311: bool;
    let _312: bool;
    let mut _313: f32;
    let mut _314: bool;
    let mut _316: &std::ops::RangeToInclusive<f32>;
    let _317: std::ops::RangeToInclusive<f32>;
    let _318: &f32;
    let _319: f32;
    let mut _320: (&bool, &bool);
    let mut _321: &bool;
    let mut _322: &bool;
    let mut _325: bool;
    let mut _326: bool;
    let mut _327: bool;
    let mut _328: bool;
    let _330: !;
    let mut _331: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _332: !;
    let mut _333: bool;
    let mut _334: bool;
    let _335: bool;
    let mut _336: f32;
    let mut _337: bool;
    let mut _338: bool;
    let mut _340: &std::ops::RangeToInclusive<f32>;
    let _341: std::ops::RangeToInclusive<f32>;
    let _342: &f32;
    let _343: f32;
    let mut _344: (&bool, &bool);
    let mut _345: &bool;
    let mut _346: &bool;
    let mut _349: bool;
    let mut _350: bool;
    let mut _351: bool;
    let mut _352: bool;
    let _354: !;
    let mut _355: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _356: !;
    let mut _357: bool;
    let mut _358: bool;
    let _359: bool;
    let mut _360: f32;
    let mut _361: bool;
    let mut _362: bool;
    let mut _364: &std::ops::RangeToInclusive<f32>;
    let _365: std::ops::RangeToInclusive<f32>;
    let _366: &f32;
    let _367: f32;
    let mut _368: (&bool, &bool);
    let mut _369: &bool;
    let mut _370: &bool;
    let mut _373: bool;
    let mut _374: bool;
    let mut _375: bool;
    let mut _376: bool;
    let _378: !;
    let mut _379: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _380: !;
    let mut _381: bool;
    let mut _382: bool;
    let mut _383: bool;
    let _384: bool;
    let mut _385: f32;
    let mut _386: bool;
    let mut _387: bool;
    let mut _389: &std::ops::RangeToInclusive<f32>;
    let _390: std::ops::RangeToInclusive<f32>;
    let _391: &f32;
    let _392: f32;
    let mut _393: (&bool, &bool);
    let mut _394: &bool;
    let mut _395: &bool;
    let mut _398: bool;
    let mut _399: bool;
    let mut _400: bool;
    let mut _401: bool;
    let _403: !;
    let mut _404: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _405: !;
    let mut _406: bool;
    let mut _407: bool;
    let _408: bool;
    let mut _409: f64;
    let mut _410: bool;
    let mut _412: &std::ops::RangeToInclusive<f64>;
    let _413: std::ops::RangeToInclusive<f64>;
    let _414: &f64;
    let _415: f64;
    let mut _416: (&bool, &bool);
    let mut _417: &bool;
    let mut _418: &bool;
    let mut _421: bool;
    let mut _422: bool;
    let mut _423: bool;
    let mut _424: bool;
    let _426: !;
    let mut _427: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _428: !;
    let mut _429: bool;
    let mut _430: bool;
    let _431: bool;
    let mut _432: f64;
    let mut _433: bool;
    let mut _434: bool;
    let mut _436: &std::ops::RangeToInclusive<f64>;
    let _437: std::ops::RangeToInclusive<f64>;
    let _438: &f64;
    let _439: f64;
    let mut _440: (&bool, &bool);
    let mut _441: &bool;
    let mut _442: &bool;
    let mut _445: bool;
    let mut _446: bool;
    let mut _447: bool;
    let mut _448: bool;
    let _450: !;
    let mut _451: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _452: !;
    let mut _453: bool;
    let mut _454: bool;
    let _455: bool;
    let mut _456: f64;
    let mut _457: bool;
    let mut _458: bool;
    let mut _460: &std::ops::RangeToInclusive<f64>;
    let _461: std::ops::RangeToInclusive<f64>;
    let _462: &f64;
    let _463: f64;
    let mut _464: (&bool, &bool);
    let mut _465: &bool;
    let mut _466: &bool;
    let mut _469: bool;
    let mut _470: bool;
    let mut _471: bool;
    let mut _472: bool;
    let _474: !;
    let mut _475: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _476: !;
    let mut _477: bool;
    let mut _478: bool;
    let mut _479: bool;
    let _480: bool;
    let mut _481: f64;
    let mut _482: bool;
    let mut _483: bool;
    let mut _485: &std::ops::RangeToInclusive<f64>;
    let _486: std::ops::RangeToInclusive<f64>;
    let _487: &f64;
    let _488: f64;
    let mut _489: (&bool, &bool);
    let mut _490: &bool;
    let mut _491: &bool;
    let mut _494: bool;
    let mut _495: bool;
    let mut _496: bool;
    let mut _497: bool;
    let _499: !;
    let mut _500: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _501: !;
    scope 1 {
        debug m => _3;
        let _5: bool;
        scope 2 {
            debug c => _5;
            let _13: &bool;
            let _14: &bool;
            scope 3 {
                debug left_val => _13;
                debug right_val => _14;
                let _19: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _19;
                }
            }
        }
    }
    scope 5 {
        debug m => _25;
        let _29: bool;
        scope 6 {
            debug c => _29;
            let _37: &bool;
            let _38: &bool;
            scope 7 {
                debug left_val => _37;
                debug right_val => _38;
                let _43: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _43;
                }
            }
        }
    }
    scope 9 {
        debug m => _49;
        let _53: bool;
        scope 10 {
            debug c => _53;
            let _61: &bool;
            let _62: &bool;
            scope 11 {
                debug left_val => _61;
                debug right_val => _62;
                let _67: core::panicking::AssertKind;
                scope 12 {
                    debug kind => _67;
                }
            }
        }
    }
    scope 13 {
        debug m => _74;
        let _78: bool;
        scope 14 {
            debug c => _78;
            let _86: &bool;
            let _87: &bool;
            scope 15 {
                debug left_val => _86;
                debug right_val => _87;
                let _92: core::panicking::AssertKind;
                scope 16 {
                    debug kind => _92;
                }
            }
        }
    }
    scope 17 {
        debug m => _98;
        let _100: bool;
        scope 18 {
            debug c => _100;
            let _108: &bool;
            let _109: &bool;
            scope 19 {
                debug left_val => _108;
                debug right_val => _109;
                let _114: core::panicking::AssertKind;
                scope 20 {
                    debug kind => _114;
                }
            }
        }
    }
    scope 21 {
        debug m => _120;
        let _124: bool;
        scope 22 {
            debug c => _124;
            let _132: &bool;
            let _133: &bool;
            scope 23 {
                debug left_val => _132;
                debug right_val => _133;
                let _138: core::panicking::AssertKind;
                scope 24 {
                    debug kind => _138;
                }
            }
        }
    }
    scope 25 {
        debug m => _144;
        let _148: bool;
        scope 26 {
            debug c => _148;
            let _156: &bool;
            let _157: &bool;
            scope 27 {
                debug left_val => _156;
                debug right_val => _157;
                let _162: core::panicking::AssertKind;
                scope 28 {
                    debug kind => _162;
                }
            }
        }
    }
    scope 29 {
        debug m => _168;
        let _172: bool;
        scope 30 {
            debug c => _172;
            let _180: &bool;
            let _181: &bool;
            scope 31 {
                debug left_val => _180;
                debug right_val => _181;
                let _186: core::panicking::AssertKind;
                scope 32 {
                    debug kind => _186;
                }
            }
        }
    }
    scope 33 {
        debug m => _193;
        let _197: bool;
        scope 34 {
            debug c => _197;
            let _205: &bool;
            let _206: &bool;
            scope 35 {
                debug left_val => _205;
                debug right_val => _206;
                let _211: core::panicking::AssertKind;
                scope 36 {
                    debug kind => _211;
                }
            }
        }
    }
    scope 37 {
        debug m => _217;
        let _219: bool;
        scope 38 {
            debug c => _219;
            let _227: &bool;
            let _228: &bool;
            scope 39 {
                debug left_val => _227;
                debug right_val => _228;
                let _233: core::panicking::AssertKind;
                scope 40 {
                    debug kind => _233;
                }
            }
        }
    }
    scope 41 {
        debug m => _239;
        let _243: bool;
        scope 42 {
            debug c => _243;
            let _251: &bool;
            let _252: &bool;
            scope 43 {
                debug left_val => _251;
                debug right_val => _252;
                let _257: core::panicking::AssertKind;
                scope 44 {
                    debug kind => _257;
                }
            }
        }
    }
    scope 45 {
        debug m => _263;
        let _267: bool;
        scope 46 {
            debug c => _267;
            let _275: &bool;
            let _276: &bool;
            scope 47 {
                debug left_val => _275;
                debug right_val => _276;
                let _281: core::panicking::AssertKind;
                scope 48 {
                    debug kind => _281;
                }
            }
        }
    }
    scope 49 {
        debug m => _288;
        let _292: bool;
        scope 50 {
            debug c => _292;
            let _300: &bool;
            let _301: &bool;
            scope 51 {
                debug left_val => _300;
                debug right_val => _301;
                let _306: core::panicking::AssertKind;
                scope 52 {
                    debug kind => _306;
                }
            }
        }
    }
    scope 53 {
        debug m => _312;
        let _315: bool;
        scope 54 {
            debug c => _315;
            let _323: &bool;
            let _324: &bool;
            scope 55 {
                debug left_val => _323;
                debug right_val => _324;
                let _329: core::panicking::AssertKind;
                scope 56 {
                    debug kind => _329;
                }
            }
        }
    }
    scope 57 {
        debug m => _335;
        let _339: bool;
        scope 58 {
            debug c => _339;
            let _347: &bool;
            let _348: &bool;
            scope 59 {
                debug left_val => _347;
                debug right_val => _348;
                let _353: core::panicking::AssertKind;
                scope 60 {
                    debug kind => _353;
                }
            }
        }
    }
    scope 61 {
        debug m => _359;
        let _363: bool;
        scope 62 {
            debug c => _363;
            let _371: &bool;
            let _372: &bool;
            scope 63 {
                debug left_val => _371;
                debug right_val => _372;
                let _377: core::panicking::AssertKind;
                scope 64 {
                    debug kind => _377;
                }
            }
        }
    }
    scope 65 {
        debug m => _384;
        let _388: bool;
        scope 66 {
            debug c => _388;
            let _396: &bool;
            let _397: &bool;
            scope 67 {
                debug left_val => _396;
                debug right_val => _397;
                let _402: core::panicking::AssertKind;
                scope 68 {
                    debug kind => _402;
                }
            }
        }
    }
    scope 69 {
        debug m => _408;
        let _411: bool;
        scope 70 {
            debug c => _411;
            let _419: &bool;
            let _420: &bool;
            scope 71 {
                debug left_val => _419;
                debug right_val => _420;
                let _425: core::panicking::AssertKind;
                scope 72 {
                    debug kind => _425;
                }
            }
        }
    }
    scope 73 {
        debug m => _431;
        let _435: bool;
        scope 74 {
            debug c => _435;
            let _443: &bool;
            let _444: &bool;
            scope 75 {
                debug left_val => _443;
                debug right_val => _444;
                let _449: core::panicking::AssertKind;
                scope 76 {
                    debug kind => _449;
                }
            }
        }
    }
    scope 77 {
        debug m => _455;
        let _459: bool;
        scope 78 {
            debug c => _459;
            let _467: &bool;
            let _468: &bool;
            scope 79 {
                debug left_val => _467;
                debug right_val => _468;
                let _473: core::panicking::AssertKind;
                scope 80 {
                    debug kind => _473;
                }
            }
        }
    }
    scope 81 {
        debug m => _480;
        let _484: bool;
        scope 82 {
            debug c => _484;
            let _492: &bool;
            let _493: &bool;
            scope 83 {
                debug left_val => _492;
                debug right_val => _493;
                let _498: core::panicking::AssertKind;
                scope 84 {
                    debug kind => _498;
                }
            }
        }
    }

    bb0: {
        _4 = const _;
        _3 = Eq(_4, const 0_u8);
        _7 = RangeToInclusive::<u8> { end: const _ };
        _6 = &_7;
        _9 = const _;
        _8 = &_9;
        _5 = RangeToInclusive::<u8>::contains::<u8>(move _6, _8) -> bb1;
    }

    bb1: {
        _11 = &_3;
        _12 = &_5;
        _10 = (move _11, move _12);
        _13 = (_10.0: &bool);
        _14 = (_10.1: &bool);
        _17 = (*_13);
        _18 = (*_14);
        _16 = Eq(move _17, move _18);
        _15 = Not(move _16);
        switchInt(move _15) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _19 = core::panicking::AssertKind::Eq;
        _21 = Option::<Arguments<'_>>::None;
        _20 = assert_failed::<bool, bool>(move _19, _13, _14, move _21);
    }

    bb3: {
        _2 = _3;
        _1 = Not(move _2);
        switchInt(move _1) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _22 = panic(const "assertion failed: yes!(u8 :: MIN, ..= u8 :: MIN)");
    }

    bb5: {
        _26 = const _;
        _27 = Le(const 0_u8, _26);
        switchInt(move _27) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _28 = Le(_26, const 5_u8);
        _25 = _28;
        goto -> bb8;
    }

    bb7: {
        _25 = const false;
        goto -> bb8;
    }

    bb8: {
        _31 = RangeToInclusive::<u8> { end: const 5_u8 };
        _30 = &_31;
        _33 = const _;
        _32 = &_33;
        _29 = RangeToInclusive::<u8>::contains::<u8>(move _30, _32) -> bb9;
    }

    bb9: {
        _35 = &_25;
        _36 = &_29;
        _34 = (move _35, move _36);
        _37 = (_34.0: &bool);
        _38 = (_34.1: &bool);
        _41 = (*_37);
        _42 = (*_38);
        _40 = Eq(move _41, move _42);
        _39 = Not(move _40);
        switchInt(move _39) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _43 = core::panicking::AssertKind::Eq;
        _45 = Option::<Arguments<'_>>::None;
        _44 = assert_failed::<bool, bool>(move _43, _37, _38, move _45);
    }

    bb11: {
        _24 = _25;
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _46 = panic(const "assertion failed: yes!(u8 :: MIN, ..= 5)");
    }

    bb13: {
        _50 = const 5_u8;
        _51 = Le(const 0_u8, _50);
        switchInt(move _51) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _52 = Le(_50, const 5_u8);
        _49 = _52;
        goto -> bb16;
    }

    bb15: {
        _49 = const false;
        goto -> bb16;
    }

    bb16: {
        _55 = RangeToInclusive::<u8> { end: const 5_u8 };
        _54 = &_55;
        _57 = const 5_u8;
        _56 = &_57;
        _53 = RangeToInclusive::<u8>::contains::<u8>(move _54, _56) -> bb17;
    }

    bb17: {
        _59 = &_49;
        _60 = &_53;
        _58 = (move _59, move _60);
        _61 = (_58.0: &bool);
        _62 = (_58.1: &bool);
        _65 = (*_61);
        _66 = (*_62);
        _64 = Eq(move _65, move _66);
        _63 = Not(move _64);
        switchInt(move _63) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _67 = core::panicking::AssertKind::Eq;
        _69 = Option::<Arguments<'_>>::None;
        _68 = assert_failed::<bool, bool>(move _67, _61, _62, move _69);
    }

    bb19: {
        _48 = _49;
        _47 = Not(move _48);
        switchInt(move _47) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _70 = panic(const "assertion failed: yes!(5u8, ..= 5)");
    }

    bb21: {
        _75 = const 6_u8;
        _76 = Le(const 0_u8, _75);
        switchInt(move _76) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        _77 = Le(_75, const 5_u8);
        _74 = _77;
        goto -> bb24;
    }

    bb23: {
        _74 = const false;
        goto -> bb24;
    }

    bb24: {
        _80 = RangeToInclusive::<u8> { end: const 5_u8 };
        _79 = &_80;
        _82 = const 6_u8;
        _81 = &_82;
        _78 = RangeToInclusive::<u8>::contains::<u8>(move _79, _81) -> bb25;
    }

    bb25: {
        _84 = &_74;
        _85 = &_78;
        _83 = (move _84, move _85);
        _86 = (_83.0: &bool);
        _87 = (_83.1: &bool);
        _90 = (*_86);
        _91 = (*_87);
        _89 = Eq(move _90, move _91);
        _88 = Not(move _89);
        switchInt(move _88) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _92 = core::panicking::AssertKind::Eq;
        _94 = Option::<Arguments<'_>>::None;
        _93 = assert_failed::<bool, bool>(move _92, _86, _87, move _94);
    }

    bb27: {
        _73 = _74;
        _72 = Not(move _73);
        _71 = Not(move _72);
        switchInt(move _71) -> [0: bb29, otherwise: bb28];
    }

    bb28: {
        _95 = panic(const "assertion failed: !yes!(6u8, ..= 5)");
    }

    bb29: {
        _99 = const _;
        _98 = Eq(_99, const i16::MIN);
        _102 = RangeToInclusive::<i16> { end: const _ };
        _101 = &_102;
        _104 = const _;
        _103 = &_104;
        _100 = RangeToInclusive::<i16>::contains::<i16>(move _101, _103) -> bb30;
    }

    bb30: {
        _106 = &_98;
        _107 = &_100;
        _105 = (move _106, move _107);
        _108 = (_105.0: &bool);
        _109 = (_105.1: &bool);
        _112 = (*_108);
        _113 = (*_109);
        _111 = Eq(move _112, move _113);
        _110 = Not(move _111);
        switchInt(move _110) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _114 = core::panicking::AssertKind::Eq;
        _116 = Option::<Arguments<'_>>::None;
        _115 = assert_failed::<bool, bool>(move _114, _108, _109, move _116);
    }

    bb32: {
        _97 = _98;
        _96 = Not(move _97);
        switchInt(move _96) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        _117 = panic(const "assertion failed: yes!(i16 :: MIN, ..= i16 :: MIN)");
    }

    bb34: {
        _121 = const _;
        _122 = Le(const i16::MIN, _121);
        switchInt(move _122) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _123 = Le(_121, const 0_i16);
        _120 = _123;
        goto -> bb37;
    }

    bb36: {
        _120 = const false;
        goto -> bb37;
    }

    bb37: {
        _126 = RangeToInclusive::<i16> { end: const 0_i16 };
        _125 = &_126;
        _128 = const _;
        _127 = &_128;
        _124 = RangeToInclusive::<i16>::contains::<i16>(move _125, _127) -> bb38;
    }

    bb38: {
        _130 = &_120;
        _131 = &_124;
        _129 = (move _130, move _131);
        _132 = (_129.0: &bool);
        _133 = (_129.1: &bool);
        _136 = (*_132);
        _137 = (*_133);
        _135 = Eq(move _136, move _137);
        _134 = Not(move _135);
        switchInt(move _134) -> [0: bb40, otherwise: bb39];
    }

    bb39: {
        _138 = core::panicking::AssertKind::Eq;
        _140 = Option::<Arguments<'_>>::None;
        _139 = assert_failed::<bool, bool>(move _138, _132, _133, move _140);
    }

    bb40: {
        _119 = _120;
        _118 = Not(move _119);
        switchInt(move _118) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _141 = panic(const "assertion failed: yes!(i16 :: MIN, ..= 0)");
    }

    bb42: {
        _145 = const _;
        _146 = Le(const i16::MIN, _145);
        switchInt(move _146) -> [0: bb44, otherwise: bb43];
    }

    bb43: {
        _147 = Le(_145, const -5_i16);
        _144 = _147;
        goto -> bb45;
    }

    bb44: {
        _144 = const false;
        goto -> bb45;
    }

    bb45: {
        _150 = RangeToInclusive::<i16> { end: const -5_i16 };
        _149 = &_150;
        _152 = const _;
        _151 = &_152;
        _148 = RangeToInclusive::<i16>::contains::<i16>(move _149, _151) -> bb46;
    }

    bb46: {
        _154 = &_144;
        _155 = &_148;
        _153 = (move _154, move _155);
        _156 = (_153.0: &bool);
        _157 = (_153.1: &bool);
        _160 = (*_156);
        _161 = (*_157);
        _159 = Eq(move _160, move _161);
        _158 = Not(move _159);
        switchInt(move _158) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _162 = core::panicking::AssertKind::Eq;
        _164 = Option::<Arguments<'_>>::None;
        _163 = assert_failed::<bool, bool>(move _162, _156, _157, move _164);
    }

    bb48: {
        _143 = _144;
        _142 = Not(move _143);
        switchInt(move _142) -> [0: bb50, otherwise: bb49];
    }

    bb49: {
        _165 = panic(const "assertion failed: yes!(i16 :: MIN, ..= - 5)");
    }

    bb50: {
        _169 = const -5_i32;
        _170 = Le(const i32::MIN, _169);
        switchInt(move _170) -> [0: bb52, otherwise: bb51];
    }

    bb51: {
        _171 = Le(_169, const -5_i32);
        _168 = _171;
        goto -> bb53;
    }

    bb52: {
        _168 = const false;
        goto -> bb53;
    }

    bb53: {
        _174 = RangeToInclusive::<i32> { end: const -5_i32 };
        _173 = &_174;
        _176 = const -5_i32;
        _175 = &_176;
        _172 = RangeToInclusive::<i32>::contains::<i32>(move _173, _175) -> bb54;
    }

    bb54: {
        _178 = &_168;
        _179 = &_172;
        _177 = (move _178, move _179);
        _180 = (_177.0: &bool);
        _181 = (_177.1: &bool);
        _184 = (*_180);
        _185 = (*_181);
        _183 = Eq(move _184, move _185);
        _182 = Not(move _183);
        switchInt(move _182) -> [0: bb56, otherwise: bb55];
    }

    bb55: {
        _186 = core::panicking::AssertKind::Eq;
        _188 = Option::<Arguments<'_>>::None;
        _187 = assert_failed::<bool, bool>(move _186, _180, _181, move _188);
    }

    bb56: {
        _167 = _168;
        _166 = Not(move _167);
        switchInt(move _166) -> [0: bb58, otherwise: bb57];
    }

    bb57: {
        _189 = panic(const "assertion failed: yes!(- 5, ..= - 5)");
    }

    bb58: {
        _194 = const -4_i32;
        _195 = Le(const i32::MIN, _194);
        switchInt(move _195) -> [0: bb60, otherwise: bb59];
    }

    bb59: {
        _196 = Le(_194, const -5_i32);
        _193 = _196;
        goto -> bb61;
    }

    bb60: {
        _193 = const false;
        goto -> bb61;
    }

    bb61: {
        _199 = RangeToInclusive::<i32> { end: const -5_i32 };
        _198 = &_199;
        _201 = const -4_i32;
        _200 = &_201;
        _197 = RangeToInclusive::<i32>::contains::<i32>(move _198, _200) -> bb62;
    }

    bb62: {
        _203 = &_193;
        _204 = &_197;
        _202 = (move _203, move _204);
        _205 = (_202.0: &bool);
        _206 = (_202.1: &bool);
        _209 = (*_205);
        _210 = (*_206);
        _208 = Eq(move _209, move _210);
        _207 = Not(move _208);
        switchInt(move _207) -> [0: bb64, otherwise: bb63];
    }

    bb63: {
        _211 = core::panicking::AssertKind::Eq;
        _213 = Option::<Arguments<'_>>::None;
        _212 = assert_failed::<bool, bool>(move _211, _205, _206, move _213);
    }

    bb64: {
        _192 = _193;
        _191 = Not(move _192);
        _190 = Not(move _191);
        switchInt(move _190) -> [0: bb66, otherwise: bb65];
    }

    bb65: {
        _214 = panic(const "assertion failed: !yes!(- 4, ..= - 5)");
    }

    bb66: {
        _218 = const '\0';
        _217 = Eq(_218, const '\0');
        _221 = RangeToInclusive::<char> { end: const '\0' };
        _220 = &_221;
        _223 = const '\0';
        _222 = &_223;
        _219 = RangeToInclusive::<char>::contains::<char>(move _220, _222) -> bb67;
    }

    bb67: {
        _225 = &_217;
        _226 = &_219;
        _224 = (move _225, move _226);
        _227 = (_224.0: &bool);
        _228 = (_224.1: &bool);
        _231 = (*_227);
        _232 = (*_228);
        _230 = Eq(move _231, move _232);
        _229 = Not(move _230);
        switchInt(move _229) -> [0: bb69, otherwise: bb68];
    }

    bb68: {
        _233 = core::panicking::AssertKind::Eq;
        _235 = Option::<Arguments<'_>>::None;
        _234 = assert_failed::<bool, bool>(move _233, _227, _228, move _235);
    }

    bb69: {
        _216 = _217;
        _215 = Not(move _216);
        switchInt(move _215) -> [0: bb71, otherwise: bb70];
    }

    bb70: {
        _236 = panic(const "assertion failed: yes!(\\'\\\\u{0}\\', ..= \\'\\\\u{0}\\')");
    }

    bb71: {
        _240 = const '\0';
        _241 = Le(const '\0', _240);
        switchInt(move _241) -> [0: bb73, otherwise: bb72];
    }

    bb72: {
        _242 = Le(_240, const 'a');
        _239 = _242;
        goto -> bb74;
    }

    bb73: {
        _239 = const false;
        goto -> bb74;
    }

    bb74: {
        _245 = RangeToInclusive::<char> { end: const 'a' };
        _244 = &_245;
        _247 = const '\0';
        _246 = &_247;
        _243 = RangeToInclusive::<char>::contains::<char>(move _244, _246) -> bb75;
    }

    bb75: {
        _249 = &_239;
        _250 = &_243;
        _248 = (move _249, move _250);
        _251 = (_248.0: &bool);
        _252 = (_248.1: &bool);
        _255 = (*_251);
        _256 = (*_252);
        _254 = Eq(move _255, move _256);
        _253 = Not(move _254);
        switchInt(move _253) -> [0: bb77, otherwise: bb76];
    }

    bb76: {
        _257 = core::panicking::AssertKind::Eq;
        _259 = Option::<Arguments<'_>>::None;
        _258 = assert_failed::<bool, bool>(move _257, _251, _252, move _259);
    }

    bb77: {
        _238 = _239;
        _237 = Not(move _238);
        switchInt(move _237) -> [0: bb79, otherwise: bb78];
    }

    bb78: {
        _260 = panic(const "assertion failed: yes!(\\'\\\\u{0}\\', ..= \\'a\\')");
    }

    bb79: {
        _264 = const 'a';
        _265 = Le(const '\0', _264);
        switchInt(move _265) -> [0: bb81, otherwise: bb80];
    }

    bb80: {
        _266 = Le(_264, const 'a');
        _263 = _266;
        goto -> bb82;
    }

    bb81: {
        _263 = const false;
        goto -> bb82;
    }

    bb82: {
        _269 = RangeToInclusive::<char> { end: const 'a' };
        _268 = &_269;
        _271 = const 'a';
        _270 = &_271;
        _267 = RangeToInclusive::<char>::contains::<char>(move _268, _270) -> bb83;
    }

    bb83: {
        _273 = &_263;
        _274 = &_267;
        _272 = (move _273, move _274);
        _275 = (_272.0: &bool);
        _276 = (_272.1: &bool);
        _279 = (*_275);
        _280 = (*_276);
        _278 = Eq(move _279, move _280);
        _277 = Not(move _278);
        switchInt(move _277) -> [0: bb85, otherwise: bb84];
    }

    bb84: {
        _281 = core::panicking::AssertKind::Eq;
        _283 = Option::<Arguments<'_>>::None;
        _282 = assert_failed::<bool, bool>(move _281, _275, _276, move _283);
    }

    bb85: {
        _262 = _263;
        _261 = Not(move _262);
        switchInt(move _261) -> [0: bb87, otherwise: bb86];
    }

    bb86: {
        _284 = panic(const "assertion failed: yes!(\\'a\\', ..= \\'a\\')");
    }

    bb87: {
        _289 = const 'b';
        _290 = Le(const '\0', _289);
        switchInt(move _290) -> [0: bb89, otherwise: bb88];
    }

    bb88: {
        _291 = Le(_289, const 'a');
        _288 = _291;
        goto -> bb90;
    }

    bb89: {
        _288 = const false;
        goto -> bb90;
    }

    bb90: {
        _294 = RangeToInclusive::<char> { end: const 'a' };
        _293 = &_294;
        _296 = const 'b';
        _295 = &_296;
        _292 = RangeToInclusive::<char>::contains::<char>(move _293, _295) -> bb91;
    }

    bb91: {
        _298 = &_288;
        _299 = &_292;
        _297 = (move _298, move _299);
        _300 = (_297.0: &bool);
        _301 = (_297.1: &bool);
        _304 = (*_300);
        _305 = (*_301);
        _303 = Eq(move _304, move _305);
        _302 = Not(move _303);
        switchInt(move _302) -> [0: bb93, otherwise: bb92];
    }

    bb92: {
        _306 = core::panicking::AssertKind::Eq;
        _308 = Option::<Arguments<'_>>::None;
        _307 = assert_failed::<bool, bool>(move _306, _300, _301, move _308);
    }

    bb93: {
        _287 = _288;
        _286 = Not(move _287);
        _285 = Not(move _286);
        switchInt(move _285) -> [0: bb95, otherwise: bb94];
    }

    bb94: {
        _309 = panic(const "assertion failed: !yes!(\\'b\\', ..= \\'a\\')");
    }

    bb95: {
        _313 = const _;
        _314 = Eq(const -Inff32, _313);
        _312 = _314;
        _317 = RangeToInclusive::<f32> { end: const _ };
        _316 = &_317;
        _319 = const _;
        _318 = &_319;
        _315 = RangeToInclusive::<f32>::contains::<f32>(move _316, _318) -> bb96;
    }

    bb96: {
        _321 = &_312;
        _322 = &_315;
        _320 = (move _321, move _322);
        _323 = (_320.0: &bool);
        _324 = (_320.1: &bool);
        _327 = (*_323);
        _328 = (*_324);
        _326 = Eq(move _327, move _328);
        _325 = Not(move _326);
        switchInt(move _325) -> [0: bb98, otherwise: bb97];
    }

    bb97: {
        _329 = core::panicking::AssertKind::Eq;
        _331 = Option::<Arguments<'_>>::None;
        _330 = assert_failed::<bool, bool>(move _329, _323, _324, move _331);
    }

    bb98: {
        _311 = _312;
        _310 = Not(move _311);
        switchInt(move _310) -> [0: bb100, otherwise: bb99];
    }

    bb99: {
        _332 = panic(const "assertion failed: yes!(f32 :: NEG_INFINITY, ..= f32 :: NEG_INFINITY)");
    }

    bb100: {
        _336 = const _;
        _337 = Le(const -Inff32, _336);
        switchInt(move _337) -> [0: bb102, otherwise: bb101];
    }

    bb101: {
        _338 = Le(_336, const 1f32);
        _335 = _338;
        goto -> bb103;
    }

    bb102: {
        _335 = const false;
        goto -> bb103;
    }

    bb103: {
        _341 = RangeToInclusive::<f32> { end: const 1f32 };
        _340 = &_341;
        _343 = const _;
        _342 = &_343;
        _339 = RangeToInclusive::<f32>::contains::<f32>(move _340, _342) -> bb104;
    }

    bb104: {
        _345 = &_335;
        _346 = &_339;
        _344 = (move _345, move _346);
        _347 = (_344.0: &bool);
        _348 = (_344.1: &bool);
        _351 = (*_347);
        _352 = (*_348);
        _350 = Eq(move _351, move _352);
        _349 = Not(move _350);
        switchInt(move _349) -> [0: bb106, otherwise: bb105];
    }

    bb105: {
        _353 = core::panicking::AssertKind::Eq;
        _355 = Option::<Arguments<'_>>::None;
        _354 = assert_failed::<bool, bool>(move _353, _347, _348, move _355);
    }

    bb106: {
        _334 = _335;
        _333 = Not(move _334);
        switchInt(move _333) -> [0: bb108, otherwise: bb107];
    }

    bb107: {
        _356 = panic(const "assertion failed: yes!(f32 :: NEG_INFINITY, ..= 1.0f32)");
    }

    bb108: {
        _360 = const 1.5f32;
        _361 = Le(const -Inff32, _360);
        switchInt(move _361) -> [0: bb110, otherwise: bb109];
    }

    bb109: {
        _362 = Le(_360, const 1.5f32);
        _359 = _362;
        goto -> bb111;
    }

    bb110: {
        _359 = const false;
        goto -> bb111;
    }

    bb111: {
        _365 = RangeToInclusive::<f32> { end: const 1.5f32 };
        _364 = &_365;
        _367 = const 1.5f32;
        _366 = &_367;
        _363 = RangeToInclusive::<f32>::contains::<f32>(move _364, _366) -> bb112;
    }

    bb112: {
        _369 = &_359;
        _370 = &_363;
        _368 = (move _369, move _370);
        _371 = (_368.0: &bool);
        _372 = (_368.1: &bool);
        _375 = (*_371);
        _376 = (*_372);
        _374 = Eq(move _375, move _376);
        _373 = Not(move _374);
        switchInt(move _373) -> [0: bb114, otherwise: bb113];
    }

    bb113: {
        _377 = core::panicking::AssertKind::Eq;
        _379 = Option::<Arguments<'_>>::None;
        _378 = assert_failed::<bool, bool>(move _377, _371, _372, move _379);
    }

    bb114: {
        _358 = _359;
        _357 = Not(move _358);
        switchInt(move _357) -> [0: bb116, otherwise: bb115];
    }

    bb115: {
        _380 = panic(const "assertion failed: yes!(1.5f32, ..= 1.5f32)");
    }

    bb116: {
        _385 = const 1.60000002f32;
        _386 = Le(const -Inff32, _385);
        switchInt(move _386) -> [0: bb118, otherwise: bb117];
    }

    bb117: {
        _387 = Le(_385, const -1.5f32);
        _384 = _387;
        goto -> bb119;
    }

    bb118: {
        _384 = const false;
        goto -> bb119;
    }

    bb119: {
        _390 = RangeToInclusive::<f32> { end: const -1.5f32 };
        _389 = &_390;
        _392 = const 1.60000002f32;
        _391 = &_392;
        _388 = RangeToInclusive::<f32>::contains::<f32>(move _389, _391) -> bb120;
    }

    bb120: {
        _394 = &_384;
        _395 = &_388;
        _393 = (move _394, move _395);
        _396 = (_393.0: &bool);
        _397 = (_393.1: &bool);
        _400 = (*_396);
        _401 = (*_397);
        _399 = Eq(move _400, move _401);
        _398 = Not(move _399);
        switchInt(move _398) -> [0: bb122, otherwise: bb121];
    }

    bb121: {
        _402 = core::panicking::AssertKind::Eq;
        _404 = Option::<Arguments<'_>>::None;
        _403 = assert_failed::<bool, bool>(move _402, _396, _397, move _404);
    }

    bb122: {
        _383 = _384;
        _382 = Not(move _383);
        _381 = Not(move _382);
        switchInt(move _381) -> [0: bb124, otherwise: bb123];
    }

    bb123: {
        _405 = panic(const "assertion failed: !yes!(1.6f32, ..= - 1.5f32)");
    }

    bb124: {
        _409 = const _;
        _410 = Eq(const -Inff64, _409);
        _408 = _410;
        _413 = RangeToInclusive::<f64> { end: const _ };
        _412 = &_413;
        _415 = const _;
        _414 = &_415;
        _411 = RangeToInclusive::<f64>::contains::<f64>(move _412, _414) -> bb125;
    }

    bb125: {
        _417 = &_408;
        _418 = &_411;
        _416 = (move _417, move _418);
        _419 = (_416.0: &bool);
        _420 = (_416.1: &bool);
        _423 = (*_419);
        _424 = (*_420);
        _422 = Eq(move _423, move _424);
        _421 = Not(move _422);
        switchInt(move _421) -> [0: bb127, otherwise: bb126];
    }

    bb126: {
        _425 = core::panicking::AssertKind::Eq;
        _427 = Option::<Arguments<'_>>::None;
        _426 = assert_failed::<bool, bool>(move _425, _419, _420, move _427);
    }

    bb127: {
        _407 = _408;
        _406 = Not(move _407);
        switchInt(move _406) -> [0: bb129, otherwise: bb128];
    }

    bb128: {
        _428 = panic(const "assertion failed: yes!(f64 :: NEG_INFINITY, ..= f64 :: NEG_INFINITY)");
    }

    bb129: {
        _432 = const _;
        _433 = Le(const -Inff64, _432);
        switchInt(move _433) -> [0: bb131, otherwise: bb130];
    }

    bb130: {
        _434 = Le(_432, const 1f64);
        _431 = _434;
        goto -> bb132;
    }

    bb131: {
        _431 = const false;
        goto -> bb132;
    }

    bb132: {
        _437 = RangeToInclusive::<f64> { end: const 1f64 };
        _436 = &_437;
        _439 = const _;
        _438 = &_439;
        _435 = RangeToInclusive::<f64>::contains::<f64>(move _436, _438) -> bb133;
    }

    bb133: {
        _441 = &_431;
        _442 = &_435;
        _440 = (move _441, move _442);
        _443 = (_440.0: &bool);
        _444 = (_440.1: &bool);
        _447 = (*_443);
        _448 = (*_444);
        _446 = Eq(move _447, move _448);
        _445 = Not(move _446);
        switchInt(move _445) -> [0: bb135, otherwise: bb134];
    }

    bb134: {
        _449 = core::panicking::AssertKind::Eq;
        _451 = Option::<Arguments<'_>>::None;
        _450 = assert_failed::<bool, bool>(move _449, _443, _444, move _451);
    }

    bb135: {
        _430 = _431;
        _429 = Not(move _430);
        switchInt(move _429) -> [0: bb137, otherwise: bb136];
    }

    bb136: {
        _452 = panic(const "assertion failed: yes!(f64 :: NEG_INFINITY, ..= 1.0f64)");
    }

    bb137: {
        _456 = const 1.5f64;
        _457 = Le(const -Inff64, _456);
        switchInt(move _457) -> [0: bb139, otherwise: bb138];
    }

    bb138: {
        _458 = Le(_456, const 1.5f64);
        _455 = _458;
        goto -> bb140;
    }

    bb139: {
        _455 = const false;
        goto -> bb140;
    }

    bb140: {
        _461 = RangeToInclusive::<f64> { end: const 1.5f64 };
        _460 = &_461;
        _463 = const 1.5f64;
        _462 = &_463;
        _459 = RangeToInclusive::<f64>::contains::<f64>(move _460, _462) -> bb141;
    }

    bb141: {
        _465 = &_455;
        _466 = &_459;
        _464 = (move _465, move _466);
        _467 = (_464.0: &bool);
        _468 = (_464.1: &bool);
        _471 = (*_467);
        _472 = (*_468);
        _470 = Eq(move _471, move _472);
        _469 = Not(move _470);
        switchInt(move _469) -> [0: bb143, otherwise: bb142];
    }

    bb142: {
        _473 = core::panicking::AssertKind::Eq;
        _475 = Option::<Arguments<'_>>::None;
        _474 = assert_failed::<bool, bool>(move _473, _467, _468, move _475);
    }

    bb143: {
        _454 = _455;
        _453 = Not(move _454);
        switchInt(move _453) -> [0: bb145, otherwise: bb144];
    }

    bb144: {
        _476 = panic(const "assertion failed: yes!(1.5f64, ..= 1.5f64)");
    }

    bb145: {
        _481 = const 1.6000000000000001f64;
        _482 = Le(const -Inff64, _481);
        switchInt(move _482) -> [0: bb147, otherwise: bb146];
    }

    bb146: {
        _483 = Le(_481, const -1.5f64);
        _480 = _483;
        goto -> bb148;
    }

    bb147: {
        _480 = const false;
        goto -> bb148;
    }

    bb148: {
        _486 = RangeToInclusive::<f64> { end: const -1.5f64 };
        _485 = &_486;
        _488 = const 1.6000000000000001f64;
        _487 = &_488;
        _484 = RangeToInclusive::<f64>::contains::<f64>(move _485, _487) -> bb149;
    }

    bb149: {
        _490 = &_480;
        _491 = &_484;
        _489 = (move _490, move _491);
        _492 = (_489.0: &bool);
        _493 = (_489.1: &bool);
        _496 = (*_492);
        _497 = (*_493);
        _495 = Eq(move _496, move _497);
        _494 = Not(move _495);
        switchInt(move _494) -> [0: bb151, otherwise: bb150];
    }

    bb150: {
        _498 = core::panicking::AssertKind::Eq;
        _500 = Option::<Arguments<'_>>::None;
        _499 = assert_failed::<bool, bool>(move _498, _492, _493, move _500);
    }

    bb151: {
        _479 = _480;
        _478 = Not(move _479);
        _477 = Not(move _478);
        switchInt(move _477) -> [0: bb153, otherwise: bb152];
    }

    bb152: {
        _501 = panic(const "assertion failed: !yes!(1.6f64, ..= - 1.5f64)");
    }

    bb153: {
        return;
    }
}

fn range_to() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let _3: bool;
    let mut _4: u8;
    let mut _5: bool;
    let mut _6: bool;
    let mut _8: &std::ops::RangeTo<u8>;
    let _9: std::ops::RangeTo<u8>;
    let _10: &u8;
    let _11: u8;
    let mut _12: (&bool, &bool);
    let mut _13: &bool;
    let mut _14: &bool;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: bool;
    let _22: !;
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _24: !;
    let mut _25: bool;
    let mut _26: bool;
    let _27: bool;
    let mut _28: u8;
    let mut _29: bool;
    let mut _30: bool;
    let mut _32: &std::ops::RangeTo<u8>;
    let _33: std::ops::RangeTo<u8>;
    let _34: &u8;
    let _35: u8;
    let mut _36: (&bool, &bool);
    let mut _37: &bool;
    let mut _38: &bool;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: bool;
    let _46: !;
    let mut _47: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _48: !;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    let _52: bool;
    let mut _53: u8;
    let mut _54: bool;
    let mut _55: bool;
    let mut _57: &std::ops::RangeTo<u8>;
    let _58: std::ops::RangeTo<u8>;
    let _59: &u8;
    let _60: u8;
    let mut _61: (&bool, &bool);
    let mut _62: &bool;
    let mut _63: &bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;
    let _71: !;
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _73: !;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: bool;
    let _77: bool;
    let mut _78: u8;
    let mut _79: bool;
    let mut _80: bool;
    let mut _82: &std::ops::RangeTo<u8>;
    let _83: std::ops::RangeTo<u8>;
    let _84: &u8;
    let _85: u8;
    let mut _86: (&bool, &bool);
    let mut _87: &bool;
    let mut _88: &bool;
    let mut _91: bool;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: bool;
    let _96: !;
    let mut _97: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _98: !;
    let mut _99: bool;
    let mut _100: bool;
    let _101: bool;
    let mut _102: u8;
    let mut _103: bool;
    let mut _104: bool;
    let mut _106: &std::ops::RangeTo<u8>;
    let _107: std::ops::RangeTo<u8>;
    let _108: &u8;
    let _109: u8;
    let mut _110: (&bool, &bool);
    let mut _111: &bool;
    let mut _112: &bool;
    let mut _115: bool;
    let mut _116: bool;
    let mut _117: bool;
    let mut _118: bool;
    let _120: !;
    let mut _121: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _122: !;
    let mut _123: bool;
    let mut _124: bool;
    let _125: bool;
    let mut _126: u8;
    let mut _127: bool;
    let mut _128: bool;
    let mut _130: &std::ops::RangeTo<u8>;
    let _131: std::ops::RangeTo<u8>;
    let _132: &u8;
    let _133: u8;
    let mut _134: (&bool, &bool);
    let mut _135: &bool;
    let mut _136: &bool;
    let mut _139: bool;
    let mut _140: bool;
    let mut _141: bool;
    let mut _142: bool;
    let _144: !;
    let mut _145: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _146: !;
    let mut _147: bool;
    let mut _148: bool;
    let mut _149: bool;
    let _150: bool;
    let mut _151: u8;
    let mut _152: bool;
    let mut _153: bool;
    let mut _155: &std::ops::RangeTo<u8>;
    let _156: std::ops::RangeTo<u8>;
    let _157: &u8;
    let _158: u8;
    let mut _159: (&bool, &bool);
    let mut _160: &bool;
    let mut _161: &bool;
    let mut _164: bool;
    let mut _165: bool;
    let mut _166: bool;
    let mut _167: bool;
    let _169: !;
    let mut _170: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _171: !;
    let mut _172: bool;
    let mut _173: bool;
    let mut _174: bool;
    let _175: bool;
    let mut _176: u8;
    let mut _177: bool;
    let mut _178: bool;
    let mut _180: &std::ops::RangeTo<u8>;
    let _181: std::ops::RangeTo<u8>;
    let _182: &u8;
    let _183: u8;
    let mut _184: (&bool, &bool);
    let mut _185: &bool;
    let mut _186: &bool;
    let mut _189: bool;
    let mut _190: bool;
    let mut _191: bool;
    let mut _192: bool;
    let _194: !;
    let mut _195: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _196: !;
    let mut _197: bool;
    let mut _198: bool;
    let _199: bool;
    let mut _200: i16;
    let mut _201: bool;
    let mut _202: bool;
    let mut _204: &std::ops::RangeTo<i16>;
    let _205: std::ops::RangeTo<i16>;
    let _206: &i16;
    let _207: i16;
    let mut _208: (&bool, &bool);
    let mut _209: &bool;
    let mut _210: &bool;
    let mut _213: bool;
    let mut _214: bool;
    let mut _215: bool;
    let mut _216: bool;
    let _218: !;
    let mut _219: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _220: !;
    let mut _221: bool;
    let mut _222: bool;
    let _223: bool;
    let mut _224: i16;
    let mut _225: bool;
    let mut _226: bool;
    let mut _228: &std::ops::RangeTo<i16>;
    let _229: std::ops::RangeTo<i16>;
    let _230: &i16;
    let _231: i16;
    let mut _232: (&bool, &bool);
    let mut _233: &bool;
    let mut _234: &bool;
    let mut _237: bool;
    let mut _238: bool;
    let mut _239: bool;
    let mut _240: bool;
    let _242: !;
    let mut _243: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _244: !;
    let mut _245: bool;
    let mut _246: bool;
    let _247: bool;
    let mut _248: i32;
    let mut _249: bool;
    let mut _250: bool;
    let mut _252: &std::ops::RangeTo<i32>;
    let _253: std::ops::RangeTo<i32>;
    let _254: &i32;
    let _255: i32;
    let mut _256: (&bool, &bool);
    let mut _257: &bool;
    let mut _258: &bool;
    let mut _261: bool;
    let mut _262: bool;
    let mut _263: bool;
    let mut _264: bool;
    let _266: !;
    let mut _267: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _268: !;
    let mut _269: bool;
    let mut _270: bool;
    let mut _271: bool;
    let _272: bool;
    let mut _273: i32;
    let mut _274: bool;
    let mut _275: bool;
    let mut _277: &std::ops::RangeTo<i32>;
    let _278: std::ops::RangeTo<i32>;
    let _279: &i32;
    let _280: i32;
    let mut _281: (&bool, &bool);
    let mut _282: &bool;
    let mut _283: &bool;
    let mut _286: bool;
    let mut _287: bool;
    let mut _288: bool;
    let mut _289: bool;
    let _291: !;
    let mut _292: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _293: !;
    let mut _294: bool;
    let mut _295: bool;
    let _296: bool;
    let mut _297: char;
    let mut _298: bool;
    let mut _299: bool;
    let mut _301: &std::ops::RangeTo<char>;
    let _302: std::ops::RangeTo<char>;
    let _303: &char;
    let _304: char;
    let mut _305: (&bool, &bool);
    let mut _306: &bool;
    let mut _307: &bool;
    let mut _310: bool;
    let mut _311: bool;
    let mut _312: bool;
    let mut _313: bool;
    let _315: !;
    let mut _316: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _317: !;
    let mut _318: bool;
    let mut _319: bool;
    let _320: bool;
    let mut _321: char;
    let mut _322: bool;
    let mut _323: bool;
    let mut _325: &std::ops::RangeTo<char>;
    let _326: std::ops::RangeTo<char>;
    let _327: &char;
    let _328: char;
    let mut _329: (&bool, &bool);
    let mut _330: &bool;
    let mut _331: &bool;
    let mut _334: bool;
    let mut _335: bool;
    let mut _336: bool;
    let mut _337: bool;
    let _339: !;
    let mut _340: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _341: !;
    let mut _342: bool;
    let mut _343: bool;
    let _344: bool;
    let mut _345: char;
    let mut _346: bool;
    let mut _347: bool;
    let mut _349: &std::ops::RangeTo<char>;
    let _350: std::ops::RangeTo<char>;
    let _351: &char;
    let _352: char;
    let mut _353: (&bool, &bool);
    let mut _354: &bool;
    let mut _355: &bool;
    let mut _358: bool;
    let mut _359: bool;
    let mut _360: bool;
    let mut _361: bool;
    let _363: !;
    let mut _364: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _365: !;
    let mut _366: bool;
    let mut _367: bool;
    let mut _368: bool;
    let _369: bool;
    let mut _370: char;
    let mut _371: bool;
    let mut _372: bool;
    let mut _374: &std::ops::RangeTo<char>;
    let _375: std::ops::RangeTo<char>;
    let _376: &char;
    let _377: char;
    let mut _378: (&bool, &bool);
    let mut _379: &bool;
    let mut _380: &bool;
    let mut _383: bool;
    let mut _384: bool;
    let mut _385: bool;
    let mut _386: bool;
    let _388: !;
    let mut _389: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _390: !;
    let mut _391: bool;
    let mut _392: bool;
    let mut _393: bool;
    let _394: bool;
    let mut _395: char;
    let mut _396: bool;
    let mut _397: bool;
    let mut _399: &std::ops::RangeTo<char>;
    let _400: std::ops::RangeTo<char>;
    let _401: &char;
    let _402: char;
    let mut _403: (&bool, &bool);
    let mut _404: &bool;
    let mut _405: &bool;
    let mut _408: bool;
    let mut _409: bool;
    let mut _410: bool;
    let mut _411: bool;
    let _413: !;
    let mut _414: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _415: !;
    let mut _416: bool;
    let mut _417: bool;
    let _418: bool;
    let mut _419: f32;
    let mut _420: bool;
    let mut _421: bool;
    let mut _423: &std::ops::RangeTo<f32>;
    let _424: std::ops::RangeTo<f32>;
    let _425: &f32;
    let _426: f32;
    let mut _427: (&bool, &bool);
    let mut _428: &bool;
    let mut _429: &bool;
    let mut _432: bool;
    let mut _433: bool;
    let mut _434: bool;
    let mut _435: bool;
    let _437: !;
    let mut _438: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _439: !;
    let mut _440: bool;
    let mut _441: bool;
    let mut _442: bool;
    let _443: bool;
    let mut _444: f32;
    let mut _445: bool;
    let mut _446: bool;
    let mut _448: &std::ops::RangeTo<f32>;
    let _449: std::ops::RangeTo<f32>;
    let _450: &f32;
    let _451: f32;
    let mut _452: (&bool, &bool);
    let mut _453: &bool;
    let mut _454: &bool;
    let mut _457: bool;
    let mut _458: bool;
    let mut _459: bool;
    let mut _460: bool;
    let _462: !;
    let mut _463: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _464: !;
    let mut _465: bool;
    let mut _466: bool;
    let _467: bool;
    let mut _468: f32;
    let mut _469: bool;
    let mut _470: bool;
    let mut _472: &std::ops::RangeTo<f32>;
    let _473: std::ops::RangeTo<f32>;
    let _474: &f32;
    let _475: f32;
    let mut _476: (&bool, &bool);
    let mut _477: &bool;
    let mut _478: &bool;
    let mut _481: bool;
    let mut _482: bool;
    let mut _483: bool;
    let mut _484: bool;
    let _486: !;
    let mut _487: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _488: !;
    let mut _489: bool;
    let mut _490: bool;
    let mut _491: bool;
    let _492: bool;
    let mut _493: f32;
    let mut _494: bool;
    let mut _495: bool;
    let mut _497: &std::ops::RangeTo<f32>;
    let _498: std::ops::RangeTo<f32>;
    let _499: &f32;
    let _500: f32;
    let mut _501: (&bool, &bool);
    let mut _502: &bool;
    let mut _503: &bool;
    let mut _506: bool;
    let mut _507: bool;
    let mut _508: bool;
    let mut _509: bool;
    let _511: !;
    let mut _512: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _513: !;
    let mut _514: bool;
    let mut _515: bool;
    let _516: bool;
    let mut _517: f64;
    let mut _518: bool;
    let mut _519: bool;
    let mut _521: &std::ops::RangeTo<f64>;
    let _522: std::ops::RangeTo<f64>;
    let _523: &f64;
    let _524: f64;
    let mut _525: (&bool, &bool);
    let mut _526: &bool;
    let mut _527: &bool;
    let mut _530: bool;
    let mut _531: bool;
    let mut _532: bool;
    let mut _533: bool;
    let _535: !;
    let mut _536: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _537: !;
    let mut _538: bool;
    let mut _539: bool;
    let mut _540: bool;
    let _541: bool;
    let mut _542: f64;
    let mut _543: bool;
    let mut _544: bool;
    let mut _546: &std::ops::RangeTo<f64>;
    let _547: std::ops::RangeTo<f64>;
    let _548: &f64;
    let _549: f64;
    let mut _550: (&bool, &bool);
    let mut _551: &bool;
    let mut _552: &bool;
    let mut _555: bool;
    let mut _556: bool;
    let mut _557: bool;
    let mut _558: bool;
    let _560: !;
    let mut _561: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _562: !;
    let mut _563: bool;
    let mut _564: bool;
    let _565: bool;
    let mut _566: f64;
    let mut _567: bool;
    let mut _568: bool;
    let mut _570: &std::ops::RangeTo<f64>;
    let _571: std::ops::RangeTo<f64>;
    let _572: &f64;
    let _573: f64;
    let mut _574: (&bool, &bool);
    let mut _575: &bool;
    let mut _576: &bool;
    let mut _579: bool;
    let mut _580: bool;
    let mut _581: bool;
    let mut _582: bool;
    let _584: !;
    let mut _585: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _586: !;
    let mut _587: bool;
    let mut _588: bool;
    let mut _589: bool;
    let _590: bool;
    let mut _591: f64;
    let mut _592: bool;
    let mut _593: bool;
    let mut _595: &std::ops::RangeTo<f64>;
    let _596: std::ops::RangeTo<f64>;
    let _597: &f64;
    let _598: f64;
    let mut _599: (&bool, &bool);
    let mut _600: &bool;
    let mut _601: &bool;
    let mut _604: bool;
    let mut _605: bool;
    let mut _606: bool;
    let mut _607: bool;
    let _609: !;
    let mut _610: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _611: !;
    scope 1 {
        debug m => _3;
        let _7: bool;
        scope 2 {
            debug c => _7;
            let _15: &bool;
            let _16: &bool;
            scope 3 {
                debug left_val => _15;
                debug right_val => _16;
                let _21: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _21;
                }
            }
        }
    }
    scope 5 {
        debug m => _27;
        let _31: bool;
        scope 6 {
            debug c => _31;
            let _39: &bool;
            let _40: &bool;
            scope 7 {
                debug left_val => _39;
                debug right_val => _40;
                let _45: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _45;
                }
            }
        }
    }
    scope 9 {
        debug m => _52;
        let _56: bool;
        scope 10 {
            debug c => _56;
            let _64: &bool;
            let _65: &bool;
            scope 11 {
                debug left_val => _64;
                debug right_val => _65;
                let _70: core::panicking::AssertKind;
                scope 12 {
                    debug kind => _70;
                }
            }
        }
    }
    scope 13 {
        debug m => _77;
        let _81: bool;
        scope 14 {
            debug c => _81;
            let _89: &bool;
            let _90: &bool;
            scope 15 {
                debug left_val => _89;
                debug right_val => _90;
                let _95: core::panicking::AssertKind;
                scope 16 {
                    debug kind => _95;
                }
            }
        }
    }
    scope 17 {
        debug m => _101;
        let _105: bool;
        scope 18 {
            debug c => _105;
            let _113: &bool;
            let _114: &bool;
            scope 19 {
                debug left_val => _113;
                debug right_val => _114;
                let _119: core::panicking::AssertKind;
                scope 20 {
                    debug kind => _119;
                }
            }
        }
    }
    scope 21 {
        debug m => _125;
        let _129: bool;
        scope 22 {
            debug c => _129;
            let _137: &bool;
            let _138: &bool;
            scope 23 {
                debug left_val => _137;
                debug right_val => _138;
                let _143: core::panicking::AssertKind;
                scope 24 {
                    debug kind => _143;
                }
            }
        }
    }
    scope 25 {
        debug m => _150;
        let _154: bool;
        scope 26 {
            debug c => _154;
            let _162: &bool;
            let _163: &bool;
            scope 27 {
                debug left_val => _162;
                debug right_val => _163;
                let _168: core::panicking::AssertKind;
                scope 28 {
                    debug kind => _168;
                }
            }
        }
    }
    scope 29 {
        debug m => _175;
        let _179: bool;
        scope 30 {
            debug c => _179;
            let _187: &bool;
            let _188: &bool;
            scope 31 {
                debug left_val => _187;
                debug right_val => _188;
                let _193: core::panicking::AssertKind;
                scope 32 {
                    debug kind => _193;
                }
            }
        }
    }
    scope 33 {
        debug m => _199;
        let _203: bool;
        scope 34 {
            debug c => _203;
            let _211: &bool;
            let _212: &bool;
            scope 35 {
                debug left_val => _211;
                debug right_val => _212;
                let _217: core::panicking::AssertKind;
                scope 36 {
                    debug kind => _217;
                }
            }
        }
    }
    scope 37 {
        debug m => _223;
        let _227: bool;
        scope 38 {
            debug c => _227;
            let _235: &bool;
            let _236: &bool;
            scope 39 {
                debug left_val => _235;
                debug right_val => _236;
                let _241: core::panicking::AssertKind;
                scope 40 {
                    debug kind => _241;
                }
            }
        }
    }
    scope 41 {
        debug m => _247;
        let _251: bool;
        scope 42 {
            debug c => _251;
            let _259: &bool;
            let _260: &bool;
            scope 43 {
                debug left_val => _259;
                debug right_val => _260;
                let _265: core::panicking::AssertKind;
                scope 44 {
                    debug kind => _265;
                }
            }
        }
    }
    scope 45 {
        debug m => _272;
        let _276: bool;
        scope 46 {
            debug c => _276;
            let _284: &bool;
            let _285: &bool;
            scope 47 {
                debug left_val => _284;
                debug right_val => _285;
                let _290: core::panicking::AssertKind;
                scope 48 {
                    debug kind => _290;
                }
            }
        }
    }
    scope 49 {
        debug m => _296;
        let _300: bool;
        scope 50 {
            debug c => _300;
            let _308: &bool;
            let _309: &bool;
            scope 51 {
                debug left_val => _308;
                debug right_val => _309;
                let _314: core::panicking::AssertKind;
                scope 52 {
                    debug kind => _314;
                }
            }
        }
    }
    scope 53 {
        debug m => _320;
        let _324: bool;
        scope 54 {
            debug c => _324;
            let _332: &bool;
            let _333: &bool;
            scope 55 {
                debug left_val => _332;
                debug right_val => _333;
                let _338: core::panicking::AssertKind;
                scope 56 {
                    debug kind => _338;
                }
            }
        }
    }
    scope 57 {
        debug m => _344;
        let _348: bool;
        scope 58 {
            debug c => _348;
            let _356: &bool;
            let _357: &bool;
            scope 59 {
                debug left_val => _356;
                debug right_val => _357;
                let _362: core::panicking::AssertKind;
                scope 60 {
                    debug kind => _362;
                }
            }
        }
    }
    scope 61 {
        debug m => _369;
        let _373: bool;
        scope 62 {
            debug c => _373;
            let _381: &bool;
            let _382: &bool;
            scope 63 {
                debug left_val => _381;
                debug right_val => _382;
                let _387: core::panicking::AssertKind;
                scope 64 {
                    debug kind => _387;
                }
            }
        }
    }
    scope 65 {
        debug m => _394;
        let _398: bool;
        scope 66 {
            debug c => _398;
            let _406: &bool;
            let _407: &bool;
            scope 67 {
                debug left_val => _406;
                debug right_val => _407;
                let _412: core::panicking::AssertKind;
                scope 68 {
                    debug kind => _412;
                }
            }
        }
    }
    scope 69 {
        debug m => _418;
        let _422: bool;
        scope 70 {
            debug c => _422;
            let _430: &bool;
            let _431: &bool;
            scope 71 {
                debug left_val => _430;
                debug right_val => _431;
                let _436: core::panicking::AssertKind;
                scope 72 {
                    debug kind => _436;
                }
            }
        }
    }
    scope 73 {
        debug m => _443;
        let _447: bool;
        scope 74 {
            debug c => _447;
            let _455: &bool;
            let _456: &bool;
            scope 75 {
                debug left_val => _455;
                debug right_val => _456;
                let _461: core::panicking::AssertKind;
                scope 76 {
                    debug kind => _461;
                }
            }
        }
    }
    scope 77 {
        debug m => _467;
        let _471: bool;
        scope 78 {
            debug c => _471;
            let _479: &bool;
            let _480: &bool;
            scope 79 {
                debug left_val => _479;
                debug right_val => _480;
                let _485: core::panicking::AssertKind;
                scope 80 {
                    debug kind => _485;
                }
            }
        }
    }
    scope 81 {
        debug m => _492;
        let _496: bool;
        scope 82 {
            debug c => _496;
            let _504: &bool;
            let _505: &bool;
            scope 83 {
                debug left_val => _504;
                debug right_val => _505;
                let _510: core::panicking::AssertKind;
                scope 84 {
                    debug kind => _510;
                }
            }
        }
    }
    scope 85 {
        debug m => _516;
        let _520: bool;
        scope 86 {
            debug c => _520;
            let _528: &bool;
            let _529: &bool;
            scope 87 {
                debug left_val => _528;
                debug right_val => _529;
                let _534: core::panicking::AssertKind;
                scope 88 {
                    debug kind => _534;
                }
            }
        }
    }
    scope 89 {
        debug m => _541;
        let _545: bool;
        scope 90 {
            debug c => _545;
            let _553: &bool;
            let _554: &bool;
            scope 91 {
                debug left_val => _553;
                debug right_val => _554;
                let _559: core::panicking::AssertKind;
                scope 92 {
                    debug kind => _559;
                }
            }
        }
    }
    scope 93 {
        debug m => _565;
        let _569: bool;
        scope 94 {
            debug c => _569;
            let _577: &bool;
            let _578: &bool;
            scope 95 {
                debug left_val => _577;
                debug right_val => _578;
                let _583: core::panicking::AssertKind;
                scope 96 {
                    debug kind => _583;
                }
            }
        }
    }
    scope 97 {
        debug m => _590;
        let _594: bool;
        scope 98 {
            debug c => _594;
            let _602: &bool;
            let _603: &bool;
            scope 99 {
                debug left_val => _602;
                debug right_val => _603;
                let _608: core::panicking::AssertKind;
                scope 100 {
                    debug kind => _608;
                }
            }
        }
    }

    bb0: {
        _4 = const 0_u8;
        _5 = Le(const 0_u8, _4);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _6 = Lt(_4, const 1_u8);
        _3 = _6;
        goto -> bb3;
    }

    bb2: {
        _3 = const false;
        goto -> bb3;
    }

    bb3: {
        _9 = RangeTo::<u8> { end: const 1_u8 };
        _8 = &_9;
        _11 = const 0_u8;
        _10 = &_11;
        _7 = RangeTo::<u8>::contains::<u8>(move _8, _10) -> bb4;
    }

    bb4: {
        _13 = &_3;
        _14 = &_7;
        _12 = (move _13, move _14);
        _15 = (_12.0: &bool);
        _16 = (_12.1: &bool);
        _19 = (*_15);
        _20 = (*_16);
        _18 = Eq(move _19, move _20);
        _17 = Not(move _18);
        switchInt(move _17) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _21 = core::panicking::AssertKind::Eq;
        _23 = Option::<Arguments<'_>>::None;
        _22 = assert_failed::<bool, bool>(move _21, _15, _16, move _23);
    }

    bb6: {
        _2 = _3;
        _1 = Not(move _2);
        switchInt(move _1) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _24 = panic(const "assertion failed: yes!(0u8, .. 1)");
    }

    bb8: {
        _28 = const 0_u8;
        _29 = Le(const 0_u8, _28);
        switchInt(move _29) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _30 = Lt(_28, const 5_u8);
        _27 = _30;
        goto -> bb11;
    }

    bb10: {
        _27 = const false;
        goto -> bb11;
    }

    bb11: {
        _33 = RangeTo::<u8> { end: const 5_u8 };
        _32 = &_33;
        _35 = const 0_u8;
        _34 = &_35;
        _31 = RangeTo::<u8>::contains::<u8>(move _32, _34) -> bb12;
    }

    bb12: {
        _37 = &_27;
        _38 = &_31;
        _36 = (move _37, move _38);
        _39 = (_36.0: &bool);
        _40 = (_36.1: &bool);
        _43 = (*_39);
        _44 = (*_40);
        _42 = Eq(move _43, move _44);
        _41 = Not(move _42);
        switchInt(move _41) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _45 = core::panicking::AssertKind::Eq;
        _47 = Option::<Arguments<'_>>::None;
        _46 = assert_failed::<bool, bool>(move _45, _39, _40, move _47);
    }

    bb14: {
        _26 = _27;
        _25 = Not(move _26);
        switchInt(move _25) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _48 = panic(const "assertion failed: yes!(0u8, .. 5)");
    }

    bb16: {
        _53 = const 5_u8;
        _54 = Le(const 0_u8, _53);
        switchInt(move _54) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _55 = Lt(_53, const 5_u8);
        _52 = _55;
        goto -> bb19;
    }

    bb18: {
        _52 = const false;
        goto -> bb19;
    }

    bb19: {
        _58 = RangeTo::<u8> { end: const 5_u8 };
        _57 = &_58;
        _60 = const 5_u8;
        _59 = &_60;
        _56 = RangeTo::<u8>::contains::<u8>(move _57, _59) -> bb20;
    }

    bb20: {
        _62 = &_52;
        _63 = &_56;
        _61 = (move _62, move _63);
        _64 = (_61.0: &bool);
        _65 = (_61.1: &bool);
        _68 = (*_64);
        _69 = (*_65);
        _67 = Eq(move _68, move _69);
        _66 = Not(move _67);
        switchInt(move _66) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _70 = core::panicking::AssertKind::Eq;
        _72 = Option::<Arguments<'_>>::None;
        _71 = assert_failed::<bool, bool>(move _70, _64, _65, move _72);
    }

    bb22: {
        _51 = _52;
        _50 = Not(move _51);
        _49 = Not(move _50);
        switchInt(move _49) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _73 = panic(const "assertion failed: !yes!(5u8, .. 5)");
    }

    bb24: {
        _78 = const 6_u8;
        _79 = Le(const 0_u8, _78);
        switchInt(move _79) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _80 = Lt(_78, const 5_u8);
        _77 = _80;
        goto -> bb27;
    }

    bb26: {
        _77 = const false;
        goto -> bb27;
    }

    bb27: {
        _83 = RangeTo::<u8> { end: const 5_u8 };
        _82 = &_83;
        _85 = const 6_u8;
        _84 = &_85;
        _81 = RangeTo::<u8>::contains::<u8>(move _82, _84) -> bb28;
    }

    bb28: {
        _87 = &_77;
        _88 = &_81;
        _86 = (move _87, move _88);
        _89 = (_86.0: &bool);
        _90 = (_86.1: &bool);
        _93 = (*_89);
        _94 = (*_90);
        _92 = Eq(move _93, move _94);
        _91 = Not(move _92);
        switchInt(move _91) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _95 = core::panicking::AssertKind::Eq;
        _97 = Option::<Arguments<'_>>::None;
        _96 = assert_failed::<bool, bool>(move _95, _89, _90, move _97);
    }

    bb30: {
        _76 = _77;
        _75 = Not(move _76);
        _74 = Not(move _75);
        switchInt(move _74) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _98 = panic(const "assertion failed: !yes!(6u8, .. 5)");
    }

    bb32: {
        _102 = const _;
        _103 = Le(const 0_u8, _102);
        switchInt(move _103) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        _104 = Lt(_102, const 1_u8);
        _101 = _104;
        goto -> bb35;
    }

    bb34: {
        _101 = const false;
        goto -> bb35;
    }

    bb35: {
        _107 = RangeTo::<u8> { end: const _ };
        _106 = &_107;
        _109 = const _;
        _108 = &_109;
        _105 = RangeTo::<u8>::contains::<u8>(move _106, _108) -> bb36;
    }

    bb36: {
        _111 = &_101;
        _112 = &_105;
        _110 = (move _111, move _112);
        _113 = (_110.0: &bool);
        _114 = (_110.1: &bool);
        _117 = (*_113);
        _118 = (*_114);
        _116 = Eq(move _117, move _118);
        _115 = Not(move _116);
        switchInt(move _115) -> [0: bb38, otherwise: bb37];
    }

    bb37: {
        _119 = core::panicking::AssertKind::Eq;
        _121 = Option::<Arguments<'_>>::None;
        _120 = assert_failed::<bool, bool>(move _119, _113, _114, move _121);
    }

    bb38: {
        _100 = _101;
        _99 = Not(move _100);
        switchInt(move _99) -> [0: bb40, otherwise: bb39];
    }

    bb39: {
        _122 = panic(const "assertion failed: yes!(u8 :: MIN, .. NU8)");
    }

    bb40: {
        _126 = const 0_u8;
        _127 = Le(const 0_u8, _126);
        switchInt(move _127) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _128 = Lt(_126, const 5_u8);
        _125 = _128;
        goto -> bb43;
    }

    bb42: {
        _125 = const false;
        goto -> bb43;
    }

    bb43: {
        _131 = RangeTo::<u8> { end: const 5_u8 };
        _130 = &_131;
        _133 = const 0_u8;
        _132 = &_133;
        _129 = RangeTo::<u8>::contains::<u8>(move _130, _132) -> bb44;
    }

    bb44: {
        _135 = &_125;
        _136 = &_129;
        _134 = (move _135, move _136);
        _137 = (_134.0: &bool);
        _138 = (_134.1: &bool);
        _141 = (*_137);
        _142 = (*_138);
        _140 = Eq(move _141, move _142);
        _139 = Not(move _140);
        switchInt(move _139) -> [0: bb46, otherwise: bb45];
    }

    bb45: {
        _143 = core::panicking::AssertKind::Eq;
        _145 = Option::<Arguments<'_>>::None;
        _144 = assert_failed::<bool, bool>(move _143, _137, _138, move _145);
    }

    bb46: {
        _124 = _125;
        _123 = Not(move _124);
        switchInt(move _123) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _146 = panic(const "assertion failed: yes!(0u8, .. 5)");
    }

    bb48: {
        _151 = const 5_u8;
        _152 = Le(const 0_u8, _151);
        switchInt(move _152) -> [0: bb50, otherwise: bb49];
    }

    bb49: {
        _153 = Lt(_151, const 5_u8);
        _150 = _153;
        goto -> bb51;
    }

    bb50: {
        _150 = const false;
        goto -> bb51;
    }

    bb51: {
        _156 = RangeTo::<u8> { end: const 5_u8 };
        _155 = &_156;
        _158 = const 5_u8;
        _157 = &_158;
        _154 = RangeTo::<u8>::contains::<u8>(move _155, _157) -> bb52;
    }

    bb52: {
        _160 = &_150;
        _161 = &_154;
        _159 = (move _160, move _161);
        _162 = (_159.0: &bool);
        _163 = (_159.1: &bool);
        _166 = (*_162);
        _167 = (*_163);
        _165 = Eq(move _166, move _167);
        _164 = Not(move _165);
        switchInt(move _164) -> [0: bb54, otherwise: bb53];
    }

    bb53: {
        _168 = core::panicking::AssertKind::Eq;
        _170 = Option::<Arguments<'_>>::None;
        _169 = assert_failed::<bool, bool>(move _168, _162, _163, move _170);
    }

    bb54: {
        _149 = _150;
        _148 = Not(move _149);
        _147 = Not(move _148);
        switchInt(move _147) -> [0: bb56, otherwise: bb55];
    }

    bb55: {
        _171 = panic(const "assertion failed: !yes!(5u8, .. 5)");
    }

    bb56: {
        _176 = const 6_u8;
        _177 = Le(const 0_u8, _176);
        switchInt(move _177) -> [0: bb58, otherwise: bb57];
    }

    bb57: {
        _178 = Lt(_176, const 5_u8);
        _175 = _178;
        goto -> bb59;
    }

    bb58: {
        _175 = const false;
        goto -> bb59;
    }

    bb59: {
        _181 = RangeTo::<u8> { end: const 5_u8 };
        _180 = &_181;
        _183 = const 6_u8;
        _182 = &_183;
        _179 = RangeTo::<u8>::contains::<u8>(move _180, _182) -> bb60;
    }

    bb60: {
        _185 = &_175;
        _186 = &_179;
        _184 = (move _185, move _186);
        _187 = (_184.0: &bool);
        _188 = (_184.1: &bool);
        _191 = (*_187);
        _192 = (*_188);
        _190 = Eq(move _191, move _192);
        _189 = Not(move _190);
        switchInt(move _189) -> [0: bb62, otherwise: bb61];
    }

    bb61: {
        _193 = core::panicking::AssertKind::Eq;
        _195 = Option::<Arguments<'_>>::None;
        _194 = assert_failed::<bool, bool>(move _193, _187, _188, move _195);
    }

    bb62: {
        _174 = _175;
        _173 = Not(move _174);
        _172 = Not(move _173);
        switchInt(move _172) -> [0: bb64, otherwise: bb63];
    }

    bb63: {
        _196 = panic(const "assertion failed: !yes!(6u8, .. 5)");
    }

    bb64: {
        _200 = const _;
        _201 = Le(const i16::MIN, _200);
        switchInt(move _201) -> [0: bb66, otherwise: bb65];
    }

    bb65: {
        _202 = Lt(_200, const -32767_i16);
        _199 = _202;
        goto -> bb67;
    }

    bb66: {
        _199 = const false;
        goto -> bb67;
    }

    bb67: {
        _205 = RangeTo::<i16> { end: const _ };
        _204 = &_205;
        _207 = const _;
        _206 = &_207;
        _203 = RangeTo::<i16>::contains::<i16>(move _204, _206) -> bb68;
    }

    bb68: {
        _209 = &_199;
        _210 = &_203;
        _208 = (move _209, move _210);
        _211 = (_208.0: &bool);
        _212 = (_208.1: &bool);
        _215 = (*_211);
        _216 = (*_212);
        _214 = Eq(move _215, move _216);
        _213 = Not(move _214);
        switchInt(move _213) -> [0: bb70, otherwise: bb69];
    }

    bb69: {
        _217 = core::panicking::AssertKind::Eq;
        _219 = Option::<Arguments<'_>>::None;
        _218 = assert_failed::<bool, bool>(move _217, _211, _212, move _219);
    }

    bb70: {
        _198 = _199;
        _197 = Not(move _198);
        switchInt(move _197) -> [0: bb72, otherwise: bb71];
    }

    bb71: {
        _220 = panic(const "assertion failed: yes!(i16 :: MIN, .. NI16)");
    }

    bb72: {
        _224 = const _;
        _225 = Le(const i16::MIN, _224);
        switchInt(move _225) -> [0: bb74, otherwise: bb73];
    }

    bb73: {
        _226 = Lt(_224, const 5_i16);
        _223 = _226;
        goto -> bb75;
    }

    bb74: {
        _223 = const false;
        goto -> bb75;
    }

    bb75: {
        _229 = RangeTo::<i16> { end: const 5_i16 };
        _228 = &_229;
        _231 = const _;
        _230 = &_231;
        _227 = RangeTo::<i16>::contains::<i16>(move _228, _230) -> bb76;
    }

    bb76: {
        _233 = &_223;
        _234 = &_227;
        _232 = (move _233, move _234);
        _235 = (_232.0: &bool);
        _236 = (_232.1: &bool);
        _239 = (*_235);
        _240 = (*_236);
        _238 = Eq(move _239, move _240);
        _237 = Not(move _238);
        switchInt(move _237) -> [0: bb78, otherwise: bb77];
    }

    bb77: {
        _241 = core::panicking::AssertKind::Eq;
        _243 = Option::<Arguments<'_>>::None;
        _242 = assert_failed::<bool, bool>(move _241, _235, _236, move _243);
    }

    bb78: {
        _222 = _223;
        _221 = Not(move _222);
        switchInt(move _221) -> [0: bb80, otherwise: bb79];
    }

    bb79: {
        _244 = panic(const "assertion failed: yes!(i16 :: MIN, .. 5)");
    }

    bb80: {
        _248 = const -6_i32;
        _249 = Le(const i32::MIN, _248);
        switchInt(move _249) -> [0: bb82, otherwise: bb81];
    }

    bb81: {
        _250 = Lt(_248, const -5_i32);
        _247 = _250;
        goto -> bb83;
    }

    bb82: {
        _247 = const false;
        goto -> bb83;
    }

    bb83: {
        _253 = RangeTo::<i32> { end: const -5_i32 };
        _252 = &_253;
        _255 = const -6_i32;
        _254 = &_255;
        _251 = RangeTo::<i32>::contains::<i32>(move _252, _254) -> bb84;
    }

    bb84: {
        _257 = &_247;
        _258 = &_251;
        _256 = (move _257, move _258);
        _259 = (_256.0: &bool);
        _260 = (_256.1: &bool);
        _263 = (*_259);
        _264 = (*_260);
        _262 = Eq(move _263, move _264);
        _261 = Not(move _262);
        switchInt(move _261) -> [0: bb86, otherwise: bb85];
    }

    bb85: {
        _265 = core::panicking::AssertKind::Eq;
        _267 = Option::<Arguments<'_>>::None;
        _266 = assert_failed::<bool, bool>(move _265, _259, _260, move _267);
    }

    bb86: {
        _246 = _247;
        _245 = Not(move _246);
        switchInt(move _245) -> [0: bb88, otherwise: bb87];
    }

    bb87: {
        _268 = panic(const "assertion failed: yes!(- 6, .. - 5)");
    }

    bb88: {
        _273 = const -5_i32;
        _274 = Le(const i32::MIN, _273);
        switchInt(move _274) -> [0: bb90, otherwise: bb89];
    }

    bb89: {
        _275 = Lt(_273, const -5_i32);
        _272 = _275;
        goto -> bb91;
    }

    bb90: {
        _272 = const false;
        goto -> bb91;
    }

    bb91: {
        _278 = RangeTo::<i32> { end: const -5_i32 };
        _277 = &_278;
        _280 = const -5_i32;
        _279 = &_280;
        _276 = RangeTo::<i32>::contains::<i32>(move _277, _279) -> bb92;
    }

    bb92: {
        _282 = &_272;
        _283 = &_276;
        _281 = (move _282, move _283);
        _284 = (_281.0: &bool);
        _285 = (_281.1: &bool);
        _288 = (*_284);
        _289 = (*_285);
        _287 = Eq(move _288, move _289);
        _286 = Not(move _287);
        switchInt(move _286) -> [0: bb94, otherwise: bb93];
    }

    bb93: {
        _290 = core::panicking::AssertKind::Eq;
        _292 = Option::<Arguments<'_>>::None;
        _291 = assert_failed::<bool, bool>(move _290, _284, _285, move _292);
    }

    bb94: {
        _271 = _272;
        _270 = Not(move _271);
        _269 = Not(move _270);
        switchInt(move _269) -> [0: bb96, otherwise: bb95];
    }

    bb95: {
        _293 = panic(const "assertion failed: !yes!(- 5, .. - 5)");
    }

    bb96: {
        _297 = const '\0';
        _298 = Le(const '\0', _297);
        switchInt(move _298) -> [0: bb98, otherwise: bb97];
    }

    bb97: {
        _299 = Lt(_297, const '\u{1}');
        _296 = _299;
        goto -> bb99;
    }

    bb98: {
        _296 = const false;
        goto -> bb99;
    }

    bb99: {
        _302 = RangeTo::<char> { end: const '\u{1}' };
        _301 = &_302;
        _304 = const '\0';
        _303 = &_304;
        _300 = RangeTo::<char>::contains::<char>(move _301, _303) -> bb100;
    }

    bb100: {
        _306 = &_296;
        _307 = &_300;
        _305 = (move _306, move _307);
        _308 = (_305.0: &bool);
        _309 = (_305.1: &bool);
        _312 = (*_308);
        _313 = (*_309);
        _311 = Eq(move _312, move _313);
        _310 = Not(move _311);
        switchInt(move _310) -> [0: bb102, otherwise: bb101];
    }

    bb101: {
        _314 = core::panicking::AssertKind::Eq;
        _316 = Option::<Arguments<'_>>::None;
        _315 = assert_failed::<bool, bool>(move _314, _308, _309, move _316);
    }

    bb102: {
        _295 = _296;
        _294 = Not(move _295);
        switchInt(move _294) -> [0: bb104, otherwise: bb103];
    }

    bb103: {
        _317 = panic(const "assertion failed: yes!(\\'\\\\u{0}\\', .. \\'\\\\u{1}\\')");
    }

    bb104: {
        _321 = const '\0';
        _322 = Le(const '\0', _321);
        switchInt(move _322) -> [0: bb106, otherwise: bb105];
    }

    bb105: {
        _323 = Lt(_321, const 'a');
        _320 = _323;
        goto -> bb107;
    }

    bb106: {
        _320 = const false;
        goto -> bb107;
    }

    bb107: {
        _326 = RangeTo::<char> { end: const 'a' };
        _325 = &_326;
        _328 = const '\0';
        _327 = &_328;
        _324 = RangeTo::<char>::contains::<char>(move _325, _327) -> bb108;
    }

    bb108: {
        _330 = &_320;
        _331 = &_324;
        _329 = (move _330, move _331);
        _332 = (_329.0: &bool);
        _333 = (_329.1: &bool);
        _336 = (*_332);
        _337 = (*_333);
        _335 = Eq(move _336, move _337);
        _334 = Not(move _335);
        switchInt(move _334) -> [0: bb110, otherwise: bb109];
    }

    bb109: {
        _338 = core::panicking::AssertKind::Eq;
        _340 = Option::<Arguments<'_>>::None;
        _339 = assert_failed::<bool, bool>(move _338, _332, _333, move _340);
    }

    bb110: {
        _319 = _320;
        _318 = Not(move _319);
        switchInt(move _318) -> [0: bb112, otherwise: bb111];
    }

    bb111: {
        _341 = panic(const "assertion failed: yes!(\\'\\\\u{0}\\', .. \\'a\\')");
    }

    bb112: {
        _345 = const 'a';
        _346 = Le(const '\0', _345);
        switchInt(move _346) -> [0: bb114, otherwise: bb113];
    }

    bb113: {
        _347 = Lt(_345, const 'b');
        _344 = _347;
        goto -> bb115;
    }

    bb114: {
        _344 = const false;
        goto -> bb115;
    }

    bb115: {
        _350 = RangeTo::<char> { end: const 'b' };
        _349 = &_350;
        _352 = const 'a';
        _351 = &_352;
        _348 = RangeTo::<char>::contains::<char>(move _349, _351) -> bb116;
    }

    bb116: {
        _354 = &_344;
        _355 = &_348;
        _353 = (move _354, move _355);
        _356 = (_353.0: &bool);
        _357 = (_353.1: &bool);
        _360 = (*_356);
        _361 = (*_357);
        _359 = Eq(move _360, move _361);
        _358 = Not(move _359);
        switchInt(move _358) -> [0: bb118, otherwise: bb117];
    }

    bb117: {
        _362 = core::panicking::AssertKind::Eq;
        _364 = Option::<Arguments<'_>>::None;
        _363 = assert_failed::<bool, bool>(move _362, _356, _357, move _364);
    }

    bb118: {
        _343 = _344;
        _342 = Not(move _343);
        switchInt(move _342) -> [0: bb120, otherwise: bb119];
    }

    bb119: {
        _365 = panic(const "assertion failed: yes!(\\'a\\', .. \\'b\\')");
    }

    bb120: {
        _370 = const 'a';
        _371 = Le(const '\0', _370);
        switchInt(move _371) -> [0: bb122, otherwise: bb121];
    }

    bb121: {
        _372 = Lt(_370, const 'a');
        _369 = _372;
        goto -> bb123;
    }

    bb122: {
        _369 = const false;
        goto -> bb123;
    }

    bb123: {
        _375 = RangeTo::<char> { end: const 'a' };
        _374 = &_375;
        _377 = const 'a';
        _376 = &_377;
        _373 = RangeTo::<char>::contains::<char>(move _374, _376) -> bb124;
    }

    bb124: {
        _379 = &_369;
        _380 = &_373;
        _378 = (move _379, move _380);
        _381 = (_378.0: &bool);
        _382 = (_378.1: &bool);
        _385 = (*_381);
        _386 = (*_382);
        _384 = Eq(move _385, move _386);
        _383 = Not(move _384);
        switchInt(move _383) -> [0: bb126, otherwise: bb125];
    }

    bb125: {
        _387 = core::panicking::AssertKind::Eq;
        _389 = Option::<Arguments<'_>>::None;
        _388 = assert_failed::<bool, bool>(move _387, _381, _382, move _389);
    }

    bb126: {
        _368 = _369;
        _367 = Not(move _368);
        _366 = Not(move _367);
        switchInt(move _366) -> [0: bb128, otherwise: bb127];
    }

    bb127: {
        _390 = panic(const "assertion failed: !yes!(\\'a\\', .. \\'a\\')");
    }

    bb128: {
        _395 = const 'b';
        _396 = Le(const '\0', _395);
        switchInt(move _396) -> [0: bb130, otherwise: bb129];
    }

    bb129: {
        _397 = Lt(_395, const 'a');
        _394 = _397;
        goto -> bb131;
    }

    bb130: {
        _394 = const false;
        goto -> bb131;
    }

    bb131: {
        _400 = RangeTo::<char> { end: const 'a' };
        _399 = &_400;
        _402 = const 'b';
        _401 = &_402;
        _398 = RangeTo::<char>::contains::<char>(move _399, _401) -> bb132;
    }

    bb132: {
        _404 = &_394;
        _405 = &_398;
        _403 = (move _404, move _405);
        _406 = (_403.0: &bool);
        _407 = (_403.1: &bool);
        _410 = (*_406);
        _411 = (*_407);
        _409 = Eq(move _410, move _411);
        _408 = Not(move _409);
        switchInt(move _408) -> [0: bb134, otherwise: bb133];
    }

    bb133: {
        _412 = core::panicking::AssertKind::Eq;
        _414 = Option::<Arguments<'_>>::None;
        _413 = assert_failed::<bool, bool>(move _412, _406, _407, move _414);
    }

    bb134: {
        _393 = _394;
        _392 = Not(move _393);
        _391 = Not(move _392);
        switchInt(move _391) -> [0: bb136, otherwise: bb135];
    }

    bb135: {
        _415 = panic(const "assertion failed: !yes!(\\'b\\', .. \\'a\\')");
    }

    bb136: {
        _419 = const _;
        _420 = Le(const -Inff32, _419);
        switchInt(move _420) -> [0: bb138, otherwise: bb137];
    }

    bb137: {
        _421 = Lt(_419, const 1f32);
        _418 = _421;
        goto -> bb139;
    }

    bb138: {
        _418 = const false;
        goto -> bb139;
    }

    bb139: {
        _424 = RangeTo::<f32> { end: const 1f32 };
        _423 = &_424;
        _426 = const _;
        _425 = &_426;
        _422 = RangeTo::<f32>::contains::<f32>(move _423, _425) -> bb140;
    }

    bb140: {
        _428 = &_418;
        _429 = &_422;
        _427 = (move _428, move _429);
        _430 = (_427.0: &bool);
        _431 = (_427.1: &bool);
        _434 = (*_430);
        _435 = (*_431);
        _433 = Eq(move _434, move _435);
        _432 = Not(move _433);
        switchInt(move _432) -> [0: bb142, otherwise: bb141];
    }

    bb141: {
        _436 = core::panicking::AssertKind::Eq;
        _438 = Option::<Arguments<'_>>::None;
        _437 = assert_failed::<bool, bool>(move _436, _430, _431, move _438);
    }

    bb142: {
        _417 = _418;
        _416 = Not(move _417);
        switchInt(move _416) -> [0: bb144, otherwise: bb143];
    }

    bb143: {
        _439 = panic(const "assertion failed: yes!(f32 :: NEG_INFINITY, .. 1.0f32)");
    }

    bb144: {
        _444 = const 1.5f32;
        _445 = Le(const -Inff32, _444);
        switchInt(move _445) -> [0: bb146, otherwise: bb145];
    }

    bb145: {
        _446 = Lt(_444, const 1.5f32);
        _443 = _446;
        goto -> bb147;
    }

    bb146: {
        _443 = const false;
        goto -> bb147;
    }

    bb147: {
        _449 = RangeTo::<f32> { end: const 1.5f32 };
        _448 = &_449;
        _451 = const 1.5f32;
        _450 = &_451;
        _447 = RangeTo::<f32>::contains::<f32>(move _448, _450) -> bb148;
    }

    bb148: {
        _453 = &_443;
        _454 = &_447;
        _452 = (move _453, move _454);
        _455 = (_452.0: &bool);
        _456 = (_452.1: &bool);
        _459 = (*_455);
        _460 = (*_456);
        _458 = Eq(move _459, move _460);
        _457 = Not(move _458);
        switchInt(move _457) -> [0: bb150, otherwise: bb149];
    }

    bb149: {
        _461 = core::panicking::AssertKind::Eq;
        _463 = Option::<Arguments<'_>>::None;
        _462 = assert_failed::<bool, bool>(move _461, _455, _456, move _463);
    }

    bb150: {
        _442 = _443;
        _441 = Not(move _442);
        _440 = Not(move _441);
        switchInt(move _440) -> [0: bb152, otherwise: bb151];
    }

    bb151: {
        _464 = panic(const "assertion failed: !yes!(1.5f32, .. 1.5f32)");
    }

    bb152: {
        _468 = const 1.5f32;
        _469 = Le(const -Inff32, _468);
        switchInt(move _469) -> [0: bb154, otherwise: bb153];
    }

    bb153: {
        _470 = Lt(_468, const 1.50000012f32);
        _467 = _470;
        goto -> bb155;
    }

    bb154: {
        _467 = const false;
        goto -> bb155;
    }

    bb155: {
        _473 = RangeTo::<f32> { end: const _ };
        _472 = &_473;
        _475 = const 1.5f32;
        _474 = &_475;
        _471 = RangeTo::<f32>::contains::<f32>(move _472, _474) -> bb156;
    }

    bb156: {
        _477 = &_467;
        _478 = &_471;
        _476 = (move _477, move _478);
        _479 = (_476.0: &bool);
        _480 = (_476.1: &bool);
        _483 = (*_479);
        _484 = (*_480);
        _482 = Eq(move _483, move _484);
        _481 = Not(move _482);
        switchInt(move _481) -> [0: bb158, otherwise: bb157];
    }

    bb157: {
        _485 = core::panicking::AssertKind::Eq;
        _487 = Option::<Arguments<'_>>::None;
        _486 = assert_failed::<bool, bool>(move _485, _479, _480, move _487);
    }

    bb158: {
        _466 = _467;
        _465 = Not(move _466);
        switchInt(move _465) -> [0: bb160, otherwise: bb159];
    }

    bb159: {
        _488 = panic(const "assertion failed: yes!(1.5f32, .. E32)");
    }

    bb160: {
        _493 = const 1.60000002f32;
        _494 = Le(const -Inff32, _493);
        switchInt(move _494) -> [0: bb162, otherwise: bb161];
    }

    bb161: {
        _495 = Lt(_493, const 1.5f32);
        _492 = _495;
        goto -> bb163;
    }

    bb162: {
        _492 = const false;
        goto -> bb163;
    }

    bb163: {
        _498 = RangeTo::<f32> { end: const 1.5f32 };
        _497 = &_498;
        _500 = const 1.60000002f32;
        _499 = &_500;
        _496 = RangeTo::<f32>::contains::<f32>(move _497, _499) -> bb164;
    }

    bb164: {
        _502 = &_492;
        _503 = &_496;
        _501 = (move _502, move _503);
        _504 = (_501.0: &bool);
        _505 = (_501.1: &bool);
        _508 = (*_504);
        _509 = (*_505);
        _507 = Eq(move _508, move _509);
        _506 = Not(move _507);
        switchInt(move _506) -> [0: bb166, otherwise: bb165];
    }

    bb165: {
        _510 = core::panicking::AssertKind::Eq;
        _512 = Option::<Arguments<'_>>::None;
        _511 = assert_failed::<bool, bool>(move _510, _504, _505, move _512);
    }

    bb166: {
        _491 = _492;
        _490 = Not(move _491);
        _489 = Not(move _490);
        switchInt(move _489) -> [0: bb168, otherwise: bb167];
    }

    bb167: {
        _513 = panic(const "assertion failed: !yes!(1.6f32, .. 1.5f32)");
    }

    bb168: {
        _517 = const _;
        _518 = Le(const -Inff64, _517);
        switchInt(move _518) -> [0: bb170, otherwise: bb169];
    }

    bb169: {
        _519 = Lt(_517, const 1f64);
        _516 = _519;
        goto -> bb171;
    }

    bb170: {
        _516 = const false;
        goto -> bb171;
    }

    bb171: {
        _522 = RangeTo::<f64> { end: const 1f64 };
        _521 = &_522;
        _524 = const _;
        _523 = &_524;
        _520 = RangeTo::<f64>::contains::<f64>(move _521, _523) -> bb172;
    }

    bb172: {
        _526 = &_516;
        _527 = &_520;
        _525 = (move _526, move _527);
        _528 = (_525.0: &bool);
        _529 = (_525.1: &bool);
        _532 = (*_528);
        _533 = (*_529);
        _531 = Eq(move _532, move _533);
        _530 = Not(move _531);
        switchInt(move _530) -> [0: bb174, otherwise: bb173];
    }

    bb173: {
        _534 = core::panicking::AssertKind::Eq;
        _536 = Option::<Arguments<'_>>::None;
        _535 = assert_failed::<bool, bool>(move _534, _528, _529, move _536);
    }

    bb174: {
        _515 = _516;
        _514 = Not(move _515);
        switchInt(move _514) -> [0: bb176, otherwise: bb175];
    }

    bb175: {
        _537 = panic(const "assertion failed: yes!(f64 :: NEG_INFINITY, .. 1.0f64)");
    }

    bb176: {
        _542 = const 1.5f64;
        _543 = Le(const -Inff64, _542);
        switchInt(move _543) -> [0: bb178, otherwise: bb177];
    }

    bb177: {
        _544 = Lt(_542, const 1.5f64);
        _541 = _544;
        goto -> bb179;
    }

    bb178: {
        _541 = const false;
        goto -> bb179;
    }

    bb179: {
        _547 = RangeTo::<f64> { end: const 1.5f64 };
        _546 = &_547;
        _549 = const 1.5f64;
        _548 = &_549;
        _545 = RangeTo::<f64>::contains::<f64>(move _546, _548) -> bb180;
    }

    bb180: {
        _551 = &_541;
        _552 = &_545;
        _550 = (move _551, move _552);
        _553 = (_550.0: &bool);
        _554 = (_550.1: &bool);
        _557 = (*_553);
        _558 = (*_554);
        _556 = Eq(move _557, move _558);
        _555 = Not(move _556);
        switchInt(move _555) -> [0: bb182, otherwise: bb181];
    }

    bb181: {
        _559 = core::panicking::AssertKind::Eq;
        _561 = Option::<Arguments<'_>>::None;
        _560 = assert_failed::<bool, bool>(move _559, _553, _554, move _561);
    }

    bb182: {
        _540 = _541;
        _539 = Not(move _540);
        _538 = Not(move _539);
        switchInt(move _538) -> [0: bb184, otherwise: bb183];
    }

    bb183: {
        _562 = panic(const "assertion failed: !yes!(1.5f64, .. 1.5f64)");
    }

    bb184: {
        _566 = const 1.5f64;
        _567 = Le(const -Inff64, _566);
        switchInt(move _567) -> [0: bb186, otherwise: bb185];
    }

    bb185: {
        _568 = Lt(_566, const 1.5000000000000002f64);
        _565 = _568;
        goto -> bb187;
    }

    bb186: {
        _565 = const false;
        goto -> bb187;
    }

    bb187: {
        _571 = RangeTo::<f64> { end: const _ };
        _570 = &_571;
        _573 = const 1.5f64;
        _572 = &_573;
        _569 = RangeTo::<f64>::contains::<f64>(move _570, _572) -> bb188;
    }

    bb188: {
        _575 = &_565;
        _576 = &_569;
        _574 = (move _575, move _576);
        _577 = (_574.0: &bool);
        _578 = (_574.1: &bool);
        _581 = (*_577);
        _582 = (*_578);
        _580 = Eq(move _581, move _582);
        _579 = Not(move _580);
        switchInt(move _579) -> [0: bb190, otherwise: bb189];
    }

    bb189: {
        _583 = core::panicking::AssertKind::Eq;
        _585 = Option::<Arguments<'_>>::None;
        _584 = assert_failed::<bool, bool>(move _583, _577, _578, move _585);
    }

    bb190: {
        _564 = _565;
        _563 = Not(move _564);
        switchInt(move _563) -> [0: bb192, otherwise: bb191];
    }

    bb191: {
        _586 = panic(const "assertion failed: yes!(1.5f64, .. E64)");
    }

    bb192: {
        _591 = const 1.6000000000000001f64;
        _592 = Le(const -Inff64, _591);
        switchInt(move _592) -> [0: bb194, otherwise: bb193];
    }

    bb193: {
        _593 = Lt(_591, const 1.5f64);
        _590 = _593;
        goto -> bb195;
    }

    bb194: {
        _590 = const false;
        goto -> bb195;
    }

    bb195: {
        _596 = RangeTo::<f64> { end: const 1.5f64 };
        _595 = &_596;
        _598 = const 1.6000000000000001f64;
        _597 = &_598;
        _594 = RangeTo::<f64>::contains::<f64>(move _595, _597) -> bb196;
    }

    bb196: {
        _600 = &_590;
        _601 = &_594;
        _599 = (move _600, move _601);
        _602 = (_599.0: &bool);
        _603 = (_599.1: &bool);
        _606 = (*_602);
        _607 = (*_603);
        _605 = Eq(move _606, move _607);
        _604 = Not(move _605);
        switchInt(move _604) -> [0: bb198, otherwise: bb197];
    }

    bb197: {
        _608 = core::panicking::AssertKind::Eq;
        _610 = Option::<Arguments<'_>>::None;
        _609 = assert_failed::<bool, bool>(move _608, _602, _603, move _610);
    }

    bb198: {
        _589 = _590;
        _588 = Not(move _589);
        _587 = Not(move _588);
        switchInt(move _587) -> [0: bb200, otherwise: bb199];
    }

    bb199: {
        _611 = panic(const "assertion failed: !yes!(1.6f64, .. 1.5f64)");
    }

    bb200: {
        return;
    }
}

const NU8: u8 = {
    let mut _0: u8;
    let mut _1: (u8, bool);

    bb0: {
        _1 = CheckedAdd(const _, const 1_u8);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u8) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: u8);
        return;
    }
}

const range_to::NI16: i16 = {
    let mut _0: i16;
    let mut _1: (i16, bool);

    bb0: {
        _1 = CheckedAdd(const _, const 1_i16);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_i16) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: i16);
        return;
    }
}

const E32: f32 = {
    let mut _0: f32;

    bb0: {
        _0 = Add(const 1.5f32, const _);
        return;
    }
}

const E64: f64 = {
    let mut _0: f64;

    bb0: {
        _0 = Add(const 1.5f64, const _);
        return;
    }
}

fn range_from() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let _3: bool;
    let mut _5: &std::ops::RangeFrom<u8>;
    let _6: std::ops::RangeFrom<u8>;
    let _7: &u8;
    let _8: u8;
    let mut _9: (&bool, &bool);
    let mut _10: &bool;
    let mut _11: &bool;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: bool;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: !;
    let mut _22: bool;
    let mut _23: bool;
    let _24: bool;
    let mut _26: &std::ops::RangeFrom<u8>;
    let _27: std::ops::RangeFrom<u8>;
    let _28: &u8;
    let _29: u8;
    let mut _30: (&bool, &bool);
    let mut _31: &bool;
    let mut _32: &bool;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: bool;
    let _40: !;
    let mut _41: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _42: !;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: bool;
    let _46: bool;
    let mut _47: u8;
    let mut _48: bool;
    let mut _49: bool;
    let mut _51: &std::ops::RangeFrom<u8>;
    let _52: std::ops::RangeFrom<u8>;
    let _53: &u8;
    let _54: u8;
    let mut _55: (&bool, &bool);
    let mut _56: &bool;
    let mut _57: &bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let _65: !;
    let mut _66: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _67: !;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: bool;
    let _71: bool;
    let mut _72: i32;
    let mut _73: bool;
    let mut _74: bool;
    let mut _76: &std::ops::RangeFrom<i32>;
    let _77: std::ops::RangeFrom<i32>;
    let _78: &i32;
    let _79: i32;
    let mut _80: (&bool, &bool);
    let mut _81: &bool;
    let mut _82: &bool;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: bool;
    let mut _88: bool;
    let _90: !;
    let mut _91: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _92: !;
    let mut _93: bool;
    let mut _94: bool;
    let _95: bool;
    let mut _96: i32;
    let mut _97: bool;
    let mut _98: bool;
    let mut _100: &std::ops::RangeFrom<i32>;
    let _101: std::ops::RangeFrom<i32>;
    let _102: &i32;
    let _103: i32;
    let mut _104: (&bool, &bool);
    let mut _105: &bool;
    let mut _106: &bool;
    let mut _109: bool;
    let mut _110: bool;
    let mut _111: bool;
    let mut _112: bool;
    let _114: !;
    let mut _115: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _116: !;
    let mut _117: bool;
    let mut _118: bool;
    let _119: bool;
    let mut _120: i32;
    let mut _121: bool;
    let mut _122: bool;
    let mut _124: &std::ops::RangeFrom<i32>;
    let _125: std::ops::RangeFrom<i32>;
    let _126: &i32;
    let _127: i32;
    let mut _128: (&bool, &bool);
    let mut _129: &bool;
    let mut _130: &bool;
    let mut _133: bool;
    let mut _134: bool;
    let mut _135: bool;
    let mut _136: bool;
    let _138: !;
    let mut _139: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _140: !;
    let mut _141: bool;
    let mut _142: bool;
    let _143: bool;
    let mut _144: u8;
    let mut _146: &std::ops::RangeFrom<u8>;
    let _147: std::ops::RangeFrom<u8>;
    let _148: &u8;
    let _149: u8;
    let mut _150: (&bool, &bool);
    let mut _151: &bool;
    let mut _152: &bool;
    let mut _155: bool;
    let mut _156: bool;
    let mut _157: bool;
    let mut _158: bool;
    let _160: !;
    let mut _161: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _162: !;
    let mut _163: bool;
    let mut _164: bool;
    let _165: bool;
    let mut _167: &std::ops::RangeFrom<i16>;
    let _168: std::ops::RangeFrom<i16>;
    let _169: &i16;
    let _170: i16;
    let mut _171: (&bool, &bool);
    let mut _172: &bool;
    let mut _173: &bool;
    let mut _176: bool;
    let mut _177: bool;
    let mut _178: bool;
    let mut _179: bool;
    let _181: !;
    let mut _182: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _183: !;
    let mut _184: bool;
    let mut _185: bool;
    let _186: bool;
    let mut _188: &std::ops::RangeFrom<i16>;
    let _189: std::ops::RangeFrom<i16>;
    let _190: &i16;
    let _191: i16;
    let mut _192: (&bool, &bool);
    let mut _193: &bool;
    let mut _194: &bool;
    let mut _197: bool;
    let mut _198: bool;
    let mut _199: bool;
    let mut _200: bool;
    let _202: !;
    let mut _203: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _204: !;
    let mut _205: bool;
    let mut _206: bool;
    let mut _207: bool;
    let _208: bool;
    let mut _209: i16;
    let mut _210: bool;
    let mut _211: bool;
    let mut _213: &std::ops::RangeFrom<i16>;
    let _214: std::ops::RangeFrom<i16>;
    let _215: &i16;
    let _216: i16;
    let mut _217: (&bool, &bool);
    let mut _218: &bool;
    let mut _219: &bool;
    let mut _222: bool;
    let mut _223: bool;
    let mut _224: bool;
    let mut _225: bool;
    let _227: !;
    let mut _228: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _229: !;
    let mut _230: bool;
    let mut _231: bool;
    let mut _232: bool;
    let _233: bool;
    let mut _234: i32;
    let mut _235: bool;
    let mut _236: bool;
    let mut _238: &std::ops::RangeFrom<i32>;
    let _239: std::ops::RangeFrom<i32>;
    let _240: &i32;
    let _241: i32;
    let mut _242: (&bool, &bool);
    let mut _243: &bool;
    let mut _244: &bool;
    let mut _247: bool;
    let mut _248: bool;
    let mut _249: bool;
    let mut _250: bool;
    let _252: !;
    let mut _253: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _254: !;
    let mut _255: bool;
    let mut _256: bool;
    let _257: bool;
    let mut _258: i32;
    let mut _259: bool;
    let mut _260: bool;
    let mut _262: &std::ops::RangeFrom<i32>;
    let _263: std::ops::RangeFrom<i32>;
    let _264: &i32;
    let _265: i32;
    let mut _266: (&bool, &bool);
    let mut _267: &bool;
    let mut _268: &bool;
    let mut _271: bool;
    let mut _272: bool;
    let mut _273: bool;
    let mut _274: bool;
    let _276: !;
    let mut _277: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _278: !;
    let mut _279: bool;
    let mut _280: bool;
    let _281: bool;
    let mut _282: i32;
    let mut _283: bool;
    let mut _284: bool;
    let mut _286: &std::ops::RangeFrom<i32>;
    let _287: std::ops::RangeFrom<i32>;
    let _288: &i32;
    let _289: i32;
    let mut _290: (&bool, &bool);
    let mut _291: &bool;
    let mut _292: &bool;
    let mut _295: bool;
    let mut _296: bool;
    let mut _297: bool;
    let mut _298: bool;
    let _300: !;
    let mut _301: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _302: !;
    let mut _303: bool;
    let mut _304: bool;
    let _305: bool;
    let mut _306: i16;
    let mut _308: &std::ops::RangeFrom<i16>;
    let _309: std::ops::RangeFrom<i16>;
    let _310: &i16;
    let _311: i16;
    let mut _312: (&bool, &bool);
    let mut _313: &bool;
    let mut _314: &bool;
    let mut _317: bool;
    let mut _318: bool;
    let mut _319: bool;
    let mut _320: bool;
    let _322: !;
    let mut _323: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _324: !;
    let mut _325: bool;
    let mut _326: bool;
    let _327: bool;
    let mut _329: &std::ops::RangeFrom<char>;
    let _330: std::ops::RangeFrom<char>;
    let _331: &char;
    let _332: char;
    let mut _333: (&bool, &bool);
    let mut _334: &bool;
    let mut _335: &bool;
    let mut _338: bool;
    let mut _339: bool;
    let mut _340: bool;
    let mut _341: bool;
    let _343: !;
    let mut _344: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _345: !;
    let mut _346: bool;
    let mut _347: bool;
    let _348: bool;
    let mut _350: &std::ops::RangeFrom<char>;
    let _351: std::ops::RangeFrom<char>;
    let _352: &char;
    let _353: char;
    let mut _354: (&bool, &bool);
    let mut _355: &bool;
    let mut _356: &bool;
    let mut _359: bool;
    let mut _360: bool;
    let mut _361: bool;
    let mut _362: bool;
    let _364: !;
    let mut _365: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _366: !;
    let mut _367: bool;
    let mut _368: bool;
    let _369: bool;
    let mut _370: char;
    let mut _371: bool;
    let mut _372: bool;
    let mut _374: &std::ops::RangeFrom<char>;
    let _375: std::ops::RangeFrom<char>;
    let _376: &char;
    let _377: char;
    let mut _378: (&bool, &bool);
    let mut _379: &bool;
    let mut _380: &bool;
    let mut _383: bool;
    let mut _384: bool;
    let mut _385: bool;
    let mut _386: bool;
    let _388: !;
    let mut _389: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _390: !;
    let mut _391: bool;
    let mut _392: bool;
    let _393: bool;
    let mut _394: char;
    let mut _395: bool;
    let mut _396: bool;
    let mut _398: &std::ops::RangeFrom<char>;
    let _399: std::ops::RangeFrom<char>;
    let _400: &char;
    let _401: char;
    let mut _402: (&bool, &bool);
    let mut _403: &bool;
    let mut _404: &bool;
    let mut _407: bool;
    let mut _408: bool;
    let mut _409: bool;
    let mut _410: bool;
    let _412: !;
    let mut _413: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _414: !;
    let mut _415: bool;
    let mut _416: bool;
    let mut _417: bool;
    let _418: bool;
    let mut _419: char;
    let mut _420: bool;
    let mut _421: bool;
    let mut _423: &std::ops::RangeFrom<char>;
    let _424: std::ops::RangeFrom<char>;
    let _425: &char;
    let _426: char;
    let mut _427: (&bool, &bool);
    let mut _428: &bool;
    let mut _429: &bool;
    let mut _432: bool;
    let mut _433: bool;
    let mut _434: bool;
    let mut _435: bool;
    let _437: !;
    let mut _438: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _439: !;
    let mut _440: bool;
    let mut _441: bool;
    let _442: bool;
    let mut _443: char;
    let mut _445: &std::ops::RangeFrom<char>;
    let _446: std::ops::RangeFrom<char>;
    let _447: &char;
    let _448: char;
    let mut _449: (&bool, &bool);
    let mut _450: &bool;
    let mut _451: &bool;
    let mut _454: bool;
    let mut _455: bool;
    let mut _456: bool;
    let mut _457: bool;
    let _459: !;
    let mut _460: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _461: !;
    let mut _462: bool;
    let mut _463: bool;
    let _464: bool;
    let mut _465: f32;
    let mut _466: bool;
    let mut _467: bool;
    let mut _469: &std::ops::RangeFrom<f32>;
    let _470: std::ops::RangeFrom<f32>;
    let _471: &f32;
    let _472: f32;
    let mut _473: (&bool, &bool);
    let mut _474: &bool;
    let mut _475: &bool;
    let mut _478: bool;
    let mut _479: bool;
    let mut _480: bool;
    let mut _481: bool;
    let _483: !;
    let mut _484: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _485: !;
    let mut _486: bool;
    let mut _487: bool;
    let _488: bool;
    let mut _489: f32;
    let mut _490: bool;
    let mut _491: bool;
    let mut _493: &std::ops::RangeFrom<f32>;
    let _494: std::ops::RangeFrom<f32>;
    let _495: &f32;
    let _496: f32;
    let mut _497: (&bool, &bool);
    let mut _498: &bool;
    let mut _499: &bool;
    let mut _502: bool;
    let mut _503: bool;
    let mut _504: bool;
    let mut _505: bool;
    let _507: !;
    let mut _508: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _509: !;
    let mut _510: bool;
    let mut _511: bool;
    let mut _512: bool;
    let _513: bool;
    let mut _514: f32;
    let mut _515: bool;
    let mut _516: bool;
    let mut _518: &std::ops::RangeFrom<f32>;
    let _519: std::ops::RangeFrom<f32>;
    let _520: &f32;
    let _521: f32;
    let mut _522: (&bool, &bool);
    let mut _523: &bool;
    let mut _524: &bool;
    let mut _527: bool;
    let mut _528: bool;
    let mut _529: bool;
    let mut _530: bool;
    let _532: !;
    let mut _533: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _534: !;
    let mut _535: bool;
    let mut _536: bool;
    let _537: bool;
    let mut _538: f32;
    let mut _539: bool;
    let mut _540: bool;
    let mut _542: &std::ops::RangeFrom<f32>;
    let _543: std::ops::RangeFrom<f32>;
    let _544: &f32;
    let _545: f32;
    let mut _546: (&bool, &bool);
    let mut _547: &bool;
    let mut _548: &bool;
    let mut _551: bool;
    let mut _552: bool;
    let mut _553: bool;
    let mut _554: bool;
    let _556: !;
    let mut _557: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _558: !;
    let mut _559: bool;
    let mut _560: bool;
    let mut _561: bool;
    let _562: bool;
    let mut _563: f32;
    let mut _564: bool;
    let mut _565: bool;
    let mut _567: &std::ops::RangeFrom<f32>;
    let _568: std::ops::RangeFrom<f32>;
    let _569: &f32;
    let _570: f32;
    let mut _571: (&bool, &bool);
    let mut _572: &bool;
    let mut _573: &bool;
    let mut _576: bool;
    let mut _577: bool;
    let mut _578: bool;
    let mut _579: bool;
    let _581: !;
    let mut _582: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _583: !;
    let mut _584: bool;
    let mut _585: bool;
    let _586: bool;
    let mut _587: f32;
    let mut _588: bool;
    let mut _589: bool;
    let mut _591: &std::ops::RangeFrom<f32>;
    let _592: std::ops::RangeFrom<f32>;
    let _593: &f32;
    let _594: f32;
    let mut _595: (&bool, &bool);
    let mut _596: &bool;
    let mut _597: &bool;
    let mut _600: bool;
    let mut _601: bool;
    let mut _602: bool;
    let mut _603: bool;
    let _605: !;
    let mut _606: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _607: !;
    let mut _608: bool;
    let mut _609: bool;
    let _610: bool;
    let mut _611: f32;
    let mut _612: bool;
    let mut _613: bool;
    let mut _615: &std::ops::RangeFrom<f32>;
    let _616: std::ops::RangeFrom<f32>;
    let _617: &f32;
    let _618: f32;
    let mut _619: (&bool, &bool);
    let mut _620: &bool;
    let mut _621: &bool;
    let mut _624: bool;
    let mut _625: bool;
    let mut _626: bool;
    let mut _627: bool;
    let _629: !;
    let mut _630: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _631: !;
    let mut _632: bool;
    let mut _633: bool;
    let _634: bool;
    let mut _635: f32;
    let mut _636: bool;
    let mut _638: &std::ops::RangeFrom<f32>;
    let _639: std::ops::RangeFrom<f32>;
    let _640: &f32;
    let _641: f32;
    let mut _642: (&bool, &bool);
    let mut _643: &bool;
    let mut _644: &bool;
    let mut _647: bool;
    let mut _648: bool;
    let mut _649: bool;
    let mut _650: bool;
    let _652: !;
    let mut _653: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _654: !;
    let mut _655: bool;
    let mut _656: bool;
    let _657: bool;
    let mut _658: f64;
    let mut _659: bool;
    let mut _660: bool;
    let mut _662: &std::ops::RangeFrom<f64>;
    let _663: std::ops::RangeFrom<f64>;
    let _664: &f64;
    let _665: f64;
    let mut _666: (&bool, &bool);
    let mut _667: &bool;
    let mut _668: &bool;
    let mut _671: bool;
    let mut _672: bool;
    let mut _673: bool;
    let mut _674: bool;
    let _676: !;
    let mut _677: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _678: !;
    let mut _679: bool;
    let mut _680: bool;
    let _681: bool;
    let mut _682: f64;
    let mut _683: bool;
    let mut _684: bool;
    let mut _686: &std::ops::RangeFrom<f64>;
    let _687: std::ops::RangeFrom<f64>;
    let _688: &f64;
    let _689: f64;
    let mut _690: (&bool, &bool);
    let mut _691: &bool;
    let mut _692: &bool;
    let mut _695: bool;
    let mut _696: bool;
    let mut _697: bool;
    let mut _698: bool;
    let _700: !;
    let mut _701: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _702: !;
    let mut _703: bool;
    let mut _704: bool;
    let mut _705: bool;
    let _706: bool;
    let mut _707: f64;
    let mut _708: bool;
    let mut _709: bool;
    let mut _711: &std::ops::RangeFrom<f64>;
    let _712: std::ops::RangeFrom<f64>;
    let _713: &f64;
    let _714: f64;
    let mut _715: (&bool, &bool);
    let mut _716: &bool;
    let mut _717: &bool;
    let mut _720: bool;
    let mut _721: bool;
    let mut _722: bool;
    let mut _723: bool;
    let _725: !;
    let mut _726: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _727: !;
    let mut _728: bool;
    let mut _729: bool;
    let _730: bool;
    let mut _731: f64;
    let mut _732: bool;
    let mut _733: bool;
    let mut _735: &std::ops::RangeFrom<f64>;
    let _736: std::ops::RangeFrom<f64>;
    let _737: &f64;
    let _738: f64;
    let mut _739: (&bool, &bool);
    let mut _740: &bool;
    let mut _741: &bool;
    let mut _744: bool;
    let mut _745: bool;
    let mut _746: bool;
    let mut _747: bool;
    let _749: !;
    let mut _750: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _751: !;
    let mut _752: bool;
    let mut _753: bool;
    let mut _754: bool;
    let _755: bool;
    let mut _756: f64;
    let mut _757: bool;
    let mut _758: bool;
    let mut _760: &std::ops::RangeFrom<f64>;
    let _761: std::ops::RangeFrom<f64>;
    let _762: &f64;
    let _763: f64;
    let mut _764: (&bool, &bool);
    let mut _765: &bool;
    let mut _766: &bool;
    let mut _769: bool;
    let mut _770: bool;
    let mut _771: bool;
    let mut _772: bool;
    let _774: !;
    let mut _775: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _776: !;
    let mut _777: bool;
    let mut _778: bool;
    let _779: bool;
    let mut _780: f64;
    let mut _781: bool;
    let mut _782: bool;
    let mut _784: &std::ops::RangeFrom<f64>;
    let _785: std::ops::RangeFrom<f64>;
    let _786: &f64;
    let _787: f64;
    let mut _788: (&bool, &bool);
    let mut _789: &bool;
    let mut _790: &bool;
    let mut _793: bool;
    let mut _794: bool;
    let mut _795: bool;
    let mut _796: bool;
    let _798: !;
    let mut _799: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _800: !;
    let mut _801: bool;
    let mut _802: bool;
    let _803: bool;
    let mut _804: f64;
    let mut _805: bool;
    let mut _806: bool;
    let mut _808: &std::ops::RangeFrom<f64>;
    let _809: std::ops::RangeFrom<f64>;
    let _810: &f64;
    let _811: f64;
    let mut _812: (&bool, &bool);
    let mut _813: &bool;
    let mut _814: &bool;
    let mut _817: bool;
    let mut _818: bool;
    let mut _819: bool;
    let mut _820: bool;
    let _822: !;
    let mut _823: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _824: !;
    let mut _825: bool;
    let mut _826: bool;
    let _827: bool;
    let mut _828: f64;
    let mut _829: bool;
    let mut _831: &std::ops::RangeFrom<f64>;
    let _832: std::ops::RangeFrom<f64>;
    let _833: &f64;
    let _834: f64;
    let mut _835: (&bool, &bool);
    let mut _836: &bool;
    let mut _837: &bool;
    let mut _840: bool;
    let mut _841: bool;
    let mut _842: bool;
    let mut _843: bool;
    let _845: !;
    let mut _846: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _847: !;
    scope 1 {
        debug m => _3;
        let _4: bool;
        scope 2 {
            debug c => _4;
            let _12: &bool;
            let _13: &bool;
            scope 3 {
                debug left_val => _12;
                debug right_val => _13;
                let _18: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _18;
                }
            }
        }
    }
    scope 5 {
        debug m => _24;
        let _25: bool;
        scope 6 {
            debug c => _25;
            let _33: &bool;
            let _34: &bool;
            scope 7 {
                debug left_val => _33;
                debug right_val => _34;
                let _39: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _39;
                }
            }
        }
    }
    scope 9 {
        debug m => _46;
        let _50: bool;
        scope 10 {
            debug c => _50;
            let _58: &bool;
            let _59: &bool;
            scope 11 {
                debug left_val => _58;
                debug right_val => _59;
                let _64: core::panicking::AssertKind;
                scope 12 {
                    debug kind => _64;
                }
            }
        }
    }
    scope 13 {
        debug m => _71;
        let _75: bool;
        scope 14 {
            debug c => _75;
            let _83: &bool;
            let _84: &bool;
            scope 15 {
                debug left_val => _83;
                debug right_val => _84;
                let _89: core::panicking::AssertKind;
                scope 16 {
                    debug kind => _89;
                }
            }
        }
    }
    scope 17 {
        debug m => _95;
        let _99: bool;
        scope 18 {
            debug c => _99;
            let _107: &bool;
            let _108: &bool;
            scope 19 {
                debug left_val => _107;
                debug right_val => _108;
                let _113: core::panicking::AssertKind;
                scope 20 {
                    debug kind => _113;
                }
            }
        }
    }
    scope 21 {
        debug m => _119;
        let _123: bool;
        scope 22 {
            debug c => _123;
            let _131: &bool;
            let _132: &bool;
            scope 23 {
                debug left_val => _131;
                debug right_val => _132;
                let _137: core::panicking::AssertKind;
                scope 24 {
                    debug kind => _137;
                }
            }
        }
    }
    scope 25 {
        debug m => _143;
        let _145: bool;
        scope 26 {
            debug c => _145;
            let _153: &bool;
            let _154: &bool;
            scope 27 {
                debug left_val => _153;
                debug right_val => _154;
                let _159: core::panicking::AssertKind;
                scope 28 {
                    debug kind => _159;
                }
            }
        }
    }
    scope 29 {
        debug m => _165;
        let _166: bool;
        scope 30 {
            debug c => _166;
            let _174: &bool;
            let _175: &bool;
            scope 31 {
                debug left_val => _174;
                debug right_val => _175;
                let _180: core::panicking::AssertKind;
                scope 32 {
                    debug kind => _180;
                }
            }
        }
    }
    scope 33 {
        debug m => _186;
        let _187: bool;
        scope 34 {
            debug c => _187;
            let _195: &bool;
            let _196: &bool;
            scope 35 {
                debug left_val => _195;
                debug right_val => _196;
                let _201: core::panicking::AssertKind;
                scope 36 {
                    debug kind => _201;
                }
            }
        }
    }
    scope 37 {
        debug m => _208;
        let _212: bool;
        scope 38 {
            debug c => _212;
            let _220: &bool;
            let _221: &bool;
            scope 39 {
                debug left_val => _220;
                debug right_val => _221;
                let _226: core::panicking::AssertKind;
                scope 40 {
                    debug kind => _226;
                }
            }
        }
    }
    scope 41 {
        debug m => _233;
        let _237: bool;
        scope 42 {
            debug c => _237;
            let _245: &bool;
            let _246: &bool;
            scope 43 {
                debug left_val => _245;
                debug right_val => _246;
                let _251: core::panicking::AssertKind;
                scope 44 {
                    debug kind => _251;
                }
            }
        }
    }
    scope 45 {
        debug m => _257;
        let _261: bool;
        scope 46 {
            debug c => _261;
            let _269: &bool;
            let _270: &bool;
            scope 47 {
                debug left_val => _269;
                debug right_val => _270;
                let _275: core::panicking::AssertKind;
                scope 48 {
                    debug kind => _275;
                }
            }
        }
    }
    scope 49 {
        debug m => _281;
        let _285: bool;
        scope 50 {
            debug c => _285;
            let _293: &bool;
            let _294: &bool;
            scope 51 {
                debug left_val => _293;
                debug right_val => _294;
                let _299: core::panicking::AssertKind;
                scope 52 {
                    debug kind => _299;
                }
            }
        }
    }
    scope 53 {
        debug m => _305;
        let _307: bool;
        scope 54 {
            debug c => _307;
            let _315: &bool;
            let _316: &bool;
            scope 55 {
                debug left_val => _315;
                debug right_val => _316;
                let _321: core::panicking::AssertKind;
                scope 56 {
                    debug kind => _321;
                }
            }
        }
    }
    scope 57 {
        debug m => _327;
        let _328: bool;
        scope 58 {
            debug c => _328;
            let _336: &bool;
            let _337: &bool;
            scope 59 {
                debug left_val => _336;
                debug right_val => _337;
                let _342: core::panicking::AssertKind;
                scope 60 {
                    debug kind => _342;
                }
            }
        }
    }
    scope 61 {
        debug m => _348;
        let _349: bool;
        scope 62 {
            debug c => _349;
            let _357: &bool;
            let _358: &bool;
            scope 63 {
                debug left_val => _357;
                debug right_val => _358;
                let _363: core::panicking::AssertKind;
                scope 64 {
                    debug kind => _363;
                }
            }
        }
    }
    scope 65 {
        debug m => _369;
        let _373: bool;
        scope 66 {
            debug c => _373;
            let _381: &bool;
            let _382: &bool;
            scope 67 {
                debug left_val => _381;
                debug right_val => _382;
                let _387: core::panicking::AssertKind;
                scope 68 {
                    debug kind => _387;
                }
            }
        }
    }
    scope 69 {
        debug m => _393;
        let _397: bool;
        scope 70 {
            debug c => _397;
            let _405: &bool;
            let _406: &bool;
            scope 71 {
                debug left_val => _405;
                debug right_val => _406;
                let _411: core::panicking::AssertKind;
                scope 72 {
                    debug kind => _411;
                }
            }
        }
    }
    scope 73 {
        debug m => _418;
        let _422: bool;
        scope 74 {
            debug c => _422;
            let _430: &bool;
            let _431: &bool;
            scope 75 {
                debug left_val => _430;
                debug right_val => _431;
                let _436: core::panicking::AssertKind;
                scope 76 {
                    debug kind => _436;
                }
            }
        }
    }
    scope 77 {
        debug m => _442;
        let _444: bool;
        scope 78 {
            debug c => _444;
            let _452: &bool;
            let _453: &bool;
            scope 79 {
                debug left_val => _452;
                debug right_val => _453;
                let _458: core::panicking::AssertKind;
                scope 80 {
                    debug kind => _458;
                }
            }
        }
    }
    scope 81 {
        debug m => _464;
        let _468: bool;
        scope 82 {
            debug c => _468;
            let _476: &bool;
            let _477: &bool;
            scope 83 {
                debug left_val => _476;
                debug right_val => _477;
                let _482: core::panicking::AssertKind;
                scope 84 {
                    debug kind => _482;
                }
            }
        }
    }
    scope 85 {
        debug m => _488;
        let _492: bool;
        scope 86 {
            debug c => _492;
            let _500: &bool;
            let _501: &bool;
            scope 87 {
                debug left_val => _500;
                debug right_val => _501;
                let _506: core::panicking::AssertKind;
                scope 88 {
                    debug kind => _506;
                }
            }
        }
    }
    scope 89 {
        debug m => _513;
        let _517: bool;
        scope 90 {
            debug c => _517;
            let _525: &bool;
            let _526: &bool;
            scope 91 {
                debug left_val => _525;
                debug right_val => _526;
                let _531: core::panicking::AssertKind;
                scope 92 {
                    debug kind => _531;
                }
            }
        }
    }
    scope 93 {
        debug m => _537;
        let _541: bool;
        scope 94 {
            debug c => _541;
            let _549: &bool;
            let _550: &bool;
            scope 95 {
                debug left_val => _549;
                debug right_val => _550;
                let _555: core::panicking::AssertKind;
                scope 96 {
                    debug kind => _555;
                }
            }
        }
    }
    scope 97 {
        debug m => _562;
        let _566: bool;
        scope 98 {
            debug c => _566;
            let _574: &bool;
            let _575: &bool;
            scope 99 {
                debug left_val => _574;
                debug right_val => _575;
                let _580: core::panicking::AssertKind;
                scope 100 {
                    debug kind => _580;
                }
            }
        }
    }
    scope 101 {
        debug m => _586;
        let _590: bool;
        scope 102 {
            debug c => _590;
            let _598: &bool;
            let _599: &bool;
            scope 103 {
                debug left_val => _598;
                debug right_val => _599;
                let _604: core::panicking::AssertKind;
                scope 104 {
                    debug kind => _604;
                }
            }
        }
    }
    scope 105 {
        debug m => _610;
        let _614: bool;
        scope 106 {
            debug c => _614;
            let _622: &bool;
            let _623: &bool;
            scope 107 {
                debug left_val => _622;
                debug right_val => _623;
                let _628: core::panicking::AssertKind;
                scope 108 {
                    debug kind => _628;
                }
            }
        }
    }
    scope 109 {
        debug m => _634;
        let _637: bool;
        scope 110 {
            debug c => _637;
            let _645: &bool;
            let _646: &bool;
            scope 111 {
                debug left_val => _645;
                debug right_val => _646;
                let _651: core::panicking::AssertKind;
                scope 112 {
                    debug kind => _651;
                }
            }
        }
    }
    scope 113 {
        debug m => _657;
        let _661: bool;
        scope 114 {
            debug c => _661;
            let _669: &bool;
            let _670: &bool;
            scope 115 {
                debug left_val => _669;
                debug right_val => _670;
                let _675: core::panicking::AssertKind;
                scope 116 {
                    debug kind => _675;
                }
            }
        }
    }
    scope 117 {
        debug m => _681;
        let _685: bool;
        scope 118 {
            debug c => _685;
            let _693: &bool;
            let _694: &bool;
            scope 119 {
                debug left_val => _693;
                debug right_val => _694;
                let _699: core::panicking::AssertKind;
                scope 120 {
                    debug kind => _699;
                }
            }
        }
    }
    scope 121 {
        debug m => _706;
        let _710: bool;
        scope 122 {
            debug c => _710;
            let _718: &bool;
            let _719: &bool;
            scope 123 {
                debug left_val => _718;
                debug right_val => _719;
                let _724: core::panicking::AssertKind;
                scope 124 {
                    debug kind => _724;
                }
            }
        }
    }
    scope 125 {
        debug m => _730;
        let _734: bool;
        scope 126 {
            debug c => _734;
            let _742: &bool;
            let _743: &bool;
            scope 127 {
                debug left_val => _742;
                debug right_val => _743;
                let _748: core::panicking::AssertKind;
                scope 128 {
                    debug kind => _748;
                }
            }
        }
    }
    scope 129 {
        debug m => _755;
        let _759: bool;
        scope 130 {
            debug c => _759;
            let _767: &bool;
            let _768: &bool;
            scope 131 {
                debug left_val => _767;
                debug right_val => _768;
                let _773: core::panicking::AssertKind;
                scope 132 {
                    debug kind => _773;
                }
            }
        }
    }
    scope 133 {
        debug m => _779;
        let _783: bool;
        scope 134 {
            debug c => _783;
            let _791: &bool;
            let _792: &bool;
            scope 135 {
                debug left_val => _791;
                debug right_val => _792;
                let _797: core::panicking::AssertKind;
                scope 136 {
                    debug kind => _797;
                }
            }
        }
    }
    scope 137 {
        debug m => _803;
        let _807: bool;
        scope 138 {
            debug c => _807;
            let _815: &bool;
            let _816: &bool;
            scope 139 {
                debug left_val => _815;
                debug right_val => _816;
                let _821: core::panicking::AssertKind;
                scope 140 {
                    debug kind => _821;
                }
            }
        }
    }
    scope 141 {
        debug m => _827;
        let _830: bool;
        scope 142 {
            debug c => _830;
            let _838: &bool;
            let _839: &bool;
            scope 143 {
                debug left_val => _838;
                debug right_val => _839;
                let _844: core::panicking::AssertKind;
                scope 144 {
                    debug kind => _844;
                }
            }
        }
    }

    bb0: {
        _3 = const true;
        _6 = RangeFrom::<u8> { start: const _ };
        _5 = &_6;
        _8 = const _;
        _7 = &_8;
        _4 = RangeFrom::<u8>::contains::<u8>(move _5, _7) -> bb1;
    }

    bb1: {
        _10 = &_3;
        _11 = &_4;
        _9 = (move _10, move _11);
        _12 = (_9.0: &bool);
        _13 = (_9.1: &bool);
        _16 = (*_12);
        _17 = (*_13);
        _15 = Eq(move _16, move _17);
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = assert_failed::<bool, bool>(move _18, _12, _13, move _20);
    }

    bb3: {
        _2 = _3;
        _1 = Not(move _2);
        switchInt(move _1) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _21 = panic(const "assertion failed: yes!(u8 :: MIN, u8 :: MIN ..)");
    }

    bb5: {
        _24 = const true;
        _27 = RangeFrom::<u8> { start: const _ };
        _26 = &_27;
        _29 = const _;
        _28 = &_29;
        _25 = RangeFrom::<u8>::contains::<u8>(move _26, _28) -> bb6;
    }

    bb6: {
        _31 = &_24;
        _32 = &_25;
        _30 = (move _31, move _32);
        _33 = (_30.0: &bool);
        _34 = (_30.1: &bool);
        _37 = (*_33);
        _38 = (*_34);
        _36 = Eq(move _37, move _38);
        _35 = Not(move _36);
        switchInt(move _35) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _39 = core::panicking::AssertKind::Eq;
        _41 = Option::<Arguments<'_>>::None;
        _40 = assert_failed::<bool, bool>(move _39, _33, _34, move _41);
    }

    bb8: {
        _23 = _24;
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _42 = panic(const "assertion failed: yes!(u8 :: MAX, u8 :: MIN ..)");
    }

    bb10: {
        _47 = const _;
        _48 = Le(const 1_u8, _47);
        switchInt(move _48) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _49 = Le(_47, const u8::MAX);
        _46 = _49;
        goto -> bb13;
    }

    bb12: {
        _46 = const false;
        goto -> bb13;
    }

    bb13: {
        _52 = RangeFrom::<u8> { start: const 1_u8 };
        _51 = &_52;
        _54 = const _;
        _53 = &_54;
        _50 = RangeFrom::<u8>::contains::<u8>(move _51, _53) -> bb14;
    }

    bb14: {
        _56 = &_46;
        _57 = &_50;
        _55 = (move _56, move _57);
        _58 = (_55.0: &bool);
        _59 = (_55.1: &bool);
        _62 = (*_58);
        _63 = (*_59);
        _61 = Eq(move _62, move _63);
        _60 = Not(move _61);
        switchInt(move _60) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _64 = core::panicking::AssertKind::Eq;
        _66 = Option::<Arguments<'_>>::None;
        _65 = assert_failed::<bool, bool>(move _64, _58, _59, move _66);
    }

    bb16: {
        _45 = _46;
        _44 = Not(move _45);
        _43 = Not(move _44);
        switchInt(move _43) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _67 = panic(const "assertion failed: !yes!(u8 :: MIN, 1 ..)");
    }

    bb18: {
        _72 = const 4_i32;
        _73 = Le(const 5_i32, _72);
        switchInt(move _73) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _74 = Le(_72, const i32::MAX);
        _71 = _74;
        goto -> bb21;
    }

    bb20: {
        _71 = const false;
        goto -> bb21;
    }

    bb21: {
        _77 = RangeFrom::<i32> { start: const 5_i32 };
        _76 = &_77;
        _79 = const 4_i32;
        _78 = &_79;
        _75 = RangeFrom::<i32>::contains::<i32>(move _76, _78) -> bb22;
    }

    bb22: {
        _81 = &_71;
        _82 = &_75;
        _80 = (move _81, move _82);
        _83 = (_80.0: &bool);
        _84 = (_80.1: &bool);
        _87 = (*_83);
        _88 = (*_84);
        _86 = Eq(move _87, move _88);
        _85 = Not(move _86);
        switchInt(move _85) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _89 = core::panicking::AssertKind::Eq;
        _91 = Option::<Arguments<'_>>::None;
        _90 = assert_failed::<bool, bool>(move _89, _83, _84, move _91);
    }

    bb24: {
        _70 = _71;
        _69 = Not(move _70);
        _68 = Not(move _69);
        switchInt(move _68) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _92 = panic(const "assertion failed: !yes!(4, 5 ..)");
    }

    bb26: {
        _96 = const 5_i32;
        _97 = Le(const 5_i32, _96);
        switchInt(move _97) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _98 = Le(_96, const i32::MAX);
        _95 = _98;
        goto -> bb29;
    }

    bb28: {
        _95 = const false;
        goto -> bb29;
    }

    bb29: {
        _101 = RangeFrom::<i32> { start: const 5_i32 };
        _100 = &_101;
        _103 = const 5_i32;
        _102 = &_103;
        _99 = RangeFrom::<i32>::contains::<i32>(move _100, _102) -> bb30;
    }

    bb30: {
        _105 = &_95;
        _106 = &_99;
        _104 = (move _105, move _106);
        _107 = (_104.0: &bool);
        _108 = (_104.1: &bool);
        _111 = (*_107);
        _112 = (*_108);
        _110 = Eq(move _111, move _112);
        _109 = Not(move _110);
        switchInt(move _109) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _113 = core::panicking::AssertKind::Eq;
        _115 = Option::<Arguments<'_>>::None;
        _114 = assert_failed::<bool, bool>(move _113, _107, _108, move _115);
    }

    bb32: {
        _94 = _95;
        _93 = Not(move _94);
        switchInt(move _93) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        _116 = panic(const "assertion failed: yes!(5, 5 ..)");
    }

    bb34: {
        _120 = const 6_i32;
        _121 = Le(const 5_i32, _120);
        switchInt(move _121) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _122 = Le(_120, const i32::MAX);
        _119 = _122;
        goto -> bb37;
    }

    bb36: {
        _119 = const false;
        goto -> bb37;
    }

    bb37: {
        _125 = RangeFrom::<i32> { start: const 5_i32 };
        _124 = &_125;
        _127 = const 6_i32;
        _126 = &_127;
        _123 = RangeFrom::<i32>::contains::<i32>(move _124, _126) -> bb38;
    }

    bb38: {
        _129 = &_119;
        _130 = &_123;
        _128 = (move _129, move _130);
        _131 = (_128.0: &bool);
        _132 = (_128.1: &bool);
        _135 = (*_131);
        _136 = (*_132);
        _134 = Eq(move _135, move _136);
        _133 = Not(move _134);
        switchInt(move _133) -> [0: bb40, otherwise: bb39];
    }

    bb39: {
        _137 = core::panicking::AssertKind::Eq;
        _139 = Option::<Arguments<'_>>::None;
        _138 = assert_failed::<bool, bool>(move _137, _131, _132, move _139);
    }

    bb40: {
        _118 = _119;
        _117 = Not(move _118);
        switchInt(move _117) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _140 = panic(const "assertion failed: yes!(6, 5 ..)");
    }

    bb42: {
        _144 = const _;
        _143 = Eq(_144, const u8::MAX);
        _147 = RangeFrom::<u8> { start: const _ };
        _146 = &_147;
        _149 = const _;
        _148 = &_149;
        _145 = RangeFrom::<u8>::contains::<u8>(move _146, _148) -> bb43;
    }

    bb43: {
        _151 = &_143;
        _152 = &_145;
        _150 = (move _151, move _152);
        _153 = (_150.0: &bool);
        _154 = (_150.1: &bool);
        _157 = (*_153);
        _158 = (*_154);
        _156 = Eq(move _157, move _158);
        _155 = Not(move _156);
        switchInt(move _155) -> [0: bb45, otherwise: bb44];
    }

    bb44: {
        _159 = core::panicking::AssertKind::Eq;
        _161 = Option::<Arguments<'_>>::None;
        _160 = assert_failed::<bool, bool>(move _159, _153, _154, move _161);
    }

    bb45: {
        _142 = _143;
        _141 = Not(move _142);
        switchInt(move _141) -> [0: bb47, otherwise: bb46];
    }

    bb46: {
        _162 = panic(const "assertion failed: yes!(u8 :: MAX, u8 :: MAX ..)");
    }

    bb47: {
        _165 = const true;
        _168 = RangeFrom::<i16> { start: const _ };
        _167 = &_168;
        _170 = const _;
        _169 = &_170;
        _166 = RangeFrom::<i16>::contains::<i16>(move _167, _169) -> bb48;
    }

    bb48: {
        _172 = &_165;
        _173 = &_166;
        _171 = (move _172, move _173);
        _174 = (_171.0: &bool);
        _175 = (_171.1: &bool);
        _178 = (*_174);
        _179 = (*_175);
        _177 = Eq(move _178, move _179);
        _176 = Not(move _177);
        switchInt(move _176) -> [0: bb50, otherwise: bb49];
    }

    bb49: {
        _180 = core::panicking::AssertKind::Eq;
        _182 = Option::<Arguments<'_>>::None;
        _181 = assert_failed::<bool, bool>(move _180, _174, _175, move _182);
    }

    bb50: {
        _164 = _165;
        _163 = Not(move _164);
        switchInt(move _163) -> [0: bb52, otherwise: bb51];
    }

    bb51: {
        _183 = panic(const "assertion failed: yes!(i16 :: MIN, i16 :: MIN ..)");
    }

    bb52: {
        _186 = const true;
        _189 = RangeFrom::<i16> { start: const _ };
        _188 = &_189;
        _191 = const _;
        _190 = &_191;
        _187 = RangeFrom::<i16>::contains::<i16>(move _188, _190) -> bb53;
    }

    bb53: {
        _193 = &_186;
        _194 = &_187;
        _192 = (move _193, move _194);
        _195 = (_192.0: &bool);
        _196 = (_192.1: &bool);
        _199 = (*_195);
        _200 = (*_196);
        _198 = Eq(move _199, move _200);
        _197 = Not(move _198);
        switchInt(move _197) -> [0: bb55, otherwise: bb54];
    }

    bb54: {
        _201 = core::panicking::AssertKind::Eq;
        _203 = Option::<Arguments<'_>>::None;
        _202 = assert_failed::<bool, bool>(move _201, _195, _196, move _203);
    }

    bb55: {
        _185 = _186;
        _184 = Not(move _185);
        switchInt(move _184) -> [0: bb57, otherwise: bb56];
    }

    bb56: {
        _204 = panic(const "assertion failed: yes!(i16 :: MAX, i16 :: MIN ..)");
    }

    bb57: {
        _209 = const _;
        _210 = Le(const -32767_i16, _209);
        switchInt(move _210) -> [0: bb59, otherwise: bb58];
    }

    bb58: {
        _211 = Le(_209, const i16::MAX);
        _208 = _211;
        goto -> bb60;
    }

    bb59: {
        _208 = const false;
        goto -> bb60;
    }

    bb60: {
        _214 = RangeFrom::<i16> { start: const _ };
        _213 = &_214;
        _216 = const _;
        _215 = &_216;
        _212 = RangeFrom::<i16>::contains::<i16>(move _213, _215) -> bb61;
    }

    bb61: {
        _218 = &_208;
        _219 = &_212;
        _217 = (move _218, move _219);
        _220 = (_217.0: &bool);
        _221 = (_217.1: &bool);
        _224 = (*_220);
        _225 = (*_221);
        _223 = Eq(move _224, move _225);
        _222 = Not(move _223);
        switchInt(move _222) -> [0: bb63, otherwise: bb62];
    }

    bb62: {
        _226 = core::panicking::AssertKind::Eq;
        _228 = Option::<Arguments<'_>>::None;
        _227 = assert_failed::<bool, bool>(move _226, _220, _221, move _228);
    }

    bb63: {
        _207 = _208;
        _206 = Not(move _207);
        _205 = Not(move _206);
        switchInt(move _205) -> [0: bb65, otherwise: bb64];
    }

    bb64: {
        _229 = panic(const "assertion failed: !yes!(i16 :: MIN, NI16 ..)");
    }

    bb65: {
        _234 = const -4_i32;
        _235 = Le(const 5_i32, _234);
        switchInt(move _235) -> [0: bb67, otherwise: bb66];
    }

    bb66: {
        _236 = Le(_234, const i32::MAX);
        _233 = _236;
        goto -> bb68;
    }

    bb67: {
        _233 = const false;
        goto -> bb68;
    }

    bb68: {
        _239 = RangeFrom::<i32> { start: const 5_i32 };
        _238 = &_239;
        _241 = const -4_i32;
        _240 = &_241;
        _237 = RangeFrom::<i32>::contains::<i32>(move _238, _240) -> bb69;
    }

    bb69: {
        _243 = &_233;
        _244 = &_237;
        _242 = (move _243, move _244);
        _245 = (_242.0: &bool);
        _246 = (_242.1: &bool);
        _249 = (*_245);
        _250 = (*_246);
        _248 = Eq(move _249, move _250);
        _247 = Not(move _248);
        switchInt(move _247) -> [0: bb71, otherwise: bb70];
    }

    bb70: {
        _251 = core::panicking::AssertKind::Eq;
        _253 = Option::<Arguments<'_>>::None;
        _252 = assert_failed::<bool, bool>(move _251, _245, _246, move _253);
    }

    bb71: {
        _232 = _233;
        _231 = Not(move _232);
        _230 = Not(move _231);
        switchInt(move _230) -> [0: bb73, otherwise: bb72];
    }

    bb72: {
        _254 = panic(const "assertion failed: !yes!(- 4, 5 ..)");
    }

    bb73: {
        _258 = const -4_i32;
        _259 = Le(const -4_i32, _258);
        switchInt(move _259) -> [0: bb75, otherwise: bb74];
    }

    bb74: {
        _260 = Le(_258, const i32::MAX);
        _257 = _260;
        goto -> bb76;
    }

    bb75: {
        _257 = const false;
        goto -> bb76;
    }

    bb76: {
        _263 = RangeFrom::<i32> { start: const -4_i32 };
        _262 = &_263;
        _265 = const -4_i32;
        _264 = &_265;
        _261 = RangeFrom::<i32>::contains::<i32>(move _262, _264) -> bb77;
    }

    bb77: {
        _267 = &_257;
        _268 = &_261;
        _266 = (move _267, move _268);
        _269 = (_266.0: &bool);
        _270 = (_266.1: &bool);
        _273 = (*_269);
        _274 = (*_270);
        _272 = Eq(move _273, move _274);
        _271 = Not(move _272);
        switchInt(move _271) -> [0: bb79, otherwise: bb78];
    }

    bb78: {
        _275 = core::panicking::AssertKind::Eq;
        _277 = Option::<Arguments<'_>>::None;
        _276 = assert_failed::<bool, bool>(move _275, _269, _270, move _277);
    }

    bb79: {
        _256 = _257;
        _255 = Not(move _256);
        switchInt(move _255) -> [0: bb81, otherwise: bb80];
    }

    bb80: {
        _278 = panic(const "assertion failed: yes!(- 4, - 4 ..)");
    }

    bb81: {
        _282 = const -3_i32;
        _283 = Le(const -4_i32, _282);
        switchInt(move _283) -> [0: bb83, otherwise: bb82];
    }

    bb82: {
        _284 = Le(_282, const i32::MAX);
        _281 = _284;
        goto -> bb84;
    }

    bb83: {
        _281 = const false;
        goto -> bb84;
    }

    bb84: {
        _287 = RangeFrom::<i32> { start: const -4_i32 };
        _286 = &_287;
        _289 = const -3_i32;
        _288 = &_289;
        _285 = RangeFrom::<i32>::contains::<i32>(move _286, _288) -> bb85;
    }

    bb85: {
        _291 = &_281;
        _292 = &_285;
        _290 = (move _291, move _292);
        _293 = (_290.0: &bool);
        _294 = (_290.1: &bool);
        _297 = (*_293);
        _298 = (*_294);
        _296 = Eq(move _297, move _298);
        _295 = Not(move _296);
        switchInt(move _295) -> [0: bb87, otherwise: bb86];
    }

    bb86: {
        _299 = core::panicking::AssertKind::Eq;
        _301 = Option::<Arguments<'_>>::None;
        _300 = assert_failed::<bool, bool>(move _299, _293, _294, move _301);
    }

    bb87: {
        _280 = _281;
        _279 = Not(move _280);
        switchInt(move _279) -> [0: bb89, otherwise: bb88];
    }

    bb88: {
        _302 = panic(const "assertion failed: yes!(- 3, - 4 ..)");
    }

    bb89: {
        _306 = const _;
        _305 = Eq(_306, const i16::MAX);
        _309 = RangeFrom::<i16> { start: const _ };
        _308 = &_309;
        _311 = const _;
        _310 = &_311;
        _307 = RangeFrom::<i16>::contains::<i16>(move _308, _310) -> bb90;
    }

    bb90: {
        _313 = &_305;
        _314 = &_307;
        _312 = (move _313, move _314);
        _315 = (_312.0: &bool);
        _316 = (_312.1: &bool);
        _319 = (*_315);
        _320 = (*_316);
        _318 = Eq(move _319, move _320);
        _317 = Not(move _318);
        switchInt(move _317) -> [0: bb92, otherwise: bb91];
    }

    bb91: {
        _321 = core::panicking::AssertKind::Eq;
        _323 = Option::<Arguments<'_>>::None;
        _322 = assert_failed::<bool, bool>(move _321, _315, _316, move _323);
    }

    bb92: {
        _304 = _305;
        _303 = Not(move _304);
        switchInt(move _303) -> [0: bb94, otherwise: bb93];
    }

    bb93: {
        _324 = panic(const "assertion failed: yes!(i16 :: MAX, i16 :: MAX ..)");
    }

    bb94: {
        _327 = const true;
        _330 = RangeFrom::<char> { start: const '\0' };
        _329 = &_330;
        _332 = const '\0';
        _331 = &_332;
        _328 = RangeFrom::<char>::contains::<char>(move _329, _331) -> bb95;
    }

    bb95: {
        _334 = &_327;
        _335 = &_328;
        _333 = (move _334, move _335);
        _336 = (_333.0: &bool);
        _337 = (_333.1: &bool);
        _340 = (*_336);
        _341 = (*_337);
        _339 = Eq(move _340, move _341);
        _338 = Not(move _339);
        switchInt(move _338) -> [0: bb97, otherwise: bb96];
    }

    bb96: {
        _342 = core::panicking::AssertKind::Eq;
        _344 = Option::<Arguments<'_>>::None;
        _343 = assert_failed::<bool, bool>(move _342, _336, _337, move _344);
    }

    bb97: {
        _326 = _327;
        _325 = Not(move _326);
        switchInt(move _325) -> [0: bb99, otherwise: bb98];
    }

    bb98: {
        _345 = panic(const "assertion failed: yes!(\\'\\\\u{0}\\', \\'\\\\u{0}\\' ..)");
    }

    bb99: {
        _348 = const true;
        _351 = RangeFrom::<char> { start: const '\0' };
        _350 = &_351;
        _353 = const _;
        _352 = &_353;
        _349 = RangeFrom::<char>::contains::<char>(move _350, _352) -> bb100;
    }

    bb100: {
        _355 = &_348;
        _356 = &_349;
        _354 = (move _355, move _356);
        _357 = (_354.0: &bool);
        _358 = (_354.1: &bool);
        _361 = (*_357);
        _362 = (*_358);
        _360 = Eq(move _361, move _362);
        _359 = Not(move _360);
        switchInt(move _359) -> [0: bb102, otherwise: bb101];
    }

    bb101: {
        _363 = core::panicking::AssertKind::Eq;
        _365 = Option::<Arguments<'_>>::None;
        _364 = assert_failed::<bool, bool>(move _363, _357, _358, move _365);
    }

    bb102: {
        _347 = _348;
        _346 = Not(move _347);
        switchInt(move _346) -> [0: bb104, otherwise: bb103];
    }

    bb103: {
        _366 = panic(const "assertion failed: yes!(core :: char :: MAX, \\'\\\\u{0}\\' ..)");
    }

    bb104: {
        _370 = const 'a';
        _371 = Le(const 'a', _370);
        switchInt(move _371) -> [0: bb106, otherwise: bb105];
    }

    bb105: {
        _372 = Le(_370, const '\u{10ffff}');
        _369 = _372;
        goto -> bb107;
    }

    bb106: {
        _369 = const false;
        goto -> bb107;
    }

    bb107: {
        _375 = RangeFrom::<char> { start: const 'a' };
        _374 = &_375;
        _377 = const 'a';
        _376 = &_377;
        _373 = RangeFrom::<char>::contains::<char>(move _374, _376) -> bb108;
    }

    bb108: {
        _379 = &_369;
        _380 = &_373;
        _378 = (move _379, move _380);
        _381 = (_378.0: &bool);
        _382 = (_378.1: &bool);
        _385 = (*_381);
        _386 = (*_382);
        _384 = Eq(move _385, move _386);
        _383 = Not(move _384);
        switchInt(move _383) -> [0: bb110, otherwise: bb109];
    }

    bb109: {
        _387 = core::panicking::AssertKind::Eq;
        _389 = Option::<Arguments<'_>>::None;
        _388 = assert_failed::<bool, bool>(move _387, _381, _382, move _389);
    }

    bb110: {
        _368 = _369;
        _367 = Not(move _368);
        switchInt(move _367) -> [0: bb112, otherwise: bb111];
    }

    bb111: {
        _390 = panic(const "assertion failed: yes!(\\'a\\', \\'a\\' ..)");
    }

    bb112: {
        _394 = const 'b';
        _395 = Le(const 'a', _394);
        switchInt(move _395) -> [0: bb114, otherwise: bb113];
    }

    bb113: {
        _396 = Le(_394, const '\u{10ffff}');
        _393 = _396;
        goto -> bb115;
    }

    bb114: {
        _393 = const false;
        goto -> bb115;
    }

    bb115: {
        _399 = RangeFrom::<char> { start: const 'a' };
        _398 = &_399;
        _401 = const 'b';
        _400 = &_401;
        _397 = RangeFrom::<char>::contains::<char>(move _398, _400) -> bb116;
    }

    bb116: {
        _403 = &_393;
        _404 = &_397;
        _402 = (move _403, move _404);
        _405 = (_402.0: &bool);
        _406 = (_402.1: &bool);
        _409 = (*_405);
        _410 = (*_406);
        _408 = Eq(move _409, move _410);
        _407 = Not(move _408);
        switchInt(move _407) -> [0: bb118, otherwise: bb117];
    }

    bb117: {
        _411 = core::panicking::AssertKind::Eq;
        _413 = Option::<Arguments<'_>>::None;
        _412 = assert_failed::<bool, bool>(move _411, _405, _406, move _413);
    }

    bb118: {
        _392 = _393;
        _391 = Not(move _392);
        switchInt(move _391) -> [0: bb120, otherwise: bb119];
    }

    bb119: {
        _414 = panic(const "assertion failed: yes!(\\'b\\', \\'a\\' ..)");
    }

    bb120: {
        _419 = const 'a';
        _420 = Le(const 'b', _419);
        switchInt(move _420) -> [0: bb122, otherwise: bb121];
    }

    bb121: {
        _421 = Le(_419, const '\u{10ffff}');
        _418 = _421;
        goto -> bb123;
    }

    bb122: {
        _418 = const false;
        goto -> bb123;
    }

    bb123: {
        _424 = RangeFrom::<char> { start: const 'b' };
        _423 = &_424;
        _426 = const 'a';
        _425 = &_426;
        _422 = RangeFrom::<char>::contains::<char>(move _423, _425) -> bb124;
    }

    bb124: {
        _428 = &_418;
        _429 = &_422;
        _427 = (move _428, move _429);
        _430 = (_427.0: &bool);
        _431 = (_427.1: &bool);
        _434 = (*_430);
        _435 = (*_431);
        _433 = Eq(move _434, move _435);
        _432 = Not(move _433);
        switchInt(move _432) -> [0: bb126, otherwise: bb125];
    }

    bb125: {
        _436 = core::panicking::AssertKind::Eq;
        _438 = Option::<Arguments<'_>>::None;
        _437 = assert_failed::<bool, bool>(move _436, _430, _431, move _438);
    }

    bb126: {
        _417 = _418;
        _416 = Not(move _417);
        _415 = Not(move _416);
        switchInt(move _415) -> [0: bb128, otherwise: bb127];
    }

    bb127: {
        _439 = panic(const "assertion failed: !yes!(\\'a\\', \\'b\\' ..)");
    }

    bb128: {
        _443 = const _;
        _442 = Eq(_443, const '\u{10ffff}');
        _446 = RangeFrom::<char> { start: const _ };
        _445 = &_446;
        _448 = const _;
        _447 = &_448;
        _444 = RangeFrom::<char>::contains::<char>(move _445, _447) -> bb129;
    }

    bb129: {
        _450 = &_442;
        _451 = &_444;
        _449 = (move _450, move _451);
        _452 = (_449.0: &bool);
        _453 = (_449.1: &bool);
        _456 = (*_452);
        _457 = (*_453);
        _455 = Eq(move _456, move _457);
        _454 = Not(move _455);
        switchInt(move _454) -> [0: bb131, otherwise: bb130];
    }

    bb130: {
        _458 = core::panicking::AssertKind::Eq;
        _460 = Option::<Arguments<'_>>::None;
        _459 = assert_failed::<bool, bool>(move _458, _452, _453, move _460);
    }

    bb131: {
        _441 = _442;
        _440 = Not(move _441);
        switchInt(move _440) -> [0: bb133, otherwise: bb132];
    }

    bb132: {
        _461 = panic(const "assertion failed: yes!(core :: char :: MAX, core :: char :: MAX ..)");
    }

    bb133: {
        _465 = const _;
        _466 = Le(const -Inff32, _465);
        switchInt(move _466) -> [0: bb135, otherwise: bb134];
    }

    bb134: {
        _467 = Le(_465, const +Inff32);
        _464 = _467;
        goto -> bb136;
    }

    bb135: {
        _464 = const false;
        goto -> bb136;
    }

    bb136: {
        _470 = RangeFrom::<f32> { start: const _ };
        _469 = &_470;
        _472 = const _;
        _471 = &_472;
        _468 = RangeFrom::<f32>::contains::<f32>(move _469, _471) -> bb137;
    }

    bb137: {
        _474 = &_464;
        _475 = &_468;
        _473 = (move _474, move _475);
        _476 = (_473.0: &bool);
        _477 = (_473.1: &bool);
        _480 = (*_476);
        _481 = (*_477);
        _479 = Eq(move _480, move _481);
        _478 = Not(move _479);
        switchInt(move _478) -> [0: bb139, otherwise: bb138];
    }

    bb138: {
        _482 = core::panicking::AssertKind::Eq;
        _484 = Option::<Arguments<'_>>::None;
        _483 = assert_failed::<bool, bool>(move _482, _476, _477, move _484);
    }

    bb139: {
        _463 = _464;
        _462 = Not(move _463);
        switchInt(move _462) -> [0: bb141, otherwise: bb140];
    }

    bb140: {
        _485 = panic(const "assertion failed: yes!(f32 :: NEG_INFINITY, f32 :: NEG_INFINITY ..)");
    }

    bb141: {
        _489 = const _;
        _490 = Le(const -Inff32, _489);
        switchInt(move _490) -> [0: bb143, otherwise: bb142];
    }

    bb142: {
        _491 = Le(_489, const +Inff32);
        _488 = _491;
        goto -> bb144;
    }

    bb143: {
        _488 = const false;
        goto -> bb144;
    }

    bb144: {
        _494 = RangeFrom::<f32> { start: const _ };
        _493 = &_494;
        _496 = const _;
        _495 = &_496;
        _492 = RangeFrom::<f32>::contains::<f32>(move _493, _495) -> bb145;
    }

    bb145: {
        _498 = &_488;
        _499 = &_492;
        _497 = (move _498, move _499);
        _500 = (_497.0: &bool);
        _501 = (_497.1: &bool);
        _504 = (*_500);
        _505 = (*_501);
        _503 = Eq(move _504, move _505);
        _502 = Not(move _503);
        switchInt(move _502) -> [0: bb147, otherwise: bb146];
    }

    bb146: {
        _506 = core::panicking::AssertKind::Eq;
        _508 = Option::<Arguments<'_>>::None;
        _507 = assert_failed::<bool, bool>(move _506, _500, _501, move _508);
    }

    bb147: {
        _487 = _488;
        _486 = Not(move _487);
        switchInt(move _486) -> [0: bb149, otherwise: bb148];
    }

    bb148: {
        _509 = panic(const "assertion failed: yes!(f32 :: INFINITY, f32 :: NEG_INFINITY ..)");
    }

    bb149: {
        _514 = const _;
        _515 = Le(const 1f32, _514);
        switchInt(move _515) -> [0: bb151, otherwise: bb150];
    }

    bb150: {
        _516 = Le(_514, const +Inff32);
        _513 = _516;
        goto -> bb152;
    }

    bb151: {
        _513 = const false;
        goto -> bb152;
    }

    bb152: {
        _519 = RangeFrom::<f32> { start: const 1f32 };
        _518 = &_519;
        _521 = const _;
        _520 = &_521;
        _517 = RangeFrom::<f32>::contains::<f32>(move _518, _520) -> bb153;
    }

    bb153: {
        _523 = &_513;
        _524 = &_517;
        _522 = (move _523, move _524);
        _525 = (_522.0: &bool);
        _526 = (_522.1: &bool);
        _529 = (*_525);
        _530 = (*_526);
        _528 = Eq(move _529, move _530);
        _527 = Not(move _528);
        switchInt(move _527) -> [0: bb155, otherwise: bb154];
    }

    bb154: {
        _531 = core::panicking::AssertKind::Eq;
        _533 = Option::<Arguments<'_>>::None;
        _532 = assert_failed::<bool, bool>(move _531, _525, _526, move _533);
    }

    bb155: {
        _512 = _513;
        _511 = Not(move _512);
        _510 = Not(move _511);
        switchInt(move _510) -> [0: bb157, otherwise: bb156];
    }

    bb156: {
        _534 = panic(const "assertion failed: !yes!(f32 :: NEG_INFINITY, 1.0f32 ..)");
    }

    bb157: {
        _538 = const _;
        _539 = Le(const 1f32, _538);
        switchInt(move _539) -> [0: bb159, otherwise: bb158];
    }

    bb158: {
        _540 = Le(_538, const +Inff32);
        _537 = _540;
        goto -> bb160;
    }

    bb159: {
        _537 = const false;
        goto -> bb160;
    }

    bb160: {
        _543 = RangeFrom::<f32> { start: const 1f32 };
        _542 = &_543;
        _545 = const _;
        _544 = &_545;
        _541 = RangeFrom::<f32>::contains::<f32>(move _542, _544) -> bb161;
    }

    bb161: {
        _547 = &_537;
        _548 = &_541;
        _546 = (move _547, move _548);
        _549 = (_546.0: &bool);
        _550 = (_546.1: &bool);
        _553 = (*_549);
        _554 = (*_550);
        _552 = Eq(move _553, move _554);
        _551 = Not(move _552);
        switchInt(move _551) -> [0: bb163, otherwise: bb162];
    }

    bb162: {
        _555 = core::panicking::AssertKind::Eq;
        _557 = Option::<Arguments<'_>>::None;
        _556 = assert_failed::<bool, bool>(move _555, _549, _550, move _557);
    }

    bb163: {
        _536 = _537;
        _535 = Not(move _536);
        switchInt(move _535) -> [0: bb165, otherwise: bb164];
    }

    bb164: {
        _558 = panic(const "assertion failed: yes!(f32 :: INFINITY, 1.0f32 ..)");
    }

    bb165: {
        _563 = Sub(const 1f32, const _);
        _564 = Le(const 1f32, _563);
        switchInt(move _564) -> [0: bb167, otherwise: bb166];
    }

    bb166: {
        _565 = Le(_563, const +Inff32);
        _562 = _565;
        goto -> bb168;
    }

    bb167: {
        _562 = const false;
        goto -> bb168;
    }

    bb168: {
        _568 = RangeFrom::<f32> { start: const 1f32 };
        _567 = &_568;
        _570 = Sub(const 1f32, const _);
        _569 = &_570;
        _566 = RangeFrom::<f32>::contains::<f32>(move _567, _569) -> bb169;
    }

    bb169: {
        _572 = &_562;
        _573 = &_566;
        _571 = (move _572, move _573);
        _574 = (_571.0: &bool);
        _575 = (_571.1: &bool);
        _578 = (*_574);
        _579 = (*_575);
        _577 = Eq(move _578, move _579);
        _576 = Not(move _577);
        switchInt(move _576) -> [0: bb171, otherwise: bb170];
    }

    bb170: {
        _580 = core::panicking::AssertKind::Eq;
        _582 = Option::<Arguments<'_>>::None;
        _581 = assert_failed::<bool, bool>(move _580, _574, _575, move _582);
    }

    bb171: {
        _561 = _562;
        _560 = Not(move _561);
        _559 = Not(move _560);
        switchInt(move _559) -> [0: bb173, otherwise: bb172];
    }

    bb172: {
        _583 = panic(const "assertion failed: !yes!(1.0f32 - f32 :: EPSILON, 1.0f32 ..)");
    }

    bb173: {
        _587 = const 1f32;
        _588 = Le(const 1f32, _587);
        switchInt(move _588) -> [0: bb175, otherwise: bb174];
    }

    bb174: {
        _589 = Le(_587, const +Inff32);
        _586 = _589;
        goto -> bb176;
    }

    bb175: {
        _586 = const false;
        goto -> bb176;
    }

    bb176: {
        _592 = RangeFrom::<f32> { start: const 1f32 };
        _591 = &_592;
        _594 = const 1f32;
        _593 = &_594;
        _590 = RangeFrom::<f32>::contains::<f32>(move _591, _593) -> bb177;
    }

    bb177: {
        _596 = &_586;
        _597 = &_590;
        _595 = (move _596, move _597);
        _598 = (_595.0: &bool);
        _599 = (_595.1: &bool);
        _602 = (*_598);
        _603 = (*_599);
        _601 = Eq(move _602, move _603);
        _600 = Not(move _601);
        switchInt(move _600) -> [0: bb179, otherwise: bb178];
    }

    bb178: {
        _604 = core::panicking::AssertKind::Eq;
        _606 = Option::<Arguments<'_>>::None;
        _605 = assert_failed::<bool, bool>(move _604, _598, _599, move _606);
    }

    bb179: {
        _585 = _586;
        _584 = Not(move _585);
        switchInt(move _584) -> [0: bb181, otherwise: bb180];
    }

    bb180: {
        _607 = panic(const "assertion failed: yes!(1.0f32, 1.0f32 ..)");
    }

    bb181: {
        _611 = const _;
        _612 = Le(const 1f32, _611);
        switchInt(move _612) -> [0: bb183, otherwise: bb182];
    }

    bb182: {
        _613 = Le(_611, const +Inff32);
        _610 = _613;
        goto -> bb184;
    }

    bb183: {
        _610 = const false;
        goto -> bb184;
    }

    bb184: {
        _616 = RangeFrom::<f32> { start: const 1f32 };
        _615 = &_616;
        _618 = const _;
        _617 = &_618;
        _614 = RangeFrom::<f32>::contains::<f32>(move _615, _617) -> bb185;
    }

    bb185: {
        _620 = &_610;
        _621 = &_614;
        _619 = (move _620, move _621);
        _622 = (_619.0: &bool);
        _623 = (_619.1: &bool);
        _626 = (*_622);
        _627 = (*_623);
        _625 = Eq(move _626, move _627);
        _624 = Not(move _625);
        switchInt(move _624) -> [0: bb187, otherwise: bb186];
    }

    bb186: {
        _628 = core::panicking::AssertKind::Eq;
        _630 = Option::<Arguments<'_>>::None;
        _629 = assert_failed::<bool, bool>(move _628, _622, _623, move _630);
    }

    bb187: {
        _609 = _610;
        _608 = Not(move _609);
        switchInt(move _608) -> [0: bb189, otherwise: bb188];
    }

    bb188: {
        _631 = panic(const "assertion failed: yes!(f32 :: INFINITY, 1.0f32 ..)");
    }

    bb189: {
        _635 = const _;
        _636 = Eq(const +Inff32, _635);
        _634 = _636;
        _639 = RangeFrom::<f32> { start: const _ };
        _638 = &_639;
        _641 = const _;
        _640 = &_641;
        _637 = RangeFrom::<f32>::contains::<f32>(move _638, _640) -> bb190;
    }

    bb190: {
        _643 = &_634;
        _644 = &_637;
        _642 = (move _643, move _644);
        _645 = (_642.0: &bool);
        _646 = (_642.1: &bool);
        _649 = (*_645);
        _650 = (*_646);
        _648 = Eq(move _649, move _650);
        _647 = Not(move _648);
        switchInt(move _647) -> [0: bb192, otherwise: bb191];
    }

    bb191: {
        _651 = core::panicking::AssertKind::Eq;
        _653 = Option::<Arguments<'_>>::None;
        _652 = assert_failed::<bool, bool>(move _651, _645, _646, move _653);
    }

    bb192: {
        _633 = _634;
        _632 = Not(move _633);
        switchInt(move _632) -> [0: bb194, otherwise: bb193];
    }

    bb193: {
        _654 = panic(const "assertion failed: yes!(f32 :: INFINITY, f32 :: INFINITY ..)");
    }

    bb194: {
        _658 = const _;
        _659 = Le(const -Inff64, _658);
        switchInt(move _659) -> [0: bb196, otherwise: bb195];
    }

    bb195: {
        _660 = Le(_658, const +Inff64);
        _657 = _660;
        goto -> bb197;
    }

    bb196: {
        _657 = const false;
        goto -> bb197;
    }

    bb197: {
        _663 = RangeFrom::<f64> { start: const _ };
        _662 = &_663;
        _665 = const _;
        _664 = &_665;
        _661 = RangeFrom::<f64>::contains::<f64>(move _662, _664) -> bb198;
    }

    bb198: {
        _667 = &_657;
        _668 = &_661;
        _666 = (move _667, move _668);
        _669 = (_666.0: &bool);
        _670 = (_666.1: &bool);
        _673 = (*_669);
        _674 = (*_670);
        _672 = Eq(move _673, move _674);
        _671 = Not(move _672);
        switchInt(move _671) -> [0: bb200, otherwise: bb199];
    }

    bb199: {
        _675 = core::panicking::AssertKind::Eq;
        _677 = Option::<Arguments<'_>>::None;
        _676 = assert_failed::<bool, bool>(move _675, _669, _670, move _677);
    }

    bb200: {
        _656 = _657;
        _655 = Not(move _656);
        switchInt(move _655) -> [0: bb202, otherwise: bb201];
    }

    bb201: {
        _678 = panic(const "assertion failed: yes!(f64 :: NEG_INFINITY, f64 :: NEG_INFINITY ..)");
    }

    bb202: {
        _682 = const _;
        _683 = Le(const -Inff64, _682);
        switchInt(move _683) -> [0: bb204, otherwise: bb203];
    }

    bb203: {
        _684 = Le(_682, const +Inff64);
        _681 = _684;
        goto -> bb205;
    }

    bb204: {
        _681 = const false;
        goto -> bb205;
    }

    bb205: {
        _687 = RangeFrom::<f64> { start: const _ };
        _686 = &_687;
        _689 = const _;
        _688 = &_689;
        _685 = RangeFrom::<f64>::contains::<f64>(move _686, _688) -> bb206;
    }

    bb206: {
        _691 = &_681;
        _692 = &_685;
        _690 = (move _691, move _692);
        _693 = (_690.0: &bool);
        _694 = (_690.1: &bool);
        _697 = (*_693);
        _698 = (*_694);
        _696 = Eq(move _697, move _698);
        _695 = Not(move _696);
        switchInt(move _695) -> [0: bb208, otherwise: bb207];
    }

    bb207: {
        _699 = core::panicking::AssertKind::Eq;
        _701 = Option::<Arguments<'_>>::None;
        _700 = assert_failed::<bool, bool>(move _699, _693, _694, move _701);
    }

    bb208: {
        _680 = _681;
        _679 = Not(move _680);
        switchInt(move _679) -> [0: bb210, otherwise: bb209];
    }

    bb209: {
        _702 = panic(const "assertion failed: yes!(f64 :: INFINITY, f64 :: NEG_INFINITY ..)");
    }

    bb210: {
        _707 = const _;
        _708 = Le(const 1f64, _707);
        switchInt(move _708) -> [0: bb212, otherwise: bb211];
    }

    bb211: {
        _709 = Le(_707, const +Inff64);
        _706 = _709;
        goto -> bb213;
    }

    bb212: {
        _706 = const false;
        goto -> bb213;
    }

    bb213: {
        _712 = RangeFrom::<f64> { start: const 1f64 };
        _711 = &_712;
        _714 = const _;
        _713 = &_714;
        _710 = RangeFrom::<f64>::contains::<f64>(move _711, _713) -> bb214;
    }

    bb214: {
        _716 = &_706;
        _717 = &_710;
        _715 = (move _716, move _717);
        _718 = (_715.0: &bool);
        _719 = (_715.1: &bool);
        _722 = (*_718);
        _723 = (*_719);
        _721 = Eq(move _722, move _723);
        _720 = Not(move _721);
        switchInt(move _720) -> [0: bb216, otherwise: bb215];
    }

    bb215: {
        _724 = core::panicking::AssertKind::Eq;
        _726 = Option::<Arguments<'_>>::None;
        _725 = assert_failed::<bool, bool>(move _724, _718, _719, move _726);
    }

    bb216: {
        _705 = _706;
        _704 = Not(move _705);
        _703 = Not(move _704);
        switchInt(move _703) -> [0: bb218, otherwise: bb217];
    }

    bb217: {
        _727 = panic(const "assertion failed: !yes!(f64 :: NEG_INFINITY, 1.0f64 ..)");
    }

    bb218: {
        _731 = const _;
        _732 = Le(const 1f64, _731);
        switchInt(move _732) -> [0: bb220, otherwise: bb219];
    }

    bb219: {
        _733 = Le(_731, const +Inff64);
        _730 = _733;
        goto -> bb221;
    }

    bb220: {
        _730 = const false;
        goto -> bb221;
    }

    bb221: {
        _736 = RangeFrom::<f64> { start: const 1f64 };
        _735 = &_736;
        _738 = const _;
        _737 = &_738;
        _734 = RangeFrom::<f64>::contains::<f64>(move _735, _737) -> bb222;
    }

    bb222: {
        _740 = &_730;
        _741 = &_734;
        _739 = (move _740, move _741);
        _742 = (_739.0: &bool);
        _743 = (_739.1: &bool);
        _746 = (*_742);
        _747 = (*_743);
        _745 = Eq(move _746, move _747);
        _744 = Not(move _745);
        switchInt(move _744) -> [0: bb224, otherwise: bb223];
    }

    bb223: {
        _748 = core::panicking::AssertKind::Eq;
        _750 = Option::<Arguments<'_>>::None;
        _749 = assert_failed::<bool, bool>(move _748, _742, _743, move _750);
    }

    bb224: {
        _729 = _730;
        _728 = Not(move _729);
        switchInt(move _728) -> [0: bb226, otherwise: bb225];
    }

    bb225: {
        _751 = panic(const "assertion failed: yes!(f64 :: INFINITY, 1.0f64 ..)");
    }

    bb226: {
        _756 = Sub(const 1f64, const _);
        _757 = Le(const 1f64, _756);
        switchInt(move _757) -> [0: bb228, otherwise: bb227];
    }

    bb227: {
        _758 = Le(_756, const +Inff64);
        _755 = _758;
        goto -> bb229;
    }

    bb228: {
        _755 = const false;
        goto -> bb229;
    }

    bb229: {
        _761 = RangeFrom::<f64> { start: const 1f64 };
        _760 = &_761;
        _763 = Sub(const 1f64, const _);
        _762 = &_763;
        _759 = RangeFrom::<f64>::contains::<f64>(move _760, _762) -> bb230;
    }

    bb230: {
        _765 = &_755;
        _766 = &_759;
        _764 = (move _765, move _766);
        _767 = (_764.0: &bool);
        _768 = (_764.1: &bool);
        _771 = (*_767);
        _772 = (*_768);
        _770 = Eq(move _771, move _772);
        _769 = Not(move _770);
        switchInt(move _769) -> [0: bb232, otherwise: bb231];
    }

    bb231: {
        _773 = core::panicking::AssertKind::Eq;
        _775 = Option::<Arguments<'_>>::None;
        _774 = assert_failed::<bool, bool>(move _773, _767, _768, move _775);
    }

    bb232: {
        _754 = _755;
        _753 = Not(move _754);
        _752 = Not(move _753);
        switchInt(move _752) -> [0: bb234, otherwise: bb233];
    }

    bb233: {
        _776 = panic(const "assertion failed: !yes!(1.0f64 - f64 :: EPSILON, 1.0f64 ..)");
    }

    bb234: {
        _780 = const 1f64;
        _781 = Le(const 1f64, _780);
        switchInt(move _781) -> [0: bb236, otherwise: bb235];
    }

    bb235: {
        _782 = Le(_780, const +Inff64);
        _779 = _782;
        goto -> bb237;
    }

    bb236: {
        _779 = const false;
        goto -> bb237;
    }

    bb237: {
        _785 = RangeFrom::<f64> { start: const 1f64 };
        _784 = &_785;
        _787 = const 1f64;
        _786 = &_787;
        _783 = RangeFrom::<f64>::contains::<f64>(move _784, _786) -> bb238;
    }

    bb238: {
        _789 = &_779;
        _790 = &_783;
        _788 = (move _789, move _790);
        _791 = (_788.0: &bool);
        _792 = (_788.1: &bool);
        _795 = (*_791);
        _796 = (*_792);
        _794 = Eq(move _795, move _796);
        _793 = Not(move _794);
        switchInt(move _793) -> [0: bb240, otherwise: bb239];
    }

    bb239: {
        _797 = core::panicking::AssertKind::Eq;
        _799 = Option::<Arguments<'_>>::None;
        _798 = assert_failed::<bool, bool>(move _797, _791, _792, move _799);
    }

    bb240: {
        _778 = _779;
        _777 = Not(move _778);
        switchInt(move _777) -> [0: bb242, otherwise: bb241];
    }

    bb241: {
        _800 = panic(const "assertion failed: yes!(1.0f64, 1.0f64 ..)");
    }

    bb242: {
        _804 = const _;
        _805 = Le(const 1f64, _804);
        switchInt(move _805) -> [0: bb244, otherwise: bb243];
    }

    bb243: {
        _806 = Le(_804, const +Inff64);
        _803 = _806;
        goto -> bb245;
    }

    bb244: {
        _803 = const false;
        goto -> bb245;
    }

    bb245: {
        _809 = RangeFrom::<f64> { start: const 1f64 };
        _808 = &_809;
        _811 = const _;
        _810 = &_811;
        _807 = RangeFrom::<f64>::contains::<f64>(move _808, _810) -> bb246;
    }

    bb246: {
        _813 = &_803;
        _814 = &_807;
        _812 = (move _813, move _814);
        _815 = (_812.0: &bool);
        _816 = (_812.1: &bool);
        _819 = (*_815);
        _820 = (*_816);
        _818 = Eq(move _819, move _820);
        _817 = Not(move _818);
        switchInt(move _817) -> [0: bb248, otherwise: bb247];
    }

    bb247: {
        _821 = core::panicking::AssertKind::Eq;
        _823 = Option::<Arguments<'_>>::None;
        _822 = assert_failed::<bool, bool>(move _821, _815, _816, move _823);
    }

    bb248: {
        _802 = _803;
        _801 = Not(move _802);
        switchInt(move _801) -> [0: bb250, otherwise: bb249];
    }

    bb249: {
        _824 = panic(const "assertion failed: yes!(f64 :: INFINITY, 1.0f64 ..)");
    }

    bb250: {
        _828 = const _;
        _829 = Eq(const +Inff64, _828);
        _827 = _829;
        _832 = RangeFrom::<f64> { start: const _ };
        _831 = &_832;
        _834 = const _;
        _833 = &_834;
        _830 = RangeFrom::<f64>::contains::<f64>(move _831, _833) -> bb251;
    }

    bb251: {
        _836 = &_827;
        _837 = &_830;
        _835 = (move _836, move _837);
        _838 = (_835.0: &bool);
        _839 = (_835.1: &bool);
        _842 = (*_838);
        _843 = (*_839);
        _841 = Eq(move _842, move _843);
        _840 = Not(move _841);
        switchInt(move _840) -> [0: bb253, otherwise: bb252];
    }

    bb252: {
        _844 = core::panicking::AssertKind::Eq;
        _846 = Option::<Arguments<'_>>::None;
        _845 = assert_failed::<bool, bool>(move _844, _838, _839, move _846);
    }

    bb253: {
        _826 = _827;
        _825 = Not(move _826);
        switchInt(move _825) -> [0: bb255, otherwise: bb254];
    }

    bb254: {
        _847 = panic(const "assertion failed: yes!(f64 :: INFINITY, f64 :: INFINITY ..)");
    }

    bb255: {
        return;
    }
}

const range_from::NI16: i16 = {
    let mut _0: i16;
    let mut _1: (i16, bool);

    bb0: {
        _1 = CheckedAdd(const _, const 1_i16);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_i16) -> bb1;
    }

    bb1: {
        _0 = move (_1.0: i16);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let _3: ();

    bb0: {
        _1 = range_to_inclusive() -> bb1;
    }

    bb1: {
        _2 = range_to() -> bb2;
    }

    bb2: {
        _3 = range_from() -> bb3;
    }

    bb3: {
        return;
    }
}
