// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn unsigned_int() -> () {
    let mut _0: ();
    let mut _1: u8;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: u8;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: u8;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: u8;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: (u8, bool);
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: u16;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: u16;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: u16;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: u16;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: (u16, bool);
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: u32;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: u32;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: u32;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: u32;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: (u32, bool);
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: u64;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: u64;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: u64;
    let mut _81: bool;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: u64;
    let mut _86: bool;
    let mut _87: bool;
    let mut _88: (u64, bool);
    let mut _89: bool;
    let mut _90: bool;
    let mut _91: bool;
    let mut _92: bool;
    let mut _93: u128;
    let mut _94: bool;
    let mut _95: bool;
    let mut _96: bool;
    let mut _97: bool;
    let mut _98: u128;
    let mut _99: bool;
    let mut _100: bool;
    let mut _101: bool;
    let mut _102: bool;
    let mut _103: u128;
    let mut _104: bool;
    let mut _105: bool;
    let mut _106: bool;
    let mut _107: bool;
    let mut _108: u128;
    let mut _109: bool;
    let mut _110: bool;
    let mut _111: (u128, bool);
    let mut _112: bool;
    let mut _113: bool;
    let mut _114: bool;
    let mut _115: bool;

    bb0: {
        _1 = const 0_u8;
        _4 = Le(const 0_u8, _1);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _5 = Lt(_1, const 5_u8);
        switchInt(move _5) -> [0: bb2, otherwise: bb5];
    }

    bb2: {
        _2 = Le(const 5_u8, _1);
        switchInt(move _2) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _3 = Le(_1, const u8::MAX);
        switchInt(move _3) -> [0: bb4, otherwise: bb5];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = const 0_u8;
        _9 = Le(const 0_u8, _6);
        switchInt(move _9) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _10 = Lt(_6, const 5_u8);
        switchInt(move _10) -> [0: bb7, otherwise: bb9];
    }

    bb7: {
        _7 = Le(const 5_u8, _6);
        switchInt(move _7) -> [0: bb4, otherwise: bb8];
    }

    bb8: {
        _8 = Le(_6, const u8::MAX);
        switchInt(move _8) -> [0: bb4, otherwise: bb9];
    }

    bb9: {
        _11 = const 0_u8;
        _14 = Le(const 0_u8, _11);
        switchInt(move _14) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _15 = Le(_11, const 4_u8);
        switchInt(move _15) -> [0: bb11, otherwise: bb13];
    }

    bb11: {
        _12 = Le(const 5_u8, _11);
        switchInt(move _12) -> [0: bb4, otherwise: bb12];
    }

    bb12: {
        _13 = Le(_11, const u8::MAX);
        switchInt(move _13) -> [0: bb4, otherwise: bb13];
    }

    bb13: {
        _16 = const 0_u8;
        _17 = Le(const 0_u8, _16);
        switchInt(move _17) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _18 = Lt(_16, const u8::MAX);
        switchInt(move _18) -> [0: bb15, otherwise: bb16];
    }

    bb15: {
        switchInt(_16) -> [255: bb16, otherwise: bb4];
    }

    bb16: {
        _19 = (const 0_u8, const true);
        _22 = Le(const 0_u8, (_19.0: u8));
        switchInt(move _22) -> [0: bb20, otherwise: bb17];
    }

    bb17: {
        _23 = Lt((_19.0: u8), const 5_u8);
        switchInt(move _23) -> [0: bb20, otherwise: bb18];
    }

    bb18: {
        switchInt((_19.1: bool)) -> [0: bb19, otherwise: bb23];
    }

    bb19: {
        switchInt((_19.1: bool)) -> [0: bb23, otherwise: bb4];
    }

    bb20: {
        _20 = Le(const 5_u8, (_19.0: u8));
        switchInt(move _20) -> [0: bb19, otherwise: bb21];
    }

    bb21: {
        _21 = Le((_19.0: u8), const u8::MAX);
        switchInt(move _21) -> [0: bb19, otherwise: bb22];
    }

    bb22: {
        switchInt((_19.1: bool)) -> [0: bb19, otherwise: bb23];
    }

    bb23: {
        _24 = const 0_u16;
        _27 = Le(const 0_u16, _24);
        switchInt(move _27) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _28 = Lt(_24, const 5_u16);
        switchInt(move _28) -> [0: bb25, otherwise: bb27];
    }

    bb25: {
        _25 = Le(const 5_u16, _24);
        switchInt(move _25) -> [0: bb4, otherwise: bb26];
    }

    bb26: {
        _26 = Le(_24, const u16::MAX);
        switchInt(move _26) -> [0: bb4, otherwise: bb27];
    }

    bb27: {
        _29 = const 0_u16;
        _32 = Le(const 0_u16, _29);
        switchInt(move _32) -> [0: bb29, otherwise: bb28];
    }

    bb28: {
        _33 = Lt(_29, const 5_u16);
        switchInt(move _33) -> [0: bb29, otherwise: bb31];
    }

    bb29: {
        _30 = Le(const 5_u16, _29);
        switchInt(move _30) -> [0: bb4, otherwise: bb30];
    }

    bb30: {
        _31 = Le(_29, const u16::MAX);
        switchInt(move _31) -> [0: bb4, otherwise: bb31];
    }

    bb31: {
        _34 = const 0_u16;
        _37 = Le(const 0_u16, _34);
        switchInt(move _37) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _38 = Le(_34, const 4_u16);
        switchInt(move _38) -> [0: bb33, otherwise: bb35];
    }

    bb33: {
        _35 = Le(const 5_u16, _34);
        switchInt(move _35) -> [0: bb4, otherwise: bb34];
    }

    bb34: {
        _36 = Le(_34, const u16::MAX);
        switchInt(move _36) -> [0: bb4, otherwise: bb35];
    }

    bb35: {
        _39 = const 0_u16;
        _40 = Le(const 0_u16, _39);
        switchInt(move _40) -> [0: bb37, otherwise: bb36];
    }

    bb36: {
        _41 = Lt(_39, const u16::MAX);
        switchInt(move _41) -> [0: bb37, otherwise: bb38];
    }

    bb37: {
        switchInt(_39) -> [65535: bb38, otherwise: bb4];
    }

    bb38: {
        _42 = (const 0_u16, const true);
        _45 = Le(const 0_u16, (_42.0: u16));
        switchInt(move _45) -> [0: bb42, otherwise: bb39];
    }

    bb39: {
        _46 = Lt((_42.0: u16), const 5_u16);
        switchInt(move _46) -> [0: bb42, otherwise: bb40];
    }

    bb40: {
        switchInt((_42.1: bool)) -> [0: bb41, otherwise: bb45];
    }

    bb41: {
        switchInt((_42.1: bool)) -> [0: bb45, otherwise: bb4];
    }

    bb42: {
        _43 = Le(const 5_u16, (_42.0: u16));
        switchInt(move _43) -> [0: bb41, otherwise: bb43];
    }

    bb43: {
        _44 = Le((_42.0: u16), const u16::MAX);
        switchInt(move _44) -> [0: bb41, otherwise: bb44];
    }

    bb44: {
        switchInt((_42.1: bool)) -> [0: bb41, otherwise: bb45];
    }

    bb45: {
        _47 = const 0_u32;
        _50 = Le(const 0_u32, _47);
        switchInt(move _50) -> [0: bb47, otherwise: bb46];
    }

    bb46: {
        _51 = Lt(_47, const 5_u32);
        switchInt(move _51) -> [0: bb47, otherwise: bb49];
    }

    bb47: {
        _48 = Le(const 5_u32, _47);
        switchInt(move _48) -> [0: bb4, otherwise: bb48];
    }

    bb48: {
        _49 = Le(_47, const u32::MAX);
        switchInt(move _49) -> [0: bb4, otherwise: bb49];
    }

    bb49: {
        _52 = const 0_u32;
        _55 = Le(const 0_u32, _52);
        switchInt(move _55) -> [0: bb51, otherwise: bb50];
    }

    bb50: {
        _56 = Lt(_52, const 5_u32);
        switchInt(move _56) -> [0: bb51, otherwise: bb53];
    }

    bb51: {
        _53 = Le(const 5_u32, _52);
        switchInt(move _53) -> [0: bb4, otherwise: bb52];
    }

    bb52: {
        _54 = Le(_52, const u32::MAX);
        switchInt(move _54) -> [0: bb4, otherwise: bb53];
    }

    bb53: {
        _57 = const 0_u32;
        _60 = Le(const 0_u32, _57);
        switchInt(move _60) -> [0: bb55, otherwise: bb54];
    }

    bb54: {
        _61 = Le(_57, const 4_u32);
        switchInt(move _61) -> [0: bb55, otherwise: bb57];
    }

    bb55: {
        _58 = Le(const 5_u32, _57);
        switchInt(move _58) -> [0: bb4, otherwise: bb56];
    }

    bb56: {
        _59 = Le(_57, const u32::MAX);
        switchInt(move _59) -> [0: bb4, otherwise: bb57];
    }

    bb57: {
        _62 = const 0_u32;
        _63 = Le(const 0_u32, _62);
        switchInt(move _63) -> [0: bb59, otherwise: bb58];
    }

    bb58: {
        _64 = Lt(_62, const u32::MAX);
        switchInt(move _64) -> [0: bb59, otherwise: bb60];
    }

    bb59: {
        switchInt(_62) -> [4294967295: bb60, otherwise: bb4];
    }

    bb60: {
        _65 = (const 0_u32, const true);
        _68 = Le(const 0_u32, (_65.0: u32));
        switchInt(move _68) -> [0: bb64, otherwise: bb61];
    }

    bb61: {
        _69 = Lt((_65.0: u32), const 5_u32);
        switchInt(move _69) -> [0: bb64, otherwise: bb62];
    }

    bb62: {
        switchInt((_65.1: bool)) -> [0: bb63, otherwise: bb67];
    }

    bb63: {
        switchInt((_65.1: bool)) -> [0: bb67, otherwise: bb4];
    }

    bb64: {
        _66 = Le(const 5_u32, (_65.0: u32));
        switchInt(move _66) -> [0: bb63, otherwise: bb65];
    }

    bb65: {
        _67 = Le((_65.0: u32), const u32::MAX);
        switchInt(move _67) -> [0: bb63, otherwise: bb66];
    }

    bb66: {
        switchInt((_65.1: bool)) -> [0: bb63, otherwise: bb67];
    }

    bb67: {
        _70 = const 0_u64;
        _73 = Le(const 0_u64, _70);
        switchInt(move _73) -> [0: bb69, otherwise: bb68];
    }

    bb68: {
        _74 = Lt(_70, const 5_u64);
        switchInt(move _74) -> [0: bb69, otherwise: bb71];
    }

    bb69: {
        _71 = Le(const 5_u64, _70);
        switchInt(move _71) -> [0: bb4, otherwise: bb70];
    }

    bb70: {
        _72 = Le(_70, const u64::MAX);
        switchInt(move _72) -> [0: bb4, otherwise: bb71];
    }

    bb71: {
        _75 = const 0_u64;
        _78 = Le(const 0_u64, _75);
        switchInt(move _78) -> [0: bb73, otherwise: bb72];
    }

    bb72: {
        _79 = Lt(_75, const 5_u64);
        switchInt(move _79) -> [0: bb73, otherwise: bb75];
    }

    bb73: {
        _76 = Le(const 5_u64, _75);
        switchInt(move _76) -> [0: bb4, otherwise: bb74];
    }

    bb74: {
        _77 = Le(_75, const u64::MAX);
        switchInt(move _77) -> [0: bb4, otherwise: bb75];
    }

    bb75: {
        _80 = const 0_u64;
        _83 = Le(const 0_u64, _80);
        switchInt(move _83) -> [0: bb77, otherwise: bb76];
    }

    bb76: {
        _84 = Le(_80, const 4_u64);
        switchInt(move _84) -> [0: bb77, otherwise: bb79];
    }

    bb77: {
        _81 = Le(const 5_u64, _80);
        switchInt(move _81) -> [0: bb4, otherwise: bb78];
    }

    bb78: {
        _82 = Le(_80, const u64::MAX);
        switchInt(move _82) -> [0: bb4, otherwise: bb79];
    }

    bb79: {
        _85 = const 0_u64;
        _86 = Le(const 0_u64, _85);
        switchInt(move _86) -> [0: bb81, otherwise: bb80];
    }

    bb80: {
        _87 = Lt(_85, const u64::MAX);
        switchInt(move _87) -> [0: bb81, otherwise: bb82];
    }

    bb81: {
        switchInt(_85) -> [18446744073709551615: bb82, otherwise: bb4];
    }

    bb82: {
        _88 = (const 0_u64, const true);
        _91 = Le(const 0_u64, (_88.0: u64));
        switchInt(move _91) -> [0: bb86, otherwise: bb83];
    }

    bb83: {
        _92 = Lt((_88.0: u64), const 5_u64);
        switchInt(move _92) -> [0: bb86, otherwise: bb84];
    }

    bb84: {
        switchInt((_88.1: bool)) -> [0: bb85, otherwise: bb89];
    }

    bb85: {
        switchInt((_88.1: bool)) -> [0: bb89, otherwise: bb4];
    }

    bb86: {
        _89 = Le(const 5_u64, (_88.0: u64));
        switchInt(move _89) -> [0: bb85, otherwise: bb87];
    }

    bb87: {
        _90 = Le((_88.0: u64), const u64::MAX);
        switchInt(move _90) -> [0: bb85, otherwise: bb88];
    }

    bb88: {
        switchInt((_88.1: bool)) -> [0: bb85, otherwise: bb89];
    }

    bb89: {
        _93 = const 0_u128;
        _96 = Le(const 0_u128, _93);
        switchInt(move _96) -> [0: bb91, otherwise: bb90];
    }

    bb90: {
        _97 = Lt(_93, const 5_u128);
        switchInt(move _97) -> [0: bb91, otherwise: bb93];
    }

    bb91: {
        _94 = Le(const 5_u128, _93);
        switchInt(move _94) -> [0: bb4, otherwise: bb92];
    }

    bb92: {
        _95 = Le(_93, const u128::MAX);
        switchInt(move _95) -> [0: bb4, otherwise: bb93];
    }

    bb93: {
        _98 = const 0_u128;
        _101 = Le(const 0_u128, _98);
        switchInt(move _101) -> [0: bb95, otherwise: bb94];
    }

    bb94: {
        _102 = Lt(_98, const 5_u128);
        switchInt(move _102) -> [0: bb95, otherwise: bb97];
    }

    bb95: {
        _99 = Le(const 5_u128, _98);
        switchInt(move _99) -> [0: bb4, otherwise: bb96];
    }

    bb96: {
        _100 = Le(_98, const u128::MAX);
        switchInt(move _100) -> [0: bb4, otherwise: bb97];
    }

    bb97: {
        _103 = const 0_u128;
        _106 = Le(const 0_u128, _103);
        switchInt(move _106) -> [0: bb99, otherwise: bb98];
    }

    bb98: {
        _107 = Le(_103, const 4_u128);
        switchInt(move _107) -> [0: bb99, otherwise: bb101];
    }

    bb99: {
        _104 = Le(const 5_u128, _103);
        switchInt(move _104) -> [0: bb4, otherwise: bb100];
    }

    bb100: {
        _105 = Le(_103, const u128::MAX);
        switchInt(move _105) -> [0: bb4, otherwise: bb101];
    }

    bb101: {
        _108 = const 0_u128;
        _109 = Le(const 0_u128, _108);
        switchInt(move _109) -> [0: bb103, otherwise: bb102];
    }

    bb102: {
        _110 = Lt(_108, const u128::MAX);
        switchInt(move _110) -> [0: bb103, otherwise: bb104];
    }

    bb103: {
        switchInt(_108) -> [340282366920938463463374607431768211455: bb104, otherwise: bb4];
    }

    bb104: {
        _111 = (const 0_u128, const true);
        _114 = Le(const 0_u128, (_111.0: u128));
        switchInt(move _114) -> [0: bb108, otherwise: bb105];
    }

    bb105: {
        _115 = Lt((_111.0: u128), const 5_u128);
        switchInt(move _115) -> [0: bb108, otherwise: bb106];
    }

    bb106: {
        switchInt((_111.1: bool)) -> [0: bb107, otherwise: bb111];
    }

    bb107: {
        switchInt((_111.1: bool)) -> [0: bb111, otherwise: bb4];
    }

    bb108: {
        _112 = Le(const 5_u128, (_111.0: u128));
        switchInt(move _112) -> [0: bb107, otherwise: bb109];
    }

    bb109: {
        _113 = Le((_111.0: u128), const u128::MAX);
        switchInt(move _113) -> [0: bb107, otherwise: bb110];
    }

    bb110: {
        switchInt((_111.1: bool)) -> [0: bb107, otherwise: bb111];
    }

    bb111: {
        return;
    }
}

fn signed_int() -> () {
    let mut _0: ();
    let mut _1: i8;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: i8;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: i8;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: i8;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: (i8, bool);
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: i16;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: i16;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: i16;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: i16;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: (i16, bool);
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: i32;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: i32;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: i32;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: i32;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: (i32, bool);
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: i64;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: i64;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: i64;
    let mut _81: bool;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: i64;
    let mut _86: bool;
    let mut _87: bool;
    let mut _88: (i64, bool);
    let mut _89: bool;
    let mut _90: bool;
    let mut _91: bool;
    let mut _92: bool;
    let mut _93: i128;
    let mut _94: bool;
    let mut _95: bool;
    let mut _96: bool;
    let mut _97: bool;
    let mut _98: i128;
    let mut _99: bool;
    let mut _100: bool;
    let mut _101: bool;
    let mut _102: bool;
    let mut _103: i128;
    let mut _104: bool;
    let mut _105: bool;
    let mut _106: bool;
    let mut _107: bool;
    let mut _108: i128;
    let mut _109: bool;
    let mut _110: bool;
    let mut _111: (i128, bool);
    let mut _112: bool;
    let mut _113: bool;
    let mut _114: bool;
    let mut _115: bool;

    bb0: {
        _1 = const 0_i8;
        _4 = Le(const i8::MIN, _1);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _5 = Lt(_1, const 5_i8);
        switchInt(move _5) -> [0: bb2, otherwise: bb5];
    }

    bb2: {
        _2 = Le(const 5_i8, _1);
        switchInt(move _2) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _3 = Le(_1, const i8::MAX);
        switchInt(move _3) -> [0: bb4, otherwise: bb5];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = const 0_i8;
        _9 = Le(const i8::MIN, _6);
        switchInt(move _9) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _10 = Lt(_6, const 5_i8);
        switchInt(move _10) -> [0: bb7, otherwise: bb9];
    }

    bb7: {
        _7 = Le(const 5_i8, _6);
        switchInt(move _7) -> [0: bb4, otherwise: bb8];
    }

    bb8: {
        _8 = Le(_6, const i8::MAX);
        switchInt(move _8) -> [0: bb4, otherwise: bb9];
    }

    bb9: {
        _11 = const 0_i8;
        _14 = Le(const i8::MIN, _11);
        switchInt(move _14) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _15 = Le(_11, const 4_i8);
        switchInt(move _15) -> [0: bb11, otherwise: bb13];
    }

    bb11: {
        _12 = Le(const 5_i8, _11);
        switchInt(move _12) -> [0: bb4, otherwise: bb12];
    }

    bb12: {
        _13 = Le(_11, const i8::MAX);
        switchInt(move _13) -> [0: bb4, otherwise: bb13];
    }

    bb13: {
        _16 = const 0_i8;
        _17 = Le(const i8::MIN, _16);
        switchInt(move _17) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _18 = Lt(_16, const i8::MAX);
        switchInt(move _18) -> [0: bb15, otherwise: bb16];
    }

    bb15: {
        switchInt(_16) -> [127: bb16, otherwise: bb4];
    }

    bb16: {
        _19 = (const 0_i8, const true);
        _22 = Le(const i8::MIN, (_19.0: i8));
        switchInt(move _22) -> [0: bb20, otherwise: bb17];
    }

    bb17: {
        _23 = Lt((_19.0: i8), const 5_i8);
        switchInt(move _23) -> [0: bb20, otherwise: bb18];
    }

    bb18: {
        switchInt((_19.1: bool)) -> [0: bb19, otherwise: bb23];
    }

    bb19: {
        switchInt((_19.1: bool)) -> [0: bb23, otherwise: bb4];
    }

    bb20: {
        _20 = Le(const 5_i8, (_19.0: i8));
        switchInt(move _20) -> [0: bb19, otherwise: bb21];
    }

    bb21: {
        _21 = Le((_19.0: i8), const i8::MAX);
        switchInt(move _21) -> [0: bb19, otherwise: bb22];
    }

    bb22: {
        switchInt((_19.1: bool)) -> [0: bb19, otherwise: bb23];
    }

    bb23: {
        _24 = const 0_i16;
        _27 = Le(const i16::MIN, _24);
        switchInt(move _27) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _28 = Lt(_24, const 5_i16);
        switchInt(move _28) -> [0: bb25, otherwise: bb27];
    }

    bb25: {
        _25 = Le(const 5_i16, _24);
        switchInt(move _25) -> [0: bb4, otherwise: bb26];
    }

    bb26: {
        _26 = Le(_24, const i16::MAX);
        switchInt(move _26) -> [0: bb4, otherwise: bb27];
    }

    bb27: {
        _29 = const 0_i16;
        _32 = Le(const i16::MIN, _29);
        switchInt(move _32) -> [0: bb29, otherwise: bb28];
    }

    bb28: {
        _33 = Lt(_29, const 5_i16);
        switchInt(move _33) -> [0: bb29, otherwise: bb31];
    }

    bb29: {
        _30 = Le(const 5_i16, _29);
        switchInt(move _30) -> [0: bb4, otherwise: bb30];
    }

    bb30: {
        _31 = Le(_29, const i16::MAX);
        switchInt(move _31) -> [0: bb4, otherwise: bb31];
    }

    bb31: {
        _34 = const 0_i16;
        _37 = Le(const i16::MIN, _34);
        switchInt(move _37) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _38 = Le(_34, const 4_i16);
        switchInt(move _38) -> [0: bb33, otherwise: bb35];
    }

    bb33: {
        _35 = Le(const 5_i16, _34);
        switchInt(move _35) -> [0: bb4, otherwise: bb34];
    }

    bb34: {
        _36 = Le(_34, const i16::MAX);
        switchInt(move _36) -> [0: bb4, otherwise: bb35];
    }

    bb35: {
        _39 = const 0_i16;
        _40 = Le(const i16::MIN, _39);
        switchInt(move _40) -> [0: bb37, otherwise: bb36];
    }

    bb36: {
        _41 = Lt(_39, const i16::MAX);
        switchInt(move _41) -> [0: bb37, otherwise: bb38];
    }

    bb37: {
        switchInt(_39) -> [32767: bb38, otherwise: bb4];
    }

    bb38: {
        _42 = (const 0_i16, const true);
        _45 = Le(const i16::MIN, (_42.0: i16));
        switchInt(move _45) -> [0: bb42, otherwise: bb39];
    }

    bb39: {
        _46 = Lt((_42.0: i16), const 5_i16);
        switchInt(move _46) -> [0: bb42, otherwise: bb40];
    }

    bb40: {
        switchInt((_42.1: bool)) -> [0: bb41, otherwise: bb45];
    }

    bb41: {
        switchInt((_42.1: bool)) -> [0: bb45, otherwise: bb4];
    }

    bb42: {
        _43 = Le(const 5_i16, (_42.0: i16));
        switchInt(move _43) -> [0: bb41, otherwise: bb43];
    }

    bb43: {
        _44 = Le((_42.0: i16), const i16::MAX);
        switchInt(move _44) -> [0: bb41, otherwise: bb44];
    }

    bb44: {
        switchInt((_42.1: bool)) -> [0: bb41, otherwise: bb45];
    }

    bb45: {
        _47 = const 0_i32;
        _50 = Le(const i32::MIN, _47);
        switchInt(move _50) -> [0: bb47, otherwise: bb46];
    }

    bb46: {
        _51 = Lt(_47, const 5_i32);
        switchInt(move _51) -> [0: bb47, otherwise: bb49];
    }

    bb47: {
        _48 = Le(const 5_i32, _47);
        switchInt(move _48) -> [0: bb4, otherwise: bb48];
    }

    bb48: {
        _49 = Le(_47, const i32::MAX);
        switchInt(move _49) -> [0: bb4, otherwise: bb49];
    }

    bb49: {
        _52 = const 0_i32;
        _55 = Le(const i32::MIN, _52);
        switchInt(move _55) -> [0: bb51, otherwise: bb50];
    }

    bb50: {
        _56 = Lt(_52, const 5_i32);
        switchInt(move _56) -> [0: bb51, otherwise: bb53];
    }

    bb51: {
        _53 = Le(const 5_i32, _52);
        switchInt(move _53) -> [0: bb4, otherwise: bb52];
    }

    bb52: {
        _54 = Le(_52, const i32::MAX);
        switchInt(move _54) -> [0: bb4, otherwise: bb53];
    }

    bb53: {
        _57 = const 0_i32;
        _60 = Le(const i32::MIN, _57);
        switchInt(move _60) -> [0: bb55, otherwise: bb54];
    }

    bb54: {
        _61 = Le(_57, const 4_i32);
        switchInt(move _61) -> [0: bb55, otherwise: bb57];
    }

    bb55: {
        _58 = Le(const 5_i32, _57);
        switchInt(move _58) -> [0: bb4, otherwise: bb56];
    }

    bb56: {
        _59 = Le(_57, const i32::MAX);
        switchInt(move _59) -> [0: bb4, otherwise: bb57];
    }

    bb57: {
        _62 = const 0_i32;
        _63 = Le(const i32::MIN, _62);
        switchInt(move _63) -> [0: bb59, otherwise: bb58];
    }

    bb58: {
        _64 = Lt(_62, const i32::MAX);
        switchInt(move _64) -> [0: bb59, otherwise: bb60];
    }

    bb59: {
        switchInt(_62) -> [2147483647: bb60, otherwise: bb4];
    }

    bb60: {
        _65 = (const 0_i32, const true);
        _68 = Le(const i32::MIN, (_65.0: i32));
        switchInt(move _68) -> [0: bb64, otherwise: bb61];
    }

    bb61: {
        _69 = Lt((_65.0: i32), const 5_i32);
        switchInt(move _69) -> [0: bb64, otherwise: bb62];
    }

    bb62: {
        switchInt((_65.1: bool)) -> [0: bb63, otherwise: bb67];
    }

    bb63: {
        switchInt((_65.1: bool)) -> [0: bb67, otherwise: bb4];
    }

    bb64: {
        _66 = Le(const 5_i32, (_65.0: i32));
        switchInt(move _66) -> [0: bb63, otherwise: bb65];
    }

    bb65: {
        _67 = Le((_65.0: i32), const i32::MAX);
        switchInt(move _67) -> [0: bb63, otherwise: bb66];
    }

    bb66: {
        switchInt((_65.1: bool)) -> [0: bb63, otherwise: bb67];
    }

    bb67: {
        _70 = const 0_i64;
        _73 = Le(const i64::MIN, _70);
        switchInt(move _73) -> [0: bb69, otherwise: bb68];
    }

    bb68: {
        _74 = Lt(_70, const 5_i64);
        switchInt(move _74) -> [0: bb69, otherwise: bb71];
    }

    bb69: {
        _71 = Le(const 5_i64, _70);
        switchInt(move _71) -> [0: bb4, otherwise: bb70];
    }

    bb70: {
        _72 = Le(_70, const i64::MAX);
        switchInt(move _72) -> [0: bb4, otherwise: bb71];
    }

    bb71: {
        _75 = const 0_i64;
        _78 = Le(const i64::MIN, _75);
        switchInt(move _78) -> [0: bb73, otherwise: bb72];
    }

    bb72: {
        _79 = Lt(_75, const 5_i64);
        switchInt(move _79) -> [0: bb73, otherwise: bb75];
    }

    bb73: {
        _76 = Le(const 5_i64, _75);
        switchInt(move _76) -> [0: bb4, otherwise: bb74];
    }

    bb74: {
        _77 = Le(_75, const i64::MAX);
        switchInt(move _77) -> [0: bb4, otherwise: bb75];
    }

    bb75: {
        _80 = const 0_i64;
        _83 = Le(const i64::MIN, _80);
        switchInt(move _83) -> [0: bb77, otherwise: bb76];
    }

    bb76: {
        _84 = Le(_80, const 4_i64);
        switchInt(move _84) -> [0: bb77, otherwise: bb79];
    }

    bb77: {
        _81 = Le(const 5_i64, _80);
        switchInt(move _81) -> [0: bb4, otherwise: bb78];
    }

    bb78: {
        _82 = Le(_80, const i64::MAX);
        switchInt(move _82) -> [0: bb4, otherwise: bb79];
    }

    bb79: {
        _85 = const 0_i64;
        _86 = Le(const i64::MIN, _85);
        switchInt(move _86) -> [0: bb81, otherwise: bb80];
    }

    bb80: {
        _87 = Lt(_85, const i64::MAX);
        switchInt(move _87) -> [0: bb81, otherwise: bb82];
    }

    bb81: {
        switchInt(_85) -> [9223372036854775807: bb82, otherwise: bb4];
    }

    bb82: {
        _88 = (const 0_i64, const true);
        _91 = Le(const i64::MIN, (_88.0: i64));
        switchInt(move _91) -> [0: bb86, otherwise: bb83];
    }

    bb83: {
        _92 = Lt((_88.0: i64), const 5_i64);
        switchInt(move _92) -> [0: bb86, otherwise: bb84];
    }

    bb84: {
        switchInt((_88.1: bool)) -> [0: bb85, otherwise: bb89];
    }

    bb85: {
        switchInt((_88.1: bool)) -> [0: bb89, otherwise: bb4];
    }

    bb86: {
        _89 = Le(const 5_i64, (_88.0: i64));
        switchInt(move _89) -> [0: bb85, otherwise: bb87];
    }

    bb87: {
        _90 = Le((_88.0: i64), const i64::MAX);
        switchInt(move _90) -> [0: bb85, otherwise: bb88];
    }

    bb88: {
        switchInt((_88.1: bool)) -> [0: bb85, otherwise: bb89];
    }

    bb89: {
        _93 = const 0_i128;
        _96 = Le(const i128::MIN, _93);
        switchInt(move _96) -> [0: bb91, otherwise: bb90];
    }

    bb90: {
        _97 = Lt(_93, const 5_i128);
        switchInt(move _97) -> [0: bb91, otherwise: bb93];
    }

    bb91: {
        _94 = Le(const 5_i128, _93);
        switchInt(move _94) -> [0: bb4, otherwise: bb92];
    }

    bb92: {
        _95 = Le(_93, const i128::MAX);
        switchInt(move _95) -> [0: bb4, otherwise: bb93];
    }

    bb93: {
        _98 = const 0_i128;
        _101 = Le(const i128::MIN, _98);
        switchInt(move _101) -> [0: bb95, otherwise: bb94];
    }

    bb94: {
        _102 = Lt(_98, const 5_i128);
        switchInt(move _102) -> [0: bb95, otherwise: bb97];
    }

    bb95: {
        _99 = Le(const 5_i128, _98);
        switchInt(move _99) -> [0: bb4, otherwise: bb96];
    }

    bb96: {
        _100 = Le(_98, const i128::MAX);
        switchInt(move _100) -> [0: bb4, otherwise: bb97];
    }

    bb97: {
        _103 = const 0_i128;
        _106 = Le(const i128::MIN, _103);
        switchInt(move _106) -> [0: bb99, otherwise: bb98];
    }

    bb98: {
        _107 = Le(_103, const 4_i128);
        switchInt(move _107) -> [0: bb99, otherwise: bb101];
    }

    bb99: {
        _104 = Le(const 5_i128, _103);
        switchInt(move _104) -> [0: bb4, otherwise: bb100];
    }

    bb100: {
        _105 = Le(_103, const i128::MAX);
        switchInt(move _105) -> [0: bb4, otherwise: bb101];
    }

    bb101: {
        _108 = const 0_i128;
        _109 = Le(const i128::MIN, _108);
        switchInt(move _109) -> [0: bb103, otherwise: bb102];
    }

    bb102: {
        _110 = Lt(_108, const i128::MAX);
        switchInt(move _110) -> [0: bb103, otherwise: bb104];
    }

    bb103: {
        switchInt(_108) -> [170141183460469231731687303715884105727: bb104, otherwise: bb4];
    }

    bb104: {
        _111 = (const 0_i128, const true);
        _114 = Le(const i128::MIN, (_111.0: i128));
        switchInt(move _114) -> [0: bb108, otherwise: bb105];
    }

    bb105: {
        _115 = Lt((_111.0: i128), const 5_i128);
        switchInt(move _115) -> [0: bb108, otherwise: bb106];
    }

    bb106: {
        switchInt((_111.1: bool)) -> [0: bb107, otherwise: bb111];
    }

    bb107: {
        switchInt((_111.1: bool)) -> [0: bb111, otherwise: bb4];
    }

    bb108: {
        _112 = Le(const 5_i128, (_111.0: i128));
        switchInt(move _112) -> [0: bb107, otherwise: bb109];
    }

    bb109: {
        _113 = Le((_111.0: i128), const i128::MAX);
        switchInt(move _113) -> [0: bb107, otherwise: bb110];
    }

    bb110: {
        switchInt((_111.1: bool)) -> [0: bb107, otherwise: bb111];
    }

    bb111: {
        return;
    }
}

fn khar() -> () {
    let mut _0: ();
    let mut _1: char;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: char;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: bool;

    bb0: {
        _1 = const 'a';
        _4 = Le(const '\0', _1);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _5 = Le(_1, const '\u{d7ff}');
        switchInt(move _5) -> [0: bb2, otherwise: bb5];
    }

    bb2: {
        _2 = Le(const '\u{e000}', _1);
        switchInt(move _2) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _3 = Le(_1, const '\u{10ffff}');
        switchInt(move _3) -> [0: bb4, otherwise: bb5];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = const 'a';
        _9 = Le(const '\0', _6);
        switchInt(move _9) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _10 = Lt(_6, const '\u{d7ff}');
        switchInt(move _10) -> [0: bb7, otherwise: bb10];
    }

    bb7: {
        switchInt(_6) -> [55295: bb10, otherwise: bb8];
    }

    bb8: {
        _7 = Le(const '\u{e000}', _6);
        switchInt(move _7) -> [0: bb4, otherwise: bb9];
    }

    bb9: {
        _8 = Le(_6, const '\u{10ffff}');
        switchInt(move _8) -> [0: bb4, otherwise: bb10];
    }

    bb10: {
        return;
    }
}
