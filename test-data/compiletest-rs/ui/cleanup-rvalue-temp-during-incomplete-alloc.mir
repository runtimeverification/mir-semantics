// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn do_it(_1: &[usize]) -> Foo {
    debug x => _1;
    let mut _0: Foo;
    let mut _2: !;

    bb0: {
        _2 = begin_panic::<&str>(const "explicit panic");
    }
}

fn get_bar(_1: usize) -> Vec<usize> {
    debug x => _1;
    let mut _0: std::vec::Vec<usize>;
    let mut _2: std::boxed::Box<[usize]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[usize; 1]>;
    let mut _7: usize;
    let mut _8: *const [usize; 1];
    let mut _9: *const ();
    let mut _10: usize;
    let mut _11: usize;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: bool;
    scope 1 {
    }

    bb0: {
        _3 = SizeOf([usize; 1]);
        _4 = AlignOf([usize; 1]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> bb1;
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [usize; 1]);
        _7 = Mul(_1, const 2_usize);
        _8 = (((_6.0: std::ptr::Unique<[usize; 1]>).0: std::ptr::NonNull<[usize; 1]>).0: *const [usize; 1]);
        _9 = _8 as *const () (PtrToPtr);
        _10 = _9 as usize (Transmute);
        _11 = AlignOf(usize);
        _12 = Sub(_11, const 1_usize);
        _13 = BitAnd(_10, _12);
        _14 = Eq(_13, const 0_usize);
        assert(_14, "misaligned pointer dereference: address must be a multiple of {} but is {}", _11, _10) -> [success: bb3, unwind unreachable];
    }

    bb2: {
        return;
    }

    bb3: {
        (*_8) = [move _7];
        _2 = move _6 as std::boxed::Box<[usize]> (Pointer(Unsize));
        _0 = slice::<impl [usize]>::into_vec::<std::alloc::Global>(move _2) -> bb2;
    }
}

fn fails() -> () {
    let mut _0: ();
    let _1: usize;
    let _3: ();
    let mut _4: &mut std::vec::Vec<std::boxed::Box<Conzabble>>;
    let mut _5: std::boxed::Box<Conzabble>;
    let mut _6: Conzabble;
    let mut _7: Foo;
    let mut _8: &[usize];
    let _9: &[usize];
    let _10: &std::vec::Vec<usize>;
    let _11: std::vec::Vec<usize>;
    scope 1 {
        debug x => _1;
        let mut _2: std::vec::Vec<std::boxed::Box<Conzabble>>;
        scope 2 {
            debug y => _2;
        }
    }

    bb0: {
        _1 = const 2_usize;
        _2 = Vec::<Box<Conzabble>>::new() -> bb1;
    }

    bb1: {
        _4 = &mut _2;
        _11 = get_bar(_1) -> [return: bb2, unwind: bb10];
    }

    bb2: {
        _10 = &_11;
        _9 = <Vec<usize> as Deref>::deref(_10) -> [return: bb3, unwind: bb9];
    }

    bb3: {
        _8 = _9;
        _7 = do_it(move _8) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        _6 = Conzabble::Bickwick(move _7);
        _5 = Box::<Conzabble>::new(move _6) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        _3 = Vec::<Box<Conzabble>>::push(move _4, move _5) -> [return: bb6, unwind: bb9];
    }

    bb6: {
        drop(_11) -> [return: bb7, unwind: bb10];
    }

    bb7: {
        drop(_2) -> bb8;
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_11) -> [return: bb10, unwind terminate];
    }

    bb10 (cleanup): {
        drop(_2) -> [return: bb11, unwind terminate];
    }

    bb11 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _2: std::thread::JoinHandle<()>;

    bb0: {
        _2 = spawn::<fn() {fails}, ()>(fails) -> bb1;
    }

    bb1: {
        _1 = JoinHandle::<()>::join(move _2) -> bb2;
    }

    bb2: {
        drop(_1) -> bb3;
    }

    bb3: {
        return;
    }
}

fn Conzabble::Bickwick(_1: Foo) -> Conzabble {
    let mut _0: Conzabble;

    bb0: {
        _0 = Conzabble::Bickwick(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Conzabble::Bickwick(_1: Foo) -> Conzabble {
    let mut _0: Conzabble;

    bb0: {
        _0 = Conzabble::Bickwick(move _1);
        return;
    }
}
