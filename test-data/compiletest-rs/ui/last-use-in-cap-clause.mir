// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> Box<dyn FnMut() -> isize> {
    let mut _0: std::boxed::Box<dyn std::ops::FnMut() -> isize>;
    let _1: std::boxed::Box<isize>;
    let mut _3: std::boxed::Box<isize>;
    let mut _4: &std::boxed::Box<isize>;
    let mut _5: std::boxed::Box<[closure@ui/last-use-in-cap-clause.rs:11:19: 11:21]>;
    scope 1 {
        debug k => _1;
        let _2: A;
        scope 2 {
            debug _u => _2;
            scope 3 {
                debug result => const ZeroSized: [closure@ui/last-use-in-cap-clause.rs:11:19: 11:21];
            }
        }
    }

    bb0: {
        _1 = Box::<isize>::new(const 22_isize) -> bb1;
    }

    bb1: {
        _4 = &_1;
        _3 = <Box<isize> as Clone>::clone(move _4) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _2 = A { a: move _3 };
        _5 = Box::<[closure@ui/last-use-in-cap-clause.rs:11:19: 11:21]>::new(const ZeroSized: [closure@ui/last-use-in-cap-clause.rs:11:19: 11:21]) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _0 = move _5 as std::boxed::Box<dyn std::ops::FnMut() -> isize> (Pointer(Unsize));
        drop(_2) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        drop(_1) -> bb5;
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        drop(_1) -> [return: bb8, unwind terminate];
    }

    bb8 (cleanup): {
        resume;
    }
}

fn foo::{closure#0}(_1: &[closure@ui/last-use-in-cap-clause.rs:11:19: 11:21]) -> isize {
    let mut _0: isize;

    bb0: {
        _0 = const 22_isize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&isize, &isize);
    let mut _2: &isize;
    let _3: isize;
    let mut _4: &mut std::boxed::Box<dyn std::ops::FnMut() -> isize>;
    let mut _5: std::boxed::Box<dyn std::ops::FnMut() -> isize>;
    let mut _6: &isize;
    let _7: isize;
    let _8: &isize;
    let _9: &isize;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: isize;
    let mut _13: isize;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _8;
        debug right_val => _9;
        let _14: core::panicking::AssertKind;
        scope 2 {
            debug kind => _14;
        }
    }

    bb0: {
        _5 = foo() -> bb1;
    }

    bb1: {
        _4 = &mut _5;
        _3 = <Box<dyn FnMut() -> isize> as FnMut<()>>::call_mut(move _4, const ()) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _2 = &_3;
        _7 = const 22_isize;
        _6 = &_7;
        _1 = (move _2, move _6);
        _8 = (_1.0: &isize);
        _9 = (_1.1: &isize);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<isize, isize>(move _14, _8, _9, move _16) -> bb6;
    }

    bb4: {
        drop(_5) -> bb5;
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_5) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }
}
