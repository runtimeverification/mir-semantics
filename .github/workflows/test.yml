name: 'Test'
on:
  pull_request:
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  version-bump:
    name: 'Version Bump'
    runs-on: 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.JENKINS_GITHUB_PAT }}
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - name: 'Configure GitHub user'
        run: |
          git config user.name devops
          git config user.email devops@runtimeverification.com
      - name: 'Update version'
        run: |
          og_version=$(git show origin/${GITHUB_BASE_REF}:package/version)
          ./package/version.sh bump ${og_version}
          ./package/version.sh sub
          new_version=$(cat package/version)
          git add --update && git commit --message "Set Version: $(cat package/version)" || true
      - name: 'Push updates'
        run: git push origin HEAD:${GITHUB_HEAD_REF}

  code-quality-checks:
    needs: version-bump
    name: 'Code Quality Checks'
    runs-on: ubuntu-latest
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v4
      - name: 'Install Poetry'
        uses: Gr1N/setup-poetry@v8
        with:
          poetry-version: 2.0.1
      - name: 'Run code quality checks'
        run: make check

  unit-tests:
    needs: code-quality-checks
    name: 'Unit Tests'
    runs-on: ubuntu-latest
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v4
      - name: 'Install Poetry'
        uses: Gr1N/setup-poetry@v8
        with:
          poetry-version: 2.0.1
      - name: 'Run unit tests'
        run: make test-unit

  integration-tests:
    needs: code-quality-checks
    name: 'Integration Tests'
    runs-on: [self-hosted, linux, normal]
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.JENKINS_GITHUB_PAT }}
          submodules: recursive
      - name: 'Set up Docker'
        uses: ./.github/actions/with-docker
        with:
          container-name: mir-semantics-ci-${{ github.sha }}
      - name: 'Build kmir'
        run: docker exec --user user mir-semantics-ci-${GITHUB_SHA} make build
      - name: 'Run integration tests'
        run: docker exec --user user mir-semantics-ci-${GITHUB_SHA} make test-integration
      - name: 'Tear down Docker'
        if: always()
        run: docker stop --time 0 mir-semantics-ci-${GITHUB_SHA}

  stable-mir-json-integration-tests:
    needs: code-quality-checks
    name: "Integration with stable-mir-json"
    runs-on: [self-hosted, linux, normal]
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.JENKINS_GITHUB_PAT }}
          submodules: recursive

      - name: "Set up nightly Rust" # https://github.com/rust-lang/rustup/issues/3409
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly-2024-11-29 # Hardcoded version, same as stable-mir-json

      - name: 'remove override'
        run: |
          cd deps/stable-mir-json
          rustup override unset
          rustup override unset --nonexistent
          rustup toolchain uninstall stable-mir-json | echo "rustup toolchain uninstall stable-mir-json: FAILED"
          rustup toolchain remove stable-mir-json | echo "rustup toolchain remove stable-mir-json: FAILED"

      - name: 'Build stable-mir-json'
        run: |
          make stable-mir-json

      - name: 'Set up Docker'
        uses: ./.github/actions/with-docker
        with:
          container-name: mir-smir-ci-${{ github.sha }}

      - name: 'Build kmir (within docker)'
        run: docker exec --user user mir-smir-ci-${GITHUB_SHA} make build

      - name: 'Run parser tests (within docker)'
        run: make smir-parse-tests POETRY_RUN='docker exec --user user mir-smir-ci-${GITHUB_SHA} poetry -C kmir run'

      - name: 'Tear down Docker'
        if: always()
        run: docker stop --time 0 mir-smir-ci-${GITHUB_SHA}


  publish-test-image:
    needs: version-bump
    runs-on: ubuntu-latest
    outputs:
      image-name: ${{ steps.set-image-name.outputs.image-name }}
      k-version: ${{ steps.set-image-name.outputs.k-version }}
      kmir-version: ${{ steps.set-image-name.outputs.kmir-version }}
      short-sha: ${{ steps.set-image-name.outputs.short-sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Docker ghcr.io Login
        uses: docker/login-action@v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3.10.0
      - name: Set Image Name Parameters
        id: set-image-name
        run: |
          echo "image-name=ghcr.io/runtimeverification/mir-semantics/kmir" >> $GITHUB_OUTPUT
          echo "k-version=$(cat deps/k_release)" >> $GITHUB_OUTPUT
          echo "kmir-version=$(cat package/version)" >> $GITHUB_OUTPUT
          echo "short-sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: Build Kmir Container
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.kmir
          platforms: linux/amd64
          push: true
          build-args: |
            K_VERSION=${{ steps.set-image-name.outputs.k-version }}
          tags: ${{ steps.set-image-name.outputs.image-name }}:ubuntu-jammy-${{ steps.set-image-name.outputs.kmir-version }}_${{ steps.set-image-name.outputs.k-version }}-${{ steps.set-image-name.outputs.short-sha }}

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: runtimeverification/rust-verification-proofs
          submodules: recursive
          ref: main
          path: rust-verification-proofs
      - name: Start KMIR Container
        run: |
          docker run --detach --rm --interactive --name kmir runtimeverificationinc/kmir:ubuntu-jammy-0.3.112_7.1.229-daf5158 /bin/bash
      - name: Stream files to Container
        run: |
          docker cp rust-verification-proofs kmir:/home/kmir/
      - name: kmir Prove
        run: |
          docker exec -it kmir /bin/bash -l -C 'pushd rust-verification-proofs/; for k_file in */*-spec.k; do echo "Running ${k_file}"; kmir prove run ${k_file} --proof-dir $(dirname ${k_file})/proofs; done'
      - name: Always stop container
        if: always()
        run: |
          docker stop kmir